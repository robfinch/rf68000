Sections:
00: "CODE" (0-3BD0)


Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: *    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: 
                            	    79: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    80: *	move.l	a0,6*4
                            	    81: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    82: *	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
00:00000000 610000FA        	    85: 	bsr	op_ORI_TO_CCR
00:00000004 61000118        	    86: 	bsr	op_ORI_TO_SR
00:00000008 61000136        	    87: 	bsr	op_EORI_TO_CCR
00:0000000C 61000158        	    88: 	bsr	op_EORI_TO_SR
00:00000010 6100017A        	    89: 	bsr	op_ANDI_TO_CCR
00:00000014 6100019C        	    90: 	bsr	op_ANDI_TO_SR
00:00000018 610001BE        	    91: 	bsr	op_BTST
00:0000001C 61000564        	    92: 	bsr	op_BCHG
00:00000020 610008C8        	    93: 	bsr	op_BCLR
00:00000024 61000C14        	    94: 	bsr	op_BSET
00:00000028 61000FB6        	    95: 	bsr op_MOVEP
00:0000002C 61001046        	    96: 	bsr op_BOOL_I
00:00000030 6100123E        	    97: 	bsr op_CMP_I
00:00000034 61001426        	    98: 	bsr op_ADD_I
00:00000038 610015A8        	    99: 	bsr op_SUB_I
00:0000003C 6100172A        	   100: 	bsr op_MOVE
00:00000040 61001932        	   101: 	bsr op_MOVE_xxx_FLAGS
00:00000044 61001B22        	   102: 	bsr op_EXT
00:00000048 61001B4A        	   103: 	bsr op_SWAP
00:0000004C 61001B5C        	   104: 	bsr op_LEAPEA
00:00000050 61001C04        	   105: 	bsr op_TAS
00:00000054 61001C28        	   106: 	bsr op_TST
00:00000058 61001C6A        	   107: 	bsr op_LINKS
00:0000005C 61001C84        	   108: 	bsr op_MOVE_USP
00:00000060 61001C90        	   109: 	bsr op_CHK
00:00000064 61001CC6        	   110: 	bsr op_NEGS
00:00000068 61002050        	   111: 	bsr op_MOVEM
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
00:0000006C 610025F8        	   115: 	bsr op_TRAPV
00:00000070 61002610        	   116: 	bsr op_RTR
00:00000074 610011C4        	   117: 	bsr op_BSR
00:00000078 6100262A        	   118: 	bsr op_BCC
00:0000007C 610026A6        	   119: 	bsr op_DBCC
00:00000080 610026C8        	   120: 	bsr op_SCC
00:00000084 610026EC        	   121: 	bsr op_ADDQ
00:00000088 610027A2        	   122: 	bsr op_SUBQ
00:0000008C 61002858        	   123: 	bsr op_MOVEQ
00:00000090 61002870        	   124: 	bsr op_DIVU
                            	   125: *	bsr op_DIVS
00:00000094 61002910        	   126: 	bsr op_OR
00:00000098 610029F6        	   127: 	bsr op_AND
00:0000009C 61002ADC        	   128: 	bsr op_EOR
00:000000A0 61002B4E        	   129: 	bsr op_CMP
00:000000A4 61002BC0        	   130: 	bsr op_CMPA
00:000000A8 61002C22        	   131: 	bsr op_CMPM
00:000000AC 61002CC4        	   132: 	bsr op_ADD
00:000000B0 61002DAA        	   133: 	bsr op_SUB
00:000000B4 61002E90        	   134: 	bsr op_ADDA
00:000000B8 61002ED8        	   135: 	bsr op_SUBA
00:000000BC 61002F20        	   136: 	bsr op_ADDX	
00:000000C0 6100302C        	   137: 	bsr op_SUBX
00:000000C4 61003138        	   138: 	bsr op_MULU
00:000000C8 61003180        	   139: 	bsr op_MULS
00:000000CC 610031C8        	   140: 	bsr op_EXG
00:000000D0 61003232        	   141: 	bsr op_ROx
00:000000D4 61003464        	   142: 	bsr op_ROXx
00:000000D8 61003696        	   143: 	bsr op_SHIFTS
00:000000DC 610038D4        	   144: 	bsr op_SHIFTS2
                            	   145: 
00:000000E0 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
00:000000E2 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
00:000000E4 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
00:000000EA 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: * Exception Vector = 6   CHK Instruction
                            	   164: *
                            	   165: *	align	4
                            	   166: EXCEPTION_6:
00:000000EC 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:000000F2 4E73            	   168: 	rte
                            	   169: 
                            	   170: * Exception Vector = 7   TRAPV Instruction
                            	   171: *
                            	   172: *	align	4
                            	   173: EXCEPTION_7:
00:000000F4 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:000000FA 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
00:000000FC 003C00FF        	   184:     ori.b #$FF,CCR
00:00000100 6AFE            	   185:     bpl.s *                   ; branch if Z clear
00:00000102 66FE            	   186:     bne.s *                   ; branch if N clear
00:00000104 68FE            	   187:     bvc.s *                   ; branch if V clear
00:00000106 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
00:00000108 44FC0000        	   190:     move #$00,CCR
00:0000010C 003C0000        	   191:     ori.b #$00,CCR
00:00000110 67FE            	   192:     beq.s *                   ; branch if Z set
00:00000112 6BFE            	   193:     bmi.s *                   ; branch if N set
00:00000114 69FE            	   194:     bvs.s *                   ; branch if V set
00:00000116 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
00:00000118 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
00:0000011C 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
00:0000011E 007C2FFF        	   209:     ori.w #$2FFF,SR
00:00000122 6AFE            	   210:     bpl.s *                   * branch if Z clear
00:00000124 66FE            	   211:     bne.s *                   * branch if N clear
00:00000126 68FE            	   212:     bvc.s *                   * branch if V clear
00:00000128 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
00:0000012A 46FC2000        	   215:     move.w #$2000,SR
00:0000012E 007C0000        	   216:     ori.w #$0000,SR
00:00000132 67FE            	   217:     beq.s *                   * branch if Z set
00:00000134 6BFE            	   218:     bmi.s *                   * branch if N set
00:00000136 69FE            	   219:     bvs.s *                   * branch if V set
00:00000138 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
00:0000013A 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
00:0000013E 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
00:00000140 44FC0000        	   233:     move #$00,CCR
00:00000144 0A3C00FF        	   234:     eori.b #$FF,CCR
00:00000148 6AFE            	   235:     bpl.s *                   ; branch if Z clear
00:0000014A 66FE            	   236:     bne.s *                   ; branch if N clear
00:0000014C 68FE            	   237:     bvc.s *                   ; branch if V clear
00:0000014E 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
00:00000150 44FC0000        	   240:     move #$00,CCR
00:00000154 0A3C0000        	   241:     eori.b #$00,CCR
00:00000158 67FE            	   242:     beq.s *                   ; branch if Z set
00:0000015A 6BFE            	   243:     bmi.s *                   ; branch if N set
00:0000015C 69FE            	   244:     bvs.s *                   ; branch if V set
00:0000015E 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
00:00000160 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
00:00000164 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
00:00000166 46FC2000        	   260:     move.w #$2000,SR
00:0000016A 0A7C0FFF        	   261:     eori.w #$0FFF,SR
00:0000016E 6AFE            	   262:     bpl.s *                   * branch if Z clear
00:00000170 66FE            	   263:     bne.s *                   * branch if N clear
00:00000172 68FE            	   264:     bvc.s *                   * branch if V clear
00:00000174 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
00:00000176 46FC2000        	   267:     move.w #$2000,SR
00:0000017A 0A7C0000        	   268:     eori.w #$0000,SR
00:0000017E 67FE            	   269:     beq.s *                   * branch if Z set
00:00000180 6BFE            	   270:     bmi.s *                   * branch if N set
00:00000182 69FE            	   271:     bvs.s *                   * branch if V set
00:00000184 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
00:00000186 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
00:0000018A 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
00:0000018C 44FC00FF        	   287:     move #$FF,CCR
00:00000190 023C00FF        	   288:     andi.b #$FF,CCR
00:00000194 6AFE            	   289:     bpl.s *                   * branch if Z clear
00:00000196 66FE            	   290:     bne.s *                   * branch if N clear
00:00000198 68FE            	   291:     bvc.s *                   * branch if V clear
00:0000019A 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
00:0000019C 44FC00FF        	   294:     move #$FF,CCR
00:000001A0 023C0000        	   295:     andi.b #$00,CCR
00:000001A4 67FE            	   296:     beq.s *                   * branch if Z set
00:000001A6 6BFE            	   297:     bmi.s *                   * branch if N set
00:000001A8 69FE            	   298:     bvs.s *                   * branch if V set
00:000001AA 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
00:000001AC 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
00:000001B0 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
00:000001B2 46FC20FF        	   313:     move.w #$20FF,SR
00:000001B6 027CFFFF        	   314:     andi.w #$FFFF,SR
00:000001BA 6AFE            	   315:     bpl.s *                   * branch if Z clear
00:000001BC 66FE            	   316:     bne.s *                   * branch if N clear
00:000001BE 68FE            	   317:     bvc.s *                   * branch if V clear
00:000001C0 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
00:000001C2 46FC20FF        	   320:     move.w #$20FF,SR
00:000001C6 027CFF00        	   321:     andi.w #$FF00,SR
00:000001CA 67FE            	   322:     beq.s *                   * branch if Z set
00:000001CC 6BFE            	   323:     bmi.s *                   * branch if N set
00:000001CE 69FE            	   324:     bvs.s *                   * branch if V set
00:000001D0 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
00:000001D2 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
00:000001D6 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
00:000001D8 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
00:000001DE 08000000        	   343:             btst.l #0,d0
00:000001E2 67FE            	   344:             beq.s *               * branch if Z set
00:000001E4 08000001        	   345:             btst.l #1,d0              *
00:000001E8 66FE            	   346:             bne.s *               * branch if Z clear
00:000001EA 0800001F        	   347:             btst.l #31,d0             *
00:000001EE 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
00:000001F0 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
00:000001F4 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
00:000001F8 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000001FA 08100000        	   355:             btst.b #0,(a0)
00:000001FE 67FE            	   356:             beq.s *               * branch if Z set
00:00000200 08100001        	   357:             btst.b #1,(a0)            *
00:00000204 66FE            	   358:             bne.s *               * branch if Z clear
00:00000206 08100007        	   359:             btst.b #7,(a0)            *
00:0000020A 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
00:0000020C 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000210 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
00:00000214 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
00:00000218 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
00:0000021C 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000220 08180000        	   369:             btst.b #0,(a0)+
00:00000224 67FE            	   370:             beq.s *               * branch if Z set
00:00000226 08180001        	   371:             btst.b #1,(a0)+           *
00:0000022A 66FE            	   372:             bne.s *               * branch if Z clear
00:0000022C 08180007        	   373:             btst.b #7,(a0)+           *
00:00000230 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
00:00000232 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
00:00000236 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
00:0000023A 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
00:0000023E 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
00:00000242 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
00:00000246 08200000        	   383:             btst.b #0,-(a0)
00:0000024A 67FE            	   384:             beq.s *               * branch if Z set
00:0000024C 08200001        	   385:             btst.b #1,-(a0)           *
00:00000250 66FE            	   386:             bne.s *               * branch if Z clear
00:00000252 08200007        	   387:             btst.b #7,-(a0)           *
00:00000256 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
00:00000258 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
00:0000025C 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
00:00000260 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
00:00000264 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
00:00000268 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
00:0000026C 08100000        	   397:             btst.b #0,0(a0)
00:00000270 67FE            	   398:             beq.s *               * branch if Z set
00:00000272 082800010001    	   399:             btst.b #1,1(a0)           *
00:00000278 66FE            	   400:             bne.s *               * branch if Z clear
00:0000027A 082800070002    	   401:             btst.b #7,2(a0)           *
00:00000280 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
00:00000282 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
00:00000286 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
00:00000288 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
00:0000028C 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
00:0000028E 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
00:00000290 083000000000    	   411:             btst.b #0,0(a0,d0.w)
00:00000296 67FE            	   412:             beq.s *               * branch if Z set
00:00000298 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
00:0000029E 66FE            	   414:             bne.s *               * branch if Z clear
00:000002A0 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
00:000002A6 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
00:000002A8 083000000800    	   418:             btst.b #0,0(a0,d0.l)
00:000002AE 67FE            	   419:             beq.s *               * branch if Z set
00:000002B0 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
00:000002B6 66FE            	   421:             bne.s *               * branch if Z clear
00:000002B8 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
00:000002BE 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
00:000002C0 083000009000    	   425:             btst.b #0,0(a0,a1.w)
00:000002C6 67FE            	   426:             beq.s *               * branch if Z set
00:000002C8 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
00:000002CE 66FE            	   428:             bne.s *               * branch if Z clear
00:000002D0 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
00:000002D6 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
00:000002D8 083000009800    	   432:             btst.b #0,0(a0,a1.l)
00:000002DE 67FE            	   433:             beq.s *               * branch if Z set
00:000002E0 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
00:000002E6 66FE            	   435:             bne.s *               * branch if Z clear
00:000002E8 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
00:000002EE 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
00:000002F0 083800000100    	   441:             btst.b #0,$0100
00:000002F6 67FE            	   442:             beq.s *               * branch if Z set
00:000002F8 083800010101    	   443:             btst.b #1,$0101           *
00:000002FE 66FE            	   444:             bne.s *               * branch if Z clear
00:00000300 083800070102    	   445:             btst.b #7,$0102           *
00:00000306 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
00:00000308 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
00:0000030E 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
00:00000312 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
00:00000316 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
00:0000031A 083900000000F100	   454:             btst.b #0,$F100
00:00000322 67FE            	   455:             beq.s *               * branch if Z set
00:00000324 083900010000F101	   456:             btst.b #1,$F101       *
00:0000032C 66FE            	   457:             bne.s *               * branch if Z clear
00:0000032E 083900070000F102	   458:             btst.b #7,$F102       *
00:00000336 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
00:00000338 4BFAFE9E        	   463:             lea op_BTST(pc),a5
00:0000033C 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
00:00000342 66FE            	   465:             bne.s *               * branch if Z clear
00:00000344 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
00:0000034A 67FE            	   467:             beq.s *               * branch if Z set
00:0000034C 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
00:00000352 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
00:00000354 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
00:00000358 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
00:0000035A 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
00:0000035E 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
00:00000360 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
00:00000362 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:00000368 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
00:0000036A 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
00:0000036E 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:00000374 67FE            	   484:             beq.s *               * branch if Z set
00:00000376 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:0000037C 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
00:0000037E 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:00000384 66FE            	   489:             bne.s *               * branch if Z clear
00:00000386 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:0000038C 67FE            	   491:             beq.s *               * branch if Z set
00:0000038E 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:00000394 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
00:00000396 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:0000039C 66FE            	   496:             bne.s *               * branch if Z clear
00:0000039E 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:000003A4 67FE            	   498:             beq.s *               * branch if Z set
00:000003A6 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:000003AC 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
00:000003AE 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:000003B4 66FE            	   503:             bne.s *               * branch if Z clear
00:000003B6 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:000003BC 67FE            	   505:             beq.s *               * branch if Z set
00:000003BE 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:000003C4 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
00:000003C6 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
00:000003CC 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
00:000003CE 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
00:000003D0 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
00:000003D2 0B00            	   519:             btst.l d5,d0
00:000003D4 67FE            	   520:             beq.s *               * branch if Z set
00:000003D6 0D00            	   521:             btst.l d6,d0              *
00:000003D8 66FE            	   522:             bne.s *               * branch if Z clear
00:000003DA 0F00            	   523:             btst.l d7,d0             *
00:000003DC 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
00:000003DE 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
00:000003E0 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
00:000003E2 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
00:000003E4 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
00:000003E8 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
00:000003EC 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000003EE 0B10            	   534:             btst.b d5,(a0)
00:000003F0 67FE            	   535:             beq.s *               * branch if Z set
00:000003F2 0D10            	   536:             btst.b d6,(a0)            *
00:000003F4 66FE            	   537:             bne.s *               * branch if Z clear
00:000003F6 0F10            	   538:             btst.b d7,(a0)            *
00:000003F8 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
00:000003FA 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
00:000003FE 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
00:00000402 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
00:00000406 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
00:0000040A 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000040E 0B18            	   550:             btst.b d5,(a0)+
00:00000410 67FE            	   551:             beq.s *               * branch if Z set
00:00000412 0D18            	   552:             btst.b d6,(a0)+           *
00:00000414 66FE            	   553:             bne.s *               * branch if Z clear
00:00000416 0F18            	   554:             btst.b d7,(a0)+           *
00:00000418 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
00:0000041A 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
00:0000041E 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
00:00000422 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
00:00000426 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
00:0000042A 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
00:0000042E 0B20            	   564:             btst.b d5,-(a0)
00:00000430 67FE            	   565:             beq.s *               * branch if Z set
00:00000432 0D20            	   566:             btst.b d6,-(a0)           *
00:00000434 66FE            	   567:             bne.s *               * branch if Z clear
00:00000436 0F20            	   568:             btst.b d7,-(a0)           *
00:00000438 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
00:0000043A 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
00:0000043E 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
00:00000442 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
00:00000446 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
00:0000044A 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
00:0000044E 0B10            	   578:             btst.b d5,0(a0)
00:00000450 67FE            	   579:             beq.s *               * branch if Z set
00:00000452 0D280001        	   580:             btst.b d6,1(a0)           *
00:00000456 66FE            	   581:             bne.s *               * branch if Z clear
00:00000458 0F280002        	   582:             btst.b d7,2(a0)           *
00:0000045C 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
00:0000045E 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
00:00000462 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
00:00000464 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
00:00000468 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
00:0000046A 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
00:0000046C 0B300000        	   592:             btst.b d5,0(a0,d0.w)
00:00000470 67FE            	   593:             beq.s *               * branch if Z set
00:00000472 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
00:00000476 66FE            	   595:             bne.s *               * branch if Z clear
00:00000478 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
00:0000047C 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
00:0000047E 0B300800        	   599:             btst.b d5,0(a0,d0.l)
00:00000482 67FE            	   600:             beq.s *               * branch if Z set
00:00000484 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
00:00000488 66FE            	   602:             bne.s *               * branch if Z clear
00:0000048A 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
00:0000048E 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
00:00000490 0B309000        	   606:             btst.b d5,0(a0,a1.w)
00:00000494 67FE            	   607:             beq.s *               * branch if Z set
00:00000496 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
00:0000049A 66FE            	   609:             bne.s *               * branch if Z clear
00:0000049C 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
00:000004A0 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
00:000004A2 0B309800        	   613:             btst.b d5,0(a0,a1.l)
00:000004A6 67FE            	   614:             beq.s *               * branch if Z set
00:000004A8 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
00:000004AC 66FE            	   616:             bne.s *               * branch if Z clear
00:000004AE 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
00:000004B2 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
00:000004B4 0B380100        	   622:             btst.b d5,$0100
00:000004B8 67FE            	   623:             beq.s *               * branch if Z set
00:000004BA 0D380101        	   624:             btst.b d6,$0101           *
00:000004BE 66FE            	   625:             bne.s *               * branch if Z clear
00:000004C0 0F380102        	   626:             btst.b d7,$0102           *
00:000004C4 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
00:000004C6 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
00:000004CC 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
00:000004D0 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
00:000004D4 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
00:000004D8 0B390000F100    	   635:             btst.b d5,$F100
00:000004DE 67FE            	   636:             beq.s *               * branch if Z set
00:000004E0 0D390000F101    	   637:             btst.b d6,$F101       *
00:000004E6 66FE            	   638:             bne.s *               * branch if Z clear
00:000004E8 0F390000F102    	   639:             btst.b d7,$F102       *
00:000004EE 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
00:000004F0 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
00:000004F2 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
00:000004F4 4BFAFCE2        	   646:             lea op_BTST(pc),a5
00:000004F8 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
00:000004FC 66FE            	   648:             bne.s *               * branch if Z clear
00:000004FE 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
00:00000502 67FE            	   650:             beq.s *               * branch if Z set
00:00000504 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
00:00000508 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
00:0000050A 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
00:0000050E 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
00:00000510 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
00:00000514 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
00:00000516 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
00:00000518 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
00:0000051A 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
00:0000051C 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:00000520 67FE            	   665:             beq.s *               * branch if Z set
00:00000522 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
00:00000526 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:0000052A 67FE            	   668:             beq.s *               * branch if Z set
00:0000052C 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:00000530 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
00:00000532 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:00000536 67FE            	   673:             beq.s *               * branch if Z set
00:00000538 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:0000053C 67FE            	   675:             beq.s *               * branch if Z set
00:0000053E 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:00000542 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
00:00000544 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:00000548 67FE            	   680:             beq.s *               * branch if Z set
00:0000054A 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:0000054E 67FE            	   682:             beq.s *               * branch if Z set
00:00000550 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:00000554 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
00:00000556 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:0000055A 67FE            	   687:             beq.s *               * branch if Z set
00:0000055C 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:00000560 67FE            	   689:             beq.s *               * branch if Z set
00:00000562 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:00000566 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
00:00000568 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
00:0000056A 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
00:0000056C 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
00:0000056E 0B3C0088        	   699:             btst.b d5,#$88
00:00000572 66FE            	   700:             bne.s *               * branch if Z clear
00:00000574 0D3C0088        	   701:             btst.b d6,#$88
00:00000578 67FE            	   702:             beq.s *               * branch if Z set
00:0000057A 0F3C0088        	   703:             btst.b d7,#$88
00:0000057E 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
00:00000580 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
00:00000582 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
00:00000588 08400000        	   721:             bchg.l #0,d0
00:0000058C 67FE            	   722:             beq.s *               * branch if Z set
00:0000058E 08400001        	   723:             bchg.l #1,d0              *
00:00000592 66FE            	   724:             bne.s *               * branch if Z clear
00:00000594 0840001F        	   725:             bchg.l #31,d0             *
00:00000598 67FE            	   726:             beq.s *               * branch if Z set
00:0000059A 0C8000000002    	   727:             cmpi.l #$00000002,d0
00:000005A0 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
00:000005A2 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005A6 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
00:000005AA 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000005AC 08500000        	   735:             bchg.b #0,(a0)
00:000005B0 67FE            	   736:             beq.s *               * branch if Z set
00:000005B2 08500001        	   737:             bchg.b #1,(a0)            *
00:000005B6 66FE            	   738:             bne.s *               * branch if Z clear
00:000005B8 08500007        	   739:             bchg.b #7,(a0)            *
00:000005BC 67FE            	   740:             beq.s *               * branch if Z set
00:000005BE 0C100002        	   741:             cmpi.b #$02,(a0)
00:000005C2 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
00:000005C4 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005C8 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
00:000005CC 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
00:000005D0 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
00:000005D4 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005D8 08580000        	   750:             bchg.b #0,(a0)+
00:000005DC 67FE            	   751:             beq.s *               * branch if Z set
00:000005DE 08580001        	   752:             bchg.b #1,(a0)+           *
00:000005E2 66FE            	   753:             bne.s *               * branch if Z clear
00:000005E4 08580007        	   754:             bchg.b #7,(a0)+           *
00:000005E8 67FE            	   755:             beq.s *               * branch if Z set
00:000005EA 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005EE 4A18            	   757:             cmpi.b #$00,(a0)+
00:000005F0 66FE            	   758:             bne.s *               * branch if Z clear
00:000005F2 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
00:000005F6 66FE            	   760:             bne.s *               * branch if Z clear
00:000005F8 4A18            	   761:             cmpi.b #$00,(a0)+
00:000005FA 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
00:000005FC 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
00:00000600 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
00:00000604 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
00:00000608 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
00:0000060C 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
00:00000610 08600000        	   770:             bchg.b #0,-(a0)
00:00000614 67FE            	   771:             beq.s *               * branch if Z set
00:00000616 08600001        	   772:             bchg.b #1,-(a0)           *
00:0000061A 66FE            	   773:             bne.s *               * branch if Z clear
00:0000061C 08600007        	   774:             bchg.b #7,-(a0)           *
00:00000620 67FE            	   775:             beq.s *               * branch if Z set
00:00000622 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000626 4A20            	   777:             cmpi.b #$00,-(a0)
00:00000628 66FE            	   778:             bne.s *               * branch if Z clear
00:0000062A 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
00:0000062E 66FE            	   780:             bne.s *               * branch if Z clear
00:00000630 4A20            	   781:             cmpi.b #$00,-(a0)
00:00000632 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
00:00000634 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
00:00000638 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
00:0000063C 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
00:00000640 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
00:00000644 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
00:00000648 08500000        	   791:             bchg.b #0,0(a0)
00:0000064C 67FE            	   792:             beq.s *               * branch if Z set
00:0000064E 086800010001    	   793:             bchg.b #1,1(a0)           *
00:00000654 66FE            	   794:             bne.s *               * branch if Z clear
00:00000656 086800070002    	   795:             bchg.b #7,2(a0)           *
00:0000065C 67FE            	   796:             beq.s *               * branch if Z set
00:0000065E 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000662 4A18            	   798:             cmpi.b #$00,(a0)+
00:00000664 66FE            	   799:             bne.s *               * branch if Z clear
00:00000666 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
00:0000066A 66FE            	   801:             bne.s *               * branch if Z clear
00:0000066C 4A18            	   802:             cmpi.b #$00,(a0)+
00:0000066E 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
00:00000670 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
00:00000674 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
00:00000676 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
00:0000067A 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
00:0000067C 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
00:0000067E 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
00:00000684 66FE            	   813:             bne.s *               * branch if Z clear
00:00000686 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
00:0000068C 67FE            	   815:             beq.s *               * branch if Z set
00:0000068E 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
00:00000694 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
00:00000696 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
00:0000069C 67FE            	   820:             beq.s *               * branch if Z set
00:0000069E 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
00:000006A4 66FE            	   822:             bne.s *               * branch if Z clear
00:000006A6 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
00:000006AC 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
00:000006AE 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
00:000006B4 66FE            	   827:             bne.s *               * branch if Z clear
00:000006B6 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
00:000006BC 67FE            	   829:             beq.s *               * branch if Z set
00:000006BE 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
00:000006C4 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
00:000006C6 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
00:000006CC 67FE            	   834:             beq.s *               * branch if Z set
00:000006CE 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
00:000006D4 66FE            	   836:             bne.s *               * branch if Z clear
00:000006D6 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
00:000006DC 67FE            	   838:             beq.s *               * branch if Z set
00:000006DE 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
00:000006E2 4A18            	   840:             cmpi.b #$00,(a0)+
00:000006E4 66FE            	   841:             bne.s *               * branch if Z clear
00:000006E6 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
00:000006EA 66FE            	   843:             bne.s *               * branch if Z clear
00:000006EC 4A18            	   844:             cmpi.b #$00,(a0)+
00:000006EE 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
00:000006F0 087800000100    	   849:             bchg.b #0,$0100
00:000006F6 66FE            	   850:             bne.s *               * branch if Z clear
00:000006F8 087800010101    	   851:             bchg.b #1,$0101           *
00:000006FE 67FE            	   852:             beq.s *               * branch if Z set
00:00000700 087800070102    	   853:             bchg.b #7,$0102           *
00:00000706 66FE            	   854:             bne.s *               * branch if Z clear
00:00000708 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000070C 0C180001        	   856:             cmpi.b #$01,(a0)+
00:00000710 66FE            	   857:             bne.s *               * branch if Z clear
00:00000712 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
00:00000716 66FE            	   859:             bne.s *               * branch if Z clear
00:00000718 0C180080        	   860:             cmpi.b #$80,(a0)+
00:0000071C 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
00:0000071E 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
00:00000724 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
00:00000728 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
00:0000072C 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
00:00000730 087900000000F100	   868:             bchg.b #0,$F100
00:00000738 67FE            	   869:             beq.s *               * branch if Z set
00:0000073A 087900010000F101	   870:             bchg.b #1,$F101       *
00:00000742 66FE            	   871:             bne.s *               * branch if Z clear
00:00000744 087900070000F102	   872:             bchg.b #7,$F102       *
00:0000074C 67FE            	   873:             beq.s *               * branch if Z set
00:0000074E 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000752 0C180001        	   875:             cmpi.b #$01,(a0)+
00:00000756 66FE            	   876:             bne.s *               * branch if Z clear
00:00000758 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
00:0000075C 66FE            	   878:             bne.s *               * branch if Z clear
00:0000075E 0C180080        	   879:             cmpi.b #$80,(a0)+
00:00000762 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
00:00000764 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
00:0000076A 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
00:0000076C 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
00:0000076E 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
00:00000770 0B40            	   891:             bchg.l d5,d0
00:00000772 67FE            	   892:             beq.s *               * branch if Z set
00:00000774 0D40            	   893:             bchg.l d6,d0              *
00:00000776 66FE            	   894:             bne.s *               * branch if Z clear
00:00000778 0F40            	   895:             bchg.l d7,d0             *
00:0000077A 67FE            	   896:             beq.s *               * branch if Z set
00:0000077C 0C8000000002    	   897:             cmpi.l #$00000002,d0
00:00000782 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
00:00000784 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
00:00000786 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
00:00000788 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
00:0000078A 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000078E 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
00:00000792 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00000794 0B50            	   908:             bchg.b d5,(a0)
00:00000796 67FE            	   909:             beq.s *               * branch if Z set
00:00000798 0D50            	   910:             bchg.b d6,(a0)            *
00:0000079A 66FE            	   911:             bne.s *               * branch if Z clear
00:0000079C 0F50            	   912:             bchg.b d7,(a0)            *
00:0000079E 67FE            	   913:             beq.s *               * branch if Z set
00:000007A0 0C100002        	   914:             cmpi.b #$02,(a0)
00:000007A4 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
00:000007A6 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007AA 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
00:000007AE 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
00:000007B2 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
00:000007B6 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007BA 0B58            	   924:             bchg.b d5,(a0)+
00:000007BC 67FE            	   925:             beq.s *               * branch if Z set
00:000007BE 0D58            	   926:             bchg.b d6,(a0)+           *
00:000007C0 66FE            	   927:             bne.s *               * branch if Z clear
00:000007C2 0F58            	   928:             bchg.b d7,(a0)+           *
00:000007C4 67FE            	   929:             beq.s *               * branch if Z set
00:000007C6 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007CA 4A18            	   931:             cmpi.b #$00,(a0)+
00:000007CC 66FE            	   932:             bne.s *               * branch if Z clear
00:000007CE 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
00:000007D2 66FE            	   934:             bne.s *               * branch if Z clear
00:000007D4 4A18            	   935:             cmpi.b #$00,(a0)+
00:000007D6 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
00:000007D8 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
00:000007DC 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
00:000007E0 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
00:000007E4 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
00:000007E8 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
00:000007EC 0B60            	   944:             bchg.b d5,-(a0)
00:000007EE 67FE            	   945:             beq.s *               * branch if Z set
00:000007F0 0D60            	   946:             bchg.b d6,-(a0)           *
00:000007F2 66FE            	   947:             bne.s *               * branch if Z clear
00:000007F4 0F60            	   948:             bchg.b d7,-(a0)           *
00:000007F6 67FE            	   949:             beq.s *               * branch if Z set
00:000007F8 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
00:000007FC 4A20            	   951:             cmpi.b #$00,-(a0)
00:000007FE 66FE            	   952:             bne.s *               * branch if Z clear
00:00000800 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
00:00000804 66FE            	   954:             bne.s *               * branch if Z clear
00:00000806 4A20            	   955:             cmpi.b #$00,-(a0)
00:00000808 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
00:0000080A 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
00:0000080E 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
00:00000812 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
00:00000816 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
00:0000081A 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
00:0000081E 0B50            	   964:             bchg.b d5,0(a0)
00:00000820 67FE            	   965:             beq.s *               * branch if Z set
00:00000822 0D680001        	   966:             bchg.b d6,1(a0)           *
00:00000826 66FE            	   967:             bne.s *               * branch if Z clear
00:00000828 0F680002        	   968:             bchg.b d7,2(a0)           *
00:0000082C 67FE            	   969:             beq.s *               * branch if Z set
00:0000082E 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000832 4A18            	   971:             cmpi.b #$00,(a0)+
00:00000834 66FE            	   972:             bne.s *               * branch if Z clear
00:00000836 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
00:0000083A 66FE            	   974:             bne.s *               * branch if Z clear
00:0000083C 4A18            	   975:             cmpi.b #$00,(a0)+
00:0000083E 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
00:00000840 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
00:00000844 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
00:00000846 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
00:0000084A 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
00:0000084C 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
00:0000084E 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
00:00000852 66FE            	   985:             bne.s *               * branch if Z clear
00:00000854 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
00:00000858 67FE            	   987:             beq.s *               * branch if Z set
00:0000085A 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
00:0000085E 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
00:00000860 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
00:00000864 67FE            	   992:             beq.s *               * branch if Z set
00:00000866 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
00:0000086A 66FE            	   994:             bne.s *               * branch if Z clear
00:0000086C 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
00:00000870 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
00:00000872 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
00:00000876 66FE            	   999:             bne.s *               * branch if Z clear
00:00000878 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
00:0000087C 67FE            	  1001:             beq.s *               * branch if Z set
00:0000087E 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
00:00000882 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
00:00000884 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
00:00000888 67FE            	  1006:             beq.s *               * branch if Z set
00:0000088A 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
00:0000088E 66FE            	  1008:             bne.s *               * branch if Z clear
00:00000890 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
00:00000894 67FE            	  1010:             beq.s *               * branch if Z set
00:00000896 4A18            	  1011:             cmpi.b #$00,(a0)+
00:00000898 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
00:0000089A 0B780100        	  1015:             bchg.b d5,$0100
00:0000089E 66FE            	  1016:             bne.s *               * branch if Z clear
00:000008A0 0D780101        	  1017:             bchg.b d6,$0101           *
00:000008A4 67FE            	  1018:             beq.s *               * branch if Z set
00:000008A6 0F780102        	  1019:             bchg.b d7,$0102           *
00:000008AA 66FE            	  1020:             bne.s *               * branch if Z clear
00:000008AC 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
00:000008B0 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
00:000008B2 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
00:000008B8 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
00:000008BC 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
00:000008C0 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
00:000008C4 0B790000F100    	  1029:             bchg.b d5,$F100
00:000008CA 67FE            	  1030:             beq.s *               * branch if Z set
00:000008CC 0D790000F101    	  1031:             bchg.b d6,$F101       *
00:000008D2 66FE            	  1032:             bne.s *               * branch if Z clear
00:000008D4 0F790000F102    	  1033:             bchg.b d7,$F102       *
00:000008DA 67FE            	  1034:             beq.s *               * branch if Z set
00:000008DC 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
00:000008E2 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
00:000008E6 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
00:000008E8 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
00:000008EA 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
00:000008F0 08800000        	  1054:             bclr.l #0,d0
00:000008F4 67FE            	  1055:             beq.s *               * branch if Z set
00:000008F6 08800001        	  1056:             bclr.l #1,d0              *
00:000008FA 67FE            	  1057:             beq.s *               * branch if Z set
00:000008FC 0880000F        	  1058:             bclr.l #15,d0             *
00:00000900 66FE            	  1059:             bne.s *               * branch if Z clear
00:00000902 0880001F        	  1060:             bclr.l #31,d0             *
00:00000906 67FE            	  1061:             beq.s *               * branch if Z set
00:00000908 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
00:0000090E 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
00:00000910 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000914 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
00:00000918 08900000        	  1069:             bclr.b #0,(a0)
00:0000091C 67FE            	  1070:             beq.s *               * branch if Z set
00:0000091E 08900007        	  1071:             bclr.b #7,(a0)            *
00:00000922 66FE            	  1072:             bne.s *               * branch if Z clear
00:00000924 0C10000E        	  1073:             cmpi.b #$0E,(a0)
00:00000928 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
00:0000092A 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000092E 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
00:00000932 10FC0000        	  1079:             move.b #$00,(a0)+         * populate test data
00:00000936 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000093A 08980000        	  1081:             bclr.b #0,(a0)+
00:0000093E 67FE            	  1082:             beq.s *               * branch if Z set
00:00000940 08980001        	  1083:             bclr.b #1,(a0)+           *
00:00000944 66FE            	  1084:             bne.s *               * branch if Z clear
00:00000946 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000094A 4A18            	  1086:             cmpi.b #$00,(a0)+
00:0000094C 66FE            	  1087:             bne.s *               * branch if Z clear
00:0000094E 4A18            	  1088:             cmpi.b #$00,(a0)+
00:00000950 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
00:00000952 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
00:00000956 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
00:0000095A 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
00:0000095E 08A00007        	  1096:             bclr.b #7,-(a0)
00:00000962 67FE            	  1097:             beq.s *               * branch if Z set
00:00000964 08A00000        	  1098:             bclr.b #0,-(a0)           *
00:00000968 67FE            	  1099:             beq.s *               * branch if Z set
00:0000096A 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
00:0000096E 4A20            	  1101:             cmpi.b #$00,-(a0)
00:00000970 66FE            	  1102:             bne.s *               * branch if Z clear
00:00000972 4A20            	  1103:             cmpi.b #$00,-(a0)
00:00000974 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
00:00000976 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
00:0000097A 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
00:0000097E 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
00:00000982 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
00:00000986 08900000        	  1112:             bclr.b #0,0(a0)
00:0000098A 67FE            	  1113:             beq.s *               * branch if Z set
00:0000098C 08A800040001    	  1114:             bclr.b #4,1(a0)           *
00:00000992 67FE            	  1115:             beq.s *               * branch if Z set
00:00000994 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000998 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
00:0000099C 66FE            	  1118:             bne.s *               * branch if Z clear
00:0000099E 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
00:000009A2 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
00:000009A4 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
00:000009A8 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
00:000009AA 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
00:000009AE 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
00:000009B0 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
00:000009B2 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
00:000009B6 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
00:000009BA 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
00:000009BE 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
00:000009C4 67FE            	  1133:             beq.s *               * branch if Z set
00:000009C6 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
00:000009CC 67FE            	  1135:             beq.s *               * branch if Z set
00:000009CE 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
00:000009D4 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
00:000009D6 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
00:000009DC 67FE            	  1140:             beq.s *               * branch if Z set
00:000009DE 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
00:000009E4 67FE            	  1142:             beq.s *               * branch if Z set
00:000009E6 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
00:000009EC 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
00:000009EE 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
00:000009F4 67FE            	  1147:             beq.s *               * branch if Z set
00:000009F6 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
00:000009FC 66FE            	  1149:             bne.s *               * branch if Z clear
00:000009FE 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
00:00000A04 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
00:00000A06 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
00:00000A0C 66FE            	  1154:             bne.s *               * branch if Z clear
00:00000A0E 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
00:00000A14 67FE            	  1156:             beq.s *               * branch if Z set
00:00000A16 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
00:00000A1C 66FE            	  1158:             bne.s *               * branch if Z clear
00:00000A1E 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A22 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
00:00000A26 66FE            	  1161:             bne.s *               * branch if Z clear
00:00000A28 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
00:00000A2C 66FE            	  1163:             bne.s *               * branch if Z clear
00:00000A2E 0C180059        	  1164:             cmpi.b #$59,(a0)+
00:00000A32 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
00:00000A34 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
00:00000A38 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
00:00000A3C 08B800000100    	  1171:             bclr.b #0,$0100
00:00000A42 67FE            	  1172:             beq.s *               * branch if Z set
00:00000A44 08B800010100    	  1173:             bclr.b #1,$0100           *
00:00000A4A 67FE            	  1174:             beq.s *               * branch if Z set
00:00000A4C 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A50 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
00:00000A54 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
00:00000A56 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A5C 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
00:00000A60 08B900000000F100	  1183:             bclr.b #0,$F100
00:00000A68 67FE            	  1184:             beq.s *               * branch if Z set
00:00000A6A 08B900010000F100	  1185:             bclr.b #1,$F100       *
00:00000A72 67FE            	  1186:             beq.s *               * branch if Z set
00:00000A74 08B900020000F100	  1187:             bclr.b #2,$F100       *
00:00000A7C 67FE            	  1188:             beq.s *               * branch if Z set
00:00000A7E 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A84 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
00:00000A88 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
00:00000A8A 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
00:00000A90 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
00:00000A92 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
00:00000A94 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
00:00000A96 0B80            	  1202:             bclr.l d5,d0
00:00000A98 66FE            	  1203:             bne.s *               * branch if Z clear
00:00000A9A 0D80            	  1204:             bclr.l d6,d0              *
00:00000A9C 66FE            	  1205:             bne.s *               * branch if Z clear
00:00000A9E 0F80            	  1206:             bclr.l d7,d0             *
00:00000AA0 67FE            	  1207:             beq.s *               * branch if Z set
00:00000AA2 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
00:00000AA8 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
00:00000AAA 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
00:00000AAC 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
00:00000AAE 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
00:00000AB0 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AB4 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
00:00000AB8 0B90            	  1218:             bclr.b d5,(a0)
00:00000ABA 67FE            	  1219:             beq.s *               * branch if Z set
00:00000ABC 0D90            	  1220:             bclr.b d6,(a0)            *
00:00000ABE 66FE            	  1221:             bne.s *               * branch if Z clear
00:00000AC0 0F90            	  1222:             bclr.b d7,(a0)            *
00:00000AC2 67FE            	  1223:             beq.s *               * branch if Z set
00:00000AC4 4A10            	  1224:             cmpi.b #$00,(a0)
00:00000AC6 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
00:00000AC8 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000ACC 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
00:00000AD0 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
00:00000AD4 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
00:00000AD8 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000ADC 0B98            	  1234:             bclr.b d5,(a0)+
00:00000ADE 67FE            	  1235:             beq.s *               * branch if Z set
00:00000AE0 0D98            	  1236:             bclr.b d6,(a0)+           *
00:00000AE2 66FE            	  1237:             bne.s *               * branch if Z clear
00:00000AE4 0F98            	  1238:             bclr.b d7,(a0)+           *
00:00000AE6 67FE            	  1239:             beq.s *               * branch if Z set
00:00000AE8 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AEC 4A18            	  1241:             cmpi.b #$00,(a0)+
00:00000AEE 66FE            	  1242:             bne.s *               * branch if Z clear
00:00000AF0 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
00:00000AF4 66FE            	  1244:             bne.s *               * branch if Z clear
00:00000AF6 4A18            	  1245:             cmpi.b #$00,(a0)+
00:00000AF8 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
00:00000AFA 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
00:00000AFE 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
00:00000B02 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
00:00000B06 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
00:00000B0A 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
00:00000B0E 0BA0            	  1254:             bclr.b d5,-(a0)
00:00000B10 67FE            	  1255:             beq.s *               * branch if Z set
00:00000B12 0DA0            	  1256:             bclr.b d6,-(a0)           *
00:00000B14 66FE            	  1257:             bne.s *               * branch if Z clear
00:00000B16 0FA0            	  1258:             bclr.b d7,-(a0)           *
00:00000B18 67FE            	  1259:             beq.s *               * branch if Z set
00:00000B1A 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000B1E 4A20            	  1261:             cmpi.b #$00,-(a0)
00:00000B20 66FE            	  1262:             bne.s *               * branch if Z clear
00:00000B22 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
00:00000B26 66FE            	  1264:             bne.s *               * branch if Z clear
00:00000B28 4A20            	  1265:             cmpi.b #$00,-(a0)
00:00000B2A 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
00:00000B2C 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
00:00000B30 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
00:00000B34 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
00:00000B38 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
00:00000B3C 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
00:00000B40 0B90            	  1274:             bclr.b d5,0(a0)
00:00000B42 67FE            	  1275:             beq.s *               * branch if Z set
00:00000B44 0DA80001        	  1276:             bclr.b d6,1(a0)           *
00:00000B48 66FE            	  1277:             bne.s *               * branch if Z clear
00:00000B4A 0FA80002        	  1278:             bclr.b d7,2(a0)           *
00:00000B4E 67FE            	  1279:             beq.s *               * branch if Z set
00:00000B50 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000B54 4A18            	  1281:             cmpi.b #$00,(a0)+
00:00000B56 66FE            	  1282:             bne.s *               * branch if Z clear
00:00000B58 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
00:00000B5C 66FE            	  1284:             bne.s *               * branch if Z clear
00:00000B5E 4A18            	  1285:             cmpi.b #$00,(a0)+
00:00000B60 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
00:00000B62 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
00:00000B66 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
00:00000B6A 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
00:00000B6E 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:00000B72 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
00:00000B76 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
00:00000B7A 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
00:00000B7C 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
00:00000B80 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
00:00000B82 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
00:00000B84 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
00:00000B88 67FE            	  1300:             beq.s *               * branch if Z set
00:00000B8A 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
00:00000B8E 67FE            	  1302:             beq.s *               * branch if Z set
00:00000B90 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
00:00000B94 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
00:00000B96 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
00:00000B9A 66FE            	  1307:             bne.s *               * branch if Z clear
00:00000B9C 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
00:00000BA0 66FE            	  1309:             bne.s *               * branch if Z clear
00:00000BA2 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
00:00000BA6 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
00:00000BA8 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
00:00000BAC 66FE            	  1314:             bne.s *               * branch if Z clear
00:00000BAE 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
00:00000BB2 66FE            	  1316:             bne.s *               * branch if Z clear
00:00000BB4 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
00:00000BB8 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
00:00000BBA 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
00:00000BBE 66FE            	  1321:             bne.s *               * branch if Z clear
00:00000BC0 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
00:00000BC4 66FE            	  1323:             bne.s *               * branch if Z clear
00:00000BC6 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
00:00000BCA 66FE            	  1325:             bne.s *               * branch if Z clear
00:00000BCC 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
00:00000BD0 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
00:00000BD4 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
00:00000BD6 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
00:00000BDA 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
00:00000BDE 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
00:00000BE2 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:00000BE6 0BB80100        	  1335:             bclr.b d5,$0100
00:00000BEA 67FE            	  1336:             beq.s *               * branch if Z set
00:00000BEC 0DB80101        	  1337:             bclr.b d6,$0101           *
00:00000BF0 67FE            	  1338:             beq.s *               * branch if Z set
00:00000BF2 0FB80102        	  1339:             bclr.b d7,$0102           *
00:00000BF6 67FE            	  1340:             beq.s *               * branch if Z set
00:00000BF8 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
00:00000BFC 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
00:00000C00 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
00:00000C02 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
00:00000C08 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
00:00000C0C 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
00:00000C10 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
00:00000C14 0BB90000F100    	  1350:             bclr.b d5,$F100
00:00000C1A 67FE            	  1351:             beq.s *               * branch if Z set
00:00000C1C 0DB90000F101    	  1352:             bclr.b d6,$F101       *
00:00000C22 66FE            	  1353:             bne.s *               * branch if Z clear
00:00000C24 0FB90000F102    	  1354:             bclr.b d7,$F102       *
00:00000C2A 67FE            	  1355:             beq.s *               * branch if Z set
00:00000C2C 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
00:00000C32 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
00:00000C36 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
00:00000C38 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
00:00000C3A 7000            	  1375:             moveq  #$00000000,d0      * populate test data
00:00000C3C 08C00000        	  1376:             bset.l #0,d0
00:00000C40 66FE            	  1377:             bne.s *               * branch if Z clear
00:00000C42 08C00001        	  1378:             bset.l #1,d0              *
00:00000C46 66FE            	  1379:             bne.s *               * branch if Z clear
00:00000C48 08C0000F        	  1380:             bset.l #15,d0             *
00:00000C4C 66FE            	  1381:             bne.s *               * branch if Z clear
00:00000C4E 08C0001F        	  1382:             bset.l #31,d0             *
00:00000C52 66FE            	  1383:             bne.s *               * branch if Z clear
00:00000C54 0C8080008003    	  1384:             cmpi.l #$80008003,d0
00:00000C5A 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
00:00000C5C 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C60 10BC0000        	  1390:             move.b #$00,(a0)          * populate test data
00:00000C64 08D00000        	  1391:             bset.b #0,(a0)
00:00000C68 66FE            	  1392:             bne.s *               * branch if Z clear
00:00000C6A 08D00007        	  1393:             bset.b #7,(a0)            *
00:00000C6E 66FE            	  1394:             bne.s *               * branch if Z clear
00:00000C70 0C100081        	  1395:             cmpi.b #$81,(a0)
00:00000C74 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
00:00000C76 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C7A 10FC0000        	  1400:             move.b #$00,(a0)+         * populate test data
00:00000C7E 10FC0000        	  1401:             move.b #$00,(a0)+         * populate test data
00:00000C82 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C86 08D80000        	  1403:             bset.b #0,(a0)+
00:00000C8A 66FE            	  1404:             bne.s *               * branch if Z clear
00:00000C8C 08D80001        	  1405:             bset.b #1,(a0)+           *
00:00000C90 66FE            	  1406:             bne.s *               * branch if Z clear
00:00000C92 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C96 0C180001        	  1408:             cmpi.b #$01,(a0)+
00:00000C9A 66FE            	  1409:             bne.s *               * branch if Z clear
00:00000C9C 0C180002        	  1410:             cmpi.b #$02,(a0)+
00:00000CA0 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
00:00000CA2 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
00:00000CA6 10FC0000        	  1416:             move.b #$00,(a0)+         * populate test data
00:00000CAA 10FC0000        	  1417:             move.b #$00,(a0)+         * populate test data
00:00000CAE 08E00007        	  1418:             bset.b #7,-(a0)
00:00000CB2 66FE            	  1419:             bne.s *               * branch if Z clear
00:00000CB4 08E00000        	  1420:             bset.b #0,-(a0)           *
00:00000CB8 66FE            	  1421:             bne.s *               * branch if Z clear
00:00000CBA 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
00:00000CBE 0C200080        	  1423:             cmpi.b #$80,-(a0)
00:00000CC2 66FE            	  1424:             bne.s *               * branch if Z clear
00:00000CC4 0C200001        	  1425:             cmpi.b #$01,-(a0)
00:00000CC8 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
00:00000CCA 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
00:00000CCE 10FC0000        	  1431:             move.b #$00,(a0)+         * populate test data
00:00000CD2 10FC0000        	  1432:             move.b #$00,(a0)+         * populate test data
00:00000CD6 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
00:00000CDA 08D00000        	  1434:             bset.b #0,0(a0)
00:00000CDE 66FE            	  1435:             bne.s *               * branch if Z clear
00:00000CE0 08E800040001    	  1436:             bset.b #4,1(a0)           *
00:00000CE6 66FE            	  1437:             bne.s *               * branch if Z clear
00:00000CE8 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000CEC 0C180001        	  1439:             cmpi.b #$01,(a0)+
00:00000CF0 66FE            	  1440:             bne.s *               * branch if Z clear
00:00000CF2 0C180010        	  1441:             cmpi.b #$10,(a0)+
00:00000CF6 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
00:00000CF8 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
00:00000CFC 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
00:00000CFE 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
00:00000D02 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
00:00000D04 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
00:00000D06 10FC0000        	  1451:             move.b #$00,(a0)+         * populate test data
00:00000D0A 10FC0000        	  1452:             move.b #$00,(a0)+         * populate test data
00:00000D0E 10FC0000        	  1453:             move.b #$00,(a0)+         * populate test data
00:00000D12 10FC0000        	  1454:             move.b #$00,(a0)+         * populate test data
00:00000D16 10FC0000        	  1455:             move.b #$00,(a0)+         * populate test data
00:00000D1A 10FC0000        	  1456:             move.b #$00,(a0)+         * populate test data
00:00000D1E 10FC0000        	  1457:             move.b #$00,(a0)+         * populate test data
00:00000D22 10FC0000        	  1458:             move.b #$00,(a0)+         * populate test data
00:00000D26 10FC0000        	  1459:             move.b #$00,(a0)+         * populate test data
00:00000D2A 10FC0000        	  1460:             move.b #$00,(a0)+         * populate test data
00:00000D2E 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
00:00000D32 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
00:00000D38 66FE            	  1463:             bne.s *               * branch if Z clear
00:00000D3A 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
00:00000D40 66FE            	  1465:             bne.s *               * branch if Z clear
00:00000D42 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
00:00000D48 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
00:00000D4A 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
00:00000D50 66FE            	  1470:             bne.s *               * branch if Z clear
00:00000D52 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
00:00000D58 66FE            	  1472:             bne.s *               * branch if Z clear
00:00000D5A 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
00:00000D60 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
00:00000D62 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
00:00000D68 66FE            	  1477:             bne.s *               * branch if Z clear
00:00000D6A 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
00:00000D70 66FE            	  1479:             bne.s *               * branch if Z clear
00:00000D72 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
00:00000D78 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
00:00000D7A 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
00:00000D80 66FE            	  1484:             bne.s *               * branch if Z clear
00:00000D82 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
00:00000D88 66FE            	  1486:             bne.s *               * branch if Z clear
00:00000D8A 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
00:00000D90 66FE            	  1488:             bne.s *               * branch if Z clear
00:00000D92 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000D96 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
00:00000D9C 66FE            	  1491:             bne.s *               * branch if Z clear
00:00000D9E 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
00:00000DA4 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
00:00000DA6 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
00:00000DAA 10FC0000        	  1499:             move.b #$00,(a0)+         * populate test data
00:00000DAE 08F800000100    	  1500:             bset.b #0,$0100
00:00000DB4 66FE            	  1501:             bne.s *               * branch if Z clear
00:00000DB6 08F800010100    	  1502:             bset.b #1,$0100           *
00:00000DBC 66FE            	  1503:             bne.s *               * branch if Z clear
00:00000DBE 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000DC2 0C180003        	  1505:             cmpi.b #$03,(a0)+
00:00000DC6 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
00:00000DC8 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
00:00000DCE 10BC0000        	  1511:             move.b #$00,(a0)          * populate test data
00:00000DD2 08F900000000F100	  1512:             bset.b #0,$F100
00:00000DDA 66FE            	  1513:             bne.s *               * branch if Z clear
00:00000DDC 08F900010000F100	  1514:             bset.b #1,$F100       *
00:00000DE4 66FE            	  1515:             bne.s *               * branch if Z clear
00:00000DE6 08F900020000F100	  1516:             bset.b #2,$F100       *
00:00000DEE 66FE            	  1517:             bne.s *               * branch if Z clear
00:00000DF0 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
00:00000DF6 0C180007        	  1519:             cmpi.b #$07,(a0)+
00:00000DFA 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
00:00000DFC 7000            	  1526:             moveq  #$00000000,d0      * populate test data
00:00000DFE 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
00:00000E00 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
00:00000E02 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
00:00000E04 0BC0            	  1531:             bset.l d5,d0
00:00000E06 66FE            	  1532:             bne.s *               * branch if Z clear
00:00000E08 0DC0            	  1533:             bset.l d6,d0              *
00:00000E0A 66FE            	  1534:             bne.s *               * branch if Z clear
00:00000E0C 0FC0            	  1535:             bset.l d7,d0             *
00:00000E0E 66FE            	  1536:             bne.s *               * branch if Z clear
00:00000E10 0C8080000003    	  1537:             cmpi.l #$80000003,d0
00:00000E16 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
00:00000E18 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
00:00000E1A 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
00:00000E1C 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
00:00000E1E 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E22 10BC0000        	  1546:             move.b #$00,(a0)          * populate test data
00:00000E26 0BD0            	  1547:             bset.b d5,(a0)
00:00000E28 66FE            	  1548:             bne.s *               * branch if Z clear
00:00000E2A 0DD0            	  1549:             bset.b d6,(a0)            *
00:00000E2C 66FE            	  1550:             bne.s *               * branch if Z clear
00:00000E2E 0FD0            	  1551:             bset.b d7,(a0)            *
00:00000E30 66FE            	  1552:             bne.s *               * branch if Z clear
00:00000E32 0C100083        	  1553:             cmpi.b #$83,(a0)
00:00000E36 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
00:00000E38 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E3C 10FC0000        	  1559:             move.b #$00,(a0)+         * populate test data
00:00000E40 10FC0000        	  1560:             move.b #$00,(a0)+         * populate test data
00:00000E44 10FC0000        	  1561:             move.b #$00,(a0)+         * populate test data
00:00000E48 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E4C 0BD8            	  1563:             bset.b d5,(a0)+
00:00000E4E 66FE            	  1564:             bne.s *               * branch if Z clear
00:00000E50 0DD8            	  1565:             bset.b d6,(a0)+           *
00:00000E52 66FE            	  1566:             bne.s *               * branch if Z clear
00:00000E54 0FD8            	  1567:             bset.b d7,(a0)+           *
00:00000E56 66FE            	  1568:             bne.s *               * branch if Z clear
00:00000E58 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E5C 0C180001        	  1570:             cmpi.b #$01,(a0)+
00:00000E60 66FE            	  1571:             bne.s *               * branch if Z clear
00:00000E62 0C180002        	  1572:             cmpi.b #$02,(a0)+
00:00000E66 66FE            	  1573:             bne.s *               * branch if Z clear
00:00000E68 0C180080        	  1574:             cmpi.b #$80,(a0)+
00:00000E6C 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
00:00000E6E 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
00:00000E72 10FC0000        	  1579:             move.b #$00,(a0)+         * populate test data
00:00000E76 10FC0000        	  1580:             move.b #$00,(a0)+         * populate test data
00:00000E7A 10FC0000        	  1581:             move.b #$00,(a0)+         * populate test data
00:00000E7E 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
00:00000E82 0BE0            	  1583:             bset.b d5,-(a0)
00:00000E84 66FE            	  1584:             bne.s *               * branch if Z clear
00:00000E86 0DE0            	  1585:             bset.b d6,-(a0)           *
00:00000E88 66FE            	  1586:             bne.s *               * branch if Z clear
00:00000E8A 0FE0            	  1587:             bset.b d7,-(a0)           *
00:00000E8C 66FE            	  1588:             bne.s *               * branch if Z clear
00:00000E8E 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000E92 0C200001        	  1590:             cmpi.b #$01,-(a0)
00:00000E96 66FE            	  1591:             bne.s *               * branch if Z clear
00:00000E98 0C200002        	  1592:             cmpi.b #$02,-(a0)
00:00000E9C 66FE            	  1593:             bne.s *               * branch if Z clear
00:00000E9E 0C200080        	  1594:             cmpi.b #$80,-(a0)
00:00000EA2 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
00:00000EA4 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
00:00000EA8 10FC0000        	  1599:             move.b #$00,(a0)+         * populate test data
00:00000EAC 10FC0000        	  1600:             move.b #$00,(a0)+         * populate test data
00:00000EB0 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
00:00000EB4 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
00:00000EB8 0BD0            	  1603:             bset.b d5,0(a0)
00:00000EBA 66FE            	  1604:             bne.s *               * branch if Z clear
00:00000EBC 0DE80001        	  1605:             bset.b d6,1(a0)           *
00:00000EC0 66FE            	  1606:             bne.s *               * branch if Z clear
00:00000EC2 0FE80002        	  1607:             bset.b d7,2(a0)           *
00:00000EC6 66FE            	  1608:             bne.s *               * branch if Z clear
00:00000EC8 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000ECC 0C180001        	  1610:             cmpi.b #$01,(a0)+
00:00000ED0 66FE            	  1611:             bne.s *               * branch if Z clear
00:00000ED2 0C180002        	  1612:             cmpi.b #$02,(a0)+
00:00000ED6 66FE            	  1613:             bne.s *               * branch if Z clear
00:00000ED8 0C180080        	  1614:             cmpi.b #$80,(a0)+
00:00000EDC 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
00:00000EDE 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
00:00000EE2 10FC0000        	  1619:             move.b #$00,(a0)+         * populate test data
00:00000EE6 10FC0000        	  1620:             move.b #$00,(a0)+         * populate test data
00:00000EEA 10FC0000        	  1621:             move.b #$00,(a0)+         * populate test data
00:00000EEE 10FC0000        	  1622:             move.b #$00,(a0)+         * populate test data
00:00000EF2 10FC0000        	  1623:             move.b #$00,(a0)+         * populate test data
00:00000EF6 10FC0000        	  1624:             move.b #$00,(a0)+         * populate test data
00:00000EFA 10FC0000        	  1625:             move.b #$00,(a0)+         * populate test data
00:00000EFE 10FC0000        	  1626:             move.b #$00,(a0)+         * populate test data
00:00000F02 10FC0000        	  1627:             move.b #$00,(a0)+         * populate test data
00:00000F06 10FC0000        	  1628:             move.b #$00,(a0)+         * populate test data
00:00000F0A 10FC0000        	  1629:             move.b #$00,(a0)+         * populate test data
00:00000F0E 10FC0000        	  1630:             move.b #$00,(a0)+         * populate test data
00:00000F12 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
00:00000F16 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
00:00000F18 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
00:00000F1C 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
00:00000F1E 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
00:00000F20 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
00:00000F24 66FE            	  1637:             bne.s *               * branch if Z clear
00:00000F26 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
00:00000F2A 66FE            	  1639:             bne.s *               * branch if Z clear
00:00000F2C 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
00:00000F30 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
00:00000F32 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
00:00000F36 66FE            	  1644:             bne.s *               * branch if Z clear
00:00000F38 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
00:00000F3C 66FE            	  1646:             bne.s *               * branch if Z clear
00:00000F3E 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
00:00000F42 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
00:00000F44 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
00:00000F48 66FE            	  1651:             bne.s *               * branch if Z clear
00:00000F4A 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
00:00000F4E 66FE            	  1653:             bne.s *               * branch if Z clear
00:00000F50 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
00:00000F54 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
00:00000F56 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
00:00000F5A 66FE            	  1658:             bne.s *               * branch if Z clear
00:00000F5C 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
00:00000F60 66FE            	  1660:             bne.s *               * branch if Z clear
00:00000F62 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
00:00000F66 66FE            	  1662:             bne.s *               * branch if Z clear
00:00000F68 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000F6C 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
00:00000F72 66FE            	  1665:             bne.s *               * branch if Z clear
00:00000F74 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
00:00000F7A 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
00:00000F7C 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
00:00000F80 10FC0000        	  1672:             move.b #$00,(a0)+         * populate test data
00:00000F84 10FC0000        	  1673:             move.b #$00,(a0)+         * populate test data
00:00000F88 10FC0000        	  1674:             move.b #$00,(a0)+         * populate test data
00:00000F8C 0BF80100        	  1675:             bset.b d5,$0100
00:00000F90 66FE            	  1676:             bne.s *               * branch if Z clear
00:00000F92 0DF80100        	  1677:             bset.b d6,$0100           *
00:00000F96 66FE            	  1678:             bne.s *               * branch if Z clear
00:00000F98 0FF80100        	  1679:             bset.b d7,$0100           *
00:00000F9C 66FE            	  1680:             bne.s *               * branch if Z clear
00:00000F9E 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
00:00000FA2 0C180083        	  1682:             cmpi.b #$83,(a0)+
00:00000FA6 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
00:00000FA8 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FAE 10FC0000        	  1687:             move.b #$00,(a0)+         * populate test data
00:00000FB2 10FC0000        	  1688:             move.b #$00,(a0)+         * populate test data
00:00000FB6 10FC0000        	  1689:             move.b #$00,(a0)+         * populate test data
00:00000FBA 0BF90000F100    	  1690:             bset.b d5,$F100
00:00000FC0 66FE            	  1691:             bne.s *               * branch if Z clear
00:00000FC2 0DF90000F100    	  1692:             bset.b d6,$F100       *
00:00000FC8 66FE            	  1693:             bne.s *               * branch if Z clear
00:00000FCA 0FF90000F100    	  1694:             bset.b d7,$F100       *
00:00000FD0 66FE            	  1695:             bne.s *               * branch if Z clear
00:00000FD2 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FD8 0C100083        	  1697:             cmpi.b #$83,(a0)
00:00000FDC 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
00:00000FDE 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
00:00000FE0 307C0100        	  1711:             move.l #$00000100,a0
00:00000FE4 203C12345678    	  1712:             move.l #$12345678,d0
00:00000FEA 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
00:00000FF0 20BC00000000    	  1714:             move.l #0,(a0)
00:00000FF6 217C000000000004	  1715:             move.l #0,4(a0)
                            	  1716: 
00:00000FFE 01880000        	  1717:             movep.w d0,0(a0)      * even offset
00:00001002 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
00:00001006 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
00:0000100A 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
00:0000100E 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
00:00001014 66FE            	  1724:             bne.s *
00:00001016 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
00:0000101E 66FE            	  1726:             bne.s *
00:00001020 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
00:00001028 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
00:0000102A 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
00:00001030 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
00:00001036 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
00:0000103C 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
00:00001042 01080000        	  1737:             movep.w 0(a0),d0      * even offset
00:00001046 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
00:0000104A 05480004        	  1740:             movep.l 4(a0),d2      * even offset
00:0000104E 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
00:00001052 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
00:00001058 66FE            	  1744:             bne.s *
00:0000105A 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
00:00001060 66FE            	  1746:             bne.s *
00:00001062 0C8212345678    	  1747:             cmpi.l #$12345678,d2
00:00001068 66FE            	  1748:             bne.s *
00:0000106A 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
00:00001070 66FE            	  1750:             bne.s *
                            	  1751: 
00:00001072 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
00:00001074 203C12345678    	  1764:             move.l #$12345678,d0
00:0000107A 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
00:0000107E 000000FF        	  1766:             ori.b  #$FF,d0
00:00001082 0A00005A        	  1767:             eori.b #$5A,d0
00:00001086 020000F0        	  1768:             andi.b #$F0,d0
00:0000108A 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
00:0000108C 65FE            	  1770:             bcs.s *
00:0000108E 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
00:00001090 02000000        	  1772:             andi.b #$00,d0
00:00001094 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
00:00001096 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
00:00001098 223C12345678    	  1777:             move.l #$12345678,d1
00:0000109E 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
00:000010A2 0041FFFF        	  1779:             ori.w  #$FFFF,d1
00:000010A6 0A415A5A        	  1780:             eori.w #$5A5A,d1
00:000010AA 0241F0F0        	  1781:             andi.w #$F0F0,d1
00:000010AE 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
00:000010B0 65FE            	  1783:             bcs.s *
00:000010B2 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
00:000010B4 02410000        	  1785:             andi.w #$0000,d1
00:000010B8 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
00:000010BA 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
00:000010BC 243C12345678    	  1790:             move.l #$12345678,d2
00:000010C2 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
00:000010C6 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
00:000010CC 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
00:000010D2 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
00:000010D8 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
00:000010DA 65FE            	  1796:             bcs.s *
00:000010DC 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
00:000010DE 028200000000    	  1798:             andi.l #$00000000,d2
00:000010E4 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
00:000010E6 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
00:000010E8 307C0100        	  1804:             move.l #$00000100,a0
00:000010EC 20BC12345678    	  1805:             move.l #$12345678,(a0)
00:000010F2 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
00:000010F6 001000FF        	  1807:             ori.b  #$FF,(a0)
00:000010FA 0A10005A        	  1808:             eori.b #$5A,(a0)
00:000010FE 021000F0        	  1809:             andi.b #$F0,(a0)
00:00001102 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
00:00001104 65FE            	  1811:             bcs.s *
00:00001106 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
00:00001108 02100000        	  1813:             andi.b #$00,(a0)
00:0000110C 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
00:0000110E 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
00:00001110 4A10            	  1816:             cmpi.b #$00,(a0)
00:00001112 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
00:00001114 20BC12345678    	  1820:             move.l #$12345678,(a0)
00:0000111A 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
00:0000111E 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
00:00001122 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
00:00001126 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
00:0000112A 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
00:0000112C 65FE            	  1826:             bcs.s *
00:0000112E 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
00:00001130 02500000        	  1828:             andi.w #$0000,(a0)
00:00001134 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
00:00001136 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
00:00001138 4A50            	  1831:             cmpi.w #$00,(a0)
00:0000113A 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
00:0000113C 20BC12345678    	  1835:             move.l #$12345678,(a0)
00:00001142 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
00:00001146 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
00:0000114C 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
00:00001152 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
00:00001158 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
00:0000115A 65FE            	  1841:             bcs.s *
00:0000115C 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
00:0000115E 029000000000    	  1843:             andi.l #$00000000,(a0)
00:00001164 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
00:00001166 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
00:00001168 4A90            	  1846:             cmpi.l #$00,(a0)
00:0000116A 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
00:0000116C 307C0100        	  1852:             move.l #$00000100,a0
00:00001170 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
00:00001176 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
00:0000117A 001800F5        	  1856:             ori.b  #$F5,(a0)+
00:0000117E 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
00:00001180 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
00:00001182 4618            	  1860:             eori.b #$FF,(a0)+
00:00001184 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
00:00001186 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
00:00001188 021800AA        	  1864:             andi.b #$AA,(a0)+
00:0000118C 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
00:0000118E 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
00:00001190 307C0100        	  1868:             move.l #$00000100,a0
00:00001194 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
00:0000119A 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
00:0000119C 307C0100        	  1874:             move.l #$00000100,a0
00:000011A0 327C0104        	  1875:             move.l #$00000104,a1
00:000011A4 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
00:000011AA 22BC12345678    	  1877:             move.l #$12345678,(a1)
00:000011B0 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
00:000011B4 00585678        	  1880:             ori.w  #$5678,(a0)+
00:000011B8 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
00:000011BA 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
00:000011BC 4658            	  1884:             eori.w #$FFFF,(a0)+
00:000011BE 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
00:000011C0 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
00:000011C2 0258A55A        	  1888:             andi.w #$A55A,(a0)+
00:000011C6 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
00:000011C8 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
00:000011CA 307C0100        	  1892:             move.l #$00000100,a0
00:000011CE 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
00:000011D4 307C0104        	  1894:             move.l #$00000104,a0
00:000011D8 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
00:000011DE 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
00:000011E0 307C0100        	  1899:             move.l #$00000100,a0
00:000011E4 20FC00000000    	  1900:             move.l #$00000000,(a0)+
00:000011EA 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
00:000011F0 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
00:000011F6 307C0100        	  1903:             move.l #$00000100,a0
00:000011FA 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
00:000011FE 009812345678    	  1906:             ori.l  #$12345678,(a0)+
00:00001204 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
00:00001206 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
00:00001208 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
00:0000120A 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
00:0000120C 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
00:0000120E 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
00:00001214 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
00:00001216 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
00:00001218 307C0100        	  1918:             move.l #$00000100,a0
00:0000121C 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
00:00001222 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
00:00001228 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
00:0000122E 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
00:00001230 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
00:00001232 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
00:00001238 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
00:0000123A 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:0000123C 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:0000123E 6100EEA4        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:00001242 61001458        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
00:00001246 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
00:0000124C 66FE            	  1945:                 bne.s *
00:0000124E 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
00:00001254 66FE            	  1947:                 bne.s *
00:00001256 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
00:0000125C 66FE            	  1949:                 bne.s *
00:0000125E 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
00:00001264 66FE            	  1951:                 bne.s *
                            	  1952: 
00:00001266 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
00:00001268 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
00:0000126E 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
00:00001270 307C0100        	  1966:             move.l #$00000100,a0
00:00001274 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
00:0000127A 7080            	  1970:             move.l #$FFFFFF80,d0
00:0000127C 0C000080        	  1971:             cmpi.b #$80,d0
00:00001280 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
00:00001282 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001284 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001286 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
00:00001288 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
00:0000128E 4A01            	  1978:             cmpi.b #$00,d1
00:00001290 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
00:00001292 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001294 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001296 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
00:00001298 7481D442        	  1984:             move.l #$FFFFFF02,d2
00:0000129C 0C0200FF        	  1985:             cmpi.b #$FF,d2
00:000012A0 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
00:000012A2 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012A4 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012A6 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
00:000012A8 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
00:000012AE 0C0300FF        	  1992:             cmpi.b #$FF,d3
00:000012B2 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
00:000012B4 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
00:000012B6 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012B8 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
00:000012BA 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
00:000012C0 0C408000        	  2001:             cmpi.w #$8000,d0
00:000012C4 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
00:000012C6 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012C8 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012CA 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
00:000012CC 223CFFF00000    	  2007:             move.l #$FFF00000,d1
00:000012D2 4A41            	  2008:             cmpi.w #$0000,d1
00:000012D4 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
00:000012D6 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012D8 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012DA 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
00:000012DC 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
00:000012E2 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
00:000012E6 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
00:000012E8 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012EA 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012EC 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
00:000012EE 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
00:000012F4 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
00:000012F8 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
00:000012FA 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
00:000012FC 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012FE 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
00:00001300 203C80000000    	  2029:             move.l #$80000000,d0
00:00001306 0C8080000000    	  2030:             cmpi.l #$80000000,d0
00:0000130C 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
00:0000130E 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001310 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001312 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
00:00001314 7200            	  2036:             moveq  #$00000000,d1
00:00001316 4A81            	  2037:             cmpi.l #$00000000,d1
00:00001318 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
00:0000131A 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000131C 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000131E 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
00:00001320 7402            	  2043:             moveq  #$00000002,d2
00:00001322 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
00:00001328 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
00:0000132A 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000132C 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000132E 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
00:00001330 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
00:00001336 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
00:0000133C 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
00:0000133E 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001340 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001342 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
00:00001344 307C0100        	  2061:             move.l #$00000100,a0
00:00001348 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
00:0000134A 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
00:00001352 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
00:0000135A 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
00:00001360 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
00:00001362 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001364 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001366 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
00:00001368 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
00:00001370 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
00:00001374 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
00:00001376 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001378 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000137A 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
00:0000137C 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
00:00001384 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
00:0000138A 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
00:0000138C 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000138E 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001390 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
00:00001392 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
00:0000139A 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
00:000013A0 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
00:000013A2 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
00:000013A4 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013A6 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
00:000013A8 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
00:000013B0 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
00:000013B6 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
00:000013B8 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013BA 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013BC 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
00:000013BE 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
00:000013C6 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
00:000013CA 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
00:000013CC 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013CE 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013D0 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
00:000013D2 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
00:000013DA 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
00:000013E0 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
00:000013E2 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013E4 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013E6 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
00:000013E8 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
00:000013F0 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
00:000013F6 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
00:000013F8 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
00:000013FA 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013FC 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
00:000013FE 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
00:00001406 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
00:0000140E 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
00:00001410 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001412 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001414 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
00:00001416 21BC00000000700C	  2131:             move.l #$00000000,12(a0,d7)
00:0000141E 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
00:00001422 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
00:00001424 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001426 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001428 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
00:0000142A 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
00:00001432 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:0000143A 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
00:0000143C 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000143E 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001440 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
00:00001442 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
00:0000144A 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00001452 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
00:00001454 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001456 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001458 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
00:0000145A 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
00:0000145C 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
00:00001462 06000000        	  2168:             addi.b #0,d0
00:00001466 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
00:00001468 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000146A 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000146C 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000146E 06000010        	  2173:             addi.b #$10,d0
00:00001472 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
00:00001474 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001476 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001478 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000147A 060000A5        	  2178:             addi.b #$A5,d0
00:0000147E 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
00:00001480 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001482 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001484 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001486 0C00002D        	  2183:             cmpi.b #$2D,d0
00:0000148A 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
00:0000148C 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
00:00001492 06400000        	  2188:             addi.w #0,d0
00:00001496 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
00:00001498 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000149A 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000149C 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000149E 06407000        	  2193:             addi.w #$7000,d0
00:000014A2 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
00:000014A4 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014A6 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014A8 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014AA 0640A55A        	  2198:             addi.w #$A55A,d0
00:000014AE 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
00:000014B0 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014B2 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014B4 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014B6 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
00:000014BA 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
00:000014BC 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
00:000014C2 068000000000    	  2208:             addi.l #0,d0
00:000014C8 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
00:000014CA 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014CC 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014CE 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014D0 0680F0000000    	  2213:             addi.l #$F0000000,d0
00:000014D6 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
00:000014D8 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014DA 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014DC 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014DE 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
00:000014E4 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
00:000014E6 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014E8 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014EA 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014EC 0680A0000000    	  2223:             addi.l #$A0000000,d0
00:000014F2 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014F4 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
00:000014FA 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
00:000014FC 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
00:00001502 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
00:00001508 063900000000F103	  2233:             addi.b #0,$F103
00:00001510 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
00:00001512 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001514 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001516 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001518 063900100000F103	  2238:             addi.b #$10,$F103
00:00001520 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
00:00001522 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001524 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001526 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001528 063900A50000F103	  2243:             addi.b #$A5,$F103
00:00001530 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
00:00001532 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001534 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001536 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001538 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
00:00001540 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
00:00001542 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
00:00001548 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
00:0000154E 067900000000F100	  2254:             addi.w #0,$F100
00:00001556 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
00:00001558 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000155A 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000155C 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000155E 067970000000F100	  2259:             addi.w #$7000,$F100
00:00001566 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
00:00001568 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000156A 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000156C 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000156E 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
00:00001576 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
00:00001578 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000157A 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000157C 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000157E 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
00:00001586 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
00:00001588 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
00:00001590 F100
00:00001592 06B9000000000000	  2274:             addi.l #0,$F100
00:0000159A F100
00:0000159C 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
00:0000159E 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015A0 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015A2 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015A4 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
00:000015AC F100
00:000015AE 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
00:000015B0 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015B2 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
00:000015B4 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015B6 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
00:000015BE F100
00:000015C0 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
00:000015C2 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
00:000015C4 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015C6 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015C8 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
00:000015D0 F100
00:000015D2 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
00:000015D4 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
00:000015DC F100
00:000015DE 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
00:000015E0 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
00:000015E2 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
00:000015E8 04000000        	  2306:             subi.b #0,d0
00:000015EC 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
00:000015EE 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015F0 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015F2 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015F4 04000010        	  2311:             subi.b #$10,d0
00:000015F8 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
00:000015FA 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015FC 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015FE 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001600 040000A5        	  2316:             subi.b #$A5,d0
00:00001604 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
00:00001606 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001608 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000160A 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000160C 0C0000C3        	  2321:             cmpi.b #$C3,d0
00:00001610 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
00:00001612 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
00:00001618 04400000        	  2326:             subi.w #0,d0
00:0000161C 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
00:0000161E 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001620 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001622 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001624 04407000        	  2331:             subi.w #$7000,d0
00:00001628 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
00:0000162A 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000162C 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000162E 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001630 0440A55A        	  2336:             subi.w #$A55A,d0
00:00001634 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
00:00001636 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001638 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000163A 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000163C 0C40411E        	  2341:             cmpi.w #$411E,d0
00:00001640 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
00:00001642 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
00:00001648 048000000000    	  2346:             subi.l #0,d0
00:0000164E 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
00:00001650 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001652 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001654 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001656 0480F0000000    	  2351:             subi.l #$F0000000,d0
00:0000165C 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
00:0000165E 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001660 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001662 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001664 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
00:0000166A 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
00:0000166C 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000166E 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001670 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001672 0480A0000000    	  2361:             subi.l #$A0000000,d0
00:00001678 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000167A 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
00:00001680 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
00:00001682 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
00:00001688 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
00:0000168E 043900000000F103	  2371:             subi.b #0,$F103
00:00001696 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
00:00001698 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000169A 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000169C 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000169E 043900100000F103	  2376:             subi.b #$10,$F103
00:000016A6 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
00:000016A8 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016AA 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016AC 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016AE 043900A50000F103	  2381:             subi.b #$A5,$F103
00:000016B6 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
00:000016B8 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016BA 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016BC 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
00:000016BE 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
00:000016C6 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
00:000016C8 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
00:000016CE 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
00:000016D4 047900000000F100	  2392:             subi.w #0,$F100
00:000016DC 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
00:000016DE 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016E0 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016E2 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016E4 047970000000F100	  2397:             subi.w #$7000,$F100
00:000016EC 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
00:000016EE 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016F0 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016F2 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016F4 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
00:000016FC 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
00:000016FE 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001700 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001702 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001704 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
00:0000170C 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
00:0000170E 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
00:00001716 F100
00:00001718 04B9000000000000	  2412:             subi.l #0,$F100
00:00001720 F100
00:00001722 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
00:00001724 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001726 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001728 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000172A 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
00:00001732 F100
00:00001734 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
00:00001736 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001738 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000173A 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000173C 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
00:00001744 F100
00:00001746 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
00:00001748 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000174A 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000174C 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000174E 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
00:00001756 F100
00:00001758 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000175A 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
00:00001762 F100
00:00001764 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
00:00001766 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
00:00001768 203C11223344    	  2442:             move.l #$11223344,d0
00:0000176E 223C55667788    	  2443:             move.l #$55667788,d1
00:00001774 243C8899AABB    	  2444:             move.l #$8899aabb,d2
00:0000177A 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
00:00001780 7800            	  2446:             moveq  #$00000000,d4
00:00001782 7A00            	  2447:             moveq  #$00000000,d5
00:00001784 7C00            	  2448:             moveq  #$00000000,d6
00:00001786 7E00            	  2449:             moveq  #$00000000,d7
00:00001788 207C44332211    	  2450:             move.l #$44332211,a0
00:0000178E 227C88776655    	  2451:             move.l #$88776655,a1
00:00001794 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
00:0000179A 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
00:000017A0 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
00:000017A2 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
00:000017A4 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017A6 0C8400000044    	  2458:             cmpi.l #$00000044,d4
00:000017AC 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
00:000017AE 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
00:000017B0 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
00:000017B2 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017B4 0C8500007788    	  2464:             cmpi.l #$00007788,d5
00:000017BA 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
00:000017BC 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
00:000017BE 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
00:000017C0 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017C2 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
00:000017C8 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
00:000017CA 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:000017CC 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
00:000017CE 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017D0 0C8500006655    	  2476:             cmpi.l #$00006655,d5
00:000017D6 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
00:000017D8 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:000017DA 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
00:000017DC 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017DE 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
00:000017E4 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
00:000017E6 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:000017E8 B9C2            	  2487:             cmpa.l d2,a4
00:000017EA 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
00:000017EC 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:000017EE BBC1            	  2491:             cmpa.l d1,a5
00:000017F0 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
00:000017F2 203C11223344    	  2498:             move.l #$11223344,d0
00:000017F8 223C00010100    	  2499:             move.l #$00010100,d1
00:000017FE 243C8899AABB    	  2500:             move.l #$8899aabb,d2
00:00001804 7601            	  2501:             moveq  #$00000001,d3
00:00001806 7800            	  2502:             moveq  #$00000000,d4
00:00001808 7A00            	  2503:             moveq  #$00000000,d5
00:0000180A 7C00            	  2504:             moveq  #$00000000,d6
00:0000180C 7E00            	  2505:             moveq  #$00000000,d7
00:0000180E 91C8            	  2506:             move.l #$00000000,a0
00:00001810 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
00:00001816 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
00:0000181C 47F09804        	  2511:             lea 4(a0,a1.l),a3
00:00001820 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
00:00001828 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
00:0000182A 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000182C 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
00:00001832 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
00:00001834 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:0000183C 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
00:0000183E 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001840 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
00:00001846 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
00:00001848 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:0000184E 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
00:00001850 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001852 0C3900B900001835	  2529:             cmpi.b #$B9,1+MOVE2
00:0000185A 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
00:0000185C 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
00:00001862 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
00:00001864 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001866 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
00:0000186C 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
00:0000186E 203C11223344    	  2539:             move.l #$11223344,d0
00:00001874 223C00010100    	  2540:             move.l #$00010100,d1
00:0000187A 243C8899AABB    	  2541:             move.l #$8899aabb,d2
00:00001880 7602            	  2542:             moveq  #$00000002,d3
00:00001882 7800            	  2543:             moveq  #$00000000,d4
00:00001884 7A00            	  2544:             moveq  #$00000000,d5
00:00001886 7C00            	  2545:             moveq  #$00000000,d6
00:00001888 7E00            	  2546:             moveq  #$00000000,d7
00:0000188A 91C8            	  2547:             move.l #$00000000,a0
00:0000188C 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
00:00001892 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:00001898 49F09804        	  2552:             lea 4(a0,a1.l),a4
00:0000189C 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
00:000018A4 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
00:000018A6 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018A8 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
00:000018AE 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
00:000018B0 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:000018B8 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
00:000018BA 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018BC 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
00:000018C2 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
00:000018C4 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
00:000018CA 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
00:000018CC 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018CE 0C7967FE000018B8	  2570:             cmpi.w #$67FE,8+MOVE1
00:000018D6 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
00:000018D8 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
00:000018DE 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
00:000018E0 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018E2 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
00:000018E8 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
00:000018EA 203C11223344    	  2582:             move.l #$11223344,d0
00:000018F0 223C00010100    	  2583:             move.l #$00010100,d1
00:000018F6 243C8899AABB    	  2584:             move.l #$8899aabb,d2
00:000018FC 7602            	  2585:             moveq  #$00000002,d3
00:000018FE 7800            	  2586:             moveq  #$00000000,d4
00:00001900 7A00            	  2587:             moveq  #$00000000,d5
00:00001902 7C00            	  2588:             moveq  #$00000000,d6
00:00001904 7E00            	  2589:             moveq  #$00000000,d7
00:00001906 91C8            	  2590:             move.l #$00000000,a0
00:00001908 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
00:0000190E 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:00001916 49F09804        	  2595:             lea 4(a0,a1.l),a4
00:0000191A 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
00:00001922 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
00:00001924 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001926 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:0000192E 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
00:00001930 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00001938 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
00:0000193A 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000193C 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:00001944 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
00:00001946 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
00:0000194C 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
00:0000194E 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001950 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
00:00001958 1938
00:0000195A 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
00:0000195C 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:00001964 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
00:00001966 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001968 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
00:00001970 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
00:00001972 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
00:00001974 303C2FFF        	  2638:             move.w #$2FFF,d0
00:00001978 46C0            	  2639:             move.w d0,SR
00:0000197A 6AFE            	  2640:             bpl.s *           * branch if Z clear
00:0000197C 66FE            	  2641:             bne.s *           * branch if N clear
00:0000197E 68FE            	  2642:             bvc.s *           * branch if V clear
00:00001980 64FE            	  2643:             bcc.s *           * branch if C clear
00:00001982 303C2F00        	  2644:             move.w #$2F00,d0
00:00001986 44C0            	  2645:             move d0,CCR
00:00001988 67FE            	  2646:             beq.s *           * branch if Z set
00:0000198A 6BFE            	  2647:             bmi.s *           * branch if N set
00:0000198C 69FE            	  2648:             bvs.s *           * branch if V set
00:0000198E 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
00:00001990 303C2000        	  2651:             move.w #$2000,d0
00:00001994 46C0            	  2652:             move.w d0,SR
00:00001996 67FE            	  2653:             beq.s *           * branch if Z set
00:00001998 6BFE            	  2654:             bmi.s *           * branch if N set
00:0000199A 69FE            	  2655:             bvs.s *           * branch if V set
00:0000199C 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
00:0000199E 307C0100        	  2659:             move.l #$00000100,a0
00:000019A2 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
00:000019A6 46D0            	  2661:             move.w (a0),SR
00:000019A8 6AFE            	  2662:             bpl.s *           * branch if Z clear
00:000019AA 66FE            	  2663:             bne.s *           * branch if N clear
00:000019AC 68FE            	  2664:             bvc.s *           * branch if V clear
00:000019AE 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
00:000019B0 30BC2000        	  2667:             move.w #$2000,(a0)
00:000019B4 46D0            	  2668:             move.w (a0),SR
00:000019B6 67FE            	  2669:             beq.s *           * branch if Z set
00:000019B8 6BFE            	  2670:             bmi.s *           * branch if N set
00:000019BA 69FE            	  2671:             bvs.s *           * branch if V set
00:000019BC 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
00:000019BE 307C0100        	  2675:             move.l #$00000100,a0
00:000019C2 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
00:000019C6 46D8            	  2677:             move.w (a0)+,SR
00:000019C8 6AFE            	  2678:             bpl.s *           * branch if Z clear
00:000019CA 66FE            	  2679:             bne.s *           * branch if N clear
00:000019CC 68FE            	  2680:             bvc.s *           * branch if V clear
00:000019CE 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
00:000019D0 30BC2000        	  2683:             move.w #$2000,(a0)
00:000019D4 46D8            	  2684:             move.w (a0)+,SR
00:000019D6 67FE            	  2685:             beq.s *           * branch if Z set
00:000019D8 6BFE            	  2686:             bmi.s *           * branch if N set
00:000019DA 69FE            	  2687:             bvs.s *           * branch if V set
00:000019DC 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
00:000019DE 307C0102        	  2691:             move.l #$00000102,a0
00:000019E2 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
00:000019E6 46D8            	  2693:             move.w (a0)+,SR
00:000019E8 6AFE            	  2694:             bpl.s *           * branch if Z clear
00:000019EA 66FE            	  2695:             bne.s *           * branch if N clear
00:000019EC 68FE            	  2696:             bvc.s *           * branch if V clear
00:000019EE 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
00:000019F0 30BC2000        	  2699:             move.w #$2000,(a0)
00:000019F4 46D8            	  2700:             move.w (a0)+,SR
00:000019F6 67FE            	  2701:             beq.s *           * branch if Z set
00:000019F8 6BFE            	  2702:             bmi.s *           * branch if N set
00:000019FA 69FE            	  2703:             bvs.s *           * branch if V set
00:000019FC 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
00:000019FE 307C0102        	  2707:             move.l #$00000102,a0
00:00001A02 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
00:00001A08 46E80002        	  2709:             move.w 2(a0),SR
00:00001A0C 6AFE            	  2710:             bpl.s *           * branch if Z clear
00:00001A0E 66FE            	  2711:             bne.s *           * branch if N clear
00:00001A10 68FE            	  2712:             bvc.s *           * branch if V clear
00:00001A12 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
00:00001A14 317C20000002    	  2715:             move.w #$2000,2(a0)
00:00001A1A 46E80002        	  2716:             move.w 2(a0),SR
00:00001A1E 67FE            	  2717:             beq.s *           * branch if Z set
00:00001A20 6BFE            	  2718:             bmi.s *           * branch if N set
00:00001A22 69FE            	  2719:             bvs.s *           * branch if V set
00:00001A24 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
00:00001A26 307C0100        	  2723:             move.l #$00000100,a0
00:00001A2A 7002            	  2724:             moveq  #$00000002,d0
00:00001A2C 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
00:00001A32 46F00802        	  2726:             move.w 2(a0,d0.l),SR
00:00001A36 6AFE            	  2727:             bpl.s *           * branch if Z clear
00:00001A38 66FE            	  2728:             bne.s *           * branch if N clear
00:00001A3A 68FE            	  2729:             bvc.s *           * branch if V clear
00:00001A3C 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
00:00001A3E 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
00:00001A44 46F00802        	  2733:             move.w 2(a0,d0.l),SR
00:00001A48 67FE            	  2734:             beq.s *           * branch if Z set
00:00001A4A 6BFE            	  2735:             bmi.s *           * branch if N set
00:00001A4C 69FE            	  2736:             bvs.s *           * branch if V set
00:00001A4E 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
00:00001A50 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
00:00001A56 46F80100        	  2741:             move.w $0100,SR
00:00001A5A 6AFE            	  2742:             bpl.s *           * branch if Z clear
00:00001A5C 66FE            	  2743:             bne.s *           * branch if N clear
00:00001A5E 68FE            	  2744:             bvc.s *           * branch if V clear
00:00001A60 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
00:00001A62 31FC20000100    	  2747:             move.w #$2000,$0100
00:00001A68 46F80100        	  2748:             move.w $0100,SR
00:00001A6C 67FE            	  2749:             beq.s *           * branch if Z set
00:00001A6E 6BFE            	  2750:             bmi.s *           * branch if N set
00:00001A70 69FE            	  2751:             bvs.s *           * branch if V set
00:00001A72 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
00:00001A74 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
00:00001A7C 46F900010100    	  2756:             move.w $00010100,SR
00:00001A82 6AFE            	  2757:             bpl.s *           * branch if Z clear
00:00001A84 66FE            	  2758:             bne.s *           * branch if N clear
00:00001A86 68FE            	  2759:             bvc.s *           * branch if V clear
00:00001A88 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
00:00001A8A 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
00:00001A92 46F900010100    	  2763:             move.w $00010100,SR
00:00001A98 67FE            	  2764:             beq.s *           * branch if Z set
00:00001A9A 6BFE            	  2765:             bmi.s *           * branch if N set
00:00001A9C 69FE            	  2766:             bvs.s *           * branch if V set
00:00001A9E 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
00:00001AA0 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
00:00001AA4 67FE            	  2771:             beq.s *           * branch if Z set
00:00001AA6 6BFE            	  2772:             bmi.s *           * branch if N set
00:00001AA8 69FE            	  2773:             bvs.s *           * branch if V set
00:00001AAA 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
00:00001AAC 7000            	  2777:             moveq  #$00000000,d0
00:00001AAE 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
00:00001AB2 67FE            	  2779:             beq.s *           * branch if Z set
00:00001AB4 6BFE            	  2780:             bmi.s *           * branch if N set
00:00001AB6 69FE            	  2781:             bvs.s *           * branch if V set
00:00001AB8 65FE            	  2782:             bcs.s *           * branch if C set
00:00001ABA 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
00:00001ABE 67FE            	  2784:             beq.s *           * branch if Z set
00:00001AC0 6BFE            	  2785:             bmi.s *           * branch if N set
00:00001AC2 69FE            	  2786:             bvs.s *           * branch if V set
00:00001AC4 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
00:00001AC6 46FC2FFF        	  2790:             move.w #$2FFF,SR
00:00001ACA 66FE            	  2791:             bne.s *           * branch if Z clear
00:00001ACC 6AFE            	  2792:             bpl.s *           * branch if N clear
00:00001ACE 68FE            	  2793:             bvc.s *           * branch if V clear
00:00001AD0 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
00:00001AD2 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
00:00001AD6 40C0            	  2804:             move.w SR,d0
00:00001AD8 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
00:00001ADC 307C0100        	  2810:             move.l #$00000100,a0
00:00001AE0 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
00:00001AE4 40D0            	  2812:             move.w SR,(a0)
00:00001AE6 0C50275A        	  2813:             cmpi.w #$275A,(a0)
00:00001AEA 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
00:00001AEC 307C0100        	  2817:             move.l #$00000100,a0
00:00001AF0 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
00:00001AF4 40D8            	  2819:             move.w SR,(a0)+
00:00001AF6 307C0100        	  2820:             move.l #$00000100,a0
00:00001AFA 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
00:00001AFE 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
00:00001B00 307C0102        	  2825:             move.l #$00000102,a0
00:00001B04 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
00:00001B08 40E0            	  2827:             move.w SR,-(a0)
00:00001B0A 307C0100        	  2828:             move.l #$00000100,a0
00:00001B0E 0C502766        	  2829:             cmpi.w #$2766,(a0)
00:00001B12 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
00:00001B14 307C0102        	  2833:             move.l #$00000102,a0
00:00001B18 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
00:00001B1C 40E80004        	  2835:             move.w SR,4(a0)
00:00001B20 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
00:00001B26 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
00:00001B28 307C0102        	  2840:             move.l #$00000102,a0
00:00001B2C 7004            	  2841:             moveq  #$00000004,d0
00:00001B2E 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
00:00001B32 40F00804        	  2843:             move.w SR,4(a0,d0.l)
00:00001B36 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
00:00001B3C 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
00:00001B3E 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
00:00001B42 40F80102        	  2849:             move.w SR,$0102
00:00001B46 0C7827770102    	  2850:             cmpi.w #$2777,$0102
00:00001B4C 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
00:00001B4E 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
00:00001B52 40F900010102    	  2855:             move.w SR,$10102
00:00001B58 0C79277700010102	  2856:             cmpi.w #$2777,$10102
00:00001B60 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
00:00001B62 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
00:00001B66 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
00:00001B68 707F            	  2873:             move.l #$0000007F,d0
00:00001B6A 223C00008FFF    	  2874:             move.l #$00008FFF,d1
00:00001B70 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
00:00001B72 4880            	  2877:             ext.w d0
00:00001B74 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001B76 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
00:00001B78 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
00:00001B7E 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
00:00001B80 48C1            	  2883:             ext.l d1
00:00001B82 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001B84 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
00:00001B86 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
00:00001B8C 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
00:00001B8E 48C2            	  2889:             ext.l d2
00:00001B90 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
00:00001B92 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
00:00001B94 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
00:00001B9A 4840            	  2906:             swap d0
00:00001B9C 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001B9E 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
00:00001BA0 0C8056781234    	  2909:             cmpi.l #$56781234,d0
00:00001BA6 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
00:00001BA8 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
00:00001BAA 207C00345678    	  2924:             move.l #$00345678,a0
00:00001BB0 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
00:00001BB2 4DD0            	  2928:             lea (a0),a6
00:00001BB4 200E            	  2929:             move.l a6,d0
00:00001BB6 0C8000345678    	  2930:             cmpi.l #$00345678,d0
00:00001BBC 66FE            	  2931:             bne.s *                   * branch if Z set
00:00001BBE 4850            	  2932:             pea (a0)
00:00001BC0 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
00:00001BC6 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
00:00001BC8 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
00:00001BCA 4DE80004        	  2939:             lea 4(a0),a6
00:00001BCE 200E            	  2940:             move.l a6,d0
00:00001BD0 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
00:00001BD6 66FE            	  2942:             bne.s *                   * branch if Z set
00:00001BD8 48680004        	  2943:             pea 4(a0)
00:00001BDC 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
00:00001BE2 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
00:00001BE4 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
00:00001BE6 4DF04004        	  2950:             lea 4(a0,d4),a6
00:00001BEA 200E            	  2951:             move.l a6,d0
00:00001BEC 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
00:00001BF2 66FE            	  2953:             bne.s *                   * branch if Z set
00:00001BF4 48704804        	  2954:             pea 4(a0,d4.l)
00:00001BF8 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
00:00001BFE 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
00:00001C00 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
00:00001C02 4DF81234        	  2961:             lea $1234,a6
00:00001C06 200E            	  2962:             move.l a6,d0
00:00001C08 0C401234        	  2963:             cmpi.w #$1234,d0
00:00001C0C 66FE            	  2964:             bne.s *                   * branch if Z set
00:00001C0E 48781234        	  2965:             pea $1234
00:00001C12 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
00:00001C18 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
00:00001C1A 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
00:00001C1C 4DF900345678    	  2972:             lea $00345678,a6
00:00001C22 200E            	  2973:             move.l a6,d0
00:00001C24 B08E            	  2974:             cmp.l a6,d0
00:00001C26 66FE            	  2975:             bne.s *                   * branch if Z set
00:00001C28 487900345678    	  2976:             pea $00345678
00:00001C2E 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
00:00001C34 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
00:00001C36 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
00:00001C38 4DFA0008        	  2983:             lea LEA1(pc),a6
00:00001C3C 200E            	  2984:             move.l a6,d0
00:00001C3E B08E            	  2985:             cmp.l a6,d0
00:00001C40 66FE            	  2986:             bne.s *                   * branch if Z set
00:00001C42 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
00:00001C46 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
00:00001C4C 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
00:00001C4E 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
00:00001C50 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
00:00001C54 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
00:00001C56 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
00:00001C5A 10BC0000        	  3014:             move.b #$00,(a0)
00:00001C5E 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C60 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
00:00001C62 4AD0            	  3017:             tas (a0)
00:00001C64 0C100080        	  3018:             cmpi.b #$80,(a0)
00:00001C68 66FE            	  3019:             bne.s *                   * branch if Z set
00:00001C6A 10BC00F5        	  3020:             move.b #$F5,(a0)
00:00001C6E 4AD0            	  3021:             tas (a0)
00:00001C70 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001C72 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
00:00001C74 4AD0            	  3024:             tas (a0)
00:00001C76 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
00:00001C7A 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
00:00001C7C 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
00:00001C7E 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
00:00001C82 10BC0000        	  3043:             move.b #$00,(a0)
00:00001C86 4A10            	  3044:             tst.b (a0)
00:00001C88 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C8A 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
00:00001C8C 10BC00F5        	  3047:             move.b #$F5,(a0)
00:00001C90 4A10            	  3048:             tst.b (a0)
00:00001C92 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001C94 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
00:00001C96 30BC0000        	  3053:             move.w #$0000,(a0)
00:00001C9A 4A50            	  3054:             tst.w (a0)
00:00001C9C 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C9E 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
00:00001CA0 30BCF567        	  3057:             move.w #$F567,(a0)
00:00001CA4 4A50            	  3058:             tst.w (a0)
00:00001CA6 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CA8 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
00:00001CAA 20BC00000000    	  3063:             move.l #$00000000,(a0)
00:00001CB0 4A90            	  3064:             tst.l (a0)
00:00001CB2 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CB4 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
00:00001CB6 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
00:00001CBC 4A90            	  3068:             tst.l (a0)
00:00001CBE 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CC0 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
00:00001CC2 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
00:00001CC4 207C11223344    	  3083:             move.l #$11223344,a0
00:00001CCA 203C11223344    	  3084:             move.l #$11223344,d0
00:00001CD0 4E500000        	  3085:             link a0,#$0
00:00001CD4 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
00:00001CDA 4E58            	  3088:             unlk a0
00:00001CDC B1C0            	  3089:             cmp.l d0,a0
00:00001CDE 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
00:00001CE0 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
00:00001CE2 207C11223344    	  3101:             move.l #$11223344,a0
00:00001CE8 4E60            	  3102:             move a0,USP
00:00001CEA 4E69            	  3103:             move USP,a1
00:00001CEC B3C8            	  3104:             cmp.l a0,a1
00:00001CEE 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
00:00001CF0 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: op_CHK:
00:00001CF2 303C1122        	  3116:             move.w #$1122,d0
00:00001CF6 323C1122        	  3117:             move.w #$1122,d1
00:00001CFA 4380            	  3118:             chk d0,d1
                            	  3119: 
00:00001CFC 4E71            	  3120:             nop
00:00001CFE 4E71            	  3121:             nop
                            	  3122: 
00:00001D00 323C1122        	  3123:             move.w #$1122,d1
00:00001D04 43BC1122        	  3124:             chk #$1122,d1
                            	  3125: 
00:00001D08 323C1122        	  3126:             move.w #$1122,d1
00:00001D0C 43BC007A        	  3127:             chk #00122,d1
00:00001D10 BCBCEEEE0006    	  3128:             cmp.l #$EEEE0006,d6
00:00001D16 66FE            	  3129:             bne.s *                   * branch if Z set
                            	  3130: 
00:00001D18 303C1122        	  3131:             move.w #$1122,d0
00:00001D1C 323C8000        	  3132:             move.w #$8000,d1
00:00001D20 4380            	  3133:             chk d0,d1
00:00001D22 BCBCEEEE0006    	  3134:             cmp.l #$EEEE0006,d6
00:00001D28 66FE            	  3135:             bne.s *                   * branch if Z set
                            	  3136: 
00:00001D2A 4E75            	  3137:             rts
                            	  3138: 
                            	  3139: 
                            	  3140: *-----------------------------------------------------------
                            	  3141: *-----------------------------------------------------------
                            	  3142: * OPCODE : NEGS
                            	  3143: *-----------------------------------------------------------
                            	  3144: *-----------------------------------------------------------
                            	  3145: op_NEGS:
                            	  3146: 
                            	  3147: *     NOT - BYTE
00:00001D2C 307C0100        	  3148:             move.l #$00000100,a0
00:00001D30 7000            	  3149:             moveq  #$00000000,d0
00:00001D32 4600            	  3150:             not.b d0
00:00001D34 6AFE            	  3151:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D36 67FE            	  3152:             beq.s *                   * Check Z Flag  beq/bne
00:00001D38 4600            	  3153:             not.b d0
00:00001D3A 6BFE            	  3154:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D3C 66FE            	  3155:             bne.s *                   * Check Z Flag  beq/bne
00:00001D3E 4A00            	  3156:             cmpi.b #$00,d0
00:00001D40 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
00:00001D42 10BC0080        	  3158:             move.b #$80,(a0)
00:00001D46 4610            	  3159:             not.b (a0)
00:00001D48 6BFE            	  3160:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D4A 67FE            	  3161:             beq.s *                   * Check Z Flag  beq/bne
00:00001D4C 4610            	  3162:             not.b (a0)
00:00001D4E 6AFE            	  3163:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D50 67FE            	  3164:             beq.s *                   * Check Z Flag  beq/bne
00:00001D52 0C100080        	  3165:             cmpi.b #$80,(a0)
00:00001D56 66FE            	  3166:             bne.s *                   * Check Z Flag  beq/bne
                            	  3167: 
                            	  3168: *     NOT - WORD
00:00001D58 307C0100        	  3169:             move.l #$00000100,a0
00:00001D5C 7000            	  3170:             moveq  #$00000000,d0
00:00001D5E 4640            	  3171:             not.w d0
00:00001D60 6AFE            	  3172:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D62 67FE            	  3173:             beq.s *                   * Check Z Flag  beq/bne
00:00001D64 4640            	  3174:             not.w d0
00:00001D66 6BFE            	  3175:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D68 66FE            	  3176:             bne.s *                   * Check Z Flag  beq/bne
00:00001D6A 4A40            	  3177:             cmpi.w #$0000,d0
00:00001D6C 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
00:00001D6E 30BC5A5A        	  3179:             move.w #$5a5a,(a0)
00:00001D72 4650            	  3180:             not.w (a0)
00:00001D74 6AFE            	  3181:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D76 67FE            	  3182:             beq.s *                   * Check Z Flag  beq/bne
00:00001D78 4650            	  3183:             not.w (a0)
00:00001D7A 6BFE            	  3184:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D7C 67FE            	  3185:             beq.s *                   * Check Z Flag  beq/bne
00:00001D7E 0C505A5A        	  3186:             cmpi.w #$5a5a,(a0)
00:00001D82 66FE            	  3187:             bne.s *                   * Check Z Flag  beq/bne
                            	  3188: 
                            	  3189: *     NOT - LONG
00:00001D84 307C0100        	  3190:             move.l #$00000100,a0
00:00001D88 7000            	  3191:             moveq  #$00000000,d0
00:00001D8A 4680            	  3192:             not.l d0
00:00001D8C 6AFE            	  3193:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D8E 67FE            	  3194:             beq.s *                   * Check Z Flag  beq/bne
00:00001D90 4680            	  3195:             not.l d0
00:00001D92 6BFE            	  3196:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D94 66FE            	  3197:             bne.s *                   * Check Z Flag  beq/bne
00:00001D96 4A80            	  3198:             cmpi.l #$00000000,d0
00:00001D98 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
00:00001D9A 20BC5A5A1234    	  3200:             move.l #$5a5a1234,(a0)
00:00001DA0 4690            	  3201:             not.l (a0)
00:00001DA2 6AFE            	  3202:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DA4 67FE            	  3203:             beq.s *                   * Check Z Flag  beq/bne
00:00001DA6 4690            	  3204:             not.l (a0)
00:00001DA8 6BFE            	  3205:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DAA 67FE            	  3206:             beq.s *                   * Check Z Flag  beq/bne
00:00001DAC 0C905A5A1234    	  3207:             cmpi.l #$5a5a1234,(a0)
00:00001DB2 66FE            	  3208:             bne.s *                   * Check Z Flag  beq/bne
                            	  3209: 
                            	  3210: * -----
                            	  3211: 
                            	  3212: *     NEG - BYTE
00:00001DB4 307C0100        	  3213:             move.l #$00000100,a0
00:00001DB8 7000            	  3214:             moveq  #$00000000,d0
00:00001DBA 7240D241        	  3215:             move.l #$00000080,d1
00:00001DBE 4400            	  3216:             neg.b d0
00:00001DC0 6BFE            	  3217:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001DC2 66FE            	  3218:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001DC4 65FE            	  3219:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001DC6 69FE            	  3220:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DC8 4401            	  3221:             neg.b d1
00:00001DCA 6AFE            	  3222:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001DCC 67FE            	  3223:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DCE 64FE            	  3224:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DD0 68FE            	  3225:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001DD2 0C010080        	  3226:             cmpi.b #$80,d1
00:00001DD6 66FE            	  3227:             bne.s *                   * Check Z Flag  beq/bne
00:00001DD8 10BC007F        	  3228:             move.b #$7F,(a0)
00:00001DDC 4410            	  3229:             neg.b (a0)
00:00001DDE 6AFE            	  3230:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001DE0 67FE            	  3231:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DE2 64FE            	  3232:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DE4 69FE            	  3233:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DE6 10BC00F5        	  3234:             move.b #$F5,(a0)
00:00001DEA 4410            	  3235:             neg.b (a0)
00:00001DEC 6BFE            	  3236:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001DEE 67FE            	  3237:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DF0 64FE            	  3238:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DF2 69FE            	  3239:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DF4 0C10000B        	  3240:             cmpi.b #$0B,(a0)
00:00001DF8 66FE            	  3241:             bne.s *                   * Check Z Flag  beq/bne
                            	  3242: 
                            	  3243: * -----
                            	  3244: 
                            	  3245: *     NEG - WORD
00:00001DFA 307C0100        	  3246:             move.l #$00000100,a0
00:00001DFE 7000            	  3247:             moveq  #$00000000,d0
00:00001E00 223C00008000    	  3248:             move.l #$00008000,d1
00:00001E06 4440            	  3249:             neg.w d0
00:00001E08 6BFE            	  3250:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E0A 66FE            	  3251:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E0C 65FE            	  3252:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E0E 69FE            	  3253:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E10 4441            	  3254:             neg.w d1
00:00001E12 6AFE            	  3255:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E14 67FE            	  3256:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E16 64FE            	  3257:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E18 68FE            	  3258:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E1A 0C418000        	  3259:             cmpi.w #$8000,d1
00:00001E1E 66FE            	  3260:             bne.s *                   * Check Z Flag  beq/bne
00:00001E20 30BC7FFF        	  3261:             move.w #$7FFF,(a0)
00:00001E24 4450            	  3262:             neg.w (a0)
00:00001E26 6AFE            	  3263:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E28 67FE            	  3264:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E2A 64FE            	  3265:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E2C 69FE            	  3266:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E2E 30BCF578        	  3267:             move.w #$F578,(a0)
00:00001E32 4450            	  3268:             neg.w (a0)
00:00001E34 6BFE            	  3269:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E36 67FE            	  3270:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E38 64FE            	  3271:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E3A 69FE            	  3272:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E3C 0C500A88        	  3273:             cmpi.w #$0A88,(a0)
00:00001E40 66FE            	  3274:             bne.s *                   * Check Z Flag  beq/bne
                            	  3275: 
                            	  3276: * -----
                            	  3277: 
                            	  3278: *     NEG - LONG
00:00001E42 307C0100        	  3279:             move.l #$00000100,a0
00:00001E46 7000            	  3280:             moveq  #$00000000,d0
00:00001E48 223C80000000    	  3281:             move.l #$80000000,d1
00:00001E4E 4480            	  3282:             neg.l d0
00:00001E50 6BFE            	  3283:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E52 66FE            	  3284:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E54 65FE            	  3285:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E56 69FE            	  3286:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E58 4481            	  3287:             neg.l d1
00:00001E5A 6AFE            	  3288:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E5C 67FE            	  3289:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E5E 64FE            	  3290:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E60 68FE            	  3291:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E62 0C8180000000    	  3292:             cmpi.l #$80000000,d1
00:00001E68 66FE            	  3293:             bne.s *                   * Check Z Flag  beq/bne
00:00001E6A 20BC7FFFFFFF    	  3294:             move.l #$7FFFFFFF,(a0)
00:00001E70 4490            	  3295:             neg.l (a0)
00:00001E72 6AFE            	  3296:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E74 67FE            	  3297:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E76 64FE            	  3298:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E78 69FE            	  3299:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E7A 20BCF5781234    	  3300:             move.l #$F5781234,(a0)
00:00001E80 4490            	  3301:             neg.l (a0)
00:00001E82 6BFE            	  3302:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E84 67FE            	  3303:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E86 64FE            	  3304:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E88 69FE            	  3305:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E8A 0C900A87EDCC    	  3306:             cmpi.l #$0A87EDCC,(a0)
00:00001E90 66FE            	  3307:             bne.s *                   * Check Z Flag  beq/bne
                            	  3308: 
                            	  3309: 
                            	  3310: * -----
                            	  3311: 
                            	  3312: *     NEGX - BYTE
00:00001E92 307C0100        	  3313:             move.l #$00000100,a0
00:00001E96 7000            	  3314:             moveq  #$00000000,d0
00:00001E98 7240D241        	  3315:             move.l #$00000080,d1
00:00001E9C 003C0010        	  3316:             ori.b #$10,CCR        * Set X Flag
00:00001EA0 4000            	  3317:             negx.b d0
00:00001EA2 6AFE            	  3318:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001EA4 67FE            	  3319:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EA6 64FE            	  3320:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EA8 69FE            	  3321:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EAA 023C00EF        	  3322:             andi.b #$EF,CCR       * Clear X Flag
00:00001EAE 4000            	  3323:             negx.b d0
00:00001EB0 6BFE            	  3324:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001EB2 67FE            	  3325:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EB4 64FE            	  3326:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EB6 69FE            	  3327:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EB8 003C0010        	  3328:             ori.b #$10,CCR        * Set X Flag
00:00001EBC 4001            	  3329:             negx.b d1
00:00001EBE 6BFE            	  3330:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001EC0 67FE            	  3331:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EC2 64FE            	  3332:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001EC4 69FE            	  3333:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001EC6 0C01007F        	  3334:             cmpi.b #$7F,d1
00:00001ECA 66FE            	  3335:             bne.s *                   * Check Z Flag  beq/bne
00:00001ECC 023C00EF        	  3336:             andi.b #$EF,CCR       * Clear X Flag
00:00001ED0 4001            	  3337:             negx.b d1
00:00001ED2 6AFE            	  3338:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001ED4 67FE            	  3339:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001ED6 64FE            	  3340:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001ED8 69FE            	  3341:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001EDA 0C010081        	  3342:             cmpi.b #$81,d1
00:00001EDE 66FE            	  3343:             bne.s *                   * Check Z Flag  beq/bne
00:00001EE0 10BC007F        	  3344:             move.b #$7F,(a0)
00:00001EE4 003C0010        	  3345:             ori.b #$10,CCR        * Set X Flag
00:00001EE8 4010            	  3346:             negx.b (a0)
00:00001EEA 6AFE            	  3347:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EEC 67FE            	  3348:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EEE 64FE            	  3349:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3350:             * I think overflow should happen here.
                            	  3351: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EF0 10BC007F        	  3352:             move.b #$7F,(a0)
00:00001EF4 023C00EF        	  3353:             andi.b #$EF,CCR       * Clear X Flag
00:00001EF8 4010            	  3354:             negx.b (a0)
00:00001EFA 6AFE            	  3355:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EFC 67FE            	  3356:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EFE 64FE            	  3357:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F00 69FE            	  3358:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F02 10BC00F5        	  3359:             move.b #$F5,(a0)
00:00001F06 003C0010        	  3360:             ori.b #$10,CCR        * Set X Flag
00:00001F0A 4010            	  3361:             negx.b (a0)
00:00001F0C 6BFE            	  3362:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F0E 67FE            	  3363:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F10 64FE            	  3364:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F12 69FE            	  3365:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F14 0C10000A        	  3366:             cmpi.b #$0A,(a0)
00:00001F18 66FE            	  3367:             bne.s *                   * Check Z Flag  beq/bne
00:00001F1A 023C00EF        	  3368:             andi.b #$EF,CCR       * Clear X Flag
00:00001F1E 4010            	  3369:             negx.b (a0)
00:00001F20 6AFE            	  3370:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F22 67FE            	  3371:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F24 64FE            	  3372:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F26 69FE            	  3373:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F28 0C1000F6        	  3374:             cmpi.b #$F6,(a0)
00:00001F2C 66FE            	  3375:             bne.s *                   * Check Z Flag  beq/bne
                            	  3376: 
                            	  3377: 
                            	  3378: 
                            	  3379: * -----
                            	  3380: 
                            	  3381: *     NEGX - WORD
00:00001F2E 307C0100        	  3382:             move.l #$00000100,a0
00:00001F32 7000            	  3383:             moveq  #$00000000,d0
00:00001F34 223C00008000    	  3384:             move.l #$00008000,d1
00:00001F3A 003C0010        	  3385:             ori.b #$10,CCR        * Set X Flag
00:00001F3E 4040            	  3386:             negx.w d0
00:00001F40 6AFE            	  3387:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F42 67FE            	  3388:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F44 64FE            	  3389:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F46 69FE            	  3390:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F48 023C00EF        	  3391:             andi.b #$EF,CCR       * Clear X Flag
00:00001F4C 4040            	  3392:             negx.w d0
00:00001F4E 6BFE            	  3393:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F50 67FE            	  3394:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F52 64FE            	  3395:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F54 69FE            	  3396:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F56 003C0010        	  3397:             ori.b #$10,CCR        * Set X Flag
00:00001F5A 4041            	  3398:             negx.w d1
00:00001F5C 6BFE            	  3399:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001F5E 67FE            	  3400:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F60 64FE            	  3401:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F62 69FE            	  3402:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F64 0C417FFF        	  3403:             cmpi.w #$7FFF,d1
00:00001F68 66FE            	  3404:             bne.s *                   * Check Z Flag  beq/bne
00:00001F6A 023C00EF        	  3405:             andi.b #$EF,CCR       * Clear X Flag
00:00001F6E 4041            	  3406:             negx.w d1
00:00001F70 6AFE            	  3407:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F72 67FE            	  3408:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F74 64FE            	  3409:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F76 69FE            	  3410:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F78 0C418001        	  3411:             cmpi.w #$8001,d1
00:00001F7C 66FE            	  3412:             bne.s *                   * Check Z Flag  beq/bne
00:00001F7E 30BC7FFF        	  3413:             move.w #$7FFF,(a0)
00:00001F82 003C0010        	  3414:             ori.b #$10,CCR        * Set X Flag
00:00001F86 4050            	  3415:             negx.w (a0)
00:00001F88 6AFE            	  3416:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F8A 67FE            	  3417:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F8C 64FE            	  3418:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3419: ***            
                            	  3420: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F8E 30BCF567        	  3421:             move.w #$F567,(a0)
00:00001F92 023C00EF        	  3422:             andi.b #$EF,CCR       * Clear X Flag
00:00001F96 4050            	  3423:             negx.w (a0)
00:00001F98 6BFE            	  3424:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001F9A 67FE            	  3425:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F9C 64FE            	  3426:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F9E 69FE            	  3427:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FA0 30BCF567        	  3428:             move.w #$F567,(a0)
00:00001FA4 003C0010        	  3429:             ori.b #$10,CCR        * Set X Flag
00:00001FA8 4050            	  3430:             negx.w (a0)
00:00001FAA 6BFE            	  3431:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FAC 67FE            	  3432:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FAE 64FE            	  3433:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FB0 69FE            	  3434:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FB2 0C500A98        	  3435:             cmpi.w #$0A98,(a0)
00:00001FB6 66FE            	  3436:             bne.s *                   * Check Z Flag  beq/bne
00:00001FB8 023C00EF        	  3437:             andi.b #$EF,CCR       * Clear X Flag
00:00001FBC 4050            	  3438:             negx.w (a0)
00:00001FBE 6AFE            	  3439:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001FC0 67FE            	  3440:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FC2 64FE            	  3441:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FC4 69FE            	  3442:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FC6 0C50F568        	  3443:             cmpi.w #$F568,(a0)
00:00001FCA 66FE            	  3444:             bne.s *                   * Check Z Flag  beq/bne
                            	  3445: 
                            	  3446: 
                            	  3447: * -----
                            	  3448: 
                            	  3449: *     NEGX - LONG
00:00001FCC 307C0100        	  3450:             move.l #$00000100,a0
00:00001FD0 7000            	  3451:             moveq  #$00000000,d0
00:00001FD2 223C80000000    	  3452:             move.l #$80000000,d1
00:00001FD8 003C0010        	  3453:             ori.b #$10,CCR        * Set X Flag
00:00001FDC 4080            	  3454:             negx.l d0
00:00001FDE 6AFE            	  3455:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001FE0 67FE            	  3456:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001FE2 64FE            	  3457:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001FE4 69FE            	  3458:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FE6 023C00EF        	  3459:             andi.b #$EF,CCR       * Clear X Flag
00:00001FEA 4080            	  3460:             negx.l d0
00:00001FEC 6BFE            	  3461:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FEE 67FE            	  3462:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001FF0 64FE            	  3463:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001FF2 69FE            	  3464:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FF4 003C0010        	  3465:             ori.b #$10,CCR        * Set X Flag
00:00001FF8 4081            	  3466:             negx.l d1
00:00001FFA 6BFE            	  3467:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001FFC 67FE            	  3468:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FFE 64FE            	  3469:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002000 69FE            	  3470:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00002002 0C817FFFFFFF    	  3471:             cmpi.l #$7FFFFFFF,d1
00:00002008 66FE            	  3472:             bne.s *                   * Check Z Flag  beq/bne
00:0000200A 023C00EF        	  3473:             andi.b #$EF,CCR       * Clear X Flag
00:0000200E 4081            	  3474:             negx.l d1
00:00002010 6AFE            	  3475:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00002012 67FE            	  3476:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002014 64FE            	  3477:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3478: ****            
                            	  3479: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:00002016 0C8180000001    	  3480:             cmpi.l #$80000001,d1
00:0000201C 66FE            	  3481:             bne.s *                   * Check Z Flag  beq/bne
00:0000201E 20BC00007FFF    	  3482:             move.l #$7FFF,(a0)
00:00002024 003C0010        	  3483:             ori.b #$10,CCR        * Set X Flag
00:00002028 4090            	  3484:             negx.l (a0)
00:0000202A 6AFE            	  3485:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000202C 67FE            	  3486:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000202E 64FE            	  3487:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3488: ****            
                            	  3489: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002030 20BCF5671234    	  3490:             move.l #$F5671234,(a0)
00:00002036 023C00EF        	  3491:             andi.b #$EF,CCR       * Clear X Flag
00:0000203A 4090            	  3492:             negx.l (a0)
00:0000203C 6BFE            	  3493:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000203E 67FE            	  3494:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002040 64FE            	  3495:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002042 69FE            	  3496:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002044 20BCF5675678    	  3497:             move.l #$F5675678,(a0)
00:0000204A 003C0010        	  3498:             ori.b #$10,CCR        * Set X Flag
00:0000204E 4090            	  3499:             negx.l (a0)
00:00002050 6BFE            	  3500:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00002052 67FE            	  3501:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002054 64FE            	  3502:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002056 69FE            	  3503:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002058 0C900A98A987    	  3504:             cmpi.l #$0A98A987,(a0)
00:0000205E 66FE            	  3505:             bne.s *                   * Check Z Flag  beq/bne
00:00002060 023C00EF        	  3506:             andi.b #$EF,CCR       * Clear X Flag
00:00002064 4090            	  3507:             negx.l (a0)
00:00002066 6AFE            	  3508:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00002068 67FE            	  3509:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000206A 64FE            	  3510:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000206C 69FE            	  3511:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000206E 0C90F5675679    	  3512:             cmpi.l #$F5675679,(a0)
00:00002074 66FE            	  3513:             bne.s *                   * Check Z Flag  beq/bne
                            	  3514: 
                            	  3515: 
                            	  3516: * -----
                            	  3517: 
                            	  3518: *     CLR - BYTE
00:00002076 307C0100        	  3519:             move.l #$00000100,a0
00:0000207A 203C12345678    	  3520:             move.l #$12345678,d0
00:00002080 223C12345678    	  3521:             move.l #$12345678,d1
00:00002086 243C12345678    	  3522:             move.l #$12345678,d2
00:0000208C 283C12345600    	  3523:             move.l #$12345600,d4
00:00002092 2A3C12340000    	  3524:             move.l #$12340000,d5
00:00002098 7C00            	  3525:             moveq  #$00000000,d6
                            	  3526: 
00:0000209A 4200            	  3527:             clr.b d0
00:0000209C 66FE            	  3528:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000209E 6BFE            	  3529:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020A0 B880            	  3530:             cmp.l d0,d4
00:000020A2 66FE            	  3531:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3532: 
00:000020A4 4241            	  3533:             clr.w d1
00:000020A6 66FE            	  3534:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020A8 6BFE            	  3535:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020AA BA81            	  3536:             cmp.l d1,d5
00:000020AC 66FE            	  3537:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3538: 
00:000020AE 7400            	  3539:             clr.l d2
00:000020B0 66FE            	  3540:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020B2 6BFE            	  3541:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020B4 BC82            	  3542:             cmp.l d2,d6
00:000020B6 66FE            	  3543:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3544: 
00:000020B8 4E75            	  3545:             rts
                            	  3546: 
                            	  3547: 
                            	  3548: 
                            	  3549: *-----------------------------------------------------------
                            	  3550: *-----------------------------------------------------------
                            	  3551: * OPCODE : MOVEM
                            	  3552: *-----------------------------------------------------------
                            	  3553: *-----------------------------------------------------------
                            	  3554: op_MOVEM:
                            	  3555: 
                            	  3556: *     WORD  Registers --> Memory
00:000020BA 203C0000D0D0    	  3557:             move.l #$0000d0d0,d0
00:000020C0 223C0000D1D1    	  3558:             move.l #$0000d1d1,d1
00:000020C6 243C0000D2D2    	  3559:             move.l #$0000d2d2,d2
00:000020CC 263C0000D3D3    	  3560:             move.l #$0000d3d3,d3
00:000020D2 283C0000D4D4    	  3561:             move.l #$0000d4d4,d4
00:000020D8 2A3C0000D5D5    	  3562:             move.l #$0000d5d5,d5
00:000020DE 2C3C0000D6D6    	  3563:             move.l #$0000d6d6,d6
00:000020E4 2E3C0000D7D7    	  3564:             move.l #$0000d7d7,d7
00:000020EA 307C0A0A        	  3565:             move.l #$00000a0a,a0
00:000020EE 327C1A1A        	  3566:             move.l #$00001a1a,a1
00:000020F2 347C2A2A        	  3567:             move.l #$00002a2a,a2
00:000020F6 367C3A3A        	  3568:             move.l #$00003a3a,a3
00:000020FA 387C4A4A        	  3569:             move.l #$00004a4a,a4
00:000020FE 3A7C5A5A        	  3570:             move.l #$00005a5a,a5
00:00002102 3C7C6A6A        	  3571:             move.l #$00006a6a,a6
                            	  3572: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3573: 
00:00002106 48B8FFFF0100    	  3574:             movem.w D0-D7/A0-A7,$00000100
                            	  3575: 
00:0000210C 307C0100        	  3576:             move.l #$00000100,a0
                            	  3577: 
00:00002110 B058            	  3578:             cmp.w (a0)+,d0
00:00002112 66FE            	  3579:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002114 B258            	  3580:             cmp.w (a0)+,d1
00:00002116 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002118 B458            	  3582:             cmp.w (a0)+,d2
00:0000211A 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000211C B658            	  3584:             cmp.w (a0)+,d3
00:0000211E 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002120 B858            	  3586:             cmp.w (a0)+,d4
00:00002122 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002124 BA58            	  3588:             cmp.w (a0)+,d5
00:00002126 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002128 BC58            	  3590:             cmp.w (a0)+,d6
00:0000212A 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000212C BE58            	  3592:             cmp.w (a0)+,d7
00:0000212E 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3594: 
00:00002130 0C580A0A        	  3595:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:00002134 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3597: 
00:00002136 B2D8            	  3598:             cmp.w (a0)+,a1
00:00002138 66FE            	  3599:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000213A B4D8            	  3600:             cmp.w (a0)+,a2
00:0000213C 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000213E B6D8            	  3602:             cmp.w (a0)+,a3
00:00002140 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002142 B8D8            	  3604:             cmp.w (a0)+,a4
00:00002144 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002146 BAD8            	  3606:             cmp.w (a0)+,a5
00:00002148 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000214A BCD8            	  3608:             cmp.w (a0)+,a6
00:0000214C 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3610: 
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: *     LONG  Registers --> Memory
00:0000214E 203CD0D0D0D0    	  3615:             move.l #$d0d0d0d0,d0
00:00002154 223CD1D1D1D1    	  3616:             move.l #$d1d1d1d1,d1
00:0000215A 243CD2D2D2D2    	  3617:             move.l #$d2d2d2d2,d2
00:00002160 263CD3D3D3D3    	  3618:             move.l #$d3d3d3d3,d3
00:00002166 283CD4D4D4D4    	  3619:             move.l #$d4d4d4d4,d4
00:0000216C 2A3CD5D5D5D5    	  3620:             move.l #$d5d5d5d5,d5
00:00002172 2C3CD6D6D6D6    	  3621:             move.l #$d6d6d6d6,d6
00:00002178 2E3CD7D7D7D7    	  3622:             move.l #$d7d7d7d7,d7
00:0000217E 207C0A0A0A0A    	  3623:             move.l #$0a0a0a0a,a0
00:00002184 227C1A1A1A1A    	  3624:             move.l #$1a1a1a1a,a1
00:0000218A 247C2A2A2A2A    	  3625:             move.l #$2a2a2a2a,a2
00:00002190 267C3A3A3A3A    	  3626:             move.l #$3a3a3a3a,a3
00:00002196 287C4A4A4A4A    	  3627:             move.l #$4a4a4a4a,a4
00:0000219C 2A7C5A5A5A5A    	  3628:             move.l #$5a5a5a5a,a5
00:000021A2 2C7C6A6A6A6A    	  3629:             move.l #$6a6a6a6a,a6
                            	  3630: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3631: 
                            	  3632: 
00:000021A8 48F8FFFF0120    	  3633:             movem.l D0-D7/A0-A7,$00000120
                            	  3634: 
00:000021AE 307C0120        	  3635:             move.l #$00000120,a0
                            	  3636: 
00:000021B2 B098            	  3637:             cmp.l (a0)+,d0
00:000021B4 66FE            	  3638:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021B6 B298            	  3639:             cmp.l (a0)+,d1
00:000021B8 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021BA B498            	  3641:             cmp.l (a0)+,d2
00:000021BC 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021BE B698            	  3643:             cmp.l (a0)+,d3
00:000021C0 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021C2 B898            	  3645:             cmp.l (a0)+,d4
00:000021C4 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021C6 BA98            	  3647:             cmp.l (a0)+,d5
00:000021C8 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021CA BC98            	  3649:             cmp.l (a0)+,d6
00:000021CC 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021CE BE98            	  3651:             cmp.l (a0)+,d7
00:000021D0 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3653: 
00:000021D2 0C980A0A0A0A    	  3654:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:000021D8 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3656: 
00:000021DA B3D8            	  3657:             cmp.l (a0)+,a1
00:000021DC 66FE            	  3658:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021DE B5D8            	  3659:             cmp.l (a0)+,a2
00:000021E0 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021E2 B7D8            	  3661:             cmp.l (a0)+,a3
00:000021E4 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021E6 B9D8            	  3663:             cmp.l (a0)+,a4
00:000021E8 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021EA BBD8            	  3665:             cmp.l (a0)+,a5
00:000021EC 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021EE BDD8            	  3667:             cmp.l (a0)+,a6
00:000021F0 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3669: *      ----
                            	  3670: 
                            	  3671: 
                            	  3672: *     WORD  Registers --> Memory  -(An) EA Mode
00:000021F2 203C0000D0D0    	  3673:             move.l #$0000d0d0,d0
00:000021F8 223C0000D1D1    	  3674:             move.l #$0000d1d1,d1
00:000021FE 243C0000D2D2    	  3675:             move.l #$0000d2d2,d2
00:00002204 263C0000D3D3    	  3676:             move.l #$0000d3d3,d3
00:0000220A 283C0000D4D4    	  3677:             move.l #$0000d4d4,d4
00:00002210 2A3C0000D5D5    	  3678:             move.l #$0000d5d5,d5
00:00002216 2C3C0000D6D6    	  3679:             move.l #$0000d6d6,d6
00:0000221C 2E3C0000D7D7    	  3680:             move.l #$0000d7d7,d7
00:00002222 307C0A0A        	  3681:             move.l #$00000a0a,a0
00:00002226 327C1A1A        	  3682:             move.l #$00001a1a,a1
00:0000222A 347C2A2A        	  3683:             move.l #$00002a2a,a2
00:0000222E 367C3A3A        	  3684:             move.l #$00003a3a,a3
00:00002232 387C4A4A        	  3685:             move.l #$00004a4a,a4
00:00002236 3A7C5A5A        	  3686:             move.l #$00005a5a,a5
00:0000223A 3C7C6A6A        	  3687:             move.l #$00006a6a,a6
                            	  3688: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3689: 
00:0000223E 307C01A0        	  3690:             move.l #$000001A0,a0
00:00002242 48A0FFFF        	  3691:             movem.w D0-D7/A0-A7,-(a0)
                            	  3692: 
00:00002246 307C019E        	  3693:             move.l #$0000019E,a0
                            	  3694: 
00:0000224A BCE0            	  3695:             cmp.w -(a0),a6
00:0000224C 66FE            	  3696:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000224E BAE0            	  3697:             cmp.w -(a0),a5
00:00002250 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002252 B8E0            	  3699:             cmp.w -(a0),a4
00:00002254 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002256 B6E0            	  3701:             cmp.w -(a0),a3
00:00002258 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000225A B4E0            	  3703:             cmp.w -(a0),a2
00:0000225C 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000225E B2E0            	  3705:             cmp.w -(a0),a1
00:00002260 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002262 B0E0            	  3707:             cmp.w -(a0),a0
                            	  3708: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00002264 BE60            	  3709:             cmp.w -(a0),d7
00:00002266 66FE            	  3710:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002268 BC60            	  3711:             cmp.w -(a0),d6
00:0000226A 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000226C BA60            	  3713:             cmp.w -(a0),d5
00:0000226E 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002270 B860            	  3715:             cmp.w -(a0),d4
00:00002272 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002274 B660            	  3717:             cmp.w -(a0),d3
00:00002276 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002278 B460            	  3719:             cmp.w -(a0),d2
00:0000227A 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000227C B260            	  3721:             cmp.w -(a0),d1
00:0000227E 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002280 B060            	  3723:             cmp.w -(a0),d0
00:00002282 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3725: 
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: *     LONG  Registers --> Memory   -(An) EA Mode
00:00002284 203CD0D0D0D0    	  3730:             move.l #$d0d0d0d0,d0
00:0000228A 223CD1D1D1D1    	  3731:             move.l #$d1d1d1d1,d1
00:00002290 243CD2D2D2D2    	  3732:             move.l #$d2d2d2d2,d2
00:00002296 263CD3D3D3D3    	  3733:             move.l #$d3d3d3d3,d3
00:0000229C 283CD4D4D4D4    	  3734:             move.l #$d4d4d4d4,d4
00:000022A2 2A3CD5D5D5D5    	  3735:             move.l #$d5d5d5d5,d5
00:000022A8 2C3CD6D6D6D6    	  3736:             move.l #$d6d6d6d6,d6
00:000022AE 2E3CD7D7D7D7    	  3737:             move.l #$d7d7d7d7,d7
00:000022B4 207C0A0A0A0A    	  3738:             move.l #$0a0a0a0a,a0
00:000022BA 227C1A1A1A1A    	  3739:             move.l #$1a1a1a1a,a1
00:000022C0 247C2A2A2A2A    	  3740:             move.l #$2a2a2a2a,a2
00:000022C6 267C3A3A3A3A    	  3741:             move.l #$3a3a3a3a,a3
00:000022CC 287C4A4A4A4A    	  3742:             move.l #$4a4a4a4a,a4
00:000022D2 2A7C5A5A5A5A    	  3743:             move.l #$5a5a5a5a,a5
00:000022D8 2C7C6A6A6A6A    	  3744:             move.l #$6a6a6a6a,a6
                            	  3745: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3746: 
                            	  3747: 
00:000022DE 307C01A0        	  3748:             move.l #$000001A0,a0
00:000022E2 48E0FFFF        	  3749:             movem.l D0-D7/A0-A7,-(a0)
                            	  3750: 
00:000022E6 307C019C        	  3751:             move.l #$0000019C,a0
                            	  3752: 
00:000022EA BDE0            	  3753:             cmp.l -(a0),a6
00:000022EC 66FE            	  3754:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022EE BBE0            	  3755:             cmp.l -(a0),a5
00:000022F0 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022F2 B9E0            	  3757:             cmp.l -(a0),a4
00:000022F4 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022F6 B7E0            	  3759:             cmp.l -(a0),a3
00:000022F8 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022FA B5E0            	  3761:             cmp.l -(a0),a2
00:000022FC 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022FE B3E0            	  3763:             cmp.l -(a0),a1
00:00002300 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002302 B1E0            	  3765:             cmp.l -(a0),a0
                            	  3766: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00002304 BEA0            	  3767:             cmp.l -(a0),d7
00:00002306 66FE            	  3768:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002308 BCA0            	  3769:             cmp.l -(a0),d6
00:0000230A 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000230C BAA0            	  3771:             cmp.l -(a0),d5
00:0000230E 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002310 B8A0            	  3773:             cmp.l -(a0),d4
00:00002312 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002314 B6A0            	  3775:             cmp.l -(a0),d3
00:00002316 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002318 B4A0            	  3777:             cmp.l -(a0),d2
00:0000231A 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000231C B2A0            	  3779:             cmp.l -(a0),d1
00:0000231E 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002320 B0A0            	  3781:             cmp.l -(a0),d0
00:00002322 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3783: 
                            	  3784: 
                            	  3785: 
                            	  3786: *     ----
                            	  3787: 
                            	  3788: *     WORD - Memory --> Registers
00:00002324 7000            	  3789:             moveq  #$00000000,d0
00:00002326 7200            	  3790:             moveq  #$00000000,d1
00:00002328 7400            	  3791:             moveq  #$00000000,d2
00:0000232A 7600            	  3792:             moveq  #$00000000,d3
00:0000232C 7800            	  3793:             moveq  #$00000000,d4
00:0000232E 7A00            	  3794:             moveq  #$00000000,d5
00:00002330 7C00            	  3795:             moveq  #$00000000,d6
00:00002332 7E00            	  3796:             moveq  #$00000000,d7
00:00002334 91C8            	  3797:             move.l #$00000000,a0
00:00002336 93C9            	  3798:             move.l #$00000000,a1
00:00002338 95CA            	  3799:             move.l #$00000000,a2
00:0000233A 97CB            	  3800:             move.l #$00000000,a3
00:0000233C 99CC            	  3801:             move.l #$00000000,a4
00:0000233E 9BCD            	  3802:             move.l #$00000000,a5
00:00002340 9DCE            	  3803:             move.l #$00000000,a6
                            	  3804: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3805: 
00:00002342 4CB82A550100    	  3806:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3807: 
00:00002348 B0BCFFFFD0D0    	  3808:             cmp.l #$FFFFD0D0,d0
00:0000234E 66FE            	  3809:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002350 B4BCFFFFD1D1    	  3810:             cmp.l #$FFFFD1D1,d2
00:00002356 66FE            	  3811:             bne.s *                  * Check Z Flag  beq/bne 0
00:00002358 B8BCFFFFD2D2    	  3812:             cmp.l #$FFFFD2D2,d4
00:0000235E 66FE            	  3813:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002360 BCBCFFFFD3D3    	  3814:             cmp.l #$FFFFD3D3,d6
00:00002366 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002368 B2FCD4D4        	  3816:             cmp.l #$FFFFD4D4,a1
00:0000236C 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000236E B6FCD5D5        	  3818:             cmp.l #$FFFFD5D5,a3
00:00002372 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002374 BAFCD6D6        	  3820:             cmp.l #$FFFFD6D6,a5
00:00002378 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3822: 
                            	  3823: 
                            	  3824: *     LONG - Memory --> Registers
00:0000237A 7000            	  3825:             moveq  #$00000000,d0
00:0000237C 7200            	  3826:             moveq  #$00000000,d1
00:0000237E 7400            	  3827:             moveq  #$00000000,d2
00:00002380 7600            	  3828:             moveq  #$00000000,d3
00:00002382 7800            	  3829:             moveq  #$00000000,d4
00:00002384 7A00            	  3830:             moveq  #$00000000,d5
00:00002386 7C00            	  3831:             moveq  #$00000000,d6
00:00002388 7E00            	  3832:             moveq  #$00000000,d7
00:0000238A 91C8            	  3833:             move.l #$00000000,a0
00:0000238C 93C9            	  3834:             move.l #$00000000,a1
00:0000238E 95CA            	  3835:             move.l #$00000000,a2
00:00002390 97CB            	  3836:             move.l #$00000000,a3
00:00002392 99CC            	  3837:             move.l #$00000000,a4
00:00002394 9BCD            	  3838:             move.l #$00000000,a5
00:00002396 9DCE            	  3839:             move.l #$00000000,a6
                            	  3840: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3841: 
00:00002398 4CF82A550120    	  3842:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3843: 
00:0000239E B0BCD0D0D0D0    	  3844:             cmp.l #$D0D0D0D0,d0
00:000023A4 66FE            	  3845:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023A6 B4BCD1D1D1D1    	  3846:             cmp.l #$D1D1D1D1,d2
00:000023AC 66FE            	  3847:             bne.s *                  * Check Z Flag  beq/bne 0
00:000023AE B8BCD2D2D2D2    	  3848:             cmp.l #$D2D2D2D2,d4
00:000023B4 66FE            	  3849:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023B6 BCBCD3D3D3D3    	  3850:             cmp.l #$D3D3D3D3,d6
00:000023BC 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023BE B3FCD4D4D4D4    	  3852:             cmp.l #$D4D4D4D4,a1
00:000023C4 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023C6 B7FCD5D5D5D5    	  3854:             cmp.l #$D5D5D5D5,a3
00:000023CC 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023CE BBFCD6D6D6D6    	  3856:             cmp.l #$D6D6D6D6,a5
00:000023D4 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3858: 
00:000023D6 4E75            	  3859:             rts
                            	  3860: 
                            	  3861: 
                            	  3862: *-----------------------------------------------------------
                            	  3863: *-----------------------------------------------------------
                            	  3864: * OPCODE : ABCD
                            	  3865: *-----------------------------------------------------------
                            	  3866: *-----------------------------------------------------------
                            	  3867: op_ABCD:
                            	  3868: 
                            	  3869: *     Test with X Flag CLEARED
00:000023D8 307C0110        	  3870:                 move.l #$00000110,a0 * Address pointer-X
00:000023DC 327C0120        	  3871:                 move.l #$00000120,a1 * Address pointer-Y
00:000023E0 7000            	  3872:                 moveq  #$00000000,d0 * BCD byte-X
00:000023E2 7200            	  3873:                 moveq  #$00000000,d1 * BCD byte-Y
00:000023E4 7400            	  3874:                 moveq  #$00000000,d2
00:000023E6 7600            	  3875:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000023E8 7800            	  3876:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000023EA 7A00            	  3877:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000023EC 2C3C00000099    	  3878:                 move.l #$00000099,d6 * Inner loop counter
00:000023F2 2E3C00000099    	  3879:                 move.l #$00000099,d7 * Outer loop counter
                            	  3880: 
00:000023F8 2007            	  3881: ABCD_OUTER1:    move.l d7,d0
00:000023FA 2206            	  3882: ABCD_INNER1:    move.l d6,d1
00:000023FC 023C00EF        	  3883:                 andi.b #$EF,CCR     * Clear X Flag
00:00002400 307C0110        	  3884:                 move.l #$00000110,a0 * Address pointer-X
00:00002404 327C0120        	  3885:                 move.l #$00000120,a1 * Address pointer-Y
00:00002408 1140FFFF        	  3886:                 move.b d0,-1(a0)
00:0000240C 1341FFFF        	  3887:                 move.b d1,-1(a1)
                            	  3888: 
00:00002410 C300            	  3889:                 abcd d0,d1
00:00002412 6402            	  3890:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00002414 5284            	  3891:                 add.l #1,d4
00:00002416 DA81            	  3892: ABCD_NO_C1:     add.l d1,d5
                            	  3893: 
00:00002418 C308            	  3894:                 abcd -(a0),-(a1)
00:0000241A 6402            	  3895:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:0000241C 5284            	  3896:                 add.l #1,d4
00:0000241E D611            	  3897: ABCD_NO_C2:     add.b (a1),d3
                            	  3898: 
                            	  3899: 
00:00002420 51CEFFD8        	  3900:                 dbf d6,ABCD_INNER1
00:00002424 2C3C00000099    	  3901:                 move.l #$00000099,d6
00:0000242A 51CFFFCC        	  3902:                 dbf d7,ABCD_OUTER1
00:0000242E 0C8400005AFC    	  3903:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:00002434 66FE            	  3904:                 bne.s *
00:00002436 0C85001C9A34    	  3905:                 cmpi.l #$001C9A34,d5
00:0000243C 66FE            	  3906:                 bne.s *
00:0000243E 0C8300000034    	  3907:                 cmpi.l #$00000034,d3
00:00002444 66FE            	  3908:                 bne.s *
                            	  3909: 
                            	  3910: *     Test with X Flag SET
00:00002446 307C0110        	  3911:                 move.l #$00000110,a0 * Address pointer-X
00:0000244A 327C0120        	  3912:                 move.l #$00000120,a1 * Address pointer-Y
00:0000244E 7000            	  3913:                 moveq  #$00000000,d0 * BCD byte-X
00:00002450 7200            	  3914:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002452 7400            	  3915:                 moveq  #$00000000,d2
00:00002454 7600            	  3916:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002456 7800            	  3917:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002458 7A00            	  3918:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000245A 2C3C00000099    	  3919:                 move.l #$00000099,d6 * Inner loop counter
00:00002460 2E3C00000099    	  3920:                 move.l #$00000099,d7 * Outer loop counter
                            	  3921: 
00:00002466 2007            	  3922: ABCD_OUTER2:    move.l d7,d0
00:00002468 2206            	  3923: ABCD_INNER2:    move.l d6,d1
00:0000246A 003C0010        	  3924:                 ori.b #$10,CCR      * Set X Flag
00:0000246E 307C0110        	  3925:                 move.l #$00000110,a0 * Address pointer-X
00:00002472 327C0120        	  3926:                 move.l #$00000120,a1 * Address pointer-Y
00:00002476 1140FFFF        	  3927:                 move.b d0,-1(a0)
00:0000247A 1341FFFF        	  3928:                 move.b d1,-1(a1)
                            	  3929: 
00:0000247E C300            	  3930:                 abcd d0,d1
00:00002480 6402            	  3931:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:00002482 5284            	  3932:                 add.l #1,d4
00:00002484 DA81            	  3933: ABCD_NO_C3:     add.l d1,d5
                            	  3934: 
00:00002486 C308            	  3935:                 abcd -(a0),-(a1)
00:00002488 6402            	  3936:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:0000248A 5284            	  3937:                 add.l #1,d4
00:0000248C D611            	  3938: ABCD_NO_C4:     add.b (a1),d3
                            	  3939: 
                            	  3940: 
00:0000248E 51CEFFD8        	  3941:                 dbf d6,ABCD_INNER2
00:00002492 2C3C00000099    	  3942:                 move.l #$00000099,d6
00:00002498 51CFFFCC        	  3943:                 dbf d7,ABCD_OUTER2
00:0000249C 0C8400005B60    	  3944:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:000024A2 66FE            	  3945:                 bne.s *
00:000024A4 0C85001CCFC8    	  3946:                 cmpi.l #$001CCFC8,d5
00:000024AA 66FE            	  3947:                 bne.s *
00:000024AC 0C8300000034    	  3948:                 cmpi.l #$00000034,d3
00:000024B2 66FE            	  3949:                 bne.s *
                            	  3950: 
                            	  3951: *             Quick check of Z Flag
00:000024B4 103C0000        	  3952:                 move.b #$00,d0
00:000024B8 123C0000        	  3953:                 move.b #$00,d1
00:000024BC 44FC0000        	  3954:                 move #$00,CCR              * Set Z flag to 0
00:000024C0 C101            	  3955:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000024C2 67FE            	  3956:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3957: 
00:000024C4 103C0001        	  3958:                 move.b #$01,d0
00:000024C8 123C0000        	  3959:                 move.b #$00,d1
00:000024CC 44FC0004        	  3960:                 move #$04,CCR              * Set Z flag to 0
00:000024D0 C101            	  3961:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000024D2 67FE            	  3962:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3963: 
00:000024D4 4E75            	  3964:                 rts
                            	  3965: 
                            	  3966: *-----------------------------------------------------------
                            	  3967: *-----------------------------------------------------------
                            	  3968: * OPCODE : SBCD
                            	  3969: *-----------------------------------------------------------
                            	  3970: *-----------------------------------------------------------
                            	  3971: op_SBCD:
                            	  3972: 
                            	  3973: *     Test with X Flag CLEARED
00:000024D6 307C0110        	  3974:                 move.l #$00000110,a0 * Address pointer-X
00:000024DA 327C0120        	  3975:                 move.l #$00000120,a1 * Address pointer-Y
00:000024DE 7000            	  3976:                 moveq  #$00000000,d0 * BCD byte-X
00:000024E0 7200            	  3977:                 moveq  #$00000000,d1 * BCD byte-Y
00:000024E2 7400            	  3978:                 moveq  #$00000000,d2
00:000024E4 7600            	  3979:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000024E6 7800            	  3980:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000024E8 7A00            	  3981:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000024EA 2C3C00000099    	  3982:                 move.l #$00000099,d6 * Inner loop counter
00:000024F0 2E3C00000099    	  3983:                 move.l #$00000099,d7 * Outer loop counter
                            	  3984: 
00:000024F6 2007            	  3985: SBCD_OUTER1:    move.l d7,d0
00:000024F8 2206            	  3986: SBCD_INNER1:    move.l d6,d1
00:000024FA 023C00EF        	  3987:                 andi.b #$EF,CCR     * Clear X Flag
00:000024FE 307C0110        	  3988:                 move.l #$00000110,a0 * Address pointer-X
00:00002502 327C0120        	  3989:                 move.l #$00000120,a1 * Address pointer-Y
00:00002506 1140FFFF        	  3990:                 move.b d0,-1(a0)
00:0000250A 1341FFFF        	  3991:                 move.b d1,-1(a1)
                            	  3992: 
00:0000250E 8300            	  3993:                 sbcd d0,d1
00:00002510 6402            	  3994:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00002512 5284            	  3995:                 add.l #1,d4
00:00002514 DA81            	  3996: SBCD_NO_C1:     add.l d1,d5
                            	  3997: 
00:00002516 8308            	  3998:                 sbcd -(a0),-(a1)
00:00002518 6402            	  3999:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:0000251A 5284            	  4000:                 add.l #1,d4
00:0000251C D611            	  4001: SBCD_NO_C2:     add.b (a1),d3
                            	  4002: 
                            	  4003: 
00:0000251E 51CEFFD8        	  4004:                 dbf d6,SBCD_INNER1
00:00002522 2C3C00000099    	  4005:                 move.l #$00000099,d6
00:00002528 51CFFFCC        	  4006:                 dbf d7,SBCD_OUTER1
00:0000252C 0C8400005C0A    	  4007:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:00002532 66FE            	  4008:                 bne.s *
00:00002534 0C85001C459E    	  4009:                 cmpi.l #$001C459E,d5
00:0000253A 66FE            	  4010:                 bne.s *
00:0000253C 0C830000009E    	  4011:                 cmpi.l #$0000009E,d3
00:00002542 66FE            	  4012:                 bne.s *
                            	  4013: 
                            	  4014: *     Test with X Flag SET
00:00002544 307C0110        	  4015:                 move.l #$00000110,a0 * Address pointer-X
00:00002548 327C0120        	  4016:                 move.l #$00000120,a1 * Address pointer-Y
00:0000254C 7000            	  4017:                 moveq  #$00000000,d0 * BCD byte-X
00:0000254E 7200            	  4018:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002550 7400            	  4019:                 moveq  #$00000000,d2
00:00002552 7600            	  4020:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00002554 7800            	  4021:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002556 7A00            	  4022:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00002558 2C3C00000099    	  4023:                 move.l #$00000099,d6 * Inner loop counter
00:0000255E 2E3C00000099    	  4024:                 move.l #$00000099,d7 * Outer loop counter
                            	  4025: 
00:00002564 2007            	  4026: SBCD_OUTER2:    move.l d7,d0
00:00002566 2206            	  4027: SBCD_INNER2:    move.l d6,d1
00:00002568 003C0010        	  4028:                 ori.b #$10,CCR      * Set X Flag
00:0000256C 307C0110        	  4029:                 move.l #$00000110,a0 * Address pointer-X
00:00002570 327C0120        	  4030:                 move.l #$00000120,a1 * Address pointer-Y
00:00002574 1140FFFF        	  4031:                 move.b d0,-1(a0)
00:00002578 1341FFFF        	  4032:                 move.b d1,-1(a1)
                            	  4033: 
00:0000257C 8300            	  4034:                 sbcd d0,d1
00:0000257E 6402            	  4035:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:00002580 5284            	  4036:                 add.l #1,d4
00:00002582 DA81            	  4037: SBCD_NO_C3:     add.l d1,d5
                            	  4038: 
00:00002584 8308            	  4039:                 sbcd -(a0),-(a1)
00:00002586 6402            	  4040:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00002588 5284            	  4041:                 add.l #1,d4
00:0000258A D611            	  4042: SBCD_NO_C4:     add.b (a1),d3
                            	  4043: 
00:0000258C 51CEFFD8        	  4044:                 dbf d6,SBCD_INNER2
00:00002590 2C3C00000099    	  4045:                 move.l #$00000099,d6
00:00002596 51CFFFCC        	  4046:                 dbf d7,SBCD_OUTER2
00:0000259A 0C8400005CA4    	  4047:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:000025A0 66FE            	  4048:                 bne.s *
00:000025A2 0C85001C5C66    	  4049:                 cmpi.l #$001C5C66,d5
00:000025A8 66FE            	  4050:                 bne.s *
00:000025AA 0C830000009E    	  4051:                 cmpi.l #$0000009E,d3
00:000025B0 66FE            	  4052:                 bne.s *
                            	  4053: 
                            	  4054: 
                            	  4055: *             Quick check of Z Flag
00:000025B2 103C0000        	  4056:                 move.b #$00,d0
00:000025B6 123C0000        	  4057:                 move.b #$00,d1
00:000025BA 44FC0000        	  4058:                 move #$00,CCR              * Set Z flag to 0
00:000025BE 8101            	  4059:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000025C0 67FE            	  4060:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4061: 
00:000025C2 103C0001        	  4062:                 move.b #$01,d0
00:000025C6 123C0000        	  4063:                 move.b #$00,d1
00:000025CA 44FC0004        	  4064:                 move #$04,CCR              * Set Z flag to 0
00:000025CE 8101            	  4065:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000025D0 67FE            	  4066:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4067: 
00:000025D2 4E75            	  4068:                 rts
                            	  4069: 
                            	  4070: *-----------------------------------------------------------
                            	  4071: *-----------------------------------------------------------
                            	  4072: * OPCODE : NBCD
                            	  4073: *-----------------------------------------------------------
                            	  4074: *-----------------------------------------------------------
                            	  4075: op_NBCD:
                            	  4076: 
                            	  4077: *        NBCD to a  Register
                            	  4078: 
00:000025D4 7000            	  4079:                 moveq  #$00000000,d0 * BCD byte
00:000025D6 7200            	  4080:                 moveq  #$00000000,d1
00:000025D8 7400            	  4081:                 moveq  #$00000000,d2
00:000025DA 7600            	  4082:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:000025DC 7800            	  4083:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000025DE 7A00            	  4084:                 moveq  #$00000000,d5 * Cumulative BCD results
00:000025E0 2C3C00000099    	  4085:                 move.l #$00000099,d6
00:000025E6 2E3C00000099    	  4086:                 move.l #$00000099,d7 * Loop counter
                            	  4087: 
00:000025EC 2007            	  4088: NBCD_LOOP:      move.l d7,d0
00:000025EE 44FC0004        	  4089:                 move #$04,CCR        * Set Z flag to 0
                            	  4090: 
00:000025F2 4800            	  4091:                 nbcd d0
                            	  4092: 
00:000025F4 6402            	  4093:                 bcc.s NBCD_NO_C         * Check C Flag
00:000025F6 5284            	  4094:                 add.l #1,d4
00:000025F8 6602            	  4095: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:000025FA 5283            	  4096:                 add.l #1,d3
00:000025FC DA80            	  4097: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4098: 
00:000025FE 51CFFFEC        	  4099:                 dbf d7,NBCD_LOOP
                            	  4100: 
00:00002602 0C8300000001    	  4101:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00002608 66FE            	  4102:                 bne.s *
00:0000260A 0C8400000099    	  4103:                 cmpi.l #$00000099,d4
00:00002610 66FE            	  4104:                 bne.s *
00:00002612 0C8500002E3B    	  4105:                 cmpi.l #$00002E3B,d5
00:00002618 66FE            	  4106:                 bne.s *
                            	  4107: 
                            	  4108: 
                            	  4109: *        NBCD to a memory location
                            	  4110: 
00:0000261A 7000            	  4111:                 moveq  #$00000000,d0 * BCD byte
00:0000261C 7200            	  4112:                 moveq  #$00000000,d1
00:0000261E 7400            	  4113:                 moveq  #$00000000,d2
00:00002620 7600            	  4114:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00002622 7800            	  4115:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002624 7A00            	  4116:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00002626 2C3C00000099    	  4117:                 move.l #$00000099,d6
00:0000262C 2E3C00000099    	  4118:                 move.l #$00000099,d7 * Loop counter
                            	  4119: 
00:00002632 11C70100        	  4120: NBCD_LOOP1:     move.b d7,$00000100
00:00002636 44FC0004        	  4121:                 move #$04,CCR        * Set Z flag to 0
                            	  4122: 
00:0000263A 48380100        	  4123:                 nbcd $00000100
00:0000263E 10380100        	  4124:                 move.b $00000100,d0
                            	  4125: 
00:00002642 6402            	  4126:                 bcc.s NBCD_NO_C1        * Check C Flag
00:00002644 5284            	  4127:                 add.l #1,d4
00:00002646 6602            	  4128: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:00002648 5283            	  4129:                 add.l #1,d3
00:0000264A DA80            	  4130: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4131: 
00:0000264C 51CFFFE4        	  4132:                 dbf d7,NBCD_LOOP1
                            	  4133: 
00:00002650 0C8300000001    	  4134:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00002656 66FE            	  4135:                 bne.s *
00:00002658 4A84            	  4136:                 cmpi.l #$00000000,d4
00:0000265A 66FE            	  4137:                 bne.s *
00:0000265C 0C8500002E3B    	  4138:                 cmpi.l #$00002E3B,d5
00:00002662 66FE            	  4139:                 bne.s *
                            	  4140: 
                            	  4141: 
00:00002664 4E75            	  4142:                 rts
                            	  4143: 
                            	  4144: 
                            	  4145: 
                            	  4146: *-----------------------------------------------------------
                            	  4147: *-----------------------------------------------------------
                            	  4148: * OPCODE : TRAPV
                            	  4149: *-----------------------------------------------------------
                            	  4150: *-----------------------------------------------------------
                            	  4151: op_TRAPV:
                            	  4152: 
                            	  4153: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4154: 
00:00002666 7000            	  4155:                 moveq  #$00000000,d0 * Clear d0
                            	  4156: 
00:00002668 44FC0000        	  4157:                 move #$00,CCR        * Clear V flag
00:0000266C 4E76            	  4158:                 trapv
00:0000266E 4A80            	  4159:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:00002670 66FE            	  4160:                 bne.s *
                            	  4161: 
00:00002672 44FC0002        	  4162:                 move #$02,CCR        * Set V flag
00:00002676 4E76            	  4163:                 trapv
00:00002678 0C8012345678    	  4164:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:0000267E 66FE            	  4165:                 bne.s *
                            	  4166: 
                            	  4167: 
00:00002680 4E75            	  4168:                 rts
                            	  4169: 
                            	  4170: 
                            	  4171: 
                            	  4172: *-----------------------------------------------------------
                            	  4173: *-----------------------------------------------------------
                            	  4174: * OPCODE : RTR
                            	  4175: *-----------------------------------------------------------
                            	  4176: *-----------------------------------------------------------
                            	  4177: 
                            	  4178: op_RTR:
                            	  4179: 
                            	  4180: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4181: 
00:00002682 41FA000A        	  4182:                 lea 		RTR_DONE,a0
00:00002686 2F08            	  4183:                 move.l 	a0,-(a7)     * push destination PC to the stack
00:00002688 3F3CFF15        	  4184:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
00:0000268C 4E77            	  4185:                 rtr
                            	  4186: 
00:0000268E 40C0            	  4187: RTR_DONE:       move.w SR,d0
00:00002690 0240001F        	  4188:                 andi.w #$1F,d0
00:00002694 0C400015        	  4189:                 cmpi.w #$15,d0
00:00002698 66FE            	  4190:                 bne.s *
                            	  4191: 
00:0000269A 4E75            	  4192:                 rts
                            	  4193: 
                            	  4194: 
00:0000269C 283C44444444    	  4195: BSR_FAR2:       move.l #$44444444,d4
00:000026A2 4E75            	  4196:                 rts
                            	  4197: 
                            	  4198: 
                            	  4199: *-----------------------------------------------------------
                            	  4200: *-----------------------------------------------------------
                            	  4201: * OPCODE : BCC
                            	  4202: *-----------------------------------------------------------
                            	  4203: *-----------------------------------------------------------
                            	  4204: 
00:000026A4 44FC0000        	  4205: op_BCC:         move #$00,CCR
00:000026A8 6202            	  4206:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:000026AA 60FE            	  4207:                 bra.s *
                            	  4208: 
00:000026AC 44FC0001        	  4209: BCC1:           move #$01,CCR
00:000026B0 63000004        	  4210:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:000026B4 60FE            	  4211:                 bra.s *
                            	  4212: 
00:000026B6 44FC0000        	  4213: BCC2:           move #$00,CCR
00:000026BA 6402            	  4214:                 bcc.s BCC3            * Carry Clear         C=0
00:000026BC 60FE            	  4215:                 bra.s *
                            	  4216: 
00:000026BE 44FC0001        	  4217: BCC3:           move #$01,CCR
00:000026C2 65000004        	  4218:                 bcs.w BCC4            * Carry Set           C=1
00:000026C6 60FE            	  4219:                 bra.s *
                            	  4220: 
00:000026C8 44FC0000        	  4221: BCC4:           move #$00,CCR
00:000026CC 6602            	  4222:                 bne.s BCC5            * Not Equal           Z=0
00:000026CE 60FE            	  4223:                 bra.s *
                            	  4224: 
00:000026D0 44FC0004        	  4225: BCC5:           move #$04,CCR
00:000026D4 67000004        	  4226:                 beq.w BCC6            * Equal               Z=1
00:000026D8 60FE            	  4227:                 bra.s *
                            	  4228: 
00:000026DA 44FC0000        	  4229: BCC6:           move #$00,CCR
00:000026DE 6802            	  4230:                 bvc.s BCC7            * V Clear             V=0
00:000026E0 60FE            	  4231:                 bra.s *
                            	  4232: 
00:000026E2 44FC0002        	  4233: BCC7:           move #$02,CCR
00:000026E6 69000004        	  4234:                 bvs.w BCC8            * V Set               V=1
00:000026EA 60FE            	  4235:                 bra.s *
                            	  4236: 
00:000026EC 44FC0000        	  4237: BCC8:           move #$00,CCR
00:000026F0 6A02            	  4238:                 bpl.s BCC9            * Plus                N=0
00:000026F2 60FE            	  4239:                 bra.s *
                            	  4240: 
00:000026F4 44FC0008        	  4241: BCC9:           move #$08,CCR
00:000026F8 6B000004        	  4242:                 bmi.w BCC10           * Minus               N=1
00:000026FC 60FE            	  4243:                 bra.s *
                            	  4244: 
00:000026FE 44FC0000        	  4245: BCC10:          move #$00,CCR
00:00002702 6C02            	  4246:                 bge.s BCC11           * Greater or Equal    N=V
00:00002704 60FE            	  4247:                 bra.s *
                            	  4248: 
00:00002706 44FC0002        	  4249: BCC11:          move #$02,CCR
00:0000270A 6D000004        	  4250:                 blt.w BCC12           * Less Than           N!=V
00:0000270E 60FE            	  4251:                 bra.s *
                            	  4252: 
00:00002710 44FC000A        	  4253: BCC12:          move #$0A,CCR
00:00002714 6E02            	  4254:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:00002716 60FE            	  4255:                 bra.s *
                            	  4256: 
00:00002718 44FC0006        	  4257: BCC13:          move #$06,CCR
00:0000271C 6F000004        	  4258:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:00002720 60FE            	  4259:                 bra.s *
                            	  4260: 
                            	  4261: 
00:00002722 4E75            	  4262: BCC14:          rts
                            	  4263: 
                            	  4264: 
                            	  4265: *-----------------------------------------------------------
                            	  4266: *-----------------------------------------------------------
                            	  4267: * OPCODE : DBCC
                            	  4268: *-----------------------------------------------------------
                            	  4269: *-----------------------------------------------------------
                            	  4270: 
00:00002724 7003            	  4271: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:00002726 7200            	  4272:                 moveq  #$00000000,d1    * Accumulator
00:00002728 44FC0000        	  4273:                 move #$00,CCR
                            	  4274: 
00:0000272C 5201            	  4275: DBCC_LOOP1:     addi.b #$1,d1
00:0000272E 51C8FFFC        	  4276:                 dbf d0,DBCC_LOOP1
                            	  4277: 
00:00002732 0C8100000004    	  4278:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:00002738 66FE            	  4279:                 bne.s *
                            	  4280: 
00:0000273A 5201            	  4281: DBCC_LOOP2:     addi.b #$1,d1
00:0000273C 54C8FFFC        	  4282:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4283: 
00:00002740 0C8100000005    	  4284:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:00002746 66FE            	  4285:                 bne.s *
                            	  4286: 
00:00002748 4E75            	  4287:                 rts
                            	  4288: 
                            	  4289: 
                            	  4290: *-----------------------------------------------------------
                            	  4291: *-----------------------------------------------------------
                            	  4292: * OPCODE : SCC
                            	  4293: *-----------------------------------------------------------
                            	  4294: *-----------------------------------------------------------
                            	  4295: 
00:0000274A 44FC0001        	  4296: op_SCC:         move #$01,CCR
00:0000274E 54F900010000    	  4297:                 scc $00010000                   * Clear the EA byte
00:00002754 4A3900010000    	  4298:                 cmpi.b #$00,$00010000
00:0000275A 66FE            	  4299:                 bne.s *
                            	  4300: 
00:0000275C 44FC0000        	  4301:                 move #$00,CCR
00:00002760 54F900010000    	  4302:                 scc $00010000                   * Set the EA byte to 0xFF
00:00002766 0C3900FF00010000	  4303:                 cmpi.b #$FF,$00010000
00:0000276E 66FE            	  4304:                 bne.s *
                            	  4305: 
00:00002770 4E75            	  4306:                 rts
                            	  4307: 
                            	  4308: 
                            	  4309: 
                            	  4310: *-----------------------------------------------------------
                            	  4311: *-----------------------------------------------------------
                            	  4312: * OPCODE : ADDQ
                            	  4313: *-----------------------------------------------------------
                            	  4314: *-----------------------------------------------------------
                            	  4315: 
                            	  4316: op_ADDQ:
                            	  4317: 
                            	  4318: *     BYTE
00:00002772 203C000000FF    	  4319:                 move.l #$000000FF,d0    * Loop counter
00:00002778 7200            	  4320:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000277A 7400            	  4321:                 moveq  #$00000000,d2    * Data results accumulator
00:0000277C 7600            	  4322:                 moveq  #$00000000,d3
00:0000277E 7800            	  4323:                 moveq  #$00000000,d4
00:00002780 7A00            	  4324:                 moveq  #$00000000,d5
00:00002782 7C00            	  4325:                 moveq  #$00000000,d6
00:00002784 7E00            	  4326:                 moveq  #$00000000,d7
                            	  4327: 
00:00002786 5605            	  4328: ADDQ_LOOP1:     addq.b #3,d5
00:00002788 40C6            	  4329:                 move.w SR,d6
00:0000278A 02860000001F    	  4330:                 andi.l #$1F,d6        * Isolate flags
00:00002790 D286            	  4331:                 add.l d6,d1           * Copy flag results into accumulator
00:00002792 D485            	  4332:                 add.l d5,d2           * Copy data results into data accumulator
00:00002794 51C8FFF0        	  4333:                 dbf d0,ADDQ_LOOP1
                            	  4334: 
00:00002798 0C810000043D    	  4335:                 cmpi.l #$0000043D,d1
00:0000279E 66FE            	  4336:                 bne.s *
00:000027A0 0C8200007F80    	  4337:                 cmpi.l #$00007F80,d2
00:000027A6 66FE            	  4338:                 bne.s *
                            	  4339: 
                            	  4340: 
                            	  4341: *     WORD
00:000027A8 203C000000FF    	  4342:                 move.l #$000000FF,d0    * Loop counter
00:000027AE 7200            	  4343:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027B0 7400            	  4344:                 moveq  #$00000000,d2    * Data results accumulator
00:000027B2 7600            	  4345:                 moveq  #$00000000,d3
00:000027B4 7800            	  4346:                 moveq  #$00000000,d4
00:000027B6 2A3C0000FFF0    	  4347:                 move.l #$0000FFF0,d5
00:000027BC 7C00            	  4348:                 moveq  #$00000000,d6
00:000027BE 7E00            	  4349:                 moveq  #$00000000,d7
00:000027C0 307C0100        	  4350:                 move.l #$00000100,a0
                            	  4351: 
00:000027C4 5A45            	  4352: ADDQ_LOOP2:     addq.w #5,d5
00:000027C6 40C6            	  4353:                 move.w SR,d6
00:000027C8 02860000001F    	  4354:                 andi.l #$1F,d6        * Isolate flags
00:000027CE D286            	  4355:                 add.l d6,d1           * Copy flag results into accumulator
00:000027D0 D485            	  4356:                 add.l d5,d2           * Copy data results into data accumulator
00:000027D2 51C8FFF0        	  4357:                 dbf d0,ADDQ_LOOP2
                            	  4358: 
00:000027D6 0C8100000029    	  4359:                 cmpi.l #$00000029,d1
00:000027DC 66FE            	  4360:                 bne.s *
00:000027DE 0C8200057280    	  4361:                 cmpi.l #$00057280,d2
00:000027E4 66FE            	  4362:                 bne.s *
                            	  4363: 
                            	  4364: 
                            	  4365: *     LONG
00:000027E6 203C000000FF    	  4366:                 move.l #$000000FF,d0    * Loop counter
00:000027EC 7200            	  4367:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027EE 7400            	  4368:                 moveq  #$00000000,d2    * Data results accumulator
00:000027F0 7600            	  4369:                 moveq  #$00000000,d3
00:000027F2 7800            	  4370:                 moveq  #$00000000,d4
00:000027F4 7AF0            	  4371:                 move.l #$FFFFFFF0,d5
00:000027F6 7C00            	  4372:                 moveq  #$00000000,d6
00:000027F8 7E00            	  4373:                 moveq  #$00000000,d7
                            	  4374: 
00:000027FA 5285            	  4375: ADDQ_LOOP3:     addq.l #1,d5
00:000027FC 40C6            	  4376:                 move.w SR,d6
00:000027FE 02860000001F    	  4377:                 andi.l #$1F,d6        * Isolate flags
00:00002804 D286            	  4378:                 add.l d6,d1           * Copy flag results into accumulator
00:00002806 D485            	  4379:                 add.l d5,d2           * Copy data results into data accumulator
00:00002808 51C8FFF0        	  4380:                 dbf d0,ADDQ_LOOP3
                            	  4381: 
00:0000280C 0C810000008D    	  4382:                 cmpi.l #$0000008D,d1
00:00002812 66FE            	  4383:                 bne.s *
00:00002814 0C8200007080    	  4384:                 cmpi.l #$00007080,d2
00:0000281A 66FE            	  4385:                 bne.s *
                            	  4386: 
                            	  4387: *     Check that Flags are not updated for Address registers
00:0000281C 207C0000FFFF    	  4388:                 move.l #$0000FFFF,a0
00:00002822 44FC0000        	  4389:                 move #$00,CCR         * Clear flags
00:00002826 5E48            	  4390:                 addq.w #$7,a0
00:00002828 65FE            	  4391:                 bcs.s *
                            	  4392: 
00:0000282A 4E75            	  4393:                 rts
                            	  4394: 
                            	  4395: 
                            	  4396: 
                            	  4397: *-----------------------------------------------------------
                            	  4398: *-----------------------------------------------------------
                            	  4399: * OPCODE : SUBQ
                            	  4400: *-----------------------------------------------------------
                            	  4401: *-----------------------------------------------------------
                            	  4402: 
                            	  4403: op_SUBQ:
                            	  4404: 
                            	  4405: *     BYTE
00:0000282C 203C000000FF    	  4406:                 move.l #$000000FF,d0    * Loop counter
00:00002832 7200            	  4407:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002834 243C00001234    	  4408:                 move.l #$00001234,d2    * Data results accumulator
00:0000283A 7600            	  4409:                 moveq  #$00000000,d3
00:0000283C 7800            	  4410:                 moveq  #$00000000,d4
00:0000283E 7A12            	  4411:                 moveq  #$00000012,d5
00:00002840 7C00            	  4412:                 moveq  #$00000000,d6
00:00002842 7E00            	  4413:                 moveq  #$00000000,d7
                            	  4414: 
00:00002844 5305            	  4415: SUBQ_LOOP1:     subq.b #1,d5
00:00002846 40C6            	  4416:                 move.w SR,d6
00:00002848 02860000001F    	  4417:                 andi.l #$1F,d6        * Isolate flags
00:0000284E D286            	  4418:                 add.l d6,d1           * Copy flag results into accumulator
00:00002850 D485            	  4419:                 add.l d5,d2           * Copy data results into data accumulator
00:00002852 51C8FFF0        	  4420:                 dbf d0,SUBQ_LOOP1
                            	  4421: 
00:00002856 0C8100000417    	  4422:                 cmpi.l #$00000417,d1
00:0000285C 66FE            	  4423:                 bne.s *
00:0000285E 0C82000091B4    	  4424:                 cmpi.l #$000091B4,d2
00:00002864 66FE            	  4425:                 bne.s *
                            	  4426: 
                            	  4427: 
                            	  4428: *     WORD
00:00002866 203C000000FF    	  4429:                 move.l #$000000FF,d0    * Loop counter
00:0000286C 7200            	  4430:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000286E 7400            	  4431:                 moveq  #$00000000,d2    * Data results accumulator
00:00002870 7600            	  4432:                 moveq  #$00000000,d3
00:00002872 7800            	  4433:                 moveq  #$00000000,d4
00:00002874 7A02            	  4434:                 moveq  #$00000002,d5
00:00002876 7C00            	  4435:                 moveq  #$00000000,d6
00:00002878 7E00            	  4436:                 moveq  #$00000000,d7
00:0000287A 307C0100        	  4437:                 move.l #$00000100,a0
                            	  4438: 
00:0000287E 5B45            	  4439: SUBQ_LOOP2:     subq.w #5,d5
00:00002880 40C6            	  4440:                 move.w SR,d6
00:00002882 02860000001F    	  4441:                 andi.l #$1F,d6        * Isolate flags
00:00002888 D286            	  4442:                 add.l d6,d1           * Copy flag results into accumulator
00:0000288A D485            	  4443:                 add.l d5,d2           * Copy data results into data accumulator
00:0000288C 51C8FFF0        	  4444:                 dbf d0,SUBQ_LOOP2
                            	  4445: 
00:00002890 0C8100000811    	  4446:                 cmpi.l #$00000811,d1
00:00002896 66FE            	  4447:                 bne.s *
00:00002898 0C8200FD7F80    	  4448:                 cmpi.l #$00FD7F80,d2
00:0000289E 66FE            	  4449:                 bne.s *
                            	  4450: 
                            	  4451: 
                            	  4452: *     LONG
00:000028A0 203C000000FF    	  4453:                 move.l #$000000FF,d0    * Loop counter
00:000028A6 7200            	  4454:                 moveq  #$00000000,d1    * Flag results accumulator
00:000028A8 7400            	  4455:                 moveq  #$00000000,d2    * Data results accumulator
00:000028AA 7600            	  4456:                 moveq  #$00000000,d3
00:000028AC 7800            	  4457:                 moveq  #$00000000,d4
00:000028AE 7A07            	  4458:                 moveq  #$00000007,d5
00:000028B0 7C00            	  4459:                 moveq  #$00000000,d6
00:000028B2 7E00            	  4460:                 moveq  #$00000000,d7
                            	  4461: 
00:000028B4 5385            	  4462: SUBQ_LOOP3:     subq.l #1,d5
00:000028B6 40C6            	  4463:                 move.w SR,d6
00:000028B8 02860000001F    	  4464:                 andi.l #$1F,d6        * Isolate flags
00:000028BE D286            	  4465:                 add.l d6,d1           * Copy flag results into accumulator
00:000028C0 D485            	  4466:                 add.l d5,d2           * Copy data results into data accumulator
00:000028C2 51C8FFF0        	  4467:                 dbf d0,SUBQ_LOOP3
                            	  4468: 
00:000028C6 0C81000007DD    	  4469:                 cmpi.l #$000007DD,d1
00:000028CC 66FE            	  4470:                 bne.s *
00:000028CE 0C82FFFF8680    	  4471:                 cmpi.l #$FFFF8680,d2
00:000028D4 66FE            	  4472:                 bne.s *
                            	  4473: 
                            	  4474: *     Check that Flags are not updated for Address registers
00:000028D6 207C0001FFFF    	  4475:                 move.l #$0001FFFF,a0
00:000028DC 44FC0000        	  4476:                 move #$00,CCR         * Clear flags
00:000028E0 5F48            	  4477:                 subq.w #$7,a0
00:000028E2 65FE            	  4478:                 bcs.s *
                            	  4479: 
00:000028E4 4E75            	  4480:                 rts
                            	  4481: 
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: *-----------------------------------------------------------
                            	  4486: *-----------------------------------------------------------
                            	  4487: * OPCODE : MOVEQ
                            	  4488: *-----------------------------------------------------------
                            	  4489: *-----------------------------------------------------------
                            	  4490: 
                            	  4491: op_MOVEQ:
00:000028E6 7000            	  4492:                 moveq  #$00000000,d0
00:000028E8 7000            	  4493:                 moveq #$0,d0
00:000028EA 66FE            	  4494:                 bne.s *
00:000028EC 4A80            	  4495:                 cmpi.l #$00000000,d0
00:000028EE 66FE            	  4496:                 bne.s *
                            	  4497: 
00:000028F0 7000            	  4498:                 moveq  #$00000000,d0
00:000028F2 7080            	  4499:                 moveq #-128,d0
00:000028F4 67FE            	  4500:                 beq.s *
00:000028F6 6AFE            	  4501:                 bpl.s *
00:000028F8 0C80FFFFFF80    	  4502:                 cmpi.l #$FFFFFF80,d0
00:000028FE 66FE            	  4503:                 bne.s *
                            	  4504: 
                            	  4505: 
00:00002900 4E75            	  4506:                 rts
                            	  4507: 
                            	  4508: 
                            	  4509: *-----------------------------------------------------------
                            	  4510: *-----------------------------------------------------------
                            	  4511: * OPCODE : DIVU
                            	  4512: *-----------------------------------------------------------
                            	  4513: *-----------------------------------------------------------
                            	  4514: 
                            	  4515: op_DIVU:
                            	  4516: 
00:00002902 203CA5A5A5A5    	  4517:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00002908 223C00005A5A    	  4518:                 move.l #$00005a5a,d1        * Initial Divisor
00:0000290E 243CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d2
00:00002914 7600            	  4520:                 moveq  #$00000000,d3
00:00002916 7800            	  4521:                 moveq  #$00000000,d4        * Cumulative data results
00:00002918 7A00            	  4522:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000291A 7C0E            	  4523:                 move.l #$0000000E,d6       * Inner loop counter
00:0000291C 7E1E            	  4524:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4525: 
                            	  4526: 
00:0000291E 80C1            	  4527: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:00002920 40C3            	  4528:                 move.w SR,d3
00:00002922 02830000000C    	  4529:                 andi.l #$0C,d3            * Isolate flags
00:00002928 DA83            	  4530:                 add.l d3,d5               * Copy flag results into accumulator
00:0000292A D880            	  4531:                 add.l d0,d4               * Copy data results into data accumulator
00:0000292C E289            	  4532:                 lsr.l #$1,d1
                            	  4533: 
00:0000292E 51CEFFEE        	  4534:                 dbf d6,DIVU_OUTER1
00:00002932 E28A            	  4535:                 lsr.l #$1,d2
00:00002934 2002            	  4536:                 move.l d2,d0
00:00002936 223C00005A5A    	  4537:                 move.l #$00005a5a,d1       * Initial Divisor
00:0000293C 7C0E            	  4538:                 move.l #$0000000E,d6       * Inner loop counter
00:0000293E 51CFFFDE        	  4539:                 dbf d7,DIVU_OUTER1
                            	  4540: 
00:00002942 0C8492FEDB89    	  4541:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:00002948 66FE            	  4542:                 bne.s *
                            	  4543: 
00:0000294A 0C8500000110    	  4544:                 cmpi.l #$00000110,d5      * Check the Flag results
00:00002950 66FE            	  4545:                 bne.s *
                            	  4546: 
                            	  4547: 
00:00002952 4E75            	  4548:                 rts
                            	  4549: 
                            	  4550: 
                            	  4551: 
                            	  4552: *-----------------------------------------------------------
                            	  4553: *-----------------------------------------------------------
                            	  4554: * OPCODE : DIVS
                            	  4555: *-----------------------------------------------------------
                            	  4556: *-----------------------------------------------------------
                            	  4557: 
                            	  4558: op_DIVS:
                            	  4559: 
00:00002954 203CA5A5A5A5    	  4560:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:0000295A 223C00005A5A    	  4561:                 move.l #$00005a5a,d1        * Initial Divisor
00:00002960 243CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d2
00:00002966 7600            	  4563:                 moveq  #$00000000,d3
00:00002968 7800            	  4564:                 moveq  #$00000000,d4        * Cumulative data results
00:0000296A 7A00            	  4565:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000296C 7C0E            	  4566:                 move.l #$0000000E,d6       * Inner loop counter
00:0000296E 7E1E            	  4567:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4568: 
                            	  4569: 
00:00002970 81C1            	  4570: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
00:00002972 40C3            	  4571:                 move.w SR,d3
00:00002974 02830000000C    	  4572:                 andi.l #$0C,d3            * Isolate flags
00:0000297A DA83            	  4573:                 add.l d3,d5               * Copy flag results into accumulator
00:0000297C D880            	  4574:                 add.l d0,d4               * Copy data results into data accumulator
00:0000297E E289            	  4575:                 lsr.l #$1,d1
                            	  4576: 
00:00002980 51CEFFEE        	  4577:                 dbf d6,DIVS_OUTER1
00:00002984 E28A            	  4578:                 lsr.l #$1,d2
00:00002986 2002            	  4579:                 move.l d2,d0
00:00002988 223C00005A5A    	  4580:                 move.l #$00005a5a,d1       * Initial Divisor
00:0000298E 7C0E            	  4581:                 move.l #$0000000E,d6       * Inner loop counter
00:00002990 51CFFFDE        	  4582:                 dbf d7,DIVS_OUTER1
                            	  4583: 
00:00002994 0C844EC5D057    	  4584:                 cmpi.l #$4EC5D057,d4      * Check the data results
00:0000299A 66FE            	  4585:                 bne.s *
                            	  4586: 
00:0000299C 0C8500000038    	  4587:                 cmpi.l #$00000038,d5      * Check the Flag results
00:000029A2 66FE            	  4588:                 bne.s *
                            	  4589: 
                            	  4590: 
00:000029A4 4E75            	  4591:                 rts
                            	  4592: 
                            	  4593: 
                            	  4594: 
                            	  4595: *-----------------------------------------------------------
                            	  4596: *-----------------------------------------------------------
                            	  4597: * OPCODE : OR
                            	  4598: *-----------------------------------------------------------
                            	  4599: *-----------------------------------------------------------
                            	  4600: 
                            	  4601: op_OR:
                            	  4602: 
                            	  4603: *  * <EA> to Register
                            	  4604: 
00:000029A6 203CA5A5A5A5    	  4605:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000029AC 223C8167E123    	  4606:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000029B2 243CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d2
00:000029B8 7600            	  4608:                 moveq  #$00000000,d3
00:000029BA 7800            	  4609:                 moveq  #$00000000,d4       * Cumulative data results
00:000029BC 7A00            	  4610:                 moveq  #$00000000,d5       * Cumulative flag results
00:000029BE 7C1E            	  4611:                 move.l #$0000001E,d6       * Inner loop counter
00:000029C0 7E1E            	  4612:                 move.l #$0000001E,d7       * Outer loop counter
00:000029C2 307C0100        	  4613:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4614: 
                            	  4615: 
                            	  4616: OR_OUTER1:
                            	  4617: 
                            	  4618: *     BYTE
00:000029C6 2081            	  4619:                 move.l d1,(a0)
00:000029C8 8010            	  4620:                 or.b (a0),d0
00:000029CA 40C3            	  4621:                 move.w SR,d3
00:000029CC 02830000000C    	  4622:                 andi.l #$0C,d3            * Isolate flags
00:000029D2 DA83            	  4623:                 add.l d3,d5               * Copy flag results into accumulator
00:000029D4 D880            	  4624:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4625: 
                            	  4626: *     WORD
00:000029D6 2081            	  4627:                 move.l d1,(a0)
00:000029D8 8050            	  4628:                 or.w (a0),d0
00:000029DA 40C3            	  4629:                 move.w SR,d3
00:000029DC 02830000000C    	  4630:                 andi.l #$0C,d3            * Isolate flags
00:000029E2 DA83            	  4631:                 add.l d3,d5               * Copy flag results into accumulator
00:000029E4 D880            	  4632:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4633: 
                            	  4634: *     LONG
00:000029E6 2081            	  4635:                 move.l d1,(a0)
00:000029E8 8090            	  4636:                 or.l (a0),d0
00:000029EA 40C3            	  4637:                 move.w SR,d3
00:000029EC 02830000000F    	  4638:                 andi.l #$0F,d3            * Isolate flags
00:000029F2 DA83            	  4639:                 add.l d3,d5               * Copy flag results into accumulator
00:000029F4 D880            	  4640:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4641: 
                            	  4642: 
00:000029F6 E289            	  4643:                 lsr.l #$1,d1
00:000029F8 51CEFFCC        	  4644:                 dbf d6,OR_OUTER1
00:000029FC E28A            	  4645:                 lsr.l #$1,d2
00:000029FE 223C8167E123    	  4646:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A04 7C1E            	  4647:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A06 51CFFFBE        	  4648:                 dbf d7,OR_OUTER1
                            	  4649: 
00:00002A0A 0C8476EAC803    	  4650:                 cmpi.l #$76EAC803,d4      * Check the data results
00:00002A10 66FE            	  4651:                 bne.s *
00:00002A12 0C8500005A18    	  4652:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00002A18 66FE            	  4653:                 bne.s *
                            	  4654: 
                            	  4655: 
                            	  4656: *  * Register to <EA>
                            	  4657: 
00:00002A1A 203C86738374    	  4658:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002A20 223CFC55F2FE    	  4659:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002A26 243C86738374    	  4660:                 move.l #$86738374,d2
00:00002A2C 7600            	  4661:                 moveq  #$00000000,d3
00:00002A2E 7800            	  4662:                 moveq  #$00000000,d4       * Cumulative data results
00:00002A30 7A00            	  4663:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002A32 7C1E            	  4664:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A34 7E1D            	  4665:                 move.l #$0000001D,d7       * Outer loop counter
00:00002A36 307C0100        	  4666:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4667: 
                            	  4668: 
                            	  4669: OR_OUTER2:
                            	  4670: 
                            	  4671: *     BYTE
00:00002A3A 2080            	  4672:                 move.l d0,(a0)
00:00002A3C 8310            	  4673:                 or.b d1,(a0)
00:00002A3E 40C3            	  4674:                 move.w SR,d3
00:00002A40 02830000000C    	  4675:                 andi.l #$0C,d3            * Isolate flags
00:00002A46 DA83            	  4676:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A48 D890            	  4677:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4678: 
                            	  4679: *     WORD
00:00002A4A 2080            	  4680:                 move.l d0,(a0)
00:00002A4C 8350            	  4681:                 or.w d1,(a0)
00:00002A4E 40C3            	  4682:                 move.w SR,d3
00:00002A50 02830000000C    	  4683:                 andi.l #$0C,d3            * Isolate flags
00:00002A56 DA83            	  4684:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A58 D890            	  4685:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4686: 
                            	  4687: *     LONG
00:00002A5A 2080            	  4688:                 move.l d0,(a0)
00:00002A5C 8390            	  4689:                 or.l d1,(a0)
00:00002A5E 40C3            	  4690:                 move.w SR,d3
00:00002A60 02830000000F    	  4691:                 andi.l #$0F,d3            * Isolate flags
00:00002A66 DA83            	  4692:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A68 D890            	  4693:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4694: 
                            	  4695: 
00:00002A6A E289            	  4696:                 lsr.l #$1,d1
00:00002A6C 51CEFFCC        	  4697:                 dbf d6,OR_OUTER2
00:00002A70 E28A            	  4698:                 lsr.l #$1,d2
00:00002A72 223C8167E123    	  4699:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A78 7C1E            	  4700:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A7A 51CFFFBE        	  4701:                 dbf d7,OR_OUTER2
                            	  4702: 
00:00002A7E 0C84FA82B9E4    	  4703:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00002A84 66FE            	  4704:                 bne.s *
00:00002A86 0C8500005730    	  4705:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00002A8C 66FE            	  4706:                 bne.s *
                            	  4707: 
                            	  4708: 
00:00002A8E 4E75            	  4709:                 rts
                            	  4710: 
                            	  4711: 
                            	  4712: 
                            	  4713: *-----------------------------------------------------------
                            	  4714: *-----------------------------------------------------------
                            	  4715: * OPCODE : AND
                            	  4716: *-----------------------------------------------------------
                            	  4717: *-----------------------------------------------------------
                            	  4718: 
                            	  4719: op_AND:
                            	  4720: 
                            	  4721: *  * <EA> to Register
                            	  4722: 
00:00002A90 203CA5A5A5A5    	  4723:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002A96 223C8167E123    	  4724:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002A9C 243CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d2
00:00002AA2 7600            	  4726:                 moveq  #$00000000,d3
00:00002AA4 7800            	  4727:                 moveq  #$00000000,d4       * Cumulative data results
00:00002AA6 7A00            	  4728:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002AA8 7C1E            	  4729:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AAA 7E1E            	  4730:                 move.l #$0000001E,d7       * Outer loop counter
00:00002AAC 307C0100        	  4731:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4732: 
                            	  4733: 
                            	  4734: AND_OUTER1:
                            	  4735: 
                            	  4736: *     BYTE
00:00002AB0 2081            	  4737:                 move.l d1,(a0)
00:00002AB2 C010            	  4738:                 and.b (a0),d0
00:00002AB4 40C3            	  4739:                 move.w sr,d3
00:00002AB6 02830000000C    	  4740:                 andi.l #$0C,d3            * Isolate flags
00:00002ABC DA83            	  4741:                 add.l d3,d5               * Copy flag results into accumulator
00:00002ABE D880            	  4742:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4743: 
                            	  4744: *     WORD
00:00002AC0 2081            	  4745:                 move.l d1,(a0)
00:00002AC2 C050            	  4746:                 and.w (a0),d0
00:00002AC4 40C3            	  4747:                 move.w sr,d3
00:00002AC6 02830000000C    	  4748:                 andi.l #$0C,d3            * Isolate flags
00:00002ACC DA83            	  4749:                 add.l d3,d5               * Copy flag results into accumulator
00:00002ACE D880            	  4750:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4751: 
                            	  4752: *     LONG
00:00002AD0 2081            	  4753:                 move.l d1,(a0)
00:00002AD2 C090            	  4754:                 and.l (a0),d0
00:00002AD4 40C3            	  4755:                 move.w sr,d3
00:00002AD6 02830000000F    	  4756:                 andi.l #$0F,d3            * Isolate flags
00:00002ADC DA83            	  4757:                 add.l d3,d5               * Copy flag results into accumulator
00:00002ADE D880            	  4758:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4759: 
                            	  4760: 
00:00002AE0 E289            	  4761:                 lsr.l #$1,d1
00:00002AE2 51CEFFCC        	  4762:                 dbf d6,AND_OUTER1
00:00002AE6 E28A            	  4763:                 lsr.l #$1,d2
00:00002AE8 223C8167E123    	  4764:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002AEE 7C1E            	  4765:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AF0 51CFFFBE        	  4766:                 dbf d7,AND_OUTER1
                            	  4767: 
00:00002AF4 0C84CF212883    	  4768:                 cmpi.l #$CF212883,d4      * Check the data results
00:00002AFA 66FE            	  4769:                 bne.s *
00:00002AFC 0C8500002D10    	  4770:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:00002B02 66FE            	  4771:                 bne.s *
                            	  4772: 
                            	  4773: 
                            	  4774: *  * Register to <EA>
                            	  4775: 
00:00002B04 203C86738374    	  4776:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B0A 223CFC55F2FE    	  4777:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B10 243C86738374    	  4778:                 move.l #$86738374,d2
00:00002B16 7600            	  4779:                 moveq  #$00000000,d3
00:00002B18 7800            	  4780:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B1A 7A00            	  4781:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002B1C 7C1E            	  4782:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B1E 7E1D            	  4783:                 move.l #$0000001D,d7       * Outer loop counter
00:00002B20 307C0100        	  4784:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4785: 
                            	  4786: 
                            	  4787: AND_OUTER2:
                            	  4788: 
                            	  4789: *     BYTE
00:00002B24 2080            	  4790:                 move.l d0,(a0)
00:00002B26 C310            	  4791:                 and.b d1,(a0)
00:00002B28 40C3            	  4792:                 move.w sr,d3
00:00002B2A 02830000000C    	  4793:                 andi.l #$0C,d3            * Isolate flags
00:00002B30 DA83            	  4794:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B32 D890            	  4795:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4796: 
                            	  4797: *     WORD
00:00002B34 2080            	  4798:                 move.l d0,(a0)
00:00002B36 C350            	  4799:                 and.w d1,(a0)
00:00002B38 40C3            	  4800:                 move.w sr,d3
00:00002B3A 02830000000C    	  4801:                 andi.l #$0C,d3            * Isolate flags
00:00002B40 DA83            	  4802:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B42 D890            	  4803:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4804: 
                            	  4805: *     LONG
00:00002B44 2080            	  4806:                 move.l d0,(a0)
00:00002B46 C390            	  4807:                 and.l d1,(a0)
00:00002B48 40C3            	  4808:                 move.w sr,d3
00:00002B4A 02830000000F    	  4809:                 andi.l #$0F,d3            * Isolate flags
00:00002B50 DA83            	  4810:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B52 D890            	  4811:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4812: 
                            	  4813: 
00:00002B54 E289            	  4814:                 lsr.l #$1,d1
00:00002B56 51CEFFCC        	  4815:                 dbf d6,AND_OUTER2
00:00002B5A E28A            	  4816:                 lsr.l #$1,d2
00:00002B5C 223C8167E123    	  4817:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002B62 7C1E            	  4818:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B64 51CFFFBE        	  4819:                 dbf d7,AND_OUTER2
                            	  4820: 
00:00002B68 0C844A3DE544    	  4821:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:00002B6E 66FE            	  4822:                 bne.s *
00:00002B70 0C85000018E8    	  4823:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00002B76 66FE            	  4824:                 bne.s *
                            	  4825: 
                            	  4826: 
00:00002B78 4E75            	  4827:                 rts
                            	  4828: 
                            	  4829: 
                            	  4830: 
                            	  4831: *-----------------------------------------------------------
                            	  4832: *-----------------------------------------------------------
                            	  4833: * OPCODE : EOR
                            	  4834: *-----------------------------------------------------------
                            	  4835: *-----------------------------------------------------------
                            	  4836: 
                            	  4837: op_EOR:
                            	  4838: 
                            	  4839: *  * Register to <EA>
                            	  4840: 
00:00002B7A 203C86738374    	  4841:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B80 223CFC55F2FE    	  4842:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B86 243C86738374    	  4843:                 move.l #$86738374,d2
00:00002B8C 7600            	  4844:                 moveq  #$00000000,d3
00:00002B8E 7800            	  4845:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B90 7A00            	  4846:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002B92 7C1E            	  4847:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B94 7E1D            	  4848:                 move.l #$0000001D,d7       * Outer loop counter
00:00002B96 307C0100        	  4849:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4850: 
                            	  4851: 
                            	  4852: EOR_OUTER2:
                            	  4853: 
                            	  4854: *     BYTE
00:00002B9A 2080            	  4855:                 move.l d0,(a0)
00:00002B9C B310            	  4856:                 eor.b d1,(a0)
00:00002B9E 40C3            	  4857:                 move.w sr,d3
00:00002BA0 02830000000C    	  4858:                 andi.l #$0C,d3            * Isolate flags
00:00002BA6 DA83            	  4859:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BA8 D890            	  4860:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4861: 
                            	  4862: *     WORD
00:00002BAA 2080            	  4863:                 move.l d0,(a0)
00:00002BAC B350            	  4864:                 eor.w d1,(a0)
00:00002BAE 40C3            	  4865:                 move.w sr,d3
00:00002BB0 02830000000C    	  4866:                 andi.l #$0C,d3            * Isolate flags
00:00002BB6 DA83            	  4867:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BB8 D890            	  4868:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4869: 
                            	  4870: *     LONG
00:00002BBA 2080            	  4871:                 move.l d0,(a0)
00:00002BBC B390            	  4872:                 eor.l d1,(a0)
00:00002BBE 40C3            	  4873:                 move.w sr,d3
00:00002BC0 02830000000F    	  4874:                 andi.l #$0F,d3            * Isolate flags
00:00002BC6 DA83            	  4875:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BC8 D890            	  4876:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4877: 
                            	  4878: 
00:00002BCA E289            	  4879:                 lsr.l #$1,d1
00:00002BCC 51CEFFCC        	  4880:                 dbf d6,EOR_OUTER2
00:00002BD0 E28A            	  4881:                 lsr.l #$1,d2
00:00002BD2 223C8167E123    	  4882:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002BD8 7C1E            	  4883:                 move.l #$0000001E,d6       * Inner loop counter
00:00002BDA 51CFFFBE        	  4884:                 dbf d7,EOR_OUTER2
                            	  4885: 
00:00002BDE 0C8455C5EB70    	  4886:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:00002BE4 66FE            	  4887:                 bne.s *
00:00002BE6 0C8500004430    	  4888:                 cmpi.l #$00004430,d5      * Check the Flag results
00:00002BEC 66FE            	  4889:                 bne.s *
                            	  4890: 
                            	  4891: 
00:00002BEE 4E75            	  4892:                 rts
                            	  4893: 
                            	  4894: 
                            	  4895: *-----------------------------------------------------------
                            	  4896: *-----------------------------------------------------------
                            	  4897: * OPCODE : CMP
                            	  4898: *-----------------------------------------------------------
                            	  4899: *-----------------------------------------------------------
                            	  4900: 
                            	  4901: op_CMP:
                            	  4902: 
                            	  4903: 
                            	  4904: *  * <EA> to Register
                            	  4905: 
00:00002BF0 203CA5A5A5A5    	  4906:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002BF6 223C8167E123    	  4907:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002BFC 243CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d2
00:00002C02 7600            	  4909:                 moveq  #$00000000,d3
00:00002C04 7800            	  4910:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C06 7A00            	  4911:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C08 7C1E            	  4912:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C0A 7E1E            	  4913:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C0C 307C0100        	  4914:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4915: 
                            	  4916: 
                            	  4917: CMP_OUTER1:
                            	  4918: 
                            	  4919: *     BYTE
00:00002C10 2081            	  4920:                 move.l d1,(a0)
00:00002C12 B010            	  4921:                 cmp.b (a0),d0
00:00002C14 40C3            	  4922:                 move.w sr,d3
00:00002C16 02830000000F    	  4923:                 andi.l #$0F,d3            * Isolate flags
00:00002C1C DA83            	  4924:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C1E D880            	  4925:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4926: 
                            	  4927: *     WORD
00:00002C20 2081            	  4928:                 move.l d1,(a0)
00:00002C22 B050            	  4929:                 cmp.w (a0),d0
00:00002C24 40C3            	  4930:                 move.w sr,d3
00:00002C26 02830000000F    	  4931:                 andi.l #$0F,d3            * Isolate flags
00:00002C2C DA83            	  4932:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C2E D880            	  4933:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4934: 
                            	  4935: *     LONG
00:00002C30 2081            	  4936:                 move.l d1,(a0)
00:00002C32 B090            	  4937:                 cmp.l (a0),d0
00:00002C34 40C3            	  4938:                 move.w sr,d3
00:00002C36 02830000000F    	  4939:                 andi.l #$0F,d3            * Isolate flags
00:00002C3C DA83            	  4940:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C3E D880            	  4941:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4942: 
                            	  4943: 
00:00002C40 E289            	  4944:                 lsr.l #$1,d1
00:00002C42 51CEFFCC        	  4945:                 dbf d6,CMP_OUTER1
00:00002C46 E28A            	  4946:                 lsr.l #$1,d2
00:00002C48 223C8167E123    	  4947:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002C4E 7C1E            	  4948:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C50 51CFFFBE        	  4949:                 dbf d7,CMP_OUTER1
                            	  4950: 
00:00002C54 0C847878712F    	  4951:                 cmpi.l #$7878712F,d4      * Check the data results
00:00002C5A 66FE            	  4952:                 bne.s *
00:00002C5C 0C8500005502    	  4953:                 cmpi.l #$00005502,d5      * Check the Flag results
00:00002C62 66FE            	  4954:                 bne.s *
                            	  4955: 
                            	  4956: 
                            	  4957: 
00:00002C64 4E75            	  4958:                 rts
                            	  4959: 
                            	  4960: 
                            	  4961: *-----------------------------------------------------------
                            	  4962: *-----------------------------------------------------------
                            	  4963: * OPCODE : CMPA
                            	  4964: *-----------------------------------------------------------
                            	  4965: *-----------------------------------------------------------
                            	  4966: 
                            	  4967: op_CMPA:
                            	  4968: 
                            	  4969: 
                            	  4970: *  * <EA> to Register
                            	  4971: 
00:00002C66 207CA5A5A5A5    	  4972:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00002C6C 223C8167E123    	  4973:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002C72 243CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,d2
00:00002C78 7600            	  4975:                 moveq  #$00000000,d3
00:00002C7A 7800            	  4976:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C7C 7A00            	  4977:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C7E 7C1E            	  4978:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C80 7E1E            	  4979:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C82 327C0100        	  4980:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4981: 
                            	  4982: 
                            	  4983: CMPA_OUTER1:
                            	  4984: 
                            	  4985: 
                            	  4986: *     WORD
00:00002C86 2281            	  4987:                 move.l d1,(a1)
00:00002C88 B0D1            	  4988:                 cmpa.w (a1),a0
00:00002C8A 40C3            	  4989:                 move.w sr,d3
00:00002C8C 02830000000F    	  4990:                 andi.l #$0F,d3            * Isolate flags
00:00002C92 DA83            	  4991:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C94 D888            	  4992:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4993: 
                            	  4994: *     LONG
00:00002C96 2281            	  4995:                 move.l d1,(a1)
00:00002C98 B1D1            	  4996:                 cmpa.l (a1),a0
00:00002C9A 40C3            	  4997:                 move.w sr,d3
00:00002C9C 02830000000F    	  4998:                 andi.l #$0F,d3            * Isolate flags
00:00002CA2 DA83            	  4999:                 add.l d3,d5               * Copy flag results into accumulator
00:00002CA4 D888            	  5000:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5001: 
                            	  5002: 
00:00002CA6 E289            	  5003:                 lsr.l #$1,d1
00:00002CA8 51CEFFDC        	  5004:                 dbf d6,CMPA_OUTER1
00:00002CAC E28A            	  5005:                 lsr.l #$1,d2
00:00002CAE 223C8167E123    	  5006:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002CB4 7C1E            	  5007:                 move.l #$0000001E,d6       * Inner loop counter
00:00002CB6 51CFFFCE        	  5008:                 dbf d7,CMPA_OUTER1
                            	  5009: 
00:00002CBA 0C84A5A5A0CA    	  5010:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:00002CC0 66FE            	  5011:                 bne.s *
00:00002CC2 0C8500003A7D    	  5012:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:00002CC8 66FE            	  5013:                 bne.s *
                            	  5014: 
                            	  5015: 
00:00002CCA 4E75            	  5016:                 rts
                            	  5017: 
                            	  5018: 
                            	  5019: 
                            	  5020: *-----------------------------------------------------------
                            	  5021: *-----------------------------------------------------------
                            	  5022: * OPCODE : CMPM
                            	  5023: *-----------------------------------------------------------
                            	  5024: *-----------------------------------------------------------
                            	  5025: 
                            	  5026: op_CMPM:
                            	  5027: 
00:00002CCC 307C0100        	  5028:                 move.l #$00000100,a0       * Address for Data-X
00:00002CD0 327C0200        	  5029:                 move.l #$00000200,a1       * Address for Data-Y
00:00002CD4 7000            	  5030:                 moveq  #$00000000,d0
00:00002CD6 7200            	  5031:                 moveq  #$00000000,d1
00:00002CD8 7400            	  5032:                 moveq  #$00000000,d2
                            	  5033: 
00:00002CDA 20FC11FF5580    	  5034:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00002CE0 20FC1111FFFF    	  5035:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00002CE6 20FC33333333    	  5036:                 move.l #$33333333,(a0)+   * Populate test data
00:00002CEC 20FC44444444    	  5037:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5038: 
00:00002CF2 22FC80FF337F    	  5039:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00002CF8 22FCFFFF1111    	  5040:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00002CFE 22FC33333333    	  5041:                 move.l #$33333333,(a1)+   * Populate test data
00:00002D04 22FC44444444    	  5042:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5043: 
00:00002D0A 307C0100        	  5044:                 move.l #$00000100,a0       * Address for Data-X
00:00002D0E 327C0200        	  5045:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D12 7C0F            	  5046:                 move.l #$0000000F,d6       * Loop counter
                            	  5047: 
00:00002D14 B308            	  5048: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00002D16 40C3            	  5049:                 move.w sr,d3
00:00002D18 02830000000F    	  5050:                 andi.l #$0F,d3            * Isolate flags
00:00002D1E D083            	  5051:                 add.l d3,d0               * Copy flag results into accumulator
00:00002D20 51CEFFF2        	  5052:                 dbf d6,CMPM_LOOP1
                            	  5053: 
                            	  5054: 
00:00002D24 307C0100        	  5055:                 move.l #$00000100,a0       * Address for Data-X
00:00002D28 327C0200        	  5056:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D2C 7C07            	  5057:                 moveq  #$00000007,d6       * Loop counter
                            	  5058: 
00:00002D2E B348            	  5059: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:00002D30 40C3            	  5060:                 move.w sr,d3
00:00002D32 02830000000F    	  5061:                 andi.l #$0F,d3            * Isolate flags
00:00002D38 D283            	  5062:                 add.l d3,d1               * Copy flag results into accumulator
00:00002D3A 51CEFFF2        	  5063:                 dbf d6,CMPM_LOOP2
                            	  5064: 
                            	  5065: 
00:00002D3E 307C0100        	  5066:                 move.l #$00000100,a0       * Address for Data-X
00:00002D42 327C0200        	  5067:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D46 7C03            	  5068:                 moveq  #$00000003,d6       * Loop counter
                            	  5069: 
00:00002D48 B388            	  5070: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00002D4A 40C3            	  5071:                 move.w sr,d3
00:00002D4C 02830000000F    	  5072:                 andi.l #$0F,d3            * Isolate flags
00:00002D52 D483            	  5073:                 add.l d3,d2               * Copy flag results into accumulator
00:00002D54 51CEFFF2        	  5074:                 dbf d6,CMPM_LOOP3
                            	  5075: 
                            	  5076: 
00:00002D58 0C800000004C    	  5077:                 cmpi.l #$0000004C,d0      * Check the data results
00:00002D5E 66FE            	  5078:                 bne.s *
00:00002D60 0C8100000024    	  5079:                 cmpi.l #$00000024,d1
00:00002D66 66FE            	  5080:                 bne.s *
00:00002D68 0C8200000012    	  5081:                 cmpi.l #$00000012,d2
00:00002D6E 66FE            	  5082:                 bne.s *
                            	  5083: 
00:00002D70 4E75            	  5084:                 rts
                            	  5085: 
                            	  5086: 
                            	  5087: *-----------------------------------------------------------
                            	  5088: *-----------------------------------------------------------
                            	  5089: * OPCODE : ADD
                            	  5090: *-----------------------------------------------------------
                            	  5091: *-----------------------------------------------------------
                            	  5092: 
                            	  5093: op_ADD:
                            	  5094: 
                            	  5095: 
                            	  5096: *  * <EA> to Register
00:00002D72 203CA5A5A5A5    	  5097:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002D78 223C8167E123    	  5098:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002D7E 243CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d2
00:00002D84 7600            	  5100:                 moveq  #$00000000,d3
00:00002D86 7800            	  5101:                 moveq  #$00000000,d4       * Cumulative data results
00:00002D88 7A00            	  5102:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002D8A 7C1E            	  5103:                 move.l #$0000001E,d6       * Inner loop counter
00:00002D8C 7E1E            	  5104:                 move.l #$0000001E,d7       * Outer loop counter
00:00002D8E 307C0100        	  5105:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5106: 
                            	  5107: 
                            	  5108: ADD_OUTER1:
                            	  5109: 
                            	  5110: *     BYTE
00:00002D92 2081            	  5111:                 move.l d1,(a0)
00:00002D94 D010            	  5112:                 add.b (a0),d0
00:00002D96 40C3            	  5113:                 move.w sr,d3
00:00002D98 02830000001F    	  5114:                 andi.l #$1F,d3            * Isolate flags
00:00002D9E DA83            	  5115:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DA0 D880            	  5116:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5117: 
                            	  5118: *     WORD
00:00002DA2 2081            	  5119:                 move.l d1,(a0)
00:00002DA4 D050            	  5120:                 add.w (a0),d0
00:00002DA6 40C3            	  5121:                 move.w sr,d3
00:00002DA8 02830000000C    	  5122:                 andi.l #$0C,d3            * Isolate flags
00:00002DAE DA83            	  5123:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DB0 D880            	  5124:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5125: 
                            	  5126: *     LONG
00:00002DB2 2081            	  5127:                 move.l d1,(a0)
00:00002DB4 D090            	  5128:                 add.l (a0),d0
00:00002DB6 40C3            	  5129:                 move.w sr,d3
00:00002DB8 02830000000F    	  5130:                 andi.l #$0F,d3            * Isolate flags
00:00002DBE DA83            	  5131:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DC0 D880            	  5132:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5133: 
                            	  5134: 
00:00002DC2 E299            	  5135:                 ror.l #$1,d1
00:00002DC4 51CEFFCC        	  5136:                 dbf d6,ADD_OUTER1
00:00002DC8 E29A            	  5137:                 ror.l #$1,d2
00:00002DCA 223C8167E123    	  5138:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002DD0 7C1E            	  5139:                 move.l #$0000001E,d6       * Inner loop counter
00:00002DD2 51CFFFBE        	  5140:                 dbf d7,ADD_OUTER1
                            	  5141: 
00:00002DD6 0C8423ED428F    	  5142:                 cmpi.l #$23ED428F,d4      * Check the data results
00:00002DDC 66FE            	  5143:                 bne.s *
00:00002DDE 0C8500004C96    	  5144:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:00002DE4 66FE            	  5145:                 bne.s *
                            	  5146: 
                            	  5147: 
                            	  5148: *  * Register to <EA>
00:00002DE6 203C86738374    	  5149:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002DEC 223CFC55F2FE    	  5150:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002DF2 243C86738374    	  5151:                 move.l #$86738374,d2
00:00002DF8 7600            	  5152:                 moveq  #$00000000,d3
00:00002DFA 7800            	  5153:                 moveq  #$00000000,d4       * Cumulative data results
00:00002DFC 7A00            	  5154:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002DFE 7C1E            	  5155:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E00 7E1D            	  5156:                 move.l #$0000001D,d7       * Outer loop counter
00:00002E02 307C0100        	  5157:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5158: 
                            	  5159: 
                            	  5160: ADD_OUTER2:
                            	  5161: 
                            	  5162: *     BYTE
00:00002E06 2080            	  5163:                 move.l d0,(a0)
00:00002E08 D310            	  5164:                 add.b d1,(a0)
00:00002E0A 40C3            	  5165:                 move.w sr,d3
00:00002E0C 02830000000C    	  5166:                 andi.l #$0C,d3            * Isolate flags
00:00002E12 DA83            	  5167:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E14 D890            	  5168:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5169: 
                            	  5170: *     WORD
00:00002E16 2080            	  5171:                 move.l d0,(a0)
00:00002E18 D350            	  5172:                 add.w d1,(a0)
00:00002E1A 40C3            	  5173:                 move.w sr,d3
00:00002E1C 02830000001F    	  5174:                 andi.l #$1F,d3            * Isolate flags
00:00002E22 DA83            	  5175:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E24 D890            	  5176:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5177: 
                            	  5178: *     LONG
00:00002E26 2080            	  5179:                 move.l d0,(a0)
00:00002E28 D390            	  5180:                 add.l d1,(a0)
00:00002E2A 40C3            	  5181:                 move.w sr,d3
00:00002E2C 02830000000F    	  5182:                 andi.l #$0F,d3            * Isolate flags
00:00002E32 DA83            	  5183:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E34 D890            	  5184:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5185: 
                            	  5186: 
00:00002E36 E299            	  5187:                 ror.l #$1,d1
00:00002E38 51CEFFCC        	  5188:                 dbf d6,ADD_OUTER2
00:00002E3C E29A            	  5189:                 ror.l #$1,d2
00:00002E3E 223C8167E123    	  5190:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002E44 7C1E            	  5191:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E46 51CFFFBE        	  5192:                 dbf d7,ADD_OUTER2
                            	  5193: 
00:00002E4A 0C846701B884    	  5194:                 cmpi.l #$6701B884,d4      * Check the data results
00:00002E50 66FE            	  5195:                 bne.s *
00:00002E52 0C8500005467    	  5196:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00002E58 66FE            	  5197:                 bne.s *
                            	  5198: 
00:00002E5A 4E75            	  5199:                 rts
                            	  5200: 
                            	  5201: *-----------------------------------------------------------
                            	  5202: *-----------------------------------------------------------
                            	  5203: * OPCODE : SUB
                            	  5204: *-----------------------------------------------------------
                            	  5205: *-----------------------------------------------------------
                            	  5206: 
                            	  5207: op_SUB:
                            	  5208: 
                            	  5209: *  * <EA> to Register
00:00002E5C 203CA5A5A5A5    	  5210:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002E62 223C8167E123    	  5211:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002E68 243CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d2
00:00002E6E 7600            	  5213:                 moveq  #$00000000,d3
00:00002E70 7800            	  5214:                 moveq  #$00000000,d4       * Cumulative data results
00:00002E72 7A00            	  5215:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002E74 7C1E            	  5216:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E76 7E1E            	  5217:                 move.l #$0000001E,d7       * Outer loop counter
00:00002E78 307C0100        	  5218:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5219: 
                            	  5220: 
                            	  5221: SUB_OUTER1:
                            	  5222: 
                            	  5223: *     BYTE
00:00002E7C 2081            	  5224:                 move.l d1,(a0)
00:00002E7E 9010            	  5225:                 sub.b (a0),d0
00:00002E80 40C3            	  5226:                 move.w sr,d3
00:00002E82 02830000001F    	  5227:                 andi.l #$1F,d3            * Isolate flags
00:00002E88 DA83            	  5228:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E8A D880            	  5229:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5230: 
                            	  5231: *     WORD
00:00002E8C 2081            	  5232:                 move.l d1,(a0)
00:00002E8E 9050            	  5233:                 sub.w (a0),d0
00:00002E90 40C3            	  5234:                 move.w sr,d3
00:00002E92 02830000000C    	  5235:                 andi.l #$0C,d3            * Isolate flags
00:00002E98 DA83            	  5236:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E9A D880            	  5237:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5238: 
                            	  5239: *     LONG
00:00002E9C 2081            	  5240:                 move.l d1,(a0)
00:00002E9E 9090            	  5241:                 sub.l (a0),d0
00:00002EA0 40C3            	  5242:                 move.w sr,d3
00:00002EA2 02830000000F    	  5243:                 andi.l #$0F,d3            * Isolate flags
00:00002EA8 DA83            	  5244:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EAA D880            	  5245:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5246: 
                            	  5247: 
00:00002EAC E299            	  5248:                 ror.l #$1,d1
00:00002EAE 51CEFFCC        	  5249:                 dbf d6,SUB_OUTER1
00:00002EB2 E29A            	  5250:                 ror.l #$1,d2
00:00002EB4 223C8167E123    	  5251:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002EBA 7C1E            	  5252:                 move.l #$0000001E,d6       * Inner loop counter
00:00002EBC 51CFFFBE        	  5253:                 dbf d7,SUB_OUTER1
                            	  5254: 
00:00002EC0 0C841A8D14CF    	  5255:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:00002EC6 66FE            	  5256:                 bne.s *
00:00002EC8 0C8500004FC4    	  5257:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:00002ECE 66FE            	  5258:                 bne.s *
                            	  5259: 
                            	  5260: 
                            	  5261: *  * Register to <EA>
00:00002ED0 203C86738374    	  5262:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002ED6 223CFC55F2FE    	  5263:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002EDC 243C86738374    	  5264:                 move.l #$86738374,d2
00:00002EE2 7600            	  5265:                 moveq  #$00000000,d3
00:00002EE4 7800            	  5266:                 moveq  #$00000000,d4       * Cumulative data results
00:00002EE6 7A00            	  5267:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002EE8 7C1E            	  5268:                 move.l #$0000001E,d6       * Inner loop counter
00:00002EEA 7E1D            	  5269:                 move.l #$0000001D,d7       * Outer loop counter
00:00002EEC 307C0100        	  5270:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5271: 
                            	  5272: 
                            	  5273: SUB_OUTER2:
                            	  5274: 
                            	  5275: *     BYTE
00:00002EF0 2080            	  5276:                 move.l d0,(a0)
00:00002EF2 9310            	  5277:                 sub.b d1,(a0)
00:00002EF4 40C3            	  5278:                 move.w sr,d3
00:00002EF6 02830000000C    	  5279:                 andi.l #$0C,d3            * Isolate flags
00:00002EFC DA83            	  5280:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EFE D890            	  5281:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5282: 
                            	  5283: *     WORD
00:00002F00 2080            	  5284:                 move.l d0,(a0)
00:00002F02 9350            	  5285:                 sub.w d1,(a0)
00:00002F04 40C3            	  5286:                 move.w sr,d3
00:00002F06 02830000001F    	  5287:                 andi.l #$1F,d3            * Isolate flags
00:00002F0C DA83            	  5288:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F0E D890            	  5289:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5290: 
                            	  5291: *     LONG
00:00002F10 2080            	  5292:                 move.l d0,(a0)
00:00002F12 9390            	  5293:                 sub.l d1,(a0)
00:00002F14 40C3            	  5294:                 move.w sr,d3
00:00002F16 02830000000F    	  5295:                 andi.l #$0F,d3            * Isolate flags
00:00002F1C DA83            	  5296:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F1E D890            	  5297:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5298: 
                            	  5299: 
00:00002F20 E299            	  5300:                 ror.l #$1,d1
00:00002F22 51CEFFCC        	  5301:                 dbf d6,SUB_OUTER2
00:00002F26 E29A            	  5302:                 ror.l #$1,d2
00:00002F28 223C8167E123    	  5303:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F2E 7C1E            	  5304:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F30 51CFFFBE        	  5305:                 dbf d7,SUB_OUTER2
                            	  5306: 
00:00002F34 0C8436D38BEC    	  5307:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00002F3A 66FE            	  5308:                 bne.s *
00:00002F3C 0C85000045A5    	  5309:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:00002F42 66FE            	  5310:                 bne.s *
                            	  5311: 
                            	  5312: 
                            	  5313: 
                            	  5314: 
00:00002F44 4E75            	  5315:                 rts
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: *-----------------------------------------------------------
                            	  5320: *-----------------------------------------------------------
                            	  5321: * OPCODE : ADDA
                            	  5322: *-----------------------------------------------------------
                            	  5323: *-----------------------------------------------------------
                            	  5324: 
                            	  5325: op_ADDA:
                            	  5326: 
                            	  5327: *  * <EA> to Register
00:00002F46 203CA5A5A5A5    	  5328:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002F4C 223C8167E123    	  5329:                 move.l #$8167E123,d1
00:00002F52 243CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d2
00:00002F58 7600            	  5331:                 moveq  #$00000000,d3
00:00002F5A 7800            	  5332:                 moveq  #$00000000,d4       * Cumulative data results
00:00002F5C 7A00            	  5333:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002F5E 7C1E            	  5334:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F60 7E1E            	  5335:                 move.l #$0000001E,d7       * Outer loop counter
00:00002F62 307C0100        	  5336:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002F66 227C8167E123    	  5337:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5338: 
                            	  5339: ADDA_OUTER1:
                            	  5340: 
                            	  5341: *     WORD
                            	  5342: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5343: *                adda.w (a0),a1
                            	  5344: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5345: 
                            	  5346: *     LONG
00:00002F6C 2081            	  5347:                 move.l d1,(a0)
00:00002F6E D3D0            	  5348:                 adda.l (a0),a1
00:00002F70 D889            	  5349:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
00:00002F72 E299            	  5351:                 ror.l #$1,d1
00:00002F74 51CEFFF6        	  5352:                 dbf d6,ADDA_OUTER1
00:00002F78 E299            	  5353:                 ror.l #$1,d1
00:00002F7A 2241            	  5354:                 move.l d1,a1
00:00002F7C 223C8167E123    	  5355:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F82 7C1E            	  5356:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F84 51CFFFE6        	  5357:                 dbf d7,ADDA_OUTER1
                            	  5358: 
00:00002F88 0C84AC04DB4C    	  5359:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:00002F8E 66FE            	  5360:                 bne.s *
                            	  5361: 
                            	  5362: 
00:00002F90 4E75            	  5363:                 rts
                            	  5364: 
                            	  5365: 
                            	  5366: *-----------------------------------------------------------
                            	  5367: *-----------------------------------------------------------
                            	  5368: * OPCODE : SUBA
                            	  5369: *-----------------------------------------------------------
                            	  5370: *-----------------------------------------------------------
                            	  5371: 
                            	  5372: op_SUBA:
                            	  5373: 
                            	  5374: *  * <EA> to Register
00:00002F92 203CA5A5A5A5    	  5375:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002F98 223C8167E123    	  5376:                 move.l #$8167E123,d1
00:00002F9E 243CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d2
00:00002FA4 7600            	  5378:                 moveq  #$00000000,d3
00:00002FA6 7800            	  5379:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FA8 7A00            	  5380:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002FAA 7C1E            	  5381:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FAC 7E1E            	  5382:                 move.l #$0000001E,d7       * Outer loop counter
00:00002FAE 307C0100        	  5383:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002FB2 227C8167E123    	  5384:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5385: 
                            	  5386: SUBA_OUTER1:
                            	  5387: 
                            	  5388: *     WORD
                            	  5389: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5390: *                suba.w (a0),a1
                            	  5391: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5392: 
                            	  5393: *     LONG
00:00002FB8 2081            	  5394:                 move.l d1,(a0)
00:00002FBA 93D0            	  5395:                 suba.l (a0),a1
00:00002FBC D889            	  5396:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
00:00002FBE E299            	  5398:                 ror.l #$1,d1
00:00002FC0 51CEFFF6        	  5399:                 dbf d6,SUBA_OUTER1
00:00002FC4 E299            	  5400:                 ror.l #$1,d1
00:00002FC6 2241            	  5401:                 move.l d1,a1
00:00002FC8 223C8167E123    	  5402:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002FCE 7C1E            	  5403:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FD0 51CFFFE6        	  5404:                 dbf d7,SUBA_OUTER1
                            	  5405: 
00:00002FD4 0C84E1E36D7A    	  5406:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:00002FDA 66FE            	  5407:                 bne.s *
                            	  5408: 
                            	  5409: 
00:00002FDC 4E75            	  5410:                 rts
                            	  5411: 
                            	  5412: 
                            	  5413: 
                            	  5414: *-----------------------------------------------------------
                            	  5415: *-----------------------------------------------------------
                            	  5416: * OPCODE : ADDX
                            	  5417: *-----------------------------------------------------------
                            	  5418: *-----------------------------------------------------------
                            	  5419: 
                            	  5420: op_ADDX:
                            	  5421: 
                            	  5422: 
                            	  5423: *  * Register to Register
00:00002FDE 203CA5A5A5A5    	  5424:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002FE4 223C8167E123    	  5425:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002FEA 243CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d2
00:00002FF0 7600            	  5427:                 moveq  #$00000000,d3
00:00002FF2 7800            	  5428:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FF4 7A00            	  5429:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002FF6 7C1E            	  5430:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FF8 7E1E            	  5431:                 move.l #$0000001E,d7       * Outer loop counter
00:00002FFA 307C0100        	  5432:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5433: 
                            	  5434: 
                            	  5435: ADDX_OUTER1:
                            	  5436: 
                            	  5437: *     BYTE
00:00002FFE 2002            	  5438:                 move.l d2,d0
00:00003000 D101            	  5439:                 addx.b d1,d0
00:00003002 40C3            	  5440:                 move.w sr,d3
00:00003004 02830000001F    	  5441:                 andi.l #$1F,d3            * Isolate flags
00:0000300A DA83            	  5442:                 add.l d3,d5               * Copy flag results into accumulator
00:0000300C D880            	  5443:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5444: 
                            	  5445: *     WORD
00:0000300E 2002            	  5446:                 move.l d2,d0
00:00003010 D141            	  5447:                 addx.w d1,d0
00:00003012 40C3            	  5448:                 move.w sr,d3
00:00003014 02830000001F    	  5449:                 andi.l #$1F,d3            * Isolate flags
00:0000301A DA83            	  5450:                 add.l d3,d5               * Copy flag results into accumulator
00:0000301C D880            	  5451:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5452: 
                            	  5453: *     LONG
00:0000301E 2002            	  5454:                 move.l d2,d0
00:00003020 D181            	  5455:                 addx.l d1,d0
00:00003022 40C3            	  5456:                 move.w sr,d3
00:00003024 02830000001F    	  5457:                 andi.l #$1F,d3            * Isolate flags
00:0000302A DA83            	  5458:                 add.l d3,d5               * Copy flag results into accumulator
00:0000302C D880            	  5459:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5460: 
00:0000302E E299            	  5461:                 ror.l #$1,d1
00:00003030 51CEFFCC        	  5462:                 dbf d6,ADDX_OUTER1
00:00003034 E29A            	  5463:                 ror.l #$1,d2
00:00003036 223C8167E123    	  5464:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000303C 7C1E            	  5465:                 move.l #$0000001E,d6       * Inner loop counter
00:0000303E 51CFFFBE        	  5466:                 dbf d7,ADDX_OUTER1
                            	  5467: 
00:00003042 0C844E96A4D9    	  5468:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:00003048 66FE            	  5469:                 bne.s *
00:0000304A 0C85000085CD    	  5470:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:00003050 66FE            	  5471:                 bne.s *
                            	  5472: 
                            	  5473: 
                            	  5474: 
                            	  5475: *     -(An),-(An)
                            	  5476: 
00:00003052 7000            	  5477:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00003054 7200            	  5478:                 moveq  #$00000000,d1
00:00003056 7400            	  5479:                 moveq  #$00000000,d2
00:00003058 307C0100        	  5480:                 move.l #$00000100,a0       * Address for Data-X
00:0000305C 327C0200        	  5481:                 move.l #$00000200,a1       * Address for Data-Y
00:00003060 20FC11FF5580    	  5482:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00003066 20FC1111FFFF    	  5483:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:0000306C 20FC33333333    	  5484:                 move.l #$33333333,(a0)+   * Populate test data
00:00003072 20FC44444444    	  5485:                 move.l #$44444444,(a0)+   * Populate test data
00:00003078 22FC80FF337F    	  5486:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000307E 22FCFFFF1111    	  5487:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00003084 22FC33333333    	  5488:                 move.l #$33333333,(a1)+   * Populate test data
00:0000308A 22FC44444444    	  5489:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5490: 
                            	  5491: 
00:00003090 7C0F            	  5492:                 move.l #$0000000F,d6       * Loop counter
                            	  5493: 
00:00003092 D308            	  5494: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:00003094 40C3            	  5495:                 move.w sr,d3
00:00003096 02830000000F    	  5496:                 andi.l #$0F,d3            * Isolate flags
00:0000309C D083            	  5497:                 add.l d3,d0               * Copy flag results into accumulator
00:0000309E D211            	  5498:                 add.b (a1),d1
00:000030A0 51CEFFF0        	  5499:                 dbf d6,ADDX_LOOP3
                            	  5500: 
                            	  5501: 
00:000030A4 307C0110        	  5502:                 move.l #$00000110,a0       * Address for Data-X
00:000030A8 327C0210        	  5503:                 move.l #$00000210,a1       * Address for Data-Y
00:000030AC 7C07            	  5504:                 moveq  #$00000007,d6       * Loop counter
                            	  5505: 
00:000030AE D348            	  5506: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:000030B0 40C3            	  5507:                 move.w sr,d3
00:000030B2 02830000000F    	  5508:                 andi.l #$0F,d3            * Isolate flags
00:000030B8 D083            	  5509:                 add.l d3,d0               * Copy flag results into accumulator
00:000030BA D251            	  5510:                 add.w (a1),d1
00:000030BC 51CEFFF0        	  5511:                 dbf d6,ADDX_LOOP4
                            	  5512: 
                            	  5513: 
00:000030C0 307C0110        	  5514:                 move.l #$00000110,a0       * Address for Data-X
00:000030C4 327C0210        	  5515:                 move.l #$00000210,a1       * Address for Data-Y
00:000030C8 7C03            	  5516:                 moveq  #$00000003,d6       * Loop counter
                            	  5517: 
00:000030CA D388            	  5518: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:000030CC 40C3            	  5519:                 move.w sr,d3
00:000030CE 02830000000F    	  5520:                 andi.l #$0F,d3            * Isolate flags
00:000030D4 D083            	  5521:                 add.l d3,d0               * Copy flag results into accumulator
00:000030D6 D291            	  5522:                 add.l (a1),d1
00:000030D8 51CEFFF0        	  5523:                 dbf d6,ADDX_LOOP5
                            	  5524: 
                            	  5525: 
00:000030DC 0C8000000095    	  5526:                 cmpi.l #$00000095,d0      * Check the flag results
00:000030E2 66FE            	  5527:                 bne.s *
00:000030E4 0C81C812A682    	  5528:                 cmpi.l #$C812A682,d1      * Check the data results
00:000030EA 66FE            	  5529:                 bne.s *
                            	  5530: 
00:000030EC 4E75            	  5531:                 rts
                            	  5532: 
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: *-----------------------------------------------------------
                            	  5537: *-----------------------------------------------------------
                            	  5538: * OPCODE : SUBX
                            	  5539: *-----------------------------------------------------------
                            	  5540: *-----------------------------------------------------------
                            	  5541: 
                            	  5542: op_SUBX:
                            	  5543: 
                            	  5544: 
                            	  5545: *  * Register to Register
00:000030EE 203CA5A5A5A5    	  5546:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000030F4 223C8167E123    	  5547:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000030FA 243CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d2
00:00003100 7600            	  5549:                 moveq  #$00000000,d3
00:00003102 7800            	  5550:                 moveq  #$00000000,d4       * Cumulative data results
00:00003104 7A00            	  5551:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003106 7C1E            	  5552:                 move.l #$0000001E,d6       * Inner loop counter
00:00003108 7E1E            	  5553:                 move.l #$0000001E,d7       * Outer loop counter
00:0000310A 307C0100        	  5554:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5555: 
                            	  5556: 
                            	  5557: SUBX_OUTER1:
                            	  5558: 
                            	  5559: *     BYTE
00:0000310E 2002            	  5560:                 move.l d2,d0
00:00003110 9101            	  5561:                 subx.b d1,d0
00:00003112 40C3            	  5562:                 move.w sr,d3
00:00003114 02830000001F    	  5563:                 andi.l #$1F,d3            * Isolate flags
00:0000311A DA83            	  5564:                 add.l d3,d5               * Copy flag results into accumulator
00:0000311C D880            	  5565:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5566: 
                            	  5567: *     WORD
00:0000311E 2002            	  5568:                 move.l d2,d0
00:00003120 9141            	  5569:                 subx.w d1,d0
00:00003122 40C3            	  5570:                 move.w sr,d3
00:00003124 02830000001F    	  5571:                 andi.l #$1F,d3            * Isolate flags
00:0000312A DA83            	  5572:                 add.l d3,d5               * Copy flag results into accumulator
00:0000312C D880            	  5573:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5574: 
                            	  5575: *     LONG
00:0000312E 2002            	  5576:                 move.l d2,d0
00:00003130 9181            	  5577:                 subx.l d1,d0
00:00003132 40C3            	  5578:                 move.w sr,d3
00:00003134 02830000001F    	  5579:                 andi.l #$1F,d3            * Isolate flags
00:0000313A DA83            	  5580:                 add.l d3,d5               * Copy flag results into accumulator
00:0000313C D880            	  5581:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5582: 
00:0000313E E299            	  5583:                 ror.l #$1,d1
00:00003140 51CEFFCC        	  5584:                 dbf d6,SUBX_OUTER1
00:00003144 E29A            	  5585:                 ror.l #$1,d2
00:00003146 223C8167E123    	  5586:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000314C 7C1E            	  5587:                 move.l #$0000001E,d6       * Inner loop counter
00:0000314E 51CFFFBE        	  5588:                 dbf d7,SUBX_OUTER1
                            	  5589: 
00:00003152 0C84FCAA913E    	  5590:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:00003158 66FE            	  5591:                 bne.s *
00:0000315A 0C8500007E89    	  5592:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:00003160 66FE            	  5593:                 bne.s *
                            	  5594: 
                            	  5595: 
                            	  5596: 
                            	  5597: *     -(An),-(An)
                            	  5598: 
00:00003162 7000            	  5599:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00003164 7200            	  5600:                 moveq  #$00000000,d1
00:00003166 7400            	  5601:                 moveq  #$00000000,d2
00:00003168 307C0100        	  5602:                 move.l #$00000100,a0       * Address for Data-X
00:0000316C 327C0200        	  5603:                 move.l #$00000200,a1       * Address for Data-Y
00:00003170 20FC11FF5580    	  5604:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00003176 20FC1111FFFF    	  5605:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:0000317C 20FC80FF337F    	  5606:                 move.l #$80FF337F,(a0)+   * Populate test data
00:00003182 20FC44444444    	  5607:                 move.l #$44444444,(a0)+   * Populate test data
00:00003188 22FC80FF337F    	  5608:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000318E 22FC1111FFFF    	  5609:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:00003194 22FC33333333    	  5610:                 move.l #$33333333,(a1)+   * Populate test data
00:0000319A 22FC5580EECC    	  5611:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5612: 
                            	  5613: 
00:000031A0 7C0F            	  5614:                 move.l #$0000000F,d6       * Loop counter
                            	  5615: 
00:000031A2 9308            	  5616: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:000031A4 40C3            	  5617:                 move.w sr,d3
00:000031A6 02830000000F    	  5618:                 andi.l #$0F,d3            * Isolate flags
00:000031AC D083            	  5619:                 add.l d3,d0               * Copy flag results into accumulator
00:000031AE D211            	  5620:                 add.b (a1),d1
00:000031B0 51CEFFF0        	  5621:                 dbf d6,SUBX_LOOP3
                            	  5622: 
                            	  5623: 
00:000031B4 307C0110        	  5624:                 move.l #$00000110,a0       * Address for Data-X
00:000031B8 327C0210        	  5625:                 move.l #$00000210,a1       * Address for Data-Y
00:000031BC 7C07            	  5626:                 moveq  #$00000007,d6       * Loop counter
                            	  5627: 
00:000031BE 9348            	  5628: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:000031C0 40C3            	  5629:                 move.w sr,d3
00:000031C2 02830000000F    	  5630:                 andi.l #$0F,d3            * Isolate flags
00:000031C8 D083            	  5631:                 add.l d3,d0               * Copy flag results into accumulator
00:000031CA D251            	  5632:                 add.w (a1),d1
00:000031CC 51CEFFF0        	  5633:                 dbf d6,SUBX_LOOP4
                            	  5634: 
                            	  5635: 
00:000031D0 307C0110        	  5636:                 move.l #$00000110,a0       * Address for Data-X
00:000031D4 327C0210        	  5637:                 move.l #$00000210,a1       * Address for Data-Y
00:000031D8 7C03            	  5638:                 moveq  #$00000003,d6       * Loop counter
                            	  5639: 
00:000031DA 9388            	  5640: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:000031DC 40C3            	  5641:                 move.w sr,d3
00:000031DE 02830000000F    	  5642:                 andi.l #$0F,d3            * Isolate flags
00:000031E4 D083            	  5643:                 add.l d3,d0               * Copy flag results into accumulator
00:000031E6 D291            	  5644:                 add.l (a1),d1
00:000031E8 51CEFFF0        	  5645:                 dbf d6,SUBX_LOOP5
                            	  5646: 
                            	  5647: 
00:000031EC 0C80000000B1    	  5648:                 cmpi.l #$000000B1,d0      * Check the flag results
00:000031F2 66FE            	  5649:                 bne.s *
00:000031F4 0C8162C6F417    	  5650:                 cmpi.l #$62C6F417,d1      * Check the data results
00:000031FA 66FE            	  5651:                 bne.s *
                            	  5652: 
00:000031FC 4E75            	  5653:                 rts
                            	  5654: 
                            	  5655: 
                            	  5656: *-----------------------------------------------------------
                            	  5657: *-----------------------------------------------------------
                            	  5658: * OPCODE : MULU
                            	  5659: *-----------------------------------------------------------
                            	  5660: *-----------------------------------------------------------
                            	  5661: 
                            	  5662: op_MULU:
                            	  5663: 
00:000031FE 203CFE805501    	  5664:                 move.l #$FE805501,d0        * Initial
00:00003204 223C5697EDB6    	  5665:                 move.l #$5697EDB6,d1        * Initial Y
00:0000320A 243CFE805501    	  5666:                 move.l #$FE805501,d2
00:00003210 7600            	  5667:                 moveq  #$00000000,d3
00:00003212 7800            	  5668:                 moveq  #$00000000,d4        * Cumulative data results
00:00003214 7A00            	  5669:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003216 7C0E            	  5670:                 move.l #$0000000E,d6       * Inner loop counter
00:00003218 7E0E            	  5671:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5672: 
                            	  5673: 
00:0000321A C0C1            	  5674: MULU_OUTER1:    mulu d1,d0
00:0000321C 40C3            	  5675:                 move.w sr,d3
00:0000321E 02830000000C    	  5676:                 andi.l #$0C,d3            * Isolate flags
00:00003224 DA83            	  5677:                 add.l d3,d5               * Copy flag results into accumulator
00:00003226 D880            	  5678:                 add.l d0,d4               * Copy data results into data accumulator
00:00003228 E299            	  5679:                 ror.l #$1,d1
                            	  5680: 
00:0000322A 51CEFFEE        	  5681:                 dbf d6,MULU_OUTER1
00:0000322E E29A            	  5682:                 ror.l #$1,d2
00:00003230 2002            	  5683:                 move.l d2,d0
00:00003232 7C0E            	  5684:                 move.l #$0000000E,d6       * Inner loop counter
00:00003234 51CFFFE4        	  5685:                 dbf d7,MULU_OUTER1
                            	  5686: 
00:00003238 0C8476FB988C    	  5687:                 cmpi.l #$76FB988C,d4      * Check the data results
00:0000323E 66FE            	  5688:                 bne.s *
                            	  5689: 
00:00003240 0C8500000170    	  5690:                 cmpi.l #$00000170,d5      * Check the Flag results
00:00003246 66FE            	  5691:                 bne.s *
                            	  5692: 
                            	  5693: 
00:00003248 4E75            	  5694:                 rts
                            	  5695: 
                            	  5696: 
                            	  5697: *-----------------------------------------------------------
                            	  5698: *-----------------------------------------------------------
                            	  5699: * OPCODE : MULS
                            	  5700: *-----------------------------------------------------------
                            	  5701: *-----------------------------------------------------------
                            	  5702: 
                            	  5703: op_MULS:
                            	  5704: 
00:0000324A 203CFE805501    	  5705:                 move.l #$FE805501,d0        * Initial
00:00003250 223C5697EDB6    	  5706:                 move.l #$5697EDB6,d1        * Initial Y
00:00003256 243CFE805501    	  5707:                 move.l #$FE805501,d2
00:0000325C 7600            	  5708:                 moveq  #$00000000,d3
00:0000325E 7800            	  5709:                 moveq  #$00000000,d4        * Cumulative data results
00:00003260 7A00            	  5710:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003262 7C0E            	  5711:                 move.l #$0000000E,d6       * Inner loop counter
00:00003264 7E0E            	  5712:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5713: 
                            	  5714: 
00:00003266 C1C1            	  5715: MULS_OUTER1:    muls d1,d0
00:00003268 40C3            	  5716:                 move.w sr,d3
00:0000326A 02830000000C    	  5717:                 andi.l #$0C,d3            * Isolate flags
00:00003270 DA83            	  5718:                 add.l d3,d5               * Copy flag results into accumulator
00:00003272 D880            	  5719:                 add.l d0,d4               * Copy data results into data accumulator
00:00003274 E299            	  5720:                 ror.l #$1,d1
                            	  5721: 
00:00003276 51CEFFEE        	  5722:                 dbf d6,MULS_OUTER1
00:0000327A E29A            	  5723:                 ror.l #$1,d2
00:0000327C 2002            	  5724:                 move.l d2,d0
00:0000327E 7C0E            	  5725:                 move.l #$0000000E,d6       * Inner loop counter
00:00003280 51CFFFE4        	  5726:                 dbf d7,MULS_OUTER1
                            	  5727: 
00:00003284 0C84D4E2988C    	  5728:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:0000328A 66FE            	  5729:                 bne.s *
                            	  5730: 
00:0000328C 0C85000003E0    	  5731:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:00003292 66FE            	  5732:                 bne.s *
                            	  5733: 
                            	  5734: 
00:00003294 4E75            	  5735:                 rts
                            	  5736: 
                            	  5737: 
                            	  5738: 
                            	  5739: *-----------------------------------------------------------
                            	  5740: *-----------------------------------------------------------
                            	  5741: * OPCODE : EXG
                            	  5742: *-----------------------------------------------------------
                            	  5743: *-----------------------------------------------------------
                            	  5744: 
                            	  5745: op_EXG:
00:00003296 223CD1D1D1D1    	  5746:                 move.l #$d1d1d1d1,d1
00:0000329C 243CD2D2D2D2    	  5747:                 move.l #$d2d2d2d2,d2
00:000032A2 263CD3D3D3D3    	  5748:                 move.l #$d3d3d3d3,d3
00:000032A8 227CA1A1A1A1    	  5749:                 move.l #$a1a1a1a1,a1
00:000032AE 247CA2A2A2A2    	  5750:                 move.l #$a2a2a2a2,a2
00:000032B4 267CA3A3A3A3    	  5751:                 move.l #$a3a3a3a3,a3
                            	  5752: 
00:000032BA C342            	  5753:                 exg d1,d2
00:000032BC C34A            	  5754:                 exg a1,a2
00:000032BE C78B            	  5755:                 exg d3,a3
                            	  5756: 
00:000032C0 0C81D2D2D2D2    	  5757:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:000032C6 66FE            	  5758:                 bne.s *
00:000032C8 0C82D1D1D1D1    	  5759:                 cmpi.l #$d1d1d1d1,d2
00:000032CE 66FE            	  5760:                 bne.s *
00:000032D0 0C83A3A3A3A3    	  5761:                 cmpi.l #$a3a3a3a3,d3
00:000032D6 66FE            	  5762:                 bne.s *
                            	  5763: 
00:000032D8 2209            	  5764:                 move.l a1,d1
00:000032DA 240A            	  5765:                 move.l a2,d2
00:000032DC 260B            	  5766:                 move.l a3,d3
                            	  5767: 
00:000032DE 0C81A2A2A2A2    	  5768:                 cmpi.l #$a2a2a2a2,d1
00:000032E4 66FE            	  5769:                 bne.s *
00:000032E6 0C82A1A1A1A1    	  5770:                 cmpi.l #$a1a1a1a1,d2
00:000032EC 66FE            	  5771:                 bne.s *
00:000032EE 0C83D3D3D3D3    	  5772:                 cmpi.l #$d3d3d3d3,d3
00:000032F4 66FE            	  5773:                 bne.s *
                            	  5774: 
00:000032F6 4E75            	  5775:                 rts
                            	  5776: 
                            	  5777: 
                            	  5778: *-----------------------------------------------------------
                            	  5779: *-----------------------------------------------------------
                            	  5780: * OPCODE : ROx
                            	  5781: *-----------------------------------------------------------
                            	  5782: *-----------------------------------------------------------
                            	  5783: 
                            	  5784: *     Subroutine to check and accumulate the flags
00:000032F8 40C3            	  5785: ROx_FLAGS:      move.w sr,d3
00:000032FA 02830000000F    	  5786:                 andi.l #$0F,d3            * Isolate flags
00:00003300 DA83            	  5787:                 add.l d3,d5               * Copy flag results into accumulator
00:00003302 4E75            	  5788:                 rts
                            	  5789: 
                            	  5790: op_ROx:
                            	  5791: 
                            	  5792: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5793: 
                            	  5794: *        BYTE LEFT
00:00003304 203C80018FF1    	  5795:                 move.l #$80018FF1,d0
00:0000330A 7A00            	  5796:                 moveq  #$00000000,d5
00:0000330C 7C11            	  5797:                 moveq  #$00000011,d6
                            	  5798: ROx_LOOP1:
00:0000330E ED38            	  5799:                 rol.b d6,d0
00:00003310 61E6            	  5800:                 bsr ROx_FLAGS
00:00003312 51CEFFFA        	  5801:                 dbf d6,ROx_LOOP1
00:00003316 0C8080018FE3    	  5802:                 cmpi.l #$80018FE3,d0
00:0000331C 66FE            	  5803:                 bne.s *
00:0000331E 0C850000006B    	  5804:                 cmpi.l #$0000006B,d5
00:00003324 66FE            	  5805:                 bne.s *
                            	  5806: 
                            	  5807: *        BYTE RIGHT
00:00003326 203C80018FF1    	  5808:                 move.l #$80018FF1,d0
00:0000332C 7C12            	  5809:                 moveq  #$00000012,d6
                            	  5810: ROx_LOOP2:
00:0000332E EC38            	  5811:                 ror.b d6,d0
00:00003330 61C6            	  5812:                 bsr ROx_FLAGS
00:00003332 51CEFFFA        	  5813:                 dbf d6,ROx_LOOP2
00:00003336 0C8080018F3E    	  5814:                 cmpi.l #$80018F3E,d0
00:0000333C 66FE            	  5815:                 bne.s *
00:0000333E 0C85000000C5    	  5816:                 cmpi.l #$000000C5,d5
00:00003344 66FE            	  5817:                 bne.s *
                            	  5818: 
                            	  5819: 
                            	  5820: *        WORD LEFT
00:00003346 203C80018FF1    	  5821:                 move.l #$80018FF1,d0
00:0000334C 7C13            	  5822:                 moveq  #$00000013,d6
                            	  5823: ROx_LOOP3:
00:0000334E ED78            	  5824:                 rol.w d6,d0
00:00003350 61A6            	  5825:                 bsr ROx_FLAGS
00:00003352 51CEFFFA        	  5826:                 dbf d6,ROx_LOOP3
00:00003356 0C80800163FC    	  5827:                 cmpi.l #$800163FC,d0
00:0000335C 66FE            	  5828:                 bne.s *
00:0000335E 0C8500000131    	  5829:                 cmpi.l #$00000131,d5
00:00003364 66FE            	  5830:                 bne.s *
                            	  5831: 
                            	  5832: *        WORD RIGHT
00:00003366 203C80018FF1    	  5833:                 move.l #$80018FF1,d0
00:0000336C 7C1E            	  5834:                 move.l #$0000001E,d6
                            	  5835: ROx_LOOP4:
00:0000336E EC78            	  5836:                 ror.w d6,d0
00:00003370 6186            	  5837:                 bsr ROx_FLAGS
00:00003372 51CEFFFA        	  5838:                 dbf d6,ROx_LOOP4
00:00003376 0C808001C7F8    	  5839:                 cmpi.l #$8001C7F8,d0
00:0000337C 66FE            	  5840:                 bne.s *
00:0000337E 0C85000001DB    	  5841:                 cmpi.l #$000001DB,d5
00:00003384 66FE            	  5842:                 bne.s *
                            	  5843: 
                            	  5844: 
                            	  5845: *        LONG LEFT
00:00003386 203C80018FF1    	  5846:                 move.l #$80018FF1,d0
00:0000338C 7C15            	  5847:                 moveq  #$00000015,d6
                            	  5848: ROx_LOOP5:
00:0000338E EDB8            	  5849:                 rol.l d6,d0
00:00003390 6100FF66        	  5850:                 bsr ROx_FLAGS
00:00003394 51CEFFF8        	  5851:                 dbf d6,ROx_LOOP5
00:00003398 0C8000C7F8C0    	  5852:                 cmpi.l #$00C7F8C0,d0
00:0000339E 66FE            	  5853:                 bne.s *
00:000033A0 0C850000021A    	  5854:                 cmpi.l #$0000021A,d5
00:000033A6 66FE            	  5855:                 bne.s *
                            	  5856: 
                            	  5857: *        LONG RIGHT
00:000033A8 203C80018FF1    	  5858:                 move.l #$80018FF1,d0
00:000033AE 7C16            	  5859:                 moveq  #$00000016,d6
                            	  5860: ROx_LOOP6:
00:000033B0 ECB8            	  5861:                 ror.l d6,d0
00:000033B2 6100FF44        	  5862:                 bsr ROx_FLAGS
00:000033B6 51CEFFF8        	  5863:                 dbf d6,ROx_LOOP6
00:000033BA 0C80000C7F8C    	  5864:                 cmpi.l #$000C7F8C,d0
00:000033C0 66FE            	  5865:                 bne.s *
00:000033C2 0C8500000250    	  5866:                 cmpi.l #$00000250,d5
00:000033C8 66FE            	  5867:                 bne.s *
                            	  5868: 
                            	  5869: 
                            	  5870: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5871: 
00:000033CA 203C80018FF1    	  5872:                 move.l #$80018FF1,d0
00:000033D0 7A00            	  5873:                 moveq  #$00000000,d5
                            	  5874: 
                            	  5875: *        BYTE LEFT
00:000033D2 E318            	  5876:                 rol.b #1,d0
00:000033D4 6100FF22        	  5877:                 bsr ROx_FLAGS
00:000033D8 EB18            	  5878:                 rol.b #5,d0
00:000033DA 6100FF1C        	  5879:                 bsr ROx_FLAGS
00:000033DE EF18            	  5880:                 rol.b #7,d0
00:000033E0 6100FF16        	  5881:                 bsr ROx_FLAGS
00:000033E4 E118            	  5882:                 rol.b #8,d0
00:000033E6 6100FF10        	  5883:                 bsr ROx_FLAGS
00:000033EA 0C8080018F3E    	  5884:                 cmpi.l #$80018F3E,d0
00:000033F0 66FE            	  5885:                 bne.s *
00:000033F2 0C8500000009    	  5886:                 cmpi.l #$00000009,d5
00:000033F8 66FE            	  5887:                 bne.s *
                            	  5888: 
                            	  5889: *        BYTE RIGHT
00:000033FA E218            	  5890:                 ror.b #1,d0
00:000033FC 6100FEFA        	  5891:                 bsr ROx_FLAGS
00:00003400 EA18            	  5892:                 ror.b #5,d0
00:00003402 6100FEF4        	  5893:                 bsr ROx_FLAGS
00:00003406 EE18            	  5894:                 ror.b #7,d0
00:00003408 6100FEEE        	  5895:                 bsr ROx_FLAGS
00:0000340C E018            	  5896:                 ror.b #8,d0
00:0000340E 6100FEE8        	  5897:                 bsr ROx_FLAGS
00:00003412 0C8080018FF1    	  5898:                 cmpi.l #$80018FF1,d0
00:00003418 66FE            	  5899:                 bne.s *
00:0000341A 0C8500000024    	  5900:                 cmpi.l #$00000024,d5
00:00003420 66FE            	  5901:                 bne.s *
                            	  5902: 
                            	  5903: *        WORD LEFT
00:00003422 E358            	  5904:                 rol.w #1,d0
00:00003424 6100FED2        	  5905:                 bsr ROx_FLAGS
00:00003428 EB58            	  5906:                 rol.w #5,d0
00:0000342A 6100FECC        	  5907:                 bsr ROx_FLAGS
00:0000342E EF58            	  5908:                 rol.w #7,d0
00:00003430 6100FEC6        	  5909:                 bsr ROx_FLAGS
00:00003434 E158            	  5910:                 rol.w #8,d0
00:00003436 6100FEC0        	  5911:                 bsr ROx_FLAGS
00:0000343A 0C808001FE31    	  5912:                 cmpi.l #$8001FE31,d0
00:00003440 66FE            	  5913:                 bne.s *
00:00003442 0C8500000037    	  5914:                 cmpi.l #$00000037,d5
00:00003448 66FE            	  5915:                 bne.s *
                            	  5916: 
                            	  5917: *        WORD RIGHT
00:0000344A E258            	  5918:                 ror.w #1,d0
00:0000344C 6100FEAA        	  5919:                 bsr ROx_FLAGS
00:00003450 EA58            	  5920:                 ror.w #5,d0
00:00003452 6100FEA4        	  5921:                 bsr ROx_FLAGS
00:00003456 EE58            	  5922:                 ror.w #7,d0
00:00003458 6100FE9E        	  5923:                 bsr ROx_FLAGS
00:0000345C E058            	  5924:                 ror.w #8,d0
00:0000345E 6100FE98        	  5925:                 bsr ROx_FLAGS
00:00003462 0C8080018FF1    	  5926:                 cmpi.l #$80018FF1,d0
00:00003468 66FE            	  5927:                 bne.s *
00:0000346A 0C850000005B    	  5928:                 cmpi.l #$0000005B,d5
00:00003470 66FE            	  5929:                 bne.s *
                            	  5930: 
                            	  5931: *        LONG LEFT
00:00003472 E398            	  5932:                 rol.l #1,d0
00:00003474 6100FE82        	  5933:                 bsr ROx_FLAGS
00:00003478 EB98            	  5934:                 rol.l #5,d0
00:0000347A 6100FE7C        	  5935:                 bsr ROx_FLAGS
00:0000347E EF98            	  5936:                 rol.l #7,d0
00:00003480 6100FE76        	  5937:                 bsr ROx_FLAGS
00:00003484 E198            	  5938:                 rol.l #8,d0
00:00003486 6100FE70        	  5939:                 bsr ROx_FLAGS
00:0000348A 0C80FE300031    	  5940:                 cmpi.l #$FE300031,d0
00:00003490 66FE            	  5941:                 bne.s *
00:00003492 0C8500000065    	  5942:                 cmpi.l #$00000065,d5
00:00003498 66FE            	  5943:                 bne.s *
                            	  5944: 
                            	  5945: *        LONG RIGHT
00:0000349A E298            	  5946:                 ror.l #1,d0
00:0000349C 6100FE5A        	  5947:                 bsr ROx_FLAGS
00:000034A0 EA98            	  5948:                 ror.l #5,d0
00:000034A2 6100FE54        	  5949:                 bsr ROx_FLAGS
00:000034A6 EE98            	  5950:                 ror.l #7,d0
00:000034A8 6100FE4E        	  5951:                 bsr ROx_FLAGS
00:000034AC E098            	  5952:                 ror.l #8,d0
00:000034AE 6100FE48        	  5953:                 bsr ROx_FLAGS
00:000034B2 0C8080018FF1    	  5954:                 cmpi.l #$80018FF1,d0
00:000034B8 66FE            	  5955:                 bne.s *
00:000034BA 0C8500000080    	  5956:                 cmpi.l #$00000080,d5
00:000034C0 66FE            	  5957:                 bne.s *
                            	  5958: 
                            	  5959: 
                            	  5960: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5961: 
00:000034C2 7A00            	  5962:                 moveq  #$00000000,d5
00:000034C4 307C0100        	  5963:                 move.l #$00000100,a0
00:000034C8 30BC8FF1        	  5964:                 move.w #$8FF1,(a0)
                            	  5965: 
                            	  5966: *        WORD LEFT
00:000034CC E7D0            	  5967:                 rol (a0)
00:000034CE 6100FE28        	  5968:                 bsr ROx_FLAGS
00:000034D2 E7D0            	  5969:                 rol (a0)
00:000034D4 6100FE22        	  5970:                 bsr ROx_FLAGS
00:000034D8 E7D0            	  5971:                 rol (a0)
00:000034DA 6100FE1C        	  5972:                 bsr ROx_FLAGS
00:000034DE E7D0            	  5973:                 rol (a0)
00:000034E0 6100FE16        	  5974:                 bsr ROx_FLAGS
00:000034E4 3010            	  5975:                 move.w (a0),d0
00:000034E6 0C808001FF18    	  5976:                 cmpi.l #$8001FF18,d0
00:000034EC 66FE            	  5977:                 bne.s *
00:000034EE 0C8500000009    	  5978:                 cmpi.l #$00000009,d5
00:000034F4 66FE            	  5979:                 bne.s *
                            	  5980: 
                            	  5981: *        WORD RIGHT
00:000034F6 E6D0            	  5982:                 ror (a0)
00:000034F8 6100FDFE        	  5983:                 bsr ROx_FLAGS
00:000034FC E6D0            	  5984:                 ror (a0)
00:000034FE 6100FDF8        	  5985:                 bsr ROx_FLAGS
00:00003502 E6D0            	  5986:                 ror (a0)
00:00003504 6100FDF2        	  5987:                 bsr ROx_FLAGS
00:00003508 E6D0            	  5988:                 ror (a0)
00:0000350A 6100FDEC        	  5989:                 bsr ROx_FLAGS
00:0000350E E6D0            	  5990:                 ror (a0)
00:00003510 6100FDE6        	  5991:                 bsr ROx_FLAGS
00:00003514 E6D0            	  5992:                 ror (a0)
00:00003516 6100FDE0        	  5993:                 bsr ROx_FLAGS
00:0000351A 3010            	  5994:                 move.w (a0),d0
00:0000351C 0C80800163FC    	  5995:                 cmpi.l #$800163FC,d0
00:00003522 66FE            	  5996:                 bne.s *
00:00003524 0C850000001B    	  5997:                 cmpi.l #$0000001B,d5
00:0000352A 66FE            	  5998:                 bne.s *
                            	  5999: 
00:0000352C 4E75            	  6000:                 rts
                            	  6001: 
                            	  6002: 
                            	  6003: 
                            	  6004: *-----------------------------------------------------------
                            	  6005: *-----------------------------------------------------------
                            	  6006: * OPCODE : ROXx
                            	  6007: *-----------------------------------------------------------
                            	  6008: *-----------------------------------------------------------
                            	  6009: 
                            	  6010: *     Subroutine to check and accumulate the flags
00:0000352E 40C3            	  6011: ROXx_FLAGS:     move.w sr,d3
00:00003530 02830000000F    	  6012:                 andi.l #$0F,d3            * Isolate flags
00:00003536 DA83            	  6013:                 add.l d3,d5               * Copy flag results into accumulator
00:00003538 4E75            	  6014:                 rts
                            	  6015: 
                            	  6016: op_ROXx:
                            	  6017: 
                            	  6018: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6019: 
                            	  6020: *        BYTE LEFT
00:0000353A 203C80018FF1    	  6021:                 move.l #$80018FF1,d0
00:00003540 7A00            	  6022:                 moveq  #$00000000,d5
00:00003542 7C11            	  6023:                 moveq  #$00000011,d6
                            	  6024: ROXx_LOOP1:
00:00003544 ED30            	  6025:                 roxl.b d6,d0
00:00003546 61E6            	  6026:                 bsr ROXx_FLAGS
00:00003548 51CEFFFA        	  6027:                 dbf d6,ROXx_LOOP1
00:0000354C 0C8080018FD0    	  6028:                 cmpi.l #$80018FD0,d0
00:00003552 66FE            	  6029:                 bne.s *
00:00003554 0C8500000042    	  6030:                 cmpi.l #$00000042,d5
00:0000355A 66FE            	  6031:                 bne.s *
                            	  6032: 
                            	  6033: *        BYTE RIGHT
00:0000355C 203C80018FF1    	  6034:                 move.l #$80018FF1,d0
00:00003562 7C12            	  6035:                 moveq  #$00000012,d6
                            	  6036: ROXx_LOOP2:
00:00003564 EC30            	  6037:                 roxr.b d6,d0
00:00003566 61C6            	  6038:                 bsr ROXx_FLAGS
00:00003568 51CEFFFA        	  6039:                 dbf d6,ROXx_LOOP2
00:0000356C 0C8080018F51    	  6040:                 cmpi.l #$80018F51,d0
00:00003572 66FE            	  6041:                 bne.s *
00:00003574 0C850000009C    	  6042:                 cmpi.l #$0000009C,d5
00:0000357A 66FE            	  6043:                 bne.s *
                            	  6044: 
                            	  6045: 
                            	  6046: *        WORD LEFT
00:0000357C 203C80018FF1    	  6047:                 move.l #$80018FF1,d0
00:00003582 7C13            	  6048:                 moveq  #$00000013,d6
                            	  6049: ROXx_LOOP3:
00:00003584 ED70            	  6050:                 roxl.w d6,d0
00:00003586 61A6            	  6051:                 bsr ROXx_FLAGS
00:00003588 51CEFFFA        	  6052:                 dbf d6,ROXx_LOOP3
00:0000358C 0C8080013980    	  6053:                 cmpi.l #$80013980,d0
00:00003592 66FE            	  6054:                 bne.s *
00:00003594 0C85000000C9    	  6055:                 cmpi.l #$000000C9,d5
00:0000359A 66FE            	  6056:                 bne.s *
                            	  6057: 
                            	  6058: *        WORD RIGHT
00:0000359C 203C80018FF1    	  6059:                 move.l #$80018FF1,d0
00:000035A2 7C1E            	  6060:                 move.l #$0000001E,d6
                            	  6061: ROXx_LOOP4:
00:000035A4 EC70            	  6062:                 roxr.w d6,d0
00:000035A6 6186            	  6063:                 bsr ROXx_FLAGS
00:000035A8 51CEFFFA        	  6064:                 dbf d6,ROXx_LOOP4
00:000035AC 0C8080010A1D    	  6065:                 cmpi.l #$80010A1D,d0
00:000035B2 66FE            	  6066:                 bne.s *
00:000035B4 0C850000014D    	  6067:                 cmpi.l #$0000014D,d5
00:000035BA 66FE            	  6068:                 bne.s *
                            	  6069: 
                            	  6070: 
                            	  6071: *        LONG LEFT
00:000035BC 203C80018FF1    	  6072:                 move.l #$80018FF1,d0
00:000035C2 7C15            	  6073:                 moveq  #$00000015,d6
                            	  6074: ROXx_LOOP5:
00:000035C4 EDB0            	  6075:                 roxl.l d6,d0
00:000035C6 6100FF66        	  6076:                 bsr ROXx_FLAGS
00:000035CA 51CEFFF8        	  6077:                 dbf d6,ROXx_LOOP5
00:000035CE 0C80800185D0    	  6078:                 cmpi.l #$800185D0,d0
00:000035D4 66FE            	  6079:                 bne.s *
00:000035D6 0C85000001A1    	  6080:                 cmpi.l #$000001A1,d5
00:000035DC 66FE            	  6081:                 bne.s *
                            	  6082: 
                            	  6083: *        LONG RIGHT
00:000035DE 203C80018FF1    	  6084:                 move.l #$80018FF1,d0
00:000035E4 7C16            	  6085:                 moveq  #$00000016,d6
                            	  6086: ROXx_LOOP6:
00:000035E6 ECB0            	  6087:                 roxr.l d6,d0
00:000035E8 6100FF44        	  6088:                 bsr ROXx_FLAGS
00:000035EC 51CEFFF8        	  6089:                 dbf d6,ROXx_LOOP6
00:000035F0 0C80082D8200    	  6090:                 cmpi.l #$082D8200,d0
00:000035F6 66FE            	  6091:                 bne.s *
00:000035F8 0C85000001DE    	  6092:                 cmpi.l #$000001DE,d5
00:000035FE 66FE            	  6093:                 bne.s *
                            	  6094: 
                            	  6095: 
                            	  6096: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6097: 
00:00003600 203C80018FF1    	  6098:                 move.l #$80018FF1,d0
00:00003606 7A00            	  6099:                 moveq  #$00000000,d5
                            	  6100: 
                            	  6101: *        BYTE LEFT
00:00003608 E310            	  6102:                 roxl.b #1,d0
00:0000360A 6100FF22        	  6103:                 bsr ROXx_FLAGS
00:0000360E EB10            	  6104:                 roxl.b #5,d0
00:00003610 6100FF1C        	  6105:                 bsr ROXx_FLAGS
00:00003614 EF10            	  6106:                 roxl.b #7,d0
00:00003616 6100FF16        	  6107:                 bsr ROXx_FLAGS
00:0000361A E110            	  6108:                 roxl.b #8,d0
00:0000361C 6100FF10        	  6109:                 bsr ROXx_FLAGS
00:00003620 0C8080018F09    	  6110:                 cmpi.l #$80018F09,d0
00:00003626 66FE            	  6111:                 bne.s *
00:00003628 0C850000000B    	  6112:                 cmpi.l #$0000000B,d5
00:0000362E 66FE            	  6113:                 bne.s *
                            	  6114: 
                            	  6115: *        BYTE RIGHT
00:00003630 E210            	  6116:                 roxr.b #1,d0
00:00003632 6100FEFA        	  6117:                 bsr ROXx_FLAGS
00:00003636 EA10            	  6118:                 roxr.b #5,d0
00:00003638 6100FEF4        	  6119:                 bsr ROXx_FLAGS
00:0000363C EE10            	  6120:                 roxr.b #7,d0
00:0000363E 6100FEEE        	  6121:                 bsr ROXx_FLAGS
00:00003642 E010            	  6122:                 roxr.b #8,d0
00:00003644 6100FEE8        	  6123:                 bsr ROXx_FLAGS
00:00003648 0C8080018F00    	  6124:                 cmpi.l #$80018F00,d0
00:0000364E 66FE            	  6125:                 bne.s *
00:00003650 0C8500000015    	  6126:                 cmpi.l #$00000015,d5
00:00003656 66FE            	  6127:                 bne.s *
                            	  6128: 
                            	  6129: *        WORD LEFT
00:00003658 E350            	  6130:                 roxl.w #1,d0
00:0000365A 6100FED2        	  6131:                 bsr ROXx_FLAGS
00:0000365E EB50            	  6132:                 roxl.w #5,d0
00:00003660 6100FECC        	  6133:                 bsr ROXx_FLAGS
00:00003664 EF50            	  6134:                 roxl.w #7,d0
00:00003666 6100FEC6        	  6135:                 bsr ROXx_FLAGS
00:0000366A E150            	  6136:                 roxl.w #8,d0
00:0000366C 6100FEC0        	  6137:                 bsr ROXx_FLAGS
00:00003670 0C808001B000    	  6138:                 cmpi.l #$8001B000,d0
00:00003676 66FE            	  6139:                 bne.s *
00:00003678 0C8500000027    	  6140:                 cmpi.l #$00000027,d5
00:0000367E 66FE            	  6141:                 bne.s *
                            	  6142: 
                            	  6143: *        WORD RIGHT
00:00003680 E250            	  6144:                 roxr.w #1,d0
00:00003682 6100FEAA        	  6145:                 bsr ROXx_FLAGS
00:00003686 EA50            	  6146:                 roxr.w #5,d0
00:00003688 6100FEA4        	  6147:                 bsr ROXx_FLAGS
00:0000368C EE50            	  6148:                 roxr.w #7,d0
00:0000368E 6100FE9E        	  6149:                 bsr ROXx_FLAGS
00:00003692 E050            	  6150:                 roxr.w #8,d0
00:00003694 6100FE98        	  6151:                 bsr ROXx_FLAGS
00:00003698 0C8080010A00    	  6152:                 cmpi.l #$80010A00,d0
00:0000369E 66FE            	  6153:                 bne.s *
00:000036A0 0C8500000028    	  6154:                 cmpi.l #$00000028,d5
00:000036A6 66FE            	  6155:                 bne.s *
                            	  6156: 
                            	  6157: *        LONG LEFT
00:000036A8 E390            	  6158:                 roxl.l #1,d0
00:000036AA 6100FE82        	  6159:                 bsr ROXx_FLAGS
00:000036AE EB90            	  6160:                 roxl.l #5,d0
00:000036B0 6100FE7C        	  6161:                 bsr ROXx_FLAGS
00:000036B4 EF90            	  6162:                 roxl.l #7,d0
00:000036B6 6100FE76        	  6163:                 bsr ROXx_FLAGS
00:000036BA E190            	  6164:                 roxl.l #8,d0
00:000036BC 6100FE70        	  6165:                 bsr ROXx_FLAGS
00:000036C0 0C8040000010    	  6166:                 cmpi.l #$40000010,d0
00:000036C6 66FE            	  6167:                 bne.s *
00:000036C8 0C850000002A    	  6168:                 cmpi.l #$0000002A,d5
00:000036CE 66FE            	  6169:                 bne.s *
                            	  6170: 
                            	  6171: *        LONG RIGHT
00:000036D0 E290            	  6172:                 roxr.l #1,d0
00:000036D2 6100FE5A        	  6173:                 bsr ROXx_FLAGS
00:000036D6 EA90            	  6174:                 roxr.l #5,d0
00:000036D8 6100FE54        	  6175:                 bsr ROXx_FLAGS
00:000036DC EE90            	  6176:                 roxr.l #7,d0
00:000036DE 6100FE4E        	  6177:                 bsr ROXx_FLAGS
00:000036E2 E090            	  6178:                 roxr.l #8,d0
00:000036E4 6100FE48        	  6179:                 bsr ROXx_FLAGS
00:000036E8 0C8000010200    	  6180:                 cmpi.l #$00010200,d0
00:000036EE 66FE            	  6181:                 bne.s *
00:000036F0 0C8500000032    	  6182:                 cmpi.l #$00000032,d5
00:000036F6 66FE            	  6183:                 bne.s *
                            	  6184: 
                            	  6185: 
                            	  6186: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6187: 
00:000036F8 7A00            	  6188:                 moveq  #$00000000,d5
00:000036FA 307C0100        	  6189:                 move.l #$00000100,a0
00:000036FE 30BC8FF1        	  6190:                 move.w #$8FF1,(a0)
                            	  6191: 
                            	  6192: *        WORD LEFT
00:00003702 E5D0            	  6193:                 roxl (a0)
00:00003704 6100FE28        	  6194:                 bsr ROXx_FLAGS
00:00003708 E5D0            	  6195:                 roxl (a0)
00:0000370A 6100FE22        	  6196:                 bsr ROXx_FLAGS
00:0000370E E5D0            	  6197:                 roxl (a0)
00:00003710 6100FE1C        	  6198:                 bsr ROXx_FLAGS
00:00003714 E5D0            	  6199:                 roxl (a0)
00:00003716 6100FE16        	  6200:                 bsr ROXx_FLAGS
00:0000371A 3010            	  6201:                 move.w (a0),d0
00:0000371C 0C800001FF10    	  6202:                 cmpi.l #$0001FF10,d0
00:00003722 66FE            	  6203:                 bne.s *
00:00003724 0C8500000009    	  6204:                 cmpi.l #$00000009,d5
00:0000372A 66FE            	  6205:                 bne.s *
                            	  6206: 
                            	  6207: *        WORD RIGHT
00:0000372C E4D0            	  6208:                 roxr (a0)
00:0000372E 6100FDFE        	  6209:                 bsr ROXx_FLAGS
00:00003732 E4D0            	  6210:                 roxr (a0)
00:00003734 6100FDF8        	  6211:                 bsr ROXx_FLAGS
00:00003738 E4D0            	  6212:                 roxr (a0)
00:0000373A 6100FDF2        	  6213:                 bsr ROXx_FLAGS
00:0000373E E4D0            	  6214:                 roxr (a0)
00:00003740 6100FDEC        	  6215:                 bsr ROXx_FLAGS
00:00003744 E4D0            	  6216:                 roxr (a0)
00:00003746 6100FDE6        	  6217:                 bsr ROXx_FLAGS
00:0000374A E4D0            	  6218:                 roxr (a0)
00:0000374C 6100FDE0        	  6219:                 bsr ROXx_FLAGS
00:00003750 3010            	  6220:                 move.w (a0),d0
00:00003752 0C80000103FC    	  6221:                 cmpi.l #$000103FC,d0
00:00003758 66FE            	  6222:                 bne.s *
00:0000375A 0C850000000A    	  6223:                 cmpi.l #$0000000A,d5
00:00003760 66FE            	  6224:                 bne.s *
                            	  6225: 
00:00003762 4E75            	  6226:                 rts
                            	  6227: 
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: *-----------------------------------------------------------
                            	  6232: *-----------------------------------------------------------
                            	  6233: * OPCODE : SHIFTS
                            	  6234: *-----------------------------------------------------------
                            	  6235: *-----------------------------------------------------------
                            	  6236: 
                            	  6237: *     Subroutine to check and accumulate the flags
00:00003764 40C3            	  6238: SHIFTS_FLAGS:   move.w sr,d3
00:00003766 02830000000F    	  6239:                 andi.l #$0F,d3            * Isolate flags
00:0000376C DA83            	  6240:                 add.l d3,d5               * Copy flag results into accumulator
00:0000376E 4E75            	  6241:                 rts
                            	  6242: 
                            	  6243: op_SHIFTS:
                            	  6244: 
                            	  6245: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6246: 
                            	  6247: *        BYTE LEFT
00:00003770 203C80018F81    	  6248:                 move.l #$80018F81,d0
00:00003776 7A00            	  6249:                 moveq  #$00000000,d5
00:00003778 7C02            	  6250:                 moveq  #$00000002,d6
                            	  6251: SHIFTS_LOOP1:
00:0000377A ED20            	  6252:                 asl.b d6,d0
00:0000377C 61E6            	  6253:                 bsr SHIFTS_FLAGS
00:0000377E 51CEFFFA        	  6254:                 dbf d6,SHIFTS_LOOP1
00:00003782 0C8080018F08    	  6255:                 cmpi.l #$80018F08,d0
00:00003788 66FE            	  6256:                 bne.s *
00:0000378A 0C8500000002    	  6257:                 cmpi.l #$00000002,d5
00:00003790 66FE            	  6258:                 bne.s *
                            	  6259: 
                            	  6260: *        BYTE RIGHT
00:00003792 203C80018F81    	  6261:                 move.l #$80018F81,d0
00:00003798 7C02            	  6262:                 moveq  #$00000002,d6
                            	  6263: SHIFTS_LOOP2:
00:0000379A EC20            	  6264:                 asr.b d6,d0
00:0000379C 61C6            	  6265:                 bsr SHIFTS_FLAGS
00:0000379E 51CEFFFA        	  6266:                 dbf d6,SHIFTS_LOOP2
00:000037A2 0C8080018FF0    	  6267:                 cmpi.l #$80018FF0,d0
00:000037A8 66FE            	  6268:                 bne.s *
00:000037AA 0C850000001A    	  6269:                 cmpi.l #$0000001A,d5
00:000037B0 66FE            	  6270:                 bne.s *
                            	  6271: 
                            	  6272: 
                            	  6273: *        WORD LEFT
00:000037B2 203C80018FF1    	  6274:                 move.l #$80018FF1,d0
00:000037B8 7C02            	  6275:                 moveq  #$00000002,d6
                            	  6276: SHIFTS_LOOP3:
00:000037BA ED60            	  6277:                 asl.w d6,d0
00:000037BC 61A6            	  6278:                 bsr SHIFTS_FLAGS
00:000037BE 51CEFFFA        	  6279:                 dbf d6,SHIFTS_LOOP3
00:000037C2 0C8080017F88    	  6280:                 cmpi.l #$80017F88,d0
00:000037C8 66FE            	  6281:                 bne.s *
00:000037CA 0C850000001C    	  6282:                 cmpi.l #$0000001C,d5
00:000037D0 66FE            	  6283:                 bne.s *
                            	  6284: 
                            	  6285: *        WORD RIGHT
00:000037D2 203C80018FF1    	  6286:                 move.l #$80018FF1,d0
00:000037D8 7C02            	  6287:                 moveq  #$00000002,d6
                            	  6288: SHIFTS_LOOP4:
00:000037DA EC60            	  6289:                 asr.w d6,d0
00:000037DC 6186            	  6290:                 bsr SHIFTS_FLAGS
00:000037DE 51CEFFFA        	  6291:                 dbf d6,SHIFTS_LOOP4
00:000037E2 0C808001F1FE    	  6292:                 cmpi.l #$8001F1FE,d0
00:000037E8 66FE            	  6293:                 bne.s *
00:000037EA 0C8500000034    	  6294:                 cmpi.l #$00000034,d5
00:000037F0 66FE            	  6295:                 bne.s *
                            	  6296: 
                            	  6297: 
                            	  6298: *        LONG LEFT
00:000037F2 203C80018FF1    	  6299:                 move.l #$80018FF1,d0
00:000037F8 7C02            	  6300:                 moveq  #$00000002,d6
                            	  6301: SHIFTS_LOOP5:
00:000037FA EDA0            	  6302:                 asl.l d6,d0
00:000037FC 6100FF66        	  6303:                 bsr SHIFTS_FLAGS
00:00003800 51CEFFF8        	  6304:                 dbf d6,SHIFTS_LOOP5
00:00003804 0C80000C7F88    	  6305:                 cmpi.l #$000C7F88,d0
00:0000380A 66FE            	  6306:                 bne.s *
00:0000380C 0C8500000036    	  6307:                 cmpi.l #$00000036,d5
00:00003812 66FE            	  6308:                 bne.s *
                            	  6309: 
                            	  6310: *        LONG RIGHT
00:00003814 203C80018FF1    	  6311:                 move.l #$80018FF1,d0
00:0000381A 7C02            	  6312:                 moveq  #$00000002,d6
                            	  6313: SHIFTS_LOOP6:
00:0000381C ECA0            	  6314:                 asr.l d6,d0
00:0000381E 6100FF44        	  6315:                 bsr SHIFTS_FLAGS
00:00003822 51CEFFF8        	  6316:                 dbf d6,SHIFTS_LOOP6
00:00003826 0C80F00031FE    	  6317:                 cmpi.l #$F00031FE,d0
00:0000382C 66FE            	  6318:                 bne.s *
00:0000382E 0C850000004E    	  6319:                 cmpi.l #$0000004E,d5
00:00003834 66FE            	  6320:                 bne.s *
                            	  6321: 
                            	  6322: 
                            	  6323: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6324: 
00:00003836 203C80018FF1    	  6325:                 move.l #$80018FF1,d0
00:0000383C 7A00            	  6326:                 moveq  #$00000000,d5
                            	  6327: 
                            	  6328: *        BYTE LEFT
00:0000383E D000            	  6329:                 asl.b #1,d0
00:00003840 6100FF22        	  6330:                 bsr SHIFTS_FLAGS
00:00003844 E500            	  6331:                 asl.b #2,d0
00:00003846 6100FF1C        	  6332:                 bsr SHIFTS_FLAGS
00:0000384A D000            	  6333:                 asl.b #1,d0
00:0000384C 6100FF16        	  6334:                 bsr SHIFTS_FLAGS
00:00003850 E700            	  6335:                 asl.b #3,d0
00:00003852 6100FF10        	  6336:                 bsr SHIFTS_FLAGS
00:00003856 0C8080018F80    	  6337:                 cmpi.l #$80018F80,d0
00:0000385C 66FE            	  6338:                 bne.s *
00:0000385E 0C850000001F    	  6339:                 cmpi.l #$0000001F,d5
00:00003864 66FE            	  6340:                 bne.s *
                            	  6341: 
                            	  6342: *        BYTE RIGHT
00:00003866 E200            	  6343:                 asr.b #1,d0
00:00003868 6100FEFA        	  6344:                 bsr SHIFTS_FLAGS
00:0000386C E400            	  6345:                 asr.b #2,d0
00:0000386E 6100FEF4        	  6346:                 bsr SHIFTS_FLAGS
00:00003872 E600            	  6347:                 asr.b #3,d0
00:00003874 6100FEEE        	  6348:                 bsr SHIFTS_FLAGS
00:00003878 E200            	  6349:                 asr.b #1,d0
00:0000387A 6100FEE8        	  6350:                 bsr SHIFTS_FLAGS
00:0000387E 0C8080018FFF    	  6351:                 cmpi.l #$80018FFF,d0
00:00003884 66FE            	  6352:                 bne.s *
00:00003886 0C850000003F    	  6353:                 cmpi.l #$0000003F,d5
00:0000388C 66FE            	  6354:                 bne.s *
                            	  6355: 
                            	  6356: *        WORD LEFT
00:0000388E D040            	  6357:                 asl.w #1,d0
00:00003890 6100FED2        	  6358:                 bsr SHIFTS_FLAGS
00:00003894 E540            	  6359:                 asl.w #2,d0
00:00003896 6100FECC        	  6360:                 bsr SHIFTS_FLAGS
00:0000389A E740            	  6361:                 asl.w #3,d0
00:0000389C 6100FEC6        	  6362:                 bsr SHIFTS_FLAGS
00:000038A0 EB40            	  6363:                 asl.w #5,d0
00:000038A2 6100FEC0        	  6364:                 bsr SHIFTS_FLAGS
00:000038A6 0C808001F800    	  6365:                 cmpi.l #$8001F800,d0
00:000038AC 66FE            	  6366:                 bne.s *
00:000038AE 0C8500000056    	  6367:                 cmpi.l #$00000056,d5
00:000038B4 66FE            	  6368:                 bne.s *
                            	  6369: 
                            	  6370: *        WORD RIGHT
00:000038B6 EA40            	  6371:                 asr.w #5,d0
00:000038B8 6100FEAA        	  6372:                 bsr SHIFTS_FLAGS
00:000038BC E240            	  6373:                 asr.w #1,d0
00:000038BE 6100FEA4        	  6374:                 bsr SHIFTS_FLAGS
00:000038C2 E440            	  6375:                 asr.w #2,d0
00:000038C4 6100FE9E        	  6376:                 bsr SHIFTS_FLAGS
00:000038C8 E840            	  6377:                 asr.w #4,d0
00:000038CA 6100FE98        	  6378:                 bsr SHIFTS_FLAGS
00:000038CE 0C808001FFFF    	  6379:                 cmpi.l #$8001FFFF,d0
00:000038D4 66FE            	  6380:                 bne.s *
00:000038D6 0C8500000077    	  6381:                 cmpi.l #$00000077,d5
00:000038DC 66FE            	  6382:                 bne.s *
                            	  6383: 
                            	  6384: *        LONG LEFT
00:000038DE 203C80018FF1    	  6385:                 move.l #$80018FF1,d0
00:000038E4 D080            	  6386:                 asl.l #1,d0
00:000038E6 6100FE7C        	  6387:                 bsr SHIFTS_FLAGS
00:000038EA E580            	  6388:                 asl.l #2,d0
00:000038EC 6100FE76        	  6389:                 bsr SHIFTS_FLAGS
00:000038F0 EF80            	  6390:                 asl.l #7,d0
00:000038F2 6100FE70        	  6391:                 bsr SHIFTS_FLAGS
00:000038F6 E980            	  6392:                 asl.l #4,d0
00:000038F8 6100FE6A        	  6393:                 bsr SHIFTS_FLAGS
00:000038FC 0C8063FC4000    	  6394:                 cmpi.l #$63FC4000,d0
00:00003902 66FE            	  6395:                 bne.s *
00:00003904 0C850000007A    	  6396:                 cmpi.l #$0000007A,d5
00:0000390A 66FE            	  6397:                 bne.s *
                            	  6398: 
                            	  6399: *        LONG RIGHT
00:0000390C 203C80018FF1    	  6400:                 move.l #$80018FF1,d0
00:00003912 E280            	  6401:                 asr.l #1,d0
00:00003914 6100FE4E        	  6402:                 bsr SHIFTS_FLAGS
00:00003918 EA80            	  6403:                 asr.l #5,d0
00:0000391A 6100FE48        	  6404:                 bsr SHIFTS_FLAGS
00:0000391E EE80            	  6405:                 asr.l #7,d0
00:00003920 6100FE42        	  6406:                 bsr SHIFTS_FLAGS
00:00003924 E080            	  6407:                 asr.l #8,d0
00:00003926 6100FE3C        	  6408:                 bsr SHIFTS_FLAGS
00:0000392A 0C80FFFFFC00    	  6409:                 cmpi.l #$FFFFFC00,d0
00:00003930 66FE            	  6410:                 bne.s *
00:00003932 0C850000009C    	  6411:                 cmpi.l #$0000009C,d5
00:00003938 66FE            	  6412:                 bne.s *
                            	  6413: 
                            	  6414: 
                            	  6415: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6416: 
00:0000393A 7A00            	  6417:                 moveq  #$00000000,d5
00:0000393C 307C0100        	  6418:                 move.l #$00000100,a0
00:00003940 30BC8FF1        	  6419:                 move.w #$8FF1,(a0)
                            	  6420: 
                            	  6421: *        WORD LEFT
00:00003944 E1D0            	  6422:                 asl  (a0)
00:00003946 6100FE1C        	  6423:                 bsr SHIFTS_FLAGS
00:0000394A E1D0            	  6424:                 asl  (a0)
00:0000394C 6100FE16        	  6425:                 bsr SHIFTS_FLAGS
00:00003950 E1D0            	  6426:                 asl  (a0)
00:00003952 6100FE10        	  6427:                 bsr SHIFTS_FLAGS
00:00003956 E1D0            	  6428:                 asl  (a0)
00:00003958 6100FE0A        	  6429:                 bsr SHIFTS_FLAGS
00:0000395C 3010            	  6430:                 move.w (a0),d0
00:0000395E 0C80FFFFFF10    	  6431:                 cmpi.l #$FFFFFF10,d0
00:00003964 66FE            	  6432:                 bne.s *
00:00003966 0C850000000D    	  6433:                 cmpi.l #$0000000D,d5
00:0000396C 66FE            	  6434:                 bne.s *
                            	  6435: 
                            	  6436: *        WORD RIGHT
00:0000396E E0D0            	  6437:                 asr (a0)
00:00003970 6100FDF2        	  6438:                 bsr SHIFTS_FLAGS
00:00003974 E0D0            	  6439:                 asr (a0)
00:00003976 6100FDEC        	  6440:                 bsr SHIFTS_FLAGS
00:0000397A E0D0            	  6441:                 asr (a0)
00:0000397C 6100FDE6        	  6442:                 bsr SHIFTS_FLAGS
00:00003980 E0D0            	  6443:                 asr (a0)
00:00003982 6100FDE0        	  6444:                 bsr SHIFTS_FLAGS
00:00003986 E0D0            	  6445:                 asr (a0)
00:00003988 6100FDDA        	  6446:                 bsr SHIFTS_FLAGS
00:0000398C E0D0            	  6447:                 asr (a0)
00:0000398E 6100FDD4        	  6448:                 bsr SHIFTS_FLAGS
00:00003992 3010            	  6449:                 move.w (a0),d0
00:00003994 0C80FFFFFFFC    	  6450:                 cmpi.l #$FFFFFFFC,d0
00:0000399A 66FE            	  6451:                 bne.s *
00:0000399C 0C850000003E    	  6452:                 cmpi.l #$0000003E,d5
00:000039A2 66FE            	  6453:                 bne.s *
                            	  6454: 
00:000039A4 4E75            	  6455:                 rts
                            	  6456: 
                            	  6457: 
                            	  6458: 
                            	  6459: *-----------------------------------------------------------
                            	  6460: *-----------------------------------------------------------
                            	  6461: * OPCODE : SHIFTS2
                            	  6462: *-----------------------------------------------------------
                            	  6463: *-----------------------------------------------------------
                            	  6464: 
                            	  6465: *     Subroutine to check and accumulate the flags
00:000039A6 40C3            	  6466: SHIFTS2_FLAGS:  move.w sr,d3
00:000039A8 02830000000F    	  6467:                 andi.l #$0F,d3            * Isolate flags
00:000039AE DA83            	  6468:                 add.l d3,d5               * Copy flag results into accumulator
00:000039B0 4E75            	  6469:                 rts
                            	  6470: 
                            	  6471: op_SHIFTS2:
                            	  6472: 
                            	  6473: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6474: 
                            	  6475: *        BYTE LEFT
00:000039B2 203C80018F81    	  6476:                 move.l #$80018F81,d0
00:000039B8 7A00            	  6477:                 moveq  #$00000000,d5
00:000039BA 7C02            	  6478:                 moveq  #$00000002,d6
                            	  6479: SHIFTS2_LOOP1:
00:000039BC ED28            	  6480:                 lsl.b d6,d0
00:000039BE 61E6            	  6481:                 bsr SHIFTS2_FLAGS
00:000039C0 51CEFFFA        	  6482:                 dbf d6,SHIFTS2_LOOP1
00:000039C4 0C8080018F08    	  6483:                 cmpi.l #$80018F08,d0
00:000039CA 66FE            	  6484:                 bne.s *
00:000039CC 4A85            	  6485:                 cmpi.l #$00000000,d5
00:000039CE 66FE            	  6486:                 bne.s *
                            	  6487: 
                            	  6488: *        BYTE RIGHT
00:000039D0 203C80018F81    	  6489:                 move.l #$80018F81,d0
00:000039D6 7C02            	  6490:                 moveq  #$00000002,d6
                            	  6491: SHIFTS2_LOOP2:
00:000039D8 EC28            	  6492:                 lsr.b d6,d0
00:000039DA 61CA            	  6493:                 bsr SHIFTS2_FLAGS
00:000039DC 51CEFFFA        	  6494:                 dbf d6,SHIFTS2_LOOP2
00:000039E0 0C8080018F10    	  6495:                 cmpi.l #$80018F10,d0
00:000039E6 66FE            	  6496:                 bne.s *
00:000039E8 4A85            	  6497:                 cmpi.l #$00000000,d5
00:000039EA 66FE            	  6498:                 bne.s *
                            	  6499: 
                            	  6500: 
                            	  6501: *        WORD LEFT
00:000039EC 203C80018FF1    	  6502:                 move.l #$80018FF1,d0
00:000039F2 7C02            	  6503:                 moveq  #$00000002,d6
                            	  6504: SHIFTS2_LOOP3:
00:000039F4 ED68            	  6505:                 lsl.w d6,d0
00:000039F6 61AE            	  6506:                 bsr SHIFTS2_FLAGS
00:000039F8 51CEFFFA        	  6507:                 dbf d6,SHIFTS2_LOOP3
00:000039FC 0C8080017F88    	  6508:                 cmpi.l #$80017F88,d0
00:00003A02 66FE            	  6509:                 bne.s *
00:00003A04 4A85            	  6510:                 cmpi.l #$00000000,d5
00:00003A06 66FE            	  6511:                 bne.s *
                            	  6512: 
                            	  6513: *        WORD RIGHT
00:00003A08 203C80018FF1    	  6514:                 move.l #$80018FF1,d0
00:00003A0E 7C02            	  6515:                 moveq  #$00000002,d6
                            	  6516: SHIFTS2_LOOP4:
00:00003A10 EC68            	  6517:                 lsr.w d6,d0
00:00003A12 6192            	  6518:                 bsr SHIFTS2_FLAGS
00:00003A14 51CEFFFA        	  6519:                 dbf d6,SHIFTS2_LOOP4
00:00003A18 0C80800111FE    	  6520:                 cmpi.l #$800111FE,d0
00:00003A1E 66FE            	  6521:                 bne.s *
00:00003A20 4A85            	  6522:                 cmpi.l #$00000000,d5
00:00003A22 66FE            	  6523:                 bne.s *
                            	  6524: 
                            	  6525: 
                            	  6526: *        LONG LEFT
00:00003A24 203C80018FF1    	  6527:                 move.l #$80018FF1,d0
00:00003A2A 7C02            	  6528:                 moveq  #$00000002,d6
                            	  6529: SHIFTS2_LOOP5:
00:00003A2C EDA8            	  6530:                 lsl.l d6,d0
00:00003A2E 6100FF76        	  6531:                 bsr SHIFTS2_FLAGS
00:00003A32 51CEFFF8        	  6532:                 dbf d6,SHIFTS2_LOOP5
00:00003A36 0C80000C7F88    	  6533:                 cmpi.l #$000C7F88,d0
00:00003A3C 66FE            	  6534:                 bne.s *
00:00003A3E 4A85            	  6535:                 cmpi.l #$00000000,d5
00:00003A40 66FE            	  6536:                 bne.s *
                            	  6537: 
                            	  6538: *        LONG RIGHT
00:00003A42 203C80018FF1    	  6539:                 move.l #$80018FF1,d0
00:00003A48 7C02            	  6540:                 moveq  #$00000002,d6
                            	  6541: SHIFTS2_LOOP6:
00:00003A4A ECA8            	  6542:                 lsr.l d6,d0
00:00003A4C 6100FF58        	  6543:                 bsr SHIFTS2_FLAGS
00:00003A50 51CEFFF8        	  6544:                 dbf d6,SHIFTS2_LOOP6
00:00003A54 0C80100031FE    	  6545:                 cmpi.l #$100031FE,d0
00:00003A5A 66FE            	  6546:                 bne.s *
00:00003A5C 4A85            	  6547:                 cmpi.l #$00000000,d5
00:00003A5E 66FE            	  6548:                 bne.s *
                            	  6549: 
                            	  6550: 
                            	  6551: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6552: 
00:00003A60 203C80018FF1    	  6553:                 move.l #$80018FF1,d0
00:00003A66 7A00            	  6554:                 moveq  #$00000000,d5
                            	  6555: 
                            	  6556: *        BYTE LEFT
00:00003A68 E308            	  6557:                 lsl.b #1,d0
00:00003A6A 6100FF3A        	  6558:                 bsr SHIFTS2_FLAGS
00:00003A6E E508            	  6559:                 lsl.b #2,d0
00:00003A70 6100FF34        	  6560:                 bsr SHIFTS2_FLAGS
00:00003A74 E308            	  6561:                 lsl.b #1,d0
00:00003A76 6100FF2E        	  6562:                 bsr SHIFTS2_FLAGS
00:00003A7A E708            	  6563:                 lsl.b #3,d0
00:00003A7C 6100FF28        	  6564:                 bsr SHIFTS2_FLAGS
00:00003A80 0C8080018F80    	  6565:                 cmpi.l #$80018F80,d0
00:00003A86 66FE            	  6566:                 bne.s *
00:00003A88 0C850000001B    	  6567:                 cmpi.l #$0000001B,d5
00:00003A8E 66FE            	  6568:                 bne.s *
                            	  6569: 
                            	  6570: *        BYTE RIGHT
00:00003A90 E208            	  6571:                 lsr.b #1,d0
00:00003A92 6100FF12        	  6572:                 bsr SHIFTS2_FLAGS
00:00003A96 E408            	  6573:                 lsr.b #2,d0
00:00003A98 6100FF0C        	  6574:                 bsr SHIFTS2_FLAGS
00:00003A9C E608            	  6575:                 lsr.b #3,d0
00:00003A9E 6100FF06        	  6576:                 bsr SHIFTS2_FLAGS
00:00003AA2 E208            	  6577:                 lsr.b #1,d0
00:00003AA4 6100FF00        	  6578:                 bsr SHIFTS2_FLAGS
00:00003AA8 0C8080018F01    	  6579:                 cmpi.l #$80018F01,d0
00:00003AAE 66FE            	  6580:                 bne.s *
00:00003AB0 0C850000001B    	  6581:                 cmpi.l #$0000001B,d5
00:00003AB6 66FE            	  6582:                 bne.s *
                            	  6583: 
                            	  6584: *        WORD LEFT
00:00003AB8 E348            	  6585:                 lsl.w #1,d0
00:00003ABA 6100FEEA        	  6586:                 bsr SHIFTS2_FLAGS
00:00003ABE E548            	  6587:                 lsl.w #2,d0
00:00003AC0 6100FEE4        	  6588:                 bsr SHIFTS2_FLAGS
00:00003AC4 E748            	  6589:                 lsl.w #3,d0
00:00003AC6 6100FEDE        	  6590:                 bsr SHIFTS2_FLAGS
00:00003ACA EB48            	  6591:                 lsl.w #5,d0
00:00003ACC 6100FED8        	  6592:                 bsr SHIFTS2_FLAGS
00:00003AD0 0C8080010800    	  6593:                 cmpi.l #$80010800,d0
00:00003AD6 66FE            	  6594:                 bne.s *
00:00003AD8 0C8500000025    	  6595:                 cmpi.l #$00000025,d5
00:00003ADE 66FE            	  6596:                 bne.s *
                            	  6597: 
                            	  6598: *        WORD RIGHT
00:00003AE0 EA48            	  6599:                 lsr.w #5,d0
00:00003AE2 6100FEC2        	  6600:                 bsr SHIFTS2_FLAGS
00:00003AE6 E248            	  6601:                 lsr.w #1,d0
00:00003AE8 6100FEBC        	  6602:                 bsr SHIFTS2_FLAGS
00:00003AEC E448            	  6603:                 lsr.w #2,d0
00:00003AEE 6100FEB6        	  6604:                 bsr SHIFTS2_FLAGS
00:00003AF2 E848            	  6605:                 lsr.w #4,d0
00:00003AF4 6100FEB0        	  6606:                 bsr SHIFTS2_FLAGS
00:00003AF8 0C8080010000    	  6607:                 cmpi.l #$80010000,d0
00:00003AFE 66FE            	  6608:                 bne.s *
00:00003B00 0C850000002A    	  6609:                 cmpi.l #$0000002A,d5
00:00003B06 66FE            	  6610:                 bne.s *
                            	  6611: 
                            	  6612: *        LONG LEFT
00:00003B08 203C80018FF1    	  6613:                 move.l #$80018FF1,d0
00:00003B0E E388            	  6614:                 lsl.l #1,d0
00:00003B10 6100FE94        	  6615:                 bsr SHIFTS2_FLAGS
00:00003B14 E588            	  6616:                 lsl.l #2,d0
00:00003B16 6100FE8E        	  6617:                 bsr SHIFTS2_FLAGS
00:00003B1A EF88            	  6618:                 lsl.l #7,d0
00:00003B1C 6100FE88        	  6619:                 bsr SHIFTS2_FLAGS
00:00003B20 E988            	  6620:                 lsl.l #4,d0
00:00003B22 6100FE82        	  6621:                 bsr SHIFTS2_FLAGS
00:00003B26 0C8063FC4000    	  6622:                 cmpi.l #$63FC4000,d0
00:00003B2C 66FE            	  6623:                 bne.s *
00:00003B2E 0C850000002B    	  6624:                 cmpi.l #$0000002B,d5
00:00003B34 66FE            	  6625:                 bne.s *
                            	  6626: 
                            	  6627: *        LONG RIGHT
00:00003B36 203C80018FF1    	  6628:                 move.l #$80018FF1,d0
00:00003B3C E288            	  6629:                 lsr.l #1,d0
00:00003B3E 6100FE66        	  6630:                 bsr SHIFTS2_FLAGS
00:00003B42 EA88            	  6631:                 lsr.l #5,d0
00:00003B44 6100FE60        	  6632:                 bsr SHIFTS2_FLAGS
00:00003B48 EE88            	  6633:                 lsr.l #7,d0
00:00003B4A 6100FE5A        	  6634:                 bsr SHIFTS2_FLAGS
00:00003B4E E088            	  6635:                 lsr.l #8,d0
00:00003B50 6100FE54        	  6636:                 bsr SHIFTS2_FLAGS
00:00003B54 0C8000000400    	  6637:                 cmpi.l #$00000400,d0
00:00003B5A 66FE            	  6638:                 bne.s *
00:00003B5C 0C850000002D    	  6639:                 cmpi.l #$0000002D,d5
00:00003B62 66FE            	  6640:                 bne.s *
                            	  6641: 
                            	  6642: 
                            	  6643: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6644: 
00:00003B64 7A00            	  6645:                 moveq  #$00000000,d5
00:00003B66 307C0100        	  6646:                 move.l #$00000100,a0
00:00003B6A 30BC8FF1        	  6647:                 move.w #$8FF1,(a0)
                            	  6648: 
                            	  6649: *        WORD LEFT
00:00003B6E E3D0            	  6650:                 lsl  (a0)
00:00003B70 6100FE34        	  6651:                 bsr SHIFTS2_FLAGS
00:00003B74 E3D0            	  6652:                 lsl  (a0)
00:00003B76 6100FE2E        	  6653:                 bsr SHIFTS2_FLAGS
00:00003B7A E3D0            	  6654:                 lsl  (a0)
00:00003B7C 6100FE28        	  6655:                 bsr SHIFTS2_FLAGS
00:00003B80 E3D0            	  6656:                 lsl  (a0)
00:00003B82 6100FE22        	  6657:                 bsr SHIFTS2_FLAGS
00:00003B86 3010            	  6658:                 move.w (a0),d0
00:00003B88 0C800000FF10    	  6659:                 cmpi.l #$0000FF10,d0
00:00003B8E 66FE            	  6660:                 bne.s *
00:00003B90 0C8500000009    	  6661:                 cmpi.l #$00000009,d5
00:00003B96 66FE            	  6662:                 bne.s *
                            	  6663: 
                            	  6664: *        WORD RIGHT
00:00003B98 E2D0            	  6665:                 lsr (a0)
00:00003B9A 6100FE0A        	  6666:                 bsr SHIFTS2_FLAGS
00:00003B9E E2D0            	  6667:                 lsr (a0)
00:00003BA0 6100FE04        	  6668:                 bsr SHIFTS2_FLAGS
00:00003BA4 E2D0            	  6669:                 lsr (a0)
00:00003BA6 6100FDFE        	  6670:                 bsr SHIFTS2_FLAGS
00:00003BAA E2D0            	  6671:                 lsr (a0)
00:00003BAC 6100FDF8        	  6672:                 bsr SHIFTS2_FLAGS
00:00003BB0 E2D0            	  6673:                 lsr (a0)
00:00003BB2 6100FDF2        	  6674:                 bsr SHIFTS2_FLAGS
00:00003BB6 E2D0            	  6675:                 lsr (a0)
00:00003BB8 6100FDEC        	  6676:                 bsr SHIFTS2_FLAGS
00:00003BBC 3010            	  6677:                 move.w (a0),d0
00:00003BBE 0C80000003FC    	  6678:                 cmpi.l #$000003FC,d0
00:00003BC4 66FE            	  6679:                 bne.s *
00:00003BC6 0C850000000A    	  6680:                 cmpi.l #$0000000A,d5
00:00003BCC 66FE            	  6681:                 bne.s *
                            	  6682: 
00:00003BCE 4E75            	  6683:                 rts
                            	  6684: 
                            	  6685: ;-----------------------------------------------------------
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ; OPCODE : BSR / RTS
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ;-----------------------------------------------------------
                            	  6690: 
                            	  6691: ;t3_bsr:
                            	  6692: ;	moveq	#3,d3
                            	  6693: ;	rts
                            	  6694: 
                            	  6695: ;t1_bsr:
                            	  6696: ;	moveq	#1,d1
                            	  6697: ;	rts
                            	  6698: 
                            	  6699: ;op_bsr:
                            	  6700: ;	bsr			t1_bsr
                            	  6701: ;	bsr			t2_bsr
                            	  6702: ;	bsr.w		t3_bsr
                            	  6703: ;	bsr.w		t4_bsr
                            	  6704: ;	cmpi.l	#1,d1
                            	  6705: ;	bne			*
                            	  6706: ;	cmpi.l	#2,d2
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#3,d3
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#4,d4
                            	  6711: ;	bne			*
                            	  6712: ;	rts
                            	  6713: 
                            	  6714: ;t2_bsr:
                            	  6715: ;	moveq	#2,d2
                            	  6716: ;	rts
                            	  6717: 	
                            	  6718: ;t4_bsr:
                            	  6719: ;	moveq	#4,d4
                            	  6720: ;	rts
                            	  6721: *    END
                            	  6722:     
                            	  6723: 


Symbols by name:
ABCD_INNER1                     00:000023FA
ABCD_INNER2                     00:00002468
ABCD_NO_C1                      00:00002416
ABCD_NO_C2                      00:0000241E
ABCD_NO_C3                      00:00002484
ABCD_NO_C4                      00:0000248C
ABCD_OUTER1                     00:000023F8
ABCD_OUTER2                     00:00002466
ADDA_OUTER1                     00:00002F6C
ADDQ_LOOP1                      00:00002786
ADDQ_LOOP2                      00:000027C4
ADDQ_LOOP3                      00:000027FA
ADDX_LOOP3                      00:00003092
ADDX_LOOP4                      00:000030AE
ADDX_LOOP5                      00:000030CA
ADDX_OUTER1                     00:00002FFE
ADD_OUTER1                      00:00002D92
ADD_OUTER2                      00:00002E06
ALL_DONE                        00:000000E2
AND_OUTER1                      00:00002AB0
AND_OUTER2                      00:00002B24
BCC1                            00:000026AC
BCC10                           00:000026FE
BCC11                           00:00002706
BCC12                           00:00002710
BCC13                           00:00002718
BCC14                           00:00002722
BCC2                            00:000026B6
BCC3                            00:000026BE
BCC4                            00:000026C8
BCC5                            00:000026D0
BCC6                            00:000026DA
BCC7                            00:000026E2
BCC8                            00:000026EC
BCC9                            00:000026F4
BSR_CLOSE1                      00:00001232
BSR_CLOSE2                      00:00001268
BSR_FAR1                        00:000000E4
BSR_FAR2                        00:0000269C
CMPA_OUTER1                     00:00002C86
CMPM_LOOP1                      00:00002D14
CMPM_LOOP2                      00:00002D2E
CMPM_LOOP3                      00:00002D48
CMP_OUTER1                      00:00002C10
DBCC_LOOP1                      00:0000272C
DBCC_LOOP2                      00:0000273A
DIVS_OUTER1                     00:00002970
DIVU_OUTER1                     00:0000291E
EOR_OUTER2                      00:00002B9A
EXCEPTION_6                     00:000000EC
EXCEPTION_7                     00:000000F4
LEA1                            00:00001C42
MOVE1                           00:000018B0
MOVE2                           00:00001834
MOVE3                           00:00001930
MOVE4                           00:00001A8A
MULS_OUTER1                     00:00003266
MULU_OUTER1                     00:0000321A
NBCD_LOOP                       00:000025EC
NBCD_LOOP1                      00:00002632
NBCD_NO_C                       00:000025F8
NBCD_NO_C1                      00:00002646
NBCD_NO_Z                       00:000025FC
NBCD_NO_Z1                      00:0000264A
OR_OUTER1                       00:000029C6
OR_OUTER2                       00:00002A3A
ROXx_FLAGS                      00:0000352E
ROXx_LOOP1                      00:00003544
ROXx_LOOP2                      00:00003564
ROXx_LOOP3                      00:00003584
ROXx_LOOP4                      00:000035A4
ROXx_LOOP5                      00:000035C4
ROXx_LOOP6                      00:000035E6
ROx_FLAGS                       00:000032F8
ROx_LOOP1                       00:0000330E
ROx_LOOP2                       00:0000332E
ROx_LOOP3                       00:0000334E
ROx_LOOP4                       00:0000336E
ROx_LOOP5                       00:0000338E
ROx_LOOP6                       00:000033B0
RTR_DONE                        00:0000268E
SBCD_INNER1                     00:000024F8
SBCD_INNER2                     00:00002566
SBCD_NO_C1                      00:00002514
SBCD_NO_C2                      00:0000251C
SBCD_NO_C3                      00:00002582
SBCD_NO_C4                      00:0000258A
SBCD_OUTER1                     00:000024F6
SBCD_OUTER2                     00:00002564
SHIFTS2_FLAGS                   00:000039A6
SHIFTS2_LOOP1                   00:000039BC
SHIFTS2_LOOP2                   00:000039D8
SHIFTS2_LOOP3                   00:000039F4
SHIFTS2_LOOP4                   00:00003A10
SHIFTS2_LOOP5                   00:00003A2C
SHIFTS2_LOOP6                   00:00003A4A
SHIFTS_FLAGS                    00:00003764
SHIFTS_LOOP1                    00:0000377A
SHIFTS_LOOP2                    00:0000379A
SHIFTS_LOOP3                    00:000037BA
SHIFTS_LOOP4                    00:000037DA
SHIFTS_LOOP5                    00:000037FA
SHIFTS_LOOP6                    00:0000381C
SUBA_OUTER1                     00:00002FB8
SUBQ_LOOP1                      00:00002844
SUBQ_LOOP2                      00:0000287E
SUBQ_LOOP3                      00:000028B4
SUBX_LOOP3                      00:000031A2
SUBX_LOOP4                      00:000031BE
SUBX_LOOP5                      00:000031DA
SUBX_OUTER1                     00:0000310E
SUB_OUTER1                      00:00002E7C
SUB_OUTER2                      00:00002EF0
cpu_test                        00:00000000
op_ABCD                         00:000023D8
op_ADD                          00:00002D72
op_ADDA                         00:00002F46
op_ADDQ                         00:00002772
op_ADDX                         00:00002FDE
op_ADD_I                        00:0000145C
op_AND                          00:00002A90
op_ANDI_TO_CCR                  00:0000018C
op_ANDI_TO_SR                   00:000001B2
op_BCC                          00:000026A4
op_BCHG                         00:00000582
op_BCLR                         00:000008EA
op_BOOL_I                       00:00001074
op_BSET                         00:00000C3A
op_BSR                          00:0000123A
op_BTST                         00:000001D8
op_BTST0                        00:00000362
op_BTST1                        00:0000036E
op_BTST10                       00:000003B6
op_BTST11                       00:000003BE
op_BTST12                       00:000003C4
op_BTST2                        00:00000376
op_BTST20                       00:0000051C
op_BTST21                       00:00000526
op_BTST22                       00:0000052C
op_BTST23                       00:00000532
op_BTST24                       00:00000538
op_BTST25                       00:0000053E
op_BTST26                       00:00000544
op_BTST27                       00:0000054A
op_BTST28                       00:00000550
op_BTST29                       00:00000556
op_BTST3                        00:0000037E
op_BTST30                       00:0000055C
op_BTST31                       00:00000562
op_BTST32                       00:00000566
op_BTST4                        00:00000386
op_BTST5                        00:0000038E
op_BTST6                        00:00000396
op_BTST7                        00:0000039E
op_BTST8                        00:000003A6
op_BTST9                        00:000003AE
op_CHK                          00:00001CF2
op_CMP                          00:00002BF0
op_CMPA                         00:00002C66
op_CMPM                         00:00002CCC
op_CMP_I                        00:00001270
op_DBCC                         00:00002724
op_DIVS                         00:00002954
op_DIVU                         00:00002902
op_EOR                          00:00002B7A
op_EORI_TO_CCR                  00:00000140
op_EORI_TO_SR                   00:00000166
op_EXG                          00:00003296
op_EXT                          00:00001B68
op_LEAPEA                       00:00001BAA
op_LINKS                        00:00001CC4
op_MOVE                         00:00001768
op_MOVEM                        00:000020BA
op_MOVEP                        00:00000FE0
op_MOVEQ                        00:000028E6
op_MOVE_USP                     00:00001CE2
op_MOVE_xxx_FLAGS               00:00001974
op_MULS                         00:0000324A
op_MULU                         00:000031FE
op_NBCD                         00:000025D4
op_NEGS                         00:00001D2C
op_OR                           00:000029A6
op_ORI_TO_CCR                   00:000000FC
op_ORI_TO_SR                    00:0000011E
op_ROXx                         00:0000353A
op_ROx                          00:00003304
op_RTR                          00:00002682
op_SBCD                         00:000024D6
op_SCC                          00:0000274A
op_SHIFTS                       00:00003770
op_SHIFTS2                      00:000039B2
op_SUB                          00:00002E5C
op_SUBA                         00:00002F92
op_SUBQ                         00:0000282C
op_SUBX                         00:000030EE
op_SUB_I                        00:000015E2
op_SWAP                         00:00001B94
op_TAS                          00:00001C56
op_TRAPV                        00:00002666
op_TST                          00:00001C7E

Symbols by value:
00000000 cpu_test
000000E2 ALL_DONE
000000E4 BSR_FAR1
000000EC EXCEPTION_6
000000F4 EXCEPTION_7
000000FC op_ORI_TO_CCR
0000011E op_ORI_TO_SR
00000140 op_EORI_TO_CCR
00000166 op_EORI_TO_SR
0000018C op_ANDI_TO_CCR
000001B2 op_ANDI_TO_SR
000001D8 op_BTST
00000362 op_BTST0
0000036E op_BTST1
00000376 op_BTST2
0000037E op_BTST3
00000386 op_BTST4
0000038E op_BTST5
00000396 op_BTST6
0000039E op_BTST7
000003A6 op_BTST8
000003AE op_BTST9
000003B6 op_BTST10
000003BE op_BTST11
000003C4 op_BTST12
0000051C op_BTST20
00000526 op_BTST21
0000052C op_BTST22
00000532 op_BTST23
00000538 op_BTST24
0000053E op_BTST25
00000544 op_BTST26
0000054A op_BTST27
00000550 op_BTST28
00000556 op_BTST29
0000055C op_BTST30
00000562 op_BTST31
00000566 op_BTST32
00000582 op_BCHG
000008EA op_BCLR
00000C3A op_BSET
00000FE0 op_MOVEP
00001074 op_BOOL_I
00001232 BSR_CLOSE1
0000123A op_BSR
00001268 BSR_CLOSE2
00001270 op_CMP_I
0000145C op_ADD_I
000015E2 op_SUB_I
00001768 op_MOVE
00001834 MOVE2
000018B0 MOVE1
00001930 MOVE3
00001974 op_MOVE_xxx_FLAGS
00001A8A MOVE4
00001B68 op_EXT
00001B94 op_SWAP
00001BAA op_LEAPEA
00001C42 LEA1
00001C56 op_TAS
00001C7E op_TST
00001CC4 op_LINKS
00001CE2 op_MOVE_USP
00001CF2 op_CHK
00001D2C op_NEGS
000020BA op_MOVEM
000023D8 op_ABCD
000023F8 ABCD_OUTER1
000023FA ABCD_INNER1
00002416 ABCD_NO_C1
0000241E ABCD_NO_C2
00002466 ABCD_OUTER2
00002468 ABCD_INNER2
00002484 ABCD_NO_C3
0000248C ABCD_NO_C4
000024D6 op_SBCD
000024F6 SBCD_OUTER1
000024F8 SBCD_INNER1
00002514 SBCD_NO_C1
0000251C SBCD_NO_C2
00002564 SBCD_OUTER2
00002566 SBCD_INNER2
00002582 SBCD_NO_C3
0000258A SBCD_NO_C4
000025D4 op_NBCD
000025EC NBCD_LOOP
000025F8 NBCD_NO_C
000025FC NBCD_NO_Z
00002632 NBCD_LOOP1
00002646 NBCD_NO_C1
0000264A NBCD_NO_Z1
00002666 op_TRAPV
00002682 op_RTR
0000268E RTR_DONE
0000269C BSR_FAR2
000026A4 op_BCC
000026AC BCC1
000026B6 BCC2
000026BE BCC3
000026C8 BCC4
000026D0 BCC5
000026DA BCC6
000026E2 BCC7
000026EC BCC8
000026F4 BCC9
000026FE BCC10
00002706 BCC11
00002710 BCC12
00002718 BCC13
00002722 BCC14
00002724 op_DBCC
0000272C DBCC_LOOP1
0000273A DBCC_LOOP2
0000274A op_SCC
00002772 op_ADDQ
00002786 ADDQ_LOOP1
000027C4 ADDQ_LOOP2
000027FA ADDQ_LOOP3
0000282C op_SUBQ
00002844 SUBQ_LOOP1
0000287E SUBQ_LOOP2
000028B4 SUBQ_LOOP3
000028E6 op_MOVEQ
00002902 op_DIVU
0000291E DIVU_OUTER1
00002954 op_DIVS
00002970 DIVS_OUTER1
000029A6 op_OR
000029C6 OR_OUTER1
00002A3A OR_OUTER2
00002A90 op_AND
00002AB0 AND_OUTER1
00002B24 AND_OUTER2
00002B7A op_EOR
00002B9A EOR_OUTER2
00002BF0 op_CMP
00002C10 CMP_OUTER1
00002C66 op_CMPA
00002C86 CMPA_OUTER1
00002CCC op_CMPM
00002D14 CMPM_LOOP1
00002D2E CMPM_LOOP2
00002D48 CMPM_LOOP3
00002D72 op_ADD
00002D92 ADD_OUTER1
00002E06 ADD_OUTER2
00002E5C op_SUB
00002E7C SUB_OUTER1
00002EF0 SUB_OUTER2
00002F46 op_ADDA
00002F6C ADDA_OUTER1
00002F92 op_SUBA
00002FB8 SUBA_OUTER1
00002FDE op_ADDX
00002FFE ADDX_OUTER1
00003092 ADDX_LOOP3
000030AE ADDX_LOOP4
000030CA ADDX_LOOP5
000030EE op_SUBX
0000310E SUBX_OUTER1
000031A2 SUBX_LOOP3
000031BE SUBX_LOOP4
000031DA SUBX_LOOP5
000031FE op_MULU
0000321A MULU_OUTER1
0000324A op_MULS
00003266 MULS_OUTER1
00003296 op_EXG
000032F8 ROx_FLAGS
00003304 op_ROx
0000330E ROx_LOOP1
0000332E ROx_LOOP2
0000334E ROx_LOOP3
0000336E ROx_LOOP4
0000338E ROx_LOOP5
000033B0 ROx_LOOP6
0000352E ROXx_FLAGS
0000353A op_ROXx
00003544 ROXx_LOOP1
00003564 ROXx_LOOP2
00003584 ROXx_LOOP3
000035A4 ROXx_LOOP4
000035C4 ROXx_LOOP5
000035E6 ROXx_LOOP6
00003764 SHIFTS_FLAGS
00003770 op_SHIFTS
0000377A SHIFTS_LOOP1
0000379A SHIFTS_LOOP2
000037BA SHIFTS_LOOP3
000037DA SHIFTS_LOOP4
000037FA SHIFTS_LOOP5
0000381C SHIFTS_LOOP6
000039A6 SHIFTS2_FLAGS
000039B2 op_SHIFTS2
000039BC SHIFTS2_LOOP1
000039D8 SHIFTS2_LOOP2
000039F4 SHIFTS2_LOOP3
00003A10 SHIFTS2_LOOP4
00003A2C SHIFTS2_LOOP5
00003A4A SHIFTS2_LOOP6
