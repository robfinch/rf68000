Sections:
00: "CODE" (0-3BDA)


Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
00:00000000 610000F6        	    84: 	bsr	op_ORI_TO_CCR
00:00000004 61000114        	    85: 	bsr	op_ORI_TO_SR
00:00000008 61000136        	    86: 	bsr	op_EORI_TO_CCR
00:0000000C 61000158        	    87: 	bsr	op_EORI_TO_SR
00:00000010 6100017E        	    88: 	bsr	op_ANDI_TO_CCR
00:00000014 610001A0        	    89: 	bsr	op_ANDI_TO_SR
00:00000018 610001C6        	    90: 	bsr	op_BTST
00:0000001C 6100056C        	    91: 	bsr	op_BCHG
00:00000020 610008D0        	    92: 	bsr	op_BCLR
00:00000024 61000C1C        	    93: 	bsr	op_BSET
00:00000028 61000FBE        	    94: 	bsr op_MOVEP
00:0000002C 6100104E        	    95: 	bsr op_BOOL_I
00:00000030 61001246        	    96: 	bsr op_CMP_I
00:00000034 6100142E        	    97: 	bsr op_ADD_I
00:00000038 610015B0        	    98: 	bsr op_SUB_I
00:0000003C 61001732        	    99: 	bsr op_MOVE
00:00000040 6100193A        	   100: 	bsr op_MOVE_xxx_FLAGS
00:00000044 61001B2A        	   101: 	bsr op_EXT
00:00000048 61001B52        	   102: 	bsr op_SWAP
00:0000004C 61001B64        	   103: 	bsr op_LEAPEA
00:00000050 61001C0C        	   104: 	bsr op_TAS
00:00000054 61001C30        	   105: 	bsr op_TST
00:00000058 61001C72        	   106: 	bsr op_LINKS
00:0000005C 61001C8C        	   107: 	bsr op_MOVE_USP
                            	   108: *	bsr op_CHK
00:00000060 61001CD2        	   109: 	bsr op_NEGS
00:00000064 6100205C        	   110: 	bsr op_MOVEM
                            	   111: ** fails
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
                            	   115: *	bsr op_TRAPV
00:00000068 61002620        	   116: 	bsr op_RTR
00:0000006C 610011D4        	   117: 	bsr op_BSR
00:00000070 6100263C        	   118: 	bsr op_BCC
00:00000074 610026B8        	   119: 	bsr op_DBCC
00:00000078 610026DA        	   120: 	bsr op_SCC
00:0000007C 610026FE        	   121: 	bsr op_ADDQ
00:00000080 610027B4        	   122: 	bsr op_SUBQ
00:00000084 6100286A        	   123: 	bsr op_MOVEQ
                            	   124: *** fails
                            	   125: *	bsr op_DIVU
                            	   126: *	bsr op_DIVS
00:00000088 61002926        	   127: 	bsr op_OR
00:0000008C 61002A0C        	   128: 	bsr op_AND
00:00000090 61002AF2        	   129: 	bsr op_EOR
00:00000094 61002B64        	   130: 	bsr op_CMP
00:00000098 61002BD6        	   131: 	bsr op_CMPA
00:0000009C 61002C38        	   132: 	bsr op_CMPM
00:000000A0 61002CDA        	   133: 	bsr op_ADD
00:000000A4 61002DC0        	   134: 	bsr op_SUB
00:000000A8 61002EA6        	   135: 	bsr op_ADDA
00:000000AC 61002EEE        	   136: 	bsr op_SUBA
00:000000B0 61002F36        	   137: 	bsr op_ADDX
00:000000B4 61003042        	   138: 	bsr op_SUBX
00:000000B8 6100314E        	   139: 	bsr op_MULU
00:000000BC 61003196        	   140: 	bsr op_MULS
00:000000C0 610031DE        	   141: 	bsr op_EXG
00:000000C4 61003248        	   142: 	bsr op_ROx
00:000000C8 6100347A        	   143: 	bsr op_ROXx
00:000000CC 610036AC        	   144: 	bsr op_SHIFTS
00:000000D0 610038EA        	   145: 	bsr op_SHIFTS2
                            	   146: 
00:000000D4 4E75            	   147: 	rts
                            	   148: 	bra ALL_DONE
                            	   149: 
                            	   150: * Loop here when all tests pass
                            	   151: *
                            	   152: 
00:000000D6 60FE            	   153: ALL_DONE: bra.s ALL_DONE
                            	   154: 
00:000000D8 263C33333333    	   155: BSR_FAR1:       move.l #$33333333,d3
00:000000DE 4E75            	   156:                 rts
                            	   157: 
                            	   158: ;	moveq		#-1,d0
                            	   159: ;	move.l	d0,$FD0FFF00
                            	   160: ;do_nothing:
                            	   161: ;	bra			*		
                            	   162: 
                            	   163: 
                            	   164: * Exception Vector = 6   CHK Instruction
                            	   165: *
                            	   166: 	align	4
                            	   167: EXCEPTION_6:
00:000000E0 2C3CEEEE0006    	   168: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:000000E6 4E73            	   169: 	rte
                            	   170: 
                            	   171: * Exception Vector = 7   TRAPV Instruction
                            	   172: *
                            	   173: 	align	4
                            	   174: EXCEPTION_7:
00:000000F0 203C12345678    	   175: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:000000F6 4E73            	   176: 	rte
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_CCR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: op_ORI_TO_CCR:
                            	   184: 
00:000000F8 003C00FF        	   185:     ori.b #$FF,CCR
00:000000FC 6AFE            	   186:     bpl.s *                   ; branch if Z clear
00:000000FE 66FE            	   187:     bne.s *                   ; branch if N clear
00:00000100 68FE            	   188:     bvc.s *                   ; branch if V clear
00:00000102 64FE            	   189:     bcc.s *                   ; branch if C clear
                            	   190: 
00:00000104 44FC0000        	   191:     move #$00,CCR
00:00000108 003C0000        	   192:     ori.b #$00,CCR
00:0000010C 67FE            	   193:     beq.s *                   ; branch if Z set
00:0000010E 6BFE            	   194:     bmi.s *                   ; branch if N set
00:00000110 69FE            	   195:     bvs.s *                   ; branch if V set
00:00000112 65FE            	   196:     bcs.s *                   ; branch if C set
                            	   197: 
00:00000114 46FC2700        	   198:     move.w #$2700,SR          ; Put flags back to initial value
                            	   199: 
00:00000118 4E75            	   200:     rts
                            	   201: 
                            	   202: ;-----------------------------------------------------------
                            	   203: ;-----------------------------------------------------------
                            	   204: ; OPCODE : ORI_TO_SR
                            	   205: ;-----------------------------------------------------------
                            	   206: ;-----------------------------------------------------------
                            	   207: 
                            	   208: op_ORI_TO_SR:
                            	   209: 
00:0000011A 00BCFF002FFF    	   210:     ori.l #$FF002FFF,SR
00:00000120 6AFE            	   211:     bpl.s *                   * branch if Z clear
00:00000122 66FE            	   212:     bne.s *                   * branch if N clear
00:00000124 68FE            	   213:     bvc.s *                   * branch if V clear
00:00000126 64FE            	   214:     bcc.s *                   * branch if C clear
                            	   215: 
00:00000128 46FC2000        	   216:     move.w #$2000,SR
00:0000012C 00BC00000000    	   217:     ori.l #$0000,SR
00:00000132 67FE            	   218:     beq.s *                   * branch if Z set
00:00000134 6BFE            	   219:     bmi.s *                   * branch if N set
00:00000136 69FE            	   220:     bvs.s *                   * branch if V set
00:00000138 65FE            	   221:     bcs.s *                   * branch if C set
                            	   222: 
00:0000013A 46FC2700        	   223:     move.w #$2700,sr         * Put flags back to initial value
                            	   224: 
00:0000013E 4E75            	   225:     rts
                            	   226: ; 
                            	   227: ;-----------------------------------------------------------
                            	   228: ;-----------------------------------------------------------
                            	   229: ; OPCODE : EORI_TO_CCR
                            	   230: ;-----------------------------------------------------------
                            	   231: ;-----------------------------------------------------------
                            	   232: op_EORI_TO_CCR:
                            	   233: 
00:00000140 44FC0000        	   234:     move #$00,CCR
00:00000144 0A3C00FF        	   235:     eori.b #$FF,CCR
00:00000148 6AFE            	   236:     bpl.s *                   ; branch if Z clear
00:0000014A 66FE            	   237:     bne.s *                   ; branch if N clear
00:0000014C 68FE            	   238:     bvc.s *                   ; branch if V clear
00:0000014E 64FE            	   239:     bcc.s *                   ; branch if C clear
                            	   240: 
00:00000150 44FC0000        	   241:     move #$00,CCR
00:00000154 0A3C0000        	   242:     eori.b #$00,CCR
00:00000158 67FE            	   243:     beq.s *                   ; branch if Z set
00:0000015A 6BFE            	   244:     bmi.s *                   ; branch if N set
00:0000015C 69FE            	   245:     bvs.s *                   ; branch if V set
00:0000015E 65FE            	   246:     bcs.s *                   ; branch if C set
                            	   247: 
00:00000160 46FC2700        	   248:     move.w #$2700,sr           ; Put flags back to initial value
                            	   249: 
00:00000164 4E75            	   250:     rts
                            	   251: 
                            	   252: 
                            	   253: 
                            	   254: *-----------------------------------------------------------
                            	   255: *-----------------------------------------------------------
                            	   256: * OPCODE : EORI_TO_SR
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: op_EORI_TO_SR:
                            	   260: 
00:00000166 46FC2000        	   261:     move.w #$2000,SR
00:0000016A 0ABC00000FFF    	   262:     eori.l #$0FFF,SR
00:00000170 6AFE            	   263:     bpl.s *                   * branch if Z clear
00:00000172 66FE            	   264:     bne.s *                   * branch if N clear
00:00000174 68FE            	   265:     bvc.s *                   * branch if V clear
00:00000176 64FE            	   266:     bcc.s *                   * branch if C clear
                            	   267: 
00:00000178 46FC2000        	   268:     move.w #$2000,SR
00:0000017C 0ABC00000000    	   269:     eori.l #$0000,SR
00:00000182 67FE            	   270:     beq.s *                   * branch if Z set
00:00000184 6BFE            	   271:     bmi.s *                   * branch if N set
00:00000186 69FE            	   272:     bvs.s *                   * branch if V set
00:00000188 65FE            	   273:     bcs.s *                   * branch if C set
                            	   274: 
00:0000018A 46FC2700        	   275:     move.w #$2700,sr          * Put flags back to initial value
                            	   276: 
00:0000018E 4E75            	   277:     rts
                            	   278: 
                            	   279: 
                            	   280: 
                            	   281: *-----------------------------------------------------------
                            	   282: *-----------------------------------------------------------
                            	   283: * OPCODE : ANDI_TO_CCR
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: op_ANDI_TO_CCR:
                            	   287: 
00:00000190 44FC00FF        	   288:     move #$FF,CCR
00:00000194 023C00FF        	   289:     andi.b #$FF,CCR
00:00000198 6AFE            	   290:     bpl.s *                   * branch if Z clear
00:0000019A 66FE            	   291:     bne.s *                   * branch if N clear
00:0000019C 68FE            	   292:     bvc.s *                   * branch if V clear
00:0000019E 64FE            	   293:     bcc.s *                   * branch if C clear
                            	   294: 
00:000001A0 44FC00FF        	   295:     move #$FF,CCR
00:000001A4 023C0000        	   296:     andi.b #$00,CCR
00:000001A8 67FE            	   297:     beq.s *                   * branch if Z set
00:000001AA 6BFE            	   298:     bmi.s *                   * branch if N set
00:000001AC 69FE            	   299:     bvs.s *                   * branch if V set
00:000001AE 65FE            	   300:     bcs.s *                   * branch if C set
                            	   301: 
00:000001B0 46FC2700        	   302:     move #$2700,SR           * Put flags back to initial value
                            	   303: 
00:000001B4 4E75            	   304:     rts
                            	   305: 
                            	   306: 
                            	   307: 
                            	   308: *-----------------------------------------------------------
                            	   309: *-----------------------------------------------------------
                            	   310: * OPCODE : ANDI_TO_SR
                            	   311: *-----------------------------------------------------------
                            	   312: *-----------------------------------------------------------
                            	   313: op_ANDI_TO_SR:
00:000001B6 46FC20FF        	   314:     move.w #$20FF,SR
00:000001BA 02BCFFFFFFFF    	   315:     andi.l #$FFFFFFFF,SR
00:000001C0 6AFE            	   316:     bpl.s *                   * branch if Z clear
00:000001C2 66FE            	   317:     bne.s *                   * branch if N clear
00:000001C4 68FE            	   318:     bvc.s *                   * branch if V clear
00:000001C6 64FE            	   319:     bcc.s *                   * branch if C clear
                            	   320: 
00:000001C8 46FC20FF        	   321:     move.w #$20FF,SR
00:000001CC 02BCFFFFFF00    	   322:     andi.l #$FFFFFF00,SR
00:000001D2 67FE            	   323:     beq.s *                   * branch if Z set
00:000001D4 6BFE            	   324:     bmi.s *                   * branch if N set
00:000001D6 69FE            	   325:     bvs.s *                   * branch if V set
00:000001D8 65FE            	   326:     bcs.s *                   * branch if C set
                            	   327: 
00:000001DA 46FC2700        	   328:     move.w #$2700,sr           * Put flags back to initial value
                            	   329: 
00:000001DE 4E75            	   330:     rts
                            	   331: 
                            	   332: 
                            	   333: *-----------------------------------------------------------
                            	   334: *-----------------------------------------------------------
                            	   335: * OPCODE : BTST
                            	   336: *-----------------------------------------------------------
                            	   337: *-----------------------------------------------------------
                            	   338: op_BTST:
                            	   339: 
                            	   340: *  Bit Number.s Static
                            	   341: 
                            	   342: *             EA = Dn  - LONG only
00:000001E0 203C80000001    	   343:             move.l #$80000001,d0      * populate test data
00:000001E6 08000000        	   344:             btst.l #0,d0
00:000001EA 67FE            	   345:             beq.s *               * branch if Z set
00:000001EC 08000001        	   346:             btst.l #1,d0              *
00:000001F0 66FE            	   347:             bne.s *               * branch if Z clear
00:000001F2 0800001F        	   348:             btst.l #31,d0             *
00:000001F6 67FE            	   349:             beq.s *               * branch if Z set
                            	   350: 
                            	   351: 
                            	   352: *             EA = (An)  - BYTE only
00:000001F8 307C0100        	   353:             move.l #$00000100,a0      * point to memory to address 0x100
00:000001FC 10BC0081        	   354:             move.b #$81,(a0)          * populate test data
00:00000200 1210            	   355:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00000202 08100000        	   356:             btst.b #0,(a0)
00:00000206 67FE            	   357:             beq.s *               * branch if Z set
00:00000208 08100001        	   358:             btst.b #1,(a0)            *
00:0000020C 66FE            	   359:             bne.s *               * branch if Z clear
00:0000020E 08100007        	   360:             btst.b #7,(a0)            *
00:00000212 67FE            	   361:             beq.s *               * branch if Z set
                            	   362: 
                            	   363: 
                            	   364: *             EA = (An)+  - BYTE only
00:00000214 307C0100        	   365:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000218 10FC0001        	   366:             move.b #$01,(a0)+         * populate test data
00:0000021C 10FC00FC        	   367:             move.b #$FC,(a0)+         * populate test data
00:00000220 10FC0080        	   368:             move.b #$80,(a0)+         * populate test data
00:00000224 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000228 08180000        	   370:             btst.b #0,(a0)+
00:0000022C 67FE            	   371:             beq.s *               * branch if Z set
00:0000022E 08180001        	   372:             btst.b #1,(a0)+           *
00:00000232 66FE            	   373:             bne.s *               * branch if Z clear
00:00000234 08180007        	   374:             btst.b #7,(a0)+           *
00:00000238 67FE            	   375:             beq.s *               * branch if Z set
                            	   376: 
                            	   377: 
                            	   378: *             EA = -(An)  - BYTE only
00:0000023A 307C0100        	   379:             move.l #$00000100,a0      * point to memory to address
00:0000023E 10FC0080        	   380:             move.b #$80,(a0)+         * populate test data
00:00000242 10FC00FC        	   381:             move.b #$FC,(a0)+         * populate test data
00:00000246 10FC0001        	   382:             move.b #$01,(a0)+         * populate test data
00:0000024A 307C0103        	   383:             move.l #$00000103,a0      * point to memory to address
00:0000024E 08200000        	   384:             btst.b #0,-(a0)
00:00000252 67FE            	   385:             beq.s *               * branch if Z set
00:00000254 08200001        	   386:             btst.b #1,-(a0)           *
00:00000258 66FE            	   387:             bne.s *               * branch if Z clear
00:0000025A 08200007        	   388:             btst.b #7,-(a0)           *
00:0000025E 67FE            	   389:             beq.s *               * branch if Z set
                            	   390: 
                            	   391: 
                            	   392: *             EA = n(An)  - BYTE only
00:00000260 307C0100        	   393:             move.l #$00000100,a0      * point to memory to address
00:00000264 10FC0001        	   394:             move.b #$01,(a0)+         * populate test data
00:00000268 10FC00FC        	   395:             move.b #$FC,(a0)+         * populate test data
00:0000026C 10FC0080        	   396:             move.b #$80,(a0)+         * populate test data
00:00000270 307C0100        	   397:             move.l #$00000100,a0      * point to memory to address
00:00000274 08100000        	   398:             btst.b #0,0(a0)
00:00000278 67FE            	   399:             beq.s *               * branch if Z set
00:0000027A 082800010001    	   400:             btst.b #1,1(a0)           *
00:00000280 66FE            	   401:             bne.s *               * branch if Z clear
00:00000282 082800070002    	   402:             btst.b #7,2(a0)           *
00:00000288 67FE            	   403:             beq.s *               * branch if Z set
                            	   404: 
                            	   405: 
                            	   406: *             EA = n(An,R.W)  - BYTE only
00:0000028A 307C0100        	   407:             move.l #$00000100,a0      * point to memory to address
00:0000028E 93C9            	   408:             move.l #$00000000,a1      * point to memory to address
00:00000290 347C0001        	   409:             move.l #$00000001,a2      * point to memory to address
00:00000294 7000            	   410:             moveq  #$00000000,d0      * point to memory to address
00:00000296 7201            	   411:             moveq  #$00000001,d1      * point to memory to address
00:00000298 083000000000    	   412:             btst.b #0,0(a0,d0.w)
00:0000029E 67FE            	   413:             beq.s *               * branch if Z set
00:000002A0 083000011000    	   414:             btst.b #1,0(a0,d1.w)      *
00:000002A6 66FE            	   415:             bne.s *               * branch if Z clear
00:000002A8 083000071001    	   416:             btst.b #7,1(a0,d1.w)      *
00:000002AE 67FE            	   417:             beq.s *               * branch if Z set
                            	   418: *             EA = n(An,R.L)  - BYTE only
00:000002B0 083000000800    	   419:             btst.b #0,0(a0,d0.l)
00:000002B6 67FE            	   420:             beq.s *               * branch if Z set
00:000002B8 083000011800    	   421:             btst.b #1,0(a0,d1.l)      *
00:000002BE 66FE            	   422:             bne.s *               * branch if Z clear
00:000002C0 083000071801    	   423:             btst.b #7,1(a0,d1.l)      *
00:000002C6 67FE            	   424:             beq.s *               * branch if Z set
                            	   425: *             EA = n(An,A.W)  - BYTE only
00:000002C8 083000009000    	   426:             btst.b #0,0(a0,a1.w)
00:000002CE 67FE            	   427:             beq.s *               * branch if Z set
00:000002D0 08300001A000    	   428:             btst.b #1,0(a0,a2.w)      *
00:000002D6 66FE            	   429:             bne.s *               * branch if Z clear
00:000002D8 08300007A001    	   430:             btst.b #7,1(a0,a2.w)      *
00:000002DE 67FE            	   431:             beq.s *               * branch if Z set
                            	   432: *             EA = n(An,A.L)  - BYTE only
00:000002E0 083000009800    	   433:             btst.b #0,0(a0,a1.l)
00:000002E6 67FE            	   434:             beq.s *               * branch if Z set
00:000002E8 08300001A800    	   435:             btst.b #1,0(a0,a2.l)      *
00:000002EE 66FE            	   436:             bne.s *               * branch if Z clear
00:000002F0 08300007A801    	   437:             btst.b #7,1(a0,a2.l)      *
00:000002F6 67FE            	   438:             beq.s *               * branch if Z set
                            	   439: 
                            	   440: 
                            	   441: *             EA = x.W  - BYTE only
00:000002F8 083800000100    	   442:             btst.b #0,$0100
00:000002FE 67FE            	   443:             beq.s *               * branch if Z set
00:00000300 083800010101    	   444:             btst.b #1,$0101           *
00:00000306 66FE            	   445:             bne.s *               * branch if Z clear
00:00000308 083800070102    	   446:             btst.b #7,$0102           *
00:0000030E 67FE            	   447:             beq.s *               * branch if Z set
                            	   448: 
                            	   449: 
                            	   450: *             EA = x.L  - BYTE only
00:00000310 207C0000F100    	   451:             move.l #$F100,a0      * point to memory to address 0x100
00:00000316 10FC0001        	   452:             move.b #$01,(a0)+         * populate test data
00:0000031A 10FC00FC        	   453:             move.b #$FC,(a0)+         * populate test data
00:0000031E 10FC0080        	   454:             move.b #$80,(a0)+         * populate test data
00:00000322 083900000000F100	   455:             btst.b #0,$F100
00:0000032A 67FE            	   456:             beq.s *               * branch if Z set
00:0000032C 083900010000F101	   457:             btst.b #1,$F101       *
00:00000334 66FE            	   458:             bne.s *               * branch if Z clear
00:00000336 083900070000F102	   459:             btst.b #7,$F102       *
00:0000033E 67FE            	   460:             beq.s *               * branch if Z set
                            	   461: 
                            	   462: 
                            	   463: *             EA = x(PC)  - BYTE only
00:00000340 4BFAFE9E        	   464:             lea op_BTST(pc),a5
00:00000344 083A0000FE98    	   465:             btst.b #0,op_BTST(pc)
00:0000034A 66FE            	   466:             bne.s *               * branch if Z clear
00:0000034C 083A0003001A    	   467:             btst.b #3,op_BTST0(pc)     *
00:00000352 67FE            	   468:             beq.s *               * branch if Z set
00:00000354 083A00060074    	   469:             btst.b #6,op_BTST12(pc)    *
00:0000035A 67FE            	   470:             beq.s *               * branch if Z set
                            	   471: 
                            	   472: 
                            	   473: *             EA = n(PC,R.W)  - BYTE only
00:0000035C 307C0100        	   474:             move.l #$00000100,a0      * point to memory to address
00:00000360 93C9            	   475:             move.l #$00000000,a1      * point to memory to address
00:00000362 347C0001        	   476:             move.l #$00000001,a2      * point to memory to address
00:00000366 7000            	   477:             moveq  #$00000000,d0      * point to memory to address
00:00000368 7201            	   478:             moveq  #$00000001,d1      * point to memory to address
                            	   479: 
00:0000036A 083B000000FC    	   480: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:00000370 66FE            	   481:             bne.s *               * branch if Z clear
                            	   482: 
00:00000372 4BFB1002        	   483:             lea op_BTST1(pc,d1.w),a5
00:00000376 083B000110FC    	   484: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:0000037C 67FE            	   485:             beq.s *               * branch if Z set
00:0000037E 083B000710FC    	   486: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:00000384 66FE            	   487:             bne.s *               * branch if Z clear
                            	   488: *             EA = n(PC,R.L)  - BYTE only
00:00000386 083B000008FC    	   489: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:0000038C 66FE            	   490:             bne.s *               * branch if Z clear
00:0000038E 083B000118FC    	   491: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:00000394 67FE            	   492:             beq.s *               * branch if Z set
00:00000396 083B000718FC    	   493: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:0000039C 66FE            	   494:             bne.s *               * branch if Z clear
                            	   495: *             EA = n(PC,A.W)  - BYTE only
00:0000039E 083B000090FC    	   496: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:000003A4 66FE            	   497:             bne.s *               * branch if Z clear
00:000003A6 083B0001A0FC    	   498: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:000003AC 67FE            	   499:             beq.s *               * branch if Z set
00:000003AE 083B0007A0FC    	   500: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:000003B4 66FE            	   501:             bne.s *               * branch if Z clear
                            	   502: *             EA = n(PC,A.L)  - BYTE only
00:000003B6 083B000098FC    	   503: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:000003BC 66FE            	   504:             bne.s *               * branch if Z clear
00:000003BE 083B0001A8FC    	   505: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:000003C4 67FE            	   506:             beq.s *               * branch if Z set
00:000003C6 083B0007A8FC    	   507: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:000003CC 66FE            	   508: op_BTST12:  bne.s *               * branch if Z clear
                            	   509: 
                            	   510: 
                            	   511: 
                            	   512: * Bit Number.s Dynamic
                            	   513: 
                            	   514: *             EA = Dn  - LONG only
00:000003CE 203C80000001    	   515:             move.l #$80000001,d0      * populate test data
00:000003D4 7A00            	   516:             move.l #0,d5              * populate bit.s number to test
00:000003D6 7C01            	   517:             move.l #1,d6              * populate bit.s number to test
00:000003D8 7E1F            	   518:             move.l #31,d7              * populate bit.s number to test
                            	   519: 
00:000003DA 0B00            	   520:             btst.l d5,d0
00:000003DC 67FE            	   521:             beq.s *               * branch if Z set
00:000003DE 0D00            	   522:             btst.l d6,d0              *
00:000003E0 66FE            	   523:             bne.s *               * branch if Z clear
00:000003E2 0F00            	   524:             btst.l d7,d0             *
00:000003E4 67FE            	   525:             beq.s *               * branch if Z set
                            	   526: 
                            	   527: 
                            	   528: *             EA = (An)  - BYTE only
00:000003E6 7A00            	   529:             move.l #0,d5              * populate bit.s number to test
00:000003E8 7C01            	   530:             move.l #1,d6              * populate bit.s number to test
00:000003EA 7E07            	   531:             move.l #7,d7              * populate bit.s number to test
00:000003EC 307C0100        	   532:             move.l #$00000100,a0      * point to memory to address 0x100
00:000003F0 10BC0081        	   533:             move.b #$81,(a0)          * populate test data
00:000003F4 1210            	   534:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000003F6 0B10            	   535:             btst.b d5,(a0)
00:000003F8 67FE            	   536:             beq.s *               * branch if Z set
00:000003FA 0D10            	   537:             btst.b d6,(a0)            *
00:000003FC 66FE            	   538:             bne.s *               * branch if Z clear
00:000003FE 0F10            	   539:             btst.b d7,(a0)            *
00:00000400 67FE            	   540:             beq.s *               * branch if Z set
                            	   541: 
                            	   542: * ---
                            	   543: 
                            	   544: 
                            	   545: *             EA = (An)+  - BYTE only
00:00000402 307C0100        	   546:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000406 10FC0001        	   547:             move.b #$01,(a0)+         * populate test data
00:0000040A 10FC00FC        	   548:             move.b #$FC,(a0)+         * populate test data
00:0000040E 10FC0080        	   549:             move.b #$80,(a0)+         * populate test data
00:00000412 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000416 0B18            	   551:             btst.b d5,(a0)+
00:00000418 67FE            	   552:             beq.s *               * branch if Z set
00:0000041A 0D18            	   553:             btst.b d6,(a0)+           *
00:0000041C 66FE            	   554:             bne.s *               * branch if Z clear
00:0000041E 0F18            	   555:             btst.b d7,(a0)+           *
00:00000420 67FE            	   556:             beq.s *               * branch if Z set
                            	   557: 
                            	   558: 
                            	   559: *             EA = -(An)  - BYTE only
00:00000422 307C0100        	   560:             move.l #$00000100,a0      * point to memory to address
00:00000426 10FC0080        	   561:             move.b #$80,(a0)+         * populate test data
00:0000042A 10FC00FC        	   562:             move.b #$FC,(a0)+         * populate test data
00:0000042E 10FC0001        	   563:             move.b #$01,(a0)+         * populate test data
00:00000432 307C0103        	   564:             move.l #$00000103,a0      * point to memory to address
00:00000436 0B20            	   565:             btst.b d5,-(a0)
00:00000438 67FE            	   566:             beq.s *               * branch if Z set
00:0000043A 0D20            	   567:             btst.b d6,-(a0)           *
00:0000043C 66FE            	   568:             bne.s *               * branch if Z clear
00:0000043E 0F20            	   569:             btst.b d7,-(a0)           *
00:00000440 67FE            	   570:             beq.s *               * branch if Z set
                            	   571: 
                            	   572: 
                            	   573: *             EA = n(An)  - BYTE only
00:00000442 307C0100        	   574:             move.l #$00000100,a0      * point to memory to address
00:00000446 10FC0001        	   575:             move.b #$01,(a0)+         * populate test data
00:0000044A 10FC00FC        	   576:             move.b #$FC,(a0)+         * populate test data
00:0000044E 10FC0080        	   577:             move.b #$80,(a0)+         * populate test data
00:00000452 307C0100        	   578:             move.l #$00000100,a0      * point to memory to address
00:00000456 0B10            	   579:             btst.b d5,0(a0)
00:00000458 67FE            	   580:             beq.s *               * branch if Z set
00:0000045A 0D280001        	   581:             btst.b d6,1(a0)           *
00:0000045E 66FE            	   582:             bne.s *               * branch if Z clear
00:00000460 0F280002        	   583:             btst.b d7,2(a0)           *
00:00000464 67FE            	   584:             beq.s *               * branch if Z set
                            	   585: 
                            	   586: 
                            	   587: *             EA = n(An,R.W)  - BYTE only
00:00000466 307C0100        	   588:             move.l #$00000100,a0      * point to memory to address
00:0000046A 93C9            	   589:             move.l #$00000000,a1      * point to memory to address
00:0000046C 347C0001        	   590:             move.l #$00000001,a2      * point to memory to address
00:00000470 7000            	   591:             moveq  #$00000000,d0      * point to memory to address
00:00000472 7201            	   592:             moveq  #$00000001,d1      * point to memory to address
00:00000474 0B300000        	   593:             btst.b d5,0(a0,d0.w)
00:00000478 67FE            	   594:             beq.s *               * branch if Z set
00:0000047A 0D301000        	   595:             btst.b d6,0(a0,d1.w)      *
00:0000047E 66FE            	   596:             bne.s *               * branch if Z clear
00:00000480 0F301001        	   597:             btst.b d7,1(a0,d1.w)      *
00:00000484 67FE            	   598:             beq.s *               * branch if Z set
                            	   599: *             EA = n(An,R.L)  - BYTE only
00:00000486 0B300800        	   600:             btst.b d5,0(a0,d0.l)
00:0000048A 67FE            	   601:             beq.s *               * branch if Z set
00:0000048C 0D301800        	   602:             btst.b d6,0(a0,d1.l)      *
00:00000490 66FE            	   603:             bne.s *               * branch if Z clear
00:00000492 0F301801        	   604:             btst.b d7,1(a0,d1.l)      *
00:00000496 67FE            	   605:             beq.s *               * branch if Z set
                            	   606: *             EA = n(An,A.W)  - BYTE only
00:00000498 0B309000        	   607:             btst.b d5,0(a0,a1.w)
00:0000049C 67FE            	   608:             beq.s *               * branch if Z set
00:0000049E 0D30A000        	   609:             btst.b d6,0(a0,a2.w)      *
00:000004A2 66FE            	   610:             bne.s *               * branch if Z clear
00:000004A4 0F30A001        	   611:             btst.b d7,1(a0,a2.w)      *
00:000004A8 67FE            	   612:             beq.s *               * branch if Z set
                            	   613: *             EA = n(An,A.L)  - BYTE only
00:000004AA 0B309800        	   614:             btst.b d5,0(a0,a1.l)
00:000004AE 67FE            	   615:             beq.s *               * branch if Z set
00:000004B0 0D30A800        	   616:             btst.b d6,0(a0,a2.l)      *
00:000004B4 66FE            	   617:             bne.s *               * branch if Z clear
00:000004B6 0F30A801        	   618:             btst.b d7,1(a0,a2.l)      *
00:000004BA 67FE            	   619:             beq.s *               * branch if Z set
                            	   620: 
                            	   621: 
                            	   622: *             EA = x.W  - BYTE only
00:000004BC 0B380100        	   623:             btst.b d5,$0100
00:000004C0 67FE            	   624:             beq.s *               * branch if Z set
00:000004C2 0D380101        	   625:             btst.b d6,$0101           *
00:000004C6 66FE            	   626:             bne.s *               * branch if Z clear
00:000004C8 0F380102        	   627:             btst.b d7,$0102           *
00:000004CC 67FE            	   628:             beq.s *               * branch if Z set
                            	   629: 
                            	   630: 
                            	   631: *             EA = x.L  - BYTE only
00:000004CE 207C0000F100    	   632:             move.l #$F100,a0      * point to memory to address 0x100
00:000004D4 10FC0001        	   633:             move.b #$01,(a0)+         * populate test data
00:000004D8 10FC00FC        	   634:             move.b #$FC,(a0)+         * populate test data
00:000004DC 10FC0080        	   635:             move.b #$80,(a0)+         * populate test data
00:000004E0 0B390000F100    	   636:             btst.b d5,$F100
00:000004E6 67FE            	   637:             beq.s *               * branch if Z set
00:000004E8 0D390000F101    	   638:             btst.b d6,$F101       *
00:000004EE 66FE            	   639:             bne.s *               * branch if Z clear
00:000004F0 0F390000F102    	   640:             btst.b d7,$F102       *
00:000004F6 67FE            	   641:             beq.s *               * branch if Z set
                            	   642: 
                            	   643: 
                            	   644: *             EA = x(PC)  - BYTE only
00:000004F8 7C03            	   645:             move.l #3,d6              * populate bit.s number to test
00:000004FA 7E06            	   646:             move.l #6,d7              * populate bit.s number to test
00:000004FC 4BFAFCE2        	   647:             lea op_BTST(pc),a5
00:00000500 0B3AFCDE        	   648:             btst.b d5,op_BTST(pc)
00:00000504 66FE            	   649:             bne.s *               * branch if Z clear
00:00000506 0D3AFE62        	   650:             btst.b d6,op_BTST0(pc)     *
00:0000050A 67FE            	   651:             beq.s *               * branch if Z set
00:0000050C 0F3AFEBE        	   652:             btst.b d7,op_BTST12(pc)    *
00:00000510 67FE            	   653:             beq.s *               * branch if Z set
                            	   654: 
                            	   655: 
                            	   656: *             EA = n(PC,R.W)  - BYTE only
00:00000512 307C0100        	   657:             move.l #$00000100,a0      * point to memory to address
00:00000516 93C9            	   658:             move.l #$00000000,a1      * point to memory to address
00:00000518 347C0001        	   659:             move.l #$00000001,a2      * point to memory to address
00:0000051C 7000            	   660:             moveq  #$00000000,d0      * point to memory to address
00:0000051E 7201            	   661:             moveq  #$00000001,d1      * point to memory to address
00:00000520 7C01            	   662:             move.l #1,d6              * populate bit.s number to test
00:00000522 7E07            	   663:             move.l #7,d7              * populate bit.s number to test
                            	   664: 
00:00000524 0B3B00FE        	   665: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:00000528 67FE            	   666:             beq.s *               * branch if Z set
00:0000052A 4BFB1002        	   667:             lea op_BTST21(pc,d1.w),a5
00:0000052E 0D3B10FE        	   668: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:00000532 67FE            	   669:             beq.s *               * branch if Z set
00:00000534 0F3B10FE        	   670: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:00000538 66FE            	   671:             bne.s *               * branch if Z clear
                            	   672: *             EA = n(PC,R.L)  - BYTE only
00:0000053A 0B3B08FE        	   673: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:0000053E 67FE            	   674:             beq.s *               * branch if Z set
00:00000540 0D3B18FE        	   675: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:00000544 67FE            	   676:             beq.s *               * branch if Z set
00:00000546 0F3B18FE        	   677: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:0000054A 66FE            	   678:             bne.s *               * branch if Z clear
                            	   679: *             EA = n(PC,A.W)  - BYTE only
00:0000054C 0B3B90FE        	   680: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:00000550 67FE            	   681:             beq.s *               * branch if Z set
00:00000552 0D3BA0FE        	   682: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:00000556 67FE            	   683:             beq.s *               * branch if Z set
00:00000558 0F3BA0FE        	   684: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:0000055C 66FE            	   685:             bne.s *               * branch if Z clear
                            	   686: *             EA = n(PC,A.L)  - BYTE only
00:0000055E 0B3B98FE        	   687: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:00000562 67FE            	   688:             beq.s *               * branch if Z set
00:00000564 0D3BA8FE        	   689: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:00000568 67FE            	   690:             beq.s *               * branch if Z set
00:0000056A 0F3BA8FE        	   691: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:0000056E 66FE            	   692: op_BTST32:  bne.s *               * branch if Z clear
                            	   693: 
                            	   694: *             EA = #x  - BYTE only
                            	   695: 
00:00000570 7A00            	   696:             move.l #0,d5              * populate bit.s number to test
00:00000572 7C03            	   697:             move.l #3,d6              * populate bit.s number to test
00:00000574 7E07            	   698:             move.l #7,d7              * populate bit.s number to test
                            	   699: 
00:00000576 0B3C0088        	   700:             btst.b d5,#$88
00:0000057A 66FE            	   701:             bne.s *               * branch if Z clear
00:0000057C 0D3C0088        	   702:             btst.b d6,#$88
00:00000580 67FE            	   703:             beq.s *               * branch if Z set
00:00000582 0F3C0088        	   704:             btst.b d7,#$88
00:00000586 67FE            	   705:             beq.s *               * branch if Z set
                            	   706: 
                            	   707: 
00:00000588 4E75            	   708:     rts
                            	   709: 
                            	   710: *-----------------------------------------------------------
                            	   711: *-----------------------------------------------------------
                            	   712: * OPCODE : BCHG
                            	   713: *-----------------------------------------------------------
                            	   714: *-----------------------------------------------------------
                            	   715: op_BCHG:
                            	   716: 
                            	   717: 
                            	   718: *  Bit Number.s Static
                            	   719: 
                            	   720: *             EA = Dn  - LONG only
00:0000058A 203C80000001    	   721:             move.l #$80000001,d0      * populate test data
00:00000590 08400000        	   722:             bchg.l #0,d0
00:00000594 67FE            	   723:             beq.s *               * branch if Z set
00:00000596 08400001        	   724:             bchg.l #1,d0              *
00:0000059A 66FE            	   725:             bne.s *               * branch if Z clear
00:0000059C 0840001F        	   726:             bchg.l #31,d0             *
00:000005A0 67FE            	   727:             beq.s *               * branch if Z set
00:000005A2 0C8000000002    	   728:             cmpi.l #$00000002,d0
00:000005A8 66FE            	   729:             bne.s *               * branch if Z clear
                            	   730: 
                            	   731: 
                            	   732: *             EA = (An)  - BYTE only
00:000005AA 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005AE 10BC0081        	   734:             move.b #$81,(a0)          * populate test data
00:000005B2 1210            	   735:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000005B4 08500000        	   736:             bchg.b #0,(a0)
00:000005B8 67FE            	   737:             beq.s *               * branch if Z set
00:000005BA 08500001        	   738:             bchg.b #1,(a0)            *
00:000005BE 66FE            	   739:             bne.s *               * branch if Z clear
00:000005C0 08500007        	   740:             bchg.b #7,(a0)            *
00:000005C4 67FE            	   741:             beq.s *               * branch if Z set
00:000005C6 0C100002        	   742:             cmpi.b #$02,(a0)
00:000005CA 66FE            	   743:             bne.s *               * branch if Z clear
                            	   744: 
                            	   745: *             EA = (An)+  - BYTE only
00:000005CC 307C0100        	   746:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005D0 10FC0001        	   747:             move.b #$01,(a0)+         * populate test data
00:000005D4 10FC00FC        	   748:             move.b #$FC,(a0)+         * populate test data
00:000005D8 10FC0080        	   749:             move.b #$80,(a0)+         * populate test data
00:000005DC 307C0100        	   750:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005E0 08580000        	   751:             bchg.b #0,(a0)+
00:000005E4 67FE            	   752:             beq.s *               * branch if Z set
00:000005E6 08580001        	   753:             bchg.b #1,(a0)+           *
00:000005EA 66FE            	   754:             bne.s *               * branch if Z clear
00:000005EC 08580007        	   755:             bchg.b #7,(a0)+           *
00:000005F0 67FE            	   756:             beq.s *               * branch if Z set
00:000005F2 307C0100        	   757:             move.l #$00000100,a0      * point to memory to address 0x100
00:000005F6 4A18            	   758:             cmpi.b #$00,(a0)+
00:000005F8 66FE            	   759:             bne.s *               * branch if Z clear
00:000005FA 0C1800FE        	   760:             cmpi.b #$FE,(a0)+
00:000005FE 66FE            	   761:             bne.s *               * branch if Z clear
00:00000600 4A18            	   762:             cmpi.b #$00,(a0)+
00:00000602 66FE            	   763:             bne.s *               * branch if Z clear
                            	   764: 
                            	   765: *             EA = -(An)  - BYTE only
00:00000604 307C0100        	   766:             move.l #$00000100,a0      * point to memory to address
00:00000608 10FC0080        	   767:             move.b #$80,(a0)+         * populate test data
00:0000060C 10FC00FC        	   768:             move.b #$FC,(a0)+         * populate test data
00:00000610 10FC0001        	   769:             move.b #$01,(a0)+         * populate test data
00:00000614 307C0103        	   770:             move.l #$00000103,a0      * point to memory to address
00:00000618 08600000        	   771:             bchg.b #0,-(a0)
00:0000061C 67FE            	   772:             beq.s *               * branch if Z set
00:0000061E 08600001        	   773:             bchg.b #1,-(a0)           *
00:00000622 66FE            	   774:             bne.s *               * branch if Z clear
00:00000624 08600007        	   775:             bchg.b #7,-(a0)           *
00:00000628 67FE            	   776:             beq.s *               * branch if Z set
00:0000062A 307C0103        	   777:             move.l #$00000103,a0      * point to memory to address 0x100
00:0000062E 4A20            	   778:             cmpi.b #$00,-(a0)
00:00000630 66FE            	   779:             bne.s *               * branch if Z clear
00:00000632 0C2000FE        	   780:             cmpi.b #$FE,-(a0)
00:00000636 66FE            	   781:             bne.s *               * branch if Z clear
00:00000638 4A20            	   782:             cmpi.b #$00,-(a0)
00:0000063A 66FE            	   783:             bne.s *               * branch if Z clear
                            	   784: 
                            	   785: 
                            	   786: *             EA = n(An)  - BYTE only
00:0000063C 307C0100        	   787:             move.l #$00000100,a0      * point to memory to address
00:00000640 10FC0001        	   788:             move.b #$01,(a0)+         * populate test data
00:00000644 10FC00FC        	   789:             move.b #$FC,(a0)+         * populate test data
00:00000648 10FC0080        	   790:             move.b #$80,(a0)+         * populate test data
00:0000064C 307C0100        	   791:             move.l #$00000100,a0      * point to memory to address
00:00000650 08500000        	   792:             bchg.b #0,0(a0)
00:00000654 67FE            	   793:             beq.s *               * branch if Z set
00:00000656 086800010001    	   794:             bchg.b #1,1(a0)           *
00:0000065C 66FE            	   795:             bne.s *               * branch if Z clear
00:0000065E 086800070002    	   796:             bchg.b #7,2(a0)           *
00:00000664 67FE            	   797:             beq.s *               * branch if Z set
00:00000666 307C0100        	   798:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000066A 4A18            	   799:             cmpi.b #$00,(a0)+
00:0000066C 66FE            	   800:             bne.s *               * branch if Z clear
00:0000066E 0C1800FE        	   801:             cmpi.b #$FE,(a0)+
00:00000672 66FE            	   802:             bne.s *               * branch if Z clear
00:00000674 4A18            	   803:             cmpi.b #$00,(a0)+
00:00000676 66FE            	   804:             bne.s *               * branch if Z clear
                            	   805: 
                            	   806: 
                            	   807: *             EA = n(An,D.W)  - BYTE only
00:00000678 307C0100        	   808:             move.l #$00000100,a0      * point to memory to address
00:0000067C 93C9            	   809:             move.l #$00000000,a1      * point to memory to address
00:0000067E 347C0001        	   810:             move.l #$00000001,a2      * point to memory to address
00:00000682 7000            	   811:             moveq  #$00000000,d0      * point to memory to address
00:00000684 7201            	   812:             moveq  #$00000001,d1      * point to memory to address
00:00000686 087000000000    	   813:             bchg.b #0,0(a0,d0.w)
00:0000068C 66FE            	   814:             bne.s *               * branch if Z clear
00:0000068E 087000011000    	   815:             bchg.b #1,0(a0,d1.w)      *
00:00000694 67FE            	   816:             beq.s *               * branch if Z set
00:00000696 087000071001    	   817:             bchg.b #7,1(a0,d1.w)      *
00:0000069C 66FE            	   818:             bne.s *               * branch if Z clear
                            	   819: *             EA = n(An,D.L)  - BYTE only
00:0000069E 087000000800    	   820:             bchg.b #0,0(a0,d0.l)
00:000006A4 67FE            	   821:             beq.s *               * branch if Z set
00:000006A6 087000011800    	   822:             bchg.b #1,0(a0,d1.l)      *
00:000006AC 66FE            	   823:             bne.s *               * branch if Z clear
00:000006AE 087000071801    	   824:             bchg.b #7,1(a0,d1.l)      *
00:000006B4 67FE            	   825:             beq.s *               * branch if Z set
                            	   826: *             EA = n(An,A.W)  - BYTE only
00:000006B6 087000009000    	   827:             bchg.b #0,0(a0,a1.w)
00:000006BC 66FE            	   828:             bne.s *               * branch if Z clear
00:000006BE 08700001A000    	   829:             bchg.b #1,0(a0,a2.w)      *
00:000006C4 67FE            	   830:             beq.s *               * branch if Z set
00:000006C6 08700007A001    	   831:             bchg.b #7,1(a0,a2.w)      *
00:000006CC 66FE            	   832:             bne.s *               * branch if Z clear
                            	   833: *             EA = n(An,A.L)  - BYTE only
00:000006CE 087000009800    	   834:             bchg.b #0,0(a0,a1.l)
00:000006D4 67FE            	   835:             beq.s *               * branch if Z set
00:000006D6 08700001A800    	   836:             bchg.b #1,0(a0,a2.l)      *
00:000006DC 66FE            	   837:             bne.s *               * branch if Z clear
00:000006DE 08700007A801    	   838:             bchg.b #7,1(a0,a2.l)      *
00:000006E4 67FE            	   839:             beq.s *               * branch if Z set
00:000006E6 307C0100        	   840:             move.l #$00000100,a0      * point to memory to address 0x100
00:000006EA 4A18            	   841:             cmpi.b #$00,(a0)+
00:000006EC 66FE            	   842:             bne.s *               * branch if Z clear
00:000006EE 0C1800FE        	   843:             cmpi.b #$FE,(a0)+
00:000006F2 66FE            	   844:             bne.s *               * branch if Z clear
00:000006F4 4A18            	   845:             cmpi.b #$00,(a0)+
00:000006F6 66FE            	   846:             bne.s *               * branch if Z clear
                            	   847: 
                            	   848: 
                            	   849: *             EA = x.W  - BYTE only
00:000006F8 087800000100    	   850:             bchg.b #0,$0100
00:000006FE 66FE            	   851:             bne.s *               * branch if Z clear
00:00000700 087800010101    	   852:             bchg.b #1,$0101           *
00:00000706 67FE            	   853:             beq.s *               * branch if Z set
00:00000708 087800070102    	   854:             bchg.b #7,$0102           *
00:0000070E 66FE            	   855:             bne.s *               * branch if Z clear
00:00000710 307C0100        	   856:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000714 0C180001        	   857:             cmpi.b #$01,(a0)+
00:00000718 66FE            	   858:             bne.s *               * branch if Z clear
00:0000071A 0C1800FC        	   859:             cmpi.b #$FC,(a0)+
00:0000071E 66FE            	   860:             bne.s *               * branch if Z clear
00:00000720 0C180080        	   861:             cmpi.b #$80,(a0)+
00:00000724 66FE            	   862:             bne.s *               * branch if Z clear
                            	   863: 
                            	   864: *             EA = x.L  - BYTE only
00:00000726 207C0000F100    	   865:             move.l #$F100,a0      * point to memory to address 0x100
00:0000072C 10FC0001        	   866:             move.b #$01,(a0)+         * populate test data
00:00000730 10FC00FC        	   867:             move.b #$FC,(a0)+         * populate test data
00:00000734 10FC0080        	   868:             move.b #$80,(a0)+         * populate test data
00:00000738 087900000000F100	   869:             bchg.b #0,$F100
00:00000740 67FE            	   870:             beq.s *               * branch if Z set
00:00000742 087900010000F101	   871:             bchg.b #1,$F101       *
00:0000074A 66FE            	   872:             bne.s *               * branch if Z clear
00:0000074C 087900070000F102	   873:             bchg.b #7,$F102       *
00:00000754 67FE            	   874:             beq.s *               * branch if Z set
00:00000756 307C0100        	   875:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000075A 0C180001        	   876:             cmpi.b #$01,(a0)+
00:0000075E 66FE            	   877:             bne.s *               * branch if Z clear
00:00000760 0C1800FC        	   878:             cmpi.b #$FC,(a0)+
00:00000764 66FE            	   879:             bne.s *               * branch if Z clear
00:00000766 0C180080        	   880:             cmpi.b #$80,(a0)+
00:0000076A 66FE            	   881:             bne.s *               * branch if Z clear
                            	   882: 
                            	   883: 
                            	   884: * Bit Number.s Dynamic
                            	   885: 
                            	   886: *             EA = Dn  - LONG only
00:0000076C 203C80000001    	   887:             move.l #$80000001,d0      * populate test data
00:00000772 7A00            	   888:             move.l #0,d5              * populate bit.s number to test
00:00000774 7C01            	   889:             move.l #1,d6              * populate bit.s number to test
00:00000776 7E1F            	   890:             move.l #31,d7              * populate bit.s number to test
                            	   891: 
00:00000778 0B40            	   892:             bchg.l d5,d0
00:0000077A 67FE            	   893:             beq.s *               * branch if Z set
00:0000077C 0D40            	   894:             bchg.l d6,d0              *
00:0000077E 66FE            	   895:             bne.s *               * branch if Z clear
00:00000780 0F40            	   896:             bchg.l d7,d0             *
00:00000782 67FE            	   897:             beq.s *               * branch if Z set
00:00000784 0C8000000002    	   898:             cmpi.l #$00000002,d0
00:0000078A 66FE            	   899:             bne.s *               * branch if Z clear
                            	   900: 
                            	   901: 
                            	   902: *             EA = (An)  - BYTE only
00:0000078C 7A00            	   903:             move.l #0,d5              * populate bit.s number to test
00:0000078E 7C01            	   904:             move.l #1,d6              * populate bit.s number to test
00:00000790 7E07            	   905:             move.l #7,d7              * populate bit.s number to test
00:00000792 307C0100        	   906:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000796 10BC0081        	   907:             move.b #$81,(a0)          * populate test data
00:0000079A 1210            	   908:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:0000079C 0B50            	   909:             bchg.b d5,(a0)
00:0000079E 67FE            	   910:             beq.s *               * branch if Z set
00:000007A0 0D50            	   911:             bchg.b d6,(a0)            *
00:000007A2 66FE            	   912:             bne.s *               * branch if Z clear
00:000007A4 0F50            	   913:             bchg.b d7,(a0)            *
00:000007A6 67FE            	   914:             beq.s *               * branch if Z set
00:000007A8 0C100002        	   915:             cmpi.b #$02,(a0)
00:000007AC 66FE            	   916:             bne.s *               * branch if Z clear
                            	   917: 
                            	   918: 
                            	   919: *             EA = (An)+  - BYTE only
00:000007AE 307C0100        	   920:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007B2 10FC0001        	   921:             move.b #$01,(a0)+         * populate test data
00:000007B6 10FC00FC        	   922:             move.b #$FC,(a0)+         * populate test data
00:000007BA 10FC0080        	   923:             move.b #$80,(a0)+         * populate test data
00:000007BE 307C0100        	   924:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007C2 0B58            	   925:             bchg.b d5,(a0)+
00:000007C4 67FE            	   926:             beq.s *               * branch if Z set
00:000007C6 0D58            	   927:             bchg.b d6,(a0)+           *
00:000007C8 66FE            	   928:             bne.s *               * branch if Z clear
00:000007CA 0F58            	   929:             bchg.b d7,(a0)+           *
00:000007CC 67FE            	   930:             beq.s *               * branch if Z set
00:000007CE 307C0100        	   931:             move.l #$00000100,a0      * point to memory to address 0x100
00:000007D2 4A18            	   932:             cmpi.b #$00,(a0)+
00:000007D4 66FE            	   933:             bne.s *               * branch if Z clear
00:000007D6 0C1800FE        	   934:             cmpi.b #$FE,(a0)+
00:000007DA 66FE            	   935:             bne.s *               * branch if Z clear
00:000007DC 4A18            	   936:             cmpi.b #$00,(a0)+
00:000007DE 66FE            	   937:             bne.s *               * branch if Z clear
                            	   938: 
                            	   939: *             EA = -(An)  - BYTE only
00:000007E0 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
00:000007E4 10FC0080        	   941:             move.b #$80,(a0)+         * populate test data
00:000007E8 10FC00FC        	   942:             move.b #$FC,(a0)+         * populate test data
00:000007EC 10FC0001        	   943:             move.b #$01,(a0)+         * populate test data
00:000007F0 307C0103        	   944:             move.l #$00000103,a0      * point to memory to address
00:000007F4 0B60            	   945:             bchg.b d5,-(a0)
00:000007F6 67FE            	   946:             beq.s *               * branch if Z set
00:000007F8 0D60            	   947:             bchg.b d6,-(a0)           *
00:000007FA 66FE            	   948:             bne.s *               * branch if Z clear
00:000007FC 0F60            	   949:             bchg.b d7,-(a0)           *
00:000007FE 67FE            	   950:             beq.s *               * branch if Z set
00:00000800 307C0103        	   951:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000804 4A20            	   952:             cmpi.b #$00,-(a0)
00:00000806 66FE            	   953:             bne.s *               * branch if Z clear
00:00000808 0C2000FE        	   954:             cmpi.b #$FE,-(a0)
00:0000080C 66FE            	   955:             bne.s *               * branch if Z clear
00:0000080E 4A20            	   956:             cmpi.b #$00,-(a0)
00:00000810 66FE            	   957:             bne.s *               * branch if Z clear
                            	   958: 
                            	   959: *             EA = n(An)  - BYTE only
00:00000812 307C0100        	   960:             move.l #$00000100,a0      * point to memory to address
00:00000816 10FC0001        	   961:             move.b #$01,(a0)+         * populate test data
00:0000081A 10FC00FC        	   962:             move.b #$FC,(a0)+         * populate test data
00:0000081E 10FC0080        	   963:             move.b #$80,(a0)+         * populate test data
00:00000822 307C0100        	   964:             move.l #$00000100,a0      * point to memory to address
00:00000826 0B50            	   965:             bchg.b d5,0(a0)
00:00000828 67FE            	   966:             beq.s *               * branch if Z set
00:0000082A 0D680001        	   967:             bchg.b d6,1(a0)           *
00:0000082E 66FE            	   968:             bne.s *               * branch if Z clear
00:00000830 0F680002        	   969:             bchg.b d7,2(a0)           *
00:00000834 67FE            	   970:             beq.s *               * branch if Z set
00:00000836 307C0100        	   971:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000083A 4A18            	   972:             cmpi.b #$00,(a0)+
00:0000083C 66FE            	   973:             bne.s *               * branch if Z clear
00:0000083E 0C1800FE        	   974:             cmpi.b #$FE,(a0)+
00:00000842 66FE            	   975:             bne.s *               * branch if Z clear
00:00000844 4A18            	   976:             cmpi.b #$00,(a0)+
00:00000846 66FE            	   977:             bne.s *               * branch if Z clear
                            	   978: 
                            	   979: *             EA = n(An,R.W)  - BYTE only
00:00000848 307C0100        	   980:             move.l #$00000100,a0      * point to memory to address
00:0000084C 93C9            	   981:             move.l #$00000000,a1      * point to memory to address
00:0000084E 347C0001        	   982:             move.l #$00000001,a2      * point to memory to address
00:00000852 7000            	   983:             moveq  #$00000000,d0      * point to memory to address
00:00000854 7201            	   984:             moveq  #$00000001,d1      * point to memory to address
00:00000856 0B700000        	   985:             bchg.b d5,0(a0,d0.w)
00:0000085A 66FE            	   986:             bne.s *               * branch if Z clear
00:0000085C 0D701000        	   987:             bchg.b d6,0(a0,d1.w)      *
00:00000860 67FE            	   988:             beq.s *               * branch if Z set
00:00000862 0F701001        	   989:             bchg.b d7,1(a0,d1.w)      *
00:00000866 66FE            	   990:             bne.s *               * branch if Z clear
                            	   991: *             EA = n(An,R.L)  - BYTE only
00:00000868 0B700800        	   992:             bchg.b d5,0(a0,d0.l)
00:0000086C 67FE            	   993:             beq.s *               * branch if Z set
00:0000086E 0D701800        	   994:             bchg.b d6,0(a0,d1.l)      *
00:00000872 66FE            	   995:             bne.s *               * branch if Z clear
00:00000874 0F701801        	   996:             bchg.b d7,1(a0,d1.l)      *
00:00000878 67FE            	   997:             beq.s *               * branch if Z set
                            	   998: *             EA = n(An,A.W)  - BYTE only
00:0000087A 0B709000        	   999:             bchg.b d5,0(a0,a1.w)
00:0000087E 66FE            	  1000:             bne.s *               * branch if Z clear
00:00000880 0D70A000        	  1001:             bchg.b d6,0(a0,a2.w)      *
00:00000884 67FE            	  1002:             beq.s *               * branch if Z set
00:00000886 0F70A001        	  1003:             bchg.b d7,1(a0,a2.w)      *
00:0000088A 66FE            	  1004:             bne.s *               * branch if Z clear
                            	  1005: *             EA = n(An,A.L)  - BYTE only
00:0000088C 0B709800        	  1006:             bchg.b d5,0(a0,a1.l)
00:00000890 67FE            	  1007:             beq.s *               * branch if Z set
00:00000892 0D70A800        	  1008:             bchg.b d6,0(a0,a2.l)      *
00:00000896 66FE            	  1009:             bne.s *               * branch if Z clear
00:00000898 0F70A801        	  1010:             bchg.b d7,1(a0,a2.l)      *
00:0000089C 67FE            	  1011:             beq.s *               * branch if Z set
00:0000089E 4A18            	  1012:             cmpi.b #$00,(a0)+
00:000008A0 66FE            	  1013:             bne.s *               * branch if Z clear
                            	  1014: 
                            	  1015: *             EA = x.W  - BYTE only
00:000008A2 0B780100        	  1016:             bchg.b d5,$0100
00:000008A6 66FE            	  1017:             bne.s *               * branch if Z clear
00:000008A8 0D780101        	  1018:             bchg.b d6,$0101           *
00:000008AC 67FE            	  1019:             beq.s *               * branch if Z set
00:000008AE 0F780102        	  1020:             bchg.b d7,$0102           *
00:000008B2 66FE            	  1021:             bne.s *               * branch if Z clear
00:000008B4 0C1800FC        	  1022:             cmpi.b #$FC,(a0)+
00:000008B8 66FE            	  1023:             bne.s *               * branch if Z clear
                            	  1024: 
                            	  1025: *             EA = x.L  - BYTE only
00:000008BA 207C0000F100    	  1026:             move.l #$F100,a0      * point to memory to address 0x100
00:000008C0 10FC0001        	  1027:             move.b #$01,(a0)+         * populate test data
00:000008C4 10FC00FC        	  1028:             move.b #$FC,(a0)+         * populate test data
00:000008C8 10FC0080        	  1029:             move.b #$80,(a0)+         * populate test data
00:000008CC 0B790000F100    	  1030:             bchg.b d5,$F100
00:000008D2 67FE            	  1031:             beq.s *               * branch if Z set
00:000008D4 0D790000F101    	  1032:             bchg.b d6,$F101       *
00:000008DA 66FE            	  1033:             bne.s *               * branch if Z clear
00:000008DC 0F790000F102    	  1034:             bchg.b d7,$F102       *
00:000008E2 67FE            	  1035:             beq.s *               * branch if Z set
00:000008E4 207C0000F101    	  1036:             move.l #$F101,a0      * point to memory to address 0x100
00:000008EA 0C1000FE        	  1037:             cmpi.b #$FE,(a0)
00:000008EE 66FE            	  1038:             bne.s *               * branch if Z clear
                            	  1039: 
                            	  1040: 
00:000008F0 4E75            	  1041:     rts
                            	  1042: 
                            	  1043: *-----------------------------------------------------------
                            	  1044: *-----------------------------------------------------------
                            	  1045: * OPCODE : BCLR
                            	  1046: *-----------------------------------------------------------
                            	  1047: *-----------------------------------------------------------
                            	  1048: op_BCLR:
                            	  1049: 
                            	  1050: 
                            	  1051: *  Bit Number.s Static
                            	  1052: 
                            	  1053: *             EA = Dn  - LONG only
00:000008F2 203CFF0000FF    	  1054:             move.l #$FF0000FF,d0      * populate test data
00:000008F8 08800000        	  1055:             bclr.l #0,d0
00:000008FC 67FE            	  1056:             beq.s *               * branch if Z set
00:000008FE 08800001        	  1057:             bclr.l #1,d0              *
00:00000902 67FE            	  1058:             beq.s *               * branch if Z set
00:00000904 0880000F        	  1059:             bclr.l #15,d0             *
00:00000908 66FE            	  1060:             bne.s *               * branch if Z clear
00:0000090A 0880001F        	  1061:             bclr.l #31,d0             *
00:0000090E 67FE            	  1062:             beq.s *               * branch if Z set
00:00000910 0C807F0000FC    	  1063:             cmpi.l #$7F0000FC,d0
00:00000916 66FE            	  1064:             bne.s *               * branch if Z clear
                            	  1065: 
                            	  1066: 
                            	  1067: *             EA = (An)  - BYTE only
00:00000918 307C0100        	  1068:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000091C 10BC000F        	  1069:             move.b #$0F,(a0)          * populate test data
00:00000920 08900000        	  1070:             bclr.b #0,(a0)
00:00000924 67FE            	  1071:             beq.s *               * branch if Z set
00:00000926 08900007        	  1072:             bclr.b #7,(a0)            *
00:0000092A 66FE            	  1073:             bne.s *               * branch if Z clear
00:0000092C 0C10000E        	  1074:             cmpi.b #$0E,(a0)
00:00000930 66FE            	  1075:             bne.s *               * branch if Z clear
                            	  1076: 
                            	  1077: *             EA = (An)+  - BYTE only
00:00000932 307C0100        	  1078:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000936 10FC0001        	  1079:             move.b #$01,(a0)+         * populate test data
00:0000093A 10FC0000        	  1080:             move.b #$00,(a0)+         * populate test data
00:0000093E 307C0100        	  1081:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000942 08980000        	  1082:             bclr.b #0,(a0)+
00:00000946 67FE            	  1083:             beq.s *               * branch if Z set
00:00000948 08980001        	  1084:             bclr.b #1,(a0)+           *
00:0000094C 66FE            	  1085:             bne.s *               * branch if Z clear
00:0000094E 307C0100        	  1086:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000952 4A18            	  1087:             cmpi.b #$00,(a0)+
00:00000954 66FE            	  1088:             bne.s *               * branch if Z clear
00:00000956 4A18            	  1089:             cmpi.b #$00,(a0)+
00:00000958 66FE            	  1090:             bne.s *               * branch if Z clear
                            	  1091: 
                            	  1092: 
                            	  1093: *             EA = -(An)  - BYTE only
00:0000095A 307C0100        	  1094:             move.l #$00000100,a0      * point to memory to address
00:0000095E 10FC0001        	  1095:             move.b #$01,(a0)+         * populate test data
00:00000962 10FC0080        	  1096:             move.b #$80,(a0)+         * populate test data
00:00000966 08A00007        	  1097:             bclr.b #7,-(a0)
00:0000096A 67FE            	  1098:             beq.s *               * branch if Z set
00:0000096C 08A00000        	  1099:             bclr.b #0,-(a0)           *
00:00000970 67FE            	  1100:             beq.s *               * branch if Z set
00:00000972 307C0102        	  1101:             move.l #$00000102,a0      * point to memory to address 0x100
00:00000976 4A20            	  1102:             cmpi.b #$00,-(a0)
00:00000978 66FE            	  1103:             bne.s *               * branch if Z clear
00:0000097A 4A20            	  1104:             cmpi.b #$00,-(a0)
00:0000097C 66FE            	  1105:             bne.s *               * branch if Z clear
                            	  1106: 
                            	  1107: 
                            	  1108: *             EA = n(An)  - BYTE only
00:0000097E 307C0100        	  1109:             move.l #$00000100,a0      * point to memory to address
00:00000982 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
00:00000986 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
00:0000098A 307C0100        	  1112:             move.l #$00000100,a0      * point to memory to address
00:0000098E 08900000        	  1113:             bclr.b #0,0(a0)
00:00000992 67FE            	  1114:             beq.s *               * branch if Z set
00:00000994 08A800040001    	  1115:             bclr.b #4,1(a0)           *
00:0000099A 67FE            	  1116:             beq.s *               * branch if Z set
00:0000099C 307C0100        	  1117:             move.l #$00000100,a0      * point to memory to address 0x100
00:000009A0 0C1800FE        	  1118:             cmpi.b #$FE,(a0)+
00:000009A4 66FE            	  1119:             bne.s *               * branch if Z clear
00:000009A6 0C1800EF        	  1120:             cmpi.b #$EF,(a0)+
00:000009AA 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: 
                            	  1123: 
                            	  1124: *             EA = n(An,D.W)  - BYTE only
00:000009AC 307C0100        	  1125:             move.l #$00000100,a0      * point to memory to address
00:000009B0 93C9            	  1126:             move.l #$00000000,a1      * point to memory to address
00:000009B2 347C0001        	  1127:             move.l #$00000001,a2      * point to memory to address
00:000009B6 7000            	  1128:             moveq  #$00000000,d0      * point to memory to address
00:000009B8 7201            	  1129:             moveq  #$00000001,d1      * point to memory to address
00:000009BA 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
00:000009BE 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
00:000009C2 307C0100        	  1132:             move.l #$00000100,a0      * point to memory to address
00:000009C6 08B000000000    	  1133:             bclr.b #0,0(a0,d0.w)
00:000009CC 67FE            	  1134:             beq.s *               * branch if Z set
00:000009CE 08B000011000    	  1135:             bclr.b #1,0(a0,d1.w)      *
00:000009D4 67FE            	  1136:             beq.s *               * branch if Z set
00:000009D6 08B000021001    	  1137:             bclr.b #2,1(a0,d1.w)      *
00:000009DC 66FE            	  1138:             bne.s *               * branch if Z clear
                            	  1139: *             EA = n(An,D.L)  - BYTE only
00:000009DE 08B000030800    	  1140:             bclr.b #3,0(a0,d0.l)
00:000009E4 67FE            	  1141:             beq.s *               * branch if Z set
00:000009E6 08B000041800    	  1142:             bclr.b #4,0(a0,d1.l)      *
00:000009EC 67FE            	  1143:             beq.s *               * branch if Z set
00:000009EE 08B000051801    	  1144:             bclr.b #5,1(a0,d1.l)      *
00:000009F4 66FE            	  1145:             bne.s *               * branch if Z clear
                            	  1146: *             EA = n(An,A.W)  - BYTE only
00:000009F6 08B000069000    	  1147:             bclr.b #6,0(a0,a1.w)
00:000009FC 67FE            	  1148:             beq.s *               * branch if Z set
00:000009FE 08B00001A000    	  1149:             bclr.b #1,0(a0,a2.w)      *
00:00000A04 66FE            	  1150:             bne.s *               * branch if Z clear
00:00000A06 08B00007A001    	  1151:             bclr.b #7,1(a0,a2.w)      *
00:00000A0C 67FE            	  1152:             beq.s *               * branch if Z set
                            	  1153: *             EA = n(An,A.L)  - BYTE only
00:00000A0E 08B000009800    	  1154:             bclr.b #0,0(a0,a1.l)
00:00000A14 66FE            	  1155:             bne.s *               * branch if Z clear
00:00000A16 08B00000A800    	  1156:             bclr.b #0,0(a0,a2.l)      *
00:00000A1C 67FE            	  1157:             beq.s *               * branch if Z set
00:00000A1E 08B00001A801    	  1158:             bclr.b #1,1(a0,a2.l)      *
00:00000A24 66FE            	  1159:             bne.s *               * branch if Z clear
00:00000A26 307C0100        	  1160:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A2A 0C1800B6        	  1161:             cmpi.b #$B6,(a0)+
00:00000A2E 66FE            	  1162:             bne.s *               * branch if Z clear
00:00000A30 0C1800EC        	  1163:             cmpi.b #$EC,(a0)+
00:00000A34 66FE            	  1164:             bne.s *               * branch if Z clear
00:00000A36 0C180059        	  1165:             cmpi.b #$59,(a0)+
00:00000A3A 67FE            	  1166:             beq.s *               * branch if Z set
                            	  1167: 
                            	  1168: 
                            	  1169: *             EA = x.W  - BYTE only
00:00000A3C 307C0100        	  1170:             move.l #$00000100,a0      * point to memory to address
00:00000A40 10FC00FF        	  1171:             move.b #$FF,(a0)+         * populate test data
00:00000A44 08B800000100    	  1172:             bclr.b #0,$0100
00:00000A4A 67FE            	  1173:             beq.s *               * branch if Z set
00:00000A4C 08B800010100    	  1174:             bclr.b #1,$0100           *
00:00000A52 67FE            	  1175:             beq.s *               * branch if Z set
00:00000A54 307C0100        	  1176:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000A58 0C1800FC        	  1177:             cmpi.b #$FC,(a0)+
00:00000A5C 66FE            	  1178:             bne.s *               * branch if Z clear
                            	  1179: 
                            	  1180: 
                            	  1181: *             EA = x.L  - BYTE only
00:00000A5E 207C0000F100    	  1182:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A64 10BC00FF        	  1183:             move.b #$FF,(a0)          * populate test data
00:00000A68 08B900000000F100	  1184:             bclr.b #0,$F100
00:00000A70 67FE            	  1185:             beq.s *               * branch if Z set
00:00000A72 08B900010000F100	  1186:             bclr.b #1,$F100       *
00:00000A7A 67FE            	  1187:             beq.s *               * branch if Z set
00:00000A7C 08B900020000F100	  1188:             bclr.b #2,$F100       *
00:00000A84 67FE            	  1189:             beq.s *               * branch if Z set
00:00000A86 207C0000F100    	  1190:             move.l #$F100,a0      * point to memory to address 0x100
00:00000A8C 0C1800F8        	  1191:             cmpi.b #$F8,(a0)+
00:00000A90 66FE            	  1192:             bne.s *               * branch if Z clear
                            	  1193: 
                            	  1194: 
                            	  1195: * Bit Number.s Dynamic
                            	  1196: 
                            	  1197: *             EA = Dn  - LONG only
00:00000A92 203CFF00FF00    	  1198:             move.l #$FF00FF00,d0      * populate test data
00:00000A98 7A00            	  1199:             move.l #0,d5              * populate bit.s number to test
00:00000A9A 7C01            	  1200:             move.l #1,d6              * populate bit.s number to test
00:00000A9C 7E1F            	  1201:             move.l #31,d7              * populate bit.s number to test
                            	  1202: 
00:00000A9E 0B80            	  1203:             bclr.l d5,d0
00:00000AA0 66FE            	  1204:             bne.s *               * branch if Z clear
00:00000AA2 0D80            	  1205:             bclr.l d6,d0              *
00:00000AA4 66FE            	  1206:             bne.s *               * branch if Z clear
00:00000AA6 0F80            	  1207:             bclr.l d7,d0             *
00:00000AA8 67FE            	  1208:             beq.s *               * branch if Z set
00:00000AAA 0C807F00FF00    	  1209:             cmpi.l #$7F00FF00,d0
00:00000AB0 66FE            	  1210:             bne.s *               * branch if Z clear
                            	  1211: 
                            	  1212: 
                            	  1213: *             EA = (An)  - BYTE only
00:00000AB2 7A00            	  1214:             move.l #0,d5              * populate bit.s number to test
00:00000AB4 7C01            	  1215:             move.l #1,d6              * populate bit.s number to test
00:00000AB6 7E07            	  1216:             move.l #7,d7              * populate bit.s number to test
00:00000AB8 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000ABC 10BC0081        	  1218:             move.b #$81,(a0)          * populate test data
00:00000AC0 0B90            	  1219:             bclr.b d5,(a0)
00:00000AC2 67FE            	  1220:             beq.s *               * branch if Z set
00:00000AC4 0D90            	  1221:             bclr.b d6,(a0)            *
00:00000AC6 66FE            	  1222:             bne.s *               * branch if Z clear
00:00000AC8 0F90            	  1223:             bclr.b d7,(a0)            *
00:00000ACA 67FE            	  1224:             beq.s *               * branch if Z set
00:00000ACC 4A10            	  1225:             cmpi.b #$00,(a0)
00:00000ACE 66FE            	  1226:             bne.s *               * branch if Z clear
                            	  1227: 
                            	  1228: 
                            	  1229: *             EA = (An)+  - BYTE only
00:00000AD0 307C0100        	  1230:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AD4 10FC0001        	  1231:             move.b #$01,(a0)+         * populate test data
00:00000AD8 10FC00FC        	  1232:             move.b #$FC,(a0)+         * populate test data
00:00000ADC 10FC0080        	  1233:             move.b #$80,(a0)+         * populate test data
00:00000AE0 307C0100        	  1234:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AE4 0B98            	  1235:             bclr.b d5,(a0)+
00:00000AE6 67FE            	  1236:             beq.s *               * branch if Z set
00:00000AE8 0D98            	  1237:             bclr.b d6,(a0)+           *
00:00000AEA 66FE            	  1238:             bne.s *               * branch if Z clear
00:00000AEC 0F98            	  1239:             bclr.b d7,(a0)+           *
00:00000AEE 67FE            	  1240:             beq.s *               * branch if Z set
00:00000AF0 307C0100        	  1241:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000AF4 4A18            	  1242:             cmpi.b #$00,(a0)+
00:00000AF6 66FE            	  1243:             bne.s *               * branch if Z clear
00:00000AF8 0C1800FC        	  1244:             cmpi.b #$FC,(a0)+
00:00000AFC 66FE            	  1245:             bne.s *               * branch if Z clear
00:00000AFE 4A18            	  1246:             cmpi.b #$00,(a0)+
00:00000B00 66FE            	  1247:             bne.s *               * branch if Z clear
                            	  1248: 
                            	  1249: *             EA = -(An)  - BYTE only
00:00000B02 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
00:00000B06 10FC0080        	  1251:             move.b #$80,(a0)+         * populate test data
00:00000B0A 10FC00FC        	  1252:             move.b #$FC,(a0)+         * populate test data
00:00000B0E 10FC0001        	  1253:             move.b #$01,(a0)+         * populate test data
00:00000B12 307C0103        	  1254:             move.l #$00000103,a0      * point to memory to address
00:00000B16 0BA0            	  1255:             bclr.b d5,-(a0)
00:00000B18 67FE            	  1256:             beq.s *               * branch if Z set
00:00000B1A 0DA0            	  1257:             bclr.b d6,-(a0)           *
00:00000B1C 66FE            	  1258:             bne.s *               * branch if Z clear
00:00000B1E 0FA0            	  1259:             bclr.b d7,-(a0)           *
00:00000B20 67FE            	  1260:             beq.s *               * branch if Z set
00:00000B22 307C0103        	  1261:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000B26 4A20            	  1262:             cmpi.b #$00,-(a0)
00:00000B28 66FE            	  1263:             bne.s *               * branch if Z clear
00:00000B2A 0C2000FC        	  1264:             cmpi.b #$FC,-(a0)
00:00000B2E 66FE            	  1265:             bne.s *               * branch if Z clear
00:00000B30 4A20            	  1266:             cmpi.b #$00,-(a0)
00:00000B32 66FE            	  1267:             bne.s *               * branch if Z clear
                            	  1268: 
                            	  1269: *             EA = n(An)  - BYTE only
00:00000B34 307C0100        	  1270:             move.l #$00000100,a0      * point to memory to address
00:00000B38 10FC0001        	  1271:             move.b #$01,(a0)+         * populate test data
00:00000B3C 10FC00FC        	  1272:             move.b #$FC,(a0)+         * populate test data
00:00000B40 10FC0080        	  1273:             move.b #$80,(a0)+         * populate test data
00:00000B44 307C0100        	  1274:             move.l #$00000100,a0      * point to memory to address
00:00000B48 0B90            	  1275:             bclr.b d5,0(a0)
00:00000B4A 67FE            	  1276:             beq.s *               * branch if Z set
00:00000B4C 0DA80001        	  1277:             bclr.b d6,1(a0)           *
00:00000B50 66FE            	  1278:             bne.s *               * branch if Z clear
00:00000B52 0FA80002        	  1279:             bclr.b d7,2(a0)           *
00:00000B56 67FE            	  1280:             beq.s *               * branch if Z set
00:00000B58 307C0100        	  1281:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000B5C 4A18            	  1282:             cmpi.b #$00,(a0)+
00:00000B5E 66FE            	  1283:             bne.s *               * branch if Z clear
00:00000B60 0C1800FC        	  1284:             cmpi.b #$FC,(a0)+
00:00000B64 66FE            	  1285:             bne.s *               * branch if Z clear
00:00000B66 4A18            	  1286:             cmpi.b #$00,(a0)+
00:00000B68 66FE            	  1287:             bne.s *               * branch if Z clear
                            	  1288: 
                            	  1289: *             EA = n(An,R.W)  - BYTE only
00:00000B6A 307C0100        	  1290:             move.l #$00000100,a0      * point to memory to address
00:00000B6E 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
00:00000B72 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:00000B76 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
00:00000B7A 307C0103        	  1294:             move.l #$00000103,a0      * point to memory to address
00:00000B7E 307C0100        	  1295:             move.l #$00000100,a0      * point to memory to address
00:00000B82 93C9            	  1296:             move.l #$00000000,a1      * point to memory to address
00:00000B84 347C0001        	  1297:             move.l #$00000001,a2      * point to memory to address
00:00000B88 7000            	  1298:             moveq  #$00000000,d0      * point to memory to address
00:00000B8A 7201            	  1299:             moveq  #$00000001,d1      * point to memory to address
00:00000B8C 0BB00000        	  1300:             bclr.b d5,0(a0,d0.w)
00:00000B90 67FE            	  1301:             beq.s *               * branch if Z set
00:00000B92 0DB01000        	  1302:             bclr.b d6,0(a0,d1.w)      *
00:00000B96 67FE            	  1303:             beq.s *               * branch if Z set
00:00000B98 0FB01001        	  1304:             bclr.b d7,1(a0,d1.w)      *
00:00000B9C 67FE            	  1305:             beq.s *               * branch if Z set
                            	  1306: *             EA = n(An,R.L)  - BYTE only
00:00000B9E 0BB00800        	  1307:             bclr.b d5,0(a0,d0.l)
00:00000BA2 66FE            	  1308:             bne.s *               * branch if Z clear
00:00000BA4 0DB01800        	  1309:             bclr.b d6,0(a0,d1.l)      *
00:00000BA8 66FE            	  1310:             bne.s *               * branch if Z clear
00:00000BAA 0FB01801        	  1311:             bclr.b d7,1(a0,d1.l)      *
00:00000BAE 66FE            	  1312:             bne.s *               * branch if Z clear
                            	  1313: *             EA = n(An,A.W)  - BYTE only
00:00000BB0 0BB09000        	  1314:             bclr.b d5,0(a0,a1.w)
00:00000BB4 66FE            	  1315:             bne.s *               * branch if Z clear
00:00000BB6 0DB0A000        	  1316:             bclr.b d6,0(a0,a2.w)      *
00:00000BBA 66FE            	  1317:             bne.s *               * branch if Z clear
00:00000BBC 0FB0A001        	  1318:             bclr.b d7,1(a0,a2.w)      *
00:00000BC0 66FE            	  1319:             bne.s *               * branch if Z clear
                            	  1320: *             EA = n(An,A.L)  - BYTE only
00:00000BC2 0BB09800        	  1321:             bclr.b d5,0(a0,a1.l)
00:00000BC6 66FE            	  1322:             bne.s *               * branch if Z clear
00:00000BC8 0DB0A800        	  1323:             bclr.b d6,0(a0,a2.l)      *
00:00000BCC 66FE            	  1324:             bne.s *               * branch if Z clear
00:00000BCE 0FB0A801        	  1325:             bclr.b d7,1(a0,a2.l)      *
00:00000BD2 66FE            	  1326:             bne.s *               * branch if Z clear
00:00000BD4 307C0100        	  1327:             move.l #$00000100,a0      * point to memory to address
00:00000BD8 0C1000FE        	  1328:             cmpi.b #$FE,(a0)
00:00000BDC 66FE            	  1329:             bne.s *               * branch if Z clear
                            	  1330: 
                            	  1331: *             EA = x.W  - BYTE only
00:00000BDE 307C0100        	  1332:             move.l #$00000100,a0      * point to memory to address
00:00000BE2 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
00:00000BE6 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:00000BEA 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
00:00000BEE 0BB80100        	  1336:             bclr.b d5,$0100
00:00000BF2 67FE            	  1337:             beq.s *               * branch if Z set
00:00000BF4 0DB80101        	  1338:             bclr.b d6,$0101           *
00:00000BF8 67FE            	  1339:             beq.s *               * branch if Z set
00:00000BFA 0FB80102        	  1340:             bclr.b d7,$0102           *
00:00000BFE 67FE            	  1341:             beq.s *               * branch if Z set
00:00000C00 307C0100        	  1342:             move.l #$00000100,a0      * point to memory to address
00:00000C04 0C1800FE        	  1343:             cmpi.b #$FE,(a0)+
00:00000C08 66FE            	  1344:             bne.s *               * branch if Z clear
                            	  1345: 
                            	  1346: *             EA = x.L  - BYTE only
00:00000C0A 207C0000F100    	  1347:             move.l #$F100,a0      * point to memory to address 0x100
00:00000C10 10FC0001        	  1348:             move.b #$01,(a0)+         * populate test data
00:00000C14 10FC00FC        	  1349:             move.b #$FC,(a0)+         * populate test data
00:00000C18 10FC0080        	  1350:             move.b #$80,(a0)+         * populate test data
00:00000C1C 0BB90000F100    	  1351:             bclr.b d5,$F100
00:00000C22 67FE            	  1352:             beq.s *               * branch if Z set
00:00000C24 0DB90000F101    	  1353:             bclr.b d6,$F101       *
00:00000C2A 66FE            	  1354:             bne.s *               * branch if Z clear
00:00000C2C 0FB90000F102    	  1355:             bclr.b d7,$F102       *
00:00000C32 67FE            	  1356:             beq.s *               * branch if Z set
00:00000C34 207C0000F101    	  1357:             move.l #$F101,a0      * point to memory to address 0x100
00:00000C3A 0C1000FC        	  1358:             cmpi.b #$FC,(a0)
00:00000C3E 66FE            	  1359:             bne.s *               * branch if Z clear
                            	  1360: 
                            	  1361: 
                            	  1362: 
00:00000C40 4E75            	  1363:     rts
                            	  1364: 
                            	  1365: *-----------------------------------------------------------
                            	  1366: *-----------------------------------------------------------
                            	  1367: * OPCODE : BSET
                            	  1368: *-----------------------------------------------------------
                            	  1369: *-----------------------------------------------------------
                            	  1370: op_BSET:
                            	  1371: 
                            	  1372: 
                            	  1373: *  Bit Number.s Static
                            	  1374: 
                            	  1375: *             EA = Dn  - LONG only
00:00000C42 7000            	  1376:             moveq  #$00000000,d0      * populate test data
00:00000C44 08C00000        	  1377:             bset.l #0,d0
00:00000C48 66FE            	  1378:             bne.s *               * branch if Z clear
00:00000C4A 08C00001        	  1379:             bset.l #1,d0              *
00:00000C4E 66FE            	  1380:             bne.s *               * branch if Z clear
00:00000C50 08C0000F        	  1381:             bset.l #15,d0             *
00:00000C54 66FE            	  1382:             bne.s *               * branch if Z clear
00:00000C56 08C0001F        	  1383:             bset.l #31,d0             *
00:00000C5A 66FE            	  1384:             bne.s *               * branch if Z clear
00:00000C5C 0C8080008003    	  1385:             cmpi.l #$80008003,d0
00:00000C62 66FE            	  1386:             bne.s *               * branch if Z clear
                            	  1387: 
                            	  1388: 
                            	  1389: *             EA = (An)  - BYTE only
00:00000C64 307C0100        	  1390:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C68 10BC0000        	  1391:             move.b #$00,(a0)          * populate test data
00:00000C6C 08D00000        	  1392:             bset.b #0,(a0)
00:00000C70 66FE            	  1393:             bne.s *               * branch if Z clear
00:00000C72 08D00007        	  1394:             bset.b #7,(a0)            *
00:00000C76 66FE            	  1395:             bne.s *               * branch if Z clear
00:00000C78 0C100081        	  1396:             cmpi.b #$81,(a0)
00:00000C7C 66FE            	  1397:             bne.s *               * branch if Z clear
                            	  1398: 
                            	  1399: *             EA = (An)+  - BYTE only
00:00000C7E 307C0100        	  1400:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C82 10FC0000        	  1401:             move.b #$00,(a0)+         * populate test data
00:00000C86 10FC0000        	  1402:             move.b #$00,(a0)+         * populate test data
00:00000C8A 307C0100        	  1403:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C8E 08D80000        	  1404:             bset.b #0,(a0)+
00:00000C92 66FE            	  1405:             bne.s *               * branch if Z clear
00:00000C94 08D80001        	  1406:             bset.b #1,(a0)+           *
00:00000C98 66FE            	  1407:             bne.s *               * branch if Z clear
00:00000C9A 307C0100        	  1408:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000C9E 0C180001        	  1409:             cmpi.b #$01,(a0)+
00:00000CA2 66FE            	  1410:             bne.s *               * branch if Z clear
00:00000CA4 0C180002        	  1411:             cmpi.b #$02,(a0)+
00:00000CA8 66FE            	  1412:             bne.s *               * branch if Z clear
                            	  1413: 
                            	  1414: 
                            	  1415: *             EA = -(An)  - BYTE only
00:00000CAA 307C0100        	  1416:             move.l #$00000100,a0      * point to memory to address
00:00000CAE 10FC0000        	  1417:             move.b #$00,(a0)+         * populate test data
00:00000CB2 10FC0000        	  1418:             move.b #$00,(a0)+         * populate test data
00:00000CB6 08E00007        	  1419:             bset.b #7,-(a0)
00:00000CBA 66FE            	  1420:             bne.s *               * branch if Z clear
00:00000CBC 08E00000        	  1421:             bset.b #0,-(a0)           *
00:00000CC0 66FE            	  1422:             bne.s *               * branch if Z clear
00:00000CC2 307C0102        	  1423:             move.l #$00000102,a0      * point to memory to address 0x100
00:00000CC6 0C200080        	  1424:             cmpi.b #$80,-(a0)
00:00000CCA 66FE            	  1425:             bne.s *               * branch if Z clear
00:00000CCC 0C200001        	  1426:             cmpi.b #$01,-(a0)
00:00000CD0 66FE            	  1427:             bne.s *               * branch if Z clear
                            	  1428: 
                            	  1429: 
                            	  1430: *             EA = n(An)  - BYTE only
00:00000CD2 307C0100        	  1431:             move.l #$00000100,a0      * point to memory to address
00:00000CD6 10FC0000        	  1432:             move.b #$00,(a0)+         * populate test data
00:00000CDA 10FC0000        	  1433:             move.b #$00,(a0)+         * populate test data
00:00000CDE 307C0100        	  1434:             move.l #$00000100,a0      * point to memory to address
00:00000CE2 08D00000        	  1435:             bset.b #0,0(a0)
00:00000CE6 66FE            	  1436:             bne.s *               * branch if Z clear
00:00000CE8 08E800040001    	  1437:             bset.b #4,1(a0)           *
00:00000CEE 66FE            	  1438:             bne.s *               * branch if Z clear
00:00000CF0 307C0100        	  1439:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000CF4 0C180001        	  1440:             cmpi.b #$01,(a0)+
00:00000CF8 66FE            	  1441:             bne.s *               * branch if Z clear
00:00000CFA 0C180010        	  1442:             cmpi.b #$10,(a0)+
00:00000CFE 66FE            	  1443:             bne.s *               * branch if Z clear
                            	  1444: 
                            	  1445: 
                            	  1446: *             EA = n(An,D.W)  - BYTE only
00:00000D00 307C0100        	  1447:             move.l #$00000100,a0      * point to memory to address
00:00000D04 93C9            	  1448:             move.l #$00000000,a1      * point to memory to address
00:00000D06 347C0004        	  1449:             move.l #$00000004,a2      * point to memory to address
00:00000D0A 7000            	  1450:             moveq  #$00000000,d0      * point to memory to address
00:00000D0C 7201            	  1451:             moveq  #$00000001,d1      * point to memory to address
00:00000D0E 10FC0000        	  1452:             move.b #$00,(a0)+         * populate test data
00:00000D12 10FC0000        	  1453:             move.b #$00,(a0)+         * populate test data
00:00000D16 10FC0000        	  1454:             move.b #$00,(a0)+         * populate test data
00:00000D1A 10FC0000        	  1455:             move.b #$00,(a0)+         * populate test data
00:00000D1E 10FC0000        	  1456:             move.b #$00,(a0)+         * populate test data
00:00000D22 10FC0000        	  1457:             move.b #$00,(a0)+         * populate test data
00:00000D26 10FC0000        	  1458:             move.b #$00,(a0)+         * populate test data
00:00000D2A 10FC0000        	  1459:             move.b #$00,(a0)+         * populate test data
00:00000D2E 10FC0000        	  1460:             move.b #$00,(a0)+         * populate test data
00:00000D32 10FC0000        	  1461:             move.b #$00,(a0)+         * populate test data
00:00000D36 307C0100        	  1462:             move.l #$00000100,a0      * point to memory to address
00:00000D3A 08F000000000    	  1463:             bset.b #0,0(a0,d0.w)
00:00000D40 66FE            	  1464:             bne.s *               * branch if Z clear
00:00000D42 08F000011000    	  1465:             bset.b #1,0(a0,d1.w)      *
00:00000D48 66FE            	  1466:             bne.s *               * branch if Z clear
00:00000D4A 08F000021001    	  1467:             bset.b #2,1(a0,d1.w)      *
00:00000D50 66FE            	  1468:             bne.s *               * branch if Z clear
                            	  1469: *             EA = n(An,D.L)  - BYTE only
00:00000D52 08F000030802    	  1470:             bset.b #3,2(a0,d0.l)
00:00000D58 66FE            	  1471:             bne.s *               * branch if Z clear
00:00000D5A 08F000041800    	  1472:             bset.b #4,0(a0,d1.l)      *
00:00000D60 66FE            	  1473:             bne.s *               * branch if Z clear
00:00000D62 08F000051801    	  1474:             bset.b #5,1(a0,d1.l)      *
00:00000D68 66FE            	  1475:             bne.s *               * branch if Z clear
                            	  1476: *             EA = n(An,A.W)  - BYTE only
00:00000D6A 08F000069000    	  1477:             bset.b #6,0(a0,a1.w)
00:00000D70 66FE            	  1478:             bne.s *               * branch if Z clear
00:00000D72 08F00001A000    	  1479:             bset.b #1,0(a0,a2.w)      *
00:00000D78 66FE            	  1480:             bne.s *               * branch if Z clear
00:00000D7A 08F00007A001    	  1481:             bset.b #7,1(a0,a2.w)      *
00:00000D80 66FE            	  1482:             bne.s *               * branch if Z clear
                            	  1483: *             EA = n(An,A.L)  - BYTE only
00:00000D82 08F00000A802    	  1484:             bset.b #0,2(a0,a2.l)
00:00000D88 66FE            	  1485:             bne.s *               * branch if Z clear
00:00000D8A 08F00000A803    	  1486:             bset.b #0,3(a0,a2.l)      *
00:00000D90 66FE            	  1487:             bne.s *               * branch if Z clear
00:00000D92 08F00001A804    	  1488:             bset.b #1,4(a0,a2.l)      *
00:00000D98 66FE            	  1489:             bne.s *               * branch if Z clear
00:00000D9A 307C0100        	  1490:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000D9E 0C9841122C00    	  1491:             cmpi.l #$41122C00,(a0)+
00:00000DA4 66FE            	  1492:             bne.s *               * branch if Z clear
00:00000DA6 0C9802800101    	  1493:             cmpi.l #$02800101,(a0)+
00:00000DAC 66FE            	  1494:             bne.s *
                            	  1495: 
                            	  1496: 
                            	  1497: 
                            	  1498: *             EA = x.W  - BYTE only
00:00000DAE 307C0100        	  1499:             move.l #$00000100,a0      * point to memory to address
00:00000DB2 10FC0000        	  1500:             move.b #$00,(a0)+         * populate test data
00:00000DB6 08F800000100    	  1501:             bset.b #0,$0100
00:00000DBC 66FE            	  1502:             bne.s *               * branch if Z clear
00:00000DBE 08F800010100    	  1503:             bset.b #1,$0100           *
00:00000DC4 66FE            	  1504:             bne.s *               * branch if Z clear
00:00000DC6 307C0100        	  1505:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000DCA 0C180003        	  1506:             cmpi.b #$03,(a0)+
00:00000DCE 66FE            	  1507:             bne.s *
                            	  1508: 
                            	  1509: 
                            	  1510: *             EA = x.L  - BYTE only
00:00000DD0 207C0000F100    	  1511:             move.l #$F100,a0      * point to memory to address 0x100
00:00000DD6 10BC0000        	  1512:             move.b #$00,(a0)          * populate test data
00:00000DDA 08F900000000F100	  1513:             bset.b #0,$F100
00:00000DE2 66FE            	  1514:             bne.s *               * branch if Z clear
00:00000DE4 08F900010000F100	  1515:             bset.b #1,$F100       *
00:00000DEC 66FE            	  1516:             bne.s *               * branch if Z clear
00:00000DEE 08F900020000F100	  1517:             bset.b #2,$F100       *
00:00000DF6 66FE            	  1518:             bne.s *               * branch if Z clear
00:00000DF8 207C0000F100    	  1519:             move.l #$F100,a0      * point to memory to address 0x100
00:00000DFE 0C180007        	  1520:             cmpi.b #$07,(a0)+
00:00000E02 66FE            	  1521:             bne.s *
                            	  1522: 
                            	  1523: 
                            	  1524: * Bit Number.s Dynamic
                            	  1525: 
                            	  1526: *             EA = Dn  - LONG only
00:00000E04 7000            	  1527:             moveq  #$00000000,d0      * populate test data
00:00000E06 7A00            	  1528:             move.l #0,d5              * populate bit.s number to test
00:00000E08 7C01            	  1529:             move.l #1,d6              * populate bit.s number to test
00:00000E0A 7E1F            	  1530:             move.l #31,d7              * populate bit.s number to test
                            	  1531: 
00:00000E0C 0BC0            	  1532:             bset.l d5,d0
00:00000E0E 66FE            	  1533:             bne.s *               * branch if Z clear
00:00000E10 0DC0            	  1534:             bset.l d6,d0              *
00:00000E12 66FE            	  1535:             bne.s *               * branch if Z clear
00:00000E14 0FC0            	  1536:             bset.l d7,d0             *
00:00000E16 66FE            	  1537:             bne.s *               * branch if Z clear
00:00000E18 0C8080000003    	  1538:             cmpi.l #$80000003,d0
00:00000E1E 66FE            	  1539:             bne.s *               * branch if Z clear
                            	  1540: 
                            	  1541: 
                            	  1542: *             EA = (An)  - BYTE only
00:00000E20 7A00            	  1543:             move.l #0,d5              * populate bit.s number to test
00:00000E22 7C01            	  1544:             move.l #1,d6              * populate bit.s number to test
00:00000E24 7E07            	  1545:             move.l #7,d7              * populate bit.s number to test
00:00000E26 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E2A 10BC0000        	  1547:             move.b #$00,(a0)          * populate test data
00:00000E2E 0BD0            	  1548:             bset.b d5,(a0)
00:00000E30 66FE            	  1549:             bne.s *               * branch if Z clear
00:00000E32 0DD0            	  1550:             bset.b d6,(a0)            *
00:00000E34 66FE            	  1551:             bne.s *               * branch if Z clear
00:00000E36 0FD0            	  1552:             bset.b d7,(a0)            *
00:00000E38 66FE            	  1553:             bne.s *               * branch if Z clear
00:00000E3A 0C100083        	  1554:             cmpi.b #$83,(a0)
00:00000E3E 66FE            	  1555:             bne.s *               * branch if Z clear
                            	  1556: 
                            	  1557: 
                            	  1558: *             EA = (An)+  - BYTE only
00:00000E40 307C0100        	  1559:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E44 10FC0000        	  1560:             move.b #$00,(a0)+         * populate test data
00:00000E48 10FC0000        	  1561:             move.b #$00,(a0)+         * populate test data
00:00000E4C 10FC0000        	  1562:             move.b #$00,(a0)+         * populate test data
00:00000E50 307C0100        	  1563:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E54 0BD8            	  1564:             bset.b d5,(a0)+
00:00000E56 66FE            	  1565:             bne.s *               * branch if Z clear
00:00000E58 0DD8            	  1566:             bset.b d6,(a0)+           *
00:00000E5A 66FE            	  1567:             bne.s *               * branch if Z clear
00:00000E5C 0FD8            	  1568:             bset.b d7,(a0)+           *
00:00000E5E 66FE            	  1569:             bne.s *               * branch if Z clear
00:00000E60 307C0100        	  1570:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000E64 0C180001        	  1571:             cmpi.b #$01,(a0)+
00:00000E68 66FE            	  1572:             bne.s *               * branch if Z clear
00:00000E6A 0C180002        	  1573:             cmpi.b #$02,(a0)+
00:00000E6E 66FE            	  1574:             bne.s *               * branch if Z clear
00:00000E70 0C180080        	  1575:             cmpi.b #$80,(a0)+
00:00000E74 66FE            	  1576:             bne.s *               * branch if Z clear
                            	  1577: 
                            	  1578: *             EA = -(An)  - BYTE only
00:00000E76 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
00:00000E7A 10FC0000        	  1580:             move.b #$00,(a0)+         * populate test data
00:00000E7E 10FC0000        	  1581:             move.b #$00,(a0)+         * populate test data
00:00000E82 10FC0000        	  1582:             move.b #$00,(a0)+         * populate test data
00:00000E86 307C0103        	  1583:             move.l #$00000103,a0      * point to memory to address
00:00000E8A 0BE0            	  1584:             bset.b d5,-(a0)
00:00000E8C 66FE            	  1585:             bne.s *               * branch if Z clear
00:00000E8E 0DE0            	  1586:             bset.b d6,-(a0)           *
00:00000E90 66FE            	  1587:             bne.s *               * branch if Z clear
00:00000E92 0FE0            	  1588:             bset.b d7,-(a0)           *
00:00000E94 66FE            	  1589:             bne.s *               * branch if Z clear
00:00000E96 307C0103        	  1590:             move.l #$00000103,a0      * point to memory to address 0x100
00:00000E9A 0C200001        	  1591:             cmpi.b #$01,-(a0)
00:00000E9E 66FE            	  1592:             bne.s *               * branch if Z clear
00:00000EA0 0C200002        	  1593:             cmpi.b #$02,-(a0)
00:00000EA4 66FE            	  1594:             bne.s *               * branch if Z clear
00:00000EA6 0C200080        	  1595:             cmpi.b #$80,-(a0)
00:00000EAA 66FE            	  1596:             bne.s *               * branch if Z clear
                            	  1597: 
                            	  1598: *             EA = n(An)  - BYTE only
00:00000EAC 307C0100        	  1599:             move.l #$00000100,a0      * point to memory to address
00:00000EB0 10FC0000        	  1600:             move.b #$00,(a0)+         * populate test data
00:00000EB4 10FC0000        	  1601:             move.b #$00,(a0)+         * populate test data
00:00000EB8 10FC0000        	  1602:             move.b #$00,(a0)+         * populate test data
00:00000EBC 307C0100        	  1603:             move.l #$00000100,a0      * point to memory to address
00:00000EC0 0BD0            	  1604:             bset.b d5,0(a0)
00:00000EC2 66FE            	  1605:             bne.s *               * branch if Z clear
00:00000EC4 0DE80001        	  1606:             bset.b d6,1(a0)           *
00:00000EC8 66FE            	  1607:             bne.s *               * branch if Z clear
00:00000ECA 0FE80002        	  1608:             bset.b d7,2(a0)           *
00:00000ECE 66FE            	  1609:             bne.s *               * branch if Z clear
00:00000ED0 307C0100        	  1610:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000ED4 0C180001        	  1611:             cmpi.b #$01,(a0)+
00:00000ED8 66FE            	  1612:             bne.s *               * branch if Z clear
00:00000EDA 0C180002        	  1613:             cmpi.b #$02,(a0)+
00:00000EDE 66FE            	  1614:             bne.s *               * branch if Z clear
00:00000EE0 0C180080        	  1615:             cmpi.b #$80,(a0)+
00:00000EE4 66FE            	  1616:             bne.s *               * branch if Z clear
                            	  1617: 
                            	  1618: *             EA = n(An,R.W)  - BYTE only
00:00000EE6 307C0100        	  1619:             move.l #$00000100,a0      * point to memory to address
00:00000EEA 10FC0000        	  1620:             move.b #$00,(a0)+         * populate test data
00:00000EEE 10FC0000        	  1621:             move.b #$00,(a0)+         * populate test data
00:00000EF2 10FC0000        	  1622:             move.b #$00,(a0)+         * populate test data
00:00000EF6 10FC0000        	  1623:             move.b #$00,(a0)+         * populate test data
00:00000EFA 10FC0000        	  1624:             move.b #$00,(a0)+         * populate test data
00:00000EFE 10FC0000        	  1625:             move.b #$00,(a0)+         * populate test data
00:00000F02 10FC0000        	  1626:             move.b #$00,(a0)+         * populate test data
00:00000F06 10FC0000        	  1627:             move.b #$00,(a0)+         * populate test data
00:00000F0A 10FC0000        	  1628:             move.b #$00,(a0)+         * populate test data
00:00000F0E 10FC0000        	  1629:             move.b #$00,(a0)+         * populate test data
00:00000F12 10FC0000        	  1630:             move.b #$00,(a0)+         * populate test data
00:00000F16 10FC0000        	  1631:             move.b #$00,(a0)+         * populate test data
00:00000F1A 307C0100        	  1632:             move.l #$00000100,a0      * point to memory to address
00:00000F1E 93C9            	  1633:             move.l #$00000000,a1      * point to memory to address
00:00000F20 347C0001        	  1634:             move.l #$00000001,a2      * point to memory to address
00:00000F24 7000            	  1635:             moveq  #$00000000,d0      * point to memory to address
00:00000F26 7201            	  1636:             moveq  #$00000001,d1      * point to memory to address
00:00000F28 0BF00000        	  1637:             bset.b d5,0(a0,d0.w)
00:00000F2C 66FE            	  1638:             bne.s *               * branch if Z clear
00:00000F2E 0DF01000        	  1639:             bset.b d6,0(a0,d1.w)      *
00:00000F32 66FE            	  1640:             bne.s *               * branch if Z clear
00:00000F34 0FF01001        	  1641:             bset.b d7,1(a0,d1.w)      *
00:00000F38 66FE            	  1642:             bne.s *               * branch if Z clear
                            	  1643: *             EA = n(An,R.L)  - BYTE only
00:00000F3A 0BF00802        	  1644:             bset.b d5,2(a0,d0.l)
00:00000F3E 66FE            	  1645:             bne.s *               * branch if Z clear
00:00000F40 0DF01803        	  1646:             bset.b d6,3(a0,d1.l)      *
00:00000F44 66FE            	  1647:             bne.s *               * branch if Z clear
00:00000F46 0FF01804        	  1648:             bset.b d7,4(a0,d1.l)      *
00:00000F4A 66FE            	  1649:             bne.s *               * branch if Z clear
                            	  1650: *             EA = n(An,A.W)  - BYTE only
00:00000F4C 0BF09005        	  1651:             bset.b d5,5(a0,a1.w)
00:00000F50 66FE            	  1652:             bne.s *               * branch if Z clear
00:00000F52 0DF0A006        	  1653:             bset.b d6,6(a0,a2.w)      *
00:00000F56 66FE            	  1654:             bne.s *               * branch if Z clear
00:00000F58 0FF0A007        	  1655:             bset.b d7,7(a0,a2.w)      *
00:00000F5C 66FE            	  1656:             bne.s *               * branch if Z clear
                            	  1657: *             EA = n(An,A.L)  - BYTE only
00:00000F5E 0BF09808        	  1658:             bset.b d5,8(a0,a1.l)
00:00000F62 66FE            	  1659:             bne.s *               * branch if Z clear
00:00000F64 0DF0A809        	  1660:             bset.b d6,9(a0,a2.l)      *
00:00000F68 66FE            	  1661:             bne.s *               * branch if Z clear
00:00000F6A 0FF0A80A        	  1662:             bset.b d7,10(a0,a2.l)      *
00:00000F6E 66FE            	  1663:             bne.s *               * branch if Z clear
00:00000F70 307C0100        	  1664:             move.l #$00000100,a0      * point to memory to address 0x100
00:00000F74 0C9801028100    	  1665:             cmpi.l #$01028100,(a0)+
00:00000F7A 66FE            	  1666:             bne.s *               * branch if Z clear
00:00000F7C 0C9802810002    	  1667:             cmpi.l #$02810002,(a0)+
00:00000F82 66FE            	  1668:             bne.s *
                            	  1669: 
                            	  1670: 
                            	  1671: *             EA = x.W  - BYTE only
00:00000F84 307C0100        	  1672:             move.l #$00000100,a0      * point to memory to address
00:00000F88 10FC0000        	  1673:             move.b #$00,(a0)+         * populate test data
00:00000F8C 10FC0000        	  1674:             move.b #$00,(a0)+         * populate test data
00:00000F90 10FC0000        	  1675:             move.b #$00,(a0)+         * populate test data
00:00000F94 0BF80100        	  1676:             bset.b d5,$0100
00:00000F98 66FE            	  1677:             bne.s *               * branch if Z clear
00:00000F9A 0DF80100        	  1678:             bset.b d6,$0100           *
00:00000F9E 66FE            	  1679:             bne.s *               * branch if Z clear
00:00000FA0 0FF80100        	  1680:             bset.b d7,$0100           *
00:00000FA4 66FE            	  1681:             bne.s *               * branch if Z clear
00:00000FA6 307C0100        	  1682:             move.l #$00000100,a0      * point to memory to address
00:00000FAA 0C180083        	  1683:             cmpi.b #$83,(a0)+
00:00000FAE 66FE            	  1684:             bne.s *               * branch if Z clear
                            	  1685: 
                            	  1686: *             EA = x.L  - BYTE only
00:00000FB0 207C0000F100    	  1687:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FB6 10FC0000        	  1688:             move.b #$00,(a0)+         * populate test data
00:00000FBA 10FC0000        	  1689:             move.b #$00,(a0)+         * populate test data
00:00000FBE 10FC0000        	  1690:             move.b #$00,(a0)+         * populate test data
00:00000FC2 0BF90000F100    	  1691:             bset.b d5,$F100
00:00000FC8 66FE            	  1692:             bne.s *               * branch if Z clear
00:00000FCA 0DF90000F100    	  1693:             bset.b d6,$F100       *
00:00000FD0 66FE            	  1694:             bne.s *               * branch if Z clear
00:00000FD2 0FF90000F100    	  1695:             bset.b d7,$F100       *
00:00000FD8 66FE            	  1696:             bne.s *               * branch if Z clear
00:00000FDA 207C0000F100    	  1697:             move.l #$F100,a0      * point to memory to address 0x100
00:00000FE0 0C100083        	  1698:             cmpi.b #$83,(a0)
00:00000FE4 66FE            	  1699:             bne.s *               * branch if Z clear
                            	  1700: 
                            	  1701: 
00:00000FE6 4E75            	  1702:     rts
                            	  1703: 
                            	  1704: *-----------------------------------------------------------
                            	  1705: *-----------------------------------------------------------
                            	  1706: * OPCODE : MOVEP
                            	  1707: *-----------------------------------------------------------
                            	  1708: *-----------------------------------------------------------
                            	  1709: op_MOVEP:
                            	  1710: 
                            	  1711: * Dn --> x(An)
00:00000FE8 307C0100        	  1712:             move.l #$00000100,a0
00:00000FEC 203C12345678    	  1713:             move.l #$12345678,d0
00:00000FF2 223CAABBCCDD    	  1714:             move.l #$AABBCCDD,d1
00:00000FF8 20BC00000000    	  1715:             move.l #0,(a0)
00:00000FFE 217C000000000004	  1716:             move.l #0,4(a0)
                            	  1717: 
00:00001006 01880000        	  1718:             movep.w d0,0(a0)      * even offset
00:0000100A 03880001        	  1719:             movep.w d1,1(a0)      * odd offset
                            	  1720: 
00:0000100E 01C80004        	  1721:             movep.l d0,4(a0)      * even offset
00:00001012 03C80005        	  1722:             movep.l d1,5(a0)      * odd offset
                            	  1723: 
00:00001016 0C9056CC78DD    	  1724:             cmpi.l #$56CC78DD,(a0)
00:0000101C 66FE            	  1725:             bne.s *
00:0000101E 0CA812AA34BB0004	  1726:             cmpi.l #$12AA34BB,4(a0)
00:00001026 66FE            	  1727:             bne.s *
00:00001028 0CA856CC78DD0008	  1728:             cmpi.l #$56CC78DD,8(a0)
00:00001030 66FE            	  1729:             bne.s *
                            	  1730: 
                            	  1731: 
                            	  1732: * x(An)--> Dn
00:00001032 203C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d0
00:00001038 223C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d1
00:0000103E 243C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d2
00:00001044 263C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d3
                            	  1737: 
00:0000104A 01080000        	  1738:             movep.w 0(a0),d0      * even offset
00:0000104E 03080001        	  1739:             movep.w 1(a0),d1      * odd offset
                            	  1740: 
00:00001052 05480004        	  1741:             movep.l 4(a0),d2      * even offset
00:00001056 07480005        	  1742:             movep.l 5(a0),d3      * odd offset
                            	  1743: 
00:0000105A 0C805A5A5678    	  1744:             cmpi.l #$5a5a5678,d0
00:00001060 66FE            	  1745:             bne.s *
00:00001062 0C815A5ACCDD    	  1746:             cmpi.l #$5a5aCCDD,d1
00:00001068 66FE            	  1747:             bne.s *
00:0000106A 0C8212345678    	  1748:             cmpi.l #$12345678,d2
00:00001070 66FE            	  1749:             bne.s *
00:00001072 0C83AABBCCDD    	  1750:             cmpi.l #$AABBCCDD,d3
00:00001078 66FE            	  1751:             bne.s *
                            	  1752: 
00:0000107A 4E75            	  1753:             rts
                            	  1754: 
                            	  1755: 
                            	  1756: 
                            	  1757: *-----------------------------------------------------------
                            	  1758: *-----------------------------------------------------------
                            	  1759: * OPCODE : BOOL_I
                            	  1760: *-----------------------------------------------------------
                            	  1761: *-----------------------------------------------------------
                            	  1762: op_BOOL_I:
                            	  1763: 
                            	  1764: *     Dn -- BYTE
00:0000107C 203C12345678    	  1765:             move.l #$12345678,d0
00:00001082 44FC000F        	  1766:             move.w #$000F,CCR          * pre-set Flags
00:00001086 000000FF        	  1767:             ori.b  #$FF,d0
00:0000108A 0A00005A        	  1768:             eori.b #$5A,d0
00:0000108E 020000F0        	  1769:             andi.b #$F0,d0
00:00001092 69FE            	  1770:             bvs.s *                       * Check V,C are cleared
00:00001094 65FE            	  1771:             bcs.s *
00:00001096 6AFE            	  1772:             bpl.s *                       * Verify if N flag is set
00:00001098 02000000        	  1773:             andi.b #$00,d0
00:0000109C 6BFE            	  1774:             bmi.s *                       * Verify if N flag is cleared
00:0000109E 66FE            	  1775:             bne.s *                       * Verify if Z flag is set
                            	  1776: 
                            	  1777: *     Dn -- WORD
00:000010A0 223C12345678    	  1778:             move.l #$12345678,d1
00:000010A6 44FC000F        	  1779:             move.w #$000F,CCR          * pre-set Flags
00:000010AA 0041FFFF        	  1780:             ori.w  #$FFFF,d1
00:000010AE 0A415A5A        	  1781:             eori.w #$5A5A,d1
00:000010B2 0241F0F0        	  1782:             andi.w #$F0F0,d1
00:000010B6 69FE            	  1783:             bvs.s *                       * Check V,C are cleared
00:000010B8 65FE            	  1784:             bcs.s *
00:000010BA 6AFE            	  1785:             bpl.s *                       * Verify if N flag is set
00:000010BC 02410000        	  1786:             andi.w #$0000,d1
00:000010C0 6BFE            	  1787:             bmi.s *                       * Verify if N flag is cleared
00:000010C2 66FE            	  1788:             bne.s *                       * Verify if Z flag is set
                            	  1789: 
                            	  1790: *     Dn -- LONG
00:000010C4 243C12345678    	  1791:             move.l #$12345678,d2
00:000010CA 44FC000F        	  1792:             move.w #$000F,CCR          * pre-set Flags
00:000010CE 0082FFFFFFFF    	  1793:             ori.l  #$FFFFFFFF,d2
00:000010D4 0A825A5A5A5A    	  1794:             eori.l #$5A5A5A5A,d2
00:000010DA 0282F0F0F0F0    	  1795:             andi.l #$F0F0F0F0,d2
00:000010E0 69FE            	  1796:             bvs.s *                       * Check V,C are cleared
00:000010E2 65FE            	  1797:             bcs.s *
00:000010E4 6AFE            	  1798:             bpl.s *                       * Verify if N flag is set
00:000010E6 028200000000    	  1799:             andi.l #$00000000,d2
00:000010EC 6BFE            	  1800:             bmi.s *                       * Verify if N flag is cleared
00:000010EE 66FE            	  1801:             bne.s *                       * Verify if Z flag is set
                            	  1802: 
                            	  1803: 
                            	  1804: *     (An) -- BYTE
00:000010F0 307C0100        	  1805:             move.l #$00000100,a0
00:000010F4 20BC12345678    	  1806:             move.l #$12345678,(a0)
00:000010FA 44FC000F        	  1807:             move.w #$000F,CCR          * pre-set Flags
00:000010FE 001000FF        	  1808:             ori.b  #$FF,(a0)
00:00001102 0A10005A        	  1809:             eori.b #$5A,(a0)
00:00001106 021000F0        	  1810:             andi.b #$F0,(a0)
00:0000110A 69FE            	  1811:             bvs.s *                       * Check V,C are cleared
00:0000110C 65FE            	  1812:             bcs.s *
00:0000110E 6AFE            	  1813:             bpl.s *                       * Verify if N flag is set
00:00001110 02100000        	  1814:             andi.b #$00,(a0)
00:00001114 6BFE            	  1815:             bmi.s *                       * Verify if N flag is cleared
00:00001116 66FE            	  1816:             bne.s *                       * Verify if Z flag is set
00:00001118 4A10            	  1817:             cmpi.b #$00,(a0)
00:0000111A 66FE            	  1818:             bne.s *                       * Verify if Z flag is set
                            	  1819: 
                            	  1820: *     (An) -- WORD
00:0000111C 20BC12345678    	  1821:             move.l #$12345678,(a0)
00:00001122 44FC000F        	  1822:             move.w #$000F,CCR          * pre-set Flags
00:00001126 0050FFFF        	  1823:             ori.w  #$FFFF,(a0)
00:0000112A 0A505A5A        	  1824:             eori.w #$5A5A,(a0)
00:0000112E 0250F0F0        	  1825:             andi.w #$F0F0,(a0)
00:00001132 69FE            	  1826:             bvs.s *                       * Check V,C are cleared
00:00001134 65FE            	  1827:             bcs.s *
00:00001136 6AFE            	  1828:             bpl.s *                       * Verify if N flag is set
00:00001138 02500000        	  1829:             andi.w #$0000,(a0)
00:0000113C 6BFE            	  1830:             bmi.s *                       * Verify if N flag is cleared
00:0000113E 66FE            	  1831:             bne.s *                       * Verify if Z flag is set
00:00001140 4A50            	  1832:             cmpi.w #$00,(a0)
00:00001142 66FE            	  1833:             bne.s *                       * Verify if Z flag is set
                            	  1834: 
                            	  1835: *     (An) -- LONG
00:00001144 20BC12345678    	  1836:             move.l #$12345678,(a0)
00:0000114A 44FC000F        	  1837:             move.w #$000F,CCR          * pre-set Flags
00:0000114E 0090FFFFFFFF    	  1838:             ori.l  #$FFFFFFFF,(a0)
00:00001154 0A905A5A5A5A    	  1839:             eori.l #$5A5A5A5A,(a0)
00:0000115A 0290F0F0F0F0    	  1840:             andi.l #$F0F0F0F0,(a0)
00:00001160 69FE            	  1841:             bvs.s *                       * Check V,C are cleared
00:00001162 65FE            	  1842:             bcs.s *
00:00001164 6AFE            	  1843:             bpl.s *                       * Verify if N flag is set
00:00001166 029000000000    	  1844:             andi.l #$00000000,(a0)
00:0000116C 6BFE            	  1845:             bmi.s *                       * Verify if N flag is cleared
00:0000116E 66FE            	  1846:             bne.s *                       * Verify if Z flag is set
00:00001170 4A90            	  1847:             cmpi.l #$00,(a0)
00:00001172 66FE            	  1848:             bne.s *                       * Verify if Z flag is set
                            	  1849: 
                            	  1850: 
                            	  1851: 
                            	  1852: *     (An)+ -- BYTE
00:00001174 307C0100        	  1853:             move.l #$00000100,a0
00:00001178 20BC00A5FF88    	  1854:             move.l #$00A5FF88,(a0)
00:0000117E 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
00:00001182 001800F5        	  1857:             ori.b  #$F5,(a0)+
00:00001186 6AFE            	  1858:             bpl.s *                       * Verify if N flag is set
00:00001188 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
00:0000118A 4618            	  1861:             eori.b #$FF,(a0)+
00:0000118C 6BFE            	  1862:             bmi.s *                       * Verify if N flag is cleared
00:0000118E 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
00:00001190 021800AA        	  1865:             andi.b #$AA,(a0)+
00:00001194 6AFE            	  1866:             bpl.s *                       * Verify if N flag is set
00:00001196 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
00:00001198 307C0100        	  1869:             move.l #$00000100,a0
00:0000119C 0C90F55AAA88    	  1870:             cmpi.l #$F55AAA88,(a0)
00:000011A2 66FE            	  1871:             bne.s *                       * Verify if Z flag is set
                            	  1872: 
                            	  1873: 
                            	  1874: *     (An)+ -- WORD
00:000011A4 307C0100        	  1875:             move.l #$00000100,a0
00:000011A8 327C0104        	  1876:             move.l #$00000104,a1
00:000011AC 20BC00005A5A    	  1877:             move.l #$00005a5a,(a0)
00:000011B2 22BC12345678    	  1878:             move.l #$12345678,(a1)
00:000011B8 44FC000F        	  1879:             move.w #$000F,CCR          * pre-set Flags
                            	  1880: 
00:000011BC 00585678        	  1881:             ori.w  #$5678,(a0)+
00:000011C0 6BFE            	  1882:             bmi.s *                       * Verify if N flag is cleared
00:000011C2 67FE            	  1883:             beq.s *                       * Verify if Z flag is cleared
                            	  1884: 
00:000011C4 4658            	  1885:             eori.w #$FFFF,(a0)+
00:000011C6 6AFE            	  1886:             bpl.s *                       * Verify if N flag is set
00:000011C8 67FE            	  1887:             beq.s *                       * Verify if Z flag is cleared
                            	  1888: 
00:000011CA 0258A55A        	  1889:             andi.w #$A55A,(a0)+
00:000011CE 6BFE            	  1890:             bmi.s *                       * Verify if N flag is cleared
00:000011D0 67FE            	  1891:             beq.s *                       * Verify if Z flag is cleared
                            	  1892: 
00:000011D2 307C0100        	  1893:             move.l #$00000100,a0
00:000011D6 0C905678A5A5    	  1894:             cmpi.l #$5678a5a5,(a0)
00:000011DC 307C0104        	  1895:             move.l #$00000104,a0
00:000011E0 0C9000105678    	  1896:             cmpi.l #$00105678,(a0)
00:000011E6 66FE            	  1897:             bne.s *                       * Verify if Z flag is set
                            	  1898: 
                            	  1899: *     (An)+ -- LONG
00:000011E8 307C0100        	  1900:             move.l #$00000100,a0
00:000011EC 20FC00000000    	  1901:             move.l #$00000000,(a0)+
00:000011F2 20FC5A5A5A5A    	  1902:             move.l #$5a5a5a5a,(a0)+
00:000011F8 20FCFFFFFFFF    	  1903:             move.l #$FFFFFFFF,(a0)+
00:000011FE 307C0100        	  1904:             move.l #$00000100,a0
00:00001202 44FC000F        	  1905:             move.w #$000F,CCR          * pre-set Flags
                            	  1906: 
00:00001206 009812345678    	  1907:             ori.l  #$12345678,(a0)+
00:0000120C 6BFE            	  1908:             bmi.s *                       * Verify if N flag is cleared
00:0000120E 67FE            	  1909:             beq.s *                       * Verify if Z flag is cleared
                            	  1910: 
00:00001210 4698            	  1911:             eori.l #$FFFFFFFF,(a0)+
00:00001212 6AFE            	  1912:             bpl.s *                       * Verify if N flag is set
00:00001214 67FE            	  1913:             beq.s *                       * Verify if Z flag is cleared
                            	  1914: 
00:00001216 0298A5A5A55A    	  1915:             andi.l #$A5A5A55A,(a0)+
00:0000121C 6AFE            	  1916:             bpl.s *                       * Verify if N flag is set
00:0000121E 67FE            	  1917:             beq.s *                       * Verify if Z flag is cleared
                            	  1918: 
00:00001220 307C0100        	  1919:             move.l #$00000100,a0
00:00001224 0C9812345678    	  1920:             cmpi.l #$12345678,(a0)+
00:0000122A 0C98A5A5A5A5    	  1921:             cmpi.l #$a5a5a5a5,(a0)+
00:00001230 0C98A5A5A55A    	  1922:             cmpi.l #$a5a5a55a,(a0)+
00:00001236 66FE            	  1923:             bne.s *                       * Verify if Z flag is set
                            	  1924: 
00:00001238 4E75            	  1925:             rts
                            	  1926: 
                            	  1927: 
                            	  1928: *-----------------------------------------------------------
                            	  1929: *-----------------------------------------------------------
                            	  1930: * OPCODE : BSR
                            	  1931: *-----------------------------------------------------------
                            	  1932: *-----------------------------------------------------------
                            	  1933: 
                            	  1934: 
00:0000123A 223C11111111    	  1935: BSR_CLOSE1:     move.l #$11111111,d1
00:00001240 4E75            	  1936:                 rts
                            	  1937: 
                            	  1938: 
                            	  1939: 
00:00001242 61F6            	  1940: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:00001244 612A            	  1941:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:00001246 6100EE90        	  1942:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:0000124A 6100145A        	  1943:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1944: 
00:0000124E 0C8111111111    	  1945:                 cmpi.l #$11111111,d1
00:00001254 66FE            	  1946:                 bne.s *
00:00001256 0C8222222222    	  1947:                 cmpi.l #$22222222,d2
00:0000125C 66FE            	  1948:                 bne.s *
00:0000125E 0C8333333333    	  1949:                 cmpi.l #$33333333,d3
00:00001264 66FE            	  1950:                 bne.s *
00:00001266 0C8444444444    	  1951:                 cmpi.l #$44444444,d4
00:0000126C 66FE            	  1952:                 bne.s *
                            	  1953: 
00:0000126E 4E75            	  1954:                 rts
                            	  1955: 
                            	  1956: 
00:00001270 243C22222222    	  1957: BSR_CLOSE2:     move.l #$22222222,d2
00:00001276 4E75            	  1958:                 rts
                            	  1959: 
                            	  1960: *-----------------------------------------------------------
                            	  1961: *-----------------------------------------------------------
                            	  1962: * OPCODE : op_CMP_I
                            	  1963: *-----------------------------------------------------------
                            	  1964: *-----------------------------------------------------------
                            	  1965: op_CMP_I:
                            	  1966: 
00:00001278 307C0100        	  1967:             move.l #$00000100,a0
00:0000127C 20BC00000100    	  1968:             move.l #$00000100,(a0)
                            	  1969: 
                            	  1970: *     REGISTER - BYTE
00:00001282 7080            	  1971:             move.l #$FFFFFF80,d0
00:00001284 0C000080        	  1972:             cmpi.b #$80,d0
00:00001288 66FE            	  1973:             bne.s *                       * Check Z Flag  beq/bne
00:0000128A 6BFE            	  1974:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000128C 65FE            	  1975:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000128E 69FE            	  1976:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1977: 
00:00001290 223CFFFFF000    	  1978:             move.l #$FFFFF000,d1
00:00001296 4A01            	  1979:             cmpi.b #$00,d1
00:00001298 66FE            	  1980:             bne.s *                       * Check Z Flag  beq/bne
00:0000129A 6BFE            	  1981:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000129C 65FE            	  1982:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000129E 69FE            	  1983:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1984: 
00:000012A0 7481D442        	  1985:             move.l #$FFFFFF02,d2
00:000012A4 0C0200FF        	  1986:             cmpi.b #$FF,d2
00:000012A8 67FE            	  1987:             beq.s *                       * Check Z Flag  beq/bne
00:000012AA 6BFE            	  1988:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012AC 64FE            	  1989:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012AE 69FE            	  1990:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1991: 
00:000012B0 263CFFFFFF7F    	  1992:             move.l #$FFFFFF7F,d3
00:000012B6 0C0300FF        	  1993:             cmpi.b #$FF,d3
00:000012BA 67FE            	  1994:             beq.s *                       * Check Z Flag  beq/bne
00:000012BC 6AFE            	  1995:             bpl.s *                       * Check N Flag  bmi/bpl
00:000012BE 64FE            	  1996:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012C0 68FE            	  1997:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1998: 
                            	  1999: 
                            	  2000: *     REGISTER - WORD
00:000012C2 203CFFFF8000    	  2001:             move.l #$FFFF8000,d0
00:000012C8 0C408000        	  2002:             cmpi.w #$8000,d0
00:000012CC 66FE            	  2003:             bne.s *                       * Check Z Flag  beq/bne
00:000012CE 6BFE            	  2004:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012D0 65FE            	  2005:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012D2 69FE            	  2006:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2007: 
00:000012D4 223CFFF00000    	  2008:             move.l #$FFF00000,d1
00:000012DA 4A41            	  2009:             cmpi.w #$0000,d1
00:000012DC 66FE            	  2010:             bne.s *                       * Check Z Flag  beq/bne
00:000012DE 6BFE            	  2011:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012E0 65FE            	  2012:             bcs.s *                       * Check C Flag  bcc/bcs
00:000012E2 69FE            	  2013:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2014: 
00:000012E4 243CFFFF0002    	  2015:             move.l #$FFFF0002,d2
00:000012EA 0C42FFFF        	  2016:             cmpi.w #$FFFF,d2
00:000012EE 67FE            	  2017:             beq.s *                       * Check Z Flag  beq/bne
00:000012F0 6BFE            	  2018:             bmi.s *                       * Check N Flag  bmi/bpl
00:000012F2 64FE            	  2019:             bcc.s *                       * Check C Flag  bcc/bcs
00:000012F4 69FE            	  2020:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2021: 
00:000012F6 263CFFFF7FFF    	  2022:             move.l #$FFFF7FFF,d3
00:000012FC 0C43FFFF        	  2023:             cmpi.w #$FFFF,d3
00:00001300 67FE            	  2024:             beq.s *                       * Check Z Flag  beq/bne
00:00001302 6AFE            	  2025:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001304 64FE            	  2026:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001306 68FE            	  2027:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2028: 
                            	  2029: *     REGISTER - LONG
00:00001308 203C80000000    	  2030:             move.l #$80000000,d0
00:0000130E 0C8080000000    	  2031:             cmpi.l #$80000000,d0
00:00001314 66FE            	  2032:             bne.s *                       * Check Z Flag  beq/bne
00:00001316 6BFE            	  2033:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001318 65FE            	  2034:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000131A 69FE            	  2035:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2036: 
00:0000131C 7200            	  2037:             moveq  #$00000000,d1
00:0000131E 4A81            	  2038:             cmpi.l #$00000000,d1
00:00001320 66FE            	  2039:             bne.s *                       * Check Z Flag  beq/bne
00:00001322 6BFE            	  2040:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001324 65FE            	  2041:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001326 69FE            	  2042:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2043: 
00:00001328 7402            	  2044:             moveq  #$00000002,d2
00:0000132A 0C82FFFFFFFF    	  2045:             cmpi.l #$FFFFFFFF,d2
00:00001330 67FE            	  2046:             beq.s *                       * Check Z Flag  beq/bne
00:00001332 6BFE            	  2047:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001334 64FE            	  2048:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001336 69FE            	  2049:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2050: 
00:00001338 263C7FFFFFFF    	  2051:             move.l #$7FFFFFFF,d3
00:0000133E 0C83FFFFFFFF    	  2052:             cmpi.l #$FFFFFFFF,d3
00:00001344 67FE            	  2053:             beq.s *                       * Check Z Flag  beq/bne
00:00001346 6AFE            	  2054:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001348 64FE            	  2055:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000134A 68FE            	  2056:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: *     EA=x(An,Dn) - BYTE
00:0000134C 307C0100        	  2062:             move.l #$00000100,a0
00:00001350 7E04            	  2063:             moveq  #$00000004,d7
                            	  2064: 
00:00001352 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
00:0000135A 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
00:00001362 0C300080700F    	  2067:             cmpi.b #$80,15(a0,d7)
00:00001368 66FE            	  2068:             bne.s *                       * Check Z Flag  beq/bne
00:0000136A 6BFE            	  2069:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000136C 65FE            	  2070:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000136E 69FE            	  2071:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2072: 
00:00001370 21BCFFFFF000700C	  2073:             move.l #$FFFFF000,12(a0,d7)
00:00001378 4A30700F        	  2074:             cmpi.b #$00,15(a0,d7)
00:0000137C 66FE            	  2075:             bne.s *                       * Check Z Flag  beq/bne
00:0000137E 6BFE            	  2076:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001380 65FE            	  2077:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001382 69FE            	  2078:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2079: 
00:00001384 21BCFFFFFF02700C	  2080:             move.l #$FFFFFF02,12(a0,d7)
00:0000138C 0C3000FF700F    	  2081:             cmpi.b #$FF,15(a0,d7)
00:00001392 67FE            	  2082:             beq.s *                       * Check Z Flag  beq/bne
00:00001394 6BFE            	  2083:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001396 64FE            	  2084:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001398 69FE            	  2085:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2086: 
00:0000139A 21BCFFFFFF7F700C	  2087:             move.l #$FFFFFF7F,12(a0,d7)
00:000013A2 0C3000FF700F    	  2088:             cmpi.b #$FF,15(a0,d7)
00:000013A8 67FE            	  2089:             beq.s *                       * Check Z Flag  beq/bne
00:000013AA 6AFE            	  2090:             bpl.s *                       * Check N Flag  bmi/bpl
00:000013AC 64FE            	  2091:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013AE 68FE            	  2092:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2093: 
                            	  2094: 
                            	  2095: *     EA=x(An,Dn) - WORD
00:000013B0 21BCFFFF8000700C	  2096:             move.l #$FFFF8000,12(a0,d7)
00:000013B8 0C708000700E    	  2097:             cmpi.w #$8000,14(a0,d7)
00:000013BE 66FE            	  2098:             bne.s *                       * Check Z Flag  beq/bne
00:000013C0 6BFE            	  2099:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013C2 65FE            	  2100:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013C4 69FE            	  2101:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2102: 
00:000013C6 21BCFFF00000700C	  2103:             move.l #$FFF00000,12(a0,d7)
00:000013CE 4A70700E        	  2104:             cmpi.w #$0000,14(a0,d7)
00:000013D2 66FE            	  2105:             bne.s *                       * Check Z Flag  beq/bne
00:000013D4 6BFE            	  2106:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013D6 65FE            	  2107:             bcs.s *                       * Check C Flag  bcc/bcs
00:000013D8 69FE            	  2108:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2109: 
00:000013DA 21BCFFFF0002700C	  2110:             move.l #$FFFF0002,12(a0,d7)
00:000013E2 0C70FFFF700E    	  2111:             cmpi.w #$FFFF,14(a0,d7)
00:000013E8 67FE            	  2112:             beq.s *                       * Check Z Flag  beq/bne
00:000013EA 6BFE            	  2113:             bmi.s *                       * Check N Flag  bmi/bpl
00:000013EC 64FE            	  2114:             bcc.s *                       * Check C Flag  bcc/bcs
00:000013EE 69FE            	  2115:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2116: 
00:000013F0 21BCFFFF7FFF700C	  2117:             move.l #$FFFF7FFF,12(a0,d7)
00:000013F8 0C70FFFF700E    	  2118:             cmpi.w #$FFFF,14(a0,d7)
00:000013FE 67FE            	  2119:             beq.s *                       * Check Z Flag  beq/bne
00:00001400 6AFE            	  2120:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001402 64FE            	  2121:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001404 68FE            	  2122:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2123: 
                            	  2124: *     EA=x(An,Dn) - LONG
00:00001406 21BC80000000700C	  2125:             move.l #$80000000,12(a0,d7)
00:0000140E 0CB080000000700C	  2126:             cmpi.l #$80000000,12(a0,d7)
00:00001416 66FE            	  2127:             bne.s *                       * Check Z Flag  beq/bne
00:00001418 6BFE            	  2128:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000141A 65FE            	  2129:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000141C 69FE            	  2130:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2131: 
00:0000141E 21BC00000000700C	  2132:             move.l #$00000000,12(a0,d7)
00:00001426 4AB0700C        	  2133:             cmpi.l #$00000000,12(a0,d7)
00:0000142A 66FE            	  2134:             bne.s *                       * Check Z Flag  beq/bne
00:0000142C 6BFE            	  2135:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000142E 65FE            	  2136:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001430 69FE            	  2137:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2138: 
00:00001432 21BC00000002700C	  2139:             move.l #$00000002,12(a0,d7)
00:0000143A 0CB0FFFFFFFF700C	  2140:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00001442 67FE            	  2141:             beq.s *                       * Check Z Flag  beq/bne
00:00001444 6BFE            	  2142:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001446 64FE            	  2143:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001448 69FE            	  2144:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2145: 
00:0000144A 21BC7FFFFFFF700C	  2146:             move.l #$7FFFFFFF,12(a0,d7)
00:00001452 0CB0FFFFFFFF700C	  2147:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:0000145A 67FE            	  2148:             beq.s *                       * Check Z Flag  beq/bne
00:0000145C 6AFE            	  2149:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000145E 64FE            	  2150:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001460 68FE            	  2151:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2152: 
                            	  2153: 
                            	  2154: 
                            	  2155: 
00:00001462 4E75            	  2156:             rts
                            	  2157: 
                            	  2158: 
                            	  2159: 
                            	  2160: *-----------------------------------------------------------
                            	  2161: *-----------------------------------------------------------
                            	  2162: * OPCODE : ADD_I
                            	  2163: *-----------------------------------------------------------
                            	  2164: *-----------------------------------------------------------
                            	  2165: op_ADD_I:
                            	  2166: 
                            	  2167: *     EA = Dn  - Byte
00:00001464 203C12345678    	  2168:             move.l #$12345678,d0      * populate test data
00:0000146A 06000000        	  2169:             addi.b #0,d0
00:0000146E 67FE            	  2170:             beq.s *                       * Check Z Flag  beq/bne
00:00001470 6BFE            	  2171:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001472 65FE            	  2172:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001474 69FE            	  2173:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001476 06000010        	  2174:             addi.b #$10,d0
00:0000147A 67FE            	  2175:             beq.s *                       * Check Z Flag  beq/bne
00:0000147C 6AFE            	  2176:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000147E 65FE            	  2177:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001480 68FE            	  2178:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001482 060000A5        	  2179:             addi.b #$A5,d0
00:00001486 67FE            	  2180:             beq.s *                       * Check Z Flag  beq/bne
00:00001488 6BFE            	  2181:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000148A 64FE            	  2182:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000148C 68FE            	  2183:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000148E 0C00002D        	  2184:             cmpi.b #$2D,d0
00:00001492 66FE            	  2185:             bne.s *                       * Check Z Flag  beq/bne
                            	  2186: 
                            	  2187: *     EA = Dn  - WORD
00:00001494 203C12345678    	  2188:             move.l #$12345678,d0      * populate test data
00:0000149A 06400000        	  2189:             addi.w #0,d0
00:0000149E 67FE            	  2190:             beq.s *                       * Check Z Flag  beq/bne
00:000014A0 6BFE            	  2191:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014A2 65FE            	  2192:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014A4 69FE            	  2193:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014A6 06407000        	  2194:             addi.w #$7000,d0
00:000014AA 67FE            	  2195:             beq.s *                       * Check Z Flag  beq/bne
00:000014AC 6AFE            	  2196:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014AE 65FE            	  2197:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014B0 68FE            	  2198:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014B2 0640A55A        	  2199:             addi.w #$A55A,d0
00:000014B6 67FE            	  2200:             beq.s *                       * Check Z Flag  beq/bne
00:000014B8 6BFE            	  2201:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014BA 64FE            	  2202:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014BC 68FE            	  2203:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014BE 0C406BD2        	  2204:             cmpi.w #$6BD2,d0
00:000014C2 66FE            	  2205:             bne.s *                       * Check Z Flag  beq/bne
                            	  2206: 
                            	  2207: *     EA = Dn  - LONG
00:000014C4 203C12345678    	  2208:             move.l #$12345678,d0      * populate test data
00:000014CA 068000000000    	  2209:             addi.l #0,d0
00:000014D0 67FE            	  2210:             beq.s *                       * Check Z Flag  beq/bne
00:000014D2 6BFE            	  2211:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014D4 65FE            	  2212:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014D6 69FE            	  2213:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014D8 0680F0000000    	  2214:             addi.l #$F0000000,d0
00:000014DE 67FE            	  2215:             beq.s *                       * Check Z Flag  beq/bne
00:000014E0 6BFE            	  2216:             bmi.s *                       * Check N Flag  bmi/bpl
00:000014E2 64FE            	  2217:             bcc.s *                       * Check C Flag  bcc/bcs
00:000014E4 69FE            	  2218:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014E6 0680855AA55A    	  2219:             addi.l #$855AA55A,d0
00:000014EC 67FE            	  2220:             beq.s *                       * Check Z Flag  beq/bne
00:000014EE 6AFE            	  2221:             bpl.s *                       * Check N Flag  bmi/bpl
00:000014F0 65FE            	  2222:             bcs.s *                       * Check C Flag  bcc/bcs
00:000014F2 69FE            	  2223:             bvs.s *                       * Check V Flag  bvc/bvs
00:000014F4 0680A0000000    	  2224:             addi.l #$A0000000,d0
00:000014FA 68FE            	  2225:             bvc.s *                       * Check V Flag  bvc/bvs
00:000014FC 0C80278EFBD2    	  2226:             cmpi.l #$278EFBD2,d0
00:00001502 66FE            	  2227:             bne.s *                       * Check Z Flag  beq/bne
                            	  2228: 
                            	  2229: 
                            	  2230: 
                            	  2231: *     EA = x.L  - Byte
00:00001504 207C0000F100    	  2232:             move.l #$F100,a0      * populate test data
00:0000150A 20BC12345678    	  2233:             move.l #$12345678,(a0)     * populate test data
00:00001510 063900000000F103	  2234:             addi.b #0,$F103
00:00001518 67FE            	  2235:             beq.s *                       * Check Z Flag  beq/bne
00:0000151A 6BFE            	  2236:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000151C 65FE            	  2237:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000151E 69FE            	  2238:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001520 063900100000F103	  2239:             addi.b #$10,$F103
00:00001528 67FE            	  2240:             beq.s *                       * Check Z Flag  beq/bne
00:0000152A 6AFE            	  2241:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000152C 65FE            	  2242:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000152E 68FE            	  2243:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001530 063900A50000F103	  2244:             addi.b #$A5,$F103
00:00001538 67FE            	  2245:             beq.s *                       * Check Z Flag  beq/bne
00:0000153A 6BFE            	  2246:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000153C 64FE            	  2247:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000153E 68FE            	  2248:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001540 0C39002D0000F103	  2249:             cmpi.b #$2D,$F103
00:00001548 66FE            	  2250:             bne.s *                       * Check Z Flag  beq/bne
                            	  2251: 
                            	  2252: *     EA = x.L- WORD
00:0000154A 207C0000F100    	  2253:             move.l #$F100,a0      * populate test data
00:00001550 20BC12345678    	  2254:             move.l #$12345678,(a0)     * populate test data
00:00001556 067900000000F100	  2255:             addi.w #0,$F100
00:0000155E 67FE            	  2256:             beq.s *                       * Check Z Flag  beq/bne
00:00001560 6BFE            	  2257:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001562 65FE            	  2258:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001564 69FE            	  2259:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001566 067970000000F100	  2260:             addi.w #$7000,$F100
00:0000156E 67FE            	  2261:             beq.s *                       * Check Z Flag  beq/bne
00:00001570 6AFE            	  2262:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001572 65FE            	  2263:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001574 68FE            	  2264:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001576 0679A55A0000F100	  2265:             addi.w #$A55A,$F100
00:0000157E 67FE            	  2266:             beq.s *                       * Check Z Flag  beq/bne
00:00001580 6BFE            	  2267:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001582 64FE            	  2268:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001584 68FE            	  2269:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001586 0C79278E0000F100	  2270:             cmpi.w #$278E,$F100
00:0000158E 66FE            	  2271:             bne.s *                       * Check Z Flag  beq/bne
                            	  2272: 
                            	  2273: *     EA = x.L- LONG
00:00001590 23FC123456780000	  2274:             move.l #$12345678,$F100  * populate test data
00:00001598 F100
00:0000159A 06B9000000000000	  2275:             addi.l #0,$F100
00:000015A2 F100
00:000015A4 67FE            	  2276:             beq.s *                       * Check Z Flag  beq/bne
00:000015A6 6BFE            	  2277:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015A8 65FE            	  2278:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015AA 69FE            	  2279:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015AC 06B9F00000000000	  2280:             addi.l #$F0000000,$F100
00:000015B4 F100
00:000015B6 67FE            	  2281:             beq.s *                       * Check Z Flag  beq/bne
00:000015B8 6BFE            	  2282:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015BA 64FE            	  2283:             bcc.s *                       * Check C Flag  bcc/bcs
00:000015BC 69FE            	  2284:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015BE 06B9855AA55A0000	  2285:             addi.l #$855AA55A,$F100
00:000015C6 F100
00:000015C8 67FE            	  2286:             beq.s *                       * Check Z Flag  beq/bne
00:000015CA 6AFE            	  2287:             bpl.s *                       * Check N Flag  bmi/bpl
00:000015CC 65FE            	  2288:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015CE 69FE            	  2289:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015D0 06B9A00000000000	  2290:             addi.l #$A0000000,$F100
00:000015D8 F100
00:000015DA 68FE            	  2291:             bvc.s *                       * Check V Flag  bvc/bvs
00:000015DC 0CB9278EFBD20000	  2292:             cmpi.l #$278EFBD2,$F100
00:000015E4 F100
00:000015E6 66FE            	  2293:             bne.s *                       * Check Z Flag  beq/bne
                            	  2294: 
00:000015E8 4E75            	  2295:             rts
                            	  2296: 
                            	  2297: 
                            	  2298: *-----------------------------------------------------------
                            	  2299: *-----------------------------------------------------------
                            	  2300: * OPCODE : SUB_I
                            	  2301: *-----------------------------------------------------------
                            	  2302: *-----------------------------------------------------------
                            	  2303: op_SUB_I:
                            	  2304: 
                            	  2305: *     EA = Dn  - Byte
00:000015EA 203C12345678    	  2306:             move.l #$12345678,d0      * populate test data
00:000015F0 04000000        	  2307:             subi.b #0,d0
00:000015F4 67FE            	  2308:             beq.s *                       * Check Z Flag  beq/bne
00:000015F6 6BFE            	  2309:             bmi.s *                       * Check N Flag  bmi/bpl
00:000015F8 65FE            	  2310:             bcs.s *                       * Check C Flag  bcc/bcs
00:000015FA 69FE            	  2311:             bvs.s *                       * Check V Flag  bvc/bvs
00:000015FC 04000010        	  2312:             subi.b #$10,d0
00:00001600 67FE            	  2313:             beq.s *                       * Check Z Flag  beq/bne
00:00001602 6BFE            	  2314:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001604 65FE            	  2315:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001606 69FE            	  2316:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001608 040000A5        	  2317:             subi.b #$A5,d0
00:0000160C 67FE            	  2318:             beq.s *                       * Check Z Flag  beq/bne
00:0000160E 6AFE            	  2319:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001610 64FE            	  2320:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001612 68FE            	  2321:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001614 0C0000C3        	  2322:             cmpi.b #$C3,d0
00:00001618 66FE            	  2323:             bne.s *                       * Check Z Flag  beq/bne
                            	  2324: 
                            	  2325: *     EA = Dn  - WORD
00:0000161A 203C12345678    	  2326:             move.l #$12345678,d0      * populate test data
00:00001620 04400000        	  2327:             subi.w #0,d0
00:00001624 67FE            	  2328:             beq.s *                       * Check Z Flag  beq/bne
00:00001626 6BFE            	  2329:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001628 65FE            	  2330:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000162A 69FE            	  2331:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000162C 04407000        	  2332:             subi.w #$7000,d0
00:00001630 67FE            	  2333:             beq.s *                       * Check Z Flag  beq/bne
00:00001632 6AFE            	  2334:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001634 64FE            	  2335:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001636 69FE            	  2336:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001638 0440A55A        	  2337:             subi.w #$A55A,d0
00:0000163C 67FE            	  2338:             beq.s *                       * Check Z Flag  beq/bne
00:0000163E 6BFE            	  2339:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001640 65FE            	  2340:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001642 69FE            	  2341:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001644 0C40411E        	  2342:             cmpi.w #$411E,d0
00:00001648 66FE            	  2343:             bne.s *                       * Check Z Flag  beq/bne
                            	  2344: 
                            	  2345: *     EA = Dn  - LONG
00:0000164A 203C12345678    	  2346:             move.l #$12345678,d0      * populate test data
00:00001650 048000000000    	  2347:             subi.l #0,d0
00:00001656 67FE            	  2348:             beq.s *                       * Check Z Flag  beq/bne
00:00001658 6BFE            	  2349:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000165A 65FE            	  2350:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000165C 69FE            	  2351:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000165E 0480F0000000    	  2352:             subi.l #$F0000000,d0
00:00001664 67FE            	  2353:             beq.s *                       * Check Z Flag  beq/bne
00:00001666 6BFE            	  2354:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001668 64FE            	  2355:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000166A 69FE            	  2356:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000166C 0480855AA55A    	  2357:             subi.l #$855AA55A,d0
00:00001672 67FE            	  2358:             beq.s *                       * Check Z Flag  beq/bne
00:00001674 6AFE            	  2359:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001676 64FE            	  2360:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001678 68FE            	  2361:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000167A 0480A0000000    	  2362:             subi.l #$A0000000,d0
00:00001680 69FE            	  2363:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001682 0C80FCD9B11E    	  2364:             cmpi.l #$FCD9B11E,d0
00:00001688 66FE            	  2365:             bne.s *                       * Check Z Flag  beq/bne
                            	  2366: 
                            	  2367: 
                            	  2368: 
                            	  2369: *     EA = x.L  - Byte
00:0000168A 207C0000F100    	  2370:             move.l #$F100,a0      * populate test data
00:00001690 20BC12345678    	  2371:             move.l #$12345678,(a0)     * populate test data
00:00001696 043900000000F103	  2372:             subi.b #0,$F103
00:0000169E 67FE            	  2373:             beq.s *                       * Check Z Flag  beq/bne
00:000016A0 6BFE            	  2374:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016A2 65FE            	  2375:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016A4 69FE            	  2376:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016A6 043900100000F103	  2377:             subi.b #$10,$F103
00:000016AE 67FE            	  2378:             beq.s *                       * Check Z Flag  beq/bne
00:000016B0 6BFE            	  2379:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016B2 65FE            	  2380:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016B4 69FE            	  2381:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016B6 043900A50000F103	  2382:             subi.b #$A5,$F103
00:000016BE 67FE            	  2383:             beq.s *                       * Check Z Flag  beq/bne
00:000016C0 6AFE            	  2384:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016C2 64FE            	  2385:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016C4 68FE            	  2386:             bvc.s *                       * Check V Flag  bvc/bvs
00:000016C6 0C3900C30000F103	  2387:             cmpi.b #$C3,$F103
00:000016CE 66FE            	  2388:             bne.s *                       * Check Z Flag  beq/bne
                            	  2389: 
                            	  2390: *     EA = x.L- WORD
00:000016D0 207C0000F100    	  2391:             move.l #$F100,a0      * populate test data
00:000016D6 20BC12345678    	  2392:             move.l #$12345678,(a0)     * populate test data
00:000016DC 047900000000F100	  2393:             subi.w #0,$F100
00:000016E4 67FE            	  2394:             beq.s *                       * Check Z Flag  beq/bne
00:000016E6 6BFE            	  2395:             bmi.s *                       * Check N Flag  bmi/bpl
00:000016E8 65FE            	  2396:             bcs.s *                       * Check C Flag  bcc/bcs
00:000016EA 69FE            	  2397:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016EC 047970000000F100	  2398:             subi.w #$7000,$F100
00:000016F4 67FE            	  2399:             beq.s *                       * Check Z Flag  beq/bne
00:000016F6 6AFE            	  2400:             bpl.s *                       * Check N Flag  bmi/bpl
00:000016F8 64FE            	  2401:             bcc.s *                       * Check C Flag  bcc/bcs
00:000016FA 69FE            	  2402:             bvs.s *                       * Check V Flag  bvc/bvs
00:000016FC 0479A55A0000F100	  2403:             subi.w #$A55A,$F100
00:00001704 67FE            	  2404:             beq.s *                       * Check Z Flag  beq/bne
00:00001706 6AFE            	  2405:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001708 64FE            	  2406:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000170A 69FE            	  2407:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000170C 0C79FCDA0000F100	  2408:             cmpi.w #$FCDA,$F100
00:00001714 66FE            	  2409:             bne.s *                       * Check Z Flag  beq/bne
                            	  2410: 
                            	  2411: *     EA = x.L- LONG
00:00001716 23FC123456780000	  2412:             move.l #$12345678,$F100  * populate test data
00:0000171E F100
00:00001720 04B9000000000000	  2413:             subi.l #0,$F100
00:00001728 F100
00:0000172A 67FE            	  2414:             beq.s *                       * Check Z Flag  beq/bne
00:0000172C 6BFE            	  2415:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000172E 65FE            	  2416:             bcs.s *                       * Check C Flag  bcc/bcs
00:00001730 69FE            	  2417:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001732 04B9F00000000000	  2418:             subi.l #$F0000000,$F100
00:0000173A F100
00:0000173C 67FE            	  2419:             beq.s *                       * Check Z Flag  beq/bne
00:0000173E 6BFE            	  2420:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001740 64FE            	  2421:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001742 69FE            	  2422:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001744 04B9855AA55A0000	  2423:             subi.l #$855AA55A,$F100
00:0000174C F100
00:0000174E 67FE            	  2424:             beq.s *                       * Check Z Flag  beq/bne
00:00001750 6AFE            	  2425:             bpl.s *                       * Check N Flag  bmi/bpl
00:00001752 64FE            	  2426:             bcc.s *                       * Check C Flag  bcc/bcs
00:00001754 68FE            	  2427:             bvc.s *                       * Check V Flag  bvc/bvs
00:00001756 04B9A00000000000	  2428:             subi.l #$A0000000,$F100
00:0000175E F100
00:00001760 69FE            	  2429:             bvs.s *                       * Check V Flag  bvc/bvs
00:00001762 0CB9FCD9B11E0000	  2430:             cmpi.l #$FCD9B11E,$F100
00:0000176A F100
00:0000176C 66FE            	  2431:             bne.s *                       * Check Z Flag  beq/bne
                            	  2432: 
00:0000176E 4E75            	  2433:             rts
                            	  2434: 
                            	  2435: 
                            	  2436: 
                            	  2437: *-----------------------------------------------------------
                            	  2438: *-----------------------------------------------------------
                            	  2439: * OPCODE : MOVE
                            	  2440: *-----------------------------------------------------------
                            	  2441: *-----------------------------------------------------------
                            	  2442: op_MOVE:
00:00001770 203C11223344    	  2443:             move.l #$11223344,d0
00:00001776 223C55667788    	  2444:             move.l #$55667788,d1
00:0000177C 243C8899AABB    	  2445:             move.l #$8899aabb,d2
00:00001782 263CCCDDEEFF    	  2446:             move.l #$ccddeeff,d3
00:00001788 7800            	  2447:             moveq  #$00000000,d4
00:0000178A 7A00            	  2448:             moveq  #$00000000,d5
00:0000178C 7C00            	  2449:             moveq  #$00000000,d6
00:0000178E 7E00            	  2450:             moveq  #$00000000,d7
00:00001790 207C44332211    	  2451:             move.l #$44332211,a0
00:00001796 227C88776655    	  2452:             move.l #$88776655,a1
00:0000179C 247CBBAA9988    	  2453:             move.l #$bbaa9988,a2
00:000017A2 267CFFEEDDCC    	  2454:             move.l #$ffeeddcc,a3
                            	  2455: 
00:000017A8 1800            	  2456:             move.b d0,d4              * BYTE - DATA REGISTER
00:000017AA 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
00:000017AC 6BFE            	  2458:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017AE 0C8400000044    	  2459:             cmpi.l #$00000044,d4
00:000017B4 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
00:000017B6 3A01            	  2462:             move.w d1,d5              * WORD - DATA REGISTER
00:000017B8 67FE            	  2463:             beq.s *                       * Check Z Flag  beq/bne
00:000017BA 6BFE            	  2464:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017BC 0C8500007788    	  2465:             cmpi.l #$00007788,d5
00:000017C2 66FE            	  2466:             bne.s *                       * Check Z Flag  beq/bne
                            	  2467: 
00:000017C4 2C02            	  2468:             move.l d2,d6              * LONG - DATA REGISTER
00:000017C6 67FE            	  2469:             beq.s *                       * Check Z Flag  beq/bne
00:000017C8 6AFE            	  2470:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017CA 0C868899AABB    	  2471:             cmpi.l #$8899aabb,d6
00:000017D0 66FE            	  2472:             bne.s *                       * Check Z Flag  beq/bne
                            	  2473: 
00:000017D2 3A09            	  2474:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:000017D4 67FE            	  2475:             beq.s *                       * Check Z Flag  beq/bne
00:000017D6 6BFE            	  2476:             bmi.s *                       * Check N Flag  bmi/bpl
00:000017D8 0C8500006655    	  2477:             cmpi.l #$00006655,d5
00:000017DE 66FE            	  2478:             bne.s *                       * Check Z Flag  beq/bne
                            	  2479: 
00:000017E0 2C0A            	  2480:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:000017E2 67FE            	  2481:             beq.s *                       * Check Z Flag  beq/bne
00:000017E4 6AFE            	  2482:             bpl.s *                       * Check N Flag  bmi/bpl
00:000017E6 0C86BBAA9988    	  2483:             cmpi.l #$bbaa9988,d6
00:000017EC 66FE            	  2484:             bne.s *                       * Check Z Flag  beq/bne
                            	  2485: 
                            	  2486: 
00:000017EE 3842            	  2487:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:000017F0 B9C2            	  2488:             cmpa.l d2,a4
00:000017F2 67FE            	  2489:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2490: 
00:000017F4 2A41            	  2491:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:000017F6 BBC1            	  2492:             cmpa.l d1,a5
00:000017F8 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: 
                            	  2496: 
                            	  2497: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2498: 
00:000017FA 203C11223344    	  2499:             move.l #$11223344,d0
00:00001800 223C00010100    	  2500:             move.l #$00010100,d1
00:00001806 243C8899AABB    	  2501:             move.l #$8899aabb,d2
00:0000180C 7601            	  2502:             moveq  #$00000001,d3
00:0000180E 7800            	  2503:             moveq  #$00000000,d4
00:00001810 7A00            	  2504:             moveq  #$00000000,d5
00:00001812 7C00            	  2505:             moveq  #$00000000,d6
00:00001814 7E00            	  2506:             moveq  #$00000000,d7
00:00001816 91C8            	  2507:             move.l #$00000000,a0
00:00001818 227C00010100    	  2508:             move.l #$00010100,a1
                            	  2509: 
                            	  2510: *     x(An,AL) --> x.L
00:0000181E 11BC005A9804    	  2511:             move.b #$5A,4(a0,a1.l)    * BYTE
00:00001824 47F09804        	  2512:             lea 4(a0,a1.l),a3
00:00001828 13F0980400010105	  2513:             move.b 4(a0,a1.l),$00010105
00:00001830 67FE            	  2514:             beq.s *                       * Check Z Flag  beq/bne
00:00001832 6BFE            	  2515:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001834 0C30005A9805    	  2516:             cmpi.b #$5A,5(a0,a1.l)
00:0000183A 66FE            	  2517:             bne.s *                       * Check Z Flag  beq/bne
                            	  2518: 
                            	  2519: *     x.L --> n(An,Dw)
00:0000183C 11B9000101051007	  2520: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:00001844 67FE            	  2521:             beq.s *                       * Check Z Flag  beq/bne
00:00001846 6BFE            	  2522:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001848 0C30005A1007    	  2523:             cmpi.b #$5A,7(a0,d1.w)
00:0000184E 66FE            	  2524:             bne.s *                       * Check Z Flag  beq/bne
                            	  2525: 
                            	  2526: *     x(PC,Ds) --> x.w
00:00001850 11FB30660100    	  2527:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:00001856 67FE            	  2528:             beq.s *                       * Check Z Flag  beq/bne
00:00001858 6AFE            	  2529:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000185A 0C3900B90000183D	  2530:             cmpi.b #$B9,1+MOVE2
00:00001862 66FE            	  2531:             bne.s *                       * Check Z Flag  beq/bne
                            	  2532: 
                            	  2533: *     #x -->    n(An,AL)
00:00001864 11BC00781007    	  2534:             move.b  #$78,7(a0,d1.w)    * BYTE
00:0000186A 67FE            	  2535:             beq.s *                       * Check Z Flag  beq/bne
00:0000186C 6BFE            	  2536:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000186E 0C3000781007    	  2537:             cmpi.b #$78,7(a0,d1.w)
00:00001874 66FE            	  2538:             bne.s *                       * Check Z Flag  beq/bne
                            	  2539: 
00:00001876 203C11223344    	  2540:             move.l #$11223344,d0
00:0000187C 223C00010100    	  2541:             move.l #$00010100,d1
00:00001882 243C8899AABB    	  2542:             move.l #$8899aabb,d2
00:00001888 7602            	  2543:             moveq  #$00000002,d3
00:0000188A 7800            	  2544:             moveq  #$00000000,d4
00:0000188C 7A00            	  2545:             moveq  #$00000000,d5
00:0000188E 7C00            	  2546:             moveq  #$00000000,d6
00:00001890 7E00            	  2547:             moveq  #$00000000,d7
00:00001892 91C8            	  2548:             move.l #$00000000,a0
00:00001894 227C00010100    	  2549:             move.l #$00010100,a1
                            	  2550: 
                            	  2551: *     x(An,AL) --> x.L
00:0000189A 31BC5A5A9804    	  2552:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:000018A0 49F09804        	  2553:             lea 4(a0,a1.l),a4
00:000018A4 33F0980400010104	  2554:             move.w 4(a0,a1.l),$00010104
00:000018AC 67FE            	  2555:             beq.s *                       * Check Z Flag  beq/bne
00:000018AE 6BFE            	  2556:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018B0 0C705A5A9804    	  2557:             cmpi.w #$5A5A,4(a0,a1.l)
00:000018B6 66FE            	  2558:             bne.s *                       * Check Z Flag  beq/bne
                            	  2559: 
                            	  2560: *     x.L --> n(An,Dw)
00:000018B8 31B9000101041006	  2561: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:000018C0 67FE            	  2562:             beq.s *                       * Check Z Flag  beq/bne
00:000018C2 6BFE            	  2563:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018C4 0C705A5A1006    	  2564:             cmpi.w #$5A5A,6(a0,d1.w)
00:000018CA 66FE            	  2565:             bne.s *                       * Check Z Flag  beq/bne
                            	  2566: 
                            	  2567: *     x(PC,Ds) --> x.w
00:000018CC 31FB30EA0100    	  2568:             move.w  MOVE1(pc,d3),$0100 * WORD
00:000018D2 67FE            	  2569:             beq.s *                       * Check Z Flag  beq/bne
00:000018D4 6BFE            	  2570:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018D6 0C7967FE000018C0	  2571:             cmpi.w #$67FE,8+MOVE1
00:000018DE 66FE            	  2572:             bne.s *                       * Check Z Flag  beq/bne
                            	  2573: 
                            	  2574: *     #x -->    n(An,AL)
00:000018E0 31BC78781006    	  2575:             move.w  #$7878,6(a0,d1.w)    * WORD
00:000018E6 67FE            	  2576:             beq.s *                       * Check Z Flag  beq/bne
00:000018E8 6BFE            	  2577:             bmi.s *                       * Check N Flag  bmi/bpl
00:000018EA 0C7078781006    	  2578:             cmpi.w #$7878,6(a0,d1.w)
00:000018F0 66FE            	  2579:             bne.s *                       * Check Z Flag  beq/bne
                            	  2580: 
                            	  2581: * ---
                            	  2582: 
00:000018F2 203C11223344    	  2583:             move.l #$11223344,d0
00:000018F8 223C00010100    	  2584:             move.l #$00010100,d1
00:000018FE 243C8899AABB    	  2585:             move.l #$8899aabb,d2
00:00001904 7602            	  2586:             moveq  #$00000002,d3
00:00001906 7800            	  2587:             moveq  #$00000000,d4
00:00001908 7A00            	  2588:             moveq  #$00000000,d5
00:0000190A 7C00            	  2589:             moveq  #$00000000,d6
00:0000190C 7E00            	  2590:             moveq  #$00000000,d7
00:0000190E 91C8            	  2591:             move.l #$00000000,a0
00:00001910 227C00010100    	  2592:             move.l #$00010100,a1
                            	  2593: 
                            	  2594: *     x(An,AL) --> x.L
00:00001916 21BC5A5A12349804	  2595:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:0000191E 49F09804        	  2596:             lea 4(a0,a1.l),a4
00:00001922 23F0980400010104	  2597:             move.l 4(a0,a1.l),$00010104
00:0000192A 67FE            	  2598:             beq.s *                       * Check Z Flag  beq/bne
00:0000192C 6BFE            	  2599:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000192E 0CB05A5A12349804	  2600:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:00001936 66FE            	  2601:             bne.s *                       * Check Z Flag  beq/bne
                            	  2602: 
                            	  2603: *     x.L --> n(An,Dw)
00:00001938 21B9000101041006	  2604: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00001940 67FE            	  2605:             beq.s *                       * Check Z Flag  beq/bne
00:00001942 6BFE            	  2606:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001944 0CB05A5A12341006	  2607:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:0000194C 66FE            	  2608:             bne.s *                       * Check Z Flag  beq/bne
                            	  2609: 
                            	  2610: *     x(PC,Ds) --> x.w
00:0000194E 21FB30E80100    	  2611:             move.l  MOVE3(pc,d3),$0100 * LONG
00:00001954 67FE            	  2612:             beq.s *                       * Check Z Flag  beq/bne
00:00001956 6BFE            	  2613:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001958 0CB967FE6BFE0000	  2614:             cmpi.l #$67FE6BFE,8+MOVE3
00:00001960 1940
00:00001962 66FE            	  2615:             bne.s *                       * Check Z Flag  beq/bne
                            	  2616: 
                            	  2617: *     #x -->    n(An,AL)
00:00001964 21BC787823231006	  2618:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:0000196C 67FE            	  2619:             beq.s *                       * Check Z Flag  beq/bne
00:0000196E 6BFE            	  2620:             bmi.s *                       * Check N Flag  bmi/bpl
00:00001970 0CB0787823231006	  2621:             cmpi.l #$78782323,6(a0,d1.w)
00:00001978 66FE            	  2622:             bne.s *                       * Check Z Flag  beq/bne
                            	  2623: 
                            	  2624: 
00:0000197A 4E75            	  2625:          rts
                            	  2626: 
                            	  2627: 
                            	  2628: *-----------------------------------------------------------
                            	  2629: *-----------------------------------------------------------
                            	  2630: * OPCODE : MOVE_xxx_FLAGS
                            	  2631: *-----------------------------------------------------------
                            	  2632: *-----------------------------------------------------------
                            	  2633: op_MOVE_xxx_FLAGS:
                            	  2634: 
                            	  2635: *     Move_To_SR
                            	  2636: 
                            	  2637: *     Dn
                            	  2638: 
00:0000197C 303C2FFF        	  2639:             move.w #$2FFF,d0
00:00001980 46C0            	  2640:             move.w d0,SR
00:00001982 6AFE            	  2641:             bpl.s *           * branch if Z clear
00:00001984 66FE            	  2642:             bne.s *           * branch if N clear
00:00001986 68FE            	  2643:             bvc.s *           * branch if V clear
00:00001988 64FE            	  2644:             bcc.s *           * branch if C clear
00:0000198A 303C2F00        	  2645:             move.w #$2F00,d0
00:0000198E 44C0            	  2646:             move d0,CCR
00:00001990 67FE            	  2647:             beq.s *           * branch if Z set
00:00001992 6BFE            	  2648:             bmi.s *           * branch if N set
00:00001994 69FE            	  2649:             bvs.s *           * branch if V set
00:00001996 65FE            	  2650:             bcs.s *           * branch if C set
                            	  2651: 
00:00001998 303C2000        	  2652:             move.w #$2000,d0
00:0000199C 46C0            	  2653:             move.w d0,SR
00:0000199E 67FE            	  2654:             beq.s *           * branch if Z set
00:000019A0 6BFE            	  2655:             bmi.s *           * branch if N set
00:000019A2 69FE            	  2656:             bvs.s *           * branch if V set
00:000019A4 65FE            	  2657:             bcs.s *           * branch if C set
                            	  2658: 
                            	  2659: *     (An)
00:000019A6 307C0100        	  2660:             move.l #$00000100,a0
00:000019AA 30BC2FFF        	  2661:             move.w #$2FFF,(a0)
00:000019AE 46D0            	  2662:             move.w (a0),SR
00:000019B0 6AFE            	  2663:             bpl.s *           * branch if Z clear
00:000019B2 66FE            	  2664:             bne.s *           * branch if N clear
00:000019B4 68FE            	  2665:             bvc.s *           * branch if V clear
00:000019B6 64FE            	  2666:             bcc.s *           * branch if C clear
                            	  2667: 
00:000019B8 30BC2000        	  2668:             move.w #$2000,(a0)
00:000019BC 46D0            	  2669:             move.w (a0),SR
00:000019BE 67FE            	  2670:             beq.s *           * branch if Z set
00:000019C0 6BFE            	  2671:             bmi.s *           * branch if N set
00:000019C2 69FE            	  2672:             bvs.s *           * branch if V set
00:000019C4 65FE            	  2673:             bcs.s *           * branch if C set
                            	  2674: 
                            	  2675: *     (An)+
00:000019C6 307C0100        	  2676:             move.l #$00000100,a0
00:000019CA 30BC2FFF        	  2677:             move.w #$2FFF,(a0)
00:000019CE 46D8            	  2678:             move.w (a0)+,SR
00:000019D0 6AFE            	  2679:             bpl.s *           * branch if Z clear
00:000019D2 66FE            	  2680:             bne.s *           * branch if N clear
00:000019D4 68FE            	  2681:             bvc.s *           * branch if V clear
00:000019D6 64FE            	  2682:             bcc.s *           * branch if C clear
                            	  2683: 
00:000019D8 30BC2000        	  2684:             move.w #$2000,(a0)
00:000019DC 46D8            	  2685:             move.w (a0)+,SR
00:000019DE 67FE            	  2686:             beq.s *           * branch if Z set
00:000019E0 6BFE            	  2687:             bmi.s *           * branch if N set
00:000019E2 69FE            	  2688:             bvs.s *           * branch if V set
00:000019E4 65FE            	  2689:             bcs.s *           * branch if C set
                            	  2690: 
                            	  2691: *     -(An)
00:000019E6 307C0102        	  2692:             move.l #$00000102,a0
00:000019EA 30BC2FFF        	  2693:             move.w #$2FFF,(a0)
00:000019EE 46D8            	  2694:             move.w (a0)+,SR
00:000019F0 6AFE            	  2695:             bpl.s *           * branch if Z clear
00:000019F2 66FE            	  2696:             bne.s *           * branch if N clear
00:000019F4 68FE            	  2697:             bvc.s *           * branch if V clear
00:000019F6 64FE            	  2698:             bcc.s *           * branch if C clear
                            	  2699: 
00:000019F8 30BC2000        	  2700:             move.w #$2000,(a0)
00:000019FC 46D8            	  2701:             move.w (a0)+,SR
00:000019FE 67FE            	  2702:             beq.s *           * branch if Z set
00:00001A00 6BFE            	  2703:             bmi.s *           * branch if N set
00:00001A02 69FE            	  2704:             bvs.s *           * branch if V set
00:00001A04 65FE            	  2705:             bcs.s *           * branch if C set
                            	  2706: 
                            	  2707: *     n(An)
00:00001A06 307C0102        	  2708:             move.l #$00000102,a0
00:00001A0A 317C2FFF0002    	  2709:             move.w #$2FFF,2(a0)
00:00001A10 46E80002        	  2710:             move.w 2(a0),SR
00:00001A14 6AFE            	  2711:             bpl.s *           * branch if Z clear
00:00001A16 66FE            	  2712:             bne.s *           * branch if N clear
00:00001A18 68FE            	  2713:             bvc.s *           * branch if V clear
00:00001A1A 64FE            	  2714:             bcc.s *           * branch if C clear
                            	  2715: 
00:00001A1C 317C20000002    	  2716:             move.w #$2000,2(a0)
00:00001A22 46E80002        	  2717:             move.w 2(a0),SR
00:00001A26 67FE            	  2718:             beq.s *           * branch if Z set
00:00001A28 6BFE            	  2719:             bmi.s *           * branch if N set
00:00001A2A 69FE            	  2720:             bvs.s *           * branch if V set
00:00001A2C 65FE            	  2721:             bcs.s *           * branch if C set
                            	  2722: 
                            	  2723: *     n(An,Rn.l)
00:00001A2E 307C0100        	  2724:             move.l #$00000100,a0
00:00001A32 7002            	  2725:             moveq  #$00000002,d0
00:00001A34 31BC2FFF0802    	  2726:             move.w #$2FFF,2(a0,d0.l)
00:00001A3A 46F00802        	  2727:             move.w 2(a0,d0.l),SR
00:00001A3E 6AFE            	  2728:             bpl.s *           * branch if Z clear
00:00001A40 66FE            	  2729:             bne.s *           * branch if N clear
00:00001A42 68FE            	  2730:             bvc.s *           * branch if V clear
00:00001A44 64FE            	  2731:             bcc.s *           * branch if C clear
                            	  2732: 
00:00001A46 31BC20000802    	  2733:             move.w #$2000,2(a0,d0.l)
00:00001A4C 46F00802        	  2734:             move.w 2(a0,d0.l),SR
00:00001A50 67FE            	  2735:             beq.s *           * branch if Z set
00:00001A52 6BFE            	  2736:             bmi.s *           * branch if N set
00:00001A54 69FE            	  2737:             bvs.s *           * branch if V set
00:00001A56 65FE            	  2738:             bcs.s *           * branch if C set
                            	  2739: 
                            	  2740: *     x.W
00:00001A58 31FC2FFF0100    	  2741:             move.w #$2FFF,$0100
00:00001A5E 46F80100        	  2742:             move.w $0100,SR
00:00001A62 6AFE            	  2743:             bpl.s *           * branch if Z clear
00:00001A64 66FE            	  2744:             bne.s *           * branch if N clear
00:00001A66 68FE            	  2745:             bvc.s *           * branch if V clear
00:00001A68 64FE            	  2746:             bcc.s *           * branch if C clear
                            	  2747: 
00:00001A6A 31FC20000100    	  2748:             move.w #$2000,$0100
00:00001A70 46F80100        	  2749:             move.w $0100,SR
00:00001A74 67FE            	  2750:             beq.s *           * branch if Z set
00:00001A76 6BFE            	  2751:             bmi.s *           * branch if N set
00:00001A78 69FE            	  2752:             bvs.s *           * branch if V set
00:00001A7A 65FE            	  2753:             bcs.s *           * branch if C set
                            	  2754: 
                            	  2755: *     x.L
00:00001A7C 33FC2FFF00010100	  2756:             move.w #$2FFF,$00010100
00:00001A84 46F900010100    	  2757:             move.w $00010100,SR
00:00001A8A 6AFE            	  2758:             bpl.s *           * branch if Z clear
00:00001A8C 66FE            	  2759:             bne.s *           * branch if N clear
00:00001A8E 68FE            	  2760:             bvc.s *           * branch if V clear
00:00001A90 64FE            	  2761:             bcc.s *           * branch if C clear
                            	  2762: 
00:00001A92 33FC200000010100	  2763: MOVE4:      move.w #$2000,$00010100
00:00001A9A 46F900010100    	  2764:             move.w $00010100,SR
00:00001AA0 67FE            	  2765:             beq.s *           * branch if Z set
00:00001AA2 6BFE            	  2766:             bmi.s *           * branch if N set
00:00001AA4 69FE            	  2767:             bvs.s *           * branch if V set
00:00001AA6 65FE            	  2768:             bcs.s *           * branch if C set
                            	  2769: 
                            	  2770: *     x(PC)
00:00001AA8 46FAFFEA        	  2771:             move.w MOVE4+2(pc),SR
00:00001AAC 67FE            	  2772:             beq.s *           * branch if Z set
00:00001AAE 6BFE            	  2773:             bmi.s *           * branch if N set
00:00001AB0 69FE            	  2774:             bvs.s *           * branch if V set
00:00001AB2 65FE            	  2775:             bcs.s *           * branch if C set
                            	  2776: 
                            	  2777: *     x(PC,d0.l)
00:00001AB4 7000            	  2778:             moveq  #$00000000,d0
00:00001AB6 46FB08DC        	  2779:             move.w MOVE4+2(pc,d0.l),SR
00:00001ABA 67FE            	  2780:             beq.s *           * branch if Z set
00:00001ABC 6BFE            	  2781:             bmi.s *           * branch if N set
00:00001ABE 69FE            	  2782:             bvs.s *           * branch if V set
00:00001AC0 65FE            	  2783:             bcs.s *           * branch if C set
00:00001AC2 44FB08D0        	  2784:             move MOVE4+2(pc,d0.l),CCR
00:00001AC6 67FE            	  2785:             beq.s *           * branch if Z set
00:00001AC8 6BFE            	  2786:             bmi.s *           * branch if N set
00:00001ACA 69FE            	  2787:             bvs.s *           * branch if V set
00:00001ACC 65FE            	  2788:             bcs.s *           * branch if C set
                            	  2789: 
                            	  2790: *     #x
00:00001ACE 46FC2FFF        	  2791:             move.w #$2FFF,SR
00:00001AD2 66FE            	  2792:             bne.s *           * branch if Z clear
00:00001AD4 6AFE            	  2793:             bpl.s *           * branch if N clear
00:00001AD6 68FE            	  2794:             bvc.s *           * branch if V clear
00:00001AD8 64FE            	  2795:             bcc.s *           * branch if C clear
                            	  2796: 
                            	  2797: 
                            	  2798: 
                            	  2799: *  MOVE_From_SR
                            	  2800: 
                            	  2801: 
                            	  2802: 
                            	  2803: *     Dn
00:00001ADA 46FC275A        	  2804:             move.w #$275A,SR          * Initial value
00:00001ADE 40C0            	  2805:             move.w SR,d0
00:00001AE0 0C40271A        	  2806:             cmpi.w #$271A,d0
                            	  2807: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2808: *            bne.s *                   * branch if Z set
                            	  2809: 
                            	  2810: *     (An)
00:00001AE4 307C0100        	  2811:             move.l #$00000100,a0
00:00001AE8 46FC275A        	  2812:             move.w #$275A,SR          * Initial value
00:00001AEC 40D0            	  2813:             move.w SR,(a0)
00:00001AEE 0C50275A        	  2814:             cmpi.w #$275A,(a0)
00:00001AF2 66FE            	  2815:             bne.s *                   * branch if Z set
                            	  2816: 
                            	  2817: *     (An)+
00:00001AF4 307C0100        	  2818:             move.l #$00000100,a0
00:00001AF8 46FC257A        	  2819:             move.w #$257A,SR          * Initial value
00:00001AFC 40D8            	  2820:             move.w SR,(a0)+
00:00001AFE 307C0100        	  2821:             move.l #$00000100,a0
00:00001B02 0C58257A        	  2822:             cmpi.w #$257A,(a0)+
00:00001B06 66FE            	  2823:             bne.s *                   * branch if Z set
                            	  2824: 
                            	  2825: *     -(An)
00:00001B08 307C0102        	  2826:             move.l #$00000102,a0
00:00001B0C 46FC2766        	  2827:             move.w #$2766,SR          * Initial value
00:00001B10 40E0            	  2828:             move.w SR,-(a0)
00:00001B12 307C0100        	  2829:             move.l #$00000100,a0
00:00001B16 0C502766        	  2830:             cmpi.w #$2766,(a0)
00:00001B1A 66FE            	  2831:             bne.s *                   * branch if Z set
                            	  2832: 
                            	  2833: *     x(An)
00:00001B1C 307C0102        	  2834:             move.l #$00000102,a0
00:00001B20 46FC2733        	  2835:             move.w #$2733,SR          * Initial value
00:00001B24 40E80004        	  2836:             move.w SR,4(a0)
00:00001B28 0C6827330004    	  2837:             cmpi.w #$2733,4(a0)
00:00001B2E 66FE            	  2838:             bne.s *                   * branch if Z set
                            	  2839: 
                            	  2840: *     x(An,rn)
00:00001B30 307C0102        	  2841:             move.l #$00000102,a0
00:00001B34 7004            	  2842:             moveq  #$00000004,d0
00:00001B36 46FC275A        	  2843:             move.w #$275a,SR          * Initial value
00:00001B3A 40F00804        	  2844:             move.w SR,4(a0,d0.l)
00:00001B3E 0C70275A0804    	  2845:             cmpi.w #$275a,4(a0,d0.l)
00:00001B44 66FE            	  2846:             bne.s *                   * branch if Z set
                            	  2847: 
                            	  2848: *     x.W
00:00001B46 46FC2777        	  2849:             move.w #$2777,SR          * Initial value
00:00001B4A 40F80102        	  2850:             move.w SR,$0102
00:00001B4E 0C7827770102    	  2851:             cmpi.w #$2777,$0102
00:00001B54 66FE            	  2852:             bne.s *                   * branch if Z set
                            	  2853: 
                            	  2854: *     x.L
00:00001B56 46FC2777        	  2855:             move.w #$2777,SR          * Initial value
00:00001B5A 40F900010102    	  2856:             move.w SR,$10102
00:00001B60 0C79277700010102	  2857:             cmpi.w #$2777,$10102
00:00001B68 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
                            	  2860: 
                            	  2861: 
00:00001B6A 46FC2700        	  2862:             move.w #$2700,SR          * Put flags back to initial value
                            	  2863: 
00:00001B6E 4E75            	  2864:             rts
                            	  2865: 
                            	  2866: 
                            	  2867: *-----------------------------------------------------------
                            	  2868: *-----------------------------------------------------------
                            	  2869: * OPCODE : EXT
                            	  2870: *-----------------------------------------------------------
                            	  2871: *-----------------------------------------------------------
                            	  2872: op_EXT:
                            	  2873: 
00:00001B70 707F            	  2874:             move.l #$0000007F,d0
00:00001B72 223C00008FFF    	  2875:             move.l #$00008FFF,d1
00:00001B78 7400            	  2876:             moveq  #$00000000,d2
                            	  2877: 
00:00001B7A 4880            	  2878:             ext.w d0
00:00001B7C 6BFE            	  2879:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001B7E 67FE            	  2880:             beq.s *                   * Check Z Flag  beq/bne
00:00001B80 0C800000007F    	  2881:             cmpi.l #$0000007F,d0
00:00001B86 66FE            	  2882:             bne.s *                   * branch if Z set
                            	  2883: 
00:00001B88 48C1            	  2884:             ext.l d1
00:00001B8A 6AFE            	  2885:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001B8C 67FE            	  2886:             beq.s *                   * Check Z Flag  beq/bne
00:00001B8E 0C81FFFF8FFF    	  2887:             cmpi.l #$FFFF8FFF,d1
00:00001B94 66FE            	  2888:             bne.s *                   * branch if Z set
                            	  2889: 
00:00001B96 48C2            	  2890:             ext.l d2
00:00001B98 66FE            	  2891:             bne.s *                   * Check Z Flag  beq/bne
                            	  2892: 
                            	  2893: 
                            	  2894: 
00:00001B9A 4E75            	  2895:             rts
                            	  2896: 
                            	  2897: 
                            	  2898: *-----------------------------------------------------------
                            	  2899: *-----------------------------------------------------------
                            	  2900: * OPCODE : SWAP
                            	  2901: *-----------------------------------------------------------
                            	  2902: *-----------------------------------------------------------
                            	  2903: op_SWAP:
                            	  2904: 
00:00001B9C 203C12345678    	  2905:             move.l #$12345678,d0
                            	  2906: 
00:00001BA2 4840            	  2907:             swap d0
00:00001BA4 6BFE            	  2908:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001BA6 67FE            	  2909:             beq.s *                   * Check Z Flag  beq/bne
00:00001BA8 0C8056781234    	  2910:             cmpi.l #$56781234,d0
00:00001BAE 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912: 
                            	  2913: 
                            	  2914: 
00:00001BB0 4E75            	  2915:             rts
                            	  2916: 
                            	  2917: 
                            	  2918: *-----------------------------------------------------------
                            	  2919: *-----------------------------------------------------------
                            	  2920: * OPCODE : LEA_PEA
                            	  2921: *-----------------------------------------------------------
                            	  2922: *-----------------------------------------------------------
                            	  2923: op_LEAPEA:
                            	  2924: 
00:00001BB2 207C00345678    	  2925:             move.l #$00345678,a0
00:00001BB8 7800            	  2926:             moveq  #$00000000,d4
                            	  2927: 
                            	  2928: *     (An)
00:00001BBA 4DD0            	  2929:             lea (a0),a6
00:00001BBC 200E            	  2930:             move.l a6,d0
00:00001BBE 0C8000345678    	  2931:             cmpi.l #$00345678,d0
00:00001BC4 66FE            	  2932:             bne.s *                   * branch if Z set
00:00001BC6 4850            	  2933:             pea (a0)
00:00001BC8 0C9700345678    	  2934:             cmpi.l #$00345678,(a7)
00:00001BCE 66FE            	  2935:             bne.s *                   * branch if Z set
                            	  2936:             * This was without a specifier which the assembler defaulted to .w
00:00001BD0 588F            	  2937:             addq.l #4,a7            * Restore Stack Pointer
                            	  2938: 
                            	  2939: *     x(An)
00:00001BD2 4DE80004        	  2940:             lea 4(a0),a6
00:00001BD6 200E            	  2941:             move.l a6,d0
00:00001BD8 0C800034567C    	  2942:             cmpi.l #$0034567C,d0
00:00001BDE 66FE            	  2943:             bne.s *                   * branch if Z set
00:00001BE0 48680004        	  2944:             pea 4(a0)
00:00001BE4 0C970034567C    	  2945:             cmpi.l #$0034567C,(a7)
00:00001BEA 66FE            	  2946:             bne.s *                   * branch if Z set
                            	  2947:             * This was without a specifier which the assembler defaulted to .w
00:00001BEC 588F            	  2948:             addq.l #4,a7            * Restore Stack Pointer
                            	  2949: 
                            	  2950: *     x(An,Dn.l)
00:00001BEE 4DF04004        	  2951:             lea 4(a0,d4),a6
00:00001BF2 200E            	  2952:             move.l a6,d0
00:00001BF4 0C800034567C    	  2953:             cmpi.l #$0034567C,d0
00:00001BFA 66FE            	  2954:             bne.s *                   * branch if Z set
00:00001BFC 48704804        	  2955:             pea 4(a0,d4.l)
00:00001C00 0C970034567C    	  2956:             cmpi.l #$0034567C,(a7)
00:00001C06 66FE            	  2957:             bne.s *                   * branch if Z set
                            	  2958:             * This was without a specifier which the assembler defaulted to .w
00:00001C08 588F            	  2959:             addq.l #4,a7            * Restore Stack Pointer
                            	  2960: 
                            	  2961: *     x.W
00:00001C0A 4DF81234        	  2962:             lea $1234,a6
00:00001C0E 200E            	  2963:             move.l a6,d0
00:00001C10 0C401234        	  2964:             cmpi.w #$1234,d0
00:00001C14 66FE            	  2965:             bne.s *                   * branch if Z set
00:00001C16 48781234        	  2966:             pea $1234
00:00001C1A 0C9700001234    	  2967:             cmpi.l #$00001234,(a7)
00:00001C20 66FE            	  2968:             bne.s *                   * branch if Z set
                            	  2969:             * This was without a specifier which the assembler defaulted to .w
00:00001C22 588F            	  2970:             addq.l #4,a7            * Restore Stack Pointer
                            	  2971: 
                            	  2972: *     x.L
00:00001C24 4DF900345678    	  2973:             lea $00345678,a6
00:00001C2A 200E            	  2974:             move.l a6,d0
00:00001C2C B08E            	  2975:             cmp.l a6,d0
00:00001C2E 66FE            	  2976:             bne.s *                   * branch if Z set
00:00001C30 487900345678    	  2977:             pea $00345678
00:00001C36 0C9700345678    	  2978:             cmpi.l #$00345678,(a7)
00:00001C3C 66FE            	  2979:             bne.s *                   * branch if Z set
                            	  2980:             * This was without a specifier which the assembler defaulted to .w
00:00001C3E 588F            	  2981:             addq.l #4,a7            * Restore Stack Pointer
                            	  2982: 
                            	  2983: *     x(PC)
00:00001C40 4DFA0008        	  2984:             lea LEA1(pc),a6
00:00001C44 200E            	  2985:             move.l a6,d0
00:00001C46 B08E            	  2986:             cmp.l a6,d0
00:00001C48 66FE            	  2987:             bne.s *                   * branch if Z set
00:00001C4A 487AFFFE        	  2988: LEA1:       pea LEA1(pc)
00:00001C4E 0C970000241E    	  2989:             cmpi.l #$0000241E,(a7)
00:00001C54 67FE            	  2990:             beq.s *                   * branch if Z clear
                            	  2991:             * This was without a specifier which the assembler defaulted to .w
00:00001C56 588F            	  2992:             addq.l #4,a7              * Restore Stack Pointer
                            	  2993: 
                            	  2994: 
                            	  2995: 
                            	  2996: 
00:00001C58 46FC2700        	  2997:             move.w #$2700,sr          * Put flags back to initial value
                            	  2998: 
00:00001C5C 4E75            	  2999:             rts
                            	  3000:  	
                            	  3001: 
                            	  3002: 
                            	  3003: *-----------------------------------------------------------
                            	  3004: *-----------------------------------------------------------
                            	  3005: * OPCODE : LEA_TAS
                            	  3006: *-----------------------------------------------------------
                            	  3007: *-----------------------------------------------------------
                            	  3008: op_TAS:
                            	  3009: 
                            	  3010: *     Test just one addressing mode
                            	  3011: 
00:00001C5E 307C0100        	  3012:             move.l #$00000100,a0
                            	  3013: 
                            	  3014: *     (An)
00:00001C62 10BC0000        	  3015:             move.b #$00,(a0)
00:00001C66 6BFE            	  3016:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C68 66FE            	  3017:             bne.s *                   * Check Z Flag  beq/bne
00:00001C6A 4AD0            	  3018:             tas (a0)
00:00001C6C 0C100080        	  3019:             cmpi.b #$80,(a0)
00:00001C70 66FE            	  3020:             bne.s *                   * branch if Z set
00:00001C72 10BC00F5        	  3021:             move.b #$F5,(a0)
00:00001C76 4AD0            	  3022:             tas (a0)
00:00001C78 6AFE            	  3023:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001C7A 67FE            	  3024:             beq.s *                   * Check Z Flag  beq/bne
00:00001C7C 4AD0            	  3025:             tas (a0)
00:00001C7E 0C1000F5        	  3026:             cmpi.b #$F5,(a0)
00:00001C82 66FE            	  3027:             bne.s *                   * branch if Z set
                            	  3028: 
00:00001C84 4E75            	  3029:             rts
                            	  3030: 
                            	  3031: 
                            	  3032: *-----------------------------------------------------------
                            	  3033: *-----------------------------------------------------------
                            	  3034: * OPCODE : LEA_TST
                            	  3035: *-----------------------------------------------------------
                            	  3036: *-----------------------------------------------------------
                            	  3037: op_TST:
                            	  3038: 
                            	  3039: *     Test just one addressing mode
                            	  3040: 
00:00001C86 307C0100        	  3041:             move.l #$00000100,a0
                            	  3042: 
                            	  3043: *     (An) - BYTE
00:00001C8A 10BC0000        	  3044:             move.b #$00,(a0)
00:00001C8E 4A10            	  3045:             tst.b (a0)
00:00001C90 6BFE            	  3046:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001C92 66FE            	  3047:             bne.s *                   * Check Z Flag  beq/bne
00:00001C94 10BC00F5        	  3048:             move.b #$F5,(a0)
00:00001C98 4A10            	  3049:             tst.b (a0)
00:00001C9A 6AFE            	  3050:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001C9C 67FE            	  3051:             beq.s *                   * Check Z Flag  beq/bne
                            	  3052: 
                            	  3053: *     (An) - WORD
00:00001C9E 30BC0000        	  3054:             move.w #$0000,(a0)
00:00001CA2 4A50            	  3055:             tst.w (a0)
00:00001CA4 6BFE            	  3056:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CA6 66FE            	  3057:             bne.s *                   * Check Z Flag  beq/bne
00:00001CA8 30BCF567        	  3058:             move.w #$F567,(a0)
00:00001CAC 4A50            	  3059:             tst.w (a0)
00:00001CAE 6AFE            	  3060:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CB0 67FE            	  3061:             beq.s *                   * Check Z Flag  beq/bne
                            	  3062: 
                            	  3063: *     (An) - LONG
00:00001CB2 20BC00000000    	  3064:             move.l #$00000000,(a0)
00:00001CB8 4A90            	  3065:             tst.l (a0)
00:00001CBA 6BFE            	  3066:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001CBC 66FE            	  3067:             bne.s *                   * Check Z Flag  beq/bne
00:00001CBE 20BCF56789AB    	  3068:             move.l #$F56789ab,(a0)
00:00001CC4 4A90            	  3069:             tst.l (a0)
00:00001CC6 6AFE            	  3070:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001CC8 67FE            	  3071:             beq.s *                   * Check Z Flag  beq/bne
                            	  3072: 
                            	  3073: 
00:00001CCA 4E75            	  3074:             rts
                            	  3075: 
                            	  3076: 
                            	  3077: *-----------------------------------------------------------
                            	  3078: *-----------------------------------------------------------
                            	  3079: * OPCODE : LINKS
                            	  3080: *-----------------------------------------------------------
                            	  3081: *-----------------------------------------------------------
                            	  3082: op_LINKS:
                            	  3083: 
00:00001CCC 207C11223344    	  3084:             move.l #$11223344,a0
00:00001CD2 203C11223344    	  3085:             move.l #$11223344,d0
00:00001CD8 4E500000        	  3086:             link a0,#$0
00:00001CDC 0C9711223344    	  3087:             cmpi.l #$11223344,(a7)
                            	  3088: 
00:00001CE2 4E58            	  3089:             unlk a0
00:00001CE4 B1C0            	  3090:             cmp.l d0,a0
00:00001CE6 66FE            	  3091:             bne.s *                   * branch if Z set
                            	  3092: 
00:00001CE8 4E75            	  3093:             rts
                            	  3094: 
                            	  3095: *-----------------------------------------------------------
                            	  3096: *-----------------------------------------------------------
                            	  3097: * OPCODE : MOVE_USP
                            	  3098: *-----------------------------------------------------------
                            	  3099: *-----------------------------------------------------------
                            	  3100: op_MOVE_USP:
                            	  3101: 
00:00001CEA 207C11223344    	  3102:             move.l #$11223344,a0
00:00001CF0 4E60            	  3103:             move a0,USP
00:00001CF2 4E69            	  3104:             move USP,a1
00:00001CF4 B3C8            	  3105:             cmp.l a0,a1
00:00001CF6 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
00:00001CF8 4E75            	  3108:             rts
                            	  3109: 
                            	  3110: 
                            	  3111: *-----------------------------------------------------------
                            	  3112: *-----------------------------------------------------------
                            	  3113: * OPCODE : CHK
                            	  3114: *-----------------------------------------------------------
                            	  3115: *-----------------------------------------------------------
                            	  3116: op_CHK:
00:00001CFA 303C1122        	  3117:             move.w #$1122,d0
00:00001CFE 323C1122        	  3118:             move.w #$1122,d1
00:00001D02 4380            	  3119:             chk d0,d1
                            	  3120: 
00:00001D04 4E71            	  3121:             nop
00:00001D06 4E71            	  3122:             nop
                            	  3123: 
00:00001D08 323C1122        	  3124:             move.w #$1122,d1
00:00001D0C 43BC1122        	  3125:             chk #$1122,d1
                            	  3126: 
00:00001D10 323C1122        	  3127:             move.w #$1122,d1
00:00001D14 43BC007A        	  3128:             chk #00122,d1
00:00001D18 BCBCEEEE0006    	  3129:             cmp.l #$EEEE0006,d6
00:00001D1E 66FE            	  3130:             bne.s *                   * branch if Z set
                            	  3131: 
00:00001D20 303C1122        	  3132:             move.w #$1122,d0
00:00001D24 323C8000        	  3133:             move.w #$8000,d1
00:00001D28 4380            	  3134:             chk d0,d1
00:00001D2A BCBCEEEE0006    	  3135:             cmp.l #$EEEE0006,d6
00:00001D30 66FE            	  3136:             bne.s *                   * branch if Z set
                            	  3137: 
00:00001D32 4E75            	  3138:             rts
                            	  3139: 
                            	  3140: 
                            	  3141: *-----------------------------------------------------------
                            	  3142: *-----------------------------------------------------------
                            	  3143: * OPCODE : NEGS
                            	  3144: *-----------------------------------------------------------
                            	  3145: *-----------------------------------------------------------
                            	  3146: op_NEGS:
                            	  3147: 
                            	  3148: *     NOT - BYTE
00:00001D34 307C0100        	  3149:             move.l #$00000100,a0
00:00001D38 7000            	  3150:             moveq  #$00000000,d0
00:00001D3A 4600            	  3151:             not.b d0
00:00001D3C 6AFE            	  3152:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D3E 67FE            	  3153:             beq.s *                   * Check Z Flag  beq/bne
00:00001D40 4600            	  3154:             not.b d0
00:00001D42 6BFE            	  3155:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D44 66FE            	  3156:             bne.s *                   * Check Z Flag  beq/bne
00:00001D46 4A00            	  3157:             cmpi.b #$00,d0
00:00001D48 66FE            	  3158:             bne.s *                   * Check Z Flag  beq/bne
00:00001D4A 10BC0080        	  3159:             move.b #$80,(a0)
00:00001D4E 4610            	  3160:             not.b (a0)
00:00001D50 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D52 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
00:00001D54 4610            	  3163:             not.b (a0)
00:00001D56 6AFE            	  3164:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D58 67FE            	  3165:             beq.s *                   * Check Z Flag  beq/bne
00:00001D5A 0C100080        	  3166:             cmpi.b #$80,(a0)
00:00001D5E 66FE            	  3167:             bne.s *                   * Check Z Flag  beq/bne
                            	  3168: 
                            	  3169: *     NOT - WORD
00:00001D60 307C0100        	  3170:             move.l #$00000100,a0
00:00001D64 7000            	  3171:             moveq  #$00000000,d0
00:00001D66 4640            	  3172:             not.w d0
00:00001D68 6AFE            	  3173:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D6A 67FE            	  3174:             beq.s *                   * Check Z Flag  beq/bne
00:00001D6C 4640            	  3175:             not.w d0
00:00001D6E 6BFE            	  3176:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D70 66FE            	  3177:             bne.s *                   * Check Z Flag  beq/bne
00:00001D72 4A40            	  3178:             cmpi.w #$0000,d0
00:00001D74 66FE            	  3179:             bne.s *                   * Check Z Flag  beq/bne
00:00001D76 30BC5A5A        	  3180:             move.w #$5a5a,(a0)
00:00001D7A 4650            	  3181:             not.w (a0)
00:00001D7C 6AFE            	  3182:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D7E 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
00:00001D80 4650            	  3184:             not.w (a0)
00:00001D82 6BFE            	  3185:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D84 67FE            	  3186:             beq.s *                   * Check Z Flag  beq/bne
00:00001D86 0C505A5A        	  3187:             cmpi.w #$5a5a,(a0)
00:00001D8A 66FE            	  3188:             bne.s *                   * Check Z Flag  beq/bne
                            	  3189: 
                            	  3190: *     NOT - LONG
00:00001D8C 307C0100        	  3191:             move.l #$00000100,a0
00:00001D90 7000            	  3192:             moveq  #$00000000,d0
00:00001D92 4680            	  3193:             not.l d0
00:00001D94 6AFE            	  3194:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001D96 67FE            	  3195:             beq.s *                   * Check Z Flag  beq/bne
00:00001D98 4680            	  3196:             not.l d0
00:00001D9A 6BFE            	  3197:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001D9C 66FE            	  3198:             bne.s *                   * Check Z Flag  beq/bne
00:00001D9E 4A80            	  3199:             cmpi.l #$00000000,d0
00:00001DA0 66FE            	  3200:             bne.s *                   * Check Z Flag  beq/bne
00:00001DA2 20BC5A5A1234    	  3201:             move.l #$5a5a1234,(a0)
00:00001DA8 4690            	  3202:             not.l (a0)
00:00001DAA 6AFE            	  3203:             bpl.s *                   * Check N Flag  bmi/bpl
00:00001DAC 67FE            	  3204:             beq.s *                   * Check Z Flag  beq/bne
00:00001DAE 4690            	  3205:             not.l (a0)
00:00001DB0 6BFE            	  3206:             bmi.s *                   * Check N Flag  bmi/bpl
00:00001DB2 67FE            	  3207:             beq.s *                   * Check Z Flag  beq/bne
00:00001DB4 0C905A5A1234    	  3208:             cmpi.l #$5a5a1234,(a0)
00:00001DBA 66FE            	  3209:             bne.s *                   * Check Z Flag  beq/bne
                            	  3210: 
                            	  3211: * -----
                            	  3212: 
                            	  3213: *     NEG - BYTE
00:00001DBC 307C0100        	  3214:             move.l #$00000100,a0
00:00001DC0 7000            	  3215:             moveq  #$00000000,d0
00:00001DC2 7240D241        	  3216:             move.l #$00000080,d1
00:00001DC6 4400            	  3217:             neg.b d0
00:00001DC8 6BFE            	  3218:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001DCA 66FE            	  3219:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001DCC 65FE            	  3220:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001DCE 69FE            	  3221:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DD0 4401            	  3222:             neg.b d1
00:00001DD2 6AFE            	  3223:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001DD4 67FE            	  3224:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DD6 64FE            	  3225:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DD8 68FE            	  3226:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001DDA 0C010080        	  3227:             cmpi.b #$80,d1
00:00001DDE 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne
00:00001DE0 10BC007F        	  3229:             move.b #$7F,(a0)
00:00001DE4 4410            	  3230:             neg.b (a0)
00:00001DE6 6AFE            	  3231:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001DE8 67FE            	  3232:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DEA 64FE            	  3233:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DEC 69FE            	  3234:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DEE 10BC00F5        	  3235:             move.b #$F5,(a0)
00:00001DF2 4410            	  3236:             neg.b (a0)
00:00001DF4 6BFE            	  3237:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001DF6 67FE            	  3238:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001DF8 64FE            	  3239:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001DFA 69FE            	  3240:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001DFC 0C10000B        	  3241:             cmpi.b #$0B,(a0)
00:00001E00 66FE            	  3242:             bne.s *                   * Check Z Flag  beq/bne
                            	  3243: 
                            	  3244: * -----
                            	  3245: 
                            	  3246: *     NEG - WORD
00:00001E02 307C0100        	  3247:             move.l #$00000100,a0
00:00001E06 7000            	  3248:             moveq  #$00000000,d0
00:00001E08 223C00008000    	  3249:             move.l #$00008000,d1
00:00001E0E 4440            	  3250:             neg.w d0
00:00001E10 6BFE            	  3251:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E12 66FE            	  3252:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E14 65FE            	  3253:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E16 69FE            	  3254:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E18 4441            	  3255:             neg.w d1
00:00001E1A 6AFE            	  3256:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E1C 67FE            	  3257:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E1E 64FE            	  3258:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E20 68FE            	  3259:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E22 0C418000        	  3260:             cmpi.w #$8000,d1
00:00001E26 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne
00:00001E28 30BC7FFF        	  3262:             move.w #$7FFF,(a0)
00:00001E2C 4450            	  3263:             neg.w (a0)
00:00001E2E 6AFE            	  3264:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E30 67FE            	  3265:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E32 64FE            	  3266:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E34 69FE            	  3267:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E36 30BCF578        	  3268:             move.w #$F578,(a0)
00:00001E3A 4450            	  3269:             neg.w (a0)
00:00001E3C 6BFE            	  3270:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E3E 67FE            	  3271:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E40 64FE            	  3272:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E42 69FE            	  3273:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E44 0C500A88        	  3274:             cmpi.w #$0A88,(a0)
00:00001E48 66FE            	  3275:             bne.s *                   * Check Z Flag  beq/bne
                            	  3276: 
                            	  3277: * -----
                            	  3278: 
                            	  3279: *     NEG - LONG
00:00001E4A 307C0100        	  3280:             move.l #$00000100,a0
00:00001E4E 7000            	  3281:             moveq  #$00000000,d0
00:00001E50 223C80000000    	  3282:             move.l #$80000000,d1
00:00001E56 4480            	  3283:             neg.l d0
00:00001E58 6BFE            	  3284:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E5A 66FE            	  3285:             bne.s *                   * Check Z Flag  beq/bne 1
00:00001E5C 65FE            	  3286:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00001E5E 69FE            	  3287:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E60 4481            	  3288:             neg.l d1
00:00001E62 6AFE            	  3289:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E64 67FE            	  3290:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E66 64FE            	  3291:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E68 68FE            	  3292:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00001E6A 0C8180000000    	  3293:             cmpi.l #$80000000,d1
00:00001E70 66FE            	  3294:             bne.s *                   * Check Z Flag  beq/bne
00:00001E72 20BC7FFFFFFF    	  3295:             move.l #$7FFFFFFF,(a0)
00:00001E78 4490            	  3296:             neg.l (a0)
00:00001E7A 6AFE            	  3297:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001E7C 67FE            	  3298:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E7E 64FE            	  3299:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E80 69FE            	  3300:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E82 20BCF5781234    	  3301:             move.l #$F5781234,(a0)
00:00001E88 4490            	  3302:             neg.l (a0)
00:00001E8A 6BFE            	  3303:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001E8C 67FE            	  3304:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001E8E 64FE            	  3305:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001E90 69FE            	  3306:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001E92 0C900A87EDCC    	  3307:             cmpi.l #$0A87EDCC,(a0)
00:00001E98 66FE            	  3308:             bne.s *                   * Check Z Flag  beq/bne
                            	  3309: 
                            	  3310: 
                            	  3311: * -----
                            	  3312: 
                            	  3313: *     NEGX - BYTE
00:00001E9A 307C0100        	  3314:             move.l #$00000100,a0
00:00001E9E 7000            	  3315:             moveq  #$00000000,d0
00:00001EA0 7240D241        	  3316:             move.l #$00000080,d1
00:00001EA4 003C0010        	  3317:             ori.b #$10,CCR        * Set X Flag
00:00001EA8 4000            	  3318:             negx.b d0
00:00001EAA 6AFE            	  3319:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001EAC 67FE            	  3320:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EAE 64FE            	  3321:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EB0 69FE            	  3322:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EB2 023C00EF        	  3323:             andi.b #$EF,CCR       * Clear X Flag
00:00001EB6 4000            	  3324:             negx.b d0
00:00001EB8 6BFE            	  3325:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001EBA 67FE            	  3326:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001EBC 64FE            	  3327:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001EBE 69FE            	  3328:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EC0 003C0010        	  3329:             ori.b #$10,CCR        * Set X Flag
00:00001EC4 4001            	  3330:             negx.b d1
00:00001EC6 6BFE            	  3331:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001EC8 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001ECA 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001ECC 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001ECE 0C01007F        	  3335:             cmpi.b #$7F,d1
00:00001ED2 66FE            	  3336:             bne.s *                   * Check Z Flag  beq/bne
00:00001ED4 023C00EF        	  3337:             andi.b #$EF,CCR       * Clear X Flag
00:00001ED8 4001            	  3338:             negx.b d1
00:00001EDA 6AFE            	  3339:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EDC 67FE            	  3340:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EDE 64FE            	  3341:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001EE0 69FE            	  3342:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001EE2 0C010081        	  3343:             cmpi.b #$81,d1
00:00001EE6 66FE            	  3344:             bne.s *                   * Check Z Flag  beq/bne
00:00001EE8 10BC007F        	  3345:             move.b #$7F,(a0)
00:00001EEC 003C0010        	  3346:             ori.b #$10,CCR        * Set X Flag
00:00001EF0 4010            	  3347:             negx.b (a0)
00:00001EF2 6AFE            	  3348:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001EF4 67FE            	  3349:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001EF6 64FE            	  3350:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3351:             * I think overflow should happen here.
                            	  3352: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001EF8 10BC007F        	  3353:             move.b #$7F,(a0)
00:00001EFC 023C00EF        	  3354:             andi.b #$EF,CCR       * Clear X Flag
00:00001F00 4010            	  3355:             negx.b (a0)
00:00001F02 6AFE            	  3356:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F04 67FE            	  3357:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F06 64FE            	  3358:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F08 69FE            	  3359:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F0A 10BC00F5        	  3360:             move.b #$F5,(a0)
00:00001F0E 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
00:00001F12 4010            	  3362:             negx.b (a0)
00:00001F14 6BFE            	  3363:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F16 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F18 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F1A 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F1C 0C10000A        	  3367:             cmpi.b #$0A,(a0)
00:00001F20 66FE            	  3368:             bne.s *                   * Check Z Flag  beq/bne
00:00001F22 023C00EF        	  3369:             andi.b #$EF,CCR       * Clear X Flag
00:00001F26 4010            	  3370:             negx.b (a0)
00:00001F28 6AFE            	  3371:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F2A 67FE            	  3372:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F2C 64FE            	  3373:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F2E 69FE            	  3374:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F30 0C1000F6        	  3375:             cmpi.b #$F6,(a0)
00:00001F34 66FE            	  3376:             bne.s *                   * Check Z Flag  beq/bne
                            	  3377: 
                            	  3378: 
                            	  3379: 
                            	  3380: * -----
                            	  3381: 
                            	  3382: *     NEGX - WORD
00:00001F36 307C0100        	  3383:             move.l #$00000100,a0
00:00001F3A 7000            	  3384:             moveq  #$00000000,d0
00:00001F3C 223C00008000    	  3385:             move.l #$00008000,d1
00:00001F42 003C0010        	  3386:             ori.b #$10,CCR        * Set X Flag
00:00001F46 4040            	  3387:             negx.w d0
00:00001F48 6AFE            	  3388:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001F4A 67FE            	  3389:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F4C 64FE            	  3390:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F4E 69FE            	  3391:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F50 023C00EF        	  3392:             andi.b #$EF,CCR       * Clear X Flag
00:00001F54 4040            	  3393:             negx.w d0
00:00001F56 6BFE            	  3394:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001F58 67FE            	  3395:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001F5A 64FE            	  3396:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001F5C 69FE            	  3397:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F5E 003C0010        	  3398:             ori.b #$10,CCR        * Set X Flag
00:00001F62 4041            	  3399:             negx.w d1
00:00001F64 6BFE            	  3400:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001F66 67FE            	  3401:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F68 64FE            	  3402:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F6A 69FE            	  3403:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F6C 0C417FFF        	  3404:             cmpi.w #$7FFF,d1
00:00001F70 66FE            	  3405:             bne.s *                   * Check Z Flag  beq/bne
00:00001F72 023C00EF        	  3406:             andi.b #$EF,CCR       * Clear X Flag
00:00001F76 4041            	  3407:             negx.w d1
00:00001F78 6AFE            	  3408:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F7A 67FE            	  3409:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F7C 64FE            	  3410:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001F7E 69FE            	  3411:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00001F80 0C418001        	  3412:             cmpi.w #$8001,d1
00:00001F84 66FE            	  3413:             bne.s *                   * Check Z Flag  beq/bne
00:00001F86 30BC7FFF        	  3414:             move.w #$7FFF,(a0)
00:00001F8A 003C0010        	  3415:             ori.b #$10,CCR        * Set X Flag
00:00001F8E 4050            	  3416:             negx.w (a0)
00:00001F90 6AFE            	  3417:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00001F92 67FE            	  3418:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001F94 64FE            	  3419:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3420: ***            
                            	  3421: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001F96 30BCF567        	  3422:             move.w #$F567,(a0)
00:00001F9A 023C00EF        	  3423:             andi.b #$EF,CCR       * Clear X Flag
00:00001F9E 4050            	  3424:             negx.w (a0)
00:00001FA0 6BFE            	  3425:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00001FA2 67FE            	  3426:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FA4 64FE            	  3427:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FA6 69FE            	  3428:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FA8 30BCF567        	  3429:             move.w #$F567,(a0)
00:00001FAC 003C0010        	  3430:             ori.b #$10,CCR        * Set X Flag
00:00001FB0 4050            	  3431:             negx.w (a0)
00:00001FB2 6BFE            	  3432:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FB4 67FE            	  3433:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FB6 64FE            	  3434:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FB8 69FE            	  3435:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FBA 0C500A98        	  3436:             cmpi.w #$0A98,(a0)
00:00001FBE 66FE            	  3437:             bne.s *                   * Check Z Flag  beq/bne
00:00001FC0 023C00EF        	  3438:             andi.b #$EF,CCR       * Clear X Flag
00:00001FC4 4050            	  3439:             negx.w (a0)
00:00001FC6 6AFE            	  3440:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001FC8 67FE            	  3441:             beq.s *                   * Check Z Flag  beq/bne 0
00:00001FCA 64FE            	  3442:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00001FCC 69FE            	  3443:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FCE 0C50F568        	  3444:             cmpi.w #$F568,(a0)
00:00001FD2 66FE            	  3445:             bne.s *                   * Check Z Flag  beq/bne
                            	  3446: 
                            	  3447: 
                            	  3448: * -----
                            	  3449: 
                            	  3450: *     NEGX - LONG
00:00001FD4 307C0100        	  3451:             move.l #$00000100,a0
00:00001FD8 7000            	  3452:             moveq  #$00000000,d0
00:00001FDA 223C80000000    	  3453:             move.l #$80000000,d1
00:00001FE0 003C0010        	  3454:             ori.b #$10,CCR        * Set X Flag
00:00001FE4 4080            	  3455:             negx.l d0
00:00001FE6 6AFE            	  3456:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00001FE8 67FE            	  3457:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001FEA 64FE            	  3458:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001FEC 69FE            	  3459:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FEE 023C00EF        	  3460:             andi.b #$EF,CCR       * Clear X Flag
00:00001FF2 4080            	  3461:             negx.l d0
00:00001FF4 6BFE            	  3462:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00001FF6 67FE            	  3463:             beq.s *                   * Check Z Flag  beq/bne 1
00:00001FF8 64FE            	  3464:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00001FFA 69FE            	  3465:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00001FFC 003C0010        	  3466:             ori.b #$10,CCR        * Set X Flag
00:00002000 4081            	  3467:             negx.l d1
00:00002002 6BFE            	  3468:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00002004 67FE            	  3469:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002006 64FE            	  3470:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002008 69FE            	  3471:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:0000200A 0C817FFFFFFF    	  3472:             cmpi.l #$7FFFFFFF,d1
00:00002010 66FE            	  3473:             bne.s *                   * Check Z Flag  beq/bne
00:00002012 023C00EF        	  3474:             andi.b #$EF,CCR       * Clear X Flag
00:00002016 4081            	  3475:             negx.l d1
00:00002018 6AFE            	  3476:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000201A 67FE            	  3477:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000201C 64FE            	  3478:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3479: ****            
                            	  3480: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:0000201E 0C8180000001    	  3481:             cmpi.l #$80000001,d1
00:00002024 66FE            	  3482:             bne.s *                   * Check Z Flag  beq/bne
00:00002026 20BC00007FFF    	  3483:             move.l #$7FFF,(a0)
00:0000202C 003C0010        	  3484:             ori.b #$10,CCR        * Set X Flag
00:00002030 4090            	  3485:             negx.l (a0)
00:00002032 6AFE            	  3486:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00002034 67FE            	  3487:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002036 64FE            	  3488:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3489: ****            
                            	  3490: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002038 20BCF5671234    	  3491:             move.l #$F5671234,(a0)
00:0000203E 023C00EF        	  3492:             andi.b #$EF,CCR       * Clear X Flag
00:00002042 4090            	  3493:             negx.l (a0)
00:00002044 6BFE            	  3494:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00002046 67FE            	  3495:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002048 64FE            	  3496:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000204A 69FE            	  3497:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000204C 20BCF5675678    	  3498:             move.l #$F5675678,(a0)
00:00002052 003C0010        	  3499:             ori.b #$10,CCR        * Set X Flag
00:00002056 4090            	  3500:             negx.l (a0)
00:00002058 6BFE            	  3501:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000205A 67FE            	  3502:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000205C 64FE            	  3503:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000205E 69FE            	  3504:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002060 0C900A98A987    	  3505:             cmpi.l #$0A98A987,(a0)
00:00002066 66FE            	  3506:             bne.s *                   * Check Z Flag  beq/bne
00:00002068 023C00EF        	  3507:             andi.b #$EF,CCR       * Clear X Flag
00:0000206C 4090            	  3508:             negx.l (a0)
00:0000206E 6AFE            	  3509:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00002070 67FE            	  3510:             beq.s *                   * Check Z Flag  beq/bne 0
00:00002072 64FE            	  3511:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00002074 69FE            	  3512:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00002076 0C90F5675679    	  3513:             cmpi.l #$F5675679,(a0)
00:0000207C 66FE            	  3514:             bne.s *                   * Check Z Flag  beq/bne
                            	  3515: 
                            	  3516: 
                            	  3517: * -----
                            	  3518: 
                            	  3519: *     CLR - BYTE
00:0000207E 307C0100        	  3520:             move.l #$00000100,a0
00:00002082 203C12345678    	  3521:             move.l #$12345678,d0
00:00002088 223C12345678    	  3522:             move.l #$12345678,d1
00:0000208E 243C12345678    	  3523:             move.l #$12345678,d2
00:00002094 283C12345600    	  3524:             move.l #$12345600,d4
00:0000209A 2A3C12340000    	  3525:             move.l #$12340000,d5
00:000020A0 7C00            	  3526:             moveq  #$00000000,d6
                            	  3527: 
00:000020A2 4200            	  3528:             clr.b d0
00:000020A4 66FE            	  3529:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020A6 6BFE            	  3530:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020A8 B880            	  3531:             cmp.l d0,d4
00:000020AA 66FE            	  3532:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3533: 
00:000020AC 4241            	  3534:             clr.w d1
00:000020AE 66FE            	  3535:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020B0 6BFE            	  3536:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020B2 BA81            	  3537:             cmp.l d1,d5
00:000020B4 66FE            	  3538:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3539: 
00:000020B6 7400            	  3540:             clr.l d2
00:000020B8 66FE            	  3541:             bne.s *                   * Check Z Flag  beq/bne 0
00:000020BA 6BFE            	  3542:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000020BC BC82            	  3543:             cmp.l d2,d6
00:000020BE 66FE            	  3544:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3545: 
00:000020C0 4E75            	  3546:             rts
                            	  3547: 
                            	  3548: 
                            	  3549: 
                            	  3550: *-----------------------------------------------------------
                            	  3551: *-----------------------------------------------------------
                            	  3552: * OPCODE : MOVEM
                            	  3553: *-----------------------------------------------------------
                            	  3554: *-----------------------------------------------------------
                            	  3555: op_MOVEM:
                            	  3556: 
                            	  3557: *     WORD  Registers --> Memory
00:000020C2 203C0000D0D0    	  3558:             move.l #$0000d0d0,d0
00:000020C8 223C0000D1D1    	  3559:             move.l #$0000d1d1,d1
00:000020CE 243C0000D2D2    	  3560:             move.l #$0000d2d2,d2
00:000020D4 263C0000D3D3    	  3561:             move.l #$0000d3d3,d3
00:000020DA 283C0000D4D4    	  3562:             move.l #$0000d4d4,d4
00:000020E0 2A3C0000D5D5    	  3563:             move.l #$0000d5d5,d5
00:000020E6 2C3C0000D6D6    	  3564:             move.l #$0000d6d6,d6
00:000020EC 2E3C0000D7D7    	  3565:             move.l #$0000d7d7,d7
00:000020F2 307C0A0A        	  3566:             move.l #$00000a0a,a0
00:000020F6 327C1A1A        	  3567:             move.l #$00001a1a,a1
00:000020FA 347C2A2A        	  3568:             move.l #$00002a2a,a2
00:000020FE 367C3A3A        	  3569:             move.l #$00003a3a,a3
00:00002102 387C4A4A        	  3570:             move.l #$00004a4a,a4
00:00002106 3A7C5A5A        	  3571:             move.l #$00005a5a,a5
00:0000210A 3C7C6A6A        	  3572:             move.l #$00006a6a,a6
                            	  3573: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3574: 
00:0000210E 48B8FFFF0100    	  3575:             movem.w D0-D7/A0-A7,$00000100
                            	  3576: 
00:00002114 307C0100        	  3577:             move.l #$00000100,a0
                            	  3578: 
00:00002118 B058            	  3579:             cmp.w (a0)+,d0
00:0000211A 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000211C B258            	  3581:             cmp.w (a0)+,d1
00:0000211E 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002120 B458            	  3583:             cmp.w (a0)+,d2
00:00002122 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002124 B658            	  3585:             cmp.w (a0)+,d3
00:00002126 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002128 B858            	  3587:             cmp.w (a0)+,d4
00:0000212A 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000212C BA58            	  3589:             cmp.w (a0)+,d5
00:0000212E 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002130 BC58            	  3591:             cmp.w (a0)+,d6
00:00002132 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002134 BE58            	  3593:             cmp.w (a0)+,d7
00:00002136 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3595: 
00:00002138 0C580A0A        	  3596:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:0000213C 66FE            	  3597:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3598: 
00:0000213E B2D8            	  3599:             cmp.w (a0)+,a1
00:00002140 66FE            	  3600:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002142 B4D8            	  3601:             cmp.w (a0)+,a2
00:00002144 66FE            	  3602:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002146 B6D8            	  3603:             cmp.w (a0)+,a3
00:00002148 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000214A B8D8            	  3605:             cmp.w (a0)+,a4
00:0000214C 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000214E BAD8            	  3607:             cmp.w (a0)+,a5
00:00002150 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002152 BCD8            	  3609:             cmp.w (a0)+,a6
00:00002154 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: *     LONG  Registers --> Memory
00:00002156 203CD0D0D0D0    	  3616:             move.l #$d0d0d0d0,d0
00:0000215C 223CD1D1D1D1    	  3617:             move.l #$d1d1d1d1,d1
00:00002162 243CD2D2D2D2    	  3618:             move.l #$d2d2d2d2,d2
00:00002168 263CD3D3D3D3    	  3619:             move.l #$d3d3d3d3,d3
00:0000216E 283CD4D4D4D4    	  3620:             move.l #$d4d4d4d4,d4
00:00002174 2A3CD5D5D5D5    	  3621:             move.l #$d5d5d5d5,d5
00:0000217A 2C3CD6D6D6D6    	  3622:             move.l #$d6d6d6d6,d6
00:00002180 2E3CD7D7D7D7    	  3623:             move.l #$d7d7d7d7,d7
00:00002186 207C0A0A0A0A    	  3624:             move.l #$0a0a0a0a,a0
00:0000218C 227C1A1A1A1A    	  3625:             move.l #$1a1a1a1a,a1
00:00002192 247C2A2A2A2A    	  3626:             move.l #$2a2a2a2a,a2
00:00002198 267C3A3A3A3A    	  3627:             move.l #$3a3a3a3a,a3
00:0000219E 287C4A4A4A4A    	  3628:             move.l #$4a4a4a4a,a4
00:000021A4 2A7C5A5A5A5A    	  3629:             move.l #$5a5a5a5a,a5
00:000021AA 2C7C6A6A6A6A    	  3630:             move.l #$6a6a6a6a,a6
                            	  3631: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3632: 
                            	  3633: 
00:000021B0 48F8FFFF0120    	  3634:             movem.l D0-D7/A0-A7,$00000120
                            	  3635: 
00:000021B6 307C0120        	  3636:             move.l #$00000120,a0
                            	  3637: 
00:000021BA B098            	  3638:             cmp.l (a0)+,d0
00:000021BC 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021BE B298            	  3640:             cmp.l (a0)+,d1
00:000021C0 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021C2 B498            	  3642:             cmp.l (a0)+,d2
00:000021C4 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021C6 B698            	  3644:             cmp.l (a0)+,d3
00:000021C8 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021CA B898            	  3646:             cmp.l (a0)+,d4
00:000021CC 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021CE BA98            	  3648:             cmp.l (a0)+,d5
00:000021D0 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021D2 BC98            	  3650:             cmp.l (a0)+,d6
00:000021D4 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021D6 BE98            	  3652:             cmp.l (a0)+,d7
00:000021D8 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3654: 
00:000021DA 0C980A0A0A0A    	  3655:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:000021E0 66FE            	  3656:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3657: 
00:000021E2 B3D8            	  3658:             cmp.l (a0)+,a1
00:000021E4 66FE            	  3659:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021E6 B5D8            	  3660:             cmp.l (a0)+,a2
00:000021E8 66FE            	  3661:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021EA B7D8            	  3662:             cmp.l (a0)+,a3
00:000021EC 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021EE B9D8            	  3664:             cmp.l (a0)+,a4
00:000021F0 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021F2 BBD8            	  3666:             cmp.l (a0)+,a5
00:000021F4 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
00:000021F6 BDD8            	  3668:             cmp.l (a0)+,a6
00:000021F8 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3670: *      ----
                            	  3671: 
                            	  3672: 
                            	  3673: *     WORD  Registers --> Memory  -(An) EA Mode
00:000021FA 203C0000D0D0    	  3674:             move.l #$0000d0d0,d0
00:00002200 223C0000D1D1    	  3675:             move.l #$0000d1d1,d1
00:00002206 243C0000D2D2    	  3676:             move.l #$0000d2d2,d2
00:0000220C 263C0000D3D3    	  3677:             move.l #$0000d3d3,d3
00:00002212 283C0000D4D4    	  3678:             move.l #$0000d4d4,d4
00:00002218 2A3C0000D5D5    	  3679:             move.l #$0000d5d5,d5
00:0000221E 2C3C0000D6D6    	  3680:             move.l #$0000d6d6,d6
00:00002224 2E3C0000D7D7    	  3681:             move.l #$0000d7d7,d7
00:0000222A 307C0A0A        	  3682:             move.l #$00000a0a,a0
00:0000222E 327C1A1A        	  3683:             move.l #$00001a1a,a1
00:00002232 347C2A2A        	  3684:             move.l #$00002a2a,a2
00:00002236 367C3A3A        	  3685:             move.l #$00003a3a,a3
00:0000223A 387C4A4A        	  3686:             move.l #$00004a4a,a4
00:0000223E 3A7C5A5A        	  3687:             move.l #$00005a5a,a5
00:00002242 3C7C6A6A        	  3688:             move.l #$00006a6a,a6
                            	  3689: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3690: 
00:00002246 307C01A0        	  3691:             move.l #$000001A0,a0
00:0000224A 48A0FFFF        	  3692:             movem.w D0-D7/A0-A7,-(a0)
                            	  3693: 
00:0000224E 307C019E        	  3694:             move.l #$0000019E,a0
                            	  3695: 
00:00002252 BCE0            	  3696:             cmp.w -(a0),a6
00:00002254 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002256 BAE0            	  3698:             cmp.w -(a0),a5
00:00002258 66FE            	  3699:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000225A B8E0            	  3700:             cmp.w -(a0),a4
00:0000225C 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000225E B6E0            	  3702:             cmp.w -(a0),a3
00:00002260 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002262 B4E0            	  3704:             cmp.w -(a0),a2
00:00002264 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002266 B2E0            	  3706:             cmp.w -(a0),a1
00:00002268 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000226A B0E0            	  3708:             cmp.w -(a0),a0
                            	  3709: *            bne.s *                   * Check Z Flag  beq/bne 0
00:0000226C BE60            	  3710:             cmp.w -(a0),d7
00:0000226E 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002270 BC60            	  3712:             cmp.w -(a0),d6
00:00002272 66FE            	  3713:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002274 BA60            	  3714:             cmp.w -(a0),d5
00:00002276 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002278 B860            	  3716:             cmp.w -(a0),d4
00:0000227A 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000227C B660            	  3718:             cmp.w -(a0),d3
00:0000227E 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002280 B460            	  3720:             cmp.w -(a0),d2
00:00002282 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002284 B260            	  3722:             cmp.w -(a0),d1
00:00002286 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002288 B060            	  3724:             cmp.w -(a0),d0
00:0000228A 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: *     LONG  Registers --> Memory   -(An) EA Mode
00:0000228C 203CD0D0D0D0    	  3731:             move.l #$d0d0d0d0,d0
00:00002292 223CD1D1D1D1    	  3732:             move.l #$d1d1d1d1,d1
00:00002298 243CD2D2D2D2    	  3733:             move.l #$d2d2d2d2,d2
00:0000229E 263CD3D3D3D3    	  3734:             move.l #$d3d3d3d3,d3
00:000022A4 283CD4D4D4D4    	  3735:             move.l #$d4d4d4d4,d4
00:000022AA 2A3CD5D5D5D5    	  3736:             move.l #$d5d5d5d5,d5
00:000022B0 2C3CD6D6D6D6    	  3737:             move.l #$d6d6d6d6,d6
00:000022B6 2E3CD7D7D7D7    	  3738:             move.l #$d7d7d7d7,d7
00:000022BC 207C0A0A0A0A    	  3739:             move.l #$0a0a0a0a,a0
00:000022C2 227C1A1A1A1A    	  3740:             move.l #$1a1a1a1a,a1
00:000022C8 247C2A2A2A2A    	  3741:             move.l #$2a2a2a2a,a2
00:000022CE 267C3A3A3A3A    	  3742:             move.l #$3a3a3a3a,a3
00:000022D4 287C4A4A4A4A    	  3743:             move.l #$4a4a4a4a,a4
00:000022DA 2A7C5A5A5A5A    	  3744:             move.l #$5a5a5a5a,a5
00:000022E0 2C7C6A6A6A6A    	  3745:             move.l #$6a6a6a6a,a6
                            	  3746: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3747: 
                            	  3748: 
00:000022E6 307C01A0        	  3749:             move.l #$000001A0,a0
00:000022EA 48E0FFFF        	  3750:             movem.l D0-D7/A0-A7,-(a0)
                            	  3751: 
00:000022EE 307C019C        	  3752:             move.l #$0000019C,a0
                            	  3753: 
00:000022F2 BDE0            	  3754:             cmp.l -(a0),a6
00:000022F4 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022F6 BBE0            	  3756:             cmp.l -(a0),a5
00:000022F8 66FE            	  3757:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022FA B9E0            	  3758:             cmp.l -(a0),a4
00:000022FC 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
00:000022FE B7E0            	  3760:             cmp.l -(a0),a3
00:00002300 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002302 B5E0            	  3762:             cmp.l -(a0),a2
00:00002304 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002306 B3E0            	  3764:             cmp.l -(a0),a1
00:00002308 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000230A B1E0            	  3766:             cmp.l -(a0),a0
                            	  3767: *            bne.s *                   * Check Z Flag  beq/bne 0
00:0000230C BEA0            	  3768:             cmp.l -(a0),d7
00:0000230E 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002310 BCA0            	  3770:             cmp.l -(a0),d6
00:00002312 66FE            	  3771:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002314 BAA0            	  3772:             cmp.l -(a0),d5
00:00002316 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002318 B8A0            	  3774:             cmp.l -(a0),d4
00:0000231A 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000231C B6A0            	  3776:             cmp.l -(a0),d3
00:0000231E 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002320 B4A0            	  3778:             cmp.l -(a0),d2
00:00002322 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002324 B2A0            	  3780:             cmp.l -(a0),d1
00:00002326 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002328 B0A0            	  3782:             cmp.l -(a0),d0
00:0000232A 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3784: 
                            	  3785: 
                            	  3786: 
                            	  3787: *     ----
                            	  3788: 
                            	  3789: *     WORD - Memory --> Registers
00:0000232C 7000            	  3790:             moveq  #$00000000,d0
00:0000232E 7200            	  3791:             moveq  #$00000000,d1
00:00002330 7400            	  3792:             moveq  #$00000000,d2
00:00002332 7600            	  3793:             moveq  #$00000000,d3
00:00002334 7800            	  3794:             moveq  #$00000000,d4
00:00002336 7A00            	  3795:             moveq  #$00000000,d5
00:00002338 7C00            	  3796:             moveq  #$00000000,d6
00:0000233A 7E00            	  3797:             moveq  #$00000000,d7
00:0000233C 91C8            	  3798:             move.l #$00000000,a0
00:0000233E 93C9            	  3799:             move.l #$00000000,a1
00:00002340 95CA            	  3800:             move.l #$00000000,a2
00:00002342 97CB            	  3801:             move.l #$00000000,a3
00:00002344 99CC            	  3802:             move.l #$00000000,a4
00:00002346 9BCD            	  3803:             move.l #$00000000,a5
00:00002348 9DCE            	  3804:             move.l #$00000000,a6
                            	  3805: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3806: 
00:0000234A 4CB82A550100    	  3807:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3808: 
00:00002350 B0BCFFFFD0D0    	  3809:             cmp.l #$FFFFD0D0,d0
00:00002356 66FE            	  3810:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002358 B4BCFFFFD1D1    	  3811:             cmp.l #$FFFFD1D1,d2
00:0000235E 66FE            	  3812:             bne.s *                  * Check Z Flag  beq/bne 0
00:00002360 B8BCFFFFD2D2    	  3813:             cmp.l #$FFFFD2D2,d4
00:00002366 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002368 BCBCFFFFD3D3    	  3815:             cmp.l #$FFFFD3D3,d6
00:0000236E 66FE            	  3816:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002370 B2FCD4D4        	  3817:             cmp.l #$FFFFD4D4,a1
00:00002374 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
00:00002376 B6FCD5D5        	  3819:             cmp.l #$FFFFD5D5,a3
00:0000237A 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000237C BAFCD6D6        	  3821:             cmp.l #$FFFFD6D6,a5
00:00002380 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3823: 
                            	  3824: 
                            	  3825: *     LONG - Memory --> Registers
00:00002382 7000            	  3826:             moveq  #$00000000,d0
00:00002384 7200            	  3827:             moveq  #$00000000,d1
00:00002386 7400            	  3828:             moveq  #$00000000,d2
00:00002388 7600            	  3829:             moveq  #$00000000,d3
00:0000238A 7800            	  3830:             moveq  #$00000000,d4
00:0000238C 7A00            	  3831:             moveq  #$00000000,d5
00:0000238E 7C00            	  3832:             moveq  #$00000000,d6
00:00002390 7E00            	  3833:             moveq  #$00000000,d7
00:00002392 91C8            	  3834:             move.l #$00000000,a0
00:00002394 93C9            	  3835:             move.l #$00000000,a1
00:00002396 95CA            	  3836:             move.l #$00000000,a2
00:00002398 97CB            	  3837:             move.l #$00000000,a3
00:0000239A 99CC            	  3838:             move.l #$00000000,a4
00:0000239C 9BCD            	  3839:             move.l #$00000000,a5
00:0000239E 9DCE            	  3840:             move.l #$00000000,a6
                            	  3841: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3842: 
00:000023A0 4CF82A550120    	  3843:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3844: 
00:000023A6 B0BCD0D0D0D0    	  3845:             cmp.l #$D0D0D0D0,d0
00:000023AC 66FE            	  3846:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023AE B4BCD1D1D1D1    	  3847:             cmp.l #$D1D1D1D1,d2
00:000023B4 66FE            	  3848:             bne.s *                  * Check Z Flag  beq/bne 0
00:000023B6 B8BCD2D2D2D2    	  3849:             cmp.l #$D2D2D2D2,d4
00:000023BC 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023BE BCBCD3D3D3D3    	  3851:             cmp.l #$D3D3D3D3,d6
00:000023C4 66FE            	  3852:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023C6 B3FCD4D4D4D4    	  3853:             cmp.l #$D4D4D4D4,a1
00:000023CC 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023CE B7FCD5D5D5D5    	  3855:             cmp.l #$D5D5D5D5,a3
00:000023D4 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
00:000023D6 BBFCD6D6D6D6    	  3857:             cmp.l #$D6D6D6D6,a5
00:000023DC 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3859: 
00:000023DE 4E75            	  3860:             rts
                            	  3861: 
                            	  3862: 
                            	  3863: *-----------------------------------------------------------
                            	  3864: *-----------------------------------------------------------
                            	  3865: * OPCODE : ABCD
                            	  3866: *-----------------------------------------------------------
                            	  3867: *-----------------------------------------------------------
                            	  3868: op_ABCD:
                            	  3869: 
                            	  3870: *     Test with X Flag CLEARED
00:000023E0 307C0110        	  3871:                 move.l #$00000110,a0 * Address pointer-X
00:000023E4 327C0120        	  3872:                 move.l #$00000120,a1 * Address pointer-Y
00:000023E8 7000            	  3873:                 moveq  #$00000000,d0 * BCD byte-X
00:000023EA 7200            	  3874:                 moveq  #$00000000,d1 * BCD byte-Y
00:000023EC 7400            	  3875:                 moveq  #$00000000,d2
00:000023EE 7600            	  3876:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000023F0 7800            	  3877:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000023F2 7A00            	  3878:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000023F4 2C3C00000099    	  3879:                 move.l #$00000099,d6 * Inner loop counter
00:000023FA 2E3C00000099    	  3880:                 move.l #$00000099,d7 * Outer loop counter
                            	  3881: 
00:00002400 2007            	  3882: ABCD_OUTER1:    move.l d7,d0
00:00002402 2206            	  3883: ABCD_INNER1:    move.l d6,d1
00:00002404 023C00EF        	  3884:                 andi.b #$EF,CCR     * Clear X Flag
00:00002408 307C0110        	  3885:                 move.l #$00000110,a0 * Address pointer-X
00:0000240C 327C0120        	  3886:                 move.l #$00000120,a1 * Address pointer-Y
00:00002410 1140FFFF        	  3887:                 move.b d0,-1(a0)
00:00002414 1341FFFF        	  3888:                 move.b d1,-1(a1)
                            	  3889: 
00:00002418 C300            	  3890:                 abcd d0,d1
00:0000241A 6402            	  3891:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:0000241C 5284            	  3892:                 add.l #1,d4
00:0000241E DA81            	  3893: ABCD_NO_C1:     add.l d1,d5
                            	  3894: 
00:00002420 C308            	  3895:                 abcd -(a0),-(a1)
00:00002422 6402            	  3896:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00002424 5284            	  3897:                 add.l #1,d4
00:00002426 D611            	  3898: ABCD_NO_C2:     add.b (a1),d3
                            	  3899: 
                            	  3900: 
00:00002428 51CEFFD8        	  3901:                 dbf d6,ABCD_INNER1
00:0000242C 2C3C00000099    	  3902:                 move.l #$00000099,d6
00:00002432 51CFFFCC        	  3903:                 dbf d7,ABCD_OUTER1
00:00002436 0C8400005AFC    	  3904:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:0000243C 66FE            	  3905:                 bne.s *
00:0000243E 0C85001C9A34    	  3906:                 cmpi.l #$001C9A34,d5
00:00002444 66FE            	  3907:                 bne.s *
00:00002446 0C8300000034    	  3908:                 cmpi.l #$00000034,d3
00:0000244C 66FE            	  3909:                 bne.s *
                            	  3910: 
                            	  3911: *     Test with X Flag SET
00:0000244E 307C0110        	  3912:                 move.l #$00000110,a0 * Address pointer-X
00:00002452 327C0120        	  3913:                 move.l #$00000120,a1 * Address pointer-Y
00:00002456 7000            	  3914:                 moveq  #$00000000,d0 * BCD byte-X
00:00002458 7200            	  3915:                 moveq  #$00000000,d1 * BCD byte-Y
00:0000245A 7400            	  3916:                 moveq  #$00000000,d2
00:0000245C 7600            	  3917:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:0000245E 7800            	  3918:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00002460 7A00            	  3919:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00002462 2C3C00000099    	  3920:                 move.l #$00000099,d6 * Inner loop counter
00:00002468 2E3C00000099    	  3921:                 move.l #$00000099,d7 * Outer loop counter
                            	  3922: 
00:0000246E 2007            	  3923: ABCD_OUTER2:    move.l d7,d0
00:00002470 2206            	  3924: ABCD_INNER2:    move.l d6,d1
00:00002472 003C0010        	  3925:                 ori.b #$10,CCR      * Set X Flag
00:00002476 307C0110        	  3926:                 move.l #$00000110,a0 * Address pointer-X
00:0000247A 327C0120        	  3927:                 move.l #$00000120,a1 * Address pointer-Y
00:0000247E 1140FFFF        	  3928:                 move.b d0,-1(a0)
00:00002482 1341FFFF        	  3929:                 move.b d1,-1(a1)
                            	  3930: 
00:00002486 C300            	  3931:                 abcd d0,d1
00:00002488 6402            	  3932:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:0000248A 5284            	  3933:                 add.l #1,d4
00:0000248C DA81            	  3934: ABCD_NO_C3:     add.l d1,d5
                            	  3935: 
00:0000248E C308            	  3936:                 abcd -(a0),-(a1)
00:00002490 6402            	  3937:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00002492 5284            	  3938:                 add.l #1,d4
00:00002494 D611            	  3939: ABCD_NO_C4:     add.b (a1),d3
                            	  3940: 
                            	  3941: 
00:00002496 51CEFFD8        	  3942:                 dbf d6,ABCD_INNER2
00:0000249A 2C3C00000099    	  3943:                 move.l #$00000099,d6
00:000024A0 51CFFFCC        	  3944:                 dbf d7,ABCD_OUTER2
00:000024A4 0C8400005B60    	  3945:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:000024AA 66FE            	  3946:                 bne.s *
00:000024AC 0C85001CCFC8    	  3947:                 cmpi.l #$001CCFC8,d5
00:000024B2 66FE            	  3948:                 bne.s *
00:000024B4 0C8300000034    	  3949:                 cmpi.l #$00000034,d3
00:000024BA 66FE            	  3950:                 bne.s *
                            	  3951: 
                            	  3952: *             Quick check of Z Flag
00:000024BC 103C0000        	  3953:                 move.b #$00,d0
00:000024C0 123C0000        	  3954:                 move.b #$00,d1
00:000024C4 44FC0000        	  3955:                 move #$00,CCR              * Set Z flag to 0
00:000024C8 C101            	  3956:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000024CA 67FE            	  3957:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3958: 
00:000024CC 103C0001        	  3959:                 move.b #$01,d0
00:000024D0 123C0000        	  3960:                 move.b #$00,d1
00:000024D4 44FC0004        	  3961:                 move #$04,CCR              * Set Z flag to 0
00:000024D8 C101            	  3962:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000024DA 67FE            	  3963:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3964: 
00:000024DC 4E75            	  3965:                 rts
                            	  3966: 
                            	  3967: *-----------------------------------------------------------
                            	  3968: *-----------------------------------------------------------
                            	  3969: * OPCODE : SBCD
                            	  3970: *-----------------------------------------------------------
                            	  3971: *-----------------------------------------------------------
                            	  3972: op_SBCD:
                            	  3973: 
                            	  3974: *     Test with X Flag CLEARED
00:000024DE 307C0110        	  3975:                 move.l #$00000110,a0 * Address pointer-X
00:000024E2 327C0120        	  3976:                 move.l #$00000120,a1 * Address pointer-Y
00:000024E6 7000            	  3977:                 moveq  #$00000000,d0 * BCD byte-X
00:000024E8 7200            	  3978:                 moveq  #$00000000,d1 * BCD byte-Y
00:000024EA 7400            	  3979:                 moveq  #$00000000,d2
00:000024EC 7600            	  3980:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000024EE 7800            	  3981:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000024F0 7A00            	  3982:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000024F2 2C3C00000099    	  3983:                 move.l #$00000099,d6 * Inner loop counter
00:000024F8 2E3C00000099    	  3984:                 move.l #$00000099,d7 * Outer loop counter
                            	  3985: 
00:000024FE 2007            	  3986: SBCD_OUTER1:    move.l d7,d0
00:00002500 2206            	  3987: SBCD_INNER1:    move.l d6,d1
00:00002502 023C00EF        	  3988:                 andi.b #$EF,CCR     * Clear X Flag
00:00002506 307C0110        	  3989:                 move.l #$00000110,a0 * Address pointer-X
00:0000250A 327C0120        	  3990:                 move.l #$00000120,a1 * Address pointer-Y
00:0000250E 1140FFFF        	  3991:                 move.b d0,-1(a0)
00:00002512 1341FFFF        	  3992:                 move.b d1,-1(a1)
                            	  3993: 
00:00002516 8300            	  3994:                 sbcd d0,d1
00:00002518 6402            	  3995:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:0000251A 5284            	  3996:                 add.l #1,d4
00:0000251C DA81            	  3997: SBCD_NO_C1:     add.l d1,d5
                            	  3998: 
00:0000251E 8308            	  3999:                 sbcd -(a0),-(a1)
00:00002520 6402            	  4000:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00002522 5284            	  4001:                 add.l #1,d4
00:00002524 D611            	  4002: SBCD_NO_C2:     add.b (a1),d3
                            	  4003: 
                            	  4004: 
00:00002526 51CEFFD8        	  4005:                 dbf d6,SBCD_INNER1
00:0000252A 2C3C00000099    	  4006:                 move.l #$00000099,d6
00:00002530 51CFFFCC        	  4007:                 dbf d7,SBCD_OUTER1
00:00002534 0C8400005C0A    	  4008:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:0000253A 66FE            	  4009:                 bne.s *
00:0000253C 0C85001C459E    	  4010:                 cmpi.l #$001C459E,d5
00:00002542 66FE            	  4011:                 bne.s *
00:00002544 0C830000009E    	  4012:                 cmpi.l #$0000009E,d3
00:0000254A 66FE            	  4013:                 bne.s *
                            	  4014: 
                            	  4015: *     Test with X Flag SET
00:0000254C 307C0110        	  4016:                 move.l #$00000110,a0 * Address pointer-X
00:00002550 327C0120        	  4017:                 move.l #$00000120,a1 * Address pointer-Y
00:00002554 7000            	  4018:                 moveq  #$00000000,d0 * BCD byte-X
00:00002556 7200            	  4019:                 moveq  #$00000000,d1 * BCD byte-Y
00:00002558 7400            	  4020:                 moveq  #$00000000,d2
00:0000255A 7600            	  4021:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:0000255C 7800            	  4022:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000255E 7A00            	  4023:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00002560 2C3C00000099    	  4024:                 move.l #$00000099,d6 * Inner loop counter
00:00002566 2E3C00000099    	  4025:                 move.l #$00000099,d7 * Outer loop counter
                            	  4026: 
00:0000256C 2007            	  4027: SBCD_OUTER2:    move.l d7,d0
00:0000256E 2206            	  4028: SBCD_INNER2:    move.l d6,d1
00:00002570 003C0010        	  4029:                 ori.b #$10,CCR      * Set X Flag
00:00002574 307C0110        	  4030:                 move.l #$00000110,a0 * Address pointer-X
00:00002578 327C0120        	  4031:                 move.l #$00000120,a1 * Address pointer-Y
00:0000257C 1140FFFF        	  4032:                 move.b d0,-1(a0)
00:00002580 1341FFFF        	  4033:                 move.b d1,-1(a1)
                            	  4034: 
00:00002584 8300            	  4035:                 sbcd d0,d1
00:00002586 6402            	  4036:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:00002588 5284            	  4037:                 add.l #1,d4
00:0000258A DA81            	  4038: SBCD_NO_C3:     add.l d1,d5
                            	  4039: 
00:0000258C 8308            	  4040:                 sbcd -(a0),-(a1)
00:0000258E 6402            	  4041:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00002590 5284            	  4042:                 add.l #1,d4
00:00002592 D611            	  4043: SBCD_NO_C4:     add.b (a1),d3
                            	  4044: 
00:00002594 51CEFFD8        	  4045:                 dbf d6,SBCD_INNER2
00:00002598 2C3C00000099    	  4046:                 move.l #$00000099,d6
00:0000259E 51CFFFCC        	  4047:                 dbf d7,SBCD_OUTER2
00:000025A2 0C8400005CA4    	  4048:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:000025A8 66FE            	  4049:                 bne.s *
00:000025AA 0C85001C5C66    	  4050:                 cmpi.l #$001C5C66,d5
00:000025B0 66FE            	  4051:                 bne.s *
00:000025B2 0C830000009E    	  4052:                 cmpi.l #$0000009E,d3
00:000025B8 66FE            	  4053:                 bne.s *
                            	  4054: 
                            	  4055: 
                            	  4056: *             Quick check of Z Flag
00:000025BA 103C0000        	  4057:                 move.b #$00,d0
00:000025BE 123C0000        	  4058:                 move.b #$00,d1
00:000025C2 44FC0000        	  4059:                 move #$00,CCR              * Set Z flag to 0
00:000025C6 8101            	  4060:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000025C8 67FE            	  4061:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4062: 
00:000025CA 103C0001        	  4063:                 move.b #$01,d0
00:000025CE 123C0000        	  4064:                 move.b #$00,d1
00:000025D2 44FC0004        	  4065:                 move #$04,CCR              * Set Z flag to 0
00:000025D6 8101            	  4066:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000025D8 67FE            	  4067:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4068: 
00:000025DA 4E75            	  4069:                 rts
                            	  4070: 
                            	  4071: *-----------------------------------------------------------
                            	  4072: *-----------------------------------------------------------
                            	  4073: * OPCODE : NBCD
                            	  4074: *-----------------------------------------------------------
                            	  4075: *-----------------------------------------------------------
                            	  4076: op_NBCD:
                            	  4077: 
                            	  4078: *        NBCD to a  Register
                            	  4079: 
00:000025DC 7000            	  4080:                 moveq  #$00000000,d0 * BCD byte
00:000025DE 7200            	  4081:                 moveq  #$00000000,d1
00:000025E0 7400            	  4082:                 moveq  #$00000000,d2
00:000025E2 7600            	  4083:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:000025E4 7800            	  4084:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000025E6 7A00            	  4085:                 moveq  #$00000000,d5 * Cumulative BCD results
00:000025E8 2C3C00000099    	  4086:                 move.l #$00000099,d6
00:000025EE 2E3C00000099    	  4087:                 move.l #$00000099,d7 * Loop counter
                            	  4088: 
00:000025F4 2007            	  4089: NBCD_LOOP:      move.l d7,d0
00:000025F6 44FC0004        	  4090:                 move #$04,CCR        * Set Z flag to 0
                            	  4091: 
00:000025FA 4800            	  4092:                 nbcd d0
                            	  4093: 
00:000025FC 6402            	  4094:                 bcc.s NBCD_NO_C         * Check C Flag
00:000025FE 5284            	  4095:                 add.l #1,d4
00:00002600 6602            	  4096: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:00002602 5283            	  4097:                 add.l #1,d3
00:00002604 DA80            	  4098: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4099: 
00:00002606 51CFFFEC        	  4100:                 dbf d7,NBCD_LOOP
                            	  4101: 
00:0000260A 0C8300000001    	  4102:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00002610 66FE            	  4103:                 bne.s *
00:00002612 0C8400000099    	  4104:                 cmpi.l #$00000099,d4
00:00002618 66FE            	  4105:                 bne.s *
00:0000261A 0C8500002E3B    	  4106:                 cmpi.l #$00002E3B,d5
00:00002620 66FE            	  4107:                 bne.s *
                            	  4108: 
                            	  4109: 
                            	  4110: *        NBCD to a memory location
                            	  4111: 
00:00002622 7000            	  4112:                 moveq  #$00000000,d0 * BCD byte
00:00002624 7200            	  4113:                 moveq  #$00000000,d1
00:00002626 7400            	  4114:                 moveq  #$00000000,d2
00:00002628 7600            	  4115:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:0000262A 7800            	  4116:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000262C 7A00            	  4117:                 moveq  #$00000000,d5 * Cumulative BCD results
00:0000262E 2C3C00000099    	  4118:                 move.l #$00000099,d6
00:00002634 2E3C00000099    	  4119:                 move.l #$00000099,d7 * Loop counter
                            	  4120: 
00:0000263A 11C70100        	  4121: NBCD_LOOP1:     move.b d7,$00000100
00:0000263E 44FC0004        	  4122:                 move #$04,CCR        * Set Z flag to 0
                            	  4123: 
00:00002642 48380100        	  4124:                 nbcd $00000100
00:00002646 10380100        	  4125:                 move.b $00000100,d0
                            	  4126: 
00:0000264A 6402            	  4127:                 bcc.s NBCD_NO_C1        * Check C Flag
00:0000264C 5284            	  4128:                 add.l #1,d4
00:0000264E 6602            	  4129: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:00002650 5283            	  4130:                 add.l #1,d3
00:00002652 DA80            	  4131: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4132: 
00:00002654 51CFFFE4        	  4133:                 dbf d7,NBCD_LOOP1
                            	  4134: 
00:00002658 0C8300000001    	  4135:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:0000265E 66FE            	  4136:                 bne.s *
00:00002660 4A84            	  4137:                 cmpi.l #$00000000,d4
00:00002662 66FE            	  4138:                 bne.s *
00:00002664 0C8500002E3B    	  4139:                 cmpi.l #$00002E3B,d5
00:0000266A 66FE            	  4140:                 bne.s *
                            	  4141: 
                            	  4142: 
00:0000266C 4E75            	  4143:                 rts
                            	  4144: 
                            	  4145: 
                            	  4146: 
                            	  4147: *-----------------------------------------------------------
                            	  4148: *-----------------------------------------------------------
                            	  4149: * OPCODE : TRAPV
                            	  4150: *-----------------------------------------------------------
                            	  4151: *-----------------------------------------------------------
                            	  4152: op_TRAPV:
                            	  4153: 
                            	  4154: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4155: 
00:0000266E 7000            	  4156:                 moveq  #$00000000,d0 * Clear d0
                            	  4157: 
00:00002670 44FC0000        	  4158:                 move #$00,CCR        * Clear V flag
00:00002674 4E76            	  4159:                 trapv
00:00002676 4A80            	  4160:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:00002678 66FE            	  4161:                 bne.s *
                            	  4162: 
00:0000267A 44FC0002        	  4163:                 move #$02,CCR        * Set V flag
00:0000267E 4E76            	  4164:                 trapv
00:00002680 0C8012345678    	  4165:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:00002686 66FE            	  4166:                 bne.s *
                            	  4167: 
                            	  4168: 
00:00002688 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: 
                            	  4173: *-----------------------------------------------------------
                            	  4174: *-----------------------------------------------------------
                            	  4175: * OPCODE : RTR
                            	  4176: *-----------------------------------------------------------
                            	  4177: *-----------------------------------------------------------
                            	  4178: 
                            	  4179: op_RTR:
                            	  4180: 
                            	  4181: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4182: 
00:0000268A 41FA000C        	  4183:                 lea RTR_DONE,a0
00:0000268E 2F08            	  4184:                 move.l a0,-(a7)     * push destination PC to the stack
00:00002690 2F3C0000FF15    	  4185:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
00:00002696 4E77            	  4186:                 rtr
                            	  4187: 
00:00002698 40C0            	  4188: RTR_DONE:       move.w SR,d0
00:0000269A 0240001F        	  4189:                 andi #$1F,d0
00:0000269E 0C400015        	  4190:                 cmpi #$15,d0
00:000026A2 66FE            	  4191:                 bne.s *
                            	  4192: 
00:000026A4 4E75            	  4193:                 rts
                            	  4194: 
                            	  4195: 
00:000026A6 283C44444444    	  4196: BSR_FAR2:       move.l #$44444444,d4
00:000026AC 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
                            	  4200: *-----------------------------------------------------------
                            	  4201: *-----------------------------------------------------------
                            	  4202: * OPCODE : BCC
                            	  4203: *-----------------------------------------------------------
                            	  4204: *-----------------------------------------------------------
                            	  4205: 
00:000026AE 44FC0000        	  4206: op_BCC:         move #$00,CCR
00:000026B2 6202            	  4207:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:000026B4 60FE            	  4208:                 bra.s *
                            	  4209: 
00:000026B6 44FC0001        	  4210: BCC1:           move #$01,CCR
00:000026BA 63000004        	  4211:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:000026BE 60FE            	  4212:                 bra.s *
                            	  4213: 
00:000026C0 44FC0000        	  4214: BCC2:           move #$00,CCR
00:000026C4 6402            	  4215:                 bcc.s BCC3            * Carry Clear         C=0
00:000026C6 60FE            	  4216:                 bra.s *
                            	  4217: 
00:000026C8 44FC0001        	  4218: BCC3:           move #$01,CCR
00:000026CC 65000004        	  4219:                 bcs.w BCC4            * Carry Set           C=1
00:000026D0 60FE            	  4220:                 bra.s *
                            	  4221: 
00:000026D2 44FC0000        	  4222: BCC4:           move #$00,CCR
00:000026D6 6602            	  4223:                 bne.s BCC5            * Not Equal           Z=0
00:000026D8 60FE            	  4224:                 bra.s *
                            	  4225: 
00:000026DA 44FC0004        	  4226: BCC5:           move #$04,CCR
00:000026DE 67000004        	  4227:                 beq.w BCC6            * Equal               Z=1
00:000026E2 60FE            	  4228:                 bra.s *
                            	  4229: 
00:000026E4 44FC0000        	  4230: BCC6:           move #$00,CCR
00:000026E8 6802            	  4231:                 bvc.s BCC7            * V Clear             V=0
00:000026EA 60FE            	  4232:                 bra.s *
                            	  4233: 
00:000026EC 44FC0002        	  4234: BCC7:           move #$02,CCR
00:000026F0 69000004        	  4235:                 bvs.w BCC8            * V Set               V=1
00:000026F4 60FE            	  4236:                 bra.s *
                            	  4237: 
00:000026F6 44FC0000        	  4238: BCC8:           move #$00,CCR
00:000026FA 6A02            	  4239:                 bpl.s BCC9            * Plus                N=0
00:000026FC 60FE            	  4240:                 bra.s *
                            	  4241: 
00:000026FE 44FC0008        	  4242: BCC9:           move #$08,CCR
00:00002702 6B000004        	  4243:                 bmi.w BCC10           * Minus               N=1
00:00002706 60FE            	  4244:                 bra.s *
                            	  4245: 
00:00002708 44FC0000        	  4246: BCC10:          move #$00,CCR
00:0000270C 6C02            	  4247:                 bge.s BCC11           * Greater or Equal    N=V
00:0000270E 60FE            	  4248:                 bra.s *
                            	  4249: 
00:00002710 44FC0002        	  4250: BCC11:          move #$02,CCR
00:00002714 6D000004        	  4251:                 blt.w BCC12           * Less Than           N!=V
00:00002718 60FE            	  4252:                 bra.s *
                            	  4253: 
00:0000271A 44FC000A        	  4254: BCC12:          move #$0A,CCR
00:0000271E 6E02            	  4255:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:00002720 60FE            	  4256:                 bra.s *
                            	  4257: 
00:00002722 44FC0006        	  4258: BCC13:          move #$06,CCR
00:00002726 6F000004        	  4259:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:0000272A 60FE            	  4260:                 bra.s *
                            	  4261: 
                            	  4262: 
00:0000272C 4E75            	  4263: BCC14:          rts
                            	  4264: 
                            	  4265: 
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: * OPCODE : DBCC
                            	  4269: *-----------------------------------------------------------
                            	  4270: *-----------------------------------------------------------
                            	  4271: 
00:0000272E 7003            	  4272: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:00002730 7200            	  4273:                 moveq  #$00000000,d1    * Accumulator
00:00002732 44FC0000        	  4274:                 move #$00,CCR
                            	  4275: 
00:00002736 5201            	  4276: DBCC_LOOP1:     addi.b #$1,d1
00:00002738 51C8FFFC        	  4277:                 dbf d0,DBCC_LOOP1
                            	  4278: 
00:0000273C 0C8100000004    	  4279:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:00002742 66FE            	  4280:                 bne.s *
                            	  4281: 
00:00002744 5201            	  4282: DBCC_LOOP2:     addi.b #$1,d1
00:00002746 54C8FFFC        	  4283:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4284: 
00:0000274A 0C8100000005    	  4285:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:00002750 66FE            	  4286:                 bne.s *
                            	  4287: 
00:00002752 4E75            	  4288:                 rts
                            	  4289: 
                            	  4290: 
                            	  4291: *-----------------------------------------------------------
                            	  4292: *-----------------------------------------------------------
                            	  4293: * OPCODE : SCC
                            	  4294: *-----------------------------------------------------------
                            	  4295: *-----------------------------------------------------------
                            	  4296: 
00:00002754 44FC0001        	  4297: op_SCC:         move #$01,CCR
00:00002758 54F900010000    	  4298:                 scc $00010000                   * Clear the EA byte
00:0000275E 4A3900010000    	  4299:                 cmpi.b #$00,$00010000
00:00002764 66FE            	  4300:                 bne.s *
                            	  4301: 
00:00002766 44FC0000        	  4302:                 move #$00,CCR
00:0000276A 54F900010000    	  4303:                 scc $00010000                   * Set the EA byte to 0xFF
00:00002770 0C3900FF00010000	  4304:                 cmpi.b #$FF,$00010000
00:00002778 66FE            	  4305:                 bne.s *
                            	  4306: 
00:0000277A 4E75            	  4307:                 rts
                            	  4308: 
                            	  4309: 
                            	  4310: 
                            	  4311: *-----------------------------------------------------------
                            	  4312: *-----------------------------------------------------------
                            	  4313: * OPCODE : ADDQ
                            	  4314: *-----------------------------------------------------------
                            	  4315: *-----------------------------------------------------------
                            	  4316: 
                            	  4317: op_ADDQ:
                            	  4318: 
                            	  4319: *     BYTE
00:0000277C 203C000000FF    	  4320:                 move.l #$000000FF,d0    * Loop counter
00:00002782 7200            	  4321:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002784 7400            	  4322:                 moveq  #$00000000,d2    * Data results accumulator
00:00002786 7600            	  4323:                 moveq  #$00000000,d3
00:00002788 7800            	  4324:                 moveq  #$00000000,d4
00:0000278A 7A00            	  4325:                 moveq  #$00000000,d5
00:0000278C 7C00            	  4326:                 moveq  #$00000000,d6
00:0000278E 7E00            	  4327:                 moveq  #$00000000,d7
                            	  4328: 
00:00002790 5605            	  4329: ADDQ_LOOP1:     addq.b #3,d5
00:00002792 40C6            	  4330:                 move.w SR,d6
00:00002794 02860000001F    	  4331:                 andi.l #$1F,d6        * Isolate flags
00:0000279A D286            	  4332:                 add.l d6,d1           * Copy flag results into accumulator
00:0000279C D485            	  4333:                 add.l d5,d2           * Copy data results into data accumulator
00:0000279E 51C8FFF0        	  4334:                 dbf d0,ADDQ_LOOP1
                            	  4335: 
00:000027A2 0C810000043D    	  4336:                 cmpi.l #$0000043D,d1
00:000027A8 66FE            	  4337:                 bne.s *
00:000027AA 0C8200007F80    	  4338:                 cmpi.l #$00007F80,d2
00:000027B0 66FE            	  4339:                 bne.s *
                            	  4340: 
                            	  4341: 
                            	  4342: *     WORD
00:000027B2 203C000000FF    	  4343:                 move.l #$000000FF,d0    * Loop counter
00:000027B8 7200            	  4344:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027BA 7400            	  4345:                 moveq  #$00000000,d2    * Data results accumulator
00:000027BC 7600            	  4346:                 moveq  #$00000000,d3
00:000027BE 7800            	  4347:                 moveq  #$00000000,d4
00:000027C0 2A3C0000FFF0    	  4348:                 move.l #$0000FFF0,d5
00:000027C6 7C00            	  4349:                 moveq  #$00000000,d6
00:000027C8 7E00            	  4350:                 moveq  #$00000000,d7
00:000027CA 307C0100        	  4351:                 move.l #$00000100,a0
                            	  4352: 
00:000027CE 5A45            	  4353: ADDQ_LOOP2:     addq.w #5,d5
00:000027D0 40C6            	  4354:                 move.w SR,d6
00:000027D2 02860000001F    	  4355:                 andi.l #$1F,d6        * Isolate flags
00:000027D8 D286            	  4356:                 add.l d6,d1           * Copy flag results into accumulator
00:000027DA D485            	  4357:                 add.l d5,d2           * Copy data results into data accumulator
00:000027DC 51C8FFF0        	  4358:                 dbf d0,ADDQ_LOOP2
                            	  4359: 
00:000027E0 0C8100000029    	  4360:                 cmpi.l #$00000029,d1
00:000027E6 66FE            	  4361:                 bne.s *
00:000027E8 0C8200057280    	  4362:                 cmpi.l #$00057280,d2
00:000027EE 66FE            	  4363:                 bne.s *
                            	  4364: 
                            	  4365: 
                            	  4366: *     LONG
00:000027F0 203C000000FF    	  4367:                 move.l #$000000FF,d0    * Loop counter
00:000027F6 7200            	  4368:                 moveq  #$00000000,d1    * Flag results accumulator
00:000027F8 7400            	  4369:                 moveq  #$00000000,d2    * Data results accumulator
00:000027FA 7600            	  4370:                 moveq  #$00000000,d3
00:000027FC 7800            	  4371:                 moveq  #$00000000,d4
00:000027FE 7AF0            	  4372:                 move.l #$FFFFFFF0,d5
00:00002800 7C00            	  4373:                 moveq  #$00000000,d6
00:00002802 7E00            	  4374:                 moveq  #$00000000,d7
                            	  4375: 
00:00002804 5285            	  4376: ADDQ_LOOP3:     addq.l #1,d5
00:00002806 40C6            	  4377:                 move.w SR,d6
00:00002808 02860000001F    	  4378:                 andi.l #$1F,d6        * Isolate flags
00:0000280E D286            	  4379:                 add.l d6,d1           * Copy flag results into accumulator
00:00002810 D485            	  4380:                 add.l d5,d2           * Copy data results into data accumulator
00:00002812 51C8FFF0        	  4381:                 dbf d0,ADDQ_LOOP3
                            	  4382: 
00:00002816 0C810000008D    	  4383:                 cmpi.l #$0000008D,d1
00:0000281C 66FE            	  4384:                 bne.s *
00:0000281E 0C8200007080    	  4385:                 cmpi.l #$00007080,d2
00:00002824 66FE            	  4386:                 bne.s *
                            	  4387: 
                            	  4388: *     Check that Flags are not updated for Address registers
00:00002826 207C0000FFFF    	  4389:                 move.l #$0000FFFF,a0
00:0000282C 44FC0000        	  4390:                 move #$00,CCR         * Clear flags
00:00002830 5E48            	  4391:                 addq.w #$7,a0
00:00002832 65FE            	  4392:                 bcs.s *
                            	  4393: 
00:00002834 4E75            	  4394:                 rts
                            	  4395: 
                            	  4396: 
                            	  4397: 
                            	  4398: *-----------------------------------------------------------
                            	  4399: *-----------------------------------------------------------
                            	  4400: * OPCODE : SUBQ
                            	  4401: *-----------------------------------------------------------
                            	  4402: *-----------------------------------------------------------
                            	  4403: 
                            	  4404: op_SUBQ:
                            	  4405: 
                            	  4406: *     BYTE
00:00002836 203C000000FF    	  4407:                 move.l #$000000FF,d0    * Loop counter
00:0000283C 7200            	  4408:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000283E 243C00001234    	  4409:                 move.l #$00001234,d2    * Data results accumulator
00:00002844 7600            	  4410:                 moveq  #$00000000,d3
00:00002846 7800            	  4411:                 moveq  #$00000000,d4
00:00002848 7A12            	  4412:                 moveq  #$00000012,d5
00:0000284A 7C00            	  4413:                 moveq  #$00000000,d6
00:0000284C 7E00            	  4414:                 moveq  #$00000000,d7
                            	  4415: 
00:0000284E 5305            	  4416: SUBQ_LOOP1:     subq.b #1,d5
00:00002850 40C6            	  4417:                 move.w SR,d6
00:00002852 02860000001F    	  4418:                 andi.l #$1F,d6        * Isolate flags
00:00002858 D286            	  4419:                 add.l d6,d1           * Copy flag results into accumulator
00:0000285A D485            	  4420:                 add.l d5,d2           * Copy data results into data accumulator
00:0000285C 51C8FFF0        	  4421:                 dbf d0,SUBQ_LOOP1
                            	  4422: 
00:00002860 0C8100000417    	  4423:                 cmpi.l #$00000417,d1
00:00002866 66FE            	  4424:                 bne.s *
00:00002868 0C82000091B4    	  4425:                 cmpi.l #$000091B4,d2
00:0000286E 66FE            	  4426:                 bne.s *
                            	  4427: 
                            	  4428: 
                            	  4429: *     WORD
00:00002870 203C000000FF    	  4430:                 move.l #$000000FF,d0    * Loop counter
00:00002876 7200            	  4431:                 moveq  #$00000000,d1    * Flag results accumulator
00:00002878 7400            	  4432:                 moveq  #$00000000,d2    * Data results accumulator
00:0000287A 7600            	  4433:                 moveq  #$00000000,d3
00:0000287C 7800            	  4434:                 moveq  #$00000000,d4
00:0000287E 7A02            	  4435:                 moveq  #$00000002,d5
00:00002880 7C00            	  4436:                 moveq  #$00000000,d6
00:00002882 7E00            	  4437:                 moveq  #$00000000,d7
00:00002884 307C0100        	  4438:                 move.l #$00000100,a0
                            	  4439: 
00:00002888 5B45            	  4440: SUBQ_LOOP2:     subq.w #5,d5
00:0000288A 40C6            	  4441:                 move.w SR,d6
00:0000288C 02860000001F    	  4442:                 andi.l #$1F,d6        * Isolate flags
00:00002892 D286            	  4443:                 add.l d6,d1           * Copy flag results into accumulator
00:00002894 D485            	  4444:                 add.l d5,d2           * Copy data results into data accumulator
00:00002896 51C8FFF0        	  4445:                 dbf d0,SUBQ_LOOP2
                            	  4446: 
00:0000289A 0C8100000811    	  4447:                 cmpi.l #$00000811,d1
00:000028A0 66FE            	  4448:                 bne.s *
00:000028A2 0C8200FD7F80    	  4449:                 cmpi.l #$00FD7F80,d2
00:000028A8 66FE            	  4450:                 bne.s *
                            	  4451: 
                            	  4452: 
                            	  4453: *     LONG
00:000028AA 203C000000FF    	  4454:                 move.l #$000000FF,d0    * Loop counter
00:000028B0 7200            	  4455:                 moveq  #$00000000,d1    * Flag results accumulator
00:000028B2 7400            	  4456:                 moveq  #$00000000,d2    * Data results accumulator
00:000028B4 7600            	  4457:                 moveq  #$00000000,d3
00:000028B6 7800            	  4458:                 moveq  #$00000000,d4
00:000028B8 7A07            	  4459:                 moveq  #$00000007,d5
00:000028BA 7C00            	  4460:                 moveq  #$00000000,d6
00:000028BC 7E00            	  4461:                 moveq  #$00000000,d7
                            	  4462: 
00:000028BE 5385            	  4463: SUBQ_LOOP3:     subq.l #1,d5
00:000028C0 40C6            	  4464:                 move.w SR,d6
00:000028C2 02860000001F    	  4465:                 andi.l #$1F,d6        * Isolate flags
00:000028C8 D286            	  4466:                 add.l d6,d1           * Copy flag results into accumulator
00:000028CA D485            	  4467:                 add.l d5,d2           * Copy data results into data accumulator
00:000028CC 51C8FFF0        	  4468:                 dbf d0,SUBQ_LOOP3
                            	  4469: 
00:000028D0 0C81000007DD    	  4470:                 cmpi.l #$000007DD,d1
00:000028D6 66FE            	  4471:                 bne.s *
00:000028D8 0C82FFFF8680    	  4472:                 cmpi.l #$FFFF8680,d2
00:000028DE 66FE            	  4473:                 bne.s *
                            	  4474: 
                            	  4475: *     Check that Flags are not updated for Address registers
00:000028E0 207C0001FFFF    	  4476:                 move.l #$0001FFFF,a0
00:000028E6 44FC0000        	  4477:                 move #$00,CCR         * Clear flags
00:000028EA 5F48            	  4478:                 subq.w #$7,a0
00:000028EC 65FE            	  4479:                 bcs.s *
                            	  4480: 
00:000028EE 4E75            	  4481:                 rts
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: *-----------------------------------------------------------
                            	  4487: *-----------------------------------------------------------
                            	  4488: * OPCODE : MOVEQ
                            	  4489: *-----------------------------------------------------------
                            	  4490: *-----------------------------------------------------------
                            	  4491: 
                            	  4492: op_MOVEQ:
00:000028F0 7000            	  4493:                 moveq  #$00000000,d0
00:000028F2 7000            	  4494:                 moveq #$0,d0
00:000028F4 66FE            	  4495:                 bne.s *
00:000028F6 4A80            	  4496:                 cmpi.l #$00000000,d0
00:000028F8 66FE            	  4497:                 bne.s *
                            	  4498: 
00:000028FA 7000            	  4499:                 moveq  #$00000000,d0
00:000028FC 7080            	  4500:                 moveq #-128,d0
00:000028FE 67FE            	  4501:                 beq.s *
00:00002900 6AFE            	  4502:                 bpl.s *
00:00002902 0C80FFFFFF80    	  4503:                 cmpi.l #$FFFFFF80,d0
00:00002908 66FE            	  4504:                 bne.s *
                            	  4505: 
                            	  4506: 
00:0000290A 4E75            	  4507:                 rts
                            	  4508: 
                            	  4509: 
                            	  4510: *-----------------------------------------------------------
                            	  4511: *-----------------------------------------------------------
                            	  4512: * OPCODE : DIVU
                            	  4513: *-----------------------------------------------------------
                            	  4514: *-----------------------------------------------------------
                            	  4515: 
                            	  4516: op_DIVU:
                            	  4517: 
00:0000290C 203CA5A5A5A5    	  4518:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00002912 223C00005A5A    	  4519:                 move.l #$00005a5a,d1        * Initial Divisor
00:00002918 243CA5A5A5A5    	  4520:                 move.l #$a5a5a5a5,d2
00:0000291E 7600            	  4521:                 moveq  #$00000000,d3
00:00002920 7800            	  4522:                 moveq  #$00000000,d4        * Cumulative data results
00:00002922 7A00            	  4523:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002924 7C0E            	  4524:                 move.l #$0000000E,d6       * Inner loop counter
00:00002926 7E1E            	  4525:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4526: 
                            	  4527: 
00:00002928 80C1            	  4528: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:0000292A 40C3            	  4529:                 move.w SR,d3
00:0000292C 02830000000C    	  4530:                 andi.l #$0C,d3            * Isolate flags
00:00002932 DA83            	  4531:                 add.l d3,d5               * Copy flag results into accumulator
00:00002934 D880            	  4532:                 add.l d0,d4               * Copy data results into data accumulator
00:00002936 E289            	  4533:                 lsr.l #$1,d1
                            	  4534: 
00:00002938 51CEFFEE        	  4535:                 dbf d6,DIVU_OUTER1
00:0000293C E28A            	  4536:                 lsr.l #$1,d2
00:0000293E 2002            	  4537:                 move.l d2,d0
00:00002940 223C00005A5A    	  4538:                 move.l #$00005a5a,d1       * Initial Divisor
00:00002946 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
00:00002948 51CFFFDE        	  4540:                 dbf d7,DIVU_OUTER1
                            	  4541: 
00:0000294C 0C8492FEDB89    	  4542:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:00002952 66FE            	  4543:                 bne.s *
                            	  4544: 
00:00002954 0C8500000110    	  4545:                 cmpi.l #$00000110,d5      * Check the Flag results
00:0000295A 66FE            	  4546:                 bne.s *
                            	  4547: 
                            	  4548: 
00:0000295C 4E75            	  4549:                 rts
                            	  4550: 
                            	  4551: 
                            	  4552: 
                            	  4553: *-----------------------------------------------------------
                            	  4554: *-----------------------------------------------------------
                            	  4555: * OPCODE : DIVS
                            	  4556: *-----------------------------------------------------------
                            	  4557: *-----------------------------------------------------------
                            	  4558: 
                            	  4559: op_DIVS:
                            	  4560: 
00:0000295E 203CA5A5A5A5    	  4561:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00002964 223C00005A5A    	  4562:                 move.l #$00005a5a,d1        * Initial Divisor
00:0000296A 243CA5A5A5A5    	  4563:                 move.l #$a5a5a5a5,d2
00:00002970 7600            	  4564:                 moveq  #$00000000,d3
00:00002972 7800            	  4565:                 moveq  #$00000000,d4        * Cumulative data results
00:00002974 7A00            	  4566:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002976 7C0E            	  4567:                 move.l #$0000000E,d6       * Inner loop counter
00:00002978 7E1E            	  4568:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4569: 
                            	  4570: 
00:0000297A 81C1            	  4571: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
00:0000297C 40C3            	  4572:                 move.w SR,d3
00:0000297E 02830000000C    	  4573:                 andi.l #$0C,d3            * Isolate flags
00:00002984 DA83            	  4574:                 add.l d3,d5               * Copy flag results into accumulator
00:00002986 D880            	  4575:                 add.l d0,d4               * Copy data results into data accumulator
00:00002988 E289            	  4576:                 lsr.l #$1,d1
                            	  4577: 
00:0000298A 51CEFFEE        	  4578:                 dbf d6,DIVS_OUTER1
00:0000298E E28A            	  4579:                 lsr.l #$1,d2
00:00002990 2002            	  4580:                 move.l d2,d0
00:00002992 223C00005A5A    	  4581:                 move.l #$00005a5a,d1       * Initial Divisor
00:00002998 7C0E            	  4582:                 move.l #$0000000E,d6       * Inner loop counter
00:0000299A 51CFFFDE        	  4583:                 dbf d7,DIVS_OUTER1
                            	  4584: 
00:0000299E 0C844EC5D057    	  4585:                 cmpi.l #$4EC5D057,d4      * Check the data results
00:000029A4 66FE            	  4586:                 bne.s *
                            	  4587: 
00:000029A6 0C8500000038    	  4588:                 cmpi.l #$00000038,d5      * Check the Flag results
00:000029AC 66FE            	  4589:                 bne.s *
                            	  4590: 
                            	  4591: 
00:000029AE 4E75            	  4592:                 rts
                            	  4593: 
                            	  4594: 
                            	  4595: 
                            	  4596: *-----------------------------------------------------------
                            	  4597: *-----------------------------------------------------------
                            	  4598: * OPCODE : OR
                            	  4599: *-----------------------------------------------------------
                            	  4600: *-----------------------------------------------------------
                            	  4601: 
                            	  4602: op_OR:
                            	  4603: 
                            	  4604: *  * <EA> to Register
                            	  4605: 
00:000029B0 203CA5A5A5A5    	  4606:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000029B6 223C8167E123    	  4607:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000029BC 243CA5A5A5A5    	  4608:                 move.l #$a5a5a5a5,d2
00:000029C2 7600            	  4609:                 moveq  #$00000000,d3
00:000029C4 7800            	  4610:                 moveq  #$00000000,d4       * Cumulative data results
00:000029C6 7A00            	  4611:                 moveq  #$00000000,d5       * Cumulative flag results
00:000029C8 7C1E            	  4612:                 move.l #$0000001E,d6       * Inner loop counter
00:000029CA 7E1E            	  4613:                 move.l #$0000001E,d7       * Outer loop counter
00:000029CC 307C0100        	  4614:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4615: 
                            	  4616: 
                            	  4617: OR_OUTER1:
                            	  4618: 
                            	  4619: *     BYTE
00:000029D0 2081            	  4620:                 move.l d1,(a0)
00:000029D2 8010            	  4621:                 or.b (a0),d0
00:000029D4 40C3            	  4622:                 move.w SR,d3
00:000029D6 02830000000C    	  4623:                 andi.l #$0C,d3            * Isolate flags
00:000029DC DA83            	  4624:                 add.l d3,d5               * Copy flag results into accumulator
00:000029DE D880            	  4625:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4626: 
                            	  4627: *     WORD
00:000029E0 2081            	  4628:                 move.l d1,(a0)
00:000029E2 8050            	  4629:                 or.w (a0),d0
00:000029E4 40C3            	  4630:                 move.w SR,d3
00:000029E6 02830000000C    	  4631:                 andi.l #$0C,d3            * Isolate flags
00:000029EC DA83            	  4632:                 add.l d3,d5               * Copy flag results into accumulator
00:000029EE D880            	  4633:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4634: 
                            	  4635: *     LONG
00:000029F0 2081            	  4636:                 move.l d1,(a0)
00:000029F2 8090            	  4637:                 or.l (a0),d0
00:000029F4 40C3            	  4638:                 move.w SR,d3
00:000029F6 02830000000F    	  4639:                 andi.l #$0F,d3            * Isolate flags
00:000029FC DA83            	  4640:                 add.l d3,d5               * Copy flag results into accumulator
00:000029FE D880            	  4641:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4642: 
                            	  4643: 
00:00002A00 E289            	  4644:                 lsr.l #$1,d1
00:00002A02 51CEFFCC        	  4645:                 dbf d6,OR_OUTER1
00:00002A06 E28A            	  4646:                 lsr.l #$1,d2
00:00002A08 223C8167E123    	  4647:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A0E 7C1E            	  4648:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A10 51CFFFBE        	  4649:                 dbf d7,OR_OUTER1
                            	  4650: 
00:00002A14 0C8476EAC803    	  4651:                 cmpi.l #$76EAC803,d4      * Check the data results
00:00002A1A 66FE            	  4652:                 bne.s *
00:00002A1C 0C8500005A18    	  4653:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00002A22 66FE            	  4654:                 bne.s *
                            	  4655: 
                            	  4656: 
                            	  4657: *  * Register to <EA>
                            	  4658: 
00:00002A24 203C86738374    	  4659:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002A2A 223CFC55F2FE    	  4660:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002A30 243C86738374    	  4661:                 move.l #$86738374,d2
00:00002A36 7600            	  4662:                 moveq  #$00000000,d3
00:00002A38 7800            	  4663:                 moveq  #$00000000,d4       * Cumulative data results
00:00002A3A 7A00            	  4664:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002A3C 7C1E            	  4665:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A3E 7E1D            	  4666:                 move.l #$0000001D,d7       * Outer loop counter
00:00002A40 307C0100        	  4667:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4668: 
                            	  4669: 
                            	  4670: OR_OUTER2:
                            	  4671: 
                            	  4672: *     BYTE
00:00002A44 2080            	  4673:                 move.l d0,(a0)
00:00002A46 8310            	  4674:                 or.b d1,(a0)
00:00002A48 40C3            	  4675:                 move.w SR,d3
00:00002A4A 02830000000C    	  4676:                 andi.l #$0C,d3            * Isolate flags
00:00002A50 DA83            	  4677:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A52 D890            	  4678:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4679: 
                            	  4680: *     WORD
00:00002A54 2080            	  4681:                 move.l d0,(a0)
00:00002A56 8350            	  4682:                 or.w d1,(a0)
00:00002A58 40C3            	  4683:                 move.w SR,d3
00:00002A5A 02830000000C    	  4684:                 andi.l #$0C,d3            * Isolate flags
00:00002A60 DA83            	  4685:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A62 D890            	  4686:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4687: 
                            	  4688: *     LONG
00:00002A64 2080            	  4689:                 move.l d0,(a0)
00:00002A66 8390            	  4690:                 or.l d1,(a0)
00:00002A68 40C3            	  4691:                 move.w SR,d3
00:00002A6A 02830000000F    	  4692:                 andi.l #$0F,d3            * Isolate flags
00:00002A70 DA83            	  4693:                 add.l d3,d5               * Copy flag results into accumulator
00:00002A72 D890            	  4694:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4695: 
                            	  4696: 
00:00002A74 E289            	  4697:                 lsr.l #$1,d1
00:00002A76 51CEFFCC        	  4698:                 dbf d6,OR_OUTER2
00:00002A7A E28A            	  4699:                 lsr.l #$1,d2
00:00002A7C 223C8167E123    	  4700:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002A82 7C1E            	  4701:                 move.l #$0000001E,d6       * Inner loop counter
00:00002A84 51CFFFBE        	  4702:                 dbf d7,OR_OUTER2
                            	  4703: 
00:00002A88 0C84FA82B9E4    	  4704:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00002A8E 66FE            	  4705:                 bne.s *
00:00002A90 0C8500005730    	  4706:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00002A96 66FE            	  4707:                 bne.s *
                            	  4708: 
                            	  4709: 
00:00002A98 4E75            	  4710:                 rts
                            	  4711: 
                            	  4712: 
                            	  4713: 
                            	  4714: *-----------------------------------------------------------
                            	  4715: *-----------------------------------------------------------
                            	  4716: * OPCODE : AND
                            	  4717: *-----------------------------------------------------------
                            	  4718: *-----------------------------------------------------------
                            	  4719: 
                            	  4720: op_AND:
                            	  4721: 
                            	  4722: *  * <EA> to Register
                            	  4723: 
00:00002A9A 203CA5A5A5A5    	  4724:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002AA0 223C8167E123    	  4725:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002AA6 243CA5A5A5A5    	  4726:                 move.l #$a5a5a5a5,d2
00:00002AAC 7600            	  4727:                 moveq  #$00000000,d3
00:00002AAE 7800            	  4728:                 moveq  #$00000000,d4       * Cumulative data results
00:00002AB0 7A00            	  4729:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002AB2 7C1E            	  4730:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AB4 7E1E            	  4731:                 move.l #$0000001E,d7       * Outer loop counter
00:00002AB6 307C0100        	  4732:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4733: 
                            	  4734: 
                            	  4735: AND_OUTER1:
                            	  4736: 
                            	  4737: *     BYTE
00:00002ABA 2081            	  4738:                 move.l d1,(a0)
00:00002ABC C010            	  4739:                 and.b (a0),d0
00:00002ABE 40C3            	  4740:                 move.w sr,d3
00:00002AC0 02830000000C    	  4741:                 andi.l #$0C,d3            * Isolate flags
00:00002AC6 DA83            	  4742:                 add.l d3,d5               * Copy flag results into accumulator
00:00002AC8 D880            	  4743:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4744: 
                            	  4745: *     WORD
00:00002ACA 2081            	  4746:                 move.l d1,(a0)
00:00002ACC C050            	  4747:                 and.w (a0),d0
00:00002ACE 40C3            	  4748:                 move.w sr,d3
00:00002AD0 02830000000C    	  4749:                 andi.l #$0C,d3            * Isolate flags
00:00002AD6 DA83            	  4750:                 add.l d3,d5               * Copy flag results into accumulator
00:00002AD8 D880            	  4751:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4752: 
                            	  4753: *     LONG
00:00002ADA 2081            	  4754:                 move.l d1,(a0)
00:00002ADC C090            	  4755:                 and.l (a0),d0
00:00002ADE 40C3            	  4756:                 move.w sr,d3
00:00002AE0 02830000000F    	  4757:                 andi.l #$0F,d3            * Isolate flags
00:00002AE6 DA83            	  4758:                 add.l d3,d5               * Copy flag results into accumulator
00:00002AE8 D880            	  4759:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4760: 
                            	  4761: 
00:00002AEA E289            	  4762:                 lsr.l #$1,d1
00:00002AEC 51CEFFCC        	  4763:                 dbf d6,AND_OUTER1
00:00002AF0 E28A            	  4764:                 lsr.l #$1,d2
00:00002AF2 223C8167E123    	  4765:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002AF8 7C1E            	  4766:                 move.l #$0000001E,d6       * Inner loop counter
00:00002AFA 51CFFFBE        	  4767:                 dbf d7,AND_OUTER1
                            	  4768: 
00:00002AFE 0C84CF212883    	  4769:                 cmpi.l #$CF212883,d4      * Check the data results
00:00002B04 66FE            	  4770:                 bne.s *
00:00002B06 0C8500002D10    	  4771:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:00002B0C 66FE            	  4772:                 bne.s *
                            	  4773: 
                            	  4774: 
                            	  4775: *  * Register to <EA>
                            	  4776: 
00:00002B0E 203C86738374    	  4777:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B14 223CFC55F2FE    	  4778:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B1A 243C86738374    	  4779:                 move.l #$86738374,d2
00:00002B20 7600            	  4780:                 moveq  #$00000000,d3
00:00002B22 7800            	  4781:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B24 7A00            	  4782:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002B26 7C1E            	  4783:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B28 7E1D            	  4784:                 move.l #$0000001D,d7       * Outer loop counter
00:00002B2A 307C0100        	  4785:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4786: 
                            	  4787: 
                            	  4788: AND_OUTER2:
                            	  4789: 
                            	  4790: *     BYTE
00:00002B2E 2080            	  4791:                 move.l d0,(a0)
00:00002B30 C310            	  4792:                 and.b d1,(a0)
00:00002B32 40C3            	  4793:                 move.w sr,d3
00:00002B34 02830000000C    	  4794:                 andi.l #$0C,d3            * Isolate flags
00:00002B3A DA83            	  4795:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B3C D890            	  4796:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4797: 
                            	  4798: *     WORD
00:00002B3E 2080            	  4799:                 move.l d0,(a0)
00:00002B40 C350            	  4800:                 and.w d1,(a0)
00:00002B42 40C3            	  4801:                 move.w sr,d3
00:00002B44 02830000000C    	  4802:                 andi.l #$0C,d3            * Isolate flags
00:00002B4A DA83            	  4803:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B4C D890            	  4804:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4805: 
                            	  4806: *     LONG
00:00002B4E 2080            	  4807:                 move.l d0,(a0)
00:00002B50 C390            	  4808:                 and.l d1,(a0)
00:00002B52 40C3            	  4809:                 move.w sr,d3
00:00002B54 02830000000F    	  4810:                 andi.l #$0F,d3            * Isolate flags
00:00002B5A DA83            	  4811:                 add.l d3,d5               * Copy flag results into accumulator
00:00002B5C D890            	  4812:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4813: 
                            	  4814: 
00:00002B5E E289            	  4815:                 lsr.l #$1,d1
00:00002B60 51CEFFCC        	  4816:                 dbf d6,AND_OUTER2
00:00002B64 E28A            	  4817:                 lsr.l #$1,d2
00:00002B66 223C8167E123    	  4818:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002B6C 7C1E            	  4819:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B6E 51CFFFBE        	  4820:                 dbf d7,AND_OUTER2
                            	  4821: 
00:00002B72 0C844A3DE544    	  4822:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:00002B78 66FE            	  4823:                 bne.s *
00:00002B7A 0C85000018E8    	  4824:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00002B80 66FE            	  4825:                 bne.s *
                            	  4826: 
                            	  4827: 
00:00002B82 4E75            	  4828:                 rts
                            	  4829: 
                            	  4830: 
                            	  4831: 
                            	  4832: *-----------------------------------------------------------
                            	  4833: *-----------------------------------------------------------
                            	  4834: * OPCODE : EOR
                            	  4835: *-----------------------------------------------------------
                            	  4836: *-----------------------------------------------------------
                            	  4837: 
                            	  4838: op_EOR:
                            	  4839: 
                            	  4840: *  * Register to <EA>
                            	  4841: 
00:00002B84 203C86738374    	  4842:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002B8A 223CFC55F2FE    	  4843:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002B90 243C86738374    	  4844:                 move.l #$86738374,d2
00:00002B96 7600            	  4845:                 moveq  #$00000000,d3
00:00002B98 7800            	  4846:                 moveq  #$00000000,d4       * Cumulative data results
00:00002B9A 7A00            	  4847:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002B9C 7C1E            	  4848:                 move.l #$0000001E,d6       * Inner loop counter
00:00002B9E 7E1D            	  4849:                 move.l #$0000001D,d7       * Outer loop counter
00:00002BA0 307C0100        	  4850:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4851: 
                            	  4852: 
                            	  4853: EOR_OUTER2:
                            	  4854: 
                            	  4855: *     BYTE
00:00002BA4 2080            	  4856:                 move.l d0,(a0)
00:00002BA6 B310            	  4857:                 eor.b d1,(a0)
00:00002BA8 40C3            	  4858:                 move.w sr,d3
00:00002BAA 02830000000C    	  4859:                 andi.l #$0C,d3            * Isolate flags
00:00002BB0 DA83            	  4860:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BB2 D890            	  4861:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4862: 
                            	  4863: *     WORD
00:00002BB4 2080            	  4864:                 move.l d0,(a0)
00:00002BB6 B350            	  4865:                 eor.w d1,(a0)
00:00002BB8 40C3            	  4866:                 move.w sr,d3
00:00002BBA 02830000000C    	  4867:                 andi.l #$0C,d3            * Isolate flags
00:00002BC0 DA83            	  4868:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BC2 D890            	  4869:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4870: 
                            	  4871: *     LONG
00:00002BC4 2080            	  4872:                 move.l d0,(a0)
00:00002BC6 B390            	  4873:                 eor.l d1,(a0)
00:00002BC8 40C3            	  4874:                 move.w sr,d3
00:00002BCA 02830000000F    	  4875:                 andi.l #$0F,d3            * Isolate flags
00:00002BD0 DA83            	  4876:                 add.l d3,d5               * Copy flag results into accumulator
00:00002BD2 D890            	  4877:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4878: 
                            	  4879: 
00:00002BD4 E289            	  4880:                 lsr.l #$1,d1
00:00002BD6 51CEFFCC        	  4881:                 dbf d6,EOR_OUTER2
00:00002BDA E28A            	  4882:                 lsr.l #$1,d2
00:00002BDC 223C8167E123    	  4883:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002BE2 7C1E            	  4884:                 move.l #$0000001E,d6       * Inner loop counter
00:00002BE4 51CFFFBE        	  4885:                 dbf d7,EOR_OUTER2
                            	  4886: 
00:00002BE8 0C8455C5EB70    	  4887:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:00002BEE 66FE            	  4888:                 bne.s *
00:00002BF0 0C8500004430    	  4889:                 cmpi.l #$00004430,d5      * Check the Flag results
00:00002BF6 66FE            	  4890:                 bne.s *
                            	  4891: 
                            	  4892: 
00:00002BF8 4E75            	  4893:                 rts
                            	  4894: 
                            	  4895: 
                            	  4896: *-----------------------------------------------------------
                            	  4897: *-----------------------------------------------------------
                            	  4898: * OPCODE : CMP
                            	  4899: *-----------------------------------------------------------
                            	  4900: *-----------------------------------------------------------
                            	  4901: 
                            	  4902: op_CMP:
                            	  4903: 
                            	  4904: 
                            	  4905: *  * <EA> to Register
                            	  4906: 
00:00002BFA 203CA5A5A5A5    	  4907:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002C00 223C8167E123    	  4908:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002C06 243CA5A5A5A5    	  4909:                 move.l #$a5a5a5a5,d2
00:00002C0C 7600            	  4910:                 moveq  #$00000000,d3
00:00002C0E 7800            	  4911:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C10 7A00            	  4912:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C12 7C1E            	  4913:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C14 7E1E            	  4914:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C16 307C0100        	  4915:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4916: 
                            	  4917: 
                            	  4918: CMP_OUTER1:
                            	  4919: 
                            	  4920: *     BYTE
00:00002C1A 2081            	  4921:                 move.l d1,(a0)
00:00002C1C B010            	  4922:                 cmp.b (a0),d0
00:00002C1E 40C3            	  4923:                 move.w sr,d3
00:00002C20 02830000000F    	  4924:                 andi.l #$0F,d3            * Isolate flags
00:00002C26 DA83            	  4925:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C28 D880            	  4926:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4927: 
                            	  4928: *     WORD
00:00002C2A 2081            	  4929:                 move.l d1,(a0)
00:00002C2C B050            	  4930:                 cmp.w (a0),d0
00:00002C2E 40C3            	  4931:                 move.w sr,d3
00:00002C30 02830000000F    	  4932:                 andi.l #$0F,d3            * Isolate flags
00:00002C36 DA83            	  4933:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C38 D880            	  4934:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4935: 
                            	  4936: *     LONG
00:00002C3A 2081            	  4937:                 move.l d1,(a0)
00:00002C3C B090            	  4938:                 cmp.l (a0),d0
00:00002C3E 40C3            	  4939:                 move.w sr,d3
00:00002C40 02830000000F    	  4940:                 andi.l #$0F,d3            * Isolate flags
00:00002C46 DA83            	  4941:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C48 D880            	  4942:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4943: 
                            	  4944: 
00:00002C4A E289            	  4945:                 lsr.l #$1,d1
00:00002C4C 51CEFFCC        	  4946:                 dbf d6,CMP_OUTER1
00:00002C50 E28A            	  4947:                 lsr.l #$1,d2
00:00002C52 223C8167E123    	  4948:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002C58 7C1E            	  4949:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C5A 51CFFFBE        	  4950:                 dbf d7,CMP_OUTER1
                            	  4951: 
00:00002C5E 0C847878712F    	  4952:                 cmpi.l #$7878712F,d4      * Check the data results
00:00002C64 66FE            	  4953:                 bne.s *
00:00002C66 0C8500005502    	  4954:                 cmpi.l #$00005502,d5      * Check the Flag results
00:00002C6C 66FE            	  4955:                 bne.s *
                            	  4956: 
                            	  4957: 
                            	  4958: 
00:00002C6E 4E75            	  4959:                 rts
                            	  4960: 
                            	  4961: 
                            	  4962: *-----------------------------------------------------------
                            	  4963: *-----------------------------------------------------------
                            	  4964: * OPCODE : CMPA
                            	  4965: *-----------------------------------------------------------
                            	  4966: *-----------------------------------------------------------
                            	  4967: 
                            	  4968: op_CMPA:
                            	  4969: 
                            	  4970: 
                            	  4971: *  * <EA> to Register
                            	  4972: 
00:00002C70 207CA5A5A5A5    	  4973:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00002C76 223C8167E123    	  4974:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002C7C 243CA5A5A5A5    	  4975:                 move.l #$a5a5a5a5,d2
00:00002C82 7600            	  4976:                 moveq  #$00000000,d3
00:00002C84 7800            	  4977:                 moveq  #$00000000,d4       * Cumulative data results
00:00002C86 7A00            	  4978:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002C88 7C1E            	  4979:                 move.l #$0000001E,d6       * Inner loop counter
00:00002C8A 7E1E            	  4980:                 move.l #$0000001E,d7       * Outer loop counter
00:00002C8C 327C0100        	  4981:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4982: 
                            	  4983: 
                            	  4984: CMPA_OUTER1:
                            	  4985: 
                            	  4986: 
                            	  4987: *     WORD
00:00002C90 2281            	  4988:                 move.l d1,(a1)
00:00002C92 B0D1            	  4989:                 cmpa.w (a1),a0
00:00002C94 40C3            	  4990:                 move.w sr,d3
00:00002C96 02830000000F    	  4991:                 andi.l #$0F,d3            * Isolate flags
00:00002C9C DA83            	  4992:                 add.l d3,d5               * Copy flag results into accumulator
00:00002C9E D888            	  4993:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4994: 
                            	  4995: *     LONG
00:00002CA0 2281            	  4996:                 move.l d1,(a1)
00:00002CA2 B1D1            	  4997:                 cmpa.l (a1),a0
00:00002CA4 40C3            	  4998:                 move.w sr,d3
00:00002CA6 02830000000F    	  4999:                 andi.l #$0F,d3            * Isolate flags
00:00002CAC DA83            	  5000:                 add.l d3,d5               * Copy flag results into accumulator
00:00002CAE D888            	  5001:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5002: 
                            	  5003: 
00:00002CB0 E289            	  5004:                 lsr.l #$1,d1
00:00002CB2 51CEFFDC        	  5005:                 dbf d6,CMPA_OUTER1
00:00002CB6 E28A            	  5006:                 lsr.l #$1,d2
00:00002CB8 223C8167E123    	  5007:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002CBE 7C1E            	  5008:                 move.l #$0000001E,d6       * Inner loop counter
00:00002CC0 51CFFFCE        	  5009:                 dbf d7,CMPA_OUTER1
                            	  5010: 
00:00002CC4 0C84A5A5A0CA    	  5011:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:00002CCA 66FE            	  5012:                 bne.s *
00:00002CCC 0C8500003A7D    	  5013:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:00002CD2 66FE            	  5014:                 bne.s *
                            	  5015: 
                            	  5016: 
00:00002CD4 4E75            	  5017:                 rts
                            	  5018: 
                            	  5019: 
                            	  5020: 
                            	  5021: *-----------------------------------------------------------
                            	  5022: *-----------------------------------------------------------
                            	  5023: * OPCODE : CMPM
                            	  5024: *-----------------------------------------------------------
                            	  5025: *-----------------------------------------------------------
                            	  5026: 
                            	  5027: op_CMPM:
                            	  5028: 
00:00002CD6 307C0100        	  5029:                 move.l #$00000100,a0       * Address for Data-X
00:00002CDA 327C0200        	  5030:                 move.l #$00000200,a1       * Address for Data-Y
00:00002CDE 7000            	  5031:                 moveq  #$00000000,d0
00:00002CE0 7200            	  5032:                 moveq  #$00000000,d1
00:00002CE2 7400            	  5033:                 moveq  #$00000000,d2
                            	  5034: 
00:00002CE4 20FC11FF5580    	  5035:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00002CEA 20FC1111FFFF    	  5036:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00002CF0 20FC33333333    	  5037:                 move.l #$33333333,(a0)+   * Populate test data
00:00002CF6 20FC44444444    	  5038:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5039: 
00:00002CFC 22FC80FF337F    	  5040:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00002D02 22FCFFFF1111    	  5041:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00002D08 22FC33333333    	  5042:                 move.l #$33333333,(a1)+   * Populate test data
00:00002D0E 22FC44444444    	  5043:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5044: 
00:00002D14 307C0100        	  5045:                 move.l #$00000100,a0       * Address for Data-X
00:00002D18 327C0200        	  5046:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D1C 7C0F            	  5047:                 move.l #$0000000F,d6       * Loop counter
                            	  5048: 
00:00002D1E B308            	  5049: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00002D20 40C3            	  5050:                 move.w sr,d3
00:00002D22 02830000000F    	  5051:                 andi.l #$0F,d3            * Isolate flags
00:00002D28 D083            	  5052:                 add.l d3,d0               * Copy flag results into accumulator
00:00002D2A 51CEFFF2        	  5053:                 dbf d6,CMPM_LOOP1
                            	  5054: 
                            	  5055: 
00:00002D2E 307C0100        	  5056:                 move.l #$00000100,a0       * Address for Data-X
00:00002D32 327C0200        	  5057:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D36 7C07            	  5058:                 moveq  #$00000007,d6       * Loop counter
                            	  5059: 
00:00002D38 B348            	  5060: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:00002D3A 40C3            	  5061:                 move.w sr,d3
00:00002D3C 02830000000F    	  5062:                 andi.l #$0F,d3            * Isolate flags
00:00002D42 D283            	  5063:                 add.l d3,d1               * Copy flag results into accumulator
00:00002D44 51CEFFF2        	  5064:                 dbf d6,CMPM_LOOP2
                            	  5065: 
                            	  5066: 
00:00002D48 307C0100        	  5067:                 move.l #$00000100,a0       * Address for Data-X
00:00002D4C 327C0200        	  5068:                 move.l #$00000200,a1       * Address for Data-Y
00:00002D50 7C03            	  5069:                 moveq  #$00000003,d6       * Loop counter
                            	  5070: 
00:00002D52 B388            	  5071: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00002D54 40C3            	  5072:                 move.w sr,d3
00:00002D56 02830000000F    	  5073:                 andi.l #$0F,d3            * Isolate flags
00:00002D5C D483            	  5074:                 add.l d3,d2               * Copy flag results into accumulator
00:00002D5E 51CEFFF2        	  5075:                 dbf d6,CMPM_LOOP3
                            	  5076: 
                            	  5077: 
00:00002D62 0C800000004C    	  5078:                 cmpi.l #$0000004C,d0      * Check the data results
00:00002D68 66FE            	  5079:                 bne.s *
00:00002D6A 0C8100000024    	  5080:                 cmpi.l #$00000024,d1
00:00002D70 66FE            	  5081:                 bne.s *
00:00002D72 0C8200000012    	  5082:                 cmpi.l #$00000012,d2
00:00002D78 66FE            	  5083:                 bne.s *
                            	  5084: 
00:00002D7A 4E75            	  5085:                 rts
                            	  5086: 
                            	  5087: 
                            	  5088: *-----------------------------------------------------------
                            	  5089: *-----------------------------------------------------------
                            	  5090: * OPCODE : ADD
                            	  5091: *-----------------------------------------------------------
                            	  5092: *-----------------------------------------------------------
                            	  5093: 
                            	  5094: op_ADD:
                            	  5095: 
                            	  5096: 
                            	  5097: *  * <EA> to Register
00:00002D7C 203CA5A5A5A5    	  5098:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002D82 223C8167E123    	  5099:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002D88 243CA5A5A5A5    	  5100:                 move.l #$a5a5a5a5,d2
00:00002D8E 7600            	  5101:                 moveq  #$00000000,d3
00:00002D90 7800            	  5102:                 moveq  #$00000000,d4       * Cumulative data results
00:00002D92 7A00            	  5103:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002D94 7C1E            	  5104:                 move.l #$0000001E,d6       * Inner loop counter
00:00002D96 7E1E            	  5105:                 move.l #$0000001E,d7       * Outer loop counter
00:00002D98 307C0100        	  5106:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5107: 
                            	  5108: 
                            	  5109: ADD_OUTER1:
                            	  5110: 
                            	  5111: *     BYTE
00:00002D9C 2081            	  5112:                 move.l d1,(a0)
00:00002D9E D010            	  5113:                 add.b (a0),d0
00:00002DA0 40C3            	  5114:                 move.w sr,d3
00:00002DA2 02830000001F    	  5115:                 andi.l #$1F,d3            * Isolate flags
00:00002DA8 DA83            	  5116:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DAA D880            	  5117:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5118: 
                            	  5119: *     WORD
00:00002DAC 2081            	  5120:                 move.l d1,(a0)
00:00002DAE D050            	  5121:                 add.w (a0),d0
00:00002DB0 40C3            	  5122:                 move.w sr,d3
00:00002DB2 02830000000C    	  5123:                 andi.l #$0C,d3            * Isolate flags
00:00002DB8 DA83            	  5124:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DBA D880            	  5125:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5126: 
                            	  5127: *     LONG
00:00002DBC 2081            	  5128:                 move.l d1,(a0)
00:00002DBE D090            	  5129:                 add.l (a0),d0
00:00002DC0 40C3            	  5130:                 move.w sr,d3
00:00002DC2 02830000000F    	  5131:                 andi.l #$0F,d3            * Isolate flags
00:00002DC8 DA83            	  5132:                 add.l d3,d5               * Copy flag results into accumulator
00:00002DCA D880            	  5133:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5134: 
                            	  5135: 
00:00002DCC E299            	  5136:                 ror.l #$1,d1
00:00002DCE 51CEFFCC        	  5137:                 dbf d6,ADD_OUTER1
00:00002DD2 E29A            	  5138:                 ror.l #$1,d2
00:00002DD4 223C8167E123    	  5139:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002DDA 7C1E            	  5140:                 move.l #$0000001E,d6       * Inner loop counter
00:00002DDC 51CFFFBE        	  5141:                 dbf d7,ADD_OUTER1
                            	  5142: 
00:00002DE0 0C8423ED428F    	  5143:                 cmpi.l #$23ED428F,d4      * Check the data results
00:00002DE6 66FE            	  5144:                 bne.s *
00:00002DE8 0C8500004C96    	  5145:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:00002DEE 66FE            	  5146:                 bne.s *
                            	  5147: 
                            	  5148: 
                            	  5149: *  * Register to <EA>
00:00002DF0 203C86738374    	  5150:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002DF6 223CFC55F2FE    	  5151:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002DFC 243C86738374    	  5152:                 move.l #$86738374,d2
00:00002E02 7600            	  5153:                 moveq  #$00000000,d3
00:00002E04 7800            	  5154:                 moveq  #$00000000,d4       * Cumulative data results
00:00002E06 7A00            	  5155:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002E08 7C1E            	  5156:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E0A 7E1D            	  5157:                 move.l #$0000001D,d7       * Outer loop counter
00:00002E0C 307C0100        	  5158:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5159: 
                            	  5160: 
                            	  5161: ADD_OUTER2:
                            	  5162: 
                            	  5163: *     BYTE
00:00002E10 2080            	  5164:                 move.l d0,(a0)
00:00002E12 D310            	  5165:                 add.b d1,(a0)
00:00002E14 40C3            	  5166:                 move.w sr,d3
00:00002E16 02830000000C    	  5167:                 andi.l #$0C,d3            * Isolate flags
00:00002E1C DA83            	  5168:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E1E D890            	  5169:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5170: 
                            	  5171: *     WORD
00:00002E20 2080            	  5172:                 move.l d0,(a0)
00:00002E22 D350            	  5173:                 add.w d1,(a0)
00:00002E24 40C3            	  5174:                 move.w sr,d3
00:00002E26 02830000001F    	  5175:                 andi.l #$1F,d3            * Isolate flags
00:00002E2C DA83            	  5176:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E2E D890            	  5177:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5178: 
                            	  5179: *     LONG
00:00002E30 2080            	  5180:                 move.l d0,(a0)
00:00002E32 D390            	  5181:                 add.l d1,(a0)
00:00002E34 40C3            	  5182:                 move.w sr,d3
00:00002E36 02830000000F    	  5183:                 andi.l #$0F,d3            * Isolate flags
00:00002E3C DA83            	  5184:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E3E D890            	  5185:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5186: 
                            	  5187: 
00:00002E40 E299            	  5188:                 ror.l #$1,d1
00:00002E42 51CEFFCC        	  5189:                 dbf d6,ADD_OUTER2
00:00002E46 E29A            	  5190:                 ror.l #$1,d2
00:00002E48 223C8167E123    	  5191:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002E4E 7C1E            	  5192:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E50 51CFFFBE        	  5193:                 dbf d7,ADD_OUTER2
                            	  5194: 
00:00002E54 0C846701B884    	  5195:                 cmpi.l #$6701B884,d4      * Check the data results
00:00002E5A 66FE            	  5196:                 bne.s *
00:00002E5C 0C8500005467    	  5197:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00002E62 66FE            	  5198:                 bne.s *
                            	  5199: 
00:00002E64 4E75            	  5200:                 rts
                            	  5201: 
                            	  5202: *-----------------------------------------------------------
                            	  5203: *-----------------------------------------------------------
                            	  5204: * OPCODE : SUB
                            	  5205: *-----------------------------------------------------------
                            	  5206: *-----------------------------------------------------------
                            	  5207: 
                            	  5208: op_SUB:
                            	  5209: 
                            	  5210: *  * <EA> to Register
00:00002E66 203CA5A5A5A5    	  5211:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002E6C 223C8167E123    	  5212:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002E72 243CA5A5A5A5    	  5213:                 move.l #$a5a5a5a5,d2
00:00002E78 7600            	  5214:                 moveq  #$00000000,d3
00:00002E7A 7800            	  5215:                 moveq  #$00000000,d4       * Cumulative data results
00:00002E7C 7A00            	  5216:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002E7E 7C1E            	  5217:                 move.l #$0000001E,d6       * Inner loop counter
00:00002E80 7E1E            	  5218:                 move.l #$0000001E,d7       * Outer loop counter
00:00002E82 307C0100        	  5219:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5220: 
                            	  5221: 
                            	  5222: SUB_OUTER1:
                            	  5223: 
                            	  5224: *     BYTE
00:00002E86 2081            	  5225:                 move.l d1,(a0)
00:00002E88 9010            	  5226:                 sub.b (a0),d0
00:00002E8A 40C3            	  5227:                 move.w sr,d3
00:00002E8C 02830000001F    	  5228:                 andi.l #$1F,d3            * Isolate flags
00:00002E92 DA83            	  5229:                 add.l d3,d5               * Copy flag results into accumulator
00:00002E94 D880            	  5230:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5231: 
                            	  5232: *     WORD
00:00002E96 2081            	  5233:                 move.l d1,(a0)
00:00002E98 9050            	  5234:                 sub.w (a0),d0
00:00002E9A 40C3            	  5235:                 move.w sr,d3
00:00002E9C 02830000000C    	  5236:                 andi.l #$0C,d3            * Isolate flags
00:00002EA2 DA83            	  5237:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EA4 D880            	  5238:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5239: 
                            	  5240: *     LONG
00:00002EA6 2081            	  5241:                 move.l d1,(a0)
00:00002EA8 9090            	  5242:                 sub.l (a0),d0
00:00002EAA 40C3            	  5243:                 move.w sr,d3
00:00002EAC 02830000000F    	  5244:                 andi.l #$0F,d3            * Isolate flags
00:00002EB2 DA83            	  5245:                 add.l d3,d5               * Copy flag results into accumulator
00:00002EB4 D880            	  5246:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5247: 
                            	  5248: 
00:00002EB6 E299            	  5249:                 ror.l #$1,d1
00:00002EB8 51CEFFCC        	  5250:                 dbf d6,SUB_OUTER1
00:00002EBC E29A            	  5251:                 ror.l #$1,d2
00:00002EBE 223C8167E123    	  5252:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002EC4 7C1E            	  5253:                 move.l #$0000001E,d6       * Inner loop counter
00:00002EC6 51CFFFBE        	  5254:                 dbf d7,SUB_OUTER1
                            	  5255: 
00:00002ECA 0C841A8D14CF    	  5256:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:00002ED0 66FE            	  5257:                 bne.s *
00:00002ED2 0C8500004FC4    	  5258:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:00002ED8 66FE            	  5259:                 bne.s *
                            	  5260: 
                            	  5261: 
                            	  5262: *  * Register to <EA>
00:00002EDA 203C86738374    	  5263:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00002EE0 223CFC55F2FE    	  5264:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00002EE6 243C86738374    	  5265:                 move.l #$86738374,d2
00:00002EEC 7600            	  5266:                 moveq  #$00000000,d3
00:00002EEE 7800            	  5267:                 moveq  #$00000000,d4       * Cumulative data results
00:00002EF0 7A00            	  5268:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002EF2 7C1E            	  5269:                 move.l #$0000001E,d6       * Inner loop counter
00:00002EF4 7E1D            	  5270:                 move.l #$0000001D,d7       * Outer loop counter
00:00002EF6 307C0100        	  5271:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5272: 
                            	  5273: 
                            	  5274: SUB_OUTER2:
                            	  5275: 
                            	  5276: *     BYTE
00:00002EFA 2080            	  5277:                 move.l d0,(a0)
00:00002EFC 9310            	  5278:                 sub.b d1,(a0)
00:00002EFE 40C3            	  5279:                 move.w sr,d3
00:00002F00 02830000000C    	  5280:                 andi.l #$0C,d3            * Isolate flags
00:00002F06 DA83            	  5281:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F08 D890            	  5282:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5283: 
                            	  5284: *     WORD
00:00002F0A 2080            	  5285:                 move.l d0,(a0)
00:00002F0C 9350            	  5286:                 sub.w d1,(a0)
00:00002F0E 40C3            	  5287:                 move.w sr,d3
00:00002F10 02830000001F    	  5288:                 andi.l #$1F,d3            * Isolate flags
00:00002F16 DA83            	  5289:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F18 D890            	  5290:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5291: 
                            	  5292: *     LONG
00:00002F1A 2080            	  5293:                 move.l d0,(a0)
00:00002F1C 9390            	  5294:                 sub.l d1,(a0)
00:00002F1E 40C3            	  5295:                 move.w sr,d3
00:00002F20 02830000000F    	  5296:                 andi.l #$0F,d3            * Isolate flags
00:00002F26 DA83            	  5297:                 add.l d3,d5               * Copy flag results into accumulator
00:00002F28 D890            	  5298:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5299: 
                            	  5300: 
00:00002F2A E299            	  5301:                 ror.l #$1,d1
00:00002F2C 51CEFFCC        	  5302:                 dbf d6,SUB_OUTER2
00:00002F30 E29A            	  5303:                 ror.l #$1,d2
00:00002F32 223C8167E123    	  5304:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F38 7C1E            	  5305:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F3A 51CFFFBE        	  5306:                 dbf d7,SUB_OUTER2
                            	  5307: 
00:00002F3E 0C8436D38BEC    	  5308:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00002F44 66FE            	  5309:                 bne.s *
00:00002F46 0C85000045A5    	  5310:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:00002F4C 66FE            	  5311:                 bne.s *
                            	  5312: 
                            	  5313: 
                            	  5314: 
                            	  5315: 
00:00002F4E 4E75            	  5316:                 rts
                            	  5317: 
                            	  5318: 
                            	  5319: 
                            	  5320: *-----------------------------------------------------------
                            	  5321: *-----------------------------------------------------------
                            	  5322: * OPCODE : ADDA
                            	  5323: *-----------------------------------------------------------
                            	  5324: *-----------------------------------------------------------
                            	  5325: 
                            	  5326: op_ADDA:
                            	  5327: 
                            	  5328: *  * <EA> to Register
00:00002F50 203CA5A5A5A5    	  5329:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002F56 223C8167E123    	  5330:                 move.l #$8167E123,d1
00:00002F5C 243CA5A5A5A5    	  5331:                 move.l #$a5a5a5a5,d2
00:00002F62 7600            	  5332:                 moveq  #$00000000,d3
00:00002F64 7800            	  5333:                 moveq  #$00000000,d4       * Cumulative data results
00:00002F66 7A00            	  5334:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002F68 7C1E            	  5335:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F6A 7E1E            	  5336:                 move.l #$0000001E,d7       * Outer loop counter
00:00002F6C 307C0100        	  5337:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002F70 227C8167E123    	  5338:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5339: 
                            	  5340: ADDA_OUTER1:
                            	  5341: 
                            	  5342: *     WORD
                            	  5343: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5344: *                adda.w (a0),a1
                            	  5345: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5346: 
                            	  5347: *     LONG
00:00002F76 2081            	  5348:                 move.l d1,(a0)
00:00002F78 D3D0            	  5349:                 adda.l (a0),a1
00:00002F7A D889            	  5350:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5351: 
00:00002F7C E299            	  5352:                 ror.l #$1,d1
00:00002F7E 51CEFFF6        	  5353:                 dbf d6,ADDA_OUTER1
00:00002F82 E299            	  5354:                 ror.l #$1,d1
00:00002F84 2241            	  5355:                 move.l d1,a1
00:00002F86 223C8167E123    	  5356:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002F8C 7C1E            	  5357:                 move.l #$0000001E,d6       * Inner loop counter
00:00002F8E 51CFFFE6        	  5358:                 dbf d7,ADDA_OUTER1
                            	  5359: 
00:00002F92 0C84AC04DB4C    	  5360:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:00002F98 66FE            	  5361:                 bne.s *
                            	  5362: 
                            	  5363: 
00:00002F9A 4E75            	  5364:                 rts
                            	  5365: 
                            	  5366: 
                            	  5367: *-----------------------------------------------------------
                            	  5368: *-----------------------------------------------------------
                            	  5369: * OPCODE : SUBA
                            	  5370: *-----------------------------------------------------------
                            	  5371: *-----------------------------------------------------------
                            	  5372: 
                            	  5373: op_SUBA:
                            	  5374: 
                            	  5375: *  * <EA> to Register
00:00002F9C 203CA5A5A5A5    	  5376:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002FA2 223C8167E123    	  5377:                 move.l #$8167E123,d1
00:00002FA8 243CA5A5A5A5    	  5378:                 move.l #$a5a5a5a5,d2
00:00002FAE 7600            	  5379:                 moveq  #$00000000,d3
00:00002FB0 7800            	  5380:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FB2 7A00            	  5381:                 moveq  #$00000000,d5       * Cumulative flag results
00:00002FB4 7C1E            	  5382:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FB6 7E1E            	  5383:                 move.l #$0000001E,d7       * Outer loop counter
00:00002FB8 307C0100        	  5384:                 move.l #$00000100,a0       * Address for memory EA operations
00:00002FBC 227C8167E123    	  5385:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5386: 
                            	  5387: SUBA_OUTER1:
                            	  5388: 
                            	  5389: *     WORD
                            	  5390: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5391: *                suba.w (a0),a1
                            	  5392: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5393: 
                            	  5394: *     LONG
00:00002FC2 2081            	  5395:                 move.l d1,(a0)
00:00002FC4 93D0            	  5396:                 suba.l (a0),a1
00:00002FC6 D889            	  5397:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5398: 
00:00002FC8 E299            	  5399:                 ror.l #$1,d1
00:00002FCA 51CEFFF6        	  5400:                 dbf d6,SUBA_OUTER1
00:00002FCE E299            	  5401:                 ror.l #$1,d1
00:00002FD0 2241            	  5402:                 move.l d1,a1
00:00002FD2 223C8167E123    	  5403:                 move.l #$8167E123,d1       * Initial Data-Y
00:00002FD8 7C1E            	  5404:                 move.l #$0000001E,d6       * Inner loop counter
00:00002FDA 51CFFFE6        	  5405:                 dbf d7,SUBA_OUTER1
                            	  5406: 
00:00002FDE 0C84E1E36D7A    	  5407:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:00002FE4 66FE            	  5408:                 bne.s *
                            	  5409: 
                            	  5410: 
00:00002FE6 4E75            	  5411:                 rts
                            	  5412: 
                            	  5413: 
                            	  5414: 
                            	  5415: *-----------------------------------------------------------
                            	  5416: *-----------------------------------------------------------
                            	  5417: * OPCODE : ADDX
                            	  5418: *-----------------------------------------------------------
                            	  5419: *-----------------------------------------------------------
                            	  5420: 
                            	  5421: op_ADDX:
                            	  5422: 
                            	  5423: 
                            	  5424: *  * Register to Register
00:00002FE8 203CA5A5A5A5    	  5425:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00002FEE 223C8167E123    	  5426:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00002FF4 243CA5A5A5A5    	  5427:                 move.l #$a5a5a5a5,d2
00:00002FFA 7600            	  5428:                 moveq  #$00000000,d3
00:00002FFC 7800            	  5429:                 moveq  #$00000000,d4       * Cumulative data results
00:00002FFE 7A00            	  5430:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003000 7C1E            	  5431:                 move.l #$0000001E,d6       * Inner loop counter
00:00003002 7E1E            	  5432:                 move.l #$0000001E,d7       * Outer loop counter
00:00003004 307C0100        	  5433:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5434: 
                            	  5435: 
                            	  5436: ADDX_OUTER1:
                            	  5437: 
                            	  5438: *     BYTE
00:00003008 2002            	  5439:                 move.l d2,d0
00:0000300A D101            	  5440:                 addx.b d1,d0
00:0000300C 40C3            	  5441:                 move.w sr,d3
00:0000300E 02830000001F    	  5442:                 andi.l #$1F,d3            * Isolate flags
00:00003014 DA83            	  5443:                 add.l d3,d5               * Copy flag results into accumulator
00:00003016 D880            	  5444:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5445: 
                            	  5446: *     WORD
00:00003018 2002            	  5447:                 move.l d2,d0
00:0000301A D141            	  5448:                 addx.w d1,d0
00:0000301C 40C3            	  5449:                 move.w sr,d3
00:0000301E 02830000001F    	  5450:                 andi.l #$1F,d3            * Isolate flags
00:00003024 DA83            	  5451:                 add.l d3,d5               * Copy flag results into accumulator
00:00003026 D880            	  5452:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5453: 
                            	  5454: *     LONG
00:00003028 2002            	  5455:                 move.l d2,d0
00:0000302A D181            	  5456:                 addx.l d1,d0
00:0000302C 40C3            	  5457:                 move.w sr,d3
00:0000302E 02830000001F    	  5458:                 andi.l #$1F,d3            * Isolate flags
00:00003034 DA83            	  5459:                 add.l d3,d5               * Copy flag results into accumulator
00:00003036 D880            	  5460:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5461: 
00:00003038 E299            	  5462:                 ror.l #$1,d1
00:0000303A 51CEFFCC        	  5463:                 dbf d6,ADDX_OUTER1
00:0000303E E29A            	  5464:                 ror.l #$1,d2
00:00003040 223C8167E123    	  5465:                 move.l #$8167E123,d1       * Initial Data-Y
00:00003046 7C1E            	  5466:                 move.l #$0000001E,d6       * Inner loop counter
00:00003048 51CFFFBE        	  5467:                 dbf d7,ADDX_OUTER1
                            	  5468: 
00:0000304C 0C844E96A4D9    	  5469:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:00003052 66FE            	  5470:                 bne.s *
00:00003054 0C85000085CD    	  5471:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:0000305A 66FE            	  5472:                 bne.s *
                            	  5473: 
                            	  5474: 
                            	  5475: 
                            	  5476: *     -(An),-(An)
                            	  5477: 
00:0000305C 7000            	  5478:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:0000305E 7200            	  5479:                 moveq  #$00000000,d1
00:00003060 7400            	  5480:                 moveq  #$00000000,d2
00:00003062 307C0100        	  5481:                 move.l #$00000100,a0       * Address for Data-X
00:00003066 327C0200        	  5482:                 move.l #$00000200,a1       * Address for Data-Y
00:0000306A 20FC11FF5580    	  5483:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00003070 20FC1111FFFF    	  5484:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00003076 20FC33333333    	  5485:                 move.l #$33333333,(a0)+   * Populate test data
00:0000307C 20FC44444444    	  5486:                 move.l #$44444444,(a0)+   * Populate test data
00:00003082 22FC80FF337F    	  5487:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00003088 22FCFFFF1111    	  5488:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:0000308E 22FC33333333    	  5489:                 move.l #$33333333,(a1)+   * Populate test data
00:00003094 22FC44444444    	  5490:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5491: 
                            	  5492: 
00:0000309A 7C0F            	  5493:                 move.l #$0000000F,d6       * Loop counter
                            	  5494: 
00:0000309C D308            	  5495: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:0000309E 40C3            	  5496:                 move.w sr,d3
00:000030A0 02830000000F    	  5497:                 andi.l #$0F,d3            * Isolate flags
00:000030A6 D083            	  5498:                 add.l d3,d0               * Copy flag results into accumulator
00:000030A8 D211            	  5499:                 add.b (a1),d1
00:000030AA 51CEFFF0        	  5500:                 dbf d6,ADDX_LOOP3
                            	  5501: 
                            	  5502: 
00:000030AE 307C0110        	  5503:                 move.l #$00000110,a0       * Address for Data-X
00:000030B2 327C0210        	  5504:                 move.l #$00000210,a1       * Address for Data-Y
00:000030B6 7C07            	  5505:                 moveq  #$00000007,d6       * Loop counter
                            	  5506: 
00:000030B8 D348            	  5507: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:000030BA 40C3            	  5508:                 move.w sr,d3
00:000030BC 02830000000F    	  5509:                 andi.l #$0F,d3            * Isolate flags
00:000030C2 D083            	  5510:                 add.l d3,d0               * Copy flag results into accumulator
00:000030C4 D251            	  5511:                 add.w (a1),d1
00:000030C6 51CEFFF0        	  5512:                 dbf d6,ADDX_LOOP4
                            	  5513: 
                            	  5514: 
00:000030CA 307C0110        	  5515:                 move.l #$00000110,a0       * Address for Data-X
00:000030CE 327C0210        	  5516:                 move.l #$00000210,a1       * Address for Data-Y
00:000030D2 7C03            	  5517:                 moveq  #$00000003,d6       * Loop counter
                            	  5518: 
00:000030D4 D388            	  5519: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:000030D6 40C3            	  5520:                 move.w sr,d3
00:000030D8 02830000000F    	  5521:                 andi.l #$0F,d3            * Isolate flags
00:000030DE D083            	  5522:                 add.l d3,d0               * Copy flag results into accumulator
00:000030E0 D291            	  5523:                 add.l (a1),d1
00:000030E2 51CEFFF0        	  5524:                 dbf d6,ADDX_LOOP5
                            	  5525: 
                            	  5526: 
00:000030E6 0C8000000095    	  5527:                 cmpi.l #$00000095,d0      * Check the flag results
00:000030EC 66FE            	  5528:                 bne.s *
00:000030EE 0C81C812A682    	  5529:                 cmpi.l #$C812A682,d1      * Check the data results
00:000030F4 66FE            	  5530:                 bne.s *
                            	  5531: 
00:000030F6 4E75            	  5532:                 rts
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: *-----------------------------------------------------------
                            	  5538: *-----------------------------------------------------------
                            	  5539: * OPCODE : SUBX
                            	  5540: *-----------------------------------------------------------
                            	  5541: *-----------------------------------------------------------
                            	  5542: 
                            	  5543: op_SUBX:
                            	  5544: 
                            	  5545: 
                            	  5546: *  * Register to Register
00:000030F8 203CA5A5A5A5    	  5547:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000030FE 223C8167E123    	  5548:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00003104 243CA5A5A5A5    	  5549:                 move.l #$a5a5a5a5,d2
00:0000310A 7600            	  5550:                 moveq  #$00000000,d3
00:0000310C 7800            	  5551:                 moveq  #$00000000,d4       * Cumulative data results
00:0000310E 7A00            	  5552:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003110 7C1E            	  5553:                 move.l #$0000001E,d6       * Inner loop counter
00:00003112 7E1E            	  5554:                 move.l #$0000001E,d7       * Outer loop counter
00:00003114 307C0100        	  5555:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5556: 
                            	  5557: 
                            	  5558: SUBX_OUTER1:
                            	  5559: 
                            	  5560: *     BYTE
00:00003118 2002            	  5561:                 move.l d2,d0
00:0000311A 9101            	  5562:                 subx.b d1,d0
00:0000311C 40C3            	  5563:                 move.w sr,d3
00:0000311E 02830000001F    	  5564:                 andi.l #$1F,d3            * Isolate flags
00:00003124 DA83            	  5565:                 add.l d3,d5               * Copy flag results into accumulator
00:00003126 D880            	  5566:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5567: 
                            	  5568: *     WORD
00:00003128 2002            	  5569:                 move.l d2,d0
00:0000312A 9141            	  5570:                 subx.w d1,d0
00:0000312C 40C3            	  5571:                 move.w sr,d3
00:0000312E 02830000001F    	  5572:                 andi.l #$1F,d3            * Isolate flags
00:00003134 DA83            	  5573:                 add.l d3,d5               * Copy flag results into accumulator
00:00003136 D880            	  5574:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5575: 
                            	  5576: *     LONG
00:00003138 2002            	  5577:                 move.l d2,d0
00:0000313A 9181            	  5578:                 subx.l d1,d0
00:0000313C 40C3            	  5579:                 move.w sr,d3
00:0000313E 02830000001F    	  5580:                 andi.l #$1F,d3            * Isolate flags
00:00003144 DA83            	  5581:                 add.l d3,d5               * Copy flag results into accumulator
00:00003146 D880            	  5582:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5583: 
00:00003148 E299            	  5584:                 ror.l #$1,d1
00:0000314A 51CEFFCC        	  5585:                 dbf d6,SUBX_OUTER1
00:0000314E E29A            	  5586:                 ror.l #$1,d2
00:00003150 223C8167E123    	  5587:                 move.l #$8167E123,d1       * Initial Data-Y
00:00003156 7C1E            	  5588:                 move.l #$0000001E,d6       * Inner loop counter
00:00003158 51CFFFBE        	  5589:                 dbf d7,SUBX_OUTER1
                            	  5590: 
00:0000315C 0C84FCAA913E    	  5591:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:00003162 66FE            	  5592:                 bne.s *
00:00003164 0C8500007E89    	  5593:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:0000316A 66FE            	  5594:                 bne.s *
                            	  5595: 
                            	  5596: 
                            	  5597: 
                            	  5598: *     -(An),-(An)
                            	  5599: 
00:0000316C 7000            	  5600:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:0000316E 7200            	  5601:                 moveq  #$00000000,d1
00:00003170 7400            	  5602:                 moveq  #$00000000,d2
00:00003172 307C0100        	  5603:                 move.l #$00000100,a0       * Address for Data-X
00:00003176 327C0200        	  5604:                 move.l #$00000200,a1       * Address for Data-Y
00:0000317A 20FC11FF5580    	  5605:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00003180 20FC1111FFFF    	  5606:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00003186 20FC80FF337F    	  5607:                 move.l #$80FF337F,(a0)+   * Populate test data
00:0000318C 20FC44444444    	  5608:                 move.l #$44444444,(a0)+   * Populate test data
00:00003192 22FC80FF337F    	  5609:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00003198 22FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:0000319E 22FC33333333    	  5611:                 move.l #$33333333,(a1)+   * Populate test data
00:000031A4 22FC5580EECC    	  5612:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5613: 
                            	  5614: 
00:000031AA 7C0F            	  5615:                 move.l #$0000000F,d6       * Loop counter
                            	  5616: 
00:000031AC 9308            	  5617: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:000031AE 40C3            	  5618:                 move.w sr,d3
00:000031B0 02830000000F    	  5619:                 andi.l #$0F,d3            * Isolate flags
00:000031B6 D083            	  5620:                 add.l d3,d0               * Copy flag results into accumulator
00:000031B8 D211            	  5621:                 add.b (a1),d1
00:000031BA 51CEFFF0        	  5622:                 dbf d6,SUBX_LOOP3
                            	  5623: 
                            	  5624: 
00:000031BE 307C0110        	  5625:                 move.l #$00000110,a0       * Address for Data-X
00:000031C2 327C0210        	  5626:                 move.l #$00000210,a1       * Address for Data-Y
00:000031C6 7C07            	  5627:                 moveq  #$00000007,d6       * Loop counter
                            	  5628: 
00:000031C8 9348            	  5629: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:000031CA 40C3            	  5630:                 move.w sr,d3
00:000031CC 02830000000F    	  5631:                 andi.l #$0F,d3            * Isolate flags
00:000031D2 D083            	  5632:                 add.l d3,d0               * Copy flag results into accumulator
00:000031D4 D251            	  5633:                 add.w (a1),d1
00:000031D6 51CEFFF0        	  5634:                 dbf d6,SUBX_LOOP4
                            	  5635: 
                            	  5636: 
00:000031DA 307C0110        	  5637:                 move.l #$00000110,a0       * Address for Data-X
00:000031DE 327C0210        	  5638:                 move.l #$00000210,a1       * Address for Data-Y
00:000031E2 7C03            	  5639:                 moveq  #$00000003,d6       * Loop counter
                            	  5640: 
00:000031E4 9388            	  5641: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:000031E6 40C3            	  5642:                 move.w sr,d3
00:000031E8 02830000000F    	  5643:                 andi.l #$0F,d3            * Isolate flags
00:000031EE D083            	  5644:                 add.l d3,d0               * Copy flag results into accumulator
00:000031F0 D291            	  5645:                 add.l (a1),d1
00:000031F2 51CEFFF0        	  5646:                 dbf d6,SUBX_LOOP5
                            	  5647: 
                            	  5648: 
00:000031F6 0C80000000B1    	  5649:                 cmpi.l #$000000B1,d0      * Check the flag results
00:000031FC 66FE            	  5650:                 bne.s *
00:000031FE 0C8162C6F417    	  5651:                 cmpi.l #$62C6F417,d1      * Check the data results
00:00003204 66FE            	  5652:                 bne.s *
                            	  5653: 
00:00003206 4E75            	  5654:                 rts
                            	  5655: 
                            	  5656: 
                            	  5657: *-----------------------------------------------------------
                            	  5658: *-----------------------------------------------------------
                            	  5659: * OPCODE : MULU
                            	  5660: *-----------------------------------------------------------
                            	  5661: *-----------------------------------------------------------
                            	  5662: 
                            	  5663: op_MULU:
                            	  5664: 
00:00003208 203CFE805501    	  5665:                 move.l #$FE805501,d0        * Initial
00:0000320E 223C5697EDB6    	  5666:                 move.l #$5697EDB6,d1        * Initial Y
00:00003214 243CFE805501    	  5667:                 move.l #$FE805501,d2
00:0000321A 7600            	  5668:                 moveq  #$00000000,d3
00:0000321C 7800            	  5669:                 moveq  #$00000000,d4        * Cumulative data results
00:0000321E 7A00            	  5670:                 moveq  #$00000000,d5       * Cumulative flag results
00:00003220 7C0E            	  5671:                 move.l #$0000000E,d6       * Inner loop counter
00:00003222 7E0E            	  5672:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5673: 
                            	  5674: 
00:00003224 C0C1            	  5675: MULU_OUTER1:    mulu d1,d0
00:00003226 40C3            	  5676:                 move.w sr,d3
00:00003228 02830000000C    	  5677:                 andi.l #$0C,d3            * Isolate flags
00:0000322E DA83            	  5678:                 add.l d3,d5               * Copy flag results into accumulator
00:00003230 D880            	  5679:                 add.l d0,d4               * Copy data results into data accumulator
00:00003232 E299            	  5680:                 ror.l #$1,d1
                            	  5681: 
00:00003234 51CEFFEE        	  5682:                 dbf d6,MULU_OUTER1
00:00003238 E29A            	  5683:                 ror.l #$1,d2
00:0000323A 2002            	  5684:                 move.l d2,d0
00:0000323C 7C0E            	  5685:                 move.l #$0000000E,d6       * Inner loop counter
00:0000323E 51CFFFE4        	  5686:                 dbf d7,MULU_OUTER1
                            	  5687: 
00:00003242 0C8476FB988C    	  5688:                 cmpi.l #$76FB988C,d4      * Check the data results
00:00003248 66FE            	  5689:                 bne.s *
                            	  5690: 
00:0000324A 0C8500000170    	  5691:                 cmpi.l #$00000170,d5      * Check the Flag results
00:00003250 66FE            	  5692:                 bne.s *
                            	  5693: 
                            	  5694: 
00:00003252 4E75            	  5695:                 rts
                            	  5696: 
                            	  5697: 
                            	  5698: *-----------------------------------------------------------
                            	  5699: *-----------------------------------------------------------
                            	  5700: * OPCODE : MULS
                            	  5701: *-----------------------------------------------------------
                            	  5702: *-----------------------------------------------------------
                            	  5703: 
                            	  5704: op_MULS:
                            	  5705: 
00:00003254 203CFE805501    	  5706:                 move.l #$FE805501,d0        * Initial
00:0000325A 223C5697EDB6    	  5707:                 move.l #$5697EDB6,d1        * Initial Y
00:00003260 243CFE805501    	  5708:                 move.l #$FE805501,d2
00:00003266 7600            	  5709:                 moveq  #$00000000,d3
00:00003268 7800            	  5710:                 moveq  #$00000000,d4        * Cumulative data results
00:0000326A 7A00            	  5711:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000326C 7C0E            	  5712:                 move.l #$0000000E,d6       * Inner loop counter
00:0000326E 7E0E            	  5713:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5714: 
                            	  5715: 
00:00003270 C1C1            	  5716: MULS_OUTER1:    muls d1,d0
00:00003272 40C3            	  5717:                 move.w sr,d3
00:00003274 02830000000C    	  5718:                 andi.l #$0C,d3            * Isolate flags
00:0000327A DA83            	  5719:                 add.l d3,d5               * Copy flag results into accumulator
00:0000327C D880            	  5720:                 add.l d0,d4               * Copy data results into data accumulator
00:0000327E E299            	  5721:                 ror.l #$1,d1
                            	  5722: 
00:00003280 51CEFFEE        	  5723:                 dbf d6,MULS_OUTER1
00:00003284 E29A            	  5724:                 ror.l #$1,d2
00:00003286 2002            	  5725:                 move.l d2,d0
00:00003288 7C0E            	  5726:                 move.l #$0000000E,d6       * Inner loop counter
00:0000328A 51CFFFE4        	  5727:                 dbf d7,MULS_OUTER1
                            	  5728: 
00:0000328E 0C84D4E2988C    	  5729:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:00003294 66FE            	  5730:                 bne.s *
                            	  5731: 
00:00003296 0C85000003E0    	  5732:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:0000329C 66FE            	  5733:                 bne.s *
                            	  5734: 
                            	  5735: 
00:0000329E 4E75            	  5736:                 rts
                            	  5737: 
                            	  5738: 
                            	  5739: 
                            	  5740: *-----------------------------------------------------------
                            	  5741: *-----------------------------------------------------------
                            	  5742: * OPCODE : EXG
                            	  5743: *-----------------------------------------------------------
                            	  5744: *-----------------------------------------------------------
                            	  5745: 
                            	  5746: op_EXG:
00:000032A0 223CD1D1D1D1    	  5747:                 move.l #$d1d1d1d1,d1
00:000032A6 243CD2D2D2D2    	  5748:                 move.l #$d2d2d2d2,d2
00:000032AC 263CD3D3D3D3    	  5749:                 move.l #$d3d3d3d3,d3
00:000032B2 227CA1A1A1A1    	  5750:                 move.l #$a1a1a1a1,a1
00:000032B8 247CA2A2A2A2    	  5751:                 move.l #$a2a2a2a2,a2
00:000032BE 267CA3A3A3A3    	  5752:                 move.l #$a3a3a3a3,a3
                            	  5753: 
00:000032C4 C342            	  5754:                 exg d1,d2
00:000032C6 C34A            	  5755:                 exg a1,a2
00:000032C8 C78B            	  5756:                 exg d3,a3
                            	  5757: 
00:000032CA 0C81D2D2D2D2    	  5758:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:000032D0 66FE            	  5759:                 bne.s *
00:000032D2 0C82D1D1D1D1    	  5760:                 cmpi.l #$d1d1d1d1,d2
00:000032D8 66FE            	  5761:                 bne.s *
00:000032DA 0C83A3A3A3A3    	  5762:                 cmpi.l #$a3a3a3a3,d3
00:000032E0 66FE            	  5763:                 bne.s *
                            	  5764: 
00:000032E2 2209            	  5765:                 move.l a1,d1
00:000032E4 240A            	  5766:                 move.l a2,d2
00:000032E6 260B            	  5767:                 move.l a3,d3
                            	  5768: 
00:000032E8 0C81A2A2A2A2    	  5769:                 cmpi.l #$a2a2a2a2,d1
00:000032EE 66FE            	  5770:                 bne.s *
00:000032F0 0C82A1A1A1A1    	  5771:                 cmpi.l #$a1a1a1a1,d2
00:000032F6 66FE            	  5772:                 bne.s *
00:000032F8 0C83D3D3D3D3    	  5773:                 cmpi.l #$d3d3d3d3,d3
00:000032FE 66FE            	  5774:                 bne.s *
                            	  5775: 
00:00003300 4E75            	  5776:                 rts
                            	  5777: 
                            	  5778: 
                            	  5779: *-----------------------------------------------------------
                            	  5780: *-----------------------------------------------------------
                            	  5781: * OPCODE : ROx
                            	  5782: *-----------------------------------------------------------
                            	  5783: *-----------------------------------------------------------
                            	  5784: 
                            	  5785: *     Subroutine to check and accumulate the flags
00:00003302 40C3            	  5786: ROx_FLAGS:      move.w sr,d3
00:00003304 02830000000F    	  5787:                 andi.l #$0F,d3            * Isolate flags
00:0000330A DA83            	  5788:                 add.l d3,d5               * Copy flag results into accumulator
00:0000330C 4E75            	  5789:                 rts
                            	  5790: 
                            	  5791: op_ROx:
                            	  5792: 
                            	  5793: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5794: 
                            	  5795: *        BYTE LEFT
00:0000330E 203C80018FF1    	  5796:                 move.l #$80018FF1,d0
00:00003314 7A00            	  5797:                 moveq  #$00000000,d5
00:00003316 7C11            	  5798:                 moveq  #$00000011,d6
                            	  5799: ROx_LOOP1:
00:00003318 ED38            	  5800:                 rol.b d6,d0
00:0000331A 61E6            	  5801:                 bsr ROx_FLAGS
00:0000331C 51CEFFFA        	  5802:                 dbf d6,ROx_LOOP1
00:00003320 0C8080018FE3    	  5803:                 cmpi.l #$80018FE3,d0
00:00003326 66FE            	  5804:                 bne.s *
00:00003328 0C850000006B    	  5805:                 cmpi.l #$0000006B,d5
00:0000332E 66FE            	  5806:                 bne.s *
                            	  5807: 
                            	  5808: *        BYTE RIGHT
00:00003330 203C80018FF1    	  5809:                 move.l #$80018FF1,d0
00:00003336 7C12            	  5810:                 moveq  #$00000012,d6
                            	  5811: ROx_LOOP2:
00:00003338 EC38            	  5812:                 ror.b d6,d0
00:0000333A 61C6            	  5813:                 bsr ROx_FLAGS
00:0000333C 51CEFFFA        	  5814:                 dbf d6,ROx_LOOP2
00:00003340 0C8080018F3E    	  5815:                 cmpi.l #$80018F3E,d0
00:00003346 66FE            	  5816:                 bne.s *
00:00003348 0C85000000C5    	  5817:                 cmpi.l #$000000C5,d5
00:0000334E 66FE            	  5818:                 bne.s *
                            	  5819: 
                            	  5820: 
                            	  5821: *        WORD LEFT
00:00003350 203C80018FF1    	  5822:                 move.l #$80018FF1,d0
00:00003356 7C13            	  5823:                 moveq  #$00000013,d6
                            	  5824: ROx_LOOP3:
00:00003358 ED78            	  5825:                 rol.w d6,d0
00:0000335A 61A6            	  5826:                 bsr ROx_FLAGS
00:0000335C 51CEFFFA        	  5827:                 dbf d6,ROx_LOOP3
00:00003360 0C80800163FC    	  5828:                 cmpi.l #$800163FC,d0
00:00003366 66FE            	  5829:                 bne.s *
00:00003368 0C8500000131    	  5830:                 cmpi.l #$00000131,d5
00:0000336E 66FE            	  5831:                 bne.s *
                            	  5832: 
                            	  5833: *        WORD RIGHT
00:00003370 203C80018FF1    	  5834:                 move.l #$80018FF1,d0
00:00003376 7C1E            	  5835:                 move.l #$0000001E,d6
                            	  5836: ROx_LOOP4:
00:00003378 EC78            	  5837:                 ror.w d6,d0
00:0000337A 6186            	  5838:                 bsr ROx_FLAGS
00:0000337C 51CEFFFA        	  5839:                 dbf d6,ROx_LOOP4
00:00003380 0C808001C7F8    	  5840:                 cmpi.l #$8001C7F8,d0
00:00003386 66FE            	  5841:                 bne.s *
00:00003388 0C85000001DB    	  5842:                 cmpi.l #$000001DB,d5
00:0000338E 66FE            	  5843:                 bne.s *
                            	  5844: 
                            	  5845: 
                            	  5846: *        LONG LEFT
00:00003390 203C80018FF1    	  5847:                 move.l #$80018FF1,d0
00:00003396 7C15            	  5848:                 moveq  #$00000015,d6
                            	  5849: ROx_LOOP5:
00:00003398 EDB8            	  5850:                 rol.l d6,d0
00:0000339A 6100FF66        	  5851:                 bsr ROx_FLAGS
00:0000339E 51CEFFF8        	  5852:                 dbf d6,ROx_LOOP5
00:000033A2 0C8000C7F8C0    	  5853:                 cmpi.l #$00C7F8C0,d0
00:000033A8 66FE            	  5854:                 bne.s *
00:000033AA 0C850000021A    	  5855:                 cmpi.l #$0000021A,d5
00:000033B0 66FE            	  5856:                 bne.s *
                            	  5857: 
                            	  5858: *        LONG RIGHT
00:000033B2 203C80018FF1    	  5859:                 move.l #$80018FF1,d0
00:000033B8 7C16            	  5860:                 moveq  #$00000016,d6
                            	  5861: ROx_LOOP6:
00:000033BA ECB8            	  5862:                 ror.l d6,d0
00:000033BC 6100FF44        	  5863:                 bsr ROx_FLAGS
00:000033C0 51CEFFF8        	  5864:                 dbf d6,ROx_LOOP6
00:000033C4 0C80000C7F8C    	  5865:                 cmpi.l #$000C7F8C,d0
00:000033CA 66FE            	  5866:                 bne.s *
00:000033CC 0C8500000250    	  5867:                 cmpi.l #$00000250,d5
00:000033D2 66FE            	  5868:                 bne.s *
                            	  5869: 
                            	  5870: 
                            	  5871: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5872: 
00:000033D4 203C80018FF1    	  5873:                 move.l #$80018FF1,d0
00:000033DA 7A00            	  5874:                 moveq  #$00000000,d5
                            	  5875: 
                            	  5876: *        BYTE LEFT
00:000033DC E318            	  5877:                 rol.b #1,d0
00:000033DE 6100FF22        	  5878:                 bsr ROx_FLAGS
00:000033E2 EB18            	  5879:                 rol.b #5,d0
00:000033E4 6100FF1C        	  5880:                 bsr ROx_FLAGS
00:000033E8 EF18            	  5881:                 rol.b #7,d0
00:000033EA 6100FF16        	  5882:                 bsr ROx_FLAGS
00:000033EE E118            	  5883:                 rol.b #8,d0
00:000033F0 6100FF10        	  5884:                 bsr ROx_FLAGS
00:000033F4 0C8080018F3E    	  5885:                 cmpi.l #$80018F3E,d0
00:000033FA 66FE            	  5886:                 bne.s *
00:000033FC 0C8500000009    	  5887:                 cmpi.l #$00000009,d5
00:00003402 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        BYTE RIGHT
00:00003404 E218            	  5891:                 ror.b #1,d0
00:00003406 6100FEFA        	  5892:                 bsr ROx_FLAGS
00:0000340A EA18            	  5893:                 ror.b #5,d0
00:0000340C 6100FEF4        	  5894:                 bsr ROx_FLAGS
00:00003410 EE18            	  5895:                 ror.b #7,d0
00:00003412 6100FEEE        	  5896:                 bsr ROx_FLAGS
00:00003416 E018            	  5897:                 ror.b #8,d0
00:00003418 6100FEE8        	  5898:                 bsr ROx_FLAGS
00:0000341C 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
00:00003422 66FE            	  5900:                 bne.s *
00:00003424 0C8500000024    	  5901:                 cmpi.l #$00000024,d5
00:0000342A 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        WORD LEFT
00:0000342C E358            	  5905:                 rol.w #1,d0
00:0000342E 6100FED2        	  5906:                 bsr ROx_FLAGS
00:00003432 EB58            	  5907:                 rol.w #5,d0
00:00003434 6100FECC        	  5908:                 bsr ROx_FLAGS
00:00003438 EF58            	  5909:                 rol.w #7,d0
00:0000343A 6100FEC6        	  5910:                 bsr ROx_FLAGS
00:0000343E E158            	  5911:                 rol.w #8,d0
00:00003440 6100FEC0        	  5912:                 bsr ROx_FLAGS
00:00003444 0C808001FE31    	  5913:                 cmpi.l #$8001FE31,d0
00:0000344A 66FE            	  5914:                 bne.s *
00:0000344C 0C8500000037    	  5915:                 cmpi.l #$00000037,d5
00:00003452 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        WORD RIGHT
00:00003454 E258            	  5919:                 ror.w #1,d0
00:00003456 6100FEAA        	  5920:                 bsr ROx_FLAGS
00:0000345A EA58            	  5921:                 ror.w #5,d0
00:0000345C 6100FEA4        	  5922:                 bsr ROx_FLAGS
00:00003460 EE58            	  5923:                 ror.w #7,d0
00:00003462 6100FE9E        	  5924:                 bsr ROx_FLAGS
00:00003466 E058            	  5925:                 ror.w #8,d0
00:00003468 6100FE98        	  5926:                 bsr ROx_FLAGS
00:0000346C 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
00:00003472 66FE            	  5928:                 bne.s *
00:00003474 0C850000005B    	  5929:                 cmpi.l #$0000005B,d5
00:0000347A 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: *        LONG LEFT
00:0000347C E398            	  5933:                 rol.l #1,d0
00:0000347E 6100FE82        	  5934:                 bsr ROx_FLAGS
00:00003482 EB98            	  5935:                 rol.l #5,d0
00:00003484 6100FE7C        	  5936:                 bsr ROx_FLAGS
00:00003488 EF98            	  5937:                 rol.l #7,d0
00:0000348A 6100FE76        	  5938:                 bsr ROx_FLAGS
00:0000348E E198            	  5939:                 rol.l #8,d0
00:00003490 6100FE70        	  5940:                 bsr ROx_FLAGS
00:00003494 0C80FE300031    	  5941:                 cmpi.l #$FE300031,d0
00:0000349A 66FE            	  5942:                 bne.s *
00:0000349C 0C8500000065    	  5943:                 cmpi.l #$00000065,d5
00:000034A2 66FE            	  5944:                 bne.s *
                            	  5945: 
                            	  5946: *        LONG RIGHT
00:000034A4 E298            	  5947:                 ror.l #1,d0
00:000034A6 6100FE5A        	  5948:                 bsr ROx_FLAGS
00:000034AA EA98            	  5949:                 ror.l #5,d0
00:000034AC 6100FE54        	  5950:                 bsr ROx_FLAGS
00:000034B0 EE98            	  5951:                 ror.l #7,d0
00:000034B2 6100FE4E        	  5952:                 bsr ROx_FLAGS
00:000034B6 E098            	  5953:                 ror.l #8,d0
00:000034B8 6100FE48        	  5954:                 bsr ROx_FLAGS
00:000034BC 0C8080018FF1    	  5955:                 cmpi.l #$80018FF1,d0
00:000034C2 66FE            	  5956:                 bne.s *
00:000034C4 0C8500000080    	  5957:                 cmpi.l #$00000080,d5
00:000034CA 66FE            	  5958:                 bne.s *
                            	  5959: 
                            	  5960: 
                            	  5961: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5962: 
00:000034CC 7A00            	  5963:                 moveq  #$00000000,d5
00:000034CE 307C0100        	  5964:                 move.l #$00000100,a0
00:000034D2 30BC8FF1        	  5965:                 move.w #$8FF1,(a0)
                            	  5966: 
                            	  5967: *        WORD LEFT
00:000034D6 E7D0            	  5968:                 rol (a0)
00:000034D8 6100FE28        	  5969:                 bsr ROx_FLAGS
00:000034DC E7D0            	  5970:                 rol (a0)
00:000034DE 6100FE22        	  5971:                 bsr ROx_FLAGS
00:000034E2 E7D0            	  5972:                 rol (a0)
00:000034E4 6100FE1C        	  5973:                 bsr ROx_FLAGS
00:000034E8 E7D0            	  5974:                 rol (a0)
00:000034EA 6100FE16        	  5975:                 bsr ROx_FLAGS
00:000034EE 3010            	  5976:                 move.w (a0),d0
00:000034F0 0C808001FF18    	  5977:                 cmpi.l #$8001FF18,d0
00:000034F6 66FE            	  5978:                 bne.s *
00:000034F8 0C8500000009    	  5979:                 cmpi.l #$00000009,d5
00:000034FE 66FE            	  5980:                 bne.s *
                            	  5981: 
                            	  5982: *        WORD RIGHT
00:00003500 E6D0            	  5983:                 ror (a0)
00:00003502 6100FDFE        	  5984:                 bsr ROx_FLAGS
00:00003506 E6D0            	  5985:                 ror (a0)
00:00003508 6100FDF8        	  5986:                 bsr ROx_FLAGS
00:0000350C E6D0            	  5987:                 ror (a0)
00:0000350E 6100FDF2        	  5988:                 bsr ROx_FLAGS
00:00003512 E6D0            	  5989:                 ror (a0)
00:00003514 6100FDEC        	  5990:                 bsr ROx_FLAGS
00:00003518 E6D0            	  5991:                 ror (a0)
00:0000351A 6100FDE6        	  5992:                 bsr ROx_FLAGS
00:0000351E E6D0            	  5993:                 ror (a0)
00:00003520 6100FDE0        	  5994:                 bsr ROx_FLAGS
00:00003524 3010            	  5995:                 move.w (a0),d0
00:00003526 0C80800163FC    	  5996:                 cmpi.l #$800163FC,d0
00:0000352C 66FE            	  5997:                 bne.s *
00:0000352E 0C850000001B    	  5998:                 cmpi.l #$0000001B,d5
00:00003534 66FE            	  5999:                 bne.s *
                            	  6000: 
00:00003536 4E75            	  6001:                 rts
                            	  6002: 
                            	  6003: 
                            	  6004: 
                            	  6005: *-----------------------------------------------------------
                            	  6006: *-----------------------------------------------------------
                            	  6007: * OPCODE : ROXx
                            	  6008: *-----------------------------------------------------------
                            	  6009: *-----------------------------------------------------------
                            	  6010: 
                            	  6011: *     Subroutine to check and accumulate the flags
00:00003538 40C3            	  6012: ROXx_FLAGS:     move.w sr,d3
00:0000353A 02830000000F    	  6013:                 andi.l #$0F,d3            * Isolate flags
00:00003540 DA83            	  6014:                 add.l d3,d5               * Copy flag results into accumulator
00:00003542 4E75            	  6015:                 rts
                            	  6016: 
                            	  6017: op_ROXx:
                            	  6018: 
                            	  6019: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6020: 
                            	  6021: *        BYTE LEFT
00:00003544 203C80018FF1    	  6022:                 move.l #$80018FF1,d0
00:0000354A 7A00            	  6023:                 moveq  #$00000000,d5
00:0000354C 7C11            	  6024:                 moveq  #$00000011,d6
                            	  6025: ROXx_LOOP1:
00:0000354E ED30            	  6026:                 roxl.b d6,d0
00:00003550 61E6            	  6027:                 bsr ROXx_FLAGS
00:00003552 51CEFFFA        	  6028:                 dbf d6,ROXx_LOOP1
00:00003556 0C8080018FD0    	  6029:                 cmpi.l #$80018FD0,d0
00:0000355C 66FE            	  6030:                 bne.s *
00:0000355E 0C8500000042    	  6031:                 cmpi.l #$00000042,d5
00:00003564 66FE            	  6032:                 bne.s *
                            	  6033: 
                            	  6034: *        BYTE RIGHT
00:00003566 203C80018FF1    	  6035:                 move.l #$80018FF1,d0
00:0000356C 7C12            	  6036:                 moveq  #$00000012,d6
                            	  6037: ROXx_LOOP2:
00:0000356E EC30            	  6038:                 roxr.b d6,d0
00:00003570 61C6            	  6039:                 bsr ROXx_FLAGS
00:00003572 51CEFFFA        	  6040:                 dbf d6,ROXx_LOOP2
00:00003576 0C8080018F51    	  6041:                 cmpi.l #$80018F51,d0
00:0000357C 66FE            	  6042:                 bne.s *
00:0000357E 0C850000009C    	  6043:                 cmpi.l #$0000009C,d5
00:00003584 66FE            	  6044:                 bne.s *
                            	  6045: 
                            	  6046: 
                            	  6047: *        WORD LEFT
00:00003586 203C80018FF1    	  6048:                 move.l #$80018FF1,d0
00:0000358C 7C13            	  6049:                 moveq  #$00000013,d6
                            	  6050: ROXx_LOOP3:
00:0000358E ED70            	  6051:                 roxl.w d6,d0
00:00003590 61A6            	  6052:                 bsr ROXx_FLAGS
00:00003592 51CEFFFA        	  6053:                 dbf d6,ROXx_LOOP3
00:00003596 0C8080013980    	  6054:                 cmpi.l #$80013980,d0
00:0000359C 66FE            	  6055:                 bne.s *
00:0000359E 0C85000000C9    	  6056:                 cmpi.l #$000000C9,d5
00:000035A4 66FE            	  6057:                 bne.s *
                            	  6058: 
                            	  6059: *        WORD RIGHT
00:000035A6 203C80018FF1    	  6060:                 move.l #$80018FF1,d0
00:000035AC 7C1E            	  6061:                 move.l #$0000001E,d6
                            	  6062: ROXx_LOOP4:
00:000035AE EC70            	  6063:                 roxr.w d6,d0
00:000035B0 6186            	  6064:                 bsr ROXx_FLAGS
00:000035B2 51CEFFFA        	  6065:                 dbf d6,ROXx_LOOP4
00:000035B6 0C8080010A1D    	  6066:                 cmpi.l #$80010A1D,d0
00:000035BC 66FE            	  6067:                 bne.s *
00:000035BE 0C850000014D    	  6068:                 cmpi.l #$0000014D,d5
00:000035C4 66FE            	  6069:                 bne.s *
                            	  6070: 
                            	  6071: 
                            	  6072: *        LONG LEFT
00:000035C6 203C80018FF1    	  6073:                 move.l #$80018FF1,d0
00:000035CC 7C15            	  6074:                 moveq  #$00000015,d6
                            	  6075: ROXx_LOOP5:
00:000035CE EDB0            	  6076:                 roxl.l d6,d0
00:000035D0 6100FF66        	  6077:                 bsr ROXx_FLAGS
00:000035D4 51CEFFF8        	  6078:                 dbf d6,ROXx_LOOP5
00:000035D8 0C80800185D0    	  6079:                 cmpi.l #$800185D0,d0
00:000035DE 66FE            	  6080:                 bne.s *
00:000035E0 0C85000001A1    	  6081:                 cmpi.l #$000001A1,d5
00:000035E6 66FE            	  6082:                 bne.s *
                            	  6083: 
                            	  6084: *        LONG RIGHT
00:000035E8 203C80018FF1    	  6085:                 move.l #$80018FF1,d0
00:000035EE 7C16            	  6086:                 moveq  #$00000016,d6
                            	  6087: ROXx_LOOP6:
00:000035F0 ECB0            	  6088:                 roxr.l d6,d0
00:000035F2 6100FF44        	  6089:                 bsr ROXx_FLAGS
00:000035F6 51CEFFF8        	  6090:                 dbf d6,ROXx_LOOP6
00:000035FA 0C80082D8200    	  6091:                 cmpi.l #$082D8200,d0
00:00003600 66FE            	  6092:                 bne.s *
00:00003602 0C85000001DE    	  6093:                 cmpi.l #$000001DE,d5
00:00003608 66FE            	  6094:                 bne.s *
                            	  6095: 
                            	  6096: 
                            	  6097: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6098: 
00:0000360A 203C80018FF1    	  6099:                 move.l #$80018FF1,d0
00:00003610 7A00            	  6100:                 moveq  #$00000000,d5
                            	  6101: 
                            	  6102: *        BYTE LEFT
00:00003612 E310            	  6103:                 roxl.b #1,d0
00:00003614 6100FF22        	  6104:                 bsr ROXx_FLAGS
00:00003618 EB10            	  6105:                 roxl.b #5,d0
00:0000361A 6100FF1C        	  6106:                 bsr ROXx_FLAGS
00:0000361E EF10            	  6107:                 roxl.b #7,d0
00:00003620 6100FF16        	  6108:                 bsr ROXx_FLAGS
00:00003624 E110            	  6109:                 roxl.b #8,d0
00:00003626 6100FF10        	  6110:                 bsr ROXx_FLAGS
00:0000362A 0C8080018F09    	  6111:                 cmpi.l #$80018F09,d0
00:00003630 66FE            	  6112:                 bne.s *
00:00003632 0C850000000B    	  6113:                 cmpi.l #$0000000B,d5
00:00003638 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        BYTE RIGHT
00:0000363A E210            	  6117:                 roxr.b #1,d0
00:0000363C 6100FEFA        	  6118:                 bsr ROXx_FLAGS
00:00003640 EA10            	  6119:                 roxr.b #5,d0
00:00003642 6100FEF4        	  6120:                 bsr ROXx_FLAGS
00:00003646 EE10            	  6121:                 roxr.b #7,d0
00:00003648 6100FEEE        	  6122:                 bsr ROXx_FLAGS
00:0000364C E010            	  6123:                 roxr.b #8,d0
00:0000364E 6100FEE8        	  6124:                 bsr ROXx_FLAGS
00:00003652 0C8080018F00    	  6125:                 cmpi.l #$80018F00,d0
00:00003658 66FE            	  6126:                 bne.s *
00:0000365A 0C8500000015    	  6127:                 cmpi.l #$00000015,d5
00:00003660 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        WORD LEFT
00:00003662 E350            	  6131:                 roxl.w #1,d0
00:00003664 6100FED2        	  6132:                 bsr ROXx_FLAGS
00:00003668 EB50            	  6133:                 roxl.w #5,d0
00:0000366A 6100FECC        	  6134:                 bsr ROXx_FLAGS
00:0000366E EF50            	  6135:                 roxl.w #7,d0
00:00003670 6100FEC6        	  6136:                 bsr ROXx_FLAGS
00:00003674 E150            	  6137:                 roxl.w #8,d0
00:00003676 6100FEC0        	  6138:                 bsr ROXx_FLAGS
00:0000367A 0C808001B000    	  6139:                 cmpi.l #$8001B000,d0
00:00003680 66FE            	  6140:                 bne.s *
00:00003682 0C8500000027    	  6141:                 cmpi.l #$00000027,d5
00:00003688 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        WORD RIGHT
00:0000368A E250            	  6145:                 roxr.w #1,d0
00:0000368C 6100FEAA        	  6146:                 bsr ROXx_FLAGS
00:00003690 EA50            	  6147:                 roxr.w #5,d0
00:00003692 6100FEA4        	  6148:                 bsr ROXx_FLAGS
00:00003696 EE50            	  6149:                 roxr.w #7,d0
00:00003698 6100FE9E        	  6150:                 bsr ROXx_FLAGS
00:0000369C E050            	  6151:                 roxr.w #8,d0
00:0000369E 6100FE98        	  6152:                 bsr ROXx_FLAGS
00:000036A2 0C8080010A00    	  6153:                 cmpi.l #$80010A00,d0
00:000036A8 66FE            	  6154:                 bne.s *
00:000036AA 0C8500000028    	  6155:                 cmpi.l #$00000028,d5
00:000036B0 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: *        LONG LEFT
00:000036B2 E390            	  6159:                 roxl.l #1,d0
00:000036B4 6100FE82        	  6160:                 bsr ROXx_FLAGS
00:000036B8 EB90            	  6161:                 roxl.l #5,d0
00:000036BA 6100FE7C        	  6162:                 bsr ROXx_FLAGS
00:000036BE EF90            	  6163:                 roxl.l #7,d0
00:000036C0 6100FE76        	  6164:                 bsr ROXx_FLAGS
00:000036C4 E190            	  6165:                 roxl.l #8,d0
00:000036C6 6100FE70        	  6166:                 bsr ROXx_FLAGS
00:000036CA 0C8040000010    	  6167:                 cmpi.l #$40000010,d0
00:000036D0 66FE            	  6168:                 bne.s *
00:000036D2 0C850000002A    	  6169:                 cmpi.l #$0000002A,d5
00:000036D8 66FE            	  6170:                 bne.s *
                            	  6171: 
                            	  6172: *        LONG RIGHT
00:000036DA E290            	  6173:                 roxr.l #1,d0
00:000036DC 6100FE5A        	  6174:                 bsr ROXx_FLAGS
00:000036E0 EA90            	  6175:                 roxr.l #5,d0
00:000036E2 6100FE54        	  6176:                 bsr ROXx_FLAGS
00:000036E6 EE90            	  6177:                 roxr.l #7,d0
00:000036E8 6100FE4E        	  6178:                 bsr ROXx_FLAGS
00:000036EC E090            	  6179:                 roxr.l #8,d0
00:000036EE 6100FE48        	  6180:                 bsr ROXx_FLAGS
00:000036F2 0C8000010200    	  6181:                 cmpi.l #$00010200,d0
00:000036F8 66FE            	  6182:                 bne.s *
00:000036FA 0C8500000032    	  6183:                 cmpi.l #$00000032,d5
00:00003700 66FE            	  6184:                 bne.s *
                            	  6185: 
                            	  6186: 
                            	  6187: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6188: 
00:00003702 7A00            	  6189:                 moveq  #$00000000,d5
00:00003704 307C0100        	  6190:                 move.l #$00000100,a0
00:00003708 30BC8FF1        	  6191:                 move.w #$8FF1,(a0)
                            	  6192: 
                            	  6193: *        WORD LEFT
00:0000370C E5D0            	  6194:                 roxl (a0)
00:0000370E 6100FE28        	  6195:                 bsr ROXx_FLAGS
00:00003712 E5D0            	  6196:                 roxl (a0)
00:00003714 6100FE22        	  6197:                 bsr ROXx_FLAGS
00:00003718 E5D0            	  6198:                 roxl (a0)
00:0000371A 6100FE1C        	  6199:                 bsr ROXx_FLAGS
00:0000371E E5D0            	  6200:                 roxl (a0)
00:00003720 6100FE16        	  6201:                 bsr ROXx_FLAGS
00:00003724 3010            	  6202:                 move.w (a0),d0
00:00003726 0C800001FF10    	  6203:                 cmpi.l #$0001FF10,d0
00:0000372C 66FE            	  6204:                 bne.s *
00:0000372E 0C8500000009    	  6205:                 cmpi.l #$00000009,d5
00:00003734 66FE            	  6206:                 bne.s *
                            	  6207: 
                            	  6208: *        WORD RIGHT
00:00003736 E4D0            	  6209:                 roxr (a0)
00:00003738 6100FDFE        	  6210:                 bsr ROXx_FLAGS
00:0000373C E4D0            	  6211:                 roxr (a0)
00:0000373E 6100FDF8        	  6212:                 bsr ROXx_FLAGS
00:00003742 E4D0            	  6213:                 roxr (a0)
00:00003744 6100FDF2        	  6214:                 bsr ROXx_FLAGS
00:00003748 E4D0            	  6215:                 roxr (a0)
00:0000374A 6100FDEC        	  6216:                 bsr ROXx_FLAGS
00:0000374E E4D0            	  6217:                 roxr (a0)
00:00003750 6100FDE6        	  6218:                 bsr ROXx_FLAGS
00:00003754 E4D0            	  6219:                 roxr (a0)
00:00003756 6100FDE0        	  6220:                 bsr ROXx_FLAGS
00:0000375A 3010            	  6221:                 move.w (a0),d0
00:0000375C 0C80000103FC    	  6222:                 cmpi.l #$000103FC,d0
00:00003762 66FE            	  6223:                 bne.s *
00:00003764 0C850000000A    	  6224:                 cmpi.l #$0000000A,d5
00:0000376A 66FE            	  6225:                 bne.s *
                            	  6226: 
00:0000376C 4E75            	  6227:                 rts
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: *-----------------------------------------------------------
                            	  6233: *-----------------------------------------------------------
                            	  6234: * OPCODE : SHIFTS
                            	  6235: *-----------------------------------------------------------
                            	  6236: *-----------------------------------------------------------
                            	  6237: 
                            	  6238: *     Subroutine to check and accumulate the flags
00:0000376E 40C3            	  6239: SHIFTS_FLAGS:   move.w sr,d3
00:00003770 02830000000F    	  6240:                 andi.l #$0F,d3            * Isolate flags
00:00003776 DA83            	  6241:                 add.l d3,d5               * Copy flag results into accumulator
00:00003778 4E75            	  6242:                 rts
                            	  6243: 
                            	  6244: op_SHIFTS:
                            	  6245: 
                            	  6246: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6247: 
                            	  6248: *        BYTE LEFT
00:0000377A 203C80018F81    	  6249:                 move.l #$80018F81,d0
00:00003780 7A00            	  6250:                 moveq  #$00000000,d5
00:00003782 7C02            	  6251:                 moveq  #$00000002,d6
                            	  6252: SHIFTS_LOOP1:
00:00003784 ED20            	  6253:                 asl.b d6,d0
00:00003786 61E6            	  6254:                 bsr SHIFTS_FLAGS
00:00003788 51CEFFFA        	  6255:                 dbf d6,SHIFTS_LOOP1
00:0000378C 0C8080018F08    	  6256:                 cmpi.l #$80018F08,d0
00:00003792 66FE            	  6257:                 bne.s *
00:00003794 0C8500000002    	  6258:                 cmpi.l #$00000002,d5
00:0000379A 66FE            	  6259:                 bne.s *
                            	  6260: 
                            	  6261: *        BYTE RIGHT
00:0000379C 203C80018F81    	  6262:                 move.l #$80018F81,d0
00:000037A2 7C02            	  6263:                 moveq  #$00000002,d6
                            	  6264: SHIFTS_LOOP2:
00:000037A4 EC20            	  6265:                 asr.b d6,d0
00:000037A6 61C6            	  6266:                 bsr SHIFTS_FLAGS
00:000037A8 51CEFFFA        	  6267:                 dbf d6,SHIFTS_LOOP2
00:000037AC 0C8080018FF0    	  6268:                 cmpi.l #$80018FF0,d0
00:000037B2 66FE            	  6269:                 bne.s *
00:000037B4 0C850000001A    	  6270:                 cmpi.l #$0000001A,d5
00:000037BA 66FE            	  6271:                 bne.s *
                            	  6272: 
                            	  6273: 
                            	  6274: *        WORD LEFT
00:000037BC 203C80018FF1    	  6275:                 move.l #$80018FF1,d0
00:000037C2 7C02            	  6276:                 moveq  #$00000002,d6
                            	  6277: SHIFTS_LOOP3:
00:000037C4 ED60            	  6278:                 asl.w d6,d0
00:000037C6 61A6            	  6279:                 bsr SHIFTS_FLAGS
00:000037C8 51CEFFFA        	  6280:                 dbf d6,SHIFTS_LOOP3
00:000037CC 0C8080017F88    	  6281:                 cmpi.l #$80017F88,d0
00:000037D2 66FE            	  6282:                 bne.s *
00:000037D4 0C850000001C    	  6283:                 cmpi.l #$0000001C,d5
00:000037DA 66FE            	  6284:                 bne.s *
                            	  6285: 
                            	  6286: *        WORD RIGHT
00:000037DC 203C80018FF1    	  6287:                 move.l #$80018FF1,d0
00:000037E2 7C02            	  6288:                 moveq  #$00000002,d6
                            	  6289: SHIFTS_LOOP4:
00:000037E4 EC60            	  6290:                 asr.w d6,d0
00:000037E6 6186            	  6291:                 bsr SHIFTS_FLAGS
00:000037E8 51CEFFFA        	  6292:                 dbf d6,SHIFTS_LOOP4
00:000037EC 0C808001F1FE    	  6293:                 cmpi.l #$8001F1FE,d0
00:000037F2 66FE            	  6294:                 bne.s *
00:000037F4 0C8500000034    	  6295:                 cmpi.l #$00000034,d5
00:000037FA 66FE            	  6296:                 bne.s *
                            	  6297: 
                            	  6298: 
                            	  6299: *        LONG LEFT
00:000037FC 203C80018FF1    	  6300:                 move.l #$80018FF1,d0
00:00003802 7C02            	  6301:                 moveq  #$00000002,d6
                            	  6302: SHIFTS_LOOP5:
00:00003804 EDA0            	  6303:                 asl.l d6,d0
00:00003806 6100FF66        	  6304:                 bsr SHIFTS_FLAGS
00:0000380A 51CEFFF8        	  6305:                 dbf d6,SHIFTS_LOOP5
00:0000380E 0C80000C7F88    	  6306:                 cmpi.l #$000C7F88,d0
00:00003814 66FE            	  6307:                 bne.s *
00:00003816 0C8500000036    	  6308:                 cmpi.l #$00000036,d5
00:0000381C 66FE            	  6309:                 bne.s *
                            	  6310: 
                            	  6311: *        LONG RIGHT
00:0000381E 203C80018FF1    	  6312:                 move.l #$80018FF1,d0
00:00003824 7C02            	  6313:                 moveq  #$00000002,d6
                            	  6314: SHIFTS_LOOP6:
00:00003826 ECA0            	  6315:                 asr.l d6,d0
00:00003828 6100FF44        	  6316:                 bsr SHIFTS_FLAGS
00:0000382C 51CEFFF8        	  6317:                 dbf d6,SHIFTS_LOOP6
00:00003830 0C80F00031FE    	  6318:                 cmpi.l #$F00031FE,d0
00:00003836 66FE            	  6319:                 bne.s *
00:00003838 0C850000004E    	  6320:                 cmpi.l #$0000004E,d5
00:0000383E 66FE            	  6321:                 bne.s *
                            	  6322: 
                            	  6323: 
                            	  6324: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6325: 
00:00003840 203C80018FF1    	  6326:                 move.l #$80018FF1,d0
00:00003846 7A00            	  6327:                 moveq  #$00000000,d5
                            	  6328: 
                            	  6329: *        BYTE LEFT
00:00003848 D000            	  6330:                 asl.b #1,d0
00:0000384A 6100FF22        	  6331:                 bsr SHIFTS_FLAGS
00:0000384E E500            	  6332:                 asl.b #2,d0
00:00003850 6100FF1C        	  6333:                 bsr SHIFTS_FLAGS
00:00003854 D000            	  6334:                 asl.b #1,d0
00:00003856 6100FF16        	  6335:                 bsr SHIFTS_FLAGS
00:0000385A E700            	  6336:                 asl.b #3,d0
00:0000385C 6100FF10        	  6337:                 bsr SHIFTS_FLAGS
00:00003860 0C8080018F80    	  6338:                 cmpi.l #$80018F80,d0
00:00003866 66FE            	  6339:                 bne.s *
00:00003868 0C850000001F    	  6340:                 cmpi.l #$0000001F,d5
00:0000386E 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        BYTE RIGHT
00:00003870 E200            	  6344:                 asr.b #1,d0
00:00003872 6100FEFA        	  6345:                 bsr SHIFTS_FLAGS
00:00003876 E400            	  6346:                 asr.b #2,d0
00:00003878 6100FEF4        	  6347:                 bsr SHIFTS_FLAGS
00:0000387C E600            	  6348:                 asr.b #3,d0
00:0000387E 6100FEEE        	  6349:                 bsr SHIFTS_FLAGS
00:00003882 E200            	  6350:                 asr.b #1,d0
00:00003884 6100FEE8        	  6351:                 bsr SHIFTS_FLAGS
00:00003888 0C8080018FFF    	  6352:                 cmpi.l #$80018FFF,d0
00:0000388E 66FE            	  6353:                 bne.s *
00:00003890 0C850000003F    	  6354:                 cmpi.l #$0000003F,d5
00:00003896 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        WORD LEFT
00:00003898 D040            	  6358:                 asl.w #1,d0
00:0000389A 6100FED2        	  6359:                 bsr SHIFTS_FLAGS
00:0000389E E540            	  6360:                 asl.w #2,d0
00:000038A0 6100FECC        	  6361:                 bsr SHIFTS_FLAGS
00:000038A4 E740            	  6362:                 asl.w #3,d0
00:000038A6 6100FEC6        	  6363:                 bsr SHIFTS_FLAGS
00:000038AA EB40            	  6364:                 asl.w #5,d0
00:000038AC 6100FEC0        	  6365:                 bsr SHIFTS_FLAGS
00:000038B0 0C808001F800    	  6366:                 cmpi.l #$8001F800,d0
00:000038B6 66FE            	  6367:                 bne.s *
00:000038B8 0C8500000056    	  6368:                 cmpi.l #$00000056,d5
00:000038BE 66FE            	  6369:                 bne.s *
                            	  6370: 
                            	  6371: *        WORD RIGHT
00:000038C0 EA40            	  6372:                 asr.w #5,d0
00:000038C2 6100FEAA        	  6373:                 bsr SHIFTS_FLAGS
00:000038C6 E240            	  6374:                 asr.w #1,d0
00:000038C8 6100FEA4        	  6375:                 bsr SHIFTS_FLAGS
00:000038CC E440            	  6376:                 asr.w #2,d0
00:000038CE 6100FE9E        	  6377:                 bsr SHIFTS_FLAGS
00:000038D2 E840            	  6378:                 asr.w #4,d0
00:000038D4 6100FE98        	  6379:                 bsr SHIFTS_FLAGS
00:000038D8 0C808001FFFF    	  6380:                 cmpi.l #$8001FFFF,d0
00:000038DE 66FE            	  6381:                 bne.s *
00:000038E0 0C8500000077    	  6382:                 cmpi.l #$00000077,d5
00:000038E6 66FE            	  6383:                 bne.s *
                            	  6384: 
                            	  6385: *        LONG LEFT
00:000038E8 203C80018FF1    	  6386:                 move.l #$80018FF1,d0
00:000038EE D080            	  6387:                 asl.l #1,d0
00:000038F0 6100FE7C        	  6388:                 bsr SHIFTS_FLAGS
00:000038F4 E580            	  6389:                 asl.l #2,d0
00:000038F6 6100FE76        	  6390:                 bsr SHIFTS_FLAGS
00:000038FA EF80            	  6391:                 asl.l #7,d0
00:000038FC 6100FE70        	  6392:                 bsr SHIFTS_FLAGS
00:00003900 E980            	  6393:                 asl.l #4,d0
00:00003902 6100FE6A        	  6394:                 bsr SHIFTS_FLAGS
00:00003906 0C8063FC4000    	  6395:                 cmpi.l #$63FC4000,d0
00:0000390C 66FE            	  6396:                 bne.s *
00:0000390E 0C850000007A    	  6397:                 cmpi.l #$0000007A,d5
00:00003914 66FE            	  6398:                 bne.s *
                            	  6399: 
                            	  6400: *        LONG RIGHT
00:00003916 203C80018FF1    	  6401:                 move.l #$80018FF1,d0
00:0000391C E280            	  6402:                 asr.l #1,d0
00:0000391E 6100FE4E        	  6403:                 bsr SHIFTS_FLAGS
00:00003922 EA80            	  6404:                 asr.l #5,d0
00:00003924 6100FE48        	  6405:                 bsr SHIFTS_FLAGS
00:00003928 EE80            	  6406:                 asr.l #7,d0
00:0000392A 6100FE42        	  6407:                 bsr SHIFTS_FLAGS
00:0000392E E080            	  6408:                 asr.l #8,d0
00:00003930 6100FE3C        	  6409:                 bsr SHIFTS_FLAGS
00:00003934 0C80FFFFFC00    	  6410:                 cmpi.l #$FFFFFC00,d0
00:0000393A 66FE            	  6411:                 bne.s *
00:0000393C 0C850000009C    	  6412:                 cmpi.l #$0000009C,d5
00:00003942 66FE            	  6413:                 bne.s *
                            	  6414: 
                            	  6415: 
                            	  6416: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6417: 
00:00003944 7A00            	  6418:                 moveq  #$00000000,d5
00:00003946 307C0100        	  6419:                 move.l #$00000100,a0
00:0000394A 30BC8FF1        	  6420:                 move.w #$8FF1,(a0)
                            	  6421: 
                            	  6422: *        WORD LEFT
00:0000394E E1D0            	  6423:                 asl  (a0)
00:00003950 6100FE1C        	  6424:                 bsr SHIFTS_FLAGS
00:00003954 E1D0            	  6425:                 asl  (a0)
00:00003956 6100FE16        	  6426:                 bsr SHIFTS_FLAGS
00:0000395A E1D0            	  6427:                 asl  (a0)
00:0000395C 6100FE10        	  6428:                 bsr SHIFTS_FLAGS
00:00003960 E1D0            	  6429:                 asl  (a0)
00:00003962 6100FE0A        	  6430:                 bsr SHIFTS_FLAGS
00:00003966 3010            	  6431:                 move.w (a0),d0
00:00003968 0C80FFFFFF10    	  6432:                 cmpi.l #$FFFFFF10,d0
00:0000396E 66FE            	  6433:                 bne.s *
00:00003970 0C850000000D    	  6434:                 cmpi.l #$0000000D,d5
00:00003976 66FE            	  6435:                 bne.s *
                            	  6436: 
                            	  6437: *        WORD RIGHT
00:00003978 E0D0            	  6438:                 asr (a0)
00:0000397A 6100FDF2        	  6439:                 bsr SHIFTS_FLAGS
00:0000397E E0D0            	  6440:                 asr (a0)
00:00003980 6100FDEC        	  6441:                 bsr SHIFTS_FLAGS
00:00003984 E0D0            	  6442:                 asr (a0)
00:00003986 6100FDE6        	  6443:                 bsr SHIFTS_FLAGS
00:0000398A E0D0            	  6444:                 asr (a0)
00:0000398C 6100FDE0        	  6445:                 bsr SHIFTS_FLAGS
00:00003990 E0D0            	  6446:                 asr (a0)
00:00003992 6100FDDA        	  6447:                 bsr SHIFTS_FLAGS
00:00003996 E0D0            	  6448:                 asr (a0)
00:00003998 6100FDD4        	  6449:                 bsr SHIFTS_FLAGS
00:0000399C 3010            	  6450:                 move.w (a0),d0
00:0000399E 0C80FFFFFFFC    	  6451:                 cmpi.l #$FFFFFFFC,d0
00:000039A4 66FE            	  6452:                 bne.s *
00:000039A6 0C850000003E    	  6453:                 cmpi.l #$0000003E,d5
00:000039AC 66FE            	  6454:                 bne.s *
                            	  6455: 
00:000039AE 4E75            	  6456:                 rts
                            	  6457: 
                            	  6458: 
                            	  6459: 
                            	  6460: *-----------------------------------------------------------
                            	  6461: *-----------------------------------------------------------
                            	  6462: * OPCODE : SHIFTS2
                            	  6463: *-----------------------------------------------------------
                            	  6464: *-----------------------------------------------------------
                            	  6465: 
                            	  6466: *     Subroutine to check and accumulate the flags
00:000039B0 40C3            	  6467: SHIFTS2_FLAGS:  move.w sr,d3
00:000039B2 02830000000F    	  6468:                 andi.l #$0F,d3            * Isolate flags
00:000039B8 DA83            	  6469:                 add.l d3,d5               * Copy flag results into accumulator
00:000039BA 4E75            	  6470:                 rts
                            	  6471: 
                            	  6472: op_SHIFTS2:
                            	  6473: 
                            	  6474: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6475: 
                            	  6476: *        BYTE LEFT
00:000039BC 203C80018F81    	  6477:                 move.l #$80018F81,d0
00:000039C2 7A00            	  6478:                 moveq  #$00000000,d5
00:000039C4 7C02            	  6479:                 moveq  #$00000002,d6
                            	  6480: SHIFTS2_LOOP1:
00:000039C6 ED28            	  6481:                 lsl.b d6,d0
00:000039C8 61E6            	  6482:                 bsr SHIFTS2_FLAGS
00:000039CA 51CEFFFA        	  6483:                 dbf d6,SHIFTS2_LOOP1
00:000039CE 0C8080018F08    	  6484:                 cmpi.l #$80018F08,d0
00:000039D4 66FE            	  6485:                 bne.s *
00:000039D6 4A85            	  6486:                 cmpi.l #$00000000,d5
00:000039D8 66FE            	  6487:                 bne.s *
                            	  6488: 
                            	  6489: *        BYTE RIGHT
00:000039DA 203C80018F81    	  6490:                 move.l #$80018F81,d0
00:000039E0 7C02            	  6491:                 moveq  #$00000002,d6
                            	  6492: SHIFTS2_LOOP2:
00:000039E2 EC28            	  6493:                 lsr.b d6,d0
00:000039E4 61CA            	  6494:                 bsr SHIFTS2_FLAGS
00:000039E6 51CEFFFA        	  6495:                 dbf d6,SHIFTS2_LOOP2
00:000039EA 0C8080018F10    	  6496:                 cmpi.l #$80018F10,d0
00:000039F0 66FE            	  6497:                 bne.s *
00:000039F2 4A85            	  6498:                 cmpi.l #$00000000,d5
00:000039F4 66FE            	  6499:                 bne.s *
                            	  6500: 
                            	  6501: 
                            	  6502: *        WORD LEFT
00:000039F6 203C80018FF1    	  6503:                 move.l #$80018FF1,d0
00:000039FC 7C02            	  6504:                 moveq  #$00000002,d6
                            	  6505: SHIFTS2_LOOP3:
00:000039FE ED68            	  6506:                 lsl.w d6,d0
00:00003A00 61AE            	  6507:                 bsr SHIFTS2_FLAGS
00:00003A02 51CEFFFA        	  6508:                 dbf d6,SHIFTS2_LOOP3
00:00003A06 0C8080017F88    	  6509:                 cmpi.l #$80017F88,d0
00:00003A0C 66FE            	  6510:                 bne.s *
00:00003A0E 4A85            	  6511:                 cmpi.l #$00000000,d5
00:00003A10 66FE            	  6512:                 bne.s *
                            	  6513: 
                            	  6514: *        WORD RIGHT
00:00003A12 203C80018FF1    	  6515:                 move.l #$80018FF1,d0
00:00003A18 7C02            	  6516:                 moveq  #$00000002,d6
                            	  6517: SHIFTS2_LOOP4:
00:00003A1A EC68            	  6518:                 lsr.w d6,d0
00:00003A1C 6192            	  6519:                 bsr SHIFTS2_FLAGS
00:00003A1E 51CEFFFA        	  6520:                 dbf d6,SHIFTS2_LOOP4
00:00003A22 0C80800111FE    	  6521:                 cmpi.l #$800111FE,d0
00:00003A28 66FE            	  6522:                 bne.s *
00:00003A2A 4A85            	  6523:                 cmpi.l #$00000000,d5
00:00003A2C 66FE            	  6524:                 bne.s *
                            	  6525: 
                            	  6526: 
                            	  6527: *        LONG LEFT
00:00003A2E 203C80018FF1    	  6528:                 move.l #$80018FF1,d0
00:00003A34 7C02            	  6529:                 moveq  #$00000002,d6
                            	  6530: SHIFTS2_LOOP5:
00:00003A36 EDA8            	  6531:                 lsl.l d6,d0
00:00003A38 6100FF76        	  6532:                 bsr SHIFTS2_FLAGS
00:00003A3C 51CEFFF8        	  6533:                 dbf d6,SHIFTS2_LOOP5
00:00003A40 0C80000C7F88    	  6534:                 cmpi.l #$000C7F88,d0
00:00003A46 66FE            	  6535:                 bne.s *
00:00003A48 4A85            	  6536:                 cmpi.l #$00000000,d5
00:00003A4A 66FE            	  6537:                 bne.s *
                            	  6538: 
                            	  6539: *        LONG RIGHT
00:00003A4C 203C80018FF1    	  6540:                 move.l #$80018FF1,d0
00:00003A52 7C02            	  6541:                 moveq  #$00000002,d6
                            	  6542: SHIFTS2_LOOP6:
00:00003A54 ECA8            	  6543:                 lsr.l d6,d0
00:00003A56 6100FF58        	  6544:                 bsr SHIFTS2_FLAGS
00:00003A5A 51CEFFF8        	  6545:                 dbf d6,SHIFTS2_LOOP6
00:00003A5E 0C80100031FE    	  6546:                 cmpi.l #$100031FE,d0
00:00003A64 66FE            	  6547:                 bne.s *
00:00003A66 4A85            	  6548:                 cmpi.l #$00000000,d5
00:00003A68 66FE            	  6549:                 bne.s *
                            	  6550: 
                            	  6551: 
                            	  6552: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6553: 
00:00003A6A 203C80018FF1    	  6554:                 move.l #$80018FF1,d0
00:00003A70 7A00            	  6555:                 moveq  #$00000000,d5
                            	  6556: 
                            	  6557: *        BYTE LEFT
00:00003A72 E308            	  6558:                 lsl.b #1,d0
00:00003A74 6100FF3A        	  6559:                 bsr SHIFTS2_FLAGS
00:00003A78 E508            	  6560:                 lsl.b #2,d0
00:00003A7A 6100FF34        	  6561:                 bsr SHIFTS2_FLAGS
00:00003A7E E308            	  6562:                 lsl.b #1,d0
00:00003A80 6100FF2E        	  6563:                 bsr SHIFTS2_FLAGS
00:00003A84 E708            	  6564:                 lsl.b #3,d0
00:00003A86 6100FF28        	  6565:                 bsr SHIFTS2_FLAGS
00:00003A8A 0C8080018F80    	  6566:                 cmpi.l #$80018F80,d0
00:00003A90 66FE            	  6567:                 bne.s *
00:00003A92 0C850000001B    	  6568:                 cmpi.l #$0000001B,d5
00:00003A98 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        BYTE RIGHT
00:00003A9A E208            	  6572:                 lsr.b #1,d0
00:00003A9C 6100FF12        	  6573:                 bsr SHIFTS2_FLAGS
00:00003AA0 E408            	  6574:                 lsr.b #2,d0
00:00003AA2 6100FF0C        	  6575:                 bsr SHIFTS2_FLAGS
00:00003AA6 E608            	  6576:                 lsr.b #3,d0
00:00003AA8 6100FF06        	  6577:                 bsr SHIFTS2_FLAGS
00:00003AAC E208            	  6578:                 lsr.b #1,d0
00:00003AAE 6100FF00        	  6579:                 bsr SHIFTS2_FLAGS
00:00003AB2 0C8080018F01    	  6580:                 cmpi.l #$80018F01,d0
00:00003AB8 66FE            	  6581:                 bne.s *
00:00003ABA 0C850000001B    	  6582:                 cmpi.l #$0000001B,d5
00:00003AC0 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        WORD LEFT
00:00003AC2 E348            	  6586:                 lsl.w #1,d0
00:00003AC4 6100FEEA        	  6587:                 bsr SHIFTS2_FLAGS
00:00003AC8 E548            	  6588:                 lsl.w #2,d0
00:00003ACA 6100FEE4        	  6589:                 bsr SHIFTS2_FLAGS
00:00003ACE E748            	  6590:                 lsl.w #3,d0
00:00003AD0 6100FEDE        	  6591:                 bsr SHIFTS2_FLAGS
00:00003AD4 EB48            	  6592:                 lsl.w #5,d0
00:00003AD6 6100FED8        	  6593:                 bsr SHIFTS2_FLAGS
00:00003ADA 0C8080010800    	  6594:                 cmpi.l #$80010800,d0
00:00003AE0 66FE            	  6595:                 bne.s *
00:00003AE2 0C8500000025    	  6596:                 cmpi.l #$00000025,d5
00:00003AE8 66FE            	  6597:                 bne.s *
                            	  6598: 
                            	  6599: *        WORD RIGHT
00:00003AEA EA48            	  6600:                 lsr.w #5,d0
00:00003AEC 6100FEC2        	  6601:                 bsr SHIFTS2_FLAGS
00:00003AF0 E248            	  6602:                 lsr.w #1,d0
00:00003AF2 6100FEBC        	  6603:                 bsr SHIFTS2_FLAGS
00:00003AF6 E448            	  6604:                 lsr.w #2,d0
00:00003AF8 6100FEB6        	  6605:                 bsr SHIFTS2_FLAGS
00:00003AFC E848            	  6606:                 lsr.w #4,d0
00:00003AFE 6100FEB0        	  6607:                 bsr SHIFTS2_FLAGS
00:00003B02 0C8080010000    	  6608:                 cmpi.l #$80010000,d0
00:00003B08 66FE            	  6609:                 bne.s *
00:00003B0A 0C850000002A    	  6610:                 cmpi.l #$0000002A,d5
00:00003B10 66FE            	  6611:                 bne.s *
                            	  6612: 
                            	  6613: *        LONG LEFT
00:00003B12 203C80018FF1    	  6614:                 move.l #$80018FF1,d0
00:00003B18 E388            	  6615:                 lsl.l #1,d0
00:00003B1A 6100FE94        	  6616:                 bsr SHIFTS2_FLAGS
00:00003B1E E588            	  6617:                 lsl.l #2,d0
00:00003B20 6100FE8E        	  6618:                 bsr SHIFTS2_FLAGS
00:00003B24 EF88            	  6619:                 lsl.l #7,d0
00:00003B26 6100FE88        	  6620:                 bsr SHIFTS2_FLAGS
00:00003B2A E988            	  6621:                 lsl.l #4,d0
00:00003B2C 6100FE82        	  6622:                 bsr SHIFTS2_FLAGS
00:00003B30 0C8063FC4000    	  6623:                 cmpi.l #$63FC4000,d0
00:00003B36 66FE            	  6624:                 bne.s *
00:00003B38 0C850000002B    	  6625:                 cmpi.l #$0000002B,d5
00:00003B3E 66FE            	  6626:                 bne.s *
                            	  6627: 
                            	  6628: *        LONG RIGHT
00:00003B40 203C80018FF1    	  6629:                 move.l #$80018FF1,d0
00:00003B46 E288            	  6630:                 lsr.l #1,d0
00:00003B48 6100FE66        	  6631:                 bsr SHIFTS2_FLAGS
00:00003B4C EA88            	  6632:                 lsr.l #5,d0
00:00003B4E 6100FE60        	  6633:                 bsr SHIFTS2_FLAGS
00:00003B52 EE88            	  6634:                 lsr.l #7,d0
00:00003B54 6100FE5A        	  6635:                 bsr SHIFTS2_FLAGS
00:00003B58 E088            	  6636:                 lsr.l #8,d0
00:00003B5A 6100FE54        	  6637:                 bsr SHIFTS2_FLAGS
00:00003B5E 0C8000000400    	  6638:                 cmpi.l #$00000400,d0
00:00003B64 66FE            	  6639:                 bne.s *
00:00003B66 0C850000002D    	  6640:                 cmpi.l #$0000002D,d5
00:00003B6C 66FE            	  6641:                 bne.s *
                            	  6642: 
                            	  6643: 
                            	  6644: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6645: 
00:00003B6E 7A00            	  6646:                 moveq  #$00000000,d5
00:00003B70 307C0100        	  6647:                 move.l #$00000100,a0
00:00003B74 30BC8FF1        	  6648:                 move.w #$8FF1,(a0)
                            	  6649: 
                            	  6650: *        WORD LEFT
00:00003B78 E3D0            	  6651:                 lsl  (a0)
00:00003B7A 6100FE34        	  6652:                 bsr SHIFTS2_FLAGS
00:00003B7E E3D0            	  6653:                 lsl  (a0)
00:00003B80 6100FE2E        	  6654:                 bsr SHIFTS2_FLAGS
00:00003B84 E3D0            	  6655:                 lsl  (a0)
00:00003B86 6100FE28        	  6656:                 bsr SHIFTS2_FLAGS
00:00003B8A E3D0            	  6657:                 lsl  (a0)
00:00003B8C 6100FE22        	  6658:                 bsr SHIFTS2_FLAGS
00:00003B90 3010            	  6659:                 move.w (a0),d0
00:00003B92 0C800000FF10    	  6660:                 cmpi.l #$0000FF10,d0
00:00003B98 66FE            	  6661:                 bne.s *
00:00003B9A 0C8500000009    	  6662:                 cmpi.l #$00000009,d5
00:00003BA0 66FE            	  6663:                 bne.s *
                            	  6664: 
                            	  6665: *        WORD RIGHT
00:00003BA2 E2D0            	  6666:                 lsr (a0)
00:00003BA4 6100FE0A        	  6667:                 bsr SHIFTS2_FLAGS
00:00003BA8 E2D0            	  6668:                 lsr (a0)
00:00003BAA 6100FE04        	  6669:                 bsr SHIFTS2_FLAGS
00:00003BAE E2D0            	  6670:                 lsr (a0)
00:00003BB0 6100FDFE        	  6671:                 bsr SHIFTS2_FLAGS
00:00003BB4 E2D0            	  6672:                 lsr (a0)
00:00003BB6 6100FDF8        	  6673:                 bsr SHIFTS2_FLAGS
00:00003BBA E2D0            	  6674:                 lsr (a0)
00:00003BBC 6100FDF2        	  6675:                 bsr SHIFTS2_FLAGS
00:00003BC0 E2D0            	  6676:                 lsr (a0)
00:00003BC2 6100FDEC        	  6677:                 bsr SHIFTS2_FLAGS
00:00003BC6 3010            	  6678:                 move.w (a0),d0
00:00003BC8 0C80000003FC    	  6679:                 cmpi.l #$000003FC,d0
00:00003BCE 66FE            	  6680:                 bne.s *
00:00003BD0 0C850000000A    	  6681:                 cmpi.l #$0000000A,d5
00:00003BD6 66FE            	  6682:                 bne.s *
                            	  6683: 
00:00003BD8 4E75            	  6684:                 rts
                            	  6685: 
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ; OPCODE : BSR / RTS
                            	  6689: ;-----------------------------------------------------------
                            	  6690: ;-----------------------------------------------------------
                            	  6691: 
                            	  6692: ;t3_bsr:
                            	  6693: ;	moveq	#3,d3
                            	  6694: ;	rts
                            	  6695: 
                            	  6696: ;t1_bsr:
                            	  6697: ;	moveq	#1,d1
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;op_bsr:
                            	  6701: ;	bsr			t1_bsr
                            	  6702: ;	bsr			t2_bsr
                            	  6703: ;	bsr.w		t3_bsr
                            	  6704: ;	bsr.w		t4_bsr
                            	  6705: ;	cmpi.l	#1,d1
                            	  6706: ;	bne			*
                            	  6707: ;	cmpi.l	#2,d2
                            	  6708: ;	bne			*
                            	  6709: ;	cmpi.l	#3,d3
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#4,d4
                            	  6712: ;	bne			*
                            	  6713: ;	rts
                            	  6714: 
                            	  6715: ;t2_bsr:
                            	  6716: ;	moveq	#2,d2
                            	  6717: ;	rts
                            	  6718: 	
                            	  6719: ;t4_bsr:
                            	  6720: ;	moveq	#4,d4
                            	  6721: ;	rts
                            	  6722: 


Symbols by name:
ABCD_INNER1                     00:00002402
ABCD_INNER2                     00:00002470
ABCD_NO_C1                      00:0000241E
ABCD_NO_C2                      00:00002426
ABCD_NO_C3                      00:0000248C
ABCD_NO_C4                      00:00002494
ABCD_OUTER1                     00:00002400
ABCD_OUTER2                     00:0000246E
ADDA_OUTER1                     00:00002F76
ADDQ_LOOP1                      00:00002790
ADDQ_LOOP2                      00:000027CE
ADDQ_LOOP3                      00:00002804
ADDX_LOOP3                      00:0000309C
ADDX_LOOP4                      00:000030B8
ADDX_LOOP5                      00:000030D4
ADDX_OUTER1                     00:00003008
ADD_OUTER1                      00:00002D9C
ADD_OUTER2                      00:00002E10
ALL_DONE                        00:000000D6
AND_OUTER1                      00:00002ABA
AND_OUTER2                      00:00002B2E
BCC1                            00:000026B6
BCC10                           00:00002708
BCC11                           00:00002710
BCC12                           00:0000271A
BCC13                           00:00002722
BCC14                           00:0000272C
BCC2                            00:000026C0
BCC3                            00:000026C8
BCC4                            00:000026D2
BCC5                            00:000026DA
BCC6                            00:000026E4
BCC7                            00:000026EC
BCC8                            00:000026F6
BCC9                            00:000026FE
BSR_CLOSE1                      00:0000123A
BSR_CLOSE2                      00:00001270
BSR_FAR1                        00:000000D8
BSR_FAR2                        00:000026A6
CMPA_OUTER1                     00:00002C90
CMPM_LOOP1                      00:00002D1E
CMPM_LOOP2                      00:00002D38
CMPM_LOOP3                      00:00002D52
CMP_OUTER1                      00:00002C1A
DBCC_LOOP1                      00:00002736
DBCC_LOOP2                      00:00002744
DIVS_OUTER1                     00:0000297A
DIVU_OUTER1                     00:00002928
EOR_OUTER2                      00:00002BA4
EXCEPTION_6                     00:000000E0
EXCEPTION_7                     00:000000F0
LEA1                            00:00001C4A
MOVE1                           00:000018B8
MOVE2                           00:0000183C
MOVE3                           00:00001938
MOVE4                           00:00001A92
MULS_OUTER1                     00:00003270
MULU_OUTER1                     00:00003224
NBCD_LOOP                       00:000025F4
NBCD_LOOP1                      00:0000263A
NBCD_NO_C                       00:00002600
NBCD_NO_C1                      00:0000264E
NBCD_NO_Z                       00:00002604
NBCD_NO_Z1                      00:00002652
OR_OUTER1                       00:000029D0
OR_OUTER2                       00:00002A44
ROXx_FLAGS                      00:00003538
ROXx_LOOP1                      00:0000354E
ROXx_LOOP2                      00:0000356E
ROXx_LOOP3                      00:0000358E
ROXx_LOOP4                      00:000035AE
ROXx_LOOP5                      00:000035CE
ROXx_LOOP6                      00:000035F0
ROx_FLAGS                       00:00003302
ROx_LOOP1                       00:00003318
ROx_LOOP2                       00:00003338
ROx_LOOP3                       00:00003358
ROx_LOOP4                       00:00003378
ROx_LOOP5                       00:00003398
ROx_LOOP6                       00:000033BA
RTR_DONE                        00:00002698
SBCD_INNER1                     00:00002500
SBCD_INNER2                     00:0000256E
SBCD_NO_C1                      00:0000251C
SBCD_NO_C2                      00:00002524
SBCD_NO_C3                      00:0000258A
SBCD_NO_C4                      00:00002592
SBCD_OUTER1                     00:000024FE
SBCD_OUTER2                     00:0000256C
SHIFTS2_FLAGS                   00:000039B0
SHIFTS2_LOOP1                   00:000039C6
SHIFTS2_LOOP2                   00:000039E2
SHIFTS2_LOOP3                   00:000039FE
SHIFTS2_LOOP4                   00:00003A1A
SHIFTS2_LOOP5                   00:00003A36
SHIFTS2_LOOP6                   00:00003A54
SHIFTS_FLAGS                    00:0000376E
SHIFTS_LOOP1                    00:00003784
SHIFTS_LOOP2                    00:000037A4
SHIFTS_LOOP3                    00:000037C4
SHIFTS_LOOP4                    00:000037E4
SHIFTS_LOOP5                    00:00003804
SHIFTS_LOOP6                    00:00003826
SUBA_OUTER1                     00:00002FC2
SUBQ_LOOP1                      00:0000284E
SUBQ_LOOP2                      00:00002888
SUBQ_LOOP3                      00:000028BE
SUBX_LOOP3                      00:000031AC
SUBX_LOOP4                      00:000031C8
SUBX_LOOP5                      00:000031E4
SUBX_OUTER1                     00:00003118
SUB_OUTER1                      00:00002E86
SUB_OUTER2                      00:00002EFA
cpu_test                        00:00000000
op_ABCD                         00:000023E0
op_ADD                          00:00002D7C
op_ADDA                         00:00002F50
op_ADDQ                         00:0000277C
op_ADDX                         00:00002FE8
op_ADD_I                        00:00001464
op_AND                          00:00002A9A
op_ANDI_TO_CCR                  00:00000190
op_ANDI_TO_SR                   00:000001B6
op_BCC                          00:000026AE
op_BCHG                         00:0000058A
op_BCLR                         00:000008F2
op_BOOL_I                       00:0000107C
op_BSET                         00:00000C42
op_BSR                          00:00001242
op_BTST                         00:000001E0
op_BTST0                        00:0000036A
op_BTST1                        00:00000376
op_BTST10                       00:000003BE
op_BTST11                       00:000003C6
op_BTST12                       00:000003CC
op_BTST2                        00:0000037E
op_BTST20                       00:00000524
op_BTST21                       00:0000052E
op_BTST22                       00:00000534
op_BTST23                       00:0000053A
op_BTST24                       00:00000540
op_BTST25                       00:00000546
op_BTST26                       00:0000054C
op_BTST27                       00:00000552
op_BTST28                       00:00000558
op_BTST29                       00:0000055E
op_BTST3                        00:00000386
op_BTST30                       00:00000564
op_BTST31                       00:0000056A
op_BTST32                       00:0000056E
op_BTST4                        00:0000038E
op_BTST5                        00:00000396
op_BTST6                        00:0000039E
op_BTST7                        00:000003A6
op_BTST8                        00:000003AE
op_BTST9                        00:000003B6
op_CHK                          00:00001CFA
op_CMP                          00:00002BFA
op_CMPA                         00:00002C70
op_CMPM                         00:00002CD6
op_CMP_I                        00:00001278
op_DBCC                         00:0000272E
op_DIVS                         00:0000295E
op_DIVU                         00:0000290C
op_EOR                          00:00002B84
op_EORI_TO_CCR                  00:00000140
op_EORI_TO_SR                   00:00000166
op_EXG                          00:000032A0
op_EXT                          00:00001B70
op_LEAPEA                       00:00001BB2
op_LINKS                        00:00001CCC
op_MOVE                         00:00001770
op_MOVEM                        00:000020C2
op_MOVEP                        00:00000FE8
op_MOVEQ                        00:000028F0
op_MOVE_USP                     00:00001CEA
op_MOVE_xxx_FLAGS               00:0000197C
op_MULS                         00:00003254
op_MULU                         00:00003208
op_NBCD                         00:000025DC
op_NEGS                         00:00001D34
op_OR                           00:000029B0
op_ORI_TO_CCR                   00:000000F8
op_ORI_TO_SR                    00:0000011A
op_ROXx                         00:00003544
op_ROx                          00:0000330E
op_RTR                          00:0000268A
op_SBCD                         00:000024DE
op_SCC                          00:00002754
op_SHIFTS                       00:0000377A
op_SHIFTS2                      00:000039BC
op_SUB                          00:00002E66
op_SUBA                         00:00002F9C
op_SUBQ                         00:00002836
op_SUBX                         00:000030F8
op_SUB_I                        00:000015EA
op_SWAP                         00:00001B9C
op_TAS                          00:00001C5E
op_TRAPV                        00:0000266E
op_TST                          00:00001C86

Symbols by value:
00000000 cpu_test
000000D6 ALL_DONE
000000D8 BSR_FAR1
000000E0 EXCEPTION_6
000000F0 EXCEPTION_7
000000F8 op_ORI_TO_CCR
0000011A op_ORI_TO_SR
00000140 op_EORI_TO_CCR
00000166 op_EORI_TO_SR
00000190 op_ANDI_TO_CCR
000001B6 op_ANDI_TO_SR
000001E0 op_BTST
0000036A op_BTST0
00000376 op_BTST1
0000037E op_BTST2
00000386 op_BTST3
0000038E op_BTST4
00000396 op_BTST5
0000039E op_BTST6
000003A6 op_BTST7
000003AE op_BTST8
000003B6 op_BTST9
000003BE op_BTST10
000003C6 op_BTST11
000003CC op_BTST12
00000524 op_BTST20
0000052E op_BTST21
00000534 op_BTST22
0000053A op_BTST23
00000540 op_BTST24
00000546 op_BTST25
0000054C op_BTST26
00000552 op_BTST27
00000558 op_BTST28
0000055E op_BTST29
00000564 op_BTST30
0000056A op_BTST31
0000056E op_BTST32
0000058A op_BCHG
000008F2 op_BCLR
00000C42 op_BSET
00000FE8 op_MOVEP
0000107C op_BOOL_I
0000123A BSR_CLOSE1
00001242 op_BSR
00001270 BSR_CLOSE2
00001278 op_CMP_I
00001464 op_ADD_I
000015EA op_SUB_I
00001770 op_MOVE
0000183C MOVE2
000018B8 MOVE1
00001938 MOVE3
0000197C op_MOVE_xxx_FLAGS
00001A92 MOVE4
00001B70 op_EXT
00001B9C op_SWAP
00001BB2 op_LEAPEA
00001C4A LEA1
00001C5E op_TAS
00001C86 op_TST
00001CCC op_LINKS
00001CEA op_MOVE_USP
00001CFA op_CHK
00001D34 op_NEGS
000020C2 op_MOVEM
000023E0 op_ABCD
00002400 ABCD_OUTER1
00002402 ABCD_INNER1
0000241E ABCD_NO_C1
00002426 ABCD_NO_C2
0000246E ABCD_OUTER2
00002470 ABCD_INNER2
0000248C ABCD_NO_C3
00002494 ABCD_NO_C4
000024DE op_SBCD
000024FE SBCD_OUTER1
00002500 SBCD_INNER1
0000251C SBCD_NO_C1
00002524 SBCD_NO_C2
0000256C SBCD_OUTER2
0000256E SBCD_INNER2
0000258A SBCD_NO_C3
00002592 SBCD_NO_C4
000025DC op_NBCD
000025F4 NBCD_LOOP
00002600 NBCD_NO_C
00002604 NBCD_NO_Z
0000263A NBCD_LOOP1
0000264E NBCD_NO_C1
00002652 NBCD_NO_Z1
0000266E op_TRAPV
0000268A op_RTR
00002698 RTR_DONE
000026A6 BSR_FAR2
000026AE op_BCC
000026B6 BCC1
000026C0 BCC2
000026C8 BCC3
000026D2 BCC4
000026DA BCC5
000026E4 BCC6
000026EC BCC7
000026F6 BCC8
000026FE BCC9
00002708 BCC10
00002710 BCC11
0000271A BCC12
00002722 BCC13
0000272C BCC14
0000272E op_DBCC
00002736 DBCC_LOOP1
00002744 DBCC_LOOP2
00002754 op_SCC
0000277C op_ADDQ
00002790 ADDQ_LOOP1
000027CE ADDQ_LOOP2
00002804 ADDQ_LOOP3
00002836 op_SUBQ
0000284E SUBQ_LOOP1
00002888 SUBQ_LOOP2
000028BE SUBQ_LOOP3
000028F0 op_MOVEQ
0000290C op_DIVU
00002928 DIVU_OUTER1
0000295E op_DIVS
0000297A DIVS_OUTER1
000029B0 op_OR
000029D0 OR_OUTER1
00002A44 OR_OUTER2
00002A9A op_AND
00002ABA AND_OUTER1
00002B2E AND_OUTER2
00002B84 op_EOR
00002BA4 EOR_OUTER2
00002BFA op_CMP
00002C1A CMP_OUTER1
00002C70 op_CMPA
00002C90 CMPA_OUTER1
00002CD6 op_CMPM
00002D1E CMPM_LOOP1
00002D38 CMPM_LOOP2
00002D52 CMPM_LOOP3
00002D7C op_ADD
00002D9C ADD_OUTER1
00002E10 ADD_OUTER2
00002E66 op_SUB
00002E86 SUB_OUTER1
00002EFA SUB_OUTER2
00002F50 op_ADDA
00002F76 ADDA_OUTER1
00002F9C op_SUBA
00002FC2 SUBA_OUTER1
00002FE8 op_ADDX
00003008 ADDX_OUTER1
0000309C ADDX_LOOP3
000030B8 ADDX_LOOP4
000030D4 ADDX_LOOP5
000030F8 op_SUBX
00003118 SUBX_OUTER1
000031AC SUBX_LOOP3
000031C8 SUBX_LOOP4
000031E4 SUBX_LOOP5
00003208 op_MULU
00003224 MULU_OUTER1
00003254 op_MULS
00003270 MULS_OUTER1
000032A0 op_EXG
00003302 ROx_FLAGS
0000330E op_ROx
00003318 ROx_LOOP1
00003338 ROx_LOOP2
00003358 ROx_LOOP3
00003378 ROx_LOOP4
00003398 ROx_LOOP5
000033BA ROx_LOOP6
00003538 ROXx_FLAGS
00003544 op_ROXx
0000354E ROXx_LOOP1
0000356E ROXx_LOOP2
0000358E ROXx_LOOP3
000035AE ROXx_LOOP4
000035CE ROXx_LOOP5
000035F0 ROXx_LOOP6
0000376E SHIFTS_FLAGS
0000377A op_SHIFTS
00003784 SHIFTS_LOOP1
000037A4 SHIFTS_LOOP2
000037C4 SHIFTS_LOOP3
000037E4 SHIFTS_LOOP4
00003804 SHIFTS_LOOP5
00003826 SHIFTS_LOOP6
000039B0 SHIFTS2_FLAGS
000039BC op_SHIFTS2
000039C6 SHIFTS2_LOOP1
000039E2 SHIFTS2_LOOP2
000039FE SHIFTS2_LOOP3
00003A1A SHIFTS2_LOOP4
00003A36 SHIFTS2_LOOP5
00003A54 SHIFTS2_LOOP6
