Sections:
00: "DATA" (0-118)
01: "CODE" (0-5479)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+      <+
                            	     7: ;          | startup sp,pc  | 8 B   |
                            	     8: ; 00000008 +----------------+       |
                            	     9: ;					 |    vectors     | pair shared+
                            	    10: ; 00000400 +----------------+       |
                            	    11: ;					 |   bios mem     |       |
                            	    12: ; 00001000 +----------------+       |
                            	    13: ;					 |   bios code    |       |
                            	    14: ; 00008000 +----------------+      <+
                            	    15: ;					 |    unused      |
                            	    16: ; 00040000 +----------------+
                            	    17: ;					 |   local ram    |
                            	    18: ; 00041000 +----------------+
                            	    19: ;					 |    unused      |
                            	    20: ; 00100000 +----------------+
                            	    21: ;					 |   global ram   |
                            	    22: ; 00101000 +----------------+
                            	    23: ;					 | serial rcvbuf  |
                            	    24: ; 00102000 +----------------+
                            	    25: ;					 |    unused      |
                            	    26: ; 20000000 +----------------+
                            	    27: ;          |                |
                            	    28: ;          |                |
                            	    29: ;          |                |
                            	    30: ;          :  dram memory   : 512 MB
                            	    31: ;          |                |
                            	    32: ;          |                |
                            	    33: ;          |                |
                            	    34: ; 40000000 +----------------+
                            	    35: ;          |                |
                            	    36: ;          :     unused     :
                            	    37: ;          |                |
                            	    38: ; FFD00000 +----------------+
                            	    39: ;          |                |
                            	    40: ;          :    I/O area    : 1.0 M
                            	    41: ;          |                |
                            	    42: ; FFE00000 +----------------+
                            	    43: ;          |                |
                            	    44: ;          :     unused     :
                            	    45: ;          |                |
                            	    46: ; FFFFFFFF +----------------+
                            	    47: ;
                            	    48: ;-------------------------------------------------------------------------------
                            	    49: ;
                            	    50: CTRLC	EQU		$03
                            	    51: CTRLH	EQU		$08
                            	    52: CTRLX	EQU		$18
                            	    53: LF		EQU		$0A
                            	    54: CR		EQU		$0D
                            	    55: XON		EQU		$11
                            	    56: XOFF	EQU		$13
                            	    57: 
                            	    58: SC_F12  EQU    $07
                            	    59: SC_C    EQU    $21
                            	    60: SC_T    EQU    $2C
                            	    61: SC_Z    EQU    $1A
                            	    62: SC_KEYUP	EQU		$F0
                            	    63: SC_EXTEND   EQU		$E0
                            	    64: SC_CTRL		EQU		$14
                            	    65: SC_RSHIFT	EQU		$59
                            	    66: SC_NUMLOCK	EQU		$77
                            	    67: SC_SCROLLLOCK	EQU	$7E
                            	    68: SC_CAPSLOCK		EQU	$58
                            	    69: SC_ALT		EQU		$11
                            	    70: SC_LSHIFT	EQU		$12
                            	    71: SC_DEL		EQU		$71		; extend
                            	    72: SC_LCTRL	EQU		$58
                            	    73: SC_TAB      EQU		$0D
                            	    74: 
                            	    75: TEXTREG		EQU	$FD03FF00
                            	    76: txtscreen	EQU	$FD000000
                            	    77: semamem		EQU	$FD050000
                            	    78: ACIA			EQU	$FD060000
                            	    79: ACIA_RX		EQU	0
                            	    80: ACIA_TX		EQU	0
                            	    81: ACIA_STAT	EQU	4
                            	    82: ACIA_CMD	EQU	8
                            	    83: ACIA_CTRL	EQU	12
                            	    84: PLIC			EQU	$FD090000
                            	    85: leds			EQU	$FD0FFF00
                            	    86: keybd			EQU	$FD0FFE00
                            	    87: KEYBD			EQU	$FD0FFE00
                            	    88: rand			EQU	$FD0FFD00
                            	    89: IOFocus		EQU	$00100000
                            	    90: 
                            	    91: 	data
00:00000000 00040FFC        	    92: 	dc.l		$00040FFC
00:00000004 00000000        	    93: 	dc.l		start
00:00000008 000050B2        	    94: 	dc.l		bus_err
00:0000000C 00000000        	    95: 	dc.l		0
00:00000010 00005406        	    96: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    97: 	dc.l		0
00:00000018 0000026A        	    98: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000272        	    99: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	   100: 	dc.l		0
00:00000024 00000000        	   101: 	dc.l		0
                            	   102: 	
                            	   103: 	; 10
00:00000028 00000000        	   104: 	dc.l		0
00:0000002C 00000000        	   105: 	dc.l		0
00:00000030 00000000        	   106: 	dc.l		0
00:00000034 00000000        	   107: 	dc.l		0
00:00000038 00000000        	   108: 	dc.l		0
00:0000003C 00000000        	   109: 	dc.l		0
00:00000040 00000000        	   110: 	dc.l		0
00:00000044 00000000        	   111: 	dc.l		0
00:00000048 00000000        	   112: 	dc.l		0
00:0000004C 00000000        	   113: 	dc.l		0
                            	   114: 	
                            	   115: 	; 20
00:00000050 00000000        	   116: 	dc.l		0
00:00000054 00000000        	   117: 	dc.l		0
00:00000058 00000000        	   118: 	dc.l		0
00:0000005C 00000000        	   119: 	dc.l		0
00:00000060 00000000        	   120: 	dc.l		0
00:00000064 00000000        	   121: 	dc.l		0
00:00000068 00000000        	   122: 	dc.l		0
00:0000006C 00000000        	   123: 	dc.l		0
00:00000070 00000000        	   124: 	dc.l		0
00:00000074 00000000        	   125: 	dc.l		0
                            	   126: 	
                            	   127: 	; 30
00:00000078 0000532A        	   128: 	dc.l		irq_rout					* IRQ 30 - timer
00:0000007C 000053BC        	   129: 	dc.l		nmi_rout
00:00000080 00000000        	   130: 	dc.l		0
00:00000084 00000000        	   131: 	dc.l		0
00:00000088 00000000        	   132: 	dc.l		0
00:0000008C 00005180        	   133: 	dc.l		trap3							; breakpoint
00:00000090 00000000        	   134: 	dc.l		0
00:00000094 00000000        	   135: 	dc.l		0
00:00000098 00000000        	   136: 	dc.l		0
00:0000009C 00000000        	   137: 	dc.l		0
                            	   138: 
                            	   139: 	; 40
00:000000A0 00000000        	   140: 	dc.l		0
00:000000A4 00000000        	   141: 	dc.l		0
00:000000A8 00000000        	   142: 	dc.l		0
00:000000AC 00000000        	   143: 	dc.l		0
00:000000B0 00000000        	   144: 	dc.l		0
00:000000B4 00000000        	   145: 	dc.l		0
00:000000B8 00000000        	   146: 	dc.l		0
00:000000BC 0000406A        	   147: 	dc.l		TRAP15
00:000000C0 00000000        	   148: 	dc.l		0
00:000000C4 00000000        	   149: 	dc.l		0
                            	   150: 
                            	   151: 	; 50	
00:000000C8 00000000        	   152: 	dc.l		0
00:000000CC 00000000        	   153: 	dc.l		0
00:000000D0 00000000        	   154: 	dc.l		0
00:000000D4 00000000        	   155: 	dc.l		0
00:000000D8 00000000        	   156: 	dc.l		0
00:000000DC 00000000        	   157: 	dc.l		0
00:000000E0 00000000        	   158: 	dc.l		0
00:000000E4 00000000        	   159: 	dc.l		0
00:000000E8 00000000        	   160: 	dc.l		0
00:000000EC 00000000        	   161: 	dc.l		0
                            	   162: 
                            	   163: 	; 60
00:000000F0 00000000        	   164: 	dc.l		0
00:000000F4 00000000        	   165: 	dc.l		0
00:000000F8 00000000        	   166: 	dc.l		0
00:000000FC 000053CE        	   167: 	dc.l		brdisp_trap
00:00000100 00000000        	   168: 	dc.l		0
00:00000104 00000000        	   169: 	dc.l		0
00:00000108 00000000        	   170: 	dc.l		0
00:0000010C 00000000        	   171: 	dc.l		0
00:00000110 00000000        	   172: 	dc.l		0
00:00000114 00000000        	   173: 	dc.l		0
                            	   174: 
                            	   175: 
                            	   176: ;-------------------------------------------------------------------------------
                            	   177: ;-------------------------------------------------------------------------------
                            	   178: 
                            	   179: ; BIOS variables which must be local (not shared) to each core
                            	   180: 
                            	   181: CursorRow	equ		$40000
                            	   182: CursorCol	equ		$40001
                            	   183: TextPos		equ		$40002
                            	   184: TextCurpos	equ	$40002
                            	   185: TextScr			equ	$40004
                            	   186: S19StartAddress	equ	$40008
                            	   187: KeybdEcho		equ	$4000C
                            	   188: KeybdWaitFlag	equ	$4000D
                            	   189: CmdBuf			equ $40040
                            	   190: CmdBufEnd		equ	$40080
                            	   191: fgColor			equ	$40084
                            	   192: bkColor			equ	$40088
                            	   193: TextRows		equ	$4008C
                            	   194: TextCols		equ	$4008D
                            	   195: Regsave			equ	$40100
                            	   196: numBreakpoints	equ		8
                            	   197: BreakpointFlag	equ		$40200
                            	   198: NumSetBreakpoints	equ	$40202	; to $40203
                            	   199: Breakpoints			equ		$40220	; to $40240
                            	   200: BreakpointWords	equ		$40280	; to $402A0
                            	   201: 
                            	   202: ; Keyboard buffer is in shared memory
                            	   203: KeybdLEDs		equ	$0010000E
                            	   204: _KeyState1	equ	$0010000F
                            	   205: _KeyState2	equ	$00100010
                            	   206: _KeybdHead	equ	$00100011
                            	   207: _KeybdTail	equ	$00100012
                            	   208: _KeybdCnt		equ	$00100013
                            	   209: _KeybdBuf		equ	$00100020
                            	   210: SerTailRcv	equ	$00100030
                            	   211: SerHeadRcv	equ	$00100032
                            	   212: SerRcvXon		equ	$00100034
                            	   213: SerRcvXoff	equ	$00100035
                            	   214: SerRcvBuf		equ	$00101000
                            	   215: 
                            	   216: 	code
                            	   217: 	align		2
                            	   218: start:
01:00000000 46FC2700        	   219: 	move.w	#$2700,sr				; enable level 6 and higher interrupts
                            	   220: 	; Prepare local variable storage
01:00000004 303C03FF        	   221: 	move.w	#1023,d0					; 1024 longs to clear
01:00000008 41F900040000    	   222: 	lea			$40000,a0					; non shared local memory address
                            	   223: .0111:
01:0000000E 4298            	   224: 	clr.l		(a0)+							; clear the memory area
01:00000010 51C8FFFC        	   225: 	dbra		d0,.0111
01:00000014 23FC001FFFFF0004	   226: 	move.l	#$1fffff,fgColor	; set foreground / background color
01:0000001C 0084
01:0000001E 23FC0000003F0004	   227: 	move.l	#$00003f,bkColor
01:00000026 0088
01:00000028 4E7A0FE0        	   228: 	movec.l	coreno,d0					; get core number (2 to 9)
01:0000002C 5500            	   229: 	subi.b	#2,d0							; adjust (0 to 7)
01:0000002E C0FC4000        	   230: 	mulu		#16384,d0					; compute screen location
01:00000032 0680FD000000    	   231: 	addi.l	#$FD000000,d0
01:00000038 23C000040004    	   232: 	move.l	d0,TextScr
01:0000003E 13FC00400004008D	   233: 	move.b	#64,TextCols			; set rows and columns
01:00000046 13FC00200004008C	   234: 	move.b	#32,TextRows
01:0000004E 4E7A0FE0        	   235: 	movec.l	coreno,d0					; get core number
01:00000052 0C000002        	   236: 	cmpi.b	#2,d0
01:00000056 664E            	   237: 	bne			start_other
01:00000058 13C000100000    	   238: 	move.b	d0,IOFocus				; Set the IO focus in global memory
                            	   239: ;	bsr			InitSemaphores
01:0000005E 610000FA        	   240: 	bsr			Delay3s						; give devices time to reset
01:00000062 61003C88        	   241: 	bsr			clear_screen
                            	   242: 
01:00000066 61004F8A        	   243: 	bsr			SerialInit
                            	   244: 
                            	   245: 	; Write startup message to screen
                            	   246: 
01:0000006A 43FA53B0        	   247: 	lea			msg_start,a1
01:0000006E 61003F7C        	   248: 	bsr			DisplayString
01:00000072 7201            	   249: 	moveq.l	#1,d1
01:00000074 610000C4        	   250: 	bsr			UnlockSemaphore	; allow another cpu access
01:00000078 7200            	   251: 	moveq.l	#0,d1
01:0000007A 610000BE        	   252: 	bsr			UnlockSemaphore	; allow other cpus to proceed
01:0000007E 33FCA4A4FD0FFF00	   253: 	move.w	#$A4A4,leds			; diagnostics
01:00000086 6100410E        	   254: 	bsr			init_plic				; initialize platform level interrupt controller
01:0000008A 600047A0        	   255: 	bra			StartMon
01:0000008E 610000EE        	   256: 	bsr			cpu_test
                            	   257: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   258: ;	move.l	a0,64*4
                            	   259: 
                            	   260: loop2:
01:00000092 70FF            	   261: 	move.l	#-1,d0
                            	   262: loop1:
01:00000094 2200            	   263: 	move.l	d0,d1
01:00000096 E089            	   264: 	lsr.l		#8,d1
01:00000098 E089            	   265: 	lsr.l		#8,d1
01:0000009A 13C1FD0FFF00    	   266: 	move.b	d1,leds
01:000000A0 51C8FFF2        	   267: 	dbra		d0,loop1
01:000000A4 60EC            	   268: 	bra			loop2
                            	   269: 
                            	   270: start_other:
01:000000A6 61003C44        	   271: 	bsr			clear_screen
01:000000AA 4E7A1FE0        	   272: 	movec.l	coreno,d1
01:000000AE 61004D98        	   273: 	bsr			DisplayByte
01:000000B2 43FA5380        	   274: 	lea			msg_core_start,a1
01:000000B6 61003F34        	   275: 	bsr			DisplayString
                            	   276: do_nothing:	
01:000000BA 60004770        	   277: 	bra			StartMon
01:000000BE 60FA            	   278: 	bra			do_nothing
                            	   279: 
                            	   280: ;------------------------------------------------------------------------------
                            	   281: ; Initialize semaphores
                            	   282: ; - all semaphores are set to one except the first one, which is set to zero.
                            	   283: ;
                            	   284: ; Parameters:
                            	   285: ;		<none>
                            	   286: ; Modifies:
                            	   287: ;		<none>
                            	   288: ; Returns:
                            	   289: ;		<none>
                            	   290: ;------------------------------------------------------------------------------
                            	   291: 
                            	   292: InitSemaphores:
01:000000C0 48E7C080        	   293: 	movem.l	d0/d1/a0,-(a7)
01:000000C4 41F9FD050000    	   294: 	lea			semamem,a0
01:000000CA 42284000        	   295: 	move.b	#0,$4000(a0)		; lock the first semaphore
01:000000CE 323C00FE        	   296: 	move.w	#254,d1
01:000000D2 7001            	   297: 	moveq		#1,d0
                            	   298: .0001:
01:000000D4 41E80010        	   299: 	lea			16(a0),a0
01:000000D8 11404000        	   300: 	move.b	d0,$4000(a0)
01:000000DC 51C9FFF6        	   301: 	dbra		d1,.0001
01:000000E0 4CDF0103        	   302: 	movem.l	(a7)+,d0/d1/a0
01:000000E4 4E75            	   303: 	rts
                            	   304: 
                            	   305: ; -----------------------------------------------------------------------------
                            	   306: ; Test a semaphore to see if it is non-zero.
                            	   307: ;
                            	   308: ; Parameters:
                            	   309: ;		d1 semaphore number
                            	   310: ; -----------------------------------------------------------------------------
                            	   311: 
                            	   312: TestSemaphore:
01:000000E6 48E74080        	   313: 	movem.l	d1/a0,-(a7)			; save registers
01:000000EA 41F9FD050000    	   314: 	lea			semamem,a0			; point to semaphore memory
01:000000F0 4881            	   315: 	ext.w		d1							; make d1 word value
01:000000F2 E941            	   316: 	asl.w		#4,d1						; align to memory
01:000000F4 06414000        	   317: 	addi.w	#$4000,d1				; point to read / write memory
01:000000F8 4A301000        	   318: 	tst.b		(a0,d1.w)				; read (test) value for zero
01:000000FC 4CDF0102        	   319: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000100 4E75            	   320: 	rts
                            	   321: 
                            	   322: ; -----------------------------------------------------------------------------
                            	   323: ; Parameters:
                            	   324: ;		d1 semaphore number
                            	   325: ;
                            	   326: ; Side Effects:
                            	   327: ;		increments semaphore, saturates at 255
                            	   328: ;
                            	   329: ; Returns:	
                            	   330: ; 	z flag set if semaphore was zero
                            	   331: ; -----------------------------------------------------------------------------
                            	   332: 
                            	   333: IncrementSemaphore:
01:00000102 48E74080        	   334: 	movem.l	d1/a0,-(a7)			; save registers
01:00000106 41F9FD050000    	   335: 	lea			semamem,a0			; point to semaphore memory
01:0000010C 4881            	   336: 	ext.w		d1							; make d1 word value
01:0000010E E941            	   337: 	asl.w		#4,d1						; align to memory
01:00000110 4A301001        	   338: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:00000114 4CDF0102        	   339: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000118 4E75            	   340: 	rts
                            	   341: 	
                            	   342: ; -----------------------------------------------------------------------------
                            	   343: ; Parameters:
                            	   344: ;		d1 semaphore number
                            	   345: ;
                            	   346: ; Side Effects:
                            	   347: ;		decrements semaphore, saturates at zero
                            	   348: ;
                            	   349: ; Returns:	
                            	   350: ; 	z flag set if semaphore was zero
                            	   351: ; -----------------------------------------------------------------------------
                            	   352: 
                            	   353: DecrementSemaphore:
01:0000011A 48E74080        	   354: 	movem.l	d1/a0,-(a7)			; save registers
01:0000011E 41F9FD050000    	   355: 	lea			semamem,a0			; point to semaphore memory
01:00000124 024100FF        	   356: 	andi.w	#255,d1					; make d1 word value
01:00000128 E941            	   357: 	asl.w		#4,d1						; align to memory
01:0000012A 4A301001        	   358: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:0000012E 4CDF0102        	   359: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000132 4E75            	   360: 	rts
                            	   361: 
                            	   362: ; -----------------------------------------------------------------------------
                            	   363: ; Parameters:
                            	   364: ;		d1 semaphore number
                            	   365: ; -----------------------------------------------------------------------------
                            	   366: 
                            	   367: LockSemaphore:
                            	   368: .0001:
01:00000134 61E4            	   369: 	bsr			DecrementSemaphore
01:00000136 67FC            	   370: 	beq.s		.0001
01:00000138 4E75            	   371: 	rts
                            	   372: 	
                            	   373: ; -----------------------------------------------------------------------------
                            	   374: ; Test a semaphore to see if it is non-zero.
                            	   375: ;
                            	   376: ; Parameters:
                            	   377: ;		d1 semaphore number
                            	   378: ; -----------------------------------------------------------------------------
                            	   379: 
                            	   380: UnlockSemaphore:
01:0000013A 48E74080        	   381: 	movem.l	d1/a0,-(a7)			; save registers
01:0000013E 41F9FD050000    	   382: 	lea			semamem,a0			; point to semaphore memory
01:00000144 024100FF        	   383: 	andi.w	#255,d1					; make d1 word value
01:00000148 E941            	   384: 	asl.w		#4,d1						; align to memory
01:0000014A 06414000        	   385: 	addi.w	#$4000,d1				; point to read / write memory
01:0000014E 11BC00011000    	   386: 	move.b	#1,(a0,d1.w)		; write one to unlock
01:00000154 4CDF0102        	   387: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000158 4E75            	   388: 	rts
                            	   389: 
                            	   390: ; -----------------------------------------------------------------------------
                            	   391: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   392: ; -----------------------------------------------------------------------------
                            	   393: 
                            	   394: Delay3s:
01:0000015A 203C002DC6C0    	   395: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:00000160 41F9FD0FFF00    	   396: 	lea			leds,a0				; a0 = address of LED output register
01:00000166 6002            	   397: 	bra			dly3s1				; branch to the loop
                            	   398: dly3s2:	
01:00000168 4840            	   399: 	swap		d0						; loop is larger than 16-bits
                            	   400: dly3s1:
01:0000016A 2200            	   401: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:0000016C E199            	   402: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:0000016E E199            	   403: 	rol.l		#8,d1
01:00000170 1081            	   404: 	move.b	d1,(a0)				; set the LEDs
01:00000172 51C8FFF6        	   405: 	dbra		d0,dly3s1			; decrement and branch back
01:00000176 4840            	   406: 	swap		d0
01:00000178 51C8FFEE        	   407: 	dbra		d0,dly3s2
01:0000017C 4E75            	   408: 	rts
                            	   409: 
                            	   410: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: *    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: 
                            	    79: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    80: *	move.l	a0,6*4
                            	    81: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    82: *	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
01:0000017E 610000FA        	    85: 	bsr	op_ORI_TO_CCR
01:00000182 61000118        	    86: 	bsr	op_ORI_TO_SR
01:00000186 61000136        	    87: 	bsr	op_EORI_TO_CCR
01:0000018A 61000158        	    88: 	bsr	op_EORI_TO_SR
01:0000018E 6100017A        	    89: 	bsr	op_ANDI_TO_CCR
01:00000192 6100019C        	    90: 	bsr	op_ANDI_TO_SR
01:00000196 610001BE        	    91: 	bsr	op_BTST
01:0000019A 61000564        	    92: 	bsr	op_BCHG
01:0000019E 610008C8        	    93: 	bsr	op_BCLR
01:000001A2 61000C12        	    94: 	bsr	op_BSET
01:000001A6 61000F56        	    95: 	bsr op_MOVEP
01:000001AA 61000FDE        	    96: 	bsr op_BOOL_I
01:000001AE 610011C2        	    97: 	bsr op_CMP_I
01:000001B2 610013A6        	    98: 	bsr op_ADD_I
01:000001B6 61001528        	    99: 	bsr op_SUB_I
01:000001BA 610016AA        	   100: 	bsr op_MOVE
01:000001BE 610018B2        	   101: 	bsr op_MOVE_xxx_FLAGS
01:000001C2 61001AA2        	   102: 	bsr op_EXT
01:000001C6 61001ACA        	   103: 	bsr op_SWAP
01:000001CA 61001ADC        	   104: 	bsr op_LEAPEA
01:000001CE 61001B84        	   105: 	bsr op_TAS
01:000001D2 61001BA6        	   106: 	bsr op_TST
01:000001D6 61001BE0        	   107: 	bsr op_LINKS
01:000001DA 61001BFA        	   108: 	bsr op_MOVE_USP
01:000001DE 61001C06        	   109: 	bsr op_CHK
01:000001E2 61001C3C        	   110: 	bsr op_NEGS
01:000001E6 61001FC6        	   111: 	bsr op_MOVEM
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
01:000001EA 61002562        	   115: 	bsr op_TRAPV
01:000001EE 6100257A        	   116: 	bsr op_RTR
01:000001F2 61001148        	   117: 	bsr op_BSR
01:000001F6 61002594        	   118: 	bsr op_BCC
01:000001FA 61002610        	   119: 	bsr op_DBCC
01:000001FE 61002632        	   120: 	bsr op_SCC
01:00000202 61002656        	   121: 	bsr op_ADDQ
01:00000206 6100270C        	   122: 	bsr op_SUBQ
01:0000020A 610027C2        	   123: 	bsr op_MOVEQ
01:0000020E 610027DA        	   124: 	bsr op_DIVU
                            	   125: *	bsr op_DIVS
01:00000212 6100287A        	   126: 	bsr op_OR
01:00000216 61002960        	   127: 	bsr op_AND
01:0000021A 61002A46        	   128: 	bsr op_EOR
01:0000021E 61002AB8        	   129: 	bsr op_CMP
01:00000222 61002B2A        	   130: 	bsr op_CMPA
01:00000226 61002B8C        	   131: 	bsr op_CMPM
01:0000022A 61002C2E        	   132: 	bsr op_ADD
01:0000022E 61002D14        	   133: 	bsr op_SUB
01:00000232 61002DFA        	   134: 	bsr op_ADDA
01:00000236 61002E42        	   135: 	bsr op_SUBA
01:0000023A 61002E8A        	   136: 	bsr op_ADDX	
01:0000023E 61002F96        	   137: 	bsr op_SUBX
01:00000242 610030A2        	   138: 	bsr op_MULU
01:00000246 610030EA        	   139: 	bsr op_MULS
01:0000024A 61003132        	   140: 	bsr op_EXG
01:0000024E 6100319C        	   141: 	bsr op_ROx
01:00000252 610033CE        	   142: 	bsr op_ROXx
01:00000256 61003600        	   143: 	bsr op_SHIFTS
01:0000025A 6100383E        	   144: 	bsr op_SHIFTS2
                            	   145: 
01:0000025E 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
01:00000260 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
01:00000262 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
01:00000268 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: * Exception Vector = 6   CHK Instruction
                            	   164: *
                            	   165: *	align	4
                            	   166: EXCEPTION_6:
01:0000026A 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000270 4E73            	   168: 	rte
                            	   169: 
                            	   170: * Exception Vector = 7   TRAPV Instruction
                            	   171: *
                            	   172: *	align	4
                            	   173: EXCEPTION_7:
01:00000272 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000278 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
01:0000027A 003C00FF        	   184:     ori.b #$FF,CCR
01:0000027E 6AFE            	   185:     bpl.s *                   ; branch if Z clear
01:00000280 66FE            	   186:     bne.s *                   ; branch if N clear
01:00000282 68FE            	   187:     bvc.s *                   ; branch if V clear
01:00000284 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
01:00000286 44FC0000        	   190:     move #$00,CCR
01:0000028A 003C0000        	   191:     ori.b #$00,CCR
01:0000028E 67FE            	   192:     beq.s *                   ; branch if Z set
01:00000290 6BFE            	   193:     bmi.s *                   ; branch if N set
01:00000292 69FE            	   194:     bvs.s *                   ; branch if V set
01:00000294 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
01:00000296 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
01:0000029A 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
01:0000029C 007C2FFF        	   209:     ori.w #$2FFF,SR
01:000002A0 6AFE            	   210:     bpl.s *                   * branch if Z clear
01:000002A2 66FE            	   211:     bne.s *                   * branch if N clear
01:000002A4 68FE            	   212:     bvc.s *                   * branch if V clear
01:000002A6 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
01:000002A8 46FC2000        	   215:     move.w #$2000,SR
01:000002AC 007C0000        	   216:     ori.w #$0000,SR
01:000002B0 67FE            	   217:     beq.s *                   * branch if Z set
01:000002B2 6BFE            	   218:     bmi.s *                   * branch if N set
01:000002B4 69FE            	   219:     bvs.s *                   * branch if V set
01:000002B6 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
01:000002B8 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
01:000002BC 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
01:000002BE 44FC0000        	   233:     move #$00,CCR
01:000002C2 0A3C00FF        	   234:     eori.b #$FF,CCR
01:000002C6 6AFE            	   235:     bpl.s *                   ; branch if Z clear
01:000002C8 66FE            	   236:     bne.s *                   ; branch if N clear
01:000002CA 68FE            	   237:     bvc.s *                   ; branch if V clear
01:000002CC 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
01:000002CE 44FC0000        	   240:     move #$00,CCR
01:000002D2 0A3C0000        	   241:     eori.b #$00,CCR
01:000002D6 67FE            	   242:     beq.s *                   ; branch if Z set
01:000002D8 6BFE            	   243:     bmi.s *                   ; branch if N set
01:000002DA 69FE            	   244:     bvs.s *                   ; branch if V set
01:000002DC 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
01:000002DE 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
01:000002E2 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
01:000002E4 46FC2000        	   260:     move.w #$2000,SR
01:000002E8 0A7C0FFF        	   261:     eori.w #$0FFF,SR
01:000002EC 6AFE            	   262:     bpl.s *                   * branch if Z clear
01:000002EE 66FE            	   263:     bne.s *                   * branch if N clear
01:000002F0 68FE            	   264:     bvc.s *                   * branch if V clear
01:000002F2 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
01:000002F4 46FC2000        	   267:     move.w #$2000,SR
01:000002F8 0A7C0000        	   268:     eori.w #$0000,SR
01:000002FC 67FE            	   269:     beq.s *                   * branch if Z set
01:000002FE 6BFE            	   270:     bmi.s *                   * branch if N set
01:00000300 69FE            	   271:     bvs.s *                   * branch if V set
01:00000302 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
01:00000304 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
01:00000308 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
01:0000030A 44FC00FF        	   287:     move #$FF,CCR
01:0000030E 023C00FF        	   288:     andi.b #$FF,CCR
01:00000312 6AFE            	   289:     bpl.s *                   * branch if Z clear
01:00000314 66FE            	   290:     bne.s *                   * branch if N clear
01:00000316 68FE            	   291:     bvc.s *                   * branch if V clear
01:00000318 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
01:0000031A 44FC00FF        	   294:     move #$FF,CCR
01:0000031E 023C0000        	   295:     andi.b #$00,CCR
01:00000322 67FE            	   296:     beq.s *                   * branch if Z set
01:00000324 6BFE            	   297:     bmi.s *                   * branch if N set
01:00000326 69FE            	   298:     bvs.s *                   * branch if V set
01:00000328 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
01:0000032A 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
01:0000032E 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
01:00000330 46FC20FF        	   313:     move.w #$20FF,SR
01:00000334 027CFFFF        	   314:     andi.w #$FFFF,SR
01:00000338 6AFE            	   315:     bpl.s *                   * branch if Z clear
01:0000033A 66FE            	   316:     bne.s *                   * branch if N clear
01:0000033C 68FE            	   317:     bvc.s *                   * branch if V clear
01:0000033E 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
01:00000340 46FC20FF        	   320:     move.w #$20FF,SR
01:00000344 027CFF00        	   321:     andi.w #$FF00,SR
01:00000348 67FE            	   322:     beq.s *                   * branch if Z set
01:0000034A 6BFE            	   323:     bmi.s *                   * branch if N set
01:0000034C 69FE            	   324:     bvs.s *                   * branch if V set
01:0000034E 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
01:00000350 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
01:00000354 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
01:00000356 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
01:0000035C 08000000        	   343:             btst.l #0,d0
01:00000360 67FE            	   344:             beq.s *               * branch if Z set
01:00000362 08000001        	   345:             btst.l #1,d0              *
01:00000366 66FE            	   346:             bne.s *               * branch if Z clear
01:00000368 0800001F        	   347:             btst.l #31,d0             *
01:0000036C 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
01:0000036E 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000372 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
01:00000376 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000378 08100000        	   355:             btst.b #0,(a0)
01:0000037C 67FE            	   356:             beq.s *               * branch if Z set
01:0000037E 08100001        	   357:             btst.b #1,(a0)            *
01:00000382 66FE            	   358:             bne.s *               * branch if Z clear
01:00000384 08100007        	   359:             btst.b #7,(a0)            *
01:00000388 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
01:0000038A 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000038E 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
01:00000392 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
01:00000396 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
01:0000039A 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000039E 08180000        	   369:             btst.b #0,(a0)+
01:000003A2 67FE            	   370:             beq.s *               * branch if Z set
01:000003A4 08180001        	   371:             btst.b #1,(a0)+           *
01:000003A8 66FE            	   372:             bne.s *               * branch if Z clear
01:000003AA 08180007        	   373:             btst.b #7,(a0)+           *
01:000003AE 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
01:000003B0 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
01:000003B4 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
01:000003B8 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
01:000003BC 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
01:000003C0 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
01:000003C4 08200000        	   383:             btst.b #0,-(a0)
01:000003C8 67FE            	   384:             beq.s *               * branch if Z set
01:000003CA 08200001        	   385:             btst.b #1,-(a0)           *
01:000003CE 66FE            	   386:             bne.s *               * branch if Z clear
01:000003D0 08200007        	   387:             btst.b #7,-(a0)           *
01:000003D4 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
01:000003D6 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
01:000003DA 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
01:000003DE 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
01:000003E2 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
01:000003E6 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
01:000003EA 08100000        	   397:             btst.b #0,0(a0)
01:000003EE 67FE            	   398:             beq.s *               * branch if Z set
01:000003F0 082800010001    	   399:             btst.b #1,1(a0)           *
01:000003F6 66FE            	   400:             bne.s *               * branch if Z clear
01:000003F8 082800070002    	   401:             btst.b #7,2(a0)           *
01:000003FE 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
01:00000400 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
01:00000404 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
01:00000406 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
01:0000040A 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
01:0000040C 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
01:0000040E 083000000000    	   411:             btst.b #0,0(a0,d0.w)
01:00000414 67FE            	   412:             beq.s *               * branch if Z set
01:00000416 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
01:0000041C 66FE            	   414:             bne.s *               * branch if Z clear
01:0000041E 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
01:00000424 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
01:00000426 083000000800    	   418:             btst.b #0,0(a0,d0.l)
01:0000042C 67FE            	   419:             beq.s *               * branch if Z set
01:0000042E 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
01:00000434 66FE            	   421:             bne.s *               * branch if Z clear
01:00000436 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
01:0000043C 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
01:0000043E 083000009000    	   425:             btst.b #0,0(a0,a1.w)
01:00000444 67FE            	   426:             beq.s *               * branch if Z set
01:00000446 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
01:0000044C 66FE            	   428:             bne.s *               * branch if Z clear
01:0000044E 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
01:00000454 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
01:00000456 083000009800    	   432:             btst.b #0,0(a0,a1.l)
01:0000045C 67FE            	   433:             beq.s *               * branch if Z set
01:0000045E 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
01:00000464 66FE            	   435:             bne.s *               * branch if Z clear
01:00000466 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
01:0000046C 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
01:0000046E 083800000100    	   441:             btst.b #0,$0100
01:00000474 67FE            	   442:             beq.s *               * branch if Z set
01:00000476 083800010101    	   443:             btst.b #1,$0101           *
01:0000047C 66FE            	   444:             bne.s *               * branch if Z clear
01:0000047E 083800070102    	   445:             btst.b #7,$0102           *
01:00000484 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
01:00000486 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
01:0000048C 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
01:00000490 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
01:00000494 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
01:00000498 083900000000F100	   454:             btst.b #0,$F100
01:000004A0 67FE            	   455:             beq.s *               * branch if Z set
01:000004A2 083900010000F101	   456:             btst.b #1,$F101       *
01:000004AA 66FE            	   457:             bne.s *               * branch if Z clear
01:000004AC 083900070000F102	   458:             btst.b #7,$F102       *
01:000004B4 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
01:000004B6 4BFAFE9E        	   463:             lea op_BTST(pc),a5
01:000004BA 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
01:000004C0 66FE            	   465:             bne.s *               * branch if Z clear
01:000004C2 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
01:000004C8 67FE            	   467:             beq.s *               * branch if Z set
01:000004CA 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
01:000004D0 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
01:000004D2 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
01:000004D6 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
01:000004D8 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
01:000004DC 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
01:000004DE 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
01:000004E0 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:000004E6 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
01:000004E8 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
01:000004EC 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:000004F2 67FE            	   484:             beq.s *               * branch if Z set
01:000004F4 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:000004FA 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
01:000004FC 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:00000502 66FE            	   489:             bne.s *               * branch if Z clear
01:00000504 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:0000050A 67FE            	   491:             beq.s *               * branch if Z set
01:0000050C 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:00000512 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
01:00000514 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:0000051A 66FE            	   496:             bne.s *               * branch if Z clear
01:0000051C 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:00000522 67FE            	   498:             beq.s *               * branch if Z set
01:00000524 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:0000052A 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
01:0000052C 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:00000532 66FE            	   503:             bne.s *               * branch if Z clear
01:00000534 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:0000053A 67FE            	   505:             beq.s *               * branch if Z set
01:0000053C 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:00000542 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
01:00000544 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
01:0000054A 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
01:0000054C 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
01:0000054E 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
01:00000550 0B00            	   519:             btst.l d5,d0
01:00000552 67FE            	   520:             beq.s *               * branch if Z set
01:00000554 0D00            	   521:             btst.l d6,d0              *
01:00000556 66FE            	   522:             bne.s *               * branch if Z clear
01:00000558 0F00            	   523:             btst.l d7,d0             *
01:0000055A 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
01:0000055C 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
01:0000055E 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
01:00000560 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
01:00000562 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000566 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
01:0000056A 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000056C 0B10            	   534:             btst.b d5,(a0)
01:0000056E 67FE            	   535:             beq.s *               * branch if Z set
01:00000570 0D10            	   536:             btst.b d6,(a0)            *
01:00000572 66FE            	   537:             bne.s *               * branch if Z clear
01:00000574 0F10            	   538:             btst.b d7,(a0)            *
01:00000576 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
01:00000578 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000057C 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
01:00000580 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
01:00000584 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
01:00000588 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000058C 0B18            	   550:             btst.b d5,(a0)+
01:0000058E 67FE            	   551:             beq.s *               * branch if Z set
01:00000590 0D18            	   552:             btst.b d6,(a0)+           *
01:00000592 66FE            	   553:             bne.s *               * branch if Z clear
01:00000594 0F18            	   554:             btst.b d7,(a0)+           *
01:00000596 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
01:00000598 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
01:0000059C 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
01:000005A0 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
01:000005A4 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
01:000005A8 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
01:000005AC 0B20            	   564:             btst.b d5,-(a0)
01:000005AE 67FE            	   565:             beq.s *               * branch if Z set
01:000005B0 0D20            	   566:             btst.b d6,-(a0)           *
01:000005B2 66FE            	   567:             bne.s *               * branch if Z clear
01:000005B4 0F20            	   568:             btst.b d7,-(a0)           *
01:000005B6 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
01:000005B8 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
01:000005BC 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
01:000005C0 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
01:000005C4 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
01:000005C8 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
01:000005CC 0B10            	   578:             btst.b d5,0(a0)
01:000005CE 67FE            	   579:             beq.s *               * branch if Z set
01:000005D0 0D280001        	   580:             btst.b d6,1(a0)           *
01:000005D4 66FE            	   581:             bne.s *               * branch if Z clear
01:000005D6 0F280002        	   582:             btst.b d7,2(a0)           *
01:000005DA 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
01:000005DC 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
01:000005E0 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
01:000005E2 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
01:000005E6 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
01:000005E8 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
01:000005EA 0B300000        	   592:             btst.b d5,0(a0,d0.w)
01:000005EE 67FE            	   593:             beq.s *               * branch if Z set
01:000005F0 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
01:000005F4 66FE            	   595:             bne.s *               * branch if Z clear
01:000005F6 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
01:000005FA 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
01:000005FC 0B300800        	   599:             btst.b d5,0(a0,d0.l)
01:00000600 67FE            	   600:             beq.s *               * branch if Z set
01:00000602 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
01:00000606 66FE            	   602:             bne.s *               * branch if Z clear
01:00000608 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
01:0000060C 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
01:0000060E 0B309000        	   606:             btst.b d5,0(a0,a1.w)
01:00000612 67FE            	   607:             beq.s *               * branch if Z set
01:00000614 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
01:00000618 66FE            	   609:             bne.s *               * branch if Z clear
01:0000061A 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
01:0000061E 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
01:00000620 0B309800        	   613:             btst.b d5,0(a0,a1.l)
01:00000624 67FE            	   614:             beq.s *               * branch if Z set
01:00000626 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
01:0000062A 66FE            	   616:             bne.s *               * branch if Z clear
01:0000062C 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
01:00000630 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
01:00000632 0B380100        	   622:             btst.b d5,$0100
01:00000636 67FE            	   623:             beq.s *               * branch if Z set
01:00000638 0D380101        	   624:             btst.b d6,$0101           *
01:0000063C 66FE            	   625:             bne.s *               * branch if Z clear
01:0000063E 0F380102        	   626:             btst.b d7,$0102           *
01:00000642 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
01:00000644 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
01:0000064A 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
01:0000064E 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
01:00000652 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
01:00000656 0B390000F100    	   635:             btst.b d5,$F100
01:0000065C 67FE            	   636:             beq.s *               * branch if Z set
01:0000065E 0D390000F101    	   637:             btst.b d6,$F101       *
01:00000664 66FE            	   638:             bne.s *               * branch if Z clear
01:00000666 0F390000F102    	   639:             btst.b d7,$F102       *
01:0000066C 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
01:0000066E 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
01:00000670 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
01:00000672 4BFAFCE2        	   646:             lea op_BTST(pc),a5
01:00000676 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
01:0000067A 66FE            	   648:             bne.s *               * branch if Z clear
01:0000067C 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
01:00000680 67FE            	   650:             beq.s *               * branch if Z set
01:00000682 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
01:00000686 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
01:00000688 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
01:0000068C 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
01:0000068E 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
01:00000692 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
01:00000694 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
01:00000696 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
01:00000698 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
01:0000069A 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:0000069E 67FE            	   665:             beq.s *               * branch if Z set
01:000006A0 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
01:000006A4 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:000006A8 67FE            	   668:             beq.s *               * branch if Z set
01:000006AA 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:000006AE 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
01:000006B0 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:000006B4 67FE            	   673:             beq.s *               * branch if Z set
01:000006B6 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:000006BA 67FE            	   675:             beq.s *               * branch if Z set
01:000006BC 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:000006C0 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
01:000006C2 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:000006C6 67FE            	   680:             beq.s *               * branch if Z set
01:000006C8 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:000006CC 67FE            	   682:             beq.s *               * branch if Z set
01:000006CE 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:000006D2 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
01:000006D4 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:000006D8 67FE            	   687:             beq.s *               * branch if Z set
01:000006DA 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:000006DE 67FE            	   689:             beq.s *               * branch if Z set
01:000006E0 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000006E4 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
01:000006E6 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
01:000006E8 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
01:000006EA 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
01:000006EC 0B3C0088        	   699:             btst.b d5,#$88
01:000006F0 66FE            	   700:             bne.s *               * branch if Z clear
01:000006F2 0D3C0088        	   701:             btst.b d6,#$88
01:000006F6 67FE            	   702:             beq.s *               * branch if Z set
01:000006F8 0F3C0088        	   703:             btst.b d7,#$88
01:000006FC 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
01:000006FE 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
01:00000700 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
01:00000706 08400000        	   721:             bchg.l #0,d0
01:0000070A 67FE            	   722:             beq.s *               * branch if Z set
01:0000070C 08400001        	   723:             bchg.l #1,d0              *
01:00000710 66FE            	   724:             bne.s *               * branch if Z clear
01:00000712 0840001F        	   725:             bchg.l #31,d0             *
01:00000716 67FE            	   726:             beq.s *               * branch if Z set
01:00000718 0C8000000002    	   727:             cmpi.l #$00000002,d0
01:0000071E 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
01:00000720 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000724 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
01:00000728 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000072A 08500000        	   735:             bchg.b #0,(a0)
01:0000072E 67FE            	   736:             beq.s *               * branch if Z set
01:00000730 08500001        	   737:             bchg.b #1,(a0)            *
01:00000734 66FE            	   738:             bne.s *               * branch if Z clear
01:00000736 08500007        	   739:             bchg.b #7,(a0)            *
01:0000073A 67FE            	   740:             beq.s *               * branch if Z set
01:0000073C 0C100002        	   741:             cmpi.b #$02,(a0)
01:00000740 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
01:00000742 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000746 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
01:0000074A 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
01:0000074E 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
01:00000752 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000756 08580000        	   750:             bchg.b #0,(a0)+
01:0000075A 67FE            	   751:             beq.s *               * branch if Z set
01:0000075C 08580001        	   752:             bchg.b #1,(a0)+           *
01:00000760 66FE            	   753:             bne.s *               * branch if Z clear
01:00000762 08580007        	   754:             bchg.b #7,(a0)+           *
01:00000766 67FE            	   755:             beq.s *               * branch if Z set
01:00000768 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000076C 4A18            	   757:             cmpi.b #$00,(a0)+
01:0000076E 66FE            	   758:             bne.s *               * branch if Z clear
01:00000770 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
01:00000774 66FE            	   760:             bne.s *               * branch if Z clear
01:00000776 4A18            	   761:             cmpi.b #$00,(a0)+
01:00000778 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
01:0000077A 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
01:0000077E 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
01:00000782 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
01:00000786 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
01:0000078A 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
01:0000078E 08600000        	   770:             bchg.b #0,-(a0)
01:00000792 67FE            	   771:             beq.s *               * branch if Z set
01:00000794 08600001        	   772:             bchg.b #1,-(a0)           *
01:00000798 66FE            	   773:             bne.s *               * branch if Z clear
01:0000079A 08600007        	   774:             bchg.b #7,-(a0)           *
01:0000079E 67FE            	   775:             beq.s *               * branch if Z set
01:000007A0 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
01:000007A4 4A20            	   777:             cmpi.b #$00,-(a0)
01:000007A6 66FE            	   778:             bne.s *               * branch if Z clear
01:000007A8 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
01:000007AC 66FE            	   780:             bne.s *               * branch if Z clear
01:000007AE 4A20            	   781:             cmpi.b #$00,-(a0)
01:000007B0 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
01:000007B2 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
01:000007B6 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
01:000007BA 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
01:000007BE 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
01:000007C2 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
01:000007C6 08500000        	   791:             bchg.b #0,0(a0)
01:000007CA 67FE            	   792:             beq.s *               * branch if Z set
01:000007CC 086800010001    	   793:             bchg.b #1,1(a0)           *
01:000007D2 66FE            	   794:             bne.s *               * branch if Z clear
01:000007D4 086800070002    	   795:             bchg.b #7,2(a0)           *
01:000007DA 67FE            	   796:             beq.s *               * branch if Z set
01:000007DC 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007E0 4A18            	   798:             cmpi.b #$00,(a0)+
01:000007E2 66FE            	   799:             bne.s *               * branch if Z clear
01:000007E4 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
01:000007E8 66FE            	   801:             bne.s *               * branch if Z clear
01:000007EA 4A18            	   802:             cmpi.b #$00,(a0)+
01:000007EC 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
01:000007EE 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
01:000007F2 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
01:000007F4 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
01:000007F8 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
01:000007FA 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
01:000007FC 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
01:00000802 66FE            	   813:             bne.s *               * branch if Z clear
01:00000804 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
01:0000080A 67FE            	   815:             beq.s *               * branch if Z set
01:0000080C 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
01:00000812 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
01:00000814 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
01:0000081A 67FE            	   820:             beq.s *               * branch if Z set
01:0000081C 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
01:00000822 66FE            	   822:             bne.s *               * branch if Z clear
01:00000824 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
01:0000082A 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
01:0000082C 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
01:00000832 66FE            	   827:             bne.s *               * branch if Z clear
01:00000834 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
01:0000083A 67FE            	   829:             beq.s *               * branch if Z set
01:0000083C 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
01:00000842 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
01:00000844 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
01:0000084A 67FE            	   834:             beq.s *               * branch if Z set
01:0000084C 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
01:00000852 66FE            	   836:             bne.s *               * branch if Z clear
01:00000854 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
01:0000085A 67FE            	   838:             beq.s *               * branch if Z set
01:0000085C 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000860 4A18            	   840:             cmpi.b #$00,(a0)+
01:00000862 66FE            	   841:             bne.s *               * branch if Z clear
01:00000864 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
01:00000868 66FE            	   843:             bne.s *               * branch if Z clear
01:0000086A 4A18            	   844:             cmpi.b #$00,(a0)+
01:0000086C 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
01:0000086E 087800000100    	   849:             bchg.b #0,$0100
01:00000874 66FE            	   850:             bne.s *               * branch if Z clear
01:00000876 087800010101    	   851:             bchg.b #1,$0101           *
01:0000087C 67FE            	   852:             beq.s *               * branch if Z set
01:0000087E 087800070102    	   853:             bchg.b #7,$0102           *
01:00000884 66FE            	   854:             bne.s *               * branch if Z clear
01:00000886 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000088A 0C180001        	   856:             cmpi.b #$01,(a0)+
01:0000088E 66FE            	   857:             bne.s *               * branch if Z clear
01:00000890 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
01:00000894 66FE            	   859:             bne.s *               * branch if Z clear
01:00000896 0C180080        	   860:             cmpi.b #$80,(a0)+
01:0000089A 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
01:0000089C 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
01:000008A2 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
01:000008A6 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
01:000008AA 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
01:000008AE 087900000000F100	   868:             bchg.b #0,$F100
01:000008B6 67FE            	   869:             beq.s *               * branch if Z set
01:000008B8 087900010000F101	   870:             bchg.b #1,$F101       *
01:000008C0 66FE            	   871:             bne.s *               * branch if Z clear
01:000008C2 087900070000F102	   872:             bchg.b #7,$F102       *
01:000008CA 67FE            	   873:             beq.s *               * branch if Z set
01:000008CC 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008D0 0C180001        	   875:             cmpi.b #$01,(a0)+
01:000008D4 66FE            	   876:             bne.s *               * branch if Z clear
01:000008D6 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
01:000008DA 66FE            	   878:             bne.s *               * branch if Z clear
01:000008DC 0C180080        	   879:             cmpi.b #$80,(a0)+
01:000008E0 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
01:000008E2 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
01:000008E8 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
01:000008EA 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
01:000008EC 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
01:000008EE 0B40            	   891:             bchg.l d5,d0
01:000008F0 67FE            	   892:             beq.s *               * branch if Z set
01:000008F2 0D40            	   893:             bchg.l d6,d0              *
01:000008F4 66FE            	   894:             bne.s *               * branch if Z clear
01:000008F6 0F40            	   895:             bchg.l d7,d0             *
01:000008F8 67FE            	   896:             beq.s *               * branch if Z set
01:000008FA 0C8000000002    	   897:             cmpi.l #$00000002,d0
01:00000900 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
01:00000902 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
01:00000904 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
01:00000906 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
01:00000908 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000090C 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
01:00000910 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000912 0B50            	   908:             bchg.b d5,(a0)
01:00000914 67FE            	   909:             beq.s *               * branch if Z set
01:00000916 0D50            	   910:             bchg.b d6,(a0)            *
01:00000918 66FE            	   911:             bne.s *               * branch if Z clear
01:0000091A 0F50            	   912:             bchg.b d7,(a0)            *
01:0000091C 67FE            	   913:             beq.s *               * branch if Z set
01:0000091E 0C100002        	   914:             cmpi.b #$02,(a0)
01:00000922 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
01:00000924 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000928 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
01:0000092C 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
01:00000930 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
01:00000934 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000938 0B58            	   924:             bchg.b d5,(a0)+
01:0000093A 67FE            	   925:             beq.s *               * branch if Z set
01:0000093C 0D58            	   926:             bchg.b d6,(a0)+           *
01:0000093E 66FE            	   927:             bne.s *               * branch if Z clear
01:00000940 0F58            	   928:             bchg.b d7,(a0)+           *
01:00000942 67FE            	   929:             beq.s *               * branch if Z set
01:00000944 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000948 4A18            	   931:             cmpi.b #$00,(a0)+
01:0000094A 66FE            	   932:             bne.s *               * branch if Z clear
01:0000094C 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
01:00000950 66FE            	   934:             bne.s *               * branch if Z clear
01:00000952 4A18            	   935:             cmpi.b #$00,(a0)+
01:00000954 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
01:00000956 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
01:0000095A 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
01:0000095E 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
01:00000962 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
01:00000966 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
01:0000096A 0B60            	   944:             bchg.b d5,-(a0)
01:0000096C 67FE            	   945:             beq.s *               * branch if Z set
01:0000096E 0D60            	   946:             bchg.b d6,-(a0)           *
01:00000970 66FE            	   947:             bne.s *               * branch if Z clear
01:00000972 0F60            	   948:             bchg.b d7,-(a0)           *
01:00000974 67FE            	   949:             beq.s *               * branch if Z set
01:00000976 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
01:0000097A 4A20            	   951:             cmpi.b #$00,-(a0)
01:0000097C 66FE            	   952:             bne.s *               * branch if Z clear
01:0000097E 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
01:00000982 66FE            	   954:             bne.s *               * branch if Z clear
01:00000984 4A20            	   955:             cmpi.b #$00,-(a0)
01:00000986 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
01:00000988 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
01:0000098C 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
01:00000990 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
01:00000994 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
01:00000998 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
01:0000099C 0B50            	   964:             bchg.b d5,0(a0)
01:0000099E 67FE            	   965:             beq.s *               * branch if Z set
01:000009A0 0D680001        	   966:             bchg.b d6,1(a0)           *
01:000009A4 66FE            	   967:             bne.s *               * branch if Z clear
01:000009A6 0F680002        	   968:             bchg.b d7,2(a0)           *
01:000009AA 67FE            	   969:             beq.s *               * branch if Z set
01:000009AC 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009B0 4A18            	   971:             cmpi.b #$00,(a0)+
01:000009B2 66FE            	   972:             bne.s *               * branch if Z clear
01:000009B4 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
01:000009B8 66FE            	   974:             bne.s *               * branch if Z clear
01:000009BA 4A18            	   975:             cmpi.b #$00,(a0)+
01:000009BC 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
01:000009BE 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
01:000009C2 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
01:000009C4 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
01:000009C8 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
01:000009CA 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
01:000009CC 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
01:000009D0 66FE            	   985:             bne.s *               * branch if Z clear
01:000009D2 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
01:000009D6 67FE            	   987:             beq.s *               * branch if Z set
01:000009D8 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
01:000009DC 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
01:000009DE 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
01:000009E2 67FE            	   992:             beq.s *               * branch if Z set
01:000009E4 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
01:000009E8 66FE            	   994:             bne.s *               * branch if Z clear
01:000009EA 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
01:000009EE 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
01:000009F0 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
01:000009F4 66FE            	   999:             bne.s *               * branch if Z clear
01:000009F6 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
01:000009FA 67FE            	  1001:             beq.s *               * branch if Z set
01:000009FC 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
01:00000A00 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
01:00000A02 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
01:00000A06 67FE            	  1006:             beq.s *               * branch if Z set
01:00000A08 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
01:00000A0C 66FE            	  1008:             bne.s *               * branch if Z clear
01:00000A0E 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
01:00000A12 67FE            	  1010:             beq.s *               * branch if Z set
01:00000A14 4A18            	  1011:             cmpi.b #$00,(a0)+
01:00000A16 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
01:00000A18 0B780100        	  1015:             bchg.b d5,$0100
01:00000A1C 66FE            	  1016:             bne.s *               * branch if Z clear
01:00000A1E 0D780101        	  1017:             bchg.b d6,$0101           *
01:00000A22 67FE            	  1018:             beq.s *               * branch if Z set
01:00000A24 0F780102        	  1019:             bchg.b d7,$0102           *
01:00000A28 66FE            	  1020:             bne.s *               * branch if Z clear
01:00000A2A 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
01:00000A2E 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
01:00000A30 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A36 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
01:00000A3A 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
01:00000A3E 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
01:00000A42 0B790000F100    	  1029:             bchg.b d5,$F100
01:00000A48 67FE            	  1030:             beq.s *               * branch if Z set
01:00000A4A 0D790000F101    	  1031:             bchg.b d6,$F101       *
01:00000A50 66FE            	  1032:             bne.s *               * branch if Z clear
01:00000A52 0F790000F102    	  1033:             bchg.b d7,$F102       *
01:00000A58 67FE            	  1034:             beq.s *               * branch if Z set
01:00000A5A 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
01:00000A60 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
01:00000A64 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
01:00000A66 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
01:00000A68 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
01:00000A6E 08800000        	  1054:             bclr.l #0,d0
01:00000A72 67FE            	  1055:             beq.s *               * branch if Z set
01:00000A74 08800001        	  1056:             bclr.l #1,d0              *
01:00000A78 67FE            	  1057:             beq.s *               * branch if Z set
01:00000A7A 0880000F        	  1058:             bclr.l #15,d0             *
01:00000A7E 66FE            	  1059:             bne.s *               * branch if Z clear
01:00000A80 0880001F        	  1060:             bclr.l #31,d0             *
01:00000A84 67FE            	  1061:             beq.s *               * branch if Z set
01:00000A86 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
01:00000A8C 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
01:00000A8E 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A92 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
01:00000A96 08900000        	  1069:             bclr.b #0,(a0)
01:00000A9A 67FE            	  1070:             beq.s *               * branch if Z set
01:00000A9C 08900007        	  1071:             bclr.b #7,(a0)            *
01:00000AA0 66FE            	  1072:             bne.s *               * branch if Z clear
01:00000AA2 0C10000E        	  1073:             cmpi.b #$0E,(a0)
01:00000AA6 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
01:00000AA8 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AAC 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
01:00000AB0 4218            	  1079:             move.b #$00,(a0)+         * populate test data
01:00000AB2 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AB6 08980000        	  1081:             bclr.b #0,(a0)+
01:00000ABA 67FE            	  1082:             beq.s *               * branch if Z set
01:00000ABC 08980001        	  1083:             bclr.b #1,(a0)+           *
01:00000AC0 66FE            	  1084:             bne.s *               * branch if Z clear
01:00000AC2 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AC6 4A18            	  1086:             cmpi.b #$00,(a0)+
01:00000AC8 66FE            	  1087:             bne.s *               * branch if Z clear
01:00000ACA 4A18            	  1088:             cmpi.b #$00,(a0)+
01:00000ACC 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
01:00000ACE 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
01:00000AD2 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
01:00000AD6 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
01:00000ADA 08A00007        	  1096:             bclr.b #7,-(a0)
01:00000ADE 67FE            	  1097:             beq.s *               * branch if Z set
01:00000AE0 08A00000        	  1098:             bclr.b #0,-(a0)           *
01:00000AE4 67FE            	  1099:             beq.s *               * branch if Z set
01:00000AE6 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000AEA 4A20            	  1101:             cmpi.b #$00,-(a0)
01:00000AEC 66FE            	  1102:             bne.s *               * branch if Z clear
01:00000AEE 4A20            	  1103:             cmpi.b #$00,-(a0)
01:00000AF0 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
01:00000AF2 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
01:00000AF6 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
01:00000AFA 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
01:00000AFE 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
01:00000B02 08900000        	  1112:             bclr.b #0,0(a0)
01:00000B06 67FE            	  1113:             beq.s *               * branch if Z set
01:00000B08 08A800040001    	  1114:             bclr.b #4,1(a0)           *
01:00000B0E 67FE            	  1115:             beq.s *               * branch if Z set
01:00000B10 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B14 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
01:00000B18 66FE            	  1118:             bne.s *               * branch if Z clear
01:00000B1A 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
01:00000B1E 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
01:00000B20 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
01:00000B24 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
01:00000B26 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
01:00000B2A 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
01:00000B2C 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
01:00000B2E 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
01:00000B32 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
01:00000B36 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
01:00000B3A 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
01:00000B40 67FE            	  1133:             beq.s *               * branch if Z set
01:00000B42 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
01:00000B48 67FE            	  1135:             beq.s *               * branch if Z set
01:00000B4A 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
01:00000B50 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
01:00000B52 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
01:00000B58 67FE            	  1140:             beq.s *               * branch if Z set
01:00000B5A 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
01:00000B60 67FE            	  1142:             beq.s *               * branch if Z set
01:00000B62 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
01:00000B68 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
01:00000B6A 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
01:00000B70 67FE            	  1147:             beq.s *               * branch if Z set
01:00000B72 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
01:00000B78 66FE            	  1149:             bne.s *               * branch if Z clear
01:00000B7A 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
01:00000B80 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
01:00000B82 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
01:00000B88 66FE            	  1154:             bne.s *               * branch if Z clear
01:00000B8A 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
01:00000B90 67FE            	  1156:             beq.s *               * branch if Z set
01:00000B92 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
01:00000B98 66FE            	  1158:             bne.s *               * branch if Z clear
01:00000B9A 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B9E 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
01:00000BA2 66FE            	  1161:             bne.s *               * branch if Z clear
01:00000BA4 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
01:00000BA8 66FE            	  1163:             bne.s *               * branch if Z clear
01:00000BAA 0C180059        	  1164:             cmpi.b #$59,(a0)+
01:00000BAE 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
01:00000BB0 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
01:00000BB4 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
01:00000BB8 08B800000100    	  1171:             bclr.b #0,$0100
01:00000BBE 67FE            	  1172:             beq.s *               * branch if Z set
01:00000BC0 08B800010100    	  1173:             bclr.b #1,$0100           *
01:00000BC6 67FE            	  1174:             beq.s *               * branch if Z set
01:00000BC8 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BCC 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
01:00000BD0 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
01:00000BD2 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BD8 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
01:00000BDC 08B900000000F100	  1183:             bclr.b #0,$F100
01:00000BE4 67FE            	  1184:             beq.s *               * branch if Z set
01:00000BE6 08B900010000F100	  1185:             bclr.b #1,$F100       *
01:00000BEE 67FE            	  1186:             beq.s *               * branch if Z set
01:00000BF0 08B900020000F100	  1187:             bclr.b #2,$F100       *
01:00000BF8 67FE            	  1188:             beq.s *               * branch if Z set
01:00000BFA 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
01:00000C00 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
01:00000C04 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
01:00000C06 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
01:00000C0C 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
01:00000C0E 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
01:00000C10 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
01:00000C12 0B80            	  1202:             bclr.l d5,d0
01:00000C14 66FE            	  1203:             bne.s *               * branch if Z clear
01:00000C16 0D80            	  1204:             bclr.l d6,d0              *
01:00000C18 66FE            	  1205:             bne.s *               * branch if Z clear
01:00000C1A 0F80            	  1206:             bclr.l d7,d0             *
01:00000C1C 67FE            	  1207:             beq.s *               * branch if Z set
01:00000C1E 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
01:00000C24 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
01:00000C26 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
01:00000C28 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
01:00000C2A 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
01:00000C2C 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C30 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
01:00000C34 0B90            	  1218:             bclr.b d5,(a0)
01:00000C36 67FE            	  1219:             beq.s *               * branch if Z set
01:00000C38 0D90            	  1220:             bclr.b d6,(a0)            *
01:00000C3A 66FE            	  1221:             bne.s *               * branch if Z clear
01:00000C3C 0F90            	  1222:             bclr.b d7,(a0)            *
01:00000C3E 67FE            	  1223:             beq.s *               * branch if Z set
01:00000C40 4A10            	  1224:             cmpi.b #$00,(a0)
01:00000C42 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
01:00000C44 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C48 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
01:00000C4C 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
01:00000C50 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
01:00000C54 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C58 0B98            	  1234:             bclr.b d5,(a0)+
01:00000C5A 67FE            	  1235:             beq.s *               * branch if Z set
01:00000C5C 0D98            	  1236:             bclr.b d6,(a0)+           *
01:00000C5E 66FE            	  1237:             bne.s *               * branch if Z clear
01:00000C60 0F98            	  1238:             bclr.b d7,(a0)+           *
01:00000C62 67FE            	  1239:             beq.s *               * branch if Z set
01:00000C64 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C68 4A18            	  1241:             cmpi.b #$00,(a0)+
01:00000C6A 66FE            	  1242:             bne.s *               * branch if Z clear
01:00000C6C 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
01:00000C70 66FE            	  1244:             bne.s *               * branch if Z clear
01:00000C72 4A18            	  1245:             cmpi.b #$00,(a0)+
01:00000C74 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
01:00000C76 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
01:00000C7A 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
01:00000C7E 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
01:00000C82 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
01:00000C86 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
01:00000C8A 0BA0            	  1254:             bclr.b d5,-(a0)
01:00000C8C 67FE            	  1255:             beq.s *               * branch if Z set
01:00000C8E 0DA0            	  1256:             bclr.b d6,-(a0)           *
01:00000C90 66FE            	  1257:             bne.s *               * branch if Z clear
01:00000C92 0FA0            	  1258:             bclr.b d7,-(a0)           *
01:00000C94 67FE            	  1259:             beq.s *               * branch if Z set
01:00000C96 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000C9A 4A20            	  1261:             cmpi.b #$00,-(a0)
01:00000C9C 66FE            	  1262:             bne.s *               * branch if Z clear
01:00000C9E 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
01:00000CA2 66FE            	  1264:             bne.s *               * branch if Z clear
01:00000CA4 4A20            	  1265:             cmpi.b #$00,-(a0)
01:00000CA6 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
01:00000CA8 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
01:00000CAC 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
01:00000CB0 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
01:00000CB4 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
01:00000CB8 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
01:00000CBC 0B90            	  1274:             bclr.b d5,0(a0)
01:00000CBE 67FE            	  1275:             beq.s *               * branch if Z set
01:00000CC0 0DA80001        	  1276:             bclr.b d6,1(a0)           *
01:00000CC4 66FE            	  1277:             bne.s *               * branch if Z clear
01:00000CC6 0FA80002        	  1278:             bclr.b d7,2(a0)           *
01:00000CCA 67FE            	  1279:             beq.s *               * branch if Z set
01:00000CCC 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CD0 4A18            	  1281:             cmpi.b #$00,(a0)+
01:00000CD2 66FE            	  1282:             bne.s *               * branch if Z clear
01:00000CD4 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
01:00000CD8 66FE            	  1284:             bne.s *               * branch if Z clear
01:00000CDA 4A18            	  1285:             cmpi.b #$00,(a0)+
01:00000CDC 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
01:00000CDE 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
01:00000CE2 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
01:00000CE6 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
01:00000CEA 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000CEE 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
01:00000CF2 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
01:00000CF6 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
01:00000CF8 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
01:00000CFC 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
01:00000CFE 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
01:00000D00 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
01:00000D04 67FE            	  1300:             beq.s *               * branch if Z set
01:00000D06 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
01:00000D0A 67FE            	  1302:             beq.s *               * branch if Z set
01:00000D0C 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
01:00000D10 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
01:00000D12 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
01:00000D16 66FE            	  1307:             bne.s *               * branch if Z clear
01:00000D18 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
01:00000D1C 66FE            	  1309:             bne.s *               * branch if Z clear
01:00000D1E 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
01:00000D22 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
01:00000D24 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
01:00000D28 66FE            	  1314:             bne.s *               * branch if Z clear
01:00000D2A 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
01:00000D2E 66FE            	  1316:             bne.s *               * branch if Z clear
01:00000D30 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
01:00000D34 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
01:00000D36 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
01:00000D3A 66FE            	  1321:             bne.s *               * branch if Z clear
01:00000D3C 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
01:00000D40 66FE            	  1323:             bne.s *               * branch if Z clear
01:00000D42 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
01:00000D46 66FE            	  1325:             bne.s *               * branch if Z clear
01:00000D48 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
01:00000D4C 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
01:00000D50 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
01:00000D52 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
01:00000D56 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
01:00000D5A 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
01:00000D5E 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000D62 0BB80100        	  1335:             bclr.b d5,$0100
01:00000D66 67FE            	  1336:             beq.s *               * branch if Z set
01:00000D68 0DB80101        	  1337:             bclr.b d6,$0101           *
01:00000D6C 67FE            	  1338:             beq.s *               * branch if Z set
01:00000D6E 0FB80102        	  1339:             bclr.b d7,$0102           *
01:00000D72 67FE            	  1340:             beq.s *               * branch if Z set
01:00000D74 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
01:00000D78 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
01:00000D7C 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
01:00000D7E 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
01:00000D84 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
01:00000D88 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
01:00000D8C 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
01:00000D90 0BB90000F100    	  1350:             bclr.b d5,$F100
01:00000D96 67FE            	  1351:             beq.s *               * branch if Z set
01:00000D98 0DB90000F101    	  1352:             bclr.b d6,$F101       *
01:00000D9E 66FE            	  1353:             bne.s *               * branch if Z clear
01:00000DA0 0FB90000F102    	  1354:             bclr.b d7,$F102       *
01:00000DA6 67FE            	  1355:             beq.s *               * branch if Z set
01:00000DA8 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
01:00000DAE 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
01:00000DB2 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
01:00000DB4 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
01:00000DB6 7000            	  1375:             moveq  #$00000000,d0      * populate test data
01:00000DB8 08C00000        	  1376:             bset.l #0,d0
01:00000DBC 66FE            	  1377:             bne.s *               * branch if Z clear
01:00000DBE 08C00001        	  1378:             bset.l #1,d0              *
01:00000DC2 66FE            	  1379:             bne.s *               * branch if Z clear
01:00000DC4 08C0000F        	  1380:             bset.l #15,d0             *
01:00000DC8 66FE            	  1381:             bne.s *               * branch if Z clear
01:00000DCA 08C0001F        	  1382:             bset.l #31,d0             *
01:00000DCE 66FE            	  1383:             bne.s *               * branch if Z clear
01:00000DD0 0C8080008003    	  1384:             cmpi.l #$80008003,d0
01:00000DD6 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
01:00000DD8 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DDC 4210            	  1390:             move.b #$00,(a0)          * populate test data
01:00000DDE 08D00000        	  1391:             bset.b #0,(a0)
01:00000DE2 66FE            	  1392:             bne.s *               * branch if Z clear
01:00000DE4 08D00007        	  1393:             bset.b #7,(a0)            *
01:00000DE8 66FE            	  1394:             bne.s *               * branch if Z clear
01:00000DEA 0C100081        	  1395:             cmpi.b #$81,(a0)
01:00000DEE 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
01:00000DF0 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DF4 4218            	  1400:             move.b #$00,(a0)+         * populate test data
01:00000DF6 4218            	  1401:             move.b #$00,(a0)+         * populate test data
01:00000DF8 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DFC 08D80000        	  1403:             bset.b #0,(a0)+
01:00000E00 66FE            	  1404:             bne.s *               * branch if Z clear
01:00000E02 08D80001        	  1405:             bset.b #1,(a0)+           *
01:00000E06 66FE            	  1406:             bne.s *               * branch if Z clear
01:00000E08 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E0C 0C180001        	  1408:             cmpi.b #$01,(a0)+
01:00000E10 66FE            	  1409:             bne.s *               * branch if Z clear
01:00000E12 0C180002        	  1410:             cmpi.b #$02,(a0)+
01:00000E16 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
01:00000E18 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
01:00000E1C 4218            	  1416:             move.b #$00,(a0)+         * populate test data
01:00000E1E 4218            	  1417:             move.b #$00,(a0)+         * populate test data
01:00000E20 08E00007        	  1418:             bset.b #7,-(a0)
01:00000E24 66FE            	  1419:             bne.s *               * branch if Z clear
01:00000E26 08E00000        	  1420:             bset.b #0,-(a0)           *
01:00000E2A 66FE            	  1421:             bne.s *               * branch if Z clear
01:00000E2C 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000E30 0C200080        	  1423:             cmpi.b #$80,-(a0)
01:00000E34 66FE            	  1424:             bne.s *               * branch if Z clear
01:00000E36 0C200001        	  1425:             cmpi.b #$01,-(a0)
01:00000E3A 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
01:00000E3C 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
01:00000E40 4218            	  1431:             move.b #$00,(a0)+         * populate test data
01:00000E42 4218            	  1432:             move.b #$00,(a0)+         * populate test data
01:00000E44 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
01:00000E48 08D00000        	  1434:             bset.b #0,0(a0)
01:00000E4C 66FE            	  1435:             bne.s *               * branch if Z clear
01:00000E4E 08E800040001    	  1436:             bset.b #4,1(a0)           *
01:00000E54 66FE            	  1437:             bne.s *               * branch if Z clear
01:00000E56 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E5A 0C180001        	  1439:             cmpi.b #$01,(a0)+
01:00000E5E 66FE            	  1440:             bne.s *               * branch if Z clear
01:00000E60 0C180010        	  1441:             cmpi.b #$10,(a0)+
01:00000E64 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
01:00000E66 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
01:00000E6A 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
01:00000E6C 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
01:00000E70 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
01:00000E72 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
01:00000E74 4218            	  1451:             move.b #$00,(a0)+         * populate test data
01:00000E76 4218            	  1452:             move.b #$00,(a0)+         * populate test data
01:00000E78 4218            	  1453:             move.b #$00,(a0)+         * populate test data
01:00000E7A 4218            	  1454:             move.b #$00,(a0)+         * populate test data
01:00000E7C 4218            	  1455:             move.b #$00,(a0)+         * populate test data
01:00000E7E 4218            	  1456:             move.b #$00,(a0)+         * populate test data
01:00000E80 4218            	  1457:             move.b #$00,(a0)+         * populate test data
01:00000E82 4218            	  1458:             move.b #$00,(a0)+         * populate test data
01:00000E84 4218            	  1459:             move.b #$00,(a0)+         * populate test data
01:00000E86 4218            	  1460:             move.b #$00,(a0)+         * populate test data
01:00000E88 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
01:00000E8C 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
01:00000E92 66FE            	  1463:             bne.s *               * branch if Z clear
01:00000E94 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
01:00000E9A 66FE            	  1465:             bne.s *               * branch if Z clear
01:00000E9C 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
01:00000EA2 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
01:00000EA4 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
01:00000EAA 66FE            	  1470:             bne.s *               * branch if Z clear
01:00000EAC 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
01:00000EB2 66FE            	  1472:             bne.s *               * branch if Z clear
01:00000EB4 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
01:00000EBA 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
01:00000EBC 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
01:00000EC2 66FE            	  1477:             bne.s *               * branch if Z clear
01:00000EC4 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
01:00000ECA 66FE            	  1479:             bne.s *               * branch if Z clear
01:00000ECC 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
01:00000ED2 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
01:00000ED4 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
01:00000EDA 66FE            	  1484:             bne.s *               * branch if Z clear
01:00000EDC 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
01:00000EE2 66FE            	  1486:             bne.s *               * branch if Z clear
01:00000EE4 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
01:00000EEA 66FE            	  1488:             bne.s *               * branch if Z clear
01:00000EEC 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EF0 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
01:00000EF6 66FE            	  1491:             bne.s *               * branch if Z clear
01:00000EF8 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
01:00000EFE 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
01:00000F00 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
01:00000F04 4218            	  1499:             move.b #$00,(a0)+         * populate test data
01:00000F06 08F800000100    	  1500:             bset.b #0,$0100
01:00000F0C 66FE            	  1501:             bne.s *               * branch if Z clear
01:00000F0E 08F800010100    	  1502:             bset.b #1,$0100           *
01:00000F14 66FE            	  1503:             bne.s *               * branch if Z clear
01:00000F16 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F1A 0C180003        	  1505:             cmpi.b #$03,(a0)+
01:00000F1E 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
01:00000F20 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F26 4210            	  1511:             move.b #$00,(a0)          * populate test data
01:00000F28 08F900000000F100	  1512:             bset.b #0,$F100
01:00000F30 66FE            	  1513:             bne.s *               * branch if Z clear
01:00000F32 08F900010000F100	  1514:             bset.b #1,$F100       *
01:00000F3A 66FE            	  1515:             bne.s *               * branch if Z clear
01:00000F3C 08F900020000F100	  1516:             bset.b #2,$F100       *
01:00000F44 66FE            	  1517:             bne.s *               * branch if Z clear
01:00000F46 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F4C 0C180007        	  1519:             cmpi.b #$07,(a0)+
01:00000F50 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
01:00000F52 7000            	  1526:             moveq  #$00000000,d0      * populate test data
01:00000F54 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
01:00000F56 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
01:00000F58 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
01:00000F5A 0BC0            	  1531:             bset.l d5,d0
01:00000F5C 66FE            	  1532:             bne.s *               * branch if Z clear
01:00000F5E 0DC0            	  1533:             bset.l d6,d0              *
01:00000F60 66FE            	  1534:             bne.s *               * branch if Z clear
01:00000F62 0FC0            	  1535:             bset.l d7,d0             *
01:00000F64 66FE            	  1536:             bne.s *               * branch if Z clear
01:00000F66 0C8080000003    	  1537:             cmpi.l #$80000003,d0
01:00000F6C 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
01:00000F6E 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
01:00000F70 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
01:00000F72 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
01:00000F74 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F78 4210            	  1546:             move.b #$00,(a0)          * populate test data
01:00000F7A 0BD0            	  1547:             bset.b d5,(a0)
01:00000F7C 66FE            	  1548:             bne.s *               * branch if Z clear
01:00000F7E 0DD0            	  1549:             bset.b d6,(a0)            *
01:00000F80 66FE            	  1550:             bne.s *               * branch if Z clear
01:00000F82 0FD0            	  1551:             bset.b d7,(a0)            *
01:00000F84 66FE            	  1552:             bne.s *               * branch if Z clear
01:00000F86 0C100083        	  1553:             cmpi.b #$83,(a0)
01:00000F8A 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
01:00000F8C 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F90 4218            	  1559:             move.b #$00,(a0)+         * populate test data
01:00000F92 4218            	  1560:             move.b #$00,(a0)+         * populate test data
01:00000F94 4218            	  1561:             move.b #$00,(a0)+         * populate test data
01:00000F96 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F9A 0BD8            	  1563:             bset.b d5,(a0)+
01:00000F9C 66FE            	  1564:             bne.s *               * branch if Z clear
01:00000F9E 0DD8            	  1565:             bset.b d6,(a0)+           *
01:00000FA0 66FE            	  1566:             bne.s *               * branch if Z clear
01:00000FA2 0FD8            	  1567:             bset.b d7,(a0)+           *
01:00000FA4 66FE            	  1568:             bne.s *               * branch if Z clear
01:00000FA6 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FAA 0C180001        	  1570:             cmpi.b #$01,(a0)+
01:00000FAE 66FE            	  1571:             bne.s *               * branch if Z clear
01:00000FB0 0C180002        	  1572:             cmpi.b #$02,(a0)+
01:00000FB4 66FE            	  1573:             bne.s *               * branch if Z clear
01:00000FB6 0C180080        	  1574:             cmpi.b #$80,(a0)+
01:00000FBA 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
01:00000FBC 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
01:00000FC0 4218            	  1579:             move.b #$00,(a0)+         * populate test data
01:00000FC2 4218            	  1580:             move.b #$00,(a0)+         * populate test data
01:00000FC4 4218            	  1581:             move.b #$00,(a0)+         * populate test data
01:00000FC6 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
01:00000FCA 0BE0            	  1583:             bset.b d5,-(a0)
01:00000FCC 66FE            	  1584:             bne.s *               * branch if Z clear
01:00000FCE 0DE0            	  1585:             bset.b d6,-(a0)           *
01:00000FD0 66FE            	  1586:             bne.s *               * branch if Z clear
01:00000FD2 0FE0            	  1587:             bset.b d7,-(a0)           *
01:00000FD4 66FE            	  1588:             bne.s *               * branch if Z clear
01:00000FD6 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000FDA 0C200001        	  1590:             cmpi.b #$01,-(a0)
01:00000FDE 66FE            	  1591:             bne.s *               * branch if Z clear
01:00000FE0 0C200002        	  1592:             cmpi.b #$02,-(a0)
01:00000FE4 66FE            	  1593:             bne.s *               * branch if Z clear
01:00000FE6 0C200080        	  1594:             cmpi.b #$80,-(a0)
01:00000FEA 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
01:00000FEC 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
01:00000FF0 4218            	  1599:             move.b #$00,(a0)+         * populate test data
01:00000FF2 4218            	  1600:             move.b #$00,(a0)+         * populate test data
01:00000FF4 4218            	  1601:             move.b #$00,(a0)+         * populate test data
01:00000FF6 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
01:00000FFA 0BD0            	  1603:             bset.b d5,0(a0)
01:00000FFC 66FE            	  1604:             bne.s *               * branch if Z clear
01:00000FFE 0DE80001        	  1605:             bset.b d6,1(a0)           *
01:00001002 66FE            	  1606:             bne.s *               * branch if Z clear
01:00001004 0FE80002        	  1607:             bset.b d7,2(a0)           *
01:00001008 66FE            	  1608:             bne.s *               * branch if Z clear
01:0000100A 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000100E 0C180001        	  1610:             cmpi.b #$01,(a0)+
01:00001012 66FE            	  1611:             bne.s *               * branch if Z clear
01:00001014 0C180002        	  1612:             cmpi.b #$02,(a0)+
01:00001018 66FE            	  1613:             bne.s *               * branch if Z clear
01:0000101A 0C180080        	  1614:             cmpi.b #$80,(a0)+
01:0000101E 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
01:00001020 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
01:00001024 4218            	  1619:             move.b #$00,(a0)+         * populate test data
01:00001026 4218            	  1620:             move.b #$00,(a0)+         * populate test data
01:00001028 4218            	  1621:             move.b #$00,(a0)+         * populate test data
01:0000102A 4218            	  1622:             move.b #$00,(a0)+         * populate test data
01:0000102C 4218            	  1623:             move.b #$00,(a0)+         * populate test data
01:0000102E 4218            	  1624:             move.b #$00,(a0)+         * populate test data
01:00001030 4218            	  1625:             move.b #$00,(a0)+         * populate test data
01:00001032 4218            	  1626:             move.b #$00,(a0)+         * populate test data
01:00001034 4218            	  1627:             move.b #$00,(a0)+         * populate test data
01:00001036 4218            	  1628:             move.b #$00,(a0)+         * populate test data
01:00001038 4218            	  1629:             move.b #$00,(a0)+         * populate test data
01:0000103A 4218            	  1630:             move.b #$00,(a0)+         * populate test data
01:0000103C 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
01:00001040 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
01:00001042 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
01:00001046 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
01:00001048 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
01:0000104A 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
01:0000104E 66FE            	  1637:             bne.s *               * branch if Z clear
01:00001050 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
01:00001054 66FE            	  1639:             bne.s *               * branch if Z clear
01:00001056 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
01:0000105A 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
01:0000105C 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
01:00001060 66FE            	  1644:             bne.s *               * branch if Z clear
01:00001062 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
01:00001066 66FE            	  1646:             bne.s *               * branch if Z clear
01:00001068 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
01:0000106C 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
01:0000106E 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
01:00001072 66FE            	  1651:             bne.s *               * branch if Z clear
01:00001074 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
01:00001078 66FE            	  1653:             bne.s *               * branch if Z clear
01:0000107A 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
01:0000107E 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
01:00001080 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
01:00001084 66FE            	  1658:             bne.s *               * branch if Z clear
01:00001086 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
01:0000108A 66FE            	  1660:             bne.s *               * branch if Z clear
01:0000108C 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
01:00001090 66FE            	  1662:             bne.s *               * branch if Z clear
01:00001092 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
01:00001096 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
01:0000109C 66FE            	  1665:             bne.s *               * branch if Z clear
01:0000109E 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
01:000010A4 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
01:000010A6 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
01:000010AA 4218            	  1672:             move.b #$00,(a0)+         * populate test data
01:000010AC 4218            	  1673:             move.b #$00,(a0)+         * populate test data
01:000010AE 4218            	  1674:             move.b #$00,(a0)+         * populate test data
01:000010B0 0BF80100        	  1675:             bset.b d5,$0100
01:000010B4 66FE            	  1676:             bne.s *               * branch if Z clear
01:000010B6 0DF80100        	  1677:             bset.b d6,$0100           *
01:000010BA 66FE            	  1678:             bne.s *               * branch if Z clear
01:000010BC 0FF80100        	  1679:             bset.b d7,$0100           *
01:000010C0 66FE            	  1680:             bne.s *               * branch if Z clear
01:000010C2 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
01:000010C6 0C180083        	  1682:             cmpi.b #$83,(a0)+
01:000010CA 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
01:000010CC 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
01:000010D2 4218            	  1687:             move.b #$00,(a0)+         * populate test data
01:000010D4 4218            	  1688:             move.b #$00,(a0)+         * populate test data
01:000010D6 4218            	  1689:             move.b #$00,(a0)+         * populate test data
01:000010D8 0BF90000F100    	  1690:             bset.b d5,$F100
01:000010DE 66FE            	  1691:             bne.s *               * branch if Z clear
01:000010E0 0DF90000F100    	  1692:             bset.b d6,$F100       *
01:000010E6 66FE            	  1693:             bne.s *               * branch if Z clear
01:000010E8 0FF90000F100    	  1694:             bset.b d7,$F100       *
01:000010EE 66FE            	  1695:             bne.s *               * branch if Z clear
01:000010F0 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
01:000010F6 0C100083        	  1697:             cmpi.b #$83,(a0)
01:000010FA 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
01:000010FC 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
01:000010FE 307C0100        	  1711:             move.l #$00000100,a0
01:00001102 203C12345678    	  1712:             move.l #$12345678,d0
01:00001108 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
01:0000110E 4290            	  1714:             move.l #0,(a0)
01:00001110 42A80004        	  1715:             move.l #0,4(a0)
                            	  1716: 
01:00001114 01880000        	  1717:             movep.w d0,0(a0)      * even offset
01:00001118 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
01:0000111C 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
01:00001120 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
01:00001124 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
01:0000112A 66FE            	  1724:             bne.s *
01:0000112C 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
01:00001134 66FE            	  1726:             bne.s *
01:00001136 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
01:0000113E 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
01:00001140 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
01:00001146 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
01:0000114C 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
01:00001152 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
01:00001158 01080000        	  1737:             movep.w 0(a0),d0      * even offset
01:0000115C 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
01:00001160 05480004        	  1740:             movep.l 4(a0),d2      * even offset
01:00001164 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
01:00001168 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
01:0000116E 66FE            	  1744:             bne.s *
01:00001170 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
01:00001176 66FE            	  1746:             bne.s *
01:00001178 0C8212345678    	  1747:             cmpi.l #$12345678,d2
01:0000117E 66FE            	  1748:             bne.s *
01:00001180 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
01:00001186 66FE            	  1750:             bne.s *
                            	  1751: 
01:00001188 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
01:0000118A 203C12345678    	  1764:             move.l #$12345678,d0
01:00001190 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
01:00001194 000000FF        	  1766:             ori.b  #$FF,d0
01:00001198 0A00005A        	  1767:             eori.b #$5A,d0
01:0000119C 020000F0        	  1768:             andi.b #$F0,d0
01:000011A0 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
01:000011A2 65FE            	  1770:             bcs.s *
01:000011A4 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
01:000011A6 4200            	  1772:             andi.b #$00,d0
01:000011A8 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
01:000011AA 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
01:000011AC 223C12345678    	  1777:             move.l #$12345678,d1
01:000011B2 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
01:000011B6 0041FFFF        	  1779:             ori.w  #$FFFF,d1
01:000011BA 0A415A5A        	  1780:             eori.w #$5A5A,d1
01:000011BE 0241F0F0        	  1781:             andi.w #$F0F0,d1
01:000011C2 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
01:000011C4 65FE            	  1783:             bcs.s *
01:000011C6 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
01:000011C8 4241            	  1785:             andi.w #$0000,d1
01:000011CA 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
01:000011CC 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
01:000011CE 243C12345678    	  1790:             move.l #$12345678,d2
01:000011D4 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
01:000011D8 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
01:000011DE 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
01:000011E4 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
01:000011EA 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
01:000011EC 65FE            	  1796:             bcs.s *
01:000011EE 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
01:000011F0 4282            	  1798:             andi.l #$00000000,d2
01:000011F2 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
01:000011F4 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
01:000011F6 307C0100        	  1804:             move.l #$00000100,a0
01:000011FA 20BC12345678    	  1805:             move.l #$12345678,(a0)
01:00001200 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
01:00001204 001000FF        	  1807:             ori.b  #$FF,(a0)
01:00001208 0A10005A        	  1808:             eori.b #$5A,(a0)
01:0000120C 021000F0        	  1809:             andi.b #$F0,(a0)
01:00001210 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
01:00001212 65FE            	  1811:             bcs.s *
01:00001214 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
01:00001216 4210            	  1813:             andi.b #$00,(a0)
01:00001218 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
01:0000121A 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
01:0000121C 4A10            	  1816:             cmpi.b #$00,(a0)
01:0000121E 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
01:00001220 20BC12345678    	  1820:             move.l #$12345678,(a0)
01:00001226 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
01:0000122A 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
01:0000122E 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
01:00001232 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
01:00001236 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
01:00001238 65FE            	  1826:             bcs.s *
01:0000123A 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
01:0000123C 4250            	  1828:             andi.w #$0000,(a0)
01:0000123E 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
01:00001240 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
01:00001242 4A50            	  1831:             cmpi.w #$00,(a0)
01:00001244 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
01:00001246 20BC12345678    	  1835:             move.l #$12345678,(a0)
01:0000124C 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
01:00001250 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
01:00001256 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
01:0000125C 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
01:00001262 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
01:00001264 65FE            	  1841:             bcs.s *
01:00001266 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
01:00001268 4290            	  1843:             andi.l #$00000000,(a0)
01:0000126A 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
01:0000126C 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
01:0000126E 4A90            	  1846:             cmpi.l #$00,(a0)
01:00001270 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
01:00001272 307C0100        	  1852:             move.l #$00000100,a0
01:00001276 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
01:0000127C 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
01:00001280 001800F5        	  1856:             ori.b  #$F5,(a0)+
01:00001284 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
01:00001286 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
01:00001288 4618            	  1860:             eori.b #$FF,(a0)+
01:0000128A 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
01:0000128C 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
01:0000128E 021800AA        	  1864:             andi.b #$AA,(a0)+
01:00001292 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
01:00001294 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
01:00001296 307C0100        	  1868:             move.l #$00000100,a0
01:0000129A 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
01:000012A0 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
01:000012A2 307C0100        	  1874:             move.l #$00000100,a0
01:000012A6 327C0104        	  1875:             move.l #$00000104,a1
01:000012AA 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
01:000012B0 22BC12345678    	  1877:             move.l #$12345678,(a1)
01:000012B6 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
01:000012BA 00585678        	  1880:             ori.w  #$5678,(a0)+
01:000012BE 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
01:000012C0 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
01:000012C2 4658            	  1884:             eori.w #$FFFF,(a0)+
01:000012C4 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
01:000012C6 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
01:000012C8 0258A55A        	  1888:             andi.w #$A55A,(a0)+
01:000012CC 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
01:000012CE 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
01:000012D0 307C0100        	  1892:             move.l #$00000100,a0
01:000012D4 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
01:000012DA 307C0104        	  1894:             move.l #$00000104,a0
01:000012DE 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
01:000012E4 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
01:000012E6 307C0100        	  1899:             move.l #$00000100,a0
01:000012EA 4298            	  1900:             move.l #$00000000,(a0)+
01:000012EC 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
01:000012F2 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
01:000012F8 307C0100        	  1903:             move.l #$00000100,a0
01:000012FC 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
01:00001300 009812345678    	  1906:             ori.l  #$12345678,(a0)+
01:00001306 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
01:00001308 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
01:0000130A 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
01:0000130C 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
01:0000130E 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
01:00001310 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
01:00001316 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
01:00001318 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
01:0000131A 307C0100        	  1918:             move.l #$00000100,a0
01:0000131E 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
01:00001324 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
01:0000132A 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
01:00001330 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
01:00001332 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
01:00001334 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
01:0000133A 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
01:0000133C 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:0000133E 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:00001340 6100EF20        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:00001344 6100143E        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
01:00001348 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
01:0000134E 66FE            	  1945:                 bne.s *
01:00001350 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
01:00001356 66FE            	  1947:                 bne.s *
01:00001358 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
01:0000135E 66FE            	  1949:                 bne.s *
01:00001360 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
01:00001366 66FE            	  1951:                 bne.s *
                            	  1952: 
01:00001368 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
01:0000136A 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
01:00001370 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
01:00001372 307C0100        	  1966:             move.l #$00000100,a0
01:00001376 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
01:0000137C 7080            	  1970:             move.l #$FFFFFF80,d0
01:0000137E 0C000080        	  1971:             cmpi.b #$80,d0
01:00001382 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
01:00001384 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001386 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001388 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
01:0000138A 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
01:00001390 4A01            	  1978:             cmpi.b #$00,d1
01:00001392 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
01:00001394 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001396 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001398 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
01:0000139A 7481D442        	  1984:             move.l #$FFFFFF02,d2
01:0000139E 0C0200FF        	  1985:             cmpi.b #$FF,d2
01:000013A2 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
01:000013A4 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013A6 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013A8 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
01:000013AA 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
01:000013B0 0C0300FF        	  1992:             cmpi.b #$FF,d3
01:000013B4 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
01:000013B6 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013B8 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013BA 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
01:000013BC 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
01:000013C2 0C408000        	  2001:             cmpi.w #$8000,d0
01:000013C6 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
01:000013C8 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013CA 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013CC 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
01:000013CE 223CFFF00000    	  2007:             move.l #$FFF00000,d1
01:000013D4 4A41            	  2008:             cmpi.w #$0000,d1
01:000013D6 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
01:000013D8 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013DA 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013DC 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
01:000013DE 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
01:000013E4 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
01:000013E8 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
01:000013EA 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013EC 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013EE 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
01:000013F0 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
01:000013F6 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
01:000013FA 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
01:000013FC 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013FE 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001400 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
01:00001402 203C80000000    	  2029:             move.l #$80000000,d0
01:00001408 0C8080000000    	  2030:             cmpi.l #$80000000,d0
01:0000140E 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
01:00001410 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001412 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001414 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
01:00001416 7200            	  2036:             moveq  #$00000000,d1
01:00001418 4A81            	  2037:             cmpi.l #$00000000,d1
01:0000141A 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
01:0000141C 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000141E 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001420 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
01:00001422 7402            	  2043:             moveq  #$00000002,d2
01:00001424 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
01:0000142A 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
01:0000142C 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000142E 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001430 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
01:00001432 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
01:00001438 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
01:0000143E 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
01:00001440 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001442 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001444 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
01:00001446 307C0100        	  2061:             move.l #$00000100,a0
01:0000144A 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
01:0000144C 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
01:00001454 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
01:0000145C 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
01:00001462 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
01:00001464 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001466 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001468 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
01:0000146A 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
01:00001472 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
01:00001476 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
01:00001478 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000147A 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000147C 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
01:0000147E 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
01:00001486 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
01:0000148C 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
01:0000148E 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001490 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001492 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
01:00001494 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
01:0000149C 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
01:000014A2 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
01:000014A4 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014A6 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014A8 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
01:000014AA 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
01:000014B2 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
01:000014B8 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
01:000014BA 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014BC 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014BE 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
01:000014C0 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
01:000014C8 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
01:000014CC 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
01:000014CE 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014D0 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014D2 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
01:000014D4 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
01:000014DC 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
01:000014E2 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
01:000014E4 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014E6 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014E8 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
01:000014EA 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
01:000014F2 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
01:000014F8 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
01:000014FA 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014FC 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014FE 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
01:00001500 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
01:00001508 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
01:00001510 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
01:00001512 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001514 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001516 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
01:00001518 42B0700C        	  2131:             move.l #$00000000,12(a0,d7)
01:0000151C 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
01:00001520 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
01:00001522 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001524 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001526 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
01:00001528 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
01:00001530 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001538 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
01:0000153A 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000153C 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000153E 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
01:00001540 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
01:00001548 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001550 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
01:00001552 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001554 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001556 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
01:00001558 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
01:0000155A 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
01:00001560 06000000        	  2168:             addi.b #0,d0
01:00001564 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
01:00001566 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001568 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000156A 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000156C 06000010        	  2173:             addi.b #$10,d0
01:00001570 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
01:00001572 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001574 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001576 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001578 060000A5        	  2178:             addi.b #$A5,d0
01:0000157C 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
01:0000157E 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001580 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001582 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001584 0C00002D        	  2183:             cmpi.b #$2D,d0
01:00001588 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
01:0000158A 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
01:00001590 06400000        	  2188:             addi.w #0,d0
01:00001594 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
01:00001596 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001598 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000159A 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000159C 06407000        	  2193:             addi.w #$7000,d0
01:000015A0 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
01:000015A2 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015A4 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015A6 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015A8 0640A55A        	  2198:             addi.w #$A55A,d0
01:000015AC 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
01:000015AE 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015B0 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015B2 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015B4 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
01:000015B8 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
01:000015BA 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
01:000015C0 068000000000    	  2208:             addi.l #0,d0
01:000015C6 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
01:000015C8 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015CA 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015CC 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015CE 0680F0000000    	  2213:             addi.l #$F0000000,d0
01:000015D4 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
01:000015D6 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015D8 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015DA 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015DC 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
01:000015E2 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
01:000015E4 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015E6 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015E8 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015EA 0680A0000000    	  2223:             addi.l #$A0000000,d0
01:000015F0 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015F2 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
01:000015F8 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
01:000015FA 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
01:00001600 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
01:00001606 063900000000F103	  2233:             addi.b #0,$F103
01:0000160E 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
01:00001610 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001612 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001614 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001616 063900100000F103	  2238:             addi.b #$10,$F103
01:0000161E 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
01:00001620 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001622 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001624 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001626 063900A50000F103	  2243:             addi.b #$A5,$F103
01:0000162E 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
01:00001630 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001632 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001634 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001636 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
01:0000163E 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
01:00001640 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
01:00001646 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
01:0000164C 067900000000F100	  2254:             addi.w #0,$F100
01:00001654 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
01:00001656 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001658 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000165A 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000165C 067970000000F100	  2259:             addi.w #$7000,$F100
01:00001664 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
01:00001666 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001668 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000166A 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000166C 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
01:00001674 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
01:00001676 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001678 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000167A 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000167C 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
01:00001684 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
01:00001686 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
01:0000168E F100
01:00001690 06B9000000000000	  2274:             addi.l #0,$F100
01:00001698 F100
01:0000169A 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
01:0000169C 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000169E 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016A0 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016A2 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
01:000016AA F100
01:000016AC 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
01:000016AE 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016B0 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016B2 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016B4 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
01:000016BC F100
01:000016BE 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
01:000016C0 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016C2 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016C4 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016C6 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
01:000016CE F100
01:000016D0 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016D2 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
01:000016DA F100
01:000016DC 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
01:000016DE 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
01:000016E0 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
01:000016E6 04000000        	  2306:             subi.b #0,d0
01:000016EA 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
01:000016EC 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016EE 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016F0 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016F2 04000010        	  2311:             subi.b #$10,d0
01:000016F6 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
01:000016F8 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016FA 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016FC 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016FE 040000A5        	  2316:             subi.b #$A5,d0
01:00001702 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
01:00001704 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001706 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001708 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000170A 0C0000C3        	  2321:             cmpi.b #$C3,d0
01:0000170E 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
01:00001710 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
01:00001716 04400000        	  2326:             subi.w #0,d0
01:0000171A 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
01:0000171C 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000171E 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001720 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001722 04407000        	  2331:             subi.w #$7000,d0
01:00001726 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
01:00001728 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000172A 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000172C 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000172E 0440A55A        	  2336:             subi.w #$A55A,d0
01:00001732 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
01:00001734 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001736 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001738 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000173A 0C40411E        	  2341:             cmpi.w #$411E,d0
01:0000173E 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
01:00001740 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
01:00001746 048000000000    	  2346:             subi.l #0,d0
01:0000174C 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
01:0000174E 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001750 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001752 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001754 0480F0000000    	  2351:             subi.l #$F0000000,d0
01:0000175A 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
01:0000175C 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000175E 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001760 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001762 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
01:00001768 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
01:0000176A 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000176C 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000176E 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001770 0480A0000000    	  2361:             subi.l #$A0000000,d0
01:00001776 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001778 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
01:0000177E 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
01:00001780 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
01:00001786 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
01:0000178C 043900000000F103	  2371:             subi.b #0,$F103
01:00001794 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
01:00001796 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001798 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000179A 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000179C 043900100000F103	  2376:             subi.b #$10,$F103
01:000017A4 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
01:000017A6 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017A8 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017AA 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017AC 043900A50000F103	  2381:             subi.b #$A5,$F103
01:000017B4 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
01:000017B6 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017B8 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017BA 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017BC 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
01:000017C4 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
01:000017C6 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
01:000017CC 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
01:000017D2 047900000000F100	  2392:             subi.w #0,$F100
01:000017DA 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
01:000017DC 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017DE 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017E0 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017E2 047970000000F100	  2397:             subi.w #$7000,$F100
01:000017EA 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
01:000017EC 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017EE 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017F0 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017F2 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
01:000017FA 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
01:000017FC 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017FE 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001800 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001802 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
01:0000180A 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
01:0000180C 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
01:00001814 F100
01:00001816 04B9000000000000	  2412:             subi.l #0,$F100
01:0000181E F100
01:00001820 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
01:00001822 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001824 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001826 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001828 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
01:00001830 F100
01:00001832 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
01:00001834 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001836 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001838 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000183A 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
01:00001842 F100
01:00001844 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
01:00001846 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001848 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000184A 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000184C 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
01:00001854 F100
01:00001856 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001858 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
01:00001860 F100
01:00001862 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
01:00001864 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
01:00001866 203C11223344    	  2442:             move.l #$11223344,d0
01:0000186C 223C55667788    	  2443:             move.l #$55667788,d1
01:00001872 243C8899AABB    	  2444:             move.l #$8899aabb,d2
01:00001878 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
01:0000187E 7800            	  2446:             moveq  #$00000000,d4
01:00001880 7A00            	  2447:             moveq  #$00000000,d5
01:00001882 7C00            	  2448:             moveq  #$00000000,d6
01:00001884 7E00            	  2449:             moveq  #$00000000,d7
01:00001886 207C44332211    	  2450:             move.l #$44332211,a0
01:0000188C 227C88776655    	  2451:             move.l #$88776655,a1
01:00001892 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
01:00001898 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
01:0000189E 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
01:000018A0 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
01:000018A2 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018A4 0C8400000044    	  2458:             cmpi.l #$00000044,d4
01:000018AA 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
01:000018AC 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
01:000018AE 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
01:000018B0 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018B2 0C8500007788    	  2464:             cmpi.l #$00007788,d5
01:000018B8 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
01:000018BA 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
01:000018BC 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
01:000018BE 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018C0 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
01:000018C6 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
01:000018C8 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:000018CA 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
01:000018CC 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018CE 0C8500006655    	  2476:             cmpi.l #$00006655,d5
01:000018D4 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
01:000018D6 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:000018D8 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
01:000018DA 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018DC 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
01:000018E2 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
01:000018E4 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018E6 B9C2            	  2487:             cmpa.l d2,a4
01:000018E8 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
01:000018EA 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018EC BBC1            	  2491:             cmpa.l d1,a5
01:000018EE 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
01:000018F0 203C11223344    	  2498:             move.l #$11223344,d0
01:000018F6 223C00010100    	  2499:             move.l #$00010100,d1
01:000018FC 243C8899AABB    	  2500:             move.l #$8899aabb,d2
01:00001902 7601            	  2501:             moveq  #$00000001,d3
01:00001904 7800            	  2502:             moveq  #$00000000,d4
01:00001906 7A00            	  2503:             moveq  #$00000000,d5
01:00001908 7C00            	  2504:             moveq  #$00000000,d6
01:0000190A 7E00            	  2505:             moveq  #$00000000,d7
01:0000190C 91C8            	  2506:             move.l #$00000000,a0
01:0000190E 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
01:00001914 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
01:0000191A 47F09804        	  2511:             lea 4(a0,a1.l),a3
01:0000191E 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
01:00001926 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
01:00001928 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000192A 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
01:00001930 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
01:00001932 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:0000193A 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
01:0000193C 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000193E 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
01:00001944 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
01:00001946 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:0000194C 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
01:0000194E 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001950 0C3900B900001933	  2529:             cmpi.b #$B9,1+MOVE2
01:00001958 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
01:0000195A 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
01:00001960 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
01:00001962 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001964 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
01:0000196A 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
01:0000196C 203C11223344    	  2539:             move.l #$11223344,d0
01:00001972 223C00010100    	  2540:             move.l #$00010100,d1
01:00001978 243C8899AABB    	  2541:             move.l #$8899aabb,d2
01:0000197E 7602            	  2542:             moveq  #$00000002,d3
01:00001980 7800            	  2543:             moveq  #$00000000,d4
01:00001982 7A00            	  2544:             moveq  #$00000000,d5
01:00001984 7C00            	  2545:             moveq  #$00000000,d6
01:00001986 7E00            	  2546:             moveq  #$00000000,d7
01:00001988 91C8            	  2547:             move.l #$00000000,a0
01:0000198A 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
01:00001990 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:00001996 49F09804        	  2552:             lea 4(a0,a1.l),a4
01:0000199A 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
01:000019A2 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
01:000019A4 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019A6 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
01:000019AC 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
01:000019AE 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000019B6 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
01:000019B8 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019BA 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
01:000019C0 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
01:000019C2 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
01:000019C8 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
01:000019CA 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019CC 0C7967FE000019B6	  2570:             cmpi.w #$67FE,8+MOVE1
01:000019D4 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
01:000019D6 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
01:000019DC 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
01:000019DE 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019E0 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
01:000019E6 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
01:000019E8 203C11223344    	  2582:             move.l #$11223344,d0
01:000019EE 223C00010100    	  2583:             move.l #$00010100,d1
01:000019F4 243C8899AABB    	  2584:             move.l #$8899aabb,d2
01:000019FA 7602            	  2585:             moveq  #$00000002,d3
01:000019FC 7800            	  2586:             moveq  #$00000000,d4
01:000019FE 7A00            	  2587:             moveq  #$00000000,d5
01:00001A00 7C00            	  2588:             moveq  #$00000000,d6
01:00001A02 7E00            	  2589:             moveq  #$00000000,d7
01:00001A04 91C8            	  2590:             move.l #$00000000,a0
01:00001A06 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
01:00001A0C 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:00001A14 49F09804        	  2595:             lea 4(a0,a1.l),a4
01:00001A18 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
01:00001A20 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
01:00001A22 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A24 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001A2C 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
01:00001A2E 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:00001A36 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
01:00001A38 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A3A 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001A42 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
01:00001A44 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001A4A 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
01:00001A4C 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A4E 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
01:00001A56 1A36
01:00001A58 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
01:00001A5A 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001A62 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
01:00001A64 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A66 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
01:00001A6E 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
01:00001A70 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
01:00001A72 303C2FFF        	  2638:             move.w #$2FFF,d0
01:00001A76 46C0            	  2639:             move.w d0,SR
01:00001A78 6AFE            	  2640:             bpl.s *           * branch if Z clear
01:00001A7A 66FE            	  2641:             bne.s *           * branch if N clear
01:00001A7C 68FE            	  2642:             bvc.s *           * branch if V clear
01:00001A7E 64FE            	  2643:             bcc.s *           * branch if C clear
01:00001A80 303C2F00        	  2644:             move.w #$2F00,d0
01:00001A84 44C0            	  2645:             move d0,CCR
01:00001A86 67FE            	  2646:             beq.s *           * branch if Z set
01:00001A88 6BFE            	  2647:             bmi.s *           * branch if N set
01:00001A8A 69FE            	  2648:             bvs.s *           * branch if V set
01:00001A8C 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
01:00001A8E 303C2000        	  2651:             move.w #$2000,d0
01:00001A92 46C0            	  2652:             move.w d0,SR
01:00001A94 67FE            	  2653:             beq.s *           * branch if Z set
01:00001A96 6BFE            	  2654:             bmi.s *           * branch if N set
01:00001A98 69FE            	  2655:             bvs.s *           * branch if V set
01:00001A9A 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
01:00001A9C 307C0100        	  2659:             move.l #$00000100,a0
01:00001AA0 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
01:00001AA4 46D0            	  2661:             move.w (a0),SR
01:00001AA6 6AFE            	  2662:             bpl.s *           * branch if Z clear
01:00001AA8 66FE            	  2663:             bne.s *           * branch if N clear
01:00001AAA 68FE            	  2664:             bvc.s *           * branch if V clear
01:00001AAC 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
01:00001AAE 30BC2000        	  2667:             move.w #$2000,(a0)
01:00001AB2 46D0            	  2668:             move.w (a0),SR
01:00001AB4 67FE            	  2669:             beq.s *           * branch if Z set
01:00001AB6 6BFE            	  2670:             bmi.s *           * branch if N set
01:00001AB8 69FE            	  2671:             bvs.s *           * branch if V set
01:00001ABA 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
01:00001ABC 307C0100        	  2675:             move.l #$00000100,a0
01:00001AC0 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
01:00001AC4 46D8            	  2677:             move.w (a0)+,SR
01:00001AC6 6AFE            	  2678:             bpl.s *           * branch if Z clear
01:00001AC8 66FE            	  2679:             bne.s *           * branch if N clear
01:00001ACA 68FE            	  2680:             bvc.s *           * branch if V clear
01:00001ACC 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
01:00001ACE 30BC2000        	  2683:             move.w #$2000,(a0)
01:00001AD2 46D8            	  2684:             move.w (a0)+,SR
01:00001AD4 67FE            	  2685:             beq.s *           * branch if Z set
01:00001AD6 6BFE            	  2686:             bmi.s *           * branch if N set
01:00001AD8 69FE            	  2687:             bvs.s *           * branch if V set
01:00001ADA 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
01:00001ADC 307C0102        	  2691:             move.l #$00000102,a0
01:00001AE0 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
01:00001AE4 46D8            	  2693:             move.w (a0)+,SR
01:00001AE6 6AFE            	  2694:             bpl.s *           * branch if Z clear
01:00001AE8 66FE            	  2695:             bne.s *           * branch if N clear
01:00001AEA 68FE            	  2696:             bvc.s *           * branch if V clear
01:00001AEC 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
01:00001AEE 30BC2000        	  2699:             move.w #$2000,(a0)
01:00001AF2 46D8            	  2700:             move.w (a0)+,SR
01:00001AF4 67FE            	  2701:             beq.s *           * branch if Z set
01:00001AF6 6BFE            	  2702:             bmi.s *           * branch if N set
01:00001AF8 69FE            	  2703:             bvs.s *           * branch if V set
01:00001AFA 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
01:00001AFC 307C0102        	  2707:             move.l #$00000102,a0
01:00001B00 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
01:00001B06 46E80002        	  2709:             move.w 2(a0),SR
01:00001B0A 6AFE            	  2710:             bpl.s *           * branch if Z clear
01:00001B0C 66FE            	  2711:             bne.s *           * branch if N clear
01:00001B0E 68FE            	  2712:             bvc.s *           * branch if V clear
01:00001B10 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
01:00001B12 317C20000002    	  2715:             move.w #$2000,2(a0)
01:00001B18 46E80002        	  2716:             move.w 2(a0),SR
01:00001B1C 67FE            	  2717:             beq.s *           * branch if Z set
01:00001B1E 6BFE            	  2718:             bmi.s *           * branch if N set
01:00001B20 69FE            	  2719:             bvs.s *           * branch if V set
01:00001B22 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
01:00001B24 307C0100        	  2723:             move.l #$00000100,a0
01:00001B28 7002            	  2724:             moveq  #$00000002,d0
01:00001B2A 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
01:00001B30 46F00802        	  2726:             move.w 2(a0,d0.l),SR
01:00001B34 6AFE            	  2727:             bpl.s *           * branch if Z clear
01:00001B36 66FE            	  2728:             bne.s *           * branch if N clear
01:00001B38 68FE            	  2729:             bvc.s *           * branch if V clear
01:00001B3A 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
01:00001B3C 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
01:00001B42 46F00802        	  2733:             move.w 2(a0,d0.l),SR
01:00001B46 67FE            	  2734:             beq.s *           * branch if Z set
01:00001B48 6BFE            	  2735:             bmi.s *           * branch if N set
01:00001B4A 69FE            	  2736:             bvs.s *           * branch if V set
01:00001B4C 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
01:00001B4E 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
01:00001B54 46F80100        	  2741:             move.w $0100,SR
01:00001B58 6AFE            	  2742:             bpl.s *           * branch if Z clear
01:00001B5A 66FE            	  2743:             bne.s *           * branch if N clear
01:00001B5C 68FE            	  2744:             bvc.s *           * branch if V clear
01:00001B5E 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
01:00001B60 31FC20000100    	  2747:             move.w #$2000,$0100
01:00001B66 46F80100        	  2748:             move.w $0100,SR
01:00001B6A 67FE            	  2749:             beq.s *           * branch if Z set
01:00001B6C 6BFE            	  2750:             bmi.s *           * branch if N set
01:00001B6E 69FE            	  2751:             bvs.s *           * branch if V set
01:00001B70 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
01:00001B72 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
01:00001B7A 46F900010100    	  2756:             move.w $00010100,SR
01:00001B80 6AFE            	  2757:             bpl.s *           * branch if Z clear
01:00001B82 66FE            	  2758:             bne.s *           * branch if N clear
01:00001B84 68FE            	  2759:             bvc.s *           * branch if V clear
01:00001B86 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
01:00001B88 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
01:00001B90 46F900010100    	  2763:             move.w $00010100,SR
01:00001B96 67FE            	  2764:             beq.s *           * branch if Z set
01:00001B98 6BFE            	  2765:             bmi.s *           * branch if N set
01:00001B9A 69FE            	  2766:             bvs.s *           * branch if V set
01:00001B9C 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
01:00001B9E 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
01:00001BA2 67FE            	  2771:             beq.s *           * branch if Z set
01:00001BA4 6BFE            	  2772:             bmi.s *           * branch if N set
01:00001BA6 69FE            	  2773:             bvs.s *           * branch if V set
01:00001BA8 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
01:00001BAA 7000            	  2777:             moveq  #$00000000,d0
01:00001BAC 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
01:00001BB0 67FE            	  2779:             beq.s *           * branch if Z set
01:00001BB2 6BFE            	  2780:             bmi.s *           * branch if N set
01:00001BB4 69FE            	  2781:             bvs.s *           * branch if V set
01:00001BB6 65FE            	  2782:             bcs.s *           * branch if C set
01:00001BB8 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
01:00001BBC 67FE            	  2784:             beq.s *           * branch if Z set
01:00001BBE 6BFE            	  2785:             bmi.s *           * branch if N set
01:00001BC0 69FE            	  2786:             bvs.s *           * branch if V set
01:00001BC2 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
01:00001BC4 46FC2FFF        	  2790:             move.w #$2FFF,SR
01:00001BC8 66FE            	  2791:             bne.s *           * branch if Z clear
01:00001BCA 6AFE            	  2792:             bpl.s *           * branch if N clear
01:00001BCC 68FE            	  2793:             bvc.s *           * branch if V clear
01:00001BCE 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
01:00001BD0 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
01:00001BD4 40C0            	  2804:             move.w SR,d0
01:00001BD6 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
01:00001BDA 307C0100        	  2810:             move.l #$00000100,a0
01:00001BDE 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
01:00001BE2 40D0            	  2812:             move.w SR,(a0)
01:00001BE4 0C50275A        	  2813:             cmpi.w #$275A,(a0)
01:00001BE8 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
01:00001BEA 307C0100        	  2817:             move.l #$00000100,a0
01:00001BEE 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
01:00001BF2 40D8            	  2819:             move.w SR,(a0)+
01:00001BF4 307C0100        	  2820:             move.l #$00000100,a0
01:00001BF8 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
01:00001BFC 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
01:00001BFE 307C0102        	  2825:             move.l #$00000102,a0
01:00001C02 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
01:00001C06 40E0            	  2827:             move.w SR,-(a0)
01:00001C08 307C0100        	  2828:             move.l #$00000100,a0
01:00001C0C 0C502766        	  2829:             cmpi.w #$2766,(a0)
01:00001C10 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
01:00001C12 307C0102        	  2833:             move.l #$00000102,a0
01:00001C16 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
01:00001C1A 40E80004        	  2835:             move.w SR,4(a0)
01:00001C1E 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
01:00001C24 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
01:00001C26 307C0102        	  2840:             move.l #$00000102,a0
01:00001C2A 7004            	  2841:             moveq  #$00000004,d0
01:00001C2C 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
01:00001C30 40F00804        	  2843:             move.w SR,4(a0,d0.l)
01:00001C34 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
01:00001C3A 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
01:00001C3C 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
01:00001C40 40F80102        	  2849:             move.w SR,$0102
01:00001C44 0C7827770102    	  2850:             cmpi.w #$2777,$0102
01:00001C4A 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
01:00001C4C 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
01:00001C50 40F900010102    	  2855:             move.w SR,$10102
01:00001C56 0C79277700010102	  2856:             cmpi.w #$2777,$10102
01:00001C5E 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
01:00001C60 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
01:00001C64 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
01:00001C66 707F            	  2873:             move.l #$0000007F,d0
01:00001C68 223C00008FFF    	  2874:             move.l #$00008FFF,d1
01:00001C6E 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
01:00001C70 4880            	  2877:             ext.w d0
01:00001C72 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C74 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
01:00001C76 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
01:00001C7C 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
01:00001C7E 48C1            	  2883:             ext.l d1
01:00001C80 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C82 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
01:00001C84 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
01:00001C8A 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
01:00001C8C 48C2            	  2889:             ext.l d2
01:00001C8E 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
01:00001C90 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
01:00001C92 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
01:00001C98 4840            	  2906:             swap d0
01:00001C9A 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C9C 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
01:00001C9E 0C8056781234    	  2909:             cmpi.l #$56781234,d0
01:00001CA4 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
01:00001CA6 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
01:00001CA8 207C00345678    	  2924:             move.l #$00345678,a0
01:00001CAE 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
01:00001CB0 4DD0            	  2928:             lea (a0),a6
01:00001CB2 200E            	  2929:             move.l a6,d0
01:00001CB4 0C8000345678    	  2930:             cmpi.l #$00345678,d0
01:00001CBA 66FE            	  2931:             bne.s *                   * branch if Z set
01:00001CBC 4850            	  2932:             pea (a0)
01:00001CBE 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
01:00001CC4 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
01:00001CC6 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
01:00001CC8 4DE80004        	  2939:             lea 4(a0),a6
01:00001CCC 200E            	  2940:             move.l a6,d0
01:00001CCE 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
01:00001CD4 66FE            	  2942:             bne.s *                   * branch if Z set
01:00001CD6 48680004        	  2943:             pea 4(a0)
01:00001CDA 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
01:00001CE0 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
01:00001CE2 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
01:00001CE4 4DF04004        	  2950:             lea 4(a0,d4),a6
01:00001CE8 200E            	  2951:             move.l a6,d0
01:00001CEA 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
01:00001CF0 66FE            	  2953:             bne.s *                   * branch if Z set
01:00001CF2 48704804        	  2954:             pea 4(a0,d4.l)
01:00001CF6 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
01:00001CFC 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
01:00001CFE 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
01:00001D00 4DF81234        	  2961:             lea $1234,a6
01:00001D04 200E            	  2962:             move.l a6,d0
01:00001D06 0C401234        	  2963:             cmpi.w #$1234,d0
01:00001D0A 66FE            	  2964:             bne.s *                   * branch if Z set
01:00001D0C 48781234        	  2965:             pea $1234
01:00001D10 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
01:00001D16 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
01:00001D18 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
01:00001D1A 4DF900345678    	  2972:             lea $00345678,a6
01:00001D20 200E            	  2973:             move.l a6,d0
01:00001D22 B08E            	  2974:             cmp.l a6,d0
01:00001D24 66FE            	  2975:             bne.s *                   * branch if Z set
01:00001D26 487900345678    	  2976:             pea $00345678
01:00001D2C 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
01:00001D32 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
01:00001D34 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
01:00001D36 4DFA0008        	  2983:             lea LEA1(pc),a6
01:00001D3A 200E            	  2984:             move.l a6,d0
01:00001D3C B08E            	  2985:             cmp.l a6,d0
01:00001D3E 66FE            	  2986:             bne.s *                   * branch if Z set
01:00001D40 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
01:00001D44 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
01:00001D4A 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
01:00001D4C 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
01:00001D4E 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
01:00001D52 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
01:00001D54 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
01:00001D58 4210            	  3014:             move.b #$00,(a0)
01:00001D5A 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D5C 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
01:00001D5E 4AD0            	  3017:             tas (a0)
01:00001D60 0C100080        	  3018:             cmpi.b #$80,(a0)
01:00001D64 66FE            	  3019:             bne.s *                   * branch if Z set
01:00001D66 10BC00F5        	  3020:             move.b #$F5,(a0)
01:00001D6A 4AD0            	  3021:             tas (a0)
01:00001D6C 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D6E 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
01:00001D70 4AD0            	  3024:             tas (a0)
01:00001D72 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
01:00001D76 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
01:00001D78 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
01:00001D7A 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
01:00001D7E 4210            	  3043:             move.b #$00,(a0)
01:00001D80 4A10            	  3044:             tst.b (a0)
01:00001D82 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D84 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
01:00001D86 10BC00F5        	  3047:             move.b #$F5,(a0)
01:00001D8A 4A10            	  3048:             tst.b (a0)
01:00001D8C 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D8E 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
01:00001D90 4250            	  3053:             move.w #$0000,(a0)
01:00001D92 4A50            	  3054:             tst.w (a0)
01:00001D94 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D96 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
01:00001D98 30BCF567        	  3057:             move.w #$F567,(a0)
01:00001D9C 4A50            	  3058:             tst.w (a0)
01:00001D9E 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DA0 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
01:00001DA2 4290            	  3063:             move.l #$00000000,(a0)
01:00001DA4 4A90            	  3064:             tst.l (a0)
01:00001DA6 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DA8 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
01:00001DAA 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
01:00001DB0 4A90            	  3068:             tst.l (a0)
01:00001DB2 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DB4 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
01:00001DB6 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
01:00001DB8 207C11223344    	  3083:             move.l #$11223344,a0
01:00001DBE 203C11223344    	  3084:             move.l #$11223344,d0
01:00001DC4 4E500000        	  3085:             link a0,#$0
01:00001DC8 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
01:00001DCE 4E58            	  3088:             unlk a0
01:00001DD0 B1C0            	  3089:             cmp.l d0,a0
01:00001DD2 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
01:00001DD4 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
01:00001DD6 207C11223344    	  3101:             move.l #$11223344,a0
01:00001DDC 4E60            	  3102:             move a0,USP
01:00001DDE 4E69            	  3103:             move USP,a1
01:00001DE0 B3C8            	  3104:             cmp.l a0,a1
01:00001DE2 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
01:00001DE4 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: op_CHK:
01:00001DE6 303C1122        	  3116:             move.w #$1122,d0
01:00001DEA 323C1122        	  3117:             move.w #$1122,d1
01:00001DEE 4380            	  3118:             chk d0,d1
                            	  3119: 
01:00001DF0 4E71            	  3120:             nop
01:00001DF2 4E71            	  3121:             nop
                            	  3122: 
01:00001DF4 323C1122        	  3123:             move.w #$1122,d1
01:00001DF8 43BC1122        	  3124:             chk #$1122,d1
                            	  3125: 
01:00001DFC 323C1122        	  3126:             move.w #$1122,d1
01:00001E00 43BC007A        	  3127:             chk #00122,d1
01:00001E04 BCBCEEEE0006    	  3128:             cmp.l #$EEEE0006,d6
01:00001E0A 66FE            	  3129:             bne.s *                   * branch if Z set
                            	  3130: 
01:00001E0C 303C1122        	  3131:             move.w #$1122,d0
01:00001E10 323C8000        	  3132:             move.w #$8000,d1
01:00001E14 4380            	  3133:             chk d0,d1
01:00001E16 BCBCEEEE0006    	  3134:             cmp.l #$EEEE0006,d6
01:00001E1C 66FE            	  3135:             bne.s *                   * branch if Z set
                            	  3136: 
01:00001E1E 4E75            	  3137:             rts
                            	  3138: 
                            	  3139: 
                            	  3140: *-----------------------------------------------------------
                            	  3141: *-----------------------------------------------------------
                            	  3142: * OPCODE : NEGS
                            	  3143: *-----------------------------------------------------------
                            	  3144: *-----------------------------------------------------------
                            	  3145: op_NEGS:
                            	  3146: 
                            	  3147: *     NOT - BYTE
01:00001E20 307C0100        	  3148:             move.l #$00000100,a0
01:00001E24 7000            	  3149:             moveq  #$00000000,d0
01:00001E26 4600            	  3150:             not.b d0
01:00001E28 6AFE            	  3151:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E2A 67FE            	  3152:             beq.s *                   * Check Z Flag  beq/bne
01:00001E2C 4600            	  3153:             not.b d0
01:00001E2E 6BFE            	  3154:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E30 66FE            	  3155:             bne.s *                   * Check Z Flag  beq/bne
01:00001E32 4A00            	  3156:             cmpi.b #$00,d0
01:00001E34 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
01:00001E36 10BC0080        	  3158:             move.b #$80,(a0)
01:00001E3A 4610            	  3159:             not.b (a0)
01:00001E3C 6BFE            	  3160:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E3E 67FE            	  3161:             beq.s *                   * Check Z Flag  beq/bne
01:00001E40 4610            	  3162:             not.b (a0)
01:00001E42 6AFE            	  3163:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E44 67FE            	  3164:             beq.s *                   * Check Z Flag  beq/bne
01:00001E46 0C100080        	  3165:             cmpi.b #$80,(a0)
01:00001E4A 66FE            	  3166:             bne.s *                   * Check Z Flag  beq/bne
                            	  3167: 
                            	  3168: *     NOT - WORD
01:00001E4C 307C0100        	  3169:             move.l #$00000100,a0
01:00001E50 7000            	  3170:             moveq  #$00000000,d0
01:00001E52 4640            	  3171:             not.w d0
01:00001E54 6AFE            	  3172:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E56 67FE            	  3173:             beq.s *                   * Check Z Flag  beq/bne
01:00001E58 4640            	  3174:             not.w d0
01:00001E5A 6BFE            	  3175:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E5C 66FE            	  3176:             bne.s *                   * Check Z Flag  beq/bne
01:00001E5E 4A40            	  3177:             cmpi.w #$0000,d0
01:00001E60 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
01:00001E62 30BC5A5A        	  3179:             move.w #$5a5a,(a0)
01:00001E66 4650            	  3180:             not.w (a0)
01:00001E68 6AFE            	  3181:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E6A 67FE            	  3182:             beq.s *                   * Check Z Flag  beq/bne
01:00001E6C 4650            	  3183:             not.w (a0)
01:00001E6E 6BFE            	  3184:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E70 67FE            	  3185:             beq.s *                   * Check Z Flag  beq/bne
01:00001E72 0C505A5A        	  3186:             cmpi.w #$5a5a,(a0)
01:00001E76 66FE            	  3187:             bne.s *                   * Check Z Flag  beq/bne
                            	  3188: 
                            	  3189: *     NOT - LONG
01:00001E78 307C0100        	  3190:             move.l #$00000100,a0
01:00001E7C 7000            	  3191:             moveq  #$00000000,d0
01:00001E7E 4680            	  3192:             not.l d0
01:00001E80 6AFE            	  3193:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E82 67FE            	  3194:             beq.s *                   * Check Z Flag  beq/bne
01:00001E84 4680            	  3195:             not.l d0
01:00001E86 6BFE            	  3196:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E88 66FE            	  3197:             bne.s *                   * Check Z Flag  beq/bne
01:00001E8A 4A80            	  3198:             cmpi.l #$00000000,d0
01:00001E8C 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
01:00001E8E 20BC5A5A1234    	  3200:             move.l #$5a5a1234,(a0)
01:00001E94 4690            	  3201:             not.l (a0)
01:00001E96 6AFE            	  3202:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E98 67FE            	  3203:             beq.s *                   * Check Z Flag  beq/bne
01:00001E9A 4690            	  3204:             not.l (a0)
01:00001E9C 6BFE            	  3205:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E9E 67FE            	  3206:             beq.s *                   * Check Z Flag  beq/bne
01:00001EA0 0C905A5A1234    	  3207:             cmpi.l #$5a5a1234,(a0)
01:00001EA6 66FE            	  3208:             bne.s *                   * Check Z Flag  beq/bne
                            	  3209: 
                            	  3210: * -----
                            	  3211: 
                            	  3212: *     NEG - BYTE
01:00001EA8 307C0100        	  3213:             move.l #$00000100,a0
01:00001EAC 7000            	  3214:             moveq  #$00000000,d0
01:00001EAE 7240D241        	  3215:             move.l #$00000080,d1
01:00001EB2 4400            	  3216:             neg.b d0
01:00001EB4 6BFE            	  3217:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EB6 66FE            	  3218:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001EB8 65FE            	  3219:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001EBA 69FE            	  3220:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EBC 4401            	  3221:             neg.b d1
01:00001EBE 6AFE            	  3222:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EC0 67FE            	  3223:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EC2 64FE            	  3224:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EC4 68FE            	  3225:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001EC6 0C010080        	  3226:             cmpi.b #$80,d1
01:00001ECA 66FE            	  3227:             bne.s *                   * Check Z Flag  beq/bne
01:00001ECC 10BC007F        	  3228:             move.b #$7F,(a0)
01:00001ED0 4410            	  3229:             neg.b (a0)
01:00001ED2 6AFE            	  3230:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001ED4 67FE            	  3231:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001ED6 64FE            	  3232:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001ED8 69FE            	  3233:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EDA 10BC00F5        	  3234:             move.b #$F5,(a0)
01:00001EDE 4410            	  3235:             neg.b (a0)
01:00001EE0 6BFE            	  3236:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EE2 67FE            	  3237:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EE4 64FE            	  3238:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EE6 69FE            	  3239:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EE8 0C10000B        	  3240:             cmpi.b #$0B,(a0)
01:00001EEC 66FE            	  3241:             bne.s *                   * Check Z Flag  beq/bne
                            	  3242: 
                            	  3243: * -----
                            	  3244: 
                            	  3245: *     NEG - WORD
01:00001EEE 307C0100        	  3246:             move.l #$00000100,a0
01:00001EF2 7000            	  3247:             moveq  #$00000000,d0
01:00001EF4 223C00008000    	  3248:             move.l #$00008000,d1
01:00001EFA 4440            	  3249:             neg.w d0
01:00001EFC 6BFE            	  3250:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EFE 66FE            	  3251:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F00 65FE            	  3252:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F02 69FE            	  3253:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F04 4441            	  3254:             neg.w d1
01:00001F06 6AFE            	  3255:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F08 67FE            	  3256:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F0A 64FE            	  3257:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F0C 68FE            	  3258:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F0E 0C418000        	  3259:             cmpi.w #$8000,d1
01:00001F12 66FE            	  3260:             bne.s *                   * Check Z Flag  beq/bne
01:00001F14 30BC7FFF        	  3261:             move.w #$7FFF,(a0)
01:00001F18 4450            	  3262:             neg.w (a0)
01:00001F1A 6AFE            	  3263:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F1C 67FE            	  3264:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F1E 64FE            	  3265:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F20 69FE            	  3266:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F22 30BCF578        	  3267:             move.w #$F578,(a0)
01:00001F26 4450            	  3268:             neg.w (a0)
01:00001F28 6BFE            	  3269:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F2A 67FE            	  3270:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F2C 64FE            	  3271:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F2E 69FE            	  3272:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F30 0C500A88        	  3273:             cmpi.w #$0A88,(a0)
01:00001F34 66FE            	  3274:             bne.s *                   * Check Z Flag  beq/bne
                            	  3275: 
                            	  3276: * -----
                            	  3277: 
                            	  3278: *     NEG - LONG
01:00001F36 307C0100        	  3279:             move.l #$00000100,a0
01:00001F3A 7000            	  3280:             moveq  #$00000000,d0
01:00001F3C 223C80000000    	  3281:             move.l #$80000000,d1
01:00001F42 4480            	  3282:             neg.l d0
01:00001F44 6BFE            	  3283:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F46 66FE            	  3284:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F48 65FE            	  3285:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F4A 69FE            	  3286:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F4C 4481            	  3287:             neg.l d1
01:00001F4E 6AFE            	  3288:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F50 67FE            	  3289:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F52 64FE            	  3290:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F54 68FE            	  3291:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F56 0C8180000000    	  3292:             cmpi.l #$80000000,d1
01:00001F5C 66FE            	  3293:             bne.s *                   * Check Z Flag  beq/bne
01:00001F5E 20BC7FFFFFFF    	  3294:             move.l #$7FFFFFFF,(a0)
01:00001F64 4490            	  3295:             neg.l (a0)
01:00001F66 6AFE            	  3296:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F68 67FE            	  3297:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F6A 64FE            	  3298:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F6C 69FE            	  3299:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F6E 20BCF5781234    	  3300:             move.l #$F5781234,(a0)
01:00001F74 4490            	  3301:             neg.l (a0)
01:00001F76 6BFE            	  3302:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F78 67FE            	  3303:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F7A 64FE            	  3304:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F7C 69FE            	  3305:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F7E 0C900A87EDCC    	  3306:             cmpi.l #$0A87EDCC,(a0)
01:00001F84 66FE            	  3307:             bne.s *                   * Check Z Flag  beq/bne
                            	  3308: 
                            	  3309: 
                            	  3310: * -----
                            	  3311: 
                            	  3312: *     NEGX - BYTE
01:00001F86 307C0100        	  3313:             move.l #$00000100,a0
01:00001F8A 7000            	  3314:             moveq  #$00000000,d0
01:00001F8C 7240D241        	  3315:             move.l #$00000080,d1
01:00001F90 003C0010        	  3316:             ori.b #$10,CCR        * Set X Flag
01:00001F94 4000            	  3317:             negx.b d0
01:00001F96 6AFE            	  3318:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001F98 67FE            	  3319:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F9A 64FE            	  3320:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F9C 69FE            	  3321:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F9E 023C00EF        	  3322:             andi.b #$EF,CCR       * Clear X Flag
01:00001FA2 4000            	  3323:             negx.b d0
01:00001FA4 6BFE            	  3324:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FA6 67FE            	  3325:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FA8 64FE            	  3326:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FAA 69FE            	  3327:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FAC 003C0010        	  3328:             ori.b #$10,CCR        * Set X Flag
01:00001FB0 4001            	  3329:             negx.b d1
01:00001FB2 6BFE            	  3330:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FB4 67FE            	  3331:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FB6 64FE            	  3332:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FB8 69FE            	  3333:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FBA 0C01007F        	  3334:             cmpi.b #$7F,d1
01:00001FBE 66FE            	  3335:             bne.s *                   * Check Z Flag  beq/bne
01:00001FC0 023C00EF        	  3336:             andi.b #$EF,CCR       * Clear X Flag
01:00001FC4 4001            	  3337:             negx.b d1
01:00001FC6 6AFE            	  3338:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FC8 67FE            	  3339:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FCA 64FE            	  3340:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FCC 69FE            	  3341:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FCE 0C010081        	  3342:             cmpi.b #$81,d1
01:00001FD2 66FE            	  3343:             bne.s *                   * Check Z Flag  beq/bne
01:00001FD4 10BC007F        	  3344:             move.b #$7F,(a0)
01:00001FD8 003C0010        	  3345:             ori.b #$10,CCR        * Set X Flag
01:00001FDC 4010            	  3346:             negx.b (a0)
01:00001FDE 6AFE            	  3347:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FE0 67FE            	  3348:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FE2 64FE            	  3349:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3350:             * I think overflow should happen here.
                            	  3351: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FE4 10BC007F        	  3352:             move.b #$7F,(a0)
01:00001FE8 023C00EF        	  3353:             andi.b #$EF,CCR       * Clear X Flag
01:00001FEC 4010            	  3354:             negx.b (a0)
01:00001FEE 6AFE            	  3355:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FF0 67FE            	  3356:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FF2 64FE            	  3357:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FF4 69FE            	  3358:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FF6 10BC00F5        	  3359:             move.b #$F5,(a0)
01:00001FFA 003C0010        	  3360:             ori.b #$10,CCR        * Set X Flag
01:00001FFE 4010            	  3361:             negx.b (a0)
01:00002000 6BFE            	  3362:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002002 67FE            	  3363:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002004 64FE            	  3364:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002006 69FE            	  3365:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002008 0C10000A        	  3366:             cmpi.b #$0A,(a0)
01:0000200C 66FE            	  3367:             bne.s *                   * Check Z Flag  beq/bne
01:0000200E 023C00EF        	  3368:             andi.b #$EF,CCR       * Clear X Flag
01:00002012 4010            	  3369:             negx.b (a0)
01:00002014 6AFE            	  3370:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002016 67FE            	  3371:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002018 64FE            	  3372:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000201A 69FE            	  3373:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000201C 0C1000F6        	  3374:             cmpi.b #$F6,(a0)
01:00002020 66FE            	  3375:             bne.s *                   * Check Z Flag  beq/bne
                            	  3376: 
                            	  3377: 
                            	  3378: 
                            	  3379: * -----
                            	  3380: 
                            	  3381: *     NEGX - WORD
01:00002022 307C0100        	  3382:             move.l #$00000100,a0
01:00002026 7000            	  3383:             moveq  #$00000000,d0
01:00002028 223C00008000    	  3384:             move.l #$00008000,d1
01:0000202E 003C0010        	  3385:             ori.b #$10,CCR        * Set X Flag
01:00002032 4040            	  3386:             negx.w d0
01:00002034 6AFE            	  3387:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002036 67FE            	  3388:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002038 64FE            	  3389:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:0000203A 69FE            	  3390:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000203C 023C00EF        	  3391:             andi.b #$EF,CCR       * Clear X Flag
01:00002040 4040            	  3392:             negx.w d0
01:00002042 6BFE            	  3393:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002044 67FE            	  3394:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002046 64FE            	  3395:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002048 69FE            	  3396:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000204A 003C0010        	  3397:             ori.b #$10,CCR        * Set X Flag
01:0000204E 4041            	  3398:             negx.w d1
01:00002050 6BFE            	  3399:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002052 67FE            	  3400:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002054 64FE            	  3401:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002056 69FE            	  3402:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002058 0C417FFF        	  3403:             cmpi.w #$7FFF,d1
01:0000205C 66FE            	  3404:             bne.s *                   * Check Z Flag  beq/bne
01:0000205E 023C00EF        	  3405:             andi.b #$EF,CCR       * Clear X Flag
01:00002062 4041            	  3406:             negx.w d1
01:00002064 6AFE            	  3407:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002066 67FE            	  3408:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002068 64FE            	  3409:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000206A 69FE            	  3410:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000206C 0C418001        	  3411:             cmpi.w #$8001,d1
01:00002070 66FE            	  3412:             bne.s *                   * Check Z Flag  beq/bne
01:00002072 30BC7FFF        	  3413:             move.w #$7FFF,(a0)
01:00002076 003C0010        	  3414:             ori.b #$10,CCR        * Set X Flag
01:0000207A 4050            	  3415:             negx.w (a0)
01:0000207C 6AFE            	  3416:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000207E 67FE            	  3417:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002080 64FE            	  3418:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3419: ***            
                            	  3420: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002082 30BCF567        	  3421:             move.w #$F567,(a0)
01:00002086 023C00EF        	  3422:             andi.b #$EF,CCR       * Clear X Flag
01:0000208A 4050            	  3423:             negx.w (a0)
01:0000208C 6BFE            	  3424:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000208E 67FE            	  3425:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002090 64FE            	  3426:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002092 69FE            	  3427:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002094 30BCF567        	  3428:             move.w #$F567,(a0)
01:00002098 003C0010        	  3429:             ori.b #$10,CCR        * Set X Flag
01:0000209C 4050            	  3430:             negx.w (a0)
01:0000209E 6BFE            	  3431:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020A0 67FE            	  3432:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020A2 64FE            	  3433:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020A4 69FE            	  3434:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020A6 0C500A98        	  3435:             cmpi.w #$0A98,(a0)
01:000020AA 66FE            	  3436:             bne.s *                   * Check Z Flag  beq/bne
01:000020AC 023C00EF        	  3437:             andi.b #$EF,CCR       * Clear X Flag
01:000020B0 4050            	  3438:             negx.w (a0)
01:000020B2 6AFE            	  3439:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020B4 67FE            	  3440:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020B6 64FE            	  3441:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020B8 69FE            	  3442:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020BA 0C50F568        	  3443:             cmpi.w #$F568,(a0)
01:000020BE 66FE            	  3444:             bne.s *                   * Check Z Flag  beq/bne
                            	  3445: 
                            	  3446: 
                            	  3447: * -----
                            	  3448: 
                            	  3449: *     NEGX - LONG
01:000020C0 307C0100        	  3450:             move.l #$00000100,a0
01:000020C4 7000            	  3451:             moveq  #$00000000,d0
01:000020C6 223C80000000    	  3452:             move.l #$80000000,d1
01:000020CC 003C0010        	  3453:             ori.b #$10,CCR        * Set X Flag
01:000020D0 4080            	  3454:             negx.l d0
01:000020D2 6AFE            	  3455:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020D4 67FE            	  3456:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020D6 64FE            	  3457:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020D8 69FE            	  3458:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020DA 023C00EF        	  3459:             andi.b #$EF,CCR       * Clear X Flag
01:000020DE 4080            	  3460:             negx.l d0
01:000020E0 6BFE            	  3461:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020E2 67FE            	  3462:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020E4 64FE            	  3463:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020E6 69FE            	  3464:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020E8 003C0010        	  3465:             ori.b #$10,CCR        * Set X Flag
01:000020EC 4081            	  3466:             negx.l d1
01:000020EE 6BFE            	  3467:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020F0 67FE            	  3468:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020F2 64FE            	  3469:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020F4 69FE            	  3470:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:000020F6 0C817FFFFFFF    	  3471:             cmpi.l #$7FFFFFFF,d1
01:000020FC 66FE            	  3472:             bne.s *                   * Check Z Flag  beq/bne
01:000020FE 023C00EF        	  3473:             andi.b #$EF,CCR       * Clear X Flag
01:00002102 4081            	  3474:             negx.l d1
01:00002104 6AFE            	  3475:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002106 67FE            	  3476:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002108 64FE            	  3477:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3478: ****            
                            	  3479: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:0000210A 0C8180000001    	  3480:             cmpi.l #$80000001,d1
01:00002110 66FE            	  3481:             bne.s *                   * Check Z Flag  beq/bne
01:00002112 20BC00007FFF    	  3482:             move.l #$7FFF,(a0)
01:00002118 003C0010        	  3483:             ori.b #$10,CCR        * Set X Flag
01:0000211C 4090            	  3484:             negx.l (a0)
01:0000211E 6AFE            	  3485:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002120 67FE            	  3486:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002122 64FE            	  3487:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3488: ****            
                            	  3489: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002124 20BCF5671234    	  3490:             move.l #$F5671234,(a0)
01:0000212A 023C00EF        	  3491:             andi.b #$EF,CCR       * Clear X Flag
01:0000212E 4090            	  3492:             negx.l (a0)
01:00002130 6BFE            	  3493:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002132 67FE            	  3494:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002134 64FE            	  3495:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002136 69FE            	  3496:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002138 20BCF5675678    	  3497:             move.l #$F5675678,(a0)
01:0000213E 003C0010        	  3498:             ori.b #$10,CCR        * Set X Flag
01:00002142 4090            	  3499:             negx.l (a0)
01:00002144 6BFE            	  3500:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002146 67FE            	  3501:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002148 64FE            	  3502:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000214A 69FE            	  3503:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000214C 0C900A98A987    	  3504:             cmpi.l #$0A98A987,(a0)
01:00002152 66FE            	  3505:             bne.s *                   * Check Z Flag  beq/bne
01:00002154 023C00EF        	  3506:             andi.b #$EF,CCR       * Clear X Flag
01:00002158 4090            	  3507:             negx.l (a0)
01:0000215A 6AFE            	  3508:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000215C 67FE            	  3509:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000215E 64FE            	  3510:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002160 69FE            	  3511:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002162 0C90F5675679    	  3512:             cmpi.l #$F5675679,(a0)
01:00002168 66FE            	  3513:             bne.s *                   * Check Z Flag  beq/bne
                            	  3514: 
                            	  3515: 
                            	  3516: * -----
                            	  3517: 
                            	  3518: *     CLR - BYTE
01:0000216A 307C0100        	  3519:             move.l #$00000100,a0
01:0000216E 203C12345678    	  3520:             move.l #$12345678,d0
01:00002174 223C12345678    	  3521:             move.l #$12345678,d1
01:0000217A 243C12345678    	  3522:             move.l #$12345678,d2
01:00002180 283C12345600    	  3523:             move.l #$12345600,d4
01:00002186 2A3C12340000    	  3524:             move.l #$12340000,d5
01:0000218C 7C00            	  3525:             moveq  #$00000000,d6
                            	  3526: 
01:0000218E 4200            	  3527:             clr.b d0
01:00002190 66FE            	  3528:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002192 6BFE            	  3529:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002194 B880            	  3530:             cmp.l d0,d4
01:00002196 66FE            	  3531:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3532: 
01:00002198 4241            	  3533:             clr.w d1
01:0000219A 66FE            	  3534:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000219C 6BFE            	  3535:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000219E BA81            	  3536:             cmp.l d1,d5
01:000021A0 66FE            	  3537:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3538: 
01:000021A2 7400            	  3539:             clr.l d2
01:000021A4 66FE            	  3540:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021A6 6BFE            	  3541:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021A8 BC82            	  3542:             cmp.l d2,d6
01:000021AA 66FE            	  3543:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3544: 
01:000021AC 4E75            	  3545:             rts
                            	  3546: 
                            	  3547: 
                            	  3548: 
                            	  3549: *-----------------------------------------------------------
                            	  3550: *-----------------------------------------------------------
                            	  3551: * OPCODE : MOVEM
                            	  3552: *-----------------------------------------------------------
                            	  3553: *-----------------------------------------------------------
                            	  3554: op_MOVEM:
                            	  3555: 
                            	  3556: *     WORD  Registers --> Memory
01:000021AE 203C0000D0D0    	  3557:             move.l #$0000d0d0,d0
01:000021B4 223C0000D1D1    	  3558:             move.l #$0000d1d1,d1
01:000021BA 243C0000D2D2    	  3559:             move.l #$0000d2d2,d2
01:000021C0 263C0000D3D3    	  3560:             move.l #$0000d3d3,d3
01:000021C6 283C0000D4D4    	  3561:             move.l #$0000d4d4,d4
01:000021CC 2A3C0000D5D5    	  3562:             move.l #$0000d5d5,d5
01:000021D2 2C3C0000D6D6    	  3563:             move.l #$0000d6d6,d6
01:000021D8 2E3C0000D7D7    	  3564:             move.l #$0000d7d7,d7
01:000021DE 307C0A0A        	  3565:             move.l #$00000a0a,a0
01:000021E2 327C1A1A        	  3566:             move.l #$00001a1a,a1
01:000021E6 347C2A2A        	  3567:             move.l #$00002a2a,a2
01:000021EA 367C3A3A        	  3568:             move.l #$00003a3a,a3
01:000021EE 387C4A4A        	  3569:             move.l #$00004a4a,a4
01:000021F2 3A7C5A5A        	  3570:             move.l #$00005a5a,a5
01:000021F6 3C7C6A6A        	  3571:             move.l #$00006a6a,a6
                            	  3572: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3573: 
01:000021FA 48B8FFFF0100    	  3574:             movem.w D0-D7/A0-A7,$00000100
                            	  3575: 
01:00002200 307C0100        	  3576:             move.l #$00000100,a0
                            	  3577: 
01:00002204 B058            	  3578:             cmp.w (a0)+,d0
01:00002206 66FE            	  3579:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002208 B258            	  3580:             cmp.w (a0)+,d1
01:0000220A 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000220C B458            	  3582:             cmp.w (a0)+,d2
01:0000220E 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002210 B658            	  3584:             cmp.w (a0)+,d3
01:00002212 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002214 B858            	  3586:             cmp.w (a0)+,d4
01:00002216 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002218 BA58            	  3588:             cmp.w (a0)+,d5
01:0000221A 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000221C BC58            	  3590:             cmp.w (a0)+,d6
01:0000221E 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002220 BE58            	  3592:             cmp.w (a0)+,d7
01:00002222 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3594: 
01:00002224 0C580A0A        	  3595:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002228 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3597: 
01:0000222A B2D8            	  3598:             cmp.w (a0)+,a1
01:0000222C 66FE            	  3599:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000222E B4D8            	  3600:             cmp.w (a0)+,a2
01:00002230 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002232 B6D8            	  3602:             cmp.w (a0)+,a3
01:00002234 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002236 B8D8            	  3604:             cmp.w (a0)+,a4
01:00002238 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000223A BAD8            	  3606:             cmp.w (a0)+,a5
01:0000223C 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000223E BCD8            	  3608:             cmp.w (a0)+,a6
01:00002240 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3610: 
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: *     LONG  Registers --> Memory
01:00002242 203CD0D0D0D0    	  3615:             move.l #$d0d0d0d0,d0
01:00002248 223CD1D1D1D1    	  3616:             move.l #$d1d1d1d1,d1
01:0000224E 243CD2D2D2D2    	  3617:             move.l #$d2d2d2d2,d2
01:00002254 263CD3D3D3D3    	  3618:             move.l #$d3d3d3d3,d3
01:0000225A 283CD4D4D4D4    	  3619:             move.l #$d4d4d4d4,d4
01:00002260 2A3CD5D5D5D5    	  3620:             move.l #$d5d5d5d5,d5
01:00002266 2C3CD6D6D6D6    	  3621:             move.l #$d6d6d6d6,d6
01:0000226C 2E3CD7D7D7D7    	  3622:             move.l #$d7d7d7d7,d7
01:00002272 207C0A0A0A0A    	  3623:             move.l #$0a0a0a0a,a0
01:00002278 227C1A1A1A1A    	  3624:             move.l #$1a1a1a1a,a1
01:0000227E 247C2A2A2A2A    	  3625:             move.l #$2a2a2a2a,a2
01:00002284 267C3A3A3A3A    	  3626:             move.l #$3a3a3a3a,a3
01:0000228A 287C4A4A4A4A    	  3627:             move.l #$4a4a4a4a,a4
01:00002290 2A7C5A5A5A5A    	  3628:             move.l #$5a5a5a5a,a5
01:00002296 2C7C6A6A6A6A    	  3629:             move.l #$6a6a6a6a,a6
                            	  3630: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3631: 
                            	  3632: 
01:0000229C 48F8FFFF0120    	  3633:             movem.l D0-D7/A0-A7,$00000120
                            	  3634: 
01:000022A2 307C0120        	  3635:             move.l #$00000120,a0
                            	  3636: 
01:000022A6 B098            	  3637:             cmp.l (a0)+,d0
01:000022A8 66FE            	  3638:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022AA B298            	  3639:             cmp.l (a0)+,d1
01:000022AC 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022AE B498            	  3641:             cmp.l (a0)+,d2
01:000022B0 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022B2 B698            	  3643:             cmp.l (a0)+,d3
01:000022B4 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022B6 B898            	  3645:             cmp.l (a0)+,d4
01:000022B8 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022BA BA98            	  3647:             cmp.l (a0)+,d5
01:000022BC 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022BE BC98            	  3649:             cmp.l (a0)+,d6
01:000022C0 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C2 BE98            	  3651:             cmp.l (a0)+,d7
01:000022C4 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3653: 
01:000022C6 0C980A0A0A0A    	  3654:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:000022CC 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3656: 
01:000022CE B3D8            	  3657:             cmp.l (a0)+,a1
01:000022D0 66FE            	  3658:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D2 B5D8            	  3659:             cmp.l (a0)+,a2
01:000022D4 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D6 B7D8            	  3661:             cmp.l (a0)+,a3
01:000022D8 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022DA B9D8            	  3663:             cmp.l (a0)+,a4
01:000022DC 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022DE BBD8            	  3665:             cmp.l (a0)+,a5
01:000022E0 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E2 BDD8            	  3667:             cmp.l (a0)+,a6
01:000022E4 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3669: *      ----
                            	  3670: 
                            	  3671: 
                            	  3672: *     WORD  Registers --> Memory  -(An) EA Mode
01:000022E6 203C0000D0D0    	  3673:             move.l #$0000d0d0,d0
01:000022EC 223C0000D1D1    	  3674:             move.l #$0000d1d1,d1
01:000022F2 243C0000D2D2    	  3675:             move.l #$0000d2d2,d2
01:000022F8 263C0000D3D3    	  3676:             move.l #$0000d3d3,d3
01:000022FE 283C0000D4D4    	  3677:             move.l #$0000d4d4,d4
01:00002304 2A3C0000D5D5    	  3678:             move.l #$0000d5d5,d5
01:0000230A 2C3C0000D6D6    	  3679:             move.l #$0000d6d6,d6
01:00002310 2E3C0000D7D7    	  3680:             move.l #$0000d7d7,d7
01:00002316 307C0A0A        	  3681:             move.l #$00000a0a,a0
01:0000231A 327C1A1A        	  3682:             move.l #$00001a1a,a1
01:0000231E 347C2A2A        	  3683:             move.l #$00002a2a,a2
01:00002322 367C3A3A        	  3684:             move.l #$00003a3a,a3
01:00002326 387C4A4A        	  3685:             move.l #$00004a4a,a4
01:0000232A 3A7C5A5A        	  3686:             move.l #$00005a5a,a5
01:0000232E 3C7C6A6A        	  3687:             move.l #$00006a6a,a6
                            	  3688: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3689: 
01:00002332 307C01A0        	  3690:             move.l #$000001A0,a0
01:00002336 48A0FFFF        	  3691:             movem.w D0-D7/A0-A7,-(a0)
                            	  3692: 
01:0000233A 307C019E        	  3693:             move.l #$0000019E,a0
                            	  3694: 
01:0000233E BCE0            	  3695:             cmp.w -(a0),a6
01:00002340 66FE            	  3696:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002342 BAE0            	  3697:             cmp.w -(a0),a5
01:00002344 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002346 B8E0            	  3699:             cmp.w -(a0),a4
01:00002348 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000234A B6E0            	  3701:             cmp.w -(a0),a3
01:0000234C 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000234E B4E0            	  3703:             cmp.w -(a0),a2
01:00002350 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002352 B2E0            	  3705:             cmp.w -(a0),a1
01:00002354 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002356 B0E0            	  3707:             cmp.w -(a0),a0
                            	  3708: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002358 BE60            	  3709:             cmp.w -(a0),d7
01:0000235A 66FE            	  3710:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235C BC60            	  3711:             cmp.w -(a0),d6
01:0000235E 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002360 BA60            	  3713:             cmp.w -(a0),d5
01:00002362 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002364 B860            	  3715:             cmp.w -(a0),d4
01:00002366 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002368 B660            	  3717:             cmp.w -(a0),d3
01:0000236A 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236C B460            	  3719:             cmp.w -(a0),d2
01:0000236E 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002370 B260            	  3721:             cmp.w -(a0),d1
01:00002372 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002374 B060            	  3723:             cmp.w -(a0),d0
01:00002376 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3725: 
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: *     LONG  Registers --> Memory   -(An) EA Mode
01:00002378 203CD0D0D0D0    	  3730:             move.l #$d0d0d0d0,d0
01:0000237E 223CD1D1D1D1    	  3731:             move.l #$d1d1d1d1,d1
01:00002384 243CD2D2D2D2    	  3732:             move.l #$d2d2d2d2,d2
01:0000238A 263CD3D3D3D3    	  3733:             move.l #$d3d3d3d3,d3
01:00002390 283CD4D4D4D4    	  3734:             move.l #$d4d4d4d4,d4
01:00002396 2A3CD5D5D5D5    	  3735:             move.l #$d5d5d5d5,d5
01:0000239C 2C3CD6D6D6D6    	  3736:             move.l #$d6d6d6d6,d6
01:000023A2 2E3CD7D7D7D7    	  3737:             move.l #$d7d7d7d7,d7
01:000023A8 207C0A0A0A0A    	  3738:             move.l #$0a0a0a0a,a0
01:000023AE 227C1A1A1A1A    	  3739:             move.l #$1a1a1a1a,a1
01:000023B4 247C2A2A2A2A    	  3740:             move.l #$2a2a2a2a,a2
01:000023BA 267C3A3A3A3A    	  3741:             move.l #$3a3a3a3a,a3
01:000023C0 287C4A4A4A4A    	  3742:             move.l #$4a4a4a4a,a4
01:000023C6 2A7C5A5A5A5A    	  3743:             move.l #$5a5a5a5a,a5
01:000023CC 2C7C6A6A6A6A    	  3744:             move.l #$6a6a6a6a,a6
                            	  3745: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3746: 
                            	  3747: 
01:000023D2 307C01A0        	  3748:             move.l #$000001A0,a0
01:000023D6 48E0FFFF        	  3749:             movem.l D0-D7/A0-A7,-(a0)
                            	  3750: 
01:000023DA 307C019C        	  3751:             move.l #$0000019C,a0
                            	  3752: 
01:000023DE BDE0            	  3753:             cmp.l -(a0),a6
01:000023E0 66FE            	  3754:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023E2 BBE0            	  3755:             cmp.l -(a0),a5
01:000023E4 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023E6 B9E0            	  3757:             cmp.l -(a0),a4
01:000023E8 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EA B7E0            	  3759:             cmp.l -(a0),a3
01:000023EC 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EE B5E0            	  3761:             cmp.l -(a0),a2
01:000023F0 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F2 B3E0            	  3763:             cmp.l -(a0),a1
01:000023F4 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F6 B1E0            	  3765:             cmp.l -(a0),a0
                            	  3766: *            bne.s *                   * Check Z Flag  beq/bne 0
01:000023F8 BEA0            	  3767:             cmp.l -(a0),d7
01:000023FA 66FE            	  3768:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FC BCA0            	  3769:             cmp.l -(a0),d6
01:000023FE 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002400 BAA0            	  3771:             cmp.l -(a0),d5
01:00002402 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002404 B8A0            	  3773:             cmp.l -(a0),d4
01:00002406 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002408 B6A0            	  3775:             cmp.l -(a0),d3
01:0000240A 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000240C B4A0            	  3777:             cmp.l -(a0),d2
01:0000240E 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002410 B2A0            	  3779:             cmp.l -(a0),d1
01:00002412 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002414 B0A0            	  3781:             cmp.l -(a0),d0
01:00002416 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3783: 
                            	  3784: 
                            	  3785: 
                            	  3786: *     ----
                            	  3787: 
                            	  3788: *     WORD - Memory --> Registers
01:00002418 7000            	  3789:             moveq  #$00000000,d0
01:0000241A 7200            	  3790:             moveq  #$00000000,d1
01:0000241C 7400            	  3791:             moveq  #$00000000,d2
01:0000241E 7600            	  3792:             moveq  #$00000000,d3
01:00002420 7800            	  3793:             moveq  #$00000000,d4
01:00002422 7A00            	  3794:             moveq  #$00000000,d5
01:00002424 7C00            	  3795:             moveq  #$00000000,d6
01:00002426 7E00            	  3796:             moveq  #$00000000,d7
01:00002428 91C8            	  3797:             move.l #$00000000,a0
01:0000242A 93C9            	  3798:             move.l #$00000000,a1
01:0000242C 95CA            	  3799:             move.l #$00000000,a2
01:0000242E 97CB            	  3800:             move.l #$00000000,a3
01:00002430 99CC            	  3801:             move.l #$00000000,a4
01:00002432 9BCD            	  3802:             move.l #$00000000,a5
01:00002434 9DCE            	  3803:             move.l #$00000000,a6
                            	  3804: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3805: 
01:00002436 4CB82A550100    	  3806:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3807: 
01:0000243C B0BCFFFFD0D0    	  3808:             cmp.l #$FFFFD0D0,d0
01:00002442 66FE            	  3809:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002444 B4BCFFFFD1D1    	  3810:             cmp.l #$FFFFD1D1,d2
01:0000244A 66FE            	  3811:             bne.s *                  * Check Z Flag  beq/bne 0
01:0000244C B8BCFFFFD2D2    	  3812:             cmp.l #$FFFFD2D2,d4
01:00002452 66FE            	  3813:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002454 BCBCFFFFD3D3    	  3814:             cmp.l #$FFFFD3D3,d6
01:0000245A 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000245C B2FCD4D4        	  3816:             cmp.l #$FFFFD4D4,a1
01:00002460 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002462 B6FCD5D5        	  3818:             cmp.l #$FFFFD5D5,a3
01:00002466 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002468 BAFCD6D6        	  3820:             cmp.l #$FFFFD6D6,a5
01:0000246C 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3822: 
                            	  3823: 
                            	  3824: *     LONG - Memory --> Registers
01:0000246E 7000            	  3825:             moveq  #$00000000,d0
01:00002470 7200            	  3826:             moveq  #$00000000,d1
01:00002472 7400            	  3827:             moveq  #$00000000,d2
01:00002474 7600            	  3828:             moveq  #$00000000,d3
01:00002476 7800            	  3829:             moveq  #$00000000,d4
01:00002478 7A00            	  3830:             moveq  #$00000000,d5
01:0000247A 7C00            	  3831:             moveq  #$00000000,d6
01:0000247C 7E00            	  3832:             moveq  #$00000000,d7
01:0000247E 91C8            	  3833:             move.l #$00000000,a0
01:00002480 93C9            	  3834:             move.l #$00000000,a1
01:00002482 95CA            	  3835:             move.l #$00000000,a2
01:00002484 97CB            	  3836:             move.l #$00000000,a3
01:00002486 99CC            	  3837:             move.l #$00000000,a4
01:00002488 9BCD            	  3838:             move.l #$00000000,a5
01:0000248A 9DCE            	  3839:             move.l #$00000000,a6
                            	  3840: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3841: 
01:0000248C 4CF82A550120    	  3842:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3843: 
01:00002492 B0BCD0D0D0D0    	  3844:             cmp.l #$D0D0D0D0,d0
01:00002498 66FE            	  3845:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000249A B4BCD1D1D1D1    	  3846:             cmp.l #$D1D1D1D1,d2
01:000024A0 66FE            	  3847:             bne.s *                  * Check Z Flag  beq/bne 0
01:000024A2 B8BCD2D2D2D2    	  3848:             cmp.l #$D2D2D2D2,d4
01:000024A8 66FE            	  3849:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024AA BCBCD3D3D3D3    	  3850:             cmp.l #$D3D3D3D3,d6
01:000024B0 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024B2 B3FCD4D4D4D4    	  3852:             cmp.l #$D4D4D4D4,a1
01:000024B8 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024BA B7FCD5D5D5D5    	  3854:             cmp.l #$D5D5D5D5,a3
01:000024C0 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024C2 BBFCD6D6D6D6    	  3856:             cmp.l #$D6D6D6D6,a5
01:000024C8 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3858: 
01:000024CA 4E75            	  3859:             rts
                            	  3860: 
                            	  3861: 
                            	  3862: *-----------------------------------------------------------
                            	  3863: *-----------------------------------------------------------
                            	  3864: * OPCODE : ABCD
                            	  3865: *-----------------------------------------------------------
                            	  3866: *-----------------------------------------------------------
                            	  3867: op_ABCD:
                            	  3868: 
                            	  3869: *     Test with X Flag CLEARED
01:000024CC 307C0110        	  3870:                 move.l #$00000110,a0 * Address pointer-X
01:000024D0 327C0120        	  3871:                 move.l #$00000120,a1 * Address pointer-Y
01:000024D4 7000            	  3872:                 moveq  #$00000000,d0 * BCD byte-X
01:000024D6 7200            	  3873:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024D8 7400            	  3874:                 moveq  #$00000000,d2
01:000024DA 7600            	  3875:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000024DC 7800            	  3876:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000024DE 7A00            	  3877:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000024E0 2C3C00000099    	  3878:                 move.l #$00000099,d6 * Inner loop counter
01:000024E6 2E3C00000099    	  3879:                 move.l #$00000099,d7 * Outer loop counter
                            	  3880: 
01:000024EC 2007            	  3881: ABCD_OUTER1:    move.l d7,d0
01:000024EE 2206            	  3882: ABCD_INNER1:    move.l d6,d1
01:000024F0 023C00EF        	  3883:                 andi.b #$EF,CCR     * Clear X Flag
01:000024F4 307C0110        	  3884:                 move.l #$00000110,a0 * Address pointer-X
01:000024F8 327C0120        	  3885:                 move.l #$00000120,a1 * Address pointer-Y
01:000024FC 1140FFFF        	  3886:                 move.b d0,-1(a0)
01:00002500 1341FFFF        	  3887:                 move.b d1,-1(a1)
                            	  3888: 
01:00002504 C300            	  3889:                 abcd d0,d1
01:00002506 6402            	  3890:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002508 5284            	  3891:                 add.l #1,d4
01:0000250A DA81            	  3892: ABCD_NO_C1:     add.l d1,d5
                            	  3893: 
01:0000250C C308            	  3894:                 abcd -(a0),-(a1)
01:0000250E 6402            	  3895:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002510 5284            	  3896:                 add.l #1,d4
01:00002512 D611            	  3897: ABCD_NO_C2:     add.b (a1),d3
                            	  3898: 
                            	  3899: 
01:00002514 51CEFFD8        	  3900:                 dbf d6,ABCD_INNER1
01:00002518 2C3C00000099    	  3901:                 move.l #$00000099,d6
01:0000251E 51CFFFCC        	  3902:                 dbf d7,ABCD_OUTER1
01:00002522 0C8400005AFC    	  3903:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:00002528 66FE            	  3904:                 bne.s *
01:0000252A 0C85001C9A34    	  3905:                 cmpi.l #$001C9A34,d5
01:00002530 66FE            	  3906:                 bne.s *
01:00002532 0C8300000034    	  3907:                 cmpi.l #$00000034,d3
01:00002538 66FE            	  3908:                 bne.s *
                            	  3909: 
                            	  3910: *     Test with X Flag SET
01:0000253A 307C0110        	  3911:                 move.l #$00000110,a0 * Address pointer-X
01:0000253E 327C0120        	  3912:                 move.l #$00000120,a1 * Address pointer-Y
01:00002542 7000            	  3913:                 moveq  #$00000000,d0 * BCD byte-X
01:00002544 7200            	  3914:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002546 7400            	  3915:                 moveq  #$00000000,d2
01:00002548 7600            	  3916:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:0000254A 7800            	  3917:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000254C 7A00            	  3918:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:0000254E 2C3C00000099    	  3919:                 move.l #$00000099,d6 * Inner loop counter
01:00002554 2E3C00000099    	  3920:                 move.l #$00000099,d7 * Outer loop counter
                            	  3921: 
01:0000255A 2007            	  3922: ABCD_OUTER2:    move.l d7,d0
01:0000255C 2206            	  3923: ABCD_INNER2:    move.l d6,d1
01:0000255E 003C0010        	  3924:                 ori.b #$10,CCR      * Set X Flag
01:00002562 307C0110        	  3925:                 move.l #$00000110,a0 * Address pointer-X
01:00002566 327C0120        	  3926:                 move.l #$00000120,a1 * Address pointer-Y
01:0000256A 1140FFFF        	  3927:                 move.b d0,-1(a0)
01:0000256E 1341FFFF        	  3928:                 move.b d1,-1(a1)
                            	  3929: 
01:00002572 C300            	  3930:                 abcd d0,d1
01:00002574 6402            	  3931:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002576 5284            	  3932:                 add.l #1,d4
01:00002578 DA81            	  3933: ABCD_NO_C3:     add.l d1,d5
                            	  3934: 
01:0000257A C308            	  3935:                 abcd -(a0),-(a1)
01:0000257C 6402            	  3936:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:0000257E 5284            	  3937:                 add.l #1,d4
01:00002580 D611            	  3938: ABCD_NO_C4:     add.b (a1),d3
                            	  3939: 
                            	  3940: 
01:00002582 51CEFFD8        	  3941:                 dbf d6,ABCD_INNER2
01:00002586 2C3C00000099    	  3942:                 move.l #$00000099,d6
01:0000258C 51CFFFCC        	  3943:                 dbf d7,ABCD_OUTER2
01:00002590 0C8400005B60    	  3944:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:00002596 66FE            	  3945:                 bne.s *
01:00002598 0C85001CCFC8    	  3946:                 cmpi.l #$001CCFC8,d5
01:0000259E 66FE            	  3947:                 bne.s *
01:000025A0 0C8300000034    	  3948:                 cmpi.l #$00000034,d3
01:000025A6 66FE            	  3949:                 bne.s *
                            	  3950: 
                            	  3951: *             Quick check of Z Flag
01:000025A8 4200            	  3952:                 move.b #$00,d0
01:000025AA 4201            	  3953:                 move.b #$00,d1
01:000025AC 44FC0000        	  3954:                 move #$00,CCR              * Set Z flag to 0
01:000025B0 C101            	  3955:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025B2 67FE            	  3956:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3957: 
01:000025B4 103C0001        	  3958:                 move.b #$01,d0
01:000025B8 4201            	  3959:                 move.b #$00,d1
01:000025BA 44FC0004        	  3960:                 move #$04,CCR              * Set Z flag to 0
01:000025BE C101            	  3961:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025C0 67FE            	  3962:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3963: 
01:000025C2 4E75            	  3964:                 rts
                            	  3965: 
                            	  3966: *-----------------------------------------------------------
                            	  3967: *-----------------------------------------------------------
                            	  3968: * OPCODE : SBCD
                            	  3969: *-----------------------------------------------------------
                            	  3970: *-----------------------------------------------------------
                            	  3971: op_SBCD:
                            	  3972: 
                            	  3973: *     Test with X Flag CLEARED
01:000025C4 307C0110        	  3974:                 move.l #$00000110,a0 * Address pointer-X
01:000025C8 327C0120        	  3975:                 move.l #$00000120,a1 * Address pointer-Y
01:000025CC 7000            	  3976:                 moveq  #$00000000,d0 * BCD byte-X
01:000025CE 7200            	  3977:                 moveq  #$00000000,d1 * BCD byte-Y
01:000025D0 7400            	  3978:                 moveq  #$00000000,d2
01:000025D2 7600            	  3979:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000025D4 7800            	  3980:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025D6 7A00            	  3981:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000025D8 2C3C00000099    	  3982:                 move.l #$00000099,d6 * Inner loop counter
01:000025DE 2E3C00000099    	  3983:                 move.l #$00000099,d7 * Outer loop counter
                            	  3984: 
01:000025E4 2007            	  3985: SBCD_OUTER1:    move.l d7,d0
01:000025E6 2206            	  3986: SBCD_INNER1:    move.l d6,d1
01:000025E8 023C00EF        	  3987:                 andi.b #$EF,CCR     * Clear X Flag
01:000025EC 307C0110        	  3988:                 move.l #$00000110,a0 * Address pointer-X
01:000025F0 327C0120        	  3989:                 move.l #$00000120,a1 * Address pointer-Y
01:000025F4 1140FFFF        	  3990:                 move.b d0,-1(a0)
01:000025F8 1341FFFF        	  3991:                 move.b d1,-1(a1)
                            	  3992: 
01:000025FC 8300            	  3993:                 sbcd d0,d1
01:000025FE 6402            	  3994:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002600 5284            	  3995:                 add.l #1,d4
01:00002602 DA81            	  3996: SBCD_NO_C1:     add.l d1,d5
                            	  3997: 
01:00002604 8308            	  3998:                 sbcd -(a0),-(a1)
01:00002606 6402            	  3999:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002608 5284            	  4000:                 add.l #1,d4
01:0000260A D611            	  4001: SBCD_NO_C2:     add.b (a1),d3
                            	  4002: 
                            	  4003: 
01:0000260C 51CEFFD8        	  4004:                 dbf d6,SBCD_INNER1
01:00002610 2C3C00000099    	  4005:                 move.l #$00000099,d6
01:00002616 51CFFFCC        	  4006:                 dbf d7,SBCD_OUTER1
01:0000261A 0C8400005C0A    	  4007:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:00002620 66FE            	  4008:                 bne.s *
01:00002622 0C85001C459E    	  4009:                 cmpi.l #$001C459E,d5
01:00002628 66FE            	  4010:                 bne.s *
01:0000262A 0C830000009E    	  4011:                 cmpi.l #$0000009E,d3
01:00002630 66FE            	  4012:                 bne.s *
                            	  4013: 
                            	  4014: *     Test with X Flag SET
01:00002632 307C0110        	  4015:                 move.l #$00000110,a0 * Address pointer-X
01:00002636 327C0120        	  4016:                 move.l #$00000120,a1 * Address pointer-Y
01:0000263A 7000            	  4017:                 moveq  #$00000000,d0 * BCD byte-X
01:0000263C 7200            	  4018:                 moveq  #$00000000,d1 * BCD byte-Y
01:0000263E 7400            	  4019:                 moveq  #$00000000,d2
01:00002640 7600            	  4020:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002642 7800            	  4021:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002644 7A00            	  4022:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002646 2C3C00000099    	  4023:                 move.l #$00000099,d6 * Inner loop counter
01:0000264C 2E3C00000099    	  4024:                 move.l #$00000099,d7 * Outer loop counter
                            	  4025: 
01:00002652 2007            	  4026: SBCD_OUTER2:    move.l d7,d0
01:00002654 2206            	  4027: SBCD_INNER2:    move.l d6,d1
01:00002656 003C0010        	  4028:                 ori.b #$10,CCR      * Set X Flag
01:0000265A 307C0110        	  4029:                 move.l #$00000110,a0 * Address pointer-X
01:0000265E 327C0120        	  4030:                 move.l #$00000120,a1 * Address pointer-Y
01:00002662 1140FFFF        	  4031:                 move.b d0,-1(a0)
01:00002666 1341FFFF        	  4032:                 move.b d1,-1(a1)
                            	  4033: 
01:0000266A 8300            	  4034:                 sbcd d0,d1
01:0000266C 6402            	  4035:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:0000266E 5284            	  4036:                 add.l #1,d4
01:00002670 DA81            	  4037: SBCD_NO_C3:     add.l d1,d5
                            	  4038: 
01:00002672 8308            	  4039:                 sbcd -(a0),-(a1)
01:00002674 6402            	  4040:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002676 5284            	  4041:                 add.l #1,d4
01:00002678 D611            	  4042: SBCD_NO_C4:     add.b (a1),d3
                            	  4043: 
01:0000267A 51CEFFD8        	  4044:                 dbf d6,SBCD_INNER2
01:0000267E 2C3C00000099    	  4045:                 move.l #$00000099,d6
01:00002684 51CFFFCC        	  4046:                 dbf d7,SBCD_OUTER2
01:00002688 0C8400005CA4    	  4047:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:0000268E 66FE            	  4048:                 bne.s *
01:00002690 0C85001C5C66    	  4049:                 cmpi.l #$001C5C66,d5
01:00002696 66FE            	  4050:                 bne.s *
01:00002698 0C830000009E    	  4051:                 cmpi.l #$0000009E,d3
01:0000269E 66FE            	  4052:                 bne.s *
                            	  4053: 
                            	  4054: 
                            	  4055: *             Quick check of Z Flag
01:000026A0 4200            	  4056:                 move.b #$00,d0
01:000026A2 4201            	  4057:                 move.b #$00,d1
01:000026A4 44FC0000        	  4058:                 move #$00,CCR              * Set Z flag to 0
01:000026A8 8101            	  4059:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026AA 67FE            	  4060:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4061: 
01:000026AC 103C0001        	  4062:                 move.b #$01,d0
01:000026B0 4201            	  4063:                 move.b #$00,d1
01:000026B2 44FC0004        	  4064:                 move #$04,CCR              * Set Z flag to 0
01:000026B6 8101            	  4065:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026B8 67FE            	  4066:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4067: 
01:000026BA 4E75            	  4068:                 rts
                            	  4069: 
                            	  4070: *-----------------------------------------------------------
                            	  4071: *-----------------------------------------------------------
                            	  4072: * OPCODE : NBCD
                            	  4073: *-----------------------------------------------------------
                            	  4074: *-----------------------------------------------------------
                            	  4075: op_NBCD:
                            	  4076: 
                            	  4077: *        NBCD to a  Register
                            	  4078: 
01:000026BC 7000            	  4079:                 moveq  #$00000000,d0 * BCD byte
01:000026BE 7200            	  4080:                 moveq  #$00000000,d1
01:000026C0 7400            	  4081:                 moveq  #$00000000,d2
01:000026C2 7600            	  4082:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000026C4 7800            	  4083:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026C6 7A00            	  4084:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026C8 2C3C00000099    	  4085:                 move.l #$00000099,d6
01:000026CE 2E3C00000099    	  4086:                 move.l #$00000099,d7 * Loop counter
                            	  4087: 
01:000026D4 2007            	  4088: NBCD_LOOP:      move.l d7,d0
01:000026D6 44FC0004        	  4089:                 move #$04,CCR        * Set Z flag to 0
                            	  4090: 
01:000026DA 4800            	  4091:                 nbcd d0
                            	  4092: 
01:000026DC 6402            	  4093:                 bcc.s NBCD_NO_C         * Check C Flag
01:000026DE 5284            	  4094:                 add.l #1,d4
01:000026E0 6602            	  4095: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:000026E2 5283            	  4096:                 add.l #1,d3
01:000026E4 DA80            	  4097: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4098: 
01:000026E6 51CFFFEC        	  4099:                 dbf d7,NBCD_LOOP
                            	  4100: 
01:000026EA 0C8300000001    	  4101:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:000026F0 66FE            	  4102:                 bne.s *
01:000026F2 0C8400000099    	  4103:                 cmpi.l #$00000099,d4
01:000026F8 66FE            	  4104:                 bne.s *
01:000026FA 0C8500002E3B    	  4105:                 cmpi.l #$00002E3B,d5
01:00002700 66FE            	  4106:                 bne.s *
                            	  4107: 
                            	  4108: 
                            	  4109: *        NBCD to a memory location
                            	  4110: 
01:00002702 7000            	  4111:                 moveq  #$00000000,d0 * BCD byte
01:00002704 7200            	  4112:                 moveq  #$00000000,d1
01:00002706 7400            	  4113:                 moveq  #$00000000,d2
01:00002708 7600            	  4114:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:0000270A 7800            	  4115:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000270C 7A00            	  4116:                 moveq  #$00000000,d5 * Cumulative BCD results
01:0000270E 2C3C00000099    	  4117:                 move.l #$00000099,d6
01:00002714 2E3C00000099    	  4118:                 move.l #$00000099,d7 * Loop counter
                            	  4119: 
01:0000271A 11C70100        	  4120: NBCD_LOOP1:     move.b d7,$00000100
01:0000271E 44FC0004        	  4121:                 move #$04,CCR        * Set Z flag to 0
                            	  4122: 
01:00002722 48380100        	  4123:                 nbcd $00000100
01:00002726 10380100        	  4124:                 move.b $00000100,d0
                            	  4125: 
01:0000272A 6402            	  4126:                 bcc.s NBCD_NO_C1        * Check C Flag
01:0000272C 5284            	  4127:                 add.l #1,d4
01:0000272E 6602            	  4128: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:00002730 5283            	  4129:                 add.l #1,d3
01:00002732 DA80            	  4130: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4131: 
01:00002734 51CFFFE4        	  4132:                 dbf d7,NBCD_LOOP1
                            	  4133: 
01:00002738 0C8300000001    	  4134:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:0000273E 66FE            	  4135:                 bne.s *
01:00002740 4A84            	  4136:                 cmpi.l #$00000000,d4
01:00002742 66FE            	  4137:                 bne.s *
01:00002744 0C8500002E3B    	  4138:                 cmpi.l #$00002E3B,d5
01:0000274A 66FE            	  4139:                 bne.s *
                            	  4140: 
                            	  4141: 
01:0000274C 4E75            	  4142:                 rts
                            	  4143: 
                            	  4144: 
                            	  4145: 
                            	  4146: *-----------------------------------------------------------
                            	  4147: *-----------------------------------------------------------
                            	  4148: * OPCODE : TRAPV
                            	  4149: *-----------------------------------------------------------
                            	  4150: *-----------------------------------------------------------
                            	  4151: op_TRAPV:
                            	  4152: 
                            	  4153: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4154: 
01:0000274E 7000            	  4155:                 moveq  #$00000000,d0 * Clear d0
                            	  4156: 
01:00002750 44FC0000        	  4157:                 move #$00,CCR        * Clear V flag
01:00002754 4E76            	  4158:                 trapv
01:00002756 4A80            	  4159:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:00002758 66FE            	  4160:                 bne.s *
                            	  4161: 
01:0000275A 44FC0002        	  4162:                 move #$02,CCR        * Set V flag
01:0000275E 4E76            	  4163:                 trapv
01:00002760 0C8012345678    	  4164:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:00002766 66FE            	  4165:                 bne.s *
                            	  4166: 
                            	  4167: 
01:00002768 4E75            	  4168:                 rts
                            	  4169: 
                            	  4170: 
                            	  4171: 
                            	  4172: *-----------------------------------------------------------
                            	  4173: *-----------------------------------------------------------
                            	  4174: * OPCODE : RTR
                            	  4175: *-----------------------------------------------------------
                            	  4176: *-----------------------------------------------------------
                            	  4177: 
                            	  4178: op_RTR:
                            	  4179: 
                            	  4180: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4181: 
01:0000276A 41FA000A        	  4182:                 lea 		RTR_DONE,a0
01:0000276E 2F08            	  4183:                 move.l 	a0,-(a7)     * push destination PC to the stack
01:00002770 3F3CFF15        	  4184:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
01:00002774 4E77            	  4185:                 rtr
                            	  4186: 
01:00002776 40C0            	  4187: RTR_DONE:       move.w SR,d0
01:00002778 0240001F        	  4188:                 andi.w #$1F,d0
01:0000277C 0C400015        	  4189:                 cmpi.w #$15,d0
01:00002780 66FE            	  4190:                 bne.s *
                            	  4191: 
01:00002782 4E75            	  4192:                 rts
                            	  4193: 
                            	  4194: 
01:00002784 283C44444444    	  4195: BSR_FAR2:       move.l #$44444444,d4
01:0000278A 4E75            	  4196:                 rts
                            	  4197: 
                            	  4198: 
                            	  4199: *-----------------------------------------------------------
                            	  4200: *-----------------------------------------------------------
                            	  4201: * OPCODE : BCC
                            	  4202: *-----------------------------------------------------------
                            	  4203: *-----------------------------------------------------------
                            	  4204: 
01:0000278C 44FC0000        	  4205: op_BCC:         move #$00,CCR
01:00002790 6202            	  4206:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:00002792 60FE            	  4207:                 bra.s *
                            	  4208: 
01:00002794 44FC0001        	  4209: BCC1:           move #$01,CCR
01:00002798 63000004        	  4210:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:0000279C 60FE            	  4211:                 bra.s *
                            	  4212: 
01:0000279E 44FC0000        	  4213: BCC2:           move #$00,CCR
01:000027A2 6402            	  4214:                 bcc.s BCC3            * Carry Clear         C=0
01:000027A4 60FE            	  4215:                 bra.s *
                            	  4216: 
01:000027A6 44FC0001        	  4217: BCC3:           move #$01,CCR
01:000027AA 65000004        	  4218:                 bcs.w BCC4            * Carry Set           C=1
01:000027AE 60FE            	  4219:                 bra.s *
                            	  4220: 
01:000027B0 44FC0000        	  4221: BCC4:           move #$00,CCR
01:000027B4 6602            	  4222:                 bne.s BCC5            * Not Equal           Z=0
01:000027B6 60FE            	  4223:                 bra.s *
                            	  4224: 
01:000027B8 44FC0004        	  4225: BCC5:           move #$04,CCR
01:000027BC 67000004        	  4226:                 beq.w BCC6            * Equal               Z=1
01:000027C0 60FE            	  4227:                 bra.s *
                            	  4228: 
01:000027C2 44FC0000        	  4229: BCC6:           move #$00,CCR
01:000027C6 6802            	  4230:                 bvc.s BCC7            * V Clear             V=0
01:000027C8 60FE            	  4231:                 bra.s *
                            	  4232: 
01:000027CA 44FC0002        	  4233: BCC7:           move #$02,CCR
01:000027CE 69000004        	  4234:                 bvs.w BCC8            * V Set               V=1
01:000027D2 60FE            	  4235:                 bra.s *
                            	  4236: 
01:000027D4 44FC0000        	  4237: BCC8:           move #$00,CCR
01:000027D8 6A02            	  4238:                 bpl.s BCC9            * Plus                N=0
01:000027DA 60FE            	  4239:                 bra.s *
                            	  4240: 
01:000027DC 44FC0008        	  4241: BCC9:           move #$08,CCR
01:000027E0 6B000004        	  4242:                 bmi.w BCC10           * Minus               N=1
01:000027E4 60FE            	  4243:                 bra.s *
                            	  4244: 
01:000027E6 44FC0000        	  4245: BCC10:          move #$00,CCR
01:000027EA 6C02            	  4246:                 bge.s BCC11           * Greater or Equal    N=V
01:000027EC 60FE            	  4247:                 bra.s *
                            	  4248: 
01:000027EE 44FC0002        	  4249: BCC11:          move #$02,CCR
01:000027F2 6D000004        	  4250:                 blt.w BCC12           * Less Than           N!=V
01:000027F6 60FE            	  4251:                 bra.s *
                            	  4252: 
01:000027F8 44FC000A        	  4253: BCC12:          move #$0A,CCR
01:000027FC 6E02            	  4254:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:000027FE 60FE            	  4255:                 bra.s *
                            	  4256: 
01:00002800 44FC0006        	  4257: BCC13:          move #$06,CCR
01:00002804 6F000004        	  4258:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:00002808 60FE            	  4259:                 bra.s *
                            	  4260: 
                            	  4261: 
01:0000280A 4E75            	  4262: BCC14:          rts
                            	  4263: 
                            	  4264: 
                            	  4265: *-----------------------------------------------------------
                            	  4266: *-----------------------------------------------------------
                            	  4267: * OPCODE : DBCC
                            	  4268: *-----------------------------------------------------------
                            	  4269: *-----------------------------------------------------------
                            	  4270: 
01:0000280C 7003            	  4271: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:0000280E 7200            	  4272:                 moveq  #$00000000,d1    * Accumulator
01:00002810 44FC0000        	  4273:                 move #$00,CCR
                            	  4274: 
01:00002814 5201            	  4275: DBCC_LOOP1:     addi.b #$1,d1
01:00002816 51C8FFFC        	  4276:                 dbf d0,DBCC_LOOP1
                            	  4277: 
01:0000281A 0C8100000004    	  4278:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:00002820 66FE            	  4279:                 bne.s *
                            	  4280: 
01:00002822 5201            	  4281: DBCC_LOOP2:     addi.b #$1,d1
01:00002824 54C8FFFC        	  4282:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4283: 
01:00002828 0C8100000005    	  4284:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:0000282E 66FE            	  4285:                 bne.s *
                            	  4286: 
01:00002830 4E75            	  4287:                 rts
                            	  4288: 
                            	  4289: 
                            	  4290: *-----------------------------------------------------------
                            	  4291: *-----------------------------------------------------------
                            	  4292: * OPCODE : SCC
                            	  4293: *-----------------------------------------------------------
                            	  4294: *-----------------------------------------------------------
                            	  4295: 
01:00002832 44FC0001        	  4296: op_SCC:         move #$01,CCR
01:00002836 54F900010000    	  4297:                 scc $00010000                   * Clear the EA byte
01:0000283C 4A3900010000    	  4298:                 cmpi.b #$00,$00010000
01:00002842 66FE            	  4299:                 bne.s *
                            	  4300: 
01:00002844 44FC0000        	  4301:                 move #$00,CCR
01:00002848 54F900010000    	  4302:                 scc $00010000                   * Set the EA byte to 0xFF
01:0000284E 0C3900FF00010000	  4303:                 cmpi.b #$FF,$00010000
01:00002856 66FE            	  4304:                 bne.s *
                            	  4305: 
01:00002858 4E75            	  4306:                 rts
                            	  4307: 
                            	  4308: 
                            	  4309: 
                            	  4310: *-----------------------------------------------------------
                            	  4311: *-----------------------------------------------------------
                            	  4312: * OPCODE : ADDQ
                            	  4313: *-----------------------------------------------------------
                            	  4314: *-----------------------------------------------------------
                            	  4315: 
                            	  4316: op_ADDQ:
                            	  4317: 
                            	  4318: *     BYTE
01:0000285A 203C000000FF    	  4319:                 move.l #$000000FF,d0    * Loop counter
01:00002860 7200            	  4320:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002862 7400            	  4321:                 moveq  #$00000000,d2    * Data results accumulator
01:00002864 7600            	  4322:                 moveq  #$00000000,d3
01:00002866 7800            	  4323:                 moveq  #$00000000,d4
01:00002868 7A00            	  4324:                 moveq  #$00000000,d5
01:0000286A 7C00            	  4325:                 moveq  #$00000000,d6
01:0000286C 7E00            	  4326:                 moveq  #$00000000,d7
                            	  4327: 
01:0000286E 5605            	  4328: ADDQ_LOOP1:     addq.b #3,d5
01:00002870 40C6            	  4329:                 move.w SR,d6
01:00002872 02860000001F    	  4330:                 andi.l #$1F,d6        * Isolate flags
01:00002878 D286            	  4331:                 add.l d6,d1           * Copy flag results into accumulator
01:0000287A D485            	  4332:                 add.l d5,d2           * Copy data results into data accumulator
01:0000287C 51C8FFF0        	  4333:                 dbf d0,ADDQ_LOOP1
                            	  4334: 
01:00002880 0C810000043D    	  4335:                 cmpi.l #$0000043D,d1
01:00002886 66FE            	  4336:                 bne.s *
01:00002888 0C8200007F80    	  4337:                 cmpi.l #$00007F80,d2
01:0000288E 66FE            	  4338:                 bne.s *
                            	  4339: 
                            	  4340: 
                            	  4341: *     WORD
01:00002890 203C000000FF    	  4342:                 move.l #$000000FF,d0    * Loop counter
01:00002896 7200            	  4343:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002898 7400            	  4344:                 moveq  #$00000000,d2    * Data results accumulator
01:0000289A 7600            	  4345:                 moveq  #$00000000,d3
01:0000289C 7800            	  4346:                 moveq  #$00000000,d4
01:0000289E 2A3C0000FFF0    	  4347:                 move.l #$0000FFF0,d5
01:000028A4 7C00            	  4348:                 moveq  #$00000000,d6
01:000028A6 7E00            	  4349:                 moveq  #$00000000,d7
01:000028A8 307C0100        	  4350:                 move.l #$00000100,a0
                            	  4351: 
01:000028AC 5A45            	  4352: ADDQ_LOOP2:     addq.w #5,d5
01:000028AE 40C6            	  4353:                 move.w SR,d6
01:000028B0 02860000001F    	  4354:                 andi.l #$1F,d6        * Isolate flags
01:000028B6 D286            	  4355:                 add.l d6,d1           * Copy flag results into accumulator
01:000028B8 D485            	  4356:                 add.l d5,d2           * Copy data results into data accumulator
01:000028BA 51C8FFF0        	  4357:                 dbf d0,ADDQ_LOOP2
                            	  4358: 
01:000028BE 0C8100000029    	  4359:                 cmpi.l #$00000029,d1
01:000028C4 66FE            	  4360:                 bne.s *
01:000028C6 0C8200057280    	  4361:                 cmpi.l #$00057280,d2
01:000028CC 66FE            	  4362:                 bne.s *
                            	  4363: 
                            	  4364: 
                            	  4365: *     LONG
01:000028CE 203C000000FF    	  4366:                 move.l #$000000FF,d0    * Loop counter
01:000028D4 7200            	  4367:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028D6 7400            	  4368:                 moveq  #$00000000,d2    * Data results accumulator
01:000028D8 7600            	  4369:                 moveq  #$00000000,d3
01:000028DA 7800            	  4370:                 moveq  #$00000000,d4
01:000028DC 7AF0            	  4371:                 move.l #$FFFFFFF0,d5
01:000028DE 7C00            	  4372:                 moveq  #$00000000,d6
01:000028E0 7E00            	  4373:                 moveq  #$00000000,d7
                            	  4374: 
01:000028E2 5285            	  4375: ADDQ_LOOP3:     addq.l #1,d5
01:000028E4 40C6            	  4376:                 move.w SR,d6
01:000028E6 02860000001F    	  4377:                 andi.l #$1F,d6        * Isolate flags
01:000028EC D286            	  4378:                 add.l d6,d1           * Copy flag results into accumulator
01:000028EE D485            	  4379:                 add.l d5,d2           * Copy data results into data accumulator
01:000028F0 51C8FFF0        	  4380:                 dbf d0,ADDQ_LOOP3
                            	  4381: 
01:000028F4 0C810000008D    	  4382:                 cmpi.l #$0000008D,d1
01:000028FA 66FE            	  4383:                 bne.s *
01:000028FC 0C8200007080    	  4384:                 cmpi.l #$00007080,d2
01:00002902 66FE            	  4385:                 bne.s *
                            	  4386: 
                            	  4387: *     Check that Flags are not updated for Address registers
01:00002904 207C0000FFFF    	  4388:                 move.l #$0000FFFF,a0
01:0000290A 44FC0000        	  4389:                 move #$00,CCR         * Clear flags
01:0000290E 5E48            	  4390:                 addq.w #$7,a0
01:00002910 65FE            	  4391:                 bcs.s *
                            	  4392: 
01:00002912 4E75            	  4393:                 rts
                            	  4394: 
                            	  4395: 
                            	  4396: 
                            	  4397: *-----------------------------------------------------------
                            	  4398: *-----------------------------------------------------------
                            	  4399: * OPCODE : SUBQ
                            	  4400: *-----------------------------------------------------------
                            	  4401: *-----------------------------------------------------------
                            	  4402: 
                            	  4403: op_SUBQ:
                            	  4404: 
                            	  4405: *     BYTE
01:00002914 203C000000FF    	  4406:                 move.l #$000000FF,d0    * Loop counter
01:0000291A 7200            	  4407:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000291C 243C00001234    	  4408:                 move.l #$00001234,d2    * Data results accumulator
01:00002922 7600            	  4409:                 moveq  #$00000000,d3
01:00002924 7800            	  4410:                 moveq  #$00000000,d4
01:00002926 7A12            	  4411:                 moveq  #$00000012,d5
01:00002928 7C00            	  4412:                 moveq  #$00000000,d6
01:0000292A 7E00            	  4413:                 moveq  #$00000000,d7
                            	  4414: 
01:0000292C 5305            	  4415: SUBQ_LOOP1:     subq.b #1,d5
01:0000292E 40C6            	  4416:                 move.w SR,d6
01:00002930 02860000001F    	  4417:                 andi.l #$1F,d6        * Isolate flags
01:00002936 D286            	  4418:                 add.l d6,d1           * Copy flag results into accumulator
01:00002938 D485            	  4419:                 add.l d5,d2           * Copy data results into data accumulator
01:0000293A 51C8FFF0        	  4420:                 dbf d0,SUBQ_LOOP1
                            	  4421: 
01:0000293E 0C8100000417    	  4422:                 cmpi.l #$00000417,d1
01:00002944 66FE            	  4423:                 bne.s *
01:00002946 0C82000091B4    	  4424:                 cmpi.l #$000091B4,d2
01:0000294C 66FE            	  4425:                 bne.s *
                            	  4426: 
                            	  4427: 
                            	  4428: *     WORD
01:0000294E 203C000000FF    	  4429:                 move.l #$000000FF,d0    * Loop counter
01:00002954 7200            	  4430:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002956 7400            	  4431:                 moveq  #$00000000,d2    * Data results accumulator
01:00002958 7600            	  4432:                 moveq  #$00000000,d3
01:0000295A 7800            	  4433:                 moveq  #$00000000,d4
01:0000295C 7A02            	  4434:                 moveq  #$00000002,d5
01:0000295E 7C00            	  4435:                 moveq  #$00000000,d6
01:00002960 7E00            	  4436:                 moveq  #$00000000,d7
01:00002962 307C0100        	  4437:                 move.l #$00000100,a0
                            	  4438: 
01:00002966 5B45            	  4439: SUBQ_LOOP2:     subq.w #5,d5
01:00002968 40C6            	  4440:                 move.w SR,d6
01:0000296A 02860000001F    	  4441:                 andi.l #$1F,d6        * Isolate flags
01:00002970 D286            	  4442:                 add.l d6,d1           * Copy flag results into accumulator
01:00002972 D485            	  4443:                 add.l d5,d2           * Copy data results into data accumulator
01:00002974 51C8FFF0        	  4444:                 dbf d0,SUBQ_LOOP2
                            	  4445: 
01:00002978 0C8100000811    	  4446:                 cmpi.l #$00000811,d1
01:0000297E 66FE            	  4447:                 bne.s *
01:00002980 0C8200FD7F80    	  4448:                 cmpi.l #$00FD7F80,d2
01:00002986 66FE            	  4449:                 bne.s *
                            	  4450: 
                            	  4451: 
                            	  4452: *     LONG
01:00002988 203C000000FF    	  4453:                 move.l #$000000FF,d0    * Loop counter
01:0000298E 7200            	  4454:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002990 7400            	  4455:                 moveq  #$00000000,d2    * Data results accumulator
01:00002992 7600            	  4456:                 moveq  #$00000000,d3
01:00002994 7800            	  4457:                 moveq  #$00000000,d4
01:00002996 7A07            	  4458:                 moveq  #$00000007,d5
01:00002998 7C00            	  4459:                 moveq  #$00000000,d6
01:0000299A 7E00            	  4460:                 moveq  #$00000000,d7
                            	  4461: 
01:0000299C 5385            	  4462: SUBQ_LOOP3:     subq.l #1,d5
01:0000299E 40C6            	  4463:                 move.w SR,d6
01:000029A0 02860000001F    	  4464:                 andi.l #$1F,d6        * Isolate flags
01:000029A6 D286            	  4465:                 add.l d6,d1           * Copy flag results into accumulator
01:000029A8 D485            	  4466:                 add.l d5,d2           * Copy data results into data accumulator
01:000029AA 51C8FFF0        	  4467:                 dbf d0,SUBQ_LOOP3
                            	  4468: 
01:000029AE 0C81000007DD    	  4469:                 cmpi.l #$000007DD,d1
01:000029B4 66FE            	  4470:                 bne.s *
01:000029B6 0C82FFFF8680    	  4471:                 cmpi.l #$FFFF8680,d2
01:000029BC 66FE            	  4472:                 bne.s *
                            	  4473: 
                            	  4474: *     Check that Flags are not updated for Address registers
01:000029BE 207C0001FFFF    	  4475:                 move.l #$0001FFFF,a0
01:000029C4 44FC0000        	  4476:                 move #$00,CCR         * Clear flags
01:000029C8 5F48            	  4477:                 subq.w #$7,a0
01:000029CA 65FE            	  4478:                 bcs.s *
                            	  4479: 
01:000029CC 4E75            	  4480:                 rts
                            	  4481: 
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: *-----------------------------------------------------------
                            	  4486: *-----------------------------------------------------------
                            	  4487: * OPCODE : MOVEQ
                            	  4488: *-----------------------------------------------------------
                            	  4489: *-----------------------------------------------------------
                            	  4490: 
                            	  4491: op_MOVEQ:
01:000029CE 7000            	  4492:                 moveq  #$00000000,d0
01:000029D0 7000            	  4493:                 moveq #$0,d0
01:000029D2 66FE            	  4494:                 bne.s *
01:000029D4 4A80            	  4495:                 cmpi.l #$00000000,d0
01:000029D6 66FE            	  4496:                 bne.s *
                            	  4497: 
01:000029D8 7000            	  4498:                 moveq  #$00000000,d0
01:000029DA 7080            	  4499:                 moveq #-128,d0
01:000029DC 67FE            	  4500:                 beq.s *
01:000029DE 6AFE            	  4501:                 bpl.s *
01:000029E0 0C80FFFFFF80    	  4502:                 cmpi.l #$FFFFFF80,d0
01:000029E6 66FE            	  4503:                 bne.s *
                            	  4504: 
                            	  4505: 
01:000029E8 4E75            	  4506:                 rts
                            	  4507: 
                            	  4508: 
                            	  4509: *-----------------------------------------------------------
                            	  4510: *-----------------------------------------------------------
                            	  4511: * OPCODE : DIVU
                            	  4512: *-----------------------------------------------------------
                            	  4513: *-----------------------------------------------------------
                            	  4514: 
                            	  4515: op_DIVU:
                            	  4516: 
01:000029EA 203CA5A5A5A5    	  4517:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:000029F0 223C00005A5A    	  4518:                 move.l #$00005a5a,d1        * Initial Divisor
01:000029F6 243CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d2
01:000029FC 7600            	  4520:                 moveq  #$00000000,d3
01:000029FE 7800            	  4521:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A00 7A00            	  4522:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A02 7C0E            	  4523:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A04 7E1E            	  4524:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4525: 
                            	  4526: 
01:00002A06 80C1            	  4527: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:00002A08 40C3            	  4528:                 move.w SR,d3
01:00002A0A 02830000000C    	  4529:                 andi.l #$0C,d3            * Isolate flags
01:00002A10 DA83            	  4530:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A12 D880            	  4531:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A14 E289            	  4532:                 lsr.l #$1,d1
                            	  4533: 
01:00002A16 51CEFFEE        	  4534:                 dbf d6,DIVU_OUTER1
01:00002A1A E28A            	  4535:                 lsr.l #$1,d2
01:00002A1C 2002            	  4536:                 move.l d2,d0
01:00002A1E 223C00005A5A    	  4537:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A24 7C0E            	  4538:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A26 51CFFFDE        	  4539:                 dbf d7,DIVU_OUTER1
                            	  4540: 
01:00002A2A 0C8492FEDB89    	  4541:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002A30 66FE            	  4542:                 bne.s *
                            	  4543: 
01:00002A32 0C8500000110    	  4544:                 cmpi.l #$00000110,d5      * Check the Flag results
01:00002A38 66FE            	  4545:                 bne.s *
                            	  4546: 
                            	  4547: 
01:00002A3A 4E75            	  4548:                 rts
                            	  4549: 
                            	  4550: 
                            	  4551: 
                            	  4552: *-----------------------------------------------------------
                            	  4553: *-----------------------------------------------------------
                            	  4554: * OPCODE : DIVS
                            	  4555: *-----------------------------------------------------------
                            	  4556: *-----------------------------------------------------------
                            	  4557: 
                            	  4558: op_DIVS:
                            	  4559: 
01:00002A3C 203CA5A5A5A5    	  4560:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A42 223C00005A5A    	  4561:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A48 243CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d2
01:00002A4E 7600            	  4563:                 moveq  #$00000000,d3
01:00002A50 7800            	  4564:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A52 7A00            	  4565:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A54 7C0E            	  4566:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A56 7E1E            	  4567:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4568: 
                            	  4569: 
01:00002A58 81C1            	  4570: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:00002A5A 40C3            	  4571:                 move.w SR,d3
01:00002A5C 02830000000C    	  4572:                 andi.l #$0C,d3            * Isolate flags
01:00002A62 DA83            	  4573:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A64 D880            	  4574:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A66 E289            	  4575:                 lsr.l #$1,d1
                            	  4576: 
01:00002A68 51CEFFEE        	  4577:                 dbf d6,DIVS_OUTER1
01:00002A6C E28A            	  4578:                 lsr.l #$1,d2
01:00002A6E 2002            	  4579:                 move.l d2,d0
01:00002A70 223C00005A5A    	  4580:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A76 7C0E            	  4581:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A78 51CFFFDE        	  4582:                 dbf d7,DIVS_OUTER1
                            	  4583: 
01:00002A7C 0C844EC5D057    	  4584:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002A82 66FE            	  4585:                 bne.s *
                            	  4586: 
01:00002A84 0C8500000038    	  4587:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002A8A 66FE            	  4588:                 bne.s *
                            	  4589: 
                            	  4590: 
01:00002A8C 4E75            	  4591:                 rts
                            	  4592: 
                            	  4593: 
                            	  4594: 
                            	  4595: *-----------------------------------------------------------
                            	  4596: *-----------------------------------------------------------
                            	  4597: * OPCODE : OR
                            	  4598: *-----------------------------------------------------------
                            	  4599: *-----------------------------------------------------------
                            	  4600: 
                            	  4601: op_OR:
                            	  4602: 
                            	  4603: *  * <EA> to Register
                            	  4604: 
01:00002A8E 203CA5A5A5A5    	  4605:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002A94 223C8167E123    	  4606:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002A9A 243CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d2
01:00002AA0 7600            	  4608:                 moveq  #$00000000,d3
01:00002AA2 7800            	  4609:                 moveq  #$00000000,d4       * Cumulative data results
01:00002AA4 7A00            	  4610:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AA6 7C1E            	  4611:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AA8 7E1E            	  4612:                 move.l #$0000001E,d7       * Outer loop counter
01:00002AAA 307C0100        	  4613:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4614: 
                            	  4615: 
                            	  4616: OR_OUTER1:
                            	  4617: 
                            	  4618: *     BYTE
01:00002AAE 2081            	  4619:                 move.l d1,(a0)
01:00002AB0 8010            	  4620:                 or.b (a0),d0
01:00002AB2 40C3            	  4621:                 move.w SR,d3
01:00002AB4 02830000000C    	  4622:                 andi.l #$0C,d3            * Isolate flags
01:00002ABA DA83            	  4623:                 add.l d3,d5               * Copy flag results into accumulator
01:00002ABC D880            	  4624:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4625: 
                            	  4626: *     WORD
01:00002ABE 2081            	  4627:                 move.l d1,(a0)
01:00002AC0 8050            	  4628:                 or.w (a0),d0
01:00002AC2 40C3            	  4629:                 move.w SR,d3
01:00002AC4 02830000000C    	  4630:                 andi.l #$0C,d3            * Isolate flags
01:00002ACA DA83            	  4631:                 add.l d3,d5               * Copy flag results into accumulator
01:00002ACC D880            	  4632:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4633: 
                            	  4634: *     LONG
01:00002ACE 2081            	  4635:                 move.l d1,(a0)
01:00002AD0 8090            	  4636:                 or.l (a0),d0
01:00002AD2 40C3            	  4637:                 move.w SR,d3
01:00002AD4 02830000000F    	  4638:                 andi.l #$0F,d3            * Isolate flags
01:00002ADA DA83            	  4639:                 add.l d3,d5               * Copy flag results into accumulator
01:00002ADC D880            	  4640:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4641: 
                            	  4642: 
01:00002ADE E289            	  4643:                 lsr.l #$1,d1
01:00002AE0 51CEFFCC        	  4644:                 dbf d6,OR_OUTER1
01:00002AE4 E28A            	  4645:                 lsr.l #$1,d2
01:00002AE6 223C8167E123    	  4646:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002AEC 7C1E            	  4647:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AEE 51CFFFBE        	  4648:                 dbf d7,OR_OUTER1
                            	  4649: 
01:00002AF2 0C8476EAC803    	  4650:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002AF8 66FE            	  4651:                 bne.s *
01:00002AFA 0C8500005A18    	  4652:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002B00 66FE            	  4653:                 bne.s *
                            	  4654: 
                            	  4655: 
                            	  4656: *  * Register to <EA>
                            	  4657: 
01:00002B02 203C86738374    	  4658:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B08 223CFC55F2FE    	  4659:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B0E 243C86738374    	  4660:                 move.l #$86738374,d2
01:00002B14 7600            	  4661:                 moveq  #$00000000,d3
01:00002B16 7800            	  4662:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B18 7A00            	  4663:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B1A 7C1E            	  4664:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B1C 7E1D            	  4665:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B1E 307C0100        	  4666:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4667: 
                            	  4668: 
                            	  4669: OR_OUTER2:
                            	  4670: 
                            	  4671: *     BYTE
01:00002B22 2080            	  4672:                 move.l d0,(a0)
01:00002B24 8310            	  4673:                 or.b d1,(a0)
01:00002B26 40C3            	  4674:                 move.w SR,d3
01:00002B28 02830000000C    	  4675:                 andi.l #$0C,d3            * Isolate flags
01:00002B2E DA83            	  4676:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B30 D890            	  4677:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4678: 
                            	  4679: *     WORD
01:00002B32 2080            	  4680:                 move.l d0,(a0)
01:00002B34 8350            	  4681:                 or.w d1,(a0)
01:00002B36 40C3            	  4682:                 move.w SR,d3
01:00002B38 02830000000C    	  4683:                 andi.l #$0C,d3            * Isolate flags
01:00002B3E DA83            	  4684:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B40 D890            	  4685:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4686: 
                            	  4687: *     LONG
01:00002B42 2080            	  4688:                 move.l d0,(a0)
01:00002B44 8390            	  4689:                 or.l d1,(a0)
01:00002B46 40C3            	  4690:                 move.w SR,d3
01:00002B48 02830000000F    	  4691:                 andi.l #$0F,d3            * Isolate flags
01:00002B4E DA83            	  4692:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B50 D890            	  4693:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4694: 
                            	  4695: 
01:00002B52 E289            	  4696:                 lsr.l #$1,d1
01:00002B54 51CEFFCC        	  4697:                 dbf d6,OR_OUTER2
01:00002B58 E28A            	  4698:                 lsr.l #$1,d2
01:00002B5A 223C8167E123    	  4699:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B60 7C1E            	  4700:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B62 51CFFFBE        	  4701:                 dbf d7,OR_OUTER2
                            	  4702: 
01:00002B66 0C84FA82B9E4    	  4703:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002B6C 66FE            	  4704:                 bne.s *
01:00002B6E 0C8500005730    	  4705:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002B74 66FE            	  4706:                 bne.s *
                            	  4707: 
                            	  4708: 
01:00002B76 4E75            	  4709:                 rts
                            	  4710: 
                            	  4711: 
                            	  4712: 
                            	  4713: *-----------------------------------------------------------
                            	  4714: *-----------------------------------------------------------
                            	  4715: * OPCODE : AND
                            	  4716: *-----------------------------------------------------------
                            	  4717: *-----------------------------------------------------------
                            	  4718: 
                            	  4719: op_AND:
                            	  4720: 
                            	  4721: *  * <EA> to Register
                            	  4722: 
01:00002B78 203CA5A5A5A5    	  4723:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002B7E 223C8167E123    	  4724:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002B84 243CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d2
01:00002B8A 7600            	  4726:                 moveq  #$00000000,d3
01:00002B8C 7800            	  4727:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B8E 7A00            	  4728:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B90 7C1E            	  4729:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B92 7E1E            	  4730:                 move.l #$0000001E,d7       * Outer loop counter
01:00002B94 307C0100        	  4731:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4732: 
                            	  4733: 
                            	  4734: AND_OUTER1:
                            	  4735: 
                            	  4736: *     BYTE
01:00002B98 2081            	  4737:                 move.l d1,(a0)
01:00002B9A C010            	  4738:                 and.b (a0),d0
01:00002B9C 40C3            	  4739:                 move.w sr,d3
01:00002B9E 02830000000C    	  4740:                 andi.l #$0C,d3            * Isolate flags
01:00002BA4 DA83            	  4741:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BA6 D880            	  4742:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4743: 
                            	  4744: *     WORD
01:00002BA8 2081            	  4745:                 move.l d1,(a0)
01:00002BAA C050            	  4746:                 and.w (a0),d0
01:00002BAC 40C3            	  4747:                 move.w sr,d3
01:00002BAE 02830000000C    	  4748:                 andi.l #$0C,d3            * Isolate flags
01:00002BB4 DA83            	  4749:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BB6 D880            	  4750:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4751: 
                            	  4752: *     LONG
01:00002BB8 2081            	  4753:                 move.l d1,(a0)
01:00002BBA C090            	  4754:                 and.l (a0),d0
01:00002BBC 40C3            	  4755:                 move.w sr,d3
01:00002BBE 02830000000F    	  4756:                 andi.l #$0F,d3            * Isolate flags
01:00002BC4 DA83            	  4757:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BC6 D880            	  4758:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4759: 
                            	  4760: 
01:00002BC8 E289            	  4761:                 lsr.l #$1,d1
01:00002BCA 51CEFFCC        	  4762:                 dbf d6,AND_OUTER1
01:00002BCE E28A            	  4763:                 lsr.l #$1,d2
01:00002BD0 223C8167E123    	  4764:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BD6 7C1E            	  4765:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BD8 51CFFFBE        	  4766:                 dbf d7,AND_OUTER1
                            	  4767: 
01:00002BDC 0C84CF212883    	  4768:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002BE2 66FE            	  4769:                 bne.s *
01:00002BE4 0C8500002D10    	  4770:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002BEA 66FE            	  4771:                 bne.s *
                            	  4772: 
                            	  4773: 
                            	  4774: *  * Register to <EA>
                            	  4775: 
01:00002BEC 203C86738374    	  4776:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002BF2 223CFC55F2FE    	  4777:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002BF8 243C86738374    	  4778:                 move.l #$86738374,d2
01:00002BFE 7600            	  4779:                 moveq  #$00000000,d3
01:00002C00 7800            	  4780:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C02 7A00            	  4781:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C04 7C1E            	  4782:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C06 7E1D            	  4783:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C08 307C0100        	  4784:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4785: 
                            	  4786: 
                            	  4787: AND_OUTER2:
                            	  4788: 
                            	  4789: *     BYTE
01:00002C0C 2080            	  4790:                 move.l d0,(a0)
01:00002C0E C310            	  4791:                 and.b d1,(a0)
01:00002C10 40C3            	  4792:                 move.w sr,d3
01:00002C12 02830000000C    	  4793:                 andi.l #$0C,d3            * Isolate flags
01:00002C18 DA83            	  4794:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C1A D890            	  4795:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4796: 
                            	  4797: *     WORD
01:00002C1C 2080            	  4798:                 move.l d0,(a0)
01:00002C1E C350            	  4799:                 and.w d1,(a0)
01:00002C20 40C3            	  4800:                 move.w sr,d3
01:00002C22 02830000000C    	  4801:                 andi.l #$0C,d3            * Isolate flags
01:00002C28 DA83            	  4802:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C2A D890            	  4803:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4804: 
                            	  4805: *     LONG
01:00002C2C 2080            	  4806:                 move.l d0,(a0)
01:00002C2E C390            	  4807:                 and.l d1,(a0)
01:00002C30 40C3            	  4808:                 move.w sr,d3
01:00002C32 02830000000F    	  4809:                 andi.l #$0F,d3            * Isolate flags
01:00002C38 DA83            	  4810:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C3A D890            	  4811:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4812: 
                            	  4813: 
01:00002C3C E289            	  4814:                 lsr.l #$1,d1
01:00002C3E 51CEFFCC        	  4815:                 dbf d6,AND_OUTER2
01:00002C42 E28A            	  4816:                 lsr.l #$1,d2
01:00002C44 223C8167E123    	  4817:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C4A 7C1E            	  4818:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C4C 51CFFFBE        	  4819:                 dbf d7,AND_OUTER2
                            	  4820: 
01:00002C50 0C844A3DE544    	  4821:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002C56 66FE            	  4822:                 bne.s *
01:00002C58 0C85000018E8    	  4823:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002C5E 66FE            	  4824:                 bne.s *
                            	  4825: 
                            	  4826: 
01:00002C60 4E75            	  4827:                 rts
                            	  4828: 
                            	  4829: 
                            	  4830: 
                            	  4831: *-----------------------------------------------------------
                            	  4832: *-----------------------------------------------------------
                            	  4833: * OPCODE : EOR
                            	  4834: *-----------------------------------------------------------
                            	  4835: *-----------------------------------------------------------
                            	  4836: 
                            	  4837: op_EOR:
                            	  4838: 
                            	  4839: *  * Register to <EA>
                            	  4840: 
01:00002C62 203C86738374    	  4841:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C68 223CFC55F2FE    	  4842:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C6E 243C86738374    	  4843:                 move.l #$86738374,d2
01:00002C74 7600            	  4844:                 moveq  #$00000000,d3
01:00002C76 7800            	  4845:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C78 7A00            	  4846:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C7A 7C1E            	  4847:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C7C 7E1D            	  4848:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C7E 307C0100        	  4849:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4850: 
                            	  4851: 
                            	  4852: EOR_OUTER2:
                            	  4853: 
                            	  4854: *     BYTE
01:00002C82 2080            	  4855:                 move.l d0,(a0)
01:00002C84 B310            	  4856:                 eor.b d1,(a0)
01:00002C86 40C3            	  4857:                 move.w sr,d3
01:00002C88 02830000000C    	  4858:                 andi.l #$0C,d3            * Isolate flags
01:00002C8E DA83            	  4859:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C90 D890            	  4860:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4861: 
                            	  4862: *     WORD
01:00002C92 2080            	  4863:                 move.l d0,(a0)
01:00002C94 B350            	  4864:                 eor.w d1,(a0)
01:00002C96 40C3            	  4865:                 move.w sr,d3
01:00002C98 02830000000C    	  4866:                 andi.l #$0C,d3            * Isolate flags
01:00002C9E DA83            	  4867:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CA0 D890            	  4868:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4869: 
                            	  4870: *     LONG
01:00002CA2 2080            	  4871:                 move.l d0,(a0)
01:00002CA4 B390            	  4872:                 eor.l d1,(a0)
01:00002CA6 40C3            	  4873:                 move.w sr,d3
01:00002CA8 02830000000F    	  4874:                 andi.l #$0F,d3            * Isolate flags
01:00002CAE DA83            	  4875:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CB0 D890            	  4876:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4877: 
                            	  4878: 
01:00002CB2 E289            	  4879:                 lsr.l #$1,d1
01:00002CB4 51CEFFCC        	  4880:                 dbf d6,EOR_OUTER2
01:00002CB8 E28A            	  4881:                 lsr.l #$1,d2
01:00002CBA 223C8167E123    	  4882:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CC0 7C1E            	  4883:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CC2 51CFFFBE        	  4884:                 dbf d7,EOR_OUTER2
                            	  4885: 
01:00002CC6 0C8455C5EB70    	  4886:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002CCC 66FE            	  4887:                 bne.s *
01:00002CCE 0C8500004430    	  4888:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002CD4 66FE            	  4889:                 bne.s *
                            	  4890: 
                            	  4891: 
01:00002CD6 4E75            	  4892:                 rts
                            	  4893: 
                            	  4894: 
                            	  4895: *-----------------------------------------------------------
                            	  4896: *-----------------------------------------------------------
                            	  4897: * OPCODE : CMP
                            	  4898: *-----------------------------------------------------------
                            	  4899: *-----------------------------------------------------------
                            	  4900: 
                            	  4901: op_CMP:
                            	  4902: 
                            	  4903: 
                            	  4904: *  * <EA> to Register
                            	  4905: 
01:00002CD8 203CA5A5A5A5    	  4906:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002CDE 223C8167E123    	  4907:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002CE4 243CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d2
01:00002CEA 7600            	  4909:                 moveq  #$00000000,d3
01:00002CEC 7800            	  4910:                 moveq  #$00000000,d4       * Cumulative data results
01:00002CEE 7A00            	  4911:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002CF0 7C1E            	  4912:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CF2 7E1E            	  4913:                 move.l #$0000001E,d7       * Outer loop counter
01:00002CF4 307C0100        	  4914:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4915: 
                            	  4916: 
                            	  4917: CMP_OUTER1:
                            	  4918: 
                            	  4919: *     BYTE
01:00002CF8 2081            	  4920:                 move.l d1,(a0)
01:00002CFA B010            	  4921:                 cmp.b (a0),d0
01:00002CFC 40C3            	  4922:                 move.w sr,d3
01:00002CFE 02830000000F    	  4923:                 andi.l #$0F,d3            * Isolate flags
01:00002D04 DA83            	  4924:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D06 D880            	  4925:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4926: 
                            	  4927: *     WORD
01:00002D08 2081            	  4928:                 move.l d1,(a0)
01:00002D0A B050            	  4929:                 cmp.w (a0),d0
01:00002D0C 40C3            	  4930:                 move.w sr,d3
01:00002D0E 02830000000F    	  4931:                 andi.l #$0F,d3            * Isolate flags
01:00002D14 DA83            	  4932:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D16 D880            	  4933:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4934: 
                            	  4935: *     LONG
01:00002D18 2081            	  4936:                 move.l d1,(a0)
01:00002D1A B090            	  4937:                 cmp.l (a0),d0
01:00002D1C 40C3            	  4938:                 move.w sr,d3
01:00002D1E 02830000000F    	  4939:                 andi.l #$0F,d3            * Isolate flags
01:00002D24 DA83            	  4940:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D26 D880            	  4941:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4942: 
                            	  4943: 
01:00002D28 E289            	  4944:                 lsr.l #$1,d1
01:00002D2A 51CEFFCC        	  4945:                 dbf d6,CMP_OUTER1
01:00002D2E E28A            	  4946:                 lsr.l #$1,d2
01:00002D30 223C8167E123    	  4947:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D36 7C1E            	  4948:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D38 51CFFFBE        	  4949:                 dbf d7,CMP_OUTER1
                            	  4950: 
01:00002D3C 0C847878712F    	  4951:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002D42 66FE            	  4952:                 bne.s *
01:00002D44 0C8500005502    	  4953:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002D4A 66FE            	  4954:                 bne.s *
                            	  4955: 
                            	  4956: 
                            	  4957: 
01:00002D4C 4E75            	  4958:                 rts
                            	  4959: 
                            	  4960: 
                            	  4961: *-----------------------------------------------------------
                            	  4962: *-----------------------------------------------------------
                            	  4963: * OPCODE : CMPA
                            	  4964: *-----------------------------------------------------------
                            	  4965: *-----------------------------------------------------------
                            	  4966: 
                            	  4967: op_CMPA:
                            	  4968: 
                            	  4969: 
                            	  4970: *  * <EA> to Register
                            	  4971: 
01:00002D4E 207CA5A5A5A5    	  4972:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002D54 223C8167E123    	  4973:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D5A 243CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,d2
01:00002D60 7600            	  4975:                 moveq  #$00000000,d3
01:00002D62 7800            	  4976:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D64 7A00            	  4977:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D66 7C1E            	  4978:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D68 7E1E            	  4979:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D6A 327C0100        	  4980:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4981: 
                            	  4982: 
                            	  4983: CMPA_OUTER1:
                            	  4984: 
                            	  4985: 
                            	  4986: *     WORD
01:00002D6E 2281            	  4987:                 move.l d1,(a1)
01:00002D70 B0D1            	  4988:                 cmpa.w (a1),a0
01:00002D72 40C3            	  4989:                 move.w sr,d3
01:00002D74 02830000000F    	  4990:                 andi.l #$0F,d3            * Isolate flags
01:00002D7A DA83            	  4991:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D7C D888            	  4992:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4993: 
                            	  4994: *     LONG
01:00002D7E 2281            	  4995:                 move.l d1,(a1)
01:00002D80 B1D1            	  4996:                 cmpa.l (a1),a0
01:00002D82 40C3            	  4997:                 move.w sr,d3
01:00002D84 02830000000F    	  4998:                 andi.l #$0F,d3            * Isolate flags
01:00002D8A DA83            	  4999:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D8C D888            	  5000:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5001: 
                            	  5002: 
01:00002D8E E289            	  5003:                 lsr.l #$1,d1
01:00002D90 51CEFFDC        	  5004:                 dbf d6,CMPA_OUTER1
01:00002D94 E28A            	  5005:                 lsr.l #$1,d2
01:00002D96 223C8167E123    	  5006:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D9C 7C1E            	  5007:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D9E 51CFFFCE        	  5008:                 dbf d7,CMPA_OUTER1
                            	  5009: 
01:00002DA2 0C84A5A5A0CA    	  5010:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002DA8 66FE            	  5011:                 bne.s *
01:00002DAA 0C8500003A7D    	  5012:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002DB0 66FE            	  5013:                 bne.s *
                            	  5014: 
                            	  5015: 
01:00002DB2 4E75            	  5016:                 rts
                            	  5017: 
                            	  5018: 
                            	  5019: 
                            	  5020: *-----------------------------------------------------------
                            	  5021: *-----------------------------------------------------------
                            	  5022: * OPCODE : CMPM
                            	  5023: *-----------------------------------------------------------
                            	  5024: *-----------------------------------------------------------
                            	  5025: 
                            	  5026: op_CMPM:
                            	  5027: 
01:00002DB4 307C0100        	  5028:                 move.l #$00000100,a0       * Address for Data-X
01:00002DB8 327C0200        	  5029:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DBC 7000            	  5030:                 moveq  #$00000000,d0
01:00002DBE 7200            	  5031:                 moveq  #$00000000,d1
01:00002DC0 7400            	  5032:                 moveq  #$00000000,d2
                            	  5033: 
01:00002DC2 20FC11FF5580    	  5034:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002DC8 20FC1111FFFF    	  5035:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002DCE 20FC33333333    	  5036:                 move.l #$33333333,(a0)+   * Populate test data
01:00002DD4 20FC44444444    	  5037:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5038: 
01:00002DDA 22FC80FF337F    	  5039:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002DE0 22FCFFFF1111    	  5040:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002DE6 22FC33333333    	  5041:                 move.l #$33333333,(a1)+   * Populate test data
01:00002DEC 22FC44444444    	  5042:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5043: 
01:00002DF2 307C0100        	  5044:                 move.l #$00000100,a0       * Address for Data-X
01:00002DF6 327C0200        	  5045:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DFA 7C0F            	  5046:                 move.l #$0000000F,d6       * Loop counter
                            	  5047: 
01:00002DFC B308            	  5048: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002DFE 40C3            	  5049:                 move.w sr,d3
01:00002E00 02830000000F    	  5050:                 andi.l #$0F,d3            * Isolate flags
01:00002E06 D083            	  5051:                 add.l d3,d0               * Copy flag results into accumulator
01:00002E08 51CEFFF2        	  5052:                 dbf d6,CMPM_LOOP1
                            	  5053: 
                            	  5054: 
01:00002E0C 307C0100        	  5055:                 move.l #$00000100,a0       * Address for Data-X
01:00002E10 327C0200        	  5056:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E14 7C07            	  5057:                 moveq  #$00000007,d6       * Loop counter
                            	  5058: 
01:00002E16 B348            	  5059: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002E18 40C3            	  5060:                 move.w sr,d3
01:00002E1A 02830000000F    	  5061:                 andi.l #$0F,d3            * Isolate flags
01:00002E20 D283            	  5062:                 add.l d3,d1               * Copy flag results into accumulator
01:00002E22 51CEFFF2        	  5063:                 dbf d6,CMPM_LOOP2
                            	  5064: 
                            	  5065: 
01:00002E26 307C0100        	  5066:                 move.l #$00000100,a0       * Address for Data-X
01:00002E2A 327C0200        	  5067:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E2E 7C03            	  5068:                 moveq  #$00000003,d6       * Loop counter
                            	  5069: 
01:00002E30 B388            	  5070: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002E32 40C3            	  5071:                 move.w sr,d3
01:00002E34 02830000000F    	  5072:                 andi.l #$0F,d3            * Isolate flags
01:00002E3A D483            	  5073:                 add.l d3,d2               * Copy flag results into accumulator
01:00002E3C 51CEFFF2        	  5074:                 dbf d6,CMPM_LOOP3
                            	  5075: 
                            	  5076: 
01:00002E40 0C800000004C    	  5077:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002E46 66FE            	  5078:                 bne.s *
01:00002E48 0C8100000024    	  5079:                 cmpi.l #$00000024,d1
01:00002E4E 66FE            	  5080:                 bne.s *
01:00002E50 0C8200000012    	  5081:                 cmpi.l #$00000012,d2
01:00002E56 66FE            	  5082:                 bne.s *
                            	  5083: 
01:00002E58 4E75            	  5084:                 rts
                            	  5085: 
                            	  5086: 
                            	  5087: *-----------------------------------------------------------
                            	  5088: *-----------------------------------------------------------
                            	  5089: * OPCODE : ADD
                            	  5090: *-----------------------------------------------------------
                            	  5091: *-----------------------------------------------------------
                            	  5092: 
                            	  5093: op_ADD:
                            	  5094: 
                            	  5095: 
                            	  5096: *  * <EA> to Register
01:00002E5A 203CA5A5A5A5    	  5097:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002E60 223C8167E123    	  5098:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002E66 243CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d2
01:00002E6C 7600            	  5100:                 moveq  #$00000000,d3
01:00002E6E 7800            	  5101:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E70 7A00            	  5102:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E72 7C1E            	  5103:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E74 7E1E            	  5104:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E76 307C0100        	  5105:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5106: 
                            	  5107: 
                            	  5108: ADD_OUTER1:
                            	  5109: 
                            	  5110: *     BYTE
01:00002E7A 2081            	  5111:                 move.l d1,(a0)
01:00002E7C D010            	  5112:                 add.b (a0),d0
01:00002E7E 40C3            	  5113:                 move.w sr,d3
01:00002E80 02830000001F    	  5114:                 andi.l #$1F,d3            * Isolate flags
01:00002E86 DA83            	  5115:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E88 D880            	  5116:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5117: 
                            	  5118: *     WORD
01:00002E8A 2081            	  5119:                 move.l d1,(a0)
01:00002E8C D050            	  5120:                 add.w (a0),d0
01:00002E8E 40C3            	  5121:                 move.w sr,d3
01:00002E90 02830000000C    	  5122:                 andi.l #$0C,d3            * Isolate flags
01:00002E96 DA83            	  5123:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E98 D880            	  5124:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5125: 
                            	  5126: *     LONG
01:00002E9A 2081            	  5127:                 move.l d1,(a0)
01:00002E9C D090            	  5128:                 add.l (a0),d0
01:00002E9E 40C3            	  5129:                 move.w sr,d3
01:00002EA0 02830000000F    	  5130:                 andi.l #$0F,d3            * Isolate flags
01:00002EA6 DA83            	  5131:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EA8 D880            	  5132:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5133: 
                            	  5134: 
01:00002EAA E299            	  5135:                 ror.l #$1,d1
01:00002EAC 51CEFFCC        	  5136:                 dbf d6,ADD_OUTER1
01:00002EB0 E29A            	  5137:                 ror.l #$1,d2
01:00002EB2 223C8167E123    	  5138:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002EB8 7C1E            	  5139:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EBA 51CFFFBE        	  5140:                 dbf d7,ADD_OUTER1
                            	  5141: 
01:00002EBE 0C8423ED428F    	  5142:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002EC4 66FE            	  5143:                 bne.s *
01:00002EC6 0C8500004C96    	  5144:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002ECC 66FE            	  5145:                 bne.s *
                            	  5146: 
                            	  5147: 
                            	  5148: *  * Register to <EA>
01:00002ECE 203C86738374    	  5149:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002ED4 223CFC55F2FE    	  5150:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002EDA 243C86738374    	  5151:                 move.l #$86738374,d2
01:00002EE0 7600            	  5152:                 moveq  #$00000000,d3
01:00002EE2 7800            	  5153:                 moveq  #$00000000,d4       * Cumulative data results
01:00002EE4 7A00            	  5154:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002EE6 7C1E            	  5155:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EE8 7E1D            	  5156:                 move.l #$0000001D,d7       * Outer loop counter
01:00002EEA 307C0100        	  5157:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5158: 
                            	  5159: 
                            	  5160: ADD_OUTER2:
                            	  5161: 
                            	  5162: *     BYTE
01:00002EEE 2080            	  5163:                 move.l d0,(a0)
01:00002EF0 D310            	  5164:                 add.b d1,(a0)
01:00002EF2 40C3            	  5165:                 move.w sr,d3
01:00002EF4 02830000000C    	  5166:                 andi.l #$0C,d3            * Isolate flags
01:00002EFA DA83            	  5167:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EFC D890            	  5168:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5169: 
                            	  5170: *     WORD
01:00002EFE 2080            	  5171:                 move.l d0,(a0)
01:00002F00 D350            	  5172:                 add.w d1,(a0)
01:00002F02 40C3            	  5173:                 move.w sr,d3
01:00002F04 02830000001F    	  5174:                 andi.l #$1F,d3            * Isolate flags
01:00002F0A DA83            	  5175:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F0C D890            	  5176:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5177: 
                            	  5178: *     LONG
01:00002F0E 2080            	  5179:                 move.l d0,(a0)
01:00002F10 D390            	  5180:                 add.l d1,(a0)
01:00002F12 40C3            	  5181:                 move.w sr,d3
01:00002F14 02830000000F    	  5182:                 andi.l #$0F,d3            * Isolate flags
01:00002F1A DA83            	  5183:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F1C D890            	  5184:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5185: 
                            	  5186: 
01:00002F1E E299            	  5187:                 ror.l #$1,d1
01:00002F20 51CEFFCC        	  5188:                 dbf d6,ADD_OUTER2
01:00002F24 E29A            	  5189:                 ror.l #$1,d2
01:00002F26 223C8167E123    	  5190:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F2C 7C1E            	  5191:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F2E 51CFFFBE        	  5192:                 dbf d7,ADD_OUTER2
                            	  5193: 
01:00002F32 0C846701B884    	  5194:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002F38 66FE            	  5195:                 bne.s *
01:00002F3A 0C8500005467    	  5196:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002F40 66FE            	  5197:                 bne.s *
                            	  5198: 
01:00002F42 4E75            	  5199:                 rts
                            	  5200: 
                            	  5201: *-----------------------------------------------------------
                            	  5202: *-----------------------------------------------------------
                            	  5203: * OPCODE : SUB
                            	  5204: *-----------------------------------------------------------
                            	  5205: *-----------------------------------------------------------
                            	  5206: 
                            	  5207: op_SUB:
                            	  5208: 
                            	  5209: *  * <EA> to Register
01:00002F44 203CA5A5A5A5    	  5210:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002F4A 223C8167E123    	  5211:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002F50 243CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d2
01:00002F56 7600            	  5213:                 moveq  #$00000000,d3
01:00002F58 7800            	  5214:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F5A 7A00            	  5215:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F5C 7C1E            	  5216:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F5E 7E1E            	  5217:                 move.l #$0000001E,d7       * Outer loop counter
01:00002F60 307C0100        	  5218:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5219: 
                            	  5220: 
                            	  5221: SUB_OUTER1:
                            	  5222: 
                            	  5223: *     BYTE
01:00002F64 2081            	  5224:                 move.l d1,(a0)
01:00002F66 9010            	  5225:                 sub.b (a0),d0
01:00002F68 40C3            	  5226:                 move.w sr,d3
01:00002F6A 02830000001F    	  5227:                 andi.l #$1F,d3            * Isolate flags
01:00002F70 DA83            	  5228:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F72 D880            	  5229:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5230: 
                            	  5231: *     WORD
01:00002F74 2081            	  5232:                 move.l d1,(a0)
01:00002F76 9050            	  5233:                 sub.w (a0),d0
01:00002F78 40C3            	  5234:                 move.w sr,d3
01:00002F7A 02830000000C    	  5235:                 andi.l #$0C,d3            * Isolate flags
01:00002F80 DA83            	  5236:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F82 D880            	  5237:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5238: 
                            	  5239: *     LONG
01:00002F84 2081            	  5240:                 move.l d1,(a0)
01:00002F86 9090            	  5241:                 sub.l (a0),d0
01:00002F88 40C3            	  5242:                 move.w sr,d3
01:00002F8A 02830000000F    	  5243:                 andi.l #$0F,d3            * Isolate flags
01:00002F90 DA83            	  5244:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F92 D880            	  5245:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5246: 
                            	  5247: 
01:00002F94 E299            	  5248:                 ror.l #$1,d1
01:00002F96 51CEFFCC        	  5249:                 dbf d6,SUB_OUTER1
01:00002F9A E29A            	  5250:                 ror.l #$1,d2
01:00002F9C 223C8167E123    	  5251:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FA2 7C1E            	  5252:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FA4 51CFFFBE        	  5253:                 dbf d7,SUB_OUTER1
                            	  5254: 
01:00002FA8 0C841A8D14CF    	  5255:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002FAE 66FE            	  5256:                 bne.s *
01:00002FB0 0C8500004FC4    	  5257:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002FB6 66FE            	  5258:                 bne.s *
                            	  5259: 
                            	  5260: 
                            	  5261: *  * Register to <EA>
01:00002FB8 203C86738374    	  5262:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002FBE 223CFC55F2FE    	  5263:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002FC4 243C86738374    	  5264:                 move.l #$86738374,d2
01:00002FCA 7600            	  5265:                 moveq  #$00000000,d3
01:00002FCC 7800            	  5266:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FCE 7A00            	  5267:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FD0 7C1E            	  5268:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FD2 7E1D            	  5269:                 move.l #$0000001D,d7       * Outer loop counter
01:00002FD4 307C0100        	  5270:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5271: 
                            	  5272: 
                            	  5273: SUB_OUTER2:
                            	  5274: 
                            	  5275: *     BYTE
01:00002FD8 2080            	  5276:                 move.l d0,(a0)
01:00002FDA 9310            	  5277:                 sub.b d1,(a0)
01:00002FDC 40C3            	  5278:                 move.w sr,d3
01:00002FDE 02830000000C    	  5279:                 andi.l #$0C,d3            * Isolate flags
01:00002FE4 DA83            	  5280:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FE6 D890            	  5281:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5282: 
                            	  5283: *     WORD
01:00002FE8 2080            	  5284:                 move.l d0,(a0)
01:00002FEA 9350            	  5285:                 sub.w d1,(a0)
01:00002FEC 40C3            	  5286:                 move.w sr,d3
01:00002FEE 02830000001F    	  5287:                 andi.l #$1F,d3            * Isolate flags
01:00002FF4 DA83            	  5288:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FF6 D890            	  5289:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5290: 
                            	  5291: *     LONG
01:00002FF8 2080            	  5292:                 move.l d0,(a0)
01:00002FFA 9390            	  5293:                 sub.l d1,(a0)
01:00002FFC 40C3            	  5294:                 move.w sr,d3
01:00002FFE 02830000000F    	  5295:                 andi.l #$0F,d3            * Isolate flags
01:00003004 DA83            	  5296:                 add.l d3,d5               * Copy flag results into accumulator
01:00003006 D890            	  5297:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5298: 
                            	  5299: 
01:00003008 E299            	  5300:                 ror.l #$1,d1
01:0000300A 51CEFFCC        	  5301:                 dbf d6,SUB_OUTER2
01:0000300E E29A            	  5302:                 ror.l #$1,d2
01:00003010 223C8167E123    	  5303:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003016 7C1E            	  5304:                 move.l #$0000001E,d6       * Inner loop counter
01:00003018 51CFFFBE        	  5305:                 dbf d7,SUB_OUTER2
                            	  5306: 
01:0000301C 0C8436D38BEC    	  5307:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:00003022 66FE            	  5308:                 bne.s *
01:00003024 0C85000045A5    	  5309:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:0000302A 66FE            	  5310:                 bne.s *
                            	  5311: 
                            	  5312: 
                            	  5313: 
                            	  5314: 
01:0000302C 4E75            	  5315:                 rts
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: *-----------------------------------------------------------
                            	  5320: *-----------------------------------------------------------
                            	  5321: * OPCODE : ADDA
                            	  5322: *-----------------------------------------------------------
                            	  5323: *-----------------------------------------------------------
                            	  5324: 
                            	  5325: op_ADDA:
                            	  5326: 
                            	  5327: *  * <EA> to Register
01:0000302E 203CA5A5A5A5    	  5328:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003034 223C8167E123    	  5329:                 move.l #$8167E123,d1
01:0000303A 243CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d2
01:00003040 7600            	  5331:                 moveq  #$00000000,d3
01:00003042 7800            	  5332:                 moveq  #$00000000,d4       * Cumulative data results
01:00003044 7A00            	  5333:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003046 7C1E            	  5334:                 move.l #$0000001E,d6       * Inner loop counter
01:00003048 7E1E            	  5335:                 move.l #$0000001E,d7       * Outer loop counter
01:0000304A 307C0100        	  5336:                 move.l #$00000100,a0       * Address for memory EA operations
01:0000304E 227C8167E123    	  5337:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5338: 
                            	  5339: ADDA_OUTER1:
                            	  5340: 
                            	  5341: *     WORD
                            	  5342: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5343: *                adda.w (a0),a1
                            	  5344: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5345: 
                            	  5346: *     LONG
01:00003054 2081            	  5347:                 move.l d1,(a0)
01:00003056 D3D0            	  5348:                 adda.l (a0),a1
01:00003058 D889            	  5349:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
01:0000305A E299            	  5351:                 ror.l #$1,d1
01:0000305C 51CEFFF6        	  5352:                 dbf d6,ADDA_OUTER1
01:00003060 E299            	  5353:                 ror.l #$1,d1
01:00003062 2241            	  5354:                 move.l d1,a1
01:00003064 223C8167E123    	  5355:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000306A 7C1E            	  5356:                 move.l #$0000001E,d6       * Inner loop counter
01:0000306C 51CFFFE6        	  5357:                 dbf d7,ADDA_OUTER1
                            	  5358: 
01:00003070 0C84AC04DB4C    	  5359:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:00003076 66FE            	  5360:                 bne.s *
                            	  5361: 
                            	  5362: 
01:00003078 4E75            	  5363:                 rts
                            	  5364: 
                            	  5365: 
                            	  5366: *-----------------------------------------------------------
                            	  5367: *-----------------------------------------------------------
                            	  5368: * OPCODE : SUBA
                            	  5369: *-----------------------------------------------------------
                            	  5370: *-----------------------------------------------------------
                            	  5371: 
                            	  5372: op_SUBA:
                            	  5373: 
                            	  5374: *  * <EA> to Register
01:0000307A 203CA5A5A5A5    	  5375:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003080 223C8167E123    	  5376:                 move.l #$8167E123,d1
01:00003086 243CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d2
01:0000308C 7600            	  5378:                 moveq  #$00000000,d3
01:0000308E 7800            	  5379:                 moveq  #$00000000,d4       * Cumulative data results
01:00003090 7A00            	  5380:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003092 7C1E            	  5381:                 move.l #$0000001E,d6       * Inner loop counter
01:00003094 7E1E            	  5382:                 move.l #$0000001E,d7       * Outer loop counter
01:00003096 307C0100        	  5383:                 move.l #$00000100,a0       * Address for memory EA operations
01:0000309A 227C8167E123    	  5384:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5385: 
                            	  5386: SUBA_OUTER1:
                            	  5387: 
                            	  5388: *     WORD
                            	  5389: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5390: *                suba.w (a0),a1
                            	  5391: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5392: 
                            	  5393: *     LONG
01:000030A0 2081            	  5394:                 move.l d1,(a0)
01:000030A2 93D0            	  5395:                 suba.l (a0),a1
01:000030A4 D889            	  5396:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
01:000030A6 E299            	  5398:                 ror.l #$1,d1
01:000030A8 51CEFFF6        	  5399:                 dbf d6,SUBA_OUTER1
01:000030AC E299            	  5400:                 ror.l #$1,d1
01:000030AE 2241            	  5401:                 move.l d1,a1
01:000030B0 223C8167E123    	  5402:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030B6 7C1E            	  5403:                 move.l #$0000001E,d6       * Inner loop counter
01:000030B8 51CFFFE6        	  5404:                 dbf d7,SUBA_OUTER1
                            	  5405: 
01:000030BC 0C84E1E36D7A    	  5406:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:000030C2 66FE            	  5407:                 bne.s *
                            	  5408: 
                            	  5409: 
01:000030C4 4E75            	  5410:                 rts
                            	  5411: 
                            	  5412: 
                            	  5413: 
                            	  5414: *-----------------------------------------------------------
                            	  5415: *-----------------------------------------------------------
                            	  5416: * OPCODE : ADDX
                            	  5417: *-----------------------------------------------------------
                            	  5418: *-----------------------------------------------------------
                            	  5419: 
                            	  5420: op_ADDX:
                            	  5421: 
                            	  5422: 
                            	  5423: *  * Register to Register
01:000030C6 203CA5A5A5A5    	  5424:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000030CC 223C8167E123    	  5425:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000030D2 243CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d2
01:000030D8 7600            	  5427:                 moveq  #$00000000,d3
01:000030DA 7800            	  5428:                 moveq  #$00000000,d4       * Cumulative data results
01:000030DC 7A00            	  5429:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030DE 7C1E            	  5430:                 move.l #$0000001E,d6       * Inner loop counter
01:000030E0 7E1E            	  5431:                 move.l #$0000001E,d7       * Outer loop counter
01:000030E2 307C0100        	  5432:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5433: 
                            	  5434: 
                            	  5435: ADDX_OUTER1:
                            	  5436: 
                            	  5437: *     BYTE
01:000030E6 2002            	  5438:                 move.l d2,d0
01:000030E8 D101            	  5439:                 addx.b d1,d0
01:000030EA 40C3            	  5440:                 move.w sr,d3
01:000030EC 02830000001F    	  5441:                 andi.l #$1F,d3            * Isolate flags
01:000030F2 DA83            	  5442:                 add.l d3,d5               * Copy flag results into accumulator
01:000030F4 D880            	  5443:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5444: 
                            	  5445: *     WORD
01:000030F6 2002            	  5446:                 move.l d2,d0
01:000030F8 D141            	  5447:                 addx.w d1,d0
01:000030FA 40C3            	  5448:                 move.w sr,d3
01:000030FC 02830000001F    	  5449:                 andi.l #$1F,d3            * Isolate flags
01:00003102 DA83            	  5450:                 add.l d3,d5               * Copy flag results into accumulator
01:00003104 D880            	  5451:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5452: 
                            	  5453: *     LONG
01:00003106 2002            	  5454:                 move.l d2,d0
01:00003108 D181            	  5455:                 addx.l d1,d0
01:0000310A 40C3            	  5456:                 move.w sr,d3
01:0000310C 02830000001F    	  5457:                 andi.l #$1F,d3            * Isolate flags
01:00003112 DA83            	  5458:                 add.l d3,d5               * Copy flag results into accumulator
01:00003114 D880            	  5459:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5460: 
01:00003116 E299            	  5461:                 ror.l #$1,d1
01:00003118 51CEFFCC        	  5462:                 dbf d6,ADDX_OUTER1
01:0000311C E29A            	  5463:                 ror.l #$1,d2
01:0000311E 223C8167E123    	  5464:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003124 7C1E            	  5465:                 move.l #$0000001E,d6       * Inner loop counter
01:00003126 51CFFFBE        	  5466:                 dbf d7,ADDX_OUTER1
                            	  5467: 
01:0000312A 0C844E96A4D9    	  5468:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:00003130 66FE            	  5469:                 bne.s *
01:00003132 0C85000085CD    	  5470:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:00003138 66FE            	  5471:                 bne.s *
                            	  5472: 
                            	  5473: 
                            	  5474: 
                            	  5475: *     -(An),-(An)
                            	  5476: 
01:0000313A 7000            	  5477:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:0000313C 7200            	  5478:                 moveq  #$00000000,d1
01:0000313E 7400            	  5479:                 moveq  #$00000000,d2
01:00003140 307C0100        	  5480:                 move.l #$00000100,a0       * Address for Data-X
01:00003144 327C0200        	  5481:                 move.l #$00000200,a1       * Address for Data-Y
01:00003148 20FC11FF5580    	  5482:                 move.l #$11FF5580,(a0)+   * Populate test data
01:0000314E 20FC1111FFFF    	  5483:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00003154 20FC33333333    	  5484:                 move.l #$33333333,(a0)+   * Populate test data
01:0000315A 20FC44444444    	  5485:                 move.l #$44444444,(a0)+   * Populate test data
01:00003160 22FC80FF337F    	  5486:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003166 22FCFFFF1111    	  5487:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:0000316C 22FC33333333    	  5488:                 move.l #$33333333,(a1)+   * Populate test data
01:00003172 22FC44444444    	  5489:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5490: 
                            	  5491: 
01:00003178 7C0F            	  5492:                 move.l #$0000000F,d6       * Loop counter
                            	  5493: 
01:0000317A D308            	  5494: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:0000317C 40C3            	  5495:                 move.w sr,d3
01:0000317E 02830000000F    	  5496:                 andi.l #$0F,d3            * Isolate flags
01:00003184 D083            	  5497:                 add.l d3,d0               * Copy flag results into accumulator
01:00003186 D211            	  5498:                 add.b (a1),d1
01:00003188 51CEFFF0        	  5499:                 dbf d6,ADDX_LOOP3
                            	  5500: 
                            	  5501: 
01:0000318C 307C0110        	  5502:                 move.l #$00000110,a0       * Address for Data-X
01:00003190 327C0210        	  5503:                 move.l #$00000210,a1       * Address for Data-Y
01:00003194 7C07            	  5504:                 moveq  #$00000007,d6       * Loop counter
                            	  5505: 
01:00003196 D348            	  5506: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:00003198 40C3            	  5507:                 move.w sr,d3
01:0000319A 02830000000F    	  5508:                 andi.l #$0F,d3            * Isolate flags
01:000031A0 D083            	  5509:                 add.l d3,d0               * Copy flag results into accumulator
01:000031A2 D251            	  5510:                 add.w (a1),d1
01:000031A4 51CEFFF0        	  5511:                 dbf d6,ADDX_LOOP4
                            	  5512: 
                            	  5513: 
01:000031A8 307C0110        	  5514:                 move.l #$00000110,a0       * Address for Data-X
01:000031AC 327C0210        	  5515:                 move.l #$00000210,a1       * Address for Data-Y
01:000031B0 7C03            	  5516:                 moveq  #$00000003,d6       * Loop counter
                            	  5517: 
01:000031B2 D388            	  5518: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:000031B4 40C3            	  5519:                 move.w sr,d3
01:000031B6 02830000000F    	  5520:                 andi.l #$0F,d3            * Isolate flags
01:000031BC D083            	  5521:                 add.l d3,d0               * Copy flag results into accumulator
01:000031BE D291            	  5522:                 add.l (a1),d1
01:000031C0 51CEFFF0        	  5523:                 dbf d6,ADDX_LOOP5
                            	  5524: 
                            	  5525: 
01:000031C4 0C8000000095    	  5526:                 cmpi.l #$00000095,d0      * Check the flag results
01:000031CA 66FE            	  5527:                 bne.s *
01:000031CC 0C81C812A682    	  5528:                 cmpi.l #$C812A682,d1      * Check the data results
01:000031D2 66FE            	  5529:                 bne.s *
                            	  5530: 
01:000031D4 4E75            	  5531:                 rts
                            	  5532: 
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: *-----------------------------------------------------------
                            	  5537: *-----------------------------------------------------------
                            	  5538: * OPCODE : SUBX
                            	  5539: *-----------------------------------------------------------
                            	  5540: *-----------------------------------------------------------
                            	  5541: 
                            	  5542: op_SUBX:
                            	  5543: 
                            	  5544: 
                            	  5545: *  * Register to Register
01:000031D6 203CA5A5A5A5    	  5546:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000031DC 223C8167E123    	  5547:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000031E2 243CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d2
01:000031E8 7600            	  5549:                 moveq  #$00000000,d3
01:000031EA 7800            	  5550:                 moveq  #$00000000,d4       * Cumulative data results
01:000031EC 7A00            	  5551:                 moveq  #$00000000,d5       * Cumulative flag results
01:000031EE 7C1E            	  5552:                 move.l #$0000001E,d6       * Inner loop counter
01:000031F0 7E1E            	  5553:                 move.l #$0000001E,d7       * Outer loop counter
01:000031F2 307C0100        	  5554:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5555: 
                            	  5556: 
                            	  5557: SUBX_OUTER1:
                            	  5558: 
                            	  5559: *     BYTE
01:000031F6 2002            	  5560:                 move.l d2,d0
01:000031F8 9101            	  5561:                 subx.b d1,d0
01:000031FA 40C3            	  5562:                 move.w sr,d3
01:000031FC 02830000001F    	  5563:                 andi.l #$1F,d3            * Isolate flags
01:00003202 DA83            	  5564:                 add.l d3,d5               * Copy flag results into accumulator
01:00003204 D880            	  5565:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5566: 
                            	  5567: *     WORD
01:00003206 2002            	  5568:                 move.l d2,d0
01:00003208 9141            	  5569:                 subx.w d1,d0
01:0000320A 40C3            	  5570:                 move.w sr,d3
01:0000320C 02830000001F    	  5571:                 andi.l #$1F,d3            * Isolate flags
01:00003212 DA83            	  5572:                 add.l d3,d5               * Copy flag results into accumulator
01:00003214 D880            	  5573:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5574: 
                            	  5575: *     LONG
01:00003216 2002            	  5576:                 move.l d2,d0
01:00003218 9181            	  5577:                 subx.l d1,d0
01:0000321A 40C3            	  5578:                 move.w sr,d3
01:0000321C 02830000001F    	  5579:                 andi.l #$1F,d3            * Isolate flags
01:00003222 DA83            	  5580:                 add.l d3,d5               * Copy flag results into accumulator
01:00003224 D880            	  5581:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5582: 
01:00003226 E299            	  5583:                 ror.l #$1,d1
01:00003228 51CEFFCC        	  5584:                 dbf d6,SUBX_OUTER1
01:0000322C E29A            	  5585:                 ror.l #$1,d2
01:0000322E 223C8167E123    	  5586:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003234 7C1E            	  5587:                 move.l #$0000001E,d6       * Inner loop counter
01:00003236 51CFFFBE        	  5588:                 dbf d7,SUBX_OUTER1
                            	  5589: 
01:0000323A 0C84FCAA913E    	  5590:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:00003240 66FE            	  5591:                 bne.s *
01:00003242 0C8500007E89    	  5592:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:00003248 66FE            	  5593:                 bne.s *
                            	  5594: 
                            	  5595: 
                            	  5596: 
                            	  5597: *     -(An),-(An)
                            	  5598: 
01:0000324A 7000            	  5599:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:0000324C 7200            	  5600:                 moveq  #$00000000,d1
01:0000324E 7400            	  5601:                 moveq  #$00000000,d2
01:00003250 307C0100        	  5602:                 move.l #$00000100,a0       * Address for Data-X
01:00003254 327C0200        	  5603:                 move.l #$00000200,a1       * Address for Data-Y
01:00003258 20FC11FF5580    	  5604:                 move.l #$11FF5580,(a0)+   * Populate test data
01:0000325E 20FC1111FFFF    	  5605:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00003264 20FC80FF337F    	  5606:                 move.l #$80FF337F,(a0)+   * Populate test data
01:0000326A 20FC44444444    	  5607:                 move.l #$44444444,(a0)+   * Populate test data
01:00003270 22FC80FF337F    	  5608:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003276 22FC1111FFFF    	  5609:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:0000327C 22FC33333333    	  5610:                 move.l #$33333333,(a1)+   * Populate test data
01:00003282 22FC5580EECC    	  5611:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5612: 
                            	  5613: 
01:00003288 7C0F            	  5614:                 move.l #$0000000F,d6       * Loop counter
                            	  5615: 
01:0000328A 9308            	  5616: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:0000328C 40C3            	  5617:                 move.w sr,d3
01:0000328E 02830000000F    	  5618:                 andi.l #$0F,d3            * Isolate flags
01:00003294 D083            	  5619:                 add.l d3,d0               * Copy flag results into accumulator
01:00003296 D211            	  5620:                 add.b (a1),d1
01:00003298 51CEFFF0        	  5621:                 dbf d6,SUBX_LOOP3
                            	  5622: 
                            	  5623: 
01:0000329C 307C0110        	  5624:                 move.l #$00000110,a0       * Address for Data-X
01:000032A0 327C0210        	  5625:                 move.l #$00000210,a1       * Address for Data-Y
01:000032A4 7C07            	  5626:                 moveq  #$00000007,d6       * Loop counter
                            	  5627: 
01:000032A6 9348            	  5628: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:000032A8 40C3            	  5629:                 move.w sr,d3
01:000032AA 02830000000F    	  5630:                 andi.l #$0F,d3            * Isolate flags
01:000032B0 D083            	  5631:                 add.l d3,d0               * Copy flag results into accumulator
01:000032B2 D251            	  5632:                 add.w (a1),d1
01:000032B4 51CEFFF0        	  5633:                 dbf d6,SUBX_LOOP4
                            	  5634: 
                            	  5635: 
01:000032B8 307C0110        	  5636:                 move.l #$00000110,a0       * Address for Data-X
01:000032BC 327C0210        	  5637:                 move.l #$00000210,a1       * Address for Data-Y
01:000032C0 7C03            	  5638:                 moveq  #$00000003,d6       * Loop counter
                            	  5639: 
01:000032C2 9388            	  5640: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:000032C4 40C3            	  5641:                 move.w sr,d3
01:000032C6 02830000000F    	  5642:                 andi.l #$0F,d3            * Isolate flags
01:000032CC D083            	  5643:                 add.l d3,d0               * Copy flag results into accumulator
01:000032CE D291            	  5644:                 add.l (a1),d1
01:000032D0 51CEFFF0        	  5645:                 dbf d6,SUBX_LOOP5
                            	  5646: 
                            	  5647: 
01:000032D4 0C80000000B1    	  5648:                 cmpi.l #$000000B1,d0      * Check the flag results
01:000032DA 66FE            	  5649:                 bne.s *
01:000032DC 0C8162C6F417    	  5650:                 cmpi.l #$62C6F417,d1      * Check the data results
01:000032E2 66FE            	  5651:                 bne.s *
                            	  5652: 
01:000032E4 4E75            	  5653:                 rts
                            	  5654: 
                            	  5655: 
                            	  5656: *-----------------------------------------------------------
                            	  5657: *-----------------------------------------------------------
                            	  5658: * OPCODE : MULU
                            	  5659: *-----------------------------------------------------------
                            	  5660: *-----------------------------------------------------------
                            	  5661: 
                            	  5662: op_MULU:
                            	  5663: 
01:000032E6 203CFE805501    	  5664:                 move.l #$FE805501,d0        * Initial
01:000032EC 223C5697EDB6    	  5665:                 move.l #$5697EDB6,d1        * Initial Y
01:000032F2 243CFE805501    	  5666:                 move.l #$FE805501,d2
01:000032F8 7600            	  5667:                 moveq  #$00000000,d3
01:000032FA 7800            	  5668:                 moveq  #$00000000,d4        * Cumulative data results
01:000032FC 7A00            	  5669:                 moveq  #$00000000,d5       * Cumulative flag results
01:000032FE 7C0E            	  5670:                 move.l #$0000000E,d6       * Inner loop counter
01:00003300 7E0E            	  5671:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5672: 
                            	  5673: 
01:00003302 C0C1            	  5674: MULU_OUTER1:    mulu d1,d0
01:00003304 40C3            	  5675:                 move.w sr,d3
01:00003306 02830000000C    	  5676:                 andi.l #$0C,d3            * Isolate flags
01:0000330C DA83            	  5677:                 add.l d3,d5               * Copy flag results into accumulator
01:0000330E D880            	  5678:                 add.l d0,d4               * Copy data results into data accumulator
01:00003310 E299            	  5679:                 ror.l #$1,d1
                            	  5680: 
01:00003312 51CEFFEE        	  5681:                 dbf d6,MULU_OUTER1
01:00003316 E29A            	  5682:                 ror.l #$1,d2
01:00003318 2002            	  5683:                 move.l d2,d0
01:0000331A 7C0E            	  5684:                 move.l #$0000000E,d6       * Inner loop counter
01:0000331C 51CFFFE4        	  5685:                 dbf d7,MULU_OUTER1
                            	  5686: 
01:00003320 0C8476FB988C    	  5687:                 cmpi.l #$76FB988C,d4      * Check the data results
01:00003326 66FE            	  5688:                 bne.s *
                            	  5689: 
01:00003328 0C8500000170    	  5690:                 cmpi.l #$00000170,d5      * Check the Flag results
01:0000332E 66FE            	  5691:                 bne.s *
                            	  5692: 
                            	  5693: 
01:00003330 4E75            	  5694:                 rts
                            	  5695: 
                            	  5696: 
                            	  5697: *-----------------------------------------------------------
                            	  5698: *-----------------------------------------------------------
                            	  5699: * OPCODE : MULS
                            	  5700: *-----------------------------------------------------------
                            	  5701: *-----------------------------------------------------------
                            	  5702: 
                            	  5703: op_MULS:
                            	  5704: 
01:00003332 203CFE805501    	  5705:                 move.l #$FE805501,d0        * Initial
01:00003338 223C5697EDB6    	  5706:                 move.l #$5697EDB6,d1        * Initial Y
01:0000333E 243CFE805501    	  5707:                 move.l #$FE805501,d2
01:00003344 7600            	  5708:                 moveq  #$00000000,d3
01:00003346 7800            	  5709:                 moveq  #$00000000,d4        * Cumulative data results
01:00003348 7A00            	  5710:                 moveq  #$00000000,d5       * Cumulative flag results
01:0000334A 7C0E            	  5711:                 move.l #$0000000E,d6       * Inner loop counter
01:0000334C 7E0E            	  5712:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5713: 
                            	  5714: 
01:0000334E C1C1            	  5715: MULS_OUTER1:    muls d1,d0
01:00003350 40C3            	  5716:                 move.w sr,d3
01:00003352 02830000000C    	  5717:                 andi.l #$0C,d3            * Isolate flags
01:00003358 DA83            	  5718:                 add.l d3,d5               * Copy flag results into accumulator
01:0000335A D880            	  5719:                 add.l d0,d4               * Copy data results into data accumulator
01:0000335C E299            	  5720:                 ror.l #$1,d1
                            	  5721: 
01:0000335E 51CEFFEE        	  5722:                 dbf d6,MULS_OUTER1
01:00003362 E29A            	  5723:                 ror.l #$1,d2
01:00003364 2002            	  5724:                 move.l d2,d0
01:00003366 7C0E            	  5725:                 move.l #$0000000E,d6       * Inner loop counter
01:00003368 51CFFFE4        	  5726:                 dbf d7,MULS_OUTER1
                            	  5727: 
01:0000336C 0C84D4E2988C    	  5728:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:00003372 66FE            	  5729:                 bne.s *
                            	  5730: 
01:00003374 0C85000003E0    	  5731:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:0000337A 66FE            	  5732:                 bne.s *
                            	  5733: 
                            	  5734: 
01:0000337C 4E75            	  5735:                 rts
                            	  5736: 
                            	  5737: 
                            	  5738: 
                            	  5739: *-----------------------------------------------------------
                            	  5740: *-----------------------------------------------------------
                            	  5741: * OPCODE : EXG
                            	  5742: *-----------------------------------------------------------
                            	  5743: *-----------------------------------------------------------
                            	  5744: 
                            	  5745: op_EXG:
01:0000337E 223CD1D1D1D1    	  5746:                 move.l #$d1d1d1d1,d1
01:00003384 243CD2D2D2D2    	  5747:                 move.l #$d2d2d2d2,d2
01:0000338A 263CD3D3D3D3    	  5748:                 move.l #$d3d3d3d3,d3
01:00003390 227CA1A1A1A1    	  5749:                 move.l #$a1a1a1a1,a1
01:00003396 247CA2A2A2A2    	  5750:                 move.l #$a2a2a2a2,a2
01:0000339C 267CA3A3A3A3    	  5751:                 move.l #$a3a3a3a3,a3
                            	  5752: 
01:000033A2 C342            	  5753:                 exg d1,d2
01:000033A4 C34A            	  5754:                 exg a1,a2
01:000033A6 C78B            	  5755:                 exg d3,a3
                            	  5756: 
01:000033A8 0C81D2D2D2D2    	  5757:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:000033AE 66FE            	  5758:                 bne.s *
01:000033B0 0C82D1D1D1D1    	  5759:                 cmpi.l #$d1d1d1d1,d2
01:000033B6 66FE            	  5760:                 bne.s *
01:000033B8 0C83A3A3A3A3    	  5761:                 cmpi.l #$a3a3a3a3,d3
01:000033BE 66FE            	  5762:                 bne.s *
                            	  5763: 
01:000033C0 2209            	  5764:                 move.l a1,d1
01:000033C2 240A            	  5765:                 move.l a2,d2
01:000033C4 260B            	  5766:                 move.l a3,d3
                            	  5767: 
01:000033C6 0C81A2A2A2A2    	  5768:                 cmpi.l #$a2a2a2a2,d1
01:000033CC 66FE            	  5769:                 bne.s *
01:000033CE 0C82A1A1A1A1    	  5770:                 cmpi.l #$a1a1a1a1,d2
01:000033D4 66FE            	  5771:                 bne.s *
01:000033D6 0C83D3D3D3D3    	  5772:                 cmpi.l #$d3d3d3d3,d3
01:000033DC 66FE            	  5773:                 bne.s *
                            	  5774: 
01:000033DE 4E75            	  5775:                 rts
                            	  5776: 
                            	  5777: 
                            	  5778: *-----------------------------------------------------------
                            	  5779: *-----------------------------------------------------------
                            	  5780: * OPCODE : ROx
                            	  5781: *-----------------------------------------------------------
                            	  5782: *-----------------------------------------------------------
                            	  5783: 
                            	  5784: *     Subroutine to check and accumulate the flags
01:000033E0 40C3            	  5785: ROx_FLAGS:      move.w sr,d3
01:000033E2 02830000000F    	  5786:                 andi.l #$0F,d3            * Isolate flags
01:000033E8 DA83            	  5787:                 add.l d3,d5               * Copy flag results into accumulator
01:000033EA 4E75            	  5788:                 rts
                            	  5789: 
                            	  5790: op_ROx:
                            	  5791: 
                            	  5792: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5793: 
                            	  5794: *        BYTE LEFT
01:000033EC 203C80018FF1    	  5795:                 move.l #$80018FF1,d0
01:000033F2 7A00            	  5796:                 moveq  #$00000000,d5
01:000033F4 7C11            	  5797:                 moveq  #$00000011,d6
                            	  5798: ROx_LOOP1:
01:000033F6 ED38            	  5799:                 rol.b d6,d0
01:000033F8 61E6            	  5800:                 bsr ROx_FLAGS
01:000033FA 51CEFFFA        	  5801:                 dbf d6,ROx_LOOP1
01:000033FE 0C8080018FE3    	  5802:                 cmpi.l #$80018FE3,d0
01:00003404 66FE            	  5803:                 bne.s *
01:00003406 0C850000006B    	  5804:                 cmpi.l #$0000006B,d5
01:0000340C 66FE            	  5805:                 bne.s *
                            	  5806: 
                            	  5807: *        BYTE RIGHT
01:0000340E 203C80018FF1    	  5808:                 move.l #$80018FF1,d0
01:00003414 7C12            	  5809:                 moveq  #$00000012,d6
                            	  5810: ROx_LOOP2:
01:00003416 EC38            	  5811:                 ror.b d6,d0
01:00003418 61C6            	  5812:                 bsr ROx_FLAGS
01:0000341A 51CEFFFA        	  5813:                 dbf d6,ROx_LOOP2
01:0000341E 0C8080018F3E    	  5814:                 cmpi.l #$80018F3E,d0
01:00003424 66FE            	  5815:                 bne.s *
01:00003426 0C85000000C5    	  5816:                 cmpi.l #$000000C5,d5
01:0000342C 66FE            	  5817:                 bne.s *
                            	  5818: 
                            	  5819: 
                            	  5820: *        WORD LEFT
01:0000342E 203C80018FF1    	  5821:                 move.l #$80018FF1,d0
01:00003434 7C13            	  5822:                 moveq  #$00000013,d6
                            	  5823: ROx_LOOP3:
01:00003436 ED78            	  5824:                 rol.w d6,d0
01:00003438 61A6            	  5825:                 bsr ROx_FLAGS
01:0000343A 51CEFFFA        	  5826:                 dbf d6,ROx_LOOP3
01:0000343E 0C80800163FC    	  5827:                 cmpi.l #$800163FC,d0
01:00003444 66FE            	  5828:                 bne.s *
01:00003446 0C8500000131    	  5829:                 cmpi.l #$00000131,d5
01:0000344C 66FE            	  5830:                 bne.s *
                            	  5831: 
                            	  5832: *        WORD RIGHT
01:0000344E 203C80018FF1    	  5833:                 move.l #$80018FF1,d0
01:00003454 7C1E            	  5834:                 move.l #$0000001E,d6
                            	  5835: ROx_LOOP4:
01:00003456 EC78            	  5836:                 ror.w d6,d0
01:00003458 6186            	  5837:                 bsr ROx_FLAGS
01:0000345A 51CEFFFA        	  5838:                 dbf d6,ROx_LOOP4
01:0000345E 0C808001C7F8    	  5839:                 cmpi.l #$8001C7F8,d0
01:00003464 66FE            	  5840:                 bne.s *
01:00003466 0C85000001DB    	  5841:                 cmpi.l #$000001DB,d5
01:0000346C 66FE            	  5842:                 bne.s *
                            	  5843: 
                            	  5844: 
                            	  5845: *        LONG LEFT
01:0000346E 203C80018FF1    	  5846:                 move.l #$80018FF1,d0
01:00003474 7C15            	  5847:                 moveq  #$00000015,d6
                            	  5848: ROx_LOOP5:
01:00003476 EDB8            	  5849:                 rol.l d6,d0
01:00003478 6100FF66        	  5850:                 bsr ROx_FLAGS
01:0000347C 51CEFFF8        	  5851:                 dbf d6,ROx_LOOP5
01:00003480 0C8000C7F8C0    	  5852:                 cmpi.l #$00C7F8C0,d0
01:00003486 66FE            	  5853:                 bne.s *
01:00003488 0C850000021A    	  5854:                 cmpi.l #$0000021A,d5
01:0000348E 66FE            	  5855:                 bne.s *
                            	  5856: 
                            	  5857: *        LONG RIGHT
01:00003490 203C80018FF1    	  5858:                 move.l #$80018FF1,d0
01:00003496 7C16            	  5859:                 moveq  #$00000016,d6
                            	  5860: ROx_LOOP6:
01:00003498 ECB8            	  5861:                 ror.l d6,d0
01:0000349A 6100FF44        	  5862:                 bsr ROx_FLAGS
01:0000349E 51CEFFF8        	  5863:                 dbf d6,ROx_LOOP6
01:000034A2 0C80000C7F8C    	  5864:                 cmpi.l #$000C7F8C,d0
01:000034A8 66FE            	  5865:                 bne.s *
01:000034AA 0C8500000250    	  5866:                 cmpi.l #$00000250,d5
01:000034B0 66FE            	  5867:                 bne.s *
                            	  5868: 
                            	  5869: 
                            	  5870: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5871: 
01:000034B2 203C80018FF1    	  5872:                 move.l #$80018FF1,d0
01:000034B8 7A00            	  5873:                 moveq  #$00000000,d5
                            	  5874: 
                            	  5875: *        BYTE LEFT
01:000034BA E318            	  5876:                 rol.b #1,d0
01:000034BC 6100FF22        	  5877:                 bsr ROx_FLAGS
01:000034C0 EB18            	  5878:                 rol.b #5,d0
01:000034C2 6100FF1C        	  5879:                 bsr ROx_FLAGS
01:000034C6 EF18            	  5880:                 rol.b #7,d0
01:000034C8 6100FF16        	  5881:                 bsr ROx_FLAGS
01:000034CC E118            	  5882:                 rol.b #8,d0
01:000034CE 6100FF10        	  5883:                 bsr ROx_FLAGS
01:000034D2 0C8080018F3E    	  5884:                 cmpi.l #$80018F3E,d0
01:000034D8 66FE            	  5885:                 bne.s *
01:000034DA 0C8500000009    	  5886:                 cmpi.l #$00000009,d5
01:000034E0 66FE            	  5887:                 bne.s *
                            	  5888: 
                            	  5889: *        BYTE RIGHT
01:000034E2 E218            	  5890:                 ror.b #1,d0
01:000034E4 6100FEFA        	  5891:                 bsr ROx_FLAGS
01:000034E8 EA18            	  5892:                 ror.b #5,d0
01:000034EA 6100FEF4        	  5893:                 bsr ROx_FLAGS
01:000034EE EE18            	  5894:                 ror.b #7,d0
01:000034F0 6100FEEE        	  5895:                 bsr ROx_FLAGS
01:000034F4 E018            	  5896:                 ror.b #8,d0
01:000034F6 6100FEE8        	  5897:                 bsr ROx_FLAGS
01:000034FA 0C8080018FF1    	  5898:                 cmpi.l #$80018FF1,d0
01:00003500 66FE            	  5899:                 bne.s *
01:00003502 0C8500000024    	  5900:                 cmpi.l #$00000024,d5
01:00003508 66FE            	  5901:                 bne.s *
                            	  5902: 
                            	  5903: *        WORD LEFT
01:0000350A E358            	  5904:                 rol.w #1,d0
01:0000350C 6100FED2        	  5905:                 bsr ROx_FLAGS
01:00003510 EB58            	  5906:                 rol.w #5,d0
01:00003512 6100FECC        	  5907:                 bsr ROx_FLAGS
01:00003516 EF58            	  5908:                 rol.w #7,d0
01:00003518 6100FEC6        	  5909:                 bsr ROx_FLAGS
01:0000351C E158            	  5910:                 rol.w #8,d0
01:0000351E 6100FEC0        	  5911:                 bsr ROx_FLAGS
01:00003522 0C808001FE31    	  5912:                 cmpi.l #$8001FE31,d0
01:00003528 66FE            	  5913:                 bne.s *
01:0000352A 0C8500000037    	  5914:                 cmpi.l #$00000037,d5
01:00003530 66FE            	  5915:                 bne.s *
                            	  5916: 
                            	  5917: *        WORD RIGHT
01:00003532 E258            	  5918:                 ror.w #1,d0
01:00003534 6100FEAA        	  5919:                 bsr ROx_FLAGS
01:00003538 EA58            	  5920:                 ror.w #5,d0
01:0000353A 6100FEA4        	  5921:                 bsr ROx_FLAGS
01:0000353E EE58            	  5922:                 ror.w #7,d0
01:00003540 6100FE9E        	  5923:                 bsr ROx_FLAGS
01:00003544 E058            	  5924:                 ror.w #8,d0
01:00003546 6100FE98        	  5925:                 bsr ROx_FLAGS
01:0000354A 0C8080018FF1    	  5926:                 cmpi.l #$80018FF1,d0
01:00003550 66FE            	  5927:                 bne.s *
01:00003552 0C850000005B    	  5928:                 cmpi.l #$0000005B,d5
01:00003558 66FE            	  5929:                 bne.s *
                            	  5930: 
                            	  5931: *        LONG LEFT
01:0000355A E398            	  5932:                 rol.l #1,d0
01:0000355C 6100FE82        	  5933:                 bsr ROx_FLAGS
01:00003560 EB98            	  5934:                 rol.l #5,d0
01:00003562 6100FE7C        	  5935:                 bsr ROx_FLAGS
01:00003566 EF98            	  5936:                 rol.l #7,d0
01:00003568 6100FE76        	  5937:                 bsr ROx_FLAGS
01:0000356C E198            	  5938:                 rol.l #8,d0
01:0000356E 6100FE70        	  5939:                 bsr ROx_FLAGS
01:00003572 0C80FE300031    	  5940:                 cmpi.l #$FE300031,d0
01:00003578 66FE            	  5941:                 bne.s *
01:0000357A 0C8500000065    	  5942:                 cmpi.l #$00000065,d5
01:00003580 66FE            	  5943:                 bne.s *
                            	  5944: 
                            	  5945: *        LONG RIGHT
01:00003582 E298            	  5946:                 ror.l #1,d0
01:00003584 6100FE5A        	  5947:                 bsr ROx_FLAGS
01:00003588 EA98            	  5948:                 ror.l #5,d0
01:0000358A 6100FE54        	  5949:                 bsr ROx_FLAGS
01:0000358E EE98            	  5950:                 ror.l #7,d0
01:00003590 6100FE4E        	  5951:                 bsr ROx_FLAGS
01:00003594 E098            	  5952:                 ror.l #8,d0
01:00003596 6100FE48        	  5953:                 bsr ROx_FLAGS
01:0000359A 0C8080018FF1    	  5954:                 cmpi.l #$80018FF1,d0
01:000035A0 66FE            	  5955:                 bne.s *
01:000035A2 0C8500000080    	  5956:                 cmpi.l #$00000080,d5
01:000035A8 66FE            	  5957:                 bne.s *
                            	  5958: 
                            	  5959: 
                            	  5960: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5961: 
01:000035AA 7A00            	  5962:                 moveq  #$00000000,d5
01:000035AC 307C0100        	  5963:                 move.l #$00000100,a0
01:000035B0 30BC8FF1        	  5964:                 move.w #$8FF1,(a0)
                            	  5965: 
                            	  5966: *        WORD LEFT
01:000035B4 E7D0            	  5967:                 rol (a0)
01:000035B6 6100FE28        	  5968:                 bsr ROx_FLAGS
01:000035BA E7D0            	  5969:                 rol (a0)
01:000035BC 6100FE22        	  5970:                 bsr ROx_FLAGS
01:000035C0 E7D0            	  5971:                 rol (a0)
01:000035C2 6100FE1C        	  5972:                 bsr ROx_FLAGS
01:000035C6 E7D0            	  5973:                 rol (a0)
01:000035C8 6100FE16        	  5974:                 bsr ROx_FLAGS
01:000035CC 3010            	  5975:                 move.w (a0),d0
01:000035CE 0C808001FF18    	  5976:                 cmpi.l #$8001FF18,d0
01:000035D4 66FE            	  5977:                 bne.s *
01:000035D6 0C8500000009    	  5978:                 cmpi.l #$00000009,d5
01:000035DC 66FE            	  5979:                 bne.s *
                            	  5980: 
                            	  5981: *        WORD RIGHT
01:000035DE E6D0            	  5982:                 ror (a0)
01:000035E0 6100FDFE        	  5983:                 bsr ROx_FLAGS
01:000035E4 E6D0            	  5984:                 ror (a0)
01:000035E6 6100FDF8        	  5985:                 bsr ROx_FLAGS
01:000035EA E6D0            	  5986:                 ror (a0)
01:000035EC 6100FDF2        	  5987:                 bsr ROx_FLAGS
01:000035F0 E6D0            	  5988:                 ror (a0)
01:000035F2 6100FDEC        	  5989:                 bsr ROx_FLAGS
01:000035F6 E6D0            	  5990:                 ror (a0)
01:000035F8 6100FDE6        	  5991:                 bsr ROx_FLAGS
01:000035FC E6D0            	  5992:                 ror (a0)
01:000035FE 6100FDE0        	  5993:                 bsr ROx_FLAGS
01:00003602 3010            	  5994:                 move.w (a0),d0
01:00003604 0C80800163FC    	  5995:                 cmpi.l #$800163FC,d0
01:0000360A 66FE            	  5996:                 bne.s *
01:0000360C 0C850000001B    	  5997:                 cmpi.l #$0000001B,d5
01:00003612 66FE            	  5998:                 bne.s *
                            	  5999: 
01:00003614 4E75            	  6000:                 rts
                            	  6001: 
                            	  6002: 
                            	  6003: 
                            	  6004: *-----------------------------------------------------------
                            	  6005: *-----------------------------------------------------------
                            	  6006: * OPCODE : ROXx
                            	  6007: *-----------------------------------------------------------
                            	  6008: *-----------------------------------------------------------
                            	  6009: 
                            	  6010: *     Subroutine to check and accumulate the flags
01:00003616 40C3            	  6011: ROXx_FLAGS:     move.w sr,d3
01:00003618 02830000000F    	  6012:                 andi.l #$0F,d3            * Isolate flags
01:0000361E DA83            	  6013:                 add.l d3,d5               * Copy flag results into accumulator
01:00003620 4E75            	  6014:                 rts
                            	  6015: 
                            	  6016: op_ROXx:
                            	  6017: 
                            	  6018: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6019: 
                            	  6020: *        BYTE LEFT
01:00003622 203C80018FF1    	  6021:                 move.l #$80018FF1,d0
01:00003628 7A00            	  6022:                 moveq  #$00000000,d5
01:0000362A 7C11            	  6023:                 moveq  #$00000011,d6
                            	  6024: ROXx_LOOP1:
01:0000362C ED30            	  6025:                 roxl.b d6,d0
01:0000362E 61E6            	  6026:                 bsr ROXx_FLAGS
01:00003630 51CEFFFA        	  6027:                 dbf d6,ROXx_LOOP1
01:00003634 0C8080018FD0    	  6028:                 cmpi.l #$80018FD0,d0
01:0000363A 66FE            	  6029:                 bne.s *
01:0000363C 0C8500000042    	  6030:                 cmpi.l #$00000042,d5
01:00003642 66FE            	  6031:                 bne.s *
                            	  6032: 
                            	  6033: *        BYTE RIGHT
01:00003644 203C80018FF1    	  6034:                 move.l #$80018FF1,d0
01:0000364A 7C12            	  6035:                 moveq  #$00000012,d6
                            	  6036: ROXx_LOOP2:
01:0000364C EC30            	  6037:                 roxr.b d6,d0
01:0000364E 61C6            	  6038:                 bsr ROXx_FLAGS
01:00003650 51CEFFFA        	  6039:                 dbf d6,ROXx_LOOP2
01:00003654 0C8080018F51    	  6040:                 cmpi.l #$80018F51,d0
01:0000365A 66FE            	  6041:                 bne.s *
01:0000365C 0C850000009C    	  6042:                 cmpi.l #$0000009C,d5
01:00003662 66FE            	  6043:                 bne.s *
                            	  6044: 
                            	  6045: 
                            	  6046: *        WORD LEFT
01:00003664 203C80018FF1    	  6047:                 move.l #$80018FF1,d0
01:0000366A 7C13            	  6048:                 moveq  #$00000013,d6
                            	  6049: ROXx_LOOP3:
01:0000366C ED70            	  6050:                 roxl.w d6,d0
01:0000366E 61A6            	  6051:                 bsr ROXx_FLAGS
01:00003670 51CEFFFA        	  6052:                 dbf d6,ROXx_LOOP3
01:00003674 0C8080013980    	  6053:                 cmpi.l #$80013980,d0
01:0000367A 66FE            	  6054:                 bne.s *
01:0000367C 0C85000000C9    	  6055:                 cmpi.l #$000000C9,d5
01:00003682 66FE            	  6056:                 bne.s *
                            	  6057: 
                            	  6058: *        WORD RIGHT
01:00003684 203C80018FF1    	  6059:                 move.l #$80018FF1,d0
01:0000368A 7C1E            	  6060:                 move.l #$0000001E,d6
                            	  6061: ROXx_LOOP4:
01:0000368C EC70            	  6062:                 roxr.w d6,d0
01:0000368E 6186            	  6063:                 bsr ROXx_FLAGS
01:00003690 51CEFFFA        	  6064:                 dbf d6,ROXx_LOOP4
01:00003694 0C8080010A1D    	  6065:                 cmpi.l #$80010A1D,d0
01:0000369A 66FE            	  6066:                 bne.s *
01:0000369C 0C850000014D    	  6067:                 cmpi.l #$0000014D,d5
01:000036A2 66FE            	  6068:                 bne.s *
                            	  6069: 
                            	  6070: 
                            	  6071: *        LONG LEFT
01:000036A4 203C80018FF1    	  6072:                 move.l #$80018FF1,d0
01:000036AA 7C15            	  6073:                 moveq  #$00000015,d6
                            	  6074: ROXx_LOOP5:
01:000036AC EDB0            	  6075:                 roxl.l d6,d0
01:000036AE 6100FF66        	  6076:                 bsr ROXx_FLAGS
01:000036B2 51CEFFF8        	  6077:                 dbf d6,ROXx_LOOP5
01:000036B6 0C80800185D0    	  6078:                 cmpi.l #$800185D0,d0
01:000036BC 66FE            	  6079:                 bne.s *
01:000036BE 0C85000001A1    	  6080:                 cmpi.l #$000001A1,d5
01:000036C4 66FE            	  6081:                 bne.s *
                            	  6082: 
                            	  6083: *        LONG RIGHT
01:000036C6 203C80018FF1    	  6084:                 move.l #$80018FF1,d0
01:000036CC 7C16            	  6085:                 moveq  #$00000016,d6
                            	  6086: ROXx_LOOP6:
01:000036CE ECB0            	  6087:                 roxr.l d6,d0
01:000036D0 6100FF44        	  6088:                 bsr ROXx_FLAGS
01:000036D4 51CEFFF8        	  6089:                 dbf d6,ROXx_LOOP6
01:000036D8 0C80082D8200    	  6090:                 cmpi.l #$082D8200,d0
01:000036DE 66FE            	  6091:                 bne.s *
01:000036E0 0C85000001DE    	  6092:                 cmpi.l #$000001DE,d5
01:000036E6 66FE            	  6093:                 bne.s *
                            	  6094: 
                            	  6095: 
                            	  6096: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6097: 
01:000036E8 203C80018FF1    	  6098:                 move.l #$80018FF1,d0
01:000036EE 7A00            	  6099:                 moveq  #$00000000,d5
                            	  6100: 
                            	  6101: *        BYTE LEFT
01:000036F0 E310            	  6102:                 roxl.b #1,d0
01:000036F2 6100FF22        	  6103:                 bsr ROXx_FLAGS
01:000036F6 EB10            	  6104:                 roxl.b #5,d0
01:000036F8 6100FF1C        	  6105:                 bsr ROXx_FLAGS
01:000036FC EF10            	  6106:                 roxl.b #7,d0
01:000036FE 6100FF16        	  6107:                 bsr ROXx_FLAGS
01:00003702 E110            	  6108:                 roxl.b #8,d0
01:00003704 6100FF10        	  6109:                 bsr ROXx_FLAGS
01:00003708 0C8080018F09    	  6110:                 cmpi.l #$80018F09,d0
01:0000370E 66FE            	  6111:                 bne.s *
01:00003710 0C850000000B    	  6112:                 cmpi.l #$0000000B,d5
01:00003716 66FE            	  6113:                 bne.s *
                            	  6114: 
                            	  6115: *        BYTE RIGHT
01:00003718 E210            	  6116:                 roxr.b #1,d0
01:0000371A 6100FEFA        	  6117:                 bsr ROXx_FLAGS
01:0000371E EA10            	  6118:                 roxr.b #5,d0
01:00003720 6100FEF4        	  6119:                 bsr ROXx_FLAGS
01:00003724 EE10            	  6120:                 roxr.b #7,d0
01:00003726 6100FEEE        	  6121:                 bsr ROXx_FLAGS
01:0000372A E010            	  6122:                 roxr.b #8,d0
01:0000372C 6100FEE8        	  6123:                 bsr ROXx_FLAGS
01:00003730 0C8080018F00    	  6124:                 cmpi.l #$80018F00,d0
01:00003736 66FE            	  6125:                 bne.s *
01:00003738 0C8500000015    	  6126:                 cmpi.l #$00000015,d5
01:0000373E 66FE            	  6127:                 bne.s *
                            	  6128: 
                            	  6129: *        WORD LEFT
01:00003740 E350            	  6130:                 roxl.w #1,d0
01:00003742 6100FED2        	  6131:                 bsr ROXx_FLAGS
01:00003746 EB50            	  6132:                 roxl.w #5,d0
01:00003748 6100FECC        	  6133:                 bsr ROXx_FLAGS
01:0000374C EF50            	  6134:                 roxl.w #7,d0
01:0000374E 6100FEC6        	  6135:                 bsr ROXx_FLAGS
01:00003752 E150            	  6136:                 roxl.w #8,d0
01:00003754 6100FEC0        	  6137:                 bsr ROXx_FLAGS
01:00003758 0C808001B000    	  6138:                 cmpi.l #$8001B000,d0
01:0000375E 66FE            	  6139:                 bne.s *
01:00003760 0C8500000027    	  6140:                 cmpi.l #$00000027,d5
01:00003766 66FE            	  6141:                 bne.s *
                            	  6142: 
                            	  6143: *        WORD RIGHT
01:00003768 E250            	  6144:                 roxr.w #1,d0
01:0000376A 6100FEAA        	  6145:                 bsr ROXx_FLAGS
01:0000376E EA50            	  6146:                 roxr.w #5,d0
01:00003770 6100FEA4        	  6147:                 bsr ROXx_FLAGS
01:00003774 EE50            	  6148:                 roxr.w #7,d0
01:00003776 6100FE9E        	  6149:                 bsr ROXx_FLAGS
01:0000377A E050            	  6150:                 roxr.w #8,d0
01:0000377C 6100FE98        	  6151:                 bsr ROXx_FLAGS
01:00003780 0C8080010A00    	  6152:                 cmpi.l #$80010A00,d0
01:00003786 66FE            	  6153:                 bne.s *
01:00003788 0C8500000028    	  6154:                 cmpi.l #$00000028,d5
01:0000378E 66FE            	  6155:                 bne.s *
                            	  6156: 
                            	  6157: *        LONG LEFT
01:00003790 E390            	  6158:                 roxl.l #1,d0
01:00003792 6100FE82        	  6159:                 bsr ROXx_FLAGS
01:00003796 EB90            	  6160:                 roxl.l #5,d0
01:00003798 6100FE7C        	  6161:                 bsr ROXx_FLAGS
01:0000379C EF90            	  6162:                 roxl.l #7,d0
01:0000379E 6100FE76        	  6163:                 bsr ROXx_FLAGS
01:000037A2 E190            	  6164:                 roxl.l #8,d0
01:000037A4 6100FE70        	  6165:                 bsr ROXx_FLAGS
01:000037A8 0C8040000010    	  6166:                 cmpi.l #$40000010,d0
01:000037AE 66FE            	  6167:                 bne.s *
01:000037B0 0C850000002A    	  6168:                 cmpi.l #$0000002A,d5
01:000037B6 66FE            	  6169:                 bne.s *
                            	  6170: 
                            	  6171: *        LONG RIGHT
01:000037B8 E290            	  6172:                 roxr.l #1,d0
01:000037BA 6100FE5A        	  6173:                 bsr ROXx_FLAGS
01:000037BE EA90            	  6174:                 roxr.l #5,d0
01:000037C0 6100FE54        	  6175:                 bsr ROXx_FLAGS
01:000037C4 EE90            	  6176:                 roxr.l #7,d0
01:000037C6 6100FE4E        	  6177:                 bsr ROXx_FLAGS
01:000037CA E090            	  6178:                 roxr.l #8,d0
01:000037CC 6100FE48        	  6179:                 bsr ROXx_FLAGS
01:000037D0 0C8000010200    	  6180:                 cmpi.l #$00010200,d0
01:000037D6 66FE            	  6181:                 bne.s *
01:000037D8 0C8500000032    	  6182:                 cmpi.l #$00000032,d5
01:000037DE 66FE            	  6183:                 bne.s *
                            	  6184: 
                            	  6185: 
                            	  6186: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6187: 
01:000037E0 7A00            	  6188:                 moveq  #$00000000,d5
01:000037E2 307C0100        	  6189:                 move.l #$00000100,a0
01:000037E6 30BC8FF1        	  6190:                 move.w #$8FF1,(a0)
                            	  6191: 
                            	  6192: *        WORD LEFT
01:000037EA E5D0            	  6193:                 roxl (a0)
01:000037EC 6100FE28        	  6194:                 bsr ROXx_FLAGS
01:000037F0 E5D0            	  6195:                 roxl (a0)
01:000037F2 6100FE22        	  6196:                 bsr ROXx_FLAGS
01:000037F6 E5D0            	  6197:                 roxl (a0)
01:000037F8 6100FE1C        	  6198:                 bsr ROXx_FLAGS
01:000037FC E5D0            	  6199:                 roxl (a0)
01:000037FE 6100FE16        	  6200:                 bsr ROXx_FLAGS
01:00003802 3010            	  6201:                 move.w (a0),d0
01:00003804 0C800001FF10    	  6202:                 cmpi.l #$0001FF10,d0
01:0000380A 66FE            	  6203:                 bne.s *
01:0000380C 0C8500000009    	  6204:                 cmpi.l #$00000009,d5
01:00003812 66FE            	  6205:                 bne.s *
                            	  6206: 
                            	  6207: *        WORD RIGHT
01:00003814 E4D0            	  6208:                 roxr (a0)
01:00003816 6100FDFE        	  6209:                 bsr ROXx_FLAGS
01:0000381A E4D0            	  6210:                 roxr (a0)
01:0000381C 6100FDF8        	  6211:                 bsr ROXx_FLAGS
01:00003820 E4D0            	  6212:                 roxr (a0)
01:00003822 6100FDF2        	  6213:                 bsr ROXx_FLAGS
01:00003826 E4D0            	  6214:                 roxr (a0)
01:00003828 6100FDEC        	  6215:                 bsr ROXx_FLAGS
01:0000382C E4D0            	  6216:                 roxr (a0)
01:0000382E 6100FDE6        	  6217:                 bsr ROXx_FLAGS
01:00003832 E4D0            	  6218:                 roxr (a0)
01:00003834 6100FDE0        	  6219:                 bsr ROXx_FLAGS
01:00003838 3010            	  6220:                 move.w (a0),d0
01:0000383A 0C80000103FC    	  6221:                 cmpi.l #$000103FC,d0
01:00003840 66FE            	  6222:                 bne.s *
01:00003842 0C850000000A    	  6223:                 cmpi.l #$0000000A,d5
01:00003848 66FE            	  6224:                 bne.s *
                            	  6225: 
01:0000384A 4E75            	  6226:                 rts
                            	  6227: 
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: *-----------------------------------------------------------
                            	  6232: *-----------------------------------------------------------
                            	  6233: * OPCODE : SHIFTS
                            	  6234: *-----------------------------------------------------------
                            	  6235: *-----------------------------------------------------------
                            	  6236: 
                            	  6237: *     Subroutine to check and accumulate the flags
01:0000384C 40C3            	  6238: SHIFTS_FLAGS:   move.w sr,d3
01:0000384E 02830000000F    	  6239:                 andi.l #$0F,d3            * Isolate flags
01:00003854 DA83            	  6240:                 add.l d3,d5               * Copy flag results into accumulator
01:00003856 4E75            	  6241:                 rts
                            	  6242: 
                            	  6243: op_SHIFTS:
                            	  6244: 
                            	  6245: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6246: 
                            	  6247: *        BYTE LEFT
01:00003858 203C80018F81    	  6248:                 move.l #$80018F81,d0
01:0000385E 7A00            	  6249:                 moveq  #$00000000,d5
01:00003860 7C02            	  6250:                 moveq  #$00000002,d6
                            	  6251: SHIFTS_LOOP1:
01:00003862 ED20            	  6252:                 asl.b d6,d0
01:00003864 61E6            	  6253:                 bsr SHIFTS_FLAGS
01:00003866 51CEFFFA        	  6254:                 dbf d6,SHIFTS_LOOP1
01:0000386A 0C8080018F08    	  6255:                 cmpi.l #$80018F08,d0
01:00003870 66FE            	  6256:                 bne.s *
01:00003872 0C8500000002    	  6257:                 cmpi.l #$00000002,d5
01:00003878 66FE            	  6258:                 bne.s *
                            	  6259: 
                            	  6260: *        BYTE RIGHT
01:0000387A 203C80018F81    	  6261:                 move.l #$80018F81,d0
01:00003880 7C02            	  6262:                 moveq  #$00000002,d6
                            	  6263: SHIFTS_LOOP2:
01:00003882 EC20            	  6264:                 asr.b d6,d0
01:00003884 61C6            	  6265:                 bsr SHIFTS_FLAGS
01:00003886 51CEFFFA        	  6266:                 dbf d6,SHIFTS_LOOP2
01:0000388A 0C8080018FF0    	  6267:                 cmpi.l #$80018FF0,d0
01:00003890 66FE            	  6268:                 bne.s *
01:00003892 0C850000001A    	  6269:                 cmpi.l #$0000001A,d5
01:00003898 66FE            	  6270:                 bne.s *
                            	  6271: 
                            	  6272: 
                            	  6273: *        WORD LEFT
01:0000389A 203C80018FF1    	  6274:                 move.l #$80018FF1,d0
01:000038A0 7C02            	  6275:                 moveq  #$00000002,d6
                            	  6276: SHIFTS_LOOP3:
01:000038A2 ED60            	  6277:                 asl.w d6,d0
01:000038A4 61A6            	  6278:                 bsr SHIFTS_FLAGS
01:000038A6 51CEFFFA        	  6279:                 dbf d6,SHIFTS_LOOP3
01:000038AA 0C8080017F88    	  6280:                 cmpi.l #$80017F88,d0
01:000038B0 66FE            	  6281:                 bne.s *
01:000038B2 0C850000001C    	  6282:                 cmpi.l #$0000001C,d5
01:000038B8 66FE            	  6283:                 bne.s *
                            	  6284: 
                            	  6285: *        WORD RIGHT
01:000038BA 203C80018FF1    	  6286:                 move.l #$80018FF1,d0
01:000038C0 7C02            	  6287:                 moveq  #$00000002,d6
                            	  6288: SHIFTS_LOOP4:
01:000038C2 EC60            	  6289:                 asr.w d6,d0
01:000038C4 6186            	  6290:                 bsr SHIFTS_FLAGS
01:000038C6 51CEFFFA        	  6291:                 dbf d6,SHIFTS_LOOP4
01:000038CA 0C808001F1FE    	  6292:                 cmpi.l #$8001F1FE,d0
01:000038D0 66FE            	  6293:                 bne.s *
01:000038D2 0C8500000034    	  6294:                 cmpi.l #$00000034,d5
01:000038D8 66FE            	  6295:                 bne.s *
                            	  6296: 
                            	  6297: 
                            	  6298: *        LONG LEFT
01:000038DA 203C80018FF1    	  6299:                 move.l #$80018FF1,d0
01:000038E0 7C02            	  6300:                 moveq  #$00000002,d6
                            	  6301: SHIFTS_LOOP5:
01:000038E2 EDA0            	  6302:                 asl.l d6,d0
01:000038E4 6100FF66        	  6303:                 bsr SHIFTS_FLAGS
01:000038E8 51CEFFF8        	  6304:                 dbf d6,SHIFTS_LOOP5
01:000038EC 0C80000C7F88    	  6305:                 cmpi.l #$000C7F88,d0
01:000038F2 66FE            	  6306:                 bne.s *
01:000038F4 0C8500000036    	  6307:                 cmpi.l #$00000036,d5
01:000038FA 66FE            	  6308:                 bne.s *
                            	  6309: 
                            	  6310: *        LONG RIGHT
01:000038FC 203C80018FF1    	  6311:                 move.l #$80018FF1,d0
01:00003902 7C02            	  6312:                 moveq  #$00000002,d6
                            	  6313: SHIFTS_LOOP6:
01:00003904 ECA0            	  6314:                 asr.l d6,d0
01:00003906 6100FF44        	  6315:                 bsr SHIFTS_FLAGS
01:0000390A 51CEFFF8        	  6316:                 dbf d6,SHIFTS_LOOP6
01:0000390E 0C80F00031FE    	  6317:                 cmpi.l #$F00031FE,d0
01:00003914 66FE            	  6318:                 bne.s *
01:00003916 0C850000004E    	  6319:                 cmpi.l #$0000004E,d5
01:0000391C 66FE            	  6320:                 bne.s *
                            	  6321: 
                            	  6322: 
                            	  6323: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6324: 
01:0000391E 203C80018FF1    	  6325:                 move.l #$80018FF1,d0
01:00003924 7A00            	  6326:                 moveq  #$00000000,d5
                            	  6327: 
                            	  6328: *        BYTE LEFT
01:00003926 D000            	  6329:                 asl.b #1,d0
01:00003928 6100FF22        	  6330:                 bsr SHIFTS_FLAGS
01:0000392C E500            	  6331:                 asl.b #2,d0
01:0000392E 6100FF1C        	  6332:                 bsr SHIFTS_FLAGS
01:00003932 D000            	  6333:                 asl.b #1,d0
01:00003934 6100FF16        	  6334:                 bsr SHIFTS_FLAGS
01:00003938 E700            	  6335:                 asl.b #3,d0
01:0000393A 6100FF10        	  6336:                 bsr SHIFTS_FLAGS
01:0000393E 0C8080018F80    	  6337:                 cmpi.l #$80018F80,d0
01:00003944 66FE            	  6338:                 bne.s *
01:00003946 0C850000001F    	  6339:                 cmpi.l #$0000001F,d5
01:0000394C 66FE            	  6340:                 bne.s *
                            	  6341: 
                            	  6342: *        BYTE RIGHT
01:0000394E E200            	  6343:                 asr.b #1,d0
01:00003950 6100FEFA        	  6344:                 bsr SHIFTS_FLAGS
01:00003954 E400            	  6345:                 asr.b #2,d0
01:00003956 6100FEF4        	  6346:                 bsr SHIFTS_FLAGS
01:0000395A E600            	  6347:                 asr.b #3,d0
01:0000395C 6100FEEE        	  6348:                 bsr SHIFTS_FLAGS
01:00003960 E200            	  6349:                 asr.b #1,d0
01:00003962 6100FEE8        	  6350:                 bsr SHIFTS_FLAGS
01:00003966 0C8080018FFF    	  6351:                 cmpi.l #$80018FFF,d0
01:0000396C 66FE            	  6352:                 bne.s *
01:0000396E 0C850000003F    	  6353:                 cmpi.l #$0000003F,d5
01:00003974 66FE            	  6354:                 bne.s *
                            	  6355: 
                            	  6356: *        WORD LEFT
01:00003976 D040            	  6357:                 asl.w #1,d0
01:00003978 6100FED2        	  6358:                 bsr SHIFTS_FLAGS
01:0000397C E540            	  6359:                 asl.w #2,d0
01:0000397E 6100FECC        	  6360:                 bsr SHIFTS_FLAGS
01:00003982 E740            	  6361:                 asl.w #3,d0
01:00003984 6100FEC6        	  6362:                 bsr SHIFTS_FLAGS
01:00003988 EB40            	  6363:                 asl.w #5,d0
01:0000398A 6100FEC0        	  6364:                 bsr SHIFTS_FLAGS
01:0000398E 0C808001F800    	  6365:                 cmpi.l #$8001F800,d0
01:00003994 66FE            	  6366:                 bne.s *
01:00003996 0C8500000056    	  6367:                 cmpi.l #$00000056,d5
01:0000399C 66FE            	  6368:                 bne.s *
                            	  6369: 
                            	  6370: *        WORD RIGHT
01:0000399E EA40            	  6371:                 asr.w #5,d0
01:000039A0 6100FEAA        	  6372:                 bsr SHIFTS_FLAGS
01:000039A4 E240            	  6373:                 asr.w #1,d0
01:000039A6 6100FEA4        	  6374:                 bsr SHIFTS_FLAGS
01:000039AA E440            	  6375:                 asr.w #2,d0
01:000039AC 6100FE9E        	  6376:                 bsr SHIFTS_FLAGS
01:000039B0 E840            	  6377:                 asr.w #4,d0
01:000039B2 6100FE98        	  6378:                 bsr SHIFTS_FLAGS
01:000039B6 0C808001FFFF    	  6379:                 cmpi.l #$8001FFFF,d0
01:000039BC 66FE            	  6380:                 bne.s *
01:000039BE 0C8500000077    	  6381:                 cmpi.l #$00000077,d5
01:000039C4 66FE            	  6382:                 bne.s *
                            	  6383: 
                            	  6384: *        LONG LEFT
01:000039C6 203C80018FF1    	  6385:                 move.l #$80018FF1,d0
01:000039CC D080            	  6386:                 asl.l #1,d0
01:000039CE 6100FE7C        	  6387:                 bsr SHIFTS_FLAGS
01:000039D2 E580            	  6388:                 asl.l #2,d0
01:000039D4 6100FE76        	  6389:                 bsr SHIFTS_FLAGS
01:000039D8 EF80            	  6390:                 asl.l #7,d0
01:000039DA 6100FE70        	  6391:                 bsr SHIFTS_FLAGS
01:000039DE E980            	  6392:                 asl.l #4,d0
01:000039E0 6100FE6A        	  6393:                 bsr SHIFTS_FLAGS
01:000039E4 0C8063FC4000    	  6394:                 cmpi.l #$63FC4000,d0
01:000039EA 66FE            	  6395:                 bne.s *
01:000039EC 0C850000007A    	  6396:                 cmpi.l #$0000007A,d5
01:000039F2 66FE            	  6397:                 bne.s *
                            	  6398: 
                            	  6399: *        LONG RIGHT
01:000039F4 203C80018FF1    	  6400:                 move.l #$80018FF1,d0
01:000039FA E280            	  6401:                 asr.l #1,d0
01:000039FC 6100FE4E        	  6402:                 bsr SHIFTS_FLAGS
01:00003A00 EA80            	  6403:                 asr.l #5,d0
01:00003A02 6100FE48        	  6404:                 bsr SHIFTS_FLAGS
01:00003A06 EE80            	  6405:                 asr.l #7,d0
01:00003A08 6100FE42        	  6406:                 bsr SHIFTS_FLAGS
01:00003A0C E080            	  6407:                 asr.l #8,d0
01:00003A0E 6100FE3C        	  6408:                 bsr SHIFTS_FLAGS
01:00003A12 0C80FFFFFC00    	  6409:                 cmpi.l #$FFFFFC00,d0
01:00003A18 66FE            	  6410:                 bne.s *
01:00003A1A 0C850000009C    	  6411:                 cmpi.l #$0000009C,d5
01:00003A20 66FE            	  6412:                 bne.s *
                            	  6413: 
                            	  6414: 
                            	  6415: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6416: 
01:00003A22 7A00            	  6417:                 moveq  #$00000000,d5
01:00003A24 307C0100        	  6418:                 move.l #$00000100,a0
01:00003A28 30BC8FF1        	  6419:                 move.w #$8FF1,(a0)
                            	  6420: 
                            	  6421: *        WORD LEFT
01:00003A2C E1D0            	  6422:                 asl  (a0)
01:00003A2E 6100FE1C        	  6423:                 bsr SHIFTS_FLAGS
01:00003A32 E1D0            	  6424:                 asl  (a0)
01:00003A34 6100FE16        	  6425:                 bsr SHIFTS_FLAGS
01:00003A38 E1D0            	  6426:                 asl  (a0)
01:00003A3A 6100FE10        	  6427:                 bsr SHIFTS_FLAGS
01:00003A3E E1D0            	  6428:                 asl  (a0)
01:00003A40 6100FE0A        	  6429:                 bsr SHIFTS_FLAGS
01:00003A44 3010            	  6430:                 move.w (a0),d0
01:00003A46 0C80FFFFFF10    	  6431:                 cmpi.l #$FFFFFF10,d0
01:00003A4C 66FE            	  6432:                 bne.s *
01:00003A4E 0C850000000D    	  6433:                 cmpi.l #$0000000D,d5
01:00003A54 66FE            	  6434:                 bne.s *
                            	  6435: 
                            	  6436: *        WORD RIGHT
01:00003A56 E0D0            	  6437:                 asr (a0)
01:00003A58 6100FDF2        	  6438:                 bsr SHIFTS_FLAGS
01:00003A5C E0D0            	  6439:                 asr (a0)
01:00003A5E 6100FDEC        	  6440:                 bsr SHIFTS_FLAGS
01:00003A62 E0D0            	  6441:                 asr (a0)
01:00003A64 6100FDE6        	  6442:                 bsr SHIFTS_FLAGS
01:00003A68 E0D0            	  6443:                 asr (a0)
01:00003A6A 6100FDE0        	  6444:                 bsr SHIFTS_FLAGS
01:00003A6E E0D0            	  6445:                 asr (a0)
01:00003A70 6100FDDA        	  6446:                 bsr SHIFTS_FLAGS
01:00003A74 E0D0            	  6447:                 asr (a0)
01:00003A76 6100FDD4        	  6448:                 bsr SHIFTS_FLAGS
01:00003A7A 3010            	  6449:                 move.w (a0),d0
01:00003A7C 0C80FFFFFFFC    	  6450:                 cmpi.l #$FFFFFFFC,d0
01:00003A82 66FE            	  6451:                 bne.s *
01:00003A84 0C850000003E    	  6452:                 cmpi.l #$0000003E,d5
01:00003A8A 66FE            	  6453:                 bne.s *
                            	  6454: 
01:00003A8C 4E75            	  6455:                 rts
                            	  6456: 
                            	  6457: 
                            	  6458: 
                            	  6459: *-----------------------------------------------------------
                            	  6460: *-----------------------------------------------------------
                            	  6461: * OPCODE : SHIFTS2
                            	  6462: *-----------------------------------------------------------
                            	  6463: *-----------------------------------------------------------
                            	  6464: 
                            	  6465: *     Subroutine to check and accumulate the flags
01:00003A8E 40C3            	  6466: SHIFTS2_FLAGS:  move.w sr,d3
01:00003A90 02830000000F    	  6467:                 andi.l #$0F,d3            * Isolate flags
01:00003A96 DA83            	  6468:                 add.l d3,d5               * Copy flag results into accumulator
01:00003A98 4E75            	  6469:                 rts
                            	  6470: 
                            	  6471: op_SHIFTS2:
                            	  6472: 
                            	  6473: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6474: 
                            	  6475: *        BYTE LEFT
01:00003A9A 203C80018F81    	  6476:                 move.l #$80018F81,d0
01:00003AA0 7A00            	  6477:                 moveq  #$00000000,d5
01:00003AA2 7C02            	  6478:                 moveq  #$00000002,d6
                            	  6479: SHIFTS2_LOOP1:
01:00003AA4 ED28            	  6480:                 lsl.b d6,d0
01:00003AA6 61E6            	  6481:                 bsr SHIFTS2_FLAGS
01:00003AA8 51CEFFFA        	  6482:                 dbf d6,SHIFTS2_LOOP1
01:00003AAC 0C8080018F08    	  6483:                 cmpi.l #$80018F08,d0
01:00003AB2 66FE            	  6484:                 bne.s *
01:00003AB4 4A85            	  6485:                 cmpi.l #$00000000,d5
01:00003AB6 66FE            	  6486:                 bne.s *
                            	  6487: 
                            	  6488: *        BYTE RIGHT
01:00003AB8 203C80018F81    	  6489:                 move.l #$80018F81,d0
01:00003ABE 7C02            	  6490:                 moveq  #$00000002,d6
                            	  6491: SHIFTS2_LOOP2:
01:00003AC0 EC28            	  6492:                 lsr.b d6,d0
01:00003AC2 61CA            	  6493:                 bsr SHIFTS2_FLAGS
01:00003AC4 51CEFFFA        	  6494:                 dbf d6,SHIFTS2_LOOP2
01:00003AC8 0C8080018F10    	  6495:                 cmpi.l #$80018F10,d0
01:00003ACE 66FE            	  6496:                 bne.s *
01:00003AD0 4A85            	  6497:                 cmpi.l #$00000000,d5
01:00003AD2 66FE            	  6498:                 bne.s *
                            	  6499: 
                            	  6500: 
                            	  6501: *        WORD LEFT
01:00003AD4 203C80018FF1    	  6502:                 move.l #$80018FF1,d0
01:00003ADA 7C02            	  6503:                 moveq  #$00000002,d6
                            	  6504: SHIFTS2_LOOP3:
01:00003ADC ED68            	  6505:                 lsl.w d6,d0
01:00003ADE 61AE            	  6506:                 bsr SHIFTS2_FLAGS
01:00003AE0 51CEFFFA        	  6507:                 dbf d6,SHIFTS2_LOOP3
01:00003AE4 0C8080017F88    	  6508:                 cmpi.l #$80017F88,d0
01:00003AEA 66FE            	  6509:                 bne.s *
01:00003AEC 4A85            	  6510:                 cmpi.l #$00000000,d5
01:00003AEE 66FE            	  6511:                 bne.s *
                            	  6512: 
                            	  6513: *        WORD RIGHT
01:00003AF0 203C80018FF1    	  6514:                 move.l #$80018FF1,d0
01:00003AF6 7C02            	  6515:                 moveq  #$00000002,d6
                            	  6516: SHIFTS2_LOOP4:
01:00003AF8 EC68            	  6517:                 lsr.w d6,d0
01:00003AFA 6192            	  6518:                 bsr SHIFTS2_FLAGS
01:00003AFC 51CEFFFA        	  6519:                 dbf d6,SHIFTS2_LOOP4
01:00003B00 0C80800111FE    	  6520:                 cmpi.l #$800111FE,d0
01:00003B06 66FE            	  6521:                 bne.s *
01:00003B08 4A85            	  6522:                 cmpi.l #$00000000,d5
01:00003B0A 66FE            	  6523:                 bne.s *
                            	  6524: 
                            	  6525: 
                            	  6526: *        LONG LEFT
01:00003B0C 203C80018FF1    	  6527:                 move.l #$80018FF1,d0
01:00003B12 7C02            	  6528:                 moveq  #$00000002,d6
                            	  6529: SHIFTS2_LOOP5:
01:00003B14 EDA8            	  6530:                 lsl.l d6,d0
01:00003B16 6100FF76        	  6531:                 bsr SHIFTS2_FLAGS
01:00003B1A 51CEFFF8        	  6532:                 dbf d6,SHIFTS2_LOOP5
01:00003B1E 0C80000C7F88    	  6533:                 cmpi.l #$000C7F88,d0
01:00003B24 66FE            	  6534:                 bne.s *
01:00003B26 4A85            	  6535:                 cmpi.l #$00000000,d5
01:00003B28 66FE            	  6536:                 bne.s *
                            	  6537: 
                            	  6538: *        LONG RIGHT
01:00003B2A 203C80018FF1    	  6539:                 move.l #$80018FF1,d0
01:00003B30 7C02            	  6540:                 moveq  #$00000002,d6
                            	  6541: SHIFTS2_LOOP6:
01:00003B32 ECA8            	  6542:                 lsr.l d6,d0
01:00003B34 6100FF58        	  6543:                 bsr SHIFTS2_FLAGS
01:00003B38 51CEFFF8        	  6544:                 dbf d6,SHIFTS2_LOOP6
01:00003B3C 0C80100031FE    	  6545:                 cmpi.l #$100031FE,d0
01:00003B42 66FE            	  6546:                 bne.s *
01:00003B44 4A85            	  6547:                 cmpi.l #$00000000,d5
01:00003B46 66FE            	  6548:                 bne.s *
                            	  6549: 
                            	  6550: 
                            	  6551: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6552: 
01:00003B48 203C80018FF1    	  6553:                 move.l #$80018FF1,d0
01:00003B4E 7A00            	  6554:                 moveq  #$00000000,d5
                            	  6555: 
                            	  6556: *        BYTE LEFT
01:00003B50 E308            	  6557:                 lsl.b #1,d0
01:00003B52 6100FF3A        	  6558:                 bsr SHIFTS2_FLAGS
01:00003B56 E508            	  6559:                 lsl.b #2,d0
01:00003B58 6100FF34        	  6560:                 bsr SHIFTS2_FLAGS
01:00003B5C E308            	  6561:                 lsl.b #1,d0
01:00003B5E 6100FF2E        	  6562:                 bsr SHIFTS2_FLAGS
01:00003B62 E708            	  6563:                 lsl.b #3,d0
01:00003B64 6100FF28        	  6564:                 bsr SHIFTS2_FLAGS
01:00003B68 0C8080018F80    	  6565:                 cmpi.l #$80018F80,d0
01:00003B6E 66FE            	  6566:                 bne.s *
01:00003B70 0C850000001B    	  6567:                 cmpi.l #$0000001B,d5
01:00003B76 66FE            	  6568:                 bne.s *
                            	  6569: 
                            	  6570: *        BYTE RIGHT
01:00003B78 E208            	  6571:                 lsr.b #1,d0
01:00003B7A 6100FF12        	  6572:                 bsr SHIFTS2_FLAGS
01:00003B7E E408            	  6573:                 lsr.b #2,d0
01:00003B80 6100FF0C        	  6574:                 bsr SHIFTS2_FLAGS
01:00003B84 E608            	  6575:                 lsr.b #3,d0
01:00003B86 6100FF06        	  6576:                 bsr SHIFTS2_FLAGS
01:00003B8A E208            	  6577:                 lsr.b #1,d0
01:00003B8C 6100FF00        	  6578:                 bsr SHIFTS2_FLAGS
01:00003B90 0C8080018F01    	  6579:                 cmpi.l #$80018F01,d0
01:00003B96 66FE            	  6580:                 bne.s *
01:00003B98 0C850000001B    	  6581:                 cmpi.l #$0000001B,d5
01:00003B9E 66FE            	  6582:                 bne.s *
                            	  6583: 
                            	  6584: *        WORD LEFT
01:00003BA0 E348            	  6585:                 lsl.w #1,d0
01:00003BA2 6100FEEA        	  6586:                 bsr SHIFTS2_FLAGS
01:00003BA6 E548            	  6587:                 lsl.w #2,d0
01:00003BA8 6100FEE4        	  6588:                 bsr SHIFTS2_FLAGS
01:00003BAC E748            	  6589:                 lsl.w #3,d0
01:00003BAE 6100FEDE        	  6590:                 bsr SHIFTS2_FLAGS
01:00003BB2 EB48            	  6591:                 lsl.w #5,d0
01:00003BB4 6100FED8        	  6592:                 bsr SHIFTS2_FLAGS
01:00003BB8 0C8080010800    	  6593:                 cmpi.l #$80010800,d0
01:00003BBE 66FE            	  6594:                 bne.s *
01:00003BC0 0C8500000025    	  6595:                 cmpi.l #$00000025,d5
01:00003BC6 66FE            	  6596:                 bne.s *
                            	  6597: 
                            	  6598: *        WORD RIGHT
01:00003BC8 EA48            	  6599:                 lsr.w #5,d0
01:00003BCA 6100FEC2        	  6600:                 bsr SHIFTS2_FLAGS
01:00003BCE E248            	  6601:                 lsr.w #1,d0
01:00003BD0 6100FEBC        	  6602:                 bsr SHIFTS2_FLAGS
01:00003BD4 E448            	  6603:                 lsr.w #2,d0
01:00003BD6 6100FEB6        	  6604:                 bsr SHIFTS2_FLAGS
01:00003BDA E848            	  6605:                 lsr.w #4,d0
01:00003BDC 6100FEB0        	  6606:                 bsr SHIFTS2_FLAGS
01:00003BE0 0C8080010000    	  6607:                 cmpi.l #$80010000,d0
01:00003BE6 66FE            	  6608:                 bne.s *
01:00003BE8 0C850000002A    	  6609:                 cmpi.l #$0000002A,d5
01:00003BEE 66FE            	  6610:                 bne.s *
                            	  6611: 
                            	  6612: *        LONG LEFT
01:00003BF0 203C80018FF1    	  6613:                 move.l #$80018FF1,d0
01:00003BF6 E388            	  6614:                 lsl.l #1,d0
01:00003BF8 6100FE94        	  6615:                 bsr SHIFTS2_FLAGS
01:00003BFC E588            	  6616:                 lsl.l #2,d0
01:00003BFE 6100FE8E        	  6617:                 bsr SHIFTS2_FLAGS
01:00003C02 EF88            	  6618:                 lsl.l #7,d0
01:00003C04 6100FE88        	  6619:                 bsr SHIFTS2_FLAGS
01:00003C08 E988            	  6620:                 lsl.l #4,d0
01:00003C0A 6100FE82        	  6621:                 bsr SHIFTS2_FLAGS
01:00003C0E 0C8063FC4000    	  6622:                 cmpi.l #$63FC4000,d0
01:00003C14 66FE            	  6623:                 bne.s *
01:00003C16 0C850000002B    	  6624:                 cmpi.l #$0000002B,d5
01:00003C1C 66FE            	  6625:                 bne.s *
                            	  6626: 
                            	  6627: *        LONG RIGHT
01:00003C1E 203C80018FF1    	  6628:                 move.l #$80018FF1,d0
01:00003C24 E288            	  6629:                 lsr.l #1,d0
01:00003C26 6100FE66        	  6630:                 bsr SHIFTS2_FLAGS
01:00003C2A EA88            	  6631:                 lsr.l #5,d0
01:00003C2C 6100FE60        	  6632:                 bsr SHIFTS2_FLAGS
01:00003C30 EE88            	  6633:                 lsr.l #7,d0
01:00003C32 6100FE5A        	  6634:                 bsr SHIFTS2_FLAGS
01:00003C36 E088            	  6635:                 lsr.l #8,d0
01:00003C38 6100FE54        	  6636:                 bsr SHIFTS2_FLAGS
01:00003C3C 0C8000000400    	  6637:                 cmpi.l #$00000400,d0
01:00003C42 66FE            	  6638:                 bne.s *
01:00003C44 0C850000002D    	  6639:                 cmpi.l #$0000002D,d5
01:00003C4A 66FE            	  6640:                 bne.s *
                            	  6641: 
                            	  6642: 
                            	  6643: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6644: 
01:00003C4C 7A00            	  6645:                 moveq  #$00000000,d5
01:00003C4E 307C0100        	  6646:                 move.l #$00000100,a0
01:00003C52 30BC8FF1        	  6647:                 move.w #$8FF1,(a0)
                            	  6648: 
                            	  6649: *        WORD LEFT
01:00003C56 E3D0            	  6650:                 lsl  (a0)
01:00003C58 6100FE34        	  6651:                 bsr SHIFTS2_FLAGS
01:00003C5C E3D0            	  6652:                 lsl  (a0)
01:00003C5E 6100FE2E        	  6653:                 bsr SHIFTS2_FLAGS
01:00003C62 E3D0            	  6654:                 lsl  (a0)
01:00003C64 6100FE28        	  6655:                 bsr SHIFTS2_FLAGS
01:00003C68 E3D0            	  6656:                 lsl  (a0)
01:00003C6A 6100FE22        	  6657:                 bsr SHIFTS2_FLAGS
01:00003C6E 3010            	  6658:                 move.w (a0),d0
01:00003C70 0C800000FF10    	  6659:                 cmpi.l #$0000FF10,d0
01:00003C76 66FE            	  6660:                 bne.s *
01:00003C78 0C8500000009    	  6661:                 cmpi.l #$00000009,d5
01:00003C7E 66FE            	  6662:                 bne.s *
                            	  6663: 
                            	  6664: *        WORD RIGHT
01:00003C80 E2D0            	  6665:                 lsr (a0)
01:00003C82 6100FE0A        	  6666:                 bsr SHIFTS2_FLAGS
01:00003C86 E2D0            	  6667:                 lsr (a0)
01:00003C88 6100FE04        	  6668:                 bsr SHIFTS2_FLAGS
01:00003C8C E2D0            	  6669:                 lsr (a0)
01:00003C8E 6100FDFE        	  6670:                 bsr SHIFTS2_FLAGS
01:00003C92 E2D0            	  6671:                 lsr (a0)
01:00003C94 6100FDF8        	  6672:                 bsr SHIFTS2_FLAGS
01:00003C98 E2D0            	  6673:                 lsr (a0)
01:00003C9A 6100FDF2        	  6674:                 bsr SHIFTS2_FLAGS
01:00003C9E E2D0            	  6675:                 lsr (a0)
01:00003CA0 6100FDEC        	  6676:                 bsr SHIFTS2_FLAGS
01:00003CA4 3010            	  6677:                 move.w (a0),d0
01:00003CA6 0C80000003FC    	  6678:                 cmpi.l #$000003FC,d0
01:00003CAC 66FE            	  6679:                 bne.s *
01:00003CAE 0C850000000A    	  6680:                 cmpi.l #$0000000A,d5
01:00003CB4 66FE            	  6681:                 bne.s *
                            	  6682: 
01:00003CB6 4E75            	  6683:                 rts
                            	  6684: 
                            	  6685: ;-----------------------------------------------------------
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ; OPCODE : BSR / RTS
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ;-----------------------------------------------------------
                            	  6690: 
                            	  6691: ;t3_bsr:
                            	  6692: ;	moveq	#3,d3
                            	  6693: ;	rts
                            	  6694: 
                            	  6695: ;t1_bsr:
                            	  6696: ;	moveq	#1,d1
                            	  6697: ;	rts
                            	  6698: 
                            	  6699: ;op_bsr:
                            	  6700: ;	bsr			t1_bsr
                            	  6701: ;	bsr			t2_bsr
                            	  6702: ;	bsr.w		t3_bsr
                            	  6703: ;	bsr.w		t4_bsr
                            	  6704: ;	cmpi.l	#1,d1
                            	  6705: ;	bne			*
                            	  6706: ;	cmpi.l	#2,d2
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#3,d3
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#4,d4
                            	  6711: ;	bne			*
                            	  6712: ;	rts
                            	  6713: 
                            	  6714: ;t2_bsr:
                            	  6715: ;	moveq	#2,d2
                            	  6716: ;	rts
                            	  6717: 	
                            	  6718: ;t4_bsr:
                            	  6719: ;	moveq	#4,d4
                            	  6720: ;	rts
                            	  6721: *    END
                            	  6722:     
                            	  6723: 

Source: "boot.asm"
                            	   411: 
                            	   412: ; -----------------------------------------------------------------------------
                            	   413: ; Gets the screen color in d0 and d1.
                            	   414: ; -----------------------------------------------------------------------------
                            	   415: 
                            	   416: get_screen_color:
01:00003CB8 203900040084    	   417: 	move.l	fgColor,d0			; get foreground color
01:00003CBE EB80            	   418: 	asl.l		#5,d0						; shift into position
01:00003CC0 008040000000    	   419: 	ori.l		#$40000000,d0		; set priority
01:00003CC6 223900040088    	   420: 	move.l	bkColor,d1
01:00003CCC E089            	   421: 	lsr.l		#8,d1
01:00003CCE E089            	   422: 	lsr.l		#8,d1
01:00003CD0 02810000001F    	   423: 	andi.l	#31,d1					; mask off extra bits
01:00003CD6 8081            	   424: 	or.l		d1,d0						; set background color bits in upper long word
01:00003CD8 223900040088    	   425: 	move.l	bkColor,d1			; get background color
01:00003CDE E181            	   426: 	asl.l		#8,d1						; shift into position for display ram
01:00003CE0 E181            	   427: 	asl.l		#8,d1
01:00003CE2 4E75            	   428: 	rts
                            	   429: 
                            	   430: ; -----------------------------------------------------------------------------
                            	   431: ; -----------------------------------------------------------------------------
                            	   432: 
                            	   433: get_screen_address:
01:00003CE4 207900040004    	   434: 	move.l	TextScr,a0
01:00003CEA 4E75            	   435: 	rts
                            	   436: 	
                            	   437: ; -----------------------------------------------------------------------------
                            	   438: ; -----------------------------------------------------------------------------
                            	   439: 
                            	   440: clear_screen:
01:00003CEC 48E7E080        	   441: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003CF0 61F2            	   442: 	bsr			get_screen_address	; a0 = pointer to screen area
01:00003CF2 10390004008C    	   443: 	move.b	TextRows,d0					; d0 = rows
01:00003CF8 14390004008D    	   444: 	move.b	TextCols,d2					; d2 = cols
01:00003CFE 4880            	   445: 	ext.w		d0									; convert to word
01:00003D00 4882            	   446: 	ext.w		d2									; convert to word
01:00003D02 C4C0            	   447: 	mulu		d0,d2								; d2 = number of character cells to clear
01:00003D04 61B2            	   448: 	bsr			get_screen_color		; get the color bits
01:00003D06 00410020        	   449: 	ori.w		#32,d1							; load space character
01:00003D0A E159            	   450: 	rol.w		#8,d1								; swap endian, text controller expects little endian
01:00003D0C 4841            	   451: 	swap		d1
01:00003D0E E159            	   452: 	rol.w		#8,d1
01:00003D10 E158            	   453: 	rol.w		#8,d0								; swap endian
01:00003D12 4840            	   454: 	swap		d0
01:00003D14 E158            	   455: 	rol.w		#8,d0
                            	   456: loop3:
01:00003D16 20C1            	   457: 	move.l	d1,(a0)+						; copy char plus bkcolor to cell
01:00003D18 4E71            	   458: 	nop	
01:00003D1A 4E71            	   459: 	nop
01:00003D1C 4E71            	   460: 	nop	
01:00003D1E 4E71            	   461: 	nop
01:00003D20 4E71            	   462: 	nop	
01:00003D22 4E71            	   463: 	nop
01:00003D24 4E71            	   464: 	nop	
01:00003D26 4E71            	   465: 	nop
01:00003D28 20C0            	   466: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003D2A 4E71            	   467: 	nop
01:00003D2C 4E71            	   468: 	nop
01:00003D2E 4E71            	   469: 	nop	
01:00003D30 4E71            	   470: 	nop
01:00003D32 4E71            	   471: 	nop	
01:00003D34 4E71            	   472: 	nop
01:00003D36 4E71            	   473: 	nop	
01:00003D38 4E71            	   474: 	nop
01:00003D3A 51CAFFDA        	   475: 	dbra		d2,loop3
01:00003D3E 4CDF0107        	   476: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003D42 4E75            	   477: 	rts
                            	   478: 
                            	   479: CRLF:
01:00003D44 2F01            	   480: 	move.l	d1,-(a7)
01:00003D46 123C000D        	   481: 	move.b	#13,d1
01:00003D4A 6142            	   482: 	bsr			DisplayChar
01:00003D4C 123C000A        	   483: 	move.b	#10,d1
01:00003D50 613C            	   484: 	bsr			DisplayChar
01:00003D52 221F            	   485: 	move.l	(a7)+,d1
01:00003D54 4E75            	   486: 	rts
                            	   487: 
                            	   488: ;------------------------------------------------------------------------------
                            	   489: ;------------------------------------------------------------------------------
                            	   490: 
                            	   491: UpdateTextPos:
01:00003D56 103900040000    	   492: 	move.b	CursorRow,d0		; compute screen location
01:00003D5C 0240007F        	   493: 	andi.w	#$7f,d0
01:00003D60 14390004008D    	   494: 	move.b	TextCols,d2
01:00003D66 4882            	   495: 	ext.w		d2
01:00003D68 C0C2            	   496: 	mulu.w	d2,d0
01:00003D6A 2600            	   497: 	move.l	d0,d3
01:00003D6C 143900040001    	   498: 	move.b	CursorCol,d2
01:00003D72 024200FF        	   499: 	andi.w	#$ff,d2
01:00003D76 D042            	   500: 	add.w		d2,d0
01:00003D78 33C000040002    	   501: 	move.w	d0,TextPos			; save cursor pos
01:00003D7E 4E75            	   502: 	rts
                            	   503: 
                            	   504: ;------------------------------------------------------------------------------
                            	   505: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   506: ; Destroys d0,d2,a0
                            	   507: ;------------------------------------------------------------------------------
                            	   508: 
                            	   509: CalcScreenLoc:
01:00003D80 61D4            	   510: 	bsr			UpdateTextPos
01:00003D82 48C0            	   511: 	ext.l		d0								; make it into a long
01:00003D84 E780            	   512: 	asl.l		#3,d0							; 8 bytes per char
01:00003D86 6100FF5C        	   513: 	bsr			get_screen_address
01:00003D8A D1C0            	   514: 	add.l		d0,a0							; a0 = screen location
01:00003D8C 4E75            	   515: 	rts
                            	   516: 
                            	   517: ;------------------------------------------------------------------------------
                            	   518: ; Display a character on the screen
                            	   519: ; d1.b = char to display
                            	   520: ;------------------------------------------------------------------------------
                            	   521: 
                            	   522: DisplayChar:
01:00003D8E 48E77000        	   523: 	movem.l	d1/d2/d3,-(a7)
01:00003D92 4E7A2FE0        	   524: 	movec		coreno,d2
01:00003D96 0C020002        	   525: 	cmpi.b	#2,d2
01:00003D9A 4DD6            	   526: 	bne.s		.0001
                            	   527: ;	bsr			SerialPutChar
                            	   528: .0001:
01:00003D9C 0281000000FF    	   529: 	andi.l	#$ff,d1				; zero out upper bytes of d1
01:00003DA2 0C01000D        	   530: 	cmpi.b	#13,d1				; carriage return ?
01:00003DA6 6610            	   531: 	bne.s		dccr
01:00003DA8 423900040001    	   532: 	clr.b		CursorCol			; just set cursor column to zero on a CR
                            	   533: dcx14:
01:00003DAE 61000290        	   534: 	bsr			SyncCursor		; set position in text controller
                            	   535: dcx7:
01:00003DB2 4CDF000E        	   536: 	movem.l	(a7)+,d1/d2/d3
01:00003DB6 4E75            	   537: 	rts
                            	   538: dccr:
01:00003DB8 0C010091        	   539: 	cmpi.b	#$91,d1			; cursor right ?
01:00003DBC 6618            	   540: 	bne.s   dcx6
01:00003DBE 14390004008D    	   541: 	move.b	TextCols,d2
01:00003DC4 5302            	   542: 	sub.b		#1,d2
01:00003DC6 943900040001    	   543: 	sub.b		CursorCol,d2
01:00003DCC 67E4            	   544: 	beq.s		dcx7
01:00003DCE 523900040001    	   545: 	addi.b	#1,CursorCol
01:00003DD4 60D8            	   546: 	bra.s		dcx14
                            	   547: dcx6:
01:00003DD6 0C010090        	   548: 	cmpi.b	#$90,d1			; cursor up ?
01:00003DDA 6610            	   549: 	bne.s		dcx8
01:00003DDC 4A3900040000    	   550: 	cmpi.b	#0,CursorRow
01:00003DE2 67CE            	   551: 	beq.s		dcx7
01:00003DE4 533900040000    	   552: 	subi.b	#1,CursorRow
01:00003DEA 60C2            	   553: 	bra.s		dcx14
                            	   554: dcx8:
01:00003DEC 0C010093        	   555: 	cmpi.b	#$93,d1			; cursor left?
01:00003DF0 6610            	   556: 	bne.s		dcx9
01:00003DF2 4A3900040001    	   557: 	cmpi.b	#0,CursorCol
01:00003DF8 67B8            	   558: 	beq.s		dcx7
01:00003DFA 533900040001    	   559: 	subi.b	#1,CursorCol
01:00003E00 60AC            	   560: 	bra.s		dcx14
                            	   561: dcx9:
01:00003E02 0C010092        	   562: 	cmpi.b	#$92,d1			; cursor down ?
01:00003E06 6618            	   563: 	bne.s		dcx10
01:00003E08 14390004008C    	   564: 	move.b	TextRows,d2
01:00003E0E 5302            	   565: 	sub.b		#1,d2
01:00003E10 B43900040000    	   566: 	cmp.b		CursorRow,d2
01:00003E16 679A            	   567: 	beq.s		dcx7
01:00003E18 523900040000    	   568: 	addi.b	#1,CursorRow
01:00003E1E 608E            	   569: 	bra.s		dcx14
                            	   570: dcx10:
01:00003E20 0C010094        	   571: 	cmpi.b	#$94,d1			; cursor home ?
01:00003E24 661C            	   572: 	bne.s		dcx11
01:00003E26 4A3900040001    	   573: 	cmpi.b	#0,CursorCol
01:00003E2C 670A            	   574: 	beq.s		dcx12
01:00003E2E 423900040001    	   575: 	clr.b		CursorCol
01:00003E34 6000FF78        	   576: 	bra			dcx14
                            	   577: dcx12:
01:00003E38 423900040000    	   578: 	clr.b		CursorRow
01:00003E3E 6000FF6E        	   579: 	bra			dcx14
                            	   580: dcx11:
01:00003E42 48E7E080        	   581: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003E46 0C010099        	   582: 	cmpi.b	#$99,d1			; delete ?
01:00003E4A 675C            	   583: 	beq.s		doDelete
01:00003E4C 0C010008        	   584: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003E50 6748            	   585: 	beq.s   doBackspace
01:00003E52 0C010018        	   586: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003E56 6700008C        	   587: 	beq			doCtrlX
01:00003E5A 0C01000A        	   588: 	cmpi.b	#10,d1		; linefeed ?
01:00003E5E 6728            	   589: 	beq.s		dclf
                            	   590: 
                            	   591: 	; regular char
01:00003E60 6100FF1E        	   592: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003E64 2401            	   593: 	move.l	d1,d2					; d2 = char
01:00003E66 6100FE50        	   594: 	bsr			get_screen_color	; d0,d1 = color
01:00003E6A 8282            	   595: 	or.l		d2,d1					; d1 = char + color
01:00003E6C E159            	   596: 	rol.w		#8,d1					; text controller expects little endian data
01:00003E6E 4841            	   597: 	swap		d1
01:00003E70 E159            	   598: 	rol.w		#8,d1
01:00003E72 2081            	   599: 	move.l	d1,(a0)
01:00003E74 E158            	   600: 	rol.w		#8,d0					; swap bytes
01:00003E76 4840            	   601: 	swap		d0						; swap halfs
01:00003E78 E158            	   602: 	rol.w		#8,d0					; swap remaining bytes
01:00003E7A 21400004        	   603: 	move.l	d0,4(a0)
01:00003E7E 61000088        	   604: 	bsr			IncCursorPos
01:00003E82 610001BC        	   605: 	bsr			SyncCursor
01:00003E86 6008            	   606: 	bra			dcx4
                            	   607: dclf:
01:00003E88 6100009E        	   608: 	bsr			IncCursorRow
                            	   609: dcx16:
01:00003E8C 610001B2        	   610: 	bsr			SyncCursor
                            	   611: dcx4:
01:00003E90 4CDF0107        	   612: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003E94 4CDF000E        	   613: 	movem.l	(a7)+,d1/d2/d3
01:00003E98 4E75            	   614: 	rts
                            	   615: 
                            	   616: 	;---------------------------
                            	   617: 	; CTRL-H: backspace
                            	   618: 	;---------------------------
                            	   619: doBackspace:
01:00003E9A 4A3900040001    	   620: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003EA0 67EE            	   621: 	beq.s   dcx4						; nothing to do
01:00003EA2 533900040001    	   622: 	subi.b	#1,CursorCol		; decrement column
                            	   623: 
                            	   624: 	;---------------------------
                            	   625: 	; Delete key
                            	   626: 	;---------------------------
                            	   627: doDelete:
01:00003EA8 48E7C080        	   628: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003EAC 6100FED2        	   629: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003EB0 103900040001    	   630: 	move.b	CursorCol,d0
                            	   631: .0001:
01:00003EB6 20A80008        	   632: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003EBA 2168000C0004    	   633: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003EC0 5088            	   634: 	lea			8(a0),a0
01:00003EC2 5200            	   635: 	addi.b	#1,d0
01:00003EC4 B0390004008D    	   636: 	cmp.b		TextCols,d0
01:00003ECA 65EA            	   637: 	blo.s		.0001
01:00003ECC 6100FDEA        	   638: 	bsr			get_screen_color
01:00003ED0 323C0020        	   639: 	move.w	#' ',d1				; terminate line with a space
01:00003ED4 E159            	   640: 	rol.w		#8,d1
01:00003ED6 4841            	   641: 	swap		d1
01:00003ED8 E159            	   642: 	rol.w		#8,d1
01:00003EDA 2141FFF8        	   643: 	move.l	d1,-8(a0)
01:00003EDE 4CDF0103        	   644: 	movem.l	(a7)+,d0/d1/a0
01:00003EE2 60A8            	   645: 	bra.s		dcx16				; finished
                            	   646: 
                            	   647: 	;---------------------------
                            	   648: 	; CTRL-X: erase line
                            	   649: 	;---------------------------
                            	   650: doCtrlX:
01:00003EE4 423900040001    	   651: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003EEA 10390004008D    	   652: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003EF0 4880            	   653: 	ext.w		d0
01:00003EF2 48C0            	   654: 	ext.l		d0
01:00003EF4 123C0020        	   655: 	move.b	#' ',d1				; d1 = space char
                            	   656: .0001:
                            	   657: 	; DisplayChar is called recursively here
                            	   658: 	; It's safe to do because we know it won't recurse again due to the
                            	   659: 	; fact we know the character being displayed is a space char
01:00003EF8 6100FE94        	   660: 	bsr		DisplayChar			
01:00003EFC 5340            	   661: 	subq	#1,d0
01:00003EFE 66F8            	   662: 	bne.s	.0001
01:00003F00 423900040001    	   663: 	clr.b	CursorCol			; now really go back to start of line
01:00003F06 6084            	   664: 	bra.s	dcx16				; we're done
                            	   665: 
                            	   666: ;------------------------------------------------------------------------------
                            	   667: ; Increment the cursor position, scroll the screen if needed.
                            	   668: ;------------------------------------------------------------------------------
                            	   669: 
                            	   670: IncCursorPos:
01:00003F08 527900040002    	   671: 	addi.w	#1,TextCurpos
01:00003F0E 523900040001    	   672: 	addi.b	#1,CursorCol
01:00003F14 10390004008D    	   673: 	move.b	TextCols,d0
01:00003F1A B03900040001    	   674: 	cmp.b		CursorCol,d0
01:00003F20 6438            	   675: 	bhs.s		icc1
01:00003F22 423900040001    	   676: 	clr.b		CursorCol
                            	   677: IncCursorRow:
01:00003F28 523900040000    	   678: 	addi.b	#1,CursorRow
01:00003F2E 10390004008C    	   679: 	move.b	TextRows,d0
01:00003F34 B03900040000    	   680: 	cmp.b		CursorRow,d0
01:00003F3A 621E            	   681: 	bhi.s		icc1
01:00003F3C 10390004008C    	   682: 	move.b	TextRows,d0
01:00003F42 13C000040000    	   683: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003F48 533900040000    	   684: 	subi.b	#1,CursorRow
01:00003F4E 4880            	   685: 	ext.w		d0
01:00003F50 D040            	   686: 	asl.w		#1,d0
01:00003F52 917900040002    	   687: 	sub.w		d0,TextCurpos
01:00003F58 6102            	   688: 	bsr			ScrollUp
                            	   689: icc1:
01:00003F5A 4E75            	   690: 	rts
                            	   691: 
                            	   692: ;------------------------------------------------------------------------------
                            	   693: ; Scroll screen up.
                            	   694: ;------------------------------------------------------------------------------
                            	   695: 
                            	   696: ScrollUp:
01:00003F5C 48E7C084        	   697: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
01:00003F60 6100FD82        	   698: 	bsr			get_screen_address
01:00003F64 2A48            	   699: 	move.l	a0,a5								; a5 = pointer to text screen
                            	   700: .0003:								
01:00003F66 10390004008D    	   701: 	move.b	TextCols,d0					; d0 = columns
01:00003F6C 12390004008C    	   702: 	move.b	TextRows,d1					; d1 = rows
01:00003F72 4880            	   703: 	ext.w		d0									; make cols into a word value
01:00003F74 4881            	   704: 	ext.w		d1									; make rows into a word value
01:00003F76 E740            	   705: 	asl.w		#3,d0								; make into cell index
01:00003F78 41F50000        	   706: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
01:00003F7C E648            	   707: 	lsr.w		#3,d0								; get back d0
01:00003F7E 5341            	   708: 	subq		#1,d1								; number of rows-1
01:00003F80 C0C1            	   709: 	mulu		d1,d0								; d0 = count of characters to move
                            	   710: .0001:
01:00003F82 2AD8            	   711: 	move.l	(a0)+,(a5)+					; each char is 64 bits
01:00003F84 4E71            	   712: 	nop
01:00003F86 4E71            	   713: 	nop
01:00003F88 2AD8            	   714: 	move.l	(a0)+,(a5)+	
01:00003F8A 4E71            	   715: 	nop
01:00003F8C 4E71            	   716: 	nop
01:00003F8E 51C8FFF2        	   717: 	dbra		d0,.0001
01:00003F92 4CDF2103        	   718: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   719: 	; Fall through into blanking out last line
                            	   720: 
                            	   721: ;------------------------------------------------------------------------------
                            	   722: ; Blank out the last line on the screen.
                            	   723: ;------------------------------------------------------------------------------
                            	   724: 
                            	   725: BlankLastLine:
01:00003F96 48E7E080        	   726: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003F9A 6100FD48        	   727: 	bsr			get_screen_address
01:00003F9E 10390004008C    	   728: 	move.b	TextRows,d0					; d0 = columns
01:00003FA4 12390004008D    	   729: 	move.b	TextCols,d1					; d1 = rows
01:00003FAA 4880            	   730: 	ext.w		d0
01:00003FAC 4881            	   731: 	ext.w		d1
01:00003FAE 5341            	   732: 	subq		#1,d1								; last row = #rows-1
01:00003FB0 C0C1            	   733: 	mulu		d1,d0								; d0 = index of last line
01:00003FB2 E740            	   734: 	asl.w		#3,d0								; *8 bytes per char
01:00003FB4 41F00000        	   735: 	lea			(a0,d0.w),a0				; point a0 to last row
01:00003FB8 14390004008D    	   736: 	move.b	TextCols,d2					; number of text cells to clear
01:00003FBE 4882            	   737: 	ext.w		d2
01:00003FC0 5342            	   738: 	subi.w	#1,d2								; count must be one less than desired
01:00003FC2 6100FCF4        	   739: 	bsr			get_screen_color		; d0,d1 = screen color
01:00003FC6 323C0020        	   740: 	move.w	#32,d1							; set the character for display in low 16 bits
01:00003FCA E159            	   741: 	rol.w		#8,d1								; reverse the byte order
01:00003FCC 4841            	   742: 	swap		d1
01:00003FCE E159            	   743: 	rol.w		#8,d1
01:00003FD0 E158            	   744: 	rol.w		#8,d0
01:00003FD2 4840            	   745: 	swap		d0
01:00003FD4 E158            	   746: 	rol.w		#8,d0
                            	   747: .0001:
01:00003FD6 20C0            	   748: 	move.l	d0,(a0)+
01:00003FD8 4E71            	   749: 	nop
01:00003FDA 4E71            	   750: 	nop
01:00003FDC 20C1            	   751: 	move.l	d1,(a0)+
01:00003FDE 4E71            	   752: 	nop
01:00003FE0 4E71            	   753: 	nop
01:00003FE2 51CAFFF2        	   754: 	dbra		d2,.0001
01:00003FE6 4CDF0107        	   755: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003FEA 4E75            	   756: 	rts
                            	   757: 
                            	   758: ;------------------------------------------------------------------------------
                            	   759: ; Display a string on the screen.
                            	   760: ;------------------------------------------------------------------------------
                            	   761: 
                            	   762: DisplayString:
01:00003FEC 48E7C040        	   763: 	movem.l	d0/d1/a1,-(a7)
                            	   764: dspj1:
01:00003FF0 7200            	   765: 	clr.l		d1						; clear upper bits of d1
01:00003FF2 1219            	   766: 	move.b	(a1)+,d1			; move string char into d1
01:00003FF4 6706            	   767: 	beq.s		dsret					; is it end of string ?
01:00003FF6 6100FD96        	   768: 	bsr			DisplayChar		; display character
01:00003FFA 60F4            	   769: 	bra.s		dspj1					; go back for next character
                            	   770: dsret:
01:00003FFC 4CDF0203        	   771: 	movem.l	(a7)+,d0/d1/a1
01:00004000 4E75            	   772: 	rts
                            	   773: 
                            	   774: ;------------------------------------------------------------------------------
                            	   775: ; Display a string on the screen followed by carriage return / linefeed.
                            	   776: ;------------------------------------------------------------------------------
                            	   777: 
                            	   778: DisplayStringCRLF:
01:00004002 61E8            	   779: 	bsr		DisplayString
01:00004004 6000FD3E        	   780: 	bra		CRLF
                            	   781: 
                            	   782: ;------------------------------------------------------------------------------
                            	   783: ; Display a string on the screen limited to 255 chars max.
                            	   784: ;------------------------------------------------------------------------------
                            	   785: 
                            	   786: DisplayStringLimited:
01:00004008 48E7E040        	   787: 	movem.l	d0/d1/d2/a1,-(a7)
01:0000400C 3401            	   788: 	move.w	d1,d2					; d2 = max count
01:0000400E 024200FF        	   789: 	andi.w	#$00FF,d2			; limit to 255 chars
01:00004012 600A            	   790: 	bra.s		.0003					; enter loop at bottom
                            	   791: .0001:
01:00004014 7200            	   792: 	clr.l		d1						; clear upper bits of d1
01:00004016 1219            	   793: 	move.b	(a1)+,d1			; move string char into d1
01:00004018 6708            	   794: 	beq.s		.0002					; is it end of string ?
01:0000401A 6100FD72        	   795: 	bsr			DisplayChar		; display character
                            	   796: .0003:
01:0000401E 51CAFFF4        	   797: 	dbra		d2,.0001			; go back for next character
                            	   798: .0002:
01:00004022 4CDF0207        	   799: 	movem.l	(a7)+,d0/d1/d2/a1
01:00004026 4E75            	   800: 	rts
                            	   801: 
                            	   802: DisplayStringLimitedCRLF:
01:00004028 61DE            	   803: 	bsr		DisplayStringLimited
01:0000402A 6000FD18        	   804: 	bra		CRLF
                            	   805: 	
                            	   806: ;------------------------------------------------------------------------------
                            	   807: ; Set cursor position to top left of screen.
                            	   808: ;
                            	   809: ; Parameters:
                            	   810: ;		<none>
                            	   811: ; Returns:
                            	   812: ;		<none>
                            	   813: ; Registers Affected:
                            	   814: ;		<none>
                            	   815: ;------------------------------------------------------------------------------
                            	   816: 
                            	   817: HomeCursor:
01:0000402E 423900040000    	   818: 	clr.b		CursorRow
01:00004034 423900040001    	   819: 	clr.b		CursorCol
01:0000403A 427900040002    	   820: 	clr.w		TextPos
                            	   821: 	; fall through
                            	   822: 
                            	   823: ;------------------------------------------------------------------------------
                            	   824: ; SyncCursor:
                            	   825: ;
                            	   826: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   827: ; the core with the IO focus.
                            	   828: ;
                            	   829: ; Parameters:
                            	   830: ;		<none>
                            	   831: ; Returns:
                            	   832: ;		<none>
                            	   833: ; Registers Affected:
                            	   834: ;		<none>
                            	   835: ;------------------------------------------------------------------------------
                            	   836: 
                            	   837: SyncCursor:
01:00004040 48E7A000        	   838: 	movem.l	d0/d2,-(a7)
01:00004044 6100FD10        	   839: 	bsr			UpdateTextPos
01:00004048 4E7A2FE0        	   840: 	movec		coreno,d2
01:0000404C B43900100000    	   841: 	cmp.b		IOFocus,d2
01:00004052 6610            	   842: 	bne.s		.0001
01:00004054 5542            	   843: 	subi.w	#2,d2						; factor in location of screen in controller
01:00004056 C4FC0800        	   844: 	mulu		#2048,d2				; 2048 cells per screen
01:0000405A D042            	   845: 	add.w		d2,d0
01:0000405C E158            	   846: 	rol.w		#8,d0						; swap byte order
01:0000405E 33C0FD03FF24    	   847: 	move.w	d0,TEXTREG+$24
                            	   848: .0001:	
01:00004064 4CDF0005        	   849: 	movem.l	(a7)+,d0/d2
01:00004068 4E75            	   850: 	rts
                            	   851: 
                            	   852: ;==============================================================================
                            	   853: ; TRAP #15 handler
                            	   854: ;
                            	   855: ; Parameters:
                            	   856: ;		d0.w = function number to perform
                            	   857: ;==============================================================================
                            	   858: 
                            	   859: TRAP15:
01:0000406A 48E78080        	   860: 	movem.l	d0/a0,-(a7)
01:0000406E 41FA0010        	   861: 	lea			T15DispatchTable,a0
01:00004072 E580            	   862: 	asl.l		#2,d0
01:00004074 20700000        	   863: 	move.l	(a0,d0.w),a0
01:00004078 4E90            	   864: 	jsr			(a0)
01:0000407A 4CDF0101        	   865: 	movem.l	(a7)+,d0/a0
01:0000407E 4E73            	   866: 	rte
                            	   867: 
                            	   868: 		align	2
                            	   869: T15DispatchTable:
01:00004080 00004028        	   870: 	dc.l	DisplayStringLimitedCRLF
01:00004084 00004008        	   871: 	dc.l	DisplayStringLimited
01:00004088 00004156        	   872: 	dc.l	StubRout
01:0000408C 00004156        	   873: 	dc.l	StubRout
01:00004090 00004156        	   874: 	dc.l	StubRout
01:00004094 00004244        	   875: 	dc.l	GetKey
01:00004098 00003D8E        	   876: 	dc.l	DisplayChar
01:0000409C 00004238        	   877: 	dc.l	CheckForKey
01:000040A0 00004156        	   878: 	dc.l	StubRout
01:000040A4 00004156        	   879: 	dc.l	StubRout
                            	   880: 	; 10
01:000040A8 00004156        	   881: 	dc.l	StubRout
01:000040AC 00004120        	   882: 	dc.l	Cursor1
01:000040B0 00004230        	   883: 	dc.l	SetKeyboardEcho
01:000040B4 00004002        	   884: 	dc.l	DisplayStringCRLF
01:000040B8 00003FEC        	   885: 	dc.l	DisplayString
01:000040BC 00004156        	   886: 	dc.l	StubRout
01:000040C0 00004156        	   887: 	dc.l	StubRout
01:000040C4 00004156        	   888: 	dc.l	StubRout
01:000040C8 00004156        	   889: 	dc.l	StubRout
01:000040CC 00004156        	   890: 	dc.l	StubRout
                            	   891: 	; 20
01:000040D0 00004156        	   892: 	dc.l	StubRout
01:000040D4 00004156        	   893: 	dc.l	StubRout
01:000040D8 00004156        	   894: 	dc.l	StubRout
01:000040DC 00004156        	   895: 	dc.l	StubRout
01:000040E0 00004156        	   896: 	dc.l	StubRout
01:000040E4 00004156        	   897: 	dc.l	StubRout
01:000040E8 00004156        	   898: 	dc.l	StubRout
01:000040EC 00004156        	   899: 	dc.l	StubRout
01:000040F0 00004156        	   900: 	dc.l	StubRout
01:000040F4 00004156        	   901: 	dc.l	StubRout
                            	   902: 	; 30
01:000040F8 00004156        	   903: 	dc.l	StubRout
01:000040FC 00004156        	   904: 	dc.l	StubRout
01:00004100 0000416A        	   905: 	dc.l	rotate_iofocus
01:00004104 00005092        	   906: 	dc.l	SerialPeekCharDirect
01:00004108 000050B6        	   907: 	dc.l	SerialPutChar
01:0000410C 00005074        	   908: 	dc.l	SerialPeekChar
01:00004110 00005024        	   909: 	dc.l	SerialGetChar
01:00004114 00004156        	   910: 	dc.l	StubRout
01:00004118 00004156        	   911: 	dc.l	StubRout
01:0000411C 00004156        	   912: 	dc.l	StubRout
                            	   913: 
                            	   914: ;------------------------------------------------------------------------------
                            	   915: ; Cursor positioning / Clear screen
                            	   916: ; - out of range settings are ignored
                            	   917: ;
                            	   918: ; Parameters:
                            	   919: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	   920: ;	Returns:
                            	   921: ;		none
                            	   922: ;------------------------------------------------------------------------------
                            	   923: 
                            	   924: Cursor1:
01:00004120 2F01            	   925: 	move.l		d1,-(a7)
01:00004122 0C41FF00        	   926: 	cmpi.w		#$FF00,d1
01:00004126 6608            	   927: 	bne.s			.0002
01:00004128 6100FBC2        	   928: 	bsr				clear_screen
01:0000412C 6000FF00        	   929: 	bra				HomeCursor
                            	   930: .0002:
01:00004130 B2390004008C    	   931: 	cmp.b			TextRows,d1		; if cursor pos out of range, ignore setting
01:00004136 6406            	   932: 	bhs.s			.0003
01:00004138 13C100040000    	   933: 	move.b		d1,CursorRow
                            	   934: .0003:
01:0000413E E059            	   935: 	ror.w			#8,d1
01:00004140 B2390004008D    	   936: 	cmp.b			TextCols,d1
01:00004146 6406            	   937: 	bhs.s			.0001
01:00004148 13C100040001    	   938: 	move.b		d1,CursorCol
                            	   939: .0001:
01:0000414E 6100FEF0        	   940: 	bsr				SyncCursor		; update hardware cursor
01:00004152 221F            	   941: 	move.l		(a7)+,d1
01:00004154 4E75            	   942: 	rts
                            	   943: 
                            	   944: ;------------------------------------------------------------------------------
                            	   945: ; Stub routine for unimplemented functionality.
                            	   946: ;------------------------------------------------------------------------------
                            	   947: 
                            	   948: StubRout:
01:00004156 4E75            	   949: 	rts
                            	   950: 
                            	   951: ;------------------------------------------------------------------------------
                            	   952: ; Select a specific IO focus.
                            	   953: ;------------------------------------------------------------------------------
                            	   954: 
                            	   955: select_iofocus:
01:00004158 0C010002        	   956: 	cmpi.b	#2,d1
01:0000415C 650A            	   957: 	blo.s		.0001
01:0000415E 0C010009        	   958: 	cmpi.b	#9,d1
01:00004162 6204            	   959: 	bhi.s		.0001
01:00004164 2001            	   960: 	move.l	d1,d0
01:00004166 6014            	   961: 	bra.s		select_focus1
                            	   962: .0001:
01:00004168 4E75            	   963: 	rts
                            	   964: 
                            	   965: ;------------------------------------------------------------------------------
                            	   966: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	   967: ;
                            	   968: ; Modifies:
                            	   969: ;		d0, IOFocus BIOS variable
                            	   970: ;------------------------------------------------------------------------------
                            	   971: 
                            	   972: rotate_iofocus:
01:0000416A 103900100000    	   973: 	move.b	IOFocus,d0				; d0 = focus, we can trash d0
01:00004170 5200            	   974: 	add.b		#1,d0							; increment the focus
01:00004172 B03C0009        	   975: 	cmp.b		#9,d0							; limit to 2 to 9
01:00004176 6304            	   976: 	bls.s		.0001
01:00004178 103C0002        	   977: 	move.b	#2,d0
                            	   978: .0001:
                            	   979: select_focus1:
01:0000417C 13C000100000    	   980: 	move.b	d0,IOFocus				; set IO focus
01:00004182 5500            	   981: 	subi.b	#2,d0							; screen is 0 to 7, focus is 2 to 9
01:00004184 4880            	   982: 	ext.w		d0								; make into long value
01:00004186 C0FC0800        	   983: 	mulu		#2048,d0					; * 2048	cells per screen
01:0000418A E158            	   984: 	rol.w		#8,d0							; swap byte order
01:0000418C 33C0FD03FF28    	   985: 	move.w	d0,TEXTREG+$28		; update screen address in text controller
01:00004192 6000FEAC        	   986: 	bra			SyncCursor				; set cursor position
                            	   987: 
                            	   988: ;==============================================================================
                            	   989: ; PLIC - platform level interrupt controller
                            	   990: ;
                            	   991: ; Register layout:
                            	   992: ;   bits 0 to 7  = cause code to issue
                            	   993: ;   bits 8 to 11 = irq level to issue
                            	   994: ;   bit 16 = irq enable
                            	   995: ;   bit 17 = edge sensitivity
                            	   996: ;		bit 24 to 29 target core
                            	   997: ;
                            	   998: ; Note byte order must be reversed for PLIC.
                            	   999: ;==============================================================================
                            	  1000: 
                            	  1001: init_plic:
01:00004196 41F9FD090000    	  1002: 	lea		PLIC,a0						; a0 points to PLIC
01:0000419C 43E800F4        	  1003: 	lea		$80+4*29(a0),a1		; point to timer registers (29)
01:000041A0 22BC00060302    	  1004: 	move.l	#$00060302,(a1)	; initialize, core=2,edge sensitive,enabled,irq6
01:000041A6 5889            	  1005: 	lea			4(a1),a1				; point to keyboard registers (30)
01:000041A8 22BC00060102    	  1006: 	move.l	#$00060102,(a1)	; initialize, core=2,level sensitive,enabled,irq6
01:000041AE 5889            	  1007: 	lea			4(a1),a1				; point to nmi button register (31)
01:000041B0 22BC00070302    	  1008: 	move.l	#$00070302,(a1)	; initialize, core=2,edge sensitive,enabled,irq7
01:000041B6 43E800C0        	  1009: 	lea		$80+4*16(a0),a1		; a1 points to ACIA register
01:000041BA 22BC00030102    	  1010: 	move.l	#$00030102,(a1)	; core=2,level sensitive,enabled,irq3	
01:000041C0 4E75            	  1011: 	rts
                            	  1012: 
                            	  1013: ;==============================================================================
                            	  1014: ; Keyboard stuff
                            	  1015: ;
                            	  1016: ; KeyState2_
                            	  1017: ; 876543210
                            	  1018: ; ||||||||+ = shift
                            	  1019: ; |||||||+- = alt
                            	  1020: ; ||||||+-- = control
                            	  1021: ; |||||+--- = numlock
                            	  1022: ; ||||+---- = capslock
                            	  1023: ; |||+----- = scrolllock
                            	  1024: ; ||+------ =
                            	  1025: ; |+------- = 
                            	  1026: ; +-------- = extended
                            	  1027: ;
                            	  1028: ;==============================================================================
                            	  1029: 
                            	  1030: _KeybdInit:
01:000041C2 42390010000F    	  1031: 	clr.b	_KeyState1
01:000041C8 423900100010    	  1032: 	clr.b	_KeyState2
01:000041CE 4E75            	  1033: 	rts
                            	  1034: 
                            	  1035: _KeybdGetStatus:
01:000041D0 7200            	  1036: 	moveq		#0,d1
01:000041D2 1239FD0FFE01    	  1037: 	move.b	KEYBD+1,d1
01:000041D8 4E75            	  1038: 	rts
                            	  1039: 
                            	  1040: ; Get the scancode from the keyboard port
                            	  1041: 
                            	  1042: _KeybdGetScancode:
01:000041DA 7200            	  1043: 	moveq		#0,d1
01:000041DC 1239FD0FFE00    	  1044: 	move.b	KEYBD,d1				* get the scan code
01:000041E2 4239FD0FFE01    	  1045: 	move.b	#0,KEYBD+1			* clear receive register
01:000041E8 4E75            	  1046: 	rts
                            	  1047: 
                            	  1048: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	  1049: ; keyboard in order to wait for a response.
                            	  1050: ;
                            	  1051: KeybdRecvByte:
01:000041EA 2F03            	  1052: 	move.l	d3,-(a7)
01:000041EC 363C0064        	  1053: 	move.w	#100,d3		; wait up to 1s
                            	  1054: .0003:
01:000041F0 61DE            	  1055: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:000041F2 4A01            	  1056: 	tst.b	d1
01:000041F4 6B0E            	  1057: 	bmi		.0004		; is input buffer full ? yes, branch
01:000041F6 61000318        	  1058: 	bsr		Wait10ms		; wait a bit
01:000041FA 51CBFFF4        	  1059: 	dbra	d3,.0003	; go back and try again
01:000041FE 261F            	  1060: 	move.l	(a7)+,d3
01:00004200 72FF            	  1061: 	moveq	#-1,d1			; return -1
01:00004202 4E75            	  1062: 	rts
                            	  1063: .0004:
01:00004204 61D4            	  1064: 	bsr		_KeybdGetScancode
01:00004206 261F            	  1065: 	move.l	(a7)+,d3
01:00004208 4E75            	  1066: 	rts
                            	  1067: 
                            	  1068: 
                            	  1069: ; Wait until the keyboard transmit is complete
                            	  1070: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	  1071: ;
                            	  1072: KeybdWaitTx:
01:0000420A 48E73000        	  1073: 	movem.l	d2/d3,-(a7)
01:0000420E 7664            	  1074: 	moveq	#100,d3		; wait a max of 1s
                            	  1075: .0001:
01:00004210 61BE            	  1076: 	bsr		_KeybdGetStatus
01:00004212 08010006        	  1077: 	btst	#6,d1		; check for transmit complete bit
01:00004216 6610            	  1078: 	bne	    .0002		; branch if bit set
01:00004218 610002F6        	  1079: 	bsr		Wait10ms		; delay a little bit
01:0000421C 51CBFFF2        	  1080: 	dbra	d3,.0001	; go back and try again
01:00004220 4CDF000C        	  1081: 	movem.l	(a7)+,d2/d3
01:00004224 72FF            	  1082: 	moveq	#-1,d1		; return -1
01:00004226 4E75            	  1083: 	rts
                            	  1084: .0002:
01:00004228 4CDF000C        	  1085: 	movem.l	(a7)+,d2/d3
01:0000422C 7200            	  1086: 	moveq	#0,d1		; return 0
01:0000422E 4E75            	  1087: 	rts
                            	  1088: 
                            	  1089: ;------------------------------------------------------------------------------
                            	  1090: ; d1.b 0=echo off, non-zero = echo on
                            	  1091: ;------------------------------------------------------------------------------
                            	  1092: 
                            	  1093: SetKeyboardEcho:
01:00004230 13C10004000C    	  1094: 	move.b	d1,KeybdEcho
01:00004236 4E75            	  1095: 	rts
                            	  1096: 
                            	  1097: ;------------------------------------------------------------------------------
                            	  1098: ; Get key pending status into d1.b
                            	  1099: ;
                            	  1100: ; Returns:
                            	  1101: ;		d1.b = 1 if a key is available, otherwise zero.
                            	  1102: ;------------------------------------------------------------------------------
                            	  1103: 
                            	  1104: CheckForKey:
01:00004238 7200            	  1105: 	moveq.l	#0,d1					; clear high order bits
                            	  1106: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	  1107: ;	smi.b		d1						; set true/false
                            	  1108: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
01:0000423A 4A3900100013    	  1109: 	tst.b		_KeybdCnt
01:00004240 56C1            	  1110: 	sne.b		d1
01:00004242 4E75            	  1111: 	rts
                            	  1112: 
                            	  1113: ;------------------------------------------------------------------------------
                            	  1114: ; GetKey
                            	  1115: ; 	Get a character from the keyboard. 
                            	  1116: ;
                            	  1117: ; Modifies:
                            	  1118: ;		d1
                            	  1119: ; Returns:
                            	  1120: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	  1121: ;------------------------------------------------------------------------------
                            	  1122: 
                            	  1123: GetKey:
01:00004244 2F00            	  1124: 	move.l	d0,-(a7)					; push d0
01:00004246 123900100000    	  1125: 	move.b	IOFocus,d1				; Check if the core has the IO focus
01:0000424C 4E7A0FE0        	  1126: 	movec.l	coreno,d0
01:00004250 B200            	  1127: 	cmp.b		d0,d1
01:00004252 6624            	  1128: 	bne.s		.0004							; go return no key available, if not in focus
01:00004254 6134            	  1129: 	bsr			KeybdGetCharNoWait	; get a character
01:00004256 0C0100FF        	  1130: 	cmpi.b	#-1,d1						; was a key available?
01:0000425A 671C            	  1131: 	beq.s		.0004
01:0000425C 4A390004000C    	  1132: 	tst.b		KeybdEcho					; is keyboard echo on ?
01:00004262 6710            	  1133: 	beq.s		.0003							; no echo, just return the key
01:00004264 0C01000D        	  1134: 	cmpi.b	#CR,d1						; convert CR keystroke into CRLF
01:00004268 6606            	  1135: 	bne.s		.0005
01:0000426A 6100FAD8        	  1136: 	bsr			CRLF
01:0000426E 6004            	  1137: 	bra.s		.0003
                            	  1138: .0005:
01:00004270 6100FB1C        	  1139: 	bsr			DisplayChar
                            	  1140: .0003:
01:00004274 201F            	  1141: 	move.l	(a7)+,d0					; pop d0
01:00004276 4E75            	  1142: 	rts												; return key
                            	  1143: ; Return -1 indicating no char was available
                            	  1144: .0004:
01:00004278 201F            	  1145: 	move.l	(a7)+,d0					; pop d0
01:0000427A 72FF            	  1146: 	moveq		#-1,d1						; return no key available
01:0000427C 4E75            	  1147: 	rts
                            	  1148: 
                            	  1149: CheckForCtrlC:
01:0000427E 610A            	  1150: 	bsr			KeybdGetCharNoWait
01:00004280 B23C0003        	  1151: 	cmp.b		#CTRLC,d1
01:00004284 670005B0        	  1152: 	beq			Monitor
01:00004288 4E75            	  1153: 	rts
                            	  1154: 
                            	  1155: ;------------------------------------------------------------------------------
                            	  1156: ;------------------------------------------------------------------------------
                            	  1157: 
                            	  1158: KeybdGetCharNoWait:
01:0000428A 42390004000D    	  1159: 	clr.b	KeybdWaitFlag
01:00004290 6008            	  1160: 	bra		KeybdGetChar
                            	  1161: 
                            	  1162: KeybdGetCharWait:
01:00004292 13FC00FF0004000D	  1163: 	move.b	#-1,KeybdWaitFlag
                            	  1164: 
                            	  1165: KeybdGetChar:
01:0000429A 48E73080        	  1166: 	movem.l	d2/d3/a0,-(a7)
                            	  1167: .0003:
01:0000429E 7201            	  1168: 	moveq		#1,d1
                            	  1169: ;	bsr			LockSemaphore
01:000042A0 143900100013    	  1170: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
01:000042A6 6738            	  1171: 	beq.s		.0015						;
01:000042A8 143900100011    	  1172: 	move.b	_KeybdHead,d2		; d2 = buffer head
01:000042AE 4882            	  1173: 	ext.w		d2
01:000042B0 41F900100020    	  1174: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
01:000042B6 7200            	  1175: 	clr.l		d1
01:000042B8 12302000        	  1176: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
01:000042BC 5202            	  1177: 	addi.b	#1,d2						; increment keyboard head index
01:000042BE 0202001F        	  1178: 	andi.b	#31,d2					; and wrap around at buffer size
01:000042C2 13C200100011    	  1179: 	move.b	d2,_KeybdHead
01:000042C8 533900100013    	  1180: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
01:000042CE C342            	  1181: 	exg			d1,d2						; save scancode value in d2
01:000042D0 7201            	  1182: 	moveq		#1,d1
01:000042D2 6100BE66        	  1183: 	bsr			UnlockSemaphore
01:000042D6 C541            	  1184: 	exg			d2,d1						; restore scancode value
01:000042D8 6020            	  1185: 	bra			.0001						; go process scan code
                            	  1186: .0014:
01:000042DA 6100FEF4        	  1187: 	bsr		_KeybdGetStatus		; check keyboard status for key available
01:000042DE 6B16            	  1188: 	bmi		.0006							; yes, go process
                            	  1189: .0015:
01:000042E0 7201            	  1190: 	moveq	#1,d1
01:000042E2 6100BE56        	  1191: 	bsr		UnlockSemaphore
01:000042E6 4A390004000D    	  1192: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:000042EC 6BB0            	  1193: 	bmi		.0003							; yes, branch back
01:000042EE 4CDF010C        	  1194: 	movem.l	(a7)+,d2/d3/a0
01:000042F2 72FF            	  1195: 	moveq	#-1,d1						; flag no char available
01:000042F4 4E75            	  1196: 	rts
                            	  1197: .0006:
01:000042F6 6100FEE2        	  1198: 	bsr		_KeybdGetScancode
                            	  1199: .0001:
01:000042FA 33FC0001FD0FFF00	  1200: 	move.w	#1,leds
01:00004302 B23C00F0        	  1201: 	cmp.b	#SC_KEYUP,d1
01:00004306 670000C0        	  1202: 	beq		.doKeyup
01:0000430A B23C00E0        	  1203: 	cmp.b	#SC_EXTEND,d1
01:0000430E 670000C4        	  1204: 	beq		.doExtend
01:00004312 B23C0014        	  1205: 	cmp.b	#SC_CTRL,d1
01:00004316 670000C8        	  1206: 	beq		.doCtrl
01:0000431A B23C0012        	  1207: 	cmp.b	#SC_LSHIFT,d1
01:0000431E 6700012A        	  1208: 	beq		.doShift
01:00004322 B23C0059        	  1209: 	cmp.b	#SC_RSHIFT,d1
01:00004326 67000122        	  1210: 	beq		.doShift
01:0000432A B23C0077        	  1211: 	cmp.b	#SC_NUMLOCK,d1
01:0000432E 67000142        	  1212: 	beq		.doNumLock
01:00004332 B23C0058        	  1213: 	cmp.b	#SC_CAPSLOCK,d1
01:00004336 67000148        	  1214: 	beq		.doCapsLock
01:0000433A B23C007E        	  1215: 	cmp.b	#SC_SCROLLLOCK,d1
01:0000433E 6700014E        	  1216: 	beq		.doScrollLock
01:00004342 B23C0011        	  1217: 	cmp.b   #SC_ALT,d1
01:00004346 670000C0        	  1218: 	beq     .doAlt
01:0000434A 14390010000F    	  1219: 	move.b	_KeyState1,d2			; check key up/down
01:00004350 42390010000F    	  1220: 	move.b	#0,_KeyState1			; clear keyup status
01:00004356 4A02            	  1221: 	tst.b	d2
01:00004358 6600FF44        	  1222: 	bne	    .0003					; ignore key up
01:0000435C B23C000D        	  1223: 	cmp.b   #SC_TAB,d1
01:00004360 670000CE        	  1224: 	beq     .doTab
                            	  1225: .0013:
01:00004364 143900100010    	  1226: 	move.b	_KeyState2,d2
01:0000436A 6A1A            	  1227: 	bpl		.0010					; is it extended code ?
01:0000436C C43C007F        	  1228: 	and.b	#$7F,d2					; clear extended bit
01:00004370 13C200100010    	  1229: 	move.b	d2,_KeyState2
01:00004376 42390010000F    	  1230: 	move.b	#0,_KeyState1			; clear keyup
01:0000437C 41FA0422        	  1231: 	lea		_keybdExtendedCodes,a0
01:00004380 12301000        	  1232: 	move.b	(a0,d1.w),d1
01:00004384 6034            	  1233: 	bra		.0008
                            	  1234: .0010:
01:00004386 08020002        	  1235: 	btst	#2,d2					; is it CTRL code ?
01:0000438A 670E            	  1236: 	beq		.0009
01:0000438C C27C007F        	  1237: 	and.w	#$7F,d1
01:00004390 41FA038E        	  1238: 	lea		_keybdControlCodes,a0
01:00004394 12301000        	  1239: 	move.b	(a0,d1.w),d1
01:00004398 6020            	  1240: 	bra		.0008
                            	  1241: .0009:
01:0000439A 08020000        	  1242: 	btst	#0,d2					; is it shift down ?
01:0000439E 670A            	  1243: 	beq  	.0007
01:000043A0 41FA027E        	  1244: 	lea		_shiftedScanCodes,a0
01:000043A4 12301000        	  1245: 	move.b	(a0,d1.w),d1
01:000043A8 6010            	  1246: 	bra		.0008
                            	  1247: .0007:
01:000043AA 41FA0174        	  1248: 	lea		_unshiftedScanCodes,a0
01:000043AE 12301000        	  1249: 	move.b	(a0,d1.w),d1
01:000043B2 33FC0202FD0FFF00	  1250: 	move.w	#$0202,leds
                            	  1251: .0008:
01:000043BA 33FC0303FD0FFF00	  1252: 	move.w	#$0303,leds
01:000043C2 4CDF010C        	  1253: 	movem.l	(a7)+,d2/d3/a0
01:000043C6 4E75            	  1254: 	rts
                            	  1255: .doKeyup:
01:000043C8 13FC00FF0010000F	  1256: 	move.b	#-1,_KeyState1
01:000043D0 6000FECC        	  1257: 	bra		.0003
                            	  1258: .doExtend:
01:000043D4 0039008000100010	  1259: 	or.b	#$80,_KeyState2
01:000043DC 6000FEC0        	  1260: 	bra		.0003
                            	  1261: .doCtrl:
01:000043E0 12390010000F    	  1262: 	move.b	_KeyState1,d1
01:000043E6 42390010000F    	  1263: 	clr.b	_KeyState1
01:000043EC 4A01            	  1264: 	tst.b	d1
01:000043EE 6A0C            	  1265: 	bpl.s	.0004
01:000043F0 08B9000200100010	  1266: 	bclr	#2,_KeyState2
01:000043F8 6000FEA4        	  1267: 	bra		.0003
                            	  1268: .0004:
01:000043FC 08F9000200100010	  1269: 	bset	#2,_KeyState2
01:00004404 6000FE98        	  1270: 	bra		.0003
                            	  1271: .doAlt:
01:00004408 12390010000F    	  1272: 	move.b	_KeyState1,d1
01:0000440E 42390010000F    	  1273: 	clr.b	_KeyState1
01:00004414 4A01            	  1274: 	tst.b	d1
01:00004416 6A0C            	  1275: 	bpl		.0011
01:00004418 08B9000100100010	  1276: 	bclr	#1,_KeyState2
01:00004420 6000FE7C        	  1277: 	bra		.0003
                            	  1278: .0011:
01:00004424 08F9000100100010	  1279: 	bset	#1,_KeyState2
01:0000442C 6000FE70        	  1280: 	bra		.0003
                            	  1281: .doTab:
01:00004430 2F01            	  1282: 	move.l	d1,-(a7)
01:00004432 123900100010    	  1283:   move.b  _KeyState2,d1
01:00004438 08010001        	  1284:   btst	#1,d1                 ; is ALT down ?
01:0000443C 6706            	  1285:   beq     .0012
                            	  1286: ;    	inc     _iof_switch
01:0000443E 221F            	  1287:   move.l	(a7)+,d1
01:00004440 6000FE5C        	  1288:   bra     .0003
                            	  1289: .0012:
01:00004444 221F            	  1290:   move.l	(a7)+,d1
01:00004446 6000FF1C        	  1291:   bra     .0013
                            	  1292: .doShift:
01:0000444A 12390010000F    	  1293: 	move.b	_KeyState1,d1
01:00004450 42390010000F    	  1294: 	clr.b	_KeyState1
01:00004456 4A01            	  1295: 	tst.b	d1
01:00004458 6A0C            	  1296: 	bpl.s	.0005
01:0000445A 08B9000000100010	  1297: 	bclr	#0,_KeyState2
01:00004462 6000FE3A        	  1298: 	bra		.0003
                            	  1299: .0005:
01:00004466 08F9000000100010	  1300: 	bset	#0,_KeyState2
01:0000446E 6000FE2E        	  1301: 	bra		.0003
                            	  1302: .doNumLock:
01:00004472 0879000400100010	  1303: 	bchg	#4,_KeyState2
01:0000447A 6120            	  1304: 	bsr		KeybdSetLEDStatus
01:0000447C 6000FE20        	  1305: 	bra		.0003
                            	  1306: .doCapsLock:
01:00004480 0879000500100010	  1307: 	bchg	#5,_KeyState2
01:00004488 6112            	  1308: 	bsr		KeybdSetLEDStatus
01:0000448A 6000FE12        	  1309: 	bra		.0003
                            	  1310: .doScrollLock:
01:0000448E 0879000600100010	  1311: 	bchg	#6,_KeyState2
01:00004496 6104            	  1312: 	bsr		KeybdSetLEDStatus
01:00004498 6000FE04        	  1313: 	bra		.0003
                            	  1314: 
                            	  1315: KeybdSetLEDStatus:
01:0000449C 48E73000        	  1316: 	movem.l	d2/d3,-(a7)
01:000044A0 42390010000E    	  1317: 	clr.b	KeybdLEDs
01:000044A6 0839000400100010	  1318: 	btst	#4,_KeyState2
01:000044AE 6708            	  1319: 	beq.s	.0002
01:000044B0 13FC00020010000E	  1320: 	move.b	#2,KeybdLEDs
                            	  1321: .0002:
01:000044B8 0839000500100010	  1322: 	btst	#5,_KeyState2
01:000044C0 6708            	  1323: 	beq.s	.0003
01:000044C2 08F900020010000E	  1324: 	bset	#2,KeybdLEDs
                            	  1325: .0003:
01:000044CA 0839000600100010	  1326: 	btst	#6,_KeyState2
01:000044D2 6708            	  1327: 	beq.s	.0004
01:000044D4 08F900000010000E	  1328: 	bset	#0,KeybdLEDs
                            	  1329: .0004:
01:000044DC 123C00ED        	  1330: 	move.b	#$ED,d1
01:000044E0 6126            	  1331: 	bsr		KeybdSendByte
01:000044E2 6100FD26        	  1332: 	bsr		KeybdWaitTx
01:000044E6 6100FD02        	  1333: 	bsr		KeybdRecvByte
01:000044EA 4A01            	  1334: 	tst.b	d1
01:000044EC 6B14            	  1335: 	bmi		.0001
01:000044EE B27C00FA        	  1336: 	cmp		#$FA,d1
01:000044F2 12390010000E    	  1337: 	move.b	KeybdLEDs,d1
01:000044F8 610E            	  1338: 	bsr		KeybdSendByte
01:000044FA 6100FD0E        	  1339: 	bsr		KeybdWaitTx
01:000044FE 6100FCEA        	  1340: 	bsr		KeybdRecvByte
                            	  1341: .0001:
01:00004502 4CDF000C        	  1342: 	movem.l	(a7)+,d2/d3
01:00004506 4E75            	  1343: 	rts
                            	  1344: 
                            	  1345: KeybdSendByte:
01:00004508 13C1FD0FFE00    	  1346: 	move.b	d1,KEYBD
01:0000450E 4E75            	  1347: 	rts
                            	  1348: 	
                            	  1349: Wait10ms:
01:00004510 2F03            	  1350: 	move.l	d3,-(a7)
01:00004512 263C000003E8    	  1351: 	move.l	#1000,d3
                            	  1352: .0001:
01:00004518 51CBFFFE        	  1353: 	dbra	d3,.0001
01:0000451C 261F            	  1354: 	move.l	(a7)+,d3
01:0000451E 4E75            	  1355: 	rts
                            	  1356: 
                            	  1357: 
                            	  1358: ;--------------------------------------------------------------------------
                            	  1359: ; PS2 scan codes to ascii conversion tables.
                            	  1360: ;--------------------------------------------------------------------------
                            	  1361: ;
                            	  1362: _unshiftedScanCodes:
01:00004520 2E              	  1363: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:00004521 A9
01:00004522 2E
01:00004523 A5
01:00004524 A3
01:00004525 A1
01:00004526 A2
01:00004527 AC
01:00004528 2E              	  1364: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:00004529 AA
01:0000452A A8
01:0000452B A6
01:0000452C A4
01:0000452D 09
01:0000452E 60
01:0000452F 2E
01:00004530 2E              	  1365: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:00004531 2E
01:00004532 2E
01:00004533 2E
01:00004534 2E
01:00004535 71
01:00004536 31
01:00004537 2E
01:00004538 2E              	  1366: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:00004539 2E
01:0000453A 7A
01:0000453B 73
01:0000453C 61
01:0000453D 77
01:0000453E 32
01:0000453F 2E
01:00004540 2E              	  1367: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:00004541 63
01:00004542 78
01:00004543 64
01:00004544 65
01:00004545 34
01:00004546 33
01:00004547 2E
01:00004548 2E              	  1368: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:00004549 20
01:0000454A 76
01:0000454B 66
01:0000454C 74
01:0000454D 72
01:0000454E 35
01:0000454F 2E
01:00004550 2E              	  1369: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:00004551 6E
01:00004552 62
01:00004553 68
01:00004554 67
01:00004555 79
01:00004556 36
01:00004557 2E
01:00004558 2E              	  1370: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:00004559 2E
01:0000455A 6D
01:0000455B 6A
01:0000455C 75
01:0000455D 37
01:0000455E 38
01:0000455F 2E
01:00004560 2E              	  1371: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:00004561 2C
01:00004562 6B
01:00004563 69
01:00004564 6F
01:00004565 30
01:00004566 39
01:00004567 2E
01:00004568 2E              	  1372: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:00004569 2E
01:0000456A 2F
01:0000456B 6C
01:0000456C 3B
01:0000456D 70
01:0000456E 2D
01:0000456F 2E
01:00004570 2E              	  1373: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:00004571 2E
01:00004572 27
01:00004573 2E
01:00004574 5B
01:00004575 3D
01:00004576 2E
01:00004577 2E
01:00004578 AD              	  1374: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:00004579 2E
01:0000457A 0D
01:0000457B 5D
01:0000457C 2E
01:0000457D 5C
01:0000457E 2E
01:0000457F 2E
01:00004580 2E              	  1375: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004581 2E
01:00004582 2E
01:00004583 2E
01:00004584 2E
01:00004585 2E
01:00004586 08
01:00004587 2E
01:00004588 2E              	  1376: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:00004589 95
01:0000458A 2E
01:0000458B 93
01:0000458C 94
01:0000458D 2E
01:0000458E 2E
01:0000458F 2E
01:00004590 98              	  1377: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:00004591 7F
01:00004592 92
01:00004593 2E
01:00004594 91
01:00004595 90
01:00004596 1B
01:00004597 AF
01:00004598 AB              	  1378: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:00004599 2E
01:0000459A 97
01:0000459B 2E
01:0000459C 2E
01:0000459D 96
01:0000459E AE
01:0000459F 2E
                            	  1379: 
01:000045A0 2E              	  1380: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:000045A1 2E
01:000045A2 2E
01:000045A3 A7
01:000045A4 2E
01:000045A5 2E
01:000045A6 2E
01:000045A7 2E
01:000045A8 2E              	  1381: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045A9 2E
01:000045AA 2E
01:000045AB 2E
01:000045AC 2E
01:000045AD 2E
01:000045AE 2E
01:000045AF 2E
01:000045B0 2E              	  1382: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B1 2E
01:000045B2 2E
01:000045B3 2E
01:000045B4 2E
01:000045B5 2E
01:000045B6 2E
01:000045B7 2E
01:000045B8 2E              	  1383: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B9 2E
01:000045BA 2E
01:000045BB 2E
01:000045BC 2E
01:000045BD 2E
01:000045BE 2E
01:000045BF 2E
01:000045C0 2E              	  1384: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C1 2E
01:000045C2 2E
01:000045C3 2E
01:000045C4 2E
01:000045C5 2E
01:000045C6 2E
01:000045C7 2E
01:000045C8 2E              	  1385: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C9 2E
01:000045CA 2E
01:000045CB 2E
01:000045CC 2E
01:000045CD 2E
01:000045CE 2E
01:000045CF 2E
01:000045D0 2E              	  1386: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D1 2E
01:000045D2 2E
01:000045D3 2E
01:000045D4 2E
01:000045D5 2E
01:000045D6 2E
01:000045D7 2E
01:000045D8 2E              	  1387: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D9 2E
01:000045DA 2E
01:000045DB 2E
01:000045DC 2E
01:000045DD 2E
01:000045DE 2E
01:000045DF 2E
01:000045E0 2E              	  1388: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E1 2E
01:000045E2 2E
01:000045E3 2E
01:000045E4 2E
01:000045E5 2E
01:000045E6 2E
01:000045E7 2E
01:000045E8 2E              	  1389: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E9 2E
01:000045EA 2E
01:000045EB 2E
01:000045EC 2E
01:000045ED 2E
01:000045EE 2E
01:000045EF 2E
01:000045F0 2E              	  1390: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F1 2E
01:000045F2 2E
01:000045F3 2E
01:000045F4 2E
01:000045F5 2E
01:000045F6 2E
01:000045F7 2E
01:000045F8 2E              	  1391: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F9 2E
01:000045FA 2E
01:000045FB 2E
01:000045FC 2E
01:000045FD 2E
01:000045FE 2E
01:000045FF 2E
01:00004600 2E              	  1392: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004601 2E
01:00004602 2E
01:00004603 2E
01:00004604 2E
01:00004605 2E
01:00004606 2E
01:00004607 2E
01:00004608 2E              	  1393: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004609 2E
01:0000460A 2E
01:0000460B 2E
01:0000460C 2E
01:0000460D 2E
01:0000460E 2E
01:0000460F 2E
01:00004610 2E              	  1394: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004611 2E
01:00004612 2E
01:00004613 2E
01:00004614 2E
01:00004615 2E
01:00004616 2E
01:00004617 2E
01:00004618 2E              	  1395: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:00004619 2E
01:0000461A FA
01:0000461B 2E
01:0000461C 2E
01:0000461D 2E
01:0000461E 2E
01:0000461F 2E
                            	  1396: 
                            	  1397: _shiftedScanCodes:
01:00004620 2E              	  1398: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004621 2E
01:00004622 2E
01:00004623 2E
01:00004624 2E
01:00004625 2E
01:00004626 2E
01:00004627 2E
01:00004628 2E              	  1399: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:00004629 2E
01:0000462A 2E
01:0000462B 2E
01:0000462C 2E
01:0000462D 09
01:0000462E 7E
01:0000462F 2E
01:00004630 2E              	  1400: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:00004631 2E
01:00004632 2E
01:00004633 2E
01:00004634 2E
01:00004635 51
01:00004636 21
01:00004637 2E
01:00004638 2E              	  1401: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:00004639 2E
01:0000463A 5A
01:0000463B 53
01:0000463C 41
01:0000463D 57
01:0000463E 40
01:0000463F 2E
01:00004640 2E              	  1402: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:00004641 43
01:00004642 58
01:00004643 44
01:00004644 45
01:00004645 24
01:00004646 23
01:00004647 2E
01:00004648 2E              	  1403: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:00004649 20
01:0000464A 56
01:0000464B 46
01:0000464C 54
01:0000464D 52
01:0000464E 25
01:0000464F 2E
01:00004650 2E              	  1404: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:00004651 4E
01:00004652 42
01:00004653 48
01:00004654 47
01:00004655 59
01:00004656 5E
01:00004657 2E
01:00004658 2E              	  1405: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:00004659 2E
01:0000465A 4D
01:0000465B 4A
01:0000465C 55
01:0000465D 26
01:0000465E 2A
01:0000465F 2E
01:00004660 2E              	  1406: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:00004661 3C
01:00004662 4B
01:00004663 49
01:00004664 4F
01:00004665 29
01:00004666 28
01:00004667 2E
01:00004668 2E              	  1407: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:00004669 3E
01:0000466A 3F
01:0000466B 4C
01:0000466C 3A
01:0000466D 50
01:0000466E 5F
01:0000466F 2E
01:00004670 2E              	  1408: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004671 2E
01:00004672 22
01:00004673 2E
01:00004674 7B
01:00004675 2B
01:00004676 2E
01:00004677 2E
01:00004678 2E              	  1409: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004679 2E
01:0000467A 0D
01:0000467B 7D
01:0000467C 2E
01:0000467D 7C
01:0000467E 2E
01:0000467F 2E
01:00004680 2E              	  1410: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004681 2E
01:00004682 2E
01:00004683 2E
01:00004684 2E
01:00004685 2E
01:00004686 08
01:00004687 2E
01:00004688 2E              	  1411: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004689 2E
01:0000468A 2E
01:0000468B 2E
01:0000468C 2E
01:0000468D 2E
01:0000468E 2E
01:0000468F 2E
01:00004690 2E              	  1412: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:00004691 7F
01:00004692 2E
01:00004693 2E
01:00004694 2E
01:00004695 2E
01:00004696 1B
01:00004697 2E
01:00004698 2E              	  1413: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004699 2E
01:0000469A 2E
01:0000469B 2E
01:0000469C 2E
01:0000469D 2E
01:0000469E 2E
01:0000469F 2E
                            	  1414: 
01:000046A0 2E              	  1415: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046A1 2E
01:000046A2 2E
01:000046A3 2E
01:000046A4 2E
01:000046A5 2E
01:000046A6 2E
01:000046A7 2E
01:000046A8 2E              	  1416: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046A9 2E
01:000046AA 2E
01:000046AB 2E
01:000046AC 2E
01:000046AD 2E
01:000046AE 2E
01:000046AF 2E
01:000046B0 2E              	  1417: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B1 2E
01:000046B2 2E
01:000046B3 2E
01:000046B4 2E
01:000046B5 2E
01:000046B6 2E
01:000046B7 2E
01:000046B8 2E              	  1418: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B9 2E
01:000046BA 2E
01:000046BB 2E
01:000046BC 2E
01:000046BD 2E
01:000046BE 2E
01:000046BF 2E
01:000046C0 2E              	  1419: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C1 2E
01:000046C2 2E
01:000046C3 2E
01:000046C4 2E
01:000046C5 2E
01:000046C6 2E
01:000046C7 2E
01:000046C8 2E              	  1420: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C9 2E
01:000046CA 2E
01:000046CB 2E
01:000046CC 2E
01:000046CD 2E
01:000046CE 2E
01:000046CF 2E
01:000046D0 2E              	  1421: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D1 2E
01:000046D2 2E
01:000046D3 2E
01:000046D4 2E
01:000046D5 2E
01:000046D6 2E
01:000046D7 2E
01:000046D8 2E              	  1422: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D9 2E
01:000046DA 2E
01:000046DB 2E
01:000046DC 2E
01:000046DD 2E
01:000046DE 2E
01:000046DF 2E
01:000046E0 2E              	  1423: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E1 2E
01:000046E2 2E
01:000046E3 2E
01:000046E4 2E
01:000046E5 2E
01:000046E6 2E
01:000046E7 2E
01:000046E8 2E              	  1424: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E9 2E
01:000046EA 2E
01:000046EB 2E
01:000046EC 2E
01:000046ED 2E
01:000046EE 2E
01:000046EF 2E
01:000046F0 2E              	  1425: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046F1 2E
01:000046F2 2E
01:000046F3 2E
01:000046F4 2E
01:000046F5 2E
01:000046F6 2E
01:000046F7 2E
01:000046F8 2E              	  1426: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046F9 2E
01:000046FA 2E
01:000046FB 2E
01:000046FC 2E
01:000046FD 2E
01:000046FE 2E
01:000046FF 2E
01:00004700 2E              	  1427: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004701 2E
01:00004702 2E
01:00004703 2E
01:00004704 2E
01:00004705 2E
01:00004706 2E
01:00004707 2E
01:00004708 2E              	  1428: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004709 2E
01:0000470A 2E
01:0000470B 2E
01:0000470C 2E
01:0000470D 2E
01:0000470E 2E
01:0000470F 2E
01:00004710 2E              	  1429: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004711 2E
01:00004712 2E
01:00004713 2E
01:00004714 2E
01:00004715 2E
01:00004716 2E
01:00004717 2E
01:00004718 2E              	  1430: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004719 2E
01:0000471A 2E
01:0000471B 2E
01:0000471C 2E
01:0000471D 2E
01:0000471E 2E
01:0000471F 2E
                            	  1431: 
                            	  1432: ; control
                            	  1433: _keybdControlCodes:
01:00004720 2E              	  1434: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004721 2E
01:00004722 2E
01:00004723 2E
01:00004724 2E
01:00004725 2E
01:00004726 2E
01:00004727 2E
01:00004728 2E              	  1435: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:00004729 2E
01:0000472A 2E
01:0000472B 2E
01:0000472C 2E
01:0000472D 09
01:0000472E 7E
01:0000472F 2E
01:00004730 2E              	  1436: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:00004731 2E
01:00004732 2E
01:00004733 2E
01:00004734 2E
01:00004735 11
01:00004736 21
01:00004737 2E
01:00004738 2E              	  1437: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:00004739 2E
01:0000473A 1A
01:0000473B 13
01:0000473C 01
01:0000473D 17
01:0000473E 40
01:0000473F 2E
01:00004740 2E              	  1438: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:00004741 03
01:00004742 18
01:00004743 04
01:00004744 05
01:00004745 24
01:00004746 23
01:00004747 2E
01:00004748 2E              	  1439: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:00004749 20
01:0000474A 16
01:0000474B 06
01:0000474C 14
01:0000474D 12
01:0000474E 25
01:0000474F 2E
01:00004750 2E              	  1440: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:00004751 0E
01:00004752 02
01:00004753 08
01:00004754 07
01:00004755 19
01:00004756 5E
01:00004757 2E
01:00004758 2E              	  1441: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:00004759 2E
01:0000475A 0D
01:0000475B 0A
01:0000475C 15
01:0000475D 26
01:0000475E 2A
01:0000475F 2E
01:00004760 2E              	  1442: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:00004761 3C
01:00004762 0B
01:00004763 09
01:00004764 0F
01:00004765 29
01:00004766 28
01:00004767 2E
01:00004768 2E              	  1443: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:00004769 3E
01:0000476A 3F
01:0000476B 0C
01:0000476C 3A
01:0000476D 10
01:0000476E 5F
01:0000476F 2E
01:00004770 2E              	  1444: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004771 2E
01:00004772 22
01:00004773 2E
01:00004774 7B
01:00004775 2B
01:00004776 2E
01:00004777 2E
01:00004778 2E              	  1445: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004779 2E
01:0000477A 0D
01:0000477B 7D
01:0000477C 2E
01:0000477D 7C
01:0000477E 2E
01:0000477F 2E
01:00004780 2E              	  1446: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004781 2E
01:00004782 2E
01:00004783 2E
01:00004784 2E
01:00004785 2E
01:00004786 08
01:00004787 2E
01:00004788 2E              	  1447: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004789 2E
01:0000478A 2E
01:0000478B 2E
01:0000478C 2E
01:0000478D 2E
01:0000478E 2E
01:0000478F 2E
01:00004790 2E              	  1448: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:00004791 7F
01:00004792 2E
01:00004793 2E
01:00004794 2E
01:00004795 2E
01:00004796 1B
01:00004797 2E
01:00004798 2E              	  1449: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004799 2E
01:0000479A 2E
01:0000479B 2E
01:0000479C 2E
01:0000479D 2E
01:0000479E 2E
01:0000479F 2E
                            	  1450: 
                            	  1451: _keybdExtendedCodes:
01:000047A0 2E              	  1452: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:000047A1 2E
01:000047A2 2E
01:000047A3 2E
01:000047A4 A3
01:000047A5 A1
01:000047A6 A2
01:000047A7 2E
01:000047A8 2E              	  1453: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047A9 2E
01:000047AA 2E
01:000047AB 2E
01:000047AC 2E
01:000047AD 2E
01:000047AE 2E
01:000047AF 2E
01:000047B0 2E              	  1454: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047B1 2E
01:000047B2 2E
01:000047B3 2E
01:000047B4 2E
01:000047B5 2E
01:000047B6 2E
01:000047B7 2E
01:000047B8 2E              	  1455: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047B9 2E
01:000047BA 2E
01:000047BB 2E
01:000047BC 2E
01:000047BD 2E
01:000047BE 2E
01:000047BF 2E
01:000047C0 2E              	  1456: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047C1 2E
01:000047C2 2E
01:000047C3 2E
01:000047C4 2E
01:000047C5 2E
01:000047C6 2E
01:000047C7 2E
01:000047C8 2E              	  1457: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047C9 2E
01:000047CA 2E
01:000047CB 2E
01:000047CC 2E
01:000047CD 2E
01:000047CE 2E
01:000047CF 2E
01:000047D0 2E              	  1458: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047D1 2E
01:000047D2 2E
01:000047D3 2E
01:000047D4 2E
01:000047D5 2E
01:000047D6 2E
01:000047D7 2E
01:000047D8 2E              	  1459: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047D9 2E
01:000047DA 2E
01:000047DB 2E
01:000047DC 2E
01:000047DD 2E
01:000047DE 2E
01:000047DF 2E
01:000047E0 2E              	  1460: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047E1 2E
01:000047E2 2E
01:000047E3 2E
01:000047E4 2E
01:000047E5 2E
01:000047E6 2E
01:000047E7 2E
01:000047E8 2E              	  1461: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047E9 2E
01:000047EA 2E
01:000047EB 2E
01:000047EC 2E
01:000047ED 2E
01:000047EE 2E
01:000047EF 2E
01:000047F0 2E              	  1462: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047F1 2E
01:000047F2 2E
01:000047F3 2E
01:000047F4 2E
01:000047F5 2E
01:000047F6 2E
01:000047F7 2E
01:000047F8 2E              	  1463: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047F9 2E
01:000047FA 2E
01:000047FB 2E
01:000047FC 2E
01:000047FD 2E
01:000047FE 2E
01:000047FF 2E
01:00004800 2E              	  1464: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004801 2E
01:00004802 2E
01:00004803 2E
01:00004804 2E
01:00004805 2E
01:00004806 2E
01:00004807 2E
01:00004808 2E              	  1465: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:00004809 95
01:0000480A 2E
01:0000480B 93
01:0000480C 94
01:0000480D 2E
01:0000480E 2E
01:0000480F 2E
01:00004810 98              	  1466: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:00004811 99
01:00004812 92
01:00004813 2E
01:00004814 91
01:00004815 90
01:00004816 2E
01:00004817 2E
01:00004818 2E              	  1467: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:00004819 2E
01:0000481A 97
01:0000481B 2E
01:0000481C 2E
01:0000481D 96
01:0000481E 2E
01:0000481F 2E
                            	  1468: 
                            	  1469: ;==============================================================================
                            	  1470: ;==============================================================================
                            	  1471: ; Monitor
                            	  1472: ;==============================================================================
                            	  1473: ;==============================================================================
                            	  1474: ;
                            	  1475: ; Get a word from screen memory and swap byte order
                            	  1476: 
                            	  1477: FromScreen:
01:00004820 2210            	  1478: 	move.l	(a0),d1
01:00004822 E159            	  1479: 	rol.w		#8,d1
01:00004824 4841            	  1480: 	swap		d1
01:00004826 E159            	  1481: 	rol.w		#8,d1
01:00004828 5088            	  1482: 	lea			8(a0),a0	; increment screen pointer
01:0000482A 4E75            	  1483: 	rts
                            	  1484: 
                            	  1485: StartMon:
01:0000482C 427900040202    	  1486: 	clr.w		NumSetBreakpoints
01:00004832 61000ADE        	  1487: 	bsr			ClearBreakpointList
                            	  1488: Monitor:
                            	  1489: 	; Reset the stack pointer on each entry into the monitor
01:00004836 2E7C00040FFC    	  1490: 	move.l	#$40FFC,sp	; reset core's stack
01:0000483C 46FC2200        	  1491: 	move.w	#$2200,sr		; enable level 2 and higher interrupts
01:00004840 7201            	  1492: 	moveq		#1,d1
01:00004842 6100B8F6        	  1493: 	bsr			UnlockSemaphore
01:00004846 42390004000C    	  1494: 	clr.b		KeybdEcho		; turn off keyboard echo
                            	  1495: PromptLn:
01:0000484C 6100F4F6        	  1496: 	bsr			CRLF
01:00004850 123C0024        	  1497: 	move.b	#'$',d1
01:00004854 6100F538        	  1498: 	bsr			DisplayChar
                            	  1499: 
                            	  1500: ; Get characters until a CR is keyed
                            	  1501: ;
                            	  1502: Prompt3:
01:00004858 6100F9EA        	  1503: 	bsr			GetKey
01:0000485C 0C0100FF        	  1504: 	cmpi.b	#-1,d1
01:00004860 67F6            	  1505: 	beq.s		Prompt3
01:00004862 0C01000D        	  1506: 	cmpi.b	#CR,d1
01:00004866 6706            	  1507: 	beq.s		Prompt1
01:00004868 6100F524        	  1508: 	bsr			DisplayChar
01:0000486C 60EA            	  1509: 	bra.s		Prompt3
                            	  1510: 
                            	  1511: ; Process the screen line that the CR was keyed on
                            	  1512: ;
                            	  1513: Prompt1:
01:0000486E 423900040001    	  1514: 	clr.b		CursorCol			; go back to the start of the line
01:00004874 6100F50A        	  1515: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1516: .0001:
01:00004878 61A6            	  1517: 	bsr			FromScreen		; grab character off screen
01:0000487A 0C010024        	  1518: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:0000487E 67F8            	  1519: 	beq.s		.0001
                            	  1520: 	
                            	  1521: ; Dispatch based on command character
                            	  1522: ;
                            	  1523: Prompt2:
01:00004880 0C010061        	  1524: 	cmpi.b	#'a',d1
01:00004884 67000760        	  1525: 	beq			AudioInputTest
01:00004888 0C010062        	  1526: 	cmpi.b	#'b',d1
01:0000488C 6700075A        	  1527: 	beq			BouncingBalls
01:00004890 0C010067        	  1528: 	cmpi.b	#'g',d1
01:00004894 67000754        	  1529: 	beq			GraphicsDemo
01:00004898 0C01003A        	  1530: 	cmpi.b	#':',d1			; $: - edit memory
01:0000489C 6700037C        	  1531: 	beq			EditMem
01:000048A0 0C010044        	  1532: 	cmpi.b	#'D',d1			; $D - dump memory
01:000048A4 6612            	  1533: 	bne.s		.0003
01:000048A6 6100FF78        	  1534: 	bsr			FromScreen
01:000048AA 0C010052        	  1535: 	cmpi.b	#'R',d1			; $DR - dump registers
01:000048AE 6700044E        	  1536: 	beq			DumpRegs
01:000048B2 5188            	  1537: 	lea			-8(a0),a0
01:000048B4 600003BE        	  1538: 	bra			DumpMem
                            	  1539: .0003:
01:000048B8 0C010046        	  1540: 	cmpi.b	#'F',d1
01:000048BC 67000304        	  1541: 	beq			FillMem
01:000048C0 0C010042        	  1542: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:000048C4 6634            	  1543: 	bne.s	.0001
01:000048C6 6100FF58        	  1544: 	bsr			FromScreen
01:000048CA 0C010052        	  1545: 	cmpi.b	#'R',d1
01:000048CE 6624            	  1546: 	bne.s		.0004
01:000048D0 61000336        	  1547: 	bsr			ignBlanks
01:000048D4 6100FF4A        	  1548: 	bsr			FromScreen
01:000048D8 0C01002B        	  1549: 	cmpi.b	#'+',d1
01:000048DC 67000942        	  1550: 	beq			ArmBreakpoint
01:000048E0 0C01002D        	  1551: 	cmpi.b	#'-',d1
01:000048E4 670009B8        	  1552: 	beq			DisarmBreakpoint
01:000048E8 0C01004C        	  1553: 	cmpi.b	#'L',d1
01:000048EC 67000A04        	  1554: 	beq			ListBreakpoints
01:000048F0 6000FF44        	  1555: 	bra			Monitor
                            	  1556: .0004:
01:000048F4 4EF9FFFCC000    	  1557: 	jmp			$FFFCC000
                            	  1558: .0001:
01:000048FA 0C01004A        	  1559: 	cmpi.b	#'J',d1			; $J - execute code
01:000048FE 67000366        	  1560: 	beq			ExecuteCode
01:00004902 0C01004C        	  1561: 	cmpi.b	#'L',d1			; $L - load S19 file
01:00004906 67000560        	  1562: 	beq			LoadS19
01:0000490A 0C01003F        	  1563: 	cmpi.b	#'?',d1			; $? - display help
01:0000490E 677E            	  1564: 	beq			DisplayHelp
01:00004910 0C010043        	  1565: 	cmpi.b	#'C',d1			; $C - clear screen
01:00004914 6736            	  1566: 	beq			TestCLS
01:00004916 0C010054        	  1567: 	cmpi.b	#'T',d1			; $T - run cpu test program
01:0000491A 661C            	  1568: 	bne.s		.0002
01:0000491C 6100FF02        	  1569: 	bsr			FromScreen
01:00004920 0C010052        	  1570: 	cmpi.b	#'R',d1
01:00004924 67000482        	  1571: 	beq			TestSerialReceive
01:00004928 6100B854        	  1572: 	bsr			cpu_test
01:0000492C 43FA0B3B        	  1573: 	lea			msg_test_done,a1
01:00004930 6100F6D0        	  1574: 	bsr			DisplayStringCRLF
01:00004934 6000FF00        	  1575: 	bra			Monitor
                            	  1576: .0002:
01:00004938 0C010053        	  1577: 	cmpi.b	#'S',d1
01:0000493C 67000220        	  1578: 	beq			SendSerial
01:00004940 0C010052        	  1579: 	cmpi.b	#'R',d1
01:00004944 67000248        	  1580: 	beq			ReceiveSerial
01:00004948 6000FEEC        	  1581: 	bra			Monitor
                            	  1582: 
                            	  1583: TestCLS:
01:0000494C 6100FED2        	  1584: 	bsr			FromScreen
01:00004950 5242            	  1585: 	addq		#1,d2
01:00004952 0C01004C        	  1586: 	cmpi.b	#'L',d1
01:00004956 661A            	  1587: 	bne.s		.0001
01:00004958 6100FEC6        	  1588: 	bsr			FromScreen
01:0000495C 5242            	  1589: 	addq		#1,d2
01:0000495E 0C010053        	  1590: 	cmpi.b	#'S',d1
01:00004962 6600FED2        	  1591: 	bne			Monitor
01:00004966 61000684        	  1592: 	bsr			ClearScreen
01:0000496A 6100F6C2        	  1593: 	bsr			HomeCursor
01:0000496E 6000FEC6        	  1594: 	bra			Monitor
                            	  1595: .0001:
01:00004972 0C010032        	  1596: 	cmpi.b	#'2',d1					; check range
01:00004976 6500FEBE        	  1597: 	blo			Monitor
01:0000497A 0C010039        	  1598: 	cmpi.b	#'9',d1
01:0000497E 6200FEB6        	  1599: 	bhi			Monitor
01:00004982 04010030        	  1600: 	subi.b	#'0',d1					; convert ascii to binary
01:00004986 6100F7D0        	  1601: 	bsr			select_iofocus
01:0000498A 6000FEAA        	  1602: 	bra			Monitor
                            	  1603: 	
                            	  1604: DisplayHelp:
01:0000498E 43FA000A        	  1605: 	lea			HelpMsg,a1
01:00004992 6100F658        	  1606: 	bsr			DisplayString
01:00004996 6000FE9E        	  1607: 	bra			Monitor
                            	  1608: 
                            	  1609: HelpMsg:
01:0000499A 3F203D2044697370	  1610: 	dc.b	"? = Display help",CR,LF
01:000049A2 6C61792068656C70
01:000049AA 0D
01:000049AB 0A
01:000049AC 433C6E3E203D2073	  1611: 	dc.b  "C<n> = switch to core n",CR,LF
01:000049B4 776974636820746F
01:000049BC 20636F7265206E
01:000049C3 0D
01:000049C4 0A
01:000049C5 434C53203D20636C	  1612: 	dc.b	"CLS = clear screen",CR,LF
01:000049CD 6561722073637265
01:000049D5 656E
01:000049D7 0D
01:000049D8 0A
01:000049D9 3A203D2045646974	  1613: 	dc.b	": = Edit memory bytes",CR,LF
01:000049E1 206D656D6F727920
01:000049E9 6279746573
01:000049EE 0D
01:000049EF 0A
01:000049F0 46203D2046696C6C	  1614: 	dc.b	"F = Fill memory",CR,LF
01:000049F8 206D656D6F7279
01:000049FF 0D
01:00004A00 0A
01:00004A01 4C203D204C6F6164	  1615: 	dc.b	"L = Load S19 file",CR,LF
01:00004A09 205331392066696C
01:00004A11 65
01:00004A12 0D
01:00004A13 0A
01:00004A14 44203D2044756D70	  1616: 	dc.b	"D = Dump memory, DR = dump registers",CR,LF
01:00004A1C 206D656D6F72792C
01:00004A24 204452203D206475
01:00004A2C 6D70207265676973
01:00004A34 74657273
01:00004A38 0D
01:00004A39 0A
01:00004A3A 42203D2073746172	  1617: 	dc.b	"B = start tiny basic",CR,LF
01:00004A42 742074696E792062
01:00004A4A 61736963
01:00004A4E 0D
01:00004A4F 0A
01:00004A50 4252203D20736574	  1618: 	dc.b  "BR = set breakpoint",CR,LF
01:00004A58 20627265616B706F
01:00004A60 696E74
01:00004A63 0D
01:00004A64 0A
01:00004A65 4A203D204A756D70	  1619: 	dc.b	"J = Jump to code",CR,LF
01:00004A6D 20746F20636F6465
01:00004A75 0D
01:00004A76 0A
01:00004A77 5345203D2073656E	  1620: 	dc.b  "SE = send to serial port",CR,LF
01:00004A7F 6420746F20736572
01:00004A87 69616C20706F7274
01:00004A8F 0D
01:00004A90 0A
01:00004A91 54203D2063707520	  1621: 	dc.b	"T = cpu test program",CR,LF,0
01:00004A99 746573742070726F
01:00004AA1 6772616D
01:00004AA5 0D
01:00004AA6 0A
01:00004AA7 00
                            	  1622: 
                            	  1623: msgHello:
01:00004AA8 0A              	  1624: 	dc.b	LF,CR,"Hello World!",LF,CR,0
01:00004AA9 0D
01:00004AAA 48656C6C6F20576F
01:00004AB2 726C6421
01:00004AB6 0A
01:00004AB7 0D
01:00004AB8 00
                            	  1625: 	even
                            	  1626: 
                            	  1627: ;------------------------------------------------------------------------------
                            	  1628: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1629: ; Used to fetch a command line. (Not currently used).
                            	  1630: ;
                            	  1631: ; d0.b	- command prompt
                            	  1632: ;------------------------------------------------------------------------------
                            	  1633: 
                            	  1634: GetCmdLine:
01:00004ABA 6100F2D2        	  1635: 		bsr		DisplayChar		; display prompt
01:00004ABE 103C0020        	  1636: 		move.b	#' ',d0
01:00004AC2 6100F2CA        	  1637: 		bsr		DisplayChar
01:00004AC6 41F900040040    	  1638: 		lea		CmdBuf,a0
                            	  1639: .0001:
01:00004ACC 6100F776        	  1640: 		bsr		GetKey
01:00004AD0 B03C0008        	  1641: 		cmp.b	#CTRLH,d0
01:00004AD4 6728            	  1642: 		beq.s	.0003
01:00004AD6 B03C0018        	  1643: 		cmp.b	#CTRLX,d0
01:00004ADA 6746            	  1644: 		beq.s	.0004
01:00004ADC B03C000D        	  1645: 		cmp.b	#CR,d0
01:00004AE0 6706            	  1646: 		beq.s	.0002
01:00004AE2 B03C0020        	  1647: 		cmp.b	#' ',d0
01:00004AE6 65E4            	  1648: 		bcs.s	.0001
                            	  1649: .0002:
01:00004AE8 1080            	  1650: 		move.b	d0,(a0)
01:00004AEA 5088            	  1651: 		lea			8(a0),a0
01:00004AEC 6100F2A0        	  1652: 		bsr		DisplayChar
01:00004AF0 B03C000D        	  1653: 		cmp.b	#CR,d0
01:00004AF4 675E            	  1654: 		beq		.0007
01:00004AF6 B1FC0004007F    	  1655: 		cmp.l	#CmdBufEnd-1,a0
01:00004AFC 65CE            	  1656: 		bcs.s	.0001
                            	  1657: .0003:
01:00004AFE 103C0008        	  1658: 		move.b	#CTRLH,d0
01:00004B02 6100F28A        	  1659: 		bsr		DisplayChar
01:00004B06 103C0020        	  1660: 		move.b	#' ',d0
01:00004B0A 6100F282        	  1661: 		bsr		DisplayChar
01:00004B0E B1FC00040040    	  1662: 		cmp.l	#CmdBuf,a0
01:00004B14 63B6            	  1663: 		bls.s	.0001
01:00004B16 103C0008        	  1664: 		move.b	#CTRLH,d0
01:00004B1A 6100F272        	  1665: 		bsr		DisplayChar
01:00004B1E 5388            	  1666: 		subq.l	#1,a0
01:00004B20 60AA            	  1667: 		bra.s	.0001
                            	  1668: .0004:
01:00004B22 2208            	  1669: 		move.l	a0,d1
01:00004B24 92BC00040040    	  1670: 		sub.l	#CmdBuf,d1
01:00004B2A 671E            	  1671: 		beq.s	.0006
01:00004B2C 5341            	  1672: 		subq	#1,d1
                            	  1673: .0005:
01:00004B2E 103C0008        	  1674: 		move.b	#CTRLH,d0
01:00004B32 6100F25A        	  1675: 		bsr		DisplayChar
01:00004B36 103C0020        	  1676: 		move.b	#' ',d0
01:00004B3A 6100F252        	  1677: 		bsr		DisplayChar
01:00004B3E 103C0008        	  1678: 		move.b	#CTRLH,d0
01:00004B42 6100F24A        	  1679: 		bsr		DisplayChar
01:00004B46 51C9FFE6        	  1680: 		dbra	d1,.0005
                            	  1681: .0006:
01:00004B4A 41F900040040    	  1682: 		lea		CmdBuf,a0
01:00004B50 6000FF7A        	  1683: 		bra		.0001
                            	  1684: .0007:
01:00004B54 103C000A        	  1685: 		move.b	#LF,d0
01:00004B58 6100F234        	  1686: 		bsr		DisplayChar
01:00004B5C 4E75            	  1687: 		rts
                            	  1688: 
                            	  1689: ;------------------------------------------------------------------------------
                            	  1690: ; S <address> <length>
                            	  1691: ; Send data buffer to serial port
                            	  1692: ; S 40000 40
                            	  1693: ;------------------------------------------------------------------------------
                            	  1694: 
                            	  1695: SendSerial:
01:00004B5E 610000A8        	  1696: 	bsr			ignBlanks
01:00004B62 61000258        	  1697: 	bsr			GetHexNumber
01:00004B66 6700FCCE        	  1698: 	beq			Monitor
01:00004B6A 2C01            	  1699: 	move.l	d1,d6					; d6 points to buffer
01:00004B6C 6100009A        	  1700: 	bsr			ignBlanks
01:00004B70 6100024A        	  1701: 	bsr			GetHexNumber
01:00004B74 6602            	  1702: 	bne.s		.0003
01:00004B76 7210            	  1703: 	moveq		#16,d1
                            	  1704: .0003:
01:00004B78 2246            	  1705: 	move.l	d6,a1					; a1 points to buffer
01:00004B7A 2401            	  1706: 	move.l	d1,d2					; d2 = count of bytes to send
01:00004B7C 6008            	  1707: 	bra.s		.0002					; enter loop at bottom
                            	  1708: .0001:
01:00004B7E 1219            	  1709: 	move.b	(a1)+,d1
01:00004B80 303C0022        	  1710: 	move.w	#34,d0				; serial putchar
01:00004B84 4E4F            	  1711: 	trap		#15
                            	  1712: .0002:
01:00004B86 51CAFFF6        	  1713: 	dbra		d2,.0001
01:00004B8A 6000FCAA        	  1714: 	bra			Monitor
                            	  1715: 		
                            	  1716: ;------------------------------------------------------------------------------
                            	  1717: ; R <address> <length>
                            	  1718: ; Send data buffer to serial port
                            	  1719: ; R 10000 40
                            	  1720: ;------------------------------------------------------------------------------
                            	  1721: 
                            	  1722: ReceiveSerial:
01:00004B8E 6178            	  1723: 	bsr			ignBlanks
01:00004B90 6100022A        	  1724: 	bsr			GetHexNumber
01:00004B94 6700FCA0        	  1725: 	beq			Monitor
01:00004B98 2C01            	  1726: 	move.l	d1,d6					; d6 points to buffer
01:00004B9A 616C            	  1727: 	bsr			ignBlanks
01:00004B9C 6100021E        	  1728: 	bsr			GetHexNumber
01:00004BA0 6602            	  1729: 	bne.s		.0003
01:00004BA2 7210            	  1730: 	moveq		#16,d1
                            	  1731: .0003:
01:00004BA4 2246            	  1732: 	move.l	d6,a1					; a1 points to buffer
01:00004BA6 2401            	  1733: 	move.l	d1,d2					; d2 = count of bytes to send
01:00004BA8 6010            	  1734: 	bra.s		.0002					; enter loop at bottom
                            	  1735: .0001:
01:00004BAA 303C0021        	  1736: 	move.w	#33,d0				; serial peek char
01:00004BAE 4E4F            	  1737: 	trap		#15
01:00004BB0 0C81FFFFFFFF    	  1738: 	cmpi.l	#-1,d1
01:00004BB6 67F2            	  1739: 	beq			.0001
01:00004BB8 12C1            	  1740: 	move.b	d1,(a1)+
                            	  1741: .0002:
01:00004BBA 51CAFFEE        	  1742: 	dbra		d2,.0001
01:00004BBE 6000FC76        	  1743: 	bra			Monitor
                            	  1744: 		
                            	  1745: ;------------------------------------------------------------------------------
                            	  1746: ; Fill memory
                            	  1747: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1748: ; FW = fill words
                            	  1749: ; FL = fill longs
                            	  1750: ; F = fill bytes
                            	  1751: ;------------------------------------------------------------------------------
                            	  1752: 
                            	  1753: FillMem:
01:00004BC2 6100FC5C        	  1754: 	bsr			FromScreen
                            	  1755: 	;bsr		ScreenToAscii
01:00004BC6 1801            	  1756: 	move.b	d1,d4			; d4 = fill size
01:00004BC8 613E            	  1757: 	bsr			ignBlanks
01:00004BCA 610001F0        	  1758: 	bsr			GetHexNumber
01:00004BCE 2241            	  1759: 	move.l	d1,a1			; a1 = start
01:00004BD0 6136            	  1760: 	bsr			ignBlanks
01:00004BD2 610001E8        	  1761: 	bsr			GetHexNumber
01:00004BD6 2601            	  1762: 	move.l	d1,d3			; d3 = count
01:00004BD8 612E            	  1763: 	bsr			ignBlanks
01:00004BDA 610001E0        	  1764: 	bsr			GetHexNumber	; fill value
01:00004BDE 0C04004C        	  1765: 	cmpi.b	#'L',d4
01:00004BE2 660A            	  1766: 	bne			fmem1
                            	  1767: fmemL:
01:00004BE4 22C1            	  1768: 	move.l	d1,(a1)+
01:00004BE6 5383            	  1769: 	sub.l	#1,d3
01:00004BE8 66FA            	  1770: 	bne.s	fmemL
01:00004BEA 6000FC4A        	  1771: 	bra		Monitor
                            	  1772: fmem1
01:00004BEE 0C040057        	  1773: 	cmpi.b	#'W',d4
01:00004BF2 660A            	  1774: 	bne		fmemB
                            	  1775: fmemW:
01:00004BF4 32C1            	  1776: 	move.w	d1,(a1)+
01:00004BF6 5383            	  1777: 	sub.l	#1,d3
01:00004BF8 66FA            	  1778: 	bne.s	fmemW
01:00004BFA 6000FC3A        	  1779: 	bra		Monitor
                            	  1780: fmemB:
01:00004BFE 12C1            	  1781: 	move.b	d1,(a1)+
01:00004C00 5383            	  1782: 	sub.l	#1,d3
01:00004C02 66FA            	  1783: 	bne.s	fmemB
01:00004C04 6000FC30        	  1784: 	bra		Monitor
                            	  1785: 
                            	  1786: ;------------------------------------------------------------------------------
                            	  1787: ; Modifies:
                            	  1788: ;	a0	- text pointer
                            	  1789: ;------------------------------------------------------------------------------
                            	  1790: 
                            	  1791: ignBlanks:
01:00004C08 2F01            	  1792: 	move.l	d1,-(a7)
                            	  1793: .0001:
01:00004C0A 6100FC14        	  1794: 	bsr			FromScreen
01:00004C0E 0C010020        	  1795: 	cmpi.b	#' ',d1
01:00004C12 67F6            	  1796: 	beq.s		.0001
01:00004C14 5188            	  1797: 	lea			-8(a0),a0
01:00004C16 221F            	  1798: 	move.l	(a7)+,d1
01:00004C18 4E75            	  1799: 	rts
                            	  1800: 
                            	  1801: ;------------------------------------------------------------------------------
                            	  1802: ; Edit memory byte.
                            	  1803: ;------------------------------------------------------------------------------
                            	  1804: 
                            	  1805: EditMem:
01:00004C1A 61EC            	  1806: 	bsr		ignBlanks
01:00004C1C 6100019E        	  1807: 	bsr		GetHexNumber
01:00004C20 2241            	  1808: 	move.l	d1,a1
                            	  1809: edtmem1:
01:00004C22 61E4            	  1810: 	bsr		ignBlanks
01:00004C24 61000196        	  1811: 	bsr		GetHexNumber
01:00004C28 12C1            	  1812: 	move.b	d1,(a1)+
01:00004C2A 61DC            	  1813: 	bsr		ignBlanks
01:00004C2C 6100018E        	  1814: 	bsr		GetHexNumber
01:00004C30 12C1            	  1815: 	move.b	d1,(a1)+
01:00004C32 61D4            	  1816: 	bsr		ignBlanks
01:00004C34 61000186        	  1817: 	bsr		GetHexNumber
01:00004C38 12C1            	  1818: 	move.b	d1,(a1)+
01:00004C3A 61CC            	  1819: 	bsr		ignBlanks
01:00004C3C 6100017E        	  1820: 	bsr		GetHexNumber
01:00004C40 12C1            	  1821: 	move.b	d1,(a1)+
01:00004C42 61C4            	  1822: 	bsr		ignBlanks
01:00004C44 61000176        	  1823: 	bsr		GetHexNumber
01:00004C48 12C1            	  1824: 	move.b	d1,(a1)+
01:00004C4A 61BC            	  1825: 	bsr		ignBlanks
01:00004C4C 6100016E        	  1826: 	bsr		GetHexNumber
01:00004C50 12C1            	  1827: 	move.b	d1,(a1)+
01:00004C52 61B4            	  1828: 	bsr		ignBlanks
01:00004C54 61000166        	  1829: 	bsr		GetHexNumber
01:00004C58 12C1            	  1830: 	move.b	d1,(a1)+
01:00004C5A 61AC            	  1831: 	bsr		ignBlanks
01:00004C5C 6100015E        	  1832: 	bsr		GetHexNumber
01:00004C60 12C1            	  1833: 	move.b	d1,(a1)+
01:00004C62 6000FBD2        	  1834: 	bra		Monitor
                            	  1835: 
                            	  1836: ;------------------------------------------------------------------------------
                            	  1837: ; Execute code at the specified address.
                            	  1838: ;------------------------------------------------------------------------------
                            	  1839: 
                            	  1840: ExecuteCode:
01:00004C66 61A0            	  1841: 	bsr			ignBlanks
01:00004C68 61000152        	  1842: 	bsr			GetHexNumber
01:00004C6C 2041            	  1843: 	move.l	d1,a0
01:00004C6E 4E90            	  1844: 	jsr			(a0)
01:00004C70 6000FBC4        	  1845: 	bra     Monitor
                            	  1846: 
                            	  1847: ;------------------------------------------------------------------------------
                            	  1848: ; Do a memory dump of the requested location.
                            	  1849: ; D 0800 0850
                            	  1850: ;------------------------------------------------------------------------------
                            	  1851: 
                            	  1852: DumpMem:
01:00004C74 6192            	  1853: 	bsr			ignBlanks
01:00004C76 61000144        	  1854: 	bsr			GetHexNumber
01:00004C7A 6700FBBA        	  1855: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
01:00004C7E 2601            	  1856: 	move.l	d1,d3				; save off start of range
01:00004C80 6186            	  1857: 	bsr			ignBlanks
01:00004C82 61000138        	  1858: 	bsr			GetHexNumber
01:00004C86 6608            	  1859: 	bne.s		DumpMem1
01:00004C88 2203            	  1860: 	move.l	d3,d1
01:00004C8A 068100000040    	  1861: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1862: DumpMem1:
01:00004C90 2043            	  1863: 	move.l	d3,a0
01:00004C92 2241            	  1864: 	move.l	d1,a1
01:00004C94 6100F0AE        	  1865: 	bsr			CRLF
                            	  1866: .0001:
01:00004C98 B3C8            	  1867: 	cmpa.l	a0,a1
01:00004C9A 6300FB9A        	  1868: 	bls			Monitor
01:00004C9E 6102            	  1869: 	bsr			DisplayMem
01:00004CA0 60F6            	  1870: 	bra.s		.0001
                            	  1871: 
                            	  1872: ;------------------------------------------------------------------------------
                            	  1873: ; Display memory dump in a format suitable for edit.
                            	  1874: ;
                            	  1875: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  1876: ;
                            	  1877: ; Modifies:
                            	  1878: ;		d1,d2,a0
                            	  1879: ;------------------------------------------------------------------------------
                            	  1880: 
                            	  1881: DisplayMem:
01:00004CA2 123C003A        	  1882: 	move.b	#':',d1
01:00004CA6 6100F0E6        	  1883: 	bsr			DisplayChar
01:00004CAA 2208            	  1884: 	move.l	a0,d1
01:00004CAC 6100018E        	  1885: 	bsr			DisplayTetra
01:00004CB0 7407            	  1886: 	moveq		#7,d2
                            	  1887: dspmem1:
01:00004CB2 123C0020        	  1888: 	move.b	#' ',d1
01:00004CB6 6100F0D6        	  1889: 	bsr			DisplayChar
01:00004CBA 1218            	  1890: 	move.b	(a0)+,d1
01:00004CBC 6100018A        	  1891: 	bsr			DisplayByte
01:00004CC0 51CAFFF0        	  1892: 	dbra		d2,dspmem1
01:00004CC4 6100015C        	  1893: 	bsr			DisplayTwoSpaces
01:00004CC8 123C0022        	  1894: 	move.b	#34,d1
01:00004CCC 6100F0C0        	  1895: 	bsr			DisplayChar
01:00004CD0 5188            	  1896: 	lea			-8(a0),a0
01:00004CD2 7407            	  1897: 	moveq		#7,d2
                            	  1898: .0002:	
01:00004CD4 1218            	  1899: 	move.b	(a0)+,d1
01:00004CD6 B23C0020        	  1900: 	cmp.b		#' ',d1
01:00004CDA 6506            	  1901: 	blo.s		.0003
01:00004CDC B23C007F        	  1902: 	cmp.b		#127,d1
01:00004CE0 6304            	  1903: 	bls.s		.0001
                            	  1904: .0003:
01:00004CE2 123C002E        	  1905: 	move.b	#'.',d1
                            	  1906: .0001:
01:00004CE6 6100F0A6        	  1907: 	bsr			DisplayChar
01:00004CEA 51CAFFE8        	  1908: 	dbra		d2,.0002
01:00004CEE 123C0022        	  1909: 	move.b	#34,d1
01:00004CF2 6100F09A        	  1910: 	bsr			DisplayChar
01:00004CF6 6100F586        	  1911: 	bsr			CheckForCtrlC
01:00004CFA 6000F048        	  1912: 	bra			CRLF
                            	  1913: 
                            	  1914: ;------------------------------------------------------------------------------
                            	  1915: ; Dump Registers
                            	  1916: ;    The dump is in a format that allows the register value to be edited.
                            	  1917: ;
                            	  1918: ; RegD0 12345678
                            	  1919: ; RegD1 77777777
                            	  1920: ;	... etc
                            	  1921: ;------------------------------------------------------------------------------
                            	  1922: 
                            	  1923: DumpRegs:
01:00004CFE 6100F044        	  1924: 	bsr			CRLF
01:00004D02 303C000F        	  1925: 	move.w	#15,d0					; number of registers-1
01:00004D06 41FA007A        	  1926: 	lea			msg_reglist,a0	;
01:00004D0A 43FA0072        	  1927: 	lea			msg_regs,a1
01:00004D0E 45F900040100    	  1928: 	lea			Regsave,a2			; a2 points to register save area
                            	  1929: .0001:
01:00004D14 6100F2D6        	  1930: 	bsr			DisplayString
01:00004D18 1218            	  1931: 	move.b	(a0)+,d1
01:00004D1A 6100F072        	  1932: 	bsr			DisplayChar
01:00004D1E 1218            	  1933: 	move.b	(a0)+,d1
01:00004D20 6100F06C        	  1934: 	bsr			DisplayChar
01:00004D24 6100010E        	  1935: 	bsr			DisplaySpace
01:00004D28 221A            	  1936: 	move.l	(a2)+,d1
01:00004D2A 61000110        	  1937: 	bsr			DisplayTetra
01:00004D2E 6100F014        	  1938: 	bsr			CRLF
01:00004D32 51C8FFE0        	  1939: 	dbra		d0,.0001
01:00004D36 6100F2B4        	  1940: 	bsr			DisplayString
01:00004D3A 1218            	  1941: 	move.b	(a0)+,d1
01:00004D3C 6100F050        	  1942: 	bsr			DisplayChar
01:00004D40 1218            	  1943: 	move.b	(a0)+,d1
01:00004D42 6100F04A        	  1944: 	bsr			DisplayChar
01:00004D46 610000EC        	  1945: 	bsr			DisplaySpace
01:00004D4A 223900040144    	  1946: 	move.l	Regsave+$44,d1
01:00004D50 610000EA        	  1947: 	bsr			DisplayTetra
01:00004D54 6100EFEE        	  1948: 	bsr			CRLF
01:00004D58 6100F292        	  1949: 	bsr			DisplayString
01:00004D5C 1218            	  1950: 	move.b	(a0)+,d1
01:00004D5E 6100F02E        	  1951: 	bsr			DisplayChar
01:00004D62 1218            	  1952: 	move.b	(a0)+,d1
01:00004D64 6100F028        	  1953: 	bsr			DisplayChar
01:00004D68 610000CA        	  1954: 	bsr			DisplaySpace
01:00004D6C 323900040140    	  1955: 	move.w	Regsave+$40,d1
01:00004D72 610000CE        	  1956: 	bsr			DisplayWyde
01:00004D76 6100EFCC        	  1957: 	bsr			CRLF
01:00004D7A 6000FABA        	  1958: 	bra			Monitor
                            	  1959: 
                            	  1960: msg_regs:
01:00004D7E 526567          	  1961: 	dc.b	"Reg",0
01:00004D81 00
                            	  1962: msg_reglist:
01:00004D82 4430443144324433	  1963: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
01:00004D8A 4434443544364437
01:00004D92 4130413141324133
01:00004D9A 4134413541364137
01:00004DA2 50435352
01:00004DA6 00
                            	  1964: 
                            	  1965: 	align	1
                            	  1966: 
                            	  1967: ;------------------------------------------------------------------------------
                            	  1968: ;------------------------------------------------------------------------------
                            	  1969: 
                            	  1970: TestSerialReceive:
                            	  1971: .0002:
01:00004DA8 610002E8        	  1972: 	bsr			SerialPeekCharDirect
01:00004DAC 0C0100FF        	  1973: 	cmpi.b	#-1,d1
01:00004DB0 6704            	  1974: 	beq.s		.0001
01:00004DB2 6100EFDA        	  1975: 	bsr			DisplayChar
                            	  1976: .0001:	
01:00004DB6 6100F4C6        	  1977: 	bsr			CheckForCtrlC
01:00004DBA 60EC            	  1978: 	bra			.0002
                            	  1979: 	
                            	  1980: ;------------------------------------------------------------------------------
                            	  1981: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1982: ;
                            	  1983: ; Returns:
                            	  1984: ;		d0 = number of digits
                            	  1985: ;		d1 = value of number
                            	  1986: ;		zf = number of digits == 0
                            	  1987: ;------------------------------------------------------------------------------
                            	  1988: 
                            	  1989: GetHexNumber:
01:00004DBC 2F02            	  1990: 	move.l	d2,-(a7)
01:00004DBE 7400            	  1991: 	clr.l		d2
01:00004DC0 7000            	  1992: 	moveq		#0,d0
                            	  1993: .0002:
01:00004DC2 6100FA5C        	  1994: 	bsr			FromScreen
01:00004DC6 6120            	  1995: 	bsr			AsciiToHexNybble
01:00004DC8 B23C00FF        	  1996: 	cmp.b		#$ff,d1
01:00004DCC 6712            	  1997: 	beq.s		.0001
01:00004DCE E98A            	  1998: 	lsl.l		#4,d2
01:00004DD0 02810000000F    	  1999: 	andi.l	#$0f,d1
01:00004DD6 8481            	  2000: 	or.l		d1,d2
01:00004DD8 5240            	  2001: 	addq		#1,d0
01:00004DDA 0C000008        	  2002: 	cmpi.b	#8,d0
01:00004DDE 65E2            	  2003: 	blo.s		.0002
                            	  2004: .0001:
01:00004DE0 2202            	  2005: 	move.l	d2,d1
01:00004DE2 241F            	  2006: 	move.l	(a7)+,d2
01:00004DE4 4A00            	  2007: 	tst.b		d0
01:00004DE6 4E75            	  2008: 	rts	
                            	  2009: 
                            	  2010: ;------------------------------------------------------------------------------
                            	  2011: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  2012: ; to a hex nybble.
                            	  2013: ;------------------------------------------------------------------------------
                            	  2014: 
                            	  2015: AsciiToHexNybble:
01:00004DE8 0C010030        	  2016: 	cmpi.b	#'0',d1
01:00004DEC 6530            	  2017: 	blo.s		gthx3
01:00004DEE 0C010039        	  2018: 	cmpi.b	#'9',d1
01:00004DF2 6206            	  2019: 	bhi.s		gthx5
01:00004DF4 04010030        	  2020: 	subi.b	#'0',d1
01:00004DF8 4E75            	  2021: 	rts
                            	  2022: gthx5:
01:00004DFA 0C010041        	  2023: 	cmpi.b	#'A',d1
01:00004DFE 651E            	  2024: 	blo.s		gthx3
01:00004E00 0C010046        	  2025: 	cmpi.b	#'F',d1
01:00004E04 6206            	  2026: 	bhi.s		gthx6
01:00004E06 060100C9        	  2027: 	addi.b	#10-'A',d1
01:00004E0A 4E75            	  2028: 	rts
                            	  2029: gthx6:
01:00004E0C 0C010061        	  2030: 	cmpi.b	#'a',d1
01:00004E10 650C            	  2031: 	blo.s		gthx3
01:00004E12 0C010066        	  2032: 	cmpi.b	#'f',d1
01:00004E16 6206            	  2033: 	bhi.s		gthx3
01:00004E18 060100A9        	  2034: 	addi.b	#10-'a',d1
01:00004E1C 4E75            	  2035: 	rts
                            	  2036: gthx3:
01:00004E1E 72FF            	  2037: 	moveq	#-1,d1		; not a hex number
01:00004E20 4E75            	  2038: 	rts
                            	  2039: 
                            	  2040: ;------------------------------------------------------------------------------
                            	  2041: ;------------------------------------------------------------------------------
                            	  2042: 
                            	  2043: DisplayTwoSpaces:
01:00004E22 2F01            	  2044: 	move.l	d1,-(a7)
01:00004E24 123C0020        	  2045: 	move.b	#' ',d1
01:00004E28 6100EF64        	  2046: 	bsr			DisplayChar
                            	  2047: dspspc1:
01:00004E2C 6100EF60        	  2048: 	bsr			DisplayChar
01:00004E30 221F            	  2049: 	move.l	(a7)+,d1
01:00004E32 4E75            	  2050: 	rts
                            	  2051: 
                            	  2052: DisplaySpace:
01:00004E34 2F01            	  2053: 	move.l	d1,-(a7)
01:00004E36 123C0020        	  2054: 	move.b	#' ',d1
01:00004E3A 60F0            	  2055: 	bra			dspspc1
                            	  2056: 
                            	  2057: ;------------------------------------------------------------------------------
                            	  2058: ; Display the 32 bit word in D1.L
                            	  2059: ;------------------------------------------------------------------------------
                            	  2060: 
                            	  2061: DisplayTetra:
01:00004E3C 4841            	  2062: 	swap	d1
01:00004E3E 6102            	  2063: 	bsr		DisplayWyde
01:00004E40 4841            	  2064: 	swap	d1
                            	  2065: 
                            	  2066: ;------------------------------------------------------------------------------
                            	  2067: ; Display the byte in D1.W
                            	  2068: ;------------------------------------------------------------------------------
                            	  2069: 
                            	  2070: DisplayWyde:
01:00004E42 E059            	  2071: 	ror.w		#8,d1
01:00004E44 6102            	  2072: 	bsr			DisplayByte
01:00004E46 E159            	  2073: 	rol.w		#8,d1
                            	  2074: 
                            	  2075: ;------------------------------------------------------------------------------
                            	  2076: ; Display the byte in D1.B
                            	  2077: ;------------------------------------------------------------------------------
                            	  2078: 
                            	  2079: DisplayByte:
01:00004E48 E819            	  2080: 	ror.b		#4,d1
01:00004E4A 6102            	  2081: 	bsr			DisplayNybble
01:00004E4C E919            	  2082: 	rol.b		#4,d1
                            	  2083: 
                            	  2084: ;------------------------------------------------------------------------------
                            	  2085: ; Display nybble in D1.B
                            	  2086: ;------------------------------------------------------------------------------
                            	  2087: 
                            	  2088: DisplayNybble:
01:00004E4E 2F01            	  2089: 	move.l	d1,-(a7)
01:00004E50 0201000F        	  2090: 	andi.b	#$F,d1
01:00004E54 06010030        	  2091: 	addi.b	#'0',d1
01:00004E58 0C010039        	  2092: 	cmpi.b	#'9',d1
01:00004E5C 6302            	  2093: 	bls.s		.0001
01:00004E5E 5E01            	  2094: 	addi.b	#7,d1
                            	  2095: .0001:
01:00004E60 6100EF2C        	  2096: 	bsr			DisplayChar
01:00004E64 221F            	  2097: 	move.l	(a7)+,d1
01:00004E66 4E75            	  2098: 	rts
                            	  2099: 
                            	  2100: ;------------------------------------------------------------------------------
                            	  2101: ;------------------------------------------------------------------------------
                            	  2102: ;
                            	  2103: ;DisplayHexNumber:
                            	  2104: ;	move.w	#$A6A6,leds		; diagnostics
                            	  2105: ;	move.l	#VDGREG,a6
                            	  2106: ;	move.w	#7,d2		; number-1 of digits to display
                            	  2107: ;disphnum1:
                            	  2108: ;	move.b	d1,d0		; get digit into d0.b
                            	  2109: ;	andi.w	#$0f,d0
                            	  2110: ;	cmpi.w	#$09,d0
                            	  2111: ;	bls.s	disphnum2
                            	  2112: ;	addi.w	#7,d0
                            	  2113: ;disphnum2:
                            	  2114: ;	addi.w	#$30,d0	; convert to display char
                            	  2115: ;	move.w	d2,d3		; char count into d3
                            	  2116: ;	asl.w	#3,d3		; scale * 8
                            	  2117: ;disphnum3:
                            	  2118: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  2119: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  2120: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  2121: ;	ext.w	d0						; zero out high order bits
                            	  2122: ;	move.w	d0,$420(a6)			; set char code
                            	  2123: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  2124: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  2125: ;	move.w	d3,$426(a6)			; set x pos
                            	  2126: ;	move.w	#8,$428(a6)			; set y pos
                            	  2127: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  2128: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  2129: ;	ror.l	#4,d1					; rot to next digit
                            	  2130: ;	dbeq	d2,disphnum1
                            	  2131: ;	jmp		(a5)
                            	  2132: 
                            	  2133: ;==============================================================================
                            	  2134: ; Load an S19 format file
                            	  2135: ;==============================================================================
                            	  2136: ;
                            	  2137: LoadS19:
01:00004E68 6100EEDA        	  2138: 	bsr			CRLF
01:00004E6C 6012            	  2139: 	bra			ProcessRec
                            	  2140: NextRec:
01:00004E6E 61000164        	  2141: 	bsr			sGetChar
01:00004E72 0C00000A        	  2142: 	cmpi.b	#LF,d0
01:00004E76 66F6            	  2143: 	bne			NextRec
01:00004E78 123C002E        	  2144: 	move.b	#'.',d1
01:00004E7C 6100EF10        	  2145: 	bsr			DisplayChar
                            	  2146: ProcessRec
01:00004E80 61000152        	  2147: 	bsr			sGetChar
01:00004E84 1800            	  2148: 	move.b	d0,d4
01:00004E86 0C04001A        	  2149: 	cmpi.b	#26,d4		; CTRL-Z ?
01:00004E8A 6700F9AA        	  2150: 	beq			Monitor
01:00004E8E 0C040053        	  2151: 	cmpi.b	#'S',d4
01:00004E92 66DA            	  2152: 	bne			NextRec
01:00004E94 6100013E        	  2153: 	bsr			sGetChar
01:00004E98 1800            	  2154: 	move.b	d0,d4
01:00004E9A 0C040030        	  2155: 	cmpi.b	#'0',d4
01:00004E9E 65CE            	  2156: 	blo			NextRec
01:00004EA0 0C040039        	  2157: 	cmpi.b	#'9',d4		; d4 = record type
01:00004EA4 62C8            	  2158: 	bhi			NextRec
01:00004EA6 6100012C        	  2159: 	bsr			sGetChar
01:00004EAA 6100FF3C        	  2160: 	bsr			AsciiToHexNybble
01:00004EAE 1401            	  2161: 	move.b	d1,d2
01:00004EB0 61000122        	  2162: 	bsr		sGetChar
01:00004EB4 6100FF32        	  2163: 	bsr		AsciiToHexNybble
01:00004EB8 E90A            	  2164: 	lsl.b	#4,d2
01:00004EBA 8202            	  2165: 	or.b	d2,d1		; d1 = byte count
01:00004EBC 1601            	  2166: 	move.b	d1,d3		; d3 = byte count
01:00004EBE 0C040030        	  2167: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
01:00004EC2 67AA            	  2168: 	beq		NextRec
01:00004EC4 0C040031        	  2169: 	cmpi.b	#'1',d4
01:00004EC8 676C            	  2170: 	beq		ProcessS1
01:00004ECA 0C040032        	  2171: 	cmpi.b	#'2',d4
01:00004ECE 676A            	  2172: 	beq		ProcessS2
01:00004ED0 0C040033        	  2173: 	cmpi.b	#'3',d4
01:00004ED4 6768            	  2174: 	beq		ProcessS3
01:00004ED6 0C040035        	  2175: 	cmpi.b	#'5',d4		; record count record, ignore
01:00004EDA 6792            	  2176: 	beq		NextRec
01:00004EDC 0C040037        	  2177: 	cmpi.b	#'7',d4
01:00004EE0 6760            	  2178: 	beq		ProcessS7
01:00004EE2 0C040038        	  2179: 	cmpi.b	#'8',d4
01:00004EE6 6766            	  2180: 	beq		ProcessS8
01:00004EE8 0C040039        	  2181: 	cmpi.b	#'9',d4
01:00004EEC 676C            	  2182: 	beq		ProcessS9
01:00004EEE 6000FF7E        	  2183: 	bra		NextRec
                            	  2184: 
                            	  2185: pcssxa
01:00004EF2 024300FF        	  2186: 	andi.w	#$ff,d3
01:00004EF6 5343            	  2187: 	subi.w	#1,d3			; one less for dbra
                            	  2188: .0001
01:00004EF8 7400            	  2189: 	clr.l		d2
01:00004EFA 610000D8        	  2190: 	bsr			sGetChar
01:00004EFE 6100FEE8        	  2191: 	bsr			AsciiToHexNybble
01:00004F02 E98A            	  2192: 	lsl.l		#4,d2
01:00004F04 8401            	  2193: 	or.b		d1,d2
01:00004F06 610000CC        	  2194: 	bsr			sGetChar
01:00004F0A 6100FEDC        	  2195: 	bsr			AsciiToHexNybble
01:00004F0E E98A            	  2196: 	lsl.l		#4,d2
01:00004F10 8401            	  2197: 	or.b		d1,d2
01:00004F12 12C2            	  2198: 	move.b	d2,(a1)+
01:00004F14 51CBFFE2        	  2199: 	dbra		d3,.0001
                            	  2200: ; Get the checksum byte
01:00004F18 7400            	  2201: 	clr.l		d2
01:00004F1A 610000B8        	  2202: 	bsr			sGetChar
01:00004F1E 6100FEC8        	  2203: 	bsr			AsciiToHexNybble
01:00004F22 E98A            	  2204: 	lsl.l		#4,d2
01:00004F24 8401            	  2205: 	or.b		d1,d2
01:00004F26 610000AC        	  2206: 	bsr			sGetChar
01:00004F2A 6100FEBC        	  2207: 	bsr			AsciiToHexNybble
01:00004F2E E98A            	  2208: 	lsl.l		#4,d2
01:00004F30 8401            	  2209: 	or.b		d1,d2
01:00004F32 6000FF3A        	  2210: 	bra			NextRec
                            	  2211: 
                            	  2212: ProcessS1:
01:00004F36 612E            	  2213: 	bsr			S19Get16BitAddress
01:00004F38 60B8            	  2214: 	bra			pcssxa
                            	  2215: ProcessS2:
01:00004F3A 6136            	  2216: 	bsr			S19Get24BitAddress
01:00004F3C 60B4            	  2217: 	bra			pcssxa
                            	  2218: ProcessS3:
01:00004F3E 613E            	  2219: 	bsr			S19Get32BitAddress
01:00004F40 60B0            	  2220: 	bra			pcssxa
                            	  2221: ProcessS7:
01:00004F42 613A            	  2222: 	bsr			S19Get32BitAddress
01:00004F44 23C900040008    	  2223: 	move.l	a1,S19StartAddress
01:00004F4A 6000F8EA        	  2224: 	bra			Monitor
                            	  2225: ProcessS8:
01:00004F4E 6122            	  2226: 	bsr			S19Get24BitAddress
01:00004F50 23C900040008    	  2227: 	move.l	a1,S19StartAddress
01:00004F56 6000F8DE        	  2228: 	bra			Monitor
                            	  2229: ProcessS9:
01:00004F5A 610A            	  2230: 	bsr			S19Get16BitAddress
01:00004F5C 23C900040008    	  2231: 	move.l	a1,S19StartAddress
01:00004F62 6000F8D2        	  2232: 	bra			Monitor
                            	  2233: 
                            	  2234: S19Get16BitAddress:
01:00004F66 7400            	  2235: 	clr.l		d2
01:00004F68 616A            	  2236: 	bsr			sGetChar
01:00004F6A 6100FE7C        	  2237: 	bsr			AsciiToHexNybble
01:00004F6E 1401            	  2238: 	move.b	d1,d2
01:00004F70 603E            	  2239: 	bra			S1932b
                            	  2240: 
                            	  2241: S19Get24BitAddress:
01:00004F72 7400            	  2242: 	clr.l	d2
01:00004F74 615E            	  2243: 	bsr		sGetChar
01:00004F76 6100FE70        	  2244: 	bsr		AsciiToHexNybble
01:00004F7A 1401            	  2245: 	move.b	d1,d2
01:00004F7C 601E            	  2246: 	bra		S1932a
                            	  2247: 
                            	  2248: S19Get32BitAddress:
01:00004F7E 7400            	  2249: 	clr.l	d2
01:00004F80 6152            	  2250: 	bsr			sGetChar
01:00004F82 6100FE64        	  2251: 	bsr			AsciiToHexNybble
01:00004F86 1401            	  2252: 	move.b	d1,d2
01:00004F88 614A            	  2253: 	bsr			sGetChar
01:00004F8A 6100FE5C        	  2254: 	bsr			AsciiToHexNybble
01:00004F8E E98A            	  2255: 	lsl.l		#4,d2
01:00004F90 8401            	  2256: 	or.b		d1,d2
01:00004F92 6140            	  2257: 	bsr			sGetChar
01:00004F94 6100FE52        	  2258: 	bsr			AsciiToHexNybble
01:00004F98 E98A            	  2259: 	lsl.l		#4,d2
01:00004F9A 8401            	  2260: 	or.b		d1,d2
                            	  2261: S1932a:
01:00004F9C 6136            	  2262: 	bsr			sGetChar
01:00004F9E 6100FE48        	  2263: 	bsr			AsciiToHexNybble
01:00004FA2 E98A            	  2264: 	lsl.l		#4,d2
01:00004FA4 8401            	  2265: 	or.b		d1,d2
01:00004FA6 612C            	  2266: 	bsr			sGetChar
01:00004FA8 6100FE3E        	  2267: 	bsr			AsciiToHexNybble
01:00004FAC E98A            	  2268: 	lsl.l		#4,d2
01:00004FAE 8401            	  2269: 	or.b		d1,d2
                            	  2270: S1932b:
01:00004FB0 6122            	  2271: 	bsr			sGetChar
01:00004FB2 6100FE34        	  2272: 	bsr			AsciiToHexNybble
01:00004FB6 E98A            	  2273: 	lsl.l		#4,d2
01:00004FB8 8401            	  2274: 	or.b		d1,d2
01:00004FBA 6118            	  2275: 	bsr			sGetChar
01:00004FBC 6100FE2A        	  2276: 	bsr			AsciiToHexNybble
01:00004FC0 E98A            	  2277: 	lsl.l		#4,d2
01:00004FC2 8401            	  2278: 	or.b		d1,d2
01:00004FC4 610E            	  2279: 	bsr			sGetChar
01:00004FC6 6100FE20        	  2280: 	bsr			AsciiToHexNybble
01:00004FCA E98A            	  2281: 	lsl.l		#4,d2
01:00004FCC 8401            	  2282: 	or.b		d1,d2
01:00004FCE 7800            	  2283: 	clr.l		d4
01:00004FD0 2242            	  2284: 	move.l	d2,a1
01:00004FD2 4E75            	  2285: 	rts
                            	  2286: 
                            	  2287: ;------------------------------------------------------------------------------
                            	  2288: ; Get a character from auxillary input, checking the keyboard status for a
                            	  2289: ; CTRL-C
                            	  2290: ;------------------------------------------------------------------------------
                            	  2291: 
                            	  2292: sGetChar:
01:00004FD4 6100F2A8        	  2293: 	bsr			CheckForCtrlC
                            	  2294: ;	bsr			CheckForKey
                            	  2295: ;	beq			.0001
                            	  2296: ;	moveq		#5,d0					; GetKey
                            	  2297: ;	trap		#15
                            	  2298: ;	cmpi.b	#CTRLC,d1
                            	  2299: ;	beq			Monitor
                            	  2300: .0001:
01:00004FD8 7024            	  2301: 	moveq		#36,d0				; serial get char from buffer
01:00004FDA 4E4F            	  2302: 	trap		#15
01:00004FDC 0C0100FF        	  2303: 	cmpi.b	#-1,d1
01:00004FE0 67F2            	  2304: 	beq.s		sGetChar
01:00004FE2 2001            	  2305: 	move.l	d1,d0					; expected in d0
01:00004FE4 4E75            	  2306: 	rts
                            	  2307: 
                            	  2308: AudioInputTest:
01:00004FE6 4E75            	  2309: 	rts
                            	  2310: BouncingBalls:
01:00004FE8 4E75            	  2311: 	rts
                            	  2312: GraphicsDemo:
01:00004FEA 4E75            	  2313: 	rts
                            	  2314: ClearScreen:
01:00004FEC 6000ECFE        	  2315: 	bra		clear_screen
01:00004FF0 4E75            	  2316: 	rts
                            	  2317: 
                            	  2318: AUXIN:
                            	  2319: 
                            	  2320: ;------------------------------------------------------------------------------
                            	  2321: ; Initialize the serial port an enhanced 6551 circuit.
                            	  2322: ;
                            	  2323: ; Select internal baud rate clock divider for 9600 baud
                            	  2324: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	  2325: ; Note that the byte order is swapped.
                            	  2326: ;------------------------------------------------------------------------------
                            	  2327: 
                            	  2328: SerialInit:
01:00004FF2 427900100032    	  2329: 	clr.w		SerHeadRcv					; clear receive buffer indexes
01:00004FF8 427900100030    	  2330: 	clr.w		SerTailRcv
01:00004FFE 423900100034    	  2331: 	clr.b		SerRcvXon						; and Xon,Xoff flags
01:00005004 423900100035    	  2332: 	clr.b		SerRcvXoff
01:0000500A 203C09000000    	  2333: 	move.l	#$09000000,d0				; dtr,rts active, rxint enabled, no parity
01:00005010 23C0FD060008    	  2334: 	move.l	d0,ACIA+ACIA_CMD
                            	  2335: ;	move.l	#$1E00F700,d0				; fifos enabled
01:00005016 203C1E000000    	  2336: 	move.l	#$1E000000,d0				; fifos disabled
01:0000501C 23C0FD06000C    	  2337: 	move.l	d0,ACIA+ACIA_CTRL
01:00005022 4E75            	  2338: 	rts
                            	  2339: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	  2340: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2341: ;	move.l	#300000,d2					; wait 100 ms
                            	  2342: ;	bra			.0001
                            	  2343: ;.0003:
                            	  2344: ;	swap		d2
                            	  2345: ;.0001:
                            	  2346: ;	nop
                            	  2347: ;	dbra		d2,.0001
                            	  2348: ;.0002:
                            	  2349: ;	swap		d2
                            	  2350: ;	dbra		d2,.0003
                            	  2351: ;	move.l	#$07000000,d0				; clear break
                            	  2352: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2353: ;	rts
                            	  2354: 	
                            	  2355: ;------------------------------------------------------------------------------
                            	  2356: ; SerialGetChar
                            	  2357: ;
                            	  2358: ; Check the serial port buffer to see if there's a char available. If there's
                            	  2359: ; a char available then return it. If the buffer is almost empty then send an
                            	  2360: ; XON.
                            	  2361: ;
                            	  2362: ; Stack Space:
                            	  2363: ;		2 words
                            	  2364: ; Parameters:
                            	  2365: ;		none
                            	  2366: ; Modifies:
                            	  2367: ;		d0,a0
                            	  2368: ; Returns:
                            	  2369: ;		d1 = character or -1
                            	  2370: ;------------------------------------------------------------------------------
                            	  2371: 
                            	  2372: SerialGetChar:
01:00005024 610000BC        	  2373: 	bsr				SerialRcvCount			; check number of chars in receive buffer
01:00005028 0C400008        	  2374: 	cmpi.w		#8,d0								; less than 8?
01:0000502C 621A            	  2375: 	bhi				.sgc2
01:0000502E 4A3900100034    	  2376: 	tst.b			SerRcvXon						; skip sending XON if already sent
01:00005034 6612            	  2377: 	bne	  		.sgc2            		; XON already sent?
01:00005036 123C0011        	  2378: 	move.b		#XON,d1							; if <8 send an XON
01:0000503A 423900100035    	  2379: 	clr.b			SerRcvXoff					; clear XOFF status
01:00005040 13C100100034    	  2380: 	move.b		d1,SerRcvXon				; flag so we don't send it multiple times
01:00005046 616E            	  2381: 	bsr				SerialPutChar				; send it
                            	  2382: .sgc2:
01:00005048 323900100032    	  2383: 	move.w		SerHeadRcv,d1				; check if anything is in buffer
01:0000504E B27900100030    	  2384: 	cmp.w			SerTailRcv,d1
01:00005054 671A            	  2385: 	beq				.NoChars						; no?
01:00005056 41F900101000    	  2386: 	lea				SerRcvBuf,a0
01:0000505C 12301000        	  2387: 	move.b		(a0,d1.w),d1				; get byte from buffer
01:00005060 527900100032    	  2388: 	addi.w		#1,SerHeadRcv
01:00005066 02790FFF00100032	  2389: 	andi.w		#$FFF,SerHeadRcv		; 4k wrap around
01:0000506E 6002            	  2390: 	bra				.Xit
                            	  2391: .NoChars:
01:00005070 72FF            	  2392: 	moveq			#-1,d1
                            	  2393: .Xit:
01:00005072 4E75            	  2394: 	rts
                            	  2395: 
                            	  2396: ;------------------------------------------------------------------------------
                            	  2397: ; SerialPeekChar
                            	  2398: ;
                            	  2399: ; Check the serial port buffer to see if there's a char available. If there's
                            	  2400: ; a char available then return it. But don't update the buffer indexes. No need
                            	  2401: ; to send an XON here.
                            	  2402: ;
                            	  2403: ; Stack Space:
                            	  2404: ;		0 words
                            	  2405: ; Parameters:
                            	  2406: ;		none
                            	  2407: ; Modifies:
                            	  2408: ;		a0
                            	  2409: ; Returns:
                            	  2410: ;		d1 = character or -1
                            	  2411: ;------------------------------------------------------------------------------
                            	  2412: 
                            	  2413: SerialPeekChar:
01:00005074 323900100032    	  2414: 	move.w	SerHeadRcv,d1		; check if anything is in buffer
01:0000507A B27900100030    	  2415: 	cmp.w		SerTailRcv,d1
01:00005080 670C            	  2416: 	beq			.NoChars				; no?
01:00005082 41F900101000    	  2417: 	lea			SerRcvBuf,a0
01:00005088 12301000        	  2418: 	move.b	(a0,d1.w),d1		; get byte from buffer
01:0000508C 6002            	  2419: 	bra			.Xit
                            	  2420: .NoChars:
01:0000508E 72FF            	  2421: 	moveq		#-1,d1
                            	  2422: .Xit:
01:00005090 4E75            	  2423: 	rts
                            	  2424: 
                            	  2425: ;------------------------------------------------------------------------------
                            	  2426: ; SerialPeekChar
                            	  2427: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2428: ; buffer.
                            	  2429: ;
                            	  2430: ; Stack Space:
                            	  2431: ;		0 words
                            	  2432: ; Parameters:
                            	  2433: ;		none
                            	  2434: ; Modifies:
                            	  2435: ;		d
                            	  2436: ; Returns:
                            	  2437: ;		d1 = character or -1
                            	  2438: ;------------------------------------------------------------------------------
                            	  2439: 
                            	  2440: SerialPeekCharDirect:
01:00005092 2239FD060004    	  2441: 	move.l	ACIA+ACIA_STAT,d1	; get serial status
01:00005098 E159            	  2442: 	rol.w		#8,d1							; swap byte order
01:0000509A 4841            	  2443: 	swap		d1
01:0000509C E159            	  2444: 	rol.w		#8,d1
01:0000509E 08010003        	  2445: 	btst		#3,d1							; look for Rx not empty
01:000050A2 670A            	  2446: 	beq.s		.0001
01:000050A4 7200            	  2447: 	moveq.l	#0,d1							; clear upper bits of return value
01:000050A6 1239FD060000    	  2448: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
01:000050AC 4E75            	  2449: 	rts												; return
                            	  2450: .0001:
01:000050AE 72FF            	  2451: 	moveq		#-1,d1
01:000050B0 4E75            	  2452: 	rts
                            	  2453: 
                            	  2454: bus_err:
                            	  2455: .0001:
01:000050B2 4E71            	  2456: 	nop
01:000050B4 60FC            	  2457: 	bra			.0001
                            	  2458: 
                            	  2459: ;------------------------------------------------------------------------------
                            	  2460: ; SerialPutChar
                            	  2461: ;    Put a character to the serial transmitter. This routine blocks until the
                            	  2462: ; transmitter is empty. 
                            	  2463: ;
                            	  2464: ; Stack Space
                            	  2465: ;		0 words
                            	  2466: ; Parameters:
                            	  2467: ;		d1.b = character to put
                            	  2468: ; Modifies:
                            	  2469: ;		none
                            	  2470: ;------------------------------------------------------------------------------
                            	  2471: 
                            	  2472: SerialPutChar:
01:000050B6 48E7C000        	  2473: 	movem.l	d0/d1,-(a7)				; push d0,d1
                            	  2474: .0001:
01:000050BA 2039FD060004    	  2475: 	move.l	ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
01:000050C0 E158            	  2476: 	rol.w		#8,d0
01:000050C2 4840            	  2477: 	swap		d0
01:000050C4 E158            	  2478: 	rol.w		#8,d0
01:000050C6 08000004        	  2479: 	btst		#4,d0							; bit #4 of the status reg
01:000050CA 67EE            	  2480: 	beq.s		.0001			    		; branch if transmitter is not empty
01:000050CC 610C            	  2481: 	bsr			rbo
01:000050CE 23C1FD060000    	  2482: 	move.l	d1,ACIA+ACIA_TX		; send the byte
01:000050D4 4CDF0003        	  2483: 	movem.l	(a7)+,d0/d1				; pop d0,d1
01:000050D8 4E75            	  2484: 	rts
                            	  2485: 	
                            	  2486: ;------------------------------------------------------------------------------
                            	  2487: ; Reverse the order of bytes in d1.
                            	  2488: ;------------------------------------------------------------------------------
                            	  2489: 
                            	  2490: rbo:
01:000050DA E159            	  2491: 	rol.w		#8,d1
01:000050DC 4841            	  2492: 	swap		d1
01:000050DE E159            	  2493: 	rol.w		#8,d1
01:000050E0 4E75            	  2494: 	rts
                            	  2495: 
                            	  2496: ;------------------------------------------------------------------------------
                            	  2497: ; Calculate number of character in input buffer
                            	  2498: ;
                            	  2499: ; Returns:
                            	  2500: ;		d0 = number of bytes in buffer.
                            	  2501: ;------------------------------------------------------------------------------
                            	  2502: 
                            	  2503: SerialRcvCount:
01:000050E2 303900100030    	  2504: 	move.w	SerTailRcv,d0
01:000050E8 907900100032    	  2505: 	sub.w		SerHeadRcv,d0
01:000050EE 6C10            	  2506: 	bge			.0001
01:000050F0 303C1000        	  2507: 	move.w	#$1000,d0
01:000050F4 907900100032    	  2508: 	sub.w		SerHeadRcv,d0
01:000050FA D07900100030    	  2509: 	add.w		SerTailRcv,d0
                            	  2510: .0001:
01:00005100 4E75            	  2511: 	rts
                            	  2512: 
                            	  2513: ;------------------------------------------------------------------------------
                            	  2514: ; Serial IRQ routine
                            	  2515: ;
                            	  2516: ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                            	  2517: ; Received characters are buffered. If the buffer becomes full, new characters
                            	  2518: ; will be lost.
                            	  2519: ;
                            	  2520: ; Parameters:
                            	  2521: ;		none
                            	  2522: ; Modifies:
                            	  2523: ;		none
                            	  2524: ; Returns:
                            	  2525: ;		none
                            	  2526: ;------------------------------------------------------------------------------
                            	  2527: 
                            	  2528: SerialIRQ:
01:00005102 48E7C080        	  2529: 	movem.l	d0/d1/a0,-(a7)
                            	  2530: sirqNxtByte:
01:00005106 2239FD060004    	  2531: 	move.l	ACIA+ACIA_STAT,d1		; check the status
01:0000510C 61CC            	  2532: 	bsr			rbo
01:0000510E 08010003        	  2533: 	btst		#3,d1								; bit 3 = rx full
01:00005112 675E            	  2534: 	beq			notRxInt
01:00005114 2239FD060000    	  2535: 	move.l	ACIA+ACIA_RX,d1
01:0000511A 61BE            	  2536: 	bsr			rbo
                            	  2537: sirq0001:
01:0000511C 303900100030    	  2538: 	move.w	SerTailRcv,d0				; check if recieve buffer full
01:00005122 5240            	  2539: 	addi.w	#1,d0
01:00005124 02400FFF        	  2540: 	andi.w	#$FFF,d0
01:00005128 B07900100032    	  2541: 	cmp.w		SerHeadRcv,d0
01:0000512E 6742            	  2542: 	beq			sirqRxFull
01:00005130 33C000100030    	  2543: 	move.w	d0,SerTailRcv				; update tail pointer
01:00005136 5340            	  2544: 	subi.w	#1,d0								; backup
01:00005138 02400FFF        	  2545: 	andi.w	#$FFF,d0
01:0000513C 41F900101000    	  2546: 	lea			SerRcvBuf,a0				; a0 = buffer address
01:00005142 11810000        	  2547: 	move.b	d1,(a0,d0.w)				; store recieved byte in buffer
01:00005146 4A3900100035    	  2548: 	tst.b		SerRcvXoff					; check if xoff already sent
01:0000514C 66B8            	  2549: 	bne			sirqNxtByte
01:0000514E 6192            	  2550: 	bsr			SerialRcvCount			; if more than 4080 chars in buffer
01:00005150 0C400FF0        	  2551: 	cmpi.w	#4080,d0
01:00005154 65B0            	  2552: 	blo			sirqNxtByte
01:00005156 123C0013        	  2553: 	move.b	#XOFF,d1						; send an XOFF
01:0000515A 423900100034    	  2554: 	clr.b		SerRcvXon						; clear XON status
01:00005160 13C100100035    	  2555: 	move.b	d1,SerRcvXoff				; set XOFF status
01:00005166 6100FF72        	  2556: 	bsr			rbo
01:0000516A 23C1FD060000    	  2557: 	move.l	d1,ACIA+ACIA_TX
01:00005170 6094            	  2558: 	bra			sirqNxtByte     		; check the status for another byte
                            	  2559: sirqRxFull:
                            	  2560: notRxInt:
01:00005172 4CDF0103        	  2561: 	movem.l	(a7)+,d0/d1/a0
01:00005176 4E75            	  2562: 	rts
                            	  2563: 
                            	  2564: nmeSerial:
01:00005178 53657269616C    	  2565: 	dc.b		"Serial",0
01:0000517E 00
                            	  2566: 
                            	  2567: 
                            	  2568: ;------------------------------------------------------------------------------
                            	  2569: ;------------------------------------------------------------------------------
                            	  2570: 	even
                            	  2571: 
                            	  2572: trap3:
                            	  2573: 	; First save all registers
01:00005180 48F9FFFF00040100	  2574: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
01:00005188 33DF00040140    	  2575: 	move.w		(a7)+,Regsave+$40
01:0000518E 23DF00040144    	  2576: 	move.l		(a7)+,Regsave+$44
01:00005194 2E7C00040FFC    	  2577: 	move.l		#$40FFC,a7			; reset stack pointer
01:0000519A 46FC2500        	  2578: 	move.w		#$2500,sr				; enable interrupts
01:0000519E 303900040202    	  2579: 	move.w		NumSetBreakpoints,d0
01:000051A4 5340            	  2580: 	subi.w		#1,d0
01:000051A6 41F900040220    	  2581: 	lea				Breakpoints,a0
01:000051AC 223900040144    	  2582: 	move.l		Regsave+$44,d1
                            	  2583: .0001:
01:000051B2 B298            	  2584: 	cmp.l			(a0)+,d1
01:000051B4 6708            	  2585: 	beq.s			ProcessBreakpoint
01:000051B6 51C8FFFA        	  2586: 	dbra			d0,.0001
01:000051BA 6000F67A        	  2587: 	bra				Monitor					; not a breakpoint
                            	  2588: ProcessBreakpoint:
01:000051BE 6104            	  2589: 	bsr				DisarmAllBreakpoints
01:000051C0 6000FB3C        	  2590: 	bra				DumpRegs
                            	  2591: 
                            	  2592: ;------------------------------------------------------------------------------
                            	  2593: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  2594: ;------------------------------------------------------------------------------
                            	  2595: 
                            	  2596: DisarmAllBreakpoints:
01:000051C4 48E780E0        	  2597: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
01:000051C8 303900040202    	  2598: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
01:000051CE 0C400008        	  2599: 	cmpi.w	#numBreakpoints,d0		; check for valid number
01:000051D2 641A            	  2600: 	bhs.s		.0001
01:000051D4 45F900040220    	  2601: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
01:000051DA 41F900040280    	  2602: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
01:000051E0 6004            	  2603: 	bra.s		.0003									; enter loop at bottom
                            	  2604: .0002:
01:000051E2 225A            	  2605: 	move.l	(a2)+,a1							; a1 = address of breakpoint
01:000051E4 3298            	  2606: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  2607: .0003:
01:000051E6 51C8FFFA        	  2608: 	dbra		d0,.0002
01:000051EA 4CDF0701        	  2609: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  2610: .0001:
01:000051EE 4E75            	  2611: 	rts	
                            	  2612: 
                            	  2613: ;------------------------------------------------------------------------------
                            	  2614: ; ArmAllBreakpoints, used when entering the monitor.
                            	  2615: ;------------------------------------------------------------------------------
                            	  2616: 
                            	  2617: ArmAllBreakpoints:
01:000051F0 48E780E0        	  2618: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
01:000051F4 303900040202    	  2619: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:000051FA 0C400008        	  2620: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
01:000051FE 641E            	  2621: 	bhs.s			.0001
01:00005200 45F900040220    	  2622: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
01:00005206 41F900040280    	  2623: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
01:0000520C 6008            	  2624: 	bra.s			.0003									; enter loop at bottom
                            	  2625: .0002:
01:0000520E 225A            	  2626: 	move.l		(a2)+,a1							; a1 = address of breakpoint
01:00005210 3091            	  2627: 	move.w		(a1),(a0)							; copy instruction word to table
01:00005212 30FC4E43        	  2628: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  2629: .0003:
01:00005216 51C8FFF6        	  2630: 	dbra			d0,.0002
01:0000521A 4CDF0701        	  2631: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  2632: .0001:
01:0000521E 4E75            	  2633: 	rts	
                            	  2634: 
                            	  2635: ;------------------------------------------------------------------------------
                            	  2636: ;------------------------------------------------------------------------------
                            	  2637: 
                            	  2638: ArmBreakpoint:
01:00005220 48E7E0E0        	  2639: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
01:00005224 303900040202    	  2640: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:0000522A 0C400008        	  2641: 	cmpi.w		#numBreakpoints,d0		; check if too many
01:0000522E 645A            	  2642: 	bhs.s			.0001
01:00005230 527900040202    	  2643: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
01:00005236 2400            	  2644: 	move.l		d0,d2
01:00005238 6100F9CE        	  2645: 	bsr				ignBlanks
01:0000523C 6100FB7E        	  2646: 	bsr				GetHexNumber
01:00005240 6748            	  2647: 	beq.s			.0001									; was there an address?
01:00005242 08010000        	  2648: 	btst			#0,d1									; address value must be even
01:00005246 6642            	  2649: 	bne.s			.0001
                            	  2650: 	; See if the breakpoint is in the table already
01:00005248 43F900040220    	  2651: 	lea				Breakpoints,a1				; a1 points to breakpoint table
01:0000524E 343C0007        	  2652: 	move.w		#numBreakpoints-1,d2
                            	  2653: .0002:
01:00005252 B299            	  2654: 	cmp.l			(a1)+,d1
01:00005254 673A            	  2655: 	beq.s			.0003									; breakpoint is in table already
01:00005256 51CAFFFA        	  2656: 	dbra			d2,.0002
                            	  2657: 	; Add breakpoint to table
                            	  2658: 	; Search for empty entry
01:0000525A 43F900040220    	  2659: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
01:00005260 4242            	  2660: 	clr.w			d2										; d2 = count
                            	  2661: .0006:
01:00005262 4A91            	  2662: 	tst.l			(a1)									; is the entry empty?
01:00005264 670C            	  2663: 	beq.s			.0005									; branch if found empty entry
01:00005266 5889            	  2664: 	lea				4(a1),a1							; point to next entry
01:00005268 5242            	  2665: 	addi.w		#1,d2									; increment count
01:0000526A 0C420008        	  2666: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
01:0000526E 65F2            	  2667: 	blo.s			.0006
01:00005270 6018            	  2668: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  2669: .0005:
01:00005272 E542            	  2670: 	asl.w			#2,d2									; d2 = long word index
01:00005274 23812000        	  2671: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
01:00005278 2441            	  2672: 	move.l		d1,a2
01:0000527A E24A            	  2673: 	lsr.w			#1,d2									; d2 = word index
                            	  2674: .0004:
01:0000527C 43F900040280    	  2675: 	lea				BreakpointWords,a1
01:00005282 33922000        	  2676: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
01:00005286 34BC4E43        	  2677: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  2678: .0001:
01:0000528A 4CDF0707        	  2679: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
01:0000528E 4E75            	  2680: 	rts
                            	  2681: .0003:
01:00005290 2469FFFC        	  2682: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
01:00005294 0C524E43        	  2683: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
01:00005298 67F0            	  2684: 	beq.s			.0001
01:0000529A D482            	  2685: 	asl.l			#1,d2									; d2 = word index
01:0000529C 60DE            	  2686: 	bra.s			.0004
                            	  2687: 
                            	  2688: 
                            	  2689: ;------------------------------------------------------------------------------
                            	  2690: ;------------------------------------------------------------------------------
                            	  2691: 
                            	  2692: DisarmBreakpoint:
01:0000529E 48E7E0E0        	  2693: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
01:000052A2 303900040202    	  2694: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:000052A8 0C400008        	  2695: 	cmpi.w		#numBreakpoints,d0		; check if too many
01:000052AC 623E            	  2696: 	bhi.s			.0001
01:000052AE 2400            	  2697: 	move.l		d0,d2
01:000052B0 6100F956        	  2698: 	bsr				ignBlanks
01:000052B4 6100FB06        	  2699: 	bsr				GetHexNumber
01:000052B8 6732            	  2700: 	beq.s			.0001									; was there an address?
01:000052BA 08010000        	  2701: 	btst			#0,d1									; address value must be even
01:000052BE 662C            	  2702: 	bne.s			.0001
                            	  2703: 	; See if the breakpoint is in the table already
01:000052C0 43F900040220    	  2704: 	lea				Breakpoints,a1				; a1 points to breakpoint table
01:000052C6 5342            	  2705: 	subi.w		#1,d2
                            	  2706: .0002:
01:000052C8 B299            	  2707: 	cmp.l			(a1)+,d1
01:000052CA 6706            	  2708: 	beq.s			.0003									; breakpoint is in table already
01:000052CC 51CAFFFA        	  2709: 	dbra			d2,.0002
01:000052D0 601A            	  2710: 	bra				.0001									; breakpoint was not in table
                            	  2711: .0003:
                            	  2712: 	; Remove breakpoint from table
01:000052D2 537900040202    	  2713: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
01:000052D8 2469FFFC        	  2714: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
01:000052DC 42A9FFFC        	  2715: 	clr.l			-4(a1)								; empty out breakpoint
01:000052E0 43F900040280    	  2716: 	lea				BreakpointWords,a1
01:000052E6 D482            	  2717: 	asl.l			#1,d2									; d2 = word index
01:000052E8 34B12000        	  2718: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  2719: .0001:
01:000052EC 4CDF0707        	  2720: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
01:000052F0 4E75            	  2721: 	rts
                            	  2722: 
                            	  2723: ;------------------------------------------------------------------------------
                            	  2724: ;------------------------------------------------------------------------------
                            	  2725: 
                            	  2726: ListBreakpoints:
01:000052F2 6100EA50        	  2727: 	bsr			CRLF
01:000052F6 343C0008        	  2728: 	move.w	#numBreakpoints,d2
01:000052FA 43F900040220    	  2729: 	lea			Breakpoints,a1
                            	  2730: .0001:
01:00005300 2219            	  2731: 	move.l	(a1)+,d1
01:00005302 6100FB38        	  2732: 	bsr			DisplayTetra
01:00005306 6100EA3C        	  2733: 	bsr			CRLF
01:0000530A 51CAFFF4        	  2734: 	dbra		d2,.0001
01:0000530E 6000F526        	  2735: 	bra			Monitor
                            	  2736: 
                            	  2737: ;------------------------------------------------------------------------------
                            	  2738: ;------------------------------------------------------------------------------
                            	  2739: 
                            	  2740: ClearBreakpointList:
01:00005312 343C0008        	  2741: 	move.w	#numBreakpoints,d2
01:00005316 43F900040220    	  2742: 	lea			Breakpoints,a1
                            	  2743: .0001:
01:0000531C 4299            	  2744: 	clr.l		(a1)+
01:0000531E 51CAFFFC        	  2745: 	dbra		d2,.0001
01:00005322 4E75            	  2746: 	rts
                            	  2747: 
                            	  2748: ;------------------------------------------------------------------------------
                            	  2749: ;------------------------------------------------------------------------------
                            	  2750: 
                            	  2751: irq3_rout:
01:00005324 6100FDDC        	  2752: 	bsr			SerialIRQ
01:00005328 4E73            	  2753: 	rte
                            	  2754: 
                            	  2755: ;------------------------------------------------------------------------------
                            	  2756: ;------------------------------------------------------------------------------
                            	  2757: 
                            	  2758: irq_rout:
01:0000532A 48E7C080        	  2759: 	movem.l	d0/d1/a0,-(a7)
01:0000532E 7201            	  2760: 	moveq		#1,d1
                            	  2761: ;	bsr			LockSemaphore
01:00005330 6100EE9E        	  2762: 	bsr			_KeybdGetStatus		; check if timer or keyboard
01:00005334 6A66            	  2763: 	bpl.s		.0001							; branch if not keyboard
01:00005336 0839000100100010	  2764: 	btst		#1,_KeyState2			; Is Alt down?
01:0000533E 6728            	  2765: 	beq.s		.0003
01:00005340 1039FD0FFE00    	  2766: 	move.b	KEYBD,d0					; get scan code
01:00005346 0C00000D        	  2767: 	cmpi.b	#SC_TAB,d0				; is Alt-Tab?
01:0000534A 661C            	  2768: 	bne.s		.0003
01:0000534C 6100EE8C        	  2769: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
01:00005350 6100EE18        	  2770: 	bsr			rotate_iofocus
01:00005354 423900100011    	  2771: 	clr.b		_KeybdHead				; clear keyboard buffer
01:0000535A 423900100012    	  2772: 	clr.b		_KeybdTail
01:00005360 423900100013    	  2773: 	clr.b		_KeybdCnt
01:00005366 6048            	  2774: 	bra			.0002							; do not store Alt-Tab
                            	  2775: .0003:
                            	  2776: 	; Insert keyboard scan code into raw keyboard buffer
01:00005368 6100EE70        	  2777: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
01:0000536C 0C39002000100013	  2778: 	cmpi.b	#32,_KeybdCnt			; see if keyboard buffer full
01:00005374 643A            	  2779: 	bhs.s		.0002
01:00005376 103900100012    	  2780: 	move.b	_KeybdTail,d0			; keyboard buffer not full, add to tail
01:0000537C 4880            	  2781: 	ext.w		d0
01:0000537E 41F900100020    	  2782: 	lea			_KeybdBuf,a0			; a0 = pointer to buffer
01:00005384 11810000        	  2783: 	move.b	d1,(a0,d0.w)			; put scancode in buffer
01:00005388 5200            	  2784: 	addi.b	#1,d0							; increment tail index
01:0000538A 0200001F        	  2785: 	andi.b	#31,d0						; wrap at buffer limit
01:0000538E 13C000100012    	  2786: 	move.b	d0,_KeybdTail			; update tail index
01:00005394 523900100013    	  2787: 	addi.b	#1,_KeybdCnt			; increment buffer count
01:0000539A 6014            	  2788: 	bra			.0002
                            	  2789: .0001:
01:0000539C 23FC1D000000FD09	  2790: 	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
01:000053A4 0014
01:000053A6 207900040004    	  2791: 	move.l	TextScr,a0				; a0 = screen address
01:000053AC 52A80028        	  2792: 	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  2793: .0002:	
01:000053B0 7201            	  2794: 	moveq		#1,d1
01:000053B2 6100AD86        	  2795: 	bsr			UnlockSemaphore
01:000053B6 4CDF0103        	  2796: 	movem.l	(a7)+,d0/d1/a0		; return
01:000053BA 4E73            	  2797: 	rte
                            	  2798: 
                            	  2799: nmi_rout:
01:000053BC 48E7C080        	  2800: 	movem.l	d0/d1/a0,-(a7)
01:000053C0 123C004E        	  2801: 	move.b	#'N',d1
01:000053C4 6100E9C8        	  2802: 	bsr			DisplayChar
01:000053C8 4CDF0103        	  2803: 	movem.l	(a7)+,d0/d1/a0		; return
01:000053CC 4E73            	  2804: 	rte
                            	  2805: 
                            	  2806: brdisp_trap:
01:000053CE 48F9FFFF00040100	  2807: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
01:000053D6 33DF00040140    	  2808: 	move.w	(a7)+,Regsave+$40
01:000053DC 23DF00040144    	  2809: 	move.l	(a7)+,Regsave+$44
01:000053E2 2E7C00040FFC    	  2810: 	move.l	#$40FFC,a7			; reset stack pointer
01:000053E8 46FC2500        	  2811: 	move.w	#$2500,sr				; enable interrupts
01:000053EC 43FA0069        	  2812: 	lea			msg_bad_branch_disp,a1
01:000053F0 6100EBFA        	  2813: 	bsr			DisplayString
01:000053F4 6100FA3E        	  2814: 	bsr			DisplaySpace
01:000053F8 223900040144    	  2815: 	move.l	Regsave+$44,d1	; exception address
01:000053FE 6100FA3C        	  2816: 	bsr			DisplayTetra		; and display it
                            	  2817: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
01:00005402 6000F8FA        	  2818: 	bra			DumpRegs
                            	  2819: 
                            	  2820: illegal_trap:
01:00005406 544F            	  2821: 	addq		#2,sp						; get rid of sr
01:00005408 221F            	  2822: 	move.l	(sp)+,d1				; pop exception address
01:0000540A 6100FA30        	  2823: 	bsr			DisplayTetra		; and display it
01:0000540E 43FA0035        	  2824: 	lea			msg_illegal,a1	; followed by message
01:00005412 6100EBD8        	  2825: 	bsr			DisplayString
                            	  2826: .0001:
01:00005416 60FE            	  2827: 	bra			.0001
01:00005418 6000F41C        	  2828: 	bra			Monitor
                            	  2829: 	
                            	  2830: ; -----------------------------------------------------------------------------
                            	  2831: ; -----------------------------------------------------------------------------
                            	  2832: 
                            	  2833: msg_start:
01:0000541C 726636386B205379	  2834: 	dc.b	"rf68k System Starting",CR,LF,0
01:00005424 7374656D20537461
01:0000542C 7274696E67
01:00005431 0D
01:00005432 0A
01:00005433 00
                            	  2835: msg_core_start:
01:00005434 20636F7265207374	  2836: 	dc.b	" core starting",CR,LF,0
01:0000543C 617274696E67
01:00005442 0D
01:00005443 0A
01:00005444 00
                            	  2837: msg_illegal:
01:00005445 20696C6C6567616C	  2838: 	dc.b	" illegal opcode",CR,LF,0
01:0000544D 206F70636F6465
01:00005454 0D
01:00005455 0A
01:00005456 00
                            	  2839: msg_bad_branch_disp:
01:00005457 206272616E636820	  2840: 	dc.b	" branch selfref: ",0
01:0000545F 73656C667265663A
01:00005467 20
01:00005468 00
                            	  2841: msg_test_done:
01:00005469 2043505520746573	  2842: 	dc.b	" CPU test done.",0
01:00005471 7420646F6E652E
01:00005478 00
                            	  2843: 
                            	  2844: 
                            	  2845: 
                            	  2846: 


Symbols by name:
ABCD_INNER1                     01:000024EE
ABCD_INNER2                     01:0000255C
ABCD_NO_C1                      01:0000250A
ABCD_NO_C2                      01:00002512
ABCD_NO_C3                      01:00002578
ABCD_NO_C4                      01:00002580
ABCD_OUTER1                     01:000024EC
ABCD_OUTER2                     01:0000255A
ACIA                             E:FD060000
ACIA_CMD                         E:00000008
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     01:00003054
ADDQ_LOOP1                      01:0000286E
ADDQ_LOOP2                      01:000028AC
ADDQ_LOOP3                      01:000028E2
ADDX_LOOP3                      01:0000317A
ADDX_LOOP4                      01:00003196
ADDX_LOOP5                      01:000031B2
ADDX_OUTER1                     01:000030E6
ADD_OUTER1                      01:00002E7A
ADD_OUTER2                      01:00002EEE
ALL_DONE                        01:00000260
AND_OUTER1                      01:00002B98
AND_OUTER2                      01:00002C0C
AUXIN                           01:00004FF2
ArmAllBreakpoints               01:000051F0
ArmBreakpoint                   01:00005220
AsciiToHexNybble                01:00004DE8
AudioInputTest                  01:00004FE6
BCC1                            01:00002794
BCC10                           01:000027E6
BCC11                           01:000027EE
BCC12                           01:000027F8
BCC13                           01:00002800
BCC14                           01:0000280A
BCC2                            01:0000279E
BCC3                            01:000027A6
BCC4                            01:000027B0
BCC5                            01:000027B8
BCC6                            01:000027C2
BCC7                            01:000027CA
BCC8                            01:000027D4
BCC9                            01:000027DC
BSR_CLOSE1                      01:00001334
BSR_CLOSE2                      01:0000136A
BSR_FAR1                        01:00000262
BSR_FAR2                        01:00002784
BlankLastLine                   01:00003F96
BouncingBalls                   01:00004FE8
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
CMPA_OUTER1                     01:00002D6E
CMPM_LOOP1                      01:00002DFC
CMPM_LOOP2                      01:00002E16
CMPM_LOOP3                      01:00002E30
CMP_OUTER1                      01:00002CF8
CR                               E:0000000D
CRLF                            01:00003D44
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003D80
CheckForCtrlC                   01:0000427E
CheckForKey                     01:00004238
ClearBreakpointList             01:00005312
ClearScreen                     01:00004FEC
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
Cursor1                         01:00004120
CursorCol                        E:00040001
CursorRow                        E:00040000
DBCC_LOOP1                      01:00002814
DBCC_LOOP2                      01:00002822
DIVS_OUTER1                     01:00002A58
DIVU_OUTER1                     01:00002A06
DecrementSemaphore              01:0000011A
Delay3s                         01:0000015A
DisarmAllBreakpoints            01:000051C4
DisarmBreakpoint                01:0000529E
DisplayByte                     01:00004E48
DisplayChar                     01:00003D8E
DisplayHelp                     01:0000498E
DisplayMem                      01:00004CA2
DisplayNybble                   01:00004E4E
DisplaySpace                    01:00004E34
DisplayString                   01:00003FEC
DisplayStringCRLF               01:00004002
DisplayStringLimited            01:00004008
DisplayStringLimitedCRLF        01:00004028
DisplayTetra                    01:00004E3C
DisplayTwoSpaces                01:00004E22
DisplayWyde                     01:00004E42
DumpMem                         01:00004C74
DumpMem1                        01:00004C90
DumpRegs                        01:00004CFE
EOR_OUTER2                      01:00002C82
EXCEPTION_6                     01:0000026A
EXCEPTION_7                     01:00000272
EditMem                         01:00004C1A
ExecuteCode                     01:00004C66
FillMem                         01:00004BC2
FromScreen                      01:00004820
GetCmdLine                      01:00004ABA
GetHexNumber                    01:00004DBC
GetKey                          01:00004244
GraphicsDemo                    01:00004FEA
HelpMsg                         01:0000499A
HomeCursor                      01:0000402E
IOFocus                          E:00100000
IncCursorPos                    01:00003F08
IncCursorRow                    01:00003F28
IncrementSemaphore              01:00000102
InitSemaphores                  01:000000C0
KEYBD                            E:FD0FFE00
KeybdEcho                        E:0004000C
KeybdGetChar                    01:0000429A
KeybdGetCharNoWait              01:0000428A
KeybdGetCharWait                01:00004292
KeybdLEDs                        E:0010000E
KeybdRecvByte                   01:000041EA
KeybdSendByte                   01:00004508
KeybdSetLEDStatus               01:0000449C
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     01:0000420A
LEA1                            01:00001D40
LF                               E:0000000A
ListBreakpoints                 01:000052F2
LoadS19                         01:00004E68
LockSemaphore                   01:00000134
MOVE1                           01:000019AE
MOVE2                           01:00001932
MOVE3                           01:00001A2E
MOVE4                           01:00001B88
MULS_OUTER1                     01:0000334E
MULU_OUTER1                     01:00003302
Monitor                         01:00004836
NBCD_LOOP                       01:000026D4
NBCD_LOOP1                      01:0000271A
NBCD_NO_C                       01:000026E0
NBCD_NO_C1                      01:0000272E
NBCD_NO_Z                       01:000026E4
NBCD_NO_Z1                      01:00002732
NextRec                         01:00004E6E
NumSetBreakpoints                E:00040202
OR_OUTER1                       01:00002AAE
OR_OUTER2                       01:00002B22
PLIC                             E:FD090000
ProcessBreakpoint               01:000051BE
ProcessRec                      01:00004E80
ProcessS1                       01:00004F36
ProcessS2                       01:00004F3A
ProcessS3                       01:00004F3E
ProcessS7                       01:00004F42
ProcessS8                       01:00004F4E
ProcessS9                       01:00004F5A
Prompt1                         01:0000486E
Prompt2                         01:00004880
Prompt3                         01:00004858
PromptLn                        01:0000484C
ROXx_FLAGS                      01:00003616
ROXx_LOOP1                      01:0000362C
ROXx_LOOP2                      01:0000364C
ROXx_LOOP3                      01:0000366C
ROXx_LOOP4                      01:0000368C
ROXx_LOOP5                      01:000036AC
ROXx_LOOP6                      01:000036CE
ROx_FLAGS                       01:000033E0
ROx_LOOP1                       01:000033F6
ROx_LOOP2                       01:00003416
ROx_LOOP3                       01:00003436
ROx_LOOP4                       01:00003456
ROx_LOOP5                       01:00003476
ROx_LOOP6                       01:00003498
RTR_DONE                        01:00002776
ReceiveSerial                   01:00004B8E
Regsave                          E:00040100
S1932a                          01:00004F9C
S1932b                          01:00004FB0
S19Get16BitAddress              01:00004F66
S19Get24BitAddress              01:00004F72
S19Get32BitAddress              01:00004F7E
S19StartAddress                  E:00040008
SBCD_INNER1                     01:000025E6
SBCD_INNER2                     01:00002654
SBCD_NO_C1                      01:00002602
SBCD_NO_C2                      01:0000260A
SBCD_NO_C3                      01:00002670
SBCD_NO_C4                      01:00002678
SBCD_OUTER1                     01:000025E4
SBCD_OUTER2                     01:00002652
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003A8E
SHIFTS2_LOOP1                   01:00003AA4
SHIFTS2_LOOP2                   01:00003AC0
SHIFTS2_LOOP3                   01:00003ADC
SHIFTS2_LOOP4                   01:00003AF8
SHIFTS2_LOOP5                   01:00003B14
SHIFTS2_LOOP6                   01:00003B32
SHIFTS_FLAGS                    01:0000384C
SHIFTS_LOOP1                    01:00003862
SHIFTS_LOOP2                    01:00003882
SHIFTS_LOOP3                    01:000038A2
SHIFTS_LOOP4                    01:000038C2
SHIFTS_LOOP5                    01:000038E2
SHIFTS_LOOP6                    01:00003904
SUBA_OUTER1                     01:000030A0
SUBQ_LOOP1                      01:0000292C
SUBQ_LOOP2                      01:00002966
SUBQ_LOOP3                      01:0000299C
SUBX_LOOP3                      01:0000328A
SUBX_LOOP4                      01:000032A6
SUBX_LOOP5                      01:000032C2
SUBX_OUTER1                     01:000031F6
SUB_OUTER1                      01:00002F64
SUB_OUTER2                      01:00002FD8
ScrollUp                        01:00003F5C
SendSerial                      01:00004B5E
SerHeadRcv                       E:00100032
SerRcvBuf                        E:00101000
SerRcvXoff                       E:00100035
SerRcvXon                        E:00100034
SerTailRcv                       E:00100030
SerialGetChar                   01:00005024
SerialIRQ                       01:00005102
SerialInit                      01:00004FF2
SerialPeekChar                  01:00005074
SerialPeekCharDirect            01:00005092
SerialPutChar                   01:000050B6
SerialRcvCount                  01:000050E2
SetKeyboardEcho                 01:00004230
StartMon                        01:0000482C
StubRout                        01:00004156
SyncCursor                      01:00004040
T15DispatchTable                01:00004080
TEXTREG                          E:FD03FF00
TRAP15                          01:0000406A
TestCLS                         01:0000494C
TestSemaphore                   01:000000E6
TestSerialReceive               01:00004DA8
TextCols                         E:0004008D
TextCurpos                       E:00040002
TextPos                          E:00040002
TextRows                         E:0004008C
TextScr                          E:00040004
UnlockSemaphore                 01:0000013A
UpdateTextPos                   01:00003D56
Wait10ms                        01:00004510
XOFF                             E:00000013
XON                              E:00000011
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdCnt                        E:00100013
_KeybdGetScancode               01:000041DA
_KeybdGetStatus                 01:000041D0
_KeybdHead                       E:00100011
_KeybdInit                      01:000041C2
_KeybdTail                       E:00100012
_keybdControlCodes              01:00004720
_keybdExtendedCodes             01:000047A0
_shiftedScanCodes               01:00004620
_unshiftedScanCodes             01:00004520
bkColor                          E:00040088
brdisp_trap                     01:000053CE
bus_err                         01:000050B2
clear_screen                    01:00003CEC
cpu_test                        01:0000017E
dccr                            01:00003DB8
dclf                            01:00003E88
dcx10                           01:00003E20
dcx11                           01:00003E42
dcx12                           01:00003E38
dcx14                           01:00003DAE
dcx16                           01:00003E8C
dcx4                            01:00003E90
dcx6                            01:00003DD6
dcx7                            01:00003DB2
dcx8                            01:00003DEC
dcx9                            01:00003E02
dly3s1                          01:0000016A
dly3s2                          01:00000168
doBackspace                     01:00003E9A
doCtrlX                         01:00003EE4
doDelete                        01:00003EA8
do_nothing                      01:000000BA
dspj1                           01:00003FF0
dspmem1                         01:00004CB2
dspspc1                         01:00004E2C
dsret                           01:00003FFC
edtmem1                         01:00004C22
fgColor                          E:00040084
fmem1                           01:00004BEE
fmemB                           01:00004BFE
fmemL                           01:00004BE4
fmemW                           01:00004BF4
get_screen_address              01:00003CE4
get_screen_color                01:00003CB8
gthx3                           01:00004E1E
gthx5                           01:00004DFA
gthx6                           01:00004E0C
icc1                            01:00003F5A
ignBlanks                       01:00004C08
illegal_trap                    01:00005406
init_plic                       01:00004196
irq3_rout                       01:00005324
irq_rout                        01:0000532A
leds                             E:FD0FFF00
loop1                           01:00000094
loop2                           01:00000092
loop3                           01:00003D16
msgHello                        01:00004AA8
msg_bad_branch_disp             01:00005457
msg_core_start                  01:00005434
msg_illegal                     01:00005445
msg_reglist                     01:00004D82
msg_regs                        01:00004D7E
msg_start                       01:0000541C
msg_test_done                   01:00005469
nmeSerial                       01:00005178
nmi_rout                        01:000053BC
notRxInt                        01:00005172
numBreakpoints                   E:00000008
op_ABCD                         01:000024CC
op_ADD                          01:00002E5A
op_ADDA                         01:0000302E
op_ADDQ                         01:0000285A
op_ADDX                         01:000030C6
op_ADD_I                        01:0000155A
op_AND                          01:00002B78
op_ANDI_TO_CCR                  01:0000030A
op_ANDI_TO_SR                   01:00000330
op_BCC                          01:0000278C
op_BCHG                         01:00000700
op_BCLR                         01:00000A68
op_BOOL_I                       01:0000118A
op_BSET                         01:00000DB6
op_BSR                          01:0000133C
op_BTST                         01:00000356
op_BTST0                        01:000004E0
op_BTST1                        01:000004EC
op_BTST10                       01:00000534
op_BTST11                       01:0000053C
op_BTST12                       01:00000542
op_BTST2                        01:000004F4
op_BTST20                       01:0000069A
op_BTST21                       01:000006A4
op_BTST22                       01:000006AA
op_BTST23                       01:000006B0
op_BTST24                       01:000006B6
op_BTST25                       01:000006BC
op_BTST26                       01:000006C2
op_BTST27                       01:000006C8
op_BTST28                       01:000006CE
op_BTST29                       01:000006D4
op_BTST3                        01:000004FC
op_BTST30                       01:000006DA
op_BTST31                       01:000006E0
op_BTST32                       01:000006E4
op_BTST4                        01:00000504
op_BTST5                        01:0000050C
op_BTST6                        01:00000514
op_BTST7                        01:0000051C
op_BTST8                        01:00000524
op_BTST9                        01:0000052C
op_CHK                          01:00001DE6
op_CMP                          01:00002CD8
op_CMPA                         01:00002D4E
op_CMPM                         01:00002DB4
op_CMP_I                        01:00001372
op_DBCC                         01:0000280C
op_DIVS                         01:00002A3C
op_DIVU                         01:000029EA
op_EOR                          01:00002C62
op_EORI_TO_CCR                  01:000002BE
op_EORI_TO_SR                   01:000002E4
op_EXG                          01:0000337E
op_EXT                          01:00001C66
op_LEAPEA                       01:00001CA8
op_LINKS                        01:00001DB8
op_MOVE                         01:00001866
op_MOVEM                        01:000021AE
op_MOVEP                        01:000010FE
op_MOVEQ                        01:000029CE
op_MOVE_USP                     01:00001DD6
op_MOVE_xxx_FLAGS               01:00001A72
op_MULS                         01:00003332
op_MULU                         01:000032E6
op_NBCD                         01:000026BC
op_NEGS                         01:00001E20
op_OR                           01:00002A8E
op_ORI_TO_CCR                   01:0000027A
op_ORI_TO_SR                    01:0000029C
op_ROXx                         01:00003622
op_ROx                          01:000033EC
op_RTR                          01:0000276A
op_SBCD                         01:000025C4
op_SCC                          01:00002832
op_SHIFTS                       01:00003858
op_SHIFTS2                      01:00003A9A
op_SUB                          01:00002F44
op_SUBA                         01:0000307A
op_SUBQ                         01:00002914
op_SUBX                         01:000031D6
op_SUB_I                        01:000016E0
op_SWAP                         01:00001C92
op_TAS                          01:00001D54
op_TRAPV                        01:0000274E
op_TST                          01:00001D7A
pcssxa                          01:00004EF2
rbo                             01:000050DA
rotate_iofocus                  01:0000416A
sGetChar                        01:00004FD4
select_focus1                   01:0000417C
select_iofocus                  01:00004158
semamem                          E:FD050000
sirq0001                        01:0000511C
sirqNxtByte                     01:00005106
sirqRxFull                      01:00005172
start                           01:00000000
start_other                     01:000000A6
trap3                           01:00005180

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD090000 PLIC
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 ACIA_RX
00000000 start
00000000 ACIA_TX
00000003 CTRLC
00000004 ACIA_STAT
00000008 CTRLH
00000008 ACIA_CMD
00000008 numBreakpoints
0000000A LF
0000000C ACIA_CTRL
0000000D SC_TAB
0000000D CR
00000011 SC_ALT
00000011 XON
00000012 SC_LSHIFT
00000013 XOFF
00000014 SC_CTRL
00000018 CTRLX
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
00000092 loop2
00000094 loop1
000000A6 start_other
000000BA do_nothing
000000C0 InitSemaphores
000000E0 SC_EXTEND
000000E6 TestSemaphore
000000F0 SC_KEYUP
00000102 IncrementSemaphore
0000011A DecrementSemaphore
00000134 LockSemaphore
0000013A UnlockSemaphore
0000015A Delay3s
00000168 dly3s2
0000016A dly3s1
0000017E cpu_test
00000260 ALL_DONE
00000262 BSR_FAR1
0000026A EXCEPTION_6
00000272 EXCEPTION_7
0000027A op_ORI_TO_CCR
0000029C op_ORI_TO_SR
000002BE op_EORI_TO_CCR
000002E4 op_EORI_TO_SR
0000030A op_ANDI_TO_CCR
00000330 op_ANDI_TO_SR
00000356 op_BTST
000004E0 op_BTST0
000004EC op_BTST1
000004F4 op_BTST2
000004FC op_BTST3
00000504 op_BTST4
0000050C op_BTST5
00000514 op_BTST6
0000051C op_BTST7
00000524 op_BTST8
0000052C op_BTST9
00000534 op_BTST10
0000053C op_BTST11
00000542 op_BTST12
0000069A op_BTST20
000006A4 op_BTST21
000006AA op_BTST22
000006B0 op_BTST23
000006B6 op_BTST24
000006BC op_BTST25
000006C2 op_BTST26
000006C8 op_BTST27
000006CE op_BTST28
000006D4 op_BTST29
000006DA op_BTST30
000006E0 op_BTST31
000006E4 op_BTST32
00000700 op_BCHG
00000A68 op_BCLR
00000DB6 op_BSET
000010FE op_MOVEP
0000118A op_BOOL_I
00001334 BSR_CLOSE1
0000133C op_BSR
0000136A BSR_CLOSE2
00001372 op_CMP_I
0000155A op_ADD_I
000016E0 op_SUB_I
00001866 op_MOVE
00001932 MOVE2
000019AE MOVE1
00001A2E MOVE3
00001A72 op_MOVE_xxx_FLAGS
00001B88 MOVE4
00001C66 op_EXT
00001C92 op_SWAP
00001CA8 op_LEAPEA
00001D40 LEA1
00001D54 op_TAS
00001D7A op_TST
00001DB8 op_LINKS
00001DD6 op_MOVE_USP
00001DE6 op_CHK
00001E20 op_NEGS
000021AE op_MOVEM
000024CC op_ABCD
000024EC ABCD_OUTER1
000024EE ABCD_INNER1
0000250A ABCD_NO_C1
00002512 ABCD_NO_C2
0000255A ABCD_OUTER2
0000255C ABCD_INNER2
00002578 ABCD_NO_C3
00002580 ABCD_NO_C4
000025C4 op_SBCD
000025E4 SBCD_OUTER1
000025E6 SBCD_INNER1
00002602 SBCD_NO_C1
0000260A SBCD_NO_C2
00002652 SBCD_OUTER2
00002654 SBCD_INNER2
00002670 SBCD_NO_C3
00002678 SBCD_NO_C4
000026BC op_NBCD
000026D4 NBCD_LOOP
000026E0 NBCD_NO_C
000026E4 NBCD_NO_Z
0000271A NBCD_LOOP1
0000272E NBCD_NO_C1
00002732 NBCD_NO_Z1
0000274E op_TRAPV
0000276A op_RTR
00002776 RTR_DONE
00002784 BSR_FAR2
0000278C op_BCC
00002794 BCC1
0000279E BCC2
000027A6 BCC3
000027B0 BCC4
000027B8 BCC5
000027C2 BCC6
000027CA BCC7
000027D4 BCC8
000027DC BCC9
000027E6 BCC10
000027EE BCC11
000027F8 BCC12
00002800 BCC13
0000280A BCC14
0000280C op_DBCC
00002814 DBCC_LOOP1
00002822 DBCC_LOOP2
00002832 op_SCC
0000285A op_ADDQ
0000286E ADDQ_LOOP1
000028AC ADDQ_LOOP2
000028E2 ADDQ_LOOP3
00002914 op_SUBQ
0000292C SUBQ_LOOP1
00002966 SUBQ_LOOP2
0000299C SUBQ_LOOP3
000029CE op_MOVEQ
000029EA op_DIVU
00002A06 DIVU_OUTER1
00002A3C op_DIVS
00002A58 DIVS_OUTER1
00002A8E op_OR
00002AAE OR_OUTER1
00002B22 OR_OUTER2
00002B78 op_AND
00002B98 AND_OUTER1
00002C0C AND_OUTER2
00002C62 op_EOR
00002C82 EOR_OUTER2
00002CD8 op_CMP
00002CF8 CMP_OUTER1
00002D4E op_CMPA
00002D6E CMPA_OUTER1
00002DB4 op_CMPM
00002DFC CMPM_LOOP1
00002E16 CMPM_LOOP2
00002E30 CMPM_LOOP3
00002E5A op_ADD
00002E7A ADD_OUTER1
00002EEE ADD_OUTER2
00002F44 op_SUB
00002F64 SUB_OUTER1
00002FD8 SUB_OUTER2
0000302E op_ADDA
00003054 ADDA_OUTER1
0000307A op_SUBA
000030A0 SUBA_OUTER1
000030C6 op_ADDX
000030E6 ADDX_OUTER1
0000317A ADDX_LOOP3
00003196 ADDX_LOOP4
000031B2 ADDX_LOOP5
000031D6 op_SUBX
000031F6 SUBX_OUTER1
0000328A SUBX_LOOP3
000032A6 SUBX_LOOP4
000032C2 SUBX_LOOP5
000032E6 op_MULU
00003302 MULU_OUTER1
00003332 op_MULS
0000334E MULS_OUTER1
0000337E op_EXG
000033E0 ROx_FLAGS
000033EC op_ROx
000033F6 ROx_LOOP1
00003416 ROx_LOOP2
00003436 ROx_LOOP3
00003456 ROx_LOOP4
00003476 ROx_LOOP5
00003498 ROx_LOOP6
00003616 ROXx_FLAGS
00003622 op_ROXx
0000362C ROXx_LOOP1
0000364C ROXx_LOOP2
0000366C ROXx_LOOP3
0000368C ROXx_LOOP4
000036AC ROXx_LOOP5
000036CE ROXx_LOOP6
0000384C SHIFTS_FLAGS
00003858 op_SHIFTS
00003862 SHIFTS_LOOP1
00003882 SHIFTS_LOOP2
000038A2 SHIFTS_LOOP3
000038C2 SHIFTS_LOOP4
000038E2 SHIFTS_LOOP5
00003904 SHIFTS_LOOP6
00003A8E SHIFTS2_FLAGS
00003A9A op_SHIFTS2
00003AA4 SHIFTS2_LOOP1
00003AC0 SHIFTS2_LOOP2
00003ADC SHIFTS2_LOOP3
00003AF8 SHIFTS2_LOOP4
00003B14 SHIFTS2_LOOP5
00003B32 SHIFTS2_LOOP6
00003CB8 get_screen_color
00003CE4 get_screen_address
00003CEC clear_screen
00003D16 loop3
00003D44 CRLF
00003D56 UpdateTextPos
00003D80 CalcScreenLoc
00003D8E DisplayChar
00003DAE dcx14
00003DB2 dcx7
00003DB8 dccr
00003DD6 dcx6
00003DEC dcx8
00003E02 dcx9
00003E20 dcx10
00003E38 dcx12
00003E42 dcx11
00003E88 dclf
00003E8C dcx16
00003E90 dcx4
00003E9A doBackspace
00003EA8 doDelete
00003EE4 doCtrlX
00003F08 IncCursorPos
00003F28 IncCursorRow
00003F5A icc1
00003F5C ScrollUp
00003F96 BlankLastLine
00003FEC DisplayString
00003FF0 dspj1
00003FFC dsret
00004002 DisplayStringCRLF
00004008 DisplayStringLimited
00004028 DisplayStringLimitedCRLF
0000402E HomeCursor
00004040 SyncCursor
0000406A TRAP15
00004080 T15DispatchTable
00004120 Cursor1
00004156 StubRout
00004158 select_iofocus
0000416A rotate_iofocus
0000417C select_focus1
00004196 init_plic
000041C2 _KeybdInit
000041D0 _KeybdGetStatus
000041DA _KeybdGetScancode
000041EA KeybdRecvByte
0000420A KeybdWaitTx
00004230 SetKeyboardEcho
00004238 CheckForKey
00004244 GetKey
0000427E CheckForCtrlC
0000428A KeybdGetCharNoWait
00004292 KeybdGetCharWait
0000429A KeybdGetChar
0000449C KeybdSetLEDStatus
00004508 KeybdSendByte
00004510 Wait10ms
00004520 _unshiftedScanCodes
00004620 _shiftedScanCodes
00004720 _keybdControlCodes
000047A0 _keybdExtendedCodes
00004820 FromScreen
0000482C StartMon
00004836 Monitor
0000484C PromptLn
00004858 Prompt3
0000486E Prompt1
00004880 Prompt2
0000494C TestCLS
0000498E DisplayHelp
0000499A HelpMsg
00004AA8 msgHello
00004ABA GetCmdLine
00004B5E SendSerial
00004B8E ReceiveSerial
00004BC2 FillMem
00004BE4 fmemL
00004BEE fmem1
00004BF4 fmemW
00004BFE fmemB
00004C08 ignBlanks
00004C1A EditMem
00004C22 edtmem1
00004C66 ExecuteCode
00004C74 DumpMem
00004C90 DumpMem1
00004CA2 DisplayMem
00004CB2 dspmem1
00004CFE DumpRegs
00004D7E msg_regs
00004D82 msg_reglist
00004DA8 TestSerialReceive
00004DBC GetHexNumber
00004DE8 AsciiToHexNybble
00004DFA gthx5
00004E0C gthx6
00004E1E gthx3
00004E22 DisplayTwoSpaces
00004E2C dspspc1
00004E34 DisplaySpace
00004E3C DisplayTetra
00004E42 DisplayWyde
00004E48 DisplayByte
00004E4E DisplayNybble
00004E68 LoadS19
00004E6E NextRec
00004E80 ProcessRec
00004EF2 pcssxa
00004F36 ProcessS1
00004F3A ProcessS2
00004F3E ProcessS3
00004F42 ProcessS7
00004F4E ProcessS8
00004F5A ProcessS9
00004F66 S19Get16BitAddress
00004F72 S19Get24BitAddress
00004F7E S19Get32BitAddress
00004F9C S1932a
00004FB0 S1932b
00004FD4 sGetChar
00004FE6 AudioInputTest
00004FE8 BouncingBalls
00004FEA GraphicsDemo
00004FEC ClearScreen
00004FF2 SerialInit
00004FF2 AUXIN
00005024 SerialGetChar
00005074 SerialPeekChar
00005092 SerialPeekCharDirect
000050B2 bus_err
000050B6 SerialPutChar
000050DA rbo
000050E2 SerialRcvCount
00005102 SerialIRQ
00005106 sirqNxtByte
0000511C sirq0001
00005172 notRxInt
00005172 sirqRxFull
00005178 nmeSerial
00005180 trap3
000051BE ProcessBreakpoint
000051C4 DisarmAllBreakpoints
000051F0 ArmAllBreakpoints
00005220 ArmBreakpoint
0000529E DisarmBreakpoint
000052F2 ListBreakpoints
00005312 ClearBreakpointList
00005324 irq3_rout
0000532A irq_rout
000053BC nmi_rout
000053CE brdisp_trap
00005406 illegal_trap
0000541C msg_start
00005434 msg_core_start
00005445 msg_illegal
00005457 msg_bad_branch_disp
00005469 msg_test_done
00040000 CursorRow
00040001 CursorCol
00040002 TextCurpos
00040002 TextPos
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
00100000 IOFocus
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100020 _KeybdBuf
00100030 SerTailRcv
00100032 SerHeadRcv
00100034 SerRcvXon
00100035 SerRcvXoff
00101000 SerRcvBuf
