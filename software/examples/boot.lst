Sections:
00: "CODE" (0-DEEB)
01: "DATA" (0-700)


Source: "boot.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: ;-------------------------------------------------------------------------------
                            	    37: ;
                            	    38: ; system memory map
                            	    39: ;
                            	    40: ;
                            	    41: ; 00000000 +----------------+      <+
                            	    42: ;          | startup sp,pc  | 8 B   |
                            	    43: ; 00000008 +----------------+       |
                            	    44: ;					 |    vectors     | pair shared+
                            	    45: ; 00000400 +----------------+       |
                            	    46: ;					 |   bios mem     |       |
                            	    47: ; 00001000 +----------------+       |
                            	    48: ;					 |   bios code    |       |
                            	    49: ; 00020000 +----------------+      <+
                            	    50: ;					 |    unused      |
                            	    51: ; 00040000 +----------------+
                            	    52: ;					 |   local ram    |
                            	    53: ; 00048000 +----------------+
                            	    54: ;					 |    unused      |
                            	    55: ; 00100000 +----------------+
                            	    56: ;					 |   global ram   |
                            	    57: ; 00101000 +----------------+
                            	    58: ;					 | serial rcvbuf  |
                            	    59: ; 00102000 +----------------+
                            	    60: ;          | serial xmitbuf |
                            	    61: ; 00103000 +----------------+
                            	    62: ;					 |    unused      |
                            	    63: ; 40000000 +----------------+
                            	    64: ;          |                |
                            	    65: ;          |                |
                            	    66: ;          |                |
                            	    67: ;          :  dram memory   : 1GB MB
                            	    68: ;          |                |
                            	    69: ;          |                |
                            	    70: ;          |                |
                            	    71: ; 80000000 +----------------+
                            	    72: ;          |                |
                            	    73: ;          |                |
                            	    74: ;          |                |
                            	    75: ;          :  dram memory   : 1GB MB
                            	    76: ;          |     mirror     |
                            	    77: ;          |                |
                            	    78: ;          |                |
                            	    79: ; C0000000 +----------------+
                            	    80: ;          |                |
                            	    81: ;          :     unused     :
                            	    82: ;          |                |
                            	    83: ; FD000000 +----------------+
                            	    84: ;          |                |
                            	    85: ;          :    I/O area    : 1.0 M
                            	    86: ;          |                |
                            	    87: ; FFE00000 +----------------+
                            	    88: ;          |                |
                            	    89: ;          :     unused     :
                            	    90: ;          |                |
                            	    91: ; FFFFFFFF +----------------+
                            	    92: ;
                            	    93: ;-------------------------------------------------------------------------------
                            	    94: ;
                            	    95: HAS_MMU equ 0
                            	    96: NCORES equ 4
                            	    97: TEXTCOL equ 48
                            	    98: TEXTROW	equ	32
                            	    99: VIDEO_X equ 800
                            	   100: VIDEO_Y equ 600
                            	   101: 
                            	   102: CTRLC	EQU		$03
                            	   103: CTRLH	EQU		$08
                            	   104: CTRLS	EQU		$13
                            	   105: CTRLX	EQU		$18
                            	   106: CTRLZ	EQU		$1A
                            	   107: LF		EQU		$0A
                            	   108: CR		EQU		$0D
                            	   109: XON		EQU		$11
                            	   110: XOFF	EQU		$13
                            	   111: EOT		EQU		$04
                            	   112: BLANK EQU		$20
                            	   113: 
                            	   114: SC_F12  EQU    $07
                            	   115: SC_C    EQU    $21
                            	   116: SC_T    EQU    $2C
                            	   117: SC_Z    EQU    $1A
                            	   118: SC_KEYUP	EQU		$F0
                            	   119: SC_EXTEND   EQU		$E0
                            	   120: SC_CTRL		EQU		$14
                            	   121: SC_RSHIFT	EQU		$59
                            	   122: SC_NUMLOCK	EQU		$77
                            	   123: SC_SCROLLLOCK	EQU	$7E
                            	   124: SC_CAPSLOCK		EQU	$58
                            	   125: SC_ALT		EQU		$11
                            	   126: SC_LSHIFT	EQU		$12
                            	   127: SC_DEL		EQU		$71		; extend
                            	   128: SC_LCTRL	EQU		$58
                            	   129: SC_TAB      EQU		$0D
                            	   130: 
                            	   131: 	include "..\Femtiki\device.x68"

Source: "..\Femtiki\device.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2020-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ; the following constant is used to scramble device handles. The device handle
                            	    38: ; (address) is rotated 16 bits then xor'd with this value.
                            	    39: 
                            	    40: DEV_HMASH	equ $56791123
                            	    41: 
                            	    42: DEV_INIT equ 0
                            	    43: DEV_STAT equ 1
                            	    44: DEV_PUTCHAR equ 2
                            	    45: DEV_PUTBUF equ 3
                            	    46: DEV_GETCHAR equ 4
                            	    47: DEV_GETBUF equ 5
                            	    48: DEV_SET_INPOS equ 6
                            	    49: DEV_SET_OUTPOS equ 7
                            	    50: DEV_GETCHAR_DIRECT equ 8
                            	    51: DEV_PEEKCHAR equ 9
                            	    52: DEV_PEEKCHAR_DIRECT equ 10
                            	    53: DEV_PUTCHAR_DIRECT equ 11
                            	    54: DEV_CLEAR equ 12
                            	    55: DEV_SWAPBUF equ 13
                            	    56: DEV_SETBUF1 equ 14
                            	    57: DEV_SETBUF2 equ 15
                            	    58: DEV_GETBUF1 equ 16
                            	    59: DEV_GETBUF2 equ 17
                            	    60: DEV_WRITEAT equ 18
                            	    61: DEV_SETUNIT equ 19
                            	    62: DEV_GET_DIMEN equ 20
                            	    63: DEV_GET_COLOR equ 21
                            	    64: DEV_GET_INPOS equ 22
                            	    65: DEV_GET_OUTPOS equ 23
                            	    66: DEV_GET_OUTPTR equ 24
                            	    67: DEV_SET_COLOR equ 25
                            	    68: DEV_SET_COLOR123 equ 26
                            	    69: DEV_PLOT_POINT equ 27
                            	    70: DEV_DRAW_LINE equ 28
                            	    71: DEV_DRAW_TRIANGLE equ 29
                            	    72: DEV_DRAW_RECTANGLE equ 30
                            	    73: DEV_DRAW_CURVE equ 31
                            	    74: DEV_SET_DIMEN equ 32
                            	    75: DEV_SET_COLOR_DEPTH equ 33
                            	    76: DEV_SET_DESTBUF equ 34
                            	    77: DEV_SET_DISPBUF equ 35
                            	    78: 
                            	    79: 
                            	    80: DCB_MAGIC equ	0			; 'DCB'
                            	    81: DCB_NAME	equ 4			; 15 chars+NULL
                            	    82: DCB_CMDPROC	equ 24	; 8 byte pointer to command processor
                            	    83: DCB_OUTPOSX equ 32
                            	    84: DCB_OUTPOSY equ 36
                            	    85: DCB_OUTPOSZ equ 40
                            	    86: DCB_INPOSX equ 44
                            	    87: DCB_INPOSY equ 48
                            	    88: DCB_INPOSZ equ 52
                            	    89: DCB_INBUFPTR equ 56
                            	    90: DCB_OUTBUFPTR equ 60
                            	    91: DCB_INBUFSIZE equ 64
                            	    92: DCB_OUTBUFSIZE equ 68
                            	    93: DCB_INDIMX equ 72
                            	    94: DCB_INDIMY equ 76
                            	    95: DCB_INDIMZ equ 80
                            	    96: DCB_OUTDIMX equ 84
                            	    97: DCB_OUTDIMY equ 88
                            	    98: DCB_OUTDIMZ equ 92
                            	    99: DCB_BKCOLOR equ 96
                            	   100: DCB_FGCOLOR equ 100
                            	   101: DCB_OPCODE equ 104
                            	   102: DCB_LASTERC equ 108
                            	   103: DCB_INBUFPTR2 equ 112
                            	   104: DCB_OUTBUFPTR2 equ 116
                            	   105: DCB_INBUFSIZE2 equ 120
                            	   106: DCB_OUTBUFSIZE2 equ 124
                            	   107: DCB_UNIT equ 128
                            	   108: DCB_SIZE equ 132
                            	   109: 
                            	   110: ;Standard Devices are:
                            	   111: 
                            	   112: ;#		Device					Standard name
                            	   113: 
                            	   114: ;0		NULL device 			NUL		(OS built-in)
                            	   115: ;1		Keyboard (sequential)	KBD		(OS built-in, ReadOnly)
                            	   116: ;2		Video (sequential)		VID		(OS built-in, WriteOnly)
                            	   117: ;3		Printer (parallel 1)	LPT		(OS built-in)
                            	   118: ;4		Printer (parallel 2)	LPT2	(OS built-in)
                            	   119: ;5		RS-232 1				COM1	(OS built-in)
                            	   120: ;6		RS-232 2				COM2	(OS built-in)
                            	   121: ;7		RS-232 3				COM3	(OS built-in)
                            	   122: ;8		RS-232 4				COM4	(OS built-in)
                            	   123: ;9
                            	   124: ;10		Floppy					FD0 	(OS built-in)
                            	   125: ;11		Floppy					FD1 	(OS built-in)
                            	   126: ;12		Hard disk				HD0 	(OS built-in)
                            	   127: ;13		Hard disk				HD1 	(OS built-in)
                            	   128: ;14
                            	   129: ;15
                            	   130: ;16
                            	   131: ;17
                            	   132: ;18
                            	   133: ;19
                            	   134: ;20
                            	   135: ;21
                            	   136: ;22
                            	   137: ;23
                            	   138: 

Source: "boot.x68"
                            	   132: 	include "..\Femtiki\FemtikiTop.x68"

Source: "..\Femtiki\FemtikiTop.x68"
                            	     1: 	include "..\Femtiki\const.x68"

Source: "..\Femtiki\const.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2020-2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: TS_NONE			EQU		0
                            	    38: TS_READY		EQU		1
                            	    39: TS_DEAD			EQU		2
                            	    40: TS_MSGRDY		EQU		4
                            	    41: TS_WAITMSG	EQU		8
                            	    42: TS_TIMEOUT	EQU		16
                            	    43: TS_PREEMPT	EQU		32
                            	    44: TS_RUNNING	EQU		128
                            	    45: 
                            	    46: ; error codes
                            	    47: E_Ok		EQU		$00
                            	    48: E_Arg		EQU		$01
                            	    49: E_Func  EQU    $02
                            	    50: E_BadMbx	EQU		$04
                            	    51: E_QueFull	EQU		$05
                            	    52: E_NoThread	EQU		$06
                            	    53: E_NotAlloc	EQU		$09
                            	    54: E_NotSupported EQU $0A
                            	    55: E_NoMsg		EQU		$0b
                            	    56: E_Timeout	EQU		$10
                            	    57: E_BadAlarm	EQU		$11
                            	    58: E_NotOwner	EQU		$12
                            	    59: E_QueStrategy EQU		$13
                            	    60: E_DCBInUse	EQU		$19
                            	    61: ; Device driver errors
                            	    62: E_BadDevNum	EQU		$20
                            	    63: E_NoDev		EQU		$21
                            	    64: E_BadDevOp	EQU		$22
                            	    65: E_ReadError	EQU		$23
                            	    66: E_WriteError EQU		$24
                            	    67: E_BadBlockNum	EQU	$25
                            	    68: E_TooManyBlocks	EQU	$26
                            	    69: E_InitErr EQU $27
                            	    70: 
                            	    71: ; resource errors
                            	    72: E_NoMoreMbx	EQU		$40
                            	    73: E_NoMoreMsgBlks	EQU	$41
                            	    74: E_NoMoreAlarmBlks	EQU $44
                            	    75: E_NoMoreTCBs	EQU	$45
                            	    76: E_NoMem		EQU 12
                            	    77: 
                            	    78: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     2: 	include "..\Femtiki\config.x68"

Source: "..\Femtiki\config.x68"
                            	     1: MAX_TID		EQU		4095
                            	     2: NR_TCB		EQU		4096
                            	     3: NTASK     EQU   4096    ; number of threads allowed
                            	     4: LOG_TCBSZ	EQU		8
                            	     5: LOG_PGSZ	EQU		10
                            	     6: LOG_ACBSZ EQU   12
                            	     7: OSPAGES		EQU		16			; pages of memory dedicated to OS
                            	     8: PAGESZ    EQU   16384  	; size of a page of memory
                            	     9: MEMSZ     EQU   32768   ; pages
                            	    10: MBX_BLOCKPTR_BUFSZ  EQU   8 ; number of block pointer entries
                            	    11: NR_MSG		EQU		21842		; number of messages available
                            	    12: NR_MBX		EQU		9792
                            	    13: 
                            	    14: 
                            	    15: 
                            	    16: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     3: 	include "..\Femtiki\types.x68"

Source: "..\Femtiki\types.x68"
                            	     1: ; Thread Control Block
                            	     2: TCBMagic    EQU		$0000
                            	     3: TCBRegs  		EQU   $0004		; register set storage area
                            	     4: TCBUSP			EQU		$0044
                            	     5: TCBSSP			EQU		$0048
                            	     6: TCBSR				EQU		$004C
                            	     7: TCBPC				EQU		$0050
                            	     8: TCBStatus		EQU		$0054
                            	     9: TCBPriority	EQU		$0055
                            	    10: TCBWaitMbx	EQU		$0056
                            	    11: TCBHasFocus EQU   $005A
                            	    12: TCBStackBot	EQU		$005C
                            	    13: TCBMsgD1		EQU		$0060
                            	    14: TCBMsgD2		EQU		$0064
                            	    15: TCBMsgD3		EQU		$0068
                            	    16: TCBStartTick	EQU	$006C
                            	    17: TCBEndTick	EQU		$0070
                            	    18: TCBTicks		EQU		$0074
                            	    19: TCBException	EQU	$0078
                            	    20: TCBNext			EQU		$007C
                            	    21: TCBPrev			EQU		$0080
                            	    22: TCBAffinityBase	EQU	$0082
                            	    23: TCBAffinity	EQU		$0084
                            	    24: TCBTimeout	EQU		$0088
                            	    25: TCBtid      EQU   $008C
                            	    26: TCBmid      EQU   $0090
                            	    27: TCBappid    EQU   $0094
                            	    28: TCBOpMode   EQU   $0098
                            	    29: TCBMbxNext  EQU   $009C
                            	    30: TCBMbxPrev  EQU   $00A0
                            	    31: TCBThreadNum  EQU   $00A4
                            	    32: TCBAcbNext	EQU		$00A8
                            	    33: TCBAcbPrev	EQU		$00AC
                            	    34: TCBhMailboxes	EQU		$00B0
                            	    35: TCBName			EQU		$00C0
                            	    36: TCB_SIZE		EQU		$0100
                            	    37: 
                            	    38: MBX_MAGIC		equ		0
                            	    39: MBX_OWNER		equ		4		; tid of owning task
                            	    40: MBX_LINK    equ   8
                            	    41: MBX_TQHEAD  equ   12   ; link field for free list shared with task queue head
                            	    42: MBX_TQTAIL  equ   16
                            	    43: MBX_MQHEAD	equ		20
                            	    44: MBX_MQTAIL	equ		24
                            	    45: MBX_SIZE		equ		32
                            	    46: 
                            	    47: MSG_MAGIC   equ   0
                            	    48: MSG_LINK	  equ		4
                            	    49: MSG_RETADR  equ   8
                            	    50: MSG_TGTADR  equ   12
                            	    51: MSG_TYPE    equ   16
                            	    52: MSG_D1		  equ		20
                            	    53: MSG_D2		  equ		24
                            	    54: MSG_D3		  equ		28
                            	    55: MSG_SIZE	  equ		32
                            	    56: 
                            	    57: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     4: 
                            	     5: 	include "..\Femtiki\source\kernel\Femtiki_vars.x68"

Source: "..\Femtiki\source\kernel\Femtiki_vars.x68"
                            	     1: 
                            	     2: PAMShareCounts	EQU	$20000000	; one byte for each physical page of memory
                            	     3: tcbs						EQU	$20010000	; 4095*256 = 1MB
                            	     4: tcbs_end				EQU	$20020000
                            	     5: messages				EQU	$20020000	; 32*8192 (680*16=21760 messages)
                            	     6: messages_end		EQU	$20060000
                            	     7: mailboxes				EQU	$20060000
                            	     8: mailboxes_end		EQU	$20078000	;	12*8192 (816*12=9792 mailboxes)
                            	     9: acbs						EQU	$20080000	; 32*2*8192 =512kB
                            	    10: acbs_end				EQU	$20100000
                            	    11: 
                            	    12: 
                            	    13: sys_stacks			EQU	$DF0000
                            	    14: 
                            	    15: FemtikiVars			EQU	$00100200
                            	    16: PAMLastAllocate2	EQU		$00100218
                            	    17: RunningAID		EQU		$00100220
                            	    18: RunningTCB			EQU		$00100224
                            	    19: ACBPtrs				EQU		$00100228
                            	    20: MidStackBottoms	EQU		$00100264
                            	    21: FemtikiInited	EQU		$00100284
                            	    22: missed_ticks	EQU		$00100288
                            	    23: IOFocusList		EQU		$0010028C
                            	    24: IOFocusID			EQU		$001002AC
                            	    25: iof_switch		EQU		$001002AD
                            	    26: nMessage			EQU		$001002AE
                            	    27: nMailbox			EQU		$001002B0
                            	    28: hKeybdMbx			EQU		$001002BA
                            	    29: hFocusSwitchMbx		EQU		$001002BC
                            	    30: BIOS_RespMbx	EQU		$001002BE
                            	    31: hasUltraHighPriorityTasks	EQU		$001002C0
                            	    32: im_save				EQU		$001002C2
                            	    33: sp_tmp				EQU		$001002C4
                            	    34: startQNdx			EQU		$001002C6
                            	    35: NPAGES				EQU		$001002D8
                            	    36: syspages			EQU		$001002DA
                            	    37: mmu_FreeMaps	EQU		$001002E0
                            	    38: mmu_entries		EQU		$00100300
                            	    39: freelist			EQU		$00100302
                            	    40: hSearchMap		EQU		$00100304
                            	    41: OSActive			EQU		$00100305
                            	    42: FreeACB				EQU		$00100308
                            	    43: FreeTCB				EQU		$0010030C
                            	    44: FreeMSG				EQU		$00100310
                            	    45: FreeMBX				EQU		$00100314
                            	    46: TimeoutList		EQU		$00100318
                            	    47: QueueCycle    EQU   $0010031C
                            	    48: readyQ				EQU		$00100320		; 32 bytes per queue per core, 2 cores for now
                            	    49: readyQEnd			EQU		$00100360
                            	    50: FemtikiVars_end	EQU	$00100400
                            	    51: 
                            	    52: ;gc_stack		rmb		512
                            	    53: ;gc_pc				fcdw		0
                            	    54: ;gc_omapno		fcw			0
                            	    55: ;gc_mapno		fcw			0
                            	    56: ;gc_dl				fcw			0
                            	    57: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     6: 	code
                            	     7: 	even
                            	     8: 	include "..\Femtiki\source\kernel\tcb.x68"

Source: "..\Femtiki\source\kernel\tcb.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ; Initialize variables related to TCBs.
                            	    39: ;------------------------------------------------------------------------------
                            	    40: 
                            	    41: TCBInit:
00:00000000 41F920010000    	    42: 	lea tcbs,a0
00:00000006 4E7B8013        	    43: 	movec a0,tcba
00:0000000A 700F            	    44: 	moveq #2*8-1,d0		; 2 cores, 32 bytes (8 lwords) per queue
00:0000000C 72FF            	    45: 	moveq #-1,d1			; value to set
00:0000000E 41F900100320    	    46: 	lea readyQ,a0			; clear out ready queue
                            	    47: .0001
00:00000014 20C1            	    48: 	move.l d1,(a0)+
00:00000016 51C8FFFC        	    49: 	dbra d0,.0001
00:0000001A 203C0003FFFF    	    50: 	move.l #TCB_SIZE*NR_TCB/4-1,d0
                            	    51: .clearTCBs
00:00000020 4298            	    52: 	clr.l (a0)+
00:00000022 51C8FFFC        	    53: 	dbra d0,.clearTCBs
00:00000026 4E75            	    54: 	rts
                            	    55: 
                            	    56: ;------------------------------------------------------------------------------
                            	    57: ; Convert a TCB handle into a pointer.
                            	    58: ;
                            	    59: ; Parameters:
                            	    60: ;		d0 = TCB handle
                            	    61: ; Returns:
                            	    62: ;		a0 = pointer to TCB
                            	    63: ;------------------------------------------------------------------------------
                            	    64: 
                            	    65: TCBHandleToPointer:
00:00000028 2F01            	    66: 	move.l d1,-(a7)
00:0000002A 028000000FFF    	    67: 	andi.l #MAX_TID,d0		; limit to # threads
00:00000030 4E7A1013        	    68: 	movec tcba,d1
00:00000034 E188            	    69: 	lsl.l #8,d0
00:00000036 D280            	    70: 	add.l d0,d1
00:00000038 2041            	    71: 	move.l d1,a0
00:0000003A E088            	    72: 	lsr.l #8,d0						; restore d0
00:0000003C 221F            	    73: 	move.l (a7)+,d1
00:0000003E 4E75            	    74: 	rts
                            	    75: 
                            	    76: ;------------------------------------------------------------------------------
                            	    77: ; Convert a TCB pointer into a handle.
                            	    78: ;
                            	    79: ; Parameters:
                            	    80: ;		a0 = TCB pointer
                            	    81: ; Returns:
                            	    82: ;		d0 = TCB handle
                            	    83: ;------------------------------------------------------------------------------
                            	    84: 
                            	    85: TCBPointerToHandle:
00:00000040 2F01            	    86: 	move.l d1,-(a7)				; save d1
00:00000042 4E7A1013        	    87: 	movec tcba,d1
00:00000046 91C1            	    88: 	sub.l d1,a0
00:00000048 2008            	    89: 	move.l a0,d0
00:0000004A E088            	    90: 	lsr.l #8,d0
00:0000004C 221F            	    91: 	move.l (a7)+,d1				; restore d1
00:0000004E 4E75            	    92: 	rts
                            	    93: 
                            	    94: ;------------------------------------------------------------------------------
                            	    95: ; Internal TCB allocation function.
                            	    96: ;
                            	    97: ; Parameters:
                            	    98: ;		none
                            	    99: ; Returns:
                            	   100: ;		d0 = handle for allocated TCB, NULL if none available
                            	   101: ;------------------------------------------------------------------------------
                            	   102: 
                            	   103: TCBIAlloc:
00:00000050 30390010030C    	   104: 	move.w FreeTCB,d0				; d1 = Free handle
00:00000056 6714            	   105: 	beq .0001
00:00000058 2F08            	   106: 	move.l a0,-(sp)
00:0000005A 61CC            	   107: 	bsr TCBHandleToPointer	; convert to pointer
00:0000005C 3228007C        	   108: 	move.w TCBNext(a0),d1		; d1 = next on free list
00:00000060 33C10010030C    	   109: 	move.w d1,FreeTCB				; update head of free list
00:00000066 61D8            	   110: 	bsr TCBPointerToHandle	; convert pointer to handle
00:00000068 205F            	   111: 	move.l (sp)+,a0
00:0000006A 4E75            	   112: 	rts
                            	   113: 	; Here there was no free TCB available. Return a NULL
                            	   114: .0001
00:0000006C 4E75            	   115: 	rts
                            	   116: 	
                            	   117: ;------------------------------------------------------------------------------
                            	   118: ; TCB allocation function. Locks the system semaphore during allocation.
                            	   119: ;
                            	   120: ; Parameters:
                            	   121: ;		none
                            	   122: ; Returns:
                            	   123: ;		d0 = handle for allocated TCB, NULL if none available
                            	   124: ;		d1 = E_Ok
                            	   125: ;------------------------------------------------------------------------------
                            	   126: 
                            	   127: TCBAlloc:
00:0000006E 61000326        	   128: 	bsr LockSysSemaphore
00:00000072 61DC            	   129: 	bsr	TCBIAlloc
00:00000074 61000330        	   130: 	bsr UnlockSysSemaphore
00:00000078 7200            	   131: 	moveq #E_Ok,d1
00:0000007A 4E75            	   132: 	rts
                            	   133: 	
                            	   134: ;------------------------------------------------------------------------------
                            	   135: ; Internal TCB free function.
                            	   136: ;
                            	   137: ; Modifies:
                            	   138: ;		none
                            	   139: ; Parameters:
                            	   140: ;		d0 = handle to TCB
                            	   141: ; Returns:
                            	   142: ;		d0 = handle to TCB
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: TCBIFree:
00:0000007C 2F08            	   146: 	move.l a0,-(sp)
00:0000007E 61A8            	   147: 	bsr TCBHandleToPointer
00:00000080 31790010030C007C	   148: 	move.w FreeTCB,TCBNext(a0)
00:00000088 33C00010030C    	   149: 	move.w d0,FreeTCB
00:0000008E 205F            	   150: 	move.l (sp)+,a0
00:00000090 4E75            	   151: 	rts
                            	   152: 
                            	   153: ;------------------------------------------------------------------------------
                            	   154: ; TCB free function. Locks the system sempaphore while freeing.
                            	   155: ;
                            	   156: ; Modifies:
                            	   157: ;		none
                            	   158: ; Parameters:
                            	   159: ;		d0 = handle to TCB
                            	   160: ; Returns:
                            	   161: ;		d0 = handle to TCB
                            	   162: ;		d1 = E_Ok
                            	   163: ;------------------------------------------------------------------------------
                            	   164: 
                            	   165: TCBFree:
00:00000092 61000302        	   166: 	bsr LockSysSemaphore
00:00000096 61E4            	   167: 	bsr TCBIFree
00:00000098 6100030C        	   168: 	bsr UnlockSysSemaphore
00:0000009C 7200            	   169: 	moveq #E_Ok,d1
00:0000009E 4E75            	   170: 	rts
                            	   171: 
                            	   172: ;------------------------------------------------------------------------------
                            	   173: ; Given an affinity, chose the core number to run on.
                            	   174: ;
                            	   175: ; Parameters:
                            	   176: ;		a0 = pointer to TCB
                            	   177: ;	Returns:
                            	   178: ;		d0 = core number to run on
                            	   179: ;------------------------------------------------------------------------------
                            	   180: 
                            	   181: TCBAffineChose:
00:000000A0 48E75000        	   182: 	movem.l d1/d3,-(sp)
00:000000A4 363C001F        	   183: 	move.w #31,d3										; limit number of bit selects to 32
00:000000A8 12280082        	   184: 	move.b TCBAffinityBase(a0),d1		; d1 = starting bit
00:000000AC 20280084        	   185: 	move.l TCBAffinity(a0),d0				; d0 = affinity mask
                            	   186: .0002
00:000000B0 0300            	   187: 	btst.l d1,d0										; is bit d1 set?
00:000000B2 6610            	   188: 	bne .0001												; if set, exit loop
00:000000B4 5241            	   189: 	addq #1,d1
00:000000B6 51CBFFF8        	   190: 	dbra d3,.0002
                            	   191: 	; no bits set? How?
00:000000BA 117C00020082    	   192: 	move.b #2,TCBAffinityBase(a0)
00:000000C0 7000            	   193: 	moveq #0,d0											; just return core #2 (0)
00:000000C2 4E75            	   194: 	rts
                            	   195: .0001
00:000000C4 1001            	   196: 	move.b d1,d0
00:000000C6 5500            	   197: 	subi.b #2,d0										; cores start at #2
00:000000C8 4880            	   198: 	ext.w d0
00:000000CA 48C0            	   199: 	ext.l d0
00:000000CC 5241            	   200: 	addq #1,d1											; increment bit selection for next time
00:000000CE 11410082        	   201: 	move.b d1,TCBAffinityBase(a0)		; and store in TCB
00:000000D2 4CDF000A        	   202: 	movem.l (sp)+,d1/d3
00:000000D6 4E75            	   203: 	rts
                            	   204: 
                            	   205: ;------------------------------------------------------------------------------
                            	   206: ; Insert thread into ready queue. The thread is added at the tail of the 
                            	   207: ; queue. The queue is a doubly linked list.
                            	   208: ;
                            	   209: ; Stack Space:
                            	   210: ;		8 lwords
                            	   211: ; Modifies:
                            	   212: ;		none
                            	   213: ; Parameters:
                            	   214: ;		d0 = thread id to insert
                            	   215: ; Returns:
                            	   216: ;		d0 = TCB handle
                            	   217: ; ----------------------------------------------------------------------------
                            	   218: 
                            	   219: TCBInsertIntoReadyQueue:
00:000000D8 48E770F0        	   220: 	movem.l d1-d3/a0-a3,-(sp)
00:000000DC 2400            	   221: 	move.l d0,d2											; d2 = thread to insert
00:000000DE 6100FF48        	   222: 	bsr TCBHandleToPointer
00:000000E2 2648            	   223: 	move.l a0,a3											; a3 = TCB pointer of thread to insert
00:000000E4 610002B0        	   224: 	bsr LockSysSemaphore
00:000000E8 002800800054    	   225: 	ori.b #TS_RUNNING,TCBStatus(a0)
00:000000EE 61B0            	   226: 	bsr TCBAffineChose								; Chose which cores queue to use
00:000000F0 EB88            	   227: 	lsl.l #5,d0												; 32 bytes per readyQ head/tail per core
00:000000F2 7200            	   228: 	clr.l d1
00:000000F4 12280055        	   229: 	move.b TCBPriority(a0),d1					; d1 = priority
00:000000F8 028100000007    	   230: 	andi.l #7,d1
00:000000FE E589            	   231: 	lsl.l #2,d1												; 4 bytes per priority level
00:00000100 D280            	   232: 	add.l d0,d1												; add in base queue
00:00000102 D2BC00100320    	   233: 	add.l #readyQ,d1									; add in start of ready queues
00:00000108 2241            	   234: 	move.l d1,a1
00:0000010A 30290004        	   235: 	move.w 4(a1),d0										; d0 = tail entry
00:0000010E 3600            	   236: 	move.w d0,d3											; d3 = tail entry
00:00000110 4A40            	   237: 	tst.w d0
00:00000112 6D20            	   238: 	blt .qempty
00:00000114 6100FF12        	   239: 	bsr TCBHandleToPointer						; a0 = pointer to tail
00:00000118 2448            	   240: 	move.l a0,a2
00:0000011A 2038007C        	   241: 	move.l TCBNext,d0
00:0000011E 6100FF08        	   242: 	bsr TCBHandleToPointer						; a0 = tail->next
00:00000122 21420080        	   243: 	move.l d2,TCBPrev(a0)							; tail->next->prev = new entry
00:00000126 2542007C        	   244: 	move.l d2,TCBNext(a2)							; tail->next = new entry
00:0000012A 2740007C        	   245: 	move.l d0,TCBNext(a3)							; new entry->next = tail->next
00:0000012E 27430080        	   246: 	move.l d3,TCBPrev(a3)							; new entry->prev = tail
00:00000132 6012            	   247: 	bra .0002
                            	   248: .qempty
00:00000134 4A51            	   249: 	tst.w (a1)												; check if there is a list head
00:00000136 6C0E            	   250: 	bge .0002													; head with no tail -> list corrupt
00:00000138 33420004        	   251: 	move.w d2,4(a1)										; head and tail equal new entry
00:0000013C 3282            	   252: 	move.w d2,(a1)
00:0000013E 3742007C        	   253: 	move.w d2,TCBNext(a3)							; next and prev of new entry point to self
00:00000142 37420080        	   254: 	move.w d2,TCBPrev(a3)
                            	   255: 	; Head but no tail, list corrupt?
                            	   256: .0002
00:00000146 6100025E        	   257: 	bsr UnlockSysSemaphore
00:0000014A 4CDF0F0E        	   258: 	movem.l (sp)+,d1-d3/a0-a3
00:0000014E 4E75            	   259: 	rts
                            	   260: 
                            	   261: ;------------------------------------------------------------------------------
                            	   262: ; Remove a thread from the ready queue. Actual removal is not done here, it
                            	   263: ; is done the next time the thread is selected to run. Just mark the thread as
                            	   264: ; not running.
                            	   265: ;
                            	   266: ; Parameters:
                            	   267: ;		d0 = thread id to remove
                            	   268: ; Returns:
                            	   269: ;		none
                            	   270: ; -----------------------------------------------------------------------------
                            	   271: 
                            	   272: TCBRemoveFromReadyQueue:
00:00000150 4A40            	   273: 	cmpi.w #0,d0
00:00000152 6D1C            	   274: 	blt .0001
00:00000154 028000000FFF    	   275: 	andi.l #MAX_TID,d0									; limit to # of threads
00:0000015A 2F08            	   276: 	move.l a0,-(sp)
00:0000015C 6100FECA        	   277: 	bsr	TCBHandleToPointer
00:00000160 61000234        	   278: 	bsr LockSysSemaphore
00:00000164 0228007F0054    	   279: 	andi.b #TS_RUNNING^$FF,TCBStatus(a0)
00:0000016A 6100023A        	   280: 	bsr UnlockSysSemaphore
00:0000016E 205F            	   281: 	move.l (sp)+,a0
                            	   282: .0001
00:00000170 4E75            	   283: 	rts
                            	   284: 	
                            	   285: ; ----------------------------------------------------------------------------
                            	   286: ; Register Usage
                            	   287: ;		d0 = temporary
                            	   288: ;		d1 = index into list of queues
                            	   289: ;		d2 = index to queue set
                            	   290: ;		d4 = queue counter, goes from 7 down to 0
                            	   291: ;		d5 = temporary
                            	   292: ;		d6 = next on list
                            	   293: ;		a0 = temporary pointer to TCB
                            	   294: ;		a1 = pointer to queue
                            	   295: ;		a2 = pointer to old head of list
                            	   296: ;		a3 = pointer to TCB at head of queue
                            	   297: ; Modifies:
                            	   298: ;		none
                            	   299: ; Parameters:
                            	   300: ;		none
                            	   301: ; Returns:
                            	   302: ;		a0 = pointer to TCB, NULL if none on list
                            	   303: ;		d0 = TCB handle
                            	   304: ; ----------------------------------------------------------------------------
                            	   305: 
                            	   306: StartQ
00:00000172 01              	   307: 	dc.b 1,2,3,4,1,5,6,7
00:00000173 02
00:00000174 03
00:00000175 04
00:00000176 01
00:00000177 05
00:00000178 06
00:00000179 07
                            	   308: 
                            	   309: 	even
                            	   310: TCBPopReadyQueue:
00:0000017A 48E77E70        	   311: 	movem.l	d1-d6/a1-a3,-(a7)
00:0000017E 4E7A2FE0        	   312: 	movec coreno,d2					; select the queue set based on the core number
00:00000182 5502            	   313: 	subi.b #2,d2						; cores start at #2
00:00000184 EB8A            	   314: 	lsl.l #5,d2							; d2 = index to queue set, 32 bytes per queue set
00:00000186 7807            	   315: 	moveq #7,d4							; d4 = queue count
00:00000188 6100020C        	   316: 	bsr LockSysSemaphore
                            	   317: 	; One in four tries pick a different priority to start searching from. 
00:0000018C 12390010031C    	   318: 	move.b QueueCycle,d1		; increment Queue cycle counter
00:00000192 5201            	   319: 	addi.b #1,d1
00:00000194 02010007        	   320: 	andi.b #7,d1
00:00000198 13C10010031C    	   321: 	move.b d1,QueueCycle
00:0000019E 6612            	   322: 	bne	.0001
00:000001A0 43FAFFD0        	   323: 	lea StartQ,a1
00:000001A4 4881            	   324: 	ext.w d1
00:000001A6 12311000        	   325: 	move.b (a1,d1.w),d1
00:000001AA 02410007        	   326: 	andi.w #7,d1						; limit to number of queues
00:000001AE E549            	   327: 	lsl.w #2,d1							; make into lword index
00:000001B0 6002            	   328: 	bra .0002
                            	   329: .0001
00:000001B2 7200            	   330: 	moveq #0,d1							; start at Queue #0
                            	   331: .0002
00:000001B4 43F900100320    	   332: 	lea readyQ,a1						; a1 = pointer to list of ready queues
00:000001BA D3C2            	   333: 	add.l d2,a1							; a1 = pointer to queue set
00:000001BC 36311000        	   334: 	move.w (a1,d1.w),d3			; d3 = old head of list
00:000001C0 6D4E            	   335: 	blt .nextQ							; anything on list?, if not go next queue
00:000001C2 3003            	   336: 	move.w d3,d0						; d0 = old head of list
00:000001C4 6100FE62        	   337: 	bsr TCBHandleToPointer
00:000001C8 2448            	   338: 	move.l a0,a2						; a2 = pointer to old head of list
00:000001CA 3A2A007C        	   339: 	move.w TCBNext(a2),d5		; remove head of list from list
00:000001CE BA80            	   340: 	cmp.l d0,d5							; removing last TCB?
00:000001D0 6736            	   341: 	beq .removeLast
00:000001D2 3C05            	   342: 	move.w d5,d6						; d6 = next on list
00:000001D4 3005            	   343: 	move.w d5,d0						; d0 = next on list
00:000001D6 6100FE50        	   344: 	bsr TCBHandleToPointer	; a0 = pointer to next TCB on list
00:000001DA 3A2A0080        	   345: 	move.w TCBPrev(a2),d5		; d5 = previous TCB from head
00:000001DE 31450080        	   346: 	move.w d5,TCBPrev(a0)		; next->prev = head->prev
00:000001E2 3005            	   347: 	move.w d5,d0
00:000001E4 6100FE42        	   348: 	bsr TCBHandleToPointer	; a0 = pointer to previous TCB from head
00:000001E8 3146007C        	   349: 	move.w d6,TCBNext(a0)		; head->prev->next = next
                            	   350: .0003
00:000001EC 33861000        	   351: 	move.w d6,(a1,d1.w)			; reset head of list to next
00:000001F0 3543007C        	   352: 	move.w d3,TCBNext(a2)		; point links back to self
00:000001F4 35430080        	   353: 	move.w d3,TCBPrev(a2)
00:000001F8 3003            	   354: 	move.w d3,d0						; return handle in d0
00:000001FA 48C0            	   355: 	ext.l d0
00:000001FC 204A            	   356: 	move.l a2,a0						; return pointer in a0
                            	   357: .0004
00:000001FE 610001A6        	   358: 	bsr UnlockSysSemaphore
00:00000202 4CDF0E7E        	   359: 	movem.l	(a7)+,d1-d6/a1-a3
00:00000206 4E75            	   360: 	rts
                            	   361: .removeLast
00:00000208 7CFF            	   362: 	moveq #-1,d6						; set head to negative when removing last
00:0000020A 33861002        	   363: 	move.w d6,2(a1,d1.w)		; tail = negative
00:0000020E 60DC            	   364: 	bra .0003
                            	   365: .nextQ
00:00000210 5841            	   366: 	addi.w #4,d1						; increment queue number by lword
00:00000212 0241001C        	   367: 	andi.w #$1C,d1					; limit to number of queues
00:00000216 51CCFF9C        	   368: 	dbra d4,.0002						; go back and check the next queue
00:0000021A 70FF            	   369: 	moveq #-1,d0						; return handle < 0 if nothing in any queue
00:0000021C 91C8            	   370: 	suba.l a0,a0						; and NULL pointer
00:0000021E 60DE            	   371: 	bra	.0004								; return NULL pointer if nothing in any queue
                            	   372: 
                            	   373: ;------------------------------------------------------------------------------
                            	   374: ; Remove a thread from the timeout list.
                            	   375: ; Called when a mailbox is freed and a thread is waiting at the
                            	   376: ; mailbox.
                            	   377: ;
                            	   378: ; Parameters:
                            	   379: ;		B = task id to remove
                            	   380: ; Modifies:
                            	   381: ;		none
                            	   382: ; Returns:
                            	   383: ;		none
                            	   384: ;------------------------------------------------------------------------------
                            	   385: 	if 0
                            	   386: RemoveFromTimeoutList:
                            	   387: 	pshs	d,w,x,y,u
                            	   388: 	cmpb	TimeoutList			; head of list?
                            	   389: 	beq		0001f
                            	   390: 	lbsr	TCBHandleToPointer
                            	   391: 	tfr		d,x
                            	   392: 	ldb		TCBNext,x
                            	   393: 	clra
                            	   394: 	tfr		d,u
                            	   395: 	ldf		TCBPrev,x
                            	   396: 	lbsr	TCBHandleToPointer
                            	   397: 	tfr		d,y
                            	   398: 	stf		TCBPrev,y
                            	   399: 	tfr		f,b
                            	   400: 	clra
                            	   401: 	lbsr	TCBHandleToPointer
                            	   402: 	tfr		d,y
                            	   403: 	tfr		u,d
                            	   404: 	stb		TCBNext,y
                            	   405: 	bra		0002f
                            	   406: 	; Removing from head of timeout list
                            	   407: 0001:
                            	   408: 	lbsr	TCBHandleToPointer
                            	   409: 	tfr		d,x
                            	   410: 	ldb		TCBNext,x
                            	   411: 	stb		TimeoutList		; set new head of list
                            	   412: 	clra
                            	   413: 	lbsr	TCBHandleToPointer
                            	   414: 	tfr		d,y
                            	   415: 	clrb
                            	   416: 	stb		TCBPrev,y			; next->prev = NULL
                            	   417: 0002:
                            	   418: 	clrd
                            	   419: 	std		TCBNext,x			; next = NULL
                            	   420: 	std		TCBPrev,x			; prev = NULL
                            	   421: 	puls	d,w,x,y,u,pc
                            	   422: 	
                            	   423: ;// ----------------------------------------------------------------------------
                            	   424: ;// Pop the top entry from the timeout list.
                            	   425: ;// ----------------------------------------------------------------------------
                            	   426: ;
                            	   427: ;hTCB PopTimeoutList()
                            	   428: ;{
                            	   429: ;    TCB *p;
                            	   430: ;    hTCB h;
                            	   431: ;
                            	   432: ;    h = TimeoutList;
                            	   433: ;    if (TimeoutList > 0 && TimeoutList < NR_TCB) {
                            	   434: ;        TimeoutList = tcbs[TimeoutList].next;
                            	   435: ;        if (TimeoutList >= 0 && TimeoutList < NR_TCB) {
                            	   436: ;            tcbs[TimeoutList].prev = h->prev;
                            	   437: ;            h->prev->next = TimeoutList;
                            	   438: ;        }
                            	   439: ;    }
                            	   440: ;    return h;
                            	   441: ;}
                            	   442: ;
                            	   443: ; Returns:
                            	   444: ;		B = task at top of list
                            	   445: ;
                            	   446: 
                            	   447: PopTimeoutList:
                            	   448: 	pshs	w,x,y
                            	   449: 	ldb		TimeoutList
                            	   450: 	pshs	b
                            	   451: 	beq		0001f
                            	   452: 	cmpb	#NR_TCB
                            	   453: 	bhs		0001f
                            	   454: 	bsr		TCBHandleToPointer
                            	   455: 	tfr		d,x
                            	   456: 	ldb		TCBNext,x
                            	   457: 	tfr		b,f
                            	   458: 	lde		TCBPrev,x
                            	   459: 	stb		TimeoutList
                            	   460: 	beq		0001f
                            	   461: 	cmpb	#NR_TCB
                            	   462: 	bhs		0001f
                            	   463: 	bsr		TCBHandleToPointer
                            	   464: 	tfr		d,y
                            	   465: 	ste		TCBPrev,y
                            	   466: 	tfr		e,b
                            	   467: 	bsr		TCBHandleToPointer
                            	   468: 	tfr		d,y
                            	   469: 	stf		TCBNext,y
                            	   470: 	clr		TCBPrev,x
                            	   471: 	clr		TCBNext,x
                            	   472: 0001:
                            	   473: 	puls	b
                            	   474: 	puls	x,y,w,pc
                            	   475: 
                            	   476: ; ----------------------------------------------------------------------------
                            	   477: ; ----------------------------------------------------------------------------
                            	   478: DispTwoSpace:
                            	   479: 	bsr	DispSpace
                            	   480: DispSpace:
                            	   481: 	ldb		#' '
                            	   482: 	swi
                            	   483: 	fcb		MF_OUTCH
                            	   484: 	rts
                            	   485: 
                            	   486: DumpTCBs:
                            	   487: 	swi
                            	   488: 	fcb		MF_CRLF
                            	   489: 	ldb		#1
                            	   490: 0002:
                            	   491: 	lbsr	TCBHandleToPointer
                            	   492: 	tfr		d,x
                            	   493: 	ldb		TCBtid,x
                            	   494: 	swi
                            	   495: 	fcb		MF_DisplayByteAsHex
                            	   496: 	bsr		DispSpace
                            	   497: 	ldb		TCBStatus,x
                            	   498: 	swi
                            	   499: 	fcb		MF_DisplayByteAsHex
                            	   500: 	bsr		DispTwoSpace
                            	   501: 	swi
                            	   502: 	fcb		MF_CRLF
                            	   503: 	ldb		TCBNext,x
                            	   504: 	beq		0001f
                            	   505: 	bra		0002b
                            	   506: 0001:
                            	   507: 	rts
                            	   508: 	
                            	   509: fcb	"TID Stat"
                            	   510: 	endif
                            	   511: 
                            	   512: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     9: 	include "..\Femtiki\source\kernel\Femtiki.x68"

Source: "..\Femtiki\source\kernel\Femtiki.x68"
                            	     1: 	code
                            	     2: 	even
                            	     3: ;------------------------------------------------------------------------------
                            	     4: ; Initialize the Femtiki OS.
                            	     5: ;------------------------------------------------------------------------------
                            	     6: 
                            	     7: FemtikiInit:
00:00000220 7000            	     8: 	moveq #0,d0
00:00000222 4E7B0012        	     9: 	movec d0,tr
00:00000226 6100FDD8        	    10: 	bsr TCBInit
00:0000022A 42390010031C    	    11: 	clr.b QueueCycle
                            	    12: FemtikiInitIRQ:
00:00000230 43FA00DC        	    13: 	lea FemtikiTimerIRQ,a1						; Set timer IRQ vector to Femtiki
00:00000234 4E7A8801        	    14: 	movec vbr,a0
00:00000238 21490078        	    15: 	move.l a1,30*4(a0)								; vector #30
00:0000023C 4E75            	    16: 	rts
                            	    17: 
                            	    18: ;------------------------------------------------------------------------------
                            	    19: ; Operating system call dispatcher.
                            	    20: ; On entry, the task state has been saved including the system stack pointer,
                            	    21: ; in the task control block.
                            	    22: ;------------------------------------------------------------------------------
                            	    23: 
                            	    24: OSCallTable
00:0000023E 0000            	    25: 	dc.w		0
                            	    26: 
                            	    27: 	even
                            	    28: CallOS:
00:00000240 2F08            	    29: 	move.l	a0,-(a7)
00:00000242 207900100224    	    30: 	move.l	RunningTCB,a0
00:00000248 48E8FFFF0004    	    31: 	movem.l d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,TCBRegs(a0)
00:0000024E 225F            	    32: 	move.l	(a7)+,a1
00:00000250 21490020        	    33: 	move.l	a1,32(a0)
00:00000254 4E7A9800        	    34: 	movec		usp,a1
00:00000258 21490044        	    35: 	move.l	a1,TCBUSP(a0)
00:0000025C 301F            	    36: 	move.w	(a7)+,d0					; pop the status register
00:0000025E 3140004C        	    37: 	move.w	d0,TCBSR(a0)			; save in TCB
00:00000262 225F            	    38: 	move.l	(a7)+,a1					; pop the program counter
00:00000264 5489            	    39: 	lea	2(a1),a1							; increment past inline callno argument
00:00000266 21490050        	    40: 	move.l	a1,TCBPC(a0)			; save PC in TCB
00:0000026A 214F0048        	    41: 	move.l	a7,TCBSSP(a0)			; finally save SSP
00:0000026E 3029FFFE        	    42: 	move.w	-2(a1),d0					; d0 = call number
00:00000272 E548            	    43: 	lsl.w		#2,d0							; make into table index
00:00000274 43FAFFC8        	    44: 	lea			OSCallTable,a1
00:00000278 22710000        	    45: 	move.l	(a1,d0.w),a1
00:0000027C 4E91            	    46: 	jsr			(a1)							; call the OS function
                            	    47: 	; Restore the thread context and return
00:0000027E 207900100224    	    48: 	move.l	RunningTCB,a0
00:00000284 2E780048        	    49: 	move.l	TCBSSP,a7
00:00000288 2F280050        	    50: 	move.l	TCBPC(a0),-(a7)		; setup the PC and the SR on the stack
00:0000028C 3F28004C        	    51: 	move.w	TCBSR(a0),-(a7)		; prep for RTE
00:00000290 20380044        	    52: 	move.l	TCBUSP,d0					; restore user stack pointer
00:00000294 4E7B0800        	    53: 	movec		d0,usp
00:00000298 4CE800FF0004    	    54: 	movem.l	TCBRegs(a0),d0/d1/d2/d3/d4/d5/d6/d7
00:0000029E 4CE87E00002C    	    55: 	movem.l TCBRegs+40(a0),a1/a2/a3/a4/a5/a6
00:000002A4 20680024        	    56: 	move.l	TCBRegs+32(a0),a0
00:000002A8 4E73            	    57: 	rte
                            	    58: 
                            	    59: ;------------------------------------------------------------------------------
                            	    60: ; Get a pointer to the currently running TCB.
                            	    61: ;
                            	    62: ; Returns:
                            	    63: ;		a0 = pointer to running TCB
                            	    64: ;------------------------------------------------------------------------------
                            	    65: 
                            	    66: GetRunningTCBPointer:
00:000002AA 48E7C000        	    67: 	movem.l d0/d1,-(a7)
00:000002AE 4E7A0012        	    68: 	movec tr,d0
00:000002B2 6100FD74        	    69: 	bsr TCBHandleToPointer
00:000002B6 028000000FFF    	    70: 	andi.l #MAX_TID,d0		; limit to # threads
00:000002BC 4CDF0003        	    71: 	movem.l (a7)+,d0/d1
00:000002C0 4E75            	    72: 	rts
                            	    73: 
                            	    74: ; ----------------------------------------------------------------------------
                            	    75: ; Select a thread to run. Relatively easy. All that needs to be done is to
                            	    76: ; keep popping the queue until a valid running task is found. There should
                            	    77: ; always be at least one thread in the queue.
                            	    78: ;
                            	    79: ; Modifies:
                            	    80: ;		none
                            	    81: ; Returns:
                            	    82: ;		d0 = handle of the next thread to run
                            	    83: ; ----------------------------------------------------------------------------
                            	    84: 
                            	    85: SelectThreadToRun:
                            	    86: .0001										; keep popping tasks from the readyQ until a valid one
00:000002C2 6100FEB6        	    87: 	bsr	TCBPopReadyQueue	; is found.
00:000002C6 4A40            	    88: 	tst.w d0
00:000002C8 6B0C            	    89: 	bmi	.0002
00:000002CA 0C2800800054    	    90: 	cmpi.b #TS_RUNNING,TCBStatus(a0)	; ensure the thread is to be running
00:000002D0 66F0            	    91: 	bne	.0001													; if not, go get the next thread
00:000002D2 6000FE04        	    92: 	bra	TCBInsertIntoReadyQueue				; insert thread back into queue
                            	    93: 	; Nothing in queues? There is supposed to be. Add the OS task to the queue.
                            	    94: .0002
00:000002D6 4E7A8013        	    95: 	movec tcba,a0
00:000002DA 117C00800054    	    96: 	move.b #TS_RUNNING,TCBStatus(a0)	; flag as RUNNING
00:000002E0 117C00040055    	    97: 	move.b #4,TCBPriority(a0)					; OS has normal priority
00:000002E6 7000            	    98: 	moveq #0,d0												; fast pointer to handle
00:000002E8 6000FDEE        	    99: 	bra TCBInsertIntoReadyQueue
                            	   100: 
                            	   101: ; ----------------------------------------------------------------------------
                            	   102: ; Update the IRQ live indicator on screen.
                            	   103: ; ----------------------------------------------------------------------------
                            	   104: 
                            	   105: UpdateIRQLive:
00:000002EC 227900040004    	   106: 	move.l TextScr,a1					; a1 = screen address
00:000002F2 2411            	   107: 	move.l (a1),d2
00:000002F4 E15A            	   108: 	rol.w	#8,d2								; reverse byte order of d2
00:000002F6 4842            	   109: 	swap d2
00:000002F8 E15A            	   110: 	rol.w	#8,d2
00:000002FA 06010030        	   111: 	addi.b #'0',d1						; binary to ascii core number
00:000002FE D202            	   112: 	add.b	d2,d1
00:00000300 E159            	   113: 	rol.w	#8,d1								; put bytes back in order
00:00000302 4841            	   114: 	swap d1
00:00000304 E159            	   115: 	rol.w	#8,d1
00:00000306 23410004        	   116: 	move.l d1,4(a1)						; update onscreen IRQ flag
00:0000030A 5291            	   117: 	addi.l #1,(a1)						; flashy colors
00:0000030C 4E75            	   118: 	rts
                            	   119: 
                            	   120: ; ----------------------------------------------------------------------------
                            	   121: ; Femtiki IRQ service routine. This is where a thread switch can occur so,
                            	   122: ; the thread context is saved and restored.
                            	   123: ; ----------------------------------------------------------------------------
                            	   124: 
                            	   125: FemtikiTimerIRQ:
00:0000030E 46FC2600        	   126: 	move.w #$2600,sr							; disable lower level IRQs
00:00000312 2F00            	   127: 	move.l d0,-(a7)
00:00000314 2F08            	   128: 	move.l a0,-(a7)
00:00000316 6192            	   129: 	bsr GetRunningTCBPointer			; a0 = pointer to running TCB
00:00000318 48E8FFFF0004    	   130: 	movem.l #$FFFF,TCBRegs(a0)		; save all registers
00:0000031E 201F            	   131: 	move.l (a7)+,d0
00:00000320 21400020        	   132: 	move.l d0,32(a0)							; save original a0 value
00:00000324 201F            	   133: 	move.l (a7)+,d0
00:00000326 2080            	   134: 	move.l d0,(a0)								; save original d0 value
00:00000328 4E7A0800        	   135: 	movec usp,d0									; save user stack pointer
00:0000032C 21400044        	   136: 	move.l d0,TCBUSP(a0)
00:00000330 2E7C00041BFC    	   137: 	move.l #TimerStack,a7					; reset stack pointer
00:00000336 4E7A1FE0        	   138: 	movec	coreno,d1								; d1 = core number
00:0000033A 0C010002        	   139: 	cmpi.b #2,d1
00:0000033E 6612            	   140: 	bne.s	.0002
00:00000340 23FC1D000000FD09	   141: 	move.l #$1D000000,PLIC+$14		; reset edge sense circuit
00:00000348 0014
00:0000034A 13FC0001000400A0	   142: 	move.b #1,IRQFlag							; set IRQ flag for TinyBasic shell
                            	   143: .0002
00:00000352 6198            	   144: 	bsr UpdateIRQLive							; Update IRQ live indicator
                            	   145: ;	bsr ReceiveMsg								; Check for RPC
00:00000354 4E7A0FF0        	   146: 	movec tick,d0									; Update time accounting
00:00000358 21400070        	   147: 	move.l d0,TCBEndTick(a0)			; compute number of ticks thread was running
00:0000035C 90A8006C        	   148: 	sub.l	TCBStartTick(a0),d0
00:00000360 D1A80074        	   149: 	add.l	d0,TCBTicks(a0)					; add to cumulative ticks
00:00000364 117C00200054    	   150: 	move.b #TS_PREEMPT,TCBStatus(a0)	; set thread status to PREEMPT
00:0000036A 6100FF56        	   151: 	bsr	SelectThreadToRun					; d0 = TCB handle
00:0000036E 4E7B0012        	   152: 	movec d0,tr										; set running thread number in tr
00:00000372 6100FF36        	   153: 	bsr GetRunningTCBPointer			; a0 = pointer to TCB
00:00000376 117C00800054    	   154: 	move.b #TS_RUNNING,TCBStatus(a0)	; set thread status to RUNNING
00:0000037C 4E7A0FF0        	   155: 	movec	tick,d0
00:00000380 2140006C        	   156: 	move.l d0,TCBStartTick(a0)		; record starting tick
00:00000384 20280044        	   157: 	move.l TCBUSP(a0),d0					; restore user stack pointer
00:00000388 4E7B0800        	   158: 	movec d0,usp
00:0000038C 4CE8FFFF0004    	   159: 	movem.l TCBRegs(a0),#$FFFF		; restore all registers
00:00000392 504F            	   160: 	addq #8,sp										; "pop" d0/a0, saved stack pointer is off by 8
00:00000394 4E73            	   161: 	rte														; and return
                            	   162: 
                            	   163: 	include "..\Femtiki\source\kernel\Semaphore.x68"

Source: "..\Femtiki\source\kernel\Semaphore.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;-------------------------------------------------------------------------------
                            	    38: ; Lock the system semaphore. Call the BIOS.
                            	    39: ;
                            	    40: ; Parameters:
                            	    41: ;		none
                            	    42: ; Returns:
                            	    43: ;		none
                            	    44: ;-------------------------------------------------------------------------------
                            	    45: 
                            	    46: LockSysSemaphore:
00:00000396 48E7C000        	    47: 	movem.l d0/d1,-(sp)
00:0000039A 7025            	    48: 	moveq #37,d0				; lock semaphore
00:0000039C 7208            	    49: 	moveq #FMTK_SEMA,d1
00:0000039E 4E4F            	    50: 	trap #15
00:000003A0 4CDF0003        	    51: 	movem.l (sp)+,d0/d1
00:000003A4 4E75            	    52: 	rts
                            	    53: 
                            	    54: 
                            	    55: ;-------------------------------------------------------------------------------
                            	    56: ; Unlock the system semaphore.
                            	    57: ;
                            	    58: ; Parameters:
                            	    59: ;		none
                            	    60: ; Returns:
                            	    61: ;		none
                            	    62: ;-------------------------------------------------------------------------------
                            	    63: 
                            	    64: UnlockSysSemaphore:
00:000003A6 48E7C000        	    65: 	movem.l d0/d1,-(sp)
00:000003AA 7026            	    66: 	moveq #38,d0				; unlock semaphore
00:000003AC 7208            	    67: 	moveq #FMTK_SEMA,d1
00:000003AE 4E4F            	    68: 	trap #15
00:000003B0 4CDF0003        	    69: 	movem.l (sp)+,d0/d1
00:000003B4 4E75            	    70: 	rts
                            	    71: 
                            	    72: 

Source: "..\Femtiki\source\kernel\Femtiki.x68"
                            	   164: 
                            	   165: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	    10: 

Source: "boot.x68"
                            	   133: 
                            	   134: DDATA EQU $FFFFFFF0     ; DS.L    3
                            	   135: HISPC EQU $FFFFFFFC     ; DS.L    1
                            	   136: SCREEN_FORMAT = 1
                            	   137: 
                            	   138: 	if HAS_MMU
                            	   139: TEXTREG		EQU	$1E3FF00	; virtual addresses
                            	   140: txtscreen	EQU	$1E00000
                            	   141: semamem		EQU	$1E50000
                            	   142: ACIA			EQU	$1E60000
                            	   143: ACIA_RX		EQU	0
                            	   144: ACIA_TX		EQU	0
                            	   145: ACIA_STAT	EQU	4
                            	   146: ACIA_CMD	EQU	8
                            	   147: ACIA_CTRL	EQU	12
                            	   148: I2C2 			equ $01E69010
                            	   149: I2C_PREL 	equ 0
                            	   150: I2C_PREH 	equ 1
                            	   151: I2C_CTRL 	equ 2
                            	   152: I2C_RXR 	equ 3
                            	   153: I2C_TXR 	equ 3
                            	   154: I2C_CMD 	equ 4
                            	   155: I2C_STAT 	equ 4
                            	   156: PLIC			EQU	$1E90000
                            	   157: MMU				EQU $FDC00000	; physical address
                            	   158: leds			EQU	$1EFFF00	; virtual addresses
                            	   159: keybd			EQU	$1EFFE00
                            	   160: KEYBD			EQU	$1EFFE00
                            	   161: RAND			EQU	$1EFFD00
                            	   162: RAND_NUM	EQU	$1EFFD00
                            	   163: RAND_STRM	EQU	$1EFFD04
                            	   164: RAND_MZ		EQU $1EFFD08
                            	   165: RAND_MW		EQU	$1EFFD0C
                            	   166: RST_REG		EQU	$1EFFC00
                            	   167: IO_BITMAP	EQU $1F00000
                            	   168: 	else
                            	   169: TEXTREG		EQU	$FD080000
                            	   170: txtscreen	EQU	$FD000000
                            	   171: semamem		EQU	$FD050000
                            	   172: ACIA			EQU	$FD060000
                            	   173: ACIA_RX		EQU	0
                            	   174: ACIA_TX		EQU	0
                            	   175: ACIA_STAT	EQU	4
                            	   176: ACIA_CMD	EQU	8
                            	   177: ACIA_CTRL	EQU	12
                            	   178: I2C1 			equ $FD069000
                            	   179: I2C2 			equ $FD069010
                            	   180: SPI_MASTER1	equ	$FD06A000
                            	   181: SPI_MASTER2	equ $FD06A100
                            	   182: I2C_PREL 	equ 0
                            	   183: I2C_PREH 	equ 1
                            	   184: I2C_CTRL 	equ 2
                            	   185: I2C_RXR 	equ 3
                            	   186: I2C_TXR 	equ 3
                            	   187: I2C_CMD 	equ 4
                            	   188: I2C_STAT 	equ 4
                            	   189: PLIC			EQU	$FD090000
                            	   190: MMU				EQU $FDC00000	; physical address
                            	   191: leds			EQU	$FD0FFF00	; virtual addresses
                            	   192: keybd			EQU	$FD0FFE00
                            	   193: KEYBD			EQU	$FD0FFE00
                            	   194: RAND			EQU	$FD0FFD00
                            	   195: RAND_NUM	EQU	$FD0FFD00
                            	   196: RAND_STRM	EQU	$FD0FFD04
                            	   197: RAND_MZ		EQU $FD0FFD08
                            	   198: RAND_MW		EQU	$FD0FFD0C
                            	   199: RST_REG		EQU	$FD0FFC00
                            	   200: IO_BITMAP	EQU $FD100000
                            	   201: FRAMEBUF	EQU	$FD200000
                            	   202: GFXACCEL	EQU	$FD300000
                            	   203: 	endif
                            	   204: 
                            	   205: SERIAL_SEMA	EQU	2
                            	   206: KEYBD_SEMA	EQU	3
                            	   207: RAND_SEMA		EQU	4
                            	   208: SCREEN_SEMA	EQU	5
                            	   209: MEMORY_SEMA EQU 6
                            	   210: TCB_SEMA 		EQU	7
                            	   211: FMTK_SEMA		EQU	8
                            	   212: 
                            	   213: macIRQ_proc	macro arg1
                            	   214: 	dc.l IRQ_proc\1
                            	   215: endm
                            	   216: 
                            	   217: macIRQ_proc_label	macro arg1
                            	   218: IRQ_proc\1:
                            	   219: endm
                            	   220: 
                            	   221: macHmash macro arg1
                            	   222: 	swap \1
                            	   223: 	eori.l #DEV_HMASH,\1
                            	   224: endm
                            	   225: 
                            	   226: macUnhmash macro arg1
                            	   227: 	eori.l #DEV_HMASH,\1
                            	   228: 	swap \1
                            	   229: endm
                            	   230: 
                            	   231: 	data
                            	   232: 	; 0
01:00000000 00040FFC        	   233: 	dc.l		$00040FFC
01:00000004 000003B8        	   234: 	dc.l		start
01:00000008 00009D18        	   235: 	dc.l		bus_err
01:0000000C 0000A0F6        	   236: 	dc.l		addr_err
01:00000010 0000A144        	   237: 	dc.l		illegal_trap		* ILLEGAL instruction
01:00000014 00000000        	   238: 	dc.l		0
01:00000018 0000262A        	   239: 	dc.l		chk_exception		; CHK
01:0000001C 0000276E        	   240: 	dc.l		EXCEPTION_7			* TRAPV
01:00000020 00000000        	   241: 	dc.l		0
01:00000024 00000000        	   242: 	dc.l		0
                            	   243: 	
                            	   244: 	; 10
01:00000028 00000000        	   245: 	dc.l		0
01:0000002C 00000000        	   246: 	dc.l		0
01:00000030 00000000        	   247: 	dc.l		0
01:00000034 00000000        	   248: 	dc.l		0
01:00000038 00000000        	   249: 	dc.l		0
01:0000003C 00000000        	   250: 	dc.l		0
01:00000040 00000000        	   251: 	dc.l		0
01:00000044 00000000        	   252: 	dc.l		0
01:00000048 00000000        	   253: 	dc.l		0
01:0000004C 00000000        	   254: 	dc.l		0
                            	   255: 	
                            	   256: 	; 20
01:00000050 00000000        	   257: 	dc.l		0
01:00000054 00000000        	   258: 	dc.l		0
01:00000058 00000000        	   259: 	dc.l		0
01:0000005C 00000000        	   260: 	dc.l		0
01:00000060 0000A0E2        	   261: 	dc.l		SpuriousIRQ
01:00000064 00000000        	   262: 	dc.l		0
01:00000068 00000000        	   263: 	dc.l		0
01:0000006C 0000A0B0        	   264: 	dc.l		irq3_rout
01:00000070 00000000        	   265: 	dc.l		0
01:00000074 00000000        	   266: 	dc.l		0
                            	   267: 	
                            	   268: 	; 30
01:00000078 0000A06E        	   269: 	dc.l		TickIRQ						; IRQ 30 - timer / keyboard
01:0000007C 0000A0E4        	   270: 	dc.l		nmi_rout
01:00000080 00009FD2        	   271: 	dc.l		io_trap						; TRAP zero
01:00000084 00000000        	   272: 	dc.l		0
01:00000088 00000000        	   273: 	dc.l		0
01:0000008C 00009D32        	   274: 	dc.l		trap3							; breakpoint
01:00000090 00000000        	   275: 	dc.l		0
01:00000094 00000000        	   276: 	dc.l		0
01:00000098 00000000        	   277: 	dc.l		0
01:0000009C 00000000        	   278: 	dc.l		0
                            	   279: 
                            	   280: 	; 40
01:000000A0 00000000        	   281: 	dc.l		0
01:000000A4 00000000        	   282: 	dc.l		0
01:000000A8 00000000        	   283: 	dc.l		0
01:000000AC 00000000        	   284: 	dc.l		0
01:000000B0 00000000        	   285: 	dc.l		0
01:000000B4 00000000        	   286: 	dc.l		0
01:000000B8 00000000        	   287: 	dc.l		0
01:000000BC 00007B4A        	   288: 	dc.l		TRAP15
01:000000C0 00000000        	   289: 	dc.l		0
01:000000C4 00000000        	   290: 	dc.l		0
                            	   291: 
                            	   292: 	; 50	
01:000000C8 00000000        	   293: 	dc.l		0
01:000000CC 00000000        	   294: 	dc.l		0
01:000000D0 00000000        	   295: 	dc.l		0
01:000000D4 00000000        	   296: 	dc.l		0
01:000000D8 00000000        	   297: 	dc.l		0
01:000000DC 00000000        	   298: 	dc.l		0
01:000000E0 00000000        	   299: 	dc.l		0
01:000000E4 00000000        	   300: 	dc.l		0
01:000000E8 00000000        	   301: 	dc.l		0
01:000000EC 0000A15A        	   302: 	dc.l		io_irq
                            	   303: 
                            	   304: 	; 60
01:000000F0 00000B92        	   305: 	dc.l		KeybdIRQ
01:000000F4 000017FC        	   306: 	dc.l		SerialIRQ
01:000000F8 00000000        	   307: 	dc.l		0
01:000000FC 0000A10C        	   308: 	dc.l		brdisp_trap
                            	   309: 	
                            	   310: 	; 64
                            	   311: 
                            	   312: IRQ_trampolines:
                            	   313: ;	rept 192
                            	   314: ;	macIRQ_proc REPTN
                            	   315: ;	endr
                            	   316: 
                            	   317: 	org			$400
                            	   318: 
                            	   319: irq_list_tbl:
                            	   320: 	rept 192
                            	   321: 	dc.l 0
                            	   322: 	dc.l 0
                            	   323: 	endr
01:00000400 00000000        	     1R 	dc.l 0
01:00000404 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000408 00000000        	     1R 	dc.l 0
01:0000040C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000410 00000000        	     1R 	dc.l 0
01:00000414 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000418 00000000        	     1R 	dc.l 0
01:0000041C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000420 00000000        	     1R 	dc.l 0
01:00000424 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000428 00000000        	     1R 	dc.l 0
01:0000042C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000430 00000000        	     1R 	dc.l 0
01:00000434 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000438 00000000        	     1R 	dc.l 0
01:0000043C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000440 00000000        	     1R 	dc.l 0
01:00000444 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000448 00000000        	     1R 	dc.l 0
01:0000044C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000450 00000000        	     1R 	dc.l 0
01:00000454 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000458 00000000        	     1R 	dc.l 0
01:0000045C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000460 00000000        	     1R 	dc.l 0
01:00000464 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000468 00000000        	     1R 	dc.l 0
01:0000046C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000470 00000000        	     1R 	dc.l 0
01:00000474 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000478 00000000        	     1R 	dc.l 0
01:0000047C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000480 00000000        	     1R 	dc.l 0
01:00000484 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000488 00000000        	     1R 	dc.l 0
01:0000048C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000490 00000000        	     1R 	dc.l 0
01:00000494 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000498 00000000        	     1R 	dc.l 0
01:0000049C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004A0 00000000        	     1R 	dc.l 0
01:000004A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004A8 00000000        	     1R 	dc.l 0
01:000004AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004B0 00000000        	     1R 	dc.l 0
01:000004B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004B8 00000000        	     1R 	dc.l 0
01:000004BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004C0 00000000        	     1R 	dc.l 0
01:000004C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004C8 00000000        	     1R 	dc.l 0
01:000004CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004D0 00000000        	     1R 	dc.l 0
01:000004D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004D8 00000000        	     1R 	dc.l 0
01:000004DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004E0 00000000        	     1R 	dc.l 0
01:000004E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004E8 00000000        	     1R 	dc.l 0
01:000004EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004F0 00000000        	     1R 	dc.l 0
01:000004F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004F8 00000000        	     1R 	dc.l 0
01:000004FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000500 00000000        	     1R 	dc.l 0
01:00000504 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000508 00000000        	     1R 	dc.l 0
01:0000050C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000510 00000000        	     1R 	dc.l 0
01:00000514 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000518 00000000        	     1R 	dc.l 0
01:0000051C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000520 00000000        	     1R 	dc.l 0
01:00000524 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000528 00000000        	     1R 	dc.l 0
01:0000052C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000530 00000000        	     1R 	dc.l 0
01:00000534 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000538 00000000        	     1R 	dc.l 0
01:0000053C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000540 00000000        	     1R 	dc.l 0
01:00000544 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000548 00000000        	     1R 	dc.l 0
01:0000054C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000550 00000000        	     1R 	dc.l 0
01:00000554 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000558 00000000        	     1R 	dc.l 0
01:0000055C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000560 00000000        	     1R 	dc.l 0
01:00000564 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000568 00000000        	     1R 	dc.l 0
01:0000056C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000570 00000000        	     1R 	dc.l 0
01:00000574 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000578 00000000        	     1R 	dc.l 0
01:0000057C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000580 00000000        	     1R 	dc.l 0
01:00000584 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000588 00000000        	     1R 	dc.l 0
01:0000058C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000590 00000000        	     1R 	dc.l 0
01:00000594 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000598 00000000        	     1R 	dc.l 0
01:0000059C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005A0 00000000        	     1R 	dc.l 0
01:000005A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005A8 00000000        	     1R 	dc.l 0
01:000005AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005B0 00000000        	     1R 	dc.l 0
01:000005B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005B8 00000000        	     1R 	dc.l 0
01:000005BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005C0 00000000        	     1R 	dc.l 0
01:000005C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005C8 00000000        	     1R 	dc.l 0
01:000005CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005D0 00000000        	     1R 	dc.l 0
01:000005D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005D8 00000000        	     1R 	dc.l 0
01:000005DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005E0 00000000        	     1R 	dc.l 0
01:000005E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005E8 00000000        	     1R 	dc.l 0
01:000005EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005F0 00000000        	     1R 	dc.l 0
01:000005F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005F8 00000000        	     1R 	dc.l 0
01:000005FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000600 00000000        	     1R 	dc.l 0
01:00000604 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000608 00000000        	     1R 	dc.l 0
01:0000060C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000610 00000000        	     1R 	dc.l 0
01:00000614 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000618 00000000        	     1R 	dc.l 0
01:0000061C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000620 00000000        	     1R 	dc.l 0
01:00000624 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000628 00000000        	     1R 	dc.l 0
01:0000062C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000630 00000000        	     1R 	dc.l 0
01:00000634 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000638 00000000        	     1R 	dc.l 0
01:0000063C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000640 00000000        	     1R 	dc.l 0
01:00000644 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000648 00000000        	     1R 	dc.l 0
01:0000064C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000650 00000000        	     1R 	dc.l 0
01:00000654 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000658 00000000        	     1R 	dc.l 0
01:0000065C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000660 00000000        	     1R 	dc.l 0
01:00000664 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000668 00000000        	     1R 	dc.l 0
01:0000066C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000670 00000000        	     1R 	dc.l 0
01:00000674 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000678 00000000        	     1R 	dc.l 0
01:0000067C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000680 00000000        	     1R 	dc.l 0
01:00000684 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000688 00000000        	     1R 	dc.l 0
01:0000068C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000690 00000000        	     1R 	dc.l 0
01:00000694 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000698 00000000        	     1R 	dc.l 0
01:0000069C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006A0 00000000        	     1R 	dc.l 0
01:000006A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006A8 00000000        	     1R 	dc.l 0
01:000006AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006B0 00000000        	     1R 	dc.l 0
01:000006B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006B8 00000000        	     1R 	dc.l 0
01:000006BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006C0 00000000        	     1R 	dc.l 0
01:000006C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006C8 00000000        	     1R 	dc.l 0
01:000006CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006D0 00000000        	     1R 	dc.l 0
01:000006D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006D8 00000000        	     1R 	dc.l 0
01:000006DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006E0 00000000        	     1R 	dc.l 0
01:000006E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006E8 00000000        	     1R 	dc.l 0
01:000006EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006F0 00000000        	     1R 	dc.l 0
01:000006F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006F8 00000000        	     1R 	dc.l 0
01:000006FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000700 00000000        	     1R 	dc.l 0
01:00000704 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000708 00000000        	     1R 	dc.l 0
01:0000070C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000710 00000000        	     1R 	dc.l 0
01:00000714 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000718 00000000        	     1R 	dc.l 0
01:0000071C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000720 00000000        	     1R 	dc.l 0
01:00000724 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000728 00000000        	     1R 	dc.l 0
01:0000072C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000730 00000000        	     1R 	dc.l 0
01:00000734 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000738 00000000        	     1R 	dc.l 0
01:0000073C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000740 00000000        	     1R 	dc.l 0
01:00000744 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000748 00000000        	     1R 	dc.l 0
01:0000074C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000750 00000000        	     1R 	dc.l 0
01:00000754 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000758 00000000        	     1R 	dc.l 0
01:0000075C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000760 00000000        	     1R 	dc.l 0
01:00000764 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000768 00000000        	     1R 	dc.l 0
01:0000076C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000770 00000000        	     1R 	dc.l 0
01:00000774 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000778 00000000        	     1R 	dc.l 0
01:0000077C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000780 00000000        	     1R 	dc.l 0
01:00000784 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000788 00000000        	     1R 	dc.l 0
01:0000078C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000790 00000000        	     1R 	dc.l 0
01:00000794 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000798 00000000        	     1R 	dc.l 0
01:0000079C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007A0 00000000        	     1R 	dc.l 0
01:000007A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007A8 00000000        	     1R 	dc.l 0
01:000007AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007B0 00000000        	     1R 	dc.l 0
01:000007B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007B8 00000000        	     1R 	dc.l 0
01:000007BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007C0 00000000        	     1R 	dc.l 0
01:000007C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007C8 00000000        	     1R 	dc.l 0
01:000007CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007D0 00000000        	     1R 	dc.l 0
01:000007D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007D8 00000000        	     1R 	dc.l 0
01:000007DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007E0 00000000        	     1R 	dc.l 0
01:000007E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007E8 00000000        	     1R 	dc.l 0
01:000007EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007F0 00000000        	     1R 	dc.l 0
01:000007F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007F8 00000000        	     1R 	dc.l 0
01:000007FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000800 00000000        	     1R 	dc.l 0
01:00000804 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000808 00000000        	     1R 	dc.l 0
01:0000080C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000810 00000000        	     1R 	dc.l 0
01:00000814 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000818 00000000        	     1R 	dc.l 0
01:0000081C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000820 00000000        	     1R 	dc.l 0
01:00000824 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000828 00000000        	     1R 	dc.l 0
01:0000082C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000830 00000000        	     1R 	dc.l 0
01:00000834 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000838 00000000        	     1R 	dc.l 0
01:0000083C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000840 00000000        	     1R 	dc.l 0
01:00000844 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000848 00000000        	     1R 	dc.l 0
01:0000084C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000850 00000000        	     1R 	dc.l 0
01:00000854 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000858 00000000        	     1R 	dc.l 0
01:0000085C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000860 00000000        	     1R 	dc.l 0
01:00000864 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000868 00000000        	     1R 	dc.l 0
01:0000086C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000870 00000000        	     1R 	dc.l 0
01:00000874 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000878 00000000        	     1R 	dc.l 0
01:0000087C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000880 00000000        	     1R 	dc.l 0
01:00000884 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000888 00000000        	     1R 	dc.l 0
01:0000088C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000890 00000000        	     1R 	dc.l 0
01:00000894 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000898 00000000        	     1R 	dc.l 0
01:0000089C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008A0 00000000        	     1R 	dc.l 0
01:000008A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008A8 00000000        	     1R 	dc.l 0
01:000008AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008B0 00000000        	     1R 	dc.l 0
01:000008B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008B8 00000000        	     1R 	dc.l 0
01:000008BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008C0 00000000        	     1R 	dc.l 0
01:000008C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008C8 00000000        	     1R 	dc.l 0
01:000008CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008D0 00000000        	     1R 	dc.l 0
01:000008D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008D8 00000000        	     1R 	dc.l 0
01:000008DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008E0 00000000        	     1R 	dc.l 0
01:000008E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008E8 00000000        	     1R 	dc.l 0
01:000008EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008F0 00000000        	     1R 	dc.l 0
01:000008F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008F8 00000000        	     1R 	dc.l 0
01:000008FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000900 00000000        	     1R 	dc.l 0
01:00000904 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000908 00000000        	     1R 	dc.l 0
01:0000090C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000910 00000000        	     1R 	dc.l 0
01:00000914 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000918 00000000        	     1R 	dc.l 0
01:0000091C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000920 00000000        	     1R 	dc.l 0
01:00000924 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000928 00000000        	     1R 	dc.l 0
01:0000092C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000930 00000000        	     1R 	dc.l 0
01:00000934 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000938 00000000        	     1R 	dc.l 0
01:0000093C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000940 00000000        	     1R 	dc.l 0
01:00000944 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000948 00000000        	     1R 	dc.l 0
01:0000094C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000950 00000000        	     1R 	dc.l 0
01:00000954 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000958 00000000        	     1R 	dc.l 0
01:0000095C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000960 00000000        	     1R 	dc.l 0
01:00000964 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000968 00000000        	     1R 	dc.l 0
01:0000096C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000970 00000000        	     1R 	dc.l 0
01:00000974 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000978 00000000        	     1R 	dc.l 0
01:0000097C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000980 00000000        	     1R 	dc.l 0
01:00000984 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000988 00000000        	     1R 	dc.l 0
01:0000098C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000990 00000000        	     1R 	dc.l 0
01:00000994 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000998 00000000        	     1R 	dc.l 0
01:0000099C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009A0 00000000        	     1R 	dc.l 0
01:000009A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009A8 00000000        	     1R 	dc.l 0
01:000009AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009B0 00000000        	     1R 	dc.l 0
01:000009B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009B8 00000000        	     1R 	dc.l 0
01:000009BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009C0 00000000        	     1R 	dc.l 0
01:000009C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009C8 00000000        	     1R 	dc.l 0
01:000009CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009D0 00000000        	     1R 	dc.l 0
01:000009D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009D8 00000000        	     1R 	dc.l 0
01:000009DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009E0 00000000        	     1R 	dc.l 0
01:000009E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009E8 00000000        	     1R 	dc.l 0
01:000009EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009F0 00000000        	     1R 	dc.l 0
01:000009F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009F8 00000000        	     1R 	dc.l 0
01:000009FC 00000000        	     2R 	dc.l 0
                            	     3R 	
                            	   324: 
                            	   325: 	org			$A00
                            	   326: 
                            	   327: ;-------------------------------------------------------------------------------
                            	   328: ;-------------------------------------------------------------------------------
                            	   329: 
                            	   330: ; BIOS variables which must be local (not shared) to each core
                            	   331: 
                            	   332: CursorRow	equ		$40000
                            	   333: CursorCol	equ		$40001
                            	   334: TextPos		equ		$40002
                            	   335: TextCurpos	equ	$40002
                            	   336: TextScr			equ	$40004
                            	   337: S19StartAddress	equ	$40008
                            	   338: KeybdEcho		equ	$4000C
                            	   339: KeybdWaitFlag	equ	$4000D
                            	   340: CmdBuf			equ $40040
                            	   341: CmdBufEnd		equ	$40080
                            	   342: fgColor			equ	$40084
                            	   343: bkColor			equ	$40088
                            	   344: TextRows		equ	$4008C
                            	   345: TextCols		equ	$4008D
                            	   346: _fpTextIncr	equ $40094
                            	   347: _canary			equ $40098
                            	   348: tickcnt			equ $4009C
                            	   349: IRQFlag			equ $400A0
                            	   350: InputDevice	equ $400A4
                            	   351: OutputDevice	equ $400A8
                            	   352: Regsave			equ	$40100
                            	   353: numBreakpoints	equ		8
                            	   354: BreakpointFlag	equ		$40200
                            	   355: NumSetBreakpoints	equ	$40202	; to $40203
                            	   356: Breakpoints			equ		$40220	; to $40240
                            	   357: BreakpointWords	equ		$40280	; to $402A0
                            	   358: fpBuf       equ $402C0
                            	   359: ;RunningTCB  equ $40300
                            	   360: _exp equ $40500
                            	   361: _digit equ $40504
                            	   362: _width equ $40508
                            	   363: _E equ $4050C
                            	   364: _digits_before_decpt equ $40510
                            	   365: _precision equ $40514
                            	   366: _fpBuf equ $40520	; to $40560
                            	   367: _fpWork equ $40600
                            	   368: _dasmbuf	equ	$40800
                            	   369: OFFSET equ $40880
                            	   370: pen_color equ $40890
                            	   371: gr_x equ $40894
                            	   372: gr_y equ $40898
                            	   373: gr_width equ $4089C
                            	   374: gr_height equ $408A0
                            	   375: gr_bitmap_screen equ $408A4
                            	   376: gr_raster_op equ $408A8
                            	   377: gr_double_buffer equ $408AC
                            	   378: gr_bitmap_buffer equ $408B0
                            	   379: sys_switches equ $408B8
                            	   380: gfxaccel_ctrl equ $408C0
                            	   381: m_z equ $408D0
                            	   382: m_w equ $408D4
                            	   383: next_m_z equ $408D8
                            	   384: next_m_w equ $408DC
                            	   385: TimeBuf equ $408E0
                            	   386: EightPixels equ $40100000	; to $40200020
                            	   387: 
                            	   388: null_dcb equ $0040A00		; 0
                            	   389: keybd_dcb equ null_dcb+DCB_SIZE	; 1
                            	   390: textvid_dcb equ keybd_dcb+DCB_SIZE	; 2
                            	   391: err_dcb equ textvid_dcb+DCB_SIZE		; 3
                            	   392: serial_dcb equ err_dcb+DCB_SIZE*2		; 5
                            	   393: framebuf_dcb equ serial_dcb+DCB_SIZE	; 6
                            	   394: gfxaccel_dcb equ framebuf_dcb+DCB_SIZE	; 7
                            	   395: rtc_dcb equ gfxaccel_dcb+DCB_SIZE		; 8
                            	   396: 
                            	   397: spi_buff equ $0042000
                            	   398: 
                            	   399: TimerStack	equ	$41BFC
                            	   400: 
                            	   401: ; Keyboard buffer is in shared memory
                            	   402: IOFocus			EQU	$00100000
                            	   403: memend			equ $00100004
                            	   404: KeybdLEDs		equ	$0010000E
                            	   405: _KeyState1	equ	$0010000F
                            	   406: _KeyState2	equ	$00100010
                            	   407: _KeybdHead	equ	$00100011
                            	   408: _KeybdTail	equ	$00100012
                            	   409: _KeybdCnt		equ	$00100013
                            	   410: KeybdID			equ	$00100018
                            	   411: _Keybd_tick	equ $0001001C
                            	   412: _KeybdBuf		equ	$00100020
                            	   413: _KeybdOBuf	equ	$00100080
                            	   414: S19Checksum	equ	$00100150
                            	   415: SerTailRcv	equ	$00100160
                            	   416: SerHeadRcv	equ	$00100162
                            	   417: SerRcvXon		equ	$00100164
                            	   418: SerRcvXoff	equ	$00100165
                            	   419: SerTailXmit	equ	$00100166
                            	   420: SerHeadXmit	equ	$00100168
                            	   421: SerXmitXoff	equ	$0010016A
                            	   422: SerRcvBuf		equ	$00101000
                            	   423: SerXmitBuf	equ	$00102000
                            	   424: RTCBuf			equ $00100200	; to $0010023F
                            	   425: 
                            	   426: 	code
                            	   427: 	align		2
                            	   428: start:
                            	   429: ;	fadd (a0)+,fp2
00:000003B8 13FC0001FD0FFF00	   430: 	move.b #1,leds
00:000003C0 46FC2700        	   431: 	move.w #$2700,sr					; enable level 6 and higher interrupts
00:000003C4 7000            	   432: 	moveq #0,d0								; set address space zero
00:000003C6 4E7B0003        	   433: 	movec d0,asid
                            	   434: 	; Setup circuit select signals
00:000003CA 203CFDC00000    	   435: 	move.l #MMU,d0
00:000003D0 4E7B0014        	   436: 	movec d0,mmus
                            	   437: 	if HAS_MMU
                            	   438: 		move.l #$01F00000,d0			; set virtual address for iop bitmap
                            	   439: 		movec d0,iops
                            	   440: 		move.l #$01E00000,d0			; set virtual address for io block
                            	   441: 		movec d0,ios
                            	   442: 	else
00:000003D4 203CFD100000    	   443: 		move.l #$FD100000,d0			; set virtual address for iop bitmap
00:000003DA 4E7B0016        	   444: 		movec d0,iops
00:000003DE 203CFD000000    	   445: 		move.l #$FD000000,d0			; set virtual address for io block
00:000003E4 4E7B0015        	   446: 		movec d0,ios
                            	   447: 	endif
                            	   448: ;	move.l $4000000C,d0
00:000003E8 13FC0002FD0FFF00	   449: 	move.b #2,leds
00:000003F0 4E7A0FE0        	   450: 	movec coreno,d0							; set initial value of thread register
00:000003F4 4840            	   451: 	swap d0											; coreno in high eight bits
00:000003F6 E188            	   452: 	lsl.l #8,d0
00:000003F8 4E7B0012        	   453: 	movec d0,tr
                            	   454: 	; Prepare local variable storage
00:000003FC 303C03FF        	   455: 	move.w #1023,d0						; 1024 longs to clear
00:00000400 41F900040000    	   456: 	lea	$40000,a0							; non shared local memory address
                            	   457: .0111:
00:00000406 4298            	   458: 	clr.l	(a0)+								; clear the memory area
00:00000408 51C8FFFC        	   459: 	dbra d0,.0111
00:0000040C 13FC0005FD0FFF00	   460: 	move.b #5,leds
00:00000414 13FC0001000400A4	   461: 	move.b #1,InputDevice			; select keyboard input
00:0000041C 13FC0002000400A8	   462: 	move.b #2,OutputDevice		; select text screen output
00:00000424 61000BAA        	   463: 	bsr setup_textvid
00:00000428 13FC0003FD0FFF00	   464: 	move.b #3,leds
00:00000430 61000106        	   465: 	bsr setup_null
00:00000434 13FC0004FD0FFF00	   466: 	move.b #4,leds
00:0000043C 61000142        	   467: 	bsr setup_keybd
00:00000440 13FC0006FD0FFF00	   468: 	move.b #6,leds
00:00000448 61001142        	   469: 	bsr setup_serial
00:0000044C 13FC0007FD0FFF00	   470: 	move.b #7,leds
00:00000454 4E7A0FE0        	   471: 	movec.l	coreno,d0					; get core number
00:00000458 0C000002        	   472: 	cmpi.b #2,d0
00:0000045C 660000AE        	   473: 	bne	start_other
00:00000460 6100152E        	   474: 	bsr setup_framebuf
00:00000464 13FC0008FD0FFF00	   475: 	move.b #8,leds
00:0000046C 61001A4A        	   476: 	bsr setup_gfxaccel
00:00000470 13FC0009FD0FFF00	   477: 	move.b #9,leds
00:00000478 42B9000408B8    	   478: 	clr.l sys_switches
00:0000047E 4DF9FD069010    	   479: 	lea I2C2,a6
00:00000484 4EB900009B22    	   480: 	bsr i2c_setup
00:0000048A 4DF9FD069000    	   481: 	lea I2C1,a6
00:00000490 4EB900009B22    	   482: 	bsr i2c_setup
                            	   483: ;	lea SPI_MASTER1,a1
                            	   484: ;	bsr spi_setup
                            	   485: ;	lea SPI_MASTER2,a1
                            	   486: ;	bsr spi_setup
00:00000496 4E7A0FE0        	   487: 	movec.l	coreno,d0					; get core number
00:0000049A 13C000100000    	   488: 	move.b d0,IOFocus					; Set the IO focus in global memory
                            	   489: 	if HAS_MMU
                            	   490: 		bsr InitMMU							; Can't access anything till this is done'
                            	   491: 	endif
00:000004A0 61001F5C        	   492: 	bsr	InitIOPBitmap					; not going to get far without this
00:000004A4 610020D4        	   493: 	bsr	InitSemaphores
00:000004A8 61001FA0        	   494: 	bsr	InitRand
00:000004AC 61002006        	   495: 	bsr RandGetNum
00:000004B0 0281FFFFFF00    	   496: 	andi.l #$FFFFFF00,d1
00:000004B6 23C100040098    	   497: 	move.l d1,_canary
00:000004BC 4E7B1020        	   498: 	movec d1,canary
                            	   499: ;	bsr	Delay3s						; give devices time to reset
                            	   500: ;	moveq #2,d7					; device 2
                            	   501: ;	moveq #DEV_CLEAR,d6	; clear
                            	   502: ;	trap #0
                            	   503: ;	bsr	textvid_clear
                            	   504: 
00:000004C0 6100020A        	   505: 	bsr	_KeybdInit
                            	   506: ;	bsr	InitIRQ
00:000004C4 61001182        	   507: 	bsr	SerialInit
                            	   508: ;	bsr init_i2c
                            	   509: ;	bsr rtc_read
                            	   510: 
                            	   511: 	; Write startup message to screen
                            	   512: 
00:000004C8 43F90000A16E    	   513: 	lea	msg_start,a1
00:000004CE 6100763C        	   514: 	bsr	DisplayString
                            	   515: ;	bsr	FemtikiInit
00:000004D2 4E7A0FE0        	   516: 	movec	coreno,d0
00:000004D6 4840            	   517: 	swap d0
00:000004D8 7201            	   518: 	moveq	#1,d1
00:000004DA 61002100        	   519: 	bsr	UnlockSemaphore	; allow another cpu access
00:000004DE 7200            	   520: 	moveq	#0,d1
00:000004E0 610020FA        	   521: 	bsr	UnlockSemaphore	; allow other cpus to proceed
00:000004E4 33FCA4A4FD0FFF00	   522: 	move.w #$A4A4,leds			; diagnostics
00:000004EC 61007B50        	   523: 	bsr	init_plic				; initialize platform level interrupt controller
00:000004F0 60007C60        	   524: 	bra	StartMon
00:000004F4 61002188        	   525: 	bsr	cpu_test
                            	   526: ;	lea	brdisp_trap,a0	; set brdisp trap vector
                            	   527: ;	move.l	a0,64*4
                            	   528: 
                            	   529: loop2:
00:000004F8 70FF            	   530: 	move.l	#-1,d0
                            	   531: loop1:
00:000004FA 2200            	   532: 	move.l	d0,d1
00:000004FC E089            	   533: 	lsr.l		#8,d1
00:000004FE E089            	   534: 	lsr.l		#8,d1
00:00000500 13C1FD0FFF00    	   535: 	move.b	d1,leds
00:00000506 51C8FFF2        	   536: 	dbra		d0,loop1
00:0000050A 60EC            	   537: 	bra			loop2
                            	   538: 
                            	   539: start_other:
00:0000050C 61002154        	   540: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:00000510 61002150        	   541: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:00000514 6100214C        	   542: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:00000518 7E02            	   543: 	move.l #2,d7
00:0000051A 7C0C            	   544: 	move.l #DEV_CLEAR,d6
00:0000051C 4E40            	   545: 	trap #0
00:0000051E 4E7A1FE0        	   546: 	movec		coreno,d1
00:00000522 4EB900009580    	   547: 	bsr			DisplayByte
00:00000528 43F90000A195    	   548: 	lea			msg_core_start,a1
00:0000052E 610075DC        	   549: 	bsr			DisplayString
                            	   550: ;	bsr			FemtikiInitIRQ
                            	   551: do_nothing:	
00:00000532 60007C1E        	   552: 	bra			StartMon
00:00000536 60FA            	   553: 	bra			do_nothing
                            	   554: 
                            	   555: ;------------------------------------------------------------------------------
                            	   556: ; Initialize the MMU to allow thread #0 access to IO
                            	   557: ;------------------------------------------------------------------------------
                            	   558: 	if HAS_MMU
                            	   559: 	align 2
                            	   560: mmu_adrtbl:	; virtual address[24:16], physical address[31:16] bytes reversed!
                            	   561: 	dc.l	$0010,$10000300	; global scratch pad
                            	   562: 	dc.l	$01E0,$00FD0300	
                            	   563: 	dc.l	$01E1,$01FD0300
                            	   564: 	dc.l	$01E2,$02FD0300
                            	   565: 	dc.l  $01E3,$03FD0300
                            	   566: 	dc.l	$01E5,$05FD0300
                            	   567: 	dc.l	$01E6,$06FD0300
                            	   568: 	dc.l	$01E9,$09FD0300
                            	   569: 	dc.l	$01EF,$0FFD0300
                            	   570: 	dc.l	$01F0,$10FD0300
                            	   571: 	dc.l  $01FF,$FFFF0300	; all ones output for IRQ ack needed
                            	   572: 
                            	   573: 	even
                            	   574: InitMMU:
                            	   575: 	lea MMU+8,a0				; first 128kB is local RAM
                            	   576: 	move.l #$32000,d2		; map all pages to DRAM
                            	   577: 	move.l #510,d0			; then override for IO later
                            	   578: .0002
                            	   579: 	move.l d2,d1
                            	   580: 	bsr rbo
                            	   581: 	move.l d1,(a0)+
                            	   582: 	addi.w #1,d2				; increment DRAM page number
                            	   583: 	dbra d0,.0002
                            	   584: 	lea MMU,a0					; now program IO access
                            	   585: 	lea mmu_adrtbl,a1
                            	   586: 	moveq #10,d0
                            	   587: .0001
                            	   588: 	move.l (a1)+,d2
                            	   589: 	lsl.l #2,d2
                            	   590: 	move.l (a1)+,(a0,d2.w)
                            	   591: 	dbra d0,.0001
                            	   592: 	rts	
                            	   593: 	endif
                            	   594: 
                            	   595: ;------------------------------------------------------------------------------
                            	   596: ; Device drivers
                            	   597: ;------------------------------------------------------------------------------
                            	   598: 
                            	   599: 	include "null.x68"

Source: "null.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Setup the NULL device
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 
                            	    43: setup_null:
                            	    44: null_init:
00:00000538 48E780C0        	    45: 	movem.l d0/a0/a1,-(a7)
00:0000053C 7020            	    46: 	moveq #32,d0
00:0000053E 41F900040A00    	    47: 	lea.l null_dcb,a0
                            	    48: .0001:
00:00000544 4298            	    49: 	clr.l (a0)+
00:00000546 51C8FFFC        	    50: 	dbra d0,.0001
00:0000054A 23FC444342200004	    51: 	move.l #$44434220,null_dcb+DCB_MAGIC				; 'DCB'
00:00000552 0A00
00:00000554 23FC4E554C4C0004	    52: 	move.l #$4E554C4C,null_dcb+DCB_NAME					; 'NULL'
00:0000055C 0A04
00:0000055E 23FC0000057C0004	    53: 	move.l #null_cmdproc,null_dcb+DCB_CMDPROC
00:00000566 0A18
00:00000568 43F900040A00    	    54: 	lea.l null_dcb+DCB_MAGIC,a1
00:0000056E 6100759C        	    55: 	jsr DisplayString
00:00000572 6100757E        	    56: 	jsr CRLF
00:00000576 4CDF0301        	    57: 	movem.l (a7)+,d0/a0/a1
                            	    58: null_ret:
00:0000057A 4E75            	    59: 	rts
                            	    60: 
                            	    61: null_cmdproc:
00:0000057C 7000            	    62: 	moveq #E_Ok,d0
00:0000057E 4E75            	    63: 	rts
                            	    64: 
                            	    65: 

Source: "boot.x68"
                            	   600: 	include "keybd.x68"

Source: "keybd.x68"
                            	     1: ;==============================================================================
                            	     2: ; Keyboard stuff
                            	     3: ;
                            	     4: ; KeyState2_
                            	     5: ; 876543210
                            	     6: ; ||||||||+ = shift
                            	     7: ; |||||||+- = alt
                            	     8: ; ||||||+-- = control
                            	     9: ; |||||+--- = numlock
                            	    10: ; ||||+---- = capslock
                            	    11: ; |||+----- = scrolllock
                            	    12: ; ||+------ =
                            	    13: ; |+------- = 
                            	    14: ; +-------- = extended
                            	    15: ;
                            	    16: ;==============================================================================
                            	    17: 
                            	    18: ;------------------------------------------------------------------------------
                            	    19: ; Setup the Keyboard device
                            	    20: ;------------------------------------------------------------------------------
                            	    21: setup_keybd:
                            	    22: keybd_init:
00:00000580 48E780C0        	    23: 	movem.l d0/a0/a1,-(a7)
00:00000584 7020            	    24: 	moveq #32,d0
00:00000586 41F900040A84    	    25: 	lea.l keybd_dcb,a0
                            	    26: .0001:
00:0000058C 4298            	    27: 	clr.l (a0)+
00:0000058E 51C8FFFC        	    28: 	dbra d0,.0001
00:00000592 23FC444342200004	    29: 	move.l #$44434220,keybd_dcb+DCB_MAGIC				; 'DCB '
00:0000059A 0A84
00:0000059C 23FC4B4244000004	    30: 	move.l #$4B424400,keybd_dcb+DCB_NAME				; 'KBD'
00:000005A4 0A88
00:000005A6 23FC000006240004	    31: 	move.l #keybd_cmdproc,keybd_dcb+DCB_CMDPROC
00:000005AE 0A9C
00:000005B0 23FC001000200004	    32: 	move.l #_KeybdBuf,keybd_dcb+DCB_INBUFPTR
00:000005B8 0ABC
00:000005BA 23FC001000800004	    33: 	move.l #_KeybdOBuf,keybd_dcb+DCB_OUTBUFPTR
00:000005C2 0AC0
00:000005C4 23FC000000200004	    34: 	move.l #32,keybd_dcb+DCB_INBUFSIZE
00:000005CC 0AC4
00:000005CE 23FC000000200004	    35: 	move.l #32,keybd_dcb+DCB_OUTBUFSIZE
00:000005D6 0AC8
00:000005D8 423900040AD8    	    36: 	clr.b keybd_dcb+DCB_OUTDIMX	; set rows and columns
00:000005DE 423900040ADC    	    37: 	clr.b keybd_dcb+DCB_OUTDIMY
00:000005E4 423900040ACC    	    38: 	clr.b keybd_dcb+DCB_INDIMX		; set rows and columns
00:000005EA 423900040AD0    	    39: 	clr.b keybd_dcb+DCB_INDIMY
                            	    40: ;	bsr KeybdInit
00:000005F0 43F900040A84    	    41: 	lea.l keybd_dcb+DCB_MAGIC,a1
00:000005F6 61007514        	    42: 	jsr DisplayString
00:000005FA 610074F6        	    43: 	jsr CRLF
00:000005FE 4CDF0301        	    44: 	movem.l (a7)+,d0/a0/a1
00:00000602 4E75            	    45: 	rts
                            	    46: 
                            	    47: 	align 2
                            	    48: KBD_CMDTBL:
00:00000604 00000580        	    49: 	dc.l keybd_init				; 0
00:00000608 00000646        	    50: 	dc.l keybd_stat
00:0000060C 0000064E        	    51: 	dc.l keybd_putchar
00:00000610 0000065E        	    52: 	dc.l keybd_putbuf
00:00000614 00000656        	    53: 	dc.l keybd_getchar
00:00000618 0000065E        	    54: 	dc.l keybd_getbuf
00:0000061C 0000065E        	    55: 	dc.l keybd_set_inpos
00:00000620 0000065E        	    56: 	dc.l keybd_set_outpos
                            	    57: 
                            	    58: keybd_cmdproc:
00:00000624 0C060008        	    59: 	cmpi.b #8,d6
00:00000628 6418            	    60: 	bhs.s .0001
00:0000062A 48E70280        	    61: 	movem.l d6/a0,-(a7)
00:0000062E E506            	    62: 	asl.b #2,d6
00:00000630 4886            	    63: 	ext.w d6
00:00000632 41FAFFD0        	    64: 	lea KBD_CMDTBL,a0
00:00000636 20706000        	    65: 	move.l (a0,d6.w),a0
00:0000063A 4E90            	    66: 	jsr (a0)
00:0000063C 4CDF0140        	    67: 	movem.l (a7)+,d6/a0
00:00000640 4E75            	    68: 	rts
                            	    69: .0001:
00:00000642 7002            	    70: 	moveq #E_Func,d0
00:00000644 4E75            	    71: 	rts
                            	    72: 
                            	    73: keybd_stat:
00:00000646 61000196        	    74: 	bsr _KeybdGetStatus
00:0000064A 7000            	    75: 	moveq #E_Ok,d0
00:0000064C 4E75            	    76: 	rts
                            	    77: 
                            	    78: keybd_putchar:
00:0000064E 61000502        	    79: 	bsr KeybdSendByte
00:00000652 7000            	    80: 	moveq #E_Ok,d0
00:00000654 4E75            	    81: 	rts
                            	    82: 
                            	    83: keybd_getchar:
00:00000656 61000234        	    84: 	bsr GetKey
00:0000065A 7000            	    85: 	moveq #E_Ok,d0
00:0000065C 4E75            	    86: 	rts
                            	    87: 
                            	    88: keybd_putbuf:
                            	    89: keybd_getbuf:
                            	    90: keybd_set_inpos:
                            	    91: keybd_set_outpos:
00:0000065E 700A            	    92: 	moveq #E_NotSupported,d0
00:00000660 4E75            	    93: 	rts
                            	    94: 
                            	    95: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	    96: ; Get ID - get the keyboards identifier code.
                            	    97: ;
                            	    98: ; Parameters: none
                            	    99: ; Returns: d = $AB83, $00 on fail
                            	   100: ; Modifies: d, KeybdID updated
                            	   101: ; Stack Space: 2 words
                            	   102: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   103: 
                            	   104: KeybdGetID:
00:00000662 323C00F2        	   105: 	move.w	#$F2,d1
00:00000666 610004EA        	   106: 	bsr			KeybdSendByte
00:0000066A 610001E6        	   107: 	bsr			KeybdWaitTx
00:0000066E 610001C0        	   108: 	bsr			KeybdRecvByte
00:00000672 08010007        	   109: 	btst		#7,d1
00:00000676 6624            	   110: 	bne			kgnotKbd
00:00000678 0C0100AB        	   111: 	cmpi.b	#$AB,d1
00:0000067C 661E            	   112: 	bne			kgnotKbd
00:0000067E 610001B0        	   113: 	bsr			KeybdRecvByte
00:00000682 08010007        	   114: 	btst		#7,d1
00:00000686 6614            	   115: 	bne			kgnotKbd
00:00000688 0C010083        	   116: 	cmpi.b	#$83,d1
00:0000068C 660E            	   117: 	bne			kgnotKbd
00:0000068E 223C0000AB83    	   118: 	move.l	#$AB83,d1
                            	   119: kgid1:
00:00000694 33C100100018    	   120: 	move.w	d1,KeybdID
00:0000069A 4E75            	   121: 	rts
                            	   122: kgnotKbd:
00:0000069C 7200            	   123: 	moveq		#0,d1
00:0000069E 60F4            	   124: 	bra			kgid1
                            	   125: 
                            	   126: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   127: ; Set the LEDs on the keyboard.
                            	   128: ;
                            	   129: ; Parameters:
                            	   130: ;		d1.b = LED state
                            	   131: ;	Modifies:
                            	   132: ;		none
                            	   133: ; Returns:
                            	   134: ;		none
                            	   135: ; Stack Space:
                            	   136: ;		1 long word
                            	   137: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   138: 
                            	   139: KeybdSetLED:
00:000006A0 2F01            	   140: 	move.l	d1,-(a7)
00:000006A2 123C00ED        	   141: 	move.b	#$ED,d1
00:000006A6 610004AA        	   142: 	bsr			KeybdSendByte
00:000006AA 610001A6        	   143: 	bsr			KeybdWaitTx
00:000006AE 61000180        	   144: 	bsr			KeybdRecvByte
00:000006B2 4A01            	   145: 	tst.b		d1
00:000006B4 6B12            	   146: 	bmi			.0001
00:000006B6 0C0100FA        	   147: 	cmpi.b	#$FA,d1
00:000006BA 2217            	   148: 	move.l	(a7),d1
00:000006BC 61000494        	   149: 	bsr			KeybdSendByte
00:000006C0 61000190        	   150: 	bsr			KeybdWaitTx
00:000006C4 6100016A        	   151: 	bsr			KeybdRecvByte
                            	   152: .0001:
00:000006C8 221F            	   153: 	move.l	(a7)+,d1
00:000006CA 4E75            	   154: 	rts
                            	   155: 
                            	   156: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   157: ; Initialize the keyboard.
                            	   158: ;
                            	   159: ; Parameters:
                            	   160: ;		none
                            	   161: ;	Modifies:
                            	   162: ;		none
                            	   163: ; Returns:
                            	   164: ;		none
                            	   165: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   166: 
                            	   167: _KeybdInit:
                            	   168: KeybdInit:
                            	   169: ;	movem.l	d0/d1/d3/a1,-(a7)
00:000006CC 42390010000F    	   170: 	clr.b	_KeyState1		; records key up/down state
00:000006D2 423900100010    	   171: 	clr.b	_KeyState2		; records shift,ctrl,alt state
00:000006D8 4E75            	   172: 	rts
                            	   173: 
00:000006DA 6100049A        	   174: 	bsr			Wait300ms
00:000006DE 610000FE        	   175: 	bsr			_KeybdGetStatus	; wait for response from keyboard
00:000006E2 4A01            	   176: 	tst.b		d1
00:000006E4 6A10            	   177: 	bpl			.0001					; is input buffer full ? no, branch
00:000006E6 61000114        	   178: 	bsr	_KeybdGetScancode
00:000006EA 6100012E        	   179: 	bsr _KeybdClearIRQ
00:000006EE 0C0100AA        	   180: 	cmpi.b	#$AA,d1				; keyboard Okay
00:000006F2 67000098        	   181: 	beq			kbdi0005
                            	   182: .0001:
00:000006F6 760A            	   183: 	moveq		#10,d3
                            	   184: kbdi0002:
00:000006F8 61000460        	   185: 	bsr			Wait10ms
00:000006FC 4239FD0FFE01    	   186: 	clr.b		KEYBD+1				; clear receive register (write $00 to status reg)
00:00000702 61001CF6        	   187: 	bsr net_delay
00:00000706 72FF            	   188: 	moveq		#-1,d1				; send reset code to keyboard
00:00000708 13C1FD0FFE01    	   189: 	move.b	d1,KEYBD+1		; write $FF to status reg to clear TX state
00:0000070E 61001CEA        	   190: 	bsr net_delay
00:00000712 6100043E        	   191: 	bsr			KeybdSendByte	; now write ($FF) to transmit register for reset
00:00000716 6100013A        	   192: 	bsr			KeybdWaitTx		; wait until no longer busy
00:0000071A 4A81            	   193: 	tst.l		d1
00:0000071C 6B000088        	   194: 	bmi			kbdiXmitBusy
00:00000720 6100010E        	   195: 	bsr			KeybdRecvByte	; look for an ACK ($FA)
00:00000724 0C0100FA        	   196: 	cmpi.b	#$FA,d1
00:00000728 6604            	   197: 	bne			.0001
00:0000072A 61000104        	   198: 	bsr			KeybdRecvByte	; look for BAT completion code ($AA)
                            	   199: .0001:
00:0000072E 0C0100FC        	   200: 	cmpi.b	#$FC,d1				; reset error ?
00:00000732 672E            	   201: 	beq			kbdiTryAgain
00:00000734 0C0100AA        	   202: 	cmpi.b	#$AA,d1				; reset complete okay ?
00:00000738 6628            	   203: 	bne			kbdiTryAgain
                            	   204: 
                            	   205: 	; After a reset, scan code set #2 should be active
                            	   206: .config:
00:0000073A 323C00F0        	   207: 	move.w	#$F0,d1			; send scan code select
00:0000073E 13C1FD0FFF00    	   208: 	move.b	d1,leds
00:00000744 61001CB4        	   209: 	bsr net_delay
00:00000748 61000408        	   210: 	bsr			KeybdSendByte
00:0000074C 61000104        	   211: 	bsr			KeybdWaitTx
00:00000750 4A81            	   212: 	tst.l		d1
00:00000752 6B52            	   213: 	bmi			kbdiXmitBusy
00:00000754 610000DA        	   214: 	bsr			KeybdRecvByte	; wait for response from keyboard
00:00000758 4A41            	   215: 	tst.w		d1
00:0000075A 6B06            	   216: 	bmi			kbdiTryAgain
00:0000075C 0C0100FA        	   217: 	cmpi.b	#$FA,d1				; ACK
00:00000760 670E            	   218: 	beq			kbdi0004
                            	   219: kbdiTryAgain:
00:00000762 51CBFF94        	   220: 	dbra		d3,kbdi0002
                            	   221: .keybdErr:
00:00000766 43FA004C        	   222: 	lea			msgBadKeybd,a1
00:0000076A 610073B6        	   223: 	bsr			DisplayStringCRLF
00:0000076E 6020            	   224: 	bra			ledxit
                            	   225: kbdi0004:
00:00000770 7202            	   226: 	moveq		#2,d1			; select scan code set #2
00:00000772 610003DE        	   227: 	bsr			KeybdSendByte
00:00000776 610000DA        	   228: 	bsr			KeybdWaitTx
00:0000077A 4A81            	   229: 	tst.l		d1
00:0000077C 6B28            	   230: 	bmi			kbdiXmitBusy
00:0000077E 610000B0        	   231: 	bsr			KeybdRecvByte	; wait for response from keyboard
00:00000782 4A41            	   232: 	tst.w		d1
00:00000784 6BDC            	   233: 	bmi			kbdiTryAgain
00:00000786 0C0100FA        	   234: 	cmpi.b	#$FA,d1
00:0000078A 66D6            	   235: 	bne			kbdiTryAgain
                            	   236: kbdi0005:
00:0000078C 6100FED4        	   237: 	bsr			KeybdGetID
                            	   238: ledxit:
00:00000790 7207            	   239: 	moveq		#$07,d1
00:00000792 6100FF0C        	   240: 	bsr			KeybdSetLED
00:00000796 610003DE        	   241: 	bsr			Wait300ms
00:0000079A 7200            	   242: 	moveq		#$00,d1
00:0000079C 6100FF02        	   243: 	bsr			KeybdSetLED
00:000007A0 4CDF020B        	   244: 	movem.l	(a7)+,d0/d1/d3/a1
00:000007A4 4E75            	   245: 	rts
                            	   246: kbdiXmitBusy:
00:000007A6 43FA001B        	   247: 	lea			msgXmitBusy,a1
00:000007AA 61007376        	   248: 	bsr			DisplayStringCRLF
00:000007AE 4CDF020B        	   249: 	movem.l	(a7)+,d0/d1/d3/a1
00:000007B2 4E75            	   250: 	rts
                            	   251: 	
                            	   252: msgBadKeybd:
00:000007B4 4B6579626F617264	   253: 	dc.b		"Keyboard error",0
00:000007BC 206572726F72
00:000007C2 00
                            	   254: msgXmitBusy:
00:000007C3 4B6579626F617264	   255: 	dc.b		"Keyboard transmitter stuck",0
00:000007CB 207472616E736D69
00:000007D3 7474657220737475
00:000007DB 636B
00:000007DD 00
                            	   256: 
                            	   257: 	even
                            	   258: _KeybdGetStatus:
00:000007DE 4E7A1FE0        	   259: 	movec coreno,d1
00:000007E2 0C010002        	   260: 	cmpi.b #2,d1
00:000007E6 660A            	   261: 	bne .0001
00:000007E8 7200            	   262: 	moveq	#0,d1
00:000007EA 1239FD0FFE01    	   263: 	move.b KEYBD+1,d1
00:000007F0 4E75            	   264: 	rts
                            	   265: .0001:
00:000007F2 7200            	   266: 	moveq #0,d1
00:000007F4 1239FD0FFE03    	   267: 	move.b KEYBD+3,d1
00:000007FA 4E75            	   268: 	rts
                            	   269: 
                            	   270: ; Get the scancode from the keyboard port
                            	   271: 
                            	   272: _KeybdGetScancode:
00:000007FC 4E7A1FE0        	   273: 	movec coreno,d1
00:00000800 0C010002        	   274: 	cmpi.b #2,d1
00:00000804 660A            	   275: 	bne .0001
00:00000806 7200            	   276: 	moveq		#0,d1
00:00000808 1239FD0FFE00    	   277: 	move.b	KEYBD,d1				; get the scan code
00:0000080E 4E75            	   278: 	rts
                            	   279: .0001:
00:00000810 7200            	   280: 	moveq #0,d1
00:00000812 1239FD0FFE02    	   281: 	move.b KEYBD+2,d1
00:00000818 4E75            	   282: 	rts
                            	   283: 
                            	   284: _KeybdClearIRQ:
00:0000081A 2F01            	   285: 	move.l d1,-(a7)
00:0000081C 4E7A1FE0        	   286: 	movec coreno,d1
00:00000820 0C010002        	   287: 	cmpi.b #2,d1
00:00000824 6606            	   288: 	bne .0001
00:00000826 4239FD0FFE01    	   289: 	move.b	#0,KEYBD+1			; clear receive register
                            	   290: .0001:
00:0000082C 221F            	   291: 	move.l (a7)+,d1
00:0000082E 4E75            	   292: 	rts
                            	   293: 
                            	   294: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   295: ; keyboard in order to wait for a response.
                            	   296: ;
                            	   297: KeybdRecvByte:
00:00000830 2F03            	   298: 	move.l	d3,-(a7)
00:00000832 363C0064        	   299: 	move.w	#100,d3		; wait up to 1s
                            	   300: .0003:
00:00000836 61A6            	   301: 	bsr			_KeybdGetStatus	; wait for response from keyboard
00:00000838 4A01            	   302: 	tst.b		d1
00:0000083A 6B0E            	   303: 	bmi			.0004			; is input buffer full ? yes, branch
00:0000083C 6100031C        	   304: 	bsr			Wait10ms	; wait a bit
00:00000840 51CBFFF4        	   305: 	dbra		d3,.0003	; go back and try again
00:00000844 261F            	   306: 	move.l	(a7)+,d3
00:00000846 72FF            	   307: 	moveq		#-1,d1		; return -1
00:00000848 4E75            	   308: 	rts
                            	   309: .0004:
00:0000084A 61B0            	   310: 	bsr	_KeybdGetScancode
00:0000084C 61CC            	   311: 	bsr _KeybdClearIRQ
00:0000084E 261F            	   312: 	move.l	(a7)+,d3
00:00000850 4E75            	   313: 	rts
                            	   314: 
                            	   315: 
                            	   316: ; Wait until the keyboard transmit is complete
                            	   317: ; Returns -1 if timedout, 0 if transmit completed
                            	   318: ;
                            	   319: KeybdWaitTx:
00:00000852 48E73000        	   320: 	movem.l	d2/d3,-(a7)
00:00000856 7664            	   321: 	moveq		#100,d3		; wait a max of 1s
                            	   322: .0001:
00:00000858 6184            	   323: 	bsr	_KeybdGetStatus
00:0000085A 08010006        	   324: 	btst #6,d1				; check for transmit complete bit
00:0000085E 6610            	   325: 	bne	.0002					; branch if bit set
00:00000860 610002F8        	   326: 	bsr	Wait10ms			; delay a little bit
00:00000864 51CBFFF2        	   327: 	dbra d3,.0001			; go back and try again
00:00000868 4CDF000C        	   328: 	movem.l	(a7)+,d2/d3
00:0000086C 72FF            	   329: 	moveq	#-1,d1			; return -1
00:0000086E 4E75            	   330: 	rts
                            	   331: .0002:
00:00000870 4CDF000C        	   332: 	movem.l	(a7)+,d2/d3
00:00000874 7200            	   333: 	moveq	#0,d1		; return 0
00:00000876 4E75            	   334: 	rts
                            	   335: 
                            	   336: ;------------------------------------------------------------------------------
                            	   337: ; d1.b 0=echo off, non-zero = echo on
                            	   338: ;------------------------------------------------------------------------------
                            	   339: 
                            	   340: SetKeyboardEcho:
00:00000878 13C10004000C    	   341: 	move.b	d1,KeybdEcho
00:0000087E 4E75            	   342: 	rts
                            	   343: 
                            	   344: ;------------------------------------------------------------------------------
                            	   345: ; Get key pending status into d1.b
                            	   346: ;
                            	   347: ; Returns:
                            	   348: ;		d1.b = 1 if a key is available, otherwise zero.
                            	   349: ;------------------------------------------------------------------------------
                            	   350: 
                            	   351: CheckForKey:
00:00000880 7200            	   352: 	moveq.l	#0,d1					; clear high order bits
                            	   353: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	   354: ;	smi.b		d1						; set true/false
                            	   355: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
00:00000882 4A3900100013    	   356: 	tst.b	_KeybdCnt
00:00000888 56C1            	   357: 	sne.b	d1
00:0000088A 4E75            	   358: 	rts
                            	   359: 
                            	   360: ;------------------------------------------------------------------------------
                            	   361: ; GetKey
                            	   362: ; 	Get a character from the keyboard. 
                            	   363: ;
                            	   364: ; Modifies:
                            	   365: ;		d1
                            	   366: ; Returns:
                            	   367: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	   368: ;------------------------------------------------------------------------------
                            	   369: 
                            	   370: GetKey:
00:0000088C 2F00            	   371: 	move.l	d0,-(a7)					; push d0
00:0000088E 123900100000    	   372: 	move.b	IOFocus,d1				; Check if the core has the IO focus
00:00000894 4E7A0FE0        	   373: 	movec.l	coreno,d0
00:00000898 B200            	   374: 	cmp.b	d0,d1
00:0000089A 6624            	   375: 	bne.s	.0004								; go return no key available, if not in focus
00:0000089C 6138            	   376: 	bsr	KeybdGetCharNoWait		; get a character
00:0000089E 4A81            	   377: 	tst.l	d1									; was a key available?
00:000008A0 6B1E            	   378: 	bmi.s	.0004
00:000008A2 4A390004000C    	   379: 	tst.b	KeybdEcho						; is keyboard echo on ?
00:000008A8 6712            	   380: 	beq.s	.0003								; no echo, just return the key
00:000008AA 0C01000D        	   381: 	cmpi.b #CR,d1							; convert CR keystroke into CRLF
00:000008AE 6606            	   382: 	bne.s	.0005
00:000008B0 61007240        	   383: 	bsr	CRLF
00:000008B4 6006            	   384: 	bra.s	.0003
                            	   385: .0005:
00:000008B6 4EB900009FF8    	   386: 	bsr	OutputChar
                            	   387: .0003:
00:000008BC 201F            	   388: 	move.l (a7)+,d0						; pop d0
00:000008BE 4E75            	   389: 	rts												; return key
                            	   390: ; Return -1 indicating no char was available
                            	   391: .0004:
00:000008C0 201F            	   392: 	move.l (a7)+,d0						; pop d0
00:000008C2 72FF            	   393: 	moveq	#-1,d1							; return no key available
00:000008C4 4E75            	   394: 	rts
                            	   395: 
                            	   396: ;------------------------------------------------------------------------------
                            	   397: ; Check for the cntrl-C keyboard sequence. Abort running routine and drop
                            	   398: ; back into the monitor.
                            	   399: ;------------------------------------------------------------------------------
                            	   400: 
                            	   401: CheckForCtrlC:
00:000008C6 2F01            	   402: 	move.l d1,-(a7)
00:000008C8 610C            	   403: 	bsr	KeybdGetCharNoWait
00:000008CA 0C010003        	   404: 	cmpi.b #CTRLC,d1
00:000008CE 6700788C        	   405: 	beq	Monitor
00:000008D2 221F            	   406: 	move.l (a7)+,d1
00:000008D4 4E75            	   407: 	rts
                            	   408: 
                            	   409: ;------------------------------------------------------------------------------
                            	   410: ;------------------------------------------------------------------------------
                            	   411: 
                            	   412: KeybdGetCharNoWait:
00:000008D6 42390004000D    	   413: 	clr.b	KeybdWaitFlag
00:000008DC 6008            	   414: 	bra	KeybdGetChar
                            	   415: 
                            	   416: KeybdGetCharWait:
00:000008DE 13FC00FF0004000D	   417: 	move.b #-1,KeybdWaitFlag
                            	   418: 
                            	   419: KeybdGetChar:
00:000008E6 48E7B080        	   420: 	movem.l	d0/d2/d3/a0,-(a7)
                            	   421: .0003:
00:000008EA 4E7A0FE0        	   422: 	movec	coreno,d0
00:000008EE 4840            	   423: 	swap d0
00:000008F0 7203            	   424: 	moveq	#KEYBD_SEMA,d1
00:000008F2 61001CAC        	   425: 	bsr	LockSemaphore
00:000008F6 143900100013    	   426: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
00:000008FC 673E            	   427: 	beq.s		.0015						;
00:000008FE 143900100011    	   428: 	move.b	_KeybdHead,d2		; d2 = buffer head
00:00000904 4882            	   429: 	ext.w		d2
00:00000906 41F900100020    	   430: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
00:0000090C 7200            	   431: 	clr.l		d1
00:0000090E 12302000        	   432: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
00:00000912 5202            	   433: 	addi.b	#1,d2						; increment keyboard head index
00:00000914 0202001F        	   434: 	andi.b	#31,d2					; and wrap around at buffer size
00:00000918 13C200100011    	   435: 	move.b	d2,_KeybdHead
00:0000091E 533900100013    	   436: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
00:00000924 C342            	   437: 	exg			d1,d2						; save scancode value in d2
00:00000926 4E7A0FE0        	   438: 	movec		coreno,d0
00:0000092A 4840            	   439: 	swap		d0
00:0000092C 7203            	   440: 	moveq		#KEYBD_SEMA,d1
00:0000092E 61001CAC        	   441: 	bsr			UnlockSemaphore
00:00000932 C541            	   442: 	exg			d2,d1						; restore scancode value
00:00000934 602A            	   443: 	bra			.0001						; go process scan code
                            	   444: .0014:
00:00000936 6100FEA6        	   445: 	bsr		_KeybdGetStatus		; check keyboard status for key available
00:0000093A 6B1C            	   446: 	bmi		.0006							; yes, go process
                            	   447: .0015:
00:0000093C 4E7A0FE0        	   448: 	movec		coreno,d0
00:00000940 4840            	   449: 	swap		d0
00:00000942 7203            	   450: 	moveq		#KEYBD_SEMA,d1
00:00000944 61001C96        	   451: 	bsr			UnlockSemaphore
00:00000948 4A390004000D    	   452: 	tst.b		KeybdWaitFlag			; are we willing to wait for a key ?
00:0000094E 6B9A            	   453: 	bmi			.0003							; yes, branch back
00:00000950 4CDF010D        	   454: 	movem.l	(a7)+,d0/d2/d3/a0
00:00000954 72FF            	   455: 	moveq		#-1,d1						; flag no char available
00:00000956 4E75            	   456: 	rts
                            	   457: .0006:
00:00000958 6100FEA2        	   458: 	bsr	_KeybdGetScancode
00:0000095C 6100FEBC        	   459: 	bsr _KeybdClearIRQ
                            	   460: .0001:
00:00000960 33FC0001FD0FFF00	   461: 	move.w	#1,leds
00:00000968 B23C00F0        	   462: 	cmp.b	#SC_KEYUP,d1
00:0000096C 670000C0        	   463: 	beq		.doKeyup
00:00000970 B23C00E0        	   464: 	cmp.b	#SC_EXTEND,d1
00:00000974 670000C4        	   465: 	beq		.doExtend
00:00000978 B23C0014        	   466: 	cmp.b	#SC_CTRL,d1
00:0000097C 670000C8        	   467: 	beq		.doCtrl
00:00000980 B23C0012        	   468: 	cmp.b	#SC_LSHIFT,d1
00:00000984 6700012A        	   469: 	beq		.doShift
00:00000988 B23C0059        	   470: 	cmp.b	#SC_RSHIFT,d1
00:0000098C 67000122        	   471: 	beq		.doShift
00:00000990 B23C0077        	   472: 	cmp.b	#SC_NUMLOCK,d1
00:00000994 67000142        	   473: 	beq		.doNumLock
00:00000998 B23C0058        	   474: 	cmp.b	#SC_CAPSLOCK,d1
00:0000099C 67000148        	   475: 	beq		.doCapsLock
00:000009A0 B23C007E        	   476: 	cmp.b	#SC_SCROLLLOCK,d1
00:000009A4 6700014E        	   477: 	beq		.doScrollLock
00:000009A8 B23C0011        	   478: 	cmp.b   #SC_ALT,d1
00:000009AC 670000C0        	   479: 	beq     .doAlt
00:000009B0 14390010000F    	   480: 	move.b	_KeyState1,d2			; check key up/down
00:000009B6 42390010000F    	   481: 	move.b	#0,_KeyState1			; clear keyup status
00:000009BC 4A02            	   482: 	tst.b	d2
00:000009BE 6600FF2A        	   483: 	bne	    .0003					; ignore key up
00:000009C2 B23C000D        	   484: 	cmp.b   #SC_TAB,d1
00:000009C6 670000CE        	   485: 	beq     .doTab
                            	   486: .0013:
00:000009CA 143900100010    	   487: 	move.b	_KeyState2,d2
00:000009D0 6A1A            	   488: 	bpl		.0010					; is it extended code ?
00:000009D2 C43C007F        	   489: 	and.b	#$7F,d2					; clear extended bit
00:000009D6 13C200100010    	   490: 	move.b	d2,_KeyState2
00:000009DC 42390010000F    	   491: 	move.b	#0,_KeyState1			; clear keyup
00:000009E2 41FA04E4        	   492: 	lea		_keybdExtendedCodes,a0
00:000009E6 12301000        	   493: 	move.b	(a0,d1.w),d1
00:000009EA 6034            	   494: 	bra		.0008
                            	   495: .0010:
00:000009EC 08020002        	   496: 	btst	#2,d2					; is it CTRL code ?
00:000009F0 670E            	   497: 	beq		.0009
00:000009F2 C27C007F        	   498: 	and.w	#$7F,d1
00:000009F6 41FA0450        	   499: 	lea		_keybdControlCodes,a0
00:000009FA 12301000        	   500: 	move.b	(a0,d1.w),d1
00:000009FE 6020            	   501: 	bra		.0008
                            	   502: .0009:
00:00000A00 08020000        	   503: 	btst	#0,d2					; is it shift down ?
00:00000A04 670A            	   504: 	beq  	.0007
00:00000A06 41FA0340        	   505: 	lea		_shiftedScanCodes,a0
00:00000A0A 12301000        	   506: 	move.b	(a0,d1.w),d1
00:00000A0E 6010            	   507: 	bra		.0008
                            	   508: .0007:
00:00000A10 41FA0236        	   509: 	lea		_unshiftedScanCodes,a0
00:00000A14 12301000        	   510: 	move.b	(a0,d1.w),d1
00:00000A18 33FC0202FD0FFF00	   511: 	move.w	#$0202,leds
                            	   512: .0008:
00:00000A20 33FC0303FD0FFF00	   513: 	move.w	#$0303,leds
00:00000A28 4CDF010D        	   514: 	movem.l	(a7)+,d0/d2/d3/a0
00:00000A2C 4E75            	   515: 	rts
                            	   516: .doKeyup:
00:00000A2E 13FC00FF0010000F	   517: 	move.b	#-1,_KeyState1
00:00000A36 6000FEB2        	   518: 	bra		.0003
                            	   519: .doExtend:
00:00000A3A 0039008000100010	   520: 	or.b	#$80,_KeyState2
00:00000A42 6000FEA6        	   521: 	bra		.0003
                            	   522: .doCtrl:
00:00000A46 12390010000F    	   523: 	move.b	_KeyState1,d1
00:00000A4C 42390010000F    	   524: 	clr.b	_KeyState1
00:00000A52 4A01            	   525: 	tst.b	d1
00:00000A54 6A0C            	   526: 	bpl.s	.0004
00:00000A56 08B9000200100010	   527: 	bclr	#2,_KeyState2
00:00000A5E 6000FE8A        	   528: 	bra		.0003
                            	   529: .0004:
00:00000A62 08F9000200100010	   530: 	bset	#2,_KeyState2
00:00000A6A 6000FE7E        	   531: 	bra		.0003
                            	   532: .doAlt:
00:00000A6E 12390010000F    	   533: 	move.b	_KeyState1,d1
00:00000A74 42390010000F    	   534: 	clr.b	_KeyState1
00:00000A7A 4A01            	   535: 	tst.b	d1
00:00000A7C 6A0C            	   536: 	bpl		.0011
00:00000A7E 08B9000100100010	   537: 	bclr	#1,_KeyState2
00:00000A86 6000FE62        	   538: 	bra		.0003
                            	   539: .0011:
00:00000A8A 08F9000100100010	   540: 	bset	#1,_KeyState2
00:00000A92 6000FE56        	   541: 	bra		.0003
                            	   542: .doTab:
00:00000A96 2F01            	   543: 	move.l	d1,-(a7)
00:00000A98 123900100010    	   544:   move.b  _KeyState2,d1
00:00000A9E 08010001        	   545:   btst	#1,d1                 ; is ALT down ?
00:00000AA2 6706            	   546:   beq     .0012
                            	   547: ;    	inc     _iof_switch
00:00000AA4 221F            	   548:   move.l	(a7)+,d1
00:00000AA6 6000FE42        	   549:   bra     .0003
                            	   550: .0012:
00:00000AAA 221F            	   551:   move.l	(a7)+,d1
00:00000AAC 6000FF1C        	   552:   bra     .0013
                            	   553: .doShift:
00:00000AB0 12390010000F    	   554: 	move.b	_KeyState1,d1
00:00000AB6 42390010000F    	   555: 	clr.b	_KeyState1
00:00000ABC 4A01            	   556: 	tst.b	d1
00:00000ABE 6A0C            	   557: 	bpl.s	.0005
00:00000AC0 08B9000000100010	   558: 	bclr	#0,_KeyState2
00:00000AC8 6000FE20        	   559: 	bra		.0003
                            	   560: .0005:
00:00000ACC 08F9000000100010	   561: 	bset	#0,_KeyState2
00:00000AD4 6000FE14        	   562: 	bra		.0003
                            	   563: .doNumLock:
00:00000AD8 0879000400100010	   564: 	bchg	#4,_KeyState2
00:00000AE0 6120            	   565: 	bsr		KeybdSetLEDStatus
00:00000AE2 6000FE06        	   566: 	bra		.0003
                            	   567: .doCapsLock:
00:00000AE6 0879000500100010	   568: 	bchg	#5,_KeyState2
00:00000AEE 6112            	   569: 	bsr		KeybdSetLEDStatus
00:00000AF0 6000FDF8        	   570: 	bra		.0003
                            	   571: .doScrollLock:
00:00000AF4 0879000600100010	   572: 	bchg	#6,_KeyState2
00:00000AFC 6104            	   573: 	bsr		KeybdSetLEDStatus
00:00000AFE 6000FDEA        	   574: 	bra		.0003
                            	   575: 
                            	   576: KeybdSetLEDStatus:
00:00000B02 48E73000        	   577: 	movem.l	d2/d3,-(a7)
00:00000B06 42390010000E    	   578: 	clr.b		KeybdLEDs
00:00000B0C 0839000400100010	   579: 	btst		#4,_KeyState2
00:00000B14 6708            	   580: 	beq.s		.0002
00:00000B16 13FC00020010000E	   581: 	move.b	#2,KeybdLEDs
                            	   582: .0002:
00:00000B1E 0839000500100010	   583: 	btst		#5,_KeyState2
00:00000B26 6708            	   584: 	beq.s		.0003
00:00000B28 08F900020010000E	   585: 	bset		#2,KeybdLEDs
                            	   586: .0003:
00:00000B30 0839000600100010	   587: 	btst		#6,_KeyState2
00:00000B38 6708            	   588: 	beq.s		.0004
00:00000B3A 08F900000010000E	   589: 	bset		#0,KeybdLEDs
                            	   590: .0004:
00:00000B42 12390010000E    	   591: 	move.b	KeybdLEDs,d1
00:00000B48 6100FB56        	   592: 	bsr			KeybdSetLED
00:00000B4C 4CDF000C        	   593: 	movem.l	(a7)+,d2/d3
00:00000B50 4E75            	   594: 	rts
                            	   595: 
                            	   596: KeybdSendByte:
00:00000B52 13C1FD0FFE00    	   597: 	move.b d1,KEYBD
00:00000B58 4E75            	   598: 	rts
                            	   599: 	
                            	   600: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   601: ; Wait for 10 ms
                            	   602: ;
                            	   603: ; Parameters: none
                            	   604: ; Returns: none
                            	   605: ; Modifies: none
                            	   606: ; Stack Space: 2 long words
                            	   607: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   608: 
                            	   609: Wait10ms:
00:00000B5A 48E7C000        	   610: 	movem.l	d0/d1,-(a7)
00:00000B5E 4E7A0FF0        	   611: 	movec	tick,d0
00:00000B62 068000061A80    	   612: 	addi.l #400000,d0			; 400,000 cycles at 40MHz
                            	   613: .0001:
00:00000B68 4E7A1FF0        	   614: 	movec	tick,d1
00:00000B6C B081            	   615: 	cmp.l	d1,d0
00:00000B6E 62F8            	   616: 	bhi	.0001
00:00000B70 4CDF0003        	   617: 	movem.l	(a7)+,d0/d1
00:00000B74 4E75            	   618: 	rts
                            	   619: 
                            	   620: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   621: ; Wait for 300 ms
                            	   622: ;
                            	   623: ; Parameters: none
                            	   624: ; Returns: none
                            	   625: ; Modifies: none
                            	   626: ; Stack Space: 2 long words
                            	   627: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   628: 
                            	   629: Wait300ms:
00:00000B76 48E7C000        	   630: 	movem.l	d0/d1,-(a7)
00:00000B7A 4E7A0FF0        	   631: 	movec		tick,d0
00:00000B7E 068000B71B00    	   632: 	addi.l	#12000000,d0			; 12,000,000 cycles at 40MHz
                            	   633: .0001:
00:00000B84 4E7A1FF0        	   634: 	movec		tick,d1
00:00000B88 B081            	   635: 	cmp.l		d1,d0
00:00000B8A 62F8            	   636: 	bhi			.0001
00:00000B8C 4CDF0003        	   637: 	movem.l	(a7)+,d0/d1
00:00000B90 4E75            	   638: 	rts
                            	   639: 
                            	   640: ;--------------------------------------------------------------------------
                            	   641: ; Keyboard IRQ routine.
                            	   642: ; - only core 2 processes keyboard interrupts.
                            	   643: ; - the keyboard buffer is in shared global scratchpad space.
                            	   644: ;
                            	   645: ; Returns:
                            	   646: ; 	d1 = -1 if keyboard routine handled interrupt, otherwise positive.
                            	   647: ;--------------------------------------------------------------------------
                            	   648: 
                            	   649: KeybdIRQ:
00:00000B92 46FC2600        	   650: 	move.w #$2600,sr					; disable lower interrupts
00:00000B96 48E7C080        	   651: 	movem.l	d0/d1/a0,-(a7)
00:00000B9A 46B9FD000000    	   652: 	eori.l #-1,$FD000000
00:00000BA0 7200            	   653: 	moveq	#0,d1								; check if keyboard IRQ
00:00000BA2 1239FD0FFE01    	   654: 	move.b KEYBD+1,d1					; get status reg
00:00000BA8 4A01            	   655: 	tst.b	d1
00:00000BAA 6A000096        	   656: 	bpl	.0001									; branch if not keyboard
00:00000BAE 4E7A0FE0        	   657: 	movec	coreno,d0
00:00000BB2 4840            	   658: 	swap d0
00:00000BB4 7203            	   659: 	moveq	#KEYBD_SEMA,d1
00:00000BB6 610019E8        	   660: 	bsr LockSemaphore
00:00000BBA 1239FD0FFE00    	   661: 	move.b KEYBD,d1						; get scan code
00:00000BC0 4239FD0FFE01    	   662: 	clr.b KEYBD+1							; clear status register (clears IRQ AND scancode)
00:00000BC6 0839000100100010	   663: 	btst #1,_KeyState2				; Is Alt down?
00:00000BCE 6738            	   664: 	beq.s	.0003
00:00000BD0 0C01000D        	   665: 	cmpi.b #SC_TAB,d1					; is Alt-Tab?
00:00000BD4 6632            	   666: 	bne.s	.0003
00:00000BD6 4E7A0FF0        	   667: 	movec tick,d0
00:00000BDA 90B90001001C    	   668: 	sub.l _Keybd_tick,d0
00:00000BE0 B0BC0000000A    	   669: 	cmp.l #10,d0							; has it been 10 or more ticks?
                            	   670: ;	blo.s .0002
00:00000BE6 4E7A0FF0        	   671: 	movec tick,d0							; update tick of last ALT-Tab
00:00000BEA 23C00001001C    	   672: 	move.l d0,_Keybd_tick
00:00000BF0 6100741C        	   673: 	bsr	rotate_iofocus
00:00000BF4 423900100011    	   674: 	clr.b	_KeybdHead					; clear keyboard buffer
00:00000BFA 423900100012    	   675: 	clr.b	_KeybdTail
00:00000C00 423900100013    	   676: 	clr.b	_KeybdCnt
00:00000C06 602E            	   677: 	bra	.0002									; do not store Alt-Tab
                            	   678: .0003:
                            	   679: 	; Insert keyboard scan code into raw keyboard buffer
00:00000C08 0C39002000100013	   680: 	cmpi.b #32,_KeybdCnt			; see if keyboard buffer full
00:00000C10 6424            	   681: 	bhs.s	.0002
00:00000C12 103900100012    	   682: 	move.b _KeybdTail,d0			; keyboard buffer not full, add to tail
00:00000C18 4880            	   683: 	ext.w	d0
00:00000C1A 41F900100020    	   684: 	lea	_KeybdBuf,a0					; a0 = pointer to buffer
00:00000C20 11810000        	   685: 	move.b d1,(a0,d0.w)				; put scancode in buffer
00:00000C24 5200            	   686: 	addi.b #1,d0							; increment tail index
00:00000C26 0200001F        	   687: 	andi.b #31,d0							; wrap at buffer limit
00:00000C2A 13C000100012    	   688: 	move.b d0,_KeybdTail			; update tail index
00:00000C30 523900100013    	   689: 	addi.b #1,_KeybdCnt				; increment buffer count
                            	   690: .0002:
00:00000C36 4E7A0FE0        	   691: 	movec	coreno,d0
00:00000C3A 4840            	   692: 	swap d0
00:00000C3C 7203            	   693: 	moveq	#KEYBD_SEMA,d1
00:00000C3E 6100199C        	   694: 	bsr	UnlockSemaphore
                            	   695: .0001:
00:00000C42 4CDF0103        	   696: 	movem.l	(a7)+,d0/d1/a0		; return
00:00000C46 4E73            	   697: 	rte
                            	   698: 
                            	   699: ;--------------------------------------------------------------------------
                            	   700: ; PS2 scan codes to ascii conversion tables.
                            	   701: ;--------------------------------------------------------------------------
                            	   702: ;
                            	   703: _unshiftedScanCodes:
00:00000C48 2E              	   704: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
00:00000C49 A9
00:00000C4A 2E
00:00000C4B A5
00:00000C4C A3
00:00000C4D A1
00:00000C4E A2
00:00000C4F AC
00:00000C50 2E              	   705: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
00:00000C51 AA
00:00000C52 A8
00:00000C53 A6
00:00000C54 A4
00:00000C55 09
00:00000C56 60
00:00000C57 2E
00:00000C58 2E              	   706: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
00:00000C59 2E
00:00000C5A 2E
00:00000C5B 2E
00:00000C5C 2E
00:00000C5D 71
00:00000C5E 31
00:00000C5F 2E
00:00000C60 2E              	   707: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
00:00000C61 2E
00:00000C62 7A
00:00000C63 73
00:00000C64 61
00:00000C65 77
00:00000C66 32
00:00000C67 2E
00:00000C68 2E              	   708: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
00:00000C69 63
00:00000C6A 78
00:00000C6B 64
00:00000C6C 65
00:00000C6D 34
00:00000C6E 33
00:00000C6F 2E
00:00000C70 2E              	   709: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
00:00000C71 20
00:00000C72 76
00:00000C73 66
00:00000C74 74
00:00000C75 72
00:00000C76 35
00:00000C77 2E
00:00000C78 2E              	   710: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
00:00000C79 6E
00:00000C7A 62
00:00000C7B 68
00:00000C7C 67
00:00000C7D 79
00:00000C7E 36
00:00000C7F 2E
00:00000C80 2E              	   711: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
00:00000C81 2E
00:00000C82 6D
00:00000C83 6A
00:00000C84 75
00:00000C85 37
00:00000C86 38
00:00000C87 2E
00:00000C88 2E              	   712: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
00:00000C89 2C
00:00000C8A 6B
00:00000C8B 69
00:00000C8C 6F
00:00000C8D 30
00:00000C8E 39
00:00000C8F 2E
00:00000C90 2E              	   713: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
00:00000C91 2E
00:00000C92 2F
00:00000C93 6C
00:00000C94 3B
00:00000C95 70
00:00000C96 2D
00:00000C97 2E
00:00000C98 2E              	   714: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
00:00000C99 2E
00:00000C9A 27
00:00000C9B 2E
00:00000C9C 5B
00:00000C9D 3D
00:00000C9E 2E
00:00000C9F 2E
00:00000CA0 AD              	   715: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
00:00000CA1 2E
00:00000CA2 0D
00:00000CA3 5D
00:00000CA4 2E
00:00000CA5 5C
00:00000CA6 2E
00:00000CA7 2E
00:00000CA8 2E              	   716: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000CA9 2E
00:00000CAA 2E
00:00000CAB 2E
00:00000CAC 2E
00:00000CAD 2E
00:00000CAE 08
00:00000CAF 2E
00:00000CB0 2E              	   717: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
00:00000CB1 95
00:00000CB2 2E
00:00000CB3 93
00:00000CB4 94
00:00000CB5 2E
00:00000CB6 2E
00:00000CB7 2E
00:00000CB8 98              	   718: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
00:00000CB9 7F
00:00000CBA 92
00:00000CBB 2E
00:00000CBC 91
00:00000CBD 90
00:00000CBE 1B
00:00000CBF AF
00:00000CC0 AB              	   719: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
00:00000CC1 2E
00:00000CC2 97
00:00000CC3 2E
00:00000CC4 2E
00:00000CC5 96
00:00000CC6 AE
00:00000CC7 2E
                            	   720: 
00:00000CC8 2E              	   721: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
00:00000CC9 2E
00:00000CCA 2E
00:00000CCB A7
00:00000CCC 2E
00:00000CCD 2E
00:00000CCE 2E
00:00000CCF 2E
00:00000CD0 2E              	   722: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CD1 2E
00:00000CD2 2E
00:00000CD3 2E
00:00000CD4 2E
00:00000CD5 2E
00:00000CD6 2E
00:00000CD7 2E
00:00000CD8 2E              	   723: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CD9 2E
00:00000CDA 2E
00:00000CDB 2E
00:00000CDC 2E
00:00000CDD 2E
00:00000CDE 2E
00:00000CDF 2E
00:00000CE0 2E              	   724: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CE1 2E
00:00000CE2 2E
00:00000CE3 2E
00:00000CE4 2E
00:00000CE5 2E
00:00000CE6 2E
00:00000CE7 2E
00:00000CE8 2E              	   725: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CE9 2E
00:00000CEA 2E
00:00000CEB 2E
00:00000CEC 2E
00:00000CED 2E
00:00000CEE 2E
00:00000CEF 2E
00:00000CF0 2E              	   726: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CF1 2E
00:00000CF2 2E
00:00000CF3 2E
00:00000CF4 2E
00:00000CF5 2E
00:00000CF6 2E
00:00000CF7 2E
00:00000CF8 2E              	   727: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CF9 2E
00:00000CFA 2E
00:00000CFB 2E
00:00000CFC 2E
00:00000CFD 2E
00:00000CFE 2E
00:00000CFF 2E
00:00000D00 2E              	   728: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D01 2E
00:00000D02 2E
00:00000D03 2E
00:00000D04 2E
00:00000D05 2E
00:00000D06 2E
00:00000D07 2E
00:00000D08 2E              	   729: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D09 2E
00:00000D0A 2E
00:00000D0B 2E
00:00000D0C 2E
00:00000D0D 2E
00:00000D0E 2E
00:00000D0F 2E
00:00000D10 2E              	   730: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D11 2E
00:00000D12 2E
00:00000D13 2E
00:00000D14 2E
00:00000D15 2E
00:00000D16 2E
00:00000D17 2E
00:00000D18 2E              	   731: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D19 2E
00:00000D1A 2E
00:00000D1B 2E
00:00000D1C 2E
00:00000D1D 2E
00:00000D1E 2E
00:00000D1F 2E
00:00000D20 2E              	   732: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D21 2E
00:00000D22 2E
00:00000D23 2E
00:00000D24 2E
00:00000D25 2E
00:00000D26 2E
00:00000D27 2E
00:00000D28 2E              	   733: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D29 2E
00:00000D2A 2E
00:00000D2B 2E
00:00000D2C 2E
00:00000D2D 2E
00:00000D2E 2E
00:00000D2F 2E
00:00000D30 2E              	   734: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D31 2E
00:00000D32 2E
00:00000D33 2E
00:00000D34 2E
00:00000D35 2E
00:00000D36 2E
00:00000D37 2E
00:00000D38 2E              	   735: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D39 2E
00:00000D3A 2E
00:00000D3B 2E
00:00000D3C 2E
00:00000D3D 2E
00:00000D3E 2E
00:00000D3F 2E
00:00000D40 2E              	   736: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
00:00000D41 2E
00:00000D42 FA
00:00000D43 2E
00:00000D44 2E
00:00000D45 2E
00:00000D46 2E
00:00000D47 2E
                            	   737: 
                            	   738: _shiftedScanCodes:
00:00000D48 2E              	   739: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D49 2E
00:00000D4A 2E
00:00000D4B 2E
00:00000D4C 2E
00:00000D4D 2E
00:00000D4E 2E
00:00000D4F 2E
00:00000D50 2E              	   740: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
00:00000D51 2E
00:00000D52 2E
00:00000D53 2E
00:00000D54 2E
00:00000D55 09
00:00000D56 7E
00:00000D57 2E
00:00000D58 2E              	   741: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
00:00000D59 2E
00:00000D5A 2E
00:00000D5B 2E
00:00000D5C 2E
00:00000D5D 51
00:00000D5E 21
00:00000D5F 2E
00:00000D60 2E              	   742: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
00:00000D61 2E
00:00000D62 5A
00:00000D63 53
00:00000D64 41
00:00000D65 57
00:00000D66 40
00:00000D67 2E
00:00000D68 2E              	   743: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
00:00000D69 43
00:00000D6A 58
00:00000D6B 44
00:00000D6C 45
00:00000D6D 24
00:00000D6E 23
00:00000D6F 2E
00:00000D70 2E              	   744: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
00:00000D71 20
00:00000D72 56
00:00000D73 46
00:00000D74 54
00:00000D75 52
00:00000D76 25
00:00000D77 2E
00:00000D78 2E              	   745: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
00:00000D79 4E
00:00000D7A 42
00:00000D7B 48
00:00000D7C 47
00:00000D7D 59
00:00000D7E 5E
00:00000D7F 2E
00:00000D80 2E              	   746: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
00:00000D81 2E
00:00000D82 4D
00:00000D83 4A
00:00000D84 55
00:00000D85 26
00:00000D86 2A
00:00000D87 2E
00:00000D88 2E              	   747: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
00:00000D89 3C
00:00000D8A 4B
00:00000D8B 49
00:00000D8C 4F
00:00000D8D 29
00:00000D8E 28
00:00000D8F 2E
00:00000D90 2E              	   748: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
00:00000D91 3E
00:00000D92 3F
00:00000D93 4C
00:00000D94 3A
00:00000D95 50
00:00000D96 5F
00:00000D97 2E
00:00000D98 2E              	   749: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
00:00000D99 2E
00:00000D9A 22
00:00000D9B 2E
00:00000D9C 7B
00:00000D9D 2B
00:00000D9E 2E
00:00000D9F 2E
00:00000DA0 2E              	   750: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
00:00000DA1 2E
00:00000DA2 0D
00:00000DA3 7D
00:00000DA4 2E
00:00000DA5 7C
00:00000DA6 2E
00:00000DA7 2E
00:00000DA8 2E              	   751: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000DA9 2E
00:00000DAA 2E
00:00000DAB 2E
00:00000DAC 2E
00:00000DAD 2E
00:00000DAE 08
00:00000DAF 2E
00:00000DB0 2E              	   752: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DB1 2E
00:00000DB2 2E
00:00000DB3 2E
00:00000DB4 2E
00:00000DB5 2E
00:00000DB6 2E
00:00000DB7 2E
00:00000DB8 2E              	   753: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
00:00000DB9 7F
00:00000DBA 2E
00:00000DBB 2E
00:00000DBC 2E
00:00000DBD 2E
00:00000DBE 1B
00:00000DBF 2E
00:00000DC0 2E              	   754: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DC1 2E
00:00000DC2 2E
00:00000DC3 2E
00:00000DC4 2E
00:00000DC5 2E
00:00000DC6 2E
00:00000DC7 2E
                            	   755: 
00:00000DC8 2E              	   756: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DC9 2E
00:00000DCA 2E
00:00000DCB 2E
00:00000DCC 2E
00:00000DCD 2E
00:00000DCE 2E
00:00000DCF 2E
00:00000DD0 2E              	   757: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DD1 2E
00:00000DD2 2E
00:00000DD3 2E
00:00000DD4 2E
00:00000DD5 2E
00:00000DD6 2E
00:00000DD7 2E
00:00000DD8 2E              	   758: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DD9 2E
00:00000DDA 2E
00:00000DDB 2E
00:00000DDC 2E
00:00000DDD 2E
00:00000DDE 2E
00:00000DDF 2E
00:00000DE0 2E              	   759: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DE1 2E
00:00000DE2 2E
00:00000DE3 2E
00:00000DE4 2E
00:00000DE5 2E
00:00000DE6 2E
00:00000DE7 2E
00:00000DE8 2E              	   760: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DE9 2E
00:00000DEA 2E
00:00000DEB 2E
00:00000DEC 2E
00:00000DED 2E
00:00000DEE 2E
00:00000DEF 2E
00:00000DF0 2E              	   761: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DF1 2E
00:00000DF2 2E
00:00000DF3 2E
00:00000DF4 2E
00:00000DF5 2E
00:00000DF6 2E
00:00000DF7 2E
00:00000DF8 2E              	   762: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DF9 2E
00:00000DFA 2E
00:00000DFB 2E
00:00000DFC 2E
00:00000DFD 2E
00:00000DFE 2E
00:00000DFF 2E
00:00000E00 2E              	   763: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E01 2E
00:00000E02 2E
00:00000E03 2E
00:00000E04 2E
00:00000E05 2E
00:00000E06 2E
00:00000E07 2E
00:00000E08 2E              	   764: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E09 2E
00:00000E0A 2E
00:00000E0B 2E
00:00000E0C 2E
00:00000E0D 2E
00:00000E0E 2E
00:00000E0F 2E
00:00000E10 2E              	   765: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E11 2E
00:00000E12 2E
00:00000E13 2E
00:00000E14 2E
00:00000E15 2E
00:00000E16 2E
00:00000E17 2E
00:00000E18 2E              	   766: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E19 2E
00:00000E1A 2E
00:00000E1B 2E
00:00000E1C 2E
00:00000E1D 2E
00:00000E1E 2E
00:00000E1F 2E
00:00000E20 2E              	   767: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E21 2E
00:00000E22 2E
00:00000E23 2E
00:00000E24 2E
00:00000E25 2E
00:00000E26 2E
00:00000E27 2E
00:00000E28 2E              	   768: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E29 2E
00:00000E2A 2E
00:00000E2B 2E
00:00000E2C 2E
00:00000E2D 2E
00:00000E2E 2E
00:00000E2F 2E
00:00000E30 2E              	   769: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E31 2E
00:00000E32 2E
00:00000E33 2E
00:00000E34 2E
00:00000E35 2E
00:00000E36 2E
00:00000E37 2E
00:00000E38 2E              	   770: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E39 2E
00:00000E3A 2E
00:00000E3B 2E
00:00000E3C 2E
00:00000E3D 2E
00:00000E3E 2E
00:00000E3F 2E
00:00000E40 2E              	   771: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E41 2E
00:00000E42 2E
00:00000E43 2E
00:00000E44 2E
00:00000E45 2E
00:00000E46 2E
00:00000E47 2E
                            	   772: 
                            	   773: ; control
                            	   774: _keybdControlCodes:
00:00000E48 2E              	   775: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E49 2E
00:00000E4A 2E
00:00000E4B 2E
00:00000E4C 2E
00:00000E4D 2E
00:00000E4E 2E
00:00000E4F 2E
00:00000E50 2E              	   776: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
00:00000E51 2E
00:00000E52 2E
00:00000E53 2E
00:00000E54 2E
00:00000E55 09
00:00000E56 7E
00:00000E57 2E
00:00000E58 2E              	   777: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
00:00000E59 2E
00:00000E5A 2E
00:00000E5B 2E
00:00000E5C 2E
00:00000E5D 11
00:00000E5E 21
00:00000E5F 2E
00:00000E60 2E              	   778: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
00:00000E61 2E
00:00000E62 1A
00:00000E63 13
00:00000E64 01
00:00000E65 17
00:00000E66 40
00:00000E67 2E
00:00000E68 2E              	   779: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
00:00000E69 03
00:00000E6A 18
00:00000E6B 04
00:00000E6C 05
00:00000E6D 24
00:00000E6E 23
00:00000E6F 2E
00:00000E70 2E              	   780: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
00:00000E71 20
00:00000E72 16
00:00000E73 06
00:00000E74 14
00:00000E75 12
00:00000E76 25
00:00000E77 2E
00:00000E78 2E              	   781: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
00:00000E79 0E
00:00000E7A 02
00:00000E7B 08
00:00000E7C 07
00:00000E7D 19
00:00000E7E 5E
00:00000E7F 2E
00:00000E80 2E              	   782: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
00:00000E81 2E
00:00000E82 0D
00:00000E83 0A
00:00000E84 15
00:00000E85 26
00:00000E86 2A
00:00000E87 2E
00:00000E88 2E              	   783: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
00:00000E89 3C
00:00000E8A 0B
00:00000E8B 09
00:00000E8C 0F
00:00000E8D 29
00:00000E8E 28
00:00000E8F 2E
00:00000E90 2E              	   784: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
00:00000E91 3E
00:00000E92 3F
00:00000E93 0C
00:00000E94 3A
00:00000E95 10
00:00000E96 5F
00:00000E97 2E
00:00000E98 2E              	   785: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
00:00000E99 2E
00:00000E9A 22
00:00000E9B 2E
00:00000E9C 7B
00:00000E9D 2B
00:00000E9E 2E
00:00000E9F 2E
00:00000EA0 2E              	   786: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
00:00000EA1 2E
00:00000EA2 0D
00:00000EA3 7D
00:00000EA4 2E
00:00000EA5 7C
00:00000EA6 2E
00:00000EA7 2E
00:00000EA8 2E              	   787: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000EA9 2E
00:00000EAA 2E
00:00000EAB 2E
00:00000EAC 2E
00:00000EAD 2E
00:00000EAE 08
00:00000EAF 2E
00:00000EB0 2E              	   788: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EB1 2E
00:00000EB2 2E
00:00000EB3 2E
00:00000EB4 2E
00:00000EB5 2E
00:00000EB6 2E
00:00000EB7 2E
00:00000EB8 2E              	   789: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
00:00000EB9 7F
00:00000EBA 2E
00:00000EBB 2E
00:00000EBC 2E
00:00000EBD 2E
00:00000EBE 1B
00:00000EBF 2E
00:00000EC0 2E              	   790: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EC1 2E
00:00000EC2 2E
00:00000EC3 2E
00:00000EC4 2E
00:00000EC5 2E
00:00000EC6 2E
00:00000EC7 2E
                            	   791: 
                            	   792: _keybdExtendedCodes:
00:00000EC8 2E              	   793: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
00:00000EC9 2E
00:00000ECA 2E
00:00000ECB 2E
00:00000ECC A3
00:00000ECD A1
00:00000ECE A2
00:00000ECF 2E
00:00000ED0 2E              	   794: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000ED1 2E
00:00000ED2 2E
00:00000ED3 2E
00:00000ED4 2E
00:00000ED5 2E
00:00000ED6 2E
00:00000ED7 2E
00:00000ED8 2E              	   795: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000ED9 2E
00:00000EDA 2E
00:00000EDB 2E
00:00000EDC 2E
00:00000EDD 2E
00:00000EDE 2E
00:00000EDF 2E
00:00000EE0 2E              	   796: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EE1 2E
00:00000EE2 2E
00:00000EE3 2E
00:00000EE4 2E
00:00000EE5 2E
00:00000EE6 2E
00:00000EE7 2E
00:00000EE8 2E              	   797: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EE9 2E
00:00000EEA 2E
00:00000EEB 2E
00:00000EEC 2E
00:00000EED 2E
00:00000EEE 2E
00:00000EEF 2E
00:00000EF0 2E              	   798: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EF1 2E
00:00000EF2 2E
00:00000EF3 2E
00:00000EF4 2E
00:00000EF5 2E
00:00000EF6 2E
00:00000EF7 2E
00:00000EF8 2E              	   799: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EF9 2E
00:00000EFA 2E
00:00000EFB 2E
00:00000EFC 2E
00:00000EFD 2E
00:00000EFE 2E
00:00000EFF 2E
00:00000F00 2E              	   800: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000F01 2E
00:00000F02 2E
00:00000F03 2E
00:00000F04 2E
00:00000F05 2E
00:00000F06 2E
00:00000F07 2E
00:00000F08 2E              	   801: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000F09 2E
00:00000F0A 2E
00:00000F0B 2E
00:00000F0C 2E
00:00000F0D 2E
00:00000F0E 2E
00:00000F0F 2E
00:00000F10 2E              	   802: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000F11 2E
00:00000F12 2E
00:00000F13 2E
00:00000F14 2E
00:00000F15 2E
00:00000F16 2E
00:00000F17 2E
00:00000F18 2E              	   803: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000F19 2E
00:00000F1A 2E
00:00000F1B 2E
00:00000F1C 2E
00:00000F1D 2E
00:00000F1E 2E
00:00000F1F 2E
00:00000F20 2E              	   804: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000F21 2E
00:00000F22 2E
00:00000F23 2E
00:00000F24 2E
00:00000F25 2E
00:00000F26 2E
00:00000F27 2E
00:00000F28 2E              	   805: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000F29 2E
00:00000F2A 2E
00:00000F2B 2E
00:00000F2C 2E
00:00000F2D 2E
00:00000F2E 2E
00:00000F2F 2E
00:00000F30 2E              	   806: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
00:00000F31 95
00:00000F32 2E
00:00000F33 93
00:00000F34 94
00:00000F35 2E
00:00000F36 2E
00:00000F37 2E
00:00000F38 98              	   807: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
00:00000F39 99
00:00000F3A 92
00:00000F3B 2E
00:00000F3C 91
00:00000F3D 90
00:00000F3E 2E
00:00000F3F 2E
00:00000F40 2E              	   808: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
00:00000F41 2E
00:00000F42 97
00:00000F43 2E
00:00000F44 2E
00:00000F45 96
00:00000F46 2E
00:00000F47 2E
                            	   809: 
                            	   810: 

Source: "boot.x68"
                            	   601: 	include "textvid.x68"

Source: "textvid.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Setup the text video device
                            	    40: ; stdout = text screen controller
                            	    41: ;------------------------------------------------------------------------------
                            	    42: ;------------------------------------------------------------------------------
                            	    43: 
                            	    44: TBLE macro arg1
                            	    45: 	dc.l (\1)
                            	    46: endm
                            	    47: 
                            	    48: 	code
                            	    49: 	even
                            	    50: 
                            	    51: 	align 2
                            	    52: TEXTVID_CMDTBL:
                            	    53: 	TBLE textvid_init					; 0
00:00000F48 00001028        	     1M 	dc.l (textvid_init)
                            	    54: 	TBLE textvid_stat
00:00000F4C 000010D0        	     1M 	dc.l (textvid_stat)
                            	    55: 	TBLE textvid_putchar
00:00000F50 0000127A        	     1M 	dc.l (textvid_putchar)
                            	    56: 	TBLE textvid_putbuf
00:00000F54 000010DC        	     1M 	dc.l (textvid_putbuf)
                            	    57: 	TBLE textvid_getchar
00:00000F58 000010D4        	     1M 	dc.l (textvid_getchar)
                            	    58: 	TBLE textvid_getbuf
00:00000F5C 000010DC        	     1M 	dc.l (textvid_getbuf)
                            	    59: 	TBLE textvid_set_inpos
00:00000F60 000010F6        	     1M 	dc.l (textvid_set_inpos)
                            	    60: 	TBLE textvid_set_outpos
00:00000F64 0000110C        	     1M 	dc.l (textvid_set_outpos)
                            	    61: 	TBLE textvid_stub
00:00000F68 000010DC        	     1M 	dc.l (textvid_stub)
                            	    62: 	TBLE textvid_stub
00:00000F6C 000010DC        	     1M 	dc.l (textvid_stub)
                            	    63: 	TBLE textvid_stub				; 10
00:00000F70 000010DC        	     1M 	dc.l (textvid_stub)
                            	    64: 	TBLE textvid_stub
00:00000F74 000010DC        	     1M 	dc.l (textvid_stub)
                            	    65: 	TBLE textvid_clear
00:00000F78 000011B8        	     1M 	dc.l (textvid_clear)
                            	    66: 	TBLE textvid_stub
00:00000F7C 000010DC        	     1M 	dc.l (textvid_stub)
                            	    67: 	TBLE textvid_stub
00:00000F80 000010DC        	     1M 	dc.l (textvid_stub)
                            	    68: 	TBLE textvid_stub
00:00000F84 000010DC        	     1M 	dc.l (textvid_stub)
                            	    69: 	TBLE textvid_getbuf1
00:00000F88 0000116E        	     1M 	dc.l (textvid_getbuf1)
                            	    70: 	TBLE textvid_stub
00:00000F8C 000010DC        	     1M 	dc.l (textvid_stub)
                            	    71: 	TBLE textvid_stub
00:00000F90 000010DC        	     1M 	dc.l (textvid_stub)
                            	    72: 	TBLE textvid_set_unit
00:00000F94 0000117E        	     1M 	dc.l (textvid_set_unit)
                            	    73: 	TBLE textvid_get_dimen	; 20
00:00000F98 00001188        	     1M 	dc.l (textvid_get_dimen)
                            	    74: 	TBLE textvid_get_color
00:00000F9C 0000115E        	     1M 	dc.l (textvid_get_color)
                            	    75: 	TBLE textvid_get_inpos
00:00000FA0 000010E0        	     1M 	dc.l (textvid_get_inpos)
                            	    76: 	TBLE textvid_get_outpos
00:00000FA4 00001122        	     1M 	dc.l (textvid_get_outpos)
                            	    77: 	TBLE textvid_get_outptr
00:00000FA8 00001138        	     1M 	dc.l (textvid_get_outptr)
                            	    78: 
                            	    79: 	code
                            	    80: 	even
                            	    81: textvid_cmdproc:
00:00000FAC 0C060019        	    82: 	cmpi.b #25,d6
00:00000FB0 641A            	    83: 	bhs.s .0001
00:00000FB2 48E70280        	    84: 	movem.l d6/a0,-(a7)
00:00000FB6 4886            	    85: 	ext.w d6
00:00000FB8 48C6            	    86: 	ext.l d6
00:00000FBA E54E            	    87: 	lsl.w #2,d6
00:00000FBC 41FAFF8A        	    88: 	lea TEXTVID_CMDTBL,a0
00:00000FC0 20706000        	    89: 	move.l (a0,d6.w),a0
00:00000FC4 4E90            	    90: 	jsr (a0)
00:00000FC6 4CDF0140        	    91: 	movem.l (a7)+,d6/a0
00:00000FCA 4E75            	    92: 	rts
                            	    93: .0001:
00:00000FCC 7002            	    94: 	moveq #E_Func,d0
00:00000FCE 4E75            	    95: 	rts
                            	    96: 
                            	    97: setup_textvid:
00:00000FD0 48E780C0        	    98: 	movem.l d0/a0/a1,-(a7)
00:00000FD4 7020            	    99: 	moveq #32,d0
00:00000FD6 41F900040B08    	   100: 	lea.l textvid_dcb,a0
                            	   101: .0001:
00:00000FDC 4298            	   102: 	clr.l (a0)+
00:00000FDE 51C8FFFC        	   103: 	dbra d0,.0001
00:00000FE2 23FC444342200004	   104: 	move.l #$44434220,textvid_dcb+DCB_MAGIC				; 'DCB '
00:00000FEA 0B08
00:00000FEC 23FC544558540004	   105: 	move.l #$54455854,textvid_dcb+DCB_NAME				; 'TEXTVID'
00:00000FF4 0B0C
00:00000FF6 23FC564944000004	   106: 	move.l #$56494400,textvid_dcb+DCB_NAME+4			;
00:00000FFE 0B10
00:00001000 23FC00000FAC0004	   107: 	move.l #textvid_cmdproc,textvid_dcb+DCB_CMDPROC
00:00001008 0B20
00:0000100A 611C            	   108: 	bsr textvid_init
00:0000100C 61001630        	   109: 	jsr Delay3s
00:00001010 610001A6        	   110: 	bsr textvid_clear
00:00001014 43F900040B08    	   111: 	lea.l textvid_dcb+DCB_MAGIC,a1
00:0000101A 61006AF0        	   112: 	jsr DisplayString
00:0000101E 61006AD2        	   113: 	jsr CRLF
00:00001022 4CDF0301        	   114: 	movem.l (a7)+,d0/a0/a1
00:00001026 4E75            	   115: 	rts
                            	   116: 
                            	   117: textvid_init:
00:00001028 2F00            	   118: 	move.l d0,-(a7)
                            	   119: 	if (SCREEN_FORMAT==1)
00:0000102A 23FC000000FF0004	   120: 		move.l #$0000ff,fgColor		; set foreground / background color (white)
00:00001032 0084
00:00001034 23FC000000020004	   121: 		move.l #$000002,bkColor		; medium blue
00:0000103C 0088
00:0000103E 23FC000000FF0004	   122: 		move.l #$0000ff,textvid_dcb+DCB_FGCOLOR
00:00001046 0B6C
00:00001048 23FC000000020004	   123: 		move.l #$000002,textvid_dcb+DCB_BKCOLOR		; medium blue
00:00001050 0B68
                            	   124: 	else
                            	   125: 		move.l #$1fffff,fgColor		; set foreground / background color (white)
                            	   126: 		move.l #$00003f,bkColor		; medium blue
                            	   127: 		move.l #$1fffff,textvid_dcb+DCB_FGCOLOR		; set foreground / background color (white)
                            	   128: 		move.l #$00003f,textvid_dcb+DCB_BKCOLOR		; medium blue
                            	   129: 	endif
00:00001052 4E7A0FE0        	   130: 	movec.l	coreno,d0					; get core number (2 to 9)
00:00001056 5500            	   131: 	subi.b #2,d0							; adjust (0 to 7)
                            	   132: 	if (SCREEN_FORMAT==1)
00:00001058 C0FC2000        	   133: 		mulu #8192,d0						; compute screen location
                            	   134: 	else
                            	   135: 		mulu #16384,d0						; compute screen location
                            	   136: 	endif
                            	   137: 	if HAS_MMU
                            	   138: 		addi.l #$01E00000,d0
                            	   139: 	else
00:0000105C 0680FD000000    	   140: 		addi.l #$FD000000,d0
                            	   141: 	endif
00:00001062 23C000040B40    	   142: 	move.l d0,textvid_dcb+DCB_INBUFPTR
00:00001068 23C000040B44    	   143: 	move.l d0,textvid_dcb+DCB_OUTBUFPTR
00:0000106E 23C000040004    	   144: 	move.l d0,TextScr
                            	   145: 	if (SCREEN_FORMAT==1)
00:00001074 23FC000020000004	   146: 		move.l #8192,textvid_dcb+DCB_INBUFSIZE
00:0000107C 0B48
00:0000107E 23FC000020000004	   147: 		move.l #8192,textvid_dcb+DCB_OUTBUFSIZE
00:00001086 0B4C
                            	   148: 	else
                            	   149: 		move.l #16384,textvid_dcb+DCB_INBUFSIZE
                            	   150: 		move.l #16384,textvid_dcb+DCB_OUTBUFSIZE
                            	   151: 	endif
00:00001088 23FC000000300004	   152: 	move.l #TEXTCOL,textvid_dcb+DCB_OUTDIMX	; set rows and columns
00:00001090 0B5C
00:00001092 23FC000000200004	   153: 	move.l #TEXTROW,textvid_dcb+DCB_OUTDIMY
00:0000109A 0B60
00:0000109C 23FC000000300004	   154: 	move.l #TEXTCOL,textvid_dcb+DCB_INDIMX		; set rows and columns
00:000010A4 0B50
00:000010A6 23FC000000200004	   155: 	move.l #TEXTROW,textvid_dcb+DCB_INDIMY
00:000010AE 0B54
00:000010B0 13FC00300004008D	   156: 	move.b #TEXTCOL,TextCols				; set rows and columns
00:000010B8 13FC00200004008C	   157: 	move.b #TEXTROW,TextRows
00:000010C0 42B900040B28    	   158: 	clr.l textvid_dcb+DCB_OUTPOSX
00:000010C6 42B900040B2C    	   159: 	clr.l textvid_dcb+DCB_OUTPOSY
00:000010CC 201F            	   160: 	move.l (a7)+,d0
00:000010CE 4E75            	   161: 	rts
                            	   162: 
                            	   163: textvid_stat:
00:000010D0 7000            	   164: 	moveq #E_Ok,d0
00:000010D2 4E75            	   165: 	rts
                            	   166: 
                            	   167: textvid_getchar:
00:000010D4 61007072        	   168: 	bsr FromScreen
00:000010D8 7000            	   169: 	moveq #E_Ok,d0
00:000010DA 4E75            	   170: 	rts
                            	   171: 
                            	   172: textvid_putbuf:
                            	   173: textvid_getbuf:
                            	   174: textvid_stub:
00:000010DC 700A            	   175: 	moveq #E_NotSupported,d0
00:000010DE 4E75            	   176: 	rts
                            	   177: 
                            	   178: textvid_get_inpos:
00:000010E0 223900040B34    	   179: 	move.l textvid_dcb+DCB_INPOSX,d1
00:000010E6 243900040B38    	   180: 	move.l textvid_dcb+DCB_INPOSY,d2
00:000010EC 263900040B3C    	   181: 	move.l textvid_dcb+DCB_INPOSZ,d3
00:000010F2 7000            	   182: 	move.l #E_Ok,d0
00:000010F4 4E75            	   183: 	rts
                            	   184: 
                            	   185: textvid_set_inpos:
00:000010F6 23C100040B34    	   186: 	move.l d1,textvid_dcb+DCB_INPOSX
00:000010FC 23C200040B38    	   187: 	move.l d2,textvid_dcb+DCB_INPOSY
00:00001102 23C300040B3C    	   188: 	move.l d3,textvid_dcb+DCB_INPOSZ
00:00001108 7000            	   189: 	move.l #E_Ok,d0
00:0000110A 4E75            	   190: 	rts
                            	   191: 
                            	   192: textvid_set_outpos:
00:0000110C 23C100040B28    	   193: 	move.l d1,textvid_dcb+DCB_OUTPOSX
00:00001112 23C200040B2C    	   194: 	move.l d2,textvid_dcb+DCB_OUTPOSY
00:00001118 23C300040B30    	   195: 	move.l d3,textvid_dcb+DCB_OUTPOSZ
00:0000111E 7000            	   196: 	move.l #E_Ok,d0
00:00001120 4E75            	   197: 	rts
                            	   198: 
                            	   199: textvid_get_outpos:
00:00001122 223900040B28    	   200: 	move.l textvid_dcb+DCB_OUTPOSX,d1
00:00001128 243900040B2C    	   201: 	move.l textvid_dcb+DCB_OUTPOSY,d2
00:0000112E 263900040B30    	   202: 	move.l textvid_dcb+DCB_OUTPOSZ,d3
00:00001134 7000            	   203: 	move.l #E_Ok,d0
00:00001136 4E75            	   204: 	rts
                            	   205: 
                            	   206: textvid_get_outptr:
00:00001138 2F02            	   207: 	move.l d2,-(a7)
00:0000113A 223900040B28    	   208: 	move.l textvid_dcb+DCB_OUTPOSX,d1
00:00001140 203900040B2C    	   209: 	move.l textvid_dcb+DCB_OUTPOSY,d0
00:00001146 243900040B5C    	   210: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:0000114C C0C2            	   211: 	mulu d2,d0
00:0000114E D280            	   212: 	add.l d0,d1
                            	   213: 	if (SCREEN_FORMAT==1)
00:00001150 E589            	   214: 		lsl.l #2,d1
                            	   215: 	else
                            	   216: 		lsl.l #3,d1
                            	   217: 	endif
00:00001152 D2B900040B44    	   218: 	add.l textvid_dcb+DCB_OUTBUFPTR,d1
00:00001158 241F            	   219: 	move.l (a7)+,d2
00:0000115A 7000            	   220: 	move.l #E_Ok,d0
00:0000115C 4E75            	   221: 	rts
                            	   222: 
                            	   223: textvid_get_color:
00:0000115E 223900040B6C    	   224: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:00001164 243900040B68    	   225: 	move.l textvid_dcb+DCB_BKCOLOR,d2
00:0000116A 7000            	   226: 	move.l #E_Ok,d0
00:0000116C 4E75            	   227: 	rts
                            	   228: 
                            	   229: textvid_getbuf1:
00:0000116E 223900040B44    	   230: 	move.l textvid_dcb+DCB_OUTBUFPTR,d1
00:00001174 243900040B4C    	   231: 	move.l textvid_dcb+DCB_OUTBUFSIZE,d2
00:0000117A 7000            	   232: 	move.l #E_Ok,d0
00:0000117C 4E75            	   233: 	rts
                            	   234: 
                            	   235: textvid_set_unit:
00:0000117E 23C100040B88    	   236: 	move.l d1,textvid_dcb+DCB_UNIT
00:00001184 7000            	   237: 	move.l #E_Ok,d0
00:00001186 4E75            	   238: 	rts
                            	   239: 
                            	   240: textvid_get_dimen:
00:00001188 4A00            	   241: 	cmpi.b #0,d0
00:0000118A 6616            	   242: 	bne.s .0001
00:0000118C 223900040B5C    	   243: 	move.l textvid_dcb+DCB_OUTDIMX,d1
00:00001192 243900040B60    	   244: 	move.l textvid_dcb+DCB_OUTDIMY,d2
00:00001198 263900040B64    	   245: 	move.l textvid_dcb+DCB_OUTDIMZ,d3
00:0000119E 7000            	   246: 	move.l #E_Ok,d0
00:000011A0 4E75            	   247: 	rts
                            	   248: .0001:
00:000011A2 223900040B50    	   249: 	move.l textvid_dcb+DCB_INDIMX,d1
00:000011A8 243900040B54    	   250: 	move.l textvid_dcb+DCB_INDIMY,d2
00:000011AE 263900040B58    	   251: 	move.l textvid_dcb+DCB_INDIMZ,d3
00:000011B4 7000            	   252: 	move.l #E_Ok,d0
00:000011B6 4E75            	   253: 	rts
                            	   254: 
                            	   255: ; -----------------------------------------------------------------------------
                            	   256: ; -----------------------------------------------------------------------------
                            	   257: 
                            	   258: textvid_clear:
00:000011B8 23FCFFFFFFFFFD0F	   259: 	move.l #$FFFFFFFF,leds
00:000011C0 FF00
00:000011C2 48E77880        	   260: 	movem.l	d1/d2/d3/d4/a0,-(a7)
00:000011C6 4E7A0FE0        	   261: 	movec	coreno,d0
00:000011CA 4840            	   262: 	swap d0	
                            	   263: ;	moveq		#SCREEN_SEMA,d1
                            	   264: ;	bsr			LockSemaphore
00:000011CC 223900040B44    	   265: 	move.l textvid_dcb+DCB_OUTBUFPTR,d1
00:000011D2 243900040B4C    	   266: 	move.l textvid_dcb+DCB_OUTBUFSIZE,d2
00:000011D8 23FCFEFEFEFEFD0F	   267: 	move.l #$FEFEFEFE,leds
00:000011E0 FF00
00:000011E2 2041            	   268: 	move.l d1,a0								; a0 = pointer to screen area
00:000011E4 2802            	   269: 	move.l d2,d4
                            	   270: 	if (SCREEN_FORMAT==1)
00:000011E6 E48C            	   271: 		lsr.l #2,d4									; number of cells to clear
                            	   272: 	else
                            	   273: 		lsr.l #3,d4									; number of cells to clear
                            	   274: 	endif
00:000011E8 223900040B6C    	   275: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:000011EE 243900040B68    	   276: 	move.l textvid_dcb+DCB_BKCOLOR,d2
00:000011F4 23FCFDFDFDFDFD0F	   277: 	move.l #$FDFDFDFD,leds
00:000011FC FF00
                            	   278: ;	bsr	get_screen_color				; get the color bits
                            	   279: 	if (SCREEN_FORMAT==1)
00:000011FE 48C1            	   280: 		ext.l d1
00:00001200 E189            	   281: 		lsl.l #8,d1
00:00001202 48C2            	   282: 		ext.l d2									; clear high order bits
00:00001204 8481            	   283: 		or.l d1,d2								; forground color in bits 24 to 31
00:00001206 4842            	   284: 		swap d2										; color in bits 16 to 23
00:00001208 00420020        	   285: 		ori.w #32,d2							; insert character to display (space)
00:0000120C E15A            	   286: 		rol.w #8,d2								; reverse byte order
00:0000120E 4842            	   287: 		swap d2
00:00001210 E15A            	   288: 		rol.w #8,d2
                            	   289: loop3:
00:00001212 20C2            	   290: 		move.l d2,(a0)+						; copy to cell
                            	   291: 	else
                            	   292: 		lsl.l #5,d1								; high order background color bits go in bits 0 to 4
                            	   293: 		move.l d2,d3
                            	   294: 		swap d3
                            	   295: 		andi.l #$1f,d3
                            	   296: 		or.l d3,d1
                            	   297: 		; we want bkcolor in bits 16 to 32
                            	   298: 		; char in bits 0 to 15
                            	   299: 		swap d2										; color in bits 16 to 32
                            	   300: 		move.w #32,d2							; load space character
                            	   301: 		rol.w	#8,d2								; swap endian, text controller expects little endian
                            	   302: 		swap d2
                            	   303: 		rol.w	#8,d2
                            	   304: 		rol.w	#8,d0								; swap endian
                            	   305: 		swap d0
                            	   306: 		rol.w	#8,d0
                            	   307: loop3:
                            	   308: 		move.l d2,(a0)+						; copy char plus bkcolor to cell
                            	   309: 		move.l d1,(a0)+						; copy fgcolor to cell
                            	   310: 	endif
00:00001214 51CCFFFC        	   311: 	dbra d4,loop3
00:00001218 4E7A0FE0        	   312: 	movec coreno,d0
00:0000121C 4840            	   313: 	swap d0	
                            	   314: ;	moveq #SCREEN_SEMA,d1
                            	   315: ;	bsr UnlockSemaphore
00:0000121E 23FCFCFCFCFCFD0F	   316: 	move.l #$FCFCFCFC,leds
00:00001226 FF00
00:00001228 4CDF011E        	   317: 	movem.l (a7)+,d1/d2/d3/d4/a0
00:0000122C 7000            	   318: 	move.l #E_Ok,d0
00:0000122E 4E75            	   319: 	rts
                            	   320: 
                            	   321: ; -----------------------------------------------------------------------------
                            	   322: ; Gets the screen color in d0 and d1. Setup already to be able to insert
                            	   323: ; character code.
                            	   324: ; -----------------------------------------------------------------------------
                            	   325: 
                            	   326: get_screen_color:
00:00001230 2F02            	   327: 	move.l d2,-(a7)
00:00001232 223900040B6C    	   328: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:00001238 243900040B68    	   329: 	move.l textvid_dcb+DCB_BKCOLOR,d2
                            	   330: 	if (SCREEN_FORMAT==1)
00:0000123E E189            	   331: 		lsl.l #8,d1							; foreground color in bits 8 to 15
00:00001240 024200FF        	   332: 		andi.w #$ff,d2
00:00001244 8242            	   333: 		or.w d2,d1							; background color in bits 0 to 7
00:00001246 4841            	   334: 		swap d1									; foreground color in bits 24 to 31, bk in 16 to 23
00:00001248 4241            	   335: 		move.w #0,d1						; clear character
00:0000124A 2001            	   336: 		move.l d1,d0
                            	   337: 	else
                            	   338: 		asl.l	#5,d1							; shift into position
                            	   339: 		ori.l	#$40000000,d1			; set priority
                            	   340: 		move.l d2,d0
                            	   341: 		lsr.l	#8,d2
                            	   342: 		lsr.l	#8,d2
                            	   343: 		andi.l #31,d2						; mask off extra bits
                            	   344: 		or.l d2,d1							; set background color bits in upper long word
                            	   345: 		asl.l	#8,d0							; shift into position for display ram
                            	   346: 		asl.l	#8,d0
                            	   347: 	endif
00:0000124C 241F            	   348: 	move.l (a7)+,d2
00:0000124E 4E75            	   349: 	rts
                            	   350: 
                            	   351: ;------------------------------------------------------------------------------
                            	   352: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   353: ; Destroys d0,d2,a0
                            	   354: ;------------------------------------------------------------------------------
                            	   355: 
                            	   356: CalcScreenLoc:
00:00001250 48E7C400        	   357: 	movem.l d0/d1/d5,-(a7)
00:00001254 203900040B28    	   358: 	move.l textvid_dcb+DCB_OUTPOSX,d0
00:0000125A 2A3900040B2C    	   359: 	move.l textvid_dcb+DCB_OUTPOSY,d5
00:00001260 223900040B5C    	   360: 	move.l textvid_dcb+DCB_OUTDIMX,d1
00:00001266 CAC1            	   361: 	mulu d1,d5							; y * num cols
00:00001268 D085            	   362: 	add.l d5,d0							; plus x
                            	   363: 	if (SCREEN_FORMAT==1)
00:0000126A E580            	   364: 		asl.l #2,d0							; 4 bytes per char
                            	   365: 	else
                            	   366: 		asl.l	#3,d0							; 8 bytes per char
                            	   367: 	endif
00:0000126C 207900040B44    	   368: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:00001272 D1C0            	   369: 	add.l	d0,a0								; a0 = screen location
00:00001274 4CDF0023        	   370: 	movem.l (a7)+,d0/d1/d5
00:00001278 4E75            	   371: 	rts
                            	   372: 
                            	   373: ;------------------------------------------------------------------------------
                            	   374: ; Display a character on the screen
                            	   375: ; Parameters:
                            	   376: ; 	d1.b = char to display
                            	   377: ;------------------------------------------------------------------------------
                            	   378: 
                            	   379: textvid_putchar:
00:0000127A 48E77000        	   380: 	movem.l	d1/d2/d3,-(a7)
00:0000127E 4E7A2FE0        	   381: 	movec	coreno,d2
00:00001282 0C020002        	   382: 	cmpi.b #2,d2
                            	   383: ;	bne.s		.0001
                            	   384: ;	bsr			SerialPutChar
                            	   385: .0001:
00:00001286 0281000000FF    	   386: 	andi.l #$ff,d1				; zero out upper bytes of d1
00:0000128C 0C01000D        	   387: 	cmpi.b #13,d1				; carriage return ?
00:00001290 6612            	   388: 	bne.s	dccr
00:00001292 42B900040B28    	   389: 	clr.l	textvid_dcb+DCB_OUTPOSX	; just set cursor column to zero on a CR
                            	   390: dcx14:
00:00001298 6100024E        	   391: 	bsr	SyncCursor				; set position in text controller
                            	   392: dcx7:
00:0000129C 4CDF000E        	   393: 	movem.l	(a7)+,d1/d2/d3
00:000012A0 7000            	   394: 	moveq #E_Ok,d0
00:000012A2 4E75            	   395: 	rts
                            	   396: dccr:
00:000012A4 0C010091        	   397: 	cmpi.b #$91,d1			; cursor right ?
00:000012A8 6618            	   398: 	bne.s dcx6
00:000012AA 243900040B5C    	   399: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:000012B0 5382            	   400: 	subq.l #1,d2
00:000012B2 94B900040B28    	   401: 	sub.l	textvid_dcb+DCB_OUTPOSX,d2
00:000012B8 67E2            	   402: 	beq.s	dcx7
00:000012BA 52B900040B28    	   403: 	addq.l #1,textvid_dcb+DCB_OUTPOSX
00:000012C0 60D6            	   404: 	bra.s dcx14
                            	   405: dcx6:
00:000012C2 0C010090        	   406: 	cmpi.b #$90,d1			; cursor up ?
00:000012C6 6610            	   407: 	bne.s	dcx8
00:000012C8 4AB900040B2C    	   408: 	tst.l textvid_dcb+DCB_OUTPOSY
00:000012CE 67CC            	   409: 	beq.s	dcx7
00:000012D0 53B900040B2C    	   410: 	subq.l #1,textvid_dcb+DCB_OUTPOSY
00:000012D6 60C0            	   411: 	bra.s	dcx14
                            	   412: dcx8:
00:000012D8 0C010093        	   413: 	cmpi.b #$93,d1			; cursor left?
00:000012DC 6610            	   414: 	bne.s	dcx9
00:000012DE 4AB900040B28    	   415: 	tst.l textvid_dcb+DCB_OUTPOSX
00:000012E4 67B6            	   416: 	beq.s	dcx7
00:000012E6 53B900040B28    	   417: 	subq.l #1,textvid_dcb+DCB_OUTPOSX
00:000012EC 60AA            	   418: 	bra.s	dcx14
                            	   419: dcx9:
00:000012EE 0C010092        	   420: 	cmpi.b #$92,d1			; cursor down ?
00:000012F2 6618            	   421: 	bne.s	dcx10
00:000012F4 243900040B60    	   422: 	move.l textvid_dcb+DCB_OUTDIMY,d2
00:000012FA 5382            	   423: 	subq.l #1,d2
00:000012FC B4B900040B2C    	   424: 	cmp.l	textvid_dcb+DCB_OUTPOSY,d2
00:00001302 6798            	   425: 	beq.s	dcx7
00:00001304 52B900040B2C    	   426: 	addq.l #1,textvid_dcb+DCB_OUTPOSY
00:0000130A 608C            	   427: 	bra.s	dcx14
                            	   428: dcx10:
00:0000130C 0C010094        	   429: 	cmpi.b #$94,d1			; cursor home ?
00:00001310 661C            	   430: 	bne.s	dcx11
00:00001312 4AB900040B28    	   431: 	tst.l	textvid_dcb+DCB_OUTPOSX
00:00001318 670A            	   432: 	beq.s	dcx12
00:0000131A 42B900040B28    	   433: 	clr.l	textvid_dcb+DCB_OUTPOSX
00:00001320 6000FF76        	   434: 	bra	dcx14
                            	   435: dcx12:
00:00001324 42B900040B2C    	   436: 	clr.l	textvid_dcb+DCB_OUTPOSY
00:0000132A 6000FF6C        	   437: 	bra	dcx14
                            	   438: dcx11:
00:0000132E 48E70080        	   439: 	movem.l	a0,-(a7)
00:00001332 0C010099        	   440: 	cmpi.b #$99,d1				; delete ?
00:00001336 6760            	   441: 	beq.s	doDelete
00:00001338 0C010008        	   442: 	cmpi.b #CTRLH,d1			; backspace ?
00:0000133C 674C            	   443: 	beq.s doBackspace
00:0000133E 0C010018        	   444: 	cmpi.b #CTRLX,d1			; delete line ?
00:00001342 6700008A        	   445: 	beq	doCtrlX
00:00001346 0C01000A        	   446: 	cmpi.b #10,d1					; linefeed ?
00:0000134A 672C            	   447: 	beq.s dclf
                            	   448: 
                            	   449: 	; regular char
00:0000134C 23FCFFFFFFFFFD0F	   450: 	move.l #$FFFFFFFF,leds
00:00001354 FF00
00:00001356 6100FEF8        	   451: 	bsr	CalcScreenLoc			; a0 = screen location
00:0000135A 23FCFFFFFFFEFD0F	   452: 	move.l #$FFFFFFFE,leds
00:00001362 FF00
00:00001364 2401            	   453: 	move.l d1,d2					; d2 = char
00:00001366 6100FEC8        	   454: 	bsr get_screen_color	; d0,d1 = color
00:0000136A 8082            	   455: 	or.l d2,d0						; d0 = char + color
00:0000136C E158            	   456: 	rol.w	#8,d0						; swap bytes - text controller expects little endian data
00:0000136E 4840            	   457: 	swap d0								; swap halfs
00:00001370 E158            	   458: 	rol.w	#8,d0						; swap remaining bytes
                            	   459: 	if (SCREEN_FORMAT==1)
00:00001372 20C0            	   460: 		move.l d0,(a0)+
                            	   461: 	else
                            	   462: 		move.l d0,(a0)+
                            	   463: 		rol.w	#8,d1					; swap bytes
                            	   464: 		swap d1							; swap halfs
                            	   465: 		rol.w	#8,d1					; swap remaining bytes
                            	   466: 		move.l d1,(a0)
                            	   467: 	endif
00:00001374 617C            	   468: 	bsr	IncCursorPos
00:00001376 6004            	   469: 	bra	dcx16
                            	   470: dclf:
00:00001378 61000092        	   471: 	bsr IncCursorRow
                            	   472: dcx16:
00:0000137C 6100016A        	   473: 	bsr	SyncCursor
                            	   474: dcx4:
00:00001380 205F            	   475: 	movem.l	(a7)+,a0			; get back a0
00:00001382 4CDF000E        	   476: 	movem.l	(a7)+,d1/d2/d3
00:00001386 7000            	   477: 	moveq #E_Ok,d0
00:00001388 4E75            	   478: 	rts
                            	   479: 
                            	   480: 	;---------------------------
                            	   481: 	; CTRL-H: backspace
                            	   482: 	;---------------------------
                            	   483: doBackspace:
00:0000138A 4AB900040B28    	   484: 	tst.l	textvid_dcb+DCB_OUTPOSX		; if already at start of line
00:00001390 67EE            	   485: 	beq.s dcx4						; nothing to do
00:00001392 53B900040B28    	   486: 	subq.l #1,textvid_dcb+DCB_OUTPOSX		; decrement column
                            	   487: 
                            	   488: 	;---------------------------
                            	   489: 	; Delete key
                            	   490: 	;---------------------------
                            	   491: doDelete:
00:00001398 48E7C080        	   492: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
00:0000139C 6100FEB2        	   493: 	bsr	CalcScreenLoc				; a0 = screen location
00:000013A0 203900040B28    	   494: 	move.l textvid_dcb+DCB_OUTPOSX,d0
                            	   495: .0001:
                            	   496: 	if (SCREEN_FORMAT==1)
00:000013A6 20A80004        	   497: 		move.l 4(a0),(a0)				; pull remaining characters on line over 1
00:000013AA 5888            	   498: 		adda.l #4,a0
                            	   499: 	else
                            	   500: 		move.l 8(a0),(a0)				; pull remaining characters on line over 1
                            	   501: 		move.l 12(a0),4(a0)
                            	   502: 		adda.l #8,a0
                            	   503: 	endif
00:000013AC 5280            	   504: 	addq.l #1,d0
00:000013AE B0B900040B5C    	   505: 	cmp.l	textvid_dcb+DCB_OUTDIMX,d0
00:000013B4 65F0            	   506: 	blo.s	.0001
00:000013B6 6100FE78        	   507: 	bsr	get_screen_color
                            	   508: 	if (SCREEN_FORMAT==1)
00:000013BA 303C0020        	   509: 		move.w #' ',d0
00:000013BE E158            	   510: 		rol.w	#8,d0
00:000013C0 4840            	   511: 		swap d0
00:000013C2 E158            	   512: 		rol.w	#8,d0
00:000013C4 2140FFFC        	   513: 		move.l d0,-4(a0)
                            	   514: 	else
                            	   515: 		move.w #' ',d0					; terminate line with a space
                            	   516: 		rol.w	#8,d0
                            	   517: 		swap d0
                            	   518: 		rol.w	#8,d0
                            	   519: 		move.l d0,-8(a0)
                            	   520: 	endif
00:000013C8 4CDF0103        	   521: 	movem.l	(a7)+,d0/d1/a0
00:000013CC 60AE            	   522: 	bra.s		dcx16				; finished
                            	   523: 
                            	   524: 	;---------------------------
                            	   525: 	; CTRL-X: erase line
                            	   526: 	;---------------------------
                            	   527: doCtrlX:
00:000013CE 42B900040B28    	   528: 	clr.l	textvid_dcb+DCB_OUTPOSX			; Reset cursor to start of line
00:000013D4 203900040B5C    	   529: 	move.l textvid_dcb+DCB_OUTDIMX,d0	; and display TextCols number of spaces
00:000013DA 4880            	   530: 	ext.w	d0
00:000013DC 48C0            	   531: 	ext.l	d0
00:000013DE 123C0020        	   532: 	move.b #' ',d1			; d1 = space char
                            	   533: .0001:
                            	   534: 	; textvid_putchar is called recursively here
                            	   535: 	; It's safe to do because we know it won't recurse again due to the
                            	   536: 	; fact we know the character being displayed is a space char
00:000013E2 6100FE96        	   537: 	bsr	textvid_putchar
00:000013E6 5340            	   538: 	subq #1,d0
00:000013E8 66F8            	   539: 	bne.s	.0001
00:000013EA 42B900040B28    	   540: 	clr.l	textvid_dcb+DCB_OUTPOSX			; now really go back to start of line
00:000013F0 608A            	   541: 	bra	dcx16						; we're done
                            	   542: 
                            	   543: ;------------------------------------------------------------------------------
                            	   544: ; Increment the cursor position, scroll the screen if needed.
                            	   545: ;------------------------------------------------------------------------------
                            	   546: 
                            	   547: IncCursorPos:
00:000013F2 52B900040B28    	   548: 	addq.l #1,textvid_dcb+DCB_OUTPOSX
00:000013F8 203900040B5C    	   549: 	move.l textvid_dcb+DCB_OUTDIMX,d0
00:000013FE B0B900040B28    	   550: 	cmp.l	textvid_dcb+DCB_OUTPOSX,d0
00:00001404 642E            	   551: 	bhs.s	icc1
00:00001406 42B900040B28    	   552: 	clr.l textvid_dcb+DCB_OUTPOSX
                            	   553: IncCursorRow:
00:0000140C 52B900040B2C    	   554: 	addq.l #1,textvid_dcb+DCB_OUTPOSY
00:00001412 203900040B60    	   555: 	move.l textvid_dcb+DCB_OUTDIMY,d0
00:00001418 B0B900040B2C    	   556: 	cmp.l textvid_dcb+DCB_OUTPOSY,d0
00:0000141E 6214            	   557: 	bhi.s	icc1
00:00001420 203900040B60    	   558: 	move.l textvid_dcb+DCB_OUTDIMY,d0
00:00001426 23C000040B2C    	   559: 	move.l d0,textvid_dcb+DCB_OUTPOSY		; in case CursorRow is way over
00:0000142C 53B900040B2C    	   560: 	subq.l #1,textvid_dcb+DCB_OUTPOSY
00:00001432 6102            	   561: 	bsr	ScrollUp
                            	   562: icc1:
00:00001434 4E75            	   563: 	rts
                            	   564: 
                            	   565: ;------------------------------------------------------------------------------
                            	   566: ; Scroll screen up.
                            	   567: ;------------------------------------------------------------------------------
                            	   568: 
                            	   569: ScrollUp:
00:00001436 48E7C084        	   570: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
00:0000143A 4E7A0FE0        	   571: 	movec	coreno,d0
00:0000143E 4840            	   572: 	swap d0	
00:00001440 7205            	   573: 	moveq	#SCREEN_SEMA,d1
00:00001442 6100115C        	   574: 	bsr	LockSemaphore
00:00001446 207900040B44    	   575: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:0000144C 2A48            	   576: 	move.l a0,a5								; a5 = pointer to text screen
                            	   577: .0003:								
00:0000144E 203900040B5C    	   578: 	move.l textvid_dcb+DCB_OUTDIMX,d0					; d0 = columns
00:00001454 223900040B60    	   579: 	move.l textvid_dcb+DCB_OUTDIMY,d1					; d1 = rows
                            	   580: 	if (SCREEN_FORMAT==1)
00:0000145A E580            	   581: 		asl.l	#2,d0								; make into cell index
                            	   582: 	else
                            	   583: 		asl.l	#3,d0								; make into cell index
                            	   584: 	endif
00:0000145C 41F50800        	   585: 	lea	0(a5,d0.l),a0						; a0 = pointer to second row of text screen
                            	   586: 	if (SCREEN_FORMAT==1)
00:00001460 E488            	   587: 		lsr.l	#2,d0								; get back d0
                            	   588: 	else
                            	   589: 		lsr.l	#3,d0								; get back d0
                            	   590: 	endif
00:00001462 5381            	   591: 	subq.l #1,d1									; number of rows-1
00:00001464 C0C1            	   592: 	mulu d1,d0									; d0 = count of characters to move
                            	   593: 	if (SCREEN_FORMAT==1)
                            	   594: 	else
                            	   595: 		add.l d0,d0									; d0*2 2 longs per char
                            	   596: 	endif
                            	   597: .0001:
00:00001466 2AD8            	   598: 	move.l (a0)+,(a5)+
00:00001468 51C8FFFC        	   599: 	dbra d0,.0001
00:0000146C 4E7A0FE0        	   600: 	movec coreno,d0
00:00001470 4840            	   601: 	swap d0	
00:00001472 7205            	   602: 	moveq #SCREEN_SEMA,d1
00:00001474 61001166        	   603: 	bsr UnlockSemaphore
00:00001478 4CDF2103        	   604: 	movem.l (a7)+,d0/d1/a0/a5
                            	   605: 	; Fall through into blanking out last line
                            	   606: 
                            	   607: ;------------------------------------------------------------------------------
                            	   608: ; Blank out the last line on the screen.
                            	   609: ;------------------------------------------------------------------------------
                            	   610: 
                            	   611: BlankLastLine:
00:0000147C 48E7E080        	   612: 	movem.l	d0/d1/d2/a0,-(a7)
00:00001480 4E7A0FE0        	   613: 	movec	coreno,d0
00:00001484 4840            	   614: 	swap d0	
00:00001486 7205            	   615: 	moveq	#SCREEN_SEMA,d1
00:00001488 61001116        	   616: 	bsr	LockSemaphore
00:0000148C 207900040B44    	   617: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:00001492 203900040B5C    	   618: 	move.l textvid_dcb+DCB_OUTDIMX,d0					; d0 = columns
00:00001498 223900040B60    	   619: 	move.l textvid_dcb+DCB_OUTDIMY,d1					; d1 = rows
00:0000149E 5341            	   620: 	subq #1,d1									; last row = #rows-1
00:000014A0 C0C1            	   621: 	mulu d1,d0									; d0 = index of last line
                            	   622: 	if (SCREEN_FORMAT==1)
00:000014A2 E588            	   623: 		lsl.l	#2,d0								; *4 bytes per char
                            	   624: 	else
                            	   625: 		lsl.l	#3,d0								; *8 bytes per char
                            	   626: 	endif
00:000014A4 41F00800        	   627: 	lea	(a0,d0.l),a0						; point a0 to last row
00:000014A8 243900040B5C    	   628: 	move.l textvid_dcb+DCB_OUTDIMX,d2					; number of text cells to clear
00:000014AE 5382            	   629: 	subq.l #1,d2								; count must be one less than desired
00:000014B0 6100FD7E        	   630: 	bsr	get_screen_color				; d0,d1 = screen color
                            	   631: 	if (SCREEN_FORMAT==1)
00:000014B4 303C0020        	   632: 		move.w #32,d0
                            	   633: 	else
                            	   634: 		move.w #32,d0								; set the character for display in low 16 bits
                            	   635: 	endif
00:000014B8 E158            	   636: 	rol.w	#8,d0
00:000014BA 4840            	   637: 	swap d0
00:000014BC E158            	   638: 	rol.w	#8,d0
                            	   639: .0001:
                            	   640: 	if (SCREEN_FORMAT==1)
00:000014BE 20C0            	   641: 		move.l d0,(a0)+
                            	   642: 	else
                            	   643: 		move.l d0,(a0)+
                            	   644: 		bsr rbo
                            	   645: 		move.l d1,(a0)+
                            	   646: 	endif
00:000014C0 51CAFFFC        	   647: 	dbra d2,.0001
00:000014C4 4E7A0FE0        	   648: 	movec	coreno,d0
00:000014C8 4840            	   649: 	swap d0	
00:000014CA 7205            	   650: 	moveq #SCREEN_SEMA,d1
00:000014CC 6100110E        	   651: 	bsr UnlockSemaphore
00:000014D0 4CDF0107        	   652: 	movem.l	(a7)+,d0/d1/d2/a0
00:000014D4 4E75            	   653: 	rts
                            	   654: 
                            	   655: ;------------------------------------------------------------------------------
                            	   656: ; Set cursor position to top left of screen.
                            	   657: ;
                            	   658: ; Parameters:
                            	   659: ;		<none>
                            	   660: ; Returns:
                            	   661: ;		<none>
                            	   662: ; Registers Affected:
                            	   663: ;		<none>
                            	   664: ;------------------------------------------------------------------------------
                            	   665: 
                            	   666: HomeCursor:
00:000014D6 42B900040B28    	   667: 	clr.l textvid_dcb+DCB_OUTPOSX
00:000014DC 42B900040B2C    	   668: 	clr.l textvid_dcb+DCB_OUTPOSY
00:000014E2 42B900040B30    	   669: 	clr.l textvid_dcb+DCB_OUTPOSZ
                            	   670: 	; fall through
                            	   671: 
                            	   672: ;------------------------------------------------------------------------------
                            	   673: ; SyncCursor:
                            	   674: ;
                            	   675: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   676: ; the core with the IO focus.
                            	   677: ;
                            	   678: ; Parameters:
                            	   679: ;		<none>
                            	   680: ; Returns:
                            	   681: ;		<none>
                            	   682: ; Registers Affected:
                            	   683: ;		<none>
                            	   684: ;------------------------------------------------------------------------------
                            	   685: 
                            	   686: SyncCursor:
00:000014E8 23FCFFFFFFFDFD0F	   687: 	move.l #$FFFFFFFD,leds
00:000014F0 FF00
00:000014F2 48E7E000        	   688: 	movem.l	d0/d1/d2,-(a7)
00:000014F6 4E7A0FE0        	   689: 	movec	coreno,d0
00:000014FA B03900100000    	   690: 	cmp.b	IOFocus,d0
00:00001500 6622            	   691: 	bne.s .0001
00:00001502 203900040B28    	   692: 	move.l textvid_dcb+DCB_OUTPOSX,d0
00:00001508 223900040B2C    	   693: 	move.l textvid_dcb+DCB_OUTPOSY,d1
00:0000150E 243900040B5C    	   694: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:00001514 C4C1            	   695: 	mulu d1,d2
00:00001516 D480            	   696: 	add.l d0,d2
00:00001518 E15A            	   697: 	rol.w	#8,d2					; swap byte order
00:0000151A 4842            	   698: 	swap d2
00:0000151C E15A            	   699: 	rol.w #8,d2
00:0000151E 23C2FD080024    	   700: 	move.l d2,TEXTREG+$24
                            	   701: .0001:	
00:00001524 4CDF0007        	   702: 	movem.l	(a7)+,d0/d1/d2
00:00001528 4E75            	   703: 	rts
                            	   704: 
                            	   705: 

Source: "boot.x68"
                            	   602: 	include "err.x68"

Source: "err.x68"
                            	     1: ;------------------------------------------------------------------------------
                            	     2: ;------------------------------------------------------------------------------
                            	     3: ; Setup the err device
                            	     4: ;------------------------------------------------------------------------------
                            	     5: ;------------------------------------------------------------------------------
                            	     6: 
                            	     7: setup_err:
                            	     8: err_init:
00:0000152A 7020            	     9: 	moveq #32,d0
00:0000152C 41F900040B8C    	    10: 	lea.l err_dcb,a0
                            	    11: .0001:
00:00001532 4298            	    12: 	clr.l (a0)+
00:00001534 51C8FFFC        	    13: 	dbra d0,.0001
00:00001538 23FC204243440004	    14: 	move.l #$20424344,err_dcb+DCB_MAGIC				; 'DCB'
00:00001540 0B8C
00:00001542 23FC4C4C554E0004	    15: 	move.l #$4C4C554E,err_dcb+DCB_NAME					; 'err'
00:0000154A 0B90
00:0000154C 23FC000015580004	    16: 	move.l #err_cmdproc,err_dcb+DCB_CMDPROC
00:00001554 0BA4
                            	    17: err_ret:
00:00001556 4E75            	    18: 	rts
                            	    19: 
                            	    20: err_cmdproc:
00:00001558 7000            	    21: 	moveq #E_Ok,d0
00:0000155A 4E75            	    22: 	rts
                            	    23: 
                            	    24: 

Source: "boot.x68"
                            	   603: 	include "serial.x68"

Source: "serial.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;==============================================================================
                            	    38: ; Serial I/O routines
                            	    39: ;==============================================================================
                            	    40: 
                            	    41: 	code
                            	    42: 	align 2
                            	    43: COM_CMDTBL:
00:0000155C 0000158C        	    44: 	dc.l serial_init
00:00001560 00001612        	    45: 	dc.l serial_stat
00:00001564 00001616        	    46: 	dc.l serial_putchar
00:00001568 00001644        	    47: 	dc.l serial_putbuf
00:0000156C 0000161E        	    48: 	dc.l serial_getchar
00:00001570 00001644        	    49: 	dc.l serial_getbuf
00:00001574 00001644        	    50: 	dc.l serial_set_inpos
00:00001578 00001644        	    51: 	dc.l serial_set_outpos
00:0000157C 00001624        	    52: 	dc.l serial_getchar_direct
00:00001580 0000162C        	    53: 	dc.l serial_peek_char
00:00001584 00001634        	    54: 	dc.l serial_peek_char_direct
00:00001588 0000163C        	    55: 	dc.l serial_putchar_direct
                            	    56: 
                            	    57: ;------------------------------------------------------------------------------
                            	    58: ; Setup the console device
                            	    59: ; stdout = text screen controller
                            	    60: ;------------------------------------------------------------------------------
                            	    61: 	even
                            	    62: 
                            	    63: serial_init:
                            	    64: setup_serial:
00:0000158C 48E780C0        	    65: 	movem.l d0/a0/a1,-(a7)
00:00001590 701F            	    66: 	moveq #31,d0
00:00001592 41F900040C94    	    67: 	lea.l serial_dcb,a0
                            	    68: .0001:
00:00001598 4298            	    69: 	clr.l (a0)+
00:0000159A 51C8FFFC        	    70: 	dbra d0,.0001
00:0000159E 23FC444342200004	    71: 	move.l #$44434220,serial_dcb+DCB_MAGIC			; 'DCB'
00:000015A6 0C94
00:000015A8 23FC434F4D000004	    72: 	move.l #$434F4D00,serial_dcb+DCB_NAME				; 'COM'
00:000015B0 0C98
00:000015B2 23FC000015F00004	    73: 	move.l #serial_cmdproc,serial_dcb+DCB_CMDPROC
00:000015BA 0CAC
00:000015BC 23FC001010000004	    74: 	move.l #SerRcvBuf,serial_dcb+DCB_INBUFPTR
00:000015C4 0CCC
00:000015C6 23FC001020000004	    75: 	move.l #SerXmitBuf,serial_dcb+DCB_OUTBUFPTR
00:000015CE 0CD0
00:000015D0 23FC000010000004	    76: 	move.l #4096,serial_dcb+DCB_INBUFSIZE
00:000015D8 0CD4
00:000015DA 616C            	    77: 	bsr SerialInit
00:000015DC 43F900040C94    	    78: 	lea.l serial_dcb,a1
00:000015E2 61006528        	    79: 	jsr DisplayString
00:000015E6 6100650A        	    80: 	jsr CRLF
00:000015EA 4CDF0301        	    81: 	movem.l (a7)+,d0/a0/a1
00:000015EE 4E75            	    82: 	rts
                            	    83: 
                            	    84: serial_cmdproc:
00:000015F0 0C06000C        	    85: 	cmpi.b #12,d6
00:000015F4 6418            	    86: 	bhs.s .0001
00:000015F6 48E70280        	    87: 	movem.l d6/a0,-(a7)
00:000015FA 4886            	    88: 	ext.w d6
00:000015FC E54E            	    89: 	lsl.w #2,d6
00:000015FE 41FAFF5C        	    90: 	lea COM_CMDTBL,a0
00:00001602 20706000        	    91: 	move.l (a0,d6.w),a0
00:00001606 4E90            	    92: 	jsr (a0)
00:00001608 4CDF0140        	    93: 	movem.l (a7)+,d6/a0
00:0000160C 4E75            	    94: 	rts
                            	    95: .0001:
00:0000160E 7002            	    96: 	moveq #E_Func,d0
00:00001610 4E75            	    97: 	rts
                            	    98: 
                            	    99: serial_stat:
00:00001612 7000            	   100: 	moveq #E_Ok,d0
00:00001614 4E75            	   101: 	rts
                            	   102: 
                            	   103: serial_putchar:
00:00001616 6100013C        	   104: 	bsr SerialPutChar
00:0000161A 7000            	   105: 	moveq #E_Ok,d0
00:0000161C 4E75            	   106: 	rts
                            	   107: 
                            	   108: serial_getchar:
00:0000161E 6166            	   109: 	bsr SerialGetChar
00:00001620 7000            	   110: 	moveq #E_Ok,d0
00:00001622 4E75            	   111: 	rts
                            	   112: 
                            	   113: serial_getchar_direct:
00:00001624 61000114        	   114: 	bsr SerialPeekCharDirect
00:00001628 7000            	   115: 	moveq #E_Ok,d0
00:0000162A 4E75            	   116: 	rts
                            	   117: 
                            	   118: serial_peek_char:
00:0000162C 610000D0        	   119: 	bsr SerialPeekChar
00:00001630 7000            	   120: 	moveq #E_Ok,d0
00:00001632 4E75            	   121: 	rts
                            	   122: 
                            	   123: serial_peek_char_direct:
00:00001634 61000104        	   124: 	bsr SerialPeekCharDirect
00:00001638 7000            	   125: 	moveq #E_Ok,d0
00:0000163A 4E75            	   126: 	rts
                            	   127: 
                            	   128: serial_putchar_direct:
00:0000163C 6100017A        	   129: 	bsr SerialPutCharDirect
00:00001640 7000            	   130: 	moveq #E_Ok,d0
00:00001642 4E75            	   131: 	rts
                            	   132: 
                            	   133: serial_putbuf:
                            	   134: serial_getbuf:
                            	   135: serial_set_inpos:
                            	   136: serial_set_outpos:
00:00001644 700A            	   137: 	moveq #E_NotSupported,d0
00:00001646 4E75            	   138: 	rts
                            	   139: 
                            	   140: ;------------------------------------------------------------------------------
                            	   141: ; Initialize the serial port an enhanced 6551 circuit.
                            	   142: ;
                            	   143: ; Select internal baud rate clock divider for 9600 baud
                            	   144: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	   145: ; Note that the byte order is swapped.
                            	   146: ;------------------------------------------------------------------------------
                            	   147: 
                            	   148: SerialInit:
00:00001648 427900100162    	   149: 	clr.w		SerHeadRcv					; clear receive buffer indexes
00:0000164E 427900100160    	   150: 	clr.w		SerTailRcv
00:00001654 427900100168    	   151: 	clr.w		SerHeadXmit					; clear transmit buffer indexes
00:0000165A 427900100166    	   152: 	clr.w		SerTailXmit
00:00001660 423900100164    	   153: 	clr.b		SerRcvXon						; and Xon,Xoff flags
00:00001666 423900100165    	   154: 	clr.b		SerRcvXoff
00:0000166C 203C09000000    	   155: 	move.l	#$09000000,d0				; dtr,rts active, rxint enabled, no parity
00:00001672 23C0FD060008    	   156: 	move.l	d0,ACIA+ACIA_CMD
                            	   157: ;	move.l	#$1E00F700,d0				; fifos enabled
00:00001678 203C1E000000    	   158: 	move.l	#$1E000000,d0				; fifos disabled
00:0000167E 23C0FD06000C    	   159: 	move.l	d0,ACIA+ACIA_CTRL
00:00001684 4E75            	   160: 	rts
                            	   161: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	   162: ;	move.l	d0,ACIA+ACIA_CMD
                            	   163: ;	move.l	#300000,d2					; wait 100 ms
                            	   164: ;	bra			.0001
                            	   165: ;.0003:
                            	   166: ;	swap		d2
                            	   167: ;.0001:
                            	   168: ;	nop
                            	   169: ;	dbra		d2,.0001
                            	   170: ;.0002:
                            	   171: ;	swap		d2
                            	   172: ;	dbra		d2,.0003
                            	   173: ;	move.l	#$07000000,d0				; clear break
                            	   174: ;	move.l	d0,ACIA+ACIA_CMD
                            	   175: ;	rts
                            	   176: 	
                            	   177: ;------------------------------------------------------------------------------
                            	   178: ; SerialGetChar
                            	   179: ;
                            	   180: ; Check the serial port buffer to see if there's a char available. If there's
                            	   181: ; a char available then return it. If the buffer is almost empty then send an
                            	   182: ; XON.
                            	   183: ;
                            	   184: ; Stack Space:
                            	   185: ;		2 long words
                            	   186: ; Parameters:
                            	   187: ;		none
                            	   188: ; Modifies:
                            	   189: ;		d0,a0
                            	   190: ; Returns:
                            	   191: ;		d1 = character or -1
                            	   192: ;------------------------------------------------------------------------------
                            	   193: 
                            	   194: SerialGetChar:
00:00001686 2F02            	   195: 	move.l		d2,-(a7)
00:00001688 4E7A0FE0        	   196: 	movec			coreno,d0
00:0000168C 4840            	   197: 	swap			d0
00:0000168E 7202            	   198: 	moveq			#SERIAL_SEMA,d1
00:00001690 61000F0E        	   199: 	bsr				LockSemaphore
00:00001694 61000146        	   200: 	bsr				SerialRcvCount			; check number of chars in receive buffer
00:00001698 0C400008        	   201: 	cmpi.w		#8,d0								; less than 8?
00:0000169C 621C            	   202: 	bhi				.sgc2
00:0000169E 4A3900100164    	   203: 	tst.b			SerRcvXon						; skip sending XON if already sent
00:000016A4 6614            	   204: 	bne	  		.sgc2            		; XON already sent?
00:000016A6 123C0011        	   205: 	move.b		#XON,d1							; if <8 send an XON
00:000016AA 423900100165    	   206: 	clr.b			SerRcvXoff					; clear XOFF status
00:000016B0 13C100100164    	   207: 	move.b		d1,SerRcvXon				; flag so we don't send it multiple times
00:000016B6 6100009C        	   208: 	bsr				SerialPutChar				; send it
                            	   209: .sgc2:
00:000016BA 323900100162    	   210: 	move.w		SerHeadRcv,d1				; check if anything is in buffer
00:000016C0 B27900100160    	   211: 	cmp.w			SerTailRcv,d1
00:000016C6 6720            	   212: 	beq				.NoChars						; no?
00:000016C8 41F900101000    	   213: 	lea				SerRcvBuf,a0
00:000016CE 12301000        	   214: 	move.b		(a0,d1.w),d1				; get byte from buffer
00:000016D2 527900100162    	   215: 	addi.w		#1,SerHeadRcv
00:000016D8 02790FFF00100162	   216: 	andi.w		#$FFF,SerHeadRcv		; 4k wrap around
00:000016E0 0281000000FF    	   217: 	andi.l		#$FF,d1
00:000016E6 6002            	   218: 	bra				.Xit
                            	   219: .NoChars:
00:000016E8 72FF            	   220: 	moveq			#-1,d1
                            	   221: .Xit:
00:000016EA C342            	   222: 	exg				d1,d2
00:000016EC 4E7A0FE0        	   223: 	movec			coreno,d0
00:000016F0 4840            	   224: 	swap			d0
00:000016F2 7202            	   225: 	moveq			#SERIAL_SEMA,d1
00:000016F4 61000EE6        	   226: 	bsr				UnlockSemaphore
00:000016F8 C541            	   227: 	exg				d2,d1
00:000016FA 241F            	   228: 	move.l		(a7)+,d2
00:000016FC 4E75            	   229: 	rts
                            	   230: 
                            	   231: ;------------------------------------------------------------------------------
                            	   232: ; SerialPeekChar
                            	   233: ;
                            	   234: ; Check the serial port buffer to see if there's a char available. If there's
                            	   235: ; a char available then return it. But don't update the buffer indexes. No need
                            	   236: ; to send an XON here.
                            	   237: ;
                            	   238: ; Stack Space:
                            	   239: ;		1 long word
                            	   240: ; Parameters:
                            	   241: ;		none
                            	   242: ; Modifies:
                            	   243: ;		d0,a0
                            	   244: ; Returns:
                            	   245: ;		d1 = character or -1
                            	   246: ;------------------------------------------------------------------------------
                            	   247: 
                            	   248: SerialPeekChar:
00:000016FE 2F02            	   249: 	move.l d2,-(a7)
00:00001700 4E7A0FE0        	   250: 	movec	coreno,d0
00:00001704 4840            	   251: 	swap d0
00:00001706 7202            	   252: 	moveq	#SERIAL_SEMA,d1
00:00001708 61000E96        	   253: 	bsr	LockSemaphore
00:0000170C 343900100162    	   254: 	move.w SerHeadRcv,d2		; check if anything is in buffer
00:00001712 B47900100160    	   255: 	cmp.w	SerTailRcv,d2
00:00001718 670C            	   256: 	beq	.NoChars				; no?
00:0000171A 41F900101000    	   257: 	lea	SerRcvBuf,a0
00:00001720 14302000        	   258: 	move.b (a0,d2.w),d2		; get byte from buffer
00:00001724 6002            	   259: 	bra	.Xit
                            	   260: .NoChars:
00:00001726 74FF            	   261: 	moveq	#-1,d2
                            	   262: .Xit:
00:00001728 4E7A0FE0        	   263: 	movec	coreno,d0
00:0000172C 4840            	   264: 	swap d0
00:0000172E 7202            	   265: 	moveq	#SERIAL_SEMA,d1
00:00001730 61000EAA        	   266: 	bsr	UnlockSemaphore
00:00001734 2202            	   267: 	move.l	d2,d1
00:00001736 241F            	   268: 	move.l (a7)+,d2
00:00001738 4E75            	   269: 	rts
                            	   270: 
                            	   271: ;------------------------------------------------------------------------------
                            	   272: ; SerialPeekChar
                            	   273: ;		Get a character directly from the I/O port. This bypasses the input
                            	   274: ; buffer.
                            	   275: ;
                            	   276: ; Stack Space:
                            	   277: ;		0 words
                            	   278: ; Parameters:
                            	   279: ;		none
                            	   280: ; Modifies:
                            	   281: ;		d
                            	   282: ; Returns:
                            	   283: ;		d1 = character or -1
                            	   284: ;------------------------------------------------------------------------------
                            	   285: 
                            	   286: SerialPeekCharDirect:
00:0000173A 1239FD060004    	   287: 	move.b	ACIA+ACIA_STAT,d1	; get serial status
00:00001740 08010003        	   288: 	btst		#3,d1							; look for Rx not empty
00:00001744 670A            	   289: 	beq.s		.0001
00:00001746 7200            	   290: 	moveq.l	#0,d1							; clear upper bits of return value
00:00001748 1239FD060000    	   291: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
00:0000174E 4E75            	   292: 	rts												; return
                            	   293: .0001:
00:00001750 72FF            	   294: 	moveq		#-1,d1
00:00001752 4E75            	   295: 	rts
                            	   296: 
                            	   297: ;------------------------------------------------------------------------------
                            	   298: ; SerialPutChar
                            	   299: ;		If there is a transmit buffer, adds the character to the transmit buffer
                            	   300: ; if it can, otherwise will wait for a byte to be freed up in the transmit
                            	   301: ; buffer (blocks).
                            	   302: ;		If there is no transmit buffer, put a character to the directly to the
                            	   303: ; serial transmitter. This routine blocks until the transmitter is empty. 
                            	   304: ;
                            	   305: ; Stack Space
                            	   306: ;		4 long words
                            	   307: ; Parameters:
                            	   308: ;		d1.b = character to put
                            	   309: ; Modifies:
                            	   310: ;		none
                            	   311: ;------------------------------------------------------------------------------
                            	   312: 
                            	   313: SerialPutChar:
                            	   314: .0004:
00:00001754 4A7900040CD8    	   315: 	tst.w serial_dcb+DCB_OUTBUFSIZE	; buffered output?
00:0000175A 675C            	   316: 	beq.s SerialPutCharDirect
00:0000175C 48E7E080        	   317: 	movem.l d0/d1/d2/a0,-(a7)
00:00001760 4E7A0FE0        	   318: 	movec	coreno,d0
00:00001764 4840            	   319: 	swap d0
00:00001766 7202            	   320: 	moveq	#SERIAL_SEMA,d1
00:00001768 61000E36        	   321: 	bsr	LockSemaphore
00:0000176C 303900100166    	   322: 	move.w SerTailXmit,d0
00:00001772 3400            	   323: 	move.w d0,d2
00:00001774 5240            	   324: 	addi.w #1,d0
00:00001776 B07900040CD8    	   325: 	cmp.w serial_dcb+DCB_OUTBUFSIZE,d0
00:0000177C 6502            	   326: 	blo.s .0002
00:0000177E 4240            	   327: 	clr.w d0
                            	   328: .0002:
00:00001780 B07900100168    	   329: 	cmp.w SerHeadXmit,d0			; Is Xmit buffer full?
00:00001786 660E            	   330: 	bne.s .0003
00:00001788 4E7A0FE0        	   331: 	movec	coreno,d0						; buffer full, unlock semaphore and wait
00:0000178C 4840            	   332: 	swap d0
00:0000178E 7202            	   333: 	moveq	#SERIAL_SEMA,d1
00:00001790 61000E4A        	   334: 	bsr	UnlockSemaphore
00:00001794 60BE            	   335: 	bra.s .0004
                            	   336: .0003:
00:00001796 33C000100166    	   337: 	move.w d0,SerTailXmit			; update tail pointer
00:0000179C 41F900102000    	   338: 	lea SerXmitBuf,a0
00:000017A2 11812000        	   339: 	move.b d1,(a0,d2.w)				; store byte in Xmit buffer
00:000017A6 4E7A0FE0        	   340: 	movec	coreno,d0						; unlock semaphore
00:000017AA 4840            	   341: 	swap d0
00:000017AC 7202            	   342: 	moveq	#SERIAL_SEMA,d1
00:000017AE 61000E2C        	   343: 	bsr	UnlockSemaphore
00:000017B2 4CDF0107        	   344: 	movem.l (a7)+,d0/d1/d2/a0
00:000017B6 4E75            	   345: 	rts
                            	   346: 
                            	   347: SerialPutCharDirect:
00:000017B8 48E7C000        	   348: 	movem.l	d0/d1,-(a7)							; push d0,d1
                            	   349: .0001:
00:000017BC 1039FD060004    	   350: 	move.b ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
00:000017C2 08000004        	   351: 	btst #4,d0								; bit #4 of the status reg
00:000017C6 67F4            	   352: 	beq.s	.0001			    			; branch if transmitter is not empty
00:000017C8 13C1FD060000    	   353: 	move.b d1,ACIA+ACIA_TX		; send the byte
00:000017CE 4CDF0003        	   354: 	movem.l	(a7)+,d0/d1				; pop d0,d1
00:000017D2 4E75            	   355: 	rts
                            	   356: 	
                            	   357: ;------------------------------------------------------------------------------
                            	   358: ; Reverse the order of bytes in d1.
                            	   359: ;------------------------------------------------------------------------------
                            	   360: 
                            	   361: SerialRbo:
00:000017D4 E159            	   362: 	rol.w		#8,d1
00:000017D6 4841            	   363: 	swap		d1
00:000017D8 E159            	   364: 	rol.w		#8,d1
00:000017DA 4E75            	   365: 	rts
                            	   366: 
                            	   367: ;------------------------------------------------------------------------------
                            	   368: ; Calculate number of character in input buffer
                            	   369: ;
                            	   370: ; Returns:
                            	   371: ;		d0 = number of bytes in buffer.
                            	   372: ;------------------------------------------------------------------------------
                            	   373: 
                            	   374: SerialRcvCount:
00:000017DC 303900100160    	   375: 	move.w	SerTailRcv,d0
00:000017E2 907900100162    	   376: 	sub.w		SerHeadRcv,d0
00:000017E8 6C10            	   377: 	bge			.0001
00:000017EA 303C1000        	   378: 	move.w	#$1000,d0
00:000017EE 907900100162    	   379: 	sub.w		SerHeadRcv,d0
00:000017F4 D07900100160    	   380: 	add.w		SerTailRcv,d0
                            	   381: .0001:
00:000017FA 4E75            	   382: 	rts
                            	   383: 
                            	   384: ;------------------------------------------------------------------------------
                            	   385: ; Serial IRQ routine
                            	   386: ;
                            	   387: ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                            	   388: ; Received characters are buffered. If the buffer becomes full, new characters
                            	   389: ; will be lost.
                            	   390: ;
                            	   391: ; Parameters:
                            	   392: ;		none
                            	   393: ; Modifies:
                            	   394: ;		none
                            	   395: ; Returns:
                            	   396: ;		d1 = -1 if IRQ handled, otherwise zero
                            	   397: ;------------------------------------------------------------------------------
                            	   398: 
                            	   399: SerialIRQ:
00:000017FC 46FC2300        	   400: 	move.w	#$2300,sr						; disable lower level IRQs
00:00001800 48E7E080        	   401: 	movem.l	d0/d1/d2/a0,-(a7)
00:00001804 4E7A0FE0        	   402: 	movec	coreno,d0
00:00001808 4840            	   403: 	swap d0
00:0000180A 7202            	   404: 	moveq	#SERIAL_SEMA,d1
00:0000180C 61000D92        	   405: 	bsr	LockSemaphore
                            	   406: sirqNxtByte:
00:00001810 1239FD060004    	   407: 	move.b ACIA+ACIA_STAT,d1		; check the status
00:00001816 08010003        	   408: 	btst #3,d1									; bit 3 = rx full
00:0000181A 6756            	   409: 	beq	notRxInt
00:0000181C 1239FD060000    	   410: 	move.b ACIA+ACIA_RX,d1
                            	   411: sirq0001:
00:00001822 303900100160    	   412: 	move.w SerTailRcv,d0				; check if recieve buffer full
00:00001828 5240            	   413: 	addi.w #1,d0
00:0000182A 02400FFF        	   414: 	andi.w #$FFF,d0
00:0000182E B07900100162    	   415: 	cmp.w	SerHeadRcv,d0
00:00001834 673C            	   416: 	beq	sirqRxFull
00:00001836 33C000100160    	   417: 	move.w d0,SerTailRcv				; update tail pointer
00:0000183C 5340            	   418: 	subi.w #1,d0								; backup
00:0000183E 02400FFF        	   419: 	andi.w #$FFF,d0
00:00001842 41F900101000    	   420: 	lea	SerRcvBuf,a0						; a0 = buffer address
00:00001848 11810000        	   421: 	move.b d1,(a0,d0.w)					; store recieved byte in buffer
00:0000184C 4A3900100165    	   422: 	tst.b	SerRcvXoff						; check if xoff already sent
00:00001852 66BC            	   423: 	bne	sirqNxtByte
00:00001854 6186            	   424: 	bsr	SerialRcvCount					; if more than 4080 chars in buffer
00:00001856 0C400FF0        	   425: 	cmpi.w #4080,d0
00:0000185A 65B4            	   426: 	blo	sirqNxtByte
00:0000185C 123C0013        	   427: 	move.b #XOFF,d1							; send an XOFF
00:00001860 423900100164    	   428: 	clr.b	SerRcvXon							; clear XON status
00:00001866 13C100100165    	   429: 	move.b d1,SerRcvXoff				; set XOFF status
00:0000186C 6100FEE6        	   430: 	bsr	SerialPutChar						; send XOFF
00:00001870 609E            	   431: 	bra	sirqNxtByte     				; check the status for another byte
                            	   432: sirqRxFull:
                            	   433: notRxInt:
00:00001872 08010004        	   434: 	btst #4,d1									; TX empty?
00:00001876 6748            	   435: 	beq.s notTxInt
00:00001878 4A390010016A    	   436: 	tst.b SerXmitXoff						; and allowed to send?
00:0000187E 6640            	   437: 	bne.s sirqXmitOff
00:00001880 4AB900040CD8    	   438: 	tst.l serial_dcb+DCB_OUTBUFSIZE	; Is there a buffer being transmitted?
00:00001886 6738            	   439: 	beq.s notTxInt
00:00001888 303900100168    	   440: 	move.w SerHeadXmit,d0
00:0000188E B07900100166    	   441: 	cmp.w SerTailXmit,d0
00:00001894 672A            	   442: 	beq.s sirqTxEmpty
00:00001896 41F900102000    	   443: 	lea SerXmitBuf,a0
00:0000189C 12300000        	   444: 	move.b (a0,d0.w),d1
00:000018A0 13C1FD060000    	   445: 	move.b d1,ACIA+ACIA_TX			; transmit character
00:000018A6 527900100168    	   446: 	addi.w #1,SerHeadXmit				; advance head index
00:000018AC 303900040CD8    	   447: 	move.w serial_dcb+DCB_OUTBUFSIZE,d0
00:000018B2 B07900100168    	   448: 	cmp.w SerHeadXmit,d0
00:000018B8 6206            	   449: 	bhi.s sirq0002
00:000018BA 427900100168    	   450: 	clr.w SerHeadXmit						; wrap around
                            	   451: sirq0002:
                            	   452: sirqXmitOff:
                            	   453: sirqTxEmpty:
                            	   454: notTxInt:
00:000018C0 4E7A0FE0        	   455: 	movec	coreno,d0
00:000018C4 4840            	   456: 	swap d0
00:000018C6 7202            	   457: 	moveq	#SERIAL_SEMA,d1
00:000018C8 61000D12        	   458: 	bsr	UnlockSemaphore
00:000018CC 4CDF0107        	   459: 	movem.l	(a7)+,d0/d1/d2/a0
00:000018D0 4E73            	   460: 	rte
                            	   461: 
                            	   462: nmeSerial:
00:000018D2 53657269616C    	   463: 	dc.b		"Serial",0
00:000018D8 00
                            	   464: 
                            	   465: 

Source: "boot.x68"
                            	   604: 	include "framebuf.x68"

Source: "framebuf.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: FRAMEBUF_CTRL equ 0
                            	    38: FRAMEBUF_PAGE1_ADDR equ 2*8
                            	    39: FRAMEBUF_PAGE2_ADDR equ 3*8
                            	    40: FRAMEBUF_BMPSIZE_X equ 13*8
                            	    41: FRAMEBUF_BMPSIZE_Y equ 13*8+4
                            	    42: FRAMEBUF_WINDOW_DIMEN	equ	15*8
                            	    43: FRAMEBUF_COLOR_COMP	equ 19*8
                            	    44: FRAMEBUF_PRGB equ 20*8
                            	    45: FRAMEBUF_COLOR equ 21*8
                            	    46: FRAMEBUF_PPS equ 22*8
                            	    47: 
                            	    48: ;------------------------------------------------------------------------------
                            	    49: ;------------------------------------------------------------------------------
                            	    50: ; Video frame buffer
                            	    51: ;------------------------------------------------------------------------------
                            	    52: ;------------------------------------------------------------------------------
                            	    53: 	code
                            	    54: 	even
                            	    55: 	align 2
                            	    56: FRAMEBUF_CMDTBL:
00:000018DC 000019FE        	    57: 	dc.l framebuf_init				; 0
00:000018E0 00001AA8        	    58: 	dc.l framebuf_stat
00:000018E4 00001AA8        	    59: 	dc.l framebuf_putchar
00:000018E8 00001B64        	    60: 	dc.l framebuf_putbuf
00:000018EC 00001AA8        	    61: 	dc.l framebuf_getchar
00:000018F0 00001B64        	    62: 	dc.l framebuf_getbuf
00:000018F4 00001AAA        	    63: 	dc.l framebuf_set_inpos
00:000018F8 00001AB8        	    64: 	dc.l framebuf_set_outpos
00:000018FC 00001B64        	    65: 	dc.l framebuf_stub
00:00001900 00001B64        	    66: 	dc.l framebuf_stub
00:00001904 00001B64        	    67: 	dc.l framebuf_stub				; 10
00:00001908 00001B64        	    68: 	dc.l framebuf_stub
00:0000190C 00001D64        	    69: 	dc.l framebuf_clear
00:00001910 00001AF2        	    70: 	dc.l framebuf_swapbuf
00:00001914 00001AD6        	    71: 	dc.l framebuf_setbuf1
00:00001918 00001AE4        	    72: 	dc.l framebuf_setbuf2
00:0000191C 00001AC6        	    73: 	dc.l framebuf_getbuf1
00:00001920 00001ACE        	    74: 	dc.l framebuf_getbuf2
00:00001924 00001C36        	    75: 	dc.l framebuf_writeat
00:00001928 00001B5A        	    76: 	dc.l framebuf_set_unit
00:0000192C 00001B8A        	    77: 	dc.l framebuf_get_dimen	; 20
00:00001930 00001B7A        	    78: 	dc.l framebuf_get_color
00:00001934 00001B64        	    79: 	dc.l framebuf_stub
00:00001938 00001B64        	    80: 	dc.l framebuf_stub
00:0000193C 00001B64        	    81: 	dc.l framebuf_stub
00:00001940 00001B64        	    82: 	dc.l framebuf_stub
00:00001944 00001B64        	    83: 	dc.l framebuf_stub
00:00001948 00001B64        	    84: 	dc.l framebuf_stub
00:0000194C 00001B64        	    85: 	dc.l framebuf_stub
00:00001950 00001B64        	    86: 	dc.l framebuf_stub
00:00001954 00001B64        	    87: 	dc.l framebuf_stub			; 30
00:00001958 00001B64        	    88: 	dc.l framebuf_stub
00:0000195C 00001BBA        	    89: 	dc.l framebuf_set_dimen
00:00001960 00001B68        	    90: 	dc.l framebuf_set_color_depth
00:00001964 00001AA8        	    91: 	dc.l framebuf_set_destbuf
00:00001968 00001B50        	    92: 	dc.l framebuf_set_dispbuf
                            	    93: 
                            	    94: 	code
                            	    95: 	even
                            	    96: framebuf_cmdproc:
00:0000196C 0C060024        	    97: 	cmpi.b #36,d6
00:00001970 641A            	    98: 	bhs.s .0001
00:00001972 48E70280        	    99: 	movem.l d6/a0,-(a7)
00:00001976 4886            	   100: 	ext.w d6
00:00001978 48C6            	   101: 	ext.l d6
00:0000197A E54E            	   102: 	lsl.w #2,d6
00:0000197C 41FAFF5E        	   103: 	lea.l FRAMEBUF_CMDTBL,a0
00:00001980 20706000        	   104: 	move.l (a0,d6.w),a0
00:00001984 4E90            	   105: 	jsr (a0)
00:00001986 4CDF0140        	   106: 	movem.l (a7)+,d6/a0
00:0000198A 4E75            	   107: 	rts
                            	   108: .0001:
00:0000198C 7002            	   109: 	moveq #E_Func,d0
00:0000198E 4E75            	   110: 	rts
                            	   111: 
                            	   112: setup_framebuf:
00:00001990 48E780C0        	   113: 	movem.l d0/a0/a1,-(a7)
00:00001994 7020            	   114: 	moveq #32,d0
00:00001996 41F900040D18    	   115: 	lea.l framebuf_dcb,a0
                            	   116: .0001:
00:0000199C 4298            	   117: 	clr.l (a0)+
00:0000199E 51C8FFFC        	   118: 	dbra d0,.0001
00:000019A2 23FC444342200004	   119: 	move.l #$44434220,framebuf_dcb+DCB_MAGIC			; 'DCB '
00:000019AA 0D18
00:000019AC 23FC4652414D0004	   120: 	move.l #$4652414D,framebuf_dcb+DCB_NAME				; 'FRAMEBUF'
00:000019B4 0D1C
00:000019B6 23FC425546000004	   121: 	move.l #$42554600,framebuf_dcb+DCB_NAME+4
00:000019BE 0D20
00:000019C0 23FC0000196C0004	   122: 	move.l #framebuf_cmdproc,framebuf_dcb+DCB_CMDPROC
00:000019C8 0D30
00:000019CA 7000            	   123: 	move.l #$00000000,d0
00:000019CC 23C000040D50    	   124: 	move.l d0,framebuf_dcb+DCB_INBUFPTR
00:000019D2 23C000040D54    	   125: 	move.l d0,framebuf_dcb+DCB_OUTBUFPTR
00:000019D8 23FC004000000004	   126: 	move.l #$00400000,framebuf_dcb+DCB_INBUFSIZE
00:000019E0 0D58
00:000019E2 23FC004000000004	   127: 	move.l #$00400000,framebuf_dcb+DCB_OUTBUFSIZE
00:000019EA 0D5C
00:000019EC 43F900040D18    	   128: 	lea.l framebuf_dcb+DCB_MAGIC,a1
00:000019F2 61006118        	   129: 	jsr DisplayString
00:000019F6 610060FA        	   130: 	jsr CRLF
00:000019FA 4CDF0301        	   131: 	movem.l (a7)+,d0/a0/a1
                            	   132: 	; fall through
                            	   133: 
                            	   134: framebuf_init:
00:000019FE 13FC0001FD200000	   135: 	move.b #1,FRAMEBUF+0		; turn on frame buffer
00:00001A06 23FC88880000FD20	   136: 	move.l #$88880000,FRAMEBUF+FRAMEBUF_COLOR_COMP	; 8-8-8-8 color
00:00001A0E 0098
00:00001A10 13FC0011FD200002	   137: 	move.b #$11,FRAMEBUF+2	; hres 1:1 vres 1:1
00:00001A18 23FC6300000FFD20	   138: 	move.l #$6300000F,FRAMEBUF+4		; burst length, burst interval
00:00001A20 0004
00:00001A22 23FCFFFFFF000004	   139: 	move.l #$ffffff00,framebuf_dcb+DCB_FGCOLOR	; white
00:00001A2A 0D7C
00:00001A2C 23FC0F0000000004	   140: 	move.l #$0f000000,framebuf_dcb+DCB_BKCOLOR	; medium blue
00:00001A34 0D78
00:00001A36 42B900040D38    	   141: 	clr.l framebuf_dcb+DCB_OUTPOSX
00:00001A3C 42B900040D3C    	   142: 	clr.l framebuf_dcb+DCB_OUTPOSY
00:00001A42 42B900040D44    	   143: 	clr.l framebuf_dcb+DCB_INPOSX
00:00001A48 42B900040D48    	   144: 	clr.l framebuf_dcb+DCB_INPOSY
00:00001A4E 13FC000100040D80	   145: 	move.b #1,framebuf_dcb+DCB_OPCODE	; raster op = copy
00:00001A56 33FC032000040D6C	   146: 	move.w #800,framebuf_dcb+DCB_OUTDIMX		; set rows and columns
00:00001A5E 33FC025800040D70	   147: 	move.w #600,framebuf_dcb+DCB_OUTDIMY
00:00001A66 33FC032000040D60	   148: 	move.w #800,framebuf_dcb+DCB_INDIMX			; set rows and columns
00:00001A6E 33FC025800040D64	   149: 	move.w #600,framebuf_dcb+DCB_INDIMY
00:00001A76 42B900040D50    	   150: 	move.l #$00000000,framebuf_dcb+DCB_INBUFPTR
00:00001A7C 23FC004000000004	   151: 	move.l #$00400000,framebuf_dcb+DCB_INBUFPTR2
00:00001A84 0D88
00:00001A86 42B900040D54    	   152: 	move.l #$00000000,framebuf_dcb+DCB_OUTBUFPTR
00:00001A8C 23FC004000000004	   153: 	move.l #$00400000,framebuf_dcb+DCB_OUTBUFPTR2
00:00001A94 0D8C
00:00001A96 42B9FD200010    	   154: 	move.l #$00000000,FRAMEBUF+FRAMEBUF_PAGE1_ADDR	; base addr 1
00:00001A9C 23FC00004000FD20	   155: 	move.l #$00004000,FRAMEBUF+FRAMEBUF_PAGE2_ADDR	; base addr 2
00:00001AA4 0018
00:00001AA6 4E75            	   156: 	rts
                            	   157: 
                            	   158: framebuf_stat:
                            	   159: framebuf_putchar:
                            	   160: framebuf_getchar:
                            	   161: framebuf_set_destbuf:
00:00001AA8 4E75            	   162: 	rts
                            	   163: 
                            	   164: framebuf_set_inpos:
00:00001AAA 23C100040D44    	   165: 	move.l d1,framebuf_dcb+DCB_INPOSX
00:00001AB0 23C200040D48    	   166: 	move.l d2,framebuf_dcb+DCB_INPOSY
00:00001AB6 4E75            	   167: 	rts
                            	   168: framebuf_set_outpos:
00:00001AB8 23C100040D38    	   169: 	move.l d1,framebuf_dcb+DCB_OUTPOSX
00:00001ABE 23C200040D3C    	   170: 	move.l d2,framebuf_dcb+DCB_OUTPOSY
00:00001AC4 4E75            	   171: 	rts
                            	   172: 
                            	   173: framebuf_getbuf1:
00:00001AC6 223900040D54    	   174: 	move.l framebuf_dcb+DCB_OUTBUFPTR,d1
00:00001ACC 4E75            	   175: 	rts
                            	   176: framebuf_getbuf2:
00:00001ACE 223900040D8C    	   177: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,d1
00:00001AD4 4E75            	   178: 	rts
                            	   179: framebuf_setbuf1:
00:00001AD6 23C100040D54    	   180: 	move.l d1,framebuf_dcb+DCB_OUTBUFPTR
00:00001ADC 23C200040D5C    	   181: 	move.l d2,framebuf_dcb+DCB_OUTBUFSIZE
00:00001AE2 4E75            	   182: 	rts
                            	   183: framebuf_setbuf2:
00:00001AE4 23C100040D8C    	   184: 	move.l d1,framebuf_dcb+DCB_OUTBUFPTR2
00:00001AEA 23C200040D94    	   185: 	move.l d2,framebuf_dcb+DCB_OUTBUFSIZE2
00:00001AF0 4E75            	   186: 	rts
                            	   187: 
                            	   188: framebuf_swapbuf:
00:00001AF2 48E76000        	   189: 	movem.l d1/d2,-(a7)
00:00001AF6 1239FD200003    	   190: 	move.b FRAMEBUF+3,d1
00:00001AFC 0A010001        	   191: 	eor.b #1,d1
00:00001B00 13C1FD200003    	   192: 	move.b d1,FRAMEBUF+3					; page flip
00:00001B06 243900040D54    	   193: 	move.l framebuf_dcb+DCB_OUTBUFPTR,d2
00:00001B0C 203900040D8C    	   194: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,d0
00:00001B12 23C200040D8C    	   195: 	move.l d2,framebuf_dcb+DCB_OUTBUFPTR2
00:00001B18 23C000040D54    	   196: 	move.l d0,framebuf_dcb+DCB_OUTBUFPTR
00:00001B1E 90BC40000000    	   197: 	sub.l #$40000000,d0
00:00001B24 2200            	   198: 	move.l d0,d1
00:00001B26 61007DAC        	   199: 	bsr rbo
00:00001B2A 23C1FD300010    	   200: 	move.l d1,GFXACCEL+16
00:00001B30 243900040D50    	   201: 	move.l framebuf_dcb+DCB_INBUFPTR,d2
00:00001B36 203900040D88    	   202: 	move.l framebuf_dcb+DCB_INBUFPTR2,d0
00:00001B3C 23C200040D88    	   203: 	move.l d2,framebuf_dcb+DCB_INBUFPTR2
00:00001B42 23C000040D50    	   204: 	move.l d0,framebuf_dcb+DCB_INBUFPTR
00:00001B48 4CDF0006        	   205: 	movem.l (a7)+,d1/d2
00:00001B4C 7000            	   206: 	move.l #E_Ok,d0
00:00001B4E 4E75            	   207: 	rts
                            	   208: 
                            	   209: framebuf_set_dispbuf:
00:00001B50 13C1FD200003    	   210: 	move.b d1,FRAMEBUF+3					; set display page
00:00001B56 7000            	   211: 	move.l #E_Ok,d0
00:00001B58 4E75            	   212: 	rts
                            	   213: 
                            	   214: framebuf_set_unit:
00:00001B5A 23C100040D98    	   215: 	move.l d1,framebuf_dcb+DCB_UNIT
00:00001B60 7000            	   216: 	move.l #E_Ok,d0
00:00001B62 4E75            	   217: 	rts
                            	   218: 
                            	   219: framebuf_getbuf:
                            	   220: framebuf_putbuf:
                            	   221: framebuf_stub:
00:00001B64 700A            	   222: 	moveq #E_NotSupported,d0
00:00001B66 4E75            	   223: 	rts
                            	   224: 
                            	   225: framebuf_set_color_depth:
00:00001B68 2001            	   226: 	move.l d1,d0
00:00001B6A 61007D68        	   227: 	bsr rbo
00:00001B6E 23C1FD200098    	   228: 	move.l d1,FRAMEBUF+FRAMEBUF_COLOR_COMP
00:00001B74 2200            	   229: 	move.l d0,d1
00:00001B76 7000            	   230: 	move.l #E_Ok,d0
00:00001B78 4E75            	   231: 	rts
                            	   232: 	
                            	   233: framebuf_get_color:
00:00001B7A 223900040D7C    	   234: 	move.l framebuf_dcb+DCB_FGCOLOR,d1
00:00001B80 243900040D78    	   235: 	move.l framebuf_dcb+DCB_BKCOLOR,d2
00:00001B86 7000            	   236: 	move.l #E_Ok,d0
00:00001B88 4E75            	   237: 	rts
                            	   238: 
                            	   239: framebuf_get_dimen:
00:00001B8A 4A00            	   240: 	cmpi.b #0,d0
00:00001B8C 6616            	   241: 	bne.s .0001
00:00001B8E 223900040D6C    	   242: 	move.l framebuf_dcb+DCB_OUTDIMX,d1
00:00001B94 243900040D70    	   243: 	move.l framebuf_dcb+DCB_OUTDIMY,d2
00:00001B9A 263900040D74    	   244: 	move.l framebuf_dcb+DCB_OUTDIMZ,d3
00:00001BA0 7000            	   245: 	move.l #E_Ok,d0
00:00001BA2 4E75            	   246: 	rts
                            	   247: .0001:
00:00001BA4 223900040D60    	   248: 	move.l framebuf_dcb+DCB_INDIMX,d1
00:00001BAA 243900040D64    	   249: 	move.l framebuf_dcb+DCB_INDIMY,d2
00:00001BB0 263900040D68    	   250: 	move.l framebuf_dcb+DCB_INDIMZ,d3
00:00001BB6 7000            	   251: 	move.l #E_Ok,d0
00:00001BB8 4E75            	   252: 	rts
                            	   253: 
                            	   254: framebuf_set_dimen:
00:00001BBA 4A00            	   255: 	cmpi.b #0,d0
00:00001BBC 6638            	   256: 	bne.s .0001
00:00001BBE 48E76000        	   257: 	movem.l d1/d2,-(a7)
00:00001BC2 23C100040D6C    	   258: 	move.l d1,framebuf_dcb+DCB_OUTDIMX
00:00001BC8 23C200040D70    	   259: 	move.l d2,framebuf_dcb+DCB_OUTDIMY
00:00001BCE 23C300040D74    	   260: 	move.l d3,framebuf_dcb+DCB_OUTDIMZ
00:00001BD4 2001            	   261: 	move.l d1,d0
00:00001BD6 61007CFC        	   262: 	bsr rbo
00:00001BDA 23C1FD200068    	   263: 	move.l d1,FRAMEBUF+FRAMEBUF_BMPSIZE_X
00:00001BE0 2202            	   264: 	move.l d2,d1
00:00001BE2 61007CF0        	   265: 	bsr rbo
00:00001BE6 23C1FD20006C    	   266: 	move.l d1,FRAMEBUF+FRAMEBUF_BMPSIZE_Y
00:00001BEC 2200            	   267: 	move.l d0,d1
00:00001BEE 4CDF0006        	   268: 	movem.l (a7)+,d1/d2
00:00001BF2 7000            	   269: 	move.l #E_Ok,d0
00:00001BF4 4E75            	   270: 	rts
                            	   271: .0001:
00:00001BF6 0C000001        	   272: 	cmpi.b #1,d0
00:00001BFA 6616            	   273: 	bne.s .0002
00:00001BFC 23C100040D60    	   274: 	move.l d1,framebuf_dcb+DCB_INDIMX
00:00001C02 23C200040D64    	   275: 	move.l d2,framebuf_dcb+DCB_INDIMY
00:00001C08 23C300040D68    	   276: 	move.l d3,framebuf_dcb+DCB_INDIMZ
00:00001C0E 7000            	   277: 	move.l #E_Ok,d0
00:00001C10 4E75            	   278: 	rts
                            	   279: .0002:
00:00001C12 0C000002        	   280: 	cmpi.b #2,d0		; set window dimensions
00:00001C16 661A            	   281: 	bne.s .0003
00:00001C18 48E76000        	   282: 	movem.l d1/d2,-(a7)
00:00001C1C 48C2            	   283: 	ext.l d2
00:00001C1E 4842            	   284: 	swap d2
00:00001C20 48C1            	   285: 	ext.l d1
00:00001C22 8282            	   286: 	or.l d2,d1
00:00001C24 61007CAE        	   287: 	bsr rbo
00:00001C28 23C1FD200078    	   288: 	move.l d1,FRAMEBUF+FRAMEBUF_WINDOW_DIMEN
00:00001C2E 4CDF0006        	   289: 	movem.l (a7)+,d1/d2
                            	   290: .0003:
00:00001C32 7000            	   291: 	move.l #E_Ok,d0
00:00001C34 4E75            	   292: 	rts
                            	   293: 
                            	   294: 
                            	   295: ;---------------------------------------------------------------------
                            	   296: ; The following uses point plot hardware built into the frame buffer.
                            	   297: ; It is assumed that previous commands have finished already.
                            	   298: ; It may take a few dozen clocks for a command to complete. As long
                            	   299: ; as this routine is not called to fast in succession it should be
                            	   300: ; okay.
                            	   301: ;---------------------------------------------------------------------
                            	   302: 
                            	   303: framebuf_writeat:
                            	   304: plot:
00:00001C36 6070            	   305: 	bra plot_sw
00:00001C38 48E76080        	   306: 	movem.l d1/d2/a0,-(a7)
00:00001C3C 207CFD200000    	   307: 	move.l #FRAMEBUF,a0
                            	   308: .0001:
                            	   309: ;	tst.b 40(a0)				; wait for any previous command to finish
                            	   310: ;	bne.s .0001										; Then set:
00:00001C42 E159            	   311: 	rol.w #8,d1										; reverse byte order
00:00001C44 31410020        	   312: 	move.w d1,32(a0)							; pixel x co-ord
00:00001C48 E15A            	   313: 	rol.w #8,d2										; reverse byte order
00:00001C4A 31420022        	   314: 	move.w d2,34(a0)							; pixel y co-ord
00:00001C4E 317900040D7C002C	   315: 	move.w framebuf_dcb+DCB_FGCOLOR,44(a0)	; pixel color
00:00001C56 117900040D800029	   316: 	move.b framebuf_dcb+DCB_OPCODE,41(a0)	; set raster operation
00:00001C5E 117C00020028    	   317: 	move.b #2,40(a0)							; point plot command
00:00001C64 4CDF0106        	   318: 	movem.l (a7)+,d1/d2/a0
00:00001C68 4E75            	   319: 	rts
                            	   320: 
                            	   321: ;-------------------------------------------
                            	   322: ; In case of lacking hardware plot
                            	   323: ;-------------------------------------------
                            	   324: 	align 2
                            	   325: plottbl:
00:00001C6C 00001D1A        	   326: 	dc.l plot_black
00:00001C70 00001D0C        	   327: 	dc.l plot_copy
00:00001C74 00001D0C        	   328: 	dc.l plot_copy
00:00001C78 00001CF8        	   329: 	dc.l plot_and
00:00001C7C 00001CCE        	   330: 	dc.l plot_or
00:00001C80 00001CE2        	   331: 	dc.l plot_xor
00:00001C84 00001D0C        	   332: 	dc.l plot_copy
00:00001C88 00001D0C        	   333: 	dc.l plot_copy
00:00001C8C 00001D0C        	   334: 	dc.l plot_copy
00:00001C90 00001D0C        	   335: 	dc.l plot_copy
00:00001C94 00001D0C        	   336: 	dc.l plot_copy
00:00001C98 00001D0C        	   337: 	dc.l plot_copy
00:00001C9C 00001D0C        	   338: 	dc.l plot_copy
00:00001CA0 00001D0C        	   339: 	dc.l plot_copy
00:00001CA4 00001D24        	   340: 	dc.l plot_white
                            	   341: 
                            	   342: plot_sw:
00:00001CA8 48E778C0        	   343: 	movem.l d1/d2/d3/d4/a0/a1,-(a7)
00:00001CAC C4F900040D6C    	   344: 	mulu framebuf_dcb+DCB_OUTDIMX,d2	; multiply y by screen width
                            	   345: ;	move.l d1,d3
                            	   346: ;	andi.l #30,d3
                            	   347: ;	moveq #30,d4
                            	   348: ;	sub.l d4,d3
                            	   349: ;	andi.l #$FFFFFFE0,d1
                            	   350: ;	or.l d3,d1
00:00001CB2 48C1            	   351: 	ext.l d1											; clear high-order word of x
00:00001CB4 D481            	   352: 	add.l d1,d2										; add in x co-ord
00:00001CB6 D482            	   353: 	add.l d2,d2										; *2 for 16 BPP
00:00001CB8 207900040D8C    	   354: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,a0		; where the draw occurs
00:00001CBE 163900040D80    	   355: 	move.b framebuf_dcb+DCB_OPCODE,d3				; raster operation
00:00001CC4 4883            	   356: 	ext.w d3
00:00001CC6 E54B            	   357: 	lsl.w #2,d3
00:00001CC8 227B30A2        	   358: 	move.l plottbl(pc,d3.w),a1
00:00001CCC 4ED1            	   359: 	jmp (a1)
                            	   360: plot_or:
00:00001CCE 38302800        	   361: 	move.w (a0,d2.l),d4	
00:00001CD2 887900040D7C    	   362: 	or.w framebuf_dcb+DCB_FGCOLOR,d4
00:00001CD8 31842800        	   363: 	move.w d4,(a0,d2.l)
00:00001CDC 4CDF031E        	   364: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001CE0 4E75            	   365: 	rts
                            	   366: plot_xor:
00:00001CE2 38302800        	   367: 	move.w (a0,d2.l),d4
00:00001CE6 363900040D7C    	   368: 	move.w framebuf_dcb+DCB_FGCOLOR,d3	
00:00001CEC B744            	   369: 	eor.w d3,d4
00:00001CEE 31842800        	   370: 	move.w d4,(a0,d2.l)
00:00001CF2 4CDF031E        	   371: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001CF6 4E75            	   372: 	rts
                            	   373: plot_and:
00:00001CF8 38302800        	   374: 	move.w (a0,d2.l),d4	
00:00001CFC C87900040D7C    	   375: 	and.w framebuf_dcb+DCB_FGCOLOR,d4
00:00001D02 31842800        	   376: 	move.w d4,(a0,d2.l)
00:00001D06 4CDF031E        	   377: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001D0A 4E75            	   378: 	rts
                            	   379: plot_copy:
00:00001D0C 31B900040D7C2800	   380: 	move.w framebuf_dcb+DCB_FGCOLOR,(a0,d2.l)
00:00001D14 4CDF031E        	   381: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001D18 4E75            	   382: 	rts
                            	   383: plot_black:
00:00001D1A 42702800        	   384: 	clr.w (a0,d2.l)
00:00001D1E 4CDF031E        	   385: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001D22 4E75            	   386: 	rts
                            	   387: plot_white:
00:00001D24 31BCFF7F2800    	   388: 	move.w #$FF7F,(a0,d2.l)
00:00001D2A 4CDF031E        	   389: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001D2E 4E75            	   390: 	rts
                            	   391: 
                            	   392: 
                            	   393: clear_graphics_screen:
                            	   394: ;	move.l #0,d1
                            	   395: ;	bsr gfxaccel_set_color
                            	   396: ;	move.l #0,d1
                            	   397: ;	move.l #0,d2
                            	   398: ;	move.l #1920<<16,d3
                            	   399: ;	move.l #1080<<16,d4
                            	   400: ;	bsr gfxaccel_draw_rectangle
00:00001D30 2A3C00075300    	   401: 	move.l #VIDEO_X*VIDEO_Y,d5		; compute number of strips to write
00:00001D36 E68D            	   402: 	lsr.l #3,d5						; 8 pixels per strip
                            	   403: ;	move.l framebuf_dcb+DCB_OUTBUFPTR,a4
00:00001D38 287C40000000    	   404: 	move.l #$40000000,a4
00:00001D3E 42B97FFFFFF8    	   405: 	move.l #0,$7FFFFFF8		; burst length of zero
00:00001D44 6002            	   406: 	bra.s .0001
                            	   407: .0002:
00:00001D46 4845            	   408: 	swap d5
                            	   409: .0001:
00:00001D48 220C            	   410: 	move.l a4,d1
00:00001D4A 61007B88        	   411: 	bsr rbo
00:00001D4E 23C17FFFFFF4    	   412: 	move.l d1,$7FFFFFF4		; target address
00:00001D54 42B97FFFFFFC    	   413: 	move.l #0,$7FFFFFFC		; value to write
00:00001D5A 49EC0020        	   414: 	lea.l 32(a4),a4
00:00001D5E 51CDFFE8        	   415: 	dbra d5,.0001
                            	   416: ;	swap d5
                            	   417: ;	dbra d5,.0002
00:00001D62 4E75            	   418: 	rts
                            	   419: 
                            	   420: 
                            	   421: ; Clears the page opposite to the display page
                            	   422: 
                            	   423: framebuf_clear:
00:00001D64 F2276800        	   424: 	fmove.x fp0,-(a7)
00:00001D68 F2276880        	   425: 	fmove.x fp1,-(a7)
00:00001D6C 48E76880        	   426: 	movem.l d1/d2/d4/a0,-(a7)
00:00001D70 1239FD200003    	   427: 	move.b FRAMEBUF+3,d1		; get displayed page
00:00001D76 0C010001        	   428: 	cmpi.b #1,d1
00:00001D7A 6608            	   429: 	bne.s .0001
00:00001D7C 207900040D54    	   430: 	move.l framebuf_dcb+DCB_OUTBUFPTR,a0		; where the draw occurs
00:00001D82 6006            	   431: 	bra.s .0002
                            	   432: .0001
00:00001D84 207900040D8C    	   433: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,a0		; where the draw occurs
                            	   434: .0002
00:00001D8A 223900040D6C    	   435: 	move.l framebuf_dcb+DCB_OUTDIMX,d1
00:00001D90 243900040D70    	   436: 	move.l framebuf_dcb+DCB_OUTDIMY,d2
00:00001D96 C4C1            	   437: 	mulu d1,d2							; d2 = X dimen * Y dimen = number of pixels
00:00001D98 2239FD2000B0    	   438: 	move.l FRAMEBUF+FRAMEBUF_PPS,d1
00:00001D9E 61007B34        	   439: 	bsr rbo
00:00001DA2 024103FF        	   440: 	andi.w #$3ff,d1					; extract pixels per strip
00:00001DA6 48C1            	   441: 	ext.l d1
00:00001DA8 2801            	   442: 	move.l d1,d4						; d4.w = pixels per strip
00:00001DAA D484            	   443: 	add.l d4,d2							; round number of pixels on screen up a strip
00:00001DAC F2024000        	   444: 	fmove.l d2,fp0					; number might be too big for divu
00:00001DB0 F2044080        	   445: 	fmove.l d4,fp1					; so use float divider
00:00001DB4 F2000420        	   446: 	fdiv fp1,fp0						; fp0 = screen size / pixels per strip
00:00001DB8 F2006000        	   447: 	fmove.l fp0,d0					; d0 = number of strips to set
00:00001DBC 223900040D7C    	   448: 	move.l framebuf_dcb+DCB_FGCOLOR,d1
00:00001DC2 61007B10        	   449: 	bsr rbo
00:00001DC6 2801            	   450: 	move.l d1,d4
00:00001DC8 42B97FFFFFF8    	   451: 	move.l #0,$7FFFFFF8			; set burst length zero
00:00001DCE 6002            	   452: 	bra.s .loop
                            	   453: .loop2:
00:00001DD0 4840            	   454: 	swap d0
                            	   455: .loop:
00:00001DD2 2208            	   456: 	move.l a0,d1
00:00001DD4 61007AFE        	   457: 	bsr rbo
00:00001DD8 23C17FFFFFF4    	   458: 	move.l d1,$7FFFFFF4			; set destination address
00:00001DDE 23C47FFFFFFC    	   459: 	move.l d4,$7FFFFFFC			; write value (color) to use and trigger write op
00:00001DE4 41E80020        	   460: 	lea 32(a0),a0						; advance pointer
00:00001DE8 51C8FFE8        	   461: 	dbra d0,.loop
00:00001DEC 4840            	   462: 	swap d0
00:00001DEE 51C8FFE0        	   463: 	dbra d0,.loop2
00:00001DF2 4CDF0116        	   464: 	movem.l (a7)+,d1/d2/d4/a0
00:00001DF6 F21F4880        	   465: 	fmove.x (a7)+,fp1
00:00001DFA F21F4800        	   466: 	fmove.x (a7)+,fp0
00:00001DFE 7000            	   467: 	move.l #E_Ok,d0
00:00001E00 4E75            	   468: 	rts
                            	   469: 
                            	   470: ; The following code using bursts of 1k pixels did not work (hardware).
                            	   471: ;
                            	   472: ;clear_bitmap_screen2:
                            	   473: ;	move.l gr_bitmap_screen,a0
                            	   474: ;clear_bitmap_screen3:
                            	   475: ;	movem.l d0/d2/a0,-(a7)
                            	   476: ;	move.l #$3F3F3F3F,$BFFFFFF4	; 32x64 byte burst
                            	   477: ;	move.w pen_color,d0
                            	   478: ;	swap d0
                            	   479: ;	move.w pen_color,d0
                            	   480: ;	move.w gr_width,d2		; calc. number of pixels on screen
                            	   481: ;	mulu gr_height,d2
                            	   482: ;	add.l #1023,d2				; rounding up
                            	   483: ;	lsr.l #8,d2						; divide by 1024 pixel update
                            	   484: ;	lsr.l #2,d2
                            	   485: ;.0001:
                            	   486: ;	move.l a0,$BFFFFFF8		; write update address
                            	   487: ;	add.l #2048,a0				; update pointer
                            	   488: ;	move.l d0,$BFFFFFFC		; trigger burst write of 2048 bytes
                            	   489: ;	dbra d2,.0001
                            	   490: ;	movem.l (a7)+,d0/d2/a0
                            	   491: ;	rts
                            	   492: 
                            	   493: ; More conventional but slow way of clearing the screen.
                            	   494: ;
                            	   495: ;clear_bitmap_screen:
                            	   496: ;	move.l gr_bitmap_screen,a0
                            	   497: ;clear_bitmap_screen1:
                            	   498: ;	movem.l d0/d2/a0,-(a7)
                            	   499: ;	move.w pen_color,d0
                            	   500: ;	swap d0
                            	   501: ;	move.w pen_color,d0
                            	   502: ;	move.w gr_width,d2		; calc. number of pixels on screen
                            	   503: ;	mulu gr_height,d2			; 800x600 = 480000
                            	   504: ;	bra.s .0001
                            	   505: ;.0002:
                            	   506: ;	swap d2
                            	   507: ;.0001:
                            	   508: ;	move.l d0,(a0)+
                            	   509: ;	dbra d2,.0001
                            	   510: ;	swap d2
                            	   511: ;	dbra d2,.0002
                            	   512: ;	movem.l (a7)+,d0/d2/a0
                            	   513: ;	rts
                            	   514: 
                            	   515: 

Source: "boot.x68"
                            	   605: 	include "gfxaccel.x68"

Source: "gfxaccel.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: GFX_CTRL		equ	$00
                            	    38: GFX_STATUS	equ $04
                            	    39: GFX_TARGET_BASE		equ $10
                            	    40: GFX_TARGET_SIZE_X	equ $14
                            	    41: GFX_TARGET_SIZE_Y equ $18
                            	    42: GFX_DEST_PIXEL_X  equ $38
                            	    43: GFX_DEST_PIXEL_Y  equ $3c
                            	    44: GFX_DEST_PIXEL_Z  equ $40
                            	    45: GFX_CLIP_PIXEL0_X	equ $74
                            	    46: GFX_CLIP_PIXEL0_Y	equ $78
                            	    47: GFX_CLIP_PIXEL1_X	equ $7C
                            	    48: GFX_CLIP_PIXEL1_Y	equ $80
                            	    49: GFX_COLOR0	equ $84
                            	    50: GFX_COLOR1	equ $88
                            	    51: GFX_COLOR2	equ $8C
                            	    52: GFX_TARGET_X0	equ $B0
                            	    53: GFX_TARGET_Y0 equ $B4
                            	    54: GFX_TARGET_X1	equ $B8
                            	    55: GFX_TARGET_Y1	equ $BC
                            	    56: GFX_COLOR_COMP equ $D0
                            	    57: GFX_PPS equ $D4
                            	    58: 
                            	    59: ;------------------------------------------------------------------------------
                            	    60: ;------------------------------------------------------------------------------
                            	    61: ; Graphics accelerator
                            	    62: ;------------------------------------------------------------------------------
                            	    63: ;------------------------------------------------------------------------------
                            	    64: 	align 2
                            	    65: GFXACCEL_CMDTBL:
00:00001E04 00001F42        	    66: 	dc.l gfxaccel_init				; 0
00:00001E08 00001FA4        	    67: 	dc.l gfxaccel_stat
00:00001E0C 00001FB2        	    68: 	dc.l gfxaccel_putchar
00:00001E10 00001FB2        	    69: 	dc.l gfxaccel_putbuf
00:00001E14 00001FB2        	    70: 	dc.l gfxaccel_getchar
00:00001E18 00001FB2        	    71: 	dc.l gfxaccel_getbuf
00:00001E1C 00001FB2        	    72: 	dc.l gfxaccel_set_inpos
00:00001E20 00001FB2        	    73: 	dc.l gfxaccel_set_outpos
00:00001E24 00001FB2        	    74: 	dc.l gfxaccel_stub
00:00001E28 00001FB2        	    75: 	dc.l gfxaccel_stub
00:00001E2C 00001FB2        	    76: 	dc.l gfxaccel_stub				; 10
00:00001E30 00001FB2        	    77: 	dc.l gfxaccel_stub
00:00001E34 00002016        	    78: 	dc.l gfxaccel_clear
00:00001E38 00001FB2        	    79: 	dc.l gfxaccel_swapbuf
00:00001E3C 00001FB2        	    80: 	dc.l gfxaccel_setbuf1
00:00001E40 00001FB2        	    81: 	dc.l gfxaccel_setbuf2
00:00001E44 00001FB2        	    82: 	dc.l gfxaccel_getbuf1
00:00001E48 00001FB2        	    83: 	dc.l gfxaccel_getbuf2
00:00001E4C 00001FB2        	    84: 	dc.l gfxaccel_writeat
00:00001E50 00001FB2        	    85: 	dc.l gfxaccel_set_unit
00:00001E54 00001FB2        	    86: 	dc.l gfxaccel_get_dimen	; 20
00:00001E58 000020BC        	    87: 	dc.l gfxaccel_get_color
00:00001E5C 00001FB2        	    88: 	dc.l gfxaccel_get_inpos
00:00001E60 00001FB2        	    89: 	dc.l gfxaccel_get_outpos
00:00001E64 00001FB2        	    90: 	dc.l gfxaccel_get_outptr
00:00001E68 000020CA        	    91: 	dc.l gfxaccel_set_color
00:00001E6C 000020EA        	    92: 	dc.l gfxaccel_set_color123
00:00001E70 00002192        	    93: 	dc.l gfxaccel_plot_point
00:00001E74 000021E4        	    94: 	dc.l gfxaccel_draw_line
00:00001E78 000022B4        	    95: 	dc.l gfxaccel_draw_triangle
00:00001E7C 0000224C        	    96: 	dc.l gfxaccel_draw_rectangle	;30
00:00001E80 0000233C        	    97: 	dc.l gfxaccel_draw_curve
00:00001E84 00001FB6        	    98: 	dc.l gfxaccel_set_dimen
00:00001E88 000020AA        	    99: 	dc.l gfxaccel_set_color_depth
00:00001E8C 00001FEA        	   100: 	dc.l gfxaccel_set_destbuf
00:00001E90 00001FB2        	   101: 	dc.l gfxaccel_set_dispbuf
                            	   102: 
                            	   103: 	code
                            	   104: 	even
                            	   105: 
                            	   106: gfxaccel_cmdproc:
00:00001E94 0C060024        	   107: 	cmpi.b #36,d6
00:00001E98 641A            	   108: 	bhs.s .0001
00:00001E9A 48E70280        	   109: 	movem.l d6/a0,-(a7)
00:00001E9E 4886            	   110: 	ext.w d6
00:00001EA0 48C6            	   111: 	ext.l d6
00:00001EA2 E54E            	   112: 	lsl.w #2,d6
00:00001EA4 41FAFF5E        	   113: 	lea.l GFXACCEL_CMDTBL,a0
00:00001EA8 20706000        	   114: 	move.l (a0,d6.w),a0
00:00001EAC 4E90            	   115: 	jsr (a0)
00:00001EAE 4CDF0140        	   116: 	movem.l (a7)+,d6/a0
00:00001EB2 4E75            	   117: 	rts
                            	   118: .0001:
00:00001EB4 7002            	   119: 	moveq #E_Func,d0
00:00001EB6 4E75            	   120: 	rts
                            	   121: 
                            	   122: setup_gfxaccel:
00:00001EB8 48E780C0        	   123: 	movem.l d0/a0/a1,-(a7)
00:00001EBC 7020            	   124: 	moveq #32,d0
00:00001EBE 41F900040D9C    	   125: 	lea.l gfxaccel_dcb,a0
                            	   126: .0001:
00:00001EC4 4298            	   127: 	clr.l (a0)+
00:00001EC6 51C8FFFC        	   128: 	dbra d0,.0001
00:00001ECA 23FC444342200004	   129: 	move.l #$44434220,gfxaccel_dcb+DCB_MAGIC			; 'DCB'
00:00001ED2 0D9C
00:00001ED4 23FC474658410004	   130: 	move.l #$47465841,gfxaccel_dcb+DCB_NAME				; 'GFXACCEL'
00:00001EDC 0DA0
00:00001EDE 23FC4343454C0004	   131: 	move.l #$4343454C,gfxaccel_dcb+DCB_NAME+4
00:00001EE6 0DA4
00:00001EE8 23FC00001E940004	   132: 	move.l #gfxaccel_cmdproc,gfxaccel_dcb+DCB_CMDPROC
00:00001EF0 0DB4
00:00001EF2 7000            	   133: 	move.l #$00000000,d0
00:00001EF4 23C000040DD4    	   134: 	move.l d0,gfxaccel_dcb+DCB_INBUFPTR
00:00001EFA 23C000040DD8    	   135: 	move.l d0,gfxaccel_dcb+DCB_OUTBUFPTR
00:00001F00 D0BC00400000    	   136: 	add.l #$400000,d0
00:00001F06 23C000040E0C    	   137: 	move.l d0,gfxaccel_dcb+DCB_INBUFPTR2
00:00001F0C 23C000040E10    	   138: 	move.l d0,gfxaccel_dcb+DCB_OUTBUFPTR2
00:00001F12 23FC004000000004	   139: 	move.l #$00400000,gfxaccel_dcb+DCB_INBUFSIZE
00:00001F1A 0DDC
00:00001F1C 23FC004000000004	   140: 	move.l #$00400000,gfxaccel_dcb+DCB_OUTBUFSIZE
00:00001F24 0DE0
00:00001F26 23FC88880000FD30	   141: 	move.l #$88880000,GFXACCEL+GFX_COLOR_COMP
00:00001F2E 00D0
00:00001F30 43F900040D9C    	   142: 	lea.l gfxaccel_dcb+DCB_MAGIC,a1
00:00001F36 61005BD4        	   143: 	jsr DisplayString
00:00001F3A 61005BB6        	   144: 	jsr CRLF
00:00001F3E 4CDF0301        	   145: 	movem.l (a7)+,d0/a0/a1
                            	   146: 
                            	   147: gfxaccel_init:
00:00001F42 2F01            	   148: 	move.l d1,-(a7)
00:00001F44 720A            	   149: 	moveq #10,d1
00:00001F46 6100047A        	   150: 	bsr gfxaccel_wait
00:00001F4A 7200            	   151: 	move.l #0,d1
00:00001F4C 23C1000408C0    	   152: 	move.l d1,gfxaccel_ctrl
00:00001F52 61007980        	   153: 	bsr rbo
00:00001F56 23C1FD300000    	   154: 	move.l d1,GFXACCEL+GFX_CTRL
00:00001F5C 7200            	   155: 	move.l #$00000000,d1
00:00001F5E 61007974        	   156: 	bsr rbo
00:00001F62 23C1FD300010    	   157: 	move.l d1,GFXACCEL+GFX_TARGET_BASE	; base draw address
00:00001F68 223C00000320    	   158: 	move.l #800,d1
00:00001F6E 61007964        	   159: 	bsr rbo
00:00001F72 23C1FD300014    	   160: 	move.l d1,GFXACCEL+GFX_TARGET_SIZE_X	; render target x dimension
00:00001F78 23C1FD3000B8    	   161: 	move.l d1,GFXACCEL+GFX_TARGET_X1
00:00001F7E 223C00000258    	   162: 	move.l #600,d1
00:00001F84 6100794E        	   163: 	bsr rbo
00:00001F88 23C1FD300018    	   164: 	move.l d1,GFXACCEL+GFX_TARGET_SIZE_Y	; render target y dimension
00:00001F8E 23C1FD3000BC    	   165: 	move.l d1,GFXACCEL+GFX_TARGET_Y1
00:00001F94 42B9FD3000B0    	   166: 	move.l #0,GFXACCEL+GFX_TARGET_X0
00:00001F9A 42B9FD3000B4    	   167: 	move.l #0,GFXACCEL+GFX_TARGET_Y0
00:00001FA0 221F            	   168: 	move.l (a7)+,d1
00:00001FA2 4E75            	   169: 	rts
                            	   170: 
                            	   171: gfxaccel_stat:
00:00001FA4 2239FD300004    	   172: 	move.l GFXACCEL+GFX_STATUS,d1
00:00001FAA 61007928        	   173: 	bsr rbo
00:00001FAE 7000            	   174: 	moveq #E_Ok,d0
00:00001FB0 4E75            	   175: 	rts
                            	   176: 
                            	   177: gfxaccel_putchar:
                            	   178: gfxaccel_getchar:
                            	   179: gfxaccel_putbuf:
                            	   180: gfxaccel_getbuf:
                            	   181: gfxaccel_set_inpos:
                            	   182: gfxaccel_set_outpos:
                            	   183: gfxaccel_stub:
                            	   184: gfxaccel_swapbuf:
                            	   185: gfxaccel_setbuf1:
                            	   186: gfxaccel_setbuf2:
                            	   187: gfxaccel_getbuf1:
                            	   188: gfxaccel_getbuf2:
                            	   189: gfxaccel_writeat:
                            	   190: gfxaccel_set_unit:
                            	   191: gfxaccel_get_dimen:
                            	   192: gfxaccel_get_inpos:
                            	   193: gfxaccel_get_outpos:
                            	   194: gfxaccel_get_outptr:
                            	   195: gfxaccel_set_dispbuf:
00:00001FB2 700A            	   196: 	move.l #E_NotSupported,d0
00:00001FB4 4E75            	   197: 	rts
                            	   198: 
                            	   199: gfxaccel_set_dimen:
00:00001FB6 2F01            	   200: 	move.l d1,-(a7)
00:00001FB8 2001            	   201: 	move.l d1,d0
00:00001FBA 7206            	   202: 	moveq #6,d1
00:00001FBC 61000404        	   203: 	bsr gfxaccel_wait					; wait for an open slot
00:00001FC0 2200            	   204: 	move.l d0,d1
00:00001FC2 61007910        	   205: 	bsr rbo
00:00001FC6 23C1FD300014    	   206: 	move.l d1,GFXACCEL+GFX_TARGET_SIZE_X	; render target x dimension
00:00001FCC 23C1FD3000B8    	   207: 	move.l d1,GFXACCEL+GFX_TARGET_X1
00:00001FD2 2202            	   208: 	move.l d2,d1
00:00001FD4 610078FE        	   209: 	bsr rbo
00:00001FD8 23C1FD300018    	   210: 	move.l d1,GFXACCEL+GFX_TARGET_SIZE_Y	; render target y dimension
00:00001FDE 23C1FD3000BC    	   211: 	move.l d1,GFXACCEL+GFX_TARGET_Y1
00:00001FE4 221F            	   212: 	move.l (a7)+,d1
00:00001FE6 7000            	   213: 	moveq #E_Ok,d0
00:00001FE8 4E75            	   214: 	rts
                            	   215: 
                            	   216: gfxaccel_set_destbuf:
00:00001FEA 2001            	   217: 	move.l d1,d0
00:00001FEC 7203            	   218: 	moveq #3,d1
00:00001FEE 610003D2        	   219: 	bsr gfxaccel_wait					; wait for an open slot
00:00001FF2 0C000001        	   220: 	cmpi.b #1,d0
00:00001FF6 6608            	   221: 	bne.s .0001
00:00001FF8 223900040E10    	   222: 	move.l gfxaccel_dcb+DCB_OUTBUFPTR2,d1
00:00001FFE 6006            	   223: 	bra.s .0002
                            	   224: .0001:
00:00002000 223900040DD8    	   225: 	move.l gfxaccel_dcb+DCB_OUTBUFPTR,d1
                            	   226: .0002:
00:00002006 610078CC        	   227: 	bsr rbo
00:0000200A 23C1FD300010    	   228: 	move.l d1,GFXACCEL+GFX_TARGET_BASE
00:00002010 2200            	   229: 	move.l d0,d1
00:00002012 7000            	   230: 	move.l #E_Ok,d0
00:00002014 4E75            	   231: 	rts
                            	   232: 
                            	   233: ; Clears destination buffer
                            	   234: 
                            	   235: gfxaccel_clear:
00:00002016 F2276800        	   236: 	fmove.x fp0,-(a7)
00:0000201A F2276880        	   237: 	fmove.x fp1,-(a7)
00:0000201E 48E76880        	   238: 	movem.l d1/d2/d4/a0,-(a7)
00:00002022 2239FD300014    	   239: 	move.l GFXACCEL+GFX_TARGET_SIZE_X,d1
00:00002028 610078AA        	   240: 	bsr rbo
00:0000202C 2401            	   241: 	move.l d1,d2
00:0000202E 2239FD300018    	   242: 	move.l GFXACCEL+GFX_TARGET_SIZE_Y,d1
00:00002034 6100789E        	   243: 	bsr rbo
00:00002038 C4C1            	   244: 	mulu d1,d2							; d2 = X dimen * Y dimen = number of pixels
00:0000203A 2239FD3000D4    	   245: 	move.l GFXACCEL+GFX_PPS,d1	; d1 = pixels per strip reg
00:00002040 61007892        	   246: 	bsr rbo
00:00002044 024103FF        	   247: 	andi.w #$3ff,d1					; extract pixels per strip
00:00002048 48C1            	   248: 	ext.l d1
00:0000204A 2801            	   249: 	move.l d1,d4						; d4.w = pixels per strip
00:0000204C D484            	   250: 	add.l d4,d2							; round number of pixels on screen up a strip
00:0000204E F2024000        	   251: 	fmove.l d2,fp0					; number might be too big for divu
00:00002052 F2044080        	   252: 	fmove.l d4,fp1					; so use float divider
00:00002056 F2000420        	   253: 	fdiv fp1,fp0						; fp0 = screen size / pixels per strip
00:0000205A F2006000        	   254: 	fmove.l fp0,d0					; d0 = number of strips to set
00:0000205E 2839FD300084    	   255: 	move.l GFXACCEL+GFX_COLOR0,d4
00:00002064 2239FD300010    	   256: 	move.l GFXACCEL+GFX_TARGET_BASE,d1
00:0000206A 61007868        	   257: 	bsr rbo
00:0000206E 2041            	   258: 	move.l d1,a0
00:00002070 42B97FFFFFF8    	   259: 	move.l #0,$7FFFFFF8			; set burst length zero
00:00002076 6002            	   260: 	bra.s .loop
                            	   261: .loop2:
00:00002078 4840            	   262: 	swap d0
                            	   263: .loop:
00:0000207A 2208            	   264: 	move.l a0,d1
00:0000207C 61007856        	   265: 	bsr rbo
00:00002080 23C17FFFFFF4    	   266: 	move.l d1,$7FFFFFF4			; set destination address
00:00002086 23C47FFFFFFC    	   267: 	move.l d4,$7FFFFFFC			; write value (color) to use and trigger write op
00:0000208C 41E80020        	   268: 	lea 32(a0),a0						; advance pointer
00:00002090 51C8FFE8        	   269: 	dbra d0,.loop
00:00002094 4840            	   270: 	swap d0
00:00002096 51C8FFE0        	   271: 	dbra d0,.loop2
00:0000209A 4CDF0116        	   272: 	movem.l (a7)+,d1/d2/d4/a0
00:0000209E F21F4880        	   273: 	fmove.x (a7)+,fp1
00:000020A2 F21F4800        	   274: 	fmove.x (a7)+,fp0
00:000020A6 7000            	   275: 	move.l #E_Ok,d0
00:000020A8 4E75            	   276: 	rts
                            	   277: 
                            	   278: 
                            	   279: gfxaccel_set_color_depth:
00:000020AA 2200            	   280: 	move.l d0,d1
00:000020AC 61007826        	   281: 	bsr rbo
00:000020B0 23C1FD3000D0    	   282: 	move.l d1,GFXACCEL+GFX_COLOR_COMP
00:000020B6 2200            	   283: 	move.l d0,d1
00:000020B8 7000            	   284: 	moveq #E_Ok,d0
00:000020BA 4E75            	   285: 	rts
                            	   286: 	
                            	   287: gfxaccel_get_color:
00:000020BC 2239FD300084    	   288: 	move.l GFXACCEL+GFX_COLOR0,d1
00:000020C2 61007810        	   289: 	bsr rbo
00:000020C6 7000            	   290: 	moveq #E_Ok,d0
00:000020C8 4E75            	   291: 	rts
                            	   292: 
                            	   293: gfxaccel_set_color:
00:000020CA 48E75000        	   294: 	movem.l d1/d3,-(a7)
00:000020CE 2601            	   295: 	move.l d1,d3
00:000020D0 7203            	   296: 	moveq #3,d1
00:000020D2 610002EE        	   297: 	bsr gfxaccel_wait					; wait for an open slot
00:000020D6 2203            	   298: 	move.l d3,d1
00:000020D8 610077FA        	   299: 	bsr rbo
00:000020DC 23C1FD300084    	   300: 	move.l d1,GFXACCEL+GFX_COLOR0
00:000020E2 4CDF000A        	   301: 	movem.l (a7)+,d1/d3
00:000020E6 7000            	   302: 	moveq #E_Ok,d0
00:000020E8 4E75            	   303: 	rts
                            	   304: 
                            	   305: gfxaccel_set_color123:
00:000020EA 48E74800        	   306: 	movem.l d1/d4,-(a7)
00:000020EE 2801            	   307: 	move.l d1,d4
00:000020F0 7205            	   308: 	moveq #5,d1
00:000020F2 610002CE        	   309: 	bsr gfxaccel_wait					; wait for an open slot
00:000020F6 2204            	   310: 	move.l d4,d1
00:000020F8 610077DA        	   311: 	bsr rbo
00:000020FC 23C1FD300084    	   312: 	move.l d1,GFXACCEL+GFX_COLOR0
00:00002102 2202            	   313: 	move.l d2,d1
00:00002104 610077CE        	   314: 	bsr rbo
00:00002108 23C1FD300088    	   315: 	move.l d1,GFXACCEL+GFX_COLOR1
00:0000210E 2203            	   316: 	move.l d3,d1
00:00002110 610077C2        	   317: 	bsr rbo
00:00002114 23C1FD30008C    	   318: 	move.l d1,GFXACCEL+GFX_COLOR2
00:0000211A 4CDF0012        	   319: 	movem.l (a7)+,d1/d4
00:0000211E 7000            	   320: 	moveq #E_Ok,d0
00:00002120 4E75            	   321: 	rts
                            	   322: 
                            	   323: gfxaccel_clip_rect:
00:00002122 48E74400        	   324: 	movem.l d1/d5,-(a7)
00:00002126 2A01            	   325: 	move.l d1,d5
00:00002128 7206            	   326: 	moveq #6,d1
00:0000212A 61000296        	   327: 	bsr gfxaccel_wait					; wait for an open slot
00:0000212E 2205            	   328: 	move.l d5,d1
00:00002130 610077A2        	   329: 	bsr rbo
00:00002134 23C1FD300074    	   330: 	move.l d1,GFXACCEL+GFX_CLIP_PIXEL0_X
00:0000213A 2202            	   331: 	move.l d2,d1
00:0000213C 61007796        	   332: 	bsr rbo
00:00002140 23C1FD300078    	   333: 	move.l d1,GFXACCEL+GFX_CLIP_PIXEL0_Y
00:00002146 2203            	   334: 	move.l d3,d1
00:00002148 6100778A        	   335: 	bsr rbo
00:0000214C 23C1FD30007C    	   336: 	move.l d1,GFXACCEL+GFX_CLIP_PIXEL1_X
00:00002152 2204            	   337: 	move.l d4,d1
00:00002154 6100777E        	   338: 	bsr rbo
00:00002158 23C1FD300080    	   339: 	move.l d1,GFXACCEL+GFX_CLIP_PIXEL1_Y
00:0000215E 4CDF0022        	   340: 	movem.l (a7)+,d1/d5
00:00002162 7000            	   341: 	moveq #E_Ok,d0
00:00002164 4E75            	   342: 	rts
                            	   343: 
                            	   344: ; Parameters:
                            	   345: ;		d2.b = active point to set
                            	   346: ;
                            	   347: gfxaccel_set_active_point:
00:00002166 4882            	   348: 	ext.w d2
00:00002168 48C2            	   349: 	ext.l d2
00:0000216A 4842            	   350: 	swap d2													; point number in bits 16,17
00:0000216C 2239000408C0    	   351: 	move.l gfxaccel_ctrl,d1
00:00002172 0281FFF8FFFF    	   352: 	andi.l #$FFF8FFFF,d1						; clear point number bits
00:00002178 8282            	   353: 	or.l d2,d1											; set the point number bits
00:0000217A 008100040000    	   354: 	ori.l #$00040000,d1							; set active point
00:00002180 23C1000408C0    	   355: 	move.l d1,gfxaccel_ctrl
00:00002186 6100774C        	   356: 	bsr rbo
00:0000218A 23C1FD300000    	   357: 	move.l d1,GFXACCEL+GFX_CTRL
00:00002190 4E75            	   358: 	rts
                            	   359: 
                            	   360: ; Graphics accelerator expects that co-ordinates are in 16.16 format.
                            	   361: ; 
                            	   362: gfxaccel_plot_point:
00:00002192 48E74400        	   363: 	movem.l d1/d5,-(a7)
00:00002196 2A01            	   364: 	move.l d1,d5
00:00002198 7206            	   365: 	moveq #6,d1
00:0000219A 61000226        	   366: 	bsr gfxaccel_wait								; wait for an open slot
00:0000219E 2205            	   367: 	move.l d5,d1
00:000021A0 61007732        	   368: 	bsr rbo
00:000021A4 23C1FD300038    	   369: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:000021AA 2202            	   370: 	move.l d2,d1
00:000021AC 61007726        	   371: 	bsr rbo
00:000021B0 23C1FD30003C    	   372: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:000021B6 2203            	   373: 	move.l d3,d1
00:000021B8 6100771A        	   374: 	bsr rbo
00:000021BC 23C1FD300040    	   375: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Z
00:000021C2 4242            	   376: 	move.w #0,d2										; point 0
00:000021C4 61A0            	   377: 	bsr gfxaccel_set_active_point
00:000021C6 2239000408C0    	   378: 	move.l gfxaccel_ctrl,d1
00:000021CC 008100000080    	   379: 	ori.l #$00000080,d1							; point write, bit will clear automatically
00:000021D2 61007700        	   380: 	bsr rbo
00:000021D6 23C1FD300000    	   381: 	move.l d1,GFXACCEL+GFX_CTRL
00:000021DC 4CDF0022        	   382: 	movem.l (a7)+,d1/d5
00:000021E0 7000            	   383: 	moveq #E_Ok,d0
00:000021E2 4E75            	   384: 	rts
                            	   385: 
                            	   386: gfxaccel_draw_line:
00:000021E4 48E76400        	   387: 	movem.l d1/d2/d5,-(a7)
00:000021E8 2A01            	   388: 	move.l d1,d5
00:000021EA 7209            	   389: 	moveq #9,d1
00:000021EC 610001D4        	   390: 	bsr gfxaccel_wait								; wait for an open slot
00:000021F0 2205            	   391: 	move.l d5,d1
00:000021F2 610076E0        	   392: 	bsr rbo
00:000021F6 23C1FD300038    	   393: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:000021FC 2202            	   394: 	move.l d2,d1
00:000021FE 610076D4        	   395: 	bsr rbo
00:00002202 23C1FD30003C    	   396: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:00002208 4242            	   397: 	move.w #0,d2										; point 0
00:0000220A 6100FF5A        	   398: 	bsr gfxaccel_set_active_point
00:0000220E 2203            	   399: 	move.l d3,d1
00:00002210 610076C2        	   400: 	bsr rbo
00:00002214 23C1FD300038    	   401: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:0000221A 2204            	   402: 	move.l d4,d1
00:0000221C 610076B6        	   403: 	bsr rbo
00:00002220 23C1FD30003C    	   404: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:00002226 343C0001        	   405: 	move.w #1,d2										; point 1
00:0000222A 6100FF3A        	   406: 	bsr gfxaccel_set_active_point
00:0000222E 2239000408C0    	   407: 	move.l gfxaccel_ctrl,d1					; get the control reg
00:00002234 008100000200    	   408: 	ori.l #$00000200,d1							; trigger draw line
00:0000223A 61007698        	   409: 	bsr rbo
00:0000223E 23C1FD300000    	   410: 	move.l d1,GFXACCEL+GFX_CTRL
00:00002244 4CDF0026        	   411: 	movem.l (a7)+,d1/d2/d5
00:00002248 7000            	   412: 	moveq #E_Ok,d0
00:0000224A 4E75            	   413: 	rts
                            	   414: 
                            	   415: ; Draw a rectangle in the currently selected color
                            	   416: ;
                            	   417: ; Parameters:
                            	   418: ;		d1 	- x0 pos
                            	   419: ;		d2	- y0 pos
                            	   420: ;		d3	- x1 pos
                            	   421: ;		d4	- y1 pos
                            	   422: 
                            	   423: gfxaccel_draw_rectangle:
00:0000224C 48E76400        	   424: 	movem.l d1/d2/d5,-(a7)
00:00002250 2A01            	   425: 	move.l d1,d5
00:00002252 7209            	   426: 	moveq #9,d1
00:00002254 6100016C        	   427: 	bsr gfxaccel_wait								; wait for an open slot
00:00002258 2205            	   428: 	move.l d5,d1
00:0000225A 61007678        	   429: 	bsr rbo
00:0000225E 23C1FD300038    	   430: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:00002264 2202            	   431: 	move.l d2,d1
00:00002266 6100766C        	   432: 	bsr rbo
00:0000226A 23C1FD30003C    	   433: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:00002270 4242            	   434: 	move.w #0,d2										; point 0
00:00002272 6100FEF2        	   435: 	bsr gfxaccel_set_active_point
00:00002276 2203            	   436: 	move.l d3,d1
00:00002278 6100765A        	   437: 	bsr rbo
00:0000227C 23C1FD300038    	   438: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:00002282 2204            	   439: 	move.l d4,d1
00:00002284 6100764E        	   440: 	bsr rbo
00:00002288 23C1FD30003C    	   441: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:0000228E 343C0001        	   442: 	move.w #1,d2										; point 1
00:00002292 6100FED2        	   443: 	bsr gfxaccel_set_active_point
00:00002296 2239000408C0    	   444: 	move.l gfxaccel_ctrl,d1					; get the control reg
00:0000229C 008100000100    	   445: 	ori.l #$00000100,d1							; trigger draw rectangle
00:000022A2 61007630        	   446: 	bsr rbo
00:000022A6 23C1FD300000    	   447: 	move.l d1,GFXACCEL+GFX_CTRL
00:000022AC 4CDF0026        	   448: 	movem.l (a7)+,d1/d2/d5
00:000022B0 7000            	   449: 	moveq #E_Ok,d0
00:000022B2 4E75            	   450: 	rts
                            	   451: 
                            	   452: ; Draw a triangle in the currently selected color
                            	   453: ;
                            	   454: ; Parameters:
                            	   455: ;		d1 	- x0 pos
                            	   456: ;		d2	- y0 pos
                            	   457: ;		d3	- x1 pos
                            	   458: ;		d4	- y1 pos
                            	   459: ;	  d5	- x2 pos
                            	   460: ;		d0	- y2 pos
                            	   461: 
                            	   462: gfxaccel_draw_triangle:
00:000022B4 48E76100        	   463: 	movem.l d1/d2/d7,-(a7)
00:000022B8 2E01            	   464: 	move.l d1,d7
00:000022BA 720C            	   465: 	moveq #12,d1
00:000022BC 61000104        	   466: 	bsr gfxaccel_wait								; wait for an open slot
00:000022C0 2207            	   467: 	move.l d7,d1
00:000022C2 61007610        	   468: 	bsr rbo
00:000022C6 23C1FD300038    	   469: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:000022CC 2202            	   470: 	move.l d2,d1
00:000022CE 61007604        	   471: 	bsr rbo
00:000022D2 23C1FD30003C    	   472: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:000022D8 4242            	   473: 	move.w #0,d2										; point 0
00:000022DA 6100FE8A        	   474: 	bsr gfxaccel_set_active_point
00:000022DE 2203            	   475: 	move.l d3,d1
00:000022E0 610075F2        	   476: 	bsr rbo
00:000022E4 23C1FD300038    	   477: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:000022EA 2204            	   478: 	move.l d4,d1
00:000022EC 610075E6        	   479: 	bsr rbo
00:000022F0 23C1FD30003C    	   480: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:000022F6 343C0001        	   481: 	move.w #1,d2										; point 1
00:000022FA 6100FE6A        	   482: 	bsr gfxaccel_set_active_point
00:000022FE 2205            	   483: 	move.l d5,d1
00:00002300 610075D2        	   484: 	bsr rbo
00:00002304 23C1FD300038    	   485: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:0000230A 2200            	   486: 	move.l d0,d1
00:0000230C 610075C6        	   487: 	bsr rbo
00:00002310 23C1FD30003C    	   488: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:00002316 343C0002        	   489: 	move.w #2,d2										; point 2
00:0000231A 6100FE4A        	   490: 	bsr gfxaccel_set_active_point
00:0000231E 2239000408C0    	   491: 	move.l gfxaccel_ctrl,d1					; get the control reg
00:00002324 008100000400    	   492: 	ori.l #$00000400,d1							; trigger draw triangle
00:0000232A 610075A8        	   493: 	bsr rbo
00:0000232E 23C1FD300000    	   494: 	move.l d1,GFXACCEL+GFX_CTRL
00:00002334 4CDF0086        	   495: 	movem.l (a7)+,d1/d2/d7
00:00002338 7000            	   496: 	moveq #E_Ok,d0
00:0000233A 4E75            	   497: 	rts
                            	   498: 
                            	   499: gfxaccel_draw_curve:
00:0000233C 48E76100        	   500: 	movem.l d1/d2/d7,-(a7)
00:00002340 2E01            	   501: 	move.l d1,d7
00:00002342 720C            	   502: 	moveq #12,d1
00:00002344 617C            	   503: 	bsr gfxaccel_wait								; wait for an open slot
00:00002346 2207            	   504: 	move.l d7,d1
00:00002348 6100758A        	   505: 	bsr rbo
00:0000234C 23C1FD300038    	   506: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:00002352 2202            	   507: 	move.l d2,d1
00:00002354 6100757E        	   508: 	bsr rbo
00:00002358 23C1FD30003C    	   509: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:0000235E 4242            	   510: 	move.w #0,d2										; point 0
00:00002360 6100FE04        	   511: 	bsr gfxaccel_set_active_point
00:00002364 2203            	   512: 	move.l d3,d1
00:00002366 6100756C        	   513: 	bsr rbo
00:0000236A 23C1FD300038    	   514: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:00002370 2204            	   515: 	move.l d4,d1
00:00002372 61007560        	   516: 	bsr rbo
00:00002376 23C1FD30003C    	   517: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:0000237C 343C0001        	   518: 	move.w #1,d2										; point 1
00:00002380 6100FDE4        	   519: 	bsr gfxaccel_set_active_point
00:00002384 2205            	   520: 	move.l d5,d1
00:00002386 6100754C        	   521: 	bsr rbo
00:0000238A 23C1FD300038    	   522: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_X
00:00002390 2206            	   523: 	move.l d6,d1
00:00002392 61007540        	   524: 	bsr rbo
00:00002396 23C1FD30003C    	   525: 	move.l d1,GFXACCEL+GFX_DEST_PIXEL_Y
00:0000239C 343C0002        	   526: 	move.w #2,d2										; point 2
00:000023A0 6100FDC4        	   527: 	bsr gfxaccel_set_active_point
00:000023A4 2239000408C0    	   528: 	move.l gfxaccel_ctrl,d1					; get the control reg
00:000023AA 008100001C00    	   529: 	ori.l #$00001C00,d1							; trigger draw curve+triangle+interp
00:000023B0 61007522        	   530: 	bsr rbo
00:000023B4 23C1FD300000    	   531: 	move.l d1,GFXACCEL+GFX_CTRL
00:000023BA 4CDF0086        	   532: 	movem.l (a7)+,d1/d2/d7
00:000023BE 7000            	   533: 	moveq #E_Ok,d0
00:000023C0 4E75            	   534: 	rts
                            	   535: 
                            	   536: ; Waits until the specified number of queue slots are available.
                            	   537: ;
                            	   538: ; Parameters:
                            	   539: ;		d1 = number of queue slots required
                            	   540: 
                            	   541: gfxaccel_wait:
00:000023C2 48E77000        	   542: 	movem.l d1/d2/d3,-(a7)
00:000023C6 2401            	   543: 	move.l d1,d2
00:000023C8 2601            	   544: 	move.l d1,d3
                            	   545: .0001:
00:000023CA 2239FD300004    	   546: 	move.l GFXACCEL+GFX_STATUS,d1
00:000023D0 61007502        	   547: 	bsr rbo
00:000023D4 08010000        	   548: 	btst.l #0,d1			; first check busy bit
00:000023D8 66F0            	   549: 	bne.s .0001
00:000023DA 4841            	   550: 	swap d1
00:000023DC 48C1            	   551: 	ext.l d1
00:000023DE 2403            	   552: 	move.l d3,d2
00:000023E0 D481            	   553: 	add.l d1,d2
00:000023E2 0C82000007F8    	   554: 	cmpi.l #2040,d2
00:000023E8 62E0            	   555: 	bhi.s .0001
00:000023EA 4CDF000E        	   556: 	movem.l (a7)+,d1/d2/d3
00:000023EE 4E75            	   557: 	rts
                            	   558: 

Source: "boot.x68"
                            	   606: 
                            	   607: ;------------------------------------------------------------------------------
                            	   608: ;------------------------------------------------------------------------------
                            	   609: ;------------------------------------------------------------------------------
                            	   610: 
                            	   611: GlobalReadLong:
00:000023F0 2210            	   612: 		move.l (a0),d1
00:000023F2 4E75            	   613: 		rts
00:000023F4 6004            	   614: 		bra nd1
                            	   615: GlobalWriteLong:
00:000023F6 2081            	   616: 		move.l d1,(a0)
00:000023F8 4E75            	   617: 		rts
                            	   618: net_delay:
                            	   619: 		bra nd1
                            	   620: nd1	bra nd2
                            	   621: nd2 bra nd3
                            	   622: nd3 bra nd4
00:000023FA 4E71            	   623: nd4	nop
00:000023FC 4E75            	   624: 		rts
                            	   625: 	
                            	   626: 
                            	   627: ;------------------------------------------------------------------------------
                            	   628: ; The IO bitmap needs to be initialized to allow access to IO.
                            	   629: ;------------------------------------------------------------------------------
                            	   630: 
                            	   631: InitIOPBitmap:
00:000023FE 7600            	   632: 	moveq #0,d3				; d3 = asid value
00:00002400 303C003F        	   633: 	move.w #63,d0			; 64 bitmaps to setup
00:00002404 4E7A8016        	   634: 	movec iops,a0			; a0 = IOP bitmap address
00:00002408 2248            	   635: 	movea.l a0,a1			; a1 = table address
                            	   636: .0004
00:0000240A 4A03            	   637: 	tst.b d3
00:0000240C 57C1            	   638: 	seq d1						; set entire bitmap for asid 0, otherwise clear entire bitmap
00:0000240E 4881            	   639: 	ext.w	d1					; make into a long value
00:00002410 48C1            	   640: 	ext.l d1
00:00002412 383C007F        	   641: 	move.w #127,d4
                            	   642: .0001
00:00002416 22C1            	   643: 	move.l d1,(a1)+		; set or clear entire table
00:00002418 51CCFFFC        	   644: 	dbra d4,.0001
00:0000241C 72FF            	   645: 	moveq #-1,d1
00:0000241E 214100A0        	   646: 	move.l d1,160(a0)	; all io address spaces have access to semaphores
00:00002422 214100A4        	   647: 	move.l d1,164(a0)
00:00002426 214100A8        	   648: 	move.l d1,168(a0)
00:0000242A 214100AC        	   649: 	move.l d1,172(a0)
00:0000242E 214101FC        	   650: 	move.l d1,508(a0)	; all io address spaces access random # generator
00:00002432 4840            	   651: 	swap d0
00:00002434 303C001F        	   652: 	move.w #31,d0			; 32 long words for the screen area per bitmap
                            	   653: .0003
00:00002438 20C1            	   654: 	move.l d1,(a0)+		; all cores have access to a screen
00:0000243A 51C8FFFC        	   655: 	dbra d0,.0003
00:0000243E 4840            	   656: 	swap d0
00:00002440 5203            	   657: 	addi.b #1,d3			; do next address space
00:00002442 2049            	   658: 	movea.l a1,a0			; a0 points to area for next address space
00:00002444 51C8FFC4        	   659: 	dbra d0,.0004
00:00002448 4E75            	   660: 	rts	
                            	   661: 	
                            	   662: ;------------------------------------------------------------------------------
                            	   663: ; RandInit
                            	   664: ; 	Initialize random number generator.
                            	   665: ;
                            	   666: ; Modifies:
                            	   667: ;		none
                            	   668: ; Parameters:
                            	   669: ;		none
                            	   670: ;	Returns:
                            	   671: ;		none
                            	   672: ;------------------------------------------------------------------------------
                            	   673: 
                            	   674: InitRand:
                            	   675: RandInit:
00:0000244A 23FC123456780004	   676: 	move.l #$12345678,m_z		; initialize to some value
00:00002452 08D0
00:00002454 23FC987654320004	   677: 	move.l #$98765432,m_w
00:0000245C 08D4
00:0000245E 23FC828354380004	   678: 	move.l #$82835438,next_m_z
00:00002466 08D8
00:00002468 23FC087237460004	   679: 	move.l #$08723746,next_m_w
00:00002470 08DC
00:00002472 48E7C000        	   680: 	movem.l	d0/d1,-(a7)
00:00002476 7025            	   681: 	moveq #37,d0								; lock semaphore
00:00002478 7204            	   682: 	moveq	#RAND_SEMA,d1
00:0000247A 4E4F            	   683: 	trap #15
00:0000247C 4E7A0FE0        	   684: 	movec coreno,d0							; d0 = core number
00:00002480 5580            	   685: 	sub.l #2,d0									; make 0 to 9
00:00002482 ED88            	   686: 	lsl.l	#6,d0									; allow 64 streams per core
00:00002484 23C0FD0FFD04    	   687: 	move.l d0,RAND_STRM					; select the stream
00:0000248A 23FC12345678FD0F	   688: 	move.l #$12345678,RAND_MZ		; initialize to some value
00:00002492 FD08
00:00002494 23FC98765432FD0F	   689: 	move.l #$98765432,RAND_MW
00:0000249C FD0C
00:0000249E 23FC2E5BF271FD0F	   690: 	move.l #777777777,RAND_NUM	; generate first number
00:000024A6 FD00
00:000024A8 7026            	   691: 	moveq #38,d0								; unlock semaphore
00:000024AA 7204            	   692: 	moveq	#RAND_SEMA,d1
00:000024AC 4E4F            	   693: 	trap #15
00:000024AE 4CDF0003        	   694: 	movem.l	(a7)+,d0/d1
00:000024B2 4E75            	   695: 	rts
                            	   696: 
                            	   697: ;------------------------------------------------------------------------------
                            	   698: ; Returns
                            	   699: ;		d1 = random integer
                            	   700: ;------------------------------------------------------------------------------
                            	   701: 
                            	   702: RandGetNum:
00:000024B4 48E7A000        	   703: 	movem.l	d0/d2,-(a7)
00:000024B8 7204            	   704: 	moveq #RAND_SEMA,d1
00:000024BA 6100013C        	   705: 	bsr T15LockSemaphore
00:000024BE 4E7A0FE0        	   706: 	movec	coreno,d0
00:000024C2 5580            	   707: 	sub.l #2,d0									; make 0 to 9
00:000024C4 ED88            	   708: 	lsl.l	#6,d0
00:000024C6 23C0FD0FFD04    	   709: 	move.l d0,RAND_STRM					; select the stream
00:000024CC 2439FD0FFD00    	   710: 	move.l RAND_NUM,d2					; d2 = random number
00:000024D2 23C2FD0FFD00    	   711: 	move.l d2,RAND_NUM		 		  ; generate next number
00:000024D8 61000124        	   712: 	bsr T15UnlockSemaphore
00:000024DC 2202            	   713: 	move.l d2,d1
00:000024DE 4CDF0005        	   714: 	movem.l	(a7)+,d0/d2
00:000024E2 4E75            	   715: 	rts
                            	   716: 
                            	   717: prng:
00:000024E4 2F02            	   718: 	move.l d2,-(a7)
00:000024E6 2239000408D0    	   719: 	move.l m_z,d1
00:000024EC 2401            	   720: 	move.l d1,d2
00:000024EE C2FC1B39        	   721: 	mulu #6969,d1
00:000024F2 4842            	   722: 	swap d2
00:000024F4 48C2            	   723: 	ext.l d2
00:000024F6 D481            	   724: 	add.l d1,d2
00:000024F8 23C2000408D8    	   725: 	move.l d2,next_m_z
                            	   726: 
00:000024FE 2239000408D4    	   727: 	move.l m_w,d1
00:00002504 2401            	   728: 	move.l d1,d2
00:00002506 C2FC4650        	   729: 	mulu #18000,d1
00:0000250A 4842            	   730: 	swap d2
00:0000250C 48C2            	   731: 	ext.l d2
00:0000250E D481            	   732: 	add.l d1,d2
00:00002510 23C2000408DC    	   733: 	move.l d2,next_m_w
                            	   734: 	
00:00002516 2239000408D0    	   735: 	move.l m_z,d1
00:0000251C 4841            	   736: 	swap d1
00:0000251E 4241            	   737: 	clr.w d1
00:00002520 D2B9000408D4    	   738: 	add.l m_w,d1
00:00002526 23F9000408D80004	   739: 	move.l next_m_z,m_z
00:0000252E 08D0
00:00002530 23F9000408DC0004	   740: 	move.l next_m_w,m_w
00:00002538 08D4
00:0000253A 241F            	   741: 	move.l (a7)+,d2
00:0000253C 4E75            	   742: 	rts
                            	   743: 	
                            	   744: ;------------------------------------------------------------------------------
                            	   745: ; Modifies:
                            	   746: ;		none
                            	   747: ; Returns
                            	   748: ;		fp0 = random float between 0 and 1.
                            	   749: ;------------------------------------------------------------------------------
                            	   750: 
                            	   751: _GetRand:
00:0000253E 2F01            	   752: 	move.l d1,-(sp)
00:00002540 F2276880        	   753: 	fmove.x fp1,-(sp)
00:00002544 6100FF6E        	   754: 	bsr RandGetNum
00:00002548 E289            	   755: 	lsr.l #1,d1									; make number between 0 and 2^31
00:0000254A F2014000        	   756: 	fmove.l d1,fp0
00:0000254E F23C40807FFFFFFF	   757: 	fmove.l #$7FFFFFFF,fp1			; divide by 2^31
00:00002556 F2000420        	   758: 	fdiv fp1,fp0
00:0000255A F21F4880        	   759: 	fmove.x (sp)+,fp1
00:0000255E 221F            	   760: 	move.l (sp)+,d1
00:00002560 4E75            	   761: 	rts
                            	   762: 
                            	   763: ;------------------------------------------------------------------------------
                            	   764: ; RandWait
                            	   765: ;    Wait some random number of clock cycles before returning.
                            	   766: ;------------------------------------------------------------------------------
                            	   767: 
                            	   768: RandWait:
00:00002562 48E7C000        	   769: 	movem.l	d0/d1,-(a7)
00:00002566 6100FF4C        	   770: 	bsr			RandGetNum
00:0000256A 0241000F        	   771: 	andi.w	#15,d1
                            	   772: .0001:
00:0000256E 4E71            	   773: 	nop
00:00002570 51C9FFFC        	   774: 	dbra		d1,.0001
00:00002574 4CDF0003        	   775: 	movem.l	(a7)+,d0/d1
00:00002578 4E75            	   776: 	rts
                            	   777: 
                            	   778: ;------------------------------------------------------------------------------
                            	   779: ; Initialize semaphores
                            	   780: ; - all semaphores are set to unlocked except the first one, which is locked
                            	   781: ; for core #2.
                            	   782: ;
                            	   783: ; Parameters:
                            	   784: ;		<none>
                            	   785: ; Modifies:
                            	   786: ;		<none>
                            	   787: ; Returns:
                            	   788: ;		<none>
                            	   789: ;------------------------------------------------------------------------------
                            	   790: 
                            	   791: InitSemaphores:
00:0000257A 48E74080        	   792: 	movem.l	d1/a0,-(a7)
00:0000257E 41F9FD050000    	   793: 	lea			semamem,a0
00:00002584 217C000200002000	   794: 	move.l	#$20000,$2000(a0)	; lock the first semaphore for core #2, thread #0
00:0000258C 323C00FE        	   795: 	move.w	#254,d1
                            	   796: .0001:
00:00002590 5888            	   797: 	lea			4(a0),a0
00:00002592 42A82000        	   798: 	clr.l		$2000(a0)					; write zeros to unlock
00:00002596 51C9FFF8        	   799: 	dbra		d1,.0001
00:0000259A 4CDF0102        	   800: 	movem.l	(a7)+,d1/a0
00:0000259E 4E75            	   801: 	rts
                            	   802: 
                            	   803: ; -----------------------------------------------------------------------------
                            	   804: ; Parameters:
                            	   805: ;		d1 semaphore number
                            	   806: ;
                            	   807: ; Side Effects:
                            	   808: ;		increments semaphore, saturates at 255
                            	   809: ;
                            	   810: ; Returns:	
                            	   811: ; 	z flag set if semaphore was zero
                            	   812: ; -----------------------------------------------------------------------------
                            	   813: 
                            	   814: ;IncrementSemaphore:
                            	   815: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   816: ;	lea			semamem,a0			; point to semaphore memory
                            	   817: ;	ext.w		d1							; make d1 word value
                            	   818: ;	asl.w		#4,d1						; align to memory
                            	   819: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   820: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   821: ;	rts
                            	   822: 	
                            	   823: ; -----------------------------------------------------------------------------
                            	   824: ; Parameters:
                            	   825: ;		d1 semaphore number
                            	   826: ;
                            	   827: ; Side Effects:
                            	   828: ;		decrements semaphore, saturates at zero
                            	   829: ;
                            	   830: ; Returns:	
                            	   831: ; 	z flag set if semaphore was zero
                            	   832: ; -----------------------------------------------------------------------------
                            	   833: 
                            	   834: ;DecrementSemaphore:
                            	   835: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   836: ;	lea			semamem,a0			; point to semaphore memory
                            	   837: ;	andi.w	#255,d1					; make d1 word value
                            	   838: ;	asl.w		#4,d1						; align to memory
                            	   839: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   840: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   841: ;	rts
                            	   842: 
                            	   843: ; -----------------------------------------------------------------------------
                            	   844: ; Lock a semaphore
                            	   845: ;
                            	   846: ; Parameters:
                            	   847: ;		d0 = key
                            	   848: ;		d1 = semaphore number
                            	   849: ; -----------------------------------------------------------------------------
                            	   850: 
                            	   851: LockSemaphore:
00:000025A0 4E75            	   852: 	rts
00:000025A2 48E74080        	   853: 	movem.l	d1/a0,-(a7)			; save registers
00:000025A6 41F9FD050000    	   854: 	lea			semamem,a0			; point to semaphore memory lock area
00:000025AC 024100FF        	   855: 	andi.w	#255,d1					; make d1 word value
00:000025B0 E549            	   856: 	lsl.w		#2,d1						; align to memory
                            	   857: .0001
00:000025B2 21801000        	   858: 	move.l	d0,(a0,d1.w)		; try and write the semaphore
00:000025B6 B0B01000        	   859: 	cmp.l		(a0,d1.w),d0		; did it lock?
00:000025BA 66F6            	   860: 	bne.s		.0001						; no, try again
00:000025BC 4CDF0102        	   861: 	movem.l	(a7)+,a0/d1			; restore regs
00:000025C0 4E75            	   862: 	rts
                            	   863: 	
                            	   864: ; -----------------------------------------------------------------------------
                            	   865: ; Unlocks a semaphore even if not the owner.
                            	   866: ;
                            	   867: ; Parameters:
                            	   868: ;		d1 semaphore number
                            	   869: ; -----------------------------------------------------------------------------
                            	   870: 
                            	   871: ForceUnlockSemaphore:
00:000025C2 48E74080        	   872: 	movem.l	d1/a0,-(a7)				; save registers
00:000025C6 41F9FD053000    	   873: 	lea			semamem+$3000,a0	; point to semaphore memory read/write area
00:000025CC 024100FF        	   874: 	andi.w	#255,d1						; make d1 word value
00:000025D0 E549            	   875: 	lsl.w		#2,d1							; align to memory
00:000025D2 42B01000        	   876: 	clr.l		(a0,d1.w)					; write zero to unlock
00:000025D6 4CDF0102        	   877: 	movem.l	(a7)+,a0/d1				; restore regs
00:000025DA 4E75            	   878: 	rts
                            	   879: 
                            	   880: ; -----------------------------------------------------------------------------
                            	   881: ; Unlocks a semaphore. Must be the owner to have effect.
                            	   882: ; Three cases:
                            	   883: ;	1) the owner, the semaphore will be reset to zero
                            	   884: ;	2) not the owner, the write will be ignored
                            	   885: ; 3) already unlocked, the write will be ignored
                            	   886: ;
                            	   887: ; Parameters:
                            	   888: ;		d0 = key
                            	   889: ;		d1 = semaphore number
                            	   890: ; -----------------------------------------------------------------------------
                            	   891: 
                            	   892: UnlockSemaphore:
00:000025DC 60E4            	   893: 	bra ForceUnlockSemaphore
00:000025DE 48E74080        	   894: 	movem.l	d1/a0,-(a7)				; save registers
00:000025E2 41F9FD051000    	   895: 	lea			semamem+$1000,a0	; point to semaphore memory unlock area
00:000025E8 024100FF        	   896: 	andi.w	#255,d1						; make d1 word value
00:000025EC E549            	   897: 	lsl.w		#2,d1							; align to memory
00:000025EE 21801000        	   898: 	move.l	d0,(a0,d1.w)			; write matching value to unlock
00:000025F2 4CDF0102        	   899: 	movem.l	(a7)+,a0/d1				; restore regs
00:000025F6 4E75            	   900: 	rts
                            	   901: 
                            	   902: ; -----------------------------------------------------------------------------
                            	   903: ; Parameters:
                            	   904: ;		d1 = semaphore to lock / unlock
                            	   905: ; -----------------------------------------------------------------------------
                            	   906: 
                            	   907: T15LockSemaphore:	
00:000025F8 4E7A0012        	   908: 	movec tr,d0
00:000025FC 60A2            	   909: 	bra LockSemaphore
                            	   910: 
                            	   911: T15UnlockSemaphore:
00:000025FE 4E7A0012        	   912: 	movec tr,d0
00:00002602 60D8            	   913: 	bra UnlockSemaphore
                            	   914: 
                            	   915: ; Parameters:
                            	   916: ; 	a1 = pointer to input text
                            	   917: ; 	d1 = input stride (how many bytes to advance per character)
                            	   918: ; Returns:
                            	   919: ;		a1 = updated text pointer
                            	   920: ;		d1 = number of digits in number
                            	   921: ;		fp0 = float number
                            	   922: 
                            	   923: T15GetFloat:
00:00002604 48E78080        	   924: 	movem.l d0/a0,-(a7)
00:00002608 2049            	   925: 	move.l a1,a0
00:0000260A 2001            	   926: 	move.l d1,d0
00:0000260C 61006E9A        	   927: 	bsr _GetFloat
00:00002610 2248            	   928: 	move.l a0,a1
00:00002612 2200            	   929: 	move.l d0,d1
00:00002614 4CDF0101        	   930: 	movem.l (a7)+,d0/a0
00:00002618 4E75            	   931: 	rts
                            	   932: 
                            	   933: T15Abort:
00:0000261A 61006F64        	   934: 	bsr DisplayByte
00:0000261E 43FA7BF0        	   935: 	lea msgStackCanary,a1
00:00002622 610054FE        	   936: 	bsr DisplayStringCRLF
00:00002626 60005B34        	   937: 	bra Monitor
                            	   938: 
                            	   939: chk_exception:
00:0000262A 222F0002        	   940: 	move.l 2(sp),d1
00:0000262E 61006F44        	   941: 	bsr DisplayTetra
00:00002632 43FA7BCE        	   942: 	lea msgChk,a1
00:00002636 610054EA        	   943: 	bsr DisplayStringCRLF
00:0000263A 60005B20        	   944: 	bra Monitor
                            	   945: 
                            	   946: ; -----------------------------------------------------------------------------
                            	   947: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   948: ; -----------------------------------------------------------------------------
                            	   949: 
                            	   950: Delay3s:
00:0000263E 203C002DC6C0    	   951: 	move.l	#3000000,d0		; this should take a few seconds to loop
00:00002644 41F9FD0FFF00    	   952: 	lea			leds,a0				; a0 = address of LED output register
00:0000264A 6002            	   953: 	bra			dly3s1				; branch to the loop
                            	   954: dly3s2:	
00:0000264C 4840            	   955: 	swap		d0						; loop is larger than 16-bits
                            	   956: dly3s1:
00:0000264E 2200            	   957: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
00:00002650 E199            	   958: 	rol.l		#8,d1					; could use swap here, but lets test rol
00:00002652 E199            	   959: 	rol.l		#8,d1
00:00002654 1081            	   960: 	move.b	d1,(a0)				; set the LEDs
00:00002656 51C8FFF6        	   961: 	dbra		d0,dly3s1			; decrement and branch back
00:0000265A 4840            	   962: 	swap		d0
00:0000265C 51C8FFEE        	   963: 	dbra		d0,dly3s2
00:00002660 4E75            	   964: 	rts
                            	   965: 
                            	   966: Delay3s2:
00:00002662 4E7A0FE0        	   967: 	movec		coreno,d0			; vary delay by core to stagger startup
00:00002666 E188            	   968: 	lsl.l		#8,d0
00:00002668 0680002DC6C0    	   969: 	addi.l	#3000000,d0		; this should take a few seconds to loop
00:0000266E 6002            	   970: 	bra			.0001					; branch to the loop
                            	   971: .0002	
00:00002670 4840            	   972: 	swap		d0						; loop is larger than 16-bits
                            	   973: .0001
00:00002672 51C8FFFE        	   974: 	dbra		d0,.0001			; decrement and branch back
00:00002676 4840            	   975: 	swap		d0
00:00002678 51C8FFF6        	   976: 	dbra		d0,.0002
00:0000267C 4E75            	   977: 	rts
                            	   978: 
                            	   979: 	include "cputest.x68"

Source: "cputest.x68"
                            	     1: ;; @name cputest.s Tests 68000 cpu
                            	     2: ;
                            	     3: ; Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: ;
                            	     5: ; Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: ; - comment lines must start in first column
                            	     7: ; - replaced org instructions by suitable rept
                            	     8: ; - copy vectors to low memory at startup
                            	     9: ; - replaced jsr/jmp by bsr/bra for position independence
                            	    10: ; - replaced move.l by moveq whenever possible
                            	    11: ; - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: ; - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: ; The last three modifications are required to make the test work;
                            	    14: ; apparently the original assembler was somewhat smarter then
                            	    15: ; the Microware OS-9 assembler and did this automatically.
                            	    16: ;
                            	    17: ; In some cases the opcodes of the test are used as test data!
                            	    18: ;
                            	    19: ; Original file header follows.
                            	    20: ;
                            	    21: ;  File Name   :  MCL68 Opcode Tests
                            	    22: ;  Used on     :
                            	    23: ;  Author      :  Ted Fried, MicroCore Labs
                            	    24: ;  Creation    :  7/14/2020
                            	    25: ;
                            	    26: ;   Description:
                            	    27: ;   ============
                            	    28: ;
                            	    29: ;  Program to test all of the Motorola 68000's opcodes.
                            	    30: ;
                            	    31: ;  If failures are detected, the code will immediately loop on itself.
                            	    32: ;  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: ;
                            	    34: ;  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: ;
                            	    36: ;------------------------------------------------------------------------
                            	    37: ;
                            	    38: ; Modification History:
                            	    39: ; =====================
                            	    40: ;
                            	    41: ; Revision 1 7/14/2020
                            	    42: ; Initial revision
                            	    43: ;
                            	    44: ;
                            	    45: ;------------------------------------------------------------------------
                            	    46: ;
                            	    47: ; Copyright (c) 2020 Ted Fried
                            	    48: ;
                            	    49: ; Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: ; of this software and associated documentation files (the "Software"), to deal
                            	    51: ; in the Software without restriction, including without limitation the rights
                            	    52: ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: ; copies of the Software, and to permit persons to whom the Software is
                            	    54: ; furnished to do so, subject to the following conditions:
                            	    55: ;
                            	    56: ; The above copyright notice and this permission notice shall be included in all
                            	    57: ; copies or substantial portions of the Software.
                            	    58: ;
                            	    59: ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: ; SOFTWARE.
                            	    66: 
                            	    67: ; Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: ;	data
                            	    70: ;	dc.l		$0001FFFC						; top of local ram area
                            	    71: ;	dc.l		start
                            	    72: 
                            	    73: ;    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: ;	move.l	$FFFFFFE0,d0		; get core number
                            	    76: ;	cmpi.b	#2,d0
                            	    77: ;	bne			do_nothing
                            	    78: 
                            	    79: ;	lea			EXCEPTION_6,a0	; check exception vector
                            	    80: ;	move.l	a0,6*4
                            	    81: ;	lea			EXCEPTION_7,a0	; TRAPV exception vector
                            	    82: ;	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
00:0000267E 610000F6        	    85: 	bsr	op_ORI_TO_CCR
00:00002682 61000114        	    86: 	bsr	op_ORI_TO_SR
00:00002686 61000132        	    87: 	bsr	op_EORI_TO_CCR
00:0000268A 61000154        	    88: 	bsr	op_EORI_TO_SR
00:0000268E 61000176        	    89: 	bsr	op_ANDI_TO_CCR
00:00002692 61000198        	    90: 	bsr	op_ANDI_TO_SR
00:00002696 610001BA        	    91: 	bsr	op_BTST
00:0000269A 61000560        	    92: 	bsr	op_BCHG
00:0000269E 610008C4        	    93: 	bsr	op_BCLR
00:000026A2 61000C0E        	    94: 	bsr	op_BSET
00:000026A6 61000F52        	    95: 	bsr op_MOVEP
00:000026AA 61000FDA        	    96: 	bsr op_BOOL_I
00:000026AE 610011BE        	    97: 	bsr op_CMP_I
00:000026B2 610013A2        	    98: 	bsr op_ADD_I
00:000026B6 61001524        	    99: 	bsr op_SUB_I
00:000026BA 610016A6        	   100: 	bsr op_MOVE
00:000026BE 610018AE        	   101: 	bsr op_MOVE_xxx_FLAGS
00:000026C2 61001A9E        	   102: 	bsr op_EXT
00:000026C6 61001AC6        	   103: 	bsr op_SWAP
00:000026CA 61001AD8        	   104: 	bsr op_LEAPEA
00:000026CE 61001B80        	   105: 	bsr op_TAS
00:000026D2 61001BA2        	   106: 	bsr op_TST
00:000026D6 61001BDC        	   107: 	bsr op_LINKS
00:000026DA 61001BF6        	   108: 	bsr op_MOVE_USP
00:000026DE 61001C02        	   109: 	bsr op_CHK
00:000026E2 61001C48        	   110: 	bsr op_NEGS
00:000026E6 61001FD2        	   111: 	bsr op_MOVEM
                            	   112: ;	bsr op_ABCD
                            	   113: ;	bsr op_SBCD
                            	   114: ;	bsr op_NBCD
00:000026EA 6100256E        	   115: 	bsr op_TRAPV
00:000026EE 61002586        	   116: 	bsr op_RTR
00:000026F2 61001144        	   117: 	bsr op_BSR
00:000026F6 610025A0        	   118: 	bsr op_BCC
00:000026FA 6100261C        	   119: 	bsr op_DBCC
00:000026FE 6100263E        	   120: 	bsr op_SCC
00:00002702 6100266A        	   121: 	bsr op_ADDQ
00:00002706 61002720        	   122: 	bsr op_SUBQ
00:0000270A 610027D6        	   123: 	bsr op_MOVEQ
                            	   124: ;	bsr op_DIVU
                            	   125: ;	bsr op_DIVS
00:0000270E 61002892        	   126: 	bsr op_OR
00:00002712 61002978        	   127: 	bsr op_AND
00:00002716 61002A5E        	   128: 	bsr op_EOR
00:0000271A 61002AD0        	   129: 	bsr op_CMP
00:0000271E 61002B42        	   130: 	bsr op_CMPA
00:00002722 61002BA4        	   131: 	bsr op_CMPM
00:00002726 61002C46        	   132: 	bsr op_ADD
00:0000272A 61002D2C        	   133: 	bsr op_SUB
00:0000272E 61002E12        	   134: 	bsr op_ADDA
00:00002732 61002E5A        	   135: 	bsr op_SUBA
00:00002736 61002EA2        	   136: 	bsr op_ADDX	
00:0000273A 61002FAE        	   137: 	bsr op_SUBX
00:0000273E 610030BA        	   138: 	bsr op_MULU
00:00002742 61003102        	   139: 	bsr op_MULS
00:00002746 6100314A        	   140: 	bsr op_EXG
00:0000274A 610031B4        	   141: 	bsr op_ROx
00:0000274E 610033E6        	   142: 	bsr op_ROXx
00:00002752 61003618        	   143: 	bsr op_SHIFTS
00:00002756 61003856        	   144: 	bsr op_SHIFTS2
                            	   145: 
00:0000275A 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
00:0000275C 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
00:0000275E 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
00:00002764 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: ;' Exception Vector = 6   CHK Instruction
                            	   164: ;
                            	   165: ;	align	4
                            	   166: EXCEPTION_6:
00:00002766 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:0000276C 4E73            	   168: 	rte
                            	   169: 
                            	   170: ; Exception Vector = 7   TRAPV Instruction
                            	   171: ;
                            	   172: ;	align	4
                            	   173: EXCEPTION_7:
00:0000276E 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:00002774 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
00:00002776 003C00FF        	   184:     ori.b #$FF,CCR
00:0000277A 6AFE            	   185:     bpl.s *                   ; branch if Z clear
00:0000277C 66FE            	   186:     bne.s *                   ; branch if N clear
00:0000277E 68FE            	   187:     bvc.s *                   ; branch if V clear
00:00002780 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
00:00002782 44FC0000        	   190:     move #$00,CCR
00:00002786 003C0000        	   191:     ori.b #$00,CCR
00:0000278A 67FE            	   192:     beq.s *                   ; branch if Z set
00:0000278C 6BFE            	   193:     bmi.s *                   ; branch if N set
00:0000278E 69FE            	   194:     bvs.s *                   ; branch if V set
00:00002790 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
00:00002792 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
00:00002796 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
00:00002798 007C2FFF        	   209:     ori.w #$2FFF,SR
00:0000279C 6AFE            	   210:     bpl.s *                   * branch if Z clear
00:0000279E 66FE            	   211:     bne.s *                   * branch if N clear
00:000027A0 68FE            	   212:     bvc.s *                   * branch if V clear
00:000027A2 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
00:000027A4 46FC2000        	   215:     move.w #$2000,SR
00:000027A8 007C0000        	   216:     ori.w #$0000,SR
00:000027AC 67FE            	   217:     beq.s *                   * branch if Z set
00:000027AE 6BFE            	   218:     bmi.s *                   * branch if N set
00:000027B0 69FE            	   219:     bvs.s *                   * branch if V set
00:000027B2 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
00:000027B4 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
00:000027B8 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
00:000027BA 44FC0000        	   233:     move #$00,CCR
00:000027BE 0A3C00FF        	   234:     eori.b #$FF,CCR
00:000027C2 6AFE            	   235:     bpl.s *                   ; branch if Z clear
00:000027C4 66FE            	   236:     bne.s *                   ; branch if N clear
00:000027C6 68FE            	   237:     bvc.s *                   ; branch if V clear
00:000027C8 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
00:000027CA 44FC0000        	   240:     move #$00,CCR
00:000027CE 0A3C0000        	   241:     eori.b #$00,CCR
00:000027D2 67FE            	   242:     beq.s *                   ; branch if Z set
00:000027D4 6BFE            	   243:     bmi.s *                   ; branch if N set
00:000027D6 69FE            	   244:     bvs.s *                   ; branch if V set
00:000027D8 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
00:000027DA 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
00:000027DE 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
00:000027E0 46FC2000        	   260:     move.w #$2000,SR
00:000027E4 0A7C0FFF        	   261:     eori.w #$0FFF,SR
00:000027E8 6AFE            	   262:     bpl.s *                   * branch if Z clear
00:000027EA 66FE            	   263:     bne.s *                   * branch if N clear
00:000027EC 68FE            	   264:     bvc.s *                   * branch if V clear
00:000027EE 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
00:000027F0 46FC2000        	   267:     move.w #$2000,SR
00:000027F4 0A7C0000        	   268:     eori.w #$0000,SR
00:000027F8 67FE            	   269:     beq.s *                   * branch if Z set
00:000027FA 6BFE            	   270:     bmi.s *                   * branch if N set
00:000027FC 69FE            	   271:     bvs.s *                   * branch if V set
00:000027FE 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
00:00002800 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
00:00002804 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
00:00002806 44FC00FF        	   287:     move #$FF,CCR
00:0000280A 023C00FF        	   288:     andi.b #$FF,CCR
00:0000280E 6AFE            	   289:     bpl.s *                   * branch if Z clear
00:00002810 66FE            	   290:     bne.s *                   * branch if N clear
00:00002812 68FE            	   291:     bvc.s *                   * branch if V clear
00:00002814 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
00:00002816 44FC00FF        	   294:     move #$FF,CCR
00:0000281A 023C0000        	   295:     andi.b #$00,CCR
00:0000281E 67FE            	   296:     beq.s *                   * branch if Z set
00:00002820 6BFE            	   297:     bmi.s *                   * branch if N set
00:00002822 69FE            	   298:     bvs.s *                   * branch if V set
00:00002824 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
00:00002826 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
00:0000282A 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
00:0000282C 46FC20FF        	   313:     move.w #$20FF,SR
00:00002830 027CFFFF        	   314:     andi.w #$FFFF,SR
00:00002834 6AFE            	   315:     bpl.s *                   * branch if Z clear
00:00002836 66FE            	   316:     bne.s *                   * branch if N clear
00:00002838 68FE            	   317:     bvc.s *                   * branch if V clear
00:0000283A 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
00:0000283C 46FC20FF        	   320:     move.w #$20FF,SR
00:00002840 027CFF00        	   321:     andi.w #$FF00,SR
00:00002844 67FE            	   322:     beq.s *                   * branch if Z set
00:00002846 6BFE            	   323:     bmi.s *                   * branch if N set
00:00002848 69FE            	   324:     bvs.s *                   * branch if V set
00:0000284A 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
00:0000284C 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
00:00002850 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
00:00002852 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
00:00002858 08000000        	   343:             btst.l #0,d0
00:0000285C 67FE            	   344:             beq.s *               * branch if Z set
00:0000285E 08000001        	   345:             btst.l #1,d0              *
00:00002862 66FE            	   346:             bne.s *               * branch if Z clear
00:00002864 0800001F        	   347:             btst.l #31,d0             *
00:00002868 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
00:0000286A 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000286E 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
00:00002872 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002874 08100000        	   355:             btst.b #0,(a0)
00:00002878 67FE            	   356:             beq.s *               * branch if Z set
00:0000287A 08100001        	   357:             btst.b #1,(a0)            *
00:0000287E 66FE            	   358:             bne.s *               * branch if Z clear
00:00002880 08100007        	   359:             btst.b #7,(a0)            *
00:00002884 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
00:00002886 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000288A 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
00:0000288E 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
00:00002892 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
00:00002896 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000289A 08180000        	   369:             btst.b #0,(a0)+
00:0000289E 67FE            	   370:             beq.s *               * branch if Z set
00:000028A0 08180001        	   371:             btst.b #1,(a0)+           *
00:000028A4 66FE            	   372:             bne.s *               * branch if Z clear
00:000028A6 08180007        	   373:             btst.b #7,(a0)+           *
00:000028AA 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
00:000028AC 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
00:000028B0 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
00:000028B4 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
00:000028B8 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
00:000028BC 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
00:000028C0 08200000        	   383:             btst.b #0,-(a0)
00:000028C4 67FE            	   384:             beq.s *               * branch if Z set
00:000028C6 08200001        	   385:             btst.b #1,-(a0)           *
00:000028CA 66FE            	   386:             bne.s *               * branch if Z clear
00:000028CC 08200007        	   387:             btst.b #7,-(a0)           *
00:000028D0 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
00:000028D2 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
00:000028D6 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
00:000028DA 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
00:000028DE 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
00:000028E2 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
00:000028E6 08100000        	   397:             btst.b #0,0(a0)
00:000028EA 67FE            	   398:             beq.s *               * branch if Z set
00:000028EC 082800010001    	   399:             btst.b #1,1(a0)           *
00:000028F2 66FE            	   400:             bne.s *               * branch if Z clear
00:000028F4 082800070002    	   401:             btst.b #7,2(a0)           *
00:000028FA 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
00:000028FC 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
00:00002900 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
00:00002902 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
00:00002906 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
00:00002908 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
00:0000290A 083000000000    	   411:             btst.b #0,0(a0,d0.w)
00:00002910 67FE            	   412:             beq.s *               * branch if Z set
00:00002912 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
00:00002918 66FE            	   414:             bne.s *               * branch if Z clear
00:0000291A 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
00:00002920 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
00:00002922 083000000800    	   418:             btst.b #0,0(a0,d0.l)
00:00002928 67FE            	   419:             beq.s *               * branch if Z set
00:0000292A 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
00:00002930 66FE            	   421:             bne.s *               * branch if Z clear
00:00002932 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
00:00002938 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
00:0000293A 083000009000    	   425:             btst.b #0,0(a0,a1.w)
00:00002940 67FE            	   426:             beq.s *               * branch if Z set
00:00002942 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
00:00002948 66FE            	   428:             bne.s *               * branch if Z clear
00:0000294A 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
00:00002950 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
00:00002952 083000009800    	   432:             btst.b #0,0(a0,a1.l)
00:00002958 67FE            	   433:             beq.s *               * branch if Z set
00:0000295A 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
00:00002960 66FE            	   435:             bne.s *               * branch if Z clear
00:00002962 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
00:00002968 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
00:0000296A 083800000100    	   441:             btst.b #0,$0100
00:00002970 67FE            	   442:             beq.s *               * branch if Z set
00:00002972 083800010101    	   443:             btst.b #1,$0101           *
00:00002978 66FE            	   444:             bne.s *               * branch if Z clear
00:0000297A 083800070102    	   445:             btst.b #7,$0102           *
00:00002980 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
00:00002982 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
00:00002988 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
00:0000298C 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
00:00002990 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
00:00002994 083900000000F100	   454:             btst.b #0,$F100
00:0000299C 67FE            	   455:             beq.s *               * branch if Z set
00:0000299E 083900010000F101	   456:             btst.b #1,$F101       *
00:000029A6 66FE            	   457:             bne.s *               * branch if Z clear
00:000029A8 083900070000F102	   458:             btst.b #7,$F102       *
00:000029B0 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
00:000029B2 4BFAFE9E        	   463:             lea op_BTST(pc),a5
00:000029B6 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
00:000029BC 66FE            	   465:             bne.s *               * branch if Z clear
00:000029BE 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
00:000029C4 67FE            	   467:             beq.s *               * branch if Z set
00:000029C6 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
00:000029CC 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
00:000029CE 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
00:000029D2 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
00:000029D4 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
00:000029D8 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
00:000029DA 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
00:000029DC 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:000029E2 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
00:000029E4 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
00:000029E8 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:000029EE 67FE            	   484:             beq.s *               * branch if Z set
00:000029F0 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:000029F6 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
00:000029F8 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:000029FE 66FE            	   489:             bne.s *               * branch if Z clear
00:00002A00 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:00002A06 67FE            	   491:             beq.s *               * branch if Z set
00:00002A08 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:00002A0E 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
00:00002A10 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:00002A16 66FE            	   496:             bne.s *               * branch if Z clear
00:00002A18 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:00002A1E 67FE            	   498:             beq.s *               * branch if Z set
00:00002A20 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:00002A26 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
00:00002A28 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:00002A2E 66FE            	   503:             bne.s *               * branch if Z clear
00:00002A30 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:00002A36 67FE            	   505:             beq.s *               * branch if Z set
00:00002A38 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:00002A3E 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
00:00002A40 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
00:00002A46 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
00:00002A48 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
00:00002A4A 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
00:00002A4C 0B00            	   519:             btst.l d5,d0
00:00002A4E 67FE            	   520:             beq.s *               * branch if Z set
00:00002A50 0D00            	   521:             btst.l d6,d0              *
00:00002A52 66FE            	   522:             bne.s *               * branch if Z clear
00:00002A54 0F00            	   523:             btst.l d7,d0             *
00:00002A56 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
00:00002A58 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
00:00002A5A 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
00:00002A5C 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
00:00002A5E 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A62 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
00:00002A66 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002A68 0B10            	   534:             btst.b d5,(a0)
00:00002A6A 67FE            	   535:             beq.s *               * branch if Z set
00:00002A6C 0D10            	   536:             btst.b d6,(a0)            *
00:00002A6E 66FE            	   537:             bne.s *               * branch if Z clear
00:00002A70 0F10            	   538:             btst.b d7,(a0)            *
00:00002A72 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
00:00002A74 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A78 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
00:00002A7C 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
00:00002A80 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
00:00002A84 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A88 0B18            	   550:             btst.b d5,(a0)+
00:00002A8A 67FE            	   551:             beq.s *               * branch if Z set
00:00002A8C 0D18            	   552:             btst.b d6,(a0)+           *
00:00002A8E 66FE            	   553:             bne.s *               * branch if Z clear
00:00002A90 0F18            	   554:             btst.b d7,(a0)+           *
00:00002A92 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
00:00002A94 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
00:00002A98 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
00:00002A9C 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
00:00002AA0 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
00:00002AA4 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
00:00002AA8 0B20            	   564:             btst.b d5,-(a0)
00:00002AAA 67FE            	   565:             beq.s *               * branch if Z set
00:00002AAC 0D20            	   566:             btst.b d6,-(a0)           *
00:00002AAE 66FE            	   567:             bne.s *               * branch if Z clear
00:00002AB0 0F20            	   568:             btst.b d7,-(a0)           *
00:00002AB2 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
00:00002AB4 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
00:00002AB8 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
00:00002ABC 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
00:00002AC0 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
00:00002AC4 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
00:00002AC8 0B10            	   578:             btst.b d5,0(a0)
00:00002ACA 67FE            	   579:             beq.s *               * branch if Z set
00:00002ACC 0D280001        	   580:             btst.b d6,1(a0)           *
00:00002AD0 66FE            	   581:             bne.s *               * branch if Z clear
00:00002AD2 0F280002        	   582:             btst.b d7,2(a0)           *
00:00002AD6 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
00:00002AD8 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
00:00002ADC 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
00:00002ADE 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
00:00002AE2 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
00:00002AE4 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
00:00002AE6 0B300000        	   592:             btst.b d5,0(a0,d0.w)
00:00002AEA 67FE            	   593:             beq.s *               * branch if Z set
00:00002AEC 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
00:00002AF0 66FE            	   595:             bne.s *               * branch if Z clear
00:00002AF2 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
00:00002AF6 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
00:00002AF8 0B300800        	   599:             btst.b d5,0(a0,d0.l)
00:00002AFC 67FE            	   600:             beq.s *               * branch if Z set
00:00002AFE 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
00:00002B02 66FE            	   602:             bne.s *               * branch if Z clear
00:00002B04 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
00:00002B08 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
00:00002B0A 0B309000        	   606:             btst.b d5,0(a0,a1.w)
00:00002B0E 67FE            	   607:             beq.s *               * branch if Z set
00:00002B10 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
00:00002B14 66FE            	   609:             bne.s *               * branch if Z clear
00:00002B16 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
00:00002B1A 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
00:00002B1C 0B309800        	   613:             btst.b d5,0(a0,a1.l)
00:00002B20 67FE            	   614:             beq.s *               * branch if Z set
00:00002B22 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
00:00002B26 66FE            	   616:             bne.s *               * branch if Z clear
00:00002B28 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
00:00002B2C 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
00:00002B2E 0B380100        	   622:             btst.b d5,$0100
00:00002B32 67FE            	   623:             beq.s *               * branch if Z set
00:00002B34 0D380101        	   624:             btst.b d6,$0101           *
00:00002B38 66FE            	   625:             bne.s *               * branch if Z clear
00:00002B3A 0F380102        	   626:             btst.b d7,$0102           *
00:00002B3E 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
00:00002B40 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
00:00002B46 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
00:00002B4A 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
00:00002B4E 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
00:00002B52 0B390000F100    	   635:             btst.b d5,$F100
00:00002B58 67FE            	   636:             beq.s *               * branch if Z set
00:00002B5A 0D390000F101    	   637:             btst.b d6,$F101       *
00:00002B60 66FE            	   638:             bne.s *               * branch if Z clear
00:00002B62 0F390000F102    	   639:             btst.b d7,$F102       *
00:00002B68 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
00:00002B6A 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
00:00002B6C 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
00:00002B6E 4BFAFCE2        	   646:             lea op_BTST(pc),a5
00:00002B72 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
00:00002B76 66FE            	   648:             bne.s *               * branch if Z clear
00:00002B78 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
00:00002B7C 67FE            	   650:             beq.s *               * branch if Z set
00:00002B7E 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
00:00002B82 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
00:00002B84 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
00:00002B88 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
00:00002B8A 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
00:00002B8E 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
00:00002B90 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
00:00002B92 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
00:00002B94 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
00:00002B96 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:00002B9A 67FE            	   665:             beq.s *               * branch if Z set
00:00002B9C 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
00:00002BA0 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:00002BA4 67FE            	   668:             beq.s *               * branch if Z set
00:00002BA6 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:00002BAA 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
00:00002BAC 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:00002BB0 67FE            	   673:             beq.s *               * branch if Z set
00:00002BB2 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:00002BB6 67FE            	   675:             beq.s *               * branch if Z set
00:00002BB8 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:00002BBC 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
00:00002BBE 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:00002BC2 67FE            	   680:             beq.s *               * branch if Z set
00:00002BC4 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:00002BC8 67FE            	   682:             beq.s *               * branch if Z set
00:00002BCA 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:00002BCE 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
00:00002BD0 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:00002BD4 67FE            	   687:             beq.s *               * branch if Z set
00:00002BD6 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:00002BDA 67FE            	   689:             beq.s *               * branch if Z set
00:00002BDC 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:00002BE0 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
00:00002BE2 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
00:00002BE4 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
00:00002BE6 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
00:00002BE8 0B3C0088        	   699:             btst.b d5,#$88
00:00002BEC 66FE            	   700:             bne.s *               * branch if Z clear
00:00002BEE 0D3C0088        	   701:             btst.b d6,#$88
00:00002BF2 67FE            	   702:             beq.s *               * branch if Z set
00:00002BF4 0F3C0088        	   703:             btst.b d7,#$88
00:00002BF8 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
00:00002BFA 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
00:00002BFC 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
00:00002C02 08400000        	   721:             bchg.l #0,d0
00:00002C06 67FE            	   722:             beq.s *               * branch if Z set
00:00002C08 08400001        	   723:             bchg.l #1,d0              *
00:00002C0C 66FE            	   724:             bne.s *               * branch if Z clear
00:00002C0E 0840001F        	   725:             bchg.l #31,d0             *
00:00002C12 67FE            	   726:             beq.s *               * branch if Z set
00:00002C14 0C8000000002    	   727:             cmpi.l #$00000002,d0
00:00002C1A 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
00:00002C1C 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002C20 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
00:00002C24 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002C26 08500000        	   735:             bchg.b #0,(a0)
00:00002C2A 67FE            	   736:             beq.s *               * branch if Z set
00:00002C2C 08500001        	   737:             bchg.b #1,(a0)            *
00:00002C30 66FE            	   738:             bne.s *               * branch if Z clear
00:00002C32 08500007        	   739:             bchg.b #7,(a0)            *
00:00002C36 67FE            	   740:             beq.s *               * branch if Z set
00:00002C38 0C100002        	   741:             cmpi.b #$02,(a0)
00:00002C3C 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
00:00002C3E 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002C42 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
00:00002C46 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
00:00002C4A 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
00:00002C4E 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002C52 08580000        	   750:             bchg.b #0,(a0)+
00:00002C56 67FE            	   751:             beq.s *               * branch if Z set
00:00002C58 08580001        	   752:             bchg.b #1,(a0)+           *
00:00002C5C 66FE            	   753:             bne.s *               * branch if Z clear
00:00002C5E 08580007        	   754:             bchg.b #7,(a0)+           *
00:00002C62 67FE            	   755:             beq.s *               * branch if Z set
00:00002C64 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002C68 4A18            	   757:             cmpi.b #$00,(a0)+
00:00002C6A 66FE            	   758:             bne.s *               * branch if Z clear
00:00002C6C 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
00:00002C70 66FE            	   760:             bne.s *               * branch if Z clear
00:00002C72 4A18            	   761:             cmpi.b #$00,(a0)+
00:00002C74 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
00:00002C76 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
00:00002C7A 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
00:00002C7E 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
00:00002C82 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
00:00002C86 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
00:00002C8A 08600000        	   770:             bchg.b #0,-(a0)
00:00002C8E 67FE            	   771:             beq.s *               * branch if Z set
00:00002C90 08600001        	   772:             bchg.b #1,-(a0)           *
00:00002C94 66FE            	   773:             bne.s *               * branch if Z clear
00:00002C96 08600007        	   774:             bchg.b #7,-(a0)           *
00:00002C9A 67FE            	   775:             beq.s *               * branch if Z set
00:00002C9C 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002CA0 4A20            	   777:             cmpi.b #$00,-(a0)
00:00002CA2 66FE            	   778:             bne.s *               * branch if Z clear
00:00002CA4 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
00:00002CA8 66FE            	   780:             bne.s *               * branch if Z clear
00:00002CAA 4A20            	   781:             cmpi.b #$00,-(a0)
00:00002CAC 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
00:00002CAE 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
00:00002CB2 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
00:00002CB6 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
00:00002CBA 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
00:00002CBE 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
00:00002CC2 08500000        	   791:             bchg.b #0,0(a0)
00:00002CC6 67FE            	   792:             beq.s *               * branch if Z set
00:00002CC8 086800010001    	   793:             bchg.b #1,1(a0)           *
00:00002CCE 66FE            	   794:             bne.s *               * branch if Z clear
00:00002CD0 086800070002    	   795:             bchg.b #7,2(a0)           *
00:00002CD6 67FE            	   796:             beq.s *               * branch if Z set
00:00002CD8 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002CDC 4A18            	   798:             cmpi.b #$00,(a0)+
00:00002CDE 66FE            	   799:             bne.s *               * branch if Z clear
00:00002CE0 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
00:00002CE4 66FE            	   801:             bne.s *               * branch if Z clear
00:00002CE6 4A18            	   802:             cmpi.b #$00,(a0)+
00:00002CE8 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
00:00002CEA 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
00:00002CEE 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
00:00002CF0 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
00:00002CF4 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
00:00002CF6 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
00:00002CF8 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
00:00002CFE 66FE            	   813:             bne.s *               * branch if Z clear
00:00002D00 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
00:00002D06 67FE            	   815:             beq.s *               * branch if Z set
00:00002D08 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
00:00002D0E 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
00:00002D10 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
00:00002D16 67FE            	   820:             beq.s *               * branch if Z set
00:00002D18 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
00:00002D1E 66FE            	   822:             bne.s *               * branch if Z clear
00:00002D20 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
00:00002D26 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
00:00002D28 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
00:00002D2E 66FE            	   827:             bne.s *               * branch if Z clear
00:00002D30 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
00:00002D36 67FE            	   829:             beq.s *               * branch if Z set
00:00002D38 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
00:00002D3E 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
00:00002D40 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
00:00002D46 67FE            	   834:             beq.s *               * branch if Z set
00:00002D48 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
00:00002D4E 66FE            	   836:             bne.s *               * branch if Z clear
00:00002D50 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
00:00002D56 67FE            	   838:             beq.s *               * branch if Z set
00:00002D58 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D5C 4A18            	   840:             cmpi.b #$00,(a0)+
00:00002D5E 66FE            	   841:             bne.s *               * branch if Z clear
00:00002D60 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
00:00002D64 66FE            	   843:             bne.s *               * branch if Z clear
00:00002D66 4A18            	   844:             cmpi.b #$00,(a0)+
00:00002D68 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
00:00002D6A 087800000100    	   849:             bchg.b #0,$0100
00:00002D70 66FE            	   850:             bne.s *               * branch if Z clear
00:00002D72 087800010101    	   851:             bchg.b #1,$0101           *
00:00002D78 67FE            	   852:             beq.s *               * branch if Z set
00:00002D7A 087800070102    	   853:             bchg.b #7,$0102           *
00:00002D80 66FE            	   854:             bne.s *               * branch if Z clear
00:00002D82 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D86 0C180001        	   856:             cmpi.b #$01,(a0)+
00:00002D8A 66FE            	   857:             bne.s *               * branch if Z clear
00:00002D8C 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
00:00002D90 66FE            	   859:             bne.s *               * branch if Z clear
00:00002D92 0C180080        	   860:             cmpi.b #$80,(a0)+
00:00002D96 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
00:00002D98 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
00:00002D9E 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
00:00002DA2 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
00:00002DA6 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
00:00002DAA 087900000000F100	   868:             bchg.b #0,$F100
00:00002DB2 67FE            	   869:             beq.s *               * branch if Z set
00:00002DB4 087900010000F101	   870:             bchg.b #1,$F101       *
00:00002DBC 66FE            	   871:             bne.s *               * branch if Z clear
00:00002DBE 087900070000F102	   872:             bchg.b #7,$F102       *
00:00002DC6 67FE            	   873:             beq.s *               * branch if Z set
00:00002DC8 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002DCC 0C180001        	   875:             cmpi.b #$01,(a0)+
00:00002DD0 66FE            	   876:             bne.s *               * branch if Z clear
00:00002DD2 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
00:00002DD6 66FE            	   878:             bne.s *               * branch if Z clear
00:00002DD8 0C180080        	   879:             cmpi.b #$80,(a0)+
00:00002DDC 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
00:00002DDE 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
00:00002DE4 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
00:00002DE6 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
00:00002DE8 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
00:00002DEA 0B40            	   891:             bchg.l d5,d0
00:00002DEC 67FE            	   892:             beq.s *               * branch if Z set
00:00002DEE 0D40            	   893:             bchg.l d6,d0              *
00:00002DF0 66FE            	   894:             bne.s *               * branch if Z clear
00:00002DF2 0F40            	   895:             bchg.l d7,d0             *
00:00002DF4 67FE            	   896:             beq.s *               * branch if Z set
00:00002DF6 0C8000000002    	   897:             cmpi.l #$00000002,d0
00:00002DFC 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
00:00002DFE 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
00:00002E00 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
00:00002E02 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
00:00002E04 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E08 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
00:00002E0C 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002E0E 0B50            	   908:             bchg.b d5,(a0)
00:00002E10 67FE            	   909:             beq.s *               * branch if Z set
00:00002E12 0D50            	   910:             bchg.b d6,(a0)            *
00:00002E14 66FE            	   911:             bne.s *               * branch if Z clear
00:00002E16 0F50            	   912:             bchg.b d7,(a0)            *
00:00002E18 67FE            	   913:             beq.s *               * branch if Z set
00:00002E1A 0C100002        	   914:             cmpi.b #$02,(a0)
00:00002E1E 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
00:00002E20 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E24 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
00:00002E28 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
00:00002E2C 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
00:00002E30 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E34 0B58            	   924:             bchg.b d5,(a0)+
00:00002E36 67FE            	   925:             beq.s *               * branch if Z set
00:00002E38 0D58            	   926:             bchg.b d6,(a0)+           *
00:00002E3A 66FE            	   927:             bne.s *               * branch if Z clear
00:00002E3C 0F58            	   928:             bchg.b d7,(a0)+           *
00:00002E3E 67FE            	   929:             beq.s *               * branch if Z set
00:00002E40 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E44 4A18            	   931:             cmpi.b #$00,(a0)+
00:00002E46 66FE            	   932:             bne.s *               * branch if Z clear
00:00002E48 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
00:00002E4C 66FE            	   934:             bne.s *               * branch if Z clear
00:00002E4E 4A18            	   935:             cmpi.b #$00,(a0)+
00:00002E50 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
00:00002E52 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
00:00002E56 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
00:00002E5A 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
00:00002E5E 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
00:00002E62 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
00:00002E66 0B60            	   944:             bchg.b d5,-(a0)
00:00002E68 67FE            	   945:             beq.s *               * branch if Z set
00:00002E6A 0D60            	   946:             bchg.b d6,-(a0)           *
00:00002E6C 66FE            	   947:             bne.s *               * branch if Z clear
00:00002E6E 0F60            	   948:             bchg.b d7,-(a0)           *
00:00002E70 67FE            	   949:             beq.s *               * branch if Z set
00:00002E72 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002E76 4A20            	   951:             cmpi.b #$00,-(a0)
00:00002E78 66FE            	   952:             bne.s *               * branch if Z clear
00:00002E7A 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
00:00002E7E 66FE            	   954:             bne.s *               * branch if Z clear
00:00002E80 4A20            	   955:             cmpi.b #$00,-(a0)
00:00002E82 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
00:00002E84 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
00:00002E88 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
00:00002E8C 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
00:00002E90 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
00:00002E94 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
00:00002E98 0B50            	   964:             bchg.b d5,0(a0)
00:00002E9A 67FE            	   965:             beq.s *               * branch if Z set
00:00002E9C 0D680001        	   966:             bchg.b d6,1(a0)           *
00:00002EA0 66FE            	   967:             bne.s *               * branch if Z clear
00:00002EA2 0F680002        	   968:             bchg.b d7,2(a0)           *
00:00002EA6 67FE            	   969:             beq.s *               * branch if Z set
00:00002EA8 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002EAC 4A18            	   971:             cmpi.b #$00,(a0)+
00:00002EAE 66FE            	   972:             bne.s *               * branch if Z clear
00:00002EB0 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
00:00002EB4 66FE            	   974:             bne.s *               * branch if Z clear
00:00002EB6 4A18            	   975:             cmpi.b #$00,(a0)+
00:00002EB8 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
00:00002EBA 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
00:00002EBE 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
00:00002EC0 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
00:00002EC4 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
00:00002EC6 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
00:00002EC8 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
00:00002ECC 66FE            	   985:             bne.s *               * branch if Z clear
00:00002ECE 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
00:00002ED2 67FE            	   987:             beq.s *               * branch if Z set
00:00002ED4 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
00:00002ED8 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
00:00002EDA 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
00:00002EDE 67FE            	   992:             beq.s *               * branch if Z set
00:00002EE0 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
00:00002EE4 66FE            	   994:             bne.s *               * branch if Z clear
00:00002EE6 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
00:00002EEA 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
00:00002EEC 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
00:00002EF0 66FE            	   999:             bne.s *               * branch if Z clear
00:00002EF2 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
00:00002EF6 67FE            	  1001:             beq.s *               * branch if Z set
00:00002EF8 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
00:00002EFC 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
00:00002EFE 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
00:00002F02 67FE            	  1006:             beq.s *               * branch if Z set
00:00002F04 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
00:00002F08 66FE            	  1008:             bne.s *               * branch if Z clear
00:00002F0A 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
00:00002F0E 67FE            	  1010:             beq.s *               * branch if Z set
00:00002F10 4A18            	  1011:             cmpi.b #$00,(a0)+
00:00002F12 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
00:00002F14 0B780100        	  1015:             bchg.b d5,$0100
00:00002F18 66FE            	  1016:             bne.s *               * branch if Z clear
00:00002F1A 0D780101        	  1017:             bchg.b d6,$0101           *
00:00002F1E 67FE            	  1018:             beq.s *               * branch if Z set
00:00002F20 0F780102        	  1019:             bchg.b d7,$0102           *
00:00002F24 66FE            	  1020:             bne.s *               * branch if Z clear
00:00002F26 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
00:00002F2A 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
00:00002F2C 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
00:00002F32 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
00:00002F36 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
00:00002F3A 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
00:00002F3E 0B790000F100    	  1029:             bchg.b d5,$F100
00:00002F44 67FE            	  1030:             beq.s *               * branch if Z set
00:00002F46 0D790000F101    	  1031:             bchg.b d6,$F101       *
00:00002F4C 66FE            	  1032:             bne.s *               * branch if Z clear
00:00002F4E 0F790000F102    	  1033:             bchg.b d7,$F102       *
00:00002F54 67FE            	  1034:             beq.s *               * branch if Z set
00:00002F56 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
00:00002F5C 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
00:00002F60 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
00:00002F62 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
00:00002F64 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
00:00002F6A 08800000        	  1054:             bclr.l #0,d0
00:00002F6E 67FE            	  1055:             beq.s *               * branch if Z set
00:00002F70 08800001        	  1056:             bclr.l #1,d0              *
00:00002F74 67FE            	  1057:             beq.s *               * branch if Z set
00:00002F76 0880000F        	  1058:             bclr.l #15,d0             *
00:00002F7A 66FE            	  1059:             bne.s *               * branch if Z clear
00:00002F7C 0880001F        	  1060:             bclr.l #31,d0             *
00:00002F80 67FE            	  1061:             beq.s *               * branch if Z set
00:00002F82 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
00:00002F88 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
00:00002F8A 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002F8E 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
00:00002F92 08900000        	  1069:             bclr.b #0,(a0)
00:00002F96 67FE            	  1070:             beq.s *               * branch if Z set
00:00002F98 08900007        	  1071:             bclr.b #7,(a0)            *
00:00002F9C 66FE            	  1072:             bne.s *               * branch if Z clear
00:00002F9E 0C10000E        	  1073:             cmpi.b #$0E,(a0)
00:00002FA2 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
00:00002FA4 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002FA8 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
00:00002FAC 4218            	  1079:             move.b #$00,(a0)+         * populate test data
00:00002FAE 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002FB2 08980000        	  1081:             bclr.b #0,(a0)+
00:00002FB6 67FE            	  1082:             beq.s *               * branch if Z set
00:00002FB8 08980001        	  1083:             bclr.b #1,(a0)+           *
00:00002FBC 66FE            	  1084:             bne.s *               * branch if Z clear
00:00002FBE 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002FC2 4A18            	  1086:             cmpi.b #$00,(a0)+
00:00002FC4 66FE            	  1087:             bne.s *               * branch if Z clear
00:00002FC6 4A18            	  1088:             cmpi.b #$00,(a0)+
00:00002FC8 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
00:00002FCA 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
00:00002FCE 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
00:00002FD2 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
00:00002FD6 08A00007        	  1096:             bclr.b #7,-(a0)
00:00002FDA 67FE            	  1097:             beq.s *               * branch if Z set
00:00002FDC 08A00000        	  1098:             bclr.b #0,-(a0)           *
00:00002FE0 67FE            	  1099:             beq.s *               * branch if Z set
00:00002FE2 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
00:00002FE6 4A20            	  1101:             cmpi.b #$00,-(a0)
00:00002FE8 66FE            	  1102:             bne.s *               * branch if Z clear
00:00002FEA 4A20            	  1103:             cmpi.b #$00,-(a0)
00:00002FEC 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
00:00002FEE 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
00:00002FF2 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
00:00002FF6 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
00:00002FFA 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
00:00002FFE 08900000        	  1112:             bclr.b #0,0(a0)
00:00003002 67FE            	  1113:             beq.s *               * branch if Z set
00:00003004 08A800040001    	  1114:             bclr.b #4,1(a0)           *
00:0000300A 67FE            	  1115:             beq.s *               * branch if Z set
00:0000300C 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003010 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
00:00003014 66FE            	  1118:             bne.s *               * branch if Z clear
00:00003016 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
00:0000301A 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
00:0000301C 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
00:00003020 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
00:00003022 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
00:00003026 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
00:00003028 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
00:0000302A 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
00:0000302E 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
00:00003032 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
00:00003036 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
00:0000303C 67FE            	  1133:             beq.s *               * branch if Z set
00:0000303E 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
00:00003044 67FE            	  1135:             beq.s *               * branch if Z set
00:00003046 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
00:0000304C 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
00:0000304E 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
00:00003054 67FE            	  1140:             beq.s *               * branch if Z set
00:00003056 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
00:0000305C 67FE            	  1142:             beq.s *               * branch if Z set
00:0000305E 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
00:00003064 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
00:00003066 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
00:0000306C 67FE            	  1147:             beq.s *               * branch if Z set
00:0000306E 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
00:00003074 66FE            	  1149:             bne.s *               * branch if Z clear
00:00003076 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
00:0000307C 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
00:0000307E 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
00:00003084 66FE            	  1154:             bne.s *               * branch if Z clear
00:00003086 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
00:0000308C 67FE            	  1156:             beq.s *               * branch if Z set
00:0000308E 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
00:00003094 66FE            	  1158:             bne.s *               * branch if Z clear
00:00003096 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000309A 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
00:0000309E 66FE            	  1161:             bne.s *               * branch if Z clear
00:000030A0 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
00:000030A4 66FE            	  1163:             bne.s *               * branch if Z clear
00:000030A6 0C180059        	  1164:             cmpi.b #$59,(a0)+
00:000030AA 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
00:000030AC 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
00:000030B0 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
00:000030B4 08B800000100    	  1171:             bclr.b #0,$0100
00:000030BA 67FE            	  1172:             beq.s *               * branch if Z set
00:000030BC 08B800010100    	  1173:             bclr.b #1,$0100           *
00:000030C2 67FE            	  1174:             beq.s *               * branch if Z set
00:000030C4 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
00:000030C8 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
00:000030CC 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
00:000030CE 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
00:000030D4 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
00:000030D8 08B900000000F100	  1183:             bclr.b #0,$F100
00:000030E0 67FE            	  1184:             beq.s *               * branch if Z set
00:000030E2 08B900010000F100	  1185:             bclr.b #1,$F100       *
00:000030EA 67FE            	  1186:             beq.s *               * branch if Z set
00:000030EC 08B900020000F100	  1187:             bclr.b #2,$F100       *
00:000030F4 67FE            	  1188:             beq.s *               * branch if Z set
00:000030F6 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
00:000030FC 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
00:00003100 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
00:00003102 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
00:00003108 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
00:0000310A 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
00:0000310C 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
00:0000310E 0B80            	  1202:             bclr.l d5,d0
00:00003110 66FE            	  1203:             bne.s *               * branch if Z clear
00:00003112 0D80            	  1204:             bclr.l d6,d0              *
00:00003114 66FE            	  1205:             bne.s *               * branch if Z clear
00:00003116 0F80            	  1206:             bclr.l d7,d0             *
00:00003118 67FE            	  1207:             beq.s *               * branch if Z set
00:0000311A 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
00:00003120 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
00:00003122 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
00:00003124 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
00:00003126 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
00:00003128 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000312C 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
00:00003130 0B90            	  1218:             bclr.b d5,(a0)
00:00003132 67FE            	  1219:             beq.s *               * branch if Z set
00:00003134 0D90            	  1220:             bclr.b d6,(a0)            *
00:00003136 66FE            	  1221:             bne.s *               * branch if Z clear
00:00003138 0F90            	  1222:             bclr.b d7,(a0)            *
00:0000313A 67FE            	  1223:             beq.s *               * branch if Z set
00:0000313C 4A10            	  1224:             cmpi.b #$00,(a0)
00:0000313E 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
00:00003140 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003144 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
00:00003148 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
00:0000314C 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
00:00003150 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003154 0B98            	  1234:             bclr.b d5,(a0)+
00:00003156 67FE            	  1235:             beq.s *               * branch if Z set
00:00003158 0D98            	  1236:             bclr.b d6,(a0)+           *
00:0000315A 66FE            	  1237:             bne.s *               * branch if Z clear
00:0000315C 0F98            	  1238:             bclr.b d7,(a0)+           *
00:0000315E 67FE            	  1239:             beq.s *               * branch if Z set
00:00003160 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003164 4A18            	  1241:             cmpi.b #$00,(a0)+
00:00003166 66FE            	  1242:             bne.s *               * branch if Z clear
00:00003168 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
00:0000316C 66FE            	  1244:             bne.s *               * branch if Z clear
00:0000316E 4A18            	  1245:             cmpi.b #$00,(a0)+
00:00003170 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
00:00003172 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
00:00003176 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
00:0000317A 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
00:0000317E 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
00:00003182 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
00:00003186 0BA0            	  1254:             bclr.b d5,-(a0)
00:00003188 67FE            	  1255:             beq.s *               * branch if Z set
00:0000318A 0DA0            	  1256:             bclr.b d6,-(a0)           *
00:0000318C 66FE            	  1257:             bne.s *               * branch if Z clear
00:0000318E 0FA0            	  1258:             bclr.b d7,-(a0)           *
00:00003190 67FE            	  1259:             beq.s *               * branch if Z set
00:00003192 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
00:00003196 4A20            	  1261:             cmpi.b #$00,-(a0)
00:00003198 66FE            	  1262:             bne.s *               * branch if Z clear
00:0000319A 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
00:0000319E 66FE            	  1264:             bne.s *               * branch if Z clear
00:000031A0 4A20            	  1265:             cmpi.b #$00,-(a0)
00:000031A2 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
00:000031A4 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
00:000031A8 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
00:000031AC 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
00:000031B0 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
00:000031B4 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
00:000031B8 0B90            	  1274:             bclr.b d5,0(a0)
00:000031BA 67FE            	  1275:             beq.s *               * branch if Z set
00:000031BC 0DA80001        	  1276:             bclr.b d6,1(a0)           *
00:000031C0 66FE            	  1277:             bne.s *               * branch if Z clear
00:000031C2 0FA80002        	  1278:             bclr.b d7,2(a0)           *
00:000031C6 67FE            	  1279:             beq.s *               * branch if Z set
00:000031C8 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
00:000031CC 4A18            	  1281:             cmpi.b #$00,(a0)+
00:000031CE 66FE            	  1282:             bne.s *               * branch if Z clear
00:000031D0 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
00:000031D4 66FE            	  1284:             bne.s *               * branch if Z clear
00:000031D6 4A18            	  1285:             cmpi.b #$00,(a0)+
00:000031D8 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
00:000031DA 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
00:000031DE 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
00:000031E2 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
00:000031E6 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:000031EA 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
00:000031EE 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
00:000031F2 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
00:000031F4 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
00:000031F8 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
00:000031FA 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
00:000031FC 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
00:00003200 67FE            	  1300:             beq.s *               * branch if Z set
00:00003202 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
00:00003206 67FE            	  1302:             beq.s *               * branch if Z set
00:00003208 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
00:0000320C 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
00:0000320E 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
00:00003212 66FE            	  1307:             bne.s *               * branch if Z clear
00:00003214 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
00:00003218 66FE            	  1309:             bne.s *               * branch if Z clear
00:0000321A 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
00:0000321E 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
00:00003220 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
00:00003224 66FE            	  1314:             bne.s *               * branch if Z clear
00:00003226 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
00:0000322A 66FE            	  1316:             bne.s *               * branch if Z clear
00:0000322C 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
00:00003230 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
00:00003232 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
00:00003236 66FE            	  1321:             bne.s *               * branch if Z clear
00:00003238 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
00:0000323C 66FE            	  1323:             bne.s *               * branch if Z clear
00:0000323E 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
00:00003242 66FE            	  1325:             bne.s *               * branch if Z clear
00:00003244 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
00:00003248 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
00:0000324C 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
00:0000324E 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
00:00003252 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
00:00003256 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
00:0000325A 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:0000325E 0BB80100        	  1335:             bclr.b d5,$0100
00:00003262 67FE            	  1336:             beq.s *               * branch if Z set
00:00003264 0DB80101        	  1337:             bclr.b d6,$0101           *
00:00003268 67FE            	  1338:             beq.s *               * branch if Z set
00:0000326A 0FB80102        	  1339:             bclr.b d7,$0102           *
00:0000326E 67FE            	  1340:             beq.s *               * branch if Z set
00:00003270 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
00:00003274 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
00:00003278 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
00:0000327A 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
00:00003280 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
00:00003284 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
00:00003288 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
00:0000328C 0BB90000F100    	  1350:             bclr.b d5,$F100
00:00003292 67FE            	  1351:             beq.s *               * branch if Z set
00:00003294 0DB90000F101    	  1352:             bclr.b d6,$F101       *
00:0000329A 66FE            	  1353:             bne.s *               * branch if Z clear
00:0000329C 0FB90000F102    	  1354:             bclr.b d7,$F102       *
00:000032A2 67FE            	  1355:             beq.s *               * branch if Z set
00:000032A4 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
00:000032AA 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
00:000032AE 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
00:000032B0 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
00:000032B2 7000            	  1375:             moveq  #$00000000,d0      * populate test data
00:000032B4 08C00000        	  1376:             bset.l #0,d0
00:000032B8 66FE            	  1377:             bne.s *               * branch if Z clear
00:000032BA 08C00001        	  1378:             bset.l #1,d0              *
00:000032BE 66FE            	  1379:             bne.s *               * branch if Z clear
00:000032C0 08C0000F        	  1380:             bset.l #15,d0             *
00:000032C4 66FE            	  1381:             bne.s *               * branch if Z clear
00:000032C6 08C0001F        	  1382:             bset.l #31,d0             *
00:000032CA 66FE            	  1383:             bne.s *               * branch if Z clear
00:000032CC 0C8080008003    	  1384:             cmpi.l #$80008003,d0
00:000032D2 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
00:000032D4 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
00:000032D8 4210            	  1390:             move.b #$00,(a0)          * populate test data
00:000032DA 08D00000        	  1391:             bset.b #0,(a0)
00:000032DE 66FE            	  1392:             bne.s *               * branch if Z clear
00:000032E0 08D00007        	  1393:             bset.b #7,(a0)            *
00:000032E4 66FE            	  1394:             bne.s *               * branch if Z clear
00:000032E6 0C100081        	  1395:             cmpi.b #$81,(a0)
00:000032EA 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
00:000032EC 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
00:000032F0 4218            	  1400:             move.b #$00,(a0)+         * populate test data
00:000032F2 4218            	  1401:             move.b #$00,(a0)+         * populate test data
00:000032F4 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
00:000032F8 08D80000        	  1403:             bset.b #0,(a0)+
00:000032FC 66FE            	  1404:             bne.s *               * branch if Z clear
00:000032FE 08D80001        	  1405:             bset.b #1,(a0)+           *
00:00003302 66FE            	  1406:             bne.s *               * branch if Z clear
00:00003304 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003308 0C180001        	  1408:             cmpi.b #$01,(a0)+
00:0000330C 66FE            	  1409:             bne.s *               * branch if Z clear
00:0000330E 0C180002        	  1410:             cmpi.b #$02,(a0)+
00:00003312 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
00:00003314 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
00:00003318 4218            	  1416:             move.b #$00,(a0)+         * populate test data
00:0000331A 4218            	  1417:             move.b #$00,(a0)+         * populate test data
00:0000331C 08E00007        	  1418:             bset.b #7,-(a0)
00:00003320 66FE            	  1419:             bne.s *               * branch if Z clear
00:00003322 08E00000        	  1420:             bset.b #0,-(a0)           *
00:00003326 66FE            	  1421:             bne.s *               * branch if Z clear
00:00003328 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
00:0000332C 0C200080        	  1423:             cmpi.b #$80,-(a0)
00:00003330 66FE            	  1424:             bne.s *               * branch if Z clear
00:00003332 0C200001        	  1425:             cmpi.b #$01,-(a0)
00:00003336 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
00:00003338 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
00:0000333C 4218            	  1431:             move.b #$00,(a0)+         * populate test data
00:0000333E 4218            	  1432:             move.b #$00,(a0)+         * populate test data
00:00003340 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
00:00003344 08D00000        	  1434:             bset.b #0,0(a0)
00:00003348 66FE            	  1435:             bne.s *               * branch if Z clear
00:0000334A 08E800040001    	  1436:             bset.b #4,1(a0)           *
00:00003350 66FE            	  1437:             bne.s *               * branch if Z clear
00:00003352 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003356 0C180001        	  1439:             cmpi.b #$01,(a0)+
00:0000335A 66FE            	  1440:             bne.s *               * branch if Z clear
00:0000335C 0C180010        	  1441:             cmpi.b #$10,(a0)+
00:00003360 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
00:00003362 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
00:00003366 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
00:00003368 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
00:0000336C 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
00:0000336E 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
00:00003370 4218            	  1451:             move.b #$00,(a0)+         * populate test data
00:00003372 4218            	  1452:             move.b #$00,(a0)+         * populate test data
00:00003374 4218            	  1453:             move.b #$00,(a0)+         * populate test data
00:00003376 4218            	  1454:             move.b #$00,(a0)+         * populate test data
00:00003378 4218            	  1455:             move.b #$00,(a0)+         * populate test data
00:0000337A 4218            	  1456:             move.b #$00,(a0)+         * populate test data
00:0000337C 4218            	  1457:             move.b #$00,(a0)+         * populate test data
00:0000337E 4218            	  1458:             move.b #$00,(a0)+         * populate test data
00:00003380 4218            	  1459:             move.b #$00,(a0)+         * populate test data
00:00003382 4218            	  1460:             move.b #$00,(a0)+         * populate test data
00:00003384 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
00:00003388 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
00:0000338E 66FE            	  1463:             bne.s *               * branch if Z clear
00:00003390 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
00:00003396 66FE            	  1465:             bne.s *               * branch if Z clear
00:00003398 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
00:0000339E 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
00:000033A0 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
00:000033A6 66FE            	  1470:             bne.s *               * branch if Z clear
00:000033A8 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
00:000033AE 66FE            	  1472:             bne.s *               * branch if Z clear
00:000033B0 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
00:000033B6 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
00:000033B8 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
00:000033BE 66FE            	  1477:             bne.s *               * branch if Z clear
00:000033C0 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
00:000033C6 66FE            	  1479:             bne.s *               * branch if Z clear
00:000033C8 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
00:000033CE 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
00:000033D0 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
00:000033D6 66FE            	  1484:             bne.s *               * branch if Z clear
00:000033D8 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
00:000033DE 66FE            	  1486:             bne.s *               * branch if Z clear
00:000033E0 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
00:000033E6 66FE            	  1488:             bne.s *               * branch if Z clear
00:000033E8 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
00:000033EC 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
00:000033F2 66FE            	  1491:             bne.s *               * branch if Z clear
00:000033F4 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
00:000033FA 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
00:000033FC 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
00:00003400 4218            	  1499:             move.b #$00,(a0)+         * populate test data
00:00003402 08F800000100    	  1500:             bset.b #0,$0100
00:00003408 66FE            	  1501:             bne.s *               * branch if Z clear
00:0000340A 08F800010100    	  1502:             bset.b #1,$0100           *
00:00003410 66FE            	  1503:             bne.s *               * branch if Z clear
00:00003412 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003416 0C180003        	  1505:             cmpi.b #$03,(a0)+
00:0000341A 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
00:0000341C 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
00:00003422 4210            	  1511:             move.b #$00,(a0)          * populate test data
00:00003424 08F900000000F100	  1512:             bset.b #0,$F100
00:0000342C 66FE            	  1513:             bne.s *               * branch if Z clear
00:0000342E 08F900010000F100	  1514:             bset.b #1,$F100       *
00:00003436 66FE            	  1515:             bne.s *               * branch if Z clear
00:00003438 08F900020000F100	  1516:             bset.b #2,$F100       *
00:00003440 66FE            	  1517:             bne.s *               * branch if Z clear
00:00003442 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
00:00003448 0C180007        	  1519:             cmpi.b #$07,(a0)+
00:0000344C 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
00:0000344E 7000            	  1526:             moveq  #$00000000,d0      * populate test data
00:00003450 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
00:00003452 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
00:00003454 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
00:00003456 0BC0            	  1531:             bset.l d5,d0
00:00003458 66FE            	  1532:             bne.s *               * branch if Z clear
00:0000345A 0DC0            	  1533:             bset.l d6,d0              *
00:0000345C 66FE            	  1534:             bne.s *               * branch if Z clear
00:0000345E 0FC0            	  1535:             bset.l d7,d0             *
00:00003460 66FE            	  1536:             bne.s *               * branch if Z clear
00:00003462 0C8080000003    	  1537:             cmpi.l #$80000003,d0
00:00003468 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
00:0000346A 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
00:0000346C 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
00:0000346E 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
00:00003470 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003474 4210            	  1546:             move.b #$00,(a0)          * populate test data
00:00003476 0BD0            	  1547:             bset.b d5,(a0)
00:00003478 66FE            	  1548:             bne.s *               * branch if Z clear
00:0000347A 0DD0            	  1549:             bset.b d6,(a0)            *
00:0000347C 66FE            	  1550:             bne.s *               * branch if Z clear
00:0000347E 0FD0            	  1551:             bset.b d7,(a0)            *
00:00003480 66FE            	  1552:             bne.s *               * branch if Z clear
00:00003482 0C100083        	  1553:             cmpi.b #$83,(a0)
00:00003486 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
00:00003488 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000348C 4218            	  1559:             move.b #$00,(a0)+         * populate test data
00:0000348E 4218            	  1560:             move.b #$00,(a0)+         * populate test data
00:00003490 4218            	  1561:             move.b #$00,(a0)+         * populate test data
00:00003492 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003496 0BD8            	  1563:             bset.b d5,(a0)+
00:00003498 66FE            	  1564:             bne.s *               * branch if Z clear
00:0000349A 0DD8            	  1565:             bset.b d6,(a0)+           *
00:0000349C 66FE            	  1566:             bne.s *               * branch if Z clear
00:0000349E 0FD8            	  1567:             bset.b d7,(a0)+           *
00:000034A0 66FE            	  1568:             bne.s *               * branch if Z clear
00:000034A2 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
00:000034A6 0C180001        	  1570:             cmpi.b #$01,(a0)+
00:000034AA 66FE            	  1571:             bne.s *               * branch if Z clear
00:000034AC 0C180002        	  1572:             cmpi.b #$02,(a0)+
00:000034B0 66FE            	  1573:             bne.s *               * branch if Z clear
00:000034B2 0C180080        	  1574:             cmpi.b #$80,(a0)+
00:000034B6 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
00:000034B8 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
00:000034BC 4218            	  1579:             move.b #$00,(a0)+         * populate test data
00:000034BE 4218            	  1580:             move.b #$00,(a0)+         * populate test data
00:000034C0 4218            	  1581:             move.b #$00,(a0)+         * populate test data
00:000034C2 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
00:000034C6 0BE0            	  1583:             bset.b d5,-(a0)
00:000034C8 66FE            	  1584:             bne.s *               * branch if Z clear
00:000034CA 0DE0            	  1585:             bset.b d6,-(a0)           *
00:000034CC 66FE            	  1586:             bne.s *               * branch if Z clear
00:000034CE 0FE0            	  1587:             bset.b d7,-(a0)           *
00:000034D0 66FE            	  1588:             bne.s *               * branch if Z clear
00:000034D2 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
00:000034D6 0C200001        	  1590:             cmpi.b #$01,-(a0)
00:000034DA 66FE            	  1591:             bne.s *               * branch if Z clear
00:000034DC 0C200002        	  1592:             cmpi.b #$02,-(a0)
00:000034E0 66FE            	  1593:             bne.s *               * branch if Z clear
00:000034E2 0C200080        	  1594:             cmpi.b #$80,-(a0)
00:000034E6 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
00:000034E8 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
00:000034EC 4218            	  1599:             move.b #$00,(a0)+         * populate test data
00:000034EE 4218            	  1600:             move.b #$00,(a0)+         * populate test data
00:000034F0 4218            	  1601:             move.b #$00,(a0)+         * populate test data
00:000034F2 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
00:000034F6 0BD0            	  1603:             bset.b d5,0(a0)
00:000034F8 66FE            	  1604:             bne.s *               * branch if Z clear
00:000034FA 0DE80001        	  1605:             bset.b d6,1(a0)           *
00:000034FE 66FE            	  1606:             bne.s *               * branch if Z clear
00:00003500 0FE80002        	  1607:             bset.b d7,2(a0)           *
00:00003504 66FE            	  1608:             bne.s *               * branch if Z clear
00:00003506 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000350A 0C180001        	  1610:             cmpi.b #$01,(a0)+
00:0000350E 66FE            	  1611:             bne.s *               * branch if Z clear
00:00003510 0C180002        	  1612:             cmpi.b #$02,(a0)+
00:00003514 66FE            	  1613:             bne.s *               * branch if Z clear
00:00003516 0C180080        	  1614:             cmpi.b #$80,(a0)+
00:0000351A 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
00:0000351C 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
00:00003520 4218            	  1619:             move.b #$00,(a0)+         * populate test data
00:00003522 4218            	  1620:             move.b #$00,(a0)+         * populate test data
00:00003524 4218            	  1621:             move.b #$00,(a0)+         * populate test data
00:00003526 4218            	  1622:             move.b #$00,(a0)+         * populate test data
00:00003528 4218            	  1623:             move.b #$00,(a0)+         * populate test data
00:0000352A 4218            	  1624:             move.b #$00,(a0)+         * populate test data
00:0000352C 4218            	  1625:             move.b #$00,(a0)+         * populate test data
00:0000352E 4218            	  1626:             move.b #$00,(a0)+         * populate test data
00:00003530 4218            	  1627:             move.b #$00,(a0)+         * populate test data
00:00003532 4218            	  1628:             move.b #$00,(a0)+         * populate test data
00:00003534 4218            	  1629:             move.b #$00,(a0)+         * populate test data
00:00003536 4218            	  1630:             move.b #$00,(a0)+         * populate test data
00:00003538 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
00:0000353C 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
00:0000353E 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
00:00003542 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
00:00003544 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
00:00003546 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
00:0000354A 66FE            	  1637:             bne.s *               * branch if Z clear
00:0000354C 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
00:00003550 66FE            	  1639:             bne.s *               * branch if Z clear
00:00003552 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
00:00003556 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
00:00003558 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
00:0000355C 66FE            	  1644:             bne.s *               * branch if Z clear
00:0000355E 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
00:00003562 66FE            	  1646:             bne.s *               * branch if Z clear
00:00003564 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
00:00003568 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
00:0000356A 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
00:0000356E 66FE            	  1651:             bne.s *               * branch if Z clear
00:00003570 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
00:00003574 66FE            	  1653:             bne.s *               * branch if Z clear
00:00003576 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
00:0000357A 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
00:0000357C 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
00:00003580 66FE            	  1658:             bne.s *               * branch if Z clear
00:00003582 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
00:00003586 66FE            	  1660:             bne.s *               * branch if Z clear
00:00003588 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
00:0000358C 66FE            	  1662:             bne.s *               * branch if Z clear
00:0000358E 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
00:00003592 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
00:00003598 66FE            	  1665:             bne.s *               * branch if Z clear
00:0000359A 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
00:000035A0 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
00:000035A2 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
00:000035A6 4218            	  1672:             move.b #$00,(a0)+         * populate test data
00:000035A8 4218            	  1673:             move.b #$00,(a0)+         * populate test data
00:000035AA 4218            	  1674:             move.b #$00,(a0)+         * populate test data
00:000035AC 0BF80100        	  1675:             bset.b d5,$0100
00:000035B0 66FE            	  1676:             bne.s *               * branch if Z clear
00:000035B2 0DF80100        	  1677:             bset.b d6,$0100           *
00:000035B6 66FE            	  1678:             bne.s *               * branch if Z clear
00:000035B8 0FF80100        	  1679:             bset.b d7,$0100           *
00:000035BC 66FE            	  1680:             bne.s *               * branch if Z clear
00:000035BE 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
00:000035C2 0C180083        	  1682:             cmpi.b #$83,(a0)+
00:000035C6 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
00:000035C8 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
00:000035CE 4218            	  1687:             move.b #$00,(a0)+         * populate test data
00:000035D0 4218            	  1688:             move.b #$00,(a0)+         * populate test data
00:000035D2 4218            	  1689:             move.b #$00,(a0)+         * populate test data
00:000035D4 0BF90000F100    	  1690:             bset.b d5,$F100
00:000035DA 66FE            	  1691:             bne.s *               * branch if Z clear
00:000035DC 0DF90000F100    	  1692:             bset.b d6,$F100       *
00:000035E2 66FE            	  1693:             bne.s *               * branch if Z clear
00:000035E4 0FF90000F100    	  1694:             bset.b d7,$F100       *
00:000035EA 66FE            	  1695:             bne.s *               * branch if Z clear
00:000035EC 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
00:000035F2 0C100083        	  1697:             cmpi.b #$83,(a0)
00:000035F6 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
00:000035F8 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
00:000035FA 307C0100        	  1711:             move.l #$00000100,a0
00:000035FE 203C12345678    	  1712:             move.l #$12345678,d0
00:00003604 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
00:0000360A 4290            	  1714:             move.l #0,(a0)
00:0000360C 42A80004        	  1715:             move.l #0,4(a0)
                            	  1716: 
00:00003610 01880000        	  1717:             movep.w d0,0(a0)      * even offset
00:00003614 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
00:00003618 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
00:0000361C 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
00:00003620 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
00:00003626 66FE            	  1724:             bne.s *
00:00003628 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
00:00003630 66FE            	  1726:             bne.s *
00:00003632 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
00:0000363A 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
00:0000363C 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
00:00003642 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
00:00003648 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
00:0000364E 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
00:00003654 01080000        	  1737:             movep.w 0(a0),d0      * even offset
00:00003658 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
00:0000365C 05480004        	  1740:             movep.l 4(a0),d2      * even offset
00:00003660 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
00:00003664 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
00:0000366A 66FE            	  1744:             bne.s *
00:0000366C 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
00:00003672 66FE            	  1746:             bne.s *
00:00003674 0C8212345678    	  1747:             cmpi.l #$12345678,d2
00:0000367A 66FE            	  1748:             bne.s *
00:0000367C 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
00:00003682 66FE            	  1750:             bne.s *
                            	  1751: 
00:00003684 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
00:00003686 203C12345678    	  1764:             move.l #$12345678,d0
00:0000368C 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
00:00003690 000000FF        	  1766:             ori.b  #$FF,d0
00:00003694 0A00005A        	  1767:             eori.b #$5A,d0
00:00003698 020000F0        	  1768:             andi.b #$F0,d0
00:0000369C 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
00:0000369E 65FE            	  1770:             bcs.s *
00:000036A0 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
00:000036A2 4200            	  1772:             andi.b #$00,d0
00:000036A4 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
00:000036A6 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
00:000036A8 223C12345678    	  1777:             move.l #$12345678,d1
00:000036AE 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
00:000036B2 0041FFFF        	  1779:             ori.w  #$FFFF,d1
00:000036B6 0A415A5A        	  1780:             eori.w #$5A5A,d1
00:000036BA 0241F0F0        	  1781:             andi.w #$F0F0,d1
00:000036BE 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
00:000036C0 65FE            	  1783:             bcs.s *
00:000036C2 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
00:000036C4 4241            	  1785:             andi.w #$0000,d1
00:000036C6 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
00:000036C8 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
00:000036CA 243C12345678    	  1790:             move.l #$12345678,d2
00:000036D0 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
00:000036D4 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
00:000036DA 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
00:000036E0 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
00:000036E6 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
00:000036E8 65FE            	  1796:             bcs.s *
00:000036EA 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
00:000036EC 4282            	  1798:             andi.l #$00000000,d2
00:000036EE 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
00:000036F0 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
00:000036F2 307C0100        	  1804:             move.l #$00000100,a0
00:000036F6 20BC12345678    	  1805:             move.l #$12345678,(a0)
00:000036FC 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
00:00003700 001000FF        	  1807:             ori.b  #$FF,(a0)
00:00003704 0A10005A        	  1808:             eori.b #$5A,(a0)
00:00003708 021000F0        	  1809:             andi.b #$F0,(a0)
00:0000370C 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
00:0000370E 65FE            	  1811:             bcs.s *
00:00003710 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
00:00003712 4210            	  1813:             andi.b #$00,(a0)
00:00003714 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
00:00003716 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
00:00003718 4A10            	  1816:             cmpi.b #$00,(a0)
00:0000371A 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
00:0000371C 20BC12345678    	  1820:             move.l #$12345678,(a0)
00:00003722 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
00:00003726 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
00:0000372A 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
00:0000372E 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
00:00003732 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
00:00003734 65FE            	  1826:             bcs.s *
00:00003736 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
00:00003738 4250            	  1828:             andi.w #$0000,(a0)
00:0000373A 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
00:0000373C 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
00:0000373E 4A50            	  1831:             cmpi.w #$00,(a0)
00:00003740 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
00:00003742 20BC12345678    	  1835:             move.l #$12345678,(a0)
00:00003748 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
00:0000374C 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
00:00003752 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
00:00003758 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
00:0000375E 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
00:00003760 65FE            	  1841:             bcs.s *
00:00003762 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
00:00003764 4290            	  1843:             andi.l #$00000000,(a0)
00:00003766 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
00:00003768 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
00:0000376A 4A90            	  1846:             cmpi.l #$00,(a0)
00:0000376C 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
00:0000376E 307C0100        	  1852:             move.l #$00000100,a0
00:00003772 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
00:00003778 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
00:0000377C 001800F5        	  1856:             ori.b  #$F5,(a0)+
00:00003780 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
00:00003782 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
00:00003784 4618            	  1860:             eori.b #$FF,(a0)+
00:00003786 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
00:00003788 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
00:0000378A 021800AA        	  1864:             andi.b #$AA,(a0)+
00:0000378E 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
00:00003790 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
00:00003792 307C0100        	  1868:             move.l #$00000100,a0
00:00003796 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
00:0000379C 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
00:0000379E 307C0100        	  1874:             move.l #$00000100,a0
00:000037A2 327C0104        	  1875:             move.l #$00000104,a1
00:000037A6 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
00:000037AC 22BC12345678    	  1877:             move.l #$12345678,(a1)
00:000037B2 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
00:000037B6 00585678        	  1880:             ori.w  #$5678,(a0)+
00:000037BA 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
00:000037BC 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
00:000037BE 4658            	  1884:             eori.w #$FFFF,(a0)+
00:000037C0 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
00:000037C2 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
00:000037C4 0258A55A        	  1888:             andi.w #$A55A,(a0)+
00:000037C8 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
00:000037CA 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
00:000037CC 307C0100        	  1892:             move.l #$00000100,a0
00:000037D0 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
00:000037D6 307C0104        	  1894:             move.l #$00000104,a0
00:000037DA 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
00:000037E0 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
00:000037E2 307C0100        	  1899:             move.l #$00000100,a0
00:000037E6 4298            	  1900:             move.l #$00000000,(a0)+
00:000037E8 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
00:000037EE 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
00:000037F4 307C0100        	  1903:             move.l #$00000100,a0
00:000037F8 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
00:000037FC 009812345678    	  1906:             ori.l  #$12345678,(a0)+
00:00003802 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
00:00003804 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
00:00003806 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
00:00003808 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
00:0000380A 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
00:0000380C 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
00:00003812 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
00:00003814 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
00:00003816 307C0100        	  1918:             move.l #$00000100,a0
00:0000381A 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
00:00003820 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
00:00003826 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
00:0000382C 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
00:0000382E 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
00:00003830 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
00:00003836 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
00:00003838 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:0000383A 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:0000383C 6100EF20        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:00003840 6100144E        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
00:00003844 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
00:0000384A 66FE            	  1945:                 bne.s *
00:0000384C 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
00:00003852 66FE            	  1947:                 bne.s *
00:00003854 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
00:0000385A 66FE            	  1949:                 bne.s *
00:0000385C 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
00:00003862 66FE            	  1951:                 bne.s *
                            	  1952: 
00:00003864 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
00:00003866 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
00:0000386C 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
00:0000386E 307C0100        	  1966:             move.l #$00000100,a0
00:00003872 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
00:00003878 7080            	  1970:             move.l #$FFFFFF80,d0
00:0000387A 0C000080        	  1971:             cmpi.b #$80,d0
00:0000387E 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
00:00003880 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003882 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003884 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
00:00003886 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
00:0000388C 4A01            	  1978:             cmpi.b #$00,d1
00:0000388E 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
00:00003890 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003892 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003894 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
00:00003896 7481D442        	  1984:             move.l #$FFFFFF02,d2
00:0000389A 0C0200FF        	  1985:             cmpi.b #$FF,d2
00:0000389E 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
00:000038A0 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038A2 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
00:000038A4 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
00:000038A6 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
00:000038AC 0C0300FF        	  1992:             cmpi.b #$FF,d3
00:000038B0 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
00:000038B2 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
00:000038B4 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
00:000038B6 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
00:000038B8 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
00:000038BE 0C408000        	  2001:             cmpi.w #$8000,d0
00:000038C2 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
00:000038C4 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038C6 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
00:000038C8 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
00:000038CA 223CFFF00000    	  2007:             move.l #$FFF00000,d1
00:000038D0 4A41            	  2008:             cmpi.w #$0000,d1
00:000038D2 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
00:000038D4 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038D6 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
00:000038D8 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
00:000038DA 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
00:000038E0 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
00:000038E4 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
00:000038E6 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038E8 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
00:000038EA 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
00:000038EC 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
00:000038F2 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
00:000038F6 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
00:000038F8 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
00:000038FA 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
00:000038FC 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
00:000038FE 203C80000000    	  2029:             move.l #$80000000,d0
00:00003904 0C8080000000    	  2030:             cmpi.l #$80000000,d0
00:0000390A 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
00:0000390C 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000390E 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003910 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
00:00003912 7200            	  2036:             moveq  #$00000000,d1
00:00003914 4A81            	  2037:             cmpi.l #$00000000,d1
00:00003916 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
00:00003918 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000391A 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000391C 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
00:0000391E 7402            	  2043:             moveq  #$00000002,d2
00:00003920 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
00:00003926 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
00:00003928 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000392A 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000392C 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
00:0000392E 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
00:00003934 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
00:0000393A 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
00:0000393C 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000393E 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003940 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
00:00003942 307C0100        	  2061:             move.l #$00000100,a0
00:00003946 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
00:00003948 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
00:00003950 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
00:00003958 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
00:0000395E 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
00:00003960 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003962 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003964 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
00:00003966 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
00:0000396E 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
00:00003972 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
00:00003974 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003976 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003978 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
00:0000397A 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
00:00003982 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
00:00003988 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
00:0000398A 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000398C 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000398E 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
00:00003990 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
00:00003998 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
00:0000399E 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
00:000039A0 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
00:000039A2 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
00:000039A4 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
00:000039A6 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
00:000039AE 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
00:000039B4 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
00:000039B6 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
00:000039B8 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
00:000039BA 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
00:000039BC 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
00:000039C4 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
00:000039C8 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
00:000039CA 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
00:000039CC 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
00:000039CE 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
00:000039D0 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
00:000039D8 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
00:000039DE 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
00:000039E0 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
00:000039E2 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
00:000039E4 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
00:000039E6 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
00:000039EE 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
00:000039F4 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
00:000039F6 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
00:000039F8 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
00:000039FA 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
00:000039FC 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
00:00003A04 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
00:00003A0C 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
00:00003A0E 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003A10 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003A12 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
00:00003A14 42B0700C        	  2131:             move.l #$00000000,12(a0,d7)
00:00003A18 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
00:00003A1C 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
00:00003A1E 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003A20 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003A22 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
00:00003A24 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
00:00003A2C 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00003A34 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
00:00003A36 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003A38 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003A3A 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
00:00003A3C 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
00:00003A44 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00003A4C 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
00:00003A4E 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003A50 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003A52 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
00:00003A54 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
00:00003A56 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
00:00003A5C 06000000        	  2168:             addi.b #0,d0
00:00003A60 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
00:00003A62 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003A64 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003A66 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003A68 06000010        	  2173:             addi.b #$10,d0
00:00003A6C 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
00:00003A6E 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003A70 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003A72 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003A74 060000A5        	  2178:             addi.b #$A5,d0
00:00003A78 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
00:00003A7A 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003A7C 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003A7E 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003A80 0C00002D        	  2183:             cmpi.b #$2D,d0
00:00003A84 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
00:00003A86 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
00:00003A8C 06400000        	  2188:             addi.w #0,d0
00:00003A90 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
00:00003A92 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003A94 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003A96 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003A98 06407000        	  2193:             addi.w #$7000,d0
00:00003A9C 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
00:00003A9E 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003AA0 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003AA2 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003AA4 0640A55A        	  2198:             addi.w #$A55A,d0
00:00003AA8 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
00:00003AAA 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003AAC 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003AAE 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003AB0 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
00:00003AB4 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
00:00003AB6 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
00:00003ABC 068000000000    	  2208:             addi.l #0,d0
00:00003AC2 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
00:00003AC4 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003AC6 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003AC8 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003ACA 0680F0000000    	  2213:             addi.l #$F0000000,d0
00:00003AD0 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
00:00003AD2 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003AD4 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003AD6 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003AD8 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
00:00003ADE 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
00:00003AE0 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003AE2 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003AE4 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003AE6 0680A0000000    	  2223:             addi.l #$A0000000,d0
00:00003AEC 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003AEE 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
00:00003AF4 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
00:00003AF6 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
00:00003AFC 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
00:00003B02 063900000000F103	  2233:             addi.b #0,$F103
00:00003B0A 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
00:00003B0C 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003B0E 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003B10 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003B12 063900100000F103	  2238:             addi.b #$10,$F103
00:00003B1A 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
00:00003B1C 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003B1E 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003B20 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003B22 063900A50000F103	  2243:             addi.b #$A5,$F103
00:00003B2A 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
00:00003B2C 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003B2E 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003B30 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003B32 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
00:00003B3A 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
00:00003B3C 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
00:00003B42 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
00:00003B48 067900000000F100	  2254:             addi.w #0,$F100
00:00003B50 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
00:00003B52 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003B54 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003B56 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003B58 067970000000F100	  2259:             addi.w #$7000,$F100
00:00003B60 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
00:00003B62 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003B64 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003B66 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003B68 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
00:00003B70 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
00:00003B72 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003B74 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003B76 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003B78 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
00:00003B80 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
00:00003B82 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
00:00003B8A F100
00:00003B8C 06B9000000000000	  2274:             addi.l #0,$F100
00:00003B94 F100
00:00003B96 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
00:00003B98 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003B9A 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003B9C 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003B9E 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
00:00003BA6 F100
00:00003BA8 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
00:00003BAA 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003BAC 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003BAE 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003BB0 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
00:00003BB8 F100
00:00003BBA 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
00:00003BBC 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003BBE 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003BC0 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003BC2 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
00:00003BCA F100
00:00003BCC 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003BCE 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
00:00003BD6 F100
00:00003BD8 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
00:00003BDA 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
00:00003BDC 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
00:00003BE2 04000000        	  2306:             subi.b #0,d0
00:00003BE6 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
00:00003BE8 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003BEA 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003BEC 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003BEE 04000010        	  2311:             subi.b #$10,d0
00:00003BF2 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
00:00003BF4 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003BF6 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003BF8 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003BFA 040000A5        	  2316:             subi.b #$A5,d0
00:00003BFE 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
00:00003C00 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003C02 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003C04 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003C06 0C0000C3        	  2321:             cmpi.b #$C3,d0
00:00003C0A 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
00:00003C0C 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
00:00003C12 04400000        	  2326:             subi.w #0,d0
00:00003C16 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
00:00003C18 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003C1A 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003C1C 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C1E 04407000        	  2331:             subi.w #$7000,d0
00:00003C22 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
00:00003C24 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003C26 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003C28 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C2A 0440A55A        	  2336:             subi.w #$A55A,d0
00:00003C2E 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
00:00003C30 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003C32 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003C34 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C36 0C40411E        	  2341:             cmpi.w #$411E,d0
00:00003C3A 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
00:00003C3C 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
00:00003C42 048000000000    	  2346:             subi.l #0,d0
00:00003C48 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
00:00003C4A 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003C4C 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003C4E 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C50 0480F0000000    	  2351:             subi.l #$F0000000,d0
00:00003C56 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
00:00003C58 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003C5A 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003C5C 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C5E 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
00:00003C64 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
00:00003C66 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003C68 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003C6A 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003C6C 0480A0000000    	  2361:             subi.l #$A0000000,d0
00:00003C72 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C74 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
00:00003C7A 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
00:00003C7C 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
00:00003C82 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
00:00003C88 043900000000F103	  2371:             subi.b #0,$F103
00:00003C90 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
00:00003C92 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003C94 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003C96 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003C98 043900100000F103	  2376:             subi.b #$10,$F103
00:00003CA0 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
00:00003CA2 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003CA4 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003CA6 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003CA8 043900A50000F103	  2381:             subi.b #$A5,$F103
00:00003CB0 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
00:00003CB2 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003CB4 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003CB6 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003CB8 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
00:00003CC0 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
00:00003CC2 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
00:00003CC8 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
00:00003CCE 047900000000F100	  2392:             subi.w #0,$F100
00:00003CD6 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
00:00003CD8 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003CDA 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003CDC 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003CDE 047970000000F100	  2397:             subi.w #$7000,$F100
00:00003CE6 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
00:00003CE8 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003CEA 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003CEC 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003CEE 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
00:00003CF6 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
00:00003CF8 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003CFA 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003CFC 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003CFE 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
00:00003D06 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
00:00003D08 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
00:00003D10 F100
00:00003D12 04B9000000000000	  2412:             subi.l #0,$F100
00:00003D1A F100
00:00003D1C 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
00:00003D1E 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003D20 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003D22 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003D24 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
00:00003D2C F100
00:00003D2E 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
00:00003D30 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003D32 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003D34 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003D36 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
00:00003D3E F100
00:00003D40 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
00:00003D42 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003D44 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003D46 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003D48 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
00:00003D50 F100
00:00003D52 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003D54 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
00:00003D5C F100
00:00003D5E 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
00:00003D60 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
00:00003D62 203C11223344    	  2442:             move.l #$11223344,d0
00:00003D68 223C55667788    	  2443:             move.l #$55667788,d1
00:00003D6E 243C8899AABB    	  2444:             move.l #$8899aabb,d2
00:00003D74 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
00:00003D7A 7800            	  2446:             moveq  #$00000000,d4
00:00003D7C 7A00            	  2447:             moveq  #$00000000,d5
00:00003D7E 7C00            	  2448:             moveq  #$00000000,d6
00:00003D80 7E00            	  2449:             moveq  #$00000000,d7
00:00003D82 207C44332211    	  2450:             move.l #$44332211,a0
00:00003D88 227C88776655    	  2451:             move.l #$88776655,a1
00:00003D8E 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
00:00003D94 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
00:00003D9A 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
00:00003D9C 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
00:00003D9E 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003DA0 0C8400000044    	  2458:             cmpi.l #$00000044,d4
00:00003DA6 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
00:00003DA8 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
00:00003DAA 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
00:00003DAC 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003DAE 0C8500007788    	  2464:             cmpi.l #$00007788,d5
00:00003DB4 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
00:00003DB6 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
00:00003DB8 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
00:00003DBA 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003DBC 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
00:00003DC2 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
00:00003DC4 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:00003DC6 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
00:00003DC8 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003DCA 0C8500006655    	  2476:             cmpi.l #$00006655,d5
00:00003DD0 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
00:00003DD2 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:00003DD4 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
00:00003DD6 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003DD8 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
00:00003DDE 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
00:00003DE0 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:00003DE2 B9C2            	  2487:             cmpa.l d2,a4
00:00003DE4 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
00:00003DE6 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:00003DE8 BBC1            	  2491:             cmpa.l d1,a5
00:00003DEA 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
00:00003DEC 203C11223344    	  2498:             move.l #$11223344,d0
00:00003DF2 223C00010100    	  2499:             move.l #$00010100,d1
00:00003DF8 243C8899AABB    	  2500:             move.l #$8899aabb,d2
00:00003DFE 7601            	  2501:             moveq  #$00000001,d3
00:00003E00 7800            	  2502:             moveq  #$00000000,d4
00:00003E02 7A00            	  2503:             moveq  #$00000000,d5
00:00003E04 7C00            	  2504:             moveq  #$00000000,d6
00:00003E06 7E00            	  2505:             moveq  #$00000000,d7
00:00003E08 91C8            	  2506:             move.l #$00000000,a0
00:00003E0A 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
00:00003E10 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
00:00003E16 47F09804        	  2511:             lea 4(a0,a1.l),a3
00:00003E1A 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
00:00003E22 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
00:00003E24 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003E26 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
00:00003E2C 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
00:00003E2E 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:00003E36 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
00:00003E38 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003E3A 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
00:00003E40 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
00:00003E42 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:00003E48 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
00:00003E4A 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003E4C 0C3900B900003E2F	  2529:             cmpi.b #$B9,1+MOVE2
00:00003E54 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
00:00003E56 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
00:00003E5C 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
00:00003E5E 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003E60 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
00:00003E66 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
00:00003E68 203C11223344    	  2539:             move.l #$11223344,d0
00:00003E6E 223C00010100    	  2540:             move.l #$00010100,d1
00:00003E74 243C8899AABB    	  2541:             move.l #$8899aabb,d2
00:00003E7A 7602            	  2542:             moveq  #$00000002,d3
00:00003E7C 7800            	  2543:             moveq  #$00000000,d4
00:00003E7E 7A00            	  2544:             moveq  #$00000000,d5
00:00003E80 7C00            	  2545:             moveq  #$00000000,d6
00:00003E82 7E00            	  2546:             moveq  #$00000000,d7
00:00003E84 91C8            	  2547:             move.l #$00000000,a0
00:00003E86 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
00:00003E8C 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:00003E92 49F09804        	  2552:             lea 4(a0,a1.l),a4
00:00003E96 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
00:00003E9E 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
00:00003EA0 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003EA2 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
00:00003EA8 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
00:00003EAA 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:00003EB2 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
00:00003EB4 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003EB6 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
00:00003EBC 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
00:00003EBE 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
00:00003EC4 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
00:00003EC6 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003EC8 0C7967FE00003EB2	  2570:             cmpi.w #$67FE,8+MOVE1
00:00003ED0 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
00:00003ED2 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
00:00003ED8 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
00:00003EDA 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003EDC 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
00:00003EE2 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
00:00003EE4 203C11223344    	  2582:             move.l #$11223344,d0
00:00003EEA 223C00010100    	  2583:             move.l #$00010100,d1
00:00003EF0 243C8899AABB    	  2584:             move.l #$8899aabb,d2
00:00003EF6 7602            	  2585:             moveq  #$00000002,d3
00:00003EF8 7800            	  2586:             moveq  #$00000000,d4
00:00003EFA 7A00            	  2587:             moveq  #$00000000,d5
00:00003EFC 7C00            	  2588:             moveq  #$00000000,d6
00:00003EFE 7E00            	  2589:             moveq  #$00000000,d7
00:00003F00 91C8            	  2590:             move.l #$00000000,a0
00:00003F02 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
00:00003F08 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:00003F10 49F09804        	  2595:             lea 4(a0,a1.l),a4
00:00003F14 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
00:00003F1C 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
00:00003F1E 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003F20 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:00003F28 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
00:00003F2A 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00003F32 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
00:00003F34 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003F36 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:00003F3E 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
00:00003F40 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
00:00003F46 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
00:00003F48 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003F4A 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
00:00003F52 3F32
00:00003F54 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
00:00003F56 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:00003F5E 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
00:00003F60 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003F62 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
00:00003F6A 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
00:00003F6C 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
00:00003F6E 303C2FFF        	  2638:             move.w #$2FFF,d0
00:00003F72 46C0            	  2639:             move.w d0,SR
00:00003F74 6AFE            	  2640:             bpl.s *           * branch if Z clear
00:00003F76 66FE            	  2641:             bne.s *           * branch if N clear
00:00003F78 68FE            	  2642:             bvc.s *           * branch if V clear
00:00003F7A 64FE            	  2643:             bcc.s *           * branch if C clear
00:00003F7C 303C2F00        	  2644:             move.w #$2F00,d0
00:00003F80 44C0            	  2645:             move d0,CCR
00:00003F82 67FE            	  2646:             beq.s *           * branch if Z set
00:00003F84 6BFE            	  2647:             bmi.s *           * branch if N set
00:00003F86 69FE            	  2648:             bvs.s *           * branch if V set
00:00003F88 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
00:00003F8A 303C2000        	  2651:             move.w #$2000,d0
00:00003F8E 46C0            	  2652:             move.w d0,SR
00:00003F90 67FE            	  2653:             beq.s *           * branch if Z set
00:00003F92 6BFE            	  2654:             bmi.s *           * branch if N set
00:00003F94 69FE            	  2655:             bvs.s *           * branch if V set
00:00003F96 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
00:00003F98 307C0100        	  2659:             move.l #$00000100,a0
00:00003F9C 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
00:00003FA0 46D0            	  2661:             move.w (a0),SR
00:00003FA2 6AFE            	  2662:             bpl.s *           * branch if Z clear
00:00003FA4 66FE            	  2663:             bne.s *           * branch if N clear
00:00003FA6 68FE            	  2664:             bvc.s *           * branch if V clear
00:00003FA8 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
00:00003FAA 30BC2000        	  2667:             move.w #$2000,(a0)
00:00003FAE 46D0            	  2668:             move.w (a0),SR
00:00003FB0 67FE            	  2669:             beq.s *           * branch if Z set
00:00003FB2 6BFE            	  2670:             bmi.s *           * branch if N set
00:00003FB4 69FE            	  2671:             bvs.s *           * branch if V set
00:00003FB6 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
00:00003FB8 307C0100        	  2675:             move.l #$00000100,a0
00:00003FBC 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
00:00003FC0 46D8            	  2677:             move.w (a0)+,SR
00:00003FC2 6AFE            	  2678:             bpl.s *           * branch if Z clear
00:00003FC4 66FE            	  2679:             bne.s *           * branch if N clear
00:00003FC6 68FE            	  2680:             bvc.s *           * branch if V clear
00:00003FC8 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
00:00003FCA 30BC2000        	  2683:             move.w #$2000,(a0)
00:00003FCE 46D8            	  2684:             move.w (a0)+,SR
00:00003FD0 67FE            	  2685:             beq.s *           * branch if Z set
00:00003FD2 6BFE            	  2686:             bmi.s *           * branch if N set
00:00003FD4 69FE            	  2687:             bvs.s *           * branch if V set
00:00003FD6 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
00:00003FD8 307C0102        	  2691:             move.l #$00000102,a0
00:00003FDC 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
00:00003FE0 46D8            	  2693:             move.w (a0)+,SR
00:00003FE2 6AFE            	  2694:             bpl.s *           * branch if Z clear
00:00003FE4 66FE            	  2695:             bne.s *           * branch if N clear
00:00003FE6 68FE            	  2696:             bvc.s *           * branch if V clear
00:00003FE8 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
00:00003FEA 30BC2000        	  2699:             move.w #$2000,(a0)
00:00003FEE 46D8            	  2700:             move.w (a0)+,SR
00:00003FF0 67FE            	  2701:             beq.s *           * branch if Z set
00:00003FF2 6BFE            	  2702:             bmi.s *           * branch if N set
00:00003FF4 69FE            	  2703:             bvs.s *           * branch if V set
00:00003FF6 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
00:00003FF8 307C0102        	  2707:             move.l #$00000102,a0
00:00003FFC 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
00:00004002 46E80002        	  2709:             move.w 2(a0),SR
00:00004006 6AFE            	  2710:             bpl.s *           * branch if Z clear
00:00004008 66FE            	  2711:             bne.s *           * branch if N clear
00:0000400A 68FE            	  2712:             bvc.s *           * branch if V clear
00:0000400C 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
00:0000400E 317C20000002    	  2715:             move.w #$2000,2(a0)
00:00004014 46E80002        	  2716:             move.w 2(a0),SR
00:00004018 67FE            	  2717:             beq.s *           * branch if Z set
00:0000401A 6BFE            	  2718:             bmi.s *           * branch if N set
00:0000401C 69FE            	  2719:             bvs.s *           * branch if V set
00:0000401E 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
00:00004020 307C0100        	  2723:             move.l #$00000100,a0
00:00004024 7002            	  2724:             moveq  #$00000002,d0
00:00004026 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
00:0000402C 46F00802        	  2726:             move.w 2(a0,d0.l),SR
00:00004030 6AFE            	  2727:             bpl.s *           * branch if Z clear
00:00004032 66FE            	  2728:             bne.s *           * branch if N clear
00:00004034 68FE            	  2729:             bvc.s *           * branch if V clear
00:00004036 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
00:00004038 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
00:0000403E 46F00802        	  2733:             move.w 2(a0,d0.l),SR
00:00004042 67FE            	  2734:             beq.s *           * branch if Z set
00:00004044 6BFE            	  2735:             bmi.s *           * branch if N set
00:00004046 69FE            	  2736:             bvs.s *           * branch if V set
00:00004048 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
00:0000404A 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
00:00004050 46F80100        	  2741:             move.w $0100,SR
00:00004054 6AFE            	  2742:             bpl.s *           * branch if Z clear
00:00004056 66FE            	  2743:             bne.s *           * branch if N clear
00:00004058 68FE            	  2744:             bvc.s *           * branch if V clear
00:0000405A 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
00:0000405C 31FC20000100    	  2747:             move.w #$2000,$0100
00:00004062 46F80100        	  2748:             move.w $0100,SR
00:00004066 67FE            	  2749:             beq.s *           * branch if Z set
00:00004068 6BFE            	  2750:             bmi.s *           * branch if N set
00:0000406A 69FE            	  2751:             bvs.s *           * branch if V set
00:0000406C 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
00:0000406E 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
00:00004076 46F900010100    	  2756:             move.w $00010100,SR
00:0000407C 6AFE            	  2757:             bpl.s *           * branch if Z clear
00:0000407E 66FE            	  2758:             bne.s *           * branch if N clear
00:00004080 68FE            	  2759:             bvc.s *           * branch if V clear
00:00004082 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
00:00004084 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
00:0000408C 46F900010100    	  2763:             move.w $00010100,SR
00:00004092 67FE            	  2764:             beq.s *           * branch if Z set
00:00004094 6BFE            	  2765:             bmi.s *           * branch if N set
00:00004096 69FE            	  2766:             bvs.s *           * branch if V set
00:00004098 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
00:0000409A 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
00:0000409E 67FE            	  2771:             beq.s *           * branch if Z set
00:000040A0 6BFE            	  2772:             bmi.s *           * branch if N set
00:000040A2 69FE            	  2773:             bvs.s *           * branch if V set
00:000040A4 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
00:000040A6 7000            	  2777:             moveq  #$00000000,d0
00:000040A8 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
00:000040AC 67FE            	  2779:             beq.s *           * branch if Z set
00:000040AE 6BFE            	  2780:             bmi.s *           * branch if N set
00:000040B0 69FE            	  2781:             bvs.s *           * branch if V set
00:000040B2 65FE            	  2782:             bcs.s *           * branch if C set
00:000040B4 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
00:000040B8 67FE            	  2784:             beq.s *           * branch if Z set
00:000040BA 6BFE            	  2785:             bmi.s *           * branch if N set
00:000040BC 69FE            	  2786:             bvs.s *           * branch if V set
00:000040BE 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
00:000040C0 46FC2FFF        	  2790:             move.w #$2FFF,SR
00:000040C4 66FE            	  2791:             bne.s *           * branch if Z clear
00:000040C6 6AFE            	  2792:             bpl.s *           * branch if N clear
00:000040C8 68FE            	  2793:             bvc.s *           * branch if V clear
00:000040CA 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
00:000040CC 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
00:000040D0 40C0            	  2804:             move.w SR,d0
00:000040D2 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
00:000040D6 307C0100        	  2810:             move.l #$00000100,a0
00:000040DA 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
00:000040DE 40D0            	  2812:             move.w SR,(a0)
00:000040E0 0C50275A        	  2813:             cmpi.w #$275A,(a0)
00:000040E4 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
00:000040E6 307C0100        	  2817:             move.l #$00000100,a0
00:000040EA 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
00:000040EE 40D8            	  2819:             move.w SR,(a0)+
00:000040F0 307C0100        	  2820:             move.l #$00000100,a0
00:000040F4 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
00:000040F8 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
00:000040FA 307C0102        	  2825:             move.l #$00000102,a0
00:000040FE 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
00:00004102 40E0            	  2827:             move.w SR,-(a0)
00:00004104 307C0100        	  2828:             move.l #$00000100,a0
00:00004108 0C502766        	  2829:             cmpi.w #$2766,(a0)
00:0000410C 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
00:0000410E 307C0102        	  2833:             move.l #$00000102,a0
00:00004112 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
00:00004116 40E80004        	  2835:             move.w SR,4(a0)
00:0000411A 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
00:00004120 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
00:00004122 307C0102        	  2840:             move.l #$00000102,a0
00:00004126 7004            	  2841:             moveq  #$00000004,d0
00:00004128 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
00:0000412C 40F00804        	  2843:             move.w SR,4(a0,d0.l)
00:00004130 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
00:00004136 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
00:00004138 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
00:0000413C 40F80102        	  2849:             move.w SR,$0102
00:00004140 0C7827770102    	  2850:             cmpi.w #$2777,$0102
00:00004146 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
00:00004148 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
00:0000414C 40F900010102    	  2855:             move.w SR,$10102
00:00004152 0C79277700010102	  2856:             cmpi.w #$2777,$10102
00:0000415A 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
00:0000415C 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
00:00004160 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
00:00004162 707F            	  2873:             move.l #$0000007F,d0
00:00004164 223C00008FFF    	  2874:             move.l #$00008FFF,d1
00:0000416A 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
00:0000416C 4880            	  2877:             ext.w d0
00:0000416E 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004170 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
00:00004172 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
00:00004178 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
00:0000417A 48C1            	  2883:             ext.l d1
00:0000417C 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
00:0000417E 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
00:00004180 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
00:00004186 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
00:00004188 48C2            	  2889:             ext.l d2
00:0000418A 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
00:0000418C 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
00:0000418E 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
00:00004194 4840            	  2906:             swap d0
00:00004196 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004198 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
00:0000419A 0C8056781234    	  2909:             cmpi.l #$56781234,d0
00:000041A0 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
00:000041A2 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
00:000041A4 207C00345678    	  2924:             move.l #$00345678,a0
00:000041AA 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
00:000041AC 4DD0            	  2928:             lea (a0),a6
00:000041AE 200E            	  2929:             move.l a6,d0
00:000041B0 0C8000345678    	  2930:             cmpi.l #$00345678,d0
00:000041B6 66FE            	  2931:             bne.s *                   * branch if Z set
00:000041B8 4850            	  2932:             pea (a0)
00:000041BA 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
00:000041C0 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
00:000041C2 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
00:000041C4 4DE80004        	  2939:             lea 4(a0),a6
00:000041C8 200E            	  2940:             move.l a6,d0
00:000041CA 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
00:000041D0 66FE            	  2942:             bne.s *                   * branch if Z set
00:000041D2 48680004        	  2943:             pea 4(a0)
00:000041D6 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
00:000041DC 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
00:000041DE 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
00:000041E0 4DF04004        	  2950:             lea 4(a0,d4),a6
00:000041E4 200E            	  2951:             move.l a6,d0
00:000041E6 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
00:000041EC 66FE            	  2953:             bne.s *                   * branch if Z set
00:000041EE 48704804        	  2954:             pea 4(a0,d4.l)
00:000041F2 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
00:000041F8 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
00:000041FA 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
00:000041FC 4DF81234        	  2961:             lea $1234,a6
00:00004200 200E            	  2962:             move.l a6,d0
00:00004202 0C401234        	  2963:             cmpi.w #$1234,d0
00:00004206 66FE            	  2964:             bne.s *                   * branch if Z set
00:00004208 48781234        	  2965:             pea $1234
00:0000420C 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
00:00004212 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
00:00004214 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
00:00004216 4DF900345678    	  2972:             lea $00345678,a6
00:0000421C 200E            	  2973:             move.l a6,d0
00:0000421E B08E            	  2974:             cmp.l a6,d0
00:00004220 66FE            	  2975:             bne.s *                   * branch if Z set
00:00004222 487900345678    	  2976:             pea $00345678
00:00004228 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
00:0000422E 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
00:00004230 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
00:00004232 4DFA0008        	  2983:             lea LEA1(pc),a6
00:00004236 200E            	  2984:             move.l a6,d0
00:00004238 B08E            	  2985:             cmp.l a6,d0
00:0000423A 66FE            	  2986:             bne.s *                   * branch if Z set
00:0000423C 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
00:00004240 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
00:00004246 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
00:00004248 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
00:0000424A 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
00:0000424E 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
00:00004250 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
00:00004254 4210            	  3014:             move.b #$00,(a0)
00:00004256 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004258 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
00:0000425A 4AD0            	  3017:             tas (a0)
00:0000425C 0C100080        	  3018:             cmpi.b #$80,(a0)
00:00004260 66FE            	  3019:             bne.s *                   * branch if Z set
00:00004262 10BC00F5        	  3020:             move.b #$F5,(a0)
00:00004266 4AD0            	  3021:             tas (a0)
00:00004268 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
00:0000426A 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
00:0000426C 4AD0            	  3024:             tas (a0)
00:0000426E 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
00:00004272 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
00:00004274 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
00:00004276 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
00:0000427A 4210            	  3043:             move.b #$00,(a0)
00:0000427C 4A10            	  3044:             tst.b (a0)
00:0000427E 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004280 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
00:00004282 10BC00F5        	  3047:             move.b #$F5,(a0)
00:00004286 4A10            	  3048:             tst.b (a0)
00:00004288 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
00:0000428A 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
00:0000428C 4250            	  3053:             move.w #$0000,(a0)
00:0000428E 4A50            	  3054:             tst.w (a0)
00:00004290 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004292 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
00:00004294 30BCF567        	  3057:             move.w #$F567,(a0)
00:00004298 4A50            	  3058:             tst.w (a0)
00:0000429A 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
00:0000429C 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
00:0000429E 4290            	  3063:             move.l #$00000000,(a0)
00:000042A0 4A90            	  3064:             tst.l (a0)
00:000042A2 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
00:000042A4 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
00:000042A6 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
00:000042AC 4A90            	  3068:             tst.l (a0)
00:000042AE 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
00:000042B0 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
00:000042B2 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
00:000042B4 207C11223344    	  3083:             move.l #$11223344,a0
00:000042BA 203C11223344    	  3084:             move.l #$11223344,d0
00:000042C0 4E500000        	  3085:             link a0,#$0
00:000042C4 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
00:000042CA 4E58            	  3088:             unlk a0
00:000042CC B1C0            	  3089:             cmp.l d0,a0
00:000042CE 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
00:000042D0 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
00:000042D2 207C11223344    	  3101:             move.l #$11223344,a0
00:000042D8 4E60            	  3102:             move a0,USP
00:000042DA 4E69            	  3103:             move USP,a1
00:000042DC B3C8            	  3104:             cmp.l a0,a1
00:000042DE 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
00:000042E0 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: 
                            	  3116: op_CHK:
                            	  3117: 
00:000042E2 20780018        	  3118: 	move.l 6*4,a0							; get check vector
00:000042E6 21FC000027660018	  3119: 	move.l #EXCEPTION_6,6*4		; set vector
00:000042EE 303C1122        	  3120: 	move.w #$1122,d0
00:000042F2 323C1122        	  3121: 	move.w #$1122,d1
00:000042F6 4380            	  3122: 	chk d0,d1
                            	  3123: 
00:000042F8 4E71            	  3124: 	nop
00:000042FA 4E71            	  3125: 	nop
                            	  3126: 
00:000042FC 323C1122        	  3127: 	move.w #$1122,d1
00:00004300 43BC1122        	  3128: 	chk #$1122,d1
                            	  3129: 
00:00004304 323C1122        	  3130: 	move.w #$1122,d1
00:00004308 43BC007A        	  3131: 	chk #00122,d1
00:0000430C BCBCEEEE0006    	  3132: 	cmp.l #$EEEE0006,d6
00:00004312 66FE            	  3133: 	bne.s *                   ; branch if Z set
                            	  3134: 
00:00004314 303C1122        	  3135: 	move.w #$1122,d0
00:00004318 323C8000        	  3136: 	move.w #$8000,d1
00:0000431C 4380            	  3137: 	chk d0,d1
00:0000431E BCBCEEEE0006    	  3138: 	cmp.l #$EEEE0006,d6
00:00004324 66FE            	  3139: 	bne.s *                   ; branch if Z set
                            	  3140: 
00:00004326 21C80018        	  3141: 	move.l a0,6*4							; restore old vector
00:0000432A 4E75            	  3142: 	rts
                            	  3143: 
                            	  3144: 
                            	  3145: *-----------------------------------------------------------
                            	  3146: *-----------------------------------------------------------
                            	  3147: * OPCODE : NEGS
                            	  3148: *-----------------------------------------------------------
                            	  3149: *-----------------------------------------------------------
                            	  3150: op_NEGS:
                            	  3151: 
                            	  3152: *     NOT - BYTE
00:0000432C 307C0100        	  3153:             move.l #$00000100,a0
00:00004330 7000            	  3154:             moveq  #$00000000,d0
00:00004332 4600            	  3155:             not.b d0
00:00004334 6AFE            	  3156:             bpl.s *                   * Check N Flag  bmi/bpl
00:00004336 67FE            	  3157:             beq.s *                   * Check Z Flag  beq/bne
00:00004338 4600            	  3158:             not.b d0
00:0000433A 6BFE            	  3159:             bmi.s *                   * Check N Flag  bmi/bpl
00:0000433C 66FE            	  3160:             bne.s *                   * Check Z Flag  beq/bne
00:0000433E 4A00            	  3161:             cmpi.b #$00,d0
00:00004340 66FE            	  3162:             bne.s *                   * Check Z Flag  beq/bne
00:00004342 10BC0080        	  3163:             move.b #$80,(a0)
00:00004346 4610            	  3164:             not.b (a0)
00:00004348 6BFE            	  3165:             bmi.s *                   * Check N Flag  bmi/bpl
00:0000434A 67FE            	  3166:             beq.s *                   * Check Z Flag  beq/bne
00:0000434C 4610            	  3167:             not.b (a0)
00:0000434E 6AFE            	  3168:             bpl.s *                   * Check N Flag  bmi/bpl
00:00004350 67FE            	  3169:             beq.s *                   * Check Z Flag  beq/bne
00:00004352 0C100080        	  3170:             cmpi.b #$80,(a0)
00:00004356 66FE            	  3171:             bne.s *                   * Check Z Flag  beq/bne
                            	  3172: 
                            	  3173: *     NOT - WORD
00:00004358 307C0100        	  3174:             move.l #$00000100,a0
00:0000435C 7000            	  3175:             moveq  #$00000000,d0
00:0000435E 4640            	  3176:             not.w d0
00:00004360 6AFE            	  3177:             bpl.s *                   * Check N Flag  bmi/bpl
00:00004362 67FE            	  3178:             beq.s *                   * Check Z Flag  beq/bne
00:00004364 4640            	  3179:             not.w d0
00:00004366 6BFE            	  3180:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004368 66FE            	  3181:             bne.s *                   * Check Z Flag  beq/bne
00:0000436A 4A40            	  3182:             cmpi.w #$0000,d0
00:0000436C 66FE            	  3183:             bne.s *                   * Check Z Flag  beq/bne
00:0000436E 30BC5A5A        	  3184:             move.w #$5a5a,(a0)
00:00004372 4650            	  3185:             not.w (a0)
00:00004374 6AFE            	  3186:             bpl.s *                   * Check N Flag  bmi/bpl
00:00004376 67FE            	  3187:             beq.s *                   * Check Z Flag  beq/bne
00:00004378 4650            	  3188:             not.w (a0)
00:0000437A 6BFE            	  3189:             bmi.s *                   * Check N Flag  bmi/bpl
00:0000437C 67FE            	  3190:             beq.s *                   * Check Z Flag  beq/bne
00:0000437E 0C505A5A        	  3191:             cmpi.w #$5a5a,(a0)
00:00004382 66FE            	  3192:             bne.s *                   * Check Z Flag  beq/bne
                            	  3193: 
                            	  3194: *     NOT - LONG
00:00004384 307C0100        	  3195:             move.l #$00000100,a0
00:00004388 7000            	  3196:             moveq  #$00000000,d0
00:0000438A 4680            	  3197:             not.l d0
00:0000438C 6AFE            	  3198:             bpl.s *                   * Check N Flag  bmi/bpl
00:0000438E 67FE            	  3199:             beq.s *                   * Check Z Flag  beq/bne
00:00004390 4680            	  3200:             not.l d0
00:00004392 6BFE            	  3201:             bmi.s *                   * Check N Flag  bmi/bpl
00:00004394 66FE            	  3202:             bne.s *                   * Check Z Flag  beq/bne
00:00004396 4A80            	  3203:             cmpi.l #$00000000,d0
00:00004398 66FE            	  3204:             bne.s *                   * Check Z Flag  beq/bne
00:0000439A 20BC5A5A1234    	  3205:             move.l #$5a5a1234,(a0)
00:000043A0 4690            	  3206:             not.l (a0)
00:000043A2 6AFE            	  3207:             bpl.s *                   * Check N Flag  bmi/bpl
00:000043A4 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne
00:000043A6 4690            	  3209:             not.l (a0)
00:000043A8 6BFE            	  3210:             bmi.s *                   * Check N Flag  bmi/bpl
00:000043AA 67FE            	  3211:             beq.s *                   * Check Z Flag  beq/bne
00:000043AC 0C905A5A1234    	  3212:             cmpi.l #$5a5a1234,(a0)
00:000043B2 66FE            	  3213:             bne.s *                   * Check Z Flag  beq/bne
                            	  3214: 
                            	  3215: * -----
                            	  3216: 
                            	  3217: *     NEG - BYTE
00:000043B4 307C0100        	  3218:             move.l #$00000100,a0
00:000043B8 7000            	  3219:             moveq  #$00000000,d0
00:000043BA 7240D241        	  3220:             move.l #$00000080,d1
00:000043BE 4400            	  3221:             neg.b d0
00:000043C0 6BFE            	  3222:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000043C2 66FE            	  3223:             bne.s *                   * Check Z Flag  beq/bne 1
00:000043C4 65FE            	  3224:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:000043C6 69FE            	  3225:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000043C8 4401            	  3226:             neg.b d1
00:000043CA 6AFE            	  3227:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:000043CC 67FE            	  3228:             beq.s *                   * Check Z Flag  beq/bne 0
00:000043CE 64FE            	  3229:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000043D0 68FE            	  3230:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:000043D2 0C010080        	  3231:             cmpi.b #$80,d1
00:000043D6 66FE            	  3232:             bne.s *                   * Check Z Flag  beq/bne
00:000043D8 10BC007F        	  3233:             move.b #$7F,(a0)
00:000043DC 4410            	  3234:             neg.b (a0)
00:000043DE 6AFE            	  3235:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:000043E0 67FE            	  3236:             beq.s *                   * Check Z Flag  beq/bne 0
00:000043E2 64FE            	  3237:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000043E4 69FE            	  3238:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000043E6 10BC00F5        	  3239:             move.b #$F5,(a0)
00:000043EA 4410            	  3240:             neg.b (a0)
00:000043EC 6BFE            	  3241:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000043EE 67FE            	  3242:             beq.s *                   * Check Z Flag  beq/bne 0
00:000043F0 64FE            	  3243:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000043F2 69FE            	  3244:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000043F4 0C10000B        	  3245:             cmpi.b #$0B,(a0)
00:000043F8 66FE            	  3246:             bne.s *                   * Check Z Flag  beq/bne
                            	  3247: 
                            	  3248: * -----
                            	  3249: 
                            	  3250: *     NEG - WORD
00:000043FA 307C0100        	  3251:             move.l #$00000100,a0
00:000043FE 7000            	  3252:             moveq  #$00000000,d0
00:00004400 223C00008000    	  3253:             move.l #$00008000,d1
00:00004406 4440            	  3254:             neg.w d0
00:00004408 6BFE            	  3255:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000440A 66FE            	  3256:             bne.s *                   * Check Z Flag  beq/bne 1
00:0000440C 65FE            	  3257:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:0000440E 69FE            	  3258:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004410 4441            	  3259:             neg.w d1
00:00004412 6AFE            	  3260:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004414 67FE            	  3261:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004416 64FE            	  3262:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004418 68FE            	  3263:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:0000441A 0C418000        	  3264:             cmpi.w #$8000,d1
00:0000441E 66FE            	  3265:             bne.s *                   * Check Z Flag  beq/bne
00:00004420 30BC7FFF        	  3266:             move.w #$7FFF,(a0)
00:00004424 4450            	  3267:             neg.w (a0)
00:00004426 6AFE            	  3268:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004428 67FE            	  3269:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000442A 64FE            	  3270:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000442C 69FE            	  3271:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000442E 30BCF578        	  3272:             move.w #$F578,(a0)
00:00004432 4450            	  3273:             neg.w (a0)
00:00004434 6BFE            	  3274:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004436 67FE            	  3275:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004438 64FE            	  3276:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000443A 69FE            	  3277:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000443C 0C500A88        	  3278:             cmpi.w #$0A88,(a0)
00:00004440 66FE            	  3279:             bne.s *                   * Check Z Flag  beq/bne
                            	  3280: 
                            	  3281: * -----
                            	  3282: 
                            	  3283: *     NEG - LONG
00:00004442 307C0100        	  3284:             move.l #$00000100,a0
00:00004446 7000            	  3285:             moveq  #$00000000,d0
00:00004448 223C80000000    	  3286:             move.l #$80000000,d1
00:0000444E 4480            	  3287:             neg.l d0
00:00004450 6BFE            	  3288:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004452 66FE            	  3289:             bne.s *                   * Check Z Flag  beq/bne 1
00:00004454 65FE            	  3290:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00004456 69FE            	  3291:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004458 4481            	  3292:             neg.l d1
00:0000445A 6AFE            	  3293:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000445C 67FE            	  3294:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000445E 64FE            	  3295:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004460 68FE            	  3296:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00004462 0C8180000000    	  3297:             cmpi.l #$80000000,d1
00:00004468 66FE            	  3298:             bne.s *                   * Check Z Flag  beq/bne
00:0000446A 20BC7FFFFFFF    	  3299:             move.l #$7FFFFFFF,(a0)
00:00004470 4490            	  3300:             neg.l (a0)
00:00004472 6AFE            	  3301:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004474 67FE            	  3302:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004476 64FE            	  3303:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004478 69FE            	  3304:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000447A 20BCF5781234    	  3305:             move.l #$F5781234,(a0)
00:00004480 4490            	  3306:             neg.l (a0)
00:00004482 6BFE            	  3307:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004484 67FE            	  3308:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004486 64FE            	  3309:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004488 69FE            	  3310:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000448A 0C900A87EDCC    	  3311:             cmpi.l #$0A87EDCC,(a0)
00:00004490 66FE            	  3312:             bne.s *                   * Check Z Flag  beq/bne
                            	  3313: 
                            	  3314: 
                            	  3315: * -----
                            	  3316: 
                            	  3317: *     NEGX - BYTE
00:00004492 307C0100        	  3318:             move.l #$00000100,a0
00:00004496 7000            	  3319:             moveq  #$00000000,d0
00:00004498 7240D241        	  3320:             move.l #$00000080,d1
00:0000449C 003C0010        	  3321:             ori.b #$10,CCR        * Set X Flag
00:000044A0 4000            	  3322:             negx.b d0
00:000044A2 6AFE            	  3323:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:000044A4 67FE            	  3324:             beq.s *                   * Check Z Flag  beq/bne 1
00:000044A6 64FE            	  3325:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:000044A8 69FE            	  3326:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000044AA 023C00EF        	  3327:             andi.b #$EF,CCR       * Clear X Flag
00:000044AE 4000            	  3328:             negx.b d0
00:000044B0 6BFE            	  3329:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000044B2 67FE            	  3330:             beq.s *                   * Check Z Flag  beq/bne 1
00:000044B4 64FE            	  3331:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:000044B6 69FE            	  3332:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000044B8 003C0010        	  3333:             ori.b #$10,CCR        * Set X Flag
00:000044BC 4001            	  3334:             negx.b d1
00:000044BE 6BFE            	  3335:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:000044C0 67FE            	  3336:             beq.s *                   * Check Z Flag  beq/bne 0
00:000044C2 64FE            	  3337:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000044C4 69FE            	  3338:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:000044C6 0C01007F        	  3339:             cmpi.b #$7F,d1
00:000044CA 66FE            	  3340:             bne.s *                   * Check Z Flag  beq/bne
00:000044CC 023C00EF        	  3341:             andi.b #$EF,CCR       * Clear X Flag
00:000044D0 4001            	  3342:             negx.b d1
00:000044D2 6AFE            	  3343:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:000044D4 67FE            	  3344:             beq.s *                   * Check Z Flag  beq/bne 0
00:000044D6 64FE            	  3345:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000044D8 69FE            	  3346:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:000044DA 0C010081        	  3347:             cmpi.b #$81,d1
00:000044DE 66FE            	  3348:             bne.s *                   * Check Z Flag  beq/bne
00:000044E0 10BC007F        	  3349:             move.b #$7F,(a0)
00:000044E4 003C0010        	  3350:             ori.b #$10,CCR        * Set X Flag
00:000044E8 4010            	  3351:             negx.b (a0)
00:000044EA 6AFE            	  3352:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:000044EC 67FE            	  3353:             beq.s *                   * Check Z Flag  beq/bne 0
00:000044EE 64FE            	  3354:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3355:             * I think overflow should happen here.
                            	  3356: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:000044F0 10BC007F        	  3357:             move.b #$7F,(a0)
00:000044F4 023C00EF        	  3358:             andi.b #$EF,CCR       * Clear X Flag
00:000044F8 4010            	  3359:             negx.b (a0)
00:000044FA 6AFE            	  3360:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:000044FC 67FE            	  3361:             beq.s *                   * Check Z Flag  beq/bne 0
00:000044FE 64FE            	  3362:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004500 69FE            	  3363:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004502 10BC00F5        	  3364:             move.b #$F5,(a0)
00:00004506 003C0010        	  3365:             ori.b #$10,CCR        * Set X Flag
00:0000450A 4010            	  3366:             negx.b (a0)
00:0000450C 6BFE            	  3367:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000450E 67FE            	  3368:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004510 64FE            	  3369:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004512 69FE            	  3370:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004514 0C10000A        	  3371:             cmpi.b #$0A,(a0)
00:00004518 66FE            	  3372:             bne.s *                   * Check Z Flag  beq/bne
00:0000451A 023C00EF        	  3373:             andi.b #$EF,CCR       * Clear X Flag
00:0000451E 4010            	  3374:             negx.b (a0)
00:00004520 6AFE            	  3375:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00004522 67FE            	  3376:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004524 64FE            	  3377:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004526 69FE            	  3378:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004528 0C1000F6        	  3379:             cmpi.b #$F6,(a0)
00:0000452C 66FE            	  3380:             bne.s *                   * Check Z Flag  beq/bne
                            	  3381: 
                            	  3382: 
                            	  3383: 
                            	  3384: * -----
                            	  3385: 
                            	  3386: *     NEGX - WORD
00:0000452E 307C0100        	  3387:             move.l #$00000100,a0
00:00004532 7000            	  3388:             moveq  #$00000000,d0
00:00004534 223C00008000    	  3389:             move.l #$00008000,d1
00:0000453A 003C0010        	  3390:             ori.b #$10,CCR        * Set X Flag
00:0000453E 4040            	  3391:             negx.w d0
00:00004540 6AFE            	  3392:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00004542 67FE            	  3393:             beq.s *                   * Check Z Flag  beq/bne 1
00:00004544 64FE            	  3394:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00004546 69FE            	  3395:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004548 023C00EF        	  3396:             andi.b #$EF,CCR       * Clear X Flag
00:0000454C 4040            	  3397:             negx.w d0
00:0000454E 6BFE            	  3398:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004550 67FE            	  3399:             beq.s *                   * Check Z Flag  beq/bne 1
00:00004552 64FE            	  3400:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00004554 69FE            	  3401:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004556 003C0010        	  3402:             ori.b #$10,CCR        * Set X Flag
00:0000455A 4041            	  3403:             negx.w d1
00:0000455C 6BFE            	  3404:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000455E 67FE            	  3405:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004560 64FE            	  3406:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004562 69FE            	  3407:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004564 0C417FFF        	  3408:             cmpi.w #$7FFF,d1
00:00004568 66FE            	  3409:             bne.s *                   * Check Z Flag  beq/bne
00:0000456A 023C00EF        	  3410:             andi.b #$EF,CCR       * Clear X Flag
00:0000456E 4041            	  3411:             negx.w d1
00:00004570 6AFE            	  3412:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004572 67FE            	  3413:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004574 64FE            	  3414:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004576 69FE            	  3415:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004578 0C418001        	  3416:             cmpi.w #$8001,d1
00:0000457C 66FE            	  3417:             bne.s *                   * Check Z Flag  beq/bne
00:0000457E 30BC7FFF        	  3418:             move.w #$7FFF,(a0)
00:00004582 003C0010        	  3419:             ori.b #$10,CCR        * Set X Flag
00:00004586 4050            	  3420:             negx.w (a0)
00:00004588 6AFE            	  3421:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000458A 67FE            	  3422:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000458C 64FE            	  3423:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3424: ***            
                            	  3425: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000458E 30BCF567        	  3426:             move.w #$F567,(a0)
00:00004592 023C00EF        	  3427:             andi.b #$EF,CCR       * Clear X Flag
00:00004596 4050            	  3428:             negx.w (a0)
00:00004598 6BFE            	  3429:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000459A 67FE            	  3430:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000459C 64FE            	  3431:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000459E 69FE            	  3432:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000045A0 30BCF567        	  3433:             move.w #$F567,(a0)
00:000045A4 003C0010        	  3434:             ori.b #$10,CCR        * Set X Flag
00:000045A8 4050            	  3435:             negx.w (a0)
00:000045AA 6BFE            	  3436:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000045AC 67FE            	  3437:             beq.s *                   * Check Z Flag  beq/bne 0
00:000045AE 64FE            	  3438:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000045B0 69FE            	  3439:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000045B2 0C500A98        	  3440:             cmpi.w #$0A98,(a0)
00:000045B6 66FE            	  3441:             bne.s *                   * Check Z Flag  beq/bne
00:000045B8 023C00EF        	  3442:             andi.b #$EF,CCR       * Clear X Flag
00:000045BC 4050            	  3443:             negx.w (a0)
00:000045BE 6AFE            	  3444:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:000045C0 67FE            	  3445:             beq.s *                   * Check Z Flag  beq/bne 0
00:000045C2 64FE            	  3446:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000045C4 69FE            	  3447:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000045C6 0C50F568        	  3448:             cmpi.w #$F568,(a0)
00:000045CA 66FE            	  3449:             bne.s *                   * Check Z Flag  beq/bne
                            	  3450: 
                            	  3451: 
                            	  3452: * -----
                            	  3453: 
                            	  3454: *     NEGX - LONG
00:000045CC 307C0100        	  3455:             move.l #$00000100,a0
00:000045D0 7000            	  3456:             moveq  #$00000000,d0
00:000045D2 223C80000000    	  3457:             move.l #$80000000,d1
00:000045D8 003C0010        	  3458:             ori.b #$10,CCR        * Set X Flag
00:000045DC 4080            	  3459:             negx.l d0
00:000045DE 6AFE            	  3460:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:000045E0 67FE            	  3461:             beq.s *                   * Check Z Flag  beq/bne 1
00:000045E2 64FE            	  3462:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:000045E4 69FE            	  3463:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000045E6 023C00EF        	  3464:             andi.b #$EF,CCR       * Clear X Flag
00:000045EA 4080            	  3465:             negx.l d0
00:000045EC 6BFE            	  3466:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000045EE 67FE            	  3467:             beq.s *                   * Check Z Flag  beq/bne 1
00:000045F0 64FE            	  3468:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:000045F2 69FE            	  3469:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000045F4 003C0010        	  3470:             ori.b #$10,CCR        * Set X Flag
00:000045F8 4081            	  3471:             negx.l d1
00:000045FA 6BFE            	  3472:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:000045FC 67FE            	  3473:             beq.s *                   * Check Z Flag  beq/bne 0
00:000045FE 64FE            	  3474:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004600 69FE            	  3475:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004602 0C817FFFFFFF    	  3476:             cmpi.l #$7FFFFFFF,d1
00:00004608 66FE            	  3477:             bne.s *                   * Check Z Flag  beq/bne
00:0000460A 023C00EF        	  3478:             andi.b #$EF,CCR       * Clear X Flag
00:0000460E 4081            	  3479:             negx.l d1
00:00004610 6AFE            	  3480:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004612 67FE            	  3481:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004614 64FE            	  3482:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3483: ****            
                            	  3484: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004616 0C8180000001    	  3485:             cmpi.l #$80000001,d1
00:0000461C 66FE            	  3486:             bne.s *                   * Check Z Flag  beq/bne
00:0000461E 20BC00007FFF    	  3487:             move.l #$7FFF,(a0)
00:00004624 003C0010        	  3488:             ori.b #$10,CCR        * Set X Flag
00:00004628 4090            	  3489:             negx.l (a0)
00:0000462A 6AFE            	  3490:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000462C 67FE            	  3491:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000462E 64FE            	  3492:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3493: ****            
                            	  3494: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004630 20BCF5671234    	  3495:             move.l #$F5671234,(a0)
00:00004636 023C00EF        	  3496:             andi.b #$EF,CCR       * Clear X Flag
00:0000463A 4090            	  3497:             negx.l (a0)
00:0000463C 6BFE            	  3498:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000463E 67FE            	  3499:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004640 64FE            	  3500:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004642 69FE            	  3501:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004644 20BCF5675678    	  3502:             move.l #$F5675678,(a0)
00:0000464A 003C0010        	  3503:             ori.b #$10,CCR        * Set X Flag
00:0000464E 4090            	  3504:             negx.l (a0)
00:00004650 6BFE            	  3505:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004652 67FE            	  3506:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004654 64FE            	  3507:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004656 69FE            	  3508:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004658 0C900A98A987    	  3509:             cmpi.l #$0A98A987,(a0)
00:0000465E 66FE            	  3510:             bne.s *                   * Check Z Flag  beq/bne
00:00004660 023C00EF        	  3511:             andi.b #$EF,CCR       * Clear X Flag
00:00004664 4090            	  3512:             negx.l (a0)
00:00004666 6AFE            	  3513:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00004668 67FE            	  3514:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000466A 64FE            	  3515:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000466C 69FE            	  3516:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000466E 0C90F5675679    	  3517:             cmpi.l #$F5675679,(a0)
00:00004674 66FE            	  3518:             bne.s *                   * Check Z Flag  beq/bne
                            	  3519: 
                            	  3520: 
                            	  3521: * -----
                            	  3522: 
                            	  3523: *     CLR - BYTE
00:00004676 307C0100        	  3524:             move.l #$00000100,a0
00:0000467A 203C12345678    	  3525:             move.l #$12345678,d0
00:00004680 223C12345678    	  3526:             move.l #$12345678,d1
00:00004686 243C12345678    	  3527:             move.l #$12345678,d2
00:0000468C 283C12345600    	  3528:             move.l #$12345600,d4
00:00004692 2A3C12340000    	  3529:             move.l #$12340000,d5
00:00004698 7C00            	  3530:             moveq  #$00000000,d6
                            	  3531: 
00:0000469A 4200            	  3532:             clr.b d0
00:0000469C 66FE            	  3533:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000469E 6BFE            	  3534:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000046A0 B880            	  3535:             cmp.l d0,d4
00:000046A2 66FE            	  3536:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3537: 
00:000046A4 4241            	  3538:             clr.w d1
00:000046A6 66FE            	  3539:             bne.s *                   * Check Z Flag  beq/bne 0
00:000046A8 6BFE            	  3540:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000046AA BA81            	  3541:             cmp.l d1,d5
00:000046AC 66FE            	  3542:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3543: 
00:000046AE 7400            	  3544:             clr.l d2
00:000046B0 66FE            	  3545:             bne.s *                   * Check Z Flag  beq/bne 0
00:000046B2 6BFE            	  3546:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000046B4 BC82            	  3547:             cmp.l d2,d6
00:000046B6 66FE            	  3548:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3549: 
00:000046B8 4E75            	  3550:             rts
                            	  3551: 
                            	  3552: 
                            	  3553: 
                            	  3554: *-----------------------------------------------------------
                            	  3555: *-----------------------------------------------------------
                            	  3556: * OPCODE : MOVEM
                            	  3557: *-----------------------------------------------------------
                            	  3558: *-----------------------------------------------------------
                            	  3559: op_MOVEM:
                            	  3560: 
                            	  3561: *     WORD  Registers --> Memory
00:000046BA 203C0000D0D0    	  3562:             move.l #$0000d0d0,d0
00:000046C0 223C0000D1D1    	  3563:             move.l #$0000d1d1,d1
00:000046C6 243C0000D2D2    	  3564:             move.l #$0000d2d2,d2
00:000046CC 263C0000D3D3    	  3565:             move.l #$0000d3d3,d3
00:000046D2 283C0000D4D4    	  3566:             move.l #$0000d4d4,d4
00:000046D8 2A3C0000D5D5    	  3567:             move.l #$0000d5d5,d5
00:000046DE 2C3C0000D6D6    	  3568:             move.l #$0000d6d6,d6
00:000046E4 2E3C0000D7D7    	  3569:             move.l #$0000d7d7,d7
00:000046EA 307C0A0A        	  3570:             move.l #$00000a0a,a0
00:000046EE 327C1A1A        	  3571:             move.l #$00001a1a,a1
00:000046F2 347C2A2A        	  3572:             move.l #$00002a2a,a2
00:000046F6 367C3A3A        	  3573:             move.l #$00003a3a,a3
00:000046FA 387C4A4A        	  3574:             move.l #$00004a4a,a4
00:000046FE 3A7C5A5A        	  3575:             move.l #$00005a5a,a5
00:00004702 3C7C6A6A        	  3576:             move.l #$00006a6a,a6
                            	  3577: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3578: 
00:00004706 48B8FFFF0100    	  3579:             movem.w D0-D7/A0-A7,$00000100
                            	  3580: 
00:0000470C 307C0100        	  3581:             move.l #$00000100,a0
                            	  3582: 
00:00004710 B058            	  3583:             cmp.w (a0)+,d0
00:00004712 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004714 B258            	  3585:             cmp.w (a0)+,d1
00:00004716 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004718 B458            	  3587:             cmp.w (a0)+,d2
00:0000471A 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000471C B658            	  3589:             cmp.w (a0)+,d3
00:0000471E 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004720 B858            	  3591:             cmp.w (a0)+,d4
00:00004722 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004724 BA58            	  3593:             cmp.w (a0)+,d5
00:00004726 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004728 BC58            	  3595:             cmp.w (a0)+,d6
00:0000472A 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000472C BE58            	  3597:             cmp.w (a0)+,d7
00:0000472E 66FE            	  3598:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3599: 
00:00004730 0C580A0A        	  3600:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:00004734 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3602: 
00:00004736 B2D8            	  3603:             cmp.w (a0)+,a1
00:00004738 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000473A B4D8            	  3605:             cmp.w (a0)+,a2
00:0000473C 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000473E B6D8            	  3607:             cmp.w (a0)+,a3
00:00004740 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004742 B8D8            	  3609:             cmp.w (a0)+,a4
00:00004744 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004746 BAD8            	  3611:             cmp.w (a0)+,a5
00:00004748 66FE            	  3612:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000474A BCD8            	  3613:             cmp.w (a0)+,a6
00:0000474C 66FE            	  3614:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3615: 
                            	  3616: 
                            	  3617: 
                            	  3618: 
                            	  3619: *     LONG  Registers --> Memory
00:0000474E 203CD0D0D0D0    	  3620:             move.l #$d0d0d0d0,d0
00:00004754 223CD1D1D1D1    	  3621:             move.l #$d1d1d1d1,d1
00:0000475A 243CD2D2D2D2    	  3622:             move.l #$d2d2d2d2,d2
00:00004760 263CD3D3D3D3    	  3623:             move.l #$d3d3d3d3,d3
00:00004766 283CD4D4D4D4    	  3624:             move.l #$d4d4d4d4,d4
00:0000476C 2A3CD5D5D5D5    	  3625:             move.l #$d5d5d5d5,d5
00:00004772 2C3CD6D6D6D6    	  3626:             move.l #$d6d6d6d6,d6
00:00004778 2E3CD7D7D7D7    	  3627:             move.l #$d7d7d7d7,d7
00:0000477E 207C0A0A0A0A    	  3628:             move.l #$0a0a0a0a,a0
00:00004784 227C1A1A1A1A    	  3629:             move.l #$1a1a1a1a,a1
00:0000478A 247C2A2A2A2A    	  3630:             move.l #$2a2a2a2a,a2
00:00004790 267C3A3A3A3A    	  3631:             move.l #$3a3a3a3a,a3
00:00004796 287C4A4A4A4A    	  3632:             move.l #$4a4a4a4a,a4
00:0000479C 2A7C5A5A5A5A    	  3633:             move.l #$5a5a5a5a,a5
00:000047A2 2C7C6A6A6A6A    	  3634:             move.l #$6a6a6a6a,a6
                            	  3635: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3636: 
                            	  3637: 
00:000047A8 48F8FFFF0120    	  3638:             movem.l D0-D7/A0-A7,$00000120
                            	  3639: 
00:000047AE 307C0120        	  3640:             move.l #$00000120,a0
                            	  3641: 
00:000047B2 B098            	  3642:             cmp.l (a0)+,d0
00:000047B4 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047B6 B298            	  3644:             cmp.l (a0)+,d1
00:000047B8 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047BA B498            	  3646:             cmp.l (a0)+,d2
00:000047BC 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047BE B698            	  3648:             cmp.l (a0)+,d3
00:000047C0 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047C2 B898            	  3650:             cmp.l (a0)+,d4
00:000047C4 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047C6 BA98            	  3652:             cmp.l (a0)+,d5
00:000047C8 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047CA BC98            	  3654:             cmp.l (a0)+,d6
00:000047CC 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047CE BE98            	  3656:             cmp.l (a0)+,d7
00:000047D0 66FE            	  3657:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3658: 
00:000047D2 0C980A0A0A0A    	  3659:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:000047D8 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3661: 
00:000047DA B3D8            	  3662:             cmp.l (a0)+,a1
00:000047DC 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047DE B5D8            	  3664:             cmp.l (a0)+,a2
00:000047E0 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047E2 B7D8            	  3666:             cmp.l (a0)+,a3
00:000047E4 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047E6 B9D8            	  3668:             cmp.l (a0)+,a4
00:000047E8 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047EA BBD8            	  3670:             cmp.l (a0)+,a5
00:000047EC 66FE            	  3671:             bne.s *                   * Check Z Flag  beq/bne 0
00:000047EE BDD8            	  3672:             cmp.l (a0)+,a6
00:000047F0 66FE            	  3673:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3674: *      ----
                            	  3675: 
                            	  3676: 
                            	  3677: *     WORD  Registers --> Memory  -(An) EA Mode
00:000047F2 203C0000D0D0    	  3678:             move.l #$0000d0d0,d0
00:000047F8 223C0000D1D1    	  3679:             move.l #$0000d1d1,d1
00:000047FE 243C0000D2D2    	  3680:             move.l #$0000d2d2,d2
00:00004804 263C0000D3D3    	  3681:             move.l #$0000d3d3,d3
00:0000480A 283C0000D4D4    	  3682:             move.l #$0000d4d4,d4
00:00004810 2A3C0000D5D5    	  3683:             move.l #$0000d5d5,d5
00:00004816 2C3C0000D6D6    	  3684:             move.l #$0000d6d6,d6
00:0000481C 2E3C0000D7D7    	  3685:             move.l #$0000d7d7,d7
00:00004822 307C0A0A        	  3686:             move.l #$00000a0a,a0
00:00004826 327C1A1A        	  3687:             move.l #$00001a1a,a1
00:0000482A 347C2A2A        	  3688:             move.l #$00002a2a,a2
00:0000482E 367C3A3A        	  3689:             move.l #$00003a3a,a3
00:00004832 387C4A4A        	  3690:             move.l #$00004a4a,a4
00:00004836 3A7C5A5A        	  3691:             move.l #$00005a5a,a5
00:0000483A 3C7C6A6A        	  3692:             move.l #$00006a6a,a6
                            	  3693: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3694: 
00:0000483E 307C01A0        	  3695:             move.l #$000001A0,a0
00:00004842 48A0FFFF        	  3696:             movem.w D0-D7/A0-A7,-(a0)
                            	  3697: 
00:00004846 307C019E        	  3698:             move.l #$0000019E,a0
                            	  3699: 
00:0000484A BCE0            	  3700:             cmp.w -(a0),a6
00:0000484C 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000484E BAE0            	  3702:             cmp.w -(a0),a5
00:00004850 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004852 B8E0            	  3704:             cmp.w -(a0),a4
00:00004854 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004856 B6E0            	  3706:             cmp.w -(a0),a3
00:00004858 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000485A B4E0            	  3708:             cmp.w -(a0),a2
00:0000485C 66FE            	  3709:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000485E B2E0            	  3710:             cmp.w -(a0),a1
00:00004860 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004862 B0E0            	  3712:             cmp.w -(a0),a0
                            	  3713: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00004864 BE60            	  3714:             cmp.w -(a0),d7
00:00004866 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004868 BC60            	  3716:             cmp.w -(a0),d6
00:0000486A 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000486C BA60            	  3718:             cmp.w -(a0),d5
00:0000486E 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004870 B860            	  3720:             cmp.w -(a0),d4
00:00004872 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004874 B660            	  3722:             cmp.w -(a0),d3
00:00004876 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004878 B460            	  3724:             cmp.w -(a0),d2
00:0000487A 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000487C B260            	  3726:             cmp.w -(a0),d1
00:0000487E 66FE            	  3727:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004880 B060            	  3728:             cmp.w -(a0),d0
00:00004882 66FE            	  3729:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3730: 
                            	  3731: 
                            	  3732: 
                            	  3733: 
                            	  3734: *     LONG  Registers --> Memory   -(An) EA Mode
00:00004884 203CD0D0D0D0    	  3735:             move.l #$d0d0d0d0,d0
00:0000488A 223CD1D1D1D1    	  3736:             move.l #$d1d1d1d1,d1
00:00004890 243CD2D2D2D2    	  3737:             move.l #$d2d2d2d2,d2
00:00004896 263CD3D3D3D3    	  3738:             move.l #$d3d3d3d3,d3
00:0000489C 283CD4D4D4D4    	  3739:             move.l #$d4d4d4d4,d4
00:000048A2 2A3CD5D5D5D5    	  3740:             move.l #$d5d5d5d5,d5
00:000048A8 2C3CD6D6D6D6    	  3741:             move.l #$d6d6d6d6,d6
00:000048AE 2E3CD7D7D7D7    	  3742:             move.l #$d7d7d7d7,d7
00:000048B4 207C0A0A0A0A    	  3743:             move.l #$0a0a0a0a,a0
00:000048BA 227C1A1A1A1A    	  3744:             move.l #$1a1a1a1a,a1
00:000048C0 247C2A2A2A2A    	  3745:             move.l #$2a2a2a2a,a2
00:000048C6 267C3A3A3A3A    	  3746:             move.l #$3a3a3a3a,a3
00:000048CC 287C4A4A4A4A    	  3747:             move.l #$4a4a4a4a,a4
00:000048D2 2A7C5A5A5A5A    	  3748:             move.l #$5a5a5a5a,a5
00:000048D8 2C7C6A6A6A6A    	  3749:             move.l #$6a6a6a6a,a6
                            	  3750: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3751: 
                            	  3752: 
00:000048DE 307C01A0        	  3753:             move.l #$000001A0,a0
00:000048E2 48E0FFFF        	  3754:             movem.l D0-D7/A0-A7,-(a0)
                            	  3755: 
00:000048E6 307C019C        	  3756:             move.l #$0000019C,a0
                            	  3757: 
00:000048EA BDE0            	  3758:             cmp.l -(a0),a6
00:000048EC 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
00:000048EE BBE0            	  3760:             cmp.l -(a0),a5
00:000048F0 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
00:000048F2 B9E0            	  3762:             cmp.l -(a0),a4
00:000048F4 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
00:000048F6 B7E0            	  3764:             cmp.l -(a0),a3
00:000048F8 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
00:000048FA B5E0            	  3766:             cmp.l -(a0),a2
00:000048FC 66FE            	  3767:             bne.s *                   * Check Z Flag  beq/bne 0
00:000048FE B3E0            	  3768:             cmp.l -(a0),a1
00:00004900 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004902 B1E0            	  3770:             cmp.l -(a0),a0
                            	  3771: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00004904 BEA0            	  3772:             cmp.l -(a0),d7
00:00004906 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004908 BCA0            	  3774:             cmp.l -(a0),d6
00:0000490A 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000490C BAA0            	  3776:             cmp.l -(a0),d5
00:0000490E 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004910 B8A0            	  3778:             cmp.l -(a0),d4
00:00004912 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004914 B6A0            	  3780:             cmp.l -(a0),d3
00:00004916 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004918 B4A0            	  3782:             cmp.l -(a0),d2
00:0000491A 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000491C B2A0            	  3784:             cmp.l -(a0),d1
00:0000491E 66FE            	  3785:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004920 B0A0            	  3786:             cmp.l -(a0),d0
00:00004922 66FE            	  3787:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3788: 
                            	  3789: 
                            	  3790: 
                            	  3791: *     ----
                            	  3792: 
                            	  3793: *     WORD - Memory --> Registers
00:00004924 7000            	  3794:             moveq  #$00000000,d0
00:00004926 7200            	  3795:             moveq  #$00000000,d1
00:00004928 7400            	  3796:             moveq  #$00000000,d2
00:0000492A 7600            	  3797:             moveq  #$00000000,d3
00:0000492C 7800            	  3798:             moveq  #$00000000,d4
00:0000492E 7A00            	  3799:             moveq  #$00000000,d5
00:00004930 7C00            	  3800:             moveq  #$00000000,d6
00:00004932 7E00            	  3801:             moveq  #$00000000,d7
00:00004934 91C8            	  3802:             move.l #$00000000,a0
00:00004936 93C9            	  3803:             move.l #$00000000,a1
00:00004938 95CA            	  3804:             move.l #$00000000,a2
00:0000493A 97CB            	  3805:             move.l #$00000000,a3
00:0000493C 99CC            	  3806:             move.l #$00000000,a4
00:0000493E 9BCD            	  3807:             move.l #$00000000,a5
00:00004940 9DCE            	  3808:             move.l #$00000000,a6
                            	  3809: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3810: 
00:00004942 4CB82A550100    	  3811:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3812: 
00:00004948 B0BCFFFFD0D0    	  3813:             cmp.l #$FFFFD0D0,d0
00:0000494E 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004950 B4BCFFFFD1D1    	  3815:             cmp.l #$FFFFD1D1,d2
00:00004956 66FE            	  3816:             bne.s *                  * Check Z Flag  beq/bne 0
00:00004958 B8BCFFFFD2D2    	  3817:             cmp.l #$FFFFD2D2,d4
00:0000495E 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004960 BCBCFFFFD3D3    	  3819:             cmp.l #$FFFFD3D3,d6
00:00004966 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004968 B2FCD4D4        	  3821:             cmp.l #$FFFFD4D4,a1
00:0000496C 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000496E B6FCD5D5        	  3823:             cmp.l #$FFFFD5D5,a3
00:00004972 66FE            	  3824:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004974 BAFCD6D6        	  3825:             cmp.l #$FFFFD6D6,a5
00:00004978 66FE            	  3826:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3827: 
                            	  3828: 
                            	  3829: *     LONG - Memory --> Registers
00:0000497A 7000            	  3830:             moveq  #$00000000,d0
00:0000497C 7200            	  3831:             moveq  #$00000000,d1
00:0000497E 7400            	  3832:             moveq  #$00000000,d2
00:00004980 7600            	  3833:             moveq  #$00000000,d3
00:00004982 7800            	  3834:             moveq  #$00000000,d4
00:00004984 7A00            	  3835:             moveq  #$00000000,d5
00:00004986 7C00            	  3836:             moveq  #$00000000,d6
00:00004988 7E00            	  3837:             moveq  #$00000000,d7
00:0000498A 91C8            	  3838:             move.l #$00000000,a0
00:0000498C 93C9            	  3839:             move.l #$00000000,a1
00:0000498E 95CA            	  3840:             move.l #$00000000,a2
00:00004990 97CB            	  3841:             move.l #$00000000,a3
00:00004992 99CC            	  3842:             move.l #$00000000,a4
00:00004994 9BCD            	  3843:             move.l #$00000000,a5
00:00004996 9DCE            	  3844:             move.l #$00000000,a6
                            	  3845: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3846: 
00:00004998 4CF82A550120    	  3847:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3848: 
00:0000499E B0BCD0D0D0D0    	  3849:             cmp.l #$D0D0D0D0,d0
00:000049A4 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
00:000049A6 B4BCD1D1D1D1    	  3851:             cmp.l #$D1D1D1D1,d2
00:000049AC 66FE            	  3852:             bne.s *                  * Check Z Flag  beq/bne 0
00:000049AE B8BCD2D2D2D2    	  3853:             cmp.l #$D2D2D2D2,d4
00:000049B4 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
00:000049B6 BCBCD3D3D3D3    	  3855:             cmp.l #$D3D3D3D3,d6
00:000049BC 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
00:000049BE B3FCD4D4D4D4    	  3857:             cmp.l #$D4D4D4D4,a1
00:000049C4 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
00:000049C6 B7FCD5D5D5D5    	  3859:             cmp.l #$D5D5D5D5,a3
00:000049CC 66FE            	  3860:             bne.s *                   * Check Z Flag  beq/bne 0
00:000049CE BBFCD6D6D6D6    	  3861:             cmp.l #$D6D6D6D6,a5
00:000049D4 66FE            	  3862:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3863: 
00:000049D6 4E75            	  3864:             rts
                            	  3865: 
                            	  3866: 
                            	  3867: *-----------------------------------------------------------
                            	  3868: *-----------------------------------------------------------
                            	  3869: * OPCODE : ABCD
                            	  3870: *-----------------------------------------------------------
                            	  3871: *-----------------------------------------------------------
                            	  3872: op_ABCD:
                            	  3873: 
                            	  3874: *     Test with X Flag CLEARED
00:000049D8 307C0110        	  3875:                 move.l #$00000110,a0 * Address pointer-X
00:000049DC 327C0120        	  3876:                 move.l #$00000120,a1 * Address pointer-Y
00:000049E0 7000            	  3877:                 moveq  #$00000000,d0 * BCD byte-X
00:000049E2 7200            	  3878:                 moveq  #$00000000,d1 * BCD byte-Y
00:000049E4 7400            	  3879:                 moveq  #$00000000,d2
00:000049E6 7600            	  3880:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000049E8 7800            	  3881:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000049EA 7A00            	  3882:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000049EC 2C3C00000099    	  3883:                 move.l #$00000099,d6 * Inner loop counter
00:000049F2 2E3C00000099    	  3884:                 move.l #$00000099,d7 * Outer loop counter
                            	  3885: 
00:000049F8 2007            	  3886: ABCD_OUTER1:    move.l d7,d0
00:000049FA 2206            	  3887: ABCD_INNER1:    move.l d6,d1
00:000049FC 023C00EF        	  3888:                 andi.b #$EF,CCR     * Clear X Flag
00:00004A00 307C0110        	  3889:                 move.l #$00000110,a0 * Address pointer-X
00:00004A04 327C0120        	  3890:                 move.l #$00000120,a1 * Address pointer-Y
00:00004A08 1140FFFF        	  3891:                 move.b d0,-1(a0)
00:00004A0C 1341FFFF        	  3892:                 move.b d1,-1(a1)
                            	  3893: 
00:00004A10 C300            	  3894:                 abcd d0,d1
00:00004A12 6402            	  3895:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00004A14 5284            	  3896:                 add.l #1,d4
00:00004A16 DA81            	  3897: ABCD_NO_C1:     add.l d1,d5
                            	  3898: 
00:00004A18 C308            	  3899:                 abcd -(a0),-(a1)
00:00004A1A 6402            	  3900:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00004A1C 5284            	  3901:                 add.l #1,d4
00:00004A1E D611            	  3902: ABCD_NO_C2:     add.b (a1),d3
                            	  3903: 
                            	  3904: 
00:00004A20 51CEFFD8        	  3905:                 dbf d6,ABCD_INNER1
00:00004A24 2C3C00000099    	  3906:                 move.l #$00000099,d6
00:00004A2A 51CFFFCC        	  3907:                 dbf d7,ABCD_OUTER1
00:00004A2E 0C8400005AFC    	  3908:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:00004A34 66FE            	  3909:                 bne.s *
00:00004A36 0C85001C9A34    	  3910:                 cmpi.l #$001C9A34,d5
00:00004A3C 66FE            	  3911:                 bne.s *
00:00004A3E 0C8300000034    	  3912:                 cmpi.l #$00000034,d3
00:00004A44 66FE            	  3913:                 bne.s *
                            	  3914: 
                            	  3915: *     Test with X Flag SET
00:00004A46 307C0110        	  3916:                 move.l #$00000110,a0 * Address pointer-X
00:00004A4A 327C0120        	  3917:                 move.l #$00000120,a1 * Address pointer-Y
00:00004A4E 7000            	  3918:                 moveq  #$00000000,d0 * BCD byte-X
00:00004A50 7200            	  3919:                 moveq  #$00000000,d1 * BCD byte-Y
00:00004A52 7400            	  3920:                 moveq  #$00000000,d2
00:00004A54 7600            	  3921:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00004A56 7800            	  3922:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004A58 7A00            	  3923:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00004A5A 2C3C00000099    	  3924:                 move.l #$00000099,d6 * Inner loop counter
00:00004A60 2E3C00000099    	  3925:                 move.l #$00000099,d7 * Outer loop counter
                            	  3926: 
00:00004A66 2007            	  3927: ABCD_OUTER2:    move.l d7,d0
00:00004A68 2206            	  3928: ABCD_INNER2:    move.l d6,d1
00:00004A6A 003C0010        	  3929:                 ori.b #$10,CCR      * Set X Flag
00:00004A6E 307C0110        	  3930:                 move.l #$00000110,a0 * Address pointer-X
00:00004A72 327C0120        	  3931:                 move.l #$00000120,a1 * Address pointer-Y
00:00004A76 1140FFFF        	  3932:                 move.b d0,-1(a0)
00:00004A7A 1341FFFF        	  3933:                 move.b d1,-1(a1)
                            	  3934: 
00:00004A7E C300            	  3935:                 abcd d0,d1
00:00004A80 6402            	  3936:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:00004A82 5284            	  3937:                 add.l #1,d4
00:00004A84 DA81            	  3938: ABCD_NO_C3:     add.l d1,d5
                            	  3939: 
00:00004A86 C308            	  3940:                 abcd -(a0),-(a1)
00:00004A88 6402            	  3941:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00004A8A 5284            	  3942:                 add.l #1,d4
00:00004A8C D611            	  3943: ABCD_NO_C4:     add.b (a1),d3
                            	  3944: 
                            	  3945: 
00:00004A8E 51CEFFD8        	  3946:                 dbf d6,ABCD_INNER2
00:00004A92 2C3C00000099    	  3947:                 move.l #$00000099,d6
00:00004A98 51CFFFCC        	  3948:                 dbf d7,ABCD_OUTER2
00:00004A9C 0C8400005B60    	  3949:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:00004AA2 66FE            	  3950:                 bne.s *
00:00004AA4 0C85001CCFC8    	  3951:                 cmpi.l #$001CCFC8,d5
00:00004AAA 66FE            	  3952:                 bne.s *
00:00004AAC 0C8300000034    	  3953:                 cmpi.l #$00000034,d3
00:00004AB2 66FE            	  3954:                 bne.s *
                            	  3955: 
                            	  3956: *             Quick check of Z Flag
00:00004AB4 4200            	  3957:                 move.b #$00,d0
00:00004AB6 4201            	  3958:                 move.b #$00,d1
00:00004AB8 44FC0000        	  3959:                 move #$00,CCR              * Set Z flag to 0
00:00004ABC C101            	  3960:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:00004ABE 67FE            	  3961:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3962: 
00:00004AC0 103C0001        	  3963:                 move.b #$01,d0
00:00004AC4 4201            	  3964:                 move.b #$00,d1
00:00004AC6 44FC0004        	  3965:                 move #$04,CCR              * Set Z flag to 0
00:00004ACA C101            	  3966:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:00004ACC 67FE            	  3967:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3968: 
00:00004ACE 4E75            	  3969:                 rts
                            	  3970: 
                            	  3971: *-----------------------------------------------------------
                            	  3972: *-----------------------------------------------------------
                            	  3973: * OPCODE : SBCD
                            	  3974: *-----------------------------------------------------------
                            	  3975: *-----------------------------------------------------------
                            	  3976: op_SBCD:
                            	  3977: 
                            	  3978: *     Test with X Flag CLEARED
00:00004AD0 307C0110        	  3979:                 move.l #$00000110,a0 * Address pointer-X
00:00004AD4 327C0120        	  3980:                 move.l #$00000120,a1 * Address pointer-Y
00:00004AD8 7000            	  3981:                 moveq  #$00000000,d0 * BCD byte-X
00:00004ADA 7200            	  3982:                 moveq  #$00000000,d1 * BCD byte-Y
00:00004ADC 7400            	  3983:                 moveq  #$00000000,d2
00:00004ADE 7600            	  3984:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00004AE0 7800            	  3985:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004AE2 7A00            	  3986:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00004AE4 2C3C00000099    	  3987:                 move.l #$00000099,d6 * Inner loop counter
00:00004AEA 2E3C00000099    	  3988:                 move.l #$00000099,d7 * Outer loop counter
                            	  3989: 
00:00004AF0 2007            	  3990: SBCD_OUTER1:    move.l d7,d0
00:00004AF2 2206            	  3991: SBCD_INNER1:    move.l d6,d1
00:00004AF4 023C00EF        	  3992:                 andi.b #$EF,CCR     * Clear X Flag
00:00004AF8 307C0110        	  3993:                 move.l #$00000110,a0 * Address pointer-X
00:00004AFC 327C0120        	  3994:                 move.l #$00000120,a1 * Address pointer-Y
00:00004B00 1140FFFF        	  3995:                 move.b d0,-1(a0)
00:00004B04 1341FFFF        	  3996:                 move.b d1,-1(a1)
                            	  3997: 
00:00004B08 8300            	  3998:                 sbcd d0,d1
00:00004B0A 6402            	  3999:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00004B0C 5284            	  4000:                 add.l #1,d4
00:00004B0E DA81            	  4001: SBCD_NO_C1:     add.l d1,d5
                            	  4002: 
00:00004B10 8308            	  4003:                 sbcd -(a0),-(a1)
00:00004B12 6402            	  4004:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00004B14 5284            	  4005:                 add.l #1,d4
00:00004B16 D611            	  4006: SBCD_NO_C2:     add.b (a1),d3
                            	  4007: 
                            	  4008: 
00:00004B18 51CEFFD8        	  4009:                 dbf d6,SBCD_INNER1
00:00004B1C 2C3C00000099    	  4010:                 move.l #$00000099,d6
00:00004B22 51CFFFCC        	  4011:                 dbf d7,SBCD_OUTER1
00:00004B26 0C8400005C0A    	  4012:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:00004B2C 66FE            	  4013:                 bne.s *
00:00004B2E 0C85001C459E    	  4014:                 cmpi.l #$001C459E,d5
00:00004B34 66FE            	  4015:                 bne.s *
00:00004B36 0C830000009E    	  4016:                 cmpi.l #$0000009E,d3
00:00004B3C 66FE            	  4017:                 bne.s *
                            	  4018: 
                            	  4019: *     Test with X Flag SET
00:00004B3E 307C0110        	  4020:                 move.l #$00000110,a0 * Address pointer-X
00:00004B42 327C0120        	  4021:                 move.l #$00000120,a1 * Address pointer-Y
00:00004B46 7000            	  4022:                 moveq  #$00000000,d0 * BCD byte-X
00:00004B48 7200            	  4023:                 moveq  #$00000000,d1 * BCD byte-Y
00:00004B4A 7400            	  4024:                 moveq  #$00000000,d2
00:00004B4C 7600            	  4025:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00004B4E 7800            	  4026:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004B50 7A00            	  4027:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00004B52 2C3C00000099    	  4028:                 move.l #$00000099,d6 * Inner loop counter
00:00004B58 2E3C00000099    	  4029:                 move.l #$00000099,d7 * Outer loop counter
                            	  4030: 
00:00004B5E 2007            	  4031: SBCD_OUTER2:    move.l d7,d0
00:00004B60 2206            	  4032: SBCD_INNER2:    move.l d6,d1
00:00004B62 003C0010        	  4033:                 ori.b #$10,CCR      * Set X Flag
00:00004B66 307C0110        	  4034:                 move.l #$00000110,a0 * Address pointer-X
00:00004B6A 327C0120        	  4035:                 move.l #$00000120,a1 * Address pointer-Y
00:00004B6E 1140FFFF        	  4036:                 move.b d0,-1(a0)
00:00004B72 1341FFFF        	  4037:                 move.b d1,-1(a1)
                            	  4038: 
00:00004B76 8300            	  4039:                 sbcd d0,d1
00:00004B78 6402            	  4040:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:00004B7A 5284            	  4041:                 add.l #1,d4
00:00004B7C DA81            	  4042: SBCD_NO_C3:     add.l d1,d5
                            	  4043: 
00:00004B7E 8308            	  4044:                 sbcd -(a0),-(a1)
00:00004B80 6402            	  4045:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00004B82 5284            	  4046:                 add.l #1,d4
00:00004B84 D611            	  4047: SBCD_NO_C4:     add.b (a1),d3
                            	  4048: 
00:00004B86 51CEFFD8        	  4049:                 dbf d6,SBCD_INNER2
00:00004B8A 2C3C00000099    	  4050:                 move.l #$00000099,d6
00:00004B90 51CFFFCC        	  4051:                 dbf d7,SBCD_OUTER2
00:00004B94 0C8400005CA4    	  4052:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:00004B9A 66FE            	  4053:                 bne.s *
00:00004B9C 0C85001C5C66    	  4054:                 cmpi.l #$001C5C66,d5
00:00004BA2 66FE            	  4055:                 bne.s *
00:00004BA4 0C830000009E    	  4056:                 cmpi.l #$0000009E,d3
00:00004BAA 66FE            	  4057:                 bne.s *
                            	  4058: 
                            	  4059: 
                            	  4060: *             Quick check of Z Flag
00:00004BAC 4200            	  4061:                 move.b #$00,d0
00:00004BAE 4201            	  4062:                 move.b #$00,d1
00:00004BB0 44FC0000        	  4063:                 move #$00,CCR              * Set Z flag to 0
00:00004BB4 8101            	  4064:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:00004BB6 67FE            	  4065:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4066: 
00:00004BB8 103C0001        	  4067:                 move.b #$01,d0
00:00004BBC 4201            	  4068:                 move.b #$00,d1
00:00004BBE 44FC0004        	  4069:                 move #$04,CCR              * Set Z flag to 0
00:00004BC2 8101            	  4070:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:00004BC4 67FE            	  4071:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4072: 
00:00004BC6 4E75            	  4073:                 rts
                            	  4074: 
                            	  4075: *-----------------------------------------------------------
                            	  4076: *-----------------------------------------------------------
                            	  4077: * OPCODE : NBCD
                            	  4078: *-----------------------------------------------------------
                            	  4079: *-----------------------------------------------------------
                            	  4080: op_NBCD:
                            	  4081: 
                            	  4082: *        NBCD to a  Register
                            	  4083: 
00:00004BC8 7000            	  4084:                 moveq  #$00000000,d0 * BCD byte
00:00004BCA 7200            	  4085:                 moveq  #$00000000,d1
00:00004BCC 7400            	  4086:                 moveq  #$00000000,d2
00:00004BCE 7600            	  4087:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00004BD0 7800            	  4088:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004BD2 7A00            	  4089:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00004BD4 2C3C00000099    	  4090:                 move.l #$00000099,d6
00:00004BDA 2E3C00000099    	  4091:                 move.l #$00000099,d7 * Loop counter
                            	  4092: 
00:00004BE0 2007            	  4093: NBCD_LOOP:      move.l d7,d0
00:00004BE2 44FC0004        	  4094:                 move #$04,CCR        * Set Z flag to 0
                            	  4095: 
00:00004BE6 4800            	  4096:                 nbcd d0
                            	  4097: 
00:00004BE8 6402            	  4098:                 bcc.s NBCD_NO_C         * Check C Flag
00:00004BEA 5284            	  4099:                 add.l #1,d4
00:00004BEC 6602            	  4100: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:00004BEE 5283            	  4101:                 add.l #1,d3
00:00004BF0 DA80            	  4102: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4103: 
00:00004BF2 51CFFFEC        	  4104:                 dbf d7,NBCD_LOOP
                            	  4105: 
00:00004BF6 0C8300000001    	  4106:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00004BFC 66FE            	  4107:                 bne.s *
00:00004BFE 0C8400000099    	  4108:                 cmpi.l #$00000099,d4
00:00004C04 66FE            	  4109:                 bne.s *
00:00004C06 0C8500002E3B    	  4110:                 cmpi.l #$00002E3B,d5
00:00004C0C 66FE            	  4111:                 bne.s *
                            	  4112: 
                            	  4113: 
                            	  4114: *        NBCD to a memory location
                            	  4115: 
00:00004C0E 7000            	  4116:                 moveq  #$00000000,d0 * BCD byte
00:00004C10 7200            	  4117:                 moveq  #$00000000,d1
00:00004C12 7400            	  4118:                 moveq  #$00000000,d2
00:00004C14 7600            	  4119:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00004C16 7800            	  4120:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004C18 7A00            	  4121:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00004C1A 2C3C00000099    	  4122:                 move.l #$00000099,d6
00:00004C20 2E3C00000099    	  4123:                 move.l #$00000099,d7 * Loop counter
                            	  4124: 
00:00004C26 11C70100        	  4125: NBCD_LOOP1:     move.b d7,$00000100
00:00004C2A 44FC0004        	  4126:                 move #$04,CCR        * Set Z flag to 0
                            	  4127: 
00:00004C2E 48380100        	  4128:                 nbcd $00000100
00:00004C32 10380100        	  4129:                 move.b $00000100,d0
                            	  4130: 
00:00004C36 6402            	  4131:                 bcc.s NBCD_NO_C1        * Check C Flag
00:00004C38 5284            	  4132:                 add.l #1,d4
00:00004C3A 6602            	  4133: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:00004C3C 5283            	  4134:                 add.l #1,d3
00:00004C3E DA80            	  4135: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4136: 
00:00004C40 51CFFFE4        	  4137:                 dbf d7,NBCD_LOOP1
                            	  4138: 
00:00004C44 0C8300000001    	  4139:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:00004C4A 66FE            	  4140:                 bne.s *
00:00004C4C 4A84            	  4141:                 cmpi.l #$00000000,d4
00:00004C4E 66FE            	  4142:                 bne.s *
00:00004C50 0C8500002E3B    	  4143:                 cmpi.l #$00002E3B,d5
00:00004C56 66FE            	  4144:                 bne.s *
                            	  4145: 
                            	  4146: 
00:00004C58 4E75            	  4147:                 rts
                            	  4148: 
                            	  4149: 
                            	  4150: 
                            	  4151: *-----------------------------------------------------------
                            	  4152: *-----------------------------------------------------------
                            	  4153: * OPCODE : TRAPV
                            	  4154: *-----------------------------------------------------------
                            	  4155: *-----------------------------------------------------------
                            	  4156: op_TRAPV:
                            	  4157: 
                            	  4158: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4159: 
00:00004C5A 7000            	  4160:                 moveq  #$00000000,d0 * Clear d0
                            	  4161: 
00:00004C5C 44FC0000        	  4162:                 move #$00,CCR        * Clear V flag
00:00004C60 4E76            	  4163:                 trapv
00:00004C62 4A80            	  4164:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:00004C64 66FE            	  4165:                 bne.s *
                            	  4166: 
00:00004C66 44FC0002        	  4167:                 move #$02,CCR        * Set V flag
00:00004C6A 4E76            	  4168:                 trapv
00:00004C6C 0C8012345678    	  4169:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:00004C72 66FE            	  4170:                 bne.s *
                            	  4171: 
                            	  4172: 
00:00004C74 4E75            	  4173:                 rts
                            	  4174: 
                            	  4175: 
                            	  4176: 
                            	  4177: *-----------------------------------------------------------
                            	  4178: *-----------------------------------------------------------
                            	  4179: * OPCODE : RTR
                            	  4180: *-----------------------------------------------------------
                            	  4181: *-----------------------------------------------------------
                            	  4182: 
                            	  4183: op_RTR:
                            	  4184: 
                            	  4185: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4186: 
00:00004C76 41FA000A        	  4187:                 lea 		RTR_DONE,a0
00:00004C7A 2F08            	  4188:                 move.l 	a0,-(a7)     * push destination PC to the stack
00:00004C7C 3F3CFF15        	  4189:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
00:00004C80 4E77            	  4190:                 rtr
                            	  4191: 
00:00004C82 40C0            	  4192: RTR_DONE:       move.w SR,d0
00:00004C84 0240001F        	  4193:                 andi.w #$1F,d0
00:00004C88 0C400015        	  4194:                 cmpi.w #$15,d0
00:00004C8C 66FE            	  4195:                 bne.s *
                            	  4196: 
00:00004C8E 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
00:00004C90 283C44444444    	  4200: BSR_FAR2:       move.l #$44444444,d4
00:00004C96 4E75            	  4201:                 rts
                            	  4202: 
                            	  4203: 
                            	  4204: *-----------------------------------------------------------
                            	  4205: *-----------------------------------------------------------
                            	  4206: * OPCODE : BCC
                            	  4207: *-----------------------------------------------------------
                            	  4208: *-----------------------------------------------------------
                            	  4209: 
00:00004C98 44FC0000        	  4210: op_BCC:         move #$00,CCR
00:00004C9C 6202            	  4211:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:00004C9E 60FE            	  4212:                 bra.s *
                            	  4213: 
00:00004CA0 44FC0001        	  4214: BCC1:           move #$01,CCR
00:00004CA4 63000004        	  4215:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:00004CA8 60FE            	  4216:                 bra.s *
                            	  4217: 
00:00004CAA 44FC0000        	  4218: BCC2:           move #$00,CCR
00:00004CAE 6402            	  4219:                 bcc.s BCC3            * Carry Clear         C=0
00:00004CB0 60FE            	  4220:                 bra.s *
                            	  4221: 
00:00004CB2 44FC0001        	  4222: BCC3:           move #$01,CCR
00:00004CB6 65000004        	  4223:                 bcs.w BCC4            * Carry Set           C=1
00:00004CBA 60FE            	  4224:                 bra.s *
                            	  4225: 
00:00004CBC 44FC0000        	  4226: BCC4:           move #$00,CCR
00:00004CC0 6602            	  4227:                 bne.s BCC5            * Not Equal           Z=0
00:00004CC2 60FE            	  4228:                 bra.s *
                            	  4229: 
00:00004CC4 44FC0004        	  4230: BCC5:           move #$04,CCR
00:00004CC8 67000004        	  4231:                 beq.w BCC6            * Equal               Z=1
00:00004CCC 60FE            	  4232:                 bra.s *
                            	  4233: 
00:00004CCE 44FC0000        	  4234: BCC6:           move #$00,CCR
00:00004CD2 6802            	  4235:                 bvc.s BCC7            * V Clear             V=0
00:00004CD4 60FE            	  4236:                 bra.s *
                            	  4237: 
00:00004CD6 44FC0002        	  4238: BCC7:           move #$02,CCR
00:00004CDA 69000004        	  4239:                 bvs.w BCC8            * V Set               V=1
00:00004CDE 60FE            	  4240:                 bra.s *
                            	  4241: 
00:00004CE0 44FC0000        	  4242: BCC8:           move #$00,CCR
00:00004CE4 6A02            	  4243:                 bpl.s BCC9            * Plus                N=0
00:00004CE6 60FE            	  4244:                 bra.s *
                            	  4245: 
00:00004CE8 44FC0008        	  4246: BCC9:           move #$08,CCR
00:00004CEC 6B000004        	  4247:                 bmi.w BCC10           * Minus               N=1
00:00004CF0 60FE            	  4248:                 bra.s *
                            	  4249: 
00:00004CF2 44FC0000        	  4250: BCC10:          move #$00,CCR
00:00004CF6 6C02            	  4251:                 bge.s BCC11           * Greater or Equal    N=V
00:00004CF8 60FE            	  4252:                 bra.s *
                            	  4253: 
00:00004CFA 44FC0002        	  4254: BCC11:          move #$02,CCR
00:00004CFE 6D000004        	  4255:                 blt.w BCC12           * Less Than           N!=V
00:00004D02 60FE            	  4256:                 bra.s *
                            	  4257: 
00:00004D04 44FC000A        	  4258: BCC12:          move #$0A,CCR
00:00004D08 6E02            	  4259:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:00004D0A 60FE            	  4260:                 bra.s *
                            	  4261: 
00:00004D0C 44FC0006        	  4262: BCC13:          move #$06,CCR
00:00004D10 6F000004        	  4263:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:00004D14 60FE            	  4264:                 bra.s *
                            	  4265: 
                            	  4266: 
00:00004D16 4E75            	  4267: BCC14:          rts
                            	  4268: 
                            	  4269: 
                            	  4270: *-----------------------------------------------------------
                            	  4271: *-----------------------------------------------------------
                            	  4272: * OPCODE : DBCC
                            	  4273: *-----------------------------------------------------------
                            	  4274: *-----------------------------------------------------------
                            	  4275: 
00:00004D18 7003            	  4276: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:00004D1A 7200            	  4277:                 moveq  #$00000000,d1    * Accumulator
00:00004D1C 44FC0000        	  4278:                 move #$00,CCR
                            	  4279: 
00:00004D20 5201            	  4280: DBCC_LOOP1:     addi.b #$1,d1
00:00004D22 51C8FFFC        	  4281:                 dbf d0,DBCC_LOOP1
                            	  4282: 
00:00004D26 0C8100000004    	  4283:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:00004D2C 66FE            	  4284:                 bne.s *
                            	  4285: 
00:00004D2E 5201            	  4286: DBCC_LOOP2:     addi.b #$1,d1
00:00004D30 54C8FFFC        	  4287:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4288: 
00:00004D34 0C8100000005    	  4289:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:00004D3A 66FE            	  4290:                 bne.s *
                            	  4291: 
00:00004D3C 4E75            	  4292:                 rts
                            	  4293: 
                            	  4294: 
                            	  4295: *-----------------------------------------------------------
                            	  4296: *-----------------------------------------------------------
                            	  4297: * OPCODE : SCC
                            	  4298: *-----------------------------------------------------------
                            	  4299: *-----------------------------------------------------------
                            	  4300: 
00:00004D3E 44FC0001        	  4301: op_SCC:         move #$01,CCR
00:00004D42 54F900010000    	  4302:                 scc $00010000                   * Clear the EA byte
00:00004D48 4A3900010000    	  4303:                 cmpi.b #$00,$00010000
00:00004D4E 66FE            	  4304:                 bne.s *
                            	  4305: 
00:00004D50 44FC0000        	  4306:                 move #$00,CCR
00:00004D54 54F900010000    	  4307:                 scc $00010000                   * Set the EA byte to 0xFF
00:00004D5A 0C3900FF00010000	  4308:                 cmpi.b #$FF,$00010000
00:00004D62 66FE            	  4309:                 bne.s *
                            	  4310: 
00:00004D64 54C0            	  4311: 								scc d0													* Test setting a data register
00:00004D66 0C0000FF        	  4312: 								cmpi.b #$FF,d0
00:00004D6A 66FE            	  4313: 								bne.s *
00:00004D6C 4E75            	  4314:                 rts
                            	  4315: 
                            	  4316: 
                            	  4317: 
                            	  4318: *-----------------------------------------------------------
                            	  4319: *-----------------------------------------------------------
                            	  4320: * OPCODE : ADDQ
                            	  4321: *-----------------------------------------------------------
                            	  4322: *-----------------------------------------------------------
                            	  4323: 
                            	  4324: op_ADDQ:
                            	  4325: 
                            	  4326: *     BYTE
00:00004D6E 203C000000FF    	  4327:                 move.l #$000000FF,d0    * Loop counter
00:00004D74 7200            	  4328:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004D76 7400            	  4329:                 moveq  #$00000000,d2    * Data results accumulator
00:00004D78 7600            	  4330:                 moveq  #$00000000,d3
00:00004D7A 7800            	  4331:                 moveq  #$00000000,d4
00:00004D7C 7A00            	  4332:                 moveq  #$00000000,d5
00:00004D7E 7C00            	  4333:                 moveq  #$00000000,d6
00:00004D80 7E00            	  4334:                 moveq  #$00000000,d7
                            	  4335: 
00:00004D82 5605            	  4336: ADDQ_LOOP1:     addq.b #3,d5
00:00004D84 40C6            	  4337:                 move.w SR,d6
00:00004D86 02860000001F    	  4338:                 andi.l #$1F,d6        * Isolate flags
00:00004D8C D286            	  4339:                 add.l d6,d1           * Copy flag results into accumulator
00:00004D8E D485            	  4340:                 add.l d5,d2           * Copy data results into data accumulator
00:00004D90 51C8FFF0        	  4341:                 dbf d0,ADDQ_LOOP1
                            	  4342: 
00:00004D94 0C810000043D    	  4343:                 cmpi.l #$0000043D,d1
00:00004D9A 66FE            	  4344:                 bne.s *
00:00004D9C 0C8200007F80    	  4345:                 cmpi.l #$00007F80,d2
00:00004DA2 66FE            	  4346:                 bne.s *
                            	  4347: 
                            	  4348: 
                            	  4349: *     WORD
00:00004DA4 203C000000FF    	  4350:                 move.l #$000000FF,d0    * Loop counter
00:00004DAA 7200            	  4351:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004DAC 7400            	  4352:                 moveq  #$00000000,d2    * Data results accumulator
00:00004DAE 7600            	  4353:                 moveq  #$00000000,d3
00:00004DB0 7800            	  4354:                 moveq  #$00000000,d4
00:00004DB2 2A3C0000FFF0    	  4355:                 move.l #$0000FFF0,d5
00:00004DB8 7C00            	  4356:                 moveq  #$00000000,d6
00:00004DBA 7E00            	  4357:                 moveq  #$00000000,d7
00:00004DBC 307C0100        	  4358:                 move.l #$00000100,a0
                            	  4359: 
00:00004DC0 5A45            	  4360: ADDQ_LOOP2:     addq.w #5,d5
00:00004DC2 40C6            	  4361:                 move.w SR,d6
00:00004DC4 02860000001F    	  4362:                 andi.l #$1F,d6        * Isolate flags
00:00004DCA D286            	  4363:                 add.l d6,d1           * Copy flag results into accumulator
00:00004DCC D485            	  4364:                 add.l d5,d2           * Copy data results into data accumulator
00:00004DCE 51C8FFF0        	  4365:                 dbf d0,ADDQ_LOOP2
                            	  4366: 
00:00004DD2 0C8100000029    	  4367:                 cmpi.l #$00000029,d1
00:00004DD8 66FE            	  4368:                 bne.s *
00:00004DDA 0C8200057280    	  4369:                 cmpi.l #$00057280,d2
00:00004DE0 66FE            	  4370:                 bne.s *
                            	  4371: 
                            	  4372: 
                            	  4373: *     LONG
00:00004DE2 203C000000FF    	  4374:                 move.l #$000000FF,d0    * Loop counter
00:00004DE8 7200            	  4375:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004DEA 7400            	  4376:                 moveq  #$00000000,d2    * Data results accumulator
00:00004DEC 7600            	  4377:                 moveq  #$00000000,d3
00:00004DEE 7800            	  4378:                 moveq  #$00000000,d4
00:00004DF0 7AF0            	  4379:                 move.l #$FFFFFFF0,d5
00:00004DF2 7C00            	  4380:                 moveq  #$00000000,d6
00:00004DF4 7E00            	  4381:                 moveq  #$00000000,d7
                            	  4382: 
00:00004DF6 5285            	  4383: ADDQ_LOOP3:     addq.l #1,d5
00:00004DF8 40C6            	  4384:                 move.w SR,d6
00:00004DFA 02860000001F    	  4385:                 andi.l #$1F,d6        * Isolate flags
00:00004E00 D286            	  4386:                 add.l d6,d1           * Copy flag results into accumulator
00:00004E02 D485            	  4387:                 add.l d5,d2           * Copy data results into data accumulator
00:00004E04 51C8FFF0        	  4388:                 dbf d0,ADDQ_LOOP3
                            	  4389: 
00:00004E08 0C810000008D    	  4390:                 cmpi.l #$0000008D,d1
00:00004E0E 66FE            	  4391:                 bne.s *
00:00004E10 0C8200007080    	  4392:                 cmpi.l #$00007080,d2
00:00004E16 66FE            	  4393:                 bne.s *
                            	  4394: 
                            	  4395: *     Check that Flags are not updated for Address registers
00:00004E18 207C0000FFFF    	  4396:                 move.l #$0000FFFF,a0
00:00004E1E 44FC0000        	  4397:                 move #$00,CCR         * Clear flags
00:00004E22 5E48            	  4398:                 addq.w #$7,a0
00:00004E24 65FE            	  4399:                 bcs.s *
                            	  4400: 
00:00004E26 4E75            	  4401:                 rts
                            	  4402: 
                            	  4403: 
                            	  4404: 
                            	  4405: *-----------------------------------------------------------
                            	  4406: *-----------------------------------------------------------
                            	  4407: * OPCODE : SUBQ
                            	  4408: *-----------------------------------------------------------
                            	  4409: *-----------------------------------------------------------
                            	  4410: 
                            	  4411: op_SUBQ:
                            	  4412: 
                            	  4413: *     BYTE
00:00004E28 203C000000FF    	  4414:                 move.l #$000000FF,d0    * Loop counter
00:00004E2E 7200            	  4415:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004E30 243C00001234    	  4416:                 move.l #$00001234,d2    * Data results accumulator
00:00004E36 7600            	  4417:                 moveq  #$00000000,d3
00:00004E38 7800            	  4418:                 moveq  #$00000000,d4
00:00004E3A 7A12            	  4419:                 moveq  #$00000012,d5
00:00004E3C 7C00            	  4420:                 moveq  #$00000000,d6
00:00004E3E 7E00            	  4421:                 moveq  #$00000000,d7
                            	  4422: 
00:00004E40 5305            	  4423: SUBQ_LOOP1:     subq.b #1,d5
00:00004E42 40C6            	  4424:                 move.w SR,d6
00:00004E44 02860000001F    	  4425:                 andi.l #$1F,d6        * Isolate flags
00:00004E4A D286            	  4426:                 add.l d6,d1           * Copy flag results into accumulator
00:00004E4C D485            	  4427:                 add.l d5,d2           * Copy data results into data accumulator
00:00004E4E 51C8FFF0        	  4428:                 dbf d0,SUBQ_LOOP1
                            	  4429: 
00:00004E52 0C8100000417    	  4430:                 cmpi.l #$00000417,d1
00:00004E58 66FE            	  4431:                 bne.s *
00:00004E5A 0C82000091B4    	  4432:                 cmpi.l #$000091B4,d2
00:00004E60 66FE            	  4433:                 bne.s *
                            	  4434: 
                            	  4435: 
                            	  4436: *     WORD
00:00004E62 203C000000FF    	  4437:                 move.l #$000000FF,d0    * Loop counter
00:00004E68 7200            	  4438:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004E6A 7400            	  4439:                 moveq  #$00000000,d2    * Data results accumulator
00:00004E6C 7600            	  4440:                 moveq  #$00000000,d3
00:00004E6E 7800            	  4441:                 moveq  #$00000000,d4
00:00004E70 7A02            	  4442:                 moveq  #$00000002,d5
00:00004E72 7C00            	  4443:                 moveq  #$00000000,d6
00:00004E74 7E00            	  4444:                 moveq  #$00000000,d7
00:00004E76 307C0100        	  4445:                 move.l #$00000100,a0
                            	  4446: 
00:00004E7A 5B45            	  4447: SUBQ_LOOP2:     subq.w #5,d5
00:00004E7C 40C6            	  4448:                 move.w SR,d6
00:00004E7E 02860000001F    	  4449:                 andi.l #$1F,d6        * Isolate flags
00:00004E84 D286            	  4450:                 add.l d6,d1           * Copy flag results into accumulator
00:00004E86 D485            	  4451:                 add.l d5,d2           * Copy data results into data accumulator
00:00004E88 51C8FFF0        	  4452:                 dbf d0,SUBQ_LOOP2
                            	  4453: 
00:00004E8C 0C8100000811    	  4454:                 cmpi.l #$00000811,d1
00:00004E92 66FE            	  4455:                 bne.s *
00:00004E94 0C8200FD7F80    	  4456:                 cmpi.l #$00FD7F80,d2
00:00004E9A 66FE            	  4457:                 bne.s *
                            	  4458: 
                            	  4459: 
                            	  4460: *     LONG
00:00004E9C 203C000000FF    	  4461:                 move.l #$000000FF,d0    * Loop counter
00:00004EA2 7200            	  4462:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004EA4 7400            	  4463:                 moveq  #$00000000,d2    * Data results accumulator
00:00004EA6 7600            	  4464:                 moveq  #$00000000,d3
00:00004EA8 7800            	  4465:                 moveq  #$00000000,d4
00:00004EAA 7A07            	  4466:                 moveq  #$00000007,d5
00:00004EAC 7C00            	  4467:                 moveq  #$00000000,d6
00:00004EAE 7E00            	  4468:                 moveq  #$00000000,d7
                            	  4469: 
00:00004EB0 5385            	  4470: SUBQ_LOOP3:     subq.l #1,d5
00:00004EB2 40C6            	  4471:                 move.w SR,d6
00:00004EB4 02860000001F    	  4472:                 andi.l #$1F,d6        * Isolate flags
00:00004EBA D286            	  4473:                 add.l d6,d1           * Copy flag results into accumulator
00:00004EBC D485            	  4474:                 add.l d5,d2           * Copy data results into data accumulator
00:00004EBE 51C8FFF0        	  4475:                 dbf d0,SUBQ_LOOP3
                            	  4476: 
00:00004EC2 0C81000007DD    	  4477:                 cmpi.l #$000007DD,d1
00:00004EC8 66FE            	  4478:                 bne.s *
00:00004ECA 0C82FFFF8680    	  4479:                 cmpi.l #$FFFF8680,d2
00:00004ED0 66FE            	  4480:                 bne.s *
                            	  4481: 
                            	  4482: *     Check that Flags are not updated for Address registers
00:00004ED2 207C0001FFFF    	  4483:                 move.l #$0001FFFF,a0
00:00004ED8 44FC0000        	  4484:                 move #$00,CCR         * Clear flags
00:00004EDC 5F48            	  4485:                 subq.w #$7,a0
00:00004EDE 65FE            	  4486:                 bcs.s *
                            	  4487: 
00:00004EE0 4E75            	  4488:                 rts
                            	  4489: 
                            	  4490: 
                            	  4491: 
                            	  4492: 
                            	  4493: *-----------------------------------------------------------
                            	  4494: *-----------------------------------------------------------
                            	  4495: * OPCODE : MOVEQ
                            	  4496: *-----------------------------------------------------------
                            	  4497: *-----------------------------------------------------------
                            	  4498: 
                            	  4499: op_MOVEQ:
00:00004EE2 7000            	  4500:                 moveq  #$00000000,d0
00:00004EE4 7000            	  4501:                 moveq #$0,d0
00:00004EE6 66FE            	  4502:                 bne.s *
00:00004EE8 4A80            	  4503:                 cmpi.l #$00000000,d0
00:00004EEA 66FE            	  4504:                 bne.s *
                            	  4505: 
00:00004EEC 7000            	  4506:                 moveq  #$00000000,d0
00:00004EEE 7080            	  4507:                 moveq #-128,d0
00:00004EF0 67FE            	  4508:                 beq.s *
00:00004EF2 6AFE            	  4509:                 bpl.s *
00:00004EF4 0C80FFFFFF80    	  4510:                 cmpi.l #$FFFFFF80,d0
00:00004EFA 66FE            	  4511:                 bne.s *
                            	  4512: 
                            	  4513: 
00:00004EFC 4E75            	  4514:                 rts
                            	  4515: 
                            	  4516: 
                            	  4517: *-----------------------------------------------------------
                            	  4518: *-----------------------------------------------------------
                            	  4519: * OPCODE : DIVU
                            	  4520: *-----------------------------------------------------------
                            	  4521: *-----------------------------------------------------------
                            	  4522: 
                            	  4523: op_DIVU:
                            	  4524: 
00:00004EFE 203CA5A5A5A5    	  4525:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00004F04 223C00005A5A    	  4526:                 move.l #$00005a5a,d1        * Initial Divisor
00:00004F0A 243CA5A5A5A5    	  4527:                 move.l #$a5a5a5a5,d2
00:00004F10 7600            	  4528:                 moveq  #$00000000,d3
00:00004F12 7800            	  4529:                 moveq  #$00000000,d4        * Cumulative data results
00:00004F14 7A00            	  4530:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004F16 7C0E            	  4531:                 move.l #$0000000E,d6       * Inner loop counter
00:00004F18 7E1E            	  4532:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4533: 
                            	  4534: 
00:00004F1A 80C1            	  4535: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:00004F1C 40C3            	  4536:                 move.w SR,d3
00:00004F1E 02830000000C    	  4537:                 andi.l #$0C,d3            * Isolate flags
00:00004F24 DA83            	  4538:                 add.l d3,d5               * Copy flag results into accumulator
00:00004F26 D880            	  4539:                 add.l d0,d4               * Copy data results into data accumulator
00:00004F28 E289            	  4540:                 lsr.l #$1,d1
                            	  4541: 
00:00004F2A 51CEFFEE        	  4542:                 dbf d6,DIVU_OUTER1
00:00004F2E E28A            	  4543:                 lsr.l #$1,d2
00:00004F30 2002            	  4544:                 move.l d2,d0
00:00004F32 223C00005A5A    	  4545:                 move.l #$00005a5a,d1       * Initial Divisor
00:00004F38 7C0E            	  4546:                 move.l #$0000000E,d6       * Inner loop counter
00:00004F3A 51CFFFDE        	  4547:                 dbf d7,DIVU_OUTER1
                            	  4548: 
00:00004F3E 0C8492FEDB89    	  4549:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:00004F44 66FE            	  4550:                 bne.s *
                            	  4551: 
00:00004F46 0C8500000110    	  4552:                 cmpi.l #$00000110,d5      * Check the Flag results
00:00004F4C 66FE            	  4553:                 bne.s *
                            	  4554: 
                            	  4555: 
00:00004F4E 4E75            	  4556:                 rts
                            	  4557: 
                            	  4558: 
                            	  4559: 
                            	  4560: *-----------------------------------------------------------
                            	  4561: *-----------------------------------------------------------
                            	  4562: * OPCODE : DIVS
                            	  4563: *-----------------------------------------------------------
                            	  4564: *-----------------------------------------------------------
                            	  4565: 
                            	  4566: op_DIVS:
                            	  4567: 
00:00004F50 203CA5A5A5A5    	  4568: 	move.l #$a5a5a5a5,d0        * Initial Numerator
00:00004F56 223C00005A5A    	  4569: 	move.l #$00005a5a,d1        * Initial Divisor
00:00004F5C 243CA5A5A5A5    	  4570: 	move.l #$a5a5a5a5,d2
00:00004F62 7600            	  4571: 	moveq  #$00000000,d3
00:00004F64 7800            	  4572: 	moveq  #$00000000,d4        * Cumulative data results
00:00004F66 7A00            	  4573: 	moveq  #$00000000,d5       * Cumulative flag results
00:00004F68 7C0E            	  4574: 	move.l #$0000000E,d6       * Inner loop counter
00:00004F6A 7E1E            	  4575: 	move.l #$0000001E,d7       * Outer loop counter
                            	  4576: 
                            	  4577: DIVS_OUTER1:
00:00004F6C 81C1            	  4578: 	divs d1,d0               * !! Easy68K C not always cleared
00:00004F6E 40C3            	  4579: 	move.w SR,d3
00:00004F70 02830000000C    	  4580: 	andi.l #$0C,d3            * Isolate flags
00:00004F76 DA83            	  4581: 	add.l d3,d5               * Copy flag results into accumulator
00:00004F78 D880            	  4582: 	add.l d0,d4               * Copy data results into data accumulator
00:00004F7A E289            	  4583: 	lsr.l #$1,d1
                            	  4584: 
00:00004F7C 51CEFFEE        	  4585: 	dbf d6,DIVS_OUTER1
00:00004F80 E28A            	  4586: 	lsr.l #$1,d2
00:00004F82 2002            	  4587: 	move.l d2,d0
00:00004F84 223C00005A5A    	  4588: 	move.l #$00005a5a,d1       * Initial Divisor
00:00004F8A 7C0E            	  4589: 	move.l #$0000000E,d6       * Inner loop counter
00:00004F8C 51CFFFDE        	  4590: 	dbf d7,DIVS_OUTER1
                            	  4591: 
00:00004F90 0C844EC5D057    	  4592: 	cmpi.l #$4EC5D057,d4      * Check the data results
00:00004F96 66FE            	  4593: 	bne.s *
                            	  4594: 
00:00004F98 0C8500000038    	  4595: 	cmpi.l #$00000038,d5      * Check the Flag results
00:00004F9E 66FE            	  4596: 	bne.s *
00:00004FA0 4E75            	  4597: 	rts
                            	  4598: 
                            	  4599: 
                            	  4600: *-----------------------------------------------------------
                            	  4601: *-----------------------------------------------------------
                            	  4602: * OPCODE : OR
                            	  4603: *-----------------------------------------------------------
                            	  4604: *-----------------------------------------------------------
                            	  4605: 
                            	  4606: op_OR:
                            	  4607: 
                            	  4608: *  * <EA> to Register
                            	  4609: 
00:00004FA2 203CA5A5A5A5    	  4610:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004FA8 223C8167E123    	  4611:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004FAE 243CA5A5A5A5    	  4612:                 move.l #$a5a5a5a5,d2
00:00004FB4 7600            	  4613:                 moveq  #$00000000,d3
00:00004FB6 7800            	  4614:                 moveq  #$00000000,d4       * Cumulative data results
00:00004FB8 7A00            	  4615:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004FBA 7C1E            	  4616:                 move.l #$0000001E,d6       * Inner loop counter
00:00004FBC 7E1E            	  4617:                 move.l #$0000001E,d7       * Outer loop counter
00:00004FBE 307C0100        	  4618:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4619: 
                            	  4620: 
                            	  4621: OR_OUTER1:
                            	  4622: 
                            	  4623: *     BYTE
00:00004FC2 2081            	  4624:                 move.l d1,(a0)
00:00004FC4 8010            	  4625:                 or.b (a0),d0
00:00004FC6 40C3            	  4626:                 move.w SR,d3
00:00004FC8 02830000000C    	  4627:                 andi.l #$0C,d3            * Isolate flags
00:00004FCE DA83            	  4628:                 add.l d3,d5               * Copy flag results into accumulator
00:00004FD0 D880            	  4629:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4630: 
                            	  4631: *     WORD
00:00004FD2 2081            	  4632:                 move.l d1,(a0)
00:00004FD4 8050            	  4633:                 or.w (a0),d0
00:00004FD6 40C3            	  4634:                 move.w SR,d3
00:00004FD8 02830000000C    	  4635:                 andi.l #$0C,d3            * Isolate flags
00:00004FDE DA83            	  4636:                 add.l d3,d5               * Copy flag results into accumulator
00:00004FE0 D880            	  4637:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4638: 
                            	  4639: *     LONG
00:00004FE2 2081            	  4640:                 move.l d1,(a0)
00:00004FE4 8090            	  4641:                 or.l (a0),d0
00:00004FE6 40C3            	  4642:                 move.w SR,d3
00:00004FE8 02830000000F    	  4643:                 andi.l #$0F,d3            * Isolate flags
00:00004FEE DA83            	  4644:                 add.l d3,d5               * Copy flag results into accumulator
00:00004FF0 D880            	  4645:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4646: 
                            	  4647: 
00:00004FF2 E289            	  4648:                 lsr.l #$1,d1
00:00004FF4 51CEFFCC        	  4649:                 dbf d6,OR_OUTER1
00:00004FF8 E28A            	  4650:                 lsr.l #$1,d2
00:00004FFA 223C8167E123    	  4651:                 move.l #$8167E123,d1       * Initial Data-Y
00:00005000 7C1E            	  4652:                 move.l #$0000001E,d6       * Inner loop counter
00:00005002 51CFFFBE        	  4653:                 dbf d7,OR_OUTER1
                            	  4654: 
00:00005006 0C8476EAC803    	  4655:                 cmpi.l #$76EAC803,d4      * Check the data results
00:0000500C 66FE            	  4656:                 bne.s *
00:0000500E 0C8500005A18    	  4657:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00005014 66FE            	  4658:                 bne.s *
                            	  4659: 
                            	  4660: 
                            	  4661: *  * Register to <EA>
                            	  4662: 
00:00005016 203C86738374    	  4663:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:0000501C 223CFC55F2FE    	  4664:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00005022 243C86738374    	  4665:                 move.l #$86738374,d2
00:00005028 7600            	  4666:                 moveq  #$00000000,d3
00:0000502A 7800            	  4667:                 moveq  #$00000000,d4       * Cumulative data results
00:0000502C 7A00            	  4668:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000502E 7C1E            	  4669:                 move.l #$0000001E,d6       * Inner loop counter
00:00005030 7E1D            	  4670:                 move.l #$0000001D,d7       * Outer loop counter
00:00005032 307C0100        	  4671:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4672: 
                            	  4673: 
                            	  4674: OR_OUTER2:
                            	  4675: 
                            	  4676: *     BYTE
00:00005036 2080            	  4677:                 move.l d0,(a0)
00:00005038 8310            	  4678:                 or.b d1,(a0)
00:0000503A 40C3            	  4679:                 move.w SR,d3
00:0000503C 02830000000C    	  4680:                 andi.l #$0C,d3            * Isolate flags
00:00005042 DA83            	  4681:                 add.l d3,d5               * Copy flag results into accumulator
00:00005044 D890            	  4682:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4683: 
                            	  4684: *     WORD
00:00005046 2080            	  4685:                 move.l d0,(a0)
00:00005048 8350            	  4686:                 or.w d1,(a0)
00:0000504A 40C3            	  4687:                 move.w SR,d3
00:0000504C 02830000000C    	  4688:                 andi.l #$0C,d3            * Isolate flags
00:00005052 DA83            	  4689:                 add.l d3,d5               * Copy flag results into accumulator
00:00005054 D890            	  4690:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4691: 
                            	  4692: *     LONG
00:00005056 2080            	  4693:                 move.l d0,(a0)
00:00005058 8390            	  4694:                 or.l d1,(a0)
00:0000505A 40C3            	  4695:                 move.w SR,d3
00:0000505C 02830000000F    	  4696:                 andi.l #$0F,d3            * Isolate flags
00:00005062 DA83            	  4697:                 add.l d3,d5               * Copy flag results into accumulator
00:00005064 D890            	  4698:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4699: 
                            	  4700: 
00:00005066 E289            	  4701:                 lsr.l #$1,d1
00:00005068 51CEFFCC        	  4702:                 dbf d6,OR_OUTER2
00:0000506C E28A            	  4703:                 lsr.l #$1,d2
00:0000506E 223C8167E123    	  4704:                 move.l #$8167E123,d1       * Initial Data-Y
00:00005074 7C1E            	  4705:                 move.l #$0000001E,d6       * Inner loop counter
00:00005076 51CFFFBE        	  4706:                 dbf d7,OR_OUTER2
                            	  4707: 
00:0000507A 0C84FA82B9E4    	  4708:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00005080 66FE            	  4709:                 bne.s *
00:00005082 0C8500005730    	  4710:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00005088 66FE            	  4711:                 bne.s *
                            	  4712: 
                            	  4713: 
00:0000508A 4E75            	  4714:                 rts
                            	  4715: 
                            	  4716: 
                            	  4717: 
                            	  4718: *-----------------------------------------------------------
                            	  4719: *-----------------------------------------------------------
                            	  4720: * OPCODE : AND
                            	  4721: *-----------------------------------------------------------
                            	  4722: *-----------------------------------------------------------
                            	  4723: 
                            	  4724: op_AND:
                            	  4725: 
                            	  4726: *  * <EA> to Register
                            	  4727: 
00:0000508C 203CA5A5A5A5    	  4728:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00005092 223C8167E123    	  4729:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00005098 243CA5A5A5A5    	  4730:                 move.l #$a5a5a5a5,d2
00:0000509E 7600            	  4731:                 moveq  #$00000000,d3
00:000050A0 7800            	  4732:                 moveq  #$00000000,d4       * Cumulative data results
00:000050A2 7A00            	  4733:                 moveq  #$00000000,d5       * Cumulative flag results
00:000050A4 7C1E            	  4734:                 move.l #$0000001E,d6       * Inner loop counter
00:000050A6 7E1E            	  4735:                 move.l #$0000001E,d7       * Outer loop counter
00:000050A8 307C0100        	  4736:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4737: 
                            	  4738: 
                            	  4739: AND_OUTER1:
                            	  4740: 
                            	  4741: *     BYTE
00:000050AC 2081            	  4742:                 move.l d1,(a0)
00:000050AE C010            	  4743:                 and.b (a0),d0
00:000050B0 40C3            	  4744:                 move.w sr,d3
00:000050B2 02830000000C    	  4745:                 andi.l #$0C,d3            * Isolate flags
00:000050B8 DA83            	  4746:                 add.l d3,d5               * Copy flag results into accumulator
00:000050BA D880            	  4747:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4748: 
                            	  4749: *     WORD
00:000050BC 2081            	  4750:                 move.l d1,(a0)
00:000050BE C050            	  4751:                 and.w (a0),d0
00:000050C0 40C3            	  4752:                 move.w sr,d3
00:000050C2 02830000000C    	  4753:                 andi.l #$0C,d3            * Isolate flags
00:000050C8 DA83            	  4754:                 add.l d3,d5               * Copy flag results into accumulator
00:000050CA D880            	  4755:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4756: 
                            	  4757: *     LONG
00:000050CC 2081            	  4758:                 move.l d1,(a0)
00:000050CE C090            	  4759:                 and.l (a0),d0
00:000050D0 40C3            	  4760:                 move.w sr,d3
00:000050D2 02830000000F    	  4761:                 andi.l #$0F,d3            * Isolate flags
00:000050D8 DA83            	  4762:                 add.l d3,d5               * Copy flag results into accumulator
00:000050DA D880            	  4763:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4764: 
                            	  4765: 
00:000050DC E289            	  4766:                 lsr.l #$1,d1
00:000050DE 51CEFFCC        	  4767:                 dbf d6,AND_OUTER1
00:000050E2 E28A            	  4768:                 lsr.l #$1,d2
00:000050E4 223C8167E123    	  4769:                 move.l #$8167E123,d1       * Initial Data-Y
00:000050EA 7C1E            	  4770:                 move.l #$0000001E,d6       * Inner loop counter
00:000050EC 51CFFFBE        	  4771:                 dbf d7,AND_OUTER1
                            	  4772: 
00:000050F0 0C84CF212883    	  4773:                 cmpi.l #$CF212883,d4      * Check the data results
00:000050F6 66FE            	  4774:                 bne.s *
00:000050F8 0C8500002D10    	  4775:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:000050FE 66FE            	  4776:                 bne.s *
                            	  4777: 
                            	  4778: 
                            	  4779: *  * Register to <EA>
                            	  4780: 
00:00005100 203C86738374    	  4781:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00005106 223CFC55F2FE    	  4782:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:0000510C 243C86738374    	  4783:                 move.l #$86738374,d2
00:00005112 7600            	  4784:                 moveq  #$00000000,d3
00:00005114 7800            	  4785:                 moveq  #$00000000,d4       * Cumulative data results
00:00005116 7A00            	  4786:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005118 7C1E            	  4787:                 move.l #$0000001E,d6       * Inner loop counter
00:0000511A 7E1D            	  4788:                 move.l #$0000001D,d7       * Outer loop counter
00:0000511C 307C0100        	  4789:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4790: 
                            	  4791: 
                            	  4792: AND_OUTER2:
                            	  4793: 
                            	  4794: *     BYTE
00:00005120 2080            	  4795:                 move.l d0,(a0)
00:00005122 C310            	  4796:                 and.b d1,(a0)
00:00005124 40C3            	  4797:                 move.w sr,d3
00:00005126 02830000000C    	  4798:                 andi.l #$0C,d3            * Isolate flags
00:0000512C DA83            	  4799:                 add.l d3,d5               * Copy flag results into accumulator
00:0000512E D890            	  4800:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4801: 
                            	  4802: *     WORD
00:00005130 2080            	  4803:                 move.l d0,(a0)
00:00005132 C350            	  4804:                 and.w d1,(a0)
00:00005134 40C3            	  4805:                 move.w sr,d3
00:00005136 02830000000C    	  4806:                 andi.l #$0C,d3            * Isolate flags
00:0000513C DA83            	  4807:                 add.l d3,d5               * Copy flag results into accumulator
00:0000513E D890            	  4808:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4809: 
                            	  4810: *     LONG
00:00005140 2080            	  4811:                 move.l d0,(a0)
00:00005142 C390            	  4812:                 and.l d1,(a0)
00:00005144 40C3            	  4813:                 move.w sr,d3
00:00005146 02830000000F    	  4814:                 andi.l #$0F,d3            * Isolate flags
00:0000514C DA83            	  4815:                 add.l d3,d5               * Copy flag results into accumulator
00:0000514E D890            	  4816:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4817: 
                            	  4818: 
00:00005150 E289            	  4819:                 lsr.l #$1,d1
00:00005152 51CEFFCC        	  4820:                 dbf d6,AND_OUTER2
00:00005156 E28A            	  4821:                 lsr.l #$1,d2
00:00005158 223C8167E123    	  4822:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000515E 7C1E            	  4823:                 move.l #$0000001E,d6       * Inner loop counter
00:00005160 51CFFFBE        	  4824:                 dbf d7,AND_OUTER2
                            	  4825: 
00:00005164 0C844A3DE544    	  4826:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:0000516A 66FE            	  4827:                 bne.s *
00:0000516C 0C85000018E8    	  4828:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00005172 66FE            	  4829:                 bne.s *
                            	  4830: 
                            	  4831: 
00:00005174 4E75            	  4832:                 rts
                            	  4833: 
                            	  4834: 
                            	  4835: 
                            	  4836: *-----------------------------------------------------------
                            	  4837: *-----------------------------------------------------------
                            	  4838: * OPCODE : EOR
                            	  4839: *-----------------------------------------------------------
                            	  4840: *-----------------------------------------------------------
                            	  4841: 
                            	  4842: op_EOR:
                            	  4843: 
                            	  4844: *  * Register to <EA>
                            	  4845: 
00:00005176 203C86738374    	  4846:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:0000517C 223CFC55F2FE    	  4847:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00005182 243C86738374    	  4848:                 move.l #$86738374,d2
00:00005188 7600            	  4849:                 moveq  #$00000000,d3
00:0000518A 7800            	  4850:                 moveq  #$00000000,d4       * Cumulative data results
00:0000518C 7A00            	  4851:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000518E 7C1E            	  4852:                 move.l #$0000001E,d6       * Inner loop counter
00:00005190 7E1D            	  4853:                 move.l #$0000001D,d7       * Outer loop counter
00:00005192 307C0100        	  4854:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4855: 
                            	  4856: 
                            	  4857: EOR_OUTER2:
                            	  4858: 
                            	  4859: *     BYTE
00:00005196 2080            	  4860:                 move.l d0,(a0)
00:00005198 B310            	  4861:                 eor.b d1,(a0)
00:0000519A 40C3            	  4862:                 move.w sr,d3
00:0000519C 02830000000C    	  4863:                 andi.l #$0C,d3            * Isolate flags
00:000051A2 DA83            	  4864:                 add.l d3,d5               * Copy flag results into accumulator
00:000051A4 D890            	  4865:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4866: 
                            	  4867: *     WORD
00:000051A6 2080            	  4868:                 move.l d0,(a0)
00:000051A8 B350            	  4869:                 eor.w d1,(a0)
00:000051AA 40C3            	  4870:                 move.w sr,d3
00:000051AC 02830000000C    	  4871:                 andi.l #$0C,d3            * Isolate flags
00:000051B2 DA83            	  4872:                 add.l d3,d5               * Copy flag results into accumulator
00:000051B4 D890            	  4873:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4874: 
                            	  4875: *     LONG
00:000051B6 2080            	  4876:                 move.l d0,(a0)
00:000051B8 B390            	  4877:                 eor.l d1,(a0)
00:000051BA 40C3            	  4878:                 move.w sr,d3
00:000051BC 02830000000F    	  4879:                 andi.l #$0F,d3            * Isolate flags
00:000051C2 DA83            	  4880:                 add.l d3,d5               * Copy flag results into accumulator
00:000051C4 D890            	  4881:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4882: 
                            	  4883: 
00:000051C6 E289            	  4884:                 lsr.l #$1,d1
00:000051C8 51CEFFCC        	  4885:                 dbf d6,EOR_OUTER2
00:000051CC E28A            	  4886:                 lsr.l #$1,d2
00:000051CE 223C8167E123    	  4887:                 move.l #$8167E123,d1       * Initial Data-Y
00:000051D4 7C1E            	  4888:                 move.l #$0000001E,d6       * Inner loop counter
00:000051D6 51CFFFBE        	  4889:                 dbf d7,EOR_OUTER2
                            	  4890: 
00:000051DA 0C8455C5EB70    	  4891:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:000051E0 66FE            	  4892:                 bne.s *
00:000051E2 0C8500004430    	  4893:                 cmpi.l #$00004430,d5      * Check the Flag results
00:000051E8 66FE            	  4894:                 bne.s *
                            	  4895: 
                            	  4896: 
00:000051EA 4E75            	  4897:                 rts
                            	  4898: 
                            	  4899: 
                            	  4900: *-----------------------------------------------------------
                            	  4901: *-----------------------------------------------------------
                            	  4902: * OPCODE : CMP
                            	  4903: *-----------------------------------------------------------
                            	  4904: *-----------------------------------------------------------
                            	  4905: 
                            	  4906: op_CMP:
                            	  4907: 
                            	  4908: 
                            	  4909: *  * <EA> to Register
                            	  4910: 
00:000051EC 203CA5A5A5A5    	  4911:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000051F2 223C8167E123    	  4912:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000051F8 243CA5A5A5A5    	  4913:                 move.l #$a5a5a5a5,d2
00:000051FE 7600            	  4914:                 moveq  #$00000000,d3
00:00005200 7800            	  4915:                 moveq  #$00000000,d4       * Cumulative data results
00:00005202 7A00            	  4916:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005204 7C1E            	  4917:                 move.l #$0000001E,d6       * Inner loop counter
00:00005206 7E1E            	  4918:                 move.l #$0000001E,d7       * Outer loop counter
00:00005208 307C0100        	  4919:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4920: 
                            	  4921: 
                            	  4922: CMP_OUTER1:
                            	  4923: 
                            	  4924: *     BYTE
00:0000520C 2081            	  4925:                 move.l d1,(a0)
00:0000520E B010            	  4926:                 cmp.b (a0),d0
00:00005210 40C3            	  4927:                 move.w sr,d3
00:00005212 02830000000F    	  4928:                 andi.l #$0F,d3            * Isolate flags
00:00005218 DA83            	  4929:                 add.l d3,d5               * Copy flag results into accumulator
00:0000521A D880            	  4930:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4931: 
                            	  4932: *     WORD
00:0000521C 2081            	  4933:                 move.l d1,(a0)
00:0000521E B050            	  4934:                 cmp.w (a0),d0
00:00005220 40C3            	  4935:                 move.w sr,d3
00:00005222 02830000000F    	  4936:                 andi.l #$0F,d3            * Isolate flags
00:00005228 DA83            	  4937:                 add.l d3,d5               * Copy flag results into accumulator
00:0000522A D880            	  4938:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4939: 
                            	  4940: *     LONG
00:0000522C 2081            	  4941:                 move.l d1,(a0)
00:0000522E B090            	  4942:                 cmp.l (a0),d0
00:00005230 40C3            	  4943:                 move.w sr,d3
00:00005232 02830000000F    	  4944:                 andi.l #$0F,d3            * Isolate flags
00:00005238 DA83            	  4945:                 add.l d3,d5               * Copy flag results into accumulator
00:0000523A D880            	  4946:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4947: 
                            	  4948: 
00:0000523C E289            	  4949:                 lsr.l #$1,d1
00:0000523E 51CEFFCC        	  4950:                 dbf d6,CMP_OUTER1
00:00005242 E28A            	  4951:                 lsr.l #$1,d2
00:00005244 223C8167E123    	  4952:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000524A 7C1E            	  4953:                 move.l #$0000001E,d6       * Inner loop counter
00:0000524C 51CFFFBE        	  4954:                 dbf d7,CMP_OUTER1
                            	  4955: 
00:00005250 0C847878712F    	  4956:                 cmpi.l #$7878712F,d4      * Check the data results
00:00005256 66FE            	  4957:                 bne.s *
00:00005258 0C8500005502    	  4958:                 cmpi.l #$00005502,d5      * Check the Flag results
00:0000525E 66FE            	  4959:                 bne.s *
                            	  4960: 
                            	  4961: 
                            	  4962: 
00:00005260 4E75            	  4963:                 rts
                            	  4964: 
                            	  4965: 
                            	  4966: *-----------------------------------------------------------
                            	  4967: *-----------------------------------------------------------
                            	  4968: * OPCODE : CMPA
                            	  4969: *-----------------------------------------------------------
                            	  4970: *-----------------------------------------------------------
                            	  4971: 
                            	  4972: op_CMPA:
                            	  4973: 
                            	  4974: 
                            	  4975: *  * <EA> to Register
                            	  4976: 
00:00005262 207CA5A5A5A5    	  4977:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00005268 223C8167E123    	  4978:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:0000526E 243CA5A5A5A5    	  4979:                 move.l #$a5a5a5a5,d2
00:00005274 7600            	  4980:                 moveq  #$00000000,d3
00:00005276 7800            	  4981:                 moveq  #$00000000,d4       * Cumulative data results
00:00005278 7A00            	  4982:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000527A 7C1E            	  4983:                 move.l #$0000001E,d6       * Inner loop counter
00:0000527C 7E1E            	  4984:                 move.l #$0000001E,d7       * Outer loop counter
00:0000527E 327C0100        	  4985:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4986: 
                            	  4987: 
                            	  4988: CMPA_OUTER1:
                            	  4989: 
                            	  4990: 
                            	  4991: *     WORD
00:00005282 2281            	  4992:                 move.l d1,(a1)
00:00005284 B0D1            	  4993:                 cmpa.w (a1),a0
00:00005286 40C3            	  4994:                 move.w sr,d3
00:00005288 02830000000F    	  4995:                 andi.l #$0F,d3            * Isolate flags
00:0000528E DA83            	  4996:                 add.l d3,d5               * Copy flag results into accumulator
00:00005290 D888            	  4997:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4998: 
                            	  4999: *     LONG
00:00005292 2281            	  5000:                 move.l d1,(a1)
00:00005294 B1D1            	  5001:                 cmpa.l (a1),a0
00:00005296 40C3            	  5002:                 move.w sr,d3
00:00005298 02830000000F    	  5003:                 andi.l #$0F,d3            * Isolate flags
00:0000529E DA83            	  5004:                 add.l d3,d5               * Copy flag results into accumulator
00:000052A0 D888            	  5005:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5006: 
                            	  5007: 
00:000052A2 E289            	  5008:                 lsr.l #$1,d1
00:000052A4 51CEFFDC        	  5009:                 dbf d6,CMPA_OUTER1
00:000052A8 E28A            	  5010:                 lsr.l #$1,d2
00:000052AA 223C8167E123    	  5011:                 move.l #$8167E123,d1       * Initial Data-Y
00:000052B0 7C1E            	  5012:                 move.l #$0000001E,d6       * Inner loop counter
00:000052B2 51CFFFCE        	  5013:                 dbf d7,CMPA_OUTER1
                            	  5014: 
00:000052B6 0C84A5A5A0CA    	  5015:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:000052BC 66FE            	  5016:                 bne.s *
00:000052BE 0C8500003A7D    	  5017:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:000052C4 66FE            	  5018:                 bne.s *
                            	  5019: 
                            	  5020: 
00:000052C6 4E75            	  5021:                 rts
                            	  5022: 
                            	  5023: 
                            	  5024: 
                            	  5025: *-----------------------------------------------------------
                            	  5026: *-----------------------------------------------------------
                            	  5027: * OPCODE : CMPM
                            	  5028: *-----------------------------------------------------------
                            	  5029: *-----------------------------------------------------------
                            	  5030: 
                            	  5031: op_CMPM:
                            	  5032: 
00:000052C8 307C0100        	  5033:                 move.l #$00000100,a0       * Address for Data-X
00:000052CC 327C0200        	  5034:                 move.l #$00000200,a1       * Address for Data-Y
00:000052D0 7000            	  5035:                 moveq  #$00000000,d0
00:000052D2 7200            	  5036:                 moveq  #$00000000,d1
00:000052D4 7400            	  5037:                 moveq  #$00000000,d2
                            	  5038: 
00:000052D6 20FC11FF5580    	  5039:                 move.l #$11FF5580,(a0)+   * Populate test data
00:000052DC 20FC1111FFFF    	  5040:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:000052E2 20FC33333333    	  5041:                 move.l #$33333333,(a0)+   * Populate test data
00:000052E8 20FC44444444    	  5042:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5043: 
00:000052EE 22FC80FF337F    	  5044:                 move.l #$80FF337F,(a1)+   * Populate test data
00:000052F4 22FCFFFF1111    	  5045:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:000052FA 22FC33333333    	  5046:                 move.l #$33333333,(a1)+   * Populate test data
00:00005300 22FC44444444    	  5047:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5048: 
00:00005306 307C0100        	  5049:                 move.l #$00000100,a0       * Address for Data-X
00:0000530A 327C0200        	  5050:                 move.l #$00000200,a1       * Address for Data-Y
00:0000530E 7C0F            	  5051:                 move.l #$0000000F,d6       * Loop counter
                            	  5052: 
00:00005310 B308            	  5053: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00005312 40C3            	  5054:                 move.w sr,d3
00:00005314 02830000000F    	  5055:                 andi.l #$0F,d3            * Isolate flags
00:0000531A D083            	  5056:                 add.l d3,d0               * Copy flag results into accumulator
00:0000531C 51CEFFF2        	  5057:                 dbf d6,CMPM_LOOP1
                            	  5058: 
                            	  5059: 
00:00005320 307C0100        	  5060:                 move.l #$00000100,a0       * Address for Data-X
00:00005324 327C0200        	  5061:                 move.l #$00000200,a1       * Address for Data-Y
00:00005328 7C07            	  5062:                 moveq  #$00000007,d6       * Loop counter
                            	  5063: 
00:0000532A B348            	  5064: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:0000532C 40C3            	  5065:                 move.w sr,d3
00:0000532E 02830000000F    	  5066:                 andi.l #$0F,d3            * Isolate flags
00:00005334 D283            	  5067:                 add.l d3,d1               * Copy flag results into accumulator
00:00005336 51CEFFF2        	  5068:                 dbf d6,CMPM_LOOP2
                            	  5069: 
                            	  5070: 
00:0000533A 307C0100        	  5071:                 move.l #$00000100,a0       * Address for Data-X
00:0000533E 327C0200        	  5072:                 move.l #$00000200,a1       * Address for Data-Y
00:00005342 7C03            	  5073:                 moveq  #$00000003,d6       * Loop counter
                            	  5074: 
00:00005344 B388            	  5075: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00005346 40C3            	  5076:                 move.w sr,d3
00:00005348 02830000000F    	  5077:                 andi.l #$0F,d3            * Isolate flags
00:0000534E D483            	  5078:                 add.l d3,d2               * Copy flag results into accumulator
00:00005350 51CEFFF2        	  5079:                 dbf d6,CMPM_LOOP3
                            	  5080: 
                            	  5081: 
00:00005354 0C800000004C    	  5082:                 cmpi.l #$0000004C,d0      * Check the data results
00:0000535A 66FE            	  5083:                 bne.s *
00:0000535C 0C8100000024    	  5084:                 cmpi.l #$00000024,d1
00:00005362 66FE            	  5085:                 bne.s *
00:00005364 0C8200000012    	  5086:                 cmpi.l #$00000012,d2
00:0000536A 66FE            	  5087:                 bne.s *
                            	  5088: 
00:0000536C 4E75            	  5089:                 rts
                            	  5090: 
                            	  5091: 
                            	  5092: *-----------------------------------------------------------
                            	  5093: *-----------------------------------------------------------
                            	  5094: * OPCODE : ADD
                            	  5095: *-----------------------------------------------------------
                            	  5096: *-----------------------------------------------------------
                            	  5097: 
                            	  5098: op_ADD:
                            	  5099: 
                            	  5100: 
                            	  5101: *  * <EA> to Register
00:0000536E 203CA5A5A5A5    	  5102:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00005374 223C8167E123    	  5103:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:0000537A 243CA5A5A5A5    	  5104:                 move.l #$a5a5a5a5,d2
00:00005380 7600            	  5105:                 moveq  #$00000000,d3
00:00005382 7800            	  5106:                 moveq  #$00000000,d4       * Cumulative data results
00:00005384 7A00            	  5107:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005386 7C1E            	  5108:                 move.l #$0000001E,d6       * Inner loop counter
00:00005388 7E1E            	  5109:                 move.l #$0000001E,d7       * Outer loop counter
00:0000538A 307C0100        	  5110:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5111: 
                            	  5112: 
                            	  5113: ADD_OUTER1:
                            	  5114: 
                            	  5115: *     BYTE
00:0000538E 2081            	  5116:                 move.l d1,(a0)
00:00005390 D010            	  5117:                 add.b (a0),d0
00:00005392 40C3            	  5118:                 move.w sr,d3
00:00005394 02830000001F    	  5119:                 andi.l #$1F,d3            * Isolate flags
00:0000539A DA83            	  5120:                 add.l d3,d5               * Copy flag results into accumulator
00:0000539C D880            	  5121:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5122: 
                            	  5123: *     WORD
00:0000539E 2081            	  5124:                 move.l d1,(a0)
00:000053A0 D050            	  5125:                 add.w (a0),d0
00:000053A2 40C3            	  5126:                 move.w sr,d3
00:000053A4 02830000000C    	  5127:                 andi.l #$0C,d3            * Isolate flags
00:000053AA DA83            	  5128:                 add.l d3,d5               * Copy flag results into accumulator
00:000053AC D880            	  5129:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5130: 
                            	  5131: *     LONG
00:000053AE 2081            	  5132:                 move.l d1,(a0)
00:000053B0 D090            	  5133:                 add.l (a0),d0
00:000053B2 40C3            	  5134:                 move.w sr,d3
00:000053B4 02830000000F    	  5135:                 andi.l #$0F,d3            * Isolate flags
00:000053BA DA83            	  5136:                 add.l d3,d5               * Copy flag results into accumulator
00:000053BC D880            	  5137:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5138: 
                            	  5139: 
00:000053BE E299            	  5140:                 ror.l #$1,d1
00:000053C0 51CEFFCC        	  5141:                 dbf d6,ADD_OUTER1
00:000053C4 E29A            	  5142:                 ror.l #$1,d2
00:000053C6 223C8167E123    	  5143:                 move.l #$8167E123,d1       * Initial Data-Y
00:000053CC 7C1E            	  5144:                 move.l #$0000001E,d6       * Inner loop counter
00:000053CE 51CFFFBE        	  5145:                 dbf d7,ADD_OUTER1
                            	  5146: 
00:000053D2 0C8423ED428F    	  5147:                 cmpi.l #$23ED428F,d4      * Check the data results
00:000053D8 66FE            	  5148:                 bne.s *
00:000053DA 0C8500004C96    	  5149:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:000053E0 66FE            	  5150:                 bne.s *
                            	  5151: 
                            	  5152: 
                            	  5153: *  * Register to <EA>
00:000053E2 203C86738374    	  5154:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:000053E8 223CFC55F2FE    	  5155:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:000053EE 243C86738374    	  5156:                 move.l #$86738374,d2
00:000053F4 7600            	  5157:                 moveq  #$00000000,d3
00:000053F6 7800            	  5158:                 moveq  #$00000000,d4       * Cumulative data results
00:000053F8 7A00            	  5159:                 moveq  #$00000000,d5       * Cumulative flag results
00:000053FA 7C1E            	  5160:                 move.l #$0000001E,d6       * Inner loop counter
00:000053FC 7E1D            	  5161:                 move.l #$0000001D,d7       * Outer loop counter
00:000053FE 307C0100        	  5162:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5163: 
                            	  5164: 
                            	  5165: ADD_OUTER2:
                            	  5166: 
                            	  5167: *     BYTE
00:00005402 2080            	  5168:                 move.l d0,(a0)
00:00005404 D310            	  5169:                 add.b d1,(a0)
00:00005406 40C3            	  5170:                 move.w sr,d3
00:00005408 02830000000C    	  5171:                 andi.l #$0C,d3            * Isolate flags
00:0000540E DA83            	  5172:                 add.l d3,d5               * Copy flag results into accumulator
00:00005410 D890            	  5173:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5174: 
                            	  5175: *     WORD
00:00005412 2080            	  5176:                 move.l d0,(a0)
00:00005414 D350            	  5177:                 add.w d1,(a0)
00:00005416 40C3            	  5178:                 move.w sr,d3
00:00005418 02830000001F    	  5179:                 andi.l #$1F,d3            * Isolate flags
00:0000541E DA83            	  5180:                 add.l d3,d5               * Copy flag results into accumulator
00:00005420 D890            	  5181:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5182: 
                            	  5183: *     LONG
00:00005422 2080            	  5184:                 move.l d0,(a0)
00:00005424 D390            	  5185:                 add.l d1,(a0)
00:00005426 40C3            	  5186:                 move.w sr,d3
00:00005428 02830000000F    	  5187:                 andi.l #$0F,d3            * Isolate flags
00:0000542E DA83            	  5188:                 add.l d3,d5               * Copy flag results into accumulator
00:00005430 D890            	  5189:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5190: 
                            	  5191: 
00:00005432 E299            	  5192:                 ror.l #$1,d1
00:00005434 51CEFFCC        	  5193:                 dbf d6,ADD_OUTER2
00:00005438 E29A            	  5194:                 ror.l #$1,d2
00:0000543A 223C8167E123    	  5195:                 move.l #$8167E123,d1       * Initial Data-Y
00:00005440 7C1E            	  5196:                 move.l #$0000001E,d6       * Inner loop counter
00:00005442 51CFFFBE        	  5197:                 dbf d7,ADD_OUTER2
                            	  5198: 
00:00005446 0C846701B884    	  5199:                 cmpi.l #$6701B884,d4      * Check the data results
00:0000544C 66FE            	  5200:                 bne.s *
00:0000544E 0C8500005467    	  5201:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00005454 66FE            	  5202:                 bne.s *
                            	  5203: 
00:00005456 4E75            	  5204:                 rts
                            	  5205: 
                            	  5206: *-----------------------------------------------------------
                            	  5207: *-----------------------------------------------------------
                            	  5208: * OPCODE : SUB
                            	  5209: *-----------------------------------------------------------
                            	  5210: *-----------------------------------------------------------
                            	  5211: 
                            	  5212: op_SUB:
                            	  5213: 
                            	  5214: *  * <EA> to Register
00:00005458 203CA5A5A5A5    	  5215:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:0000545E 223C8167E123    	  5216:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00005464 243CA5A5A5A5    	  5217:                 move.l #$a5a5a5a5,d2
00:0000546A 7600            	  5218:                 moveq  #$00000000,d3
00:0000546C 7800            	  5219:                 moveq  #$00000000,d4       * Cumulative data results
00:0000546E 7A00            	  5220:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005470 7C1E            	  5221:                 move.l #$0000001E,d6       * Inner loop counter
00:00005472 7E1E            	  5222:                 move.l #$0000001E,d7       * Outer loop counter
00:00005474 307C0100        	  5223:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5224: 
                            	  5225: 
                            	  5226: SUB_OUTER1:
                            	  5227: 
                            	  5228: *     BYTE
00:00005478 2081            	  5229:                 move.l d1,(a0)
00:0000547A 9010            	  5230:                 sub.b (a0),d0
00:0000547C 40C3            	  5231:                 move.w sr,d3
00:0000547E 02830000001F    	  5232:                 andi.l #$1F,d3            * Isolate flags
00:00005484 DA83            	  5233:                 add.l d3,d5               * Copy flag results into accumulator
00:00005486 D880            	  5234:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5235: 
                            	  5236: *     WORD
00:00005488 2081            	  5237:                 move.l d1,(a0)
00:0000548A 9050            	  5238:                 sub.w (a0),d0
00:0000548C 40C3            	  5239:                 move.w sr,d3
00:0000548E 02830000000C    	  5240:                 andi.l #$0C,d3            * Isolate flags
00:00005494 DA83            	  5241:                 add.l d3,d5               * Copy flag results into accumulator
00:00005496 D880            	  5242:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5243: 
                            	  5244: *     LONG
00:00005498 2081            	  5245:                 move.l d1,(a0)
00:0000549A 9090            	  5246:                 sub.l (a0),d0
00:0000549C 40C3            	  5247:                 move.w sr,d3
00:0000549E 02830000000F    	  5248:                 andi.l #$0F,d3            * Isolate flags
00:000054A4 DA83            	  5249:                 add.l d3,d5               * Copy flag results into accumulator
00:000054A6 D880            	  5250:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5251: 
                            	  5252: 
00:000054A8 E299            	  5253:                 ror.l #$1,d1
00:000054AA 51CEFFCC        	  5254:                 dbf d6,SUB_OUTER1
00:000054AE E29A            	  5255:                 ror.l #$1,d2
00:000054B0 223C8167E123    	  5256:                 move.l #$8167E123,d1       * Initial Data-Y
00:000054B6 7C1E            	  5257:                 move.l #$0000001E,d6       * Inner loop counter
00:000054B8 51CFFFBE        	  5258:                 dbf d7,SUB_OUTER1
                            	  5259: 
00:000054BC 0C841A8D14CF    	  5260:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:000054C2 66FE            	  5261:                 bne.s *
00:000054C4 0C8500004FC4    	  5262:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:000054CA 66FE            	  5263:                 bne.s *
                            	  5264: 
                            	  5265: 
                            	  5266: *  * Register to <EA>
00:000054CC 203C86738374    	  5267:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:000054D2 223CFC55F2FE    	  5268:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:000054D8 243C86738374    	  5269:                 move.l #$86738374,d2
00:000054DE 7600            	  5270:                 moveq  #$00000000,d3
00:000054E0 7800            	  5271:                 moveq  #$00000000,d4       * Cumulative data results
00:000054E2 7A00            	  5272:                 moveq  #$00000000,d5       * Cumulative flag results
00:000054E4 7C1E            	  5273:                 move.l #$0000001E,d6       * Inner loop counter
00:000054E6 7E1D            	  5274:                 move.l #$0000001D,d7       * Outer loop counter
00:000054E8 307C0100        	  5275:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5276: 
                            	  5277: 
                            	  5278: SUB_OUTER2:
                            	  5279: 
                            	  5280: *     BYTE
00:000054EC 2080            	  5281:                 move.l d0,(a0)
00:000054EE 9310            	  5282:                 sub.b d1,(a0)
00:000054F0 40C3            	  5283:                 move.w sr,d3
00:000054F2 02830000000C    	  5284:                 andi.l #$0C,d3            * Isolate flags
00:000054F8 DA83            	  5285:                 add.l d3,d5               * Copy flag results into accumulator
00:000054FA D890            	  5286:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5287: 
                            	  5288: *     WORD
00:000054FC 2080            	  5289:                 move.l d0,(a0)
00:000054FE 9350            	  5290:                 sub.w d1,(a0)
00:00005500 40C3            	  5291:                 move.w sr,d3
00:00005502 02830000001F    	  5292:                 andi.l #$1F,d3            * Isolate flags
00:00005508 DA83            	  5293:                 add.l d3,d5               * Copy flag results into accumulator
00:0000550A D890            	  5294:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5295: 
                            	  5296: *     LONG
00:0000550C 2080            	  5297:                 move.l d0,(a0)
00:0000550E 9390            	  5298:                 sub.l d1,(a0)
00:00005510 40C3            	  5299:                 move.w sr,d3
00:00005512 02830000000F    	  5300:                 andi.l #$0F,d3            * Isolate flags
00:00005518 DA83            	  5301:                 add.l d3,d5               * Copy flag results into accumulator
00:0000551A D890            	  5302:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5303: 
                            	  5304: 
00:0000551C E299            	  5305:                 ror.l #$1,d1
00:0000551E 51CEFFCC        	  5306:                 dbf d6,SUB_OUTER2
00:00005522 E29A            	  5307:                 ror.l #$1,d2
00:00005524 223C8167E123    	  5308:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000552A 7C1E            	  5309:                 move.l #$0000001E,d6       * Inner loop counter
00:0000552C 51CFFFBE        	  5310:                 dbf d7,SUB_OUTER2
                            	  5311: 
00:00005530 0C8436D38BEC    	  5312:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00005536 66FE            	  5313:                 bne.s *
00:00005538 0C85000045A5    	  5314:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:0000553E 66FE            	  5315:                 bne.s *
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: 
00:00005540 4E75            	  5320:                 rts
                            	  5321: 
                            	  5322: 
                            	  5323: 
                            	  5324: *-----------------------------------------------------------
                            	  5325: *-----------------------------------------------------------
                            	  5326: * OPCODE : ADDA
                            	  5327: *-----------------------------------------------------------
                            	  5328: *-----------------------------------------------------------
                            	  5329: 
                            	  5330: op_ADDA:
                            	  5331: 
                            	  5332: *  * <EA> to Register
00:00005542 203CA5A5A5A5    	  5333:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00005548 223C8167E123    	  5334:                 move.l #$8167E123,d1
00:0000554E 243CA5A5A5A5    	  5335:                 move.l #$a5a5a5a5,d2
00:00005554 7600            	  5336:                 moveq  #$00000000,d3
00:00005556 7800            	  5337:                 moveq  #$00000000,d4       * Cumulative data results
00:00005558 7A00            	  5338:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000555A 7C1E            	  5339:                 move.l #$0000001E,d6       * Inner loop counter
00:0000555C 7E1E            	  5340:                 move.l #$0000001E,d7       * Outer loop counter
00:0000555E 307C0100        	  5341:                 move.l #$00000100,a0       * Address for memory EA operations
00:00005562 227C8167E123    	  5342:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5343: 
                            	  5344: ADDA_OUTER1:
                            	  5345: 
                            	  5346: *     WORD
                            	  5347: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5348: *                adda.w (a0),a1
                            	  5349: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
                            	  5351: *     LONG
00:00005568 2081            	  5352:                 move.l d1,(a0)
00:0000556A D3D0            	  5353:                 adda.l (a0),a1
00:0000556C D889            	  5354:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5355: 
00:0000556E E299            	  5356:                 ror.l #$1,d1
00:00005570 51CEFFF6        	  5357:                 dbf d6,ADDA_OUTER1
00:00005574 E299            	  5358:                 ror.l #$1,d1
00:00005576 2241            	  5359:                 move.l d1,a1
00:00005578 223C8167E123    	  5360:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000557E 7C1E            	  5361:                 move.l #$0000001E,d6       * Inner loop counter
00:00005580 51CFFFE6        	  5362:                 dbf d7,ADDA_OUTER1
                            	  5363: 
00:00005584 0C84AC04DB4C    	  5364:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:0000558A 66FE            	  5365:                 bne.s *
                            	  5366: 
                            	  5367: 
00:0000558C 4E75            	  5368:                 rts
                            	  5369: 
                            	  5370: 
                            	  5371: *-----------------------------------------------------------
                            	  5372: *-----------------------------------------------------------
                            	  5373: * OPCODE : SUBA
                            	  5374: *-----------------------------------------------------------
                            	  5375: *-----------------------------------------------------------
                            	  5376: 
                            	  5377: op_SUBA:
                            	  5378: 
                            	  5379: *  * <EA> to Register
00:0000558E 203CA5A5A5A5    	  5380:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00005594 223C8167E123    	  5381:                 move.l #$8167E123,d1
00:0000559A 243CA5A5A5A5    	  5382:                 move.l #$a5a5a5a5,d2
00:000055A0 7600            	  5383:                 moveq  #$00000000,d3
00:000055A2 7800            	  5384:                 moveq  #$00000000,d4       * Cumulative data results
00:000055A4 7A00            	  5385:                 moveq  #$00000000,d5       * Cumulative flag results
00:000055A6 7C1E            	  5386:                 move.l #$0000001E,d6       * Inner loop counter
00:000055A8 7E1E            	  5387:                 move.l #$0000001E,d7       * Outer loop counter
00:000055AA 307C0100        	  5388:                 move.l #$00000100,a0       * Address for memory EA operations
00:000055AE 227C8167E123    	  5389:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5390: 
                            	  5391: SUBA_OUTER1:
                            	  5392: 
                            	  5393: *     WORD
                            	  5394: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5395: *                suba.w (a0),a1
                            	  5396: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
                            	  5398: *     LONG
00:000055B4 2081            	  5399:                 move.l d1,(a0)
00:000055B6 93D0            	  5400:                 suba.l (a0),a1
00:000055B8 D889            	  5401:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5402: 
00:000055BA E299            	  5403:                 ror.l #$1,d1
00:000055BC 51CEFFF6        	  5404:                 dbf d6,SUBA_OUTER1
00:000055C0 E299            	  5405:                 ror.l #$1,d1
00:000055C2 2241            	  5406:                 move.l d1,a1
00:000055C4 223C8167E123    	  5407:                 move.l #$8167E123,d1       * Initial Data-Y
00:000055CA 7C1E            	  5408:                 move.l #$0000001E,d6       * Inner loop counter
00:000055CC 51CFFFE6        	  5409:                 dbf d7,SUBA_OUTER1
                            	  5410: 
00:000055D0 0C84E1E36D7A    	  5411:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:000055D6 66FE            	  5412:                 bne.s *
                            	  5413: 
                            	  5414: 
00:000055D8 4E75            	  5415:                 rts
                            	  5416: 
                            	  5417: 
                            	  5418: 
                            	  5419: *-----------------------------------------------------------
                            	  5420: *-----------------------------------------------------------
                            	  5421: * OPCODE : ADDX
                            	  5422: *-----------------------------------------------------------
                            	  5423: *-----------------------------------------------------------
                            	  5424: 
                            	  5425: op_ADDX:
                            	  5426: 
                            	  5427: 
                            	  5428: *  * Register to Register
00:000055DA 203CA5A5A5A5    	  5429:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000055E0 223C8167E123    	  5430:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000055E6 243CA5A5A5A5    	  5431:                 move.l #$a5a5a5a5,d2
00:000055EC 7600            	  5432:                 moveq  #$00000000,d3
00:000055EE 7800            	  5433:                 moveq  #$00000000,d4       * Cumulative data results
00:000055F0 7A00            	  5434:                 moveq  #$00000000,d5       * Cumulative flag results
00:000055F2 7C1E            	  5435:                 move.l #$0000001E,d6       * Inner loop counter
00:000055F4 7E1E            	  5436:                 move.l #$0000001E,d7       * Outer loop counter
00:000055F6 307C0100        	  5437:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5438: 
                            	  5439: 
                            	  5440: ADDX_OUTER1:
                            	  5441: 
                            	  5442: *     BYTE
00:000055FA 2002            	  5443:                 move.l d2,d0
00:000055FC D101            	  5444:                 addx.b d1,d0
00:000055FE 40C3            	  5445:                 move.w sr,d3
00:00005600 02830000001F    	  5446:                 andi.l #$1F,d3            * Isolate flags
00:00005606 DA83            	  5447:                 add.l d3,d5               * Copy flag results into accumulator
00:00005608 D880            	  5448:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5449: 
                            	  5450: *     WORD
00:0000560A 2002            	  5451:                 move.l d2,d0
00:0000560C D141            	  5452:                 addx.w d1,d0
00:0000560E 40C3            	  5453:                 move.w sr,d3
00:00005610 02830000001F    	  5454:                 andi.l #$1F,d3            * Isolate flags
00:00005616 DA83            	  5455:                 add.l d3,d5               * Copy flag results into accumulator
00:00005618 D880            	  5456:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5457: 
                            	  5458: *     LONG
00:0000561A 2002            	  5459:                 move.l d2,d0
00:0000561C D181            	  5460:                 addx.l d1,d0
00:0000561E 40C3            	  5461:                 move.w sr,d3
00:00005620 02830000001F    	  5462:                 andi.l #$1F,d3            * Isolate flags
00:00005626 DA83            	  5463:                 add.l d3,d5               * Copy flag results into accumulator
00:00005628 D880            	  5464:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5465: 
00:0000562A E299            	  5466:                 ror.l #$1,d1
00:0000562C 51CEFFCC        	  5467:                 dbf d6,ADDX_OUTER1
00:00005630 E29A            	  5468:                 ror.l #$1,d2
00:00005632 223C8167E123    	  5469:                 move.l #$8167E123,d1       * Initial Data-Y
00:00005638 7C1E            	  5470:                 move.l #$0000001E,d6       * Inner loop counter
00:0000563A 51CFFFBE        	  5471:                 dbf d7,ADDX_OUTER1
                            	  5472: 
00:0000563E 0C844E96A4D9    	  5473:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:00005644 66FE            	  5474:                 bne.s *
00:00005646 0C85000085CD    	  5475:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:0000564C 66FE            	  5476:                 bne.s *
                            	  5477: 
                            	  5478: 
                            	  5479: 
                            	  5480: *     -(An),-(An)
                            	  5481: 
00:0000564E 7000            	  5482:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00005650 7200            	  5483:                 moveq  #$00000000,d1
00:00005652 7400            	  5484:                 moveq  #$00000000,d2
00:00005654 307C0100        	  5485:                 move.l #$00000100,a0       * Address for Data-X
00:00005658 327C0200        	  5486:                 move.l #$00000200,a1       * Address for Data-Y
00:0000565C 20FC11FF5580    	  5487:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00005662 20FC1111FFFF    	  5488:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00005668 20FC33333333    	  5489:                 move.l #$33333333,(a0)+   * Populate test data
00:0000566E 20FC44444444    	  5490:                 move.l #$44444444,(a0)+   * Populate test data
00:00005674 22FC80FF337F    	  5491:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000567A 22FCFFFF1111    	  5492:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00005680 22FC33333333    	  5493:                 move.l #$33333333,(a1)+   * Populate test data
00:00005686 22FC44444444    	  5494:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5495: 
                            	  5496: 
00:0000568C 7C0F            	  5497:                 move.l #$0000000F,d6       * Loop counter
                            	  5498: 
00:0000568E D308            	  5499: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:00005690 40C3            	  5500:                 move.w sr,d3
00:00005692 02830000000F    	  5501:                 andi.l #$0F,d3            * Isolate flags
00:00005698 D083            	  5502:                 add.l d3,d0               * Copy flag results into accumulator
00:0000569A D211            	  5503:                 add.b (a1),d1
00:0000569C 51CEFFF0        	  5504:                 dbf d6,ADDX_LOOP3
                            	  5505: 
                            	  5506: 
00:000056A0 307C0110        	  5507:                 move.l #$00000110,a0       * Address for Data-X
00:000056A4 327C0210        	  5508:                 move.l #$00000210,a1       * Address for Data-Y
00:000056A8 7C07            	  5509:                 moveq  #$00000007,d6       * Loop counter
                            	  5510: 
00:000056AA D348            	  5511: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:000056AC 40C3            	  5512:                 move.w sr,d3
00:000056AE 02830000000F    	  5513:                 andi.l #$0F,d3            * Isolate flags
00:000056B4 D083            	  5514:                 add.l d3,d0               * Copy flag results into accumulator
00:000056B6 D251            	  5515:                 add.w (a1),d1
00:000056B8 51CEFFF0        	  5516:                 dbf d6,ADDX_LOOP4
                            	  5517: 
                            	  5518: 
00:000056BC 307C0110        	  5519:                 move.l #$00000110,a0       * Address for Data-X
00:000056C0 327C0210        	  5520:                 move.l #$00000210,a1       * Address for Data-Y
00:000056C4 7C03            	  5521:                 moveq  #$00000003,d6       * Loop counter
                            	  5522: 
00:000056C6 D388            	  5523: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:000056C8 40C3            	  5524:                 move.w sr,d3
00:000056CA 02830000000F    	  5525:                 andi.l #$0F,d3            * Isolate flags
00:000056D0 D083            	  5526:                 add.l d3,d0               * Copy flag results into accumulator
00:000056D2 D291            	  5527:                 add.l (a1),d1
00:000056D4 51CEFFF0        	  5528:                 dbf d6,ADDX_LOOP5
                            	  5529: 
                            	  5530: 
00:000056D8 0C8000000095    	  5531:                 cmpi.l #$00000095,d0      * Check the flag results
00:000056DE 66FE            	  5532:                 bne.s *
00:000056E0 0C81C812A682    	  5533:                 cmpi.l #$C812A682,d1      * Check the data results
00:000056E6 66FE            	  5534:                 bne.s *
                            	  5535: 
00:000056E8 4E75            	  5536:                 rts
                            	  5537: 
                            	  5538: 
                            	  5539: 
                            	  5540: 
                            	  5541: *-----------------------------------------------------------
                            	  5542: *-----------------------------------------------------------
                            	  5543: * OPCODE : SUBX
                            	  5544: *-----------------------------------------------------------
                            	  5545: *-----------------------------------------------------------
                            	  5546: 
                            	  5547: op_SUBX:
                            	  5548: 
                            	  5549: 
                            	  5550: *  * Register to Register
00:000056EA 203CA5A5A5A5    	  5551:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000056F0 223C8167E123    	  5552:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000056F6 243CA5A5A5A5    	  5553:                 move.l #$a5a5a5a5,d2
00:000056FC 7600            	  5554:                 moveq  #$00000000,d3
00:000056FE 7800            	  5555:                 moveq  #$00000000,d4       * Cumulative data results
00:00005700 7A00            	  5556:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005702 7C1E            	  5557:                 move.l #$0000001E,d6       * Inner loop counter
00:00005704 7E1E            	  5558:                 move.l #$0000001E,d7       * Outer loop counter
00:00005706 307C0100        	  5559:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5560: 
                            	  5561: 
                            	  5562: SUBX_OUTER1:
                            	  5563: 
                            	  5564: *     BYTE
00:0000570A 2002            	  5565:                 move.l d2,d0
00:0000570C 9101            	  5566:                 subx.b d1,d0
00:0000570E 40C3            	  5567:                 move.w sr,d3
00:00005710 02830000001F    	  5568:                 andi.l #$1F,d3            * Isolate flags
00:00005716 DA83            	  5569:                 add.l d3,d5               * Copy flag results into accumulator
00:00005718 D880            	  5570:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5571: 
                            	  5572: *     WORD
00:0000571A 2002            	  5573:                 move.l d2,d0
00:0000571C 9141            	  5574:                 subx.w d1,d0
00:0000571E 40C3            	  5575:                 move.w sr,d3
00:00005720 02830000001F    	  5576:                 andi.l #$1F,d3            * Isolate flags
00:00005726 DA83            	  5577:                 add.l d3,d5               * Copy flag results into accumulator
00:00005728 D880            	  5578:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5579: 
                            	  5580: *     LONG
00:0000572A 2002            	  5581:                 move.l d2,d0
00:0000572C 9181            	  5582:                 subx.l d1,d0
00:0000572E 40C3            	  5583:                 move.w sr,d3
00:00005730 02830000001F    	  5584:                 andi.l #$1F,d3            * Isolate flags
00:00005736 DA83            	  5585:                 add.l d3,d5               * Copy flag results into accumulator
00:00005738 D880            	  5586:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5587: 
00:0000573A E299            	  5588:                 ror.l #$1,d1
00:0000573C 51CEFFCC        	  5589:                 dbf d6,SUBX_OUTER1
00:00005740 E29A            	  5590:                 ror.l #$1,d2
00:00005742 223C8167E123    	  5591:                 move.l #$8167E123,d1       * Initial Data-Y
00:00005748 7C1E            	  5592:                 move.l #$0000001E,d6       * Inner loop counter
00:0000574A 51CFFFBE        	  5593:                 dbf d7,SUBX_OUTER1
                            	  5594: 
00:0000574E 0C84FCAA913E    	  5595:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:00005754 66FE            	  5596:                 bne.s *
00:00005756 0C8500007E89    	  5597:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:0000575C 66FE            	  5598:                 bne.s *
                            	  5599: 
                            	  5600: 
                            	  5601: 
                            	  5602: *     -(An),-(An)
                            	  5603: 
00:0000575E 7000            	  5604:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00005760 7200            	  5605:                 moveq  #$00000000,d1
00:00005762 7400            	  5606:                 moveq  #$00000000,d2
00:00005764 307C0100        	  5607:                 move.l #$00000100,a0       * Address for Data-X
00:00005768 327C0200        	  5608:                 move.l #$00000200,a1       * Address for Data-Y
00:0000576C 20FC11FF5580    	  5609:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00005772 20FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00005778 20FC80FF337F    	  5611:                 move.l #$80FF337F,(a0)+   * Populate test data
00:0000577E 20FC44444444    	  5612:                 move.l #$44444444,(a0)+   * Populate test data
00:00005784 22FC80FF337F    	  5613:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000578A 22FC1111FFFF    	  5614:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:00005790 22FC33333333    	  5615:                 move.l #$33333333,(a1)+   * Populate test data
00:00005796 22FC5580EECC    	  5616:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5617: 
                            	  5618: 
00:0000579C 7C0F            	  5619:                 move.l #$0000000F,d6       * Loop counter
                            	  5620: 
00:0000579E 9308            	  5621: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:000057A0 40C3            	  5622:                 move.w sr,d3
00:000057A2 02830000000F    	  5623:                 andi.l #$0F,d3            * Isolate flags
00:000057A8 D083            	  5624:                 add.l d3,d0               * Copy flag results into accumulator
00:000057AA D211            	  5625:                 add.b (a1),d1
00:000057AC 51CEFFF0        	  5626:                 dbf d6,SUBX_LOOP3
                            	  5627: 
                            	  5628: 
00:000057B0 307C0110        	  5629:                 move.l #$00000110,a0       * Address for Data-X
00:000057B4 327C0210        	  5630:                 move.l #$00000210,a1       * Address for Data-Y
00:000057B8 7C07            	  5631:                 moveq  #$00000007,d6       * Loop counter
                            	  5632: 
00:000057BA 9348            	  5633: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:000057BC 40C3            	  5634:                 move.w sr,d3
00:000057BE 02830000000F    	  5635:                 andi.l #$0F,d3            * Isolate flags
00:000057C4 D083            	  5636:                 add.l d3,d0               * Copy flag results into accumulator
00:000057C6 D251            	  5637:                 add.w (a1),d1
00:000057C8 51CEFFF0        	  5638:                 dbf d6,SUBX_LOOP4
                            	  5639: 
                            	  5640: 
00:000057CC 307C0110        	  5641:                 move.l #$00000110,a0       * Address for Data-X
00:000057D0 327C0210        	  5642:                 move.l #$00000210,a1       * Address for Data-Y
00:000057D4 7C03            	  5643:                 moveq  #$00000003,d6       * Loop counter
                            	  5644: 
00:000057D6 9388            	  5645: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:000057D8 40C3            	  5646:                 move.w sr,d3
00:000057DA 02830000000F    	  5647:                 andi.l #$0F,d3            * Isolate flags
00:000057E0 D083            	  5648:                 add.l d3,d0               * Copy flag results into accumulator
00:000057E2 D291            	  5649:                 add.l (a1),d1
00:000057E4 51CEFFF0        	  5650:                 dbf d6,SUBX_LOOP5
                            	  5651: 
                            	  5652: 
00:000057E8 0C80000000B1    	  5653:                 cmpi.l #$000000B1,d0      * Check the flag results
00:000057EE 66FE            	  5654:                 bne.s *
00:000057F0 0C8162C6F417    	  5655:                 cmpi.l #$62C6F417,d1      * Check the data results
00:000057F6 66FE            	  5656:                 bne.s *
                            	  5657: 
00:000057F8 4E75            	  5658:                 rts
                            	  5659: 
                            	  5660: 
                            	  5661: *-----------------------------------------------------------
                            	  5662: *-----------------------------------------------------------
                            	  5663: * OPCODE : MULU
                            	  5664: *-----------------------------------------------------------
                            	  5665: *-----------------------------------------------------------
                            	  5666: 
                            	  5667: op_MULU:
                            	  5668: 
00:000057FA 203CFE805501    	  5669:                 move.l #$FE805501,d0        * Initial
00:00005800 223C5697EDB6    	  5670:                 move.l #$5697EDB6,d1        * Initial Y
00:00005806 243CFE805501    	  5671:                 move.l #$FE805501,d2
00:0000580C 7600            	  5672:                 moveq  #$00000000,d3
00:0000580E 7800            	  5673:                 moveq  #$00000000,d4        * Cumulative data results
00:00005810 7A00            	  5674:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005812 7C0E            	  5675:                 move.l #$0000000E,d6       * Inner loop counter
00:00005814 7E0E            	  5676:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5677: 
                            	  5678: 
00:00005816 C0C1            	  5679: MULU_OUTER1:    mulu d1,d0
00:00005818 40C3            	  5680:                 move.w sr,d3
00:0000581A 02830000000C    	  5681:                 andi.l #$0C,d3            * Isolate flags
00:00005820 DA83            	  5682:                 add.l d3,d5               * Copy flag results into accumulator
00:00005822 D880            	  5683:                 add.l d0,d4               * Copy data results into data accumulator
00:00005824 E299            	  5684:                 ror.l #$1,d1
                            	  5685: 
00:00005826 51CEFFEE        	  5686:                 dbf d6,MULU_OUTER1
00:0000582A E29A            	  5687:                 ror.l #$1,d2
00:0000582C 2002            	  5688:                 move.l d2,d0
00:0000582E 7C0E            	  5689:                 move.l #$0000000E,d6       * Inner loop counter
00:00005830 51CFFFE4        	  5690:                 dbf d7,MULU_OUTER1
                            	  5691: 
00:00005834 0C8476FB988C    	  5692:                 cmpi.l #$76FB988C,d4      * Check the data results
00:0000583A 66FE            	  5693:                 bne.s *
                            	  5694: 
00:0000583C 0C8500000170    	  5695:                 cmpi.l #$00000170,d5      * Check the Flag results
00:00005842 66FE            	  5696:                 bne.s *
                            	  5697: 
                            	  5698: 
00:00005844 4E75            	  5699:                 rts
                            	  5700: 
                            	  5701: 
                            	  5702: *-----------------------------------------------------------
                            	  5703: *-----------------------------------------------------------
                            	  5704: * OPCODE : MULS
                            	  5705: *-----------------------------------------------------------
                            	  5706: *-----------------------------------------------------------
                            	  5707: 
                            	  5708: op_MULS:
                            	  5709: 
00:00005846 203CFE805501    	  5710:                 move.l #$FE805501,d0        * Initial
00:0000584C 223C5697EDB6    	  5711:                 move.l #$5697EDB6,d1        * Initial Y
00:00005852 243CFE805501    	  5712:                 move.l #$FE805501,d2
00:00005858 7600            	  5713:                 moveq  #$00000000,d3
00:0000585A 7800            	  5714:                 moveq  #$00000000,d4        * Cumulative data results
00:0000585C 7A00            	  5715:                 moveq  #$00000000,d5       * Cumulative flag results
00:0000585E 7C0E            	  5716:                 move.l #$0000000E,d6       * Inner loop counter
00:00005860 7E0E            	  5717:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5718: 
                            	  5719: 
00:00005862 C1C1            	  5720: MULS_OUTER1:    muls d1,d0
00:00005864 40C3            	  5721:                 move.w sr,d3
00:00005866 02830000000C    	  5722:                 andi.l #$0C,d3            * Isolate flags
00:0000586C DA83            	  5723:                 add.l d3,d5               * Copy flag results into accumulator
00:0000586E D880            	  5724:                 add.l d0,d4               * Copy data results into data accumulator
00:00005870 E299            	  5725:                 ror.l #$1,d1
                            	  5726: 
00:00005872 51CEFFEE        	  5727:                 dbf d6,MULS_OUTER1
00:00005876 E29A            	  5728:                 ror.l #$1,d2
00:00005878 2002            	  5729:                 move.l d2,d0
00:0000587A 7C0E            	  5730:                 move.l #$0000000E,d6       * Inner loop counter
00:0000587C 51CFFFE4        	  5731:                 dbf d7,MULS_OUTER1
                            	  5732: 
00:00005880 0C84D4E2988C    	  5733:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:00005886 66FE            	  5734:                 bne.s *
                            	  5735: 
00:00005888 0C85000003E0    	  5736:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:0000588E 66FE            	  5737:                 bne.s *
                            	  5738: 
                            	  5739: 
00:00005890 4E75            	  5740:                 rts
                            	  5741: 
                            	  5742: 
                            	  5743: 
                            	  5744: *-----------------------------------------------------------
                            	  5745: *-----------------------------------------------------------
                            	  5746: * OPCODE : EXG
                            	  5747: *-----------------------------------------------------------
                            	  5748: *-----------------------------------------------------------
                            	  5749: 
                            	  5750: op_EXG:
00:00005892 223CD1D1D1D1    	  5751:                 move.l #$d1d1d1d1,d1
00:00005898 243CD2D2D2D2    	  5752:                 move.l #$d2d2d2d2,d2
00:0000589E 263CD3D3D3D3    	  5753:                 move.l #$d3d3d3d3,d3
00:000058A4 227CA1A1A1A1    	  5754:                 move.l #$a1a1a1a1,a1
00:000058AA 247CA2A2A2A2    	  5755:                 move.l #$a2a2a2a2,a2
00:000058B0 267CA3A3A3A3    	  5756:                 move.l #$a3a3a3a3,a3
                            	  5757: 
00:000058B6 C342            	  5758:                 exg d1,d2
00:000058B8 C34A            	  5759:                 exg a1,a2
00:000058BA C78B            	  5760:                 exg d3,a3
                            	  5761: 
00:000058BC 0C81D2D2D2D2    	  5762:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:000058C2 66FE            	  5763:                 bne.s *
00:000058C4 0C82D1D1D1D1    	  5764:                 cmpi.l #$d1d1d1d1,d2
00:000058CA 66FE            	  5765:                 bne.s *
00:000058CC 0C83A3A3A3A3    	  5766:                 cmpi.l #$a3a3a3a3,d3
00:000058D2 66FE            	  5767:                 bne.s *
                            	  5768: 
00:000058D4 2209            	  5769:                 move.l a1,d1
00:000058D6 240A            	  5770:                 move.l a2,d2
00:000058D8 260B            	  5771:                 move.l a3,d3
                            	  5772: 
00:000058DA 0C81A2A2A2A2    	  5773:                 cmpi.l #$a2a2a2a2,d1
00:000058E0 66FE            	  5774:                 bne.s *
00:000058E2 0C82A1A1A1A1    	  5775:                 cmpi.l #$a1a1a1a1,d2
00:000058E8 66FE            	  5776:                 bne.s *
00:000058EA 0C83D3D3D3D3    	  5777:                 cmpi.l #$d3d3d3d3,d3
00:000058F0 66FE            	  5778:                 bne.s *
                            	  5779: 
00:000058F2 4E75            	  5780:                 rts
                            	  5781: 
                            	  5782: 
                            	  5783: *-----------------------------------------------------------
                            	  5784: *-----------------------------------------------------------
                            	  5785: * OPCODE : ROx
                            	  5786: *-----------------------------------------------------------
                            	  5787: *-----------------------------------------------------------
                            	  5788: 
                            	  5789: *     Subroutine to check and accumulate the flags
00:000058F4 40C3            	  5790: ROx_FLAGS:      move.w sr,d3
00:000058F6 02830000000F    	  5791:                 andi.l #$0F,d3            * Isolate flags
00:000058FC DA83            	  5792:                 add.l d3,d5               * Copy flag results into accumulator
00:000058FE 4E75            	  5793:                 rts
                            	  5794: 
                            	  5795: op_ROx:
                            	  5796: 
                            	  5797: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5798: 
                            	  5799: *        BYTE LEFT
00:00005900 203C80018FF1    	  5800:                 move.l #$80018FF1,d0
00:00005906 7A00            	  5801:                 moveq  #$00000000,d5
00:00005908 7C11            	  5802:                 moveq  #$00000011,d6
                            	  5803: ROx_LOOP1:
00:0000590A ED38            	  5804:                 rol.b d6,d0
00:0000590C 61E6            	  5805:                 bsr ROx_FLAGS
00:0000590E 51CEFFFA        	  5806:                 dbf d6,ROx_LOOP1
00:00005912 0C8080018FE3    	  5807:                 cmpi.l #$80018FE3,d0
00:00005918 66FE            	  5808:                 bne.s *
00:0000591A 0C850000006B    	  5809:                 cmpi.l #$0000006B,d5
00:00005920 66FE            	  5810:                 bne.s *
                            	  5811: 
                            	  5812: *        BYTE RIGHT
00:00005922 203C80018FF1    	  5813:                 move.l #$80018FF1,d0
00:00005928 7C12            	  5814:                 moveq  #$00000012,d6
                            	  5815: ROx_LOOP2:
00:0000592A EC38            	  5816:                 ror.b d6,d0
00:0000592C 61C6            	  5817:                 bsr ROx_FLAGS
00:0000592E 51CEFFFA        	  5818:                 dbf d6,ROx_LOOP2
00:00005932 0C8080018F3E    	  5819:                 cmpi.l #$80018F3E,d0
00:00005938 66FE            	  5820:                 bne.s *
00:0000593A 0C85000000C5    	  5821:                 cmpi.l #$000000C5,d5
00:00005940 66FE            	  5822:                 bne.s *
                            	  5823: 
                            	  5824: 
                            	  5825: *        WORD LEFT
00:00005942 203C80018FF1    	  5826:                 move.l #$80018FF1,d0
00:00005948 7C13            	  5827:                 moveq  #$00000013,d6
                            	  5828: ROx_LOOP3:
00:0000594A ED78            	  5829:                 rol.w d6,d0
00:0000594C 61A6            	  5830:                 bsr ROx_FLAGS
00:0000594E 51CEFFFA        	  5831:                 dbf d6,ROx_LOOP3
00:00005952 0C80800163FC    	  5832:                 cmpi.l #$800163FC,d0
00:00005958 66FE            	  5833:                 bne.s *
00:0000595A 0C8500000131    	  5834:                 cmpi.l #$00000131,d5
00:00005960 66FE            	  5835:                 bne.s *
                            	  5836: 
                            	  5837: *        WORD RIGHT
00:00005962 203C80018FF1    	  5838:                 move.l #$80018FF1,d0
00:00005968 7C1E            	  5839:                 move.l #$0000001E,d6
                            	  5840: ROx_LOOP4:
00:0000596A EC78            	  5841:                 ror.w d6,d0
00:0000596C 6186            	  5842:                 bsr ROx_FLAGS
00:0000596E 51CEFFFA        	  5843:                 dbf d6,ROx_LOOP4
00:00005972 0C808001C7F8    	  5844:                 cmpi.l #$8001C7F8,d0
00:00005978 66FE            	  5845:                 bne.s *
00:0000597A 0C85000001DB    	  5846:                 cmpi.l #$000001DB,d5
00:00005980 66FE            	  5847:                 bne.s *
                            	  5848: 
                            	  5849: 
                            	  5850: *        LONG LEFT
00:00005982 203C80018FF1    	  5851:                 move.l #$80018FF1,d0
00:00005988 7C15            	  5852:                 moveq  #$00000015,d6
                            	  5853: ROx_LOOP5:
00:0000598A EDB8            	  5854:                 rol.l d6,d0
00:0000598C 6100FF66        	  5855:                 bsr ROx_FLAGS
00:00005990 51CEFFF8        	  5856:                 dbf d6,ROx_LOOP5
00:00005994 0C8000C7F8C0    	  5857:                 cmpi.l #$00C7F8C0,d0
00:0000599A 66FE            	  5858:                 bne.s *
00:0000599C 0C850000021A    	  5859:                 cmpi.l #$0000021A,d5
00:000059A2 66FE            	  5860:                 bne.s *
                            	  5861: 
                            	  5862: *        LONG RIGHT
00:000059A4 203C80018FF1    	  5863:                 move.l #$80018FF1,d0
00:000059AA 7C16            	  5864:                 moveq  #$00000016,d6
                            	  5865: ROx_LOOP6:
00:000059AC ECB8            	  5866:                 ror.l d6,d0
00:000059AE 6100FF44        	  5867:                 bsr ROx_FLAGS
00:000059B2 51CEFFF8        	  5868:                 dbf d6,ROx_LOOP6
00:000059B6 0C80000C7F8C    	  5869:                 cmpi.l #$000C7F8C,d0
00:000059BC 66FE            	  5870:                 bne.s *
00:000059BE 0C8500000250    	  5871:                 cmpi.l #$00000250,d5
00:000059C4 66FE            	  5872:                 bne.s *
                            	  5873: 
                            	  5874: 
                            	  5875: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5876: 
00:000059C6 203C80018FF1    	  5877:                 move.l #$80018FF1,d0
00:000059CC 7A00            	  5878:                 moveq  #$00000000,d5
                            	  5879: 
                            	  5880: *        BYTE LEFT
00:000059CE E318            	  5881:                 rol.b #1,d0
00:000059D0 6100FF22        	  5882:                 bsr ROx_FLAGS
00:000059D4 EB18            	  5883:                 rol.b #5,d0
00:000059D6 6100FF1C        	  5884:                 bsr ROx_FLAGS
00:000059DA EF18            	  5885:                 rol.b #7,d0
00:000059DC 6100FF16        	  5886:                 bsr ROx_FLAGS
00:000059E0 E118            	  5887:                 rol.b #8,d0
00:000059E2 6100FF10        	  5888:                 bsr ROx_FLAGS
00:000059E6 0C8080018F3E    	  5889:                 cmpi.l #$80018F3E,d0
00:000059EC 66FE            	  5890:                 bne.s *
00:000059EE 0C8500000009    	  5891:                 cmpi.l #$00000009,d5
00:000059F4 66FE            	  5892:                 bne.s *
                            	  5893: 
                            	  5894: *        BYTE RIGHT
00:000059F6 E218            	  5895:                 ror.b #1,d0
00:000059F8 6100FEFA        	  5896:                 bsr ROx_FLAGS
00:000059FC EA18            	  5897:                 ror.b #5,d0
00:000059FE 6100FEF4        	  5898:                 bsr ROx_FLAGS
00:00005A02 EE18            	  5899:                 ror.b #7,d0
00:00005A04 6100FEEE        	  5900:                 bsr ROx_FLAGS
00:00005A08 E018            	  5901:                 ror.b #8,d0
00:00005A0A 6100FEE8        	  5902:                 bsr ROx_FLAGS
00:00005A0E 0C8080018FF1    	  5903:                 cmpi.l #$80018FF1,d0
00:00005A14 66FE            	  5904:                 bne.s *
00:00005A16 0C8500000024    	  5905:                 cmpi.l #$00000024,d5
00:00005A1C 66FE            	  5906:                 bne.s *
                            	  5907: 
                            	  5908: *        WORD LEFT
00:00005A1E E358            	  5909:                 rol.w #1,d0
00:00005A20 6100FED2        	  5910:                 bsr ROx_FLAGS
00:00005A24 EB58            	  5911:                 rol.w #5,d0
00:00005A26 6100FECC        	  5912:                 bsr ROx_FLAGS
00:00005A2A EF58            	  5913:                 rol.w #7,d0
00:00005A2C 6100FEC6        	  5914:                 bsr ROx_FLAGS
00:00005A30 E158            	  5915:                 rol.w #8,d0
00:00005A32 6100FEC0        	  5916:                 bsr ROx_FLAGS
00:00005A36 0C808001FE31    	  5917:                 cmpi.l #$8001FE31,d0
00:00005A3C 66FE            	  5918:                 bne.s *
00:00005A3E 0C8500000037    	  5919:                 cmpi.l #$00000037,d5
00:00005A44 66FE            	  5920:                 bne.s *
                            	  5921: 
                            	  5922: *        WORD RIGHT
00:00005A46 E258            	  5923:                 ror.w #1,d0
00:00005A48 6100FEAA        	  5924:                 bsr ROx_FLAGS
00:00005A4C EA58            	  5925:                 ror.w #5,d0
00:00005A4E 6100FEA4        	  5926:                 bsr ROx_FLAGS
00:00005A52 EE58            	  5927:                 ror.w #7,d0
00:00005A54 6100FE9E        	  5928:                 bsr ROx_FLAGS
00:00005A58 E058            	  5929:                 ror.w #8,d0
00:00005A5A 6100FE98        	  5930:                 bsr ROx_FLAGS
00:00005A5E 0C8080018FF1    	  5931:                 cmpi.l #$80018FF1,d0
00:00005A64 66FE            	  5932:                 bne.s *
00:00005A66 0C850000005B    	  5933:                 cmpi.l #$0000005B,d5
00:00005A6C 66FE            	  5934:                 bne.s *
                            	  5935: 
                            	  5936: *        LONG LEFT
00:00005A6E E398            	  5937:                 rol.l #1,d0
00:00005A70 6100FE82        	  5938:                 bsr ROx_FLAGS
00:00005A74 EB98            	  5939:                 rol.l #5,d0
00:00005A76 6100FE7C        	  5940:                 bsr ROx_FLAGS
00:00005A7A EF98            	  5941:                 rol.l #7,d0
00:00005A7C 6100FE76        	  5942:                 bsr ROx_FLAGS
00:00005A80 E198            	  5943:                 rol.l #8,d0
00:00005A82 6100FE70        	  5944:                 bsr ROx_FLAGS
00:00005A86 0C80FE300031    	  5945:                 cmpi.l #$FE300031,d0
00:00005A8C 66FE            	  5946:                 bne.s *
00:00005A8E 0C8500000065    	  5947:                 cmpi.l #$00000065,d5
00:00005A94 66FE            	  5948:                 bne.s *
                            	  5949: 
                            	  5950: *        LONG RIGHT
00:00005A96 E298            	  5951:                 ror.l #1,d0
00:00005A98 6100FE5A        	  5952:                 bsr ROx_FLAGS
00:00005A9C EA98            	  5953:                 ror.l #5,d0
00:00005A9E 6100FE54        	  5954:                 bsr ROx_FLAGS
00:00005AA2 EE98            	  5955:                 ror.l #7,d0
00:00005AA4 6100FE4E        	  5956:                 bsr ROx_FLAGS
00:00005AA8 E098            	  5957:                 ror.l #8,d0
00:00005AAA 6100FE48        	  5958:                 bsr ROx_FLAGS
00:00005AAE 0C8080018FF1    	  5959:                 cmpi.l #$80018FF1,d0
00:00005AB4 66FE            	  5960:                 bne.s *
00:00005AB6 0C8500000080    	  5961:                 cmpi.l #$00000080,d5
00:00005ABC 66FE            	  5962:                 bne.s *
                            	  5963: 
                            	  5964: 
                            	  5965: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5966: 
00:00005ABE 7A00            	  5967:                 moveq  #$00000000,d5
00:00005AC0 307C0100        	  5968:                 move.l #$00000100,a0
00:00005AC4 30BC8FF1        	  5969:                 move.w #$8FF1,(a0)
                            	  5970: 
                            	  5971: *        WORD LEFT
00:00005AC8 E7D0            	  5972:                 rol (a0)
00:00005ACA 6100FE28        	  5973:                 bsr ROx_FLAGS
00:00005ACE E7D0            	  5974:                 rol (a0)
00:00005AD0 6100FE22        	  5975:                 bsr ROx_FLAGS
00:00005AD4 E7D0            	  5976:                 rol (a0)
00:00005AD6 6100FE1C        	  5977:                 bsr ROx_FLAGS
00:00005ADA E7D0            	  5978:                 rol (a0)
00:00005ADC 6100FE16        	  5979:                 bsr ROx_FLAGS
00:00005AE0 3010            	  5980:                 move.w (a0),d0
00:00005AE2 0C808001FF18    	  5981:                 cmpi.l #$8001FF18,d0
00:00005AE8 66FE            	  5982:                 bne.s *
00:00005AEA 0C8500000009    	  5983:                 cmpi.l #$00000009,d5
00:00005AF0 66FE            	  5984:                 bne.s *
                            	  5985: 
                            	  5986: *        WORD RIGHT
00:00005AF2 E6D0            	  5987:                 ror (a0)
00:00005AF4 6100FDFE        	  5988:                 bsr ROx_FLAGS
00:00005AF8 E6D0            	  5989:                 ror (a0)
00:00005AFA 6100FDF8        	  5990:                 bsr ROx_FLAGS
00:00005AFE E6D0            	  5991:                 ror (a0)
00:00005B00 6100FDF2        	  5992:                 bsr ROx_FLAGS
00:00005B04 E6D0            	  5993:                 ror (a0)
00:00005B06 6100FDEC        	  5994:                 bsr ROx_FLAGS
00:00005B0A E6D0            	  5995:                 ror (a0)
00:00005B0C 6100FDE6        	  5996:                 bsr ROx_FLAGS
00:00005B10 E6D0            	  5997:                 ror (a0)
00:00005B12 6100FDE0        	  5998:                 bsr ROx_FLAGS
00:00005B16 3010            	  5999:                 move.w (a0),d0
00:00005B18 0C80800163FC    	  6000:                 cmpi.l #$800163FC,d0
00:00005B1E 66FE            	  6001:                 bne.s *
00:00005B20 0C850000001B    	  6002:                 cmpi.l #$0000001B,d5
00:00005B26 66FE            	  6003:                 bne.s *
                            	  6004: 
00:00005B28 4E75            	  6005:                 rts
                            	  6006: 
                            	  6007: 
                            	  6008: 
                            	  6009: *-----------------------------------------------------------
                            	  6010: *-----------------------------------------------------------
                            	  6011: * OPCODE : ROXx
                            	  6012: *-----------------------------------------------------------
                            	  6013: *-----------------------------------------------------------
                            	  6014: 
                            	  6015: *     Subroutine to check and accumulate the flags
00:00005B2A 40C3            	  6016: ROXx_FLAGS:     move.w sr,d3
00:00005B2C 02830000000F    	  6017:                 andi.l #$0F,d3            * Isolate flags
00:00005B32 DA83            	  6018:                 add.l d3,d5               * Copy flag results into accumulator
00:00005B34 4E75            	  6019:                 rts
                            	  6020: 
                            	  6021: op_ROXx:
                            	  6022: 
                            	  6023: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6024: 
                            	  6025: *        BYTE LEFT
00:00005B36 203C80018FF1    	  6026:                 move.l #$80018FF1,d0
00:00005B3C 7A00            	  6027:                 moveq  #$00000000,d5
00:00005B3E 7C11            	  6028:                 moveq  #$00000011,d6
                            	  6029: ROXx_LOOP1:
00:00005B40 ED30            	  6030:                 roxl.b d6,d0
00:00005B42 61E6            	  6031:                 bsr ROXx_FLAGS
00:00005B44 51CEFFFA        	  6032:                 dbf d6,ROXx_LOOP1
00:00005B48 0C8080018FD0    	  6033:                 cmpi.l #$80018FD0,d0
00:00005B4E 66FE            	  6034:                 bne.s *
00:00005B50 0C8500000042    	  6035:                 cmpi.l #$00000042,d5
00:00005B56 66FE            	  6036:                 bne.s *
                            	  6037: 
                            	  6038: *        BYTE RIGHT
00:00005B58 203C80018FF1    	  6039:                 move.l #$80018FF1,d0
00:00005B5E 7C12            	  6040:                 moveq  #$00000012,d6
                            	  6041: ROXx_LOOP2:
00:00005B60 EC30            	  6042:                 roxr.b d6,d0
00:00005B62 61C6            	  6043:                 bsr ROXx_FLAGS
00:00005B64 51CEFFFA        	  6044:                 dbf d6,ROXx_LOOP2
00:00005B68 0C8080018F51    	  6045:                 cmpi.l #$80018F51,d0
00:00005B6E 66FE            	  6046:                 bne.s *
00:00005B70 0C850000009C    	  6047:                 cmpi.l #$0000009C,d5
00:00005B76 66FE            	  6048:                 bne.s *
                            	  6049: 
                            	  6050: 
                            	  6051: *        WORD LEFT
00:00005B78 203C80018FF1    	  6052:                 move.l #$80018FF1,d0
00:00005B7E 7C13            	  6053:                 moveq  #$00000013,d6
                            	  6054: ROXx_LOOP3:
00:00005B80 ED70            	  6055:                 roxl.w d6,d0
00:00005B82 61A6            	  6056:                 bsr ROXx_FLAGS
00:00005B84 51CEFFFA        	  6057:                 dbf d6,ROXx_LOOP3
00:00005B88 0C8080013980    	  6058:                 cmpi.l #$80013980,d0
00:00005B8E 66FE            	  6059:                 bne.s *
00:00005B90 0C85000000C9    	  6060:                 cmpi.l #$000000C9,d5
00:00005B96 66FE            	  6061:                 bne.s *
                            	  6062: 
                            	  6063: *        WORD RIGHT
00:00005B98 203C80018FF1    	  6064:                 move.l #$80018FF1,d0
00:00005B9E 7C1E            	  6065:                 move.l #$0000001E,d6
                            	  6066: ROXx_LOOP4:
00:00005BA0 EC70            	  6067:                 roxr.w d6,d0
00:00005BA2 6186            	  6068:                 bsr ROXx_FLAGS
00:00005BA4 51CEFFFA        	  6069:                 dbf d6,ROXx_LOOP4
00:00005BA8 0C8080010A1D    	  6070:                 cmpi.l #$80010A1D,d0
00:00005BAE 66FE            	  6071:                 bne.s *
00:00005BB0 0C850000014D    	  6072:                 cmpi.l #$0000014D,d5
00:00005BB6 66FE            	  6073:                 bne.s *
                            	  6074: 
                            	  6075: 
                            	  6076: *        LONG LEFT
00:00005BB8 203C80018FF1    	  6077:                 move.l #$80018FF1,d0
00:00005BBE 7C15            	  6078:                 moveq  #$00000015,d6
                            	  6079: ROXx_LOOP5:
00:00005BC0 EDB0            	  6080:                 roxl.l d6,d0
00:00005BC2 6100FF66        	  6081:                 bsr ROXx_FLAGS
00:00005BC6 51CEFFF8        	  6082:                 dbf d6,ROXx_LOOP5
00:00005BCA 0C80800185D0    	  6083:                 cmpi.l #$800185D0,d0
00:00005BD0 66FE            	  6084:                 bne.s *
00:00005BD2 0C85000001A1    	  6085:                 cmpi.l #$000001A1,d5
00:00005BD8 66FE            	  6086:                 bne.s *
                            	  6087: 
                            	  6088: *        LONG RIGHT
00:00005BDA 203C80018FF1    	  6089:                 move.l #$80018FF1,d0
00:00005BE0 7C16            	  6090:                 moveq  #$00000016,d6
                            	  6091: ROXx_LOOP6:
00:00005BE2 ECB0            	  6092:                 roxr.l d6,d0
00:00005BE4 6100FF44        	  6093:                 bsr ROXx_FLAGS
00:00005BE8 51CEFFF8        	  6094:                 dbf d6,ROXx_LOOP6
00:00005BEC 0C80082D8200    	  6095:                 cmpi.l #$082D8200,d0
00:00005BF2 66FE            	  6096:                 bne.s *
00:00005BF4 0C85000001DE    	  6097:                 cmpi.l #$000001DE,d5
00:00005BFA 66FE            	  6098:                 bne.s *
                            	  6099: 
                            	  6100: 
                            	  6101: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6102: 
00:00005BFC 203C80018FF1    	  6103:                 move.l #$80018FF1,d0
00:00005C02 7A00            	  6104:                 moveq  #$00000000,d5
                            	  6105: 
                            	  6106: *        BYTE LEFT
00:00005C04 E310            	  6107:                 roxl.b #1,d0
00:00005C06 6100FF22        	  6108:                 bsr ROXx_FLAGS
00:00005C0A EB10            	  6109:                 roxl.b #5,d0
00:00005C0C 6100FF1C        	  6110:                 bsr ROXx_FLAGS
00:00005C10 EF10            	  6111:                 roxl.b #7,d0
00:00005C12 6100FF16        	  6112:                 bsr ROXx_FLAGS
00:00005C16 E110            	  6113:                 roxl.b #8,d0
00:00005C18 6100FF10        	  6114:                 bsr ROXx_FLAGS
00:00005C1C 0C8080018F09    	  6115:                 cmpi.l #$80018F09,d0
00:00005C22 66FE            	  6116:                 bne.s *
00:00005C24 0C850000000B    	  6117:                 cmpi.l #$0000000B,d5
00:00005C2A 66FE            	  6118:                 bne.s *
                            	  6119: 
                            	  6120: *        BYTE RIGHT
00:00005C2C E210            	  6121:                 roxr.b #1,d0
00:00005C2E 6100FEFA        	  6122:                 bsr ROXx_FLAGS
00:00005C32 EA10            	  6123:                 roxr.b #5,d0
00:00005C34 6100FEF4        	  6124:                 bsr ROXx_FLAGS
00:00005C38 EE10            	  6125:                 roxr.b #7,d0
00:00005C3A 6100FEEE        	  6126:                 bsr ROXx_FLAGS
00:00005C3E E010            	  6127:                 roxr.b #8,d0
00:00005C40 6100FEE8        	  6128:                 bsr ROXx_FLAGS
00:00005C44 0C8080018F00    	  6129:                 cmpi.l #$80018F00,d0
00:00005C4A 66FE            	  6130:                 bne.s *
00:00005C4C 0C8500000015    	  6131:                 cmpi.l #$00000015,d5
00:00005C52 66FE            	  6132:                 bne.s *
                            	  6133: 
                            	  6134: *        WORD LEFT
00:00005C54 E350            	  6135:                 roxl.w #1,d0
00:00005C56 6100FED2        	  6136:                 bsr ROXx_FLAGS
00:00005C5A EB50            	  6137:                 roxl.w #5,d0
00:00005C5C 6100FECC        	  6138:                 bsr ROXx_FLAGS
00:00005C60 EF50            	  6139:                 roxl.w #7,d0
00:00005C62 6100FEC6        	  6140:                 bsr ROXx_FLAGS
00:00005C66 E150            	  6141:                 roxl.w #8,d0
00:00005C68 6100FEC0        	  6142:                 bsr ROXx_FLAGS
00:00005C6C 0C808001B000    	  6143:                 cmpi.l #$8001B000,d0
00:00005C72 66FE            	  6144:                 bne.s *
00:00005C74 0C8500000027    	  6145:                 cmpi.l #$00000027,d5
00:00005C7A 66FE            	  6146:                 bne.s *
                            	  6147: 
                            	  6148: *        WORD RIGHT
00:00005C7C E250            	  6149:                 roxr.w #1,d0
00:00005C7E 6100FEAA        	  6150:                 bsr ROXx_FLAGS
00:00005C82 EA50            	  6151:                 roxr.w #5,d0
00:00005C84 6100FEA4        	  6152:                 bsr ROXx_FLAGS
00:00005C88 EE50            	  6153:                 roxr.w #7,d0
00:00005C8A 6100FE9E        	  6154:                 bsr ROXx_FLAGS
00:00005C8E E050            	  6155:                 roxr.w #8,d0
00:00005C90 6100FE98        	  6156:                 bsr ROXx_FLAGS
00:00005C94 0C8080010A00    	  6157:                 cmpi.l #$80010A00,d0
00:00005C9A 66FE            	  6158:                 bne.s *
00:00005C9C 0C8500000028    	  6159:                 cmpi.l #$00000028,d5
00:00005CA2 66FE            	  6160:                 bne.s *
                            	  6161: 
                            	  6162: *        LONG LEFT
00:00005CA4 E390            	  6163:                 roxl.l #1,d0
00:00005CA6 6100FE82        	  6164:                 bsr ROXx_FLAGS
00:00005CAA EB90            	  6165:                 roxl.l #5,d0
00:00005CAC 6100FE7C        	  6166:                 bsr ROXx_FLAGS
00:00005CB0 EF90            	  6167:                 roxl.l #7,d0
00:00005CB2 6100FE76        	  6168:                 bsr ROXx_FLAGS
00:00005CB6 E190            	  6169:                 roxl.l #8,d0
00:00005CB8 6100FE70        	  6170:                 bsr ROXx_FLAGS
00:00005CBC 0C8040000010    	  6171:                 cmpi.l #$40000010,d0
00:00005CC2 66FE            	  6172:                 bne.s *
00:00005CC4 0C850000002A    	  6173:                 cmpi.l #$0000002A,d5
00:00005CCA 66FE            	  6174:                 bne.s *
                            	  6175: 
                            	  6176: *        LONG RIGHT
00:00005CCC E290            	  6177:                 roxr.l #1,d0
00:00005CCE 6100FE5A        	  6178:                 bsr ROXx_FLAGS
00:00005CD2 EA90            	  6179:                 roxr.l #5,d0
00:00005CD4 6100FE54        	  6180:                 bsr ROXx_FLAGS
00:00005CD8 EE90            	  6181:                 roxr.l #7,d0
00:00005CDA 6100FE4E        	  6182:                 bsr ROXx_FLAGS
00:00005CDE E090            	  6183:                 roxr.l #8,d0
00:00005CE0 6100FE48        	  6184:                 bsr ROXx_FLAGS
00:00005CE4 0C8000010200    	  6185:                 cmpi.l #$00010200,d0
00:00005CEA 66FE            	  6186:                 bne.s *
00:00005CEC 0C8500000032    	  6187:                 cmpi.l #$00000032,d5
00:00005CF2 66FE            	  6188:                 bne.s *
                            	  6189: 
                            	  6190: 
                            	  6191: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6192: 
00:00005CF4 7A00            	  6193:                 moveq  #$00000000,d5
00:00005CF6 307C0100        	  6194:                 move.l #$00000100,a0
00:00005CFA 30BC8FF1        	  6195:                 move.w #$8FF1,(a0)
                            	  6196: 
                            	  6197: *        WORD LEFT
00:00005CFE E5D0            	  6198:                 roxl (a0)
00:00005D00 6100FE28        	  6199:                 bsr ROXx_FLAGS
00:00005D04 E5D0            	  6200:                 roxl (a0)
00:00005D06 6100FE22        	  6201:                 bsr ROXx_FLAGS
00:00005D0A E5D0            	  6202:                 roxl (a0)
00:00005D0C 6100FE1C        	  6203:                 bsr ROXx_FLAGS
00:00005D10 E5D0            	  6204:                 roxl (a0)
00:00005D12 6100FE16        	  6205:                 bsr ROXx_FLAGS
00:00005D16 3010            	  6206:                 move.w (a0),d0
00:00005D18 0C800001FF10    	  6207:                 cmpi.l #$0001FF10,d0
00:00005D1E 66FE            	  6208:                 bne.s *
00:00005D20 0C8500000009    	  6209:                 cmpi.l #$00000009,d5
00:00005D26 66FE            	  6210:                 bne.s *
                            	  6211: 
                            	  6212: *        WORD RIGHT
00:00005D28 E4D0            	  6213:                 roxr (a0)
00:00005D2A 6100FDFE        	  6214:                 bsr ROXx_FLAGS
00:00005D2E E4D0            	  6215:                 roxr (a0)
00:00005D30 6100FDF8        	  6216:                 bsr ROXx_FLAGS
00:00005D34 E4D0            	  6217:                 roxr (a0)
00:00005D36 6100FDF2        	  6218:                 bsr ROXx_FLAGS
00:00005D3A E4D0            	  6219:                 roxr (a0)
00:00005D3C 6100FDEC        	  6220:                 bsr ROXx_FLAGS
00:00005D40 E4D0            	  6221:                 roxr (a0)
00:00005D42 6100FDE6        	  6222:                 bsr ROXx_FLAGS
00:00005D46 E4D0            	  6223:                 roxr (a0)
00:00005D48 6100FDE0        	  6224:                 bsr ROXx_FLAGS
00:00005D4C 3010            	  6225:                 move.w (a0),d0
00:00005D4E 0C80000103FC    	  6226:                 cmpi.l #$000103FC,d0
00:00005D54 66FE            	  6227:                 bne.s *
00:00005D56 0C850000000A    	  6228:                 cmpi.l #$0000000A,d5
00:00005D5C 66FE            	  6229:                 bne.s *
                            	  6230: 
00:00005D5E 4E75            	  6231:                 rts
                            	  6232: 
                            	  6233: 
                            	  6234: 
                            	  6235: 
                            	  6236: *-----------------------------------------------------------
                            	  6237: *-----------------------------------------------------------
                            	  6238: * OPCODE : SHIFTS
                            	  6239: *-----------------------------------------------------------
                            	  6240: *-----------------------------------------------------------
                            	  6241: 
                            	  6242: *     Subroutine to check and accumulate the flags
00:00005D60 40C3            	  6243: SHIFTS_FLAGS:   move.w sr,d3
00:00005D62 02830000000F    	  6244:                 andi.l #$0F,d3            * Isolate flags
00:00005D68 DA83            	  6245:                 add.l d3,d5               * Copy flag results into accumulator
00:00005D6A 4E75            	  6246:                 rts
                            	  6247: 
                            	  6248: op_SHIFTS:
                            	  6249: 
                            	  6250: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6251: 
                            	  6252: *        BYTE LEFT
00:00005D6C 203C80018F81    	  6253:                 move.l #$80018F81,d0
00:00005D72 7A00            	  6254:                 moveq  #$00000000,d5
00:00005D74 7C02            	  6255:                 moveq  #$00000002,d6
                            	  6256: SHIFTS_LOOP1:
00:00005D76 ED20            	  6257:                 asl.b d6,d0
00:00005D78 61E6            	  6258:                 bsr SHIFTS_FLAGS
00:00005D7A 51CEFFFA        	  6259:                 dbf d6,SHIFTS_LOOP1
00:00005D7E 0C8080018F08    	  6260:                 cmpi.l #$80018F08,d0
00:00005D84 66FE            	  6261:                 bne.s *
00:00005D86 0C8500000002    	  6262:                 cmpi.l #$00000002,d5
00:00005D8C 66FE            	  6263:                 bne.s *
                            	  6264: 
                            	  6265: *        BYTE RIGHT
00:00005D8E 203C80018F81    	  6266:                 move.l #$80018F81,d0
00:00005D94 7C02            	  6267:                 moveq  #$00000002,d6
                            	  6268: SHIFTS_LOOP2:
00:00005D96 EC20            	  6269:                 asr.b d6,d0
00:00005D98 61C6            	  6270:                 bsr SHIFTS_FLAGS
00:00005D9A 51CEFFFA        	  6271:                 dbf d6,SHIFTS_LOOP2
00:00005D9E 0C8080018FF0    	  6272:                 cmpi.l #$80018FF0,d0
00:00005DA4 66FE            	  6273:                 bne.s *
00:00005DA6 0C850000001A    	  6274:                 cmpi.l #$0000001A,d5
00:00005DAC 66FE            	  6275:                 bne.s *
                            	  6276: 
                            	  6277: 
                            	  6278: *        WORD LEFT
00:00005DAE 203C80018FF1    	  6279:                 move.l #$80018FF1,d0
00:00005DB4 7C02            	  6280:                 moveq  #$00000002,d6
                            	  6281: SHIFTS_LOOP3:
00:00005DB6 ED60            	  6282:                 asl.w d6,d0
00:00005DB8 61A6            	  6283:                 bsr SHIFTS_FLAGS
00:00005DBA 51CEFFFA        	  6284:                 dbf d6,SHIFTS_LOOP3
00:00005DBE 0C8080017F88    	  6285:                 cmpi.l #$80017F88,d0
00:00005DC4 66FE            	  6286:                 bne.s *
00:00005DC6 0C850000001C    	  6287:                 cmpi.l #$0000001C,d5
00:00005DCC 66FE            	  6288:                 bne.s *
                            	  6289: 
                            	  6290: *        WORD RIGHT
00:00005DCE 203C80018FF1    	  6291:                 move.l #$80018FF1,d0
00:00005DD4 7C02            	  6292:                 moveq  #$00000002,d6
                            	  6293: SHIFTS_LOOP4:
00:00005DD6 EC60            	  6294:                 asr.w d6,d0
00:00005DD8 6186            	  6295:                 bsr SHIFTS_FLAGS
00:00005DDA 51CEFFFA        	  6296:                 dbf d6,SHIFTS_LOOP4
00:00005DDE 0C808001F1FE    	  6297:                 cmpi.l #$8001F1FE,d0
00:00005DE4 66FE            	  6298:                 bne.s *
00:00005DE6 0C8500000034    	  6299:                 cmpi.l #$00000034,d5
00:00005DEC 66FE            	  6300:                 bne.s *
                            	  6301: 
                            	  6302: 
                            	  6303: *        LONG LEFT
00:00005DEE 203C80018FF1    	  6304:                 move.l #$80018FF1,d0
00:00005DF4 7C02            	  6305:                 moveq  #$00000002,d6
                            	  6306: SHIFTS_LOOP5:
00:00005DF6 EDA0            	  6307:                 asl.l d6,d0
00:00005DF8 6100FF66        	  6308:                 bsr SHIFTS_FLAGS
00:00005DFC 51CEFFF8        	  6309:                 dbf d6,SHIFTS_LOOP5
00:00005E00 0C80000C7F88    	  6310:                 cmpi.l #$000C7F88,d0
00:00005E06 66FE            	  6311:                 bne.s *
00:00005E08 0C8500000036    	  6312:                 cmpi.l #$00000036,d5
00:00005E0E 66FE            	  6313:                 bne.s *
                            	  6314: 
                            	  6315: *        LONG RIGHT
00:00005E10 203C80018FF1    	  6316:                 move.l #$80018FF1,d0
00:00005E16 7C02            	  6317:                 moveq  #$00000002,d6
                            	  6318: SHIFTS_LOOP6:
00:00005E18 ECA0            	  6319:                 asr.l d6,d0
00:00005E1A 6100FF44        	  6320:                 bsr SHIFTS_FLAGS
00:00005E1E 51CEFFF8        	  6321:                 dbf d6,SHIFTS_LOOP6
00:00005E22 0C80F00031FE    	  6322:                 cmpi.l #$F00031FE,d0
00:00005E28 66FE            	  6323:                 bne.s *
00:00005E2A 0C850000004E    	  6324:                 cmpi.l #$0000004E,d5
00:00005E30 66FE            	  6325:                 bne.s *
                            	  6326: 
                            	  6327: 
                            	  6328: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6329: 
00:00005E32 203C80018FF1    	  6330:                 move.l #$80018FF1,d0
00:00005E38 7A00            	  6331:                 moveq  #$00000000,d5
                            	  6332: 
                            	  6333: *        BYTE LEFT
00:00005E3A D000            	  6334:                 asl.b #1,d0
00:00005E3C 6100FF22        	  6335:                 bsr SHIFTS_FLAGS
00:00005E40 E500            	  6336:                 asl.b #2,d0
00:00005E42 6100FF1C        	  6337:                 bsr SHIFTS_FLAGS
00:00005E46 D000            	  6338:                 asl.b #1,d0
00:00005E48 6100FF16        	  6339:                 bsr SHIFTS_FLAGS
00:00005E4C E700            	  6340:                 asl.b #3,d0
00:00005E4E 6100FF10        	  6341:                 bsr SHIFTS_FLAGS
00:00005E52 0C8080018F80    	  6342:                 cmpi.l #$80018F80,d0
00:00005E58 66FE            	  6343:                 bne.s *
00:00005E5A 0C850000001F    	  6344:                 cmpi.l #$0000001F,d5
00:00005E60 66FE            	  6345:                 bne.s *
                            	  6346: 
                            	  6347: *        BYTE RIGHT
00:00005E62 E200            	  6348:                 asr.b #1,d0
00:00005E64 6100FEFA        	  6349:                 bsr SHIFTS_FLAGS
00:00005E68 E400            	  6350:                 asr.b #2,d0
00:00005E6A 6100FEF4        	  6351:                 bsr SHIFTS_FLAGS
00:00005E6E E600            	  6352:                 asr.b #3,d0
00:00005E70 6100FEEE        	  6353:                 bsr SHIFTS_FLAGS
00:00005E74 E200            	  6354:                 asr.b #1,d0
00:00005E76 6100FEE8        	  6355:                 bsr SHIFTS_FLAGS
00:00005E7A 0C8080018FFF    	  6356:                 cmpi.l #$80018FFF,d0
00:00005E80 66FE            	  6357:                 bne.s *
00:00005E82 0C850000003F    	  6358:                 cmpi.l #$0000003F,d5
00:00005E88 66FE            	  6359:                 bne.s *
                            	  6360: 
                            	  6361: *        WORD LEFT
00:00005E8A D040            	  6362:                 asl.w #1,d0
00:00005E8C 6100FED2        	  6363:                 bsr SHIFTS_FLAGS
00:00005E90 E540            	  6364:                 asl.w #2,d0
00:00005E92 6100FECC        	  6365:                 bsr SHIFTS_FLAGS
00:00005E96 E740            	  6366:                 asl.w #3,d0
00:00005E98 6100FEC6        	  6367:                 bsr SHIFTS_FLAGS
00:00005E9C EB40            	  6368:                 asl.w #5,d0
00:00005E9E 6100FEC0        	  6369:                 bsr SHIFTS_FLAGS
00:00005EA2 0C808001F800    	  6370:                 cmpi.l #$8001F800,d0
00:00005EA8 66FE            	  6371:                 bne.s *
00:00005EAA 0C8500000056    	  6372:                 cmpi.l #$00000056,d5
00:00005EB0 66FE            	  6373:                 bne.s *
                            	  6374: 
                            	  6375: *        WORD RIGHT
00:00005EB2 EA40            	  6376:                 asr.w #5,d0
00:00005EB4 6100FEAA        	  6377:                 bsr SHIFTS_FLAGS
00:00005EB8 E240            	  6378:                 asr.w #1,d0
00:00005EBA 6100FEA4        	  6379:                 bsr SHIFTS_FLAGS
00:00005EBE E440            	  6380:                 asr.w #2,d0
00:00005EC0 6100FE9E        	  6381:                 bsr SHIFTS_FLAGS
00:00005EC4 E840            	  6382:                 asr.w #4,d0
00:00005EC6 6100FE98        	  6383:                 bsr SHIFTS_FLAGS
00:00005ECA 0C808001FFFF    	  6384:                 cmpi.l #$8001FFFF,d0
00:00005ED0 66FE            	  6385:                 bne.s *
00:00005ED2 0C8500000077    	  6386:                 cmpi.l #$00000077,d5
00:00005ED8 66FE            	  6387:                 bne.s *
                            	  6388: 
                            	  6389: *        LONG LEFT
00:00005EDA 203C80018FF1    	  6390:                 move.l #$80018FF1,d0
00:00005EE0 D080            	  6391:                 asl.l #1,d0
00:00005EE2 6100FE7C        	  6392:                 bsr SHIFTS_FLAGS
00:00005EE6 E580            	  6393:                 asl.l #2,d0
00:00005EE8 6100FE76        	  6394:                 bsr SHIFTS_FLAGS
00:00005EEC EF80            	  6395:                 asl.l #7,d0
00:00005EEE 6100FE70        	  6396:                 bsr SHIFTS_FLAGS
00:00005EF2 E980            	  6397:                 asl.l #4,d0
00:00005EF4 6100FE6A        	  6398:                 bsr SHIFTS_FLAGS
00:00005EF8 0C8063FC4000    	  6399:                 cmpi.l #$63FC4000,d0
00:00005EFE 66FE            	  6400:                 bne.s *
00:00005F00 0C850000007A    	  6401:                 cmpi.l #$0000007A,d5
00:00005F06 66FE            	  6402:                 bne.s *
                            	  6403: 
                            	  6404: *        LONG RIGHT
00:00005F08 203C80018FF1    	  6405:                 move.l #$80018FF1,d0
00:00005F0E E280            	  6406:                 asr.l #1,d0
00:00005F10 6100FE4E        	  6407:                 bsr SHIFTS_FLAGS
00:00005F14 EA80            	  6408:                 asr.l #5,d0
00:00005F16 6100FE48        	  6409:                 bsr SHIFTS_FLAGS
00:00005F1A EE80            	  6410:                 asr.l #7,d0
00:00005F1C 6100FE42        	  6411:                 bsr SHIFTS_FLAGS
00:00005F20 E080            	  6412:                 asr.l #8,d0
00:00005F22 6100FE3C        	  6413:                 bsr SHIFTS_FLAGS
00:00005F26 0C80FFFFFC00    	  6414:                 cmpi.l #$FFFFFC00,d0
00:00005F2C 66FE            	  6415:                 bne.s *
00:00005F2E 0C850000009C    	  6416:                 cmpi.l #$0000009C,d5
00:00005F34 66FE            	  6417:                 bne.s *
                            	  6418: 
                            	  6419: 
                            	  6420: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6421: 
00:00005F36 7A00            	  6422:                 moveq  #$00000000,d5
00:00005F38 307C0100        	  6423:                 move.l #$00000100,a0
00:00005F3C 30BC8FF1        	  6424:                 move.w #$8FF1,(a0)
                            	  6425: 
                            	  6426: *        WORD LEFT
00:00005F40 E1D0            	  6427:                 asl  (a0)
00:00005F42 6100FE1C        	  6428:                 bsr SHIFTS_FLAGS
00:00005F46 E1D0            	  6429:                 asl  (a0)
00:00005F48 6100FE16        	  6430:                 bsr SHIFTS_FLAGS
00:00005F4C E1D0            	  6431:                 asl  (a0)
00:00005F4E 6100FE10        	  6432:                 bsr SHIFTS_FLAGS
00:00005F52 E1D0            	  6433:                 asl  (a0)
00:00005F54 6100FE0A        	  6434:                 bsr SHIFTS_FLAGS
00:00005F58 3010            	  6435:                 move.w (a0),d0
00:00005F5A 0C80FFFFFF10    	  6436:                 cmpi.l #$FFFFFF10,d0
00:00005F60 66FE            	  6437:                 bne.s *
00:00005F62 0C850000000D    	  6438:                 cmpi.l #$0000000D,d5
00:00005F68 66FE            	  6439:                 bne.s *
                            	  6440: 
                            	  6441: *        WORD RIGHT
00:00005F6A E0D0            	  6442:                 asr (a0)
00:00005F6C 6100FDF2        	  6443:                 bsr SHIFTS_FLAGS
00:00005F70 E0D0            	  6444:                 asr (a0)
00:00005F72 6100FDEC        	  6445:                 bsr SHIFTS_FLAGS
00:00005F76 E0D0            	  6446:                 asr (a0)
00:00005F78 6100FDE6        	  6447:                 bsr SHIFTS_FLAGS
00:00005F7C E0D0            	  6448:                 asr (a0)
00:00005F7E 6100FDE0        	  6449:                 bsr SHIFTS_FLAGS
00:00005F82 E0D0            	  6450:                 asr (a0)
00:00005F84 6100FDDA        	  6451:                 bsr SHIFTS_FLAGS
00:00005F88 E0D0            	  6452:                 asr (a0)
00:00005F8A 6100FDD4        	  6453:                 bsr SHIFTS_FLAGS
00:00005F8E 3010            	  6454:                 move.w (a0),d0
00:00005F90 0C80FFFFFFFC    	  6455:                 cmpi.l #$FFFFFFFC,d0
00:00005F96 66FE            	  6456:                 bne.s *
00:00005F98 0C850000003E    	  6457:                 cmpi.l #$0000003E,d5
00:00005F9E 66FE            	  6458:                 bne.s *
                            	  6459: 
00:00005FA0 4E75            	  6460:                 rts
                            	  6461: 
                            	  6462: 
                            	  6463: 
                            	  6464: *-----------------------------------------------------------
                            	  6465: *-----------------------------------------------------------
                            	  6466: * OPCODE : SHIFTS2
                            	  6467: *-----------------------------------------------------------
                            	  6468: *-----------------------------------------------------------
                            	  6469: 
                            	  6470: *     Subroutine to check and accumulate the flags
00:00005FA2 40C3            	  6471: SHIFTS2_FLAGS:  move.w sr,d3
00:00005FA4 02830000000F    	  6472:                 andi.l #$0F,d3            * Isolate flags
00:00005FAA DA83            	  6473:                 add.l d3,d5               * Copy flag results into accumulator
00:00005FAC 4E75            	  6474:                 rts
                            	  6475: 
                            	  6476: op_SHIFTS2:
                            	  6477: 
                            	  6478: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6479: 
                            	  6480: *        BYTE LEFT
00:00005FAE 203C80018F81    	  6481:                 move.l #$80018F81,d0
00:00005FB4 7A00            	  6482:                 moveq  #$00000000,d5
00:00005FB6 7C02            	  6483:                 moveq  #$00000002,d6
                            	  6484: SHIFTS2_LOOP1:
00:00005FB8 ED28            	  6485:                 lsl.b d6,d0
00:00005FBA 61E6            	  6486:                 bsr SHIFTS2_FLAGS
00:00005FBC 51CEFFFA        	  6487:                 dbf d6,SHIFTS2_LOOP1
00:00005FC0 0C8080018F08    	  6488:                 cmpi.l #$80018F08,d0
00:00005FC6 66FE            	  6489:                 bne.s *
00:00005FC8 4A85            	  6490:                 cmpi.l #$00000000,d5
00:00005FCA 66FE            	  6491:                 bne.s *
                            	  6492: 
                            	  6493: *        BYTE RIGHT
00:00005FCC 203C80018F81    	  6494:                 move.l #$80018F81,d0
00:00005FD2 7C02            	  6495:                 moveq  #$00000002,d6
                            	  6496: SHIFTS2_LOOP2:
00:00005FD4 EC28            	  6497:                 lsr.b d6,d0
00:00005FD6 61CA            	  6498:                 bsr SHIFTS2_FLAGS
00:00005FD8 51CEFFFA        	  6499:                 dbf d6,SHIFTS2_LOOP2
00:00005FDC 0C8080018F10    	  6500:                 cmpi.l #$80018F10,d0
00:00005FE2 66FE            	  6501:                 bne.s *
00:00005FE4 4A85            	  6502:                 cmpi.l #$00000000,d5
00:00005FE6 66FE            	  6503:                 bne.s *
                            	  6504: 
                            	  6505: 
                            	  6506: *        WORD LEFT
00:00005FE8 203C80018FF1    	  6507:                 move.l #$80018FF1,d0
00:00005FEE 7C02            	  6508:                 moveq  #$00000002,d6
                            	  6509: SHIFTS2_LOOP3:
00:00005FF0 ED68            	  6510:                 lsl.w d6,d0
00:00005FF2 61AE            	  6511:                 bsr SHIFTS2_FLAGS
00:00005FF4 51CEFFFA        	  6512:                 dbf d6,SHIFTS2_LOOP3
00:00005FF8 0C8080017F88    	  6513:                 cmpi.l #$80017F88,d0
00:00005FFE 66FE            	  6514:                 bne.s *
00:00006000 4A85            	  6515:                 cmpi.l #$00000000,d5
00:00006002 66FE            	  6516:                 bne.s *
                            	  6517: 
                            	  6518: *        WORD RIGHT
00:00006004 203C80018FF1    	  6519:                 move.l #$80018FF1,d0
00:0000600A 7C02            	  6520:                 moveq  #$00000002,d6
                            	  6521: SHIFTS2_LOOP4:
00:0000600C EC68            	  6522:                 lsr.w d6,d0
00:0000600E 6192            	  6523:                 bsr SHIFTS2_FLAGS
00:00006010 51CEFFFA        	  6524:                 dbf d6,SHIFTS2_LOOP4
00:00006014 0C80800111FE    	  6525:                 cmpi.l #$800111FE,d0
00:0000601A 66FE            	  6526:                 bne.s *
00:0000601C 4A85            	  6527:                 cmpi.l #$00000000,d5
00:0000601E 66FE            	  6528:                 bne.s *
                            	  6529: 
                            	  6530: 
                            	  6531: *        LONG LEFT
00:00006020 203C80018FF1    	  6532:                 move.l #$80018FF1,d0
00:00006026 7C02            	  6533:                 moveq  #$00000002,d6
                            	  6534: SHIFTS2_LOOP5:
00:00006028 EDA8            	  6535:                 lsl.l d6,d0
00:0000602A 6100FF76        	  6536:                 bsr SHIFTS2_FLAGS
00:0000602E 51CEFFF8        	  6537:                 dbf d6,SHIFTS2_LOOP5
00:00006032 0C80000C7F88    	  6538:                 cmpi.l #$000C7F88,d0
00:00006038 66FE            	  6539:                 bne.s *
00:0000603A 4A85            	  6540:                 cmpi.l #$00000000,d5
00:0000603C 66FE            	  6541:                 bne.s *
                            	  6542: 
                            	  6543: *        LONG RIGHT
00:0000603E 203C80018FF1    	  6544:                 move.l #$80018FF1,d0
00:00006044 7C02            	  6545:                 moveq  #$00000002,d6
                            	  6546: SHIFTS2_LOOP6:
00:00006046 ECA8            	  6547:                 lsr.l d6,d0
00:00006048 6100FF58        	  6548:                 bsr SHIFTS2_FLAGS
00:0000604C 51CEFFF8        	  6549:                 dbf d6,SHIFTS2_LOOP6
00:00006050 0C80100031FE    	  6550:                 cmpi.l #$100031FE,d0
00:00006056 66FE            	  6551:                 bne.s *
00:00006058 4A85            	  6552:                 cmpi.l #$00000000,d5
00:0000605A 66FE            	  6553:                 bne.s *
                            	  6554: 
                            	  6555: 
                            	  6556: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6557: 
00:0000605C 203C80018FF1    	  6558:                 move.l #$80018FF1,d0
00:00006062 7A00            	  6559:                 moveq  #$00000000,d5
                            	  6560: 
                            	  6561: *        BYTE LEFT
00:00006064 E308            	  6562:                 lsl.b #1,d0
00:00006066 6100FF3A        	  6563:                 bsr SHIFTS2_FLAGS
00:0000606A E508            	  6564:                 lsl.b #2,d0
00:0000606C 6100FF34        	  6565:                 bsr SHIFTS2_FLAGS
00:00006070 E308            	  6566:                 lsl.b #1,d0
00:00006072 6100FF2E        	  6567:                 bsr SHIFTS2_FLAGS
00:00006076 E708            	  6568:                 lsl.b #3,d0
00:00006078 6100FF28        	  6569:                 bsr SHIFTS2_FLAGS
00:0000607C 0C8080018F80    	  6570:                 cmpi.l #$80018F80,d0
00:00006082 66FE            	  6571:                 bne.s *
00:00006084 0C850000001B    	  6572:                 cmpi.l #$0000001B,d5
00:0000608A 66FE            	  6573:                 bne.s *
                            	  6574: 
                            	  6575: *        BYTE RIGHT
00:0000608C E208            	  6576:                 lsr.b #1,d0
00:0000608E 6100FF12        	  6577:                 bsr SHIFTS2_FLAGS
00:00006092 E408            	  6578:                 lsr.b #2,d0
00:00006094 6100FF0C        	  6579:                 bsr SHIFTS2_FLAGS
00:00006098 E608            	  6580:                 lsr.b #3,d0
00:0000609A 6100FF06        	  6581:                 bsr SHIFTS2_FLAGS
00:0000609E E208            	  6582:                 lsr.b #1,d0
00:000060A0 6100FF00        	  6583:                 bsr SHIFTS2_FLAGS
00:000060A4 0C8080018F01    	  6584:                 cmpi.l #$80018F01,d0
00:000060AA 66FE            	  6585:                 bne.s *
00:000060AC 0C850000001B    	  6586:                 cmpi.l #$0000001B,d5
00:000060B2 66FE            	  6587:                 bne.s *
                            	  6588: 
                            	  6589: *        WORD LEFT
00:000060B4 E348            	  6590:                 lsl.w #1,d0
00:000060B6 6100FEEA        	  6591:                 bsr SHIFTS2_FLAGS
00:000060BA E548            	  6592:                 lsl.w #2,d0
00:000060BC 6100FEE4        	  6593:                 bsr SHIFTS2_FLAGS
00:000060C0 E748            	  6594:                 lsl.w #3,d0
00:000060C2 6100FEDE        	  6595:                 bsr SHIFTS2_FLAGS
00:000060C6 EB48            	  6596:                 lsl.w #5,d0
00:000060C8 6100FED8        	  6597:                 bsr SHIFTS2_FLAGS
00:000060CC 0C8080010800    	  6598:                 cmpi.l #$80010800,d0
00:000060D2 66FE            	  6599:                 bne.s *
00:000060D4 0C8500000025    	  6600:                 cmpi.l #$00000025,d5
00:000060DA 66FE            	  6601:                 bne.s *
                            	  6602: 
                            	  6603: *        WORD RIGHT
00:000060DC EA48            	  6604:                 lsr.w #5,d0
00:000060DE 6100FEC2        	  6605:                 bsr SHIFTS2_FLAGS
00:000060E2 E248            	  6606:                 lsr.w #1,d0
00:000060E4 6100FEBC        	  6607:                 bsr SHIFTS2_FLAGS
00:000060E8 E448            	  6608:                 lsr.w #2,d0
00:000060EA 6100FEB6        	  6609:                 bsr SHIFTS2_FLAGS
00:000060EE E848            	  6610:                 lsr.w #4,d0
00:000060F0 6100FEB0        	  6611:                 bsr SHIFTS2_FLAGS
00:000060F4 0C8080010000    	  6612:                 cmpi.l #$80010000,d0
00:000060FA 66FE            	  6613:                 bne.s *
00:000060FC 0C850000002A    	  6614:                 cmpi.l #$0000002A,d5
00:00006102 66FE            	  6615:                 bne.s *
                            	  6616: 
                            	  6617: *        LONG LEFT
00:00006104 203C80018FF1    	  6618:                 move.l #$80018FF1,d0
00:0000610A E388            	  6619:                 lsl.l #1,d0
00:0000610C 6100FE94        	  6620:                 bsr SHIFTS2_FLAGS
00:00006110 E588            	  6621:                 lsl.l #2,d0
00:00006112 6100FE8E        	  6622:                 bsr SHIFTS2_FLAGS
00:00006116 EF88            	  6623:                 lsl.l #7,d0
00:00006118 6100FE88        	  6624:                 bsr SHIFTS2_FLAGS
00:0000611C E988            	  6625:                 lsl.l #4,d0
00:0000611E 6100FE82        	  6626:                 bsr SHIFTS2_FLAGS
00:00006122 0C8063FC4000    	  6627:                 cmpi.l #$63FC4000,d0
00:00006128 66FE            	  6628:                 bne.s *
00:0000612A 0C850000002B    	  6629:                 cmpi.l #$0000002B,d5
00:00006130 66FE            	  6630:                 bne.s *
                            	  6631: 
                            	  6632: *        LONG RIGHT
00:00006132 203C80018FF1    	  6633:                 move.l #$80018FF1,d0
00:00006138 E288            	  6634:                 lsr.l #1,d0
00:0000613A 6100FE66        	  6635:                 bsr SHIFTS2_FLAGS
00:0000613E EA88            	  6636:                 lsr.l #5,d0
00:00006140 6100FE60        	  6637:                 bsr SHIFTS2_FLAGS
00:00006144 EE88            	  6638:                 lsr.l #7,d0
00:00006146 6100FE5A        	  6639:                 bsr SHIFTS2_FLAGS
00:0000614A E088            	  6640:                 lsr.l #8,d0
00:0000614C 6100FE54        	  6641:                 bsr SHIFTS2_FLAGS
00:00006150 0C8000000400    	  6642:                 cmpi.l #$00000400,d0
00:00006156 66FE            	  6643:                 bne.s *
00:00006158 0C850000002D    	  6644:                 cmpi.l #$0000002D,d5
00:0000615E 66FE            	  6645:                 bne.s *
                            	  6646: 
                            	  6647: 
                            	  6648: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6649: 
00:00006160 7A00            	  6650:                 moveq  #$00000000,d5
00:00006162 307C0100        	  6651:                 move.l #$00000100,a0
00:00006166 30BC8FF1        	  6652:                 move.w #$8FF1,(a0)
                            	  6653: 
                            	  6654: *        WORD LEFT
00:0000616A E3D0            	  6655:                 lsl  (a0)
00:0000616C 6100FE34        	  6656:                 bsr SHIFTS2_FLAGS
00:00006170 E3D0            	  6657:                 lsl  (a0)
00:00006172 6100FE2E        	  6658:                 bsr SHIFTS2_FLAGS
00:00006176 E3D0            	  6659:                 lsl  (a0)
00:00006178 6100FE28        	  6660:                 bsr SHIFTS2_FLAGS
00:0000617C E3D0            	  6661:                 lsl  (a0)
00:0000617E 6100FE22        	  6662:                 bsr SHIFTS2_FLAGS
00:00006182 3010            	  6663:                 move.w (a0),d0
00:00006184 0C800000FF10    	  6664:                 cmpi.l #$0000FF10,d0
00:0000618A 66FE            	  6665:                 bne.s *
00:0000618C 0C8500000009    	  6666:                 cmpi.l #$00000009,d5
00:00006192 66FE            	  6667:                 bne.s *
                            	  6668: 
                            	  6669: *        WORD RIGHT
00:00006194 E2D0            	  6670:                 lsr (a0)
00:00006196 6100FE0A        	  6671:                 bsr SHIFTS2_FLAGS
00:0000619A E2D0            	  6672:                 lsr (a0)
00:0000619C 6100FE04        	  6673:                 bsr SHIFTS2_FLAGS
00:000061A0 E2D0            	  6674:                 lsr (a0)
00:000061A2 6100FDFE        	  6675:                 bsr SHIFTS2_FLAGS
00:000061A6 E2D0            	  6676:                 lsr (a0)
00:000061A8 6100FDF8        	  6677:                 bsr SHIFTS2_FLAGS
00:000061AC E2D0            	  6678:                 lsr (a0)
00:000061AE 6100FDF2        	  6679:                 bsr SHIFTS2_FLAGS
00:000061B2 E2D0            	  6680:                 lsr (a0)
00:000061B4 6100FDEC        	  6681:                 bsr SHIFTS2_FLAGS
00:000061B8 3010            	  6682:                 move.w (a0),d0
00:000061BA 0C80000003FC    	  6683:                 cmpi.l #$000003FC,d0
00:000061C0 66FE            	  6684:                 bne.s *
00:000061C2 0C850000000A    	  6685:                 cmpi.l #$0000000A,d5
00:000061C8 66FE            	  6686:                 bne.s *
                            	  6687: 
00:000061CA 4E75            	  6688:                 rts
                            	  6689: 
                            	  6690: ;-----------------------------------------------------------
                            	  6691: ;-----------------------------------------------------------
                            	  6692: ; OPCODE : BSR / RTS
                            	  6693: ;-----------------------------------------------------------
                            	  6694: ;-----------------------------------------------------------
                            	  6695: 
                            	  6696: ;t3_bsr:
                            	  6697: ;	moveq	#3,d3
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;t1_bsr:
                            	  6701: ;	moveq	#1,d1
                            	  6702: ;	rts
                            	  6703: 
                            	  6704: ;op_bsr:
                            	  6705: ;	bsr			t1_bsr
                            	  6706: ;	bsr			t2_bsr
                            	  6707: ;	bsr.w		t3_bsr
                            	  6708: ;	bsr.w		t4_bsr
                            	  6709: ;	cmpi.l	#1,d1
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#2,d2
                            	  6712: ;	bne			*
                            	  6713: ;	cmpi.l	#3,d3
                            	  6714: ;	bne			*
                            	  6715: ;	cmpi.l	#4,d4
                            	  6716: ;	bne			*
                            	  6717: ;	rts
                            	  6718: 
                            	  6719: ;t2_bsr:
                            	  6720: ;	moveq	#2,d2
                            	  6721: ;	rts
                            	  6722: 	
                            	  6723: ;t4_bsr:
                            	  6724: ;	moveq	#4,d4
                            	  6725: ;	rts
                            	  6726: *    END
                            	  6727:     
                            	  6728: 

Source: "boot.x68"
                            	   980: 	include "TinyBasicFlt.x68"

Source: "TinyBasicFlt.x68"
                            	     1: ;*****************************************************************
                            	     2: ;								 *
                            	     3: ;		Tiny Float BASIC for the Motorola MC68000		 *
                            	     4: ;								 *
                            	     5: ; Derived from Palo Alto Tiny BASIC as published in the May 1976 *
                            	     6: ; issue of Dr. Dobb's Journal.  Adapted to the 68000 by:         *
                            	     7: ;	Gordon Brandly						 *
                            	     8: ;								 *
                            	     9: ;*****************************************************************
                            	    10: ;    Copyright (C) 1984 by Gordon Brandly. This program may be	 *
                            	    11: ;    freely distributed for personal use only. All commercial	 *
                            	    12: ;		       rights are reserved.			 *
                            	    13: ;*****************************************************************
                            	    14: ; Modified (c) 2022 for the rf68000. Robert Finch
                            	    15: ; Numerics changed to floating-point
                            	    16: ; added string handling
                            	    17: ; added graphics commands
                            	    18: ;*****************************************************************
                            	    19: 
                            	    20: ; Vers. 1.0  1984/7/17	- Original version by Gordon Brandly
                            	    21: ;	1.1  1984/12/9	- Addition of '$' print term by Marvin Lipford
                            	    22: ;	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                            	    23: ; 
                            	    24: ;	OPT	FRS,BRS 	forward ref.'s & branches default to short
                            	    25: 
                            	    26: ;CR	EQU	$0D		ASCII equates
                            	    27: ;LF	EQU	$0A
                            	    28: ;TAB	EQU	$09
                            	    29: ;CTRLC	EQU	$03
                            	    30: ;CTRLH	EQU	$08
                            	    31: ;CTRLS	EQU	$13
                            	    32: ;CTRLX	EQU	$18
                            	    33: 
                            	    34: DT_NONE equ 0
                            	    35: DT_NUMERIC equ 1
                            	    36: DT_STRING equ 2		; string descriptor
                            	    37: DT_TEXTPTR equ 3	; pointer into program text
                            	    38: DT_INTEGER equ 4
                            	    39: 
                            	    40: BUFLEN	EQU	80		length of keyboard input buffer
                            	    41: STRAREASIZE	EQU	2048	; size of string area
                            	    42: 	CODE
                            	    43: *	ORG	$10000		first free address using Tutor
                            	    44: *
                            	    45: * Standard jump table. You can change these addresses if you are
                            	    46: * customizing this interpreter for a different environment.
                            	    47: *
00:000061CC 6020            	    48: START	BRA	CSTART		Cold Start entry point
00:000061CE 6000008A        	    49: GOWARM	BRA	WSTART		Warm Start entry point
00:000061D2 60001732        	    50: GOOUT	BRA OUTC		Jump to character-out routine
00:000061D6 6000173E        	    51: GOIN	BRA INC		Jump to character-in routine
00:000061DA 6000175A        	    52: GOAUXO	BRA	AUXOUT		Jump to auxiliary-out routine
00:000061DE 6000176A        	    53: GOAUXI	BRA	AUXIN		Jump to auxiliary-in routine
00:000061E2 60001786        	    54: GOBYE	BRA	BYEBYE		Jump to monitor, DOS, etc.
                            	    55: *
                            	    56: * Modifiable system constants:
                            	    57: *
00:000061E6 00041000        	    58: TXTBGN	DC.L	$41000		beginning of program memory
00:000061EA 00047FF0        	    59: ENDMEM	DC.L	$47FF0		end of available memory
                            	    60: *
                            	    61: * The main interpreter starts here:
                            	    62: *
                            	    63: CSTART
00:000061EE 2E7AFFFA        	    64: 	MOVE.L ENDMEM,SP	initialize stack pointer
00:000061F2 23FC000079220000	    65: 	move.l #INC1,INPPTR
00:000061FA 79DC
00:000061FC 13FC0001000400A4	    66: 	move.b #1,InputDevice			; keyboard
00:00006204 13FC0002000400A8	    67: 	move.b #2,OutputDevice		; text video
00:0000620C 23FC000000010004	    68: 	move.l #1,_fpTextIncr
00:00006214 0094
00:00006216 4DFA1760        	    69: 	LEA	INITMSG,A6	tell who we are
00:0000621A 610016D2        	    70: 	BSR	PRMESG
00:0000621E 23FAFFC600007A2C	    71: 	MOVE.L TXTBGN,TXTUNF	init. end-of-program pointer
00:00006226 203AFFC2        	    72: 	MOVE.L ENDMEM,D0	get address of end of memory
00:0000622A 23FAFFBE000079E8	    73: 	move.l ENDMEM,STKFP
00:00006232 90BC00001000    	    74: 	SUB.L	#4096,D0	reserve 4K for the stack
00:00006238 23C000007A1C    	    75: 	MOVE.L D0,STRSTK
00:0000623E D0BC00000020    	    76: 	ADD.L #32,D0
00:00006244 23C000007A34    	    77: 	MOVE.L D0,STKLMT
00:0000624A 90BC00000200    	    78: 	SUB.L	#512,D0 	reserve variable area (32 16 byte floats)
00:00006250 23C000007A30    	    79: 	MOVE.L D0,VARBGN
00:00006256 610000C2        	    80: 	bsr ClearStringArea
                            	    81: WSTART:
00:0000625A 7000            	    82: 	CLR.L	D0		initialize internal variables
00:0000625C 23FC000000010004	    83: 	move.l #1,_fpTextIncr
00:00006264 0094
00:00006266 42B900007A18    	    84: 	clr.l IRQROUT
00:0000626C 23C0000079F4    	    85: 	MOVE.L	D0,LOPVAR
00:00006272 23C0000079EC    	    86: 	MOVE.L	D0,STKGOS
00:00006278 23C0000079E4    	    87: 	MOVE.L	D0,CURRNT	; current line number pointer = 0
00:0000627E 2E7AFF6A        	    88: 	MOVE.L ENDMEM,SP	; init S.P. again, just in case
00:00006282 610000B6        	    89: 	bsr ClearStringStack
00:00006286 4DFA1714        	    90: 	LEA	OKMSG,A6			; display "OK"
00:0000628A 61001662        	    91: 	bsr	PRMESG
                            	    92: ST3
00:0000628E 103C003E        	    93: 	MOVE.B	#'>',D0         Prompt with a '>' and
00:00006292 6100139E        	    94: 	bsr	GETLN		read a line.
00:00006296 610015FA        	    95: 	bsr	TOUPBUF 	convert to upper case
00:0000629A 2848            	    96: 	MOVE.L	A0,A4		save pointer to end of line
00:0000629C 41FA179E        	    97: 	LEA	BUFFER,A0	point to the beginning of line
00:000062A0 6100159A        	    98: 	bsr	TSTNUM		is there a number there?
00:000062A4 610015E2        	    99: 	bsr	IGNBLK		skip trailing blanks
00:000062A8 F2016080        	   100: 	FMOVE.L FP1,D1
00:000062AC 4A82            	   101: 	TST.L D2			; does line no. exist? (or nonzero?)
00:000062AE 670002AC        	   102: 	BEQ	DIRECT		; if not, it's a direct statement
00:000062B2 B2BC0000FFFF    	   103: 	CMP.L	#$FFFF,D1	; see if line no. is <= 16 bits
00:000062B8 6400136A        	   104: 	BCC	QHOW			; if not, we've overflowed
00:000062BC 1101            	   105: 	MOVE.B	D1,-(A0)	store the binary line no.
00:000062BE E059            	   106: 	ROR	#8,D1		(Kludge to store a word on a
00:000062C0 1101            	   107: 	MOVE.B	D1,-(A0)	possible byte boundary)
00:000062C2 E159            	   108: 	ROL	#8,D1
00:000062C4 6100140A        	   109: 	bsr	FNDLN		find this line in save area
00:000062C8 2A49            	   110: 	MOVE.L	A1,A5		save possible line pointer
00:000062CA 6614            	   111: 	BNE	ST4		if not found, insert
00:000062CC 61001428        	   112: 	bsr	FNDNXT		find the next line (into A1)
00:000062D0 244D            	   113: 	MOVE.L	A5,A2		pointer to line to be deleted
00:000062D2 267A1758        	   114: 	MOVE.L	TXTUNF,A3	points to top of save area
00:000062D6 6100142E        	   115: 	bsr	MVUP		move up to delete
00:000062DA 23CA00007A2C    	   116: 	MOVE.L	A2,TXTUNF	update the end pointer
                            	   117: ST4
00:000062E0 200C            	   118: 	MOVE.L	A4,D0		calculate the length of new line
00:000062E2 9088            	   119: 	SUB.L	A0,D0
00:000062E4 B0BC00000003    	   120: 	CMP.L	#3,D0		is it just a line no. & CR?
00:000062EA 6FA2            	   121: 	BLE	ST3		if so, it was just a delete
00:000062EC 267A173E        	   122: 	MOVE.L TXTUNF,A3	compute new end
00:000062F0 2C4B            	   123: 	MOVE.L A3,A6
00:000062F2 D7C0            	   124: 	ADD.L	D0,A3
00:000062F4 203A172E        	   125: 	MOVE.L StrArea,D0	see if there's enough room
00:000062F8 B08B            	   126: 	CMP.L	A3,D0
00:000062FA 63001320        	   127: 	BLS	QSORRY		if not, say so
00:000062FE 23CB00007A2C    	   128: 	MOVE.L	A3,TXTUNF	if so, store new end position
00:00006304 224E            	   129: 	MOVE.L	A6,A1		points to old unfilled area
00:00006306 244D            	   130: 	MOVE.L	A5,A2		points to beginning of move area
00:00006308 61001410        	   131: 	bsr	MVDOWN		move things out of the way
00:0000630C 2248            	   132: 	MOVE.L	A0,A1		set up to do the insertion
00:0000630E 244D            	   133: 	MOVE.L	A5,A2
00:00006310 264C            	   134: 	MOVE.L	A4,A3
00:00006312 610013F2        	   135: 	bsr	MVUP		do it
00:00006316 6000FF76        	   136: 	BRA	ST3		go back and get another line
                            	   137: 
                            	   138: ClearStringArea:
00:0000631A 203A1714        	   139: 	move.l VARBGN,d0
00:0000631E 90BC00000800    	   140: 	SUB.L #STRAREASIZE,D0
00:00006324 23C000007A24    	   141: 	MOVE.L D0,StrArea
00:0000632A 23C000007A28    	   142: 	MOVE.L D0,LastStr
00:00006330 207A16F2        	   143: 	move.l StrArea,a0
00:00006334 4298            	   144: 	clr.l (a0)+
00:00006336 4298            	   145: 	clr.l (a0)+
00:00006338 4E75            	   146: 	rts
                            	   147: 
                            	   148: ClearStringStack:
00:0000633A 7007            	   149: 	moveq #7,d0
00:0000633C 227A16DE        	   150: 	move.l STRSTK,a1
                            	   151: .0001
00:00006340 4299            	   152: 	clr.l (a1)+				; clear the string stack
00:00006342 51C8FFFC        	   153: 	dbra d0,.0001
00:00006346 23C900007A20    	   154: 	move.l a1,StrSp		; set string stack stack pointer
00:0000634C 4E75            	   155: 	rts
                            	   156: 
                            	   157: 	even
                            	   158: 
                            	   159: ;******************************************************************
                            	   160: ;
                            	   161: ; *** Tables *** DIRECT *** EXEC ***
                            	   162: ;
                            	   163: ; This section of the code tests a string against a table. When
                            	   164: ; a match is found, control is transferred to the section of
                            	   165: ; code according to the table.
                            	   166: ;
                            	   167: ; At 'EXEC', A0 should point to the string, A1 should point to
                            	   168: ; the character table, and A2 should point to the execution
                            	   169: ; table. At 'DIRECT', A0 should point to the string, A1 and
                            	   170: ; A2 will be set up to point to TAB1 and TAB1_1, which are
                            	   171: ; the tables of all direct and statement commands.
                            	   172: ;
                            	   173: ; A '.' in the string will terminate the test and the partial
                            	   174: ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                            	   175: ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                            	   176: ;
                            	   177: ; There are two tables: the character table and the execution
                            	   178: ; table. The character table consists of any number of text items.
                            	   179: ; Each item is a string of characters with the last character's
                            	   180: ; high bit set to one. The execution table holds a 16-bit
                            	   181: ; execution addresses that correspond to each entry in the
                            	   182: ; character table.
                            	   183: ;
                            	   184: ; The end of the character table is a 0 byte which corresponds
                            	   185: ; to the default routine in the execution table, which is
                            	   186: ; executed if none of the other table items are matched.
                            	   187: ;
                            	   188: ; Character-matching tables:
                            	   189: 
                            	   190: TAB1
00:0000634E 3C434F          	   191: 	DC.B	'<CO',('M'+$80)
00:00006351 CD
00:00006352 3C434F          	   192: 	DC.B	'<CO',('N'+$80)
00:00006355 CE
00:00006356 3E434F          	   193: 	DC.B	'>CO',('M'+$80)
00:00006359 CD
00:0000635A 3E434F          	   194: 	DC.B	'>CO',('N'+$80)
00:0000635D CE
00:0000635E 3C3E434F        	   195: 	DC.B	'<>CO',('M'+$80)
00:00006362 CD
00:00006363 3C3E434F        	   196: 	DC.B	'<>CO',('N'+$80)
00:00006367 CE
00:00006368 4C4953          	   197: 	DC.B	'LIS',('T'+$80)         Direct commands
00:0000636B D4
00:0000636C 4C4F41          	   198: 	DC.B	'LOA',('D'+$80)
00:0000636F C4
00:00006370 4E45            	   199: 	DC.B	'NE',('W'+$80)
00:00006372 D7
00:00006373 5255            	   200: 	DC.B	'RU',('N'+$80)
00:00006375 CE
00:00006376 534156          	   201: 	DC.B	'SAV',('E'+$80)
00:00006379 C5
00:0000637A 434C            	   202: 	DC.B 	'CL',('S'+$80)
00:0000637C D3
                            	   203: TAB2
00:0000637D 4E4558          	   204: 	DC.B	'NEX',('T'+$80)         Direct / statement
00:00006380 D4
00:00006381 4C45            	   205: 	DC.B	'LE',('T'+$80)
00:00006383 D4
00:00006384 49              	   206: 	DC.B	'I',('F'+$80)
00:00006385 C6
00:00006386 474F54          	   207: 	DC.B	'GOT',('O'+$80)
00:00006389 CF
00:0000638A 474F5355        	   208: 	DC.B	'GOSU',('B'+$80)
00:0000638E C2
00:0000638F 5245545552      	   209: 	DC.B	'RETUR',('N'+$80)
00:00006394 CE
00:00006395 5245            	   210: 	DC.B	'RE',('M'+$80)
00:00006397 CD
00:00006398 464F            	   211: 	DC.B	'FO',('R'+$80)
00:0000639A D2
00:0000639B 494E5055        	   212: 	DC.B	'INPU',('T'+$80)
00:0000639F D4
00:000063A0 5052494E        	   213: 	DC.B	'PRIN',('T'+$80)
00:000063A4 D4
00:000063A5 504F4B          	   214: 	DC.B	'POK',('E'+$80)
00:000063A8 C5
00:000063A9 53544F          	   215: 	DC.B	'STO',('P'+$80)
00:000063AC D0
00:000063AD 4259            	   216: 	DC.B	'BY',('E'+$80)
00:000063AF C5
00:000063B0 43414C          	   217: 	DC.B	'CAL',('L'+$80)
00:000063B3 CC
00:000063B4 4F4E4952        	   218: 	DC.B	'ONIR',('Q'+$80)
00:000063B8 D1
                            	   219: ; graphics commands	
00:000063B9 504F494E        	   220: 	DC.B	'POIN',('T'+$80)
00:000063BD D4
00:000063BE 4C494E          	   221: 	DC.B	'LIN',('E'+$80)
00:000063C1 C5
00:000063C2 524543          	   222: 	DC.B	'REC',('T'+$80)
00:000063C5 D4
00:000063C6 5452            	   223: 	DC.B	'TR',('I'+$80)
00:000063C8 C9
00:000063C9 43555256        	   224: 	DC.B	'CURV',('E'+$80)
00:000063CD C5
00:000063CE 434F4C4F        	   225: 	DC.B	'COLO',('R'+$80)
00:000063D2 D2
00:000063D3 445241574255    	   226: 	DC.B	'DRAWBU',('F'+$80)
00:000063D9 C6
00:000063DA 444953504255    	   227: 	DC.B	'DISPBU',('F'+$80)
00:000063E0 C6
00:000063E1 544558          	   228: 	DC.B	'TEX',('T'+$80)
00:000063E4 D4
00:000063E5 434C4541        	   229: 	dc.b	'CLEA',('R'+$80)
00:000063E9 D2
00:000063EA 00              	   230: 	DC.B	0
                            	   231: TAB4
00:000063EB 504545          	   232: 	DC.B	'PEE',('K'+$80)         Functions
00:000063EE CB
00:000063EF 524E            	   233: 	DC.B	'RN',('D'+$80)
00:000063F1 C4
00:000063F2 4142            	   234: 	DC.B	'AB',('S'+$80)
00:000063F4 D3
00:000063F5 53495A          	   235: 	DC.B	'SIZ',('E'+$80)
00:000063F8 C5
00:000063F9 544943          	   236: 	DC.B	'TIC',('K'+$80)
00:000063FC CB
00:000063FD 434F52454E      	   237: 	DC.B	'COREN',('O'+$80)
00:00006402 CF
00:00006403 4C454654        	   238: 	DC.B	'LEFT',('$'+$80)
00:00006407 A4
00:00006408 5249474854      	   239: 	DC.B	'RIGHT',('$'+$80)
00:0000640D A4
00:0000640E 4D4944          	   240: 	DC.B	'MID',('$'+$80)
00:00006411 A4
00:00006412 4C45            	   241: 	DC.B	'LE',('N'+$80)
00:00006414 CE
00:00006415 494E            	   242: 	DC.B	'IN',('T'+$80)
00:00006417 D4
00:00006418 434852          	   243: 	DC.B	'CHR',('$'+$80)
00:0000641B A4
00:0000641C 00              	   244: 	DC.B	0
                            	   245: TAB5
00:0000641D 54              	   246: 	DC.B	'T',('O'+$80)           "TO" in "FOR"
00:0000641E CF
00:0000641F 00              	   247: 	DC.B	0
                            	   248: TAB6
00:00006420 535445          	   249: 	DC.B	'STE',('P'+$80)         "STEP" in "FOR"
00:00006423 D0
00:00006424 00              	   250: 	DC.B	0
                            	   251: TAB8
00:00006425 3E              	   252: 	DC.B	'>',('='+$80)           Relational operators
00:00006426 BD
00:00006427 3C              	   253: 	DC.B	'<',('>'+$80)
00:00006428 BE
00:00006429 BE              	   254: 	DC.B	('>'+$80)
00:0000642A BD              	   255: 	DC.B	('='+$80)
00:0000642B 3C              	   256: 	DC.B	'<',('='+$80)
00:0000642C BD
00:0000642D BC              	   257: 	DC.B	('<'+$80)
00:0000642E 00              	   258: 	DC.B	0
00:0000642F 00              	   259: 	DC.B	0	<- for aligning on a word boundary
                            	   260: TAB9
00:00006430 414E            	   261: 	DC.B	'AN',('D'+$80)
00:00006432 C4
00:00006433 00              	   262: 	DC.B	0
                            	   263: TAB10
00:00006434 4F              	   264: 	DC.B	'O',('R'+$80)
00:00006435 D2
00:00006436 00              	   265: 	DC.B	0
                            	   266: TAB11
00:00006437 4D4F            	   267: 	DC.B	'MO',('D'+$80)
00:00006439 C4
00:0000643A 00              	   268: 	DC.B	0
00:0000643B 00              	   269: 	DC.B	0
                            	   270: TAB12
00:0000643C 44455054        	   271: 	DC.B	'DEPT',('H'+$80)
00:00006440 C8
00:00006441 00              	   272: 	DC.B	0
00:00006442 00              	   273: 	DC.B	0
                            	   274: 
                            	   275: ; Execution address tables:
                            	   276: 	align 2
                            	   277: TAB1_1	
00:00006444 000065B4        	   278: 	DC.L	INCOM
00:00006448 000065A6        	   279: 	DC.L	INCON
00:0000644C 000065CC        	   280: 	DC.L	OUTCOM
00:00006450 000065E2        	   281: 	DC.L	OUTCON
00:00006454 000065C2        	   282: 	DC.L	IOCOM
00:00006458 000065D8        	   283: 	DC.L	IOCON
00:0000645C 000066CC        	   284: 	DC.L	LIST			Direct commands
00:00006460 000069AA        	   285: 	DC.L	LOAD
00:00006464 000065EE        	   286: 	DC.L	NEW
00:00006468 0000660A        	   287: 	DC.L	RUN
00:0000646C 00006A0A        	   288: 	DC.L	SAVE
00:00006470 000078FA        	   289: 	DC.L	CLS
                            	   290: TAB2_1
00:00006474 00006868        	   291: 	DC.L	NEXT			Direct / statement
00:00006478 0000699A        	   292: 	DC.L	LET
00:0000647C 000068D4        	   293: 	DC.L	IF
00:00006480 00006684        	   294: 	DC.L	GOTO
00:00006484 00006782        	   295: 	DC.L	GOSUB
00:00006488 000067BC        	   296: 	DC.L	RETURN
00:0000648C 000068D2        	   297: 	DC.L	REM
00:00006490 000067E8        	   298: 	DC.L	FOR
00:00006494 000068FC        	   299: 	DC.L	INPUT
00:00006498 000066F8        	   300: 	DC.L	PRINT
00:0000649C 00006A88        	   301: 	DC.L	POKE
00:000064A0 00006602        	   302: 	DC.L	STOP
00:000064A4 000061E2        	   303: 	DC.L	GOBYE
00:000064A8 00006B02        	   304: 	DC.L	CALL
00:000064AC 00006698        	   305: 	DC.L	ONIRQ
00:000064B0 00006BEE        	   306: 	DC.L	POINT
00:000064B4 00006C14        	   307: 	DC.L	LINE
00:000064B8 00006C66        	   308: 	DC.L	RECT
00:000064BC 00006CAC        	   309: 	DC.L	TRIANGLE
00:000064C0 00006D2C        	   310: 	DC.L	CURVE
00:000064C4 00006B7A        	   311: 	DC.L	COLOR
00:000064C8 00006B5A        	   312: 	DC.L	DRAWBUF
00:000064CC 00006B6A        	   313: 	DC.L	DISPBUF
00:000064D0 00006B26        	   314: 	DC.L	TEXT
00:000064D4 00006B18        	   315: 	dc.l	CLEAR
00:000064D8 00006992        	   316: 	DC.L	DEFLT
                            	   317: TAB4_1
00:000064DC 0000730C        	   318: 	DC.L	PEEK			; Functions
00:000064E0 00007374        	   319: 	DC.L	RND
00:000064E4 0000739E        	   320: 	DC.L	ABS
00:000064E8 000073AA        	   321: 	DC.L	SIZE
00:000064EC 000073BA        	   322: 	DC.L	TICK
00:000064F0 000073C6        	   323: 	DC.L	CORENO
00:000064F4 000074D8        	   324: 	DC.L	LEFT
00:000064F8 000074E4        	   325: 	DC.L	RIGHT
00:000064FC 0000740E        	   326: 	DC.L	MID
00:00006500 0000750C        	   327: 	DC.L	LEN
00:00006504 00007532        	   328: 	DC.L	INT
00:00006508 00007558        	   329: 	DC.L  CHR
00:0000650C 00007016        	   330: 	DC.L	XP40
                            	   331: TAB5_1
00:00006510 00006802        	   332: 	DC.L	FR1			; "TO" in "FOR"
00:00006514 000075DC        	   333: 	DC.L	QWHAT
                            	   334: TAB6_1
00:00006518 0000681A        	   335: 	DC.L	FR2			; "STEP" in "FOR"
00:0000651C 00006820        	   336: 	DC.L	FR3
                            	   337: TAB8_1
00:00006520 00006E4C        	   338: 	DC.L	XP11	>=		Relational operators
00:00006524 00006E58        	   339: 	DC.L	XP12	<>
00:00006528 00006E64        	   340: 	DC.L	XP13	>
00:0000652C 00006E7C        	   341: 	DC.L	XP15	=
00:00006530 00006E70        	   342: 	DC.L	XP14	<=
00:00006534 00006E8A        	   343: 	DC.L	XP16	<
00:00006538 00006EA8        	   344: 	DC.L	XP17
                            	   345: TAB9_1
00:0000653C 00006E0A        	   346: 	DC.L	XP_AND
00:00006540 00006E20        	   347: 	DC.L	XP_ANDX
                            	   348: TAB10_1
00:00006544 00006DE4        	   349: 	DC.L	XP_OR
00:00006548 00006E20        	   350: 	DC.L	XP_ORX
                            	   351: TAB11_1
00:0000654C 00006FE8        	   352: 	DC.L	XP_MOD
00:00006550 00006FB2        	   353: 	DC.L	XP31
                            	   354: 	even
                            	   355: TAB12_1
00:00006554 00006B86        	   356: 	DC.L	COLOR1
00:00006558 00006BDA        	   357: 	DC.L	COLOR2
                            	   358: 	
                            	   359: DIRECT
00:0000655C 33FC000100007A38	   360: 	move.w #1,DIRFLG
00:00006564 43FAFDE8        	   361: 	LEA	TAB1,A1
00:00006568 45FAFEDA        	   362: 	LEA	TAB1_1,A2
                            	   363: EXEC
00:0000656C 6100131A        	   364: 	bsr	IGNBLK				; ignore leading blanks
00:00006570 2648            	   365: 	MOVE.L A0,A3			; save the pointer
00:00006572 4202            	   366: 	CLR.B	D2					; clear match flag
                            	   367: EXLP
00:00006574 1018            	   368: 	MOVE.B (A0)+,D0	 	; get the program character
00:00006576 1211            	   369: 	MOVE.B (A1),D1 		; get the table character
00:00006578 6604            	   370: 	BNE	EXNGO					; If end of table,
00:0000657A 204B            	   371: 	MOVE.L A3,A0			; restore the text pointer and...
00:0000657C 6024            	   372: 	BRA	EXGO					; execute the default.
                            	   373: EXNGO
00:0000657E 1600            	   374: 	MOVE.B D0,D3		 	; Else check for period...
00:00006580 C602            	   375: 	AND.B	D2,D3				; and a match.
00:00006582 B63C002E        	   376: 	CMP.B	#'.',D3
00:00006586 671A            	   377: 	BEQ	EXGO					; if so, execute
00:00006588 C23C007F        	   378: 	AND.B	#$7F,D1 		; ignore the table's high bit
00:0000658C B200            	   379: 	CMP.B	D0,D1				; is there a match?
00:0000658E 670C            	   380: 	BEQ	EXMAT
00:00006590 588A            	   381: 	ADDQ.L #4,A2			; if not, try the next entry
00:00006592 204B            	   382: 	MOVE.L A3,A0			; reset the program pointer
00:00006594 4202            	   383: 	CLR.B	D2					; sorry, no match
                            	   384: EX1
00:00006596 4A19            	   385: 	TST.B	(A1)+				; get to the end of the entry
00:00006598 6AFC            	   386: 	BPL	EX1
00:0000659A 60D8            	   387: 	BRA	EXLP					; back for more matching
                            	   388: EXMAT
00:0000659C 74FF            	   389: 	MOVEQ	#-1,D2			; we've got a match so far
00:0000659E 4A19            	   390: 	TST.B	(A1)+				; end of table entry?
00:000065A0 6AD2            	   391: 	BPL	EXLP					; if not, go back for more
                            	   392: EXGO
00:000065A2 2652            	   393: 	MOVE.L (A2),A3		; execute the appropriate routine
00:000065A4 4ED3            	   394: 	JMP	(A3)
                            	   395: 
                            	   396: *******************************************************************
                            	   397: * Console redirection
                            	   398: * <COM will redirect input to the COM port
                            	   399: * >COM will redirect output to the COM port
                            	   400: * <CON will redirect input to the console
                            	   401: * >CON will redirect output to the console
                            	   402: * <>COM will redirect input and output to the COM port
                            	   403: * <>CON will redirect input and output to the console
                            	   404: *******************************************************************
                            	   405: INCON
00:000065A6 23FC000079220000	   406: 	move.l	#INC1,INPPTR
00:000065AE 79DC
00:000065B0 600001C8        	   407: 	bra			FINISH
                            	   408: INCOM
00:000065B4 23FC0000794A0000	   409: 	move.l	#AUXIN,INPPTR
00:000065BC 79DC
00:000065BE 600001BA        	   410: 	bra			FINISH
                            	   411: IOCOM
00:000065C2 23FC0000794A0000	   412: 	move.l	#AUXIN,INPPTR
00:000065CA 79DC
                            	   413: OUTCOM
00:000065CC 13FC0002000400A8	   414: 	move.b #2,OutputDevice
00:000065D4 600001A4        	   415: 	bra	FINISH
                            	   416: IOCON
00:000065D8 23FC000079220000	   417: 	move.l	#INC1,INPPTR
00:000065E0 79DC
                            	   418: OUTCON
00:000065E2 13FC0001000400A8	   419: 	move.b #1,OutputDevice
00:000065EA 6000018E        	   420: 	bra	FINISH
                            	   421: 
                            	   422: *******************************************************************
                            	   423: *
                            	   424: * What follows is the code to execute direct and statement
                            	   425: * commands. Control is transferred to these points via the command
                            	   426: * table lookup code of 'DIRECT' and 'EXEC' in the last section.
                            	   427: * After the command is executed, control is transferred to other
                            	   428: * sections as follows:
                            	   429: *
                            	   430: * For 'LIST', 'NEW', and 'STOP': go back to the warm start point.
                            	   431: * For 'RUN': go execute the first stored line if any; else go
                            	   432: * back to the warm start point.
                            	   433: * For 'GOTO' and 'GOSUB': go execute the target line.
                            	   434: * For 'RETURN' and 'NEXT'; go back to saved return line.
                            	   435: * For all others: if 'CURRNT' is 0, go to warm start; else go
                            	   436: * execute next command. (This is done in 'FINISH'.)
                            	   437: *
                            	   438: *******************************************************************
                            	   439: *
                            	   440: * *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                            	   441: *
                            	   442: * 'NEW<CR>' sets TXTUNF to point to TXTBGN
                            	   443: *
                            	   444: * 'STOP<CR>' goes back to WSTART
                            	   445: *
                            	   446: * 'RUN<CR>' finds the first stored line, stores its address
                            	   447: * in CURRNT, and starts executing it. Note that only those
                            	   448: * commands in TAB2 are legal for a stored program.
                            	   449: *
                            	   450: * There are 3 more entries in 'RUN':
                            	   451: * 'RUNNXL' finds next line, stores it's address and executes it.
                            	   452: * 'RUNTSL' stores the address of this line and executes it.
                            	   453: * 'RUNSML' continues the execution on same line.
                            	   454: *
                            	   455: * 'GOTO expr<CR>' evaluates the expression, finds the target
                            	   456: * line, and jumps to 'RUNTSL' to do it.
                            	   457: *
                            	   458: NEW:
00:000065EE 61000FDA        	   459: 	bsr	ENDCHK
00:000065F2 23FAFBF200007A2C	   460: 	MOVE.L TXTBGN,TXTUNF	set the end pointer
00:000065FA 6100FD1E        	   461: 	bsr ClearStringArea
00:000065FE 6100FD3A        	   462: 	bsr ClearStringStack
                            	   463: 
                            	   464: STOP:
00:00006602 61000FC6        	   465: 	bsr	ENDCHK
00:00006606 6000FC52        	   466: 	BRA	WSTART
                            	   467: 
                            	   468: RUN:
00:0000660A 427900007A38    	   469: 	clr.w DIRFLG
00:00006610 61000FB8        	   470: 	bsr	ENDCHK
00:00006614 207AFBD0        	   471: 	MOVE.L	TXTBGN,A0	set pointer to beginning
00:00006618 23C8000079E4    	   472: 	MOVE.L	A0,CURRNT
                            	   473: 
                            	   474: RUNNXL:
00:0000661E 4AB9000079E4    	   475: 	TST.L	CURRNT		; executing a program?
00:00006624 6700FC34        	   476: 	beq	WSTART			; if not, we've finished a direct stat.
00:00006628 4AB900007A18    	   477: 	tst.l	IRQROUT		; are we handling IRQ's ?
00:0000662E 672E            	   478: 	beq	RUN1
00:00006630 4A39000400A0    	   479: 	tst.b IRQFlag		; was there an IRQ ?
00:00006636 6726            	   480: 	beq	RUN1
00:00006638 4239000400A0    	   481: 	clr.b IRQFlag
                            	   482: 
                            	   483: 	; same code as GOSUB	
                            	   484: ;	sub.l #128,sp		; allocate storage for local variables
                            	   485: ;	move.l STKFP,-(sp)
                            	   486: ;	move.l sp,STKFP
00:0000663E 6100111E        	   487: 	bsr	PUSHA				; save the current 'FOR' parameters
00:00006642 2F08            	   488: 	MOVE.L A0,-(SP)	; save text pointer
00:00006644 2F3A139E        	   489: 	MOVE.L CURRNT,-(SP)	found it, save old 'CURRNT'...
00:00006648 2F3A13A2        	   490: 	MOVE.L STKGOS,-(SP)	and 'STKGOS'
00:0000664C 42B9000079F4    	   491: 	CLR.L	LOPVAR		; load new values
00:00006652 23CF000079EC    	   492: 	MOVE.L SP,STKGOS
                            	   493: 
00:00006658 227A13BE        	   494: 	move.l IRQROUT,a1
00:0000665C 600C            	   495: 	bra	RUNTSL
                            	   496: RUN1
00:0000665E 7200            	   497: 	CLR.L	D1			; else find the next line number
00:00006660 2248            	   498: 	MOVE.L A0,A1
00:00006662 6100107A        	   499: 	bsr	FNDLNP
00:00006666 6500FBF2        	   500: 	BCS	WSTART		; if we've fallen off the end, stop
                            	   501: 
                            	   502: RUNTSL
00:0000666A 23C9000079E4    	   503: 	MOVE.L	A1,CURRNT	set CURRNT to point to the line no.
00:00006670 2049            	   504: 	MOVE.L	A1,A0		set the text pointer to
00:00006672 5488            	   505: 	ADDQ.L	#2,A0		the start of the line text
                            	   506: 
                            	   507: RUNSML
00:00006674 61001266        	   508: 	bsr	CHKIO		see if a control-C was pressed
00:00006678 43FAFD03        	   509: 	LEA	TAB2,A1 	find command in TAB2
00:0000667C 45FAFDF6        	   510: 	LEA	TAB2_1,A2
00:00006680 6000FEEA        	   511: 	BRA	EXEC		and execute it
                            	   512: 
                            	   513: GOTO:	
00:00006684 6100073C        	   514: 	bsr	INT_EXPR	; evaluate the following expression
00:00006688 61000F40        	   515: 	bsr	ENDCHK		; must find end of line
00:0000668C 2200            	   516: 	move.l d0,d1
00:0000668E 61001040        	   517: 	bsr	FNDLN			; find the target line
00:00006692 66000F90        	   518: 	bne	QHOW			; no such line no.
00:00006696 60D2            	   519: 	bra	RUNTSL		; go do it
                            	   520: 
                            	   521: ;******************************************************************
                            	   522: ; ONIRQ <line number>
                            	   523: ; ONIRQ sets up an interrupt handler which acts like a specialized
                            	   524: ; subroutine call. ONIRQ is coded like a GOTO that never executes.
                            	   525: ;******************************************************************
                            	   526: 
                            	   527: ONIRQ:
00:00006698 61000728        	   528: 	bsr	INT_EXPR		; evaluate the following expression
00:0000669C 61000F2C        	   529: 	bsr ENDCHK			; must find end of line
00:000066A0 2200            	   530: 	move.l d0,d1
00:000066A2 6100102C        	   531: 	bsr FNDLN				; find the target line
00:000066A6 660A            	   532: 	bne	ONIRQ1
00:000066A8 42B900007A18    	   533: 	clr.l IRQROUT
00:000066AE 600000CA        	   534: 	bra	FINISH
                            	   535: ONIRQ1:
00:000066B2 23C900007A18    	   536: 	move.l a1,IRQROUT
00:000066B8 600000C0        	   537: 	jmp	FINISH
                            	   538: 
                            	   539: 
                            	   540: WAITIRQ:
00:000066BC 6100121E        	   541: 	jsr	CHKIO				; see if a control-C was pressed
00:000066C0 4A39000400A0    	   542: 	tst.b IRQFlag
00:000066C6 67F4            	   543: 	beq	WAITIRQ
00:000066C8 600000B0        	   544: 	jmp	FINISH
                            	   545: 
                            	   546: *******************************************************************
                            	   547: *
                            	   548: * *** LIST *** PRINT ***
                            	   549: *
                            	   550: * LIST has two forms:
                            	   551: * 'LIST<CR>' lists all saved lines
                            	   552: * 'LIST #<CR>' starts listing at the line #
                            	   553: * Control-S pauses the listing, control-C stops it.
                            	   554: *
                            	   555: * PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                            	   556: * where '....' is a list of expressions, formats, back-arrows,
                            	   557: * and strings.	These items a separated by commas.
                            	   558: *
                            	   559: * A format is a pound sign followed by a number.  It controls
                            	   560: * the number of spaces the value of an expression is going to
                            	   561: * be printed in.  It stays effective for the rest of the print
                            	   562: * command unless changed by another format.  If no format is
                            	   563: * specified, 11 positions will be used.
                            	   564: *
                            	   565: * A string is quoted in a pair of single- or double-quotes.
                            	   566: *
                            	   567: * An underline (back-arrow) means generate a <CR> without a <LF>
                            	   568: *
                            	   569: * A <CR LF> is generated after the entire list has been printed
                            	   570: * or if the list is empty.  If the list ends with a semicolon,
                            	   571: * however, no <CR LF> is generated.
                            	   572: *
                            	   573: 
                            	   574: LIST:	
00:000066CC 6100116E        	   575: 	bsr	TSTNUM		see if there's a line no.
00:000066D0 61000EF8        	   576: 	bsr	ENDCHK		if not, we get a zero
00:000066D4 61000FFA        	   577: 	bsr	FNDLN		find this or next line
                            	   578: LS1
00:000066D8 650000A0        	   579: 	BCS	FINISH		warm start if we passed the end
00:000066DC 61001128        	   580: 	bsr	PRTLN		print the line
00:000066E0 610011FA        	   581: 	bsr	CHKIO		check for listing halt request
00:000066E4 670C            	   582: 	BEQ	LS3
00:000066E6 B03C0013        	   583: 	CMP.B	#CTRLS,D0	pause the listing?
00:000066EA 6606            	   584: 	BNE	LS3
                            	   585: LS2
00:000066EC 610011EE        	   586: 	bsr	CHKIO		if so, wait for another keypress
00:000066F0 67FA            	   587: 	BEQ	LS2
                            	   588: LS3
00:000066F2 61000FEA        	   589: 	bsr	FNDLNP		find the next line
00:000066F6 60E0            	   590: 	BRA	LS1
                            	   591: 
                            	   592: PRINT:	
00:000066F8 780B            	   593: 	MOVE.L #11,D4		D4 = number of print spaces
00:000066FA 61001128        	   594: 	bsr	TSTC		if null list and ":"
00:000066FE 3A              	   595: 	DC.B	':',PR2-*
00:000066FF 09
00:00006700 610013F0        	   596: 	bsr	CRLF		give CR-LF and continue
00:00006704 6000FF6E        	   597: 	BRA	RUNSML		execution on the same line
                            	   598: PR2	
00:00006708 6100111A        	   599: 	bsr	TSTC		if null list and <CR>
00:0000670C 0D              	   600: 	DC.B	CR,PR0-*
00:0000670D 09
00:0000670E 610013E2        	   601: 	bsr	CRLF		also give CR-LF and
00:00006712 6000FF0A        	   602: 	BRA	RUNNXL		execute the next line
                            	   603: PR0
00:00006716 6100110C        	   604: 	bsr	TSTC				; else is it a format?
00:0000671A 23              	   605: 	dc.b '#',PR1-*
00:0000671B 09
00:0000671C 610006A4        	   606: 	bsr	INT_EXPR		; yes, evaluate expression
00:00006720 2800            	   607: 	move.l d0,d4		; and save it as print width
00:00006722 600E            	   608: 	bra	PR3					; look for more to print
                            	   609: PR1
00:00006724 610010FE        	   610: 	bsr	TSTC				; is character expression? (MRL)
00:00006728 24              	   611: 	dc.b '$',PR8-*
00:00006729 1B
00:0000672A 61000696        	   612: 	bsr	INT_EXPR		; yep. Evaluate expression (MRL)
00:0000672E 6100FAA2        	   613: 	bsr	GOOUT				; print low byte (MRL)
                            	   614: 	bra	PR3					; look for more. (MRL)
                            	   615: PR3
00:00006732 610010F0        	   616: 	bsr	TSTC						; if ",", go find next
00:00006736 2C              	   617: 	dc.b ',',PR6-*
00:00006737 07
00:00006738 61000E76        	   618: 	bsr	FIN							; in the list.
00:0000673C 60D8            	   619: 	BRA	PR0
                            	   620: PR6
00:0000673E 610013B2        	   621: 	bsr	CRLF						; list ends here
00:00006742 6036            	   622: 	BRA	FINISH
                            	   623: PR8
00:00006744 2F04            	   624: 	move.l d4,-(SP)			; save the width value
00:00006746 6100068C        	   625: 	bsr	EXPR						; evaluate the expression
00:0000674A 281F            	   626: 	move.l (sp)+,d4			; restore the width
00:0000674C 0C8000000002    	   627: 	cmpi.l #DT_STRING,d0	; is it a string?
00:00006752 670C            	   628: 	beq PR9
00:00006754 F2000080        	   629: 	fmove fp0,fp1
00:00006758 7823            	   630: 	move.l #35,d4
00:0000675A 61001060        	   631: 	bsr	PRTNUM					; print its value
00:0000675E 60D2            	   632: 	bra	PR3							; more to print?
                            	   633: 	; Print a string
                            	   634: PR9
00:00006760 F239680000040600	   635: 	fmove.x fp0,_fpWork
00:00006768 323900040600    	   636: 	move.w _fpWork,d1
00:0000676E 227900040604    	   637: 	move.l _fpWork+4,a1
00:00006774 61001040        	   638: 	bsr PRTSTR2
00:00006778 60B8            	   639: 	bra PR3
                            	   640: 
                            	   641: FINISH:
00:0000677A 61000E34        	   642: 	bsr	FIN			; Check end of command
00:0000677E 60000E5C        	   643: 	BRA	QWHAT		; print "What?" if wrong
                            	   644: 
                            	   645: ;******************************************************************
                            	   646: ;
                            	   647: ; *** GOSUB *** & RETURN ***
                            	   648: ;
                            	   649: ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                            	   650: ; except that the current text pointer, stack pointer, etc. are
                            	   651: ; saved so that execution can be continued after the subroutine
                            	   652: ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                            	   653: ; recursive), the save area must be stacked.  The stack pointer
                            	   654: ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                            	   655: ; If we are in the main routine, 'STKGOS' is zero (this was done
                            	   656: ; in the initialization section of the interpreter), but we still
                            	   657: ; save it as a flag for no further 'RETURN's.
                            	   658: ;
                            	   659: ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                            	   660: ; returns the execution to the command after the most recent
                            	   661: ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                            	   662: ; a 'GOSUB' and is thus an error.
                            	   663: 
                            	   664: GOSUB:
00:00006782 4FEFFF80        	   665: 	sub.l #128,sp		; allocate storage for local variables
00:00006786 2F3A1260        	   666: 	move.l STKFP,-(sp)
00:0000678A 23CF000079E8    	   667: 	move.l sp,STKFP
00:00006790 61000FCC        	   668: 	bsr	PUSHA				; save the current 'FOR' parameters
00:00006794 6100062C        	   669: 	bsr	INT_EXPR		; get line number
00:00006798 2F08            	   670: 	MOVE.L	A0,-(SP)	save text pointer
00:0000679A 2200            	   671: 	move.l	d0,d1
00:0000679C 61000F32        	   672: 	bsr	FNDLN		find the target line
00:000067A0 66000E84        	   673: 	BNE	AHOW		if not there, say "How?"
00:000067A4 2F3A123E        	   674: 	MOVE.L	CURRNT,-(SP)	found it, save old 'CURRNT'...
00:000067A8 2F3A1242        	   675: 	MOVE.L	STKGOS,-(SP)	and 'STKGOS'
00:000067AC 42B9000079F4    	   676: 	CLR.L	LOPVAR		load new values
00:000067B2 23CF000079EC    	   677: 	MOVE.L	SP,STKGOS
00:000067B8 6000FEB0        	   678: 	BRA	RUNTSL
                            	   679: 
                            	   680: RETURN:
00:000067BC 61000E0C        	   681: 	bsr	ENDCHK					; there should be just a <CR>
00:000067C0 223A122A        	   682: 	MOVE.L	STKGOS,D1		; get old stack pointer
00:000067C4 67000E16        	   683: 	BEQ	QWHAT						; if zero, it doesn't exist
00:000067C8 2E41            	   684: 	MOVE.L	D1,SP				; else restore it
00:000067CA 23DF000079EC    	   685: 	MOVE.L	(SP)+,STKGOS	; and the old 'STKGOS'
00:000067D0 23DF000079E4    	   686: 	MOVE.L	(SP)+,CURRNT	; and the old 'CURRNT'
00:000067D6 205F            	   687: 	MOVE.L	(SP)+,A0		; and the old text pointer
00:000067D8 61000F48        	   688: 	bsr	POPA						; and the old 'FOR' parameters
                            	   689: ;	move.l STKFP,sp
00:000067DC 23DF000079E8    	   690: 	move.l (sp)+,STKFP
00:000067E2 4FEF0080        	   691: 	add.l #128,sp				; remove local variable storage
00:000067E6 6092            	   692: 	BRA	FINISH					; and we are back home
                            	   693: 
                            	   694: ;******************************************************************
                            	   695: ;
                            	   696: ; *** FOR *** & NEXT ***
                            	   697: ;
                            	   698: ; 'FOR' has two forms:
                            	   699: ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                            	   700: ; The second form means the same thing as the first form with a
                            	   701: ; STEP of positive 1.  The interpreter will find the variable 'var'
                            	   702: ; and set its value to the current value of 'exp1'.  It also
                            	   703: ; evaluates 'exp2' and 'exp1' and saves all these together with
                            	   704: ; the text pointer, etc. in the 'FOR' save area, which consisits of
                            	   705: ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                            	   706: ; already something in the save area (indicated by a non-zero
                            	   707: ; 'LOPVAR'), then the old save area is saved on the stack before
                            	   708: ; the new values are stored.  The interpreter will then dig in the
                            	   709: ; stack and find out if this same variable was used in another
                            	   710: ; currently active 'FOR' loop.  If that is the case, then the old
                            	   711: ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                            	   712: ;
                            	   713: ; 'NEXT var' serves as the logical (not necessarily physical) end
                            	   714: ; of the 'FOR' loop.  The control variable 'var' is checked with
                            	   715: ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                            	   716: ; the stack to find the right one and purges all those that didn't
                            	   717: ; match.  Either way, it then adds the 'STEP' to that variable and
                            	   718: ; checks the result with against the limit value.  If it is within
                            	   719: ; the limit, control loops back to the command following the
                            	   720: ; 'FOR'.  If it's outside the limit, the save area is purged and
                            	   721: ; execution continues.
                            	   722: 
                            	   723: FOR:
00:000067E8 61000F74        	   724: 	bsr	PUSHA			; save the old 'FOR' save area
00:000067EC 61000DA2        	   725: 	bsr	SETVAL		; set the control variable
00:000067F0 23CE000079F4    	   726: 	move.l a6,LOPVAR		; save its address
00:000067F6 43FAFC25        	   727: 	LEA	TAB5,A1 	; use 'EXEC' to test for 'TO'
00:000067FA 45FAFD14        	   728: 	LEA	TAB5_1,A2
00:000067FE 6000FD6C        	   729: 	BRA	EXEC
                            	   730: FR1	
00:00006802 610005B0        	   731: 	bsr	NUM_EXPR		; evaluate the limit
00:00006806 F239680000007A04	   732: 	FMOVE.X	FP0,LOPLMT	; save that
00:0000680E 43FAFC10        	   733: 	LEA	TAB6,A1 		; use 'EXEC' to look for the
00:00006812 45FAFD04        	   734: 	LEA	TAB6_1,A2		; word 'STEP'
00:00006816 6000FD54        	   735: 	BRA	EXEC
                            	   736: FR2
00:0000681A 61000598        	   737: 	bsr	NUM_EXPR		found it, get the step value
00:0000681E 6006            	   738: 	BRA	FR4
                            	   739: FR3
00:00006820 F23C58000001    	   740: 	FMOVE.B #1,FP0	; not found, step defaults to 1
                            	   741: FR4
00:00006826 F2396800000079F8	   742: 	FMOVE.X	FP0,LOPINC	save that too
                            	   743: FR5	
00:0000682E 23FA11B400007A10	   744: 	MOVE.L	CURRNT,LOPLN	save address of current line number
00:00006836 23C800007A14    	   745: 	MOVE.L	A0,LOPPT	and text pointer
00:0000683C 2C4F            	   746: 	MOVE.L	SP,A6		dig into the stack to find 'LOPVAR'
00:0000683E 600C            	   747: 	BRA	FR7
                            	   748: FR6
00:00006840 4DEE0024        	   749: 	lea 36(a6),a6			; look at next stack frame
00:00006844 BDFAF9A4        	   750: 	cmp.l ENDMEM,a6		; safety check
00:00006848 64000D92        	   751: 	bhs QWHAT
                            	   752: FR7
00:0000684C 2016            	   753: 	MOVE.L	(A6),D0 	; is it zero?
00:0000684E 6714            	   754: 	BEQ	FR8						; if so, we're done
00:00006850 B0BA11A2        	   755: 	CMP.L	LOPVAR,D0		; same as current LOPVAR?
00:00006854 66EA            	   756: 	BNE	FR6						; nope, look some more
00:00006856 244F            	   757: 	MOVE.L	SP,A2			; Else remove 9 long words from...
00:00006858 224E            	   758: 	MOVE.L	A6,A1			; inside the stack.
00:0000685A 47E90024        	   759: 	lea	36(a1),a3
00:0000685E 61000EBA        	   760: 	bsr	MVDOWN
00:00006862 2E4B            	   761: 	MOVE.L	A3,SP		set the SP 9 long words up
                            	   762: FR8
00:00006864 6000FF14        	   763: 	BRA	FINISH		and continue execution
                            	   764: 
                            	   765: NEXT	
00:00006868 610009E4        	   766: 	bsr	TSTV						; get address of variable
00:0000686C 65000D6E        	   767: 	bcs	QWHAT						; if no variable, say "What?"
00:00006870 2240            	   768: 	move.l d0,a1				; save variable's address
                            	   769: NX0
00:00006872 203A1180        	   770: 	move.l LOPVAR,D0		; If 'LOPVAR' is zero, we never...
00:00006876 67000D64        	   771: 	beq	QWHAT						; had a FOR loop, so say "What?"
00:0000687A B3C0            	   772: 	cmp.l	d0,a1					; else we check them
00:0000687C 6706            	   773: 	beq	NX3							; OK, they agree
00:0000687E 61000EA2        	   774: 	bsr	POPA						; nope, let's see the next frame
00:00006882 60EE            	   775: 	bra	NX0
                            	   776: NX3	
00:00006884 F22948000004    	   777: 	fmove.x	4(a1),fp0		; get control variable's value
00:0000688A F23A4822116A    	   778: 	fadd.x LOPINC,fp0		; add in loop increment
                            	   779: ;	BVS	QHOW		say "How?" for 32-bit overflow
00:00006890 F22968000004    	   780: 	fmove.x	fp0,4(a1)		; save control variable's new value
00:00006896 F23A4880116A    	   781: 	fmove.x	LOPLMT,fp1	; get loop's limit value
00:0000689C F23A503A1158    	   782: 	ftst LOPINC
00:000068A2 F293000E        	   783: 	FBGE NX1				; branch if loop increment is positive
00:000068A6 F2276800        	   784: 	FMOVE.X FP0,-(a7)	; exchange FP0,FP1
00:000068AA F2000400        	   785: 	FMOVE.X FP1,FP0
00:000068AE F21F4880        	   786: 	FMOVE.X (a7)+,FP1
                            	   787: NX1	
00:000068B2 F20000B8        	   788: 	FCMP FP0,FP1		;	test against limit
00:000068B6 F2940012        	   789: 	FBLT NX2				; branch if outside limit
00:000068BA 23FA1154000079E4	   790: 	MOVE.L LOPLN,CURRNT	Within limit, go back to the...
00:000068C2 207A1150        	   791: 	MOVE.L LOPPT,A0	saved 'CURRNT' and text pointer.
00:000068C6 6000FEB2        	   792: 	BRA	FINISH
                            	   793: NX2
00:000068CA 61000E56        	   794: 	bsr	POPA		purge this loop
00:000068CE 6000FEAA        	   795: 	BRA	FINISH
                            	   796: 
                            	   797: *******************************************************************
                            	   798: *
                            	   799: * *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                            	   800: *
                            	   801: * 'REM' can be followed by anything and is ignored by the
                            	   802: * interpreter.
                            	   803: *
                            	   804: * 'IF' is followed by an expression, as a condition and one or
                            	   805: * more commands (including other 'IF's) separated by colons.
                            	   806: * Note that the word 'THEN' is not used.  The interpreter evaluates
                            	   807: * the expression.  If it is non-zero, execution continues.  If it
                            	   808: * is zero, the commands that follow are ignored and execution
                            	   809: * continues on the next line.
                            	   810: *
                            	   811: * 'INPUT' is like the 'PRINT' command, and is followed by a list
                            	   812: * of items.  If the item is a string in single or double quotes,
                            	   813: * or is an underline (back arrow), it has the same effect as in
                            	   814: * 'PRINT'.  If an item is a variable, this variable name is
                            	   815: * printed out followed by a colon, then the interpreter waits for
                            	   816: * an expression to be typed in.  The variable is then set to the
                            	   817: * value of this expression.  If the variable is preceeded by a
                            	   818: * string (again in single or double quotes), the string will be
                            	   819: * displayed followed by a colon.  The interpreter the waits for an
                            	   820: * expression to be entered and sets the variable equal to the
                            	   821: * expression's value.  If the input expression is invalid, the
                            	   822: * interpreter will print "What?", "How?", or "Sorry" and reprint
                            	   823: * the prompt and redo the input.  The execution will not terminate
                            	   824: * unless you press control-C.  This is handled in 'INPERR'.
                            	   825: *
                            	   826: * 'LET' is followed by a list of items separated by commas.
                            	   827: * Each item consists of a variable, an equals sign, and an
                            	   828: * expression.  The interpreter evaluates the expression and sets
                            	   829: * the variable to that value.  The interpreter will also handle
                            	   830: * 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                            	   831: 
                            	   832: REM
00:000068D2 600A            	   833: 	BRA	IF2		skip the rest of the line
                            	   834: 
                            	   835: IF
00:000068D4 610004EC        	   836: 	bsr	INT_EXPR		evaluate the expression
                            	   837: IF1
00:000068D8 4A80            	   838: 	TST.L	d0		is it zero?
00:000068DA 6600FD98        	   839: 	BNE	RUNSML		if not, continue
                            	   840: IF2
00:000068DE 2248            	   841: 	MOVE.L	A0,A1
00:000068E0 7200            	   842: 	CLR.L	D1
00:000068E2 61000E14        	   843: 	bsr	FNDSKP		if so, skip the rest of the line
00:000068E6 6400FD82        	   844: 	BCC	RUNTSL		and run the next line
00:000068EA 6000F96E        	   845: 	BRA	WSTART		if no next line, do a warm start
                            	   846: 
00:000068EE 2E7A1100        	   847: INPERR	MOVE.L	STKINP,SP	restore the old stack pointer
00:000068F2 23DF000079E4    	   848: 	MOVE.L	(SP)+,CURRNT	and old 'CURRNT'
00:000068F8 588F            	   849: 	ADDQ.L	#4,SP
00:000068FA 205F            	   850: 	MOVE.L	(SP)+,A0	and old text pointer
                            	   851: 
                            	   852: INPUT	
00:000068FC 2F08            	   853: 	MOVE.L	A0,-(SP)	save in case of error
00:000068FE 610004D4        	   854: 	bsr EXPR
00:00006902 0C000002        	   855: 	cmpi.b #DT_STRING,d0
00:00006906 6622            	   856: 	bne IP6
00:00006908 F239680000040600	   857: 	fmove.x fp0,_fpWork
00:00006910 323900040600    	   858: 	move.w _fpWork,d1
00:00006916 227900040604    	   859: 	move.l _fpWork+4,a1
00:0000691C 61000E98        	   860: 	bsr PRTSTR2
                            	   861: ;	bsr	QTSTG		is next item a string?
                            	   862: ;	BRA.S	IP2		nope
                            	   863: IP7
00:00006920 6100092C        	   864: 	bsr	TSTV		yes, but is it followed by a variable?
00:00006924 655C            	   865: 	BCS	IP4		if not, branch
00:00006926 2440            	   866: 	MOVE.L	D0,A2		put away the variable's address
00:00006928 601E            	   867: 	BRA	IP3		if so, input to variable
                            	   868: IP6
00:0000692A 2057            	   869: 	move.l (sp),a0	; restore text pointer
00:0000692C 60F2            	   870: 	bra IP7
                            	   871: IP2
00:0000692E 2F08            	   872: 	MOVE.L	A0,-(SP)	save for 'PRTSTG'
00:00006930 6100091C        	   873: 	bsr	TSTV		must be a variable now
00:00006934 65000CA6        	   874: 	BCS	QWHAT		"What?" it isn't?
00:00006938 2440            	   875: 	MOVE.L	D0,A2		put away the variable's address
00:0000693A 1410            	   876: 	MOVE.B	(A0),D2 	get ready for 'PRTSTG'
00:0000693C 4200            	   877: 	CLR.B	D0
00:0000693E 1080            	   878: 	MOVE.B	D0,(A0)
00:00006940 225F            	   879: 	MOVE.L	(SP)+,A1
00:00006942 61000E50        	   880: 	bsr	PRTSTG		print string as prompt
00:00006946 1082            	   881: 	MOVE.B	D2,(A0) 	restore text
                            	   882: IP3
00:00006948 2F08            	   883: 	MOVE.L	A0,-(SP)	save in case of error
00:0000694A 2F3A1098        	   884: 	MOVE.L	CURRNT,-(SP)	also save 'CURRNT'
00:0000694E 23FCFFFFFFFF0000	   885: 	MOVE.L	#-1,CURRNT	flag that we are in INPUT
00:00006956 79E4
00:00006958 23CF000079F0    	   886: 	MOVE.L	SP,STKINP	save the stack pointer too
00:0000695E 2F0A            	   887: 	MOVE.L	A2,-(SP)	save the variable address
00:00006960 103C003A        	   888: 	MOVE.B	#':',D0         print a colon first
00:00006964 61000CCC        	   889: 	bsr	GETLN		then get an input line
00:00006968 41FA10D2        	   890: 	LEA	BUFFER,A0	point to the buffer
00:0000696C 61000466        	   891: 	bsr	EXPR		evaluate the input
00:00006970 245F            	   892: 	MOVE.L	(SP)+,A2	restore the variable address
00:00006972 2480            	   893: 	move.l d0,(a2)			; save data type
00:00006974 F22A68000004    	   894: 	FMOVE.X	FP0,4(A2) 	; save value in variable
00:0000697A 23DF000079E4    	   895: 	MOVE.L	(SP)+,CURRNT	restore old 'CURRNT'
00:00006980 205F            	   896: 	MOVE.L	(SP)+,A0	and the old text pointer
                            	   897: IP4
00:00006982 588F            	   898: 	ADDQ.L	#4,SP		clean up the stack
00:00006984 61000E9E        	   899: 	bsr	TSTC		is the next thing a comma?
00:00006988 2C              	   900: 	DC.B	',',IP5-*
00:00006989 05
00:0000698A 6000FF70        	   901: 	BRA	INPUT		yes, more items
                            	   902: IP5
00:0000698E 6000FDEA        	   903: 	BRA	FINISH
                            	   904: 
                            	   905: DEFLT
00:00006992 0C10000D        	   906: 	CMP.B	#CR,(A0)	; empty line is OK
00:00006996 6700FDE2        	   907: 	BEQ	FINISH			; else it is 'LET'
                            	   908: 
                            	   909: LET
00:0000699A 61000BF4        	   910: 	bsr	SETVAL		 	; do the assignment
00:0000699E 61000E84        	   911: 	bsr	TSTC				; check for more 'LET' items
00:000069A2 2C              	   912: 	DC.B	',',LT1-*
00:000069A3 03
00:000069A4 60F4            	   913: 	BRA	LET
                            	   914: LT1
00:000069A6 6000FDD2        	   915: 	BRA	FINISH			; until we are finished.
                            	   916: 
                            	   917: 
                            	   918: *******************************************************************
                            	   919: *
                            	   920: * *** LOAD *** & SAVE ***
                            	   921: *
                            	   922: * These two commands transfer a program to/from an auxiliary
                            	   923: * device such as a cassette, another computer, etc.  The program
                            	   924: * is converted to an easily-stored format: each line starts with
                            	   925: * a colon, the line no. as 4 hex digits, and the rest of the line.
                            	   926: * At the end, a line starting with an '@' sign is sent.  This
                            	   927: * format can be read back with a minimum of processing time by
                            	   928: * the 68000.
                            	   929: *
                            	   930: LOAD	
00:000069AA 207AF83A        	   931: 	MOVE.L TXTBGN,A0	set pointer to start of prog. area
00:000069AE 103C000D        	   932: 	MOVE.B #CR,D0		For a CP/M host, tell it we're ready...
00:000069B2 6100F826        	   933: 	BSR	GOAUXO		by sending a CR to finish PIP command.
                            	   934: LOD1	
00:000069B6 6100F826        	   935: 	BSR	GOAUXI		look for start of line
00:000069BA 67FA            	   936: 	BEQ	LOD1
00:000069BC B03C0040        	   937: 	CMP.B	#'@',D0         end of program?
00:000069C0 671E            	   938: 	BEQ	LODEND
00:000069C2 B03C003A        	   939: 	CMP.B	#':',D0         if not, is it start of line?
00:000069C6 66EE            	   940: 	BNE	LOD1		if not, wait for it
00:000069C8 6120            	   941: 	BSR	GBYTE		get first byte of line no.
00:000069CA 10C1            	   942: 	MOVE.B	D1,(A0)+	store it
00:000069CC 611C            	   943: 	BSR	GBYTE		get 2nd bye of line no.
00:000069CE 10C1            	   944: 	MOVE.B	D1,(A0)+	store that, too
                            	   945: LOD2
00:000069D0 6100F80C        	   946: 	BSR	GOAUXI		get another text char.
00:000069D4 67FA            	   947: 	BEQ	LOD2
00:000069D6 10C0            	   948: 	MOVE.B	D0,(A0)+	store it
00:000069D8 B03C000D        	   949: 	CMP.B	#CR,D0		is it the end of the line?
00:000069DC 66F2            	   950: 	BNE	LOD2		if not, go back for more
00:000069DE 60D6            	   951: 	BRA	LOD1		if so, start a new line
                            	   952: LODEND
00:000069E0 23C800007A2C    	   953: 	MOVE.L	A0,TXTUNF	set end-of program pointer
00:000069E6 6000F872        	   954: 	BRA	WSTART		back to direct mode
                            	   955: 
                            	   956: GBYTE
00:000069EA 7401            	   957: 	MOVEQ	#1,D2		get two hex characters from auxiliary
00:000069EC 7200            	   958: 	CLR.L	D1		and store them as a byte in D1
                            	   959: GBYTE1	
00:000069EE 6100F7EE        	   960: 	BSR	GOAUXI		get a char.
00:000069F2 67FA            	   961: 	BEQ	GBYTE1
00:000069F4 B03C0041        	   962: 	CMP.B	#'A',D0
00:000069F8 6502            	   963: 	BCS	GBYTE2
00:000069FA 5F00            	   964: 	SUBQ.B	#7,D0		if greater than 9, adjust
                            	   965: GBYTE2
00:000069FC C03C000F        	   966: 	AND.B	#$F,D0		strip ASCII
00:00006A00 E909            	   967: 	LSL.B	#4,D1		put nybble into the result
00:00006A02 8200            	   968: 	OR.B	D0,D1
00:00006A04 51CAFFE8        	   969: 	DBRA	D2,GBYTE1	get another char.
00:00006A08 4E75            	   970: 	RTS
                            	   971: 
                            	   972: SAVE
00:00006A0A 207AF7DA        	   973: 	MOVE.L	TXTBGN,A0	set pointer to start of prog. area
00:00006A0E 227A101C        	   974: 	MOVE.L	TXTUNF,A1	set pointer to end of prog. area
                            	   975: SAVE1	
00:00006A12 103C000D        	   976: 	MOVE.B	#CR,D0		send out a CR & LF (CP/M likes this)
00:00006A16 6100F7C2        	   977: 	BSR	GOAUXO
00:00006A1A 103C000A        	   978: 	MOVE.B	#LF,D0
00:00006A1E 6100F7BA        	   979: 	BSR	GOAUXO
00:00006A22 B3C8            	   980: 	CMP.L	A0,A1		are we finished?
00:00006A24 631E            	   981: 	BLS	SAVEND
00:00006A26 103C003A        	   982: 	MOVE.B	#':',D0         if not, start a line
00:00006A2A 6100F7AE        	   983: 	BSR	GOAUXO
00:00006A2E 1218            	   984: 	MOVE.B	(A0)+,D1	send first half of line no.
00:00006A30 6136            	   985: 	BSR	PBYTE
00:00006A32 1218            	   986: 	MOVE.B	(A0)+,D1	and send 2nd half
00:00006A34 6132            	   987: 	BSR	PBYTE
                            	   988: SAVE2
00:00006A36 1018            	   989: 	MOVE.B	(A0)+,D0	get a text char.
00:00006A38 B03C000D        	   990: 	CMP.B	#CR,D0		is it the end of the line?
00:00006A3C 67D4            	   991: 	BEQ	SAVE1		if so, send CR & LF and start new line
00:00006A3E 6100F79A        	   992: 	BSR	GOAUXO		send it out
00:00006A42 60F2            	   993: 	BRA	SAVE2		go back for more text
                            	   994: SAVEND
00:00006A44 103C0040        	   995: 	MOVE.B	#'@',D0         send end-of-program indicator
00:00006A48 6100F790        	   996: 	BSR	GOAUXO
00:00006A4C 103C000D        	   997: 	MOVE.B	#CR,D0		followed by a CR & LF
00:00006A50 6100F788        	   998: 	BSR	GOAUXO
00:00006A54 103C000A        	   999: 	MOVE.B	#LF,D0
00:00006A58 6100F780        	  1000: 	BSR	GOAUXO
00:00006A5C 103C001A        	  1001: 	MOVE.B	#$1A,D0 	and a control-Z to end the CP/M file
00:00006A60 6100F778        	  1002: 	BSR	GOAUXO
00:00006A64 6000F7F4        	  1003: 	BRA	WSTART		then go do a warm start
                            	  1004: 
00:00006A68 7401            	  1005: PBYTE	MOVEQ	#1,D2		send two hex characters from D1's low byte
00:00006A6A E919            	  1006: PBYTE1	ROL.B	#4,D1		get the next nybble
00:00006A6C 1001            	  1007: 	MOVE.B	D1,D0
00:00006A6E C03C000F        	  1008: 	AND.B	#$F,D0		strip off garbage
00:00006A72 D03C0030        	  1009: 	ADD.B	#'0',D0         make it into ASCII
00:00006A76 B03C0039        	  1010: 	CMP.B	#'9',D0
00:00006A7A 6302            	  1011: 	BLS	PBYTE2
00:00006A7C 5E00            	  1012: 	ADDQ.B	#7,D0		adjust if greater than 9
00:00006A7E 6100F75A        	  1013: PBYTE2	BSR	GOAUXO		send it out
00:00006A82 51CAFFE6        	  1014: 	DBRA	D2,PBYTE1	then send the next nybble
00:00006A86 4E75            	  1015: 	RTS
                            	  1016: 
                            	  1017: *******************************************************************
                            	  1018: *
                            	  1019: * *** POKE *** & CALL ***
                            	  1020: *
                            	  1021: * 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                            	  1022: * address specified by 'expr1'.
                            	  1023: *
                            	  1024: * 'CALL expr' jumps to the machine language subroutine whose
                            	  1025: * starting address is specified by 'expr'.  The subroutine can use
                            	  1026: * all registers but must leave the stack the way it found it.
                            	  1027: * The subroutine returns to the interpreter by executing an RTS.
                            	  1028: *
                            	  1029: POKE
00:00006A88 1E3C0042        	  1030: 	move.b #'B',d7
00:00006A8C 1210            	  1031: 	move.b (a0),d1
00:00006A8E 0C01002E        	  1032: 	cmpi.b #'.',d1
00:00006A92 6620            	  1033: 	bne .0001
00:00006A94 5248            	  1034: 	addq #1,a0
00:00006A96 1210            	  1035: 	move.b (a0),d1
00:00006A98 0C010042        	  1036: 	cmpi.b #'B',d1
00:00006A9C 6712            	  1037: 	beq .0002
00:00006A9E 0C010057        	  1038: 	cmpi.b #'W',d1
00:00006AA2 670C            	  1039: 	beq .0002
00:00006AA4 0C01004C        	  1040: 	cmpi.b #'L',d1
00:00006AA8 6706            	  1041: 	beq .0002
00:00006AAA 0C010046        	  1042: 	cmpi.b #'F',d1
00:00006AAE 664E            	  1043: 	bne	PKER
                            	  1044: .0002
00:00006AB0 5248            	  1045: 	addq #1,a0
00:00006AB2 1E01            	  1046: 	move.b d1,d7
                            	  1047: .0001
00:00006AB4 6100030C        	  1048: 	BSR	INT_EXPR		get the memory address
00:00006AB8 61000D6A        	  1049: 	bsr	TSTC		it must be followed by a comma
00:00006ABC 2C              	  1050: 	DC.B	',',PKER-*
00:00006ABD 41
00:00006ABE 2F00            	  1051: 	move.l d0,-(sp)		; save the address
00:00006AC0 610002F2        	  1052: 	BSR	NUM_EXPR			; get the value to be POKE'd
00:00006AC4 225F            	  1053: 	move.l	(sp)+,a1	; get the address back
00:00006AC6 0C070042        	  1054: 	CMPI.B #'B',D7
00:00006ACA 6608            	  1055: 	BNE .0003
00:00006ACC F2117800        	  1056: 	FMOVE.B	FP0,(A1) 	store the byte in memory
00:00006AD0 6000FCA8        	  1057: 	BRA	FINISH
                            	  1058: .0003
00:00006AD4 0C070057        	  1059: 	CMPI.B #'W',d7
00:00006AD8 6608            	  1060: 	BNE .0004
00:00006ADA F2117000        	  1061: 	FMOVE.W FP0,(A1)
00:00006ADE 6000FC9A        	  1062: 	BRA FINISH
                            	  1063: .0004
00:00006AE2 0C07004C        	  1064: 	CMPI.B #'L',D7
00:00006AE6 6608            	  1065: 	BNE .0005
00:00006AE8 F2116000        	  1066: 	FMOVE.L FP0,(A1)
00:00006AEC 6000FC8C        	  1067: 	BRA FINISH
                            	  1068: .0005
00:00006AF0 0C070046        	  1069: 	CMPI.B #'F',D7
00:00006AF4 6608            	  1070: 	BNE .0006
00:00006AF6 F2116800        	  1071: 	FMOVE.X FP0,(A1)
00:00006AFA 6000FC7E        	  1072: 	BRA FINISH
                            	  1073: .0006
                            	  1074: PKER
00:00006AFE 60000ADC        	  1075: 	BRA	QWHAT		if no comma, say "What?"
                            	  1076: 
                            	  1077: CALL	
00:00006B02 610002BE        	  1078: 	BSR	INT_EXPR		; get the subroutine's address
00:00006B06 4A80            	  1079: 	TST.l d0				; make sure we got a valid address
00:00006B08 67000B1A        	  1080: 	BEQ QHOW				; if not, say "How?"
00:00006B0C 2F08            	  1081: 	MOVE.L A0,-(SP)	; save the text pointer
00:00006B0E 2240            	  1082: 	MOVE.L D0,A1
00:00006B10 4E91            	  1083: 	JSR	(A1)				; jump to the subroutine
00:00006B12 205F            	  1084: 	MOVE.L (SP)+,A0	; restore the text pointer
00:00006B14 6000FC64        	  1085: 	BRA	FINISH
                            	  1086: 
                            	  1087: ;******************************************************************
                            	  1088: ; Graphics commands:
                            	  1089: ;		DRAWBUF - which buffer to draw to (0 or 1)
                            	  1090: ;		DISPBUF - which buffer to display (0 or 1)
                            	  1091: ;		POINT - plot point
                            	  1092: ;		LINE	- draw line
                            	  1093: ;		RECT	- draw rectangle
                            	  1094: ;		TRI		- draw triangle
                            	  1095: ;		CURVE	- draw curve
                            	  1096: ;
                            	  1097: ;		LINE x1,y1,x2,y2
                            	  1098: ;		TRI x1,y1,x2,y2,x3,y3
                            	  1099: ; RECT specifies a point then width and height
                            	  1100: ;		RECT x1,y1,width,height
                            	  1101: ; Color depth may be specified
                            	  1102: ;		COLOR DEPTH	8		; specifies 24-bits for color
                            	  1103: ;		COLOR 16711680	; color RED in 24-bit color
                            	  1104: ;		COLOR 31744			; color RED in 16-bit color (color depth 5)
                            	  1105: ;
                            	  1106: ; Other:
                            	  1107: ;		CLEAR <device>	- useful for clearing the graphics screen
                            	  1108: ;											device #7
                            	  1109: ;******************************************************************
                            	  1110: 
                            	  1111: CLEAR:
00:00006B18 610002A8        	  1112: 	bsr INT_EXPR
00:00006B1C 2E00            	  1113: 	move.l d0,d7
00:00006B1E 7C0C            	  1114: 	moveq #DEV_CLEAR,d6
00:00006B20 4E40            	  1115: 	trap #0
00:00006B22 6000FC56        	  1116: 	bra FINISH
                            	  1117: 
                            	  1118: TEXT:
00:00006B26 6100029A        	  1119: 	bsr INT_EXPR
00:00006B2A 61000CF8        	  1120: 	bsr	TSTC					; it must be followed by a comma
00:00006B2E 2C              	  1121: 	dc.b	',',TEXTERR-*
00:00006B2F 27
00:00006B30 2F00            	  1122: 	move.l d0,-(sp)
00:00006B32 6100028E        	  1123: 	bsr INT_EXPR
00:00006B36 2400            	  1124: 	move.l d0,d2
00:00006B38 221F            	  1125: 	move.l (sp)+,d1
00:00006B3A 13C20004008C    	  1126: 	move.b d2,TextRows
00:00006B40 13C10004008D    	  1127: 	move.b d1,TextCols
00:00006B46 13C1FD080000    	  1128: 	move.b d1,TEXTREG+0	; set columns
00:00006B4C 13C2FD080001    	  1129: 	move.b d2,TEXTREG+1	; set rows
00:00006B52 60000DA6        	  1130: 	bra CLS
                            	  1131: TEXTERR
00:00006B56 60000A84        	  1132: 	bra QWHAT
                            	  1133: 
                            	  1134: DRAWBUF:
00:00006B5A 61000266        	  1135: 	bsr INT_EXPR
00:00006B5E 7E07            	  1136: 	moveq #7,d7
00:00006B60 7C22            	  1137: 	moveq #DEV_SET_DESTBUF,d6
00:00006B62 2200            	  1138: 	move.l d0,d1
00:00006B64 4E40            	  1139: 	trap #0
00:00006B66 6000FC12        	  1140: 	bra FINISH
                            	  1141: 	
                            	  1142: DISPBUF:
00:00006B6A 61000256        	  1143: 	bsr INT_EXPR
00:00006B6E 7E06            	  1144: 	moveq #6,d7
00:00006B70 7C23            	  1145: 	moveq #DEV_SET_DISPBUF,d6
00:00006B72 2200            	  1146: 	move.l d0,d1
00:00006B74 4E40            	  1147: 	trap #0
00:00006B76 6000FC02        	  1148: 	bra FINISH
                            	  1149: 
                            	  1150: ; COLOR DEPTH <bits per color component>	- value between 0 and 10
                            	  1151: ; To enhance draw performance the resulting color is rounded to a byte aligned
                            	  1152: ; value for the following color depths:
                            	  1153: ; 10 results in 32 bpp color	(4 bytes of memory per color)
                            	  1154: ;	 8 results in 24 bpp color	(3 bytes of memory per color)
                            	  1155: ;  5 results in 16 bpp color	(2 bytes of memory per color)
                            	  1156: ;  2 results in  8 bpp color	(1 byte of memory per color)
                            	  1157: ;  0 results in  8 bpp color	(1 byte of memory per color)
                            	  1158: ; for other values the bpp is 3x the color depth (drawing is slower)
                            	  1159: 
                            	  1160: COLOR:
00:00006B7A 43FAF8C0        	  1161: 	lea	TAB12,A1 			; use 'EXEC' to look for the
00:00006B7E 45FAF9D4        	  1162: 	lea	TAB12_1,A2		; word 'DEPTH'
00:00006B82 6000F9E8        	  1163: 	bra	EXEC
                            	  1164: COLOR1
00:00006B86 6100023A        	  1165: 	bsr INT_EXPR
00:00006B8A 0C800000000A    	  1166: 	cmpi.l #10,d0
00:00006B90 62000A4A        	  1167: 	bhi QWHAT
00:00006B94 2200            	  1168: 	move.l d0,d1
00:00006B96 E988            	  1169: 	lsl.l #4,d0
00:00006B98 8081            	  1170: 	or.l d1,d0
00:00006B9A E988            	  1171: 	lsl.l #4,d0
00:00006B9C 8081            	  1172: 	or.l d1,d0
00:00006B9E 0C01000A        	  1173: 	cmpi.b #10,d1
00:00006BA2 6606            	  1174: 	bne.s .0001
00:00006BA4 807C2000        	  1175: 	or.w #$2000,d0
00:00006BA8 6020            	  1176: 	bra.s .0002
                            	  1177: .0001
00:00006BAA 0C010005        	  1178: 	cmpi.b #5,d1
00:00006BAE 6606            	  1179: 	bne.s .0003
00:00006BB0 807C1000        	  1180: 	or.w #$1000,d0
00:00006BB4 6014            	  1181: 	bra.s .0002
                            	  1182: .0003
00:00006BB6 0C010002        	  1183: 	cmpi.b #2,d1
00:00006BBA 6606            	  1184: 	bne.s .0004
00:00006BBC 807C2000        	  1185: 	or.w #$2000,d0
00:00006BC0 6008            	  1186: 	bra.s .0002
                            	  1187: .0004
00:00006BC2 4A01            	  1188: 	tst.b d1
00:00006BC4 6604            	  1189: 	bne.s .0002
00:00006BC6 303C2222        	  1190: 	move.w #$2222,d0
                            	  1191: .0002
00:00006BCA 7E07            	  1192: 	moveq #7,d7
00:00006BCC 7C21            	  1193: 	moveq #DEV_SET_COLOR_DEPTH,d6
00:00006BCE 2200            	  1194: 	move.l d0,d1
00:00006BD0 4E40            	  1195: 	trap #0
00:00006BD2 7E06            	  1196: 	moveq #6,d7
00:00006BD4 4E40            	  1197: 	trap #0
00:00006BD6 6000FBA2        	  1198: 	bra FINISH
                            	  1199: 
                            	  1200: COLOR2
00:00006BDA 610001E6        	  1201: 	bsr INT_EXPR
00:00006BDE 2200            	  1202: 	move.l d0,d1
00:00006BE0 7E07            	  1203: 	moveq #7,d7						; graphics accelerator
00:00006BE2 7C19            	  1204: 	moveq #DEV_SET_COLOR,d6
00:00006BE4 4E40            	  1205: 	trap #0
00:00006BE6 7E06            	  1206: 	moveq #6,d7						; frame buffer
00:00006BE8 4E40            	  1207: 	trap #0
00:00006BEA 6000FB8E        	  1208: 	bra FINISH
                            	  1209: 
                            	  1210: ; POINT <x, y>	- draws a point in the current color
                            	  1211: 
                            	  1212: POINT:
00:00006BEE 610001D2        	  1213: 	bsr INT_EXPR
00:00006BF2 61000C30        	  1214: 	bsr	TSTC		it must be followed by a comma
00:00006BF6 2C              	  1215: 	dc.b	',',POINTERR-*
00:00006BF7 19
00:00006BF8 2F00            	  1216: 	move.l d0,-(sp)
00:00006BFA 610001C6        	  1217: 	bsr INT_EXPR
00:00006BFE 2400            	  1218: 	move.l d0,d2
00:00006C00 221F            	  1219: 	move.l (sp)+,d1
00:00006C02 4841            	  1220: 	swap d1
00:00006C04 4842            	  1221: 	swap d2
00:00006C06 7E07            	  1222: 	moveq #7,d7
00:00006C08 7C1B            	  1223: 	moveq #DEV_PLOT_POINT,d6
00:00006C0A 4E40            	  1224: 	trap #0
00:00006C0C 6000FB6C        	  1225: 	bra FINISH
                            	  1226: POINTERR
00:00006C10 600009CA        	  1227: 	bra QWHAT
                            	  1228: 
                            	  1229: ; LINE <x1,y1,x2,y2>	- draws a line in the current color
                            	  1230: 
                            	  1231: LINE:
00:00006C14 610001AC        	  1232: 	bsr INT_EXPR
00:00006C18 61000C0A        	  1233: 	bsr	TSTC							; it must be followed by a comma
00:00006C1C 2C              	  1234: 	dc.b	',',LINEERR-*
00:00006C1D 39
00:00006C1E 2F00            	  1235: 	move.l d0,-(sp)
00:00006C20 610001A0        	  1236: 	bsr INT_EXPR
00:00006C24 61000BFE        	  1237: 	bsr	TSTC							; it must be followed by a comma
00:00006C28 2C              	  1238: 	dc.b	',',LINEERR1-*
00:00006C29 31
00:00006C2A 2F00            	  1239: 	move.l d0,-(sp)	
00:00006C2C 61000194        	  1240: 	bsr INT_EXPR
00:00006C30 61000BF2        	  1241: 	bsr	TSTC							; it must be followed by a comma
00:00006C34 2C              	  1242: 	dc.b	',',LINEERR2-*
00:00006C35 2B
00:00006C36 2F00            	  1243: 	move.l d0,-(sp)
00:00006C38 61000188        	  1244: 	bsr INT_EXPR
00:00006C3C 2800            	  1245: 	move.l d0,d4
00:00006C3E 4844            	  1246: 	swap d4
00:00006C40 261F            	  1247: 	move.l (sp)+,d3
00:00006C42 4843            	  1248: 	swap d3
00:00006C44 241F            	  1249: 	move.l (sp)+,d2
00:00006C46 4842            	  1250: 	swap d2
00:00006C48 221F            	  1251: 	move.l (sp)+,d1	
00:00006C4A 4841            	  1252: 	swap d1
00:00006C4C 7E07            	  1253: 	moveq #7,d7
00:00006C4E 7C1C            	  1254: 	moveq #DEV_DRAW_LINE,d6
00:00006C50 4E40            	  1255: 	trap #0
00:00006C52 6000FB26        	  1256: 	bra FINISH
                            	  1257: LINEERR
00:00006C56 60000984        	  1258: 	bra QWHAT
                            	  1259: LINEERR1
00:00006C5A 588F            	  1260: 	add.l #4,sp
00:00006C5C 6000097E        	  1261: 	bra QWHAT
                            	  1262: LINEERR2
00:00006C60 508F            	  1263: 	add.l #8,sp
00:00006C62 60000978        	  1264: 	bra QWHAT
                            	  1265: 
                            	  1266: RECT:
00:00006C66 6100015A        	  1267: 	bsr INT_EXPR
00:00006C6A 61000BB8        	  1268: 	bsr	TSTC							; it must be followed by a comma
00:00006C6E 2C              	  1269: 	DC.B	',',LINEERR-*
00:00006C6F E7
00:00006C70 2F00            	  1270: 	move.l d0,-(sp)
00:00006C72 6100014E        	  1271: 	bsr INT_EXPR
00:00006C76 61000BAC        	  1272: 	bsr	TSTC							; it must be followed by a comma
00:00006C7A 2C              	  1273: 	DC.B	',',LINEERR1-*
00:00006C7B DF
00:00006C7C 2F00            	  1274: 	move.l d0,-(sp)	
00:00006C7E 61000142        	  1275: 	bsr INT_EXPR
00:00006C82 61000BA0        	  1276: 	bsr	TSTC							; it must be followed by a comma
00:00006C86 2C              	  1277: 	DC.B	',',LINEERR2-*
00:00006C87 D9
00:00006C88 2F00            	  1278: 	move.l d0,-(sp)
00:00006C8A 61000136        	  1279: 	bsr INT_EXPR
00:00006C8E 2800            	  1280: 	move.l d0,d4
00:00006C90 261F            	  1281: 	move.l (sp)+,d3
00:00006C92 241F            	  1282: 	move.l (sp)+,d2
00:00006C94 221F            	  1283: 	move.l (sp)+,d1
00:00006C96 D681            	  1284: 	add.l d1,d3
00:00006C98 D882            	  1285: 	add.l d2,d4	
00:00006C9A 4841            	  1286: 	swap d1
00:00006C9C 4842            	  1287: 	swap d2
00:00006C9E 4843            	  1288: 	swap d3
00:00006CA0 4844            	  1289: 	swap d4
00:00006CA2 7E07            	  1290: 	moveq #7,d7
00:00006CA4 7C1E            	  1291: 	moveq #DEV_DRAW_RECTANGLE,d6
00:00006CA6 4E40            	  1292: 	trap #0
00:00006CA8 6000FAD0        	  1293: 	bra FINISH
                            	  1294: 
                            	  1295: TRIANGLE:
00:00006CAC 61000114        	  1296: 	bsr INT_EXPR
00:00006CB0 61000B72        	  1297: 	bsr	TSTC							; it must be followed by a comma
00:00006CB4 2C              	  1298: 	DC.B	',',TRIERR-*
00:00006CB5 57
00:00006CB6 2F00            	  1299: 	move.l d0,-(sp)
00:00006CB8 61000108        	  1300: 	bsr INT_EXPR
00:00006CBC 61000B66        	  1301: 	bsr	TSTC							; it must be followed by a comma
00:00006CC0 2C              	  1302: 	DC.B	',',TRIERR1-*
00:00006CC1 4F
00:00006CC2 2F00            	  1303: 	move.l d0,-(sp)	
00:00006CC4 610000FC        	  1304: 	bsr INT_EXPR
00:00006CC8 61000B5A        	  1305: 	bsr	TSTC							; it must be followed by a comma
00:00006CCC 2C              	  1306: 	DC.B	',',TRIERR2-*
00:00006CCD 49
00:00006CCE 2F00            	  1307: 	move.l d0,-(sp)
00:00006CD0 610000F0        	  1308: 	bsr INT_EXPR
00:00006CD4 61000B4E        	  1309: 	bsr	TSTC							; it must be followed by a comma
00:00006CD8 2C              	  1310: 	DC.B	',',TRIERR3-*
00:00006CD9 43
00:00006CDA 2F00            	  1311: 	move.l d0,-(sp)
00:00006CDC 610000E4        	  1312: 	bsr INT_EXPR
00:00006CE0 61000B42        	  1313: 	bsr	TSTC							; it must be followed by a comma
00:00006CE4 2C              	  1314: 	DC.B	',',TRIERR4-*
00:00006CE5 3F
00:00006CE6 2F00            	  1315: 	move.l d0,-(sp)
00:00006CE8 610000D8        	  1316: 	bsr INT_EXPR
00:00006CEC 2A1F            	  1317: 	move.l (sp)+,d5
00:00006CEE 281F            	  1318: 	move.l (sp)+,d4
00:00006CF0 261F            	  1319: 	move.l (sp)+,d3
00:00006CF2 241F            	  1320: 	move.l (sp)+,d2
00:00006CF4 221F            	  1321: 	move.l (sp)+,d1
00:00006CF6 4841            	  1322: 	swap d1
00:00006CF8 4842            	  1323: 	swap d2
00:00006CFA 4843            	  1324: 	swap d3
00:00006CFC 4844            	  1325: 	swap d4
00:00006CFE 4845            	  1326: 	swap d5
00:00006D00 4840            	  1327: 	swap d0
00:00006D02 7E07            	  1328: 	moveq #7,d7
00:00006D04 7C1D            	  1329: 	moveq #DEV_DRAW_TRIANGLE,d6
00:00006D06 4E40            	  1330: 	trap #0
00:00006D08 6000FA70        	  1331: 	bra FINISH
                            	  1332: TRIERR
00:00006D0C 600008CE        	  1333: 	bra QWHAT
                            	  1334: TRIERR1
00:00006D10 588F            	  1335: 	add.l #4,sp
00:00006D12 600008C8        	  1336: 	bra QWHAT
                            	  1337: TRIERR2
00:00006D16 508F            	  1338: 	add.l #8,sp
00:00006D18 600008C2        	  1339: 	bra QWHAT
                            	  1340: TRIERR3
00:00006D1C 4FEF000C        	  1341: 	add.l #12,sp
00:00006D20 600008BA        	  1342: 	bra QWHAT
                            	  1343: TRIERR4
00:00006D24 4FEF0010        	  1344: 	add.l #16,sp
00:00006D28 600008B2        	  1345: 	bra QWHAT
                            	  1346: 
                            	  1347: CURVE:
00:00006D2C 61000094        	  1348: 	bsr INT_EXPR
00:00006D30 61000AF2        	  1349: 	bsr	TSTC							; it must be followed by a comma
00:00006D34 2C              	  1350: 	DC.B	',',TRIERR-*
00:00006D35 D7
00:00006D36 2F00            	  1351: 	move.l d0,-(sp)
00:00006D38 61000088        	  1352: 	bsr INT_EXPR
00:00006D3C 61000AE6        	  1353: 	bsr	TSTC							; it must be followed by a comma
00:00006D40 2C              	  1354: 	DC.B	',',TRIERR1-*
00:00006D41 CF
00:00006D42 2F00            	  1355: 	move.l d0,-(sp)	
00:00006D44 617C            	  1356: 	bsr INT_EXPR
00:00006D46 61000ADC        	  1357: 	bsr	TSTC							; it must be followed by a comma
00:00006D4A 2C              	  1358: 	DC.B	',',TRIERR2-*
00:00006D4B CB
00:00006D4C 2F00            	  1359: 	move.l d0,-(sp)
00:00006D4E 6172            	  1360: 	bsr INT_EXPR
00:00006D50 61000AD2        	  1361: 	bsr	TSTC							; it must be followed by a comma
00:00006D54 2C              	  1362: 	DC.B	',',TRIERR3-*
00:00006D55 C7
00:00006D56 2F00            	  1363: 	move.l d0,-(sp)
00:00006D58 6168            	  1364: 	bsr INT_EXPR
00:00006D5A 61000AC8        	  1365: 	bsr	TSTC							; it must be followed by a comma
00:00006D5E 2C              	  1366: 	DC.B	',',TRIERR4-*
00:00006D5F C5
00:00006D60 2F00            	  1367: 	move.l d0,-(sp)
00:00006D62 615E            	  1368: 	bsr INT_EXPR
00:00006D64 2A1F            	  1369: 	move.l (sp)+,d5
00:00006D66 281F            	  1370: 	move.l (sp)+,d4
00:00006D68 261F            	  1371: 	move.l (sp)+,d3
00:00006D6A 241F            	  1372: 	move.l (sp)+,d2
00:00006D6C 221F            	  1373: 	move.l (sp)+,d1
00:00006D6E 4841            	  1374: 	swap d1
00:00006D70 4842            	  1375: 	swap d2
00:00006D72 4843            	  1376: 	swap d3
00:00006D74 4844            	  1377: 	swap d4
00:00006D76 4845            	  1378: 	swap d5
00:00006D78 4840            	  1379: 	swap d0
00:00006D7A 7E07            	  1380: 	moveq #7,d7
00:00006D7C 7C1F            	  1381: 	moveq #DEV_DRAW_CURVE,d6
00:00006D7E 4E40            	  1382: 	trap #0
00:00006D80 6000F9F8        	  1383: 	bra FINISH
                            	  1384: 
                            	  1385: 	
                            	  1386: ;******************************************************************
                            	  1387: ;
                            	  1388: ; *** EXPR ***
                            	  1389: ;
                            	  1390: ; 'EXPR' evaluates arithmetical or logical expressions.
                            	  1391: ; <EXPR>::=<EXPR2>
                            	  1392: ;	   <EXPR2><rel.op.><EXPR2>
                            	  1393: ; where <rel.op.> is one of the operators in TAB8 and the result
                            	  1394: ; of these operations is 1 if true and 0 if false.
                            	  1395: ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                            	  1396: ; where () are optional and (... are optional repeats.
                            	  1397: ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                            	  1398: ; <EXPR4>::=<variable>
                            	  1399: ;	    <function>
                            	  1400: ;	    (<EXPR>)
                            	  1401: ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                            	  1402: ; as an index, functions can have an <EXPR> as arguments, and
                            	  1403: ; <EXPR4> can be an <EXPR> in parenthesis.
                            	  1404: 
                            	  1405: ;-------------------------------------------------------------------------------
                            	  1406: ; Push a value on the stack.
                            	  1407: ;-------------------------------------------------------------------------------
                            	  1408: 
                            	  1409: XP_PUSH:
00:00006D84 225F            	  1410: 	move.l (sp)+,a1				; a1 = return address
                            	  1411: ;	move.l _canary,-(sp)	; push the canary
00:00006D86 4FEFFFF0        	  1412: 	sub.l #16,sp					; allocate for value
00:00006D8A 2E80            	  1413: 	move.l d0,(sp)				; push data type
00:00006D8C F22F68000004    	  1414: 	fmove.x fp0,4(sp)			; and value
00:00006D92 4ED1            	  1415: 	jmp (a1)
                            	  1416: 
                            	  1417: ;-------------------------------------------------------------------------------
                            	  1418: ; Pop value from stack into first operand.
                            	  1419: ;-------------------------------------------------------------------------------
                            	  1420: 	
                            	  1421: XP_POP:
00:00006D94 225F            	  1422: 	move.l (sp)+,a1			; get return address
00:00006D96 2017            	  1423: 	move.l (sp),d0			; pop data type
00:00006D98 F22F48000004    	  1424: 	fmove.x 4(sp),fp0		; and data element
00:00006D9E 4FEF0010        	  1425: 	add.l #16,sp
                            	  1426: ;	cchk (sp)						; check the canary
                            	  1427: ;	add.l #4,sp					; pop canary	
00:00006DA2 4ED1            	  1428: 	jmp (a1)
                            	  1429: 
                            	  1430: ;-------------------------------------------------------------------------------
                            	  1431: ; Pop value from stack into second operand.
                            	  1432: ;-------------------------------------------------------------------------------
                            	  1433: 
                            	  1434: XP_POP1:
00:00006DA4 225F            	  1435: 	move.l (sp)+,a1			; get return address
00:00006DA6 2217            	  1436: 	move.l (sp),d1			; pop data type
00:00006DA8 F22F48800004    	  1437: 	fmove.x 4(sp),fp1		; and data element
00:00006DAE 4FEF0010        	  1438: 	add.l #16,sp
                            	  1439: ;	cchk (sp)						; check the canary
                            	  1440: ;	add.l #4,sp					; pop canary
00:00006DB2 4ED1            	  1441: 	jmp (a1)
                            	  1442: 
                            	  1443: ;-------------------------------------------------------------------------------
                            	  1444: ; Get and expression and make sure it is numeric.
                            	  1445: ;-------------------------------------------------------------------------------
                            	  1446: 
                            	  1447: NUM_EXPR:
00:00006DB4 611E            	  1448: 	bsr EXPR
00:00006DB6 0C8000000001    	  1449: 	cmpi.l #DT_NUMERIC,d0
00:00006DBC 6600086E        	  1450: 	bne ETYPE
00:00006DC0 4E75            	  1451: 	rts
                            	  1452: 
                            	  1453: ;-------------------------------------------------------------------------------
                            	  1454: ; Get and expression and make sure it is numeric. Convert to integer.
                            	  1455: ;-------------------------------------------------------------------------------
                            	  1456: 
                            	  1457: INT_EXPR:
00:00006DC2 6110            	  1458: 	bsr EXPR
00:00006DC4 0C8000000001    	  1459: 	cmpi.l #DT_NUMERIC,d0
00:00006DCA 66000860        	  1460: 	bne ETYPE
00:00006DCE F2006000        	  1461: 	fmove.l fp0,d0
00:00006DD2 4E75            	  1462: 	rts
                            	  1463: 
                            	  1464: ;-------------------------------------------------------------------------------
                            	  1465: ; The top level of the expression parser.
                            	  1466: ; Get an expression, string or numeric.
                            	  1467: ;
                            	  1468: ; EXEC will smash a lot of regs, so push the current expression value before
                            	  1469: ; doing EXEC
                            	  1470: ;-------------------------------------------------------------------------------
                            	  1471: 
                            	  1472: EXPR:
                            	  1473: EXPR_OR:
00:00006DD4 6124            	  1474: 	BSR EXPR_AND
00:00006DD6 61AC            	  1475: 	BSR XP_PUSH
00:00006DD8 43FAF65A        	  1476: 	LEA TAB10,A1
00:00006DDC 45FAF766        	  1477: 	LEA TAB10_1,A2
00:00006DE0 6000F78A        	  1478: 	BRA EXEC
                            	  1479: 	
                            	  1480: ;-------------------------------------------------------------------------------
                            	  1481: ; Boolean 'Or' level
                            	  1482: ;-------------------------------------------------------------------------------
                            	  1483: 
                            	  1484: XP_OR:
00:00006DE4 6114            	  1485: 	bsr EXPR_AND
00:00006DE6 61BC            	  1486: 	bsr XP_POP1
00:00006DE8 613C            	  1487: 	bsr CheckNumeric
00:00006DEA F2036080        	  1488: 	fmove.L FP1,D3
00:00006DEE F2026000        	  1489: 	fmove.L FP0,D2
00:00006DF2 8483            	  1490: 	or.L D3,D2
00:00006DF4 F2024000        	  1491: 	fmove.L D2,FP0
00:00006DF8 4E75            	  1492: 	rts
                            	  1493: 	
                            	  1494: ;-------------------------------------------------------------------------------
                            	  1495: ; Boolean 'And' level
                            	  1496: ;-------------------------------------------------------------------------------
                            	  1497: 
                            	  1498: EXPR_AND:
00:00006DFA 613C            	  1499: 	bsr EXPR_REL
00:00006DFC 6186            	  1500: 	bsr XP_PUSH
00:00006DFE 43FAF630        	  1501: 	LEA TAB9,A1
00:00006E02 45FAF738        	  1502: 	LEA TAB9_1,A2
00:00006E06 6000F764        	  1503: 	BRA EXEC
                            	  1504: 
                            	  1505: XP_AND:
00:00006E0A 612C            	  1506: 	BSR EXPR_REL
00:00006E0C 6196            	  1507: 	bsr XP_POP1
00:00006E0E 6116            	  1508: 	bsr CheckNumeric
00:00006E10 F2036080        	  1509: 	FMOVE.L FP1,D3
00:00006E14 F2026000        	  1510: 	FMOVE.L FP0,D2
00:00006E18 C483            	  1511: 	AND.L D3,D2
00:00006E1A F2024000        	  1512: 	FMOVE.L D2,FP0
00:00006E1E 4E75            	  1513: 	RTS
                            	  1514: 	
                            	  1515: XP_ANDX:
                            	  1516: XP_ORX
00:00006E20 6100FF72        	  1517: 	bsr XP_POP
00:00006E24 4E75            	  1518: 	rts
                            	  1519: 
                            	  1520: ;-------------------------------------------------------------------------------
                            	  1521: ; Check that two numeric values are being used.
                            	  1522: ;-------------------------------------------------------------------------------
                            	  1523: 
                            	  1524: CheckNumeric:
00:00006E26 0C010001        	  1525: 	CMPI.B #DT_NUMERIC,D1
00:00006E2A 66000800        	  1526: 	BNE ETYPE
00:00006E2E 0C000001        	  1527: 	CMPI.B #DT_NUMERIC,D0
00:00006E32 660007F8        	  1528: 	BNE ETYPE
00:00006E36 4E75            	  1529: 	RTS
                            	  1530: 
                            	  1531: ;-------------------------------------------------------------------------------
                            	  1532: ; Relational operator level, <,<=,>=,>,=,<>
                            	  1533: ;-------------------------------------------------------------------------------
                            	  1534: 
                            	  1535: EXPR_REL:
00:00006E38 61000088        	  1536: 	bsr	EXPR2
00:00006E3C 6100FF46        	  1537: 	bsr XP_PUSH
00:00006E40 43FAF5E3        	  1538: 	LEA	TAB8,A1 				; look up a relational operator
00:00006E44 45FAF6DA        	  1539: 	LEA	TAB8_1,A2
00:00006E48 6000F722        	  1540: 	bra	EXEC		go do it
                            	  1541: 
                            	  1542: XP11:
00:00006E4C 6100FF46        	  1543: 	bsr XP_POP
00:00006E50 615C            	  1544: 	BSR	XP18		is it ">="?
00:00006E52 F2940044        	  1545: 	FBLT XPRT0		no, return D0=0
00:00006E56 6048            	  1546: 	BRA	XPRT1		else return D0=1
                            	  1547: 
                            	  1548: XP12:
00:00006E58 6100FF3A        	  1549: 	bsr XP_POP
00:00006E5C 6150            	  1550: 	BSR	XP18		is it "<>"?
00:00006E5E F2810038        	  1551: 	FBEQ XPRT0		no, return D0=0
00:00006E62 603C            	  1552: 	BRA	XPRT1		else return D0=1
                            	  1553: 
                            	  1554: XP13:
00:00006E64 6100FF2E        	  1555: 	bsr XP_POP
00:00006E68 6144            	  1556: 	BSR	XP18		is it ">"?
00:00006E6A F295002C        	  1557: 	FBLE XPRT0		no, return D0=0
00:00006E6E 6030            	  1558: 	BRA	XPRT1		else return D0=1
                            	  1559: 
                            	  1560: XP14:
00:00006E70 6100FF22        	  1561: 	bsr XP_POP
00:00006E74 6138            	  1562: 	BSR	XP18		;is it "<="?
00:00006E76 F2920020        	  1563: 	FBGT XPRT0	;	no, return D0=0
00:00006E7A 6024            	  1564: 	BRA	XPRT1		;else return D0=1
                            	  1565: 
                            	  1566: XP15:
00:00006E7C 6100FF16        	  1567: 	bsr XP_POP
00:00006E80 612C            	  1568: 	BSR	XP18		; is it "="?
00:00006E82 F28E0014        	  1569: 	FBNE XPRT0	;	if not, return D0=0
00:00006E86 6018            	  1570: 	BRA	XPRT1		;else return D0=1
                            	  1571: XP15RT
00:00006E88 4E75            	  1572: 	RTS
                            	  1573: 
                            	  1574: XP16:
00:00006E8A 6100FF08        	  1575: 	bsr XP_POP
00:00006E8E 611E            	  1576: 	BSR	XP18		; is it "<"?
00:00006E90 F2930006        	  1577: 	FBGE XPRT0	;	if not, return D0=0
00:00006E94 600A            	  1578: 	BRA	XPRT1		; else return D0=1
00:00006E96 4E75            	  1579: 	RTS
                            	  1580: 
                            	  1581: XPRT0:
00:00006E98 F23C58000000    	  1582: 	FMOVE.B #0,FP0	; return fp0 = 0 (false)
00:00006E9E 4E75            	  1583: 	RTS
                            	  1584: 
                            	  1585: XPRT1:
00:00006EA0 F23C58000001    	  1586: 	FMOVE.B #1,FP0	; return fp0 = 1 (true)
00:00006EA6 4E75            	  1587: 	RTS
                            	  1588: 
                            	  1589: XP17:								; it's not a rel. operator
00:00006EA8 6100FEEA        	  1590: 	bsr XP_POP				;	return FP0=<EXPR2>
00:00006EAC 4E75            	  1591: 	rts
                            	  1592: 
                            	  1593: XP18:
00:00006EAE 6100FED4        	  1594: 	bsr XP_PUSH
00:00006EB2 610E            	  1595: 	bsr	EXPR2					; do second <EXPR2>
00:00006EB4 6100FEEE        	  1596: 	bsr XP_POP1
00:00006EB8 6100FF6C        	  1597: 	bsr CheckNumeric
00:00006EBC F20000B8        	  1598: 	fcmp fp0,fp1			; compare with the first result
00:00006EC0 4E75            	  1599: 	rts								; return the result
                            	  1600: 
                            	  1601: ;-------------------------------------------------------------------------------
                            	  1602: ; Add/Subtract operator level, +,-
                            	  1603: ;-------------------------------------------------------------------------------
                            	  1604: 
                            	  1605: EXPR2
00:00006EC2 61000960        	  1606: 	bsr	TSTC		; negative sign?
00:00006EC6 2D              	  1607: 	DC.B	'-',XP21-*
00:00006EC7 09
00:00006EC8 F23C58000000    	  1608: 	FMOVE.B #0,FP0
00:00006ECE 604C            	  1609: 	BRA	XP26
                            	  1610: XP21	
00:00006ED0 61000952        	  1611: 	bsr	TSTC		; positive sign? ignore it
00:00006ED4 2B              	  1612: 	DC.B	'+',XP22-*
00:00006ED5 01
                            	  1613: XP22
00:00006ED6 610000C8        	  1614: 	BSR	EXPR3		; first <EXPR3>
                            	  1615: XP23
00:00006EDA 61000948        	  1616: 	bsr	TSTC		; add?
00:00006EDE 2B              	  1617: 	DC.B	'+',XP25-*
00:00006EDF 37
00:00006EE0 6100FEA2        	  1618: 	bsr XP_PUSH
00:00006EE4 610000BA        	  1619: 	BSR	EXPR3					; get the second <EXPR3>
                            	  1620: XP24
00:00006EE8 6100FEBA        	  1621: 	bsr XP_POP1
00:00006EEC B03C0001        	  1622: 	CMP.B #DT_NUMERIC,d0
00:00006EF0 660C            	  1623: 	BNE .notNum
00:00006EF2 B23C0001        	  1624: 	CMP.B #DT_NUMERIC,d1
00:00006EF6 6606            	  1625: 	BNE .notNum
00:00006EF8 F2000422        	  1626: 	FADD FP1,FP0			; add it to the first <EXPR3>
                            	  1627: ;	FBVS	QHOW		branch if there's an overflow
00:00006EFC 60DC            	  1628: 	BRA	XP23		else go back for more operations
                            	  1629: .notNum
00:00006EFE B0BC00000002    	  1630: 	cmp.l #DT_STRING,d0
00:00006F04 66000726        	  1631: 	bne ETYPE
00:00006F08 B2BC00000002    	  1632: 	cmp.l #DT_STRING,d1
00:00006F0E 6600071C        	  1633: 	bne ETYPE
00:00006F12 611E            	  1634: 	bsr ConcatString
00:00006F14 4E75            	  1635: 	rts
                            	  1636: 
                            	  1637: XP25
00:00006F16 6100090C        	  1638: 	bsr	TSTC							; subtract?
00:00006F1A 2D              	  1639: 	dc.b	'-',XP27-*
00:00006F1B 15
                            	  1640: XP26
00:00006F1C 6100FE66        	  1641: 	bsr XP_PUSH
00:00006F20 617E            	  1642: 	BSR	EXPR3					; get second <EXPR3>
00:00006F22 0C000001        	  1643: 	cmpi.b #DT_NUMERIC,d0
00:00006F26 66000704        	  1644: 	bne ETYPE
00:00006F2A F200001A        	  1645: 	FNEG FP0					; change its sign
00:00006F2E 60B8            	  1646: 	JMP	XP24					; and do an addition
                            	  1647: 
                            	  1648: XP27
00:00006F30 4E75            	  1649: 	rts
                            	  1650: 
                            	  1651: ;-------------------------------------------------------------------------------
                            	  1652: ; Concatonate strings, for the '+' operator.
                            	  1653: ;
                            	  1654: ; Parameters:
                            	  1655: ;		fp0 = holds string descriptor for second string
                            	  1656: ;		fp1 = holds string descriptor for first string
                            	  1657: ;	Returns:
                            	  1658: ;		fp0 = string descriptor for combined strings
                            	  1659: ;-------------------------------------------------------------------------------
                            	  1660: 
                            	  1661: ConcatString:
00:00006F32 F239688000040600	  1662: 	fmove.x fp1,_fpWork		; save first string descriptor to memory
00:00006F3A F239680000040610	  1663: 	fmove.x fp0,_fpWork+16; save second string descriptor to memory
00:00006F42 343900040600    	  1664: 	move.w _fpWork,d2			; d2 = length of first string
00:00006F48 D47900040610    	  1665: 	add.w	_fpWork+16,d2		; add length of second string
00:00006F4E 48C2            	  1666: 	ext.l d2							; make d2 a long word
00:00006F50 61000164        	  1667: 	bsr AllocateString		; allocate
00:00006F54 2849            	  1668: 	move.l a1,a4					; a4 = allocated string, saved for later
00:00006F56 2449            	  1669: 	move.l a1,a2					; a2 = allocated string
00:00006F58 3542FFFE        	  1670: 	move.w d2,-2(a2)			; save length of new string (a2)
00:00006F5C 227900040604    	  1671: 	move.l _fpWork+4,a1		; a1 = pointer to string text of first string
00:00006F62 2649            	  1672: 	move.l a1,a3					; compute pointer to end of first string
00:00006F64 363900040600    	  1673: 	move.w _fpWork,d3			; d3 = length of first string
00:00006F6A 48C3            	  1674: 	ext.l d3
00:00006F6C D7C3            	  1675: 	add.l d3,a3						; add length of first string
00:00006F6E 61000796        	  1676: 	bsr MVUP							; move from A1 to A2 until A1=A3
00:00006F72 227900040614    	  1677: 	move.l _fpWork+20,a1	; a1 = pointer to second string text
00:00006F78 2649            	  1678: 	move.l a1,a3
00:00006F7A 363900040610    	  1679: 	move.w _fpWork+16,d3	; d3 = length of second string
00:00006F80 48C3            	  1680: 	ext.l d3
00:00006F82 D7C3            	  1681: 	add.l d3,a3						; a3 points to end of second string
00:00006F84 61000780        	  1682: 	bsr MVUP							; concatonate on second string
00:00006F88 33C200040600    	  1683: 	move.w d2,_fpWork			; save total string length in fp work
00:00006F8E 23CC00040604    	  1684: 	move.l a4,_fpWork+4		; save pointer in fp work area
00:00006F94 7002            	  1685: 	moveq #DT_STRING,d0		; set return data type = string
00:00006F96 F239480000040600	  1686: 	fmove.x _fpWork,fp0		; fp0 = string descriptor
00:00006F9E 4E75            	  1687: 	rts
                            	  1688: 
                            	  1689: ;-------------------------------------------------------------------------------
                            	  1690: ; Multiply / Divide operator level, *,/,mod
                            	  1691: ;-------------------------------------------------------------------------------
                            	  1692: 
                            	  1693: EXPR3:
00:00006FA0 6168            	  1694: 	bsr	EXPR4					; get first <EXPR4>
                            	  1695: XP36
00:00006FA2 6100FDE0        	  1696: 	bsr XP_PUSH
                            	  1697: XP30
00:00006FA6 43FAF48F        	  1698: 	lea TAB11,a1
00:00006FAA 45FAF5A0        	  1699: 	lea TAB11_1,a2
00:00006FAE 6000F5BC        	  1700: 	bra EXEC
                            	  1701: XP31
00:00006FB2 61000870        	  1702: 	bsr	TSTC					; multiply?
00:00006FB6 2A              	  1703: 	dc.b	'*',XP34-*
00:00006FB7 11
00:00006FB8 6150            	  1704: 	bsr	EXPR4					; get second <EXPR4>
00:00006FBA 6100FDE8        	  1705: 	bsr XP_POP1
00:00006FBE 6100FE66        	  1706: 	bsr CheckNumeric
00:00006FC2 F2000423        	  1707: 	fmul fp1,fp0			; multiply the two
00:00006FC6 60DA            	  1708: 	bra	XP36					; then look for more terms
                            	  1709: XP34
00:00006FC8 6100085A        	  1710: 	bsr	TSTC					; divide?
00:00006FCC 2F              	  1711: 	dc.b	'/',XP35-*
00:00006FCD 15
00:00006FCE 613A            	  1712: 	bsr	EXPR4					; get second <EXPR4>
00:00006FD0 6100FDD2        	  1713: 	bsr XP_POP1
00:00006FD4 6100FE50        	  1714: 	bsr CheckNumeric
00:00006FD8 F20000A0        	  1715: 	fdiv fp0,fp1			; do the division
00:00006FDC F2000400        	  1716: 	fmove fp1,fp0
00:00006FE0 60C0            	  1717: 	bra	XP36					; go back for any more terms
                            	  1718: XP35
00:00006FE2 6100FDB0        	  1719: 	bsr XP_POP
00:00006FE6 4E75            	  1720: 	rts
                            	  1721: XP_MOD:
00:00006FE8 6120            	  1722: 	bsr EXPR4
00:00006FEA 6100FDB8        	  1723: 	bsr XP_POP1
00:00006FEE F20000A0        	  1724: 	fdiv fp0,fp1			; divide
00:00006FF2 F2006080        	  1725: 	fmove.l fp1,d0		; convert to integer
00:00006FF6 F2004180        	  1726: 	fmove.l d0,fp3		; convert back to float
00:00006FFA F20001A3        	  1727: 	fmul fp0,fp3			; multiply quotient times divisor
00:00006FFE F2000CA8        	  1728: 	fsub fp3,fp1			; subtract from original number
00:00007002 F2000400        	  1729: 	fmove.x fp1,fp0		; return difference in fp0
00:00007006 7001            	  1730: 	moveq #DT_NUMERIC,d0
00:00007008 6098            	  1731: 	bra XP36					; go back and check for more multiply ops
                            	  1732: 	
                            	  1733: ;-------------------------------------------------------------------------------
                            	  1734: ; Lowest Level of expression evaluation.
                            	  1735: ;	Check for
                            	  1736: ;		a function or
                            	  1737: ;		a variable or
                            	  1738: ;		a number or
                            	  1739: ;		a string or
                            	  1740: ;		( expr )
                            	  1741: ;-------------------------------------------------------------------------------
                            	  1742: 
                            	  1743: EXPR4:
00:0000700A 43FAF3DF        	  1744: 	LEA	TAB4,A1 			; find possible function
00:0000700E 45FAF4CC        	  1745: 	LEA	TAB4_1,A2
00:00007012 6000F558        	  1746: 	BRA	EXEC
                            	  1747: XP40
00:00007016 61000236        	  1748: 	bsr	TSTV					; nope, not a function
00:0000701A 650C            	  1749: 	bcs	XP41					; nor a variable
00:0000701C 2240            	  1750: 	move.l d0,a1			; a1 = variable address
00:0000701E 2011            	  1751: 	move.l (a1),d0		; return type in d0
00:00007020 F22948000004    	  1752: 	fmove.x 4(a1),fp0	; if a variable, return its value in fp0
                            	  1753: EXP4RT
00:00007026 4E75            	  1754: 	rts
                            	  1755: XP41
00:00007028 61000812        	  1756: 	bsr	TSTNUM				; or is it a number?
00:0000702C F2000400        	  1757: 	fmove fp1,fp0
00:00007030 0C8000000001    	  1758: 	cmpi.l #DT_NUMERIC,d0
00:00007036 67EE            	  1759: 	beq	EXP4RT				; if so, return it in FP0
                            	  1760: XPSTNG
00:00007038 610007EA        	  1761: 	bsr TSTC					; is it a string constant?
00:0000703C 22              	  1762: 	dc.b '"',XP44-*
00:0000703D 57
00:0000703E 163C0022        	  1763: 	move.b #'"',d3
                            	  1764: XP45
00:00007042 2248            	  1765: 	move.l a0,a1			; record start of string in a1
00:00007044 243C000001FF    	  1766: 	move.l #511,d2		; max 512 characters
                            	  1767: .0003	
00:0000704A 1018            	  1768: 	move.b (a0)+,d0		; get a character
00:0000704C 670E            	  1769: 	beq .0001					; should not be a NULL
00:0000704E 0C00000D        	  1770: 	cmpi.b #CR,d0			; CR means the end of line was hit without a close quote
00:00007052 6708            	  1771: 	beq .0001
00:00007054 B003            	  1772: 	cmp.b d3,d0				; close quote?
00:00007056 6708            	  1773: 	beq .0002
00:00007058 51CAFFF0        	  1774: 	dbra d2,.0003			; no close quote, go back for next char
                            	  1775: .0001
00:0000705C 600005C6        	  1776: 	bra QHOW
                            	  1777: .0002
00:00007060 2008            	  1778: 	move.l a0,d0				; d0 = end of string pointer
00:00007062 9089            	  1779: 	sub.l a1,d0					; compute string length + 1
00:00007064 5340            	  1780: 	subq #1,d0					; subtract out closing quote
00:00007066 2400            	  1781: 	move.l d0,d2				; d2 = string length
00:00007068 2649            	  1782: 	move.l a1,a3				; a3 = pointer to string text
00:0000706A 614A            	  1783: 	bsr AllocateString
00:0000706C 2449            	  1784: 	move.l a1,a2				; a2 points to new text area
00:0000706E 2849            	  1785: 	move.l a1,a4				; save a1 for later
00:00007070 224B            	  1786: 	move.l a3,a1				; a1 = pointer to string in program
00:00007072 3542FFFE        	  1787: 	move.w d2,-2(a2)		; copy length into place
00:00007076 D7C2            	  1788: 	add.l d2,a3					; a3 points to end of string
00:00007078 6100068C        	  1789: 	bsr MVUP						; move from A1 to A2 until A1=A3
00:0000707C 33C200040600    	  1790: 	move.w d2,_fpWork		; copy length into place
00:00007082 23CC00040604    	  1791: 	move.l a4,_fpWork+4	; copy pointer to text into place
00:00007088 F239480000040600	  1792: 	fmove.x _fpWork,fp0	; put string descriptor into fp0
00:00007090 7002            	  1793: 	moveq #DT_STRING,d0	; return string data type
00:00007092 4E75            	  1794: 	rts
                            	  1795: XP44
00:00007094 6100078E        	  1796: 	bsr TSTC					; alternate string constant?
00:00007098 27              	  1797: 	dc.b '''',PARN-*
00:00007099 07
00:0000709A 163C0027        	  1798: 	move.b #'''',d3
00:0000709E 60A2            	  1799: 	bra XP45
                            	  1800: PARN
00:000070A0 61000782        	  1801: 	bsr	TSTC					; else look for ( EXPR )
00:000070A4 28              	  1802: 	dc.b '(',XP43-*
00:000070A5 0D
00:000070A6 6100FD2C        	  1803: 	bsr	EXPR
00:000070AA 61000778        	  1804: 	bsr	TSTC
00:000070AE 29              	  1805: 	dc.b ')',XP43-*
00:000070AF 03
                            	  1806: XP42	
00:000070B0 4E75            	  1807: 	rts
                            	  1808: XP43
00:000070B2 60000528        	  1809: 	bra	QWHAT					; else say "What?"
                            	  1810: 
                            	  1811: ;-------------------------------------------------------------------------------	
                            	  1812: ; Allocate storage for a string variable.
                            	  1813: ;
                            	  1814: ; Parameters:
                            	  1815: ;		d2 = number of bytes needed
                            	  1816: ; Returns:
                            	  1817: ;		a1 = pointer to string text area
                            	  1818: ;-------------------------------------------------------------------------------	
                            	  1819: 
                            	  1820: AllocateString:
00:000070B6 48E7383C        	  1821: 	movem.l d2-d4/a2-a5,-(sp)
00:000070BA 283A0974        	  1822: 	move.l VARBGN,d4
00:000070BE 227A0968        	  1823: 	move.l LastStr,a1			; a1 = last string
00:000070C2 3611            	  1824: 	move.w (a1),d3				; d3 = length of last string (0)
00:000070C4 48C3            	  1825: 	ext.l d3
00:000070C6 9883            	  1826: 	sub.l d3,d4						; subtract off length
00:000070C8 5784            	  1827: 	subq.l #3,d4					; size of length field+1 for rounding
00:000070CA 9889            	  1828: 	sub.l a1,d4						; and start position
00:000070CC B484            	  1829: 	cmp.l d4,d2						; is there enough room?
00:000070CE 6224            	  1830: 	bhi .needMoreRoom
                            	  1831: .0001
00:000070D0 227A0956        	  1832: 	move.l LastStr,a1
00:000070D4 2649            	  1833: 	move.l a1,a3
00:000070D6 5489            	  1834: 	addq.l #2,a1					; point a1 to text part of string
00:000070D8 3682            	  1835: 	move.w d2,(a3)				; save the length
00:000070DA D7C2            	  1836: 	add.l d2,a3
00:000070DC 568B            	  1837: 	addq.l #3,a3					; 2 for length field, 1 for rounding
00:000070DE 260B            	  1838: 	move.l a3,d3
00:000070E0 0283FFFFFFFE    	  1839: 	andi.l #$FFFFFFFE,d3	; make pointer even wyde
00:000070E6 23CB00007A28    	  1840: 	move.l a3,LastStr			; set new last str position
00:000070EC 4253            	  1841: 	clr.w (a3)						; set zero length
00:000070EE 4CDF3C1C        	  1842: 	movem.l (sp)+,d2-d4/a2-a5
00:000070F2 4E75            	  1843: 	rts
                            	  1844: .needMoreRoom
00:000070F4 611E            	  1845: 	bsr GarbageCollectStrings
00:000070F6 283A0938        	  1846: 	move.l VARBGN,d4			; d4 = start of variables
00:000070FA 227A092C        	  1847: 	move.l LastStr,a1			; a1 = pointer to last string
00:000070FE 3611            	  1848: 	move.w (a1),d3				; d3 = length of last string (likely 0)
00:00007100 48C3            	  1849: 	ext.l d3
00:00007102 D689            	  1850: 	add.l a1,d3						; d3 = pointer past end of last string
00:00007104 5683            	  1851: 	addq.l #3,d3					; 2 for length, 1 for rounding
00:00007106 9883            	  1852: 	sub.l d3,d4						; free = VARBGN - LastStr+length of (LastStr)
00:00007108 B484            	  1853: 	cmp.l d4,d2						; request < free?
00:0000710A 65C4            	  1854: 	blo .0001
00:0000710C 4DFA08AC        	  1855: 	lea NOSTRING,a6
00:00007110 600004D0        	  1856: 	bra ERROR
                            	  1857: 		
                            	  1858: ;-------------------------------------------------------------------------------	
                            	  1859: ; Garbage collect strings. This copies all strings in use to the lower end of
                            	  1860: ; the string area and adjusts the string pointers in variables and on the
                            	  1861: ; stack to point to the new location.
                            	  1862: ;
                            	  1863: ; Modifies:
                            	  1864: ;		none
                            	  1865: ;-------------------------------------------------------------------------------	
                            	  1866: 
                            	  1867: GarbageCollectStrings:
00:00007114 48E70074        	  1868: 	movem.l a1/a2/a3/a5,-(sp)
00:00007118 227A090A        	  1869: 	move.l StrArea,a1			; source area pointer
00:0000711C 247A0906        	  1870: 	move.l StrArea,a2			; target area pointer
00:00007120 2A7A0906        	  1871: 	move.l LastStr,a5
                            	  1872: .0001
00:00007124 6140            	  1873: 	bsr StringInVar				; check if the string is used by a variable
00:00007126 6506            	  1874: 	bcs .moveString
00:00007128 610000A6        	  1875: 	bsr StringOnStack			; check if string is on string expression stack
00:0000712C 641C            	  1876: 	bcc .nextString				; if not on stack or in a var then move to next string
                            	  1877: 	
                            	  1878: 	; The string is in use, copy to active string area
                            	  1879: .moveString:
00:0000712E 610000D0        	  1880: 	bsr UpdateStringPointers	; update pointer to string on stack or in variable
00:00007132 611C            	  1881: 	bsr NextString				; a3 = pointer to next string
00:00007134 610005DA        	  1882: 	bsr MVUPW							; will copy the length and string text
                            	  1883: .0005
00:00007138 B3CD            	  1884: 	cmp.l a5,a1						; is it the last string?
00:0000713A 63E8            	  1885: 	bls .0001
00:0000713C 23CA00007A28    	  1886: 	move.l a2,LastStr			; update last string pointer
00:00007142 4252            	  1887: 	clr.w (a2)						; set zero length
00:00007144 4CDF2E00        	  1888: 	movem.l (sp)+,a1/a2/a3/a5
00:00007148 4E75            	  1889: 	rts
                            	  1890: .nextString:
00:0000714A 6104            	  1891: 	bsr NextString
00:0000714C 224B            	  1892: 	move.l a3,a1
00:0000714E 60E8            	  1893: 	bra .0005
                            	  1894: 
                            	  1895: ;-------------------------------------------------------------------------------	
                            	  1896: ; Parameters:
                            	  1897: ;		a1 - pointer to current string
                            	  1898: ; Returns:
                            	  1899: ;		a3 - pointer to next string
                            	  1900: ;-------------------------------------------------------------------------------	
                            	  1901: 
                            	  1902: NextString:
00:00007150 2F04            	  1903: 	move.l d4,-(sp)
00:00007152 3811            	  1904: 	move.w (a1),d4				; d4 = string length
00:00007154 48C4            	  1905: 	ext.l d4							; make d4 long
00:00007156 5684            	  1906: 	addq.l #3,d4					; plus 2 for length field, 1 for rounding
00:00007158 D889            	  1907: 	add.l a1,d4
00:0000715A 0284FFFFFFFE    	  1908: 	andi.l #$FFFFFFFE,d4	; make even wyde address
00:00007160 2644            	  1909: 	move.l d4,a3
00:00007162 281F            	  1910: 	move.l (sp)+,d4
00:00007164 4E75            	  1911: 	rts
                            	  1912: 
                            	  1913: ;-------------------------------------------------------------------------------	
                            	  1914: ; Check if a variable is using a string
                            	  1915: ;
                            	  1916: ; Modifies:
                            	  1917: ;		d2,d3,a4
                            	  1918: ; Parameters:
                            	  1919: ;		a1 = pointer to string descriptor
                            	  1920: ; Returns:
                            	  1921: ;		cf = 1 if string in use, 0 otherwise
                            	  1922: ;-------------------------------------------------------------------------------	
                            	  1923: 
                            	  1924: StringInVar:
                            	  1925: 	; check global vars
00:00007166 287A08C8        	  1926: 	move.l VARBGN,a4
00:0000716A 761F            	  1927: 	moveq #31,d3			; 32 vars
00:0000716C 6116            	  1928: 	bsr SIV1
                            	  1929: 	; now check local vars
00:0000716E 287A0878        	  1930: 	move.l STKFP,a4
                            	  1931: .0001
00:00007172 588C            	  1932: 	addq.l #4,a4			; point to variable area
00:00007174 7607            	  1933: 	moveq #7,d3
00:00007176 610C            	  1934: 	bsr SIV1					; check variable area
00:00007178 286CFFFC        	  1935: 	move.l -4(a4),a4	; get previous frame pointer
00:0000717C B9FAF06C        	  1936: 	cmp.l ENDMEM,a4
00:00007180 65F0            	  1937: 	blo .0001
00:00007182 4E75            	  1938: 	rts
                            	  1939: 
                            	  1940: ;-------------------------------------------------------------------------------	
                            	  1941: ; SIV1 - string in variable helper. This routine does a two-up return if the
                            	  1942: ; string is found in a variable. No need to keep searching.
                            	  1943: ;
                            	  1944: ; Modifies:
                            	  1945: ;		d2,d3,a4
                            	  1946: ; Parameters:
                            	  1947: ;		d3 = number of variables-1 to check
                            	  1948: ;		a4 = string space
                            	  1949: ;		a1 = pointer to string descriptor
                            	  1950: ; Returns:
                            	  1951: ;		cf = 1 if string in use, 0 otherwise
                            	  1952: ;-------------------------------------------------------------------------------	
                            	  1953: 
                            	  1954: SIV1:
                            	  1955: .0003
00:00007184 0C9400000002    	  1956: 	cmp.l #DT_STRING,(a4)
00:0000718A 6612            	  1957: 	bne .0004
00:0000718C 242C0008        	  1958: 	move.l 8(a4),d2
00:00007190 5582            	  1959: 	subq.l #2,d2
00:00007192 B3C2            	  1960: 	cmp.l d2,a1
00:00007194 6608            	  1961: 	bne .0004
00:00007196 588F            	  1962: 	addq.l #4,sp			; pop return address
00:00007198 003C0001        	  1963: 	ori #1,ccr
00:0000719C 4E75            	  1964: 	rts								; do two up return
                            	  1965: .0004
00:0000719E 508C            	  1966: 	addq.l #8,a4			;  increment pointer by 16
00:000071A0 508C            	  1967: 	addq.l #8,a4
00:000071A2 51CBFFE0        	  1968: 	dbra d3,.0003
00:000071A6 023C00FE        	  1969: 	andi #$FE,ccr
00:000071AA 4E75            	  1970: 	rts
                            	  1971: 
                            	  1972: ;-------------------------------------------------------------------------------	
                            	  1973: ; Check if a value could be a pointer into the string area.
                            	  1974: ; Even if the data type indicated a string, it may not be. It could just be a
                            	  1975: ; coincidence. So check that the pointer portion is pointing into string
                            	  1976: ; memory. It is extremely unlikely to have a data type and a valid pointer
                            	  1977: ; match and it not be a string.
                            	  1978: ;
                            	  1979: ; Returns
                            	  1980: ;		d3 = pointer to string
                            	  1981: ;		cf=1 if points into string area, 0 otherwise
                            	  1982: ;-------------------------------------------------------------------------------	
                            	  1983: 
                            	  1984: PointsIntoStringArea:
00:000071AC 0C9400000002    	  1985: 	cmp.l #DT_STRING,(a4)		; is it a string data type?
00:000071B2 6616            	  1986: 	bne .0001
00:000071B4 262C0008        	  1987: 	move.l 8(a4),d3					; likely a string if
00:000071B8 B6BA086A        	  1988: 	cmp.l StrArea,d3				; flagged as a string, and pointer is into string area
00:000071BC 650C            	  1989: 	blo .0001
00:000071BE B6BA0870        	  1990: 	cmp.l VARBGN,d3
00:000071C2 6406            	  1991: 	bhs .0001
00:000071C4 003C0001        	  1992: 	ori #1,ccr
00:000071C8 4E75            	  1993: 	rts
                            	  1994: .0001
00:000071CA 023C00FE        	  1995: 	andi #$FE,ccr
00:000071CE 4E75            	  1996: 	rts
                            	  1997: 
                            	  1998: ;-------------------------------------------------------------------------------	
                            	  1999: ; Check if the string is a temporary on stack
                            	  2000: ;
                            	  2001: ; Parameters:
                            	  2002: ;		a3 = pointer to old string text area
                            	  2003: ; Returns:
                            	  2004: ;		cf = 1 if string in use, 0 otherwise
                            	  2005: ;-------------------------------------------------------------------------------	
                            	  2006: 
                            	  2007: StringOnStack:
00:000071D0 48E72028        	  2008: 	movem.l d2/a2/a4,-(sp)
00:000071D4 7607            	  2009: 	moveq #7,d3
00:000071D6 284F            	  2010: 	move.l sp,a4
                            	  2011: .0002
00:000071D8 61D2            	  2012: 	bsr PointsIntoStringArea
00:000071DA 6408            	  2013: 	bcc .0003
00:000071DC 242C0008        	  2014: 	move.l 8(a4),d2			; d2 = string text pointer
00:000071E0 B7C2            	  2015: 	cmp.l d2,a3					; compare string pointers
00:000071E2 6712            	  2016: 	beq .0001						; same pointer?
                            	  2017: .0003
00:000071E4 588C            	  2018: 	addq.l #4,a4				; bump pointer into stack
00:000071E6 B9FAF002        	  2019: 	cmp.l ENDMEM,a4			; have we hit end of stack yet?
00:000071EA 65EC            	  2020: 	blo .0002
00:000071EC 4CDF1404        	  2021: 	movem.l (sp)+,d2/a2/a4
00:000071F0 023C00FE        	  2022: 	andi #$FE,ccr
00:000071F4 4E75            	  2023: 	rts
                            	  2024: .0001
00:000071F6 4CDF1404        	  2025: 	movem.l (sp)+,d2/a2/a4
00:000071FA 003C0001        	  2026: 	ori #1,ccr
00:000071FE 4E75            	  2027: 	rts
                            	  2028: 	
                            	  2029: ;-------------------------------------------------------------------------------	
                            	  2030: ; Update pointers to string to point to new area. All string areas must be
                            	  2031: ; completely checked because there may be more than one pointer to the string.
                            	  2032: ;
                            	  2033: ; Modifies:
                            	  2034: ;		d2,d3,d4,a4
                            	  2035: ; Parameters:
                            	  2036: ;		a1 = old pointer to string
                            	  2037: ;		a2 = new pointer to string
                            	  2038: ;-------------------------------------------------------------------------------	
                            	  2039: 
                            	  2040: UpdateStringPointers:
00:00007200 2F0B            	  2041: 	move.l a3,-(sp)
00:00007202 47E90002        	  2042: 	lea 2(a1),a3						; a3 points to old string text area
                            	  2043: 	; check global variable space
00:00007206 287A0828        	  2044: 	move.l VARBGN,a4
00:0000720A 761F            	  2045: 	moveq #31,d3						; 32 vars to check
00:0000720C 611E            	  2046: 	bsr USP1
                            	  2047: 	; check stack for strings
00:0000720E 284F            	  2048: 	move.l sp,a4						; start at stack bottom and work towards top
                            	  2049: .0002
00:00007210 619A            	  2050: 	bsr PointsIntoStringArea
00:00007212 640C            	  2051: 	bcc .0001
                            	  2052: 	; Here we probably have a string, one last check
00:00007214 B68A            	  2053: 	cmp.l a2,d3							; should be >= a2 as we are packing the space
00:00007216 6508            	  2054: 	blo .0001
00:00007218 294A0008        	  2055: 	move.l a2,8(a4)					; update pointer on stack with new address
00:0000721C 546C0008        	  2056: 	addi.w #2,8(a4)					; bump up to text part of string
                            	  2057: .0001
00:00007220 588C            	  2058: 	addq.l #4,a4
00:00007222 B9FAEFC6        	  2059: 	cmp.l ENDMEM,a4
00:00007226 65E8            	  2060: 	blo .0002
00:00007228 265F            	  2061: 	move.l (sp)+,a3
00:0000722A 4E75            	  2062: 	rts
                            	  2063: 
                            	  2064: ;-------------------------------------------------------------------------------	
                            	  2065: ; Both global and local variable spaces are updated in the same manner.
                            	  2066: ;
                            	  2067: ; Parameters:
                            	  2068: ;		a1 = old pointer to string
                            	  2069: ;		a2 = new pointer to string
                            	  2070: ;		a4 = start of string space
                            	  2071: ;		d3 = number of string variables
                            	  2072: ;-------------------------------------------------------------------------------	
                            	  2073: 
                            	  2074: USP1:
                            	  2075: .0002
00:0000722C 0C9400000002    	  2076: 	cmp.l #DT_STRING,(a4)		; check the data type
00:00007232 6610            	  2077: 	bne .0001								; not a string, go to next
00:00007234 242C0008        	  2078: 	move.l 8(a4),d2					; d2 = pointer to string text
00:00007238 B7C2            	  2079: 	cmp.l d2,a3							; does pointer match old pointer?
00:0000723A 6608            	  2080: 	bne .0001
00:0000723C 294A0008        	  2081: 	move.l a2,8(a4)					; copy in new pointer
00:00007240 54AC0008        	  2082: 	addi.l #2,8(a4)					; point to string text
                            	  2083: .0001
00:00007244 508C            	  2084: 	addq.l #8,a4						; increment pointer by 16
00:00007246 508C            	  2085: 	addq.l #8,a4
00:00007248 51CBFFE2        	  2086: 	dbra d3,.0002
00:0000724C 4E75            	  2087: 	rts
                            	  2088: 
                            	  2089: ;-------------------------------------------------------------------------------	
                            	  2090: ; ===== Test for a valid variable name.  Returns Carry=1 if not
                            	  2091: ;	found, else returns Carry=0 and the address of the
                            	  2092: ;	variable in D0.
                            	  2093: 
                            	  2094: TSTV:
00:0000724E 61000638        	  2095: 	bsr	IGNBLK
00:00007252 7000            	  2096: 	CLR.L	D0
00:00007254 1010            	  2097: 	MOVE.B (A0),D0 	 	; look at the program text
00:00007256 903C0040        	  2098: 	SUB.B	#'@',D0
00:0000725A 6572            	  2099: 	BCS	TSTVRT				; C=1: not a variable
00:0000725C 6638            	  2100: 	BNE	TV1						; branch if not "@" array
00:0000725E 5248            	  2101: 	ADDQ #1,A0				; If it is, it should be
00:00007260 6100FE3E        	  2102: 	BSR	PARN					; followed by (EXPR) as its index.
00:00007264 D080            	  2103: 	ADD.L	D0,D0
00:00007266 650003BC        	  2104: 	BCS	QHOW					; say "How?" if index is too big
00:0000726A D080            	  2105: 	ADD.L	D0,D0
00:0000726C 650003B6        	  2106: 	BCS	QHOW
00:00007270 D080            	  2107: 	ADD.L	D0,D0
00:00007272 650003B0        	  2108: 	BCS	QHOW
00:00007276 D080            	  2109: 	ADD.L	D0,D0
00:00007278 650003AA        	  2110: 	BCS	QHOW
00:0000727C 2F00            	  2111: 	move.l d0,-(sp)		; save the index
00:0000727E 6100012A        	  2112: 	bsr	SIZE					; get amount of free memory
00:00007282 221F            	  2113: 	move.l (sp)+,d1		; get back the index
00:00007284 F2006000        	  2114: 	fmove.l fp0,d0		; convert to integer
00:00007288 B081            	  2115: 	cmp.l	d1,d0				; see if there's enough memory
00:0000728A 63000390        	  2116: 	bls	QSORRY				; if not, say "Sorry"
00:0000728E 203A07A0        	  2117: 	move.l VARBGN,d0	; put address of array element...
00:00007292 9081            	  2118: 	sub.l	d1,d0				; into D0
00:00007294 4E75            	  2119: 	rts
                            	  2120: TV1
00:00007296 B03C001B        	  2121: 	CMP.B	#27,D0			; if not @, is it A through Z?
00:0000729A 0A3C0001        	  2122: 	EOR	#1,CCR
00:0000729E 652E            	  2123: 	BCS	TSTVRT				; if not, set Carry and return
00:000072A0 5248            	  2124: 	ADDQ #1,A0				; else bump the text pointer
00:000072A2 0C00004C        	  2125: 	cmpi.b #'L',d0		; is it a local? L0 to L7
00:000072A6 661E            	  2126: 	bne TV2
00:000072A8 1010            	  2127: 	move.b (a0),d0
00:000072AA 0C000030        	  2128: 	cmpi.b #'0',d0
00:000072AE 6516            	  2129: 	blo TV2
00:000072B0 0C000037        	  2130: 	cmpi.b #'7',d0
00:000072B4 6210            	  2131: 	bhi TV2
00:000072B6 903C0030        	  2132: 	sub.b #'0',d0
00:000072BA 5248            	  2133: 	addq #1,a0			; bump text pointer
00:000072BC E988            	  2134: 	lsl.l #4,d0			; *16 bytes per var
00:000072BE D0BA0728        	  2135: 	add.l STKFP,d0
00:000072C2 5880            	  2136: 	add.l #4,d0
00:000072C4 4E75            	  2137: 	rts
                            	  2138: TV2
00:000072C6 E988            	  2139: 	LSL.L #4,D0			; compute the variable's address
00:000072C8 223A0766        	  2140: 	MOVE.L VARBGN,D1
00:000072CC D081            	  2141: 	ADD.L	D1,D0			; and return it in D0 with Carry=0
                            	  2142: TSTVRT
00:000072CE 4E75            	  2143: 	RTS
                            	  2144: 
                            	  2145: 
                            	  2146: * ===== Divide the 32 bit value in D0 by the 32 bit value in D1.
                            	  2147: *	Returns the 32 bit quotient in D0, remainder in D1.
                            	  2148: *
                            	  2149: DIV32
00:000072D0 4A81            	  2150: 	TST.L	D1		check for divide-by-zero
00:000072D2 67000350        	  2151: 	BEQ	QHOW		if so, say "How?"
00:000072D6 2401            	  2152: 	MOVE.L	D1,D2
00:000072D8 2801            	  2153: 	MOVE.L	D1,D4
00:000072DA B184            	  2154: 	EOR.L	D0,D4		see if the signs are the same
00:000072DC 4A80            	  2155: 	TST.L	D0		take absolute value of D0
00:000072DE 6A02            	  2156: 	BPL	DIV1
00:000072E0 4480            	  2157: 	NEG.L	D0
00:000072E2 4A81            	  2158: DIV1	TST.L	D1		take absolute value of D1
00:000072E4 6A02            	  2159: 	BPL	DIV2
00:000072E6 4481            	  2160: 	NEG.L	D1
00:000072E8 761F            	  2161: DIV2	MOVEQ	#31,D3		iteration count for 32 bits
00:000072EA 2200            	  2162: 	MOVE.L	D0,D1
00:000072EC 7000            	  2163: 	CLR.L	D0
00:000072EE D281            	  2164: DIV3	ADD.L	D1,D1		(This algorithm was translated from
00:000072F0 D180            	  2165: 	ADDX.L	D0,D0		; the divide routine in Ron Cain's
00:000072F2 6708            	  2166: 	BEQ	DIV4		Small-C run time library.)
00:000072F4 B082            	  2167: 	CMP.L	D2,D0
00:000072F6 6B04            	  2168: 	BMI	DIV4
00:000072F8 5281            	  2169: 	ADDQ.L	#1,D1
00:000072FA 9082            	  2170: 	SUB.L	D2,D0
00:000072FC 51CBFFF0        	  2171: DIV4	DBRA	D3,DIV3
00:00007300 C141            	  2172: 	EXG	D0,D1		put rem. & quot. in proper registers
00:00007302 4A84            	  2173: 	TST.L	D4		were the signs the same?
00:00007304 6A04            	  2174: 	BPL	DIVRT
00:00007306 4480            	  2175: 	NEG.L	D0		if not, results are negative
00:00007308 4481            	  2176: 	NEG.L	D1
00:0000730A 4E75            	  2177: DIVRT	RTS
                            	  2178: 
                            	  2179: 
                            	  2180: ; ===== The PEEK function returns the byte stored at the address
                            	  2181: ;	contained in the following expression.
                            	  2182: 
                            	  2183: PEEK
00:0000730C 1E3C0042        	  2184: 	MOVE.B #'B',d7
00:00007310 1210            	  2185: 	MOVE.B (a0),d1
00:00007312 0C01002E        	  2186: 	CMPI.B #'.',d1
00:00007316 6604            	  2187: 	BNE .0001
00:00007318 5248            	  2188: 	ADDQ #1,a0
00:0000731A 1E18            	  2189: 	move.b (a0)+,d7
                            	  2190: .0001
00:0000731C 6100FD82        	  2191: 	BSR	PARN		get the memory address
00:00007320 0C8000000001    	  2192: 	cmpi.l #DT_NUMERIC,d0
00:00007326 66000304        	  2193: 	bne ETYPE
00:0000732A F2006000        	  2194: 	FMOVE.L FP0,D0
00:0000732E 2240            	  2195: 	MOVE.L D0,A1
00:00007330 0C070042        	  2196: 	cmpi.b #'B',d7
00:00007334 660C            	  2197: 	bne .0002
                            	  2198: .0005
00:00007336 7000            	  2199: 	CLR.L	D0				; upper 3 bytes will be zero
00:00007338 1011            	  2200: 	MOVE.B (A1),D0
00:0000733A F2005800        	  2201: 	FMOVE.B	D0,FP0 	; get the addressed byte
00:0000733E 7001            	  2202: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00007340 4E75            	  2203: 	rts							; and return it
                            	  2204: .0002
00:00007342 0C070057        	  2205: 	cmpi.b #'W',d7
00:00007346 660C            	  2206: 	bne .0003
00:00007348 7000            	  2207: 	CLR.L d0
00:0000734A 3011            	  2208: 	MOVE.W (A1),D0
00:0000734C F2005000        	  2209: 	FMOVE.W	D0,FP0	;	get the addressed word
00:00007350 7001            	  2210: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00007352 4E75            	  2211: 	rts							; and return it
                            	  2212: .0003
00:00007354 0C07004C        	  2213: 	cmpi.b #'L',d7
00:00007358 660C            	  2214: 	bne .0004
00:0000735A 7000            	  2215: 	CLR.L d0
00:0000735C 2011            	  2216: 	MOVE.L (A1),D0
00:0000735E F2004000        	  2217: 	FMOVE.L	D0,FP0 	; get the lword
00:00007362 7001            	  2218: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00007364 4E75            	  2219: 	rts							; and return it
                            	  2220: .0004
00:00007366 0C070046        	  2221: 	cmpi.b #'F',d7
00:0000736A 66CA            	  2222: 	bne .0005
00:0000736C F2114800        	  2223: 	FMOVE.X	(A1),FP0 		; get the addressed float
00:00007370 7001            	  2224: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00007372 4E75            	  2225: 	rts							; and return it
                            	  2226: 
                            	  2227: ;-------------------------------------------------------------------------------
                            	  2228: ; The RND function returns a random number from 0 to the value of the following
                            	  2229: ; expression in fp0.
                            	  2230: ;-------------------------------------------------------------------------------
                            	  2231: 
                            	  2232: RND:
00:00007374 6100FD2A        	  2233: 	bsr	PARN								; get the upper limit
00:00007378 0C8000000001    	  2234: 	cmpi.l #DT_NUMERIC,d0		; must be numeric
00:0000737E 660002AC        	  2235: 	bne ETYPE
00:00007382 F200003A        	  2236: 	ftst.x fp0							; it must be positive and non-zero
00:00007386 F281029C        	  2237: 	fbeq QHOW
00:0000738A F2940298        	  2238: 	fblt QHOW
00:0000738E F2000100        	  2239: 	fmove fp0,fp2
00:00007392 7028            	  2240: 	moveq #40,d0						; function #40 get random float
00:00007394 4E4F            	  2241: 	trap #15
00:00007396 F2000823        	  2242: 	fmul fp2,fp0
00:0000739A 7001            	  2243: 	moveq #DT_NUMERIC,d0		; data type is a number
00:0000739C 4E75            	  2244: 	rts
                            	  2245: 
                            	  2246: ; ===== The ABS function returns an absolute value in D0.
                            	  2247: 
                            	  2248: ABS:	
00:0000739E 6100FD00        	  2249: 	bsr	PARN			; get the following expr.'s value
00:000073A2 F2000018        	  2250: 	fabs.x fp0
00:000073A6 7001            	  2251: 	moveq #DT_NUMERIC,d0					; data type is a number
00:000073A8 4E75            	  2252: 	rts
                            	  2253: 
                            	  2254: ; ===== The SIZE function returns the size of free memory in D0.
                            	  2255: 
                            	  2256: SIZE:
00:000073AA 203A0678        	  2257: 	move.l StrArea,d0		; get the number of free bytes...
00:000073AE 90BA067C        	  2258: 	sub.l	 TXTUNF,d0		; between 'TXTUNF' and 'StrArea'
00:000073B2 F2004000        	  2259: 	fmove.l d0,fp0
00:000073B6 7001            	  2260: 	moveq #DT_NUMERIC,d0	; data type is a number
00:000073B8 4E75            	  2261: 	rts										; return the number in fp0
                            	  2262: 	
                            	  2263: ; ===== The TICK function returns the processor tick register in D0.
                            	  2264: 
                            	  2265: TICK:
00:000073BA 4E7A0FF0        	  2266: 	movec tick,d0
00:000073BE F2004000        	  2267: 	fmove.l d0,fp0
00:000073C2 7001            	  2268: 	moveq #DT_NUMERIC,d0					; data type is a number
00:000073C4 4E75            	  2269: 	rts
                            	  2270: 
                            	  2271: ; ===== The CORENO function returns the core number in D0.
                            	  2272: 
                            	  2273: CORENO:
00:000073C6 4E7A0FE0        	  2274: 	movec coreno,d0
00:000073CA F2004000        	  2275: 	fmove.l d0,fp0
00:000073CE 7001            	  2276: 	moveq #DT_NUMERIC,d0					; data type is a number
00:000073D0 4E75            	  2277: 	rts
                            	  2278: 
                            	  2279: ;-------------------------------------------------------------------------------
                            	  2280: ; Get a pair of argments for the LEFT$ and RIGHT$ functions.
                            	  2281: ; 	(STRING, NUM)
                            	  2282: ; Returns:
                            	  2283: ;		fp0 = number
                            	  2284: ;		fp1 = string
                            	  2285: ;-------------------------------------------------------------------------------
                            	  2286: 
                            	  2287: LorRArgs:
00:000073D2 61000450        	  2288: 	bsr	TSTC						; else look for ( STRING EXPR, NUM EXPR )
00:000073D6 28              	  2289: 	dc.b	'(',LorR1-*
00:000073D7 33
00:000073D8 6100F9FA        	  2290: 	bsr	EXPR
00:000073DC 0C8000000002    	  2291: 	cmpi.l #DT_STRING,d0
00:000073E2 66000248        	  2292: 	bne ETYPE
00:000073E6 6100F99C        	  2293: 	bsr XP_PUSH
00:000073EA 61000438        	  2294: 	bsr TSTC
00:000073EE 2C              	  2295: 	dc.b ',',LorR1-*
00:000073EF 1B
00:000073F0 6100F9E2        	  2296: 	bsr EXPR
00:000073F4 0C8000000001    	  2297: 	cmpi.l #DT_NUMERIC,d0
00:000073FA 66000230        	  2298: 	bne ETYPE
00:000073FE 61000424        	  2299: 	bsr	TSTC
00:00007402 29              	  2300: 	dc.b	')',LorR1-*
00:00007403 07
00:00007404 6100F99E        	  2301: 	bsr XP_POP1
00:00007408 4E75            	  2302: 	rts
                            	  2303: LorR1
00:0000740A 60000218        	  2304: 	bra QHOW
                            	  2305: 	
                            	  2306: ;-------------------------------------------------------------------------------
                            	  2307: ; MID$ function gets a substring of characters from start position for
                            	  2308: ; requested length.
                            	  2309: ;-------------------------------------------------------------------------------
                            	  2310: 
                            	  2311: MID:
00:0000740E 61000414        	  2312: 	bsr	TSTC						; look for ( STRING EXPR, NUM EXPR [, NUM_EXPR] )
00:00007412 28              	  2313: 	dc.b	'(',MID1-*
00:00007413 C1
00:00007414 6100F9BE        	  2314: 	bsr	EXPR
00:00007418 0C8000000002    	  2315: 	cmpi.l #DT_STRING,d0
00:0000741E 6600020C        	  2316: 	bne ETYPE
00:00007422 6100F960        	  2317: 	bsr XP_PUSH
00:00007426 610003FC        	  2318: 	bsr TSTC
00:0000742A 2C              	  2319: 	dc.b ',',MID1-*
00:0000742B A9
00:0000742C 6100F9A6        	  2320: 	bsr EXPR
00:00007430 0C8000000001    	  2321: 	cmpi.l #DT_NUMERIC,d0
00:00007436 660001F4        	  2322: 	bne ETYPE
00:0000743A 6100F948        	  2323: 	bsr XP_PUSH
00:0000743E 7A02            	  2324: 	moveq #2,d5
00:00007440 610003E2        	  2325: 	bsr	TSTC
00:00007444 2C              	  2326: 	dc.b ',',MID2-*
00:00007445 11
00:00007446 6100F98C        	  2327: 	bsr EXPR
00:0000744A 0C8000000001    	  2328: 	cmpi.l #DT_NUMERIC,d0
00:00007450 660001DA        	  2329: 	bne ETYPE
00:00007454 7A03            	  2330: 	moveq #3,d5					; d5 indicates 3 params
                            	  2331: MID2
00:00007456 610003CC        	  2332: 	bsr TSTC
00:0000745A 29              	  2333: 	dc.b ')',MID1-*
00:0000745B 79
00:0000745C 6100F946        	  2334: 	bsr XP_POP1
00:00007460 0C050003        	  2335: 	cmpi.b #3,d5				; did we have 3 arguments?
00:00007464 6708            	  2336: 	beq MID5						; branch if did
00:00007466 F23C40000000FFFF	  2337: 	fmove.l #$FFFF,fp0	; set length = max
                            	  2338: MID5
00:0000746E F2000500        	  2339: 	fmove.x fp1,fp2			; fp2 = start pos
00:00007472 6100F930        	  2340: 	bsr XP_POP1					; fp1 = string descriptor
                            	  2341: ;-------------------------------------------------------------------------------
                            	  2342: ; Perform MID$ function
                            	  2343: ; 	fp1 = string descriptor
                            	  2344: ; 	fp2 = starting position
                            	  2345: ; 	fp0 = length
                            	  2346: ;-------------------------------------------------------------------------------
                            	  2347: DOMID
00:00007476 F239688000040600	  2348: 	fmove.x fp1,_fpWork	; _fpWork = string descriptor
00:0000747E F2036100        	  2349: 	fmove.l fp2,d3			; d3 = start pos
00:00007482 B67900040600    	  2350: 	cmp.w _fpWork,d3		; is start pos < length
00:00007488 6400019A        	  2351: 	bhs QHOW
00:0000748C F2026000        	  2352: 	fmove.l fp0,d2			; d2=length
00:00007490 D682            	  2353: 	add.l d2,d3					; start pos + length < string length?
00:00007492 B47900040600    	  2354: 	cmp.w _fpWork,d2
00:00007498 6308            	  2355: 	bls MID4
00:0000749A 343900040600    	  2356: 	move.w _fpWork,d2		; move string length to d2
00:000074A0 48C2            	  2357: 	ext.l d2
                            	  2358: MID4
00:000074A2 6100FC12        	  2359: 	bsr AllocateString	; a1 = pointer to new string
00:000074A6 2449            	  2360: 	move.l a1,a2				; a2 = pointer to new string
00:000074A8 227900040604    	  2361: 	move.l _fpWork+4,a1	; a1 = pointer to string
00:000074AE F2036100        	  2362: 	fmove.l fp2,d3			; d3 = start pos
00:000074B2 D3C3            	  2363: 	add.l d3,a1					; a1 = pointer to start pos
00:000074B4 33C200040600    	  2364: 	move.w d2,_fpWork		; length
00:000074BA 23CA00040604    	  2365: 	move.l a2,_fpWork+4	; prep to return target string
00:000074C0 2649            	  2366: 	move.l a1,a3				; a3 = pointer to start pos
00:000074C2 D7C2            	  2367: 	add.l d2,a3					; a3 = pointer to end pos
00:000074C4 61000240        	  2368: 	bsr MVUP						; move A1 to A2 until A1 = A3
00:000074C8 7002            	  2369: 	moveq #DT_STRING,d0	; data type is a string
00:000074CA F239480000040600	  2370: 	fmove.x _fpWork,fp0	; string descriptor in fp0
00:000074D2 4E75            	  2371: 	rts
                            	  2372: MID1
00:000074D4 6000014E        	  2373: 	bra QHOW
                            	  2374: 	
                            	  2375: ;-------------------------------------------------------------------------------
                            	  2376: ; LEFT$ function truncates the string after fp0 characters.
                            	  2377: ; Just like MID$ but with a zero starting postion.
                            	  2378: ;-------------------------------------------------------------------------------
                            	  2379: 	
                            	  2380: LEFT:
00:000074D8 6100FEF8        	  2381: 	bsr LorRArgs				; get arguments
00:000074DC F23C59000000    	  2382: 	fmove.b #0,fp2			; start pos = 0
00:000074E2 6092            	  2383: 	bra DOMID
                            	  2384: 
                            	  2385: ;-------------------------------------------------------------------------------
                            	  2386: ; RIGHT$ function gets the rightmost characters.
                            	  2387: ; The start position must be calculated based on the number of characters
                            	  2388: ; requested and the string length.
                            	  2389: ;-------------------------------------------------------------------------------
                            	  2390: 
                            	  2391: RIGHT:
00:000074E4 6100FEEC        	  2392: 	bsr LorRArgs				; get arguments
00:000074E8 F2026000        	  2393: 	fmove.l fp0,d2			; d2 = required length
00:000074EC F239688000040600	  2394: 	fmove.x fp1,_fpWork	; _fpWork = string descriptor
00:000074F4 363900040600    	  2395: 	move.w _fpWork,d3		; d3 = string length
00:000074FA 48C3            	  2396: 	ext.l d3						; make d3 a long
00:000074FC B682            	  2397: 	cmp.l d2,d3					; is length > right
00:000074FE 6202            	  2398: 	bhi .0001
00:00007500 7400            	  2399: 	moveq #0,d2					; we want all the characters if length <= right
                            	  2400: .0001
00:00007502 9682            	  2401: 	sub.l d2,d3					; d3 = startpos = length - right
00:00007504 F2034100        	  2402: 	fmove.l d3,fp2			; fp2 = start position
00:00007508 6000FF6C        	  2403: 	bra DOMID
                            	  2404: 
                            	  2405: ;-------------------------------------------------------------------------------
                            	  2406: ; LEN( EXPR ) returns the length of a string expression.
                            	  2407: ;-------------------------------------------------------------------------------
                            	  2408: 
                            	  2409: LEN:
00:0000750C 6100FB92        	  2410: 	bsr PARN
00:00007510 0C8000000002    	  2411: 	cmpi.l #DT_STRING,d0
00:00007516 66000114        	  2412: 	bne ETYPE
00:0000751A F239680000040600	  2413: 	fmove.x fp0,_fpWork
00:00007522 303900040600    	  2414: 	move.w _fpWork,d0
00:00007528 48C0            	  2415: 	ext.l d0
00:0000752A F2005000        	  2416: 	fmove.w d0,fp0
00:0000752E 7001            	  2417: 	moveq #DT_NUMERIC,d0
00:00007530 4E75            	  2418: 	rts
                            	  2419: 
                            	  2420: ;-------------------------------------------------------------------------------
                            	  2421: ; INT( EXPR ) returns the integer value of the expression.
                            	  2422: ; the expression must be in the range of a 32-bit integer.
                            	  2423: ;-------------------------------------------------------------------------------
                            	  2424: 
                            	  2425: INT:
00:00007532 6100FB6C        	  2426: 	bsr PARN
00:00007536 0C8000000001    	  2427: 	cmpi.l #DT_NUMERIC,d0
00:0000753C 660000EE        	  2428: 	bne ETYPE
00:00007540 13FC0001FD0FFF00	  2429: 	move.b #1,leds
00:00007548 F2000003        	  2430: 	fintrz fp0,fp0
00:0000754C 13FC0002FD0FFF00	  2431: 	move.b #2,leds
                            	  2432: ;	fmove.l fp0,d0
                            	  2433: ;	fmove.l d0,fp0
00:00007554 7001            	  2434: 	moveq #DT_NUMERIC,d0
00:00007556 4E75            	  2435: 	rts
                            	  2436: 
                            	  2437: 
                            	  2438: ;-------------------------------------------------------------------------------
                            	  2439: ; CHR$( EXPR ) returns a one byte string containing the character.
                            	  2440: ;-------------------------------------------------------------------------------
                            	  2441: 
                            	  2442: CHR:
00:00007558 6100FB46        	  2443: 	bsr PARN
00:0000755C 0C8000000001    	  2444: 	cmpi.l #DT_NUMERIC,d0
00:00007562 660000C8        	  2445: 	bne ETYPE
00:00007566 F2006000        	  2446: 	fmove.l fp0,d0
00:0000756A 7401            	  2447: 	moveq #1,d2
00:0000756C 6100FB48        	  2448: 	bsr AllocateString
00:00007570 1280            	  2449: 	move.b d0,(a1)
00:00007572 42290001        	  2450: 	clr.b 1(a1)
00:00007576 7002            	  2451: 	moveq #DT_STRING,d0
00:00007578 23C900040604    	  2452: 	move.l a1,_fpWork+4
00:0000757E 33FC000100040600	  2453: 	move.w #1,_fpWork
00:00007586 F239480000040600	  2454: 	fmove.x _fpWork,fp0
00:0000758E 4E75            	  2455: 	rts
                            	  2456: 
                            	  2457: ;*******************************************************************
                            	  2458: ;
                            	  2459: ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                            	  2460: ;
                            	  2461: ; 'SETVAL' expects a variable, followed by an equal sign and then
                            	  2462: ; an expression.  It evaluates the expression and sets the variable
                            	  2463: ; to that value.
                            	  2464: ;
                            	  2465: ; 'FIN' checks the end of a command.  If it ended with ":",
                            	  2466: ; execution continues.	If it ended with a CR, it finds the
                            	  2467: ; the next line and continues from there.
                            	  2468: ;
                            	  2469: ; 'ENDCHK' checks if a command is ended with a CR. This is
                            	  2470: ; required in certain commands, such as GOTO, RETURN, STOP, etc.
                            	  2471: ;
                            	  2472: ; 'ERROR' prints the string pointed to by A0. It then prints the
                            	  2473: ; line pointed to by CURRNT with a "?" inserted at where the
                            	  2474: ; old text pointer (should be on top of the stack) points to.
                            	  2475: ; Execution of Tiny BASIC is stopped and a warm start is done.
                            	  2476: ; If CURRNT is zero (indicating a direct command), the direct
                            	  2477: ; command is not printed. If CURRNT is -1 (indicating
                            	  2478: ; 'INPUT' command in progress), the input line is not printed
                            	  2479: ; and execution is not terminated but continues at 'INPERR'.
                            	  2480: ;
                            	  2481: ; Related to 'ERROR' are the following:
                            	  2482: ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                            	  2483: ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                            	  2484: ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                            	  2485: ; 'QHOW' and 'AHOW' also do this for "How?".
                            	  2486: 
                            	  2487: ; SETVAL
                            	  2488: ; Returns:
                            	  2489: ;		a6 pointer to variable
                            	  2490: 
                            	  2491: SETVAL:	
00:00007590 6100FCBC        	  2492: 	bsr	TSTV					; variable name?
00:00007594 6546            	  2493: 	bcs	QWHAT					; if not, say "What?"
00:00007596 2F00            	  2494: 	move.l d0,-(sp)		; save the variable's address
00:00007598 6100028A        	  2495: 	bsr	TSTC					; get past the "=" sign
00:0000759C 3D              	  2496: 	dc.b	'=',SV1-*
00:0000759D 11
00:0000759E 6100F834        	  2497: 	bsr	EXPR					; evaluate the expression
00:000075A2 2C5F            	  2498: 	move.l (sp)+,a6
00:000075A4 2C80            	  2499: 	move.l d0,(a6)		; save type
00:000075A6 F22E68000004    	  2500: 	fmove.x fp0,4(a6) ; and save its value in the variable
00:000075AC 4E75            	  2501: 	rts
                            	  2502: SV1
00:000075AE 602C            	  2503: 	bra	QWHAT					; if no "=" sign
                            	  2504: 
                            	  2505: FIN
00:000075B0 61000272        	  2506: 	bsr	TSTC					; *** FIN ***
00:000075B4 3A              	  2507: 	DC.B ':',FI1-*
00:000075B5 07
00:000075B6 588F            	  2508: 	ADDQ.L #4,SP			; if ":", discard return address
00:000075B8 6000F0BA        	  2509: 	BRA	RUNSML				; continue on the same line
                            	  2510: FI1
00:000075BC 61000266        	  2511: 	bsr	TSTC					; not ":", is it a CR?
00:000075C0 0D              	  2512: 	DC.B	CR,FI2-*
00:000075C1 07
00:000075C2 588F            	  2513: 	ADDQ.L #4,SP			; yes, purge return address
00:000075C4 6000F058        	  2514: 	BRA	RUNNXL				; execute the next line
                            	  2515: FI2
00:000075C8 4E75            	  2516: 	RTS								; else return to the caller
                            	  2517: 
                            	  2518: ENDCHK
00:000075CA 610002BC        	  2519: 	bsr	IGNBLK
00:000075CE 0C10003A        	  2520: 	CMP.B #':',(a0)
00:000075D2 6706            	  2521: 	BEQ ENDCHK1
00:000075D4 0C10000D        	  2522: 	CMP.B	#CR,(A0)		; does it end with a CR?
00:000075D8 6602            	  2523: 	BNE	QWHAT					; if not, say "WHAT?"
                            	  2524: ENDCHK1:
00:000075DA 4E75            	  2525: 	RTS
                            	  2526: 
                            	  2527: QWHAT
00:000075DC 2F08            	  2528: 	MOVE.L A0,-(SP)
                            	  2529: AWHAT
00:000075DE 4DFA03CA        	  2530: 	LEA	WHTMSG,A6
                            	  2531: ERROR
00:000075E2 6100030A        	  2532: 	bsr	PRMESG		display the error message
00:000075E6 205F            	  2533: 	MOVE.L	(SP)+,A0	restore the text pointer
00:000075E8 203A03FA        	  2534: 	MOVE.L	CURRNT,D0	get the current line number
00:000075EC 6700EC6C        	  2535: 	BEQ	WSTART		if zero, do a warm start
00:000075F0 B0BCFFFFFFFF    	  2536: 	CMP.L	#-1,D0		is the line no. pointer = -1?
00:000075F6 6700F2F6        	  2537: 	BEQ	INPERR		if so, redo input
00:000075FA 1F10            	  2538: 	MOVE.B	(A0),-(SP)	save the char. pointed to
00:000075FC 4210            	  2539: 	CLR.B	(A0)		put a zero where the error is
00:000075FE 227A03E4        	  2540: 	MOVE.L	CURRNT,A1	point to start of current line
00:00007602 61000202        	  2541: 	bsr	PRTLN		display the line in error up to the 0
00:00007606 109F            	  2542: 	MOVE.B	(SP)+,(A0)	restore the character
00:00007608 103C003F        	  2543: 	MOVE.B	#'?',D0         display a "?"
00:0000760C 6100EBC4        	  2544: 	BSR	GOOUT
00:00007610 4240            	  2545: 	CLR	D0
00:00007612 5389            	  2546: 	SUBQ.L	#1,A1		point back to the error char.
00:00007614 6100017E        	  2547: 	bsr	PRTSTG		display the rest of the line
00:00007618 6000EC40        	  2548: 	BRA	WSTART		and do a warm start
                            	  2549: QSORRY
00:0000761C 2F08            	  2550: 	MOVE.L	A0,-(SP)
                            	  2551: ASORRY
00:0000761E 4DFA03AC        	  2552: 	LEA	SRYMSG,A6
00:00007622 60BE            	  2553: 	BRA	ERROR
                            	  2554: QHOW:
00:00007624 2F08            	  2555: 	MOVE.L	A0,-(SP)	Error: "How?"
                            	  2556: AHOW
00:00007626 4DFA037B        	  2557: 	LEA	HOWMSG,A6
00:0000762A 60B6            	  2558: 	BRA	ERROR
                            	  2559: ETYPE
00:0000762C 4DFA0384        	  2560: 	lea TYPMSG,a6
00:00007630 60B0            	  2561: 	bra ERROR
                            	  2562: 
                            	  2563: *******************************************************************
                            	  2564: *
                            	  2565: * *** GETLN *** FNDLN (& friends) ***
                            	  2566: *
                            	  2567: * 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                            	  2568: * the character in D0 (given by the caller), then it fills the
                            	  2569: * buffer and echos. It ignores LF's but still echos
                            	  2570: * them back. Control-H is used to delete the last character
                            	  2571: * entered (if there is one), and control-X is used to delete the
                            	  2572: * whole line and start over again. CR signals the end of a line,
                            	  2573: * and causes 'GETLN' to return.
                            	  2574: *
                            	  2575: * 'FNDLN' finds a line with a given line no. (in D1) in the
                            	  2576: * text save area.  A1 is used as the text pointer. If the line
                            	  2577: * is found, A1 will point to the beginning of that line
                            	  2578: * (i.e. the high byte of the line no.), and flags are NC & Z.
                            	  2579: * If that line is not there and a line with a higher line no.
                            	  2580: * is found, A1 points there and flags are NC & NZ. If we reached
                            	  2581: * the end of the text save area and cannot find the line, flags
                            	  2582: * are C & NZ.
                            	  2583: * 'FNDLN' will initialize A1 to the beginning of the text save
                            	  2584: * area to start the search. Some other entries of this routine
                            	  2585: * will not initialize A1 and do the search.
                            	  2586: * 'FNDLNP' will start with A1 and search for the line no.
                            	  2587: * 'FNDNXT' will bump A1 by 2, find a CR and then start search.
                            	  2588: * 'FNDSKP' uses A1 to find a CR, and then starts the search.
                            	  2589: 
                            	  2590: GETLN:
00:00007632 6100EB9E        	  2591: 	BSR	GOOUT		display the prompt
00:00007636 103C0020        	  2592: 	MOVE.B	#' ',D0         and a space
00:0000763A 6100EB96        	  2593: 	BSR	GOOUT
00:0000763E 41FA03FC        	  2594: 	LEA	BUFFER,A0	; A0 is the buffer pointer
                            	  2595: GL1
00:00007642 61000298        	  2596: 	bsr	CHKIO		check keyboard
00:00007646 67FA            	  2597: 	BEQ	GL1		wait for a char. to come in
00:00007648 B03C0008        	  2598: 	CMP.B	#CTRLH,D0	delete last character?
00:0000764C 6726            	  2599: 	BEQ	GL3		if so
00:0000764E B03C0018        	  2600: 	CMP.B	#CTRLX,D0	delete the whole line?
00:00007652 6744            	  2601: 	BEQ	GL4		if so
00:00007654 B03C000D        	  2602: 	CMP.B	#CR,D0		accept a CR
00:00007658 6706            	  2603: 	BEQ	GL2
00:0000765A B03C0020        	  2604: 	CMP.B	#' ',D0         if other control char., discard it
00:0000765E 65E2            	  2605: 	BCS	GL1
                            	  2606: GL2
00:00007660 10C0            	  2607: 	MOVE.B	D0,(A0)+	save the char.
00:00007662 6100EB6E        	  2608: 	BSR	GOOUT		echo the char back out
00:00007666 B03C000D        	  2609: 	CMP.B	#CR,D0		if it's a CR, end the line
00:0000766A 675C            	  2610: 	BEQ	GL7
00:0000766C B1FC00007A8B    	  2611: 	CMP.L	#(BUFFER+BUFLEN-1),A0	any more room?
00:00007672 65CE            	  2612: 	BCS	GL1		yes: get some more, else delete last char.
                            	  2613: GL3
00:00007674 103C0008        	  2614: 	MOVE.B	#CTRLH,D0	delete a char. if possible
00:00007678 6100EB58        	  2615: 	BSR	GOOUT
00:0000767C 103C0020        	  2616: 	MOVE.B	#' ',D0
00:00007680 6100EB50        	  2617: 	BSR	GOOUT
00:00007684 B1FC00007A3C    	  2618: 	CMP.L	#BUFFER,A0	any char.'s left?
00:0000768A 63B6            	  2619: 	BLS	GL1		if not
00:0000768C 103C0008        	  2620: 	MOVE.B	#CTRLH,D0	if so, finish the BS-space-BS sequence
00:00007690 6100EB40        	  2621: 	BSR	GOOUT
00:00007694 5388            	  2622: 	SUBQ.L	#1,A0		decrement the text pointer
00:00007696 60AA            	  2623: 	BRA	GL1		back for more
                            	  2624: GL4
00:00007698 2208            	  2625: 	MOVE.L	A0,D1		delete the whole line
00:0000769A 92BC00007A3C    	  2626: 	SUB.L	#BUFFER,D1	figure out how many backspaces we need
00:000076A0 671E            	  2627: 	BEQ	GL6		if none needed, branch
00:000076A2 5341            	  2628: 	SUBQ	#1,D1		adjust for DBRA
                            	  2629: GL5
00:000076A4 103C0008        	  2630: 	MOVE.B	#CTRLH,D0	and display BS-space-BS sequences
00:000076A8 6100EB28        	  2631: 	BSR	GOOUT
00:000076AC 103C0020        	  2632: 	MOVE.B	#' ',D0
00:000076B0 6100EB20        	  2633: 	BSR	GOOUT
00:000076B4 103C0008        	  2634: 	MOVE.B	#CTRLH,D0
00:000076B8 6100EB18        	  2635: 	BSR	GOOUT
00:000076BC 51C9FFE6        	  2636: 	DBRA	D1,GL5
                            	  2637: GL6
00:000076C0 41FA037A        	  2638: 	LEA	BUFFER,A0	reinitialize the text pointer
00:000076C4 6000FF7C        	  2639: 	BRA	GL1		and go back for more
                            	  2640: GL7
00:000076C8 103C000A        	  2641: 	MOVE.B	#LF,D0		echo a LF for the CR
00:000076CC 6000EB04        	  2642: 	BRA	GOOUT
                            	  2643: 
                            	  2644: FNDLN:
00:000076D0 B2BC0000FFFF    	  2645: 	CMP.L	#$FFFF,D1	line no. must be < 65535
00:000076D6 6400FF4C        	  2646: 	BCC	QHOW
00:000076DA 227AEB0A        	  2647: 	MOVE.L	TXTBGN,A1	init. the text save pointer
                            	  2648: 
                            	  2649: FNDLNP
00:000076DE 247A034C        	  2650: 	MOVE.L	TXTUNF,A2	check if we passed the end
00:000076E2 538A            	  2651: 	SUBQ.L	#1,A2
00:000076E4 B5C9            	  2652: 	CMP.L	A1,A2
00:000076E6 650C            	  2653: 	BCS	FNDRET		if so, return with Z=0 & C=1
00:000076E8 1411            	  2654: 	MOVE.B	(A1),D2	if not, get a line no.
00:000076EA E14A            	  2655: 	LSL	#8,D2
00:000076EC 14290001        	  2656: 	MOVE.B	1(A1),D2
00:000076F0 B441            	  2657: 	CMP.W	D1,D2		is this the line we want?
00:000076F2 6502            	  2658: 	BCS	FNDNXT		no, not there yet
                            	  2659: FNDRET
00:000076F4 4E75            	  2660: 	RTS			return the cond. codes
                            	  2661: 
                            	  2662: FNDNXT
00:000076F6 5489            	  2663: 	ADDQ.L	#2,A1		find the next line
                            	  2664: 
                            	  2665: FNDSKP	
00:000076F8 0C19000D        	  2666: 	CMP.B	#CR,(A1)+	try to find a CR
00:000076FC 67E0            	  2667: 	BEQ		FNDLNP
00:000076FE B3FA032C        	  2668: 	CMP.L	TXTUNF,A1
00:00007702 65F4            	  2669: 	BLO		FNDSKP
00:00007704 60D8            	  2670: 	BRA		FNDLNP		check if end of text
                            	  2671: 
                            	  2672: ;******************************************************************
                            	  2673: ;
                            	  2674: ; *** MVUP *** MVDOWN *** POPA *** PUSHA ***
                            	  2675: ;
                            	  2676: ; 'MVUP' moves a block up from where A1 points to where A2 points
                            	  2677: ; until A1=A3
                            	  2678: ;
                            	  2679: ; 'MVDOWN' moves a block down from where A1 points to where A3
                            	  2680: ; points until A1=A2
                            	  2681: ;
                            	  2682: ; 'POPA' restores the 'FOR' loop variable save area from the stack
                            	  2683: ;
                            	  2684: ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                            	  2685: ;
                            	  2686: 
                            	  2687: MVUP
00:00007706 B7C9            	  2688: 	CMP.L	A1,A3					; see the above description
00:00007708 6304            	  2689: 	BLS	MVRET
00:0000770A 14D9            	  2690: 	MOVE.B	(A1)+,(A2)+
00:0000770C 60F8            	  2691: 	BRA	MVUP
                            	  2692: MVRET
00:0000770E 4E75            	  2693: 	RTS
                            	  2694: 
                            	  2695: ; For string movements only suitable in some circumstances
                            	  2696: 
                            	  2697: MVUPW
00:00007710 B3CB            	  2698: 	cmp.l a3,a1
00:00007712 6404            	  2699: 	bhs .0001
00:00007714 34D9            	  2700: 	move.w (a1)+,(a2)+
00:00007716 60F8            	  2701: 	bra MVUPW
                            	  2702: .0001
00:00007718 4E75            	  2703: 	rts
                            	  2704: 
                            	  2705: MVDOWN
00:0000771A B5C9            	  2706: 	CMP.L	A1,A2		see the above description
00:0000771C 67F0            	  2707: 	BEQ	MVRET
00:0000771E 1721            	  2708: 	MOVE.B	-(A1),-(A3)
00:00007720 60F8            	  2709: 	BRA	MVDOWN
                            	  2710: 
                            	  2711: POPA
00:00007722 2C5F            	  2712: 	MOVE.L	(SP)+,A6			; A6 = return address
00:00007724 23DF000079F4    	  2713: 	MOVE.L	(SP)+,LOPVAR	restore LOPVAR, but zero means no more
00:0000772A 6730            	  2714: 	BEQ	.0001
00:0000772C 23DF00007A00    	  2715: 	MOVE.L	(SP)+,LOPINC+8	if not zero, restore the rest
00:00007732 23DF000079FC    	  2716: 	MOVE.L	(SP)+,LOPINC+4
00:00007738 23DF000079F8    	  2717: 	MOVE.L	(SP)+,LOPINC
00:0000773E 23DF00007A0C    	  2718: 	MOVE.L	(SP)+,LOPLMT+8
00:00007744 23DF00007A08    	  2719: 	MOVE.L	(SP)+,LOPLMT+4
00:0000774A 23DF00007A04    	  2720: 	MOVE.L	(SP)+,LOPLMT
00:00007750 23DF00007A10    	  2721: 	MOVE.L	(SP)+,LOPLN
00:00007756 23DF00007A14    	  2722: 	MOVE.L	(SP)+,LOPPT
                            	  2723: .0001
00:0000775C 4ED6            	  2724: 	JMP	(A6)		return
                            	  2725: 
                            	  2726: PUSHA
00:0000775E 223A02D4        	  2727: 	MOVE.L	STKLMT,D1		; Are we running out of stack room?
00:00007762 928F            	  2728: 	SUB.L	SP,D1
00:00007764 6400FEB6        	  2729: 	BCC	QSORRY					; if so, say we're sorry
00:00007768 2C5F            	  2730: 	MOVE.L	(SP)+,A6		; else get the return address
00:0000776A 223A0288        	  2731: 	MOVE.L	LOPVAR,D1		; save loop variables
00:0000776E 6720            	  2732: 	BEQ	.0001						; if LOPVAR is zero, that's all
00:00007770 2F3A02A2        	  2733: 	MOVE.L	LOPPT,-(SP)	; else save all the others
00:00007774 2F3A029A        	  2734: 	MOVE.L	LOPLN,-(SP)
00:00007778 2F3A028A        	  2735: 	MOVE.L	LOPLMT,-(SP)
00:0000777C 2F3A028A        	  2736: 	MOVE.L	LOPLMT+4,-(SP)
00:00007780 2F3A028A        	  2737: 	MOVE.L	LOPLMT+8,-(SP)
00:00007784 2F3A0272        	  2738: 	MOVE.L	LOPINC,-(SP)
00:00007788 2F3A0272        	  2739: 	MOVE.L	LOPINC+4,-(SP)
00:0000778C 2F3A0272        	  2740: 	MOVE.L	LOPINC+8,-(SP)
                            	  2741: .0001
00:00007790 2F01            	  2742: 	MOVE.L	D1,-(SP)
00:00007792 4ED6            	  2743: 	JMP	(A6)		return
                            	  2744: 
                            	  2745: *******************************************************************
                            	  2746: *
                            	  2747: * *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                            	  2748: *
                            	  2749: * 'PRTSTG' prints a string pointed to by A1. It stops printing
                            	  2750: * and returns to the caller when either a CR is printed or when
                            	  2751: * the next byte is the same as what was passed in D0 by the
                            	  2752: * caller.
                            	  2753: *
                            	  2754: * 'QTSTG' looks for an underline (back-arrow on some systems),
                            	  2755: * single-quote, or double-quote.  If none of these are found, returns
                            	  2756: * to the caller.  If underline, outputs a CR without a LF.  If single
                            	  2757: * or double quote, prints the quoted string and demands a matching
                            	  2758: * end quote.  After the printing, the next 2 bytes of the caller are
                            	  2759: * skipped over (usually a short branch instruction).
                            	  2760: *
                            	  2761: * 'PRTNUM' prints the 32 bit number in D1, leading blanks are added if
                            	  2762: * needed to pad the number of spaces to the number in D4.
                            	  2763: * However, if the number of digits is larger than the no. in
                            	  2764: * D4, all digits are printed anyway. Negative sign is also
                            	  2765: * printed and counted in, positive sign is not.
                            	  2766: *
                            	  2767: * 'PRTLN' prints the saved text line pointed to by A1
                            	  2768: * with line no. and all.
                            	  2769: *
                            	  2770: PRTSTG:
00:00007794 1200            	  2771: 	MOVE.B	D0,D1		save the stop character
                            	  2772: PS1
00:00007796 1019            	  2773: 	MOVE.B	(A1)+,D0	get a text character
00:00007798 B200            	  2774: 	CMP.B	D0,D1		same as stop character?
00:0000779A 6712            	  2775: 	BEQ	PRTRET		if so, return
00:0000779C 6100EA34        	  2776: 	BSR	GOOUT		display the char.
00:000077A0 B03C000D        	  2777: 	CMP.B	#CR,D0		is it a C.R.?
00:000077A4 66F0            	  2778: 	BNE	PS1		no, go back for more
00:000077A6 103C000A        	  2779: 	MOVE.B	#LF,D0		yes, add a L.F.
00:000077AA 6100EA26        	  2780: 	BSR	GOOUT
                            	  2781: PRTRET
00:000077AE 4E75            	  2782: 	RTS			then return
                            	  2783: 
                            	  2784: PRTSTR2a
00:000077B0 1019            	  2785: 	move.b (a1)+,d0
00:000077B2 6100EA1E        	  2786: 	bsr GOOUT
                            	  2787: PRTSTR2:
00:000077B6 51C9FFF8        	  2788: 	dbra d1,PRTSTR2a
00:000077BA 4E75            	  2789: 	rts
                            	  2790: 	
                            	  2791: 	if 0
                            	  2792: QTSTG
                            	  2793: 	bsr	TSTC		*** QTSTG ***
                            	  2794: 	DC.B	'"',QT3-*
                            	  2795: 	MOVE.B	#'"',D0         it is a "
                            	  2796: QT1
                            	  2797: 	MOVE.L	A0,A1
                            	  2798: 	BSR	PRTSTG		print until another
                            	  2799: 	MOVE.L	A1,A0
                            	  2800: 	MOVE.L	(SP)+,A1	pop return address
                            	  2801: 	CMP.B	#LF,D0		was last one a CR?
                            	  2802: 	BEQ	RUNNXL		if so, run next line
                            	  2803: QT2
                            	  2804: 	ADDQ.L	#2,A1		skip 2 bytes on return
                            	  2805: 	JMP	(A1)		return
                            	  2806: QT3
                            	  2807: 	bsr	TSTC		is it a single quote?
                            	  2808: 	DC.B	'''',QT4-*
                            	  2809: 	MOVE.B	#'''',D0        if so, do same as above
                            	  2810: 	BRA	QT1
                            	  2811: QT4
                            	  2812: 	bsr	TSTC		is it an underline?
                            	  2813: 	DC.B	'_',QT5-*
                            	  2814: 	MOVE.B	#CR,D0		if so, output a CR without LF
                            	  2815: 	bsr	GOOUT
                            	  2816: 	MOVE.L	(SP)+,A1	pop return address
                            	  2817: 	BRA	QT2
                            	  2818: QT5
                            	  2819: 	RTS			none of the above
                            	  2820: 	endif
                            	  2821: 
                            	  2822: PRTNUM:
00:000077BC 4E52FFD0        	  2823: 	link a2,#-48
00:000077C0 217900040098002C	  2824: 	move.l _canary,44(a0)
00:000077C8 48D7020F        	  2825: 	movem.l d0/d1/d2/d3/a1,(sp)
00:000077CC F22F68000014    	  2826: 	fmove.x fp0,20(sp)
00:000077D2 F22F68800020    	  2827: 	fmove.x fp1,32(sp)
00:000077D8 F2000400        	  2828: 	fmove.x fp1,fp0					; fp0 = number to print
00:000077DC 43F900040520    	  2829: 	lea _fpBuf,a1						; a1 = pointer to buffer to use
00:000077E2 7027            	  2830: 	moveq #39,d0						; d0 = function #39 print float
00:000077E4 2204            	  2831: 	move.l d4,d1						; d1 = width
00:000077E6 2404            	  2832: 	move.l d4,d2						; d2 = precision max
00:000077E8 7665            	  2833: 	moveq #'e',d3
00:000077EA 4E4F            	  2834: 	trap #15
00:000077EC 4CD7020F        	  2835: 	movem.l (sp),d0/d1/d2/d3/a1
00:000077F0 F22F48000014    	  2836: 	fmove.x 20(sp),fp0
00:000077F6 F22F48800020    	  2837: 	fmove.x 32(sp),fp1
00:000077FC A2A80003002C    	  2838: 	cchk 44(a0)
00:00007802 4E5A            	  2839: 	unlk a2
00:00007804 4E75            	  2840: 	rts
                            	  2841: 
                            	  2842: ; Debugging
                            	  2843: 	if 0
                            	  2844: PRTFP0:
                            	  2845: 	link a2,#-48
                            	  2846: 	move.l _canary,44(a0)
                            	  2847: 	movem.l d0/d1/d2/d3/a1,(sp)
                            	  2848: 	fmove.x fp0,20(sp)
                            	  2849: 	lea _fpBuf,a1						; a1 = pointer to buffer to use
                            	  2850: 	moveq #39,d0						; d0 = function #39 print float
                            	  2851: 	moveq #30,d1						; d1 = width
                            	  2852: 	moveq #25,d2						; d2 = precision max
                            	  2853: 	moveq #'e',d3
                            	  2854: 	trap #15
                            	  2855: 	movem.l (sp),d0/d1/d2/d3/a1
                            	  2856: 	fmove.x 20(sp),fp0
                            	  2857: 	cchk 44(a0)
                            	  2858: 	unlk a2
                            	  2859: 	rts
                            	  2860: 	endif
                            	  2861: 
                            	  2862: PRTLN:
00:00007806 7200            	  2863: 	CLR.L	D1
00:00007808 1219            	  2864: 	MOVE.B (A1)+,D1	get the binary line number
00:0000780A E149            	  2865: 	LSL	#8,D1
00:0000780C 1219            	  2866: 	MOVE.B (A1)+,D1
00:0000780E F2015080        	  2867: 	FMOVE.W D1,FP1
00:00007812 7805            	  2868: 	MOVEQ	#5,D4			; display a 5 digit line no.
00:00007814 61A6            	  2869: 	BSR	PRTNUM
00:00007816 103C0020        	  2870: 	MOVE.B	#' ',D0         followed by a blank
00:0000781A 6100E9B6        	  2871: 	BSR	GOOUT
00:0000781E 4240            	  2872: 	CLR	D0		stop char. is a zero
00:00007820 6000FF72        	  2873: 	BRA	PRTSTG		display the rest of the line
                            	  2874: 
                            	  2875: 
                            	  2876: ; ===== Test text byte following the call to this subroutine. If it
                            	  2877: ; equals the byte pointed to by A0, return to the code following
                            	  2878: ; the call. If they are not equal, branch to the point
                            	  2879: ;	indicated by the offset byte following the text byte.
                            	  2880: 
                            	  2881: TSTC:
00:00007824 6162            	  2882: 	BSR	IGNBLK				; ignore leading blanks
00:00007826 225F            	  2883: 	MOVE.L (SP)+,A1		; get the return address
00:00007828 1219            	  2884: 	MOVE.B (A1)+,D1		; get the byte to compare
00:0000782A B210            	  2885: 	CMP.B	(A0),D1 		;	is it = to what A0 points to?
00:0000782C 6708            	  2886: 	BEQ	TC1						; if so
00:0000782E 7200            	  2887: 	CLR.L	D1					; If not, add the second
00:00007830 1211            	  2888: 	MOVE.B (A1),D1 		; byte following the call to
00:00007832 D3C1            	  2889: 	ADD.L	D1,A1				; the return address.
00:00007834 4ED1            	  2890: 	JMP	(A1)					; jump to the routine
                            	  2891: TC1
00:00007836 5288            	  2892: 	ADDQ.L #1,A0			; if equal, bump text pointer
00:00007838 5289            	  2893: 	ADDQ.L #1,A1			; Skip the 2 bytes following
00:0000783A 4ED1            	  2894: 	JMP	(A1)					; the call and continue.
                            	  2895: 
                            	  2896: 
                            	  2897: ; ===== See if the text pointed to by A0 is a number. If so,
                            	  2898: ;	return the number in FP1 and the number of digits in D2,
                            	  2899: ;	else return zero in FP1 and D2.
                            	  2900: ; If text is not a number, then A0 is not updated, otherwise
                            	  2901: ; A0 is advanced past the number. Note A0 is always updated
                            	  2902: ; past leading spaces.
                            	  2903: 
                            	  2904: TSTNUM:
00:0000783C 4E52FFE0        	  2905: 	link a2,#-32
00:00007840 2F7900040098001C	  2906: 	move.l _canary,28(sp)
00:00007848 48D70202        	  2907: 	movem.l d1/a1,(sp)
00:0000784C F22F68000010    	  2908: 	fmove.x fp0,16(sp)
00:00007852 7029            	  2909: 	moveq #41,d0						; function #41, get float
00:00007854 7201            	  2910: 	moveq #1,d1							; d1 = input stride
00:00007856 2248            	  2911: 	move.l a0,a1						; a1 = pointer to input buffer
00:00007858 4E4F            	  2912: 	trap #15								; call BIOS get float function
00:0000785A 2049            	  2913: 	move.l a1,a0						; set text pointer
00:0000785C 7001            	  2914: 	moveq #DT_NUMERIC,d0		; default data type = number
00:0000785E F2000080        	  2915: 	fmove.x fp0,fp1					; return expected in fp1
00:00007862 4A41            	  2916: 	tst.w d1								; check if a number (digits > 0?)
00:00007864 6706            	  2917: 	beq .0002
00:00007866 7400            	  2918: 	clr.l d2								; d2.l = 0
00:00007868 3401            	  2919: 	move.w d1,d2						; d2 = number of digits
00:0000786A 6008            	  2920: 	bra .0001
                            	  2921: .0002											; not a number, return with orignal text pointer
00:0000786C 7000            	  2922: 	moveq #0,d0							; data type = not a number
00:0000786E 7400            	  2923: 	moveq #0,d2							; d2 = 0
00:00007870 F2024080        	  2924: 	fmove.l d2,fp1					; return a zero
                            	  2925: .0001
00:00007874 4CD70202        	  2926: 	movem.l (sp),d1/a1
00:00007878 F22F48000010    	  2927: 	fmove.x 16(sp),fp0
00:0000787E A2AF0003001C    	  2928: 	cchk 28(sp)
00:00007884 4E5A            	  2929: 	unlk a2
00:00007886 4E75            	  2930: 	rts
                            	  2931: 		
                            	  2932: ; ===== Skip over blanks in the text pointed to by A0.
                            	  2933: 
                            	  2934: IGNBLK:
00:00007888 0C180020        	  2935: 	CMP.B	#' ',(A0)+		; see if it's a space
00:0000788C 67FA            	  2936: 	BEQ	IGNBLK					; if so, swallow it
00:0000788E 5388            	  2937: 	SUBQ.L #1,A0				; decrement the text pointer
00:00007890 4E75            	  2938: 	RTS
                            	  2939: 
                            	  2940: *
                            	  2941: * ===== Convert the line of text in the input buffer to upper
                            	  2942: *	case (except for stuff between quotes).
                            	  2943: *
00:00007892 41FA01A8        	  2944: TOUPBUF LEA	BUFFER,A0	set up text pointer
00:00007896 4201            	  2945: 	CLR.B	D1		clear quote flag
                            	  2946: TOUPB1	
00:00007898 1018            	  2947: 	MOVE.B	(A0)+,D0	get the next text char.
00:0000789A B03C000D        	  2948: 	CMP.B	#CR,D0		is it end of line?
00:0000789E 6718            	  2949: 	BEQ	TOUPBRT 	if so, return
00:000078A0 B03C0022        	  2950: 	CMP.B	#'"',D0         a double quote?
00:000078A4 6714            	  2951: 	BEQ	DOQUO
00:000078A6 B03C0027        	  2952: 	CMP.B	#'''',D0        or a single quote?
00:000078AA 670E            	  2953: 	BEQ	DOQUO
00:000078AC 4A01            	  2954: 	TST.B	D1		inside quotes?
00:000078AE 66E8            	  2955: 	BNE	TOUPB1		if so, do the next one
00:000078B0 6118            	  2956: 	BSR	TOUPPER 	convert to upper case
00:000078B2 1100            	  2957: 	MOVE.B	D0,-(A0)	store it
00:000078B4 5288            	  2958: 	ADDQ.L	#1,A0
00:000078B6 60E0            	  2959: 	BRA	TOUPB1		and go back for more
                            	  2960: TOUPBRT
00:000078B8 4E75            	  2961: 	RTS
                            	  2962: 
00:000078BA 4A01            	  2963: DOQUO	TST.B	D1		are we inside quotes?
00:000078BC 6604            	  2964: 	BNE	DOQUO1
00:000078BE 1200            	  2965: 	MOVE.B	D0,D1		if not, toggle inside-quotes flag
00:000078C0 60D6            	  2966: 	BRA	TOUPB1
00:000078C2 B200            	  2967: DOQUO1	CMP.B	D0,D1		make sure we're ending proper quote
00:000078C4 66D2            	  2968: 	BNE	TOUPB1		if not, ignore it
00:000078C6 4201            	  2969: 	CLR.B	D1		else clear quote flag
00:000078C8 60CE            	  2970: 	BRA	TOUPB1
                            	  2971: 
                            	  2972: *
                            	  2973: * ===== Convert the character in D0 to upper case
                            	  2974: *
00:000078CA B03C0061        	  2975: TOUPPER CMP.B	#'a',D0         is it < 'a'?
00:000078CE 650A            	  2976: 	BCS	TOUPRET
00:000078D0 B03C007A        	  2977: 	CMP.B	#'z',D0         or > 'z'?
00:000078D4 6204            	  2978: 	BHI	TOUPRET
00:000078D6 903C0020        	  2979: 	SUB.B	#32,D0		if not, make it upper case
00:000078DA 4E75            	  2980: TOUPRET RTS
                            	  2981: 
                            	  2982: *
                            	  2983: * 'CHKIO' checks the input. If there's no input, it will return
                            	  2984: * to the caller with the Z flag set. If there is input, the Z
                            	  2985: * flag is cleared and the input byte is in D0. However, if a
                            	  2986: * control-C is read, 'CHKIO' will warm-start BASIC and will not
                            	  2987: * return to the caller.
                            	  2988: *
                            	  2989: CHKIO
00:000078DC 6100E8F8        	  2990: 	bsr	GOIN		get input if possible
00:000078E0 670A            	  2991: 	BEQ	CHKRET		if Zero, no input
00:000078E2 B03C0003        	  2992: 	CMP.B	#CTRLC,D0	is it control-C?
00:000078E6 6604            	  2993: 	BNE	CHKRET		if not
00:000078E8 6000E970        	  2994: 	BRA	WSTART		if so, do a warm start
                            	  2995: CHKRET
00:000078EC 4E75            	  2996: 	RTS
                            	  2997: 
                            	  2998: *
                            	  2999: * ===== Display a CR-LF sequence
                            	  3000: *
                            	  3001: ;CRLF	LEA	CLMSG,A6
                            	  3002: 
                            	  3003: 
                            	  3004: ; ===== Display a zero-ended string pointed to by register A6
                            	  3005: 
                            	  3006: PRMESG:
00:000078EE 101E            	  3007: 	MOVE.B (A6)+,D0		; get the char.
00:000078F0 6706            	  3008: 	BEQ	PRMRET				; if it's zero, we're done
00:000078F2 6100E8DE        	  3009: 	BSR	GOOUT					; else display it
00:000078F6 60F6            	  3010: 	BRA	PRMESG
                            	  3011: PRMRET
00:000078F8 4E75            	  3012: 	RTS
                            	  3013: 
                            	  3014: ;*****************************************************
                            	  3015: ; The following routines are the only ones that need *
                            	  3016: ; to be changed for a different I/O environment.     *
                            	  3017: ;*****************************************************
                            	  3018: 
                            	  3019: ; ===== Clear screen and home cursor
                            	  3020: 
                            	  3021: CLS:
00:000078FA 700B            	  3022: 	moveq #11,d0			; set cursor position
00:000078FC 323CFF00        	  3023: 	move.w #$FF00,d1	; home cursor and clear screen
00:00007900 4E4F            	  3024: 	trap #15
00:00007902 6000EE76        	  3025: 	bra FINISH
                            	  3026: 
                            	  3027: ; ===== Output character to the console (Port 1) from register D0
                            	  3028: ;(Preserves all registers.)
                            	  3029: 
                            	  3030: OUTC:
00:00007906 48E7C000        	  3031: 	movem.l d0/d1,-(sp)
00:0000790A 2200            	  3032: 	move.l d0,d1
00:0000790C 7006            	  3033: 	moveq #6,d0
00:0000790E 4E4F            	  3034: 	trap #15
00:00007910 4CDF0003        	  3035: 	movem.l (sp)+,d0/d1
00:00007914 4E75            	  3036: 	rts
                            	  3037: 
                            	  3038: ; ===== Input a character from the console into register D0 (or
                            	  3039: ;	return Zero status if there's no character available).
                            	  3040: ;
                            	  3041: INC
00:00007916 2F0E            	  3042: 	move.l	a6,-(a7)
00:00007918 2C7A00C2        	  3043: 	move.l	INPPTR,a6
00:0000791C 4E96            	  3044: 	jsr			(a6)
00:0000791E 2C5F            	  3045: 	move.l	(a7)+,a6
00:00007920 4E75            	  3046: 	rts
                            	  3047: 
                            	  3048: INC1
00:00007922 2F01            	  3049: 	move.l	d1,-(a7)
00:00007924 7005            	  3050: 	moveq.l	#5,d0			* function 5 GetKey
00:00007926 4E4F            	  3051: 	trap		#15
00:00007928 2001            	  3052: 	move.l	d1,d0
00:0000792A 221F            	  3053: 	move.l	(a7)+,d1
00:0000792C 0C0000FF        	  3054: 	cmpi.b	#-1,d0
00:00007930 6602            	  3055: 	bne			.0001
00:00007932 4200            	  3056: 	clr.b		d0
                            	  3057: .0001:
00:00007934 4E75            	  3058: 	rts
                            	  3059: 
                            	  3060: *INC	BTST	#0,$10040	is character ready?
                            	  3061: *	BEQ	INCRET		if not, return Zero status
                            	  3062: *	MOVE.B	$10042,D0	else get the character
                            	  3063: *	AND.B	#$7F,D0 	zero out the high bit
                            	  3064: *INCRET	RTS
                            	  3065: 
                            	  3066: * ===== Output character to the host (Port 2) from register D0
                            	  3067: *	(Preserves all registers.)
                            	  3068: *
                            	  3069: AUXOUT:
00:00007936 13FC0002000400A8	  3070: 	move.b #2,OutputDevice
00:0000793E 61C6            	  3071: 	bsr OUTC
00:00007940 13FC0001000400A8	  3072: 	move.b #1,OutputDevice
00:00007948 4E75            	  3073: 	rts
                            	  3074: 
                            	  3075: *AUXOUT	BTST	#1,$10041	is port 2 ready for a character?
                            	  3076: *	BEQ	AUXOUT		if not, wait for it
                            	  3077: *	MOVE.B	D0,$10043	out it goes.
                            	  3078: *	RTS
                            	  3079: 
                            	  3080: *
                            	  3081: * ===== Input a character from the host into register D0 (or
                            	  3082: *	return Zero status if there's no character available).
                            	  3083: *
                            	  3084: AUXIN:
00:0000794A 2F01            	  3085: 	move.l	d1,-(a7)
00:0000794C 7024            	  3086: 	moveq		#36,d0				; serial get char from buffer
00:0000794E 4E4F            	  3087: 	trap		#15
00:00007950 2001            	  3088: 	move.l	d1,d0
00:00007952 221F            	  3089: 	move.l	(a7)+,d1
00:00007954 0C40FFFF        	  3090: 	cmpi.w	#-1,d0
00:00007958 670A            	  3091: 	beq			.0001
00:0000795A 0200007F        	  3092: 	andi.b	#$7F,d0				; clear high bit
00:0000795E 4880            	  3093: 	ext.w		d0						; return character in d0
00:00007960 48C0            	  3094: 	ext.l		d0
00:00007962 4E75            	  3095: 	rts
                            	  3096: .0001:
00:00007964 7000            	  3097: 	moveq		#0,d0					; return zf=1 if no character available
00:00007966 4E75            	  3098: 	rts
                            	  3099: 
                            	  3100: ;AUXIN
                            	  3101: *AUXIN	BTST	#0,$10041	is character ready?
                            	  3102: *	BEQ	AXIRET		if not, return Zero status
                            	  3103: *	MOVE.B	$10043,D0	else get the character
                            	  3104: *	AND.B	#$7F,D0 	zero out the high bit
00:00007968 4E75            	  3105: AXIRET	RTS
                            	  3106: 
                            	  3107: ; ===== Return to the resident monitor, operating system, etc.
                            	  3108: ;
                            	  3109: BYEBYE	
00:0000796A 23FC000000080004	  3110: 	move.l #8,_fpTextIncr
00:00007972 0094
00:00007974 600007E6        	  3111: 	bra		Monitor
                            	  3112: ;	MOVE.B	#228,D7 	return to Tutor
                            	  3113: ;	TRAP	#14
                            	  3114: 
00:00007978 0D              	  3115: INITMSG DC.B	CR,LF,'MC68000 Tiny Float BASIC, v1.0',CR,LF,LF,0
00:00007979 0A
00:0000797A 4D43363830303020
00:00007982 54696E7920466C6F
00:0000798A 6174204241534943
00:00007992 2C2076312E30
00:00007998 0D
00:00007999 0A
00:0000799A 0A
00:0000799B 00
00:0000799C 0D              	  3116: OKMSG	DC.B	CR,LF,'OK',CR,LF,0
00:0000799D 0A
00:0000799E 4F4B
00:000079A0 0D
00:000079A1 0A
00:000079A2 00
00:000079A3 486F773F        	  3117: HOWMSG	DC.B	'How?',CR,LF,0
00:000079A7 0D
00:000079A8 0A
00:000079A9 00
00:000079AA 576861743F      	  3118: WHTMSG	DC.B	'What?',CR,LF,0
00:000079AF 0D
00:000079B0 0A
00:000079B1 00
00:000079B2 547970653F      	  3119: TYPMSG	DC.B	'Type?',CR,LF,0
00:000079B7 0D
00:000079B8 0A
00:000079B9 00
00:000079BA 4E6F20737472696E	  3120: NOSTRING	DC.B 'No string space',CR,LF,0
00:000079C2 67207370616365
00:000079C9 0D
00:000079CA 0A
00:000079CB 00
00:000079CC 536F7272792E    	  3121: SRYMSG	DC.B	'Sorry.'
00:000079D2 0D              	  3122: CLMSG	DC.B	CR,LF,0
00:000079D3 0A
00:000079D4 00
00:000079D5 00              	  3123: 	DC.B	0	<- for aligning on a word boundary
                            	  3124: LSTROM	EQU	*		end of possible ROM area
                            	  3125: *
                            	  3126: * Internal variables follow:
                            	  3127: *
                            	  3128: 	align 2
00:000079D8 000061CC        	  3129: RANPNT	DC.L	START		random number pointer
00:000079DC 00000000        	  3130: INPPTR	DS.L	1		input pointer
00:000079E0 00000000        	  3131: OUTPTR	DS.L	1 	output pointer
00:000079E4 00000000        	  3132: CURRNT	DS.L	1		; Current line pointer
00:000079E8 00000000        	  3133: STKFP		DS.L	1		; saves frame pointer
00:000079EC 00000000        	  3134: STKGOS	DS.L	1		Saves stack pointer in 'GOSUB'
00:000079F0 00000000        	  3135: STKINP	DS.L	1		Saves stack pointer during 'INPUT'
00:000079F4 00000000        	  3136: LOPVAR	DS.L	1		'FOR' loop save area
00:000079F8 00000000        	  3137: LOPINC	DS.L	3		increment
00:000079FC *
00:00007A04 00000000        	  3138: LOPLMT	DS.L	3		limit
00:00007A08 *
00:00007A10 00000000        	  3139: LOPLN	DS.L	1		line number
00:00007A14 00000000        	  3140: LOPPT	DS.L	1		text pointer
00:00007A18 00000000        	  3141: IRQROUT	DS.L	1
00:00007A1C 00000000        	  3142: STRSTK	DS.L	1		; string pointer stack area, 8 entries
00:00007A20 00000000        	  3143: StrSp		DS.L	1		; string stack stack pointer
00:00007A24 00000000        	  3144: StrArea	DS.L	1		; pointer to string area
00:00007A28 00000000        	  3145: LastStr	DS.L	1		; pointer to last used string in area
00:00007A2C 00000000        	  3146: TXTUNF	DS.L	1		points to unfilled text area
00:00007A30 00000000        	  3147: VARBGN	DS.L	1		points to variable area
00:00007A34 00000000        	  3148: STKLMT	DS.L	1		holds lower limit for stack growth
00:00007A38 00000000        	  3149: DIRFLG	DS.L	1		; indicates 1=DIRECT mode
00:00007A3C 00              	  3150: BUFFER	DS.B	BUFLEN		Keyboard input buffer
00:00007A3D *
                            	  3151: TXT	EQU	*		Beginning of program area
                            	  3152: ;	END
                            	  3153: 

Source: "boot.x68"
                            	   981: 
                            	   982: ; -----------------------------------------------------------------------------
                            	   983: ; -----------------------------------------------------------------------------
                            	   984: 
                            	   985: set_text_mode:
00:00007A8C 7030            	   986: 	moveq #TEXTCOL,d0
00:00007A8E 13C0FD080000    	   987: 	move.b d0,TEXTREG					; number of columns
00:00007A94 7020            	   988: 	moveq #TEXTROW,d0
00:00007A96 13C0FD080001    	   989: 	move.b d0,TEXTREG+1				; number of rows
00:00007A9C 7000            	   990: 	moveq #0,d0
00:00007A9E 13C0FD080003    	   991: 	move.b d0,TEXTREG+3				; text mode
00:00007AA4 7011            	   992: 	moveq #17,d0
00:00007AA6 13C0FD080008    	   993: 	move.b d0,TEXTREG+8				; max row scan
00:00007AAC 700B            	   994: 	moveq #11,d0
00:00007AAE 13C0FD08000A    	   995: 	move.b d0,TEXTREG+10			; max pix
00:00007AB4 4E75            	   996: 	rts
                            	   997: 	
                            	   998: set_graphics_mode:
00:00007AB6 7060            	   999: 	moveq #TEXTCOL*2,d0
00:00007AB8 13C0FD080000    	  1000: 	move.b d0,TEXTREG					; number of columns
00:00007ABE 7040            	  1001: 	moveq #TEXTROW*2,d0
00:00007AC0 13C0FD080001    	  1002: 	move.b d0,TEXTREG+1				; number of rows
00:00007AC6 7001            	  1003: 	moveq #1,d0
00:00007AC8 13C0FD080003    	  1004: 	move.b d0,TEXTREG+3				; graphics mode
00:00007ACE 7007            	  1005: 	moveq #7,d0
00:00007AD0 13C0FD080008    	  1006: 	move.b d0,TEXTREG+8				; max row scan
00:00007AD6 7007            	  1007: 	moveq #7,d0
00:00007AD8 13C0FD08000A    	  1008: 	move.b d0,TEXTREG+10			; max pix
00:00007ADE 4E75            	  1009: 	rts
                            	  1010: 
                            	  1011: ; -----------------------------------------------------------------------------
                            	  1012: ; -----------------------------------------------------------------------------
                            	  1013: 
                            	  1014: get_screen_address:
00:00007AE0 48E7E300        	  1015: 	movem.l d0/d1/d2/d6/d7,-(a7)
00:00007AE4 7E02            	  1016: 	moveq #2,d7
00:00007AE6 7C10            	  1017: 	moveq #DEV_GETBUF1,d6
00:00007AE8 4E40            	  1018: 	trap #0
00:00007AEA 2041            	  1019: 	move.l d1,a0
00:00007AEC 4CDF00C7        	  1020: 	movem.l (a7)+,d0/d1/d2/d6/d7
00:00007AF0 4E75            	  1021: 	rts
                            	  1022: 	
                            	  1023: 
                            	  1024: CRLF:
00:00007AF2 48E7C000        	  1025: 	movem.l d0/d1,-(a7)
00:00007AF6 123C000D        	  1026: 	move.b #13,d1
00:00007AFA 7006            	  1027: 	moveq #6,d0						; output character function
00:00007AFC 4E4F            	  1028: 	trap #15
00:00007AFE 123C000A        	  1029: 	move.b #10,d1
00:00007B02 7006            	  1030: 	moveq #6,d0						; output character function
00:00007B04 4E4F            	  1031: 	trap #15
00:00007B06 4CDF0003        	  1032: 	movem.l (a7)+,d0/d1
00:00007B0A 4E75            	  1033: 	rts
                            	  1034: 
                            	  1035: ;------------------------------------------------------------------------------
                            	  1036: ; Display a string on standard output.
                            	  1037: ;------------------------------------------------------------------------------
                            	  1038: 
                            	  1039: DisplayString:
00:00007B0C 48E7C040        	  1040: 	movem.l	d0/d1/a1,-(a7)
                            	  1041: dspj1:
00:00007B10 7200            	  1042: 	clr.l d1							; clear upper bits of d1
00:00007B12 1219            	  1043: 	move.b (a1)+,d1				; move string char into d1
00:00007B14 6706            	  1044: 	beq.s dsret						; is it end of string ?
00:00007B16 7006            	  1045: 	moveq #6,d0						; output character function
00:00007B18 4E4F            	  1046: 	trap #15
00:00007B1A 60F4            	  1047: 	bra.s	dspj1						; go back for next character
                            	  1048: dsret:
00:00007B1C 4CDF0203        	  1049: 	movem.l	(a7)+,d0/d1/a1
00:00007B20 4E75            	  1050: 	rts
                            	  1051: 
                            	  1052: ;------------------------------------------------------------------------------
                            	  1053: ; Display a string on the screen followed by carriage return / linefeed.
                            	  1054: ;------------------------------------------------------------------------------
                            	  1055: 
                            	  1056: DisplayStringCRLF:
00:00007B22 61E8            	  1057: 	bsr		DisplayString
00:00007B24 60CC            	  1058: 	bra		CRLF
                            	  1059: 
                            	  1060: ;------------------------------------------------------------------------------
                            	  1061: ; Display a string on the screen limited to 255 chars max.
                            	  1062: ;------------------------------------------------------------------------------
                            	  1063: 
                            	  1064: DisplayStringLimited:
00:00007B26 48E7E040        	  1065: 	movem.l	d0/d1/d2/a1,-(a7)
00:00007B2A 3401            	  1066: 	move.w	d1,d2					; d2 = max count
00:00007B2C 024200FF        	  1067: 	andi.w	#$00FF,d2			; limit to 255 chars
00:00007B30 600A            	  1068: 	bra.s		.0003					; enter loop at bottom
                            	  1069: .0001:
00:00007B32 7200            	  1070: 	clr.l d1							; clear upper bits of d1
00:00007B34 1219            	  1071: 	move.b (a1)+,d1				; move string char into d1
00:00007B36 6708            	  1072: 	beq.s .0002						; is it end of string ?
00:00007B38 7006            	  1073: 	moveq #6,d0						; output character function
00:00007B3A 4E4F            	  1074: 	trap #15
                            	  1075: .0003:
00:00007B3C 51CAFFF4        	  1076: 	dbra		d2,.0001			; go back for next character
                            	  1077: .0002:
00:00007B40 4CDF0207        	  1078: 	movem.l	(a7)+,d0/d1/d2/a1
00:00007B44 4E75            	  1079: 	rts
                            	  1080: 
                            	  1081: DisplayStringLimitedCRLF:
00:00007B46 61DE            	  1082: 	bsr		DisplayStringLimited
00:00007B48 60A8            	  1083: 	bra		CRLF
                            	  1084: 	
                            	  1085: 
                            	  1086: ;==============================================================================
                            	  1087: ; TRAP #15 handler
                            	  1088: ;
                            	  1089: ; Parameters:
                            	  1090: ;		d0.w = function number to perform
                            	  1091: ;==============================================================================
                            	  1092: 
                            	  1093: TRAP15:
00:00007B4A 48E78080        	  1094: 	movem.l	d0/a0,-(a7)
00:00007B4E 41FA0014        	  1095: 	lea T15DispatchTable,a0
00:00007B52 4880            	  1096: 	ext.w d0
00:00007B54 E548            	  1097: 	lsl.w #2,d0
00:00007B56 20700000        	  1098: 	move.l (a0,d0.w),a0
00:00007B5A 4E90            	  1099: 	jsr (a0)
00:00007B5C 4CDF0101        	  1100: 	movem.l (a7)+,d0/a0
00:00007B60 4E73            	  1101: 	rte
                            	  1102: 
                            	  1103: 		align	2
                            	  1104: T15DispatchTable:
00:00007B64 00007B46        	  1105: 	dc.l	DisplayStringLimitedCRLF
00:00007B68 00007B26        	  1106: 	dc.l	DisplayStringLimited
00:00007B6C 00007FFA        	  1107: 	dc.l	StubRout
00:00007B70 00007FFA        	  1108: 	dc.l	StubRout
00:00007B74 00007FFA        	  1109: 	dc.l	StubRout
00:00007B78 0000088C        	  1110: 	dc.l	GetKey
00:00007B7C 00009FF8        	  1111: 	dc.l	OutputChar
00:00007B80 00000880        	  1112: 	dc.l	CheckForKey
00:00007B84 00007D04        	  1113: 	dc.l	GetTick
00:00007B88 00007FFA        	  1114: 	dc.l	StubRout
                            	  1115: 	; 10
00:00007B8C 00007FFA        	  1116: 	dc.l	StubRout
00:00007B90 00007FC2        	  1117: 	dc.l	Cursor1
00:00007B94 00000878        	  1118: 	dc.l	SetKeyboardEcho
00:00007B98 00007B22        	  1119: 	dc.l	DisplayStringCRLF
00:00007B9C 00007B0C        	  1120: 	dc.l	DisplayString
00:00007BA0 00007FFA        	  1121: 	dc.l	StubRout
00:00007BA4 00007FFA        	  1122: 	dc.l	StubRout
00:00007BA8 00007FFA        	  1123: 	dc.l	StubRout
00:00007BAC 00007FFA        	  1124: 	dc.l	StubRout
00:00007BB0 00000880        	  1125: 	dc.l	CheckForKey
                            	  1126: 	; 20
00:00007BB4 00007FFA        	  1127: 	dc.l	StubRout
00:00007BB8 00007FFA        	  1128: 	dc.l	StubRout
00:00007BBC 00007FFA        	  1129: 	dc.l	StubRout
00:00007BC0 00007D0C        	  1130: 	dc.l	T15Wait100ths
00:00007BC4 00007FFA        	  1131: 	dc.l	StubRout
00:00007BC8 00007FFA        	  1132: 	dc.l	StubRout
00:00007BCC 00007FFA        	  1133: 	dc.l	StubRout
00:00007BD0 00007FFA        	  1134: 	dc.l	StubRout
00:00007BD4 00007FFA        	  1135: 	dc.l	StubRout
00:00007BD8 00007FFA        	  1136: 	dc.l	StubRout
                            	  1137: 	; 30
00:00007BDC 00007FFA        	  1138: 	dc.l	StubRout
00:00007BE0 00007FFA        	  1139: 	dc.l	StubRout
00:00007BE4 00007CF4        	  1140: 	dc.l	SimHardware	;rotate_iofocus
00:00007BE8 00007D88        	  1141: 	dc.l	T15GetWindowSize	;SerialPeekCharDirect
00:00007BEC 00001754        	  1142: 	dc.l	SerialPutChar
00:00007BF0 000016FE        	  1143: 	dc.l	SerialPeekChar
00:00007BF4 00001686        	  1144: 	dc.l	SerialGetChar
00:00007BF8 000025F8        	  1145: 	dc.l	T15LockSemaphore
00:00007BFC 000025FE        	  1146: 	dc.l	T15UnlockSemaphore
00:00007C00 00009F58        	  1147: 	dc.l	prtflt
                            	  1148: 	; 40
00:00007C04 0000253E        	  1149: 	dc.l  _GetRand
00:00007C08 00002604        	  1150: 	dc.l	T15GetFloat
00:00007C0C 0000261A        	  1151: 	dc.l	T15Abort
00:00007C10 00009F9E        	  1152: 	dc.l	T15FloatToString
00:00007C14 00007FFA        	  1153: 	dc.l	StubRout
00:00007C18 00007FFA        	  1154: 	dc.l	StubRout
00:00007C1C 00007FFA        	  1155: 	dc.l	StubRout
00:00007C20 00007FFA        	  1156: 	dc.l	StubRout
00:00007C24 00007FFA        	  1157: 	dc.l	StubRout
00:00007C28 00007FFA        	  1158: 	dc.l	StubRout
                            	  1159: 	; 50
00:00007C2C 00007FFA        	  1160: 	dc.l	StubRout
00:00007C30 00007FFA        	  1161: 	dc.l	StubRout
00:00007C34 00007FFA        	  1162: 	dc.l	StubRout
00:00007C38 00007FFA        	  1163: 	dc.l	StubRout
00:00007C3C 00007FFA        	  1164: 	dc.l	StubRout
00:00007C40 00007FFA        	  1165: 	dc.l	StubRout
00:00007C44 00007FFA        	  1166: 	dc.l	StubRout
00:00007C48 00007FFA        	  1167: 	dc.l	StubRout
00:00007C4C 00007FFA        	  1168: 	dc.l	StubRout
00:00007C50 00007FFA        	  1169: 	dc.l	StubRout
                            	  1170: 	; 60
00:00007C54 00007FFA        	  1171: 	dc.l	StubRout
00:00007C58 00007FFA        	  1172: 	dc.l	StubRout
00:00007C5C 00007FFA        	  1173: 	dc.l	StubRout
00:00007C60 00007FFA        	  1174: 	dc.l	StubRout
00:00007C64 00007FFA        	  1175: 	dc.l	StubRout
00:00007C68 00007FFA        	  1176: 	dc.l	StubRout
00:00007C6C 00007FFA        	  1177: 	dc.l	StubRout
00:00007C70 00007FFA        	  1178: 	dc.l	StubRout
00:00007C74 00007FFA        	  1179: 	dc.l	StubRout
00:00007C78 00007FFA        	  1180: 	dc.l	StubRout
                            	  1181: 	; 70
00:00007C7C 00007FFA        	  1182: 	dc.l	StubRout
00:00007C80 00007FFA        	  1183: 	dc.l	StubRout
00:00007C84 00007FFA        	  1184: 	dc.l	StubRout
00:00007C88 00007FFA        	  1185: 	dc.l	StubRout
00:00007C8C 00007FFA        	  1186: 	dc.l	StubRout
00:00007C90 00007FFA        	  1187: 	dc.l	StubRout
00:00007C94 00007FFA        	  1188: 	dc.l	StubRout
00:00007C98 00007FFA        	  1189: 	dc.l	StubRout
00:00007C9C 00007FFA        	  1190: 	dc.l	StubRout
00:00007CA0 00007FFA        	  1191: 	dc.l	StubRout
                            	  1192: 	; 80
00:00007CA4 00007D4A        	  1193: 	dc.l	SetPenColor
00:00007CA8 00007FFA        	  1194: 	dc.l	StubRout
00:00007CAC 00007FFA        	  1195: 	dc.l	StubRout
00:00007CB0 00007FFA        	  1196: 	dc.l	StubRout
00:00007CB4 00007FFA        	  1197: 	dc.l	StubRout
00:00007CB8 00007EE2        	  1198: 	dc.l	DrawToXY
00:00007CBC 00007ED4        	  1199: 	dc.l	MoveToXY
00:00007CC0 00007FFA        	  1200: 	dc.l	StubRout
00:00007CC4 00007FFA        	  1201: 	dc.l	StubRout
00:00007CC8 00007FFA        	  1202: 	dc.l	StubRout
                            	  1203: 	; 90
00:00007CCC 00007D56        	  1204: 	dc.l	T15Rectangle
00:00007CD0 00007FFA        	  1205: 	dc.l	StubRout
00:00007CD4 00007D28        	  1206: 	dc.l	SetDrawMode
00:00007CD8 00007FFA        	  1207: 	dc.l	StubRout
00:00007CDC 00007D9E        	  1208: 	dc.l	GRBufferToScreen
00:00007CE0 00007FFA        	  1209: 	dc.l	StubRout
00:00007CE4 00007FFA        	  1210: 	dc.l	StubRout
00:00007CE8 00007FFA        	  1211: 	dc.l	StubRout
00:00007CEC 00007FFA        	  1212: 	dc.l	StubRout
00:00007CF0 00007FFA        	  1213: 	dc.l	StubRout
                            	  1214: 
                            	  1215: ;------------------------------------------------------------------------------
                            	  1216: 
                            	  1217: SimHardware:
00:00007CF4 0C410003        	  1218: 	cmpi.w #3,d1
00:00007CF8 6608            	  1219: 	bne.s .0001
00:00007CFA 223C000408B8    	  1220: 	move.l #sys_switches,d1
00:00007D00 4E75            	  1221: 	rts
                            	  1222: .0001:
00:00007D02 4E75            	  1223: 	rts
                            	  1224: 
                            	  1225: ;------------------------------------------------------------------------------
                            	  1226: ;
                            	  1227: GetTick:
00:00007D04 22390004009C    	  1228: 	move.l tickcnt,d1
00:00007D0A 4E75            	  1229: 	rts
                            	  1230: 
                            	  1231: T15Wait100ths:
00:00007D0C 2F01            	  1232: 	move.l d1,-(a7)
00:00007D0E B2BC00000002    	  1233: 	cmp.l #2,d1
00:00007D14 630E            	  1234: 	bls.s .0002
00:00007D16 D2B90004009C    	  1235: 	add.l tickcnt,d1
                            	  1236: .0001:
00:00007D1C B2B90004009C    	  1237: 	cmp.l tickcnt,d1
00:00007D22 66F8            	  1238: 	bne.s .0001
                            	  1239: .0002:
00:00007D24 221F            	  1240: 	move.l (a7)+,d1
00:00007D26 4E75            	  1241: 	rts
                            	  1242: 
                            	  1243: ;------------------------------------------------------------------------------
                            	  1244: ;
                            	  1245: SetDrawMode:
00:00007D28 0C01000A        	  1246: 	cmpi.b #10,d1
00:00007D2C 660A            	  1247: 	bne.s .0001
00:00007D2E 13FC000500040D80	  1248: 	move.b #5,framebuf_dcb+DCB_OPCODE			; 'OR' operation
00:00007D36 4E75            	  1249: 	rts
                            	  1250: .0001:
00:00007D38 0C010011        	  1251: 	cmpi.b #17,d1
00:00007D3C 660A            	  1252: 	bne.s .0002
00:00007D3E 33FC0001000408AC	  1253: 	move.w #1,gr_double_buffer
00:00007D46 4E75            	  1254: 	rts
                            	  1255: .0002:
00:00007D48 4E75            	  1256: 	rts
                            	  1257: 	
                            	  1258: SetPenColor:
00:00007D4A 6100A37E        	  1259: 	bsr gfxaccel_set_color
00:00007D4E 23C100040D7C    	  1260: 	move.l d1,framebuf_dcb+DCB_FGCOLOR
00:00007D54 4E75            	  1261: 	rts
                            	  1262: 
                            	  1263: ; parameters:
                            	  1264: ;		d0 = color
                            	  1265: ;		d1 = width
                            	  1266: ;		d2 = height
                            	  1267: ;		d3 = x co-ord
                            	  1268: ;		d4 = y co-ord
                            	  1269: 
                            	  1270: T15Rectangle:
00:00007D56 48E76000        	  1271: 	movem.l d1/d2,-(a7)
00:00007D5A D283            	  1272: 	add.l d3,d1
00:00007D5C D484            	  1273: 	add.l d4,d2
00:00007D5E 6100A4EC        	  1274: 	bsr gfxaccel_draw_rectangle
00:00007D62 4CDF0006        	  1275: 	movem.l (a7)+,d1/d2
00:00007D66 4E75            	  1276: 	rts
                            	  1277: 
                            	  1278: T15GetPixel:
00:00007D68 48E76080        	  1279: 	movem.l d1/d2/a0,-(a7)
00:00007D6C 48C1            	  1280: 	ext.l d1								; clear upper bits
00:00007D6E 48C2            	  1281: 	ext.l d2
00:00007D70 207900040D54    	  1282: 	move.l framebuf_dcb+DCB_OUTBUFPTR,a0
00:00007D76 C4FC0320        	  1283: 	mulu #800,d2						; y * pixels per line
00:00007D7A D481            	  1284: 	add.l d1,d2							; + x
00:00007D7C E58A            	  1285: 	lsl.l #2,d2							; * 4 bytes per pixel
00:00007D7E 20302800        	  1286: 	move.l (a0,d2.l),d0			; get color
00:00007D82 4CDF0106        	  1287: 	movem.l (a7)+,d1/d2/a0
00:00007D86 4E75            	  1288: 	rts
                            	  1289: 
                            	  1290: T15GetWindowSize:
00:00007D88 4A01            	  1291: 	cmpi.b #0,d1
00:00007D8A 660C            	  1292: 	bne.s .0001
00:00007D8C 323C0320        	  1293: 	move.w #800,d1
00:00007D90 4841            	  1294: 	swap d1
00:00007D92 323C0258        	  1295: 	move.w #600,d1
00:00007D96 4E75            	  1296: 	rts
                            	  1297: .0001:
00:00007D98 7200            	  1298: 	move.l #0,d1
00:00007D9A 7200            	  1299: 	move.l #0,d1
00:00007D9C 4E75            	  1300: 	rts
                            	  1301: 
                            	  1302: ;------------------------------------------------------------------------------
                            	  1303: ; Page flip between two buffers.
                            	  1304: ;------------------------------------------------------------------------------
                            	  1305: 
                            	  1306: GRBufferToScreen:
00:00007D9E 7E06            	  1307: 	move.l #6,d7						; framebuffer device
00:00007DA0 7C0D            	  1308: 	move.l #DEV_SWAPBUF,d6	; swap buffers
00:00007DA2 4E40            	  1309: 	trap #0
00:00007DA4 4E75            	  1310: 	rts
                            	  1311: 
                            	  1312: ; The following copies the buffer, why? Not needed if page flipping.
                            	  1313: ;	movem.l d0/a0/a1,-(a7)
                            	  1314: ;	move.l gr_bitmap_buffer,a1
                            	  1315: ;	move.l gr_bitmap_screen,a0
                            	  1316: ;	move.w gr_width,d0
                            	  1317: ;	mulu gr_height,d0
                            	  1318: ;	lsr.l #4,d0							; moving 16 pixels per iteration
                            	  1319: ;	move.l #0,$BFFFFFF8			; set burst length zero
                            	  1320: ;	bra.s .loop
                            	  1321: ;.loop2:
                            	  1322: ;	swap d0
                            	  1323: ;.loop:
                            	  1324: ;	move.l a1,$BFFFFFF0			; set source address
                            	  1325: ;	tst.l $BFFFFFFC					; do a read op, no value needed
                            	  1326: ;	move.l a0,$BFFFFFF4			; set destination address
                            	  1327: ;	move.l d0,$BFFFFFFC			; do a write operation (any value)
                            	  1328: ;	dbra d0,.loop
                            	  1329: ;	swap d0									; might go over 32/64 kB
                            	  1330: ;	dbra d0,.loop2
                            	  1331: ;	movem.l (a7)+,d0/a0/a1
                            	  1332: ;	rts
                            	  1333: 
                            	  1334: 
                            	  1335: TestBitmap:
                            	  1336: ;	move.w #$0700,pen_color		; dark blue
00:00007DA6 33FC070000040D78	  1337: 	move.w #$0700,framebuf_dcb+DCB_BKCOLOR
00:00007DAE 7E06            	  1338: 	move.l #6,d7
00:00007DB0 7C0C            	  1339: 	move.l #DEV_CLEAR,d6
00:00007DB2 4E40            	  1340: 	trap #0
                            	  1341: ;	bsr clear_bitmap_screen4
00:00007DB4 705E            	  1342: 	moveq #94,d0							; page flip (display blank screen)
00:00007DB6 4E4F            	  1343: 	trap #15
00:00007DB8 33FC007C00040890	  1344: 	move.w #$007c,pen_color		; red pen
00:00007DC0 7E06            	  1345: 	moveq #6,d7
00:00007DC2 7C07            	  1346: 	moveq #DEV_SET_OUTPOS,d6
00:00007DC4 7200            	  1347: 	moveq #0,d1
00:00007DC6 7401            	  1348: 	moveq #1,d2
00:00007DC8 4E40            	  1349: 	trap #0
00:00007DCA 7C14            	  1350: 	moveq #DEV_GET_DIMEN,d6
00:00007DCC 4E40            	  1351: 	trap #0
00:00007DCE 5381            	  1352: 	subq.l #1,d1
00:00007DD0 2601            	  1353: 	move.l d1,d3
00:00007DD2 7801            	  1354: 	moveq #1,d4
00:00007DD4 6100018A        	  1355: 	bsr DrawHorizTo
00:00007DD8 42B900040894    	  1356: 	clr.l gr_x
00:00007DDE 42B900040898    	  1357: 	clr.l gr_y
00:00007DE4 7600            	  1358: 	move.l #0,d3
00:00007DE6 2839000408A0    	  1359: 	move.l gr_height,d4
00:00007DEC 5384            	  1360: 	subq.l #1,d4
00:00007DEE 610001A2        	  1361: 	bsr DrawVertTo
00:00007DF2 33FCE00100040890	  1362: 	move.w #$E001,pen_color		; green pen
00:00007DFA 23FC000000020004	  1363: 	move.l #2,gr_x
00:00007E02 0894
00:00007E04 42B900040898    	  1364: 	clr.l gr_y
00:00007E0A 7602            	  1365: 	move.l #2,d3
00:00007E0C 2839000408A0    	  1366: 	move.l gr_height,d4
00:00007E12 5384            	  1367: 	subq.l #1,d4
00:00007E14 6100017C        	  1368: 	bsr DrawVertTo
00:00007E18 42B900040894    	  1369: 	clr.l gr_x
00:00007E1E 42B900040898    	  1370: 	clr.l gr_y
00:00007E24 26390004089C    	  1371: 	move.l gr_width,d3
00:00007E2A 5383            	  1372: 	subq.l #1,d3
00:00007E2C 23C300040894    	  1373: 	move.l d3,gr_x
00:00007E32 2839000408A0    	  1374: 	move.l gr_height,d4
00:00007E38 5384            	  1375: 	subq.l #1,d4
00:00007E3A 610000A6        	  1376: 	bsr DrawToXY
00:00007E3E 705E            	  1377: 	moveq #94,d0							; page flip again
00:00007E40 4E4F            	  1378: 	trap #15
00:00007E42 60000318        	  1379: 	bra Monitor
                            	  1380: 
                            	  1381: Diagonal1:
00:00007E46 42B900040894    	  1382: 	clr.l gr_x
00:00007E4C 42B900040898    	  1383: 	clr.l gr_y
00:00007E52 26390004089C    	  1384: 	move.l gr_width,d3
00:00007E58 5383            	  1385: 	subq.l #1,d3
00:00007E5A 2839000408A0    	  1386: 	move.l gr_height,d4
00:00007E60 5384            	  1387: 	subq.l #1,d4
00:00007E62 617E            	  1388: 	bsr DrawToXY
00:00007E64 4E75            	  1389: 	rts
                            	  1390: 
                            	  1391: Diagonal2:
00:00007E66 26390004089C    	  1392: 	move.l gr_width,d3
00:00007E6C 5383            	  1393: 	subq.l #1,d3
00:00007E6E 23C300040894    	  1394: 	move.l d3,gr_x
00:00007E74 42B900040898    	  1395: 	clr.l gr_y
00:00007E7A 2639000408A0    	  1396: 	move.l gr_height,d3
00:00007E80 5383            	  1397: 	subq.l #1,d3
00:00007E82 7800            	  1398: 	moveq #0,d4
00:00007E84 33FCE00100040890	  1399: 	move.w #$E001,pen_color
00:00007E8C 6154            	  1400: 	bsr DrawToXY
00:00007E8E 4E75            	  1401: 	rts
                            	  1402: 
                            	  1403: Vertical1:
00:00007E90 42B900040894    	  1404: 	clr.l gr_x
00:00007E96 42B900040898    	  1405: 	clr.l gr_y
00:00007E9C 7600            	  1406: 	move.l #0,d3
00:00007E9E 2839000408A0    	  1407: 	move.l gr_height,d4
00:00007EA4 5384            	  1408: 	subq.l #1,d4
00:00007EA6 610000EA        	  1409: 	bsr DrawVertTo
00:00007EAA 4E75            	  1410: 	rts
                            	  1411: 
                            	  1412: Vertical2:
00:00007EAC 33FCE00100040890	  1413: 	move.w #$E001,pen_color		; green pen
00:00007EB4 23FC000000020004	  1414: 	move.l #2,gr_x
00:00007EBC 0894
00:00007EBE 42B900040898    	  1415: 	clr.l gr_y
00:00007EC4 7602            	  1416: 	move.l #2,d3
00:00007EC6 2839000408A0    	  1417: 	move.l gr_height,d4
00:00007ECC 5384            	  1418: 	subq.l #1,d4
00:00007ECE 610000C2        	  1419: 	bsr DrawVertTo
00:00007ED2 4E75            	  1420: 	rts
                            	  1421: 
                            	  1422: ;------------------------------------------------------------------------------
                            	  1423: ; Plot on bitmap screen using current pen color.
                            	  1424: ;
                            	  1425: ;	Parameters:
                            	  1426: ;		d1 = x co-ordinate
                            	  1427: ;		d2 = y co-ordinate
                            	  1428: ;------------------------------------------------------------------------------
                            	  1429: 	
                            	  1430: ;parameter OPBLACK = 4'd0;
                            	  1431: ;parameter OPCOPY = 4'd1;
                            	  1432: ;parameter OPINV = 4'd2;
                            	  1433: ;parameter OPAND = 4'd4;
                            	  1434: ;parameter OPOR = 4'd5;
                            	  1435: ;parameter OPXOR = 4'd6;
                            	  1436: ;parameter OPANDN = 4'd7;
                            	  1437: ;parameter OPNAND = 4'd8;
                            	  1438: ;parameter OPNOR = 4'd9;
                            	  1439: ;parameter OPXNOR = 4'd10;
                            	  1440: ;parameter OPORN = 4'd11;
                            	  1441: ;parameter OPWHITE = 4'd15;
                            	  1442: 
                            	  1443: ;------------------------------------------------------------------------------
                            	  1444: ; Set graphics cursor position.
                            	  1445: ;------------------------------------------------------------------------------
                            	  1446: 
                            	  1447: MoveToXY:
00:00007ED4 23C300040894    	  1448: 	move.l d3,gr_x
00:00007EDA 23C400040898    	  1449: 	move.l d4,gr_y
00:00007EE0 4E75            	  1450: 	rts
                            	  1451: 
                            	  1452: ;------------------------------------------------------------------------------
                            	  1453: ; Draw a line from the current graphics position to x1,y1.
                            	  1454: ;
                            	  1455: ; Register Usage:
                            	  1456: ;		d1 = x0
                            	  1457: ;		d2 = y0
                            	  1458: ;		d3 = x1
                            	  1459: ;		d4 = y1
                            	  1460: ;		d5 = dx
                            	  1461: ;		d6 = dy
                            	  1462: ;		d7 = sx
                            	  1463: ;		d0 = sy
                            	  1464: ;		a0 = err
                            	  1465: ;		a1 = 2*err
                            	  1466: ;------------------------------------------------------------------------------
                            	  1467: 
                            	  1468: DrawToXY:
00:00007EE2 48E7E7C0        	  1469: 	movem.l d0/d1/d2/d5/d6/d7/a0/a1,-(a7)
00:00007EE6 223900040894    	  1470: 	move.l gr_x,d1
00:00007EEC 243900040898    	  1471: 	move.l gr_y,d2
00:00007EF2 2A03            	  1472: 	move.l d3,d5
00:00007EF4 2C04            	  1473: 	move.l d4,d6
00:00007EF6 9A81            	  1474: 	sub.l d1,d5			; d5 = x1-x0
00:00007EF8 6608            	  1475: 	bne.s .notVert
00:00007EFA 4CDF03E7        	  1476: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:00007EFE 60000092        	  1477: 	bra DrawVertTo
                            	  1478: .notVert:
00:00007F02 6A02            	  1479: 	bpl.s .0001
00:00007F04 4485            	  1480: 	neg.l d5				
                            	  1481: .0001:						; d5 = dx = abs(x1-x0)
00:00007F06 9C82            	  1482: 	sub.l d2,d6			; d6 = y1-y0
00:00007F08 6606            	  1483: 	bne.s .notHoriz
00:00007F0A 4CDF03E7        	  1484: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:00007F0E 6050            	  1485: 	bra DrawHorizTo
                            	  1486: .notHoriz:
00:00007F10 6B02            	  1487: 	bmi.s .0002
00:00007F12 4486            	  1488: 	neg.l d6
                            	  1489: .0002:						; d6 = dy = -abs(y1-y0)
00:00007F14 7E01            	  1490: 	move.l #1,d7		; d7 = sx (x0 < x1 ? 1 : -1)
00:00007F16 B681            	  1491: 	cmp.l d1,d3
00:00007F18 6202            	  1492: 	bhi.s .0004
00:00007F1A 4487            	  1493: 	neg.l d7
                            	  1494: .0004:
00:00007F1C 7001            	  1495: 	move.l #1,d0		; d0 = sy (y0 < y1) ? 1 : -1)
00:00007F1E B882            	  1496: 	cmp.l d2,d4
00:00007F20 6202            	  1497: 	bhi.s .0006
00:00007F22 4480            	  1498: 	neg.l d0
                            	  1499: .0006:
00:00007F24 2045            	  1500: 	move.l d5,a0		; a0 = error = dx + dy
00:00007F26 D1C6            	  1501: 	adda.l d6,a0
                            	  1502: .loop:
00:00007F28 6100899C        	  1503: 	bsr CheckForCtrlC
00:00007F2C 61009D08        	  1504: 	bsr plot				; plot(x0,y0)
00:00007F30 2248            	  1505: 	move.l a0,a1
00:00007F32 D3C9            	  1506: 	adda.l a1,a1		; a1 = error *2
00:00007F34 BC89            	  1507: 	cmp.l a1,d6			; e2 >= dy?
00:00007F36 6E08            	  1508: 	bgt.s .0008
00:00007F38 B681            	  1509: 	cmp.l d1,d3			; x0==x1?
00:00007F3A 6712            	  1510: 	beq.s .brkloop
00:00007F3C D1C6            	  1511: 	adda.l d6,a0		; err = err + dy
00:00007F3E D287            	  1512: 	add.l d7,d1			; x0 = x0 + sx
                            	  1513: .0008:
00:00007F40 BA89            	  1514: 	cmp.l a1,d5			; err2 <= dx?
00:00007F42 6D08            	  1515: 	blt.s .0009
00:00007F44 B882            	  1516: 	cmp.l d2,d4			; y0==y1?
00:00007F46 6706            	  1517: 	beq.s .brkloop
00:00007F48 D1C5            	  1518: 	adda.l d5,a0		; err = err + dx
00:00007F4A D480            	  1519: 	add.l d0,d2			; y0 = y0 + sy
                            	  1520: .0009:
00:00007F4C 60DA            	  1521: 	bra.s .loop
                            	  1522: .brkloop:
00:00007F4E 23C300040894    	  1523: 	move.l d3,gr_x
00:00007F54 23C400040898    	  1524: 	move.l d4,gr_y
00:00007F5A 4CDF03E7        	  1525: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:00007F5E 4E75            	  1526: 	rts
                            	  1527: 
                            	  1528: ; Parameters:
                            	  1529: ;		d3 = x1
                            	  1530: ;		d4 = y1
                            	  1531: 
                            	  1532: DrawHorizTo:
00:00007F60 48E76400        	  1533: 	movem.l d1/d2/d5,-(a7)
00:00007F64 7E06            	  1534: 	moveq #6,d7
00:00007F66 7C17            	  1535: 	moveq #DEV_GET_OUTPOS,d6
00:00007F68 4E40            	  1536: 	trap #0
00:00007F6A 7A01            	  1537: 	move.l #1,d5			; assume increment
00:00007F6C B681            	  1538: 	cmp.l d1,d3
00:00007F6E 6202            	  1539: 	bhi.s .0001
00:00007F70 4485            	  1540: 	neg.l d5					; switch to decrement
                            	  1541: .0001:
00:00007F72 7E06            	  1542: 	moveq #6,d7
00:00007F74 7C12            	  1543: 	moveq #DEV_WRITEAT,d6
00:00007F76 4E40            	  1544: 	trap #0
00:00007F78 B681            	  1545: 	cmp.l d1,d3
00:00007F7A 670A            	  1546: 	beq.s .0002
00:00007F7C D285            	  1547: 	add.l d5,d1
00:00007F7E 7E06            	  1548: 	moveq #6,d7
00:00007F80 7C07            	  1549: 	moveq #DEV_SET_OUTPOS,d6
00:00007F82 4E40            	  1550: 	trap #0
00:00007F84 60EC            	  1551: 	bra.s .0001
                            	  1552: .0002:
00:00007F86 7E06            	  1553: 	moveq #6,d7
00:00007F88 7C07            	  1554: 	moveq #DEV_SET_OUTPOS,d6	; update output position
00:00007F8A 4E40            	  1555: 	trap #0
00:00007F8C 4CDF0026        	  1556: 	movem.l (a7)+,d1/d2/d5
00:00007F90 4E75            	  1557: 	rts
                            	  1558: 	
                            	  1559: 	
                            	  1560: ; Parameters:
                            	  1561: ;		d3 = x1
                            	  1562: ;		d4 = y1
                            	  1563: 
                            	  1564: DrawVertTo:
00:00007F92 48E76400        	  1565: 	movem.l d1/d2/d5,-(a7)
00:00007F96 223900040894    	  1566: 	move.l gr_x,d1
00:00007F9C 243900040898    	  1567: 	move.l gr_y,d2
00:00007FA2 7A01            	  1568: 	move.l #1,d5			; assume increment
00:00007FA4 B882            	  1569: 	cmp.l d2,d4
00:00007FA6 6202            	  1570: 	bhi.s .0001
00:00007FA8 4485            	  1571: 	neg.l d5					; switch to decrement
                            	  1572: .0001:
00:00007FAA 61009C8A        	  1573: 	bsr plot
00:00007FAE B882            	  1574: 	cmp.l d2,d4
00:00007FB0 6704            	  1575: 	beq.s .0002
00:00007FB2 D485            	  1576: 	add.l d5,d2
00:00007FB4 60F4            	  1577: 	bra.s .0001
                            	  1578: .0002:
00:00007FB6 23C200040898    	  1579: 	move.l d2,gr_y
00:00007FBC 4CDF0026        	  1580: 	movem.l (a7)+,d1/d2/d5
00:00007FC0 4E75            	  1581: 	rts
                            	  1582: 	
                            	  1583: 	
                            	  1584: ;plotLine(x0, y0, x1, y1)
                            	  1585: ;    dx = abs(x1 - x0)
                            	  1586: ;    sx = x0 < x1 ? 1 : -1
                            	  1587: ;    dy = -abs(y1 - y0)
                            	  1588: ;    sy = y0 < y1 ? 1 : -1
                            	  1589: ;    error = dx + dy
                            	  1590: ;    
                            	  1591: ;    while true
                            	  1592: ;        plot(x0, y0)
                            	  1593: ;        e2 = 2 * error
                            	  1594: ;        if e2 >= dy
                            	  1595: ;            if x0 == x1 break
                            	  1596: ;            error = error + dy
                            	  1597: ;            x0 = x0 + sx
                            	  1598: ;        end if
                            	  1599: ;        if e2 <= dx
                            	  1600: ;            if y0 == y1 break
                            	  1601: ;            error = error + dx
                            	  1602: ;            y0 = y0 + sy
                            	  1603: ;        end if
                            	  1604: ;    end while
                            	  1605:     
                            	  1606: ;------------------------------------------------------------------------------
                            	  1607: ; Cursor positioning / Clear screen
                            	  1608: ; - out of range settings are ignored
                            	  1609: ;
                            	  1610: ; Parameters:
                            	  1611: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	  1612: ;	Returns:
                            	  1613: ;		none
                            	  1614: ;------------------------------------------------------------------------------
                            	  1615: 
                            	  1616: Cursor1:
00:00007FC2 48E7F300        	  1617: 	movem.l d0/d1/d2/d3/d6/d7,-(a7)
00:00007FC6 0C41FF00        	  1618: 	cmpi.w #$FF00,d1
00:00007FCA 6616            	  1619: 	bne.s .0002
00:00007FCC 7E02            	  1620: 	moveq #2,d7
00:00007FCE 7C0C            	  1621: 	moveq #DEV_CLEAR,d6	; clear screen
00:00007FD0 4E40            	  1622: 	trap #0
00:00007FD2 7C07            	  1623: 	moveq #DEV_SET_OUTPOS,d6
00:00007FD4 7200            	  1624: 	moveq #0,d1
00:00007FD6 7400            	  1625: 	moveq #0,d2
00:00007FD8 7600            	  1626: 	moveq #0,d3
00:00007FDA 4E40            	  1627: 	trap #0
00:00007FDC 4CDF00CF        	  1628: 	movem.l (a7)+,d0/d1/d2/d3/d6/d7
00:00007FE0 4E75            	  1629: 	rts
                            	  1630: .0002:
00:00007FE2 7E02            	  1631: 	moveq #2,d7
00:00007FE4 7C07            	  1632: 	moveq #DEV_SET_OUTPOS,d6
00:00007FE6 7400            	  1633: 	clr.l d2
00:00007FE8 1401            	  1634: 	move.b d1,d2		; d2 = row (y pos)
00:00007FEA E049            	  1635: 	lsr.w #8,d1			; d1 = col (x pos)
00:00007FEC 4881            	  1636: 	ext.w d1
00:00007FEE 48C1            	  1637: 	ext.l d1
00:00007FF0 7600            	  1638: 	moveq #0,d3
00:00007FF2 4E40            	  1639: 	trap #0
00:00007FF4 4CDF00CF        	  1640: 	movem.l (a7)+,d0/d1/d2/d3/d6/d7
00:00007FF8 4E75            	  1641: 	rts
                            	  1642: 
                            	  1643: ;------------------------------------------------------------------------------
                            	  1644: ; Stub routine for unimplemented functionality.
                            	  1645: ;------------------------------------------------------------------------------
                            	  1646: 
                            	  1647: StubRout:
00:00007FFA 4E75            	  1648: 	rts
                            	  1649: 
                            	  1650: ;------------------------------------------------------------------------------
                            	  1651: ; Select a specific IO focus.
                            	  1652: ;------------------------------------------------------------------------------
                            	  1653: 
                            	  1654: select_iofocus:
00:00007FFC 0C010002        	  1655: 	cmpi.b	#2,d1
00:00008000 650A            	  1656: 	blo.s		.0001
00:00008002 0C010005        	  1657: 	cmpi.b	#NCORES+1,d1
00:00008006 6204            	  1658: 	bhi.s		.0001
00:00008008 2001            	  1659: 	move.l	d1,d0
00:0000800A 6014            	  1660: 	bra.s		select_focus1
                            	  1661: .0001:
00:0000800C 4E75            	  1662: 	rts
                            	  1663: 
                            	  1664: ;------------------------------------------------------------------------------
                            	  1665: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	  1666: ;
                            	  1667: ; Modifies:
                            	  1668: ;		d0, IOFocus BIOS variable
                            	  1669: ;		updates the text screen pointer
                            	  1670: ;------------------------------------------------------------------------------
                            	  1671: 
                            	  1672: rotate_iofocus:
00:0000800E 103900100000    	  1673: 	move.b IOFocus,d0					; d0 = focus, we can trash d0
00:00008014 5200            	  1674: 	add.b	#1,d0								; increment the focus
00:00008016 B03C0005        	  1675: 	cmp.b	#NCORES+1,d0				; limit to 2 to 9
00:0000801A 6304            	  1676: 	bls.s	.0001
00:0000801C 103C0002        	  1677: 	move.b #2,d0
                            	  1678: .0001:
                            	  1679: select_focus1:
00:00008020 13C000100000    	  1680: 	move.b	d0,IOFocus				; set IO focus
                            	  1681: 	; reset keyboard processor to focus core
                            	  1682: ;	move.l #$3C060500,d0			; core=??,level sensitive,enabled,irq6,inta
                            	  1683: ;	or.b IOFocus,d0
                            	  1684: ;	move.l d0,PLIC+$80+4*30		; set register
                            	  1685: 	; Adjust text screen pointer
00:00008026 5500            	  1686: 	subi.b #2,d0							; screen is 0 to 7, focus is 2 to 9
00:00008028 4880            	  1687: 	ext.w	d0									; make into word value
00:0000802A C0FC0800        	  1688: 	mulu #2048,d0							; * 2048	cells per screen
00:0000802E E158            	  1689: 	rol.w	#8,d0								; swap byte order
00:00008030 4840            	  1690: 	swap d0										; get bits 16-31
00:00008032 E158            	  1691: 	rol.w	#8,d0								; swap byte order
00:00008034 23C0FD080028    	  1692: 	move.l d0,TEXTREG+$28			; update screen address in text controller
00:0000803A 600094AC        	  1693: 	bra	SyncCursor						; set cursor position
                            	  1694: 
                            	  1695: ;==============================================================================
                            	  1696: ; PLIC - platform level interrupt controller
                            	  1697: ;
                            	  1698: ; Register layout:
                            	  1699: ;   bits 0 to 7  = cause code to issue (vector number)
                            	  1700: ;   bits 8 to 11 = irq level to issue
                            	  1701: ;   bit 16 = irq enable
                            	  1702: ;   bit 17 = edge sensitivity
                            	  1703: ;   bit 18 = 0=vpa, 1=inta
                            	  1704: ;		bit 24 to 29 target core
                            	  1705: ;
                            	  1706: ; Note byte order must be reversed for PLIC.
                            	  1707: ;==============================================================================
                            	  1708: 
                            	  1709: init_plic:
00:0000803E 41F9FD090000    	  1710: 	lea	PLIC,a0							; a0 points to PLIC
00:00008044 43E800F4        	  1711: 	lea	$80+4*29(a0),a1			; point to timer registers (29)
00:00008048 22BC0006033F    	  1712: 	move.l #$0006033F,(a1)	; initialize, core=63,edge sensitive,enabled,irq6,vpa
00:0000804E 5889            	  1713: 	lea	4(a1),a1						; point to keyboard registers (30)
00:00008050 22BC3C060502    	  1714: 	move.l #$3C060502,(a1)	; core=2,level sensitive,enabled,irq6,inta
00:00008056 5889            	  1715: 	lea	4(a1),a1						; point to nmi button register (31)
00:00008058 22BC00070302    	  1716: 	move.l #$00070302,(a1)	; initialize, core=2,edge sensitive,enabled,irq7,vpa
00:0000805E 43E800C0        	  1717: 	lea	$80+4*16(a0),a1			; a1 points to ACIA register
00:00008062 22BC3D030502    	  1718: 	move.l #$3D030502,(a1)	; core=2,level sensitive,enabled,irq3,inta	
00:00008068 43E80090        	  1719: 	lea	$80+4*4(a0),a1			; a1 points to io_bitmap irq
00:0000806C 22BC3B060702    	  1720: 	move.l #$3B060702,(a1)	; core=2,edge sensitive,enabled,irq6,inta	
00:00008072 4E75            	  1721: 	rts
                            	  1722: 
                            	  1723: 
                            	  1724: ;==============================================================================
                            	  1725: ;==============================================================================
                            	  1726: ; Monitor
                            	  1727: ;==============================================================================
                            	  1728: ;==============================================================================
                            	  1729: 
                            	  1730: cmdString:
00:00008074 BF              	  1731: 	dc.b	'?'+$80						; ? display help
00:00008075 41              	  1732: 	dc.b	'A','S'+$80				; AS = asteroids
00:00008076 D3
00:00008077 CC              	  1733: 	dc.b	'L'+$80						; L load S19 file
00:00008078 46              	  1734: 	dc.b	'F','B'+$80				; FB fill with byte
00:00008079 C2
00:0000807A 46              	  1735: 	dc.b	'F','W'+$80				; FW fill with wyde
00:0000807B D7
00:0000807C 46              	  1736: 	dc.b	'F','L'+$80				; FL fill with long wyde
00:0000807D CC
00:0000807E 464D54          	  1737: 	dc.b	'FMT','K'+$80			; FMTK run Femtiki OS
00:00008081 CB
00:00008082 42              	  1738: 	dc.b	'B','A'+$80				; BA start Tiny Basic
00:00008083 C1
00:00008084 42              	  1739: 	dc.b	'B','R'+$80				; BR breakpoint
00:00008085 D2
00:00008086 44              	  1740: 	dc.b	'D','I'+$80				; DI disassemble
00:00008087 C9
00:00008088 44              	  1741: 	dc.b	'D','R'+$80				; DR dump registers
00:00008089 D2
00:0000808A C4              	  1742: 	dc.b	'D'+$80						; D dump memory
00:0000808B CA              	  1743: 	dc.b	'J'+$80						; J jump to code
00:0000808C C5              	  1744: 	dc.b	'E'+$80						; : edit memory
00:0000808D 434C            	  1745: 	dc.b	"CL",'S'+$80			; CLS clear screen
00:0000808F D3
00:00008090 434F52          	  1746: 	dc.b	"COR",'E'+$80			; CORE <n> switch to core
00:00008093 C5
00:00008094 5446            	  1747: 	dc.b	"TF",'P'+$80			; TFP test fp
00:00008096 D0
00:00008097 5447            	  1748: 	dc.b  "TG",'F'+$80			; TGF test get float
00:00008099 C6
00:0000809A 545241          	  1749: 	dc.b  "TRA",'M'+$80			; TRAM test RAM
00:0000809D CD
00:0000809E 5345545F54494D  	  1750: 	dc.b	'SET_TIM','E'+$80
00:000080A5 C5
00:000080A6 54494D          	  1751: 	dc.b	'TIM','E'+$80
00:000080A9 C5
00:000080AA 54              	  1752: 	dc.b	'T','R'+$80				; TR test serial receive
00:000080AB D2
00:000080AC 545343          	  1753: 	dc.b	'TSC','D'+$80			; Test SD card
00:000080AF C4
00:000080B0 D4              	  1754: 	dc.b	'T'+$80						; T test CPU
00:000080B1 D3              	  1755: 	dc.b	'S'+$80						; S send serial
00:000080B2 52455345        	  1756: 	dc.b	"RESE",'T'+$80		; RESET <n>
00:000080B6 D4
00:000080B7 434C4F43        	  1757: 	dc.b	"CLOC",'K'+$80		; CLOCK <n>
00:000080BB CB
00:000080BC D2              	  1758: 	dc.b	'R'+$80						; R receive serial
00:000080BD D6              	  1759: 	dc.b	'V'+$80
00:000080BE 47              	  1760: 	dc.b	'G','R'+$80				; graphics demo
00:000080BF D2
00:000080C0 70              	  1761: 	dc.b	'p','l','a','n','t','s'+$80	; plants
00:000080C1 6C
00:000080C2 61
00:000080C3 6E
00:000080C4 74
00:000080C5 F3
00:000080C6 00              	  1762: 	dc.b	0,0
00:000080C7 00
                            	  1763: 
                            	  1764: 	align	2
                            	  1765: cmdTable:
00:000080C8 000084D2        	  1766: 	dc.l	cmdHelp
00:000080CC 00008264        	  1767: 	dc.l	cmdAsteroids
00:000080D0 000096B2        	  1768: 	dc.l	cmdLoadS19
00:000080D4 00008816        	  1769: 	dc.l	cmdFillB
00:000080D8 0000886A        	  1770: 	dc.l	cmdFillW
00:000080DC 000088BE        	  1771: 	dc.l	cmdFillL
00:000080E0 0000839E        	  1772: 	dc.l	cmdFMTK
00:000080E4 0000835A        	  1773: 	dc.l	cmdTinyBasic
00:000080E8 00008240        	  1774: 	dc.l	cmdBreakpoint
00:000080EC 00008DB0        	  1775: 	dc.l	cmdDisassemble
00:000080F0 00008ECC        	  1776: 	dc.l	cmdDumpRegs
00:000080F4 00008E00        	  1777: 	dc.l	cmdDumpMemory
00:000080F8 000089CA        	  1778: 	dc.l	cmdJump
00:000080FC 0000896C        	  1779: 	dc.l	cmdEditMemory
00:00008100 0000836E        	  1780: 	dc.l	cmdClearScreen
00:00008104 0000837A        	  1781: 	dc.l	cmdCore
00:00008108 000083A8        	  1782: 	dc.l  cmdTestFP
00:0000810C 00008434        	  1783: 	dc.l	cmdTestGF
00:00008110 000095EA        	  1784: 	dc.l  cmdTestRAM
00:00008114 00008274        	  1785: 	dc.l	cmdSetTime
00:00008118 000082E2        	  1786: 	dc.l	cmdTime
00:0000811C 00008F76        	  1787: 	dc.l	cmdTestSerialReceive
00:00008120 000084DE        	  1788: 	dc.l	cmdTestSD
00:00008124 0000835E        	  1789: 	dc.l	cmdTestCPU
00:00008128 000087B2        	  1790: 	dc.l	cmdSendSerial
00:0000812C 00008480        	  1791: 	dc.l	cmdReset
00:00008130 00008462        	  1792: 	dc.l	cmdClock
00:00008134 000087E2        	  1793: 	dc.l	cmdReceiveSerial	
00:00008138 000081FE        	  1794: 	dc.l	cmdVideoMode
00:0000813C 000089DA        	  1795: 	dc.l	cmdGrDemo
00:00008140 0000826C        	  1796: 	dc.l	cmdPlants
00:00008144 0000815C        	  1797: 	dc.l	cmdMonitor
                            	  1798: 
                            	  1799: ; Get a word from screen memory and swap byte order
                            	  1800: 
                            	  1801: FromScreen:
00:00008148 2210            	  1802: 	move.l (a0),d1
00:0000814A 61001788        	  1803: 	bsr	rbo
                            	  1804: 	if (SCREEN_FORMAT==1)
00:0000814E 5888            	  1805: 		lea	4(a0),a0	; increment screen pointer
                            	  1806: 	else
                            	  1807: 		lea	8(a0),a0	; increment screen pointer
                            	  1808: 	endif
00:00008150 4E75            	  1809: 	rts
                            	  1810: 
                            	  1811: StartMon:
00:00008152 427900040202    	  1812: 	clr.w	NumSetBreakpoints
00:00008158 61001D6A        	  1813: 	bsr	ClearBreakpointList
                            	  1814: cmdMonitor:
                            	  1815: Monitor:
                            	  1816: 	; Reset the stack pointer on each entry into the monitor
00:0000815C 2E7C00047FFC    	  1817: 	move.l #$47FFC,sp		; reset core's stack
00:00008162 487AFFF8        	  1818: 	pea Monitor					; Cause any RTS to go here
00:00008166 46FC2200        	  1819: 	move.w #$2200,sr		; enable level 2 and higher interrupts
00:0000816A 4E7A0FE0        	  1820: 	movec	coreno,d0
00:0000816E 4840            	  1821: 	swap d0
00:00008170 7201            	  1822: 	moveq	#1,d1
00:00008172 6100A468        	  1823: 	bsr	UnlockSemaphore
00:00008176 42390004000C    	  1824: 	clr.b KeybdEcho			; turn off keyboard echo
                            	  1825: PromptLn:
00:0000817C 6100F974        	  1826: 	bsr	CRLF
00:00008180 123C0024        	  1827: 	move.b #'$',d1
00:00008184 61001E72        	  1828: 	bsr OutputChar
                            	  1829: 
                            	  1830: ; Get characters until a CR is keyed
                            	  1831: ;
                            	  1832: Prompt3:
00:00008188 61008702        	  1833: 	bsr	GetKey
00:0000818C 0C0100FF        	  1834: 	cmpi.b #-1,d1
00:00008190 67F6            	  1835: 	beq.s	Prompt3
00:00008192 0C01000D        	  1836: 	cmpi.b #CR,d1
00:00008196 6706            	  1837: 	beq.s	Prompt1
00:00008198 61001E5E        	  1838: 	bsr	OutputChar
00:0000819C 60EA            	  1839: 	bra.s	Prompt3
                            	  1840: 
                            	  1841: ; Process the screen line that the CR was keyed on
                            	  1842: 
                            	  1843: Prompt1:
00:0000819E 7E02            	  1844: 	moveq #2,d7
00:000081A0 7C17            	  1845: 	moveq #DEV_GET_OUTPOS,d6
00:000081A2 4E40            	  1846: 	trap #0
                            	  1847: ;	clr.b	CursorCol				; go back to the start of the line
00:000081A4 7C07            	  1848: 	moveq #DEV_SET_OUTPOS,d6
00:000081A6 7200            	  1849: 	moveq #0,d1						; go back to the start of the line
00:000081A8 4E40            	  1850: 	trap #0
00:000081AA 7C18            	  1851: 	moveq #DEV_GET_OUTPTR,d6
00:000081AC 4E40            	  1852: 	trap #0
00:000081AE 2041            	  1853: 	move.l d1,a0					; a0 = pointer to buffer
                            	  1854: ;	bsr	CalcScreenLoc			; a0 = screen memory location
                            	  1855: .0001:
00:000081B0 6196            	  1856: 	bsr	FromScreen				; grab character off screen
00:000081B2 0C010024        	  1857: 	cmpi.b #'$',d1				; skip over '$' prompt character
00:000081B6 67F8            	  1858: 	beq.s	.0001
                            	  1859: 
                            	  1860: ; Dispatch based on command string
                            	  1861: 
                            	  1862: cmdDispatch:
00:000081B8 45FAFEBA        	  1863: 	lea	cmdString,a2
00:000081BC 7800            	  1864: 	clr.l	d4							; command counter
                            	  1865: 	if (SCREEN_FORMAT==1)
00:000081BE 5988            	  1866: 		lea	-4(a0),a0				; backup a character
                            	  1867: 	else
                            	  1868: 		lea	-8(a0),a0				; backup a character
                            	  1869: 	endif
00:000081C0 2648            	  1870: 	move.l	a0,a3					; a3 = start of command on screen
                            	  1871: .checkNextCmd:
00:000081C2 6184            	  1872: 	bsr	FromScreen				; d1 = char from input screen
00:000081C4 1A1A            	  1873: 	move.b (a2)+,d5
00:000081C6 BB01            	  1874: 	eor.b	d5,d1						; does it match with command string?
00:000081C8 67F8            	  1875: 	beq.s	.checkNextCmd		; If it does, keep matching for longest match
00:000081CA 0C010080        	  1876: 	cmpi.b #$80,d1				; didn't match, was it the end of the command?
00:000081CE 6724            	  1877: 	beq.s	.foundCmd
00:000081D0 4A2AFFFF        	  1878: 	tst.b	-1(a2)					; was end of table hit?
00:000081D4 6712            	  1879: 	beq.s	.endOfTable
00:000081D6 5844            	  1880: 	addi.w #4,d4					; increment command counter
00:000081D8 204B            	  1881: 	move.l a3,a0					; reset input pointer
00:000081DA 4A2AFFFF        	  1882: 	tst.b	-1(a2)					; were we at the end of the command?
00:000081DE 6BE2            	  1883: 	bmi.s	.checkNextCmd		; if were at end continue, otherwise scan for end of cmd
                            	  1884: .scanToEndOfCmd
00:000081E0 4A1A            	  1885: 	tst.b	(a2)+						; scan to end of command
00:000081E2 6704            	  1886: 	beq.s	.endOfTable
00:000081E4 6AFA            	  1887: 	bpl.s	.scanToEndOfCmd
00:000081E6 6BDA            	  1888: 	bmi.s	.checkNextCmd
                            	  1889: .endOfTable
00:000081E8 43FA0503        	  1890: 	lea	msgUnknownCmd,a1
00:000081EC 6100F934        	  1891: 	bsr	DisplayStringCRLF
00:000081F0 6000FF6A        	  1892: 	bra	Monitor
                            	  1893: .foundCmd:
00:000081F4 43FAFED2        	  1894: 	lea	cmdTable,a1				; a1 = pointer to command address table
00:000081F8 22714000        	  1895: 	move.l (a1,d4.w),a1		; fetch command routine address from table
00:000081FC 4ED1            	  1896: 	jmp	(a1)							; go execute command
                            	  1897: 
                            	  1898: cmdVideoMode:
00:000081FE 6100070C        	  1899: 	bsr ignBlanks
00:00008202 61000D96        	  1900: 	bsr GetHexNumber
00:00008206 4A01            	  1901: 	cmpi.b #0,d1
00:00008208 660E            	  1902: 	bne.s .0001
00:0000820A 6100F880        	  1903: 	bsr set_text_mode
00:0000820E 7E02            	  1904: 	move.l #2,d7
00:00008210 7C0C            	  1905: 	move.l #DEV_CLEAR,d6
00:00008212 4E40            	  1906: 	trap #0
00:00008214 6000FF46        	  1907: 	bra Monitor
                            	  1908: .0001:
00:00008218 6100F89C        	  1909: 	bsr set_graphics_mode
00:0000821C 6100F8C2        	  1910: 	bsr get_screen_address
00:00008220 42B9FD0FFD04    	  1911: 	move.l #0,RAND+4		; select stream 0
00:00008226 343C1D4B        	  1912: 	move.w #7499,d2
                            	  1913: .0002:
00:0000822A 2239FD0FFD00    	  1914: 	move.l RAND,d1
00:00008230 42B9FD0FFD00    	  1915: 	move.l #0,RAND			; cause new number generation
00:00008236 20C1            	  1916: 	move.l d1,(a0)+			; random display
00:00008238 51CAFFF0        	  1917: 	dbra d2,.0002
00:0000823C 6000FF1E        	  1918: 	bra Monitor
                            	  1919: 
                            	  1920: cmdBreakpoint:
00:00008240 610006CA        	  1921: 	bsr	ignBlanks
00:00008244 6100FF02        	  1922: 	bsr	FromScreen
00:00008248 0C01002B        	  1923: 	cmpi.b	#'+',d1
00:0000824C 67001B84        	  1924: 	beq	ArmBreakpoint
00:00008250 0C01002D        	  1925: 	cmpi.b	#'-',d1
00:00008254 67001BFA        	  1926: 	beq	DisarmBreakpoint
00:00008258 0C01004C        	  1927: 	cmpi.b	#'L',d1
00:0000825C 67001C46        	  1928: 	beq	ListBreakpoints
00:00008260 6000FEFA        	  1929: 	bra	Monitor
                            	  1930: 
                            	  1931: cmdAsteroids:
00:00008264 487AFEF6        	  1932: 	pea Monitor
00:00008268 60002D2E        	  1933: 	jmp asteroids_start
                            	  1934: 
                            	  1935: cmdPlants:
00:0000826C 487AFEEE        	  1936: 	pea Monitor
00:00008270 4EF8027B        	  1937: 	jmp start_plants
                            	  1938: 
                            	  1939: cmdSetTime:
00:00008274 61000696        	  1940: 	bsr ignBlanks
00:00008278 61000D20        	  1941: 	bsr GetHexNumber
00:0000827C 1601            	  1942: 	move.b d1,d3					; d3 = hours
00:0000827E 863C0040        	  1943: 	or.b #$40,d3					; set 12 hour format
00:00008282 61000688        	  1944: 	bsr ignBlanks
00:00008286 6100FEC0        	  1945: 	bsr FromScreen
00:0000828A 0C01003A        	  1946: 	cmpi.b #':',d1
00:0000828E 6600FECC        	  1947: 	bne Monitor
00:00008292 61000678        	  1948: 	bsr ignBlanks
00:00008296 61000D02        	  1949: 	bsr GetHexNumber
00:0000829A 13C100100201    	  1950: 	move.b d1,RTCBuf+$01	; save minutes
00:000082A0 6100066A        	  1951: 	bsr ignBlanks
00:000082A4 6100FEA2        	  1952: 	bsr FromScreen
00:000082A8 0C01003A        	  1953: 	cmpi.b #':',d1
00:000082AC 6600FEAE        	  1954: 	bne Monitor
00:000082B0 6100065A        	  1955: 	bsr ignBlanks
00:000082B4 61000CE4        	  1956: 	bsr GetHexNumber
00:000082B8 00010080        	  1957: 	ori.b #$80,d1					; flag to turn on oscillator
00:000082BC 13C100100200    	  1958: 	move.b d1,RTCBuf+$00	; save seconds
00:000082C2 61000648        	  1959: 	bsr ignBlanks		
00:000082C6 6100FE80        	  1960: 	bsr FromScreen
00:000082CA 0C010070        	  1961: 	cmpi.b #'p',d1
00:000082CE 6604            	  1962: 	bne .0001
00:000082D0 00030020        	  1963: 	ori.b #$20,d3					; set pm bit
                            	  1964: .0001
00:000082D4 13C300100202    	  1965: 	move.b d3,RTCBuf+$02	; set hours
00:000082DA 61001984        	  1966: 	bsr rtc_write
00:000082DE 6000FE7C        	  1967: 	bra Monitor
                            	  1968: 
                            	  1969: ; Display the time
                            	  1970: ;		4:17:00 am
                            	  1971: 	
                            	  1972: cmdTime:
00:000082E2 4DF9000408E0    	  1973: 	lea TimeBuf,a6
00:000082E8 610A            	  1974: 	bsr get_time
00:000082EA 224E            	  1975: 	move.l a6,a1
00:000082EC 6100F834        	  1976: 	bsr DisplayStringCRLF
00:000082F0 6000FE6A        	  1977: 	bra Monitor
                            	  1978: 
                            	  1979: ; Get the time into a buffer
                            	  1980: ; Parameters:
                            	  1981: ;		a6 = pointer to buffer to store time as a string
                            	  1982: 
                            	  1983: get_time:
00:000082F4 2F0E            	  1984: 	move.l a6,-(sp)				; sve buffer address
00:000082F6 610018AA        	  1985: 	bsr rtc_read					; read the RTC registers
00:000082FA 123900100202    	  1986: 	move.b RTCBuf+$02,d1
00:00008300 4203            	  1987: 	move.b #0,d3					; flag 24 hour format
00:00008302 08010006        	  1988: 	btst #6,d1						; 0 = 24 hour format
00:00008306 6714            	  1989: 	beq.s .0001
00:00008308 163C0061        	  1990: 	move.b #'a',d3				; default to am
00:0000830C 08010005        	  1991: 	btst #5,d1
00:00008310 6704            	  1992: 	beq.s .0002
00:00008312 163C0070        	  1993: 	move.b #'p',d3
                            	  1994: .0002
00:00008316 0201001F        	  1995: 	andi.b #$1F,d1
00:0000831A 6004            	  1996: 	bra .0003
                            	  1997: .0001
00:0000831C 0201003F        	  1998: 	andi.b #$3F,d1
                            	  1999: .0003
00:00008320 6100128A        	  2000: 	bsr BufByte						; copy hours to buffer
00:00008324 1CFC003A        	  2001: 	move.b #':',(a6)+
00:00008328 123900100201    	  2002: 	move.b RTCBuf+$01,d1
00:0000832E 6100127C        	  2003: 	bsr BufByte						; copy minutes to buffer
00:00008332 1CFC003A        	  2004: 	move.b #':',(a6)+
00:00008336 123900100200    	  2005: 	move.b RTCBuf+$00,d1	
00:0000833C 0201003F        	  2006: 	andi.b #$3F,d1
00:00008340 6100126A        	  2007: 	bsr BufByte						; copy seconds to buffer
00:00008344 4A03            	  2008: 	tst.b d3							; 24 hour format?
00:00008346 670C            	  2009: 	beq .0004
00:00008348 1CFC0020        	  2010: 	move.b #' ',(a6)+
00:0000834C 1203            	  2011: 	move.b d3,d1
00:0000834E 1CC3            	  2012: 	move.b d3,(a6)+
00:00008350 1CFC006D        	  2013: 	move.b #'m',(a6)+
                            	  2014: .0004	
00:00008354 421E            	  2015: 	move.b #0,(a6)+				; NULL terminate
00:00008356 2C5F            	  2016: 	move.l (sp)+,a6
00:00008358 4E75            	  2017: 	rts
                            	  2018: 	
                            	  2019: cmdTinyBasic:
00:0000835A 6000DE92        	  2020: 	bra	CSTART
                            	  2021: 
                            	  2022: cmdTestCPU:
00:0000835E 6100A31E        	  2023: 	bsr	cpu_test
00:00008362 43FA1E73        	  2024: 	lea	msg_test_done,a1
00:00008366 6100F7BA        	  2025: 	bsr	DisplayStringCRLF
00:0000836A 6000FDF0        	  2026: 	bra	Monitor
                            	  2027: 
                            	  2028: cmdClearScreen:
00:0000836E 6100155C        	  2029: 	bsr	ClearScreen
00:00008372 61009162        	  2030: 	bsr	HomeCursor
00:00008376 6000FDE4        	  2031: 	bra	Monitor
                            	  2032: 
                            	  2033: cmdCore:
00:0000837A 61000590        	  2034: 	bsr			ignBlanks
00:0000837E 6100FDC8        	  2035: 	bsr			FromScreen
00:00008382 0C010032        	  2036: 	cmpi.b	#'2',d1					; check range
00:00008386 6500FDD4        	  2037: 	blo			Monitor
00:0000838A 0C010035        	  2038: 	cmpi.b	#'0'+NCORES+1,d1
00:0000838E 6200FDCC        	  2039: 	bhi			Monitor
00:00008392 04010030        	  2040: 	subi.b	#'0',d1					; convert ascii to binary
00:00008396 6100FC64        	  2041: 	bsr			select_iofocus
00:0000839A 6000FDC0        	  2042: 	bra			Monitor
                            	  2043: 
                            	  2044: cmdFMTK:
00:0000839E 4EB900000220    	  2045: 	bsr FemtikiInit
00:000083A4 6000FDB6        	  2046: 	bra Monitor
                            	  2047: 
                            	  2048: cmdTestFP:
00:000083A8 7029            	  2049: 	moveq #41,d0						; function #41, get float
00:000083AA 7204            	  2050: 	moveq #4,d1							; d1 = input stride
00:000083AC 2248            	  2051: 	move.l a0,a1						; a1 = pointer to input buffer
00:000083AE 4E4F            	  2052: 	trap #15
00:000083B0 2049            	  2053: 	move.l a1,a0
00:000083B2 F2000200        	  2054: 	fmove.x fp0,fp4
00:000083B6 61000554        	  2055: 	bsr ignBlanks
00:000083BA 6100FD8C        	  2056: 	bsr FromScreen
00:000083BE 1E01            	  2057: 	move.b d1,d7
00:000083C0 7029            	  2058: 	moveq #41,d0						; function #41, get float
00:000083C2 7208            	  2059: 	move.l #8,d1						; d1 = input stride
00:000083C4 2248            	  2060: 	move.l a0,a1						; a1 = pointer to input buffer
00:000083C6 4E4F            	  2061: 	trap #15
00:000083C8 2049            	  2062: 	move.l a1,a0
00:000083CA F2000100        	  2063: 	fmove.x fp0,fp2
00:000083CE 6100F722        	  2064: 	bsr CRLF
                            	  2065: ;	moveq #39,d0
                            	  2066: ;	moveq #40,d1
                            	  2067: ;	moveq #30,d2
                            	  2068: ;	moveq #'e',d3
                            	  2069: ;	trap #15
                            	  2070: ;	bsr CRLF
00:000083D2 F2396A00000402C0	  2071: 	fmove.x fp4,fpBuf
00:000083DA F2396900000402D0	  2072: 	fmove.x fp2,fpBuf+16
00:000083E2 0C07002B        	  2073: 	cmpi.b #'+',d7
00:000083E6 6606            	  2074: 	bne .0001
00:000083E8 F2000A22        	  2075: 	fadd fp2,fp4
00:000083EC 6022            	  2076: 	bra .0002
                            	  2077: .0001
00:000083EE 0C07002D        	  2078: 	cmpi.b #'-',d7
00:000083F2 6606            	  2079: 	bne .0003
00:000083F4 F2000A28        	  2080: 	fsub fp2,fp4
00:000083F8 6016            	  2081: 	bra .0002
                            	  2082: .0003
00:000083FA 0C07002A        	  2083: 	cmpi.b #'*',d7
00:000083FE 6606            	  2084: 	bne .0004
00:00008400 F2000A23        	  2085: 	fmul fp2,fp4
00:00008404 600A            	  2086: 	bra .0002
                            	  2087: .0004
00:00008406 0C07002F        	  2088: 	cmpi.b #'/',d7
00:0000840A 6620            	  2089: 	bne .0005
00:0000840C F2000A20        	  2090: 	fdiv fp2,fp4
                            	  2091: 	bra .0002
                            	  2092: .0002
00:00008410 F2396A00000402E0	  2093: 	fmove.x fp4,fpBuf+32
00:00008418 F2001000        	  2094: 	fmove.x fp4,fp0
00:0000841C 43F900040520    	  2095: 	lea _fpBuf,a1						; a0 = pointer to buffer to use
00:00008422 7027            	  2096: 	moveq #39,d0						; function #39 print float
00:00008424 7228            	  2097: 	moveq #40,d1						; width
00:00008426 741E            	  2098: 	moveq #30,d2						; precision
00:00008428 7665            	  2099: 	moveq #'e',d3
00:0000842A 4E4F            	  2100: 	trap #15
                            	  2101: .0005
00:0000842C 6100F6C4        	  2102: 	bsr CRLF
00:00008430 6000FD2A        	  2103: 	bra Monitor
                            	  2104: 
                            	  2105: cmdTestGF:
00:00008434 6100F6BC        	  2106: 	bsr CRLF
00:00008438 7029            	  2107: 	moveq #41,d0						; function #41, get float
00:0000843A 7208            	  2108: 	move.l #8,d1						; d1 = input stride
00:0000843C 2248            	  2109: 	move.l a0,a1						; a1 = pointer to input buffer
00:0000843E 4E4F            	  2110: 	trap #15
00:00008440 F2396800000402E0	  2111: 	fmove.x fp0,fpBuf+32
00:00008448 43F900040520    	  2112: 	lea _fpBuf,a1						; a0 = pointer to buffer to use
00:0000844E 7027            	  2113: 	moveq #39,d0
00:00008450 7228            	  2114: 	moveq #40,d1
00:00008452 741E            	  2115: 	moveq #30,d2
00:00008454 7665            	  2116: 	moveq #'e',d3
00:00008456 4E4F            	  2117: 	trap #15
00:00008458 2049            	  2118: 	move.l a1,a0
00:0000845A 6100F696        	  2119: 	bsr CRLF
00:0000845E 6000FCFC        	  2120: 	bra Monitor
                            	  2121: 		
                            	  2122: ;-------------------------------------------------------------------------------
                            	  2123: ; CLOCK <n>
                            	  2124: ;    Set the clock register to n which will turn off or on clocks to the CPUs.
                            	  2125: ;-------------------------------------------------------------------------------
                            	  2126: 
                            	  2127: cmdClock:
00:00008462 610004A8        	  2128: 	bsr			ignBlanks
00:00008466 61000B32        	  2129: 	bsr			GetHexNumber
00:0000846A 4A00            	  2130: 	tst.b		d0							; was there a number?
00:0000846C 6700FCEE        	  2131: 	beq			Monitor
00:00008470 00400004        	  2132: 	ori.w		#4,d0						; primary core's clock cannot be turned off
00:00008474 E159            	  2133: 	rol.w		#8,d1						; switch byte order
00:00008476 33C1FD0FFC02    	  2134: 	move.w	d1,RST_REG+2
00:0000847C 6000FCDE        	  2135: 	bra			Monitor
                            	  2136: 
                            	  2137: ;-------------------------------------------------------------------------------
                            	  2138: ; RESET <n>
                            	  2139: ;    Reset the specified core. Resetting the core automatically turns on the 
                            	  2140: ; core's clock.
                            	  2141: ;-------------------------------------------------------------------------------
                            	  2142: 
                            	  2143: cmdReset:
00:00008480 6100048A        	  2144: 	bsr			ignBlanks
00:00008484 6100FCC2        	  2145: 	bsr			FromScreen
00:00008488 0C010032        	  2146: 	cmpi.b	#'2',d1					; check range
00:0000848C 6500FCCE        	  2147: 	blo			Monitor
00:00008490 0C010039        	  2148: 	cmpi.b	#'9',d1
00:00008494 6200FCC6        	  2149: 	bhi			Monitor
00:00008498 04010030        	  2150: 	subi.b	#'0',d1					; convert ascii to binary
00:0000849C E349            	  2151: 	lsl.w		#1,d1						; make into index
00:0000849E 43FA0012        	  2152: 	lea			tblPow2,a1
00:000084A2 32311000        	  2153: 	move.w	(a1,d1.w),d1
00:000084A6 E159            	  2154: 	rol.w		#8,d1						; reverse byte order
00:000084A8 33C1FD0FFC00    	  2155: 	move.w	d1,RST_REG
00:000084AE 6000FCAC        	  2156: 	bra			Monitor
                            	  2157: 
                            	  2158: tblPow2:
00:000084B2 0001            	  2159: 	dc.w		1
00:000084B4 0002            	  2160: 	dc.w		2
00:000084B6 0004            	  2161: 	dc.w		4
00:000084B8 0008            	  2162: 	dc.w		8
00:000084BA 0010            	  2163: 	dc.w		16
00:000084BC 0020            	  2164: 	dc.w		32
00:000084BE 0040            	  2165: 	dc.w		64
00:000084C0 0080            	  2166: 	dc.w		128
00:000084C2 0100            	  2167: 	dc.w		256
00:000084C4 0200            	  2168: 	dc.w		512
00:000084C6 0400            	  2169: 	dc.w		1024
00:000084C8 0800            	  2170: 	dc.w		2048
00:000084CA 1000            	  2171: 	dc.w		4096
00:000084CC 2000            	  2172: 	dc.w		8192
00:000084CE 4000            	  2173: 	dc.w		16384
00:000084D0 8000            	  2174: 	dc.w		32768
                            	  2175: 	even
                            	  2176: 	
                            	  2177: cmdHelp:
                            	  2178: DisplayHelp:
00:000084D2 43FA007C        	  2179: 	lea			HelpMsg,a1
00:000084D6 6100F634        	  2180: 	bsr			DisplayString
00:000084DA 6000FC80        	  2181: 	bra			Monitor
                            	  2182: 
                            	  2183: cmdTestSD:
00:000084DE 6100042C        	  2184: 	bsr ignBlanks
00:000084E2 61000AB6        	  2185: 	bsr GetHexNumber
00:000084E6 263CFD06A000    	  2186: 	move.l #SPI_MASTER1,d3
00:000084EC 0C010001        	  2187: 	cmpi.b #1,d1
00:000084F0 6706            	  2188: 	beq.s .0005
00:000084F2 263CFD06A100    	  2189: 	move.l #SPI_MASTER2,d3
                            	  2190: .0005
00:000084F8 2203            	  2191: 	move.l d3,d1
                            	  2192: 	macHmash d1
00:000084FA 4841            	     1M 	swap d1
00:000084FC 0A8156791123    	     2M 	eori.l #DEV_HMASH,d1
00:00008502 610013D8        	  2193: 	bsr spi_setup
00:00008506 4A00            	  2194: 	tst.b d0
00:00008508 6624            	  2195: 	bne.s .0001
00:0000850A 263C00008550    	  2196: 	move.l #HelpMsg,d3
00:00008510 7401            	  2197: 	moveq #1,d2				; write block #1
00:00008512 6100153A        	  2198: 	bsr spi_write_block
00:00008516 4A00            	  2199: 	tst.b d0
00:00008518 662A            	  2200: 	bne.s .0003
00:0000851A 7401            	  2201: 	moveq #1,d2
00:0000851C 263C00042000    	  2202: 	move.l #spi_buff,d3
00:00008522 610014D8        	  2203: 	bsr spi_read_block
00:00008526 4A00            	  2204: 	tst.b d0
00:00008528 6620            	  2205: 	bne.s .0004
00:0000852A 6000FC30        	  2206: 	bra Monitor
                            	  2207: .0001
00:0000852E 123C0053        	  2208: 	move.b #'S',d1
                            	  2209: .0002
00:00008532 61001AC4        	  2210: 	bsr OutputChar
00:00008536 2200            	  2211: 	move.l d0,d1
00:00008538 6100103A        	  2212: 	bsr DisplayTetra
00:0000853C 6100F5B4        	  2213: 	bsr CRLF
00:00008540 6000FC1A        	  2214: 	bra Monitor
                            	  2215: .0003
00:00008544 103C0057        	  2216: 	move.b #'W',d0
00:00008548 60E8            	  2217: 	bra .0002
                            	  2218: .0004
00:0000854A 103C0052        	  2219: 	move.b #'R',d0
00:0000854E 60E2            	  2220: 	bra .0002	
                            	  2221: 
                            	  2222: HelpMsg:
00:00008550 3F203D2044697370	  2223: 	dc.b	"? = Display help",LF,CR
00:00008558 6C61792068656C70
00:00008560 0A
00:00008561 0D
00:00008562 434F5245206E203D	  2224: 	dc.b  "CORE n = switch to core n, n = 2 to 9",LF,CR
00:0000856A 2073776974636820
00:00008572 746F20636F726520
00:0000857A 6E2C206E203D2032
00:00008582 20746F2039
00:00008587 0A
00:00008588 0D
00:00008589 5245534554206E20	  2225: 	dc.b  "RESET n = reset core n",LF,CR
00:00008591 3D20726573657420
00:00008599 636F7265206E
00:0000859F 0A
00:000085A0 0D
00:000085A1 434C53203D20636C	  2226: 	dc.b	"CLS = clear screen",LF,CR
00:000085A9 6561722073637265
00:000085B1 656E
00:000085B3 0A
00:000085B4 0D
00:000085B5 4542203D20456469	  2227: 	dc.b	"EB = Edit memory bytes, EW, EL",LF,CR
00:000085BD 74206D656D6F7279
00:000085C5 2062797465732C20
00:000085CD 45572C20454C
00:000085D3 0A
00:000085D4 0D
00:000085D5 4642203D2046696C	  2228: 	dc.b	"FB = Fill memory bytes, FW, FL",LF,CR
00:000085DD 6C206D656D6F7279
00:000085E5 2062797465732C20
00:000085ED 46572C20464C
00:000085F3 0A
00:000085F4 0D
00:000085F5 464D544B203D2072	  2229: 	dc.b	"FMTK = run Femtiki OS",LF,CR
00:000085FD 756E2046656D7469
00:00008605 6B69204F53
00:0000860A 0A
00:0000860B 0D
00:0000860C 4752203D20477261	  2230: 	dc.b	"GR = Graphics command",LF,CR
00:00008614 706869637320636F
00:0000861C 6D6D616E64
00:00008621 0A
00:00008622 0D
00:00008623 4C203D204C6F6164	  2231: 	dc.b	"L = Load S19 file",LF,CR
00:0000862B 205331392066696C
00:00008633 65
00:00008634 0A
00:00008635 0D
00:00008636 44203D2044756D70	  2232: 	dc.b	"D = Dump memory, DR = dump registers",LF,CR
00:0000863E 206D656D6F72792C
00:00008646 204452203D206475
00:0000864E 6D70207265676973
00:00008656 74657273
00:0000865A 0A
00:0000865B 0D
00:0000865C 4449203D20446973	  2233: 	dc.b	"DI = Disassemble",LF,CR
00:00008664 617373656D626C65
00:0000866C 0A
00:0000866D 0D
00:0000866E 4241203D20737461	  2234: 	dc.b	"BA = start tiny basic",LF,CR
00:00008676 72742074696E7920
00:0000867E 6261736963
00:00008683 0A
00:00008684 0D
00:00008685 4252203D20736574	  2235: 	dc.b  "BR = set breakpoint",LF,CR
00:0000868D 20627265616B706F
00:00008695 696E74
00:00008698 0A
00:00008699 0D
00:0000869A 4A203D204A756D70	  2236: 	dc.b	"J = Jump to code",LF,CR
00:000086A2 20746F20636F6465
00:000086AA 0A
00:000086AB 0D
00:000086AC 53203D2073656E64	  2237: 	dc.b  "S = send to serial port",LF,CR
00:000086B4 20746F2073657269
00:000086BC 616C20706F7274
00:000086C3 0A
00:000086C4 0D
00:000086C5 54203D2063707520	  2238: 	dc.b	"T = cpu test program",LF,CR
00:000086CD 746573742070726F
00:000086D5 6772616D
00:000086D9 0A
00:000086DA 0D
00:000086DB 5452414D203D2074	  2239: 	dc.b	"TRAM = test RAM",LF,CR,0
00:000086E3 6573742052414D
00:000086EA 0A
00:000086EB 0D
00:000086EC 00
                            	  2240: 
                            	  2241: msgUnknownCmd:
00:000086ED 636F6D6D616E6420	  2242: 	dc.b	"command unknown",0
00:000086F5 756E6B6E6F776E
00:000086FC 00
                            	  2243: 
                            	  2244: msgHello:
00:000086FD 0A              	  2245: 	dc.b	LF,CR,"Hello World!",LF,CR,0
00:000086FE 0D
00:000086FF 48656C6C6F20576F
00:00008707 726C6421
00:0000870B 0A
00:0000870C 0D
00:0000870D 00
                            	  2246: 	even
                            	  2247: 
                            	  2248: ;------------------------------------------------------------------------------
                            	  2249: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  2250: ; Used to fetch a command line. (Not currently used).
                            	  2251: ;
                            	  2252: ; d0.b	- command prompt
                            	  2253: ;------------------------------------------------------------------------------
                            	  2254: 
                            	  2255: GetCmdLine:
00:0000870E 610018E8        	  2256: 		bsr		OutputChar		; display prompt
00:00008712 103C0020        	  2257: 		move.b	#' ',d0
00:00008716 610018E0        	  2258: 		bsr		OutputChar
00:0000871A 41F900040040    	  2259: 		lea		CmdBuf,a0
                            	  2260: .0001:
00:00008720 6100816A        	  2261: 		bsr		GetKey
00:00008724 B03C0008        	  2262: 		cmp.b	#CTRLH,d0
00:00008728 6728            	  2263: 		beq.s	.0003
00:0000872A B03C0018        	  2264: 		cmp.b	#CTRLX,d0
00:0000872E 6746            	  2265: 		beq.s	.0004
00:00008730 B03C000D        	  2266: 		cmp.b	#CR,d0
00:00008734 6706            	  2267: 		beq.s	.0002
00:00008736 B03C0020        	  2268: 		cmp.b	#' ',d0
00:0000873A 65E4            	  2269: 		bcs.s	.0001
                            	  2270: .0002:
00:0000873C 1080            	  2271: 		move.b	d0,(a0)
00:0000873E 5088            	  2272: 		lea			8(a0),a0
00:00008740 610018B6        	  2273: 		bsr		OutputChar
00:00008744 B03C000D        	  2274: 		cmp.b	#CR,d0
00:00008748 675E            	  2275: 		beq		.0007
00:0000874A B1FC0004007F    	  2276: 		cmp.l	#CmdBufEnd-1,a0
00:00008750 65CE            	  2277: 		bcs.s	.0001
                            	  2278: .0003:
00:00008752 103C0008        	  2279: 		move.b	#CTRLH,d0
00:00008756 610018A0        	  2280: 		bsr		OutputChar
00:0000875A 103C0020        	  2281: 		move.b	#' ',d0
00:0000875E 61001898        	  2282: 		bsr		OutputChar
00:00008762 B1FC00040040    	  2283: 		cmp.l	#CmdBuf,a0
00:00008768 63B6            	  2284: 		bls.s	.0001
00:0000876A 103C0008        	  2285: 		move.b	#CTRLH,d0
00:0000876E 61001888        	  2286: 		bsr		OutputChar
00:00008772 5388            	  2287: 		subq.l	#1,a0
00:00008774 60AA            	  2288: 		bra.s	.0001
                            	  2289: .0004:
00:00008776 2208            	  2290: 		move.l	a0,d1
00:00008778 92BC00040040    	  2291: 		sub.l	#CmdBuf,d1
00:0000877E 671E            	  2292: 		beq.s	.0006
00:00008780 5341            	  2293: 		subq	#1,d1
                            	  2294: .0005:
00:00008782 103C0008        	  2295: 		move.b	#CTRLH,d0
00:00008786 61001870        	  2296: 		bsr		OutputChar
00:0000878A 103C0020        	  2297: 		move.b	#' ',d0
00:0000878E 61001868        	  2298: 		bsr		OutputChar
00:00008792 103C0008        	  2299: 		move.b	#CTRLH,d0
00:00008796 61001860        	  2300: 		bsr		OutputChar
00:0000879A 51C9FFE6        	  2301: 		dbra	d1,.0005
                            	  2302: .0006:
00:0000879E 41F900040040    	  2303: 		lea		CmdBuf,a0
00:000087A4 6000FF7A        	  2304: 		bra		.0001
                            	  2305: .0007:
00:000087A8 103C000A        	  2306: 		move.b	#LF,d0
00:000087AC 6100184A        	  2307: 		bsr		OutputChar
00:000087B0 4E75            	  2308: 		rts
                            	  2309: 
                            	  2310: ;------------------------------------------------------------------------------
                            	  2311: ; S <address> <length>
                            	  2312: ; Send data buffer to serial port
                            	  2313: ; S 40000 40
                            	  2314: ;------------------------------------------------------------------------------
                            	  2315: 
                            	  2316: cmdSendSerial:
00:000087B2 61000158        	  2317: 	bsr			ignBlanks
00:000087B6 610007E2        	  2318: 	bsr			GetHexNumber
00:000087BA 6700F9A0        	  2319: 	beq			Monitor
00:000087BE 2C01            	  2320: 	move.l	d1,d6					; d6 points to buffer
00:000087C0 6100014A        	  2321: 	bsr			ignBlanks
00:000087C4 610007D4        	  2322: 	bsr			GetHexNumber
00:000087C8 6602            	  2323: 	bne.s		.0003
00:000087CA 7210            	  2324: 	moveq		#16,d1
                            	  2325: .0003:
00:000087CC 2246            	  2326: 	move.l	d6,a1					; a1 points to buffer
00:000087CE 2401            	  2327: 	move.l	d1,d2					; d2 = count of bytes to send
00:000087D0 6008            	  2328: 	bra.s		.0002					; enter loop at bottom
                            	  2329: .0001:
00:000087D2 1219            	  2330: 	move.b	(a1)+,d1
00:000087D4 303C0022        	  2331: 	move.w	#34,d0				; serial putchar
00:000087D8 4E4F            	  2332: 	trap		#15
                            	  2333: .0002:
00:000087DA 51CAFFF6        	  2334: 	dbra		d2,.0001
00:000087DE 6000F97C        	  2335: 	bra			Monitor
                            	  2336: 		
                            	  2337: ;------------------------------------------------------------------------------
                            	  2338: ; R <address> <length>
                            	  2339: ; Send data buffer to serial port
                            	  2340: ; R 10000 40
                            	  2341: ;------------------------------------------------------------------------------
                            	  2342: 
                            	  2343: cmdReceiveSerial:
00:000087E2 61000128        	  2344: 	bsr			ignBlanks
00:000087E6 610007B2        	  2345: 	bsr			GetHexNumber
00:000087EA 6700F970        	  2346: 	beq			Monitor
00:000087EE 2C01            	  2347: 	move.l	d1,d6					; d6 points to buffer
00:000087F0 6100011A        	  2348: 	bsr			ignBlanks
00:000087F4 610007A4        	  2349: 	bsr			GetHexNumber
00:000087F8 6602            	  2350: 	bne.s		.0003
00:000087FA 7210            	  2351: 	moveq		#16,d1
                            	  2352: .0003:
00:000087FC 2246            	  2353: 	move.l	d6,a1					; a1 points to buffer
00:000087FE 2401            	  2354: 	move.l	d1,d2					; d2 = count of bytes to send
00:00008800 600C            	  2355: 	bra.s		.0002					; enter loop at bottom
                            	  2356: .0001:
00:00008802 303C0024        	  2357: 	move.w	#36,d0				; serial peek char
00:00008806 4E4F            	  2358: 	trap		#15
00:00008808 4A81            	  2359: 	tst.l		d1
00:0000880A 6BF6            	  2360: 	bmi.s		.0001
00:0000880C 12C1            	  2361: 	move.b	d1,(a1)+
                            	  2362: .0002:
00:0000880E 51CAFFF2        	  2363: 	dbra		d2,.0001
00:00008812 6000F948        	  2364: 	bra			Monitor
                            	  2365: 		
                            	  2366: ;------------------------------------------------------------------------------
                            	  2367: ; Fill memory
                            	  2368: ;
                            	  2369: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  2370: ; FB = fill bytes		FB 00000010 100 R		; fill with random bytes
                            	  2371: ; FW = fill words
                            	  2372: ; FL = fill longs
                            	  2373: ; F = fill bytes
                            	  2374: ;------------------------------------------------------------------------------
                            	  2375: 
                            	  2376: cmdFillB:
00:00008816 610000F4        	  2377: 	bsr			ignBlanks
00:0000881A 6100077E        	  2378: 	bsr			GetHexNumber
00:0000881E 2241            	  2379: 	move.l	d1,a1					; a1 = start
00:00008820 610000EA        	  2380: 	bsr			ignBlanks
00:00008824 61000774        	  2381: 	bsr			GetHexNumber
00:00008828 2601            	  2382: 	move.l	d1,d3					; d3 = count
00:0000882A 6700F930        	  2383: 	beq			Monitor
00:0000882E 610000DC        	  2384: 	bsr			ignBlanks
00:00008832 610000EA        	  2385: 	bsr PeekScreenChar
00:00008836 0C010052        	  2386: 	cmpi.b #'R',d1
00:0000883A 660A            	  2387: 	bne.s .0002
00:0000883C 6100F90A        	  2388: 	bsr FromScreen
00:00008840 1A3C0052        	  2389: 	move.b #'R',d5
00:00008844 6006            	  2390: 	bra.s .fmem
                            	  2391: .0002:
00:00008846 61000752        	  2392: 	bsr	GetHexNumber		; fill value
00:0000884A 1801            	  2393: 	move.b d1,d4
                            	  2394: .fmem:
00:0000884C 3409            	  2395: 	move.w a1,d2
00:0000884E 4A42            	  2396: 	tst.w d2
00:00008850 6604            	  2397: 	bne.s .0001
00:00008852 61008072        	  2398: 	bsr	CheckForCtrlC
                            	  2399: .0001:	
00:00008856 0C050052        	  2400: 	cmpi.b #'R',d5
00:0000885A 6604            	  2401: 	bne.s .0003
00:0000885C 61009C56        	  2402: 	bsr RandGetNum
                            	  2403: .0003:
00:00008860 12C4            	  2404: 	move.b d4,(a1)+
00:00008862 5383            	  2405: 	sub.l	#1,d3
00:00008864 66E6            	  2406: 	bne.s	.fmem
00:00008866 6000F8F4        	  2407: 	bra	Monitor
                            	  2408: 	
                            	  2409: cmdFillW:
00:0000886A 610000A0        	  2410: 	bsr			ignBlanks
00:0000886E 6100072A        	  2411: 	bsr			GetHexNumber
00:00008872 2241            	  2412: 	move.l	d1,a1					; a1 = start
00:00008874 61000096        	  2413: 	bsr			ignBlanks
00:00008878 61000720        	  2414: 	bsr			GetHexNumber
00:0000887C 2601            	  2415: 	move.l	d1,d3					; d3 = count
00:0000887E 6700F8DC        	  2416: 	beq			Monitor
00:00008882 61000088        	  2417: 	bsr			ignBlanks
00:00008886 61000096        	  2418: 	bsr PeekScreenChar
00:0000888A 0C010052        	  2419: 	cmpi.b #'R',d1
00:0000888E 660A            	  2420: 	bne.s .0002
00:00008890 6100F8B6        	  2421: 	bsr FromScreen
00:00008894 1A3C0052        	  2422: 	move.b #'R',d5
00:00008898 6006            	  2423: 	bra.s .fmem
                            	  2424: .0002:
00:0000889A 610006FE        	  2425: 	bsr	GetHexNumber			; fill value
00:0000889E 3801            	  2426: 	move.w d1,d4
                            	  2427: .fmem:
00:000088A0 3409            	  2428: 	move.w a1,d2
00:000088A2 4A42            	  2429: 	tst.w d2
00:000088A4 6604            	  2430: 	bne.s .0001
00:000088A6 6100801E        	  2431: 	bsr	CheckForCtrlC
                            	  2432: .0001:	
00:000088AA 0C050052        	  2433: 	cmpi.b #'R',d5
00:000088AE 6604            	  2434: 	bne.s .0003
00:000088B0 61009C02        	  2435: 	bsr RandGetNum
                            	  2436: .0003:
00:000088B4 32C4            	  2437: 	move.w d4,(a1)+
00:000088B6 5383            	  2438: 	sub.l	#1,d3
00:000088B8 66E6            	  2439: 	bne.s	.fmem
00:000088BA 6000F8A0        	  2440: 	bra	Monitor
                            	  2441: 	
                            	  2442: cmdFillL:
00:000088BE 614C            	  2443: 	bsr			ignBlanks
00:000088C0 610006D8        	  2444: 	bsr			GetHexNumber
00:000088C4 2241            	  2445: 	move.l	d1,a1					; a1 = start
00:000088C6 6144            	  2446: 	bsr			ignBlanks
00:000088C8 610006D0        	  2447: 	bsr			GetHexNumber
00:000088CC 2601            	  2448: 	move.l	d1,d3					; d3 = count
00:000088CE 6700F88C        	  2449: 	beq			Monitor
00:000088D2 6138            	  2450: 	bsr			ignBlanks
00:000088D4 6148            	  2451: 	bsr PeekScreenChar
00:000088D6 0C010052        	  2452: 	cmpi.b #'R',d1
00:000088DA 660A            	  2453: 	bne.s .0002
00:000088DC 6100F86A        	  2454: 	bsr FromScreen
00:000088E0 1A3C0052        	  2455: 	move.b #'R',d5
00:000088E4 6006            	  2456: 	bra.s .fmem
                            	  2457: .0002:
00:000088E6 610006B2        	  2458: 	bsr			GetHexNumber	; fill value
00:000088EA 2801            	  2459: 	move.l d1,d4
                            	  2460: .fmem:
00:000088EC 3409            	  2461: 	move.w a1,d2
00:000088EE 4A42            	  2462: 	tst.w d2
00:000088F0 6606            	  2463: 	bne.s .0001
00:000088F2 4EB9000008C6    	  2464: 	bsr	CheckForCtrlC
                            	  2465: .0001:	
00:000088F8 0C050052        	  2466: 	cmpi.b #'R',d5
00:000088FC 6604            	  2467: 	bne.s .0003
00:000088FE 61009BB4        	  2468: 	bsr RandGetNum
                            	  2469: .0003:
00:00008902 22C4            	  2470: 	move.l d4,(a1)+
00:00008904 5383            	  2471: 	sub.l	#1,d3
00:00008906 66E4            	  2472: 	bne.s	.fmem
00:00008908 6000F852        	  2473: 	bra	Monitor
                            	  2474: 	
                            	  2475: ;------------------------------------------------------------------------------
                            	  2476: ; Modifies:
                            	  2477: ;	a0	- text pointer
                            	  2478: ;------------------------------------------------------------------------------
                            	  2479: 
                            	  2480: ignBlanks:
00:0000890C 2F01            	  2481: 	move.l d1,-(a7)
                            	  2482: .0001:
00:0000890E 6100F838        	  2483: 	bsr	FromScreen
00:00008912 0C010020        	  2484: 	cmpi.b #' ',d1
00:00008916 67F6            	  2485: 	beq.s .0001
                            	  2486: 	if (SCREEN_FORMAT==1)
00:00008918 5988            	  2487: 		lea	-4(a0),a0
                            	  2488: 	else
                            	  2489: 		lea	-8(a0),a0
                            	  2490: 	endif
00:0000891A 221F            	  2491: 	move.l (a7)+,d1
00:0000891C 4E75            	  2492: 	rts
                            	  2493: 
                            	  2494: 
                            	  2495: ;------------------------------------------------------------------------------
                            	  2496: ;------------------------------------------------------------------------------
                            	  2497: 
                            	  2498: PeekScreenChar:
00:0000891E 2210            	  2499: 	move.l (a0),d1
00:00008920 60000FB2        	  2500: 	bra rbo
                            	  2501: 
                            	  2502: ;------------------------------------------------------------------------------
                            	  2503: ; Get the size character
                            	  2504: ; If the size is not recognized, assume a byte size
                            	  2505: ;
                            	  2506: ; Modifies:
                            	  2507: ;		a0	- text pointer
                            	  2508: ;		d1
                            	  2509: ; Returns:
                            	  2510: ;		d4 = size character 'B','W' or 'L'
                            	  2511: ;------------------------------------------------------------------------------
                            	  2512: 
                            	  2513: GetSzChar:
00:00008924 61E6            	  2514: 	bsr	ignBlanks
00:00008926 7842            	  2515: 	moveq #'B',d4		; assume byte
00:00008928 2210            	  2516: 	move.l (a0),d1
00:0000892A 61000FA8        	  2517: 	bsr	rbo
00:0000892E 0C010042        	  2518: 	cmpi.b #'B',d1
00:00008932 670E            	  2519: 	beq.s .0002
00:00008934 0C010057        	  2520: 	cmpi.b #'W',d1
00:00008938 6708            	  2521: 	beq.s .0002
00:0000893A 0C01004C        	  2522: 	cmpi.b #'L',d1
00:0000893E 6702            	  2523: 	beq.s .0002
00:00008940 4E75            	  2524: 	rts
                            	  2525: .0002:
00:00008942 6100F804        	  2526: 	bsr FromScreen
00:00008946 1801            	  2527: 	move.b d1,d4
00:00008948 4E75            	  2528: 	rts
                            	  2529: 
                            	  2530: ;------------------------------------------------------------------------------
                            	  2531: ; Edit memory byte.
                            	  2532: ;    Bytes are built into long words in case the memory is only longword
                            	  2533: ; accessible.
                            	  2534: ;------------------------------------------------------------------------------
                            	  2535: 
                            	  2536: EditMemHelper:
00:0000894A 61C0            	  2537: 	bsr ignBlanks
00:0000894C 6100064C        	  2538: 	bsr GetHexNumber
00:00008950 0C04004C        	  2539: 	cmpi.b #'L',d4
00:00008954 6604            	  2540: 	bne.s .0001
00:00008956 2401            	  2541: 	move.l d1,d2
00:00008958 4E75            	  2542: 	rts
                            	  2543: .0001:
00:0000895A 0C040057        	  2544: 	cmpi.b #'W',d4
00:0000895E 6606            	  2545: 	bne.s .0002
00:00008960 4842            	  2546: 	swap d2
00:00008962 3401            	  2547: 	move.w d1,d2
00:00008964 4E75            	  2548: 	rts
                            	  2549: .0002:
00:00008966 E18A            	  2550: 	lsl.l #8,d2
00:00008968 1401            	  2551: 	move.b d1,d2
00:0000896A 4E75            	  2552: 	rts
                            	  2553: 	
                            	  2554: cmdEditMemory:
00:0000896C 61B6            	  2555: 	bsr GetSzChar
00:0000896E 619C            	  2556: 	bsr ignBlanks
00:00008970 61000628        	  2557: 	bsr	GetHexNumber
00:00008974 2241            	  2558: 	move.l d1,a1
                            	  2559: edtmem1:
00:00008976 0C04004C        	  2560: 	cmpi.b #'L',d4
00:0000897A 6610            	  2561: 	bne.s .0004
00:0000897C 7400            	  2562: 	clr.l	d2
00:0000897E 61CA            	  2563: 	bsr EditMemHelper
00:00008980 22C2            	  2564: 	move.l d2,(a1)+
00:00008982 7400            	  2565: 	clr.l	d2
00:00008984 61C4            	  2566: 	bsr EditMemHelper
00:00008986 22C2            	  2567: 	move.l d2,(a1)+
00:00008988 6000F7D2        	  2568: 	bra Monitor
                            	  2569: .0004:
00:0000898C 0C040057        	  2570: 	cmpi.b #'W',d4
00:00008990 6614            	  2571: 	bne.s .0005
00:00008992 7400            	  2572: 	clr.l	d2
00:00008994 61B4            	  2573: 	bsr EditMemHelper
00:00008996 61B2            	  2574: 	bsr EditMemHelper
                            	  2575: ;	swap d2
00:00008998 22C2            	  2576: 	move.l d2,(a1)+
00:0000899A 7400            	  2577: 	clr.l	d2
00:0000899C 61AC            	  2578: 	bsr EditMemHelper
00:0000899E 61AA            	  2579: 	bsr EditMemHelper
                            	  2580: ;	swap d2
00:000089A0 22C2            	  2581: 	move.l d2,(a1)+
00:000089A2 6000F7B8        	  2582: 	bra Monitor
                            	  2583: .0005:
00:000089A6 7400            	  2584: 	clr.l	d2
00:000089A8 61A0            	  2585: 	bsr EditMemHelper
00:000089AA 619E            	  2586: 	bsr EditMemHelper
00:000089AC 619C            	  2587: 	bsr EditMemHelper
00:000089AE 619A            	  2588: 	bsr EditMemHelper
00:000089B0 C342            	  2589: 	exg d1,d2
                            	  2590: ;	bsr rbo
00:000089B2 22C1            	  2591: 	move.l d1,(a1)+
                            	  2592: ;	bsr rbo
00:000089B4 C342            	  2593: 	exg d1,d2
00:000089B6 7400            	  2594: 	clr.l	d2
00:000089B8 6190            	  2595: 	bsr EditMemHelper
00:000089BA 618E            	  2596: 	bsr EditMemHelper
00:000089BC 618C            	  2597: 	bsr EditMemHelper
00:000089BE 618A            	  2598: 	bsr EditMemHelper
00:000089C0 C342            	  2599: 	exg d1,d2
                            	  2600: ;	bsr rbo
00:000089C2 22C1            	  2601: 	move.l d1,(a1)+
                            	  2602: ;	bsr rbo
00:000089C4 C342            	  2603: 	exg d1,d2
00:000089C6 6000F794        	  2604: 	bra Monitor
                            	  2605: 
                            	  2606: ;------------------------------------------------------------------------------
                            	  2607: ; Execute code at the specified address.
                            	  2608: ;------------------------------------------------------------------------------
                            	  2609: 
                            	  2610: cmdJump:
                            	  2611: ExecuteCode:
00:000089CA 6100FF40        	  2612: 	bsr	ignBlanks
00:000089CE 610005CA        	  2613: 	bsr	GetHexNumber
00:000089D2 2041            	  2614: 	move.l d1,a0
00:000089D4 4E90            	  2615: 	jsr	(a0)
00:000089D6 6000F784        	  2616: 	bra Monitor
                            	  2617: 
                            	  2618: cmdGrDemo:
00:000089DA 223C00001555    	  2619: 	move.l #$00001555,d1		; 16 bpp
00:000089E0 7E06            	  2620: 	moveq #6,d7							; framebuf device
00:000089E2 7C21            	  2621: 	moveq #DEV_SET_COLOR_DEPTH,d6
00:000089E4 4E40            	  2622: 	trap #0
00:000089E6 7E07            	  2623: 	moveq #7,d7							; same for graphics accelerator device
00:000089E8 4E40            	  2624: 	trap #0
00:000089EA 223C00110001    	  2625: 	move.l #$00110001,d1		; enable, scale 1 clocks/scanlines per pixel, page zero
00:000089F0 61000EE2        	  2626: 	bsr rbo
                            	  2627: ;	move.l d1,FRAMEBUF+FRAMEBUF_CTRL
00:000089F4 223C00F00031    	  2628: 	move.l #$0F00031,d1		; burst length of 50, interval of F00h
00:000089FA 61000ED8        	  2629: 	bsr rbo
00:000089FE 23C1FD200004    	  2630: 	move.l d1,FRAMEBUF+FRAMEBUF_CTRL+4		
00:00008A04 7E06            	  2631: 	moveq #6,d7							; framebuf device
00:00008A06 7C20            	  2632: 	moveq #DEV_SET_DIMEN,d6
00:00008A08 7000            	  2633: 	moveq #0,d0
00:00008A0A 223C00000320    	  2634: 	move.l #VIDEO_X,d1
00:00008A10 243C00000258    	  2635: 	move.l #VIDEO_Y,d2
00:00008A16 7600            	  2636: 	move.l #0,d3
00:00008A18 4E40            	  2637: 	trap #0
00:00008A1A 7E07            	  2638: 	moveq #7,d7							; same for graphics accelerator device
00:00008A1C 4E40            	  2639: 	trap #0
00:00008A1E 7E06            	  2640: 	moveq #6,d7
00:00008A20 7002            	  2641: 	moveq #2,d0							; set window dimensions
00:00008A22 4E40            	  2642: 	trap #0
                            	  2643: 	; Set destination buffer #0
00:00008A24 7E07            	  2644: 	moveq #7,d7
00:00008A26 7C22            	  2645: 	moveq #DEV_SET_DESTBUF,d6	; write to buffer 0
00:00008A28 7200            	  2646: 	moveq #0,d1
00:00008A2A 4E40            	  2647: 	trap #0
                            	  2648: 	; Clear the screen
00:00008A2C 7C0C            	  2649: 	moveq #DEV_CLEAR,d6
00:00008A2E 4E40            	  2650: 	trap #0
                            	  2651: 	; Now display the clear screen
00:00008A30 7E06            	  2652: 	moveq #6,d7
00:00008A32 7C23            	  2653: 	moveq #DEV_SET_DISPBUF,d6
00:00008A34 7200            	  2654: 	moveq #0,d1							; display buffer 0
00:00008A36 4E40            	  2655: 	trap #0
                            	  2656: 
                            	  2657: ;	moveq #0,d1
                            	  2658: ;	moveq #0,d2
                            	  2659: ;	move.l #1920,d3
                            	  2660: ;	move.l #1080,d4
                            	  2661: ;	bsr gfxaccel_clip_rect
                            	  2662: 	; Draw two diagonal white lines
00:00008A38 263C00000258    	  2663: 	move.l #VIDEO_Y,d3
00:00008A3E 287C40000000    	  2664: 	move.l #$40000000,a4
                            	  2665: .0002:
00:00008A44 243CFF7FFF7F    	  2666: 	move.l #$FF7FFF7F,d2	; white
00:00008A4A 3882            	  2667: 	move.w d2,(a4)
00:00008A4C 49EC0C84        	  2668: 	add.l #VIDEO_X*4+4,a4
00:00008A50 51CBFFF2        	  2669: 	dbra d3,.0002
00:00008A54 263C00000258    	  2670: 	move.l #VIDEO_Y,d3
00:00008A5A 287C40000640    	  2671: 	move.l #$40000000+VIDEO_X*2,a4
                            	  2672: .0007:
00:00008A60 3882            	  2673: 	move.w d2,(a4)
00:00008A62 49EC0C7C        	  2674: 	add.l #VIDEO_X*4-4,a4
00:00008A66 51CBFFF8        	  2675: 	dbra d3,.0007
00:00008A6A 6000F6F0        	  2676: 	bra Monitor
                            	  2677: 
                            	  2678: ;	bra Monitor
                            	  2679: plot_rand_points:
00:00008A6E 223C7F127F12    	  2680: 	move.l #$7F127F12,d1
00:00008A74 61000E5E        	  2681: 	bsr rbo
00:00008A78 61009650        	  2682: 	bsr gfxaccel_set_color
00:00008A7C 2A3C00002710    	  2683: 	move.l #10000,d5
                            	  2684: .0005:
00:00008A82 287C40000000    	  2685: 	move.l #$40000000,a4
00:00008A88 61009A2A        	  2686: 	bsr RandGetNum
00:00008A8C 2801            	  2687: 	move.l d1,d4
00:00008A8E 61009A24        	  2688: 	bsr RandGetNum
00:00008A92 2401            	  2689: 	move.l d1,d2
00:00008A94 0282000000FF    	  2690: 	andi.l #$ff,d2
00:00008A9A 61009A18        	  2691: 	bsr RandGetNum
00:00008A9E 0281000001FF    	  2692: 	andi.l #$1ff,d1
00:00008AA4 C4FC03C0        	  2693: 	mulu #960,d2
00:00008AA8 D481            	  2694: 	add.l d1,d2
00:00008AAA D481            	  2695: 	add.l d1,d2
00:00008AAC D9C2            	  2696: 	add.l d2,a4
00:00008AAE 3884            	  2697: 	move.w d4,(a4)				; plot point
00:00008AB0 51CDFFD0        	  2698: 	dbra d5,.0005
00:00008AB4 6000F6A6        	  2699: 	bra Monitor
                            	  2700: 
                            	  2701: ;clear_graphics_screen:
                            	  2702: ;	move.l #0,d1
                            	  2703: ;	moveq #6,d7
                            	  2704: ;	moveq #DEV_SET_COLOR,d6		; set color in frame buffer
                            	  2705: ;	trap #0
                            	  2706: ;	moveq #7,d7								; and in graphics accelerator
                            	  2707: ;	trap #0
                            	  2708: ;	moveq #6,d7								; clear frame buffer
                            	  2709: ;	moveq #DEV_CLEAR,d6
                            	  2710: ;	trap #0
                            	  2711: ;	moveq #DEV_SWAPBUF,d6			; and display it
                            	  2712: ;	trap #0
                            	  2713: ;	rts
                            	  2714: 
                            	  2715: ;	move.l #0,d1
                            	  2716: ;	bsr gfxaccel_set_color
                            	  2717: ;	move.l #0,d1
                            	  2718: ;	move.l #0,d2
                            	  2719: ;	move.l #1920<<16,d3
                            	  2720: ;	move.l #1080<<16,d4
                            	  2721: ;	bsr gfxaccel_draw_rectangle
00:00008AB8 2A3C00075300    	  2722: 	move.l #VIDEO_X*VIDEO_Y,d5		; compute number of strips to write
00:00008ABE E68D            	  2723: 	lsr.l #3,d5						; 8 pixels per strip
                            	  2724: ;	move.l framebuf_dcb+DCB_OUTBUFPTR,a4
00:00008AC0 287C40000000    	  2725: 	move.l #$40000000,a4
00:00008AC6 42B97FFFFFF8    	  2726: 	move.l #0,$7FFFFFF8		; burst length of zero
00:00008ACC 6002            	  2727: 	bra.s .0001
                            	  2728: .0002:
00:00008ACE 4845            	  2729: 	swap d5
                            	  2730: .0001:
00:00008AD0 220C            	  2731: 	move.l a4,d1
00:00008AD2 61000E00        	  2732: 	bsr rbo
00:00008AD6 23C17FFFFFF4    	  2733: 	move.l d1,$7FFFFFF4		; target address
00:00008ADC 42B97FFFFFFC    	  2734: 	move.l #0,$7FFFFFFC		; value to write
00:00008AE2 49EC0020        	  2735: 	lea.l 32(a4),a4
00:00008AE6 51CDFFE8        	  2736: 	dbra d5,.0001
                            	  2737: ;	swap d5
                            	  2738: ;	dbra d5,.0002
00:00008AEA 4E75            	  2739: 	rts
                            	  2740: 
                            	  2741: clear_graphics_screen2:
                            	  2742: ;	move.l #0,d1
                            	  2743: ;	bsr gfxaccel_set_color
                            	  2744: ;	move.l #0,d1
                            	  2745: ;	move.l #0,d2
                            	  2746: ;	move.l #1920<<16,d3
                            	  2747: ;	move.l #1080<<16,d4
                            	  2748: ;	bsr gfxaccel_draw_rectangle
00:00008AEC 2A3C00075300    	  2749: 	move.l #VIDEO_X*VIDEO_Y,d5		; compute number of strips to write
00:00008AF2 E68D            	  2750: 	lsr.l #3,d5						; 8 pixels per strip
00:00008AF4 E88D            	  2751: 	lsr.l #4,d5						; and burst writing 16 strips at once
00:00008AF6 287900040D54    	  2752: 	move.l framebuf_dcb+DCB_OUTBUFPTR,a4
00:00008AFC 23FC0000000F7FFF	  2753: 	move.l #15,$7FFFFFF8		; burst length = 16
00:00008B04 FFF8
00:00008B06 6002            	  2754: 	bra.s .0001
                            	  2755: .0002:
00:00008B08 4845            	  2756: 	swap d5
                            	  2757: .0001:
00:00008B0A 220C            	  2758: 	move.l a4,d1
00:00008B0C 61000DC6        	  2759: 	bsr rbo
00:00008B10 23C17FFFFFF4    	  2760: 	move.l d1,$7FFFFFF4		; target address
00:00008B16 720F            	  2761: 	moveq #15,d1
00:00008B18 61000DBA        	  2762: 	bsr rbo
00:00008B1C 23C17FFFFFF8    	  2763: 	move.l d1,$7FFFFFF8	; burst length = 16
00:00008B22 42B97FFFFFFC    	  2764: 	move.l #0,$7FFFFFFC		; value to write
00:00008B28 49EC0200        	  2765: 	lea.l 32*16(a4),a4
00:00008B2C 51CDFFDC        	  2766: 	dbra d5,.0001
                            	  2767: ;	swap d5
                            	  2768: ;	dbra d5,.0002
00:00008B30 6000F62A        	  2769: 	bra Monitor
                            	  2770: 
                            	  2771: wait1ms:
00:00008B34 48E7C000        	  2772: 	movem.l d0/d1,-(a7)
00:00008B38 4E7A0FF0        	  2773: 	movec tick,d0
00:00008B3C D0BC000F4240    	  2774: 	add.l #1000000,d0
00:00008B42 0280FFFFF000    	  2775: 	andi.l #$FFFFF000,d0
                            	  2776: .0001
00:00008B48 4E7A1FF0        	  2777: 	movec tick,d1
00:00008B4C 0281FFFFF000    	  2778: 	andi.l #$FFFFF000,d1
00:00008B52 B280            	  2779: 	cmp.l d0,d1
00:00008B54 66F2            	  2780: 	bne.s .0001
00:00008B56 4CDF0003        	  2781: 	movem.l (a7)+,d0/d1
00:00008B5A 4E75            	  2782: 	rts
                            	  2783: 
                            	  2784: white_rect:
00:00008B5C 72FF            	  2785: 	move.l #$FFFFFFFF,d1
00:00008B5E 6100956A        	  2786: 	bsr gfxaccel_set_color
00:00008B62 72644841        	  2787: 	move.l #100<<16,d1
00:00008B66 243C012C0000    	  2788: 	move.l #300<<16,d2
00:00008B6C 263C00FA0000    	  2789: 	move.l #250<<16,d3
00:00008B72 283C02260000    	  2790: 	move.l #550<<16,d4
00:00008B78 610096D2        	  2791: 	bsr gfxaccel_draw_rectangle
00:00008B7C 6000F5DE        	  2792: 	bra Monitor
                            	  2793: 
                            	  2794: rand_points:
00:00008B80 2A3C00007530    	  2795: 	move.l #30000,d5
                            	  2796: .0004:
00:00008B86 6100992C        	  2797: 	bsr RandGetNum
00:00008B8A 6100953E        	  2798: 	bsr gfxaccel_set_color
00:00008B8E 7600            	  2799: 	move.l #0,d3					; Z
00:00008B90 61009922        	  2800: 	bsr RandGetNum
00:00008B94 2401            	  2801: 	move.l d1,d2
                            	  2802: ;	divu #VIDEO_Y,d2			; Y
00:00008B96 0282000001FF    	  2803: 	andi.l #511,d2
00:00008B9C 4842            	  2804: 	swap d2
00:00008B9E 61009914        	  2805: 	bsr RandGetNum
                            	  2806: ;	divu #VIDEO_X,d1
00:00008BA2 0281000001FF    	  2807: 	andi.l #511,d1
00:00008BA8 4841            	  2808: 	swap d1
00:00008BAA 610095E6        	  2809: 	bsr gfxaccel_plot_point
00:00008BAE 51CDFFD6        	  2810: 	dbra d5,.0004
00:00008BB2 6000F5A8        	  2811: 	bra Monitor
                            	  2812: 
                            	  2813: rand_lines:
00:00008BB6 2A3C00007530    	  2814: 	move.l #30000,d5
                            	  2815: .0001:
                            	  2816: .0006:
00:00008BBC 4EB9000008C6    	  2817: 	bsr CheckForCtrlC
00:00008BC2 610098F0        	  2818: 	bsr RandGetNum
00:00008BC6 61009502        	  2819: 	bsr gfxaccel_set_color
00:00008BCA F23C410000000320	  2820: 	fmove.l #800,fp2
00:00008BD2 F23C418000000258	  2821: 	fmove.l #600,fp3
00:00008BDA 61009962        	  2822: 	bsr _GetRand
00:00008BDE F2000CA3        	  2823: 	fmul fp3,fp1
00:00008BE2 F2046080        	  2824: 	fmove.l fp1,d4
00:00008BE6 61009956        	  2825: 	bsr _GetRand
00:00008BEA F20008A3        	  2826: 	fmul fp2,fp1
00:00008BEE F2036080        	  2827: 	fmove.l fp1,d3
00:00008BF2 6100994A        	  2828: 	bsr _GetRand
00:00008BF6 F2000CA3        	  2829: 	fmul fp3,fp1
00:00008BFA F2026080        	  2830: 	fmove.l fp1,d2
00:00008BFE 6100993E        	  2831: 	bsr _GetRand
00:00008C02 F20008A3        	  2832: 	fmul fp2,fp1
00:00008C06 F2016080        	  2833: 	fmove.l fp1,d1
00:00008C0A 610095D8        	  2834: 	bsr gfxaccel_draw_line
00:00008C0E 51CDFFAC        	  2835: 	dbra d5,.0001
00:00008C12 6000F548        	  2836: 	bra Monitor
                            	  2837: 
                            	  2838: rand_rect:
00:00008C16 2A3C00007530    	  2839: 	move.l #30000,d5
                            	  2840: .0003:
                            	  2841: .0006:
00:00008C1C 4EB9000008C6    	  2842: 	bsr CheckForCtrlC
00:00008C22 61009890        	  2843: 	bsr RandGetNum
00:00008C26 610094A2        	  2844: 	bsr gfxaccel_set_color
00:00008C2A F23C410000000320	  2845: 	fmove.l #800,fp2
00:00008C32 F23C418000000258	  2846: 	fmove.l #600,fp3
00:00008C3A 61009902        	  2847: 	bsr _GetRand
00:00008C3E F2000CA3        	  2848: 	fmul fp3,fp1
00:00008C42 F2046080        	  2849: 	fmove.l fp1,d4
00:00008C46 610098F6        	  2850: 	bsr _GetRand
00:00008C4A F20008A3        	  2851: 	fmul fp2,fp1
00:00008C4E F2036080        	  2852: 	fmove.l fp1,d3
00:00008C52 610098EA        	  2853: 	bsr _GetRand
00:00008C56 F2000CA3        	  2854: 	fmul fp3,fp1
00:00008C5A F2026080        	  2855: 	fmove.l fp1,d2
00:00008C5E 610098DE        	  2856: 	bsr _GetRand
00:00008C62 F20008A3        	  2857: 	fmul fp2,fp1
00:00008C66 F2016080        	  2858: 	fmove.l fp1,d1
00:00008C6A 610095E0        	  2859: 	bsr gfxaccel_draw_rectangle
00:00008C6E 51CDFFAC        	  2860: 	dbra d5,.0003
00:00008C72 6000F4E8        	  2861: 	bra Monitor
                            	  2862: 
                            	  2863: rand_rect2:
00:00008C76 2A3C00002710    	  2864: 	move.l #10000,d5
                            	  2865: .0003:
                            	  2866: .0006:
00:00008C7C 4EB9000008C6    	  2867: 	bsr CheckForCtrlC
00:00008C82 61009830        	  2868: 	bsr RandGetNum
00:00008C86 61009442        	  2869: 	bsr gfxaccel_set_color
00:00008C8A 61009828        	  2870: 	bsr RandGetNum
00:00008C8E 2801            	  2871: 	move.l d1,d4
00:00008C90 88FC0258        	  2872: 	divu #VIDEO_Y,d4
00:00008C94 6100981E        	  2873: 	bsr RandGetNum
00:00008C98 2601            	  2874: 	move.l d1,d3
00:00008C9A 86FC0320        	  2875: 	divu #VIDEO_X,d3
00:00008C9E 61009814        	  2876: 	bsr RandGetNum
00:00008CA2 2401            	  2877: 	move.l d1,d2
00:00008CA4 84FC0258        	  2878: 	divu #VIDEO_Y,d2
00:00008CA8 6100980A        	  2879: 	bsr RandGetNum
00:00008CAC 82FC0320        	  2880: 	divu #VIDEO_X,d1
00:00008CB0 6100959A        	  2881: 	bsr gfxaccel_draw_rectangle
00:00008CB4 6100FE7E        	  2882: 	bsr wait1ms
00:00008CB8 51CDFFC2        	  2883: 	dbra d5,.0003
00:00008CBC 6000F49E        	  2884: 	bra Monitor
                            	  2885: 
                            	  2886: rand_triangle:
00:00008CC0 2E3C00007530    	  2887: 	move.l #30000,d7
                            	  2888: .0006:
00:00008CC6 4EB9000008C6    	  2889: 	bsr CheckForCtrlC
00:00008CCC 610097E6        	  2890: 	bsr RandGetNum
00:00008CD0 610093F8        	  2891: 	bsr gfxaccel_set_color
00:00008CD4 F23C410000000320	  2892: 	fmove.l #800,fp2
00:00008CDC F23C418000000258	  2893: 	fmove.l #600,fp3
00:00008CE4 61009858        	  2894: 	bsr _GetRand
00:00008CE8 F2000CA3        	  2895: 	fmul fp3,fp1
00:00008CEC F2006080        	  2896: 	fmove.l fp1,d0
00:00008CF0 6100984C        	  2897: 	bsr _GetRand
00:00008CF4 F20008A3        	  2898: 	fmul fp2,fp1
00:00008CF8 F2056080        	  2899: 	fmove.l fp1,d5
00:00008CFC 61009840        	  2900: 	bsr _GetRand
00:00008D00 F2000CA3        	  2901: 	fmul fp3,fp1
00:00008D04 F2046080        	  2902: 	fmove.l fp1,d4
00:00008D08 61009834        	  2903: 	bsr _GetRand
00:00008D0C F20008A3        	  2904: 	fmul fp2,fp1
00:00008D10 F2036080        	  2905: 	fmove.l fp1,d3
00:00008D14 61009828        	  2906: 	bsr _GetRand
00:00008D18 F2000CA3        	  2907: 	fmul fp3,fp1
00:00008D1C F2026080        	  2908: 	fmove.l fp1,d2
00:00008D20 6100981C        	  2909: 	bsr _GetRand
00:00008D24 F20008A3        	  2910: 	fmul fp2,fp1
00:00008D28 F2016080        	  2911: 	fmove.l fp1,d1
00:00008D2C 61009586        	  2912: 	bsr gfxaccel_draw_triangle
00:00008D30 51CFFF94        	  2913: 	dbra d7,.0006
00:00008D34 6000F426        	  2914: 	bra Monitor
                            	  2915: 
                            	  2916: rand_curve:
00:00008D38 2E3C00002710    	  2917: 	move.l #10000,d7
                            	  2918: .0006:
00:00008D3E 4EB9000008C6    	  2919: 	bsr CheckForCtrlC
00:00008D44 6100976E        	  2920: 	bsr RandGetNum
00:00008D48 61009380        	  2921: 	bsr gfxaccel_set_color
00:00008D4C F23C410000000320	  2922: 	fmove.l #800,fp2
00:00008D54 F23C418000000258	  2923: 	fmove.l #600,fp3
00:00008D5C 610097E0        	  2924: 	bsr _GetRand
00:00008D60 F2000CA3        	  2925: 	fmul fp3,fp1
00:00008D64 F2006080        	  2926: 	fmove.l fp1,d0
00:00008D68 610097D4        	  2927: 	bsr _GetRand
00:00008D6C F20008A3        	  2928: 	fmul fp2,fp1
00:00008D70 F2056080        	  2929: 	fmove.l fp1,d5
00:00008D74 610097C8        	  2930: 	bsr _GetRand
00:00008D78 F2000CA3        	  2931: 	fmul fp3,fp1
00:00008D7C F2046080        	  2932: 	fmove.l fp1,d4
00:00008D80 610097BC        	  2933: 	bsr _GetRand
00:00008D84 F20008A3        	  2934: 	fmul fp2,fp1
00:00008D88 F2036080        	  2935: 	fmove.l fp1,d3
00:00008D8C 610097B0        	  2936: 	bsr _GetRand
00:00008D90 F2000CA3        	  2937: 	fmul fp3,fp1
00:00008D94 F2026080        	  2938: 	fmove.l fp1,d2
00:00008D98 610097A4        	  2939: 	bsr _GetRand
00:00008D9C F20008A3        	  2940: 	fmul fp2,fp1
00:00008DA0 F2016080        	  2941: 	fmove.l fp1,d1
00:00008DA4 61009596        	  2942: 	bsr gfxaccel_draw_curve
00:00008DA8 51CFFF94        	  2943: 	dbra d7,.0006
00:00008DAC 6000F3AE        	  2944: 	bra Monitor
                            	  2945: 
                            	  2946: ;------------------------------------------------------------------------------
                            	  2947: ; Disassemble code
                            	  2948: ; DI 1000
                            	  2949: ;------------------------------------------------------------------------------
                            	  2950: ;        CALLING SEQUENCE:
                            	  2951: ;   D0,D1,D2 = CODE TO BE DISASSEMBLED
                            	  2952: ;   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
                            	  2953: ;   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
                            	  2954: ;        JSR       DCODE68K
                            	  2955: ;
                            	  2956: ;        RETURN:
                            	  2957: ;   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
                            	  2958: ;   A5 = POINTER TO LINE AS DISASSEMBLED
                            	  2959: ;   A6 = POINTER TO END OF LINE
                            	  2960: 
                            	  2961: 
                            	  2962: cmdDisassemble:
00:00008DB0 6100FB5A        	  2963: 	bsr ignBlanks
00:00008DB4 610001E4        	  2964: 	bsr GetHexNumber
00:00008DB8 6700F3A2        	  2965: 	beq Monitor
00:00008DBC 363C0014        	  2966: 	move.w #20,d3			; number of lines to disassemble
                            	  2967: .0002:
00:00008DC0 2F03            	  2968: 	move.l d3,-(a7)
00:00008DC2 2041            	  2969: 	move.l d1,a0
00:00008DC4 2841            	  2970: 	move.l d1,a4			; a4 = PC of code
00:00008DC6 3018            	  2971: 	move.w (a0)+,d0		; d0 to d2 = bytes of instruction to decode
00:00008DC8 4840            	  2972: 	swap d0
00:00008DCA 3018            	  2973: 	move.w (a0)+,d0
00:00008DCC 3218            	  2974: 	move.w (a0)+,d1		; d0 to d2 = bytes of instruction to decode
00:00008DCE 4841            	  2975: 	swap d1
00:00008DD0 3218            	  2976: 	move.w (a0)+,d1
00:00008DD2 3418            	  2977: 	move.w (a0)+,d2		; d0 to d2 = bytes of instruction to decode
00:00008DD4 4842            	  2978: 	swap d2
00:00008DD6 3418            	  2979: 	move.w (a0)+,d2
00:00008DD8 4BF900040800    	  2980: 	lea _dasmbuf,a5		; a5 = pointer to disassembly buffer
00:00008DDE 61001D12        	  2981: 	bsr DCODE68K	
00:00008DE2 383C003E        	  2982: 	move.w #62,d4
                            	  2983: .0001:
00:00008DE6 121D            	  2984: 	move.b (a5)+,d1
00:00008DE8 6100120E        	  2985: 	bsr OutputChar
00:00008DEC 51CCFFF8        	  2986: 	dbra d4,.0001
00:00008DF0 6100ED00        	  2987: 	bsr CRLF
00:00008DF4 220C            	  2988: 	move.l a4,d1
00:00008DF6 261F            	  2989: 	move.l (a7)+,d3
00:00008DF8 51CBFFC6        	  2990: 	dbra d3,.0002
00:00008DFC 6000F35E        	  2991: 	bra Monitor
                            	  2992: 	
                            	  2993: ;------------------------------------------------------------------------------
                            	  2994: ; Do a memory dump of the requested location.
                            	  2995: ; DB 0800 0850
                            	  2996: ;------------------------------------------------------------------------------
                            	  2997: 
                            	  2998: cmdDumpMemory:
00:00008E00 6100FB22        	  2999: 	bsr GetSzChar
00:00008E04 6100FB06        	  3000: 	bsr ignBlanks
00:00008E08 61000190        	  3001: 	bsr	GetHexNumber
00:00008E0C 6700F34E        	  3002: 	beq	Monitor					; was there a number ? no, other garbage, just ignore
00:00008E10 2601            	  3003: 	move.l d1,d3				; save off start of range
00:00008E12 6100FAF8        	  3004: 	bsr	ignBlanks
00:00008E16 61000182        	  3005: 	bsr	GetHexNumber
00:00008E1A 6608            	  3006: 	bne.s	DumpMem1
00:00008E1C 2203            	  3007: 	move.l d3,d1
00:00008E1E 068100000040    	  3008: 	addi.l #64,d1				;	no end specified, just dump 64 bytes
                            	  3009: DumpMem1:
00:00008E24 2043            	  3010: 	move.l d3,a0
00:00008E26 2241            	  3011: 	move.l d1,a1
00:00008E28 6100ECC8        	  3012: 	bsr	CRLF
                            	  3013: .0001:
00:00008E2C B3C8            	  3014: 	cmpa.l a0,a1
00:00008E2E 6300F32C        	  3015: 	bls	Monitor
00:00008E32 6102            	  3016: 	bsr	DisplayMem
00:00008E34 60F6            	  3017: 	bra.s	.0001
                            	  3018: 
                            	  3019: ;------------------------------------------------------------------------------
                            	  3020: ; Display memory dump in a format suitable for edit.
                            	  3021: ;
                            	  3022: ;	EB 12345678 00 11 22 33 44 55 66 77  "........"
                            	  3023: ;
                            	  3024: ; Modifies:
                            	  3025: ;		d1,d2,a0
                            	  3026: ;------------------------------------------------------------------------------
                            	  3027: 	
                            	  3028: DisplayMem:
00:00008E36 123C0045        	  3029: 	move.b #'E',d1
00:00008E3A 610011BC        	  3030: 	bsr	OutputChar
00:00008E3E 1204            	  3031: 	move.b d4,d1
00:00008E40 610011B6        	  3032: 	bsr OutputChar
00:00008E44 61000726        	  3033: 	bsr DisplaySpace
00:00008E48 2208            	  3034: 	move.l a0,d1
00:00008E4A 61000728        	  3035: 	bsr	DisplayTetra
00:00008E4E 7407            	  3036: 	moveq #7,d2						; assume bytes
00:00008E50 0C04004C        	  3037: 	cmpi.b #'L',d4
00:00008E54 6604            	  3038: 	bne.s .0004
00:00008E56 7401            	  3039: 	moveq	#1,d2
00:00008E58 6008            	  3040: 	bra.s dspmem1
                            	  3041: .0004:
00:00008E5A 0C040057        	  3042: 	cmpi.b #'W',d4
00:00008E5E 6602            	  3043: 	bne.s dspmem1
00:00008E60 7403            	  3044: 	moveq #3,d2
                            	  3045: dspmem1:
00:00008E62 123C0020        	  3046: 	move.b #' ',d1
00:00008E66 61001190        	  3047: 	bsr	OutputChar
00:00008E6A 0C04004C        	  3048: 	cmpi.b #'L',d4
00:00008E6E 6608            	  3049: 	bne.s .0005
00:00008E70 2218            	  3050: 	move.l (a0)+,d1
00:00008E72 61000700        	  3051: 	bsr	DisplayTetra
00:00008E76 6014            	  3052: 	bra.s .0006
                            	  3053: .0005:
00:00008E78 0C040057        	  3054: 	cmpi.b #'W',d4
00:00008E7C 6608            	  3055: 	bne.s .0007
00:00008E7E 3218            	  3056: 	move.w (a0)+,d1
00:00008E80 610006F8        	  3057: 	bsr	DisplayWyde
00:00008E84 6006            	  3058: 	bra.s .0006
                            	  3059: .0007:
00:00008E86 1218            	  3060: 	move.b (a0)+,d1
00:00008E88 610006F6        	  3061: 	bsr DisplayByte
                            	  3062: .0006:
00:00008E8C 51CAFFD4        	  3063: 	dbra d2,dspmem1
00:00008E90 610006C8        	  3064: 	bsr	DisplayTwoSpaces
00:00008E94 123C0022        	  3065: 	move.b #34,d1
00:00008E98 6100115E        	  3066: 	bsr	OutputChar
00:00008E9C 5188            	  3067: 	lea	-8(a0),a0
00:00008E9E 7407            	  3068: 	moveq	#7,d2
                            	  3069: .0002:
00:00008EA0 1218            	  3070: 	move.b (a0)+,d1
00:00008EA2 B23C0020        	  3071: 	cmp.b	#' ',d1
00:00008EA6 6506            	  3072: 	blo.s	.0003
00:00008EA8 B23C007F        	  3073: 	cmp.b	#127,d1
00:00008EAC 6304            	  3074: 	bls.s	.0001
                            	  3075: .0003:
00:00008EAE 123C002E        	  3076: 	move.b #'.',d1
                            	  3077: .0001:
00:00008EB2 61001144        	  3078: 	bsr	OutputChar
00:00008EB6 51CAFFE8        	  3079: 	dbra d2,.0002
00:00008EBA 123C0022        	  3080: 	move.b #34,d1
00:00008EBE 61001138        	  3081: 	bsr	OutputChar
00:00008EC2 4EB9000008C6    	  3082: 	bsr	CheckForCtrlC
00:00008EC8 6000EC28        	  3083: 	bra	CRLF
                            	  3084: 
                            	  3085: ;------------------------------------------------------------------------------
                            	  3086: ; Dump Registers
                            	  3087: ;    The dump is in a format that allows the register value to be edited.
                            	  3088: ;
                            	  3089: ; RegD0 12345678
                            	  3090: ; RegD1 77777777
                            	  3091: ;	... etc
                            	  3092: ;------------------------------------------------------------------------------
                            	  3093: 
                            	  3094: cmdDumpRegs:
00:00008ECC 6100EC24        	  3095: 	bsr	CRLF
00:00008ED0 363C000F        	  3096: 	move.w #15,d3						; number of registers-1
00:00008ED4 41FA007A        	  3097: 	lea	msg_reglist,a0			;
00:00008ED8 43FA0072        	  3098: 	lea	msg_regs,a1
00:00008EDC 45F900040100    	  3099: 	lea	Regsave,a2					; a2 points to register save area
                            	  3100: .0001:
00:00008EE2 6100EC28        	  3101: 	bsr			DisplayString
00:00008EE6 1218            	  3102: 	move.b	(a0)+,d1
00:00008EE8 6100110E        	  3103: 	bsr			OutputChar
00:00008EEC 1218            	  3104: 	move.b	(a0)+,d1
00:00008EEE 61001108        	  3105: 	bsr			OutputChar
00:00008EF2 61000678        	  3106: 	bsr			DisplaySpace
00:00008EF6 221A            	  3107: 	move.l	(a2)+,d1
00:00008EF8 6100067A        	  3108: 	bsr			DisplayTetra
00:00008EFC 6100EBF4        	  3109: 	bsr			CRLF
00:00008F00 51CBFFE0        	  3110: 	dbra		d3,.0001
00:00008F04 6100EC06        	  3111: 	bsr			DisplayString
00:00008F08 1218            	  3112: 	move.b	(a0)+,d1
00:00008F0A 610010EC        	  3113: 	bsr			OutputChar
00:00008F0E 1218            	  3114: 	move.b	(a0)+,d1
00:00008F10 610010E6        	  3115: 	bsr			OutputChar
00:00008F14 61000656        	  3116: 	bsr			DisplaySpace
00:00008F18 223900040144    	  3117: 	move.l	Regsave+$44,d1
00:00008F1E 61000654        	  3118: 	bsr			DisplayTetra
00:00008F22 6100EBCE        	  3119: 	bsr			CRLF
00:00008F26 6100EBE4        	  3120: 	bsr			DisplayString
00:00008F2A 1218            	  3121: 	move.b	(a0)+,d1
00:00008F2C 610010CA        	  3122: 	bsr			OutputChar
00:00008F30 1218            	  3123: 	move.b	(a0)+,d1
00:00008F32 610010C4        	  3124: 	bsr			OutputChar
00:00008F36 61000634        	  3125: 	bsr			DisplaySpace
00:00008F3A 323900040140    	  3126: 	move.w	Regsave+$40,d1
00:00008F40 61000638        	  3127: 	bsr			DisplayWyde
00:00008F44 6100EBAC        	  3128: 	bsr			CRLF
00:00008F48 6000F212        	  3129: 	bra			Monitor
                            	  3130: 
                            	  3131: msg_regs:
00:00008F4C 526567          	  3132: 	dc.b	"Reg",0
00:00008F4F 00
                            	  3133: msg_reglist:
00:00008F50 4430443144324433	  3134: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
00:00008F58 4434443544364437
00:00008F60 4130413141324133
00:00008F68 4134413541364137
00:00008F70 50435352
00:00008F74 00
                            	  3135: 
                            	  3136: 	align	1
                            	  3137: 
                            	  3138: ;------------------------------------------------------------------------------
                            	  3139: ;------------------------------------------------------------------------------
                            	  3140: 
                            	  3141: cmdTestSerialReceive:
                            	  3142: .0002:
00:00008F76 7024            	  3143: 	moveq		#36,d0				; serial get char from buffer
00:00008F78 4E4F            	  3144: 	trap		#15
                            	  3145: ;	bsr			SerialPeekCharDirect
00:00008F7A 4A41            	  3146: 	tst.w		d1
00:00008F7C 6B0A            	  3147: 	bmi.s		.0001
00:00008F7E 0C01001A        	  3148: 	cmpi.b	#CTRLZ,d1
00:00008F82 670C            	  3149: 	beq			.0003
00:00008F84 61001072        	  3150: 	bsr			OutputChar
                            	  3151: .0001:	
00:00008F88 4EB9000008C6    	  3152: 	bsr			CheckForCtrlC
00:00008F8E 60E6            	  3153: 	bra			.0002
                            	  3154: .0003:
00:00008F90 4EB9000006CC    	  3155: 	bsr			_KeybdInit
00:00008F96 6000F1C4        	  3156: 	bra			Monitor
                            	  3157: 
                            	  3158: ;------------------------------------------------------------------------------
                            	  3159: ; Get a hexidecimal number. Maximum of eight digits.
                            	  3160: ;
                            	  3161: ; Returns:
                            	  3162: ;		d0 = number of digits
                            	  3163: ;		d1 = value of number
                            	  3164: ;		zf = number of digits == 0
                            	  3165: ;------------------------------------------------------------------------------
                            	  3166: 
                            	  3167: GetHexNumber:
00:00008F9A 2F02            	  3168: 	move.l d2,-(a7)
00:00008F9C 7400            	  3169: 	clr.l	d2
00:00008F9E 7000            	  3170: 	moveq	#0,d0
                            	  3171: .0002
00:00008FA0 6100F1A6        	  3172: 	bsr	FromScreen
00:00008FA4 6100057A        	  3173: 	bsr	AsciiToHexNybble
00:00008FA8 0C0100FF        	  3174: 	cmpi.b #$ff,d1
00:00008FAC 6712            	  3175: 	beq.s	.0001
00:00008FAE E98A            	  3176: 	lsl.l	#4,d2
00:00008FB0 02810000000F    	  3177: 	andi.l #$0f,d1
00:00008FB6 8481            	  3178: 	or.l d1,d2
00:00008FB8 5240            	  3179: 	addq #1,d0
00:00008FBA 0C000008        	  3180: 	cmpi.b #8,d0
00:00008FBE 65E0            	  3181: 	blo.s	.0002
                            	  3182: .0001
00:00008FC0 2202            	  3183: 	move.l d2,d1
00:00008FC2 241F            	  3184: 	move.l (a7)+,d2
00:00008FC4 4A00            	  3185: 	tst.b	d0
00:00008FC6 4E75            	  3186: 	rts	
                            	  3187: 
                            	  3188: GetDecNumber:
00:00008FC8 48E73000        	  3189: 	movem.l d2/d3,-(a7)
00:00008FCC 7400            	  3190: 	clr.l d2
00:00008FCE 7000            	  3191: 	clr.l d0
                            	  3192: .0002
00:00008FD0 6100F176        	  3193: 	bsr FromScreen					; grab a character off the screen
00:00008FD4 6100054A        	  3194: 	bsr	AsciiToHexNybble		; convert to an ascii nybble
00:00008FD8 0C0100FF        	  3195: 	cmpi.b #$ff,d1
00:00008FDC 6718            	  3196: 	beq.s	.0001
00:00008FDE 02810000000F    	  3197: 	andi.l #$0F,d1					; d1 = 0 to 9
00:00008FE4 2602            	  3198: 	move.l d2,d3						; d3 = current number
00:00008FE6 D683            	  3199: 	add.l d3,d3							; d3*2
00:00008FE8 E78A            	  3200: 	lsl.l #3,d2							; current number * 8
00:00008FEA D483            	  3201: 	add.l d3,d2							; current number * 10
00:00008FEC D481            	  3202: 	add.l d1,d2							; add in new digit
00:00008FEE 5240            	  3203: 	addq #1,d0							; increment number of digits
00:00008FF0 0C000009        	  3204: 	cmpi.b #9,d0						; make sure 9 or fewer
00:00008FF4 65DA            	  3205: 	blo .0002
                            	  3206: .0001
00:00008FF6 2202            	  3207: 	move.l d2,d1						; return number in d1
00:00008FF8 4CDF000C        	  3208: 	movem.l (a7)+,d2/d3
00:00008FFC 4A00            	  3209: 	tst.b d0
00:00008FFE 4E75            	  3210: 	rts
                            	  3211: 	
                            	  3212: 	include "FloatToString.x68"

Source: "FloatToString.x68"
                            	     1: 	code
                            	     2: ;==============================================================================
                            	     3: ; Decimal-Floating point to string conversion routine.
                            	     4: ;
                            	     5: ; Modifies
                            	     6: ;		_fpWork work area
                            	     7: ; Register Usage:
                            	     8: ; 	fp0 = input decimal-float to convert
                            	     9: ;		fp1 = constant holder, 1.0, 10.0
                            	    10: ;		fp2 = 1.0e<fp0 exponent> value for conversion
                            	    11: ;		fp3 = holds digit value during significand conversion
                            	    12: ; 	a0 = pointer to string buffer, updated to point to NULL at end of string
                            	    13: ;		a1 = pointer to "Nan" or "Inf" message string
                            	    14: ;		d0 = temporary
                            	    15: ;		d1 = digit value during exponent, significand conversion
                            	    16: ; 	d6 = exponent
                            	    17: ;==============================================================================
                            	    18: 	align 4
00:00009000 25FF0000        	    19: _dfOne	dc.l $25ff0000,$00000000,$00000000
00:00009004 00000000
00:00009008 00000000
00:0000900C 2600C000        	    20: _dfTen	dc.l $2600C000,$00000000,$00000000
00:00009010 00000000
00:00009014 00000000
00:00009018 2606DDFA        	    21: _dfMil  dc.l $2606DDFA,$1C000000,$00000000
00:0000901C 1C000000
00:00009020 00000000
                            	    22: 
00:00009024 4E614E          	    23: _msgNan	dc.b "NaN",0
00:00009027 00
00:00009028 496E66          	    24: _msgInf dc.b "Inf",0
00:0000902B 00
                            	    25: 	even
                            	    26: 
                            	    27: ;------------------------------------------------------------------------------
                            	    28: ; Check for the special Nan and infinity values. Output the appropriate string.
                            	    29: ;
                            	    30: ; Modifies
                            	    31: ;		_fpWork area
                            	    32: ;		a0
                            	    33: ; Parameters:
                            	    34: ;		fp0 = dbl
                            	    35: ;------------------------------------------------------------------------------
                            	    36: 
                            	    37: _CheckNan:
00:0000902C 4E52FFF4        	    38: 	link a2,#-12
00:00009030 48D70201        	    39: 	movem.l d0/a1,(sp)
00:00009034 2F79000400980008	    40: 	move.l _canary,8(sp)
00:0000903C F239680000040600	    41: 	fmove.x fp0,_fpWork
00:00009044 103900040600    	    42: 	move.b _fpWork,d0				; get sign+combo
00:0000904A 0200007C        	    43: 	andi.b #$7C,d0					; mask for combo bits
00:0000904E 0C00007C        	    44: 	cmpi.b #$7C,d0					; is it the Nan combo?
00:00009052 6606            	    45: 	bne .notNan
00:00009054 43FAFFCE        	    46: 	lea _msgNan,a1					; output "Nan"
00:00009058 600A            	    47: 	bra .outStr
                            	    48: .notNan
00:0000905A 0C000078        	    49: 	cmpi.b #$78,d0					; is it infinity combo?
00:0000905E 661E            	    50: 	bne .notInf
00:00009060 43FAFFC6        	    51: 	lea _msgInf,a1
                            	    52: .outStr
00:00009064 10D9            	    53: 	move.b (a1)+,(a0)+			; output "Inf"
00:00009066 10D9            	    54: 	move.b (a1)+,(a0)+
00:00009068 10D9            	    55: 	move.b (a1)+,(a0)+
00:0000906A 4210            	    56: 	clr.b (a0)
00:0000906C 4CD70201        	    57: 	movem.l (sp),d0/a1
00:00009070 A2AF00030008    	    58: 	cchk 8(sp)
00:00009076 4E5A            	    59: 	unlk a2
00:00009078 003C0001        	    60: 	ori #1,ccr							; set carry and return
00:0000907C 4E75            	    61: 	rts
                            	    62: .notInf
00:0000907E 4CD70201        	    63: 	movem.l (sp),d0/a1
00:00009082 A2AF00030008    	    64: 	cchk 8(sp)
00:00009088 4E5A            	    65: 	unlk a2
00:0000908A 023C00FE        	    66: 	andi #$FE,ccr						; clear carry and return
00:0000908E 4E75            	    67: 	rts
                            	    68: 
                            	    69: ;------------------------------------------------------------------------------
                            	    70: ; Check for a zero value. Output a single "0" if zero,
                            	    71: ;
                            	    72: ; Modifies:
                            	    73: ;		a0
                            	    74: ; Parameters:
                            	    75: ;		fp0 = dbl
                            	    76: ;------------------------------------------------------------------------------
                            	    77: 
                            	    78: _CheckZero:
00:00009090 F200003A        	    79: 	ftst fp0								; check if number is zero
00:00009094 F28E000E        	    80: 	fbne .0003
00:00009098 10FC0030        	    81: 	move.b #'0',(a0)+				; if zero output "0"
00:0000909C 4210            	    82: 	clr.b (a0)
00:0000909E 003C0004        	    83: 	ori #4,ccr							; set zf
00:000090A2 4E75            	    84: 	rts
                            	    85: .0003
00:000090A4 023C00FB        	    86: 	andi #$FB,ccr						; clear zf
00:000090A8 4E75            	    87: 	rts
                            	    88: 
                            	    89: ;------------------------------------------------------------------------------
                            	    90: ; Check for a negative number. This includes Nans and Infinities. Output a "-"
                            	    91: ; if negative.
                            	    92: ;
                            	    93: ;	Modifies
                            	    94: ;		a0
                            	    95: ; Parameters:
                            	    96: ;		fp0 = dbl
                            	    97: ;------------------------------------------------------------------------------
                            	    98: 
                            	    99: _CheckNegative:
00:000090AA F200003A        	   100: 	ftst fp0								; is number negative?
00:000090AE F293000A        	   101: 	fbge .0002
00:000090B2 10FC002D        	   102: 	move.b #'-',(a0)+				; yes, output '-'
00:000090B6 F200001A        	   103: 	fneg fp0								; make fp0 positive
                            	   104: .0002
00:000090BA 4E75            	   105: 	rts
                            	   106: 
                            	   107: ;------------------------------------------------------------------------------
                            	   108: ; Make the input value larger so that digits may appear before the decimal
                            	   109: ; point.
                            	   110: ;
                            	   111: ; Modifies:
                            	   112: ;		fp0,fp1,d6
                            	   113: ; Parameters:
                            	   114: ;		fp0 = dbl
                            	   115: ;------------------------------------------------------------------------------
                            	   116: 
                            	   117: ;	if (dbl < 1.0) {
                            	   118: ;		while (dbl < 1.0) {
                            	   119: ;			dbl *= 1000000.0;
                            	   120: ;			exp -= 6;  
                            	   121: ;		}
                            	   122: ;	}
                            	   123: 
                            	   124: _MakeBig:
00:000090BC F23C50800001    	   125: 	fmove.w #1,fp1
                            	   126: .0002
00:000090C2 F2000438        	   127: 	fcmp fp1,fp0						; is fp0 > 1?
00:000090C6 F293000E        	   128: 	fbge .0001							; yes, return
00:000090CA F23C402600000006	   129: 	fscale.l #6,fp0					; multiply fp0 by a million
00:000090D2 5D46            	   130: 	subi.w #6,d6						; decrement exponent by six
00:000090D4 60EC            	   131: 	bra .0002								; keep trying until number is > 1
                            	   132: .0001
00:000090D6 4E75            	   133: 	rts
                            	   134: 	
                            	   135: ;------------------------------------------------------------------------------
                            	   136: ;	Create a number dbl2 on the same order of magnitude as dbl, but
                            	   137: ;	less than dbl. The number will be 1.0e<dbl's exponent>
                            	   138: ;
                            	   139: ; Modifies:
                            	   140: ;		d6,fp2
                            	   141: ; Parameters:
                            	   142: ;		fp0 = dbl
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: ;	// The following is similar to using log10() and pow() functions.
                            	   146: ;	// Now dbl is >= 1.0
                            	   147: ;	// Create a number dbl2 on the same order of magnitude as dbl, but
                            	   148: ;	// less than dbl.
                            	   149: ;	dbl2 = 1.0;
                            	   150: ;	dbla = dbl2;
                            	   151: ;	if (dbl > dbl2) {	// dbl > 1.0 ?
                            	   152: ;		while (dbl2 <= dbl) {
                            	   153: ;			dbla = dbl2;
                            	   154: ;			dbl2 *= 10.0;	// increase power of 10
                            	   155: ;			exp++;
                            	   156: ;		}
                            	   157: ;		// The above loop goes one too far, we want the last value less
                            	   158: ;		// than dbl.
                            	   159: ;		dbl2 = dbla;
                            	   160: ;		exp--;
                            	   161: ;	}
                            	   162: 
                            	   163: _LessThanDbl:
00:000090D8 F23C51000001    	   164: 	fmove.w #1,fp2			; setup fp2 = 1
00:000090DE F2000838        	   165: 	fcmp fp2,fp0				; if (dbl > dbl2)
00:000090E2 F295001E        	   166: 	fble .0004
                            	   167: .0006
00:000090E6 F2000138        	   168: 	fcmp fp0,fp2				; while (dbl2 <= dbl)
00:000090EA F292000C        	   169: 	fbgt .0005
00:000090EE F23C51260001    	   170: 	fscale.w #1,fp2			; dbl2 *= 10 (increase exponent by one)
00:000090F4 5246            	   171: 	addi.w #1,d6				; exp++
00:000090F6 60EE            	   172: 	bra .0006
                            	   173: .0005
00:000090F8 F23C4126FFFFFFFF	   174: 	fscale.l #-1,fp2		; dbl2 /= 10 (decrease exponent by one)
00:00009100 5346            	   175: 	subi.w #1,d6				; exp--;
                            	   176: .0004	
                            	   177: ;	fmove.x fp0,_fpWork	; debugging
                            	   178: ;	fmove.x fp2,_fpWork+12
00:00009102 4E75            	   179: 	rts
                            	   180: 
                            	   181: ;------------------------------------------------------------------------------
                            	   182: ; Compute the number of digits before the decimal point.
                            	   183: ;
                            	   184: ; Modifies:
                            	   185: ;		d0,d6,_digits_before_decpt
                            	   186: ; Parameters:
                            	   187: ;		d6 = exponent
                            	   188: ;------------------------------------------------------------------------------
                            	   189: 
                            	   190: ; if (exp >= 0 && exp < 6) {
                            	   191: ;   digits_before_decpt = exp+1;
                            	   192: ;		exp = 0;
                            	   193: ;	}
                            	   194: ;	else if (exp >= -7)
                            	   195: ;		digits_before_decpt = 1;
                            	   196: ;	else
                            	   197: ;		digits_before_decpt = -1;
                            	   198: 
                            	   199: _ComputeDigitsBeforeDecpt:
00:00009104 2F00            	   200: 	move.l d0,-(a7)
00:00009106 4A46            	   201: 	tst.w d6
00:00009108 6B16            	   202: 	bmi .0007
00:0000910A 0C460006        	   203: 	cmpi.w #6,d6
00:0000910E 6C10            	   204: 	bge .0007
00:00009110 3006            	   205: 	move.w d6,d0
00:00009112 5240            	   206: 	addi.w #1,d0
00:00009114 33C000040510    	   207: 	move.w d0,_digits_before_decpt	
00:0000911A 4246            	   208: 	clr.w d6
00:0000911C 201F            	   209: 	move.l (a7)+,d0
00:0000911E 4E75            	   210: 	rts
                            	   211: .0007
00:00009120 0C46FFF9        	   212: 	cmpi.w #-7,d6
00:00009124 6D0C            	   213: 	blt .0009
00:00009126 33FC000100040510	   214: 	move.w #1,_digits_before_decpt
00:0000912E 201F            	   215: 	move.l (a7)+,d0
00:00009130 4E75            	   216: 	rts
                            	   217: .0009
00:00009132 33FCFFFF00040510	   218: 	move.w #-1,_digits_before_decpt
00:0000913A 201F            	   219: 	move.l (a7)+,d0
00:0000913C 4E75            	   220: 	rts
                            	   221: 
                            	   222: ;------------------------------------------------------------------------------
                            	   223: ;	Spit out a leading zero before the decimal point for a small number.
                            	   224: ;
                            	   225: ; Modifies:
                            	   226: ;		a0
                            	   227: ; Parameters:
                            	   228: ;		d6 = exponent
                            	   229: ;------------------------------------------------------------------------------
                            	   230: 
                            	   231: ;  if (exp < -7) {
                            	   232: ;		 buf[ndx] = '0';
                            	   233: ;		 ndx++;
                            	   234: ;    buf[ndx] = '.';
                            	   235: ;    ndx++;
                            	   236: ;  }
                            	   237: 
                            	   238: _LeadingZero:
00:0000913E 0C46FFF9        	   239: 	cmpi.w #-7,d6
00:00009142 6C08            	   240: 	bge .0010
00:00009144 10FC0030        	   241: 	move.b #'0',(a0)+
00:00009148 10FC002E        	   242: 	move.b #'.',(a0)+
                            	   243: .0010
00:0000914C 4E75            	   244: 	rts
                            	   245: 
                            	   246: ;------------------------------------------------------------------------------
                            	   247: ; Extract the digits of the significand.
                            	   248: ;
                            	   249: ; Modifies:
                            	   250: ;		_precision variable
                            	   251: ; Register Usage
                            	   252: ;		d0 = counter
                            	   253: ;		d1 = digit
                            	   254: ;		fp0 = dbl
                            	   255: ;		fp2 = dbl2
                            	   256: ;		fp3 = digit as decimal float
                            	   257: ;		fp7 = dbla
                            	   258: ; Parameters:
                            	   259: ;		fp0, fp2
                            	   260: ;------------------------------------------------------------------------------
                            	   261: 
                            	   262: ;	// Now loop processing one digit at a time.
                            	   263: ;  for (nn = 0; nn < 25 && precision > 0; nn++) {
                            	   264: ;    digit = 0;
                            	   265: ;		dbla = dbl;
                            	   266: ;		// dbl is on the same order of magnitude as dbl2 so
                            	   267: ;		// a repeated subtract can be used to find the digit.
                            	   268: ;    while (dbl >= dbl2) {
                            	   269: ;      dbl -= dbl2;
                            	   270: ;      digit++;
                            	   271: ;    }
                            	   272: ;    buf[ndx] = digit + '0';
                            	   273: ;		// Now go back and perform just a single subtract and
                            	   274: ;		// a multiply to find out how much to reduce dbl by.
                            	   275: ;		// This should improve the accuracy
                            	   276: ;		if (digit > 2)
                            	   277: ;			dbl = dbla - dbl2 * digit;
                            	   278: ;    ndx++;
                            	   279: ;    digits_before_decpt--;
                            	   280: ;    if (digits_before_decpt==0) {
                            	   281: ;			buf[ndx] = '.';
                            	   282: ;			ndx++;
                            	   283: ;    }
                            	   284: ;    else if (digits_before_decpt < 0)
                            	   285: ;      precision--;
                            	   286: ;		// Shift the next digit to be tested into position.
                            	   287: ;    dbl *= 10.0;
                            	   288: ;  }
                            	   289: 	
                            	   290: _SpitOutDigits:
00:0000914E 4E52FFE8        	   291: 	link a2,#-24
00:00009152 2F79000400980014	   292: 	move.l _canary,20(sp)
00:0000915A F2176B80        	   293: 	fmove.x fp7,(sp)
00:0000915E 48EF0003000C    	   294: 	movem.l d0/d1,12(sp)
00:00009164 303C0018        	   295: 	move.w #24,d0			; d0 = nn
                            	   296: .0017	
00:00009168 4AB900040514    	   297: 	tst.l _precision
00:0000916E 6F46            	   298: 	ble .0011
00:00009170 7200            	   299: 	moveq #0,d1				; digit = 0
00:00009172 F2000380        	   300: 	fmove fp0,fp7			; dbla = dbl
                            	   301: .0013
00:00009176 F2000838        	   302: 	fcmp fp2,fp0
00:0000917A F294000A        	   303: 	fblt .0012
00:0000917E F2000828        	   304: 	fsub fp2,fp0			; dbl -= dbl2
00:00009182 5201            	   305: 	addi.b #1,d1			; digit++
00:00009184 60F0            	   306: 	bra .0013
                            	   307: .0012
00:00009186 06010030        	   308: 	addi.b #'0',d1		; convert digit to ascii
00:0000918A 10C1            	   309: 	move.b d1,(a0)+		; and store
00:0000918C 04010030        	   310: 	subi.b #'0',d1		; d1 = binary digit again
                            	   311: ;	cmpi.b #2,d1
                            	   312: ;	ble .0014
                            	   313: 
                            	   314: ;	ext.w d1
                            	   315: ;	ext.l d1
                            	   316: ;	fmove.l d1,fp3		; fp3 = digit
                            	   317: ;	fmul fp2,fp3			; fp3 = dbl2 * digit
                            	   318: ;	fmove fp7,fp0
                            	   319: ;	fsub fp3,fp0			; dbl = dbla - dbl2 * digit
                            	   320: .0014
00:00009190 537900040510    	   321: 	subi.w #1,_digits_before_decpt
00:00009196 6604            	   322: 	bne .0015
00:00009198 10FC002E        	   323: 	move.b #'.',(a0)+
                            	   324: .0015
00:0000919C 4A7900040510    	   325: 	tst.w _digits_before_decpt
00:000091A2 6C06            	   326: 	bge .0016
00:000091A4 53B900040514    	   327: 	subi.l #1,_precision
                            	   328: .0016
00:000091AA F23C4126FFFFFFFF	   329: 	fscale.l #-1,fp2		; dbl *= 10.0
00:000091B2 51C8FFB4        	   330: 	dbra d0,.0017
                            	   331: .0011
00:000091B6 4CEF0003000C    	   332: 	movem.l 12(sp),d0/d1
00:000091BC F2174B80        	   333: 	fmove.x (sp),fp7
00:000091C0 A2AF00030014    	   334: 	cchk 20(sp)
00:000091C6 4E5A            	   335: 	unlk a2
00:000091C8 4E75            	   336: 	rts
                            	   337: 
                            	   338: ;------------------------------------------------------------------------------
                            	   339: ; If the number ends in a decimal point, trim off the point.
                            	   340: ;
                            	   341: ; Registers Modified:
                            	   342: ;		none
                            	   343: ; Parameters:
                            	   344: ;		a0 = pointer to end of number
                            	   345: ; Returns:
                            	   346: ;		a0 = updated to point just past last digit.
                            	   347: ;------------------------------------------------------------------------------
                            	   348: 
                            	   349: _TrimTrailingPoint:
00:000091CA 0C28002EFFFF    	   350: 	cmpi.b #'.',-1(a0)
00:000091D0 6604            	   351: 	bne .0001
00:000091D2 4220            	   352: 	clr.b -(a0)
00:000091D4 4E75            	   353: 	rts
                            	   354: .0001
00:000091D6 0C10002E        	   355: 	cmpi.b #'.',(a0)
00:000091DA 660A            	   356: 	bne .0002
00:000091DC 4A280001        	   357: 	cmpi.b #0,1(a0)
00:000091E0 6604            	   358: 	bne .0002
00:000091E2 4210            	   359: 	clr.b (a0)
00:000091E4 5348            	   360: 	subq #1,a0
                            	   361: .0002
00:000091E6 4E75            	   362: 	rts
                            	   363: 	
                            	   364: ;------------------------------------------------------------------------------
                            	   365: ; If the number ends in .0 get rid of the .0
                            	   366: ;
                            	   367: ; Registers Modified:
                            	   368: ;		none
                            	   369: ; Parameters:
                            	   370: ;		a0 = pointer to last digits of number
                            	   371: ; Returns:
                            	   372: ;		a0 = updated to point just past last digit.
                            	   373: ;------------------------------------------------------------------------------
                            	   374: 
                            	   375: _TrimDotZero:
00:000091E8 4A10            	   376: 	tst.b (a0)
00:000091EA 6616            	   377: 	bne .0004
00:000091EC 0C280030FFFF    	   378: 	cmpi.b #'0',-1(a0)
00:000091F2 660E            	   379: 	bne .0004
00:000091F4 0C28002EFFFE    	   380: 	cmpi.b #'.',-2(a0)
00:000091FA 6606            	   381: 	bne .0004
00:000091FC 4228FFFE        	   382: 	clr.b -2(a0)
00:00009200 5548            	   383: 	subq #2,a0
                            	   384: .0004
00:00009202 4E75            	   385: 	rts
                            	   386: 
                            	   387: ;------------------------------------------------------------------------------
                            	   388: ; Trim trailing zeros from the number. Generally there is no need to display
                            	   389: ; trailing zeros.
                            	   390: ; Turns a number like 652.000000000000000000000 into 650.0
                            	   391: ;
                            	   392: ; Registers Modified:
                            	   393: ;		none
                            	   394: ; Parameters:
                            	   395: ;		a0 = pointer to last digits of number
                            	   396: ; Returns:
                            	   397: ;		a0 = updated to point just past last digit.
                            	   398: ;------------------------------------------------------------------------------
                            	   399: 
                            	   400: ;	// Trim trailing zeros from the number
                            	   401: ;  do {
                            	   402: ;      ndx--;
                            	   403: ;  } while(buf[ndx]=='0');
                            	   404: ;  ndx++;
                            	   405: 
                            	   406: _TrimTrailingZeros:
                            	   407: .0018	
00:00009204 0C200030        	   408: 	cmpi.b #'0',-(a0)		; if the last digit was a zero, backup
00:00009208 67FA            	   409: 	beq .0018
00:0000920A 5248            	   410: 	addq #1,a0					; now advance by one
00:0000920C 4210            	   411: 	move.b #0,(a0)			; NULL terminate string
00:0000920E 4E75            	   412: 	rts
                            	   413: 
                            	   414: ;------------------------------------------------------------------------------
                            	   415: ; Output 'e+' or 'e-'
                            	   416: ;
                            	   417: ; Registers Modified:
                            	   418: ;		d6.w (if negative)
                            	   419: ; Parameters:
                            	   420: ;		a0 = pointer to last digits of number
                            	   421: ; Returns:
                            	   422: ;		a0 = updated to point just past '+' or '-'.
                            	   423: ;------------------------------------------------------------------------------
                            	   424: 
                            	   425: ;	// Spit out +/-E
                            	   426: ;  buf[ndx] = E;
                            	   427: ;  ndx++;
                            	   428: ;  if (exp < 0) {
                            	   429: ;    buf[ndx]='-';
                            	   430: ;    ndx++;
                            	   431: ;    exp = -exp;
                            	   432: ;  }
                            	   433: ;  else {
                            	   434: ;		buf[ndx]='+';
                            	   435: ;		ndx++;
                            	   436: ;  }
                            	   437: 
                            	   438: _SpitOutE:	
00:00009210 10F90004050C    	   439: 	move.b _E,(a0)+
00:00009216 4A46            	   440: 	tst.w d6
00:00009218 6C08            	   441: 	bge .0021
00:0000921A 10FC002D        	   442: 	move.b #'-',(a0)+
00:0000921E 4446            	   443: 	neg.w d6
00:00009220 6004            	   444: 	bra .0022
                            	   445: .0021
00:00009222 10FC002B        	   446: 	move.b #'+',(a0)+
                            	   447: .0022
00:00009226 4E75            	   448: 	rts
                            	   449: 
                            	   450: ;------------------------------------------------------------------------------
                            	   451: ; Extract a single digit of the exponent. Extract works from the leftmost digit
                            	   452: ; to the rightmost.
                            	   453: ;
                            	   454: ; Register Usage
                            	   455: ;		d2 = history of zeros
                            	   456: ;		d3 = digit
                            	   457: ; Modifies
                            	   458: ;		d2,d6,a0
                            	   459: ; Parameter
                            	   460: ; 	d1.w = power of ten
                            	   461: ;		d6.w = exponent
                            	   462: ;------------------------------------------------------------------------------
                            	   463: 
                            	   464: _ExtExpDigit:
00:00009228 2F03            	   465: 	move.l d3,-(a7)
00:0000922A 48C6            	   466: 	ext.l d6				; make d6 a long
00:0000922C 8CC1            	   467: 	divu d1,d6			; divide by power of ten
00:0000922E 1606            	   468: 	move.b d6,d3		; d3 = quotient (0 to 9)
00:00009230 4846            	   469: 	swap d6					; d6 = remainder, setup for next digit
00:00009232 8403            	   470: 	or.b d3,d2
00:00009234 4A03            	   471: 	tst.b d3
00:00009236 6604            	   472: 	bne .0003
00:00009238 4A02            	   473: 	tst.b d2	
00:0000923A 6706            	   474: 	beq .0004
                            	   475: .0003
00:0000923C 06030030        	   476: 	addi.b #'0',d3	; convert to ascii
00:00009240 10C3            	   477: 	move.b d3,(a0)+
                            	   478: .0004
00:00009242 261F            	   479: 	move.l (a7)+,d3
00:00009244 4E75            	   480: 	rts
                            	   481: 
                            	   482: ;------------------------------------------------------------------------------
                            	   483: ; Extract all the digits of the exponent.
                            	   484: ;
                            	   485: ; Register Usage
                            	   486: ;		d1 = power of 10
                            	   487: ;		d2 = history of zeros
                            	   488: ; Parameters
                            	   489: ;		a0 = pointer to string buffer
                            	   490: ;		d6 = exponent
                            	   491: ;------------------------------------------------------------------------------
                            	   492: 
                            	   493: ;	// If the number is times 10^0 don't output the exponent
                            	   494: ;  if (exp==0) {
                            	   495: ;    buf[ndx]='\0';
                            	   496: ;    goto prt;
                            	   497: ;  }
                            	   498: 
                            	   499: _ExtExpDigits:
00:00009246 2F01            	   500: 	move.l d1,-(a7)
00:00009248 4A46            	   501: 	tst.w d6							; is exponent zero?
00:0000924A 671C            	   502: 	beq .0002
00:0000924C 61C2            	   503: 	bsr _SpitOutE					; exponent is non-zero e+
00:0000924E 4202            	   504: 	clr.b d2							; d2 = history of zeros
00:00009250 323C03E8        	   505: 	move.w #1000,d1
00:00009254 61D2            	   506: 	bsr _ExtExpDigit
00:00009256 323C0064        	   507: 	move.w #100,d1
00:0000925A 61CC            	   508: 	bsr _ExtExpDigit
00:0000925C 323C000A        	   509: 	move.w #10,d1
00:00009260 61C6            	   510: 	bsr _ExtExpDigit
00:00009262 323C0001        	   511: 	move.w #1,d1
00:00009266 61C0            	   512: 	bsr _ExtExpDigit
                            	   513: .0002:
00:00009268 221F            	   514: 	move.l (a7)+,d1
00:0000926A 4210            	   515: 	move.b #0,(a0)				; NULL terminate string
00:0000926C 4E75            	   516: 	rts										; and return
                            	   517: 
                            	   518: ;------------------------------------------------------------------------------
                            	   519: ; Pad the left side of the output string.
                            	   520: ;
                            	   521: ; Modifies:
                            	   522: ;		d0,d1,d2,d3
                            	   523: ;------------------------------------------------------------------------------
                            	   524: 
                            	   525: ;  // pad left
                            	   526: ;  if (width > 0) {
                            	   527: ;    if (ndx < width) {
                            	   528: ;      for (nn = 39; nn >= width-ndx; nn--)
                            	   529: ;        buf[nn] = buf[nn-(width-ndx)];
                            	   530: ;      for (; nn >= 0; nn--)
                            	   531: ;        buf[nn] = ' ';
                            	   532: ;    }
                            	   533: ;  }
                            	   534: 	
                            	   535: _PadLeft:
00:0000926E 48E7F000        	   536: 	movem.l d0/d1/d2/d3,-(a7)
00:00009272 4A3900040508    	   537: 	tst.b _width
00:00009278 6F3E            	   538: 	ble .0041
00:0000927A 2008            	   539: 	move.l a0,d0
00:0000927C 90BC00040520    	   540: 	sub.l #_fpBuf,d0	; d0 = ndx
00:00009282 B03900040508    	   541: 	cmp.b _width,d0
00:00009288 6C2E            	   542: 	bge .0041
00:0000928A 323C0031        	   543: 	move.w #49,d1			; d1 = nn
                            	   544: .0040
00:0000928E 143900040508    	   545: 	move.b _width,d2
00:00009294 4882            	   546: 	ext.w d2
00:00009296 9440            	   547: 	sub.w d0,d2				; d2 = width-ndx
00:00009298 B242            	   548: 	cmp.w d2,d1
00:0000929A 6D0E            	   549: 	blt .0039
00:0000929C 3601            	   550: 	move.w d1,d3			; d3 = nn
00:0000929E 9642            	   551: 	sub.w d2,d3				; d3 = nn-(width-ndx)
00:000092A0 11B030001000    	   552: 	move.b (a0,d3.w),(a0,d1.w)
00:000092A6 5341            	   553: 	subi.w #1,d1
00:000092A8 60E4            	   554: 	bra .0040
                            	   555: .0039
00:000092AA 4A41            	   556: 	tst.w d1
00:000092AC 6B0A            	   557: 	bmi .0041
00:000092AE 11BC00201000    	   558: 	move.b #' ',(a0,d1.w)
00:000092B4 5341            	   559: 	subi.w #1,d1
00:000092B6 60F2            	   560: 	bra .0039
                            	   561: .0041
00:000092B8 4CDF000F        	   562: 	movem.l (a7)+,d0/d1/d2/d3
00:000092BC 4E75            	   563: 	rts
                            	   564: 
                            	   565: ;------------------------------------------------------------------------------
                            	   566: ; Pad the right side of the output string.
                            	   567: ;
                            	   568: ; Parameters:
                            	   569: ;		a0 = pointer to end of string
                            	   570: ; Modifies:
                            	   571: ;		none
                            	   572: ; Returns:
                            	   573: ;		none
                            	   574: ;------------------------------------------------------------------------------
                            	   575: 
                            	   576: ;  // pad right
                            	   577: ;  if (width < 0) {
                            	   578: ;    width = -width;
                            	   579: ;    while (ndx < width) {
                            	   580: ;      buf[ndx]=' ';
                            	   581: ;      ndx++;
                            	   582: ;    }
                            	   583: ;    buf[ndx]='\0';
                            	   584: ;  }
                            	   585: ;  return (ndx);
                            	   586: 
                            	   587: _PadRight:
00:000092BE 2F00            	   588: 	move.l d0,-(a7)
00:000092C0 4A3900040508    	   589: 	tst.b _width
00:000092C6 6A24            	   590: 	bpl .0042
00:000092C8 443900040508    	   591: 	neg.b _width
00:000092CE 2008            	   592: 	move.l a0,d0
00:000092D0 90BC00040520    	   593: 	sub.l #_fpBuf,d0	; d0 = ndx
                            	   594: .0044
00:000092D6 B03900040508    	   595: 	cmp.b _width,d0
00:000092DC 6C0A            	   596: 	bge .0043
00:000092DE 11BC00200000    	   597: 	move.b #' ',(a0,d0.w)
00:000092E4 5240            	   598: 	addi.w #1,d0
00:000092E6 60EE            	   599: 	bra .0044
                            	   600: .0043
00:000092E8 42300000        	   601: 	move.b #0,(a0,d0.w)
                            	   602: .0042
00:000092EC 201F            	   603: 	move.l (a7)+,d0
00:000092EE 4E75            	   604: 	rts
                            	   605: 
                            	   606: ;------------------------------------------------------------------------------
                            	   607: ; Output a string representation of a decimal floating point number to a 
                            	   608: ; buffer.
                            	   609: ;
                            	   610: ; Register Usage
                            	   611: ;		a0 = pointer to string buffer
                            	   612: ;		d6 = exponent
                            	   613: ; Modifies:
                            	   614: ;		a0 = points to end of string
                            	   615: ; Parameters:
                            	   616: ;		fp0 = number to convert
                            	   617: ; Returns:
                            	   618: ;		none
                            	   619: ;------------------------------------------------------------------------------
                            	   620: 
                            	   621: _FloatToString:
00:000092F0 2F06            	   622: 	move.l d6,-(a7)
00:000092F2 6100FDB6        	   623: 	bsr _CheckNegative			; is number negative?
00:000092F6 6100FD98        	   624: 	bsr _CheckZero					; check for zero
00:000092FA 6732            	   625: 	beq .0001								; branch since already output "0"
00:000092FC 6100FD2E        	   626: 	bsr _CheckNan						; check for Nan or infinity
00:00009300 652C            	   627: 	bcs .0001								; branch if nan/inf string output
                            	   628: 	; Now the fun begins
00:00009302 7C00            	   629: 	clr.l d6								; exponent = 0
00:00009304 6100FDB6        	   630: 	bsr _MakeBig
00:00009308 6100FDCE        	   631: 	bsr _LessThanDbl
00:0000930C 6100FDF6        	   632: 	bsr _ComputeDigitsBeforeDecpt
00:00009310 6100FE2C        	   633: 	bsr _LeadingZero
00:00009314 6100FE38        	   634: 	bsr _SpitOutDigits
00:00009318 6100FEEA        	   635: 	bsr _TrimTrailingZeros
00:0000931C 6100FEAC        	   636: 	bsr _TrimTrailingPoint
00:00009320 6100FEC6        	   637: 	bsr _TrimDotZero
00:00009324 6100FF20        	   638: 	bsr _ExtExpDigits				; extract exponent digits
00:00009328 6100FF44        	   639: 	bsr _PadLeft						; pad the number to the left or right
00:0000932C 6190            	   640: 	bsr _PadRight
                            	   641: .0001
00:0000932E 2C1F            	   642: 	move.l (a7)+,d6
00:00009330 4E75            	   643: 	rts
                            	   644: 
                            	   645: 

Source: "boot.x68"
                            	  3213: 	include "GetFloat.x68"

Source: "GetFloat.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: ;
                            	    37: ; Get a floating point number
                            	    38: ;
                            	    39: _GetFloatGetChar:
00:00009332 1210            	    40: 	move.b (a0),d1
00:00009334 D1C0            	    41: 	add.l d0,a0
00:00009336 4E75            	    42: 	rts
                            	    43: _GetFloatIgnBlanks:
                            	    44: .0001
00:00009338 61F8            	    45: 	bsr _GetFloatGetChar
00:0000933A 0C010020        	    46: 	cmpi.b #' ',d1
00:0000933E 67F8            	    47: 	beq .0001
                            	    48: _GetFloatBackupChar:
00:00009340 91C0            	    49: 	sub.l d0,a0
00:00009342 4E75            	    50: 	rts
                            	    51: 
                            	    52: ;-------------------------------------------------------------------------------
                            	    53: ; Get fractional part of a number, 25 digits max, into a float register.
                            	    54: ;
                            	    55: ; Register Usage:
                            	    56: ;		d1 = digit from input screen
                            	    57: ;		d4 = digit count
                            	    58: ;		d6 = digit scaling factor
                            	    59: ;		fp1 = digit as float number
                            	    60: ; Returns:
                            	    61: ;		fp0 = fraction
                            	    62: ;-------------------------------------------------------------------------------
                            	    63: 
                            	    64: _GetFraction:
00:00009344 4E52FFE4        	    65: 	link a2,#-28
00:00009348 2F79000400980018	    66: 	move.l _canary,24(sp)
00:00009350 48D70052        	    67: 	movem.l d1/d4/d6,(sp)
00:00009354 F22F6880000C    	    68: 	fmove.x fp1,12(sp)
00:0000935A 7C00            	    69: 	clr.l d6							; d6 = scale factor
00:0000935C F23C50000000    	    70: 	fmove.w #0,fp0				; fract = 0.0
00:00009362 7818            	    71: 	moveq #24,d4
                            	    72: .0002
00:00009364 61CC            	    73: 	bsr _GetFloatGetChar
00:00009366 0C010030        	    74: 	cmpi.b #'0',d1
00:0000936A 6520            	    75: 	blo .0001
00:0000936C 0C010039        	    76: 	cmpi.b #'9',d1				; make sure between 0 and 9
00:00009370 621A            	    77: 	bhi .0001
00:00009372 04010030        	    78: 	subi.b #'0',d1
00:00009376 F23C50260001    	    79: 	fscale.w #1,fp0				; fract * 10.0
00:0000937C 5246            	    80: 	addq #1,d6						; record scaling
00:0000937E F2015880        	    81: 	fmove.b d1,fp1				; fp1 = digit
00:00009382 F2000422        	    82: 	fadd fp1,fp0					; fract += digit
00:00009386 5245            	    83: 	addq.w #1,d5					; increment number of digits in number
00:00009388 51CCFFDA        	    84: 	dbra d4,.0002
                            	    85: .0001
00:0000938C 61B2            	    86: 	bsr _GetFloatBackupChar
00:0000938E 4446            	    87: 	neg d6
00:00009390 F2064026        	    88: 	fscale.l d6,fp0				; fract /= scale
00:00009394 4CD70052        	    89: 	movem.l (sp),d1/d4/d6
00:00009398 F22F4880000C    	    90: 	fmove.x 12(sp),fp1
00:0000939E A2AF00030018    	    91: 	cchk 24(sp)
00:000093A4 4E5A            	    92: 	unlk a2
00:000093A6 4E75            	    93: 	rts
                            	    94: 
                            	    95: ;-------------------------------------------------------------------------------
                            	    96: ; Get exponent part of a number, 4 digits max, into a float register.
                            	    97: ;
                            	    98: ; Register Usage:
                            	    99: ;		d1 = digit from input screen
                            	   100: ;		d2 = exponent
                            	   101: ;		d3 = temp, number times 2
                            	   102: ;		d4 = digit counter
                            	   103: ; Parameters:
                            	   104: ;		fp0 = float number
                            	   105: ; Returns:
                            	   106: ;		fp0 = float number with exponent factored in
                            	   107: ;-------------------------------------------------------------------------------
                            	   108: 
                            	   109: _GetExponent:
00:000093A8 4E52FFE0        	   110: 	link a2,#-32
00:000093AC 2F7900040098001C	   111: 	move.l _canary,28(sp)
00:000093B4 48D7001E        	   112: 	movem.l d1/d2/d3/d4,(sp)
00:000093B8 F22F69000010    	   113: 	fmove.x fp2,16(sp)
00:000093BE 7400            	   114: 	clr.l d2							; d2 = number = 0
00:000093C0 F23C51000000    	   115: 	fmove.w #0,fp2				; fp2 = exp = 0.0
00:000093C6 7601            	   116: 	moveq #1,d3						; d3 = exscale = 1
00:000093C8 6100FF68        	   117: 	bsr _GetFloatGetChar
00:000093CC 0C01002D        	   118: 	cmpi.b #'-',d1
00:000093D0 6608            	   119: 	bne .0001
00:000093D2 4483            	   120: 	neg.l d3							; exscale = -1
                            	   121: .0006
00:000093D4 6100FF62        	   122: 	bsr _GetFloatIgnBlanks
00:000093D8 600A            	   123: 	bra .0002
                            	   124: .0001
00:000093DA 0C01002B        	   125: 	cmpi.b #'+',d1
00:000093DE 67F4            	   126: 	beq .0006
00:000093E0 6100FF5E        	   127: 	bsr _GetFloatBackupChar
                            	   128: .0002	
00:000093E4 7803            	   129: 	moveq #3,d4						; d4 = max 4 digits
                            	   130: .0004
00:000093E6 6100FF4A        	   131: 	bsr _GetFloatGetChar	; d1 = digit char
00:000093EA 0C010030        	   132: 	cmpi.b #'0',d1
00:000093EE 651E            	   133: 	blo .0003
00:000093F0 0C010039        	   134: 	cmpi.b #'9',d1				; ensure between 0 and 9
00:000093F4 6218            	   135: 	bhi .0003
00:000093F6 04010030        	   136: 	subi.b #'0',d1
00:000093FA D482            	   137: 	add.l d2,d2						; number *2
00:000093FC 2602            	   138: 	move.l d2,d3
00:000093FE E58A            	   139: 	lsl.l #2,d2						; number *8
00:00009400 D483            	   140: 	add.l d3,d2						; number *10	
00:00009402 4881            	   141: 	ext.w d1
00:00009404 48C1            	   142: 	ext.l d1
00:00009406 D481            	   143: 	add.l d1,d2						; number + digit
00:00009408 5245            	   144: 	addq.w #1,d5					; increment number of digits in number
00:0000940A 51CCFFDA        	   145: 	dbra d4,.0004
                            	   146: .0003
00:0000940E 6100FF30        	   147: 	bsr _GetFloatBackupChar	; backup a character
00:00009412 C4C3            	   148: 	mulu d3,d2						; *1 or *-1
00:00009414 48C2            	   149: 	ext.l d2
00:00009416 F2024126        	   150: 	fscale.l d2,fp2				; exp * exmul
00:0000941A F2000823        	   151: 	fmul fp2,fp0					; rval *= exp
00:0000941E 4CD7001E        	   152: 	movem.l (sp),d1/d2/d3/d4
00:00009422 F22F49000010    	   153: 	fmove.x 16(sp),fp2
00:00009428 A2AF0003001C    	   154: 	cchk 28(sp)
00:0000942E 4E5A            	   155: 	unlk a2
00:00009430 4E75            	   156: 	rts	
                            	   157: 
                            	   158: ;-------------------------------------------------------------------------------
                            	   159: ; Get an integer number, positive or negative, 25 digits max, into a float
                            	   160: ; register.
                            	   161: ;
                            	   162: ; Register Usage:
                            	   163: ;		d1 = digit from input screen
                            	   164: ;		d2 = digit down counter
                            	   165: ;		d3 = sign of number '+' or '-'
                            	   166: ;		fp1 = digit
                            	   167: ; Modifies:
                            	   168: ;		a0,fp0
                            	   169: ; Returns:
                            	   170: ;		a0 = updated buffer pointer
                            	   171: ;		fp0 = integer number
                            	   172: ;-------------------------------------------------------------------------------
                            	   173: 
                            	   174: _GetInteger:
00:00009432 4E52FFE4        	   175: 	link a2,#-28
00:00009436 2F79000400980018	   176: 	move.l _canary,24(sp)
00:0000943E 48D7000E        	   177: 	movem.l d1/d2/d3,(sp)
00:00009442 F22F6880000C    	   178: 	fmove.x fp1,12(sp)
00:00009448 F23C50000000    	   179: 	fmove.w #0,fp0
00:0000944E 7418            	   180: 	moveq #24,d2					; d2 = digit count (25 max)
00:00009450 6100FEE6        	   181: 	bsr _GetFloatIgnBlanks
00:00009454 6100FEDC        	   182: 	bsr _GetFloatGetChar	; get the sign of the number
00:00009458 0C01002B        	   183: 	cmpi.b #'+',d1
00:0000945C 670A            	   184: 	beq .0002
                            	   185: .0003
00:0000945E 0C01002D        	   186: 	cmpi.b #'-',d1
00:00009462 6608            	   187: 	bne .0004
00:00009464 1E3C002D        	   188: 	move.b #'-',d7
                            	   189: .0002
00:00009468 6100FEC8        	   190: 	bsr _GetFloatGetChar
                            	   191: .0004
00:0000946C 0C010030        	   192: 	cmpi.b #'0',d1				; only characters 0 to 9 valid
00:00009470 651E            	   193: 	blo .0001
00:00009472 0C010039        	   194: 	cmpi.b #'9',d1
00:00009476 6218            	   195: 	bhi .0001
00:00009478 04010030        	   196: 	subi.b #'0',d1
00:0000947C F23C50260001    	   197: 	fscale.w #1,fp0				; number *10
00:00009482 F2015880        	   198: 	fmove.b d1,fp1				; fp1 = digit
00:00009486 F2000422        	   199: 	fadd fp1,fp0
00:0000948A 5245            	   200: 	addq.w #1,d5
00:0000948C 51CAFFDA        	   201: 	dbra d2,.0002
                            	   202: .0001
00:00009490 6100FEAE        	   203: 	bsr _GetFloatBackupChar
00:00009494 4CD7000E        	   204: 	movem.l (sp),d1/d2/d3
00:00009498 F22F4880000C    	   205: 	fmove.x 12(sp),fp1
00:0000949E A2AF00030018    	   206: 	cchk 24(sp)
00:000094A4 4E5A            	   207: 	unlk a2
00:000094A6 4E75            	   208: 	rts
                            	   209: 		
                            	   210: ;-------------------------------------------------------------------------------
                            	   211: ; Get a floating point number off the input screen.
                            	   212: ;
                            	   213: ; Parameters:
                            	   214: ;		a0 = pointer to buffer containing string
                            	   215: ;		d0 = stride of buffer (increment / decrement amount)
                            	   216: ; Register Usage:
                            	   217: ;		d1 = character from input screen
                            	   218: ;		d5.lo = number of digits in number, d5.hi = number of characters fetched
                            	   219: ; Returns:
                            	   220: ;		fp0 = number
                            	   221: ;		a0 = updated buffer pointer
                            	   222: ;		d0 = length of number >0 if a number
                            	   223: ;-------------------------------------------------------------------------------
                            	   224: 
                            	   225: _GetFloat:
00:000094A8 4E52FFE0        	   226: 	link a2,#-32
00:000094AC 2F7900040098001C	   227: 	move.l _canary,28(sp)
00:000094B4 48D702A2        	   228: 	movem.l d1/d5/d7/a1,(sp)
00:000094B8 F22F69000010    	   229: 	fmove.x fp2,16(sp)
00:000094BE 7A00            	   230: 	clr.l d5
00:000094C0 1E3C002B        	   231: 	move.b #'+',d7				; assume a positive number
00:000094C4 2248            	   232: 	move.l a0,a1					; a1 = copy of pointer to buffer
00:000094C6 6100FF6A        	   233: 	bsr _GetInteger				; rval = integer
00:000094CA F2000100        	   234: 	fmove.x fp0,fp2
00:000094CE 6100FE62        	   235: 	bsr _GetFloatGetChar
00:000094D2 0C01002E        	   236: 	cmpi.b #'.',d1
00:000094D6 6706            	   237: 	beq .0004
                            	   238: .0005
00:000094D8 6100FE66        	   239: 	bsr _GetFloatBackupChar
00:000094DC 601C            	   240: 	bra .0002
                            	   241: .0004
00:000094DE 6100FE64        	   242: 	bsr _GetFraction
00:000094E2 F2000822        	   243: 	fadd fp2,fp0					; rval += fraction
00:000094E6 6100FE4A        	   244: 	bsr _GetFloatGetChar
00:000094EA 0C010065        	   245: 	cmpi.b #'e',d1				; accept either 'e' or 'E' indicating exponent
00:000094EE 6706            	   246: 	beq .0001
00:000094F0 0C010045        	   247: 	cmpi.b #'E',d1
00:000094F4 66E2            	   248: 	bne .0005
                            	   249: .0001
00:000094F6 6100FEB0        	   250: 	bsr _GetExponent			; factor exponent into fp0
                            	   251: .0002
00:000094FA 0C07002D        	   252: 	cmpi.b #'-',d7				; adjust number for sign
00:000094FE 6604            	   253: 	bne .0003
00:00009500 F200001A        	   254: 	fneg fp0
                            	   255: .0003
00:00009504 93C8            	   256: 	suba.l a0,a1					; compute number of characters fetched
00:00009506 3009            	   257: 	move.w a1,d0					; move it to d0.hi
00:00009508 4840            	   258: 	swap d0
00:0000950A 3005            	   259: 	move.w d5,d0					; return digit/character count in d0 (non zero for a number)
00:0000950C 4CD702A2        	   260: 	movem.l (sp),d1/d5/d7/a1
00:00009510 F22F49000010    	   261: 	fmove.x 16(sp),fp2
00:00009516 A2AF0003001C    	   262: 	cchk 28(sp)
00:0000951C 4E5A            	   263: 	unlk a2
00:0000951E 4E75            	   264: 	rts	
                            	   265: 
                            	   266: 		

Source: "boot.x68"
                            	  3214: 
                            	  3215: ;------------------------------------------------------------------------------
                            	  3216: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  3217: ; to a hex nybble.
                            	  3218: ;------------------------------------------------------------------------------
                            	  3219: 
                            	  3220: AsciiToHexNybble:
00:00009520 0C010030        	  3221: 	cmpi.b	#'0',d1
00:00009524 6530            	  3222: 	blo.s		gthx3
00:00009526 0C010039        	  3223: 	cmpi.b	#'9',d1
00:0000952A 6206            	  3224: 	bhi.s		gthx5
00:0000952C 04010030        	  3225: 	subi.b	#'0',d1
00:00009530 4E75            	  3226: 	rts
                            	  3227: gthx5:
00:00009532 0C010041        	  3228: 	cmpi.b	#'A',d1
00:00009536 651E            	  3229: 	blo.s		gthx3
00:00009538 0C010046        	  3230: 	cmpi.b	#'F',d1
00:0000953C 6206            	  3231: 	bhi.s		gthx6
00:0000953E 060100C9        	  3232: 	addi.b	#10-'A',d1
00:00009542 4E75            	  3233: 	rts
                            	  3234: gthx6:
00:00009544 0C010061        	  3235: 	cmpi.b	#'a',d1
00:00009548 650C            	  3236: 	blo.s		gthx3
00:0000954A 0C010066        	  3237: 	cmpi.b	#'f',d1
00:0000954E 6206            	  3238: 	bhi.s		gthx3
00:00009550 060100A9        	  3239: 	addi.b	#10-'a',d1
00:00009554 4E75            	  3240: 	rts
                            	  3241: gthx3:
00:00009556 72FF            	  3242: 	moveq	#-1,d1		; not a hex number
00:00009558 4E75            	  3243: 	rts
                            	  3244: 
                            	  3245: ;------------------------------------------------------------------------------
                            	  3246: ;------------------------------------------------------------------------------
                            	  3247: 
                            	  3248: DisplayTwoSpaces:
00:0000955A 2F01            	  3249: 	move.l	d1,-(a7)
00:0000955C 123C0020        	  3250: 	move.b	#' ',d1
00:00009560 61000A96        	  3251: 	bsr			OutputChar
                            	  3252: dspspc1:
00:00009564 61000A92        	  3253: 	bsr			OutputChar
00:00009568 221F            	  3254: 	move.l	(a7)+,d1
00:0000956A 4E75            	  3255: 	rts
                            	  3256: 
                            	  3257: DisplaySpace:
00:0000956C 2F01            	  3258: 	move.l	d1,-(a7)
00:0000956E 123C0020        	  3259: 	move.b	#' ',d1
00:00009572 60F0            	  3260: 	bra			dspspc1
                            	  3261: 
                            	  3262: ;------------------------------------------------------------------------------
                            	  3263: ; Display the 32 bit word in D1.L
                            	  3264: ;------------------------------------------------------------------------------
                            	  3265: 
                            	  3266: DisplayTetra:
00:00009574 4841            	  3267: 	swap	d1
00:00009576 6102            	  3268: 	bsr		DisplayWyde
00:00009578 4841            	  3269: 	swap	d1
                            	  3270: 
                            	  3271: ;------------------------------------------------------------------------------
                            	  3272: ; Display the byte in D1.W
                            	  3273: ;------------------------------------------------------------------------------
                            	  3274: 
                            	  3275: DisplayWyde:
00:0000957A E059            	  3276: 	ror.w		#8,d1
00:0000957C 6102            	  3277: 	bsr			DisplayByte
00:0000957E E159            	  3278: 	rol.w		#8,d1
                            	  3279: 
                            	  3280: ;------------------------------------------------------------------------------
                            	  3281: ; Display the byte in D1.B
                            	  3282: ;------------------------------------------------------------------------------
                            	  3283: 
                            	  3284: DisplayByte:
00:00009580 E819            	  3285: 	ror.b		#4,d1
00:00009582 6102            	  3286: 	bsr			DisplayNybble
00:00009584 E919            	  3287: 	rol.b		#4,d1
                            	  3288: 
                            	  3289: ;------------------------------------------------------------------------------
                            	  3290: ; Display nybble in D1.B
                            	  3291: ;------------------------------------------------------------------------------
                            	  3292: 
                            	  3293: DisplayNybble:
00:00009586 2F01            	  3294: 	move.l	d1,-(a7)
00:00009588 0201000F        	  3295: 	andi.b	#$F,d1
00:0000958C 06010030        	  3296: 	addi.b	#'0',d1
00:00009590 0C010039        	  3297: 	cmpi.b	#'9',d1
00:00009594 6302            	  3298: 	bls.s		.0001
00:00009596 5E01            	  3299: 	addi.b	#7,d1
                            	  3300: .0001:
00:00009598 61000A5E        	  3301: 	bsr			OutputChar
00:0000959C 221F            	  3302: 	move.l	(a7)+,d1
00:0000959E 4E75            	  3303: 	rts
                            	  3304: 
                            	  3305: ;------------------------------------------------------------------------------
                            	  3306: ; Buffer tetra in d0 to buffer pointed to by a6
                            	  3307: ;------------------------------------------------------------------------------
                            	  3308: 
                            	  3309: BufTetra:
00:000095A0 4840            	  3310: 	swap d0
00:000095A2 6102            	  3311: 	bsr BufWyde
00:000095A4 4840            	  3312: 	swap d0
                            	  3313: 
                            	  3314: BufWyde:
00:000095A6 E058            	  3315: 	ror.w #8,d0
00:000095A8 6102            	  3316: 	bsr BufByte
00:000095AA E158            	  3317: 	rol.w #8,d0
                            	  3318: 	
                            	  3319: BufByte:
00:000095AC E818            	  3320: 	ror.b #4,d0
00:000095AE 6102            	  3321: 	bsr BufNybble
00:000095B0 E918            	  3322: 	rol.b #4,d0
                            	  3323: 
                            	  3324: BufNybble:
00:000095B2 2F00            	  3325: 	move.l d0,-(a7)
00:000095B4 0200000F        	  3326: 	andi.b #$F,d0
00:000095B8 06000030        	  3327: 	addi.b #'0',d0
00:000095BC 0C000039        	  3328: 	cmpi.b #'9',d0
00:000095C0 6302            	  3329: 	bls.s .0001
00:000095C2 5E00            	  3330: 	addi.b #7,d0
                            	  3331: .0001:
00:000095C4 1CC0            	  3332: 	move.b d0,(a6)+
00:000095C6 201F            	  3333: 	move.l (a7)+,d0
00:000095C8 4E75            	  3334: 	rts
                            	  3335: 
                            	  3336: ;------------------------------------------------------------------------------
                            	  3337: ;------------------------------------------------------------------------------
                            	  3338: ;
                            	  3339: ;DisplayHexNumber:
                            	  3340: ;	move.w	#$A6A6,leds		; diagnostics
                            	  3341: ;	move.l	#VDGREG,a6
                            	  3342: ;	move.w	#7,d2		; number-1 of digits to display
                            	  3343: ;disphnum1:
                            	  3344: ;	move.b	d1,d0		; get digit into d0.b
                            	  3345: ;	andi.w	#$0f,d0
                            	  3346: ;	cmpi.w	#$09,d0
                            	  3347: ;	bls.s	disphnum2
                            	  3348: ;	addi.w	#7,d0
                            	  3349: ;disphnum2:
                            	  3350: ;	addi.w	#$30,d0	; convert to display char
                            	  3351: ;	move.w	d2,d3		; char count into d3
                            	  3352: ;	asl.w	#3,d3		; scale * 8
                            	  3353: ;disphnum3:
                            	  3354: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  3355: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  3356: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  3357: ;	ext.w	d0						; zero out high order bits
                            	  3358: ;	move.w	d0,$420(a6)			; set char code
                            	  3359: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  3360: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  3361: ;	move.w	d3,$426(a6)			; set x pos
                            	  3362: ;	move.w	#8,$428(a6)			; set y pos
                            	  3363: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  3364: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  3365: ;	ror.l	#4,d1					; rot to next digit
                            	  3366: ;	dbeq	d2,disphnum1
                            	  3367: ;	jmp		(a5)
                            	  3368: 
                            	  3369: 	include "ramtest.x68"

Source: "ramtest.x68"
                            	     1: ;===============================================================================
                            	     2: ;    Perform ram test. (Uses checkerboard testing).
                            	     3: ; 
                            	     4: ;    Local ram, which does not get tested, is used for the stack.
                            	     5: ;===============================================================================
                            	     6: 	code
                            	     7: 	even
                            	     8: DisplayAddr:
00:000095CA 2208            	     9: 	move.l a0,d1
00:000095CC E089            	    10: 	lsr.l #8,d1
00:000095CE E089            	    11: 	lsr.l #8,d1
00:000095D0 E889            	    12: 	lsr.l #4,d1
00:000095D2 04410400        	    13: 	subi.w #1024,d1
00:000095D6 A2C10000        	    14: 	bin2bcd d1
00:000095DA 619E            	    15: 	bsr	DisplayWyde
00:000095DC 618E            	    16: 	bsr DisplaySpace
00:000095DE 123C000D        	    17: 	move.b #CR,d1
00:000095E2 61000A14        	    18: 	bsr OutputChar
00:000095E6 08000083        	    19: 	btst #$83,d0
                            	    20: 	
                            	    21: cmdTestRAM:
                            	    22: ramtest:
00:000095EA 33FCA5A5FD0FFF00	    23: 	move.w	#$A5A5,leds		; diagnostics
00:000095F2 263CAAAAAAAA    	    24:   move.l #$aaaaaaaa,d3
00:000095F8 283C55555555    	    25:   move.l #$55555555,d4
00:000095FE 6134            	    26:   bsr ramtest0
                            	    27:   ; switch checkerboard pattern and repeat test.
00:00009600 C744            	    28:   exg d3,d4
00:00009602 6130            	    29:   bsr ramtest0
                            	    30: 	; Save last ram address in end of memory pointer.
                            	    31: rmtst5:
00:00009604 7025            	    32: 	moveq #37,d0					; lock semaphore
00:00009606 7206            	    33: 	moveq #MEMORY_SEMA,d1
                            	    34: ;	trap #15
00:00009608 207C7FFFFFF8    	    35:   movea.l #$7FFFFFF8,a0
00:0000960E 23C800100004    	    36:   move.l a0,memend
                            	    37: 	; Create very first memory block.
00:00009614 207C3FFFFFF4    	    38:   movea.l #$3FFFFFF4,a0
00:0000961A 23C840000004    	    39:   move.l a0,$40000004		; length of block
00:00009620 23FC465245454000	    40:   move.l #$46524545,$40000000
00:00009628 0000
00:0000962A 7026            	    41: 	moveq #38,d0					; unlock semaphore
00:0000962C 7206            	    42: 	moveq #MEMORY_SEMA,d1
00:0000962E 4E4F            	    43: 	trap #15
00:00009630 6000EB2A        	    44: 	bra Monitor
                            	    45: ;  rts
                            	    46: 
                            	    47: ramtest0:
00:00009634 2003            	    48: 	move.l d3,d0
00:00009636 207C40000000    	    49:   movea.l #$40000000,a0
                            	    50: ;-----------------------------------------------------------
                            	    51: ;   Write checkerboard pattern to ram then read it back to
                            	    52: ; find the highest usable ram address (maybe). This address
                            	    53: ; must be lower than the start of the rom (0xe00000).
                            	    54: ;-----------------------------------------------------------
                            	    55: ramtest1:
00:0000963C 20C3            	    56:   move.l d3,(a0)+
00:0000963E 20C4            	    57:   move.l d4,(a0)+
00:00009640 2208            	    58:   move.l a0,d1
00:00009642 4A41            	    59:   tst.w	d1
00:00009644 6608            	    60:   bne.s rmtst1
00:00009646 6182            	    61:   bsr DisplayAddr
00:00009648 4EB9000008C6    	    62:   bsr CheckForCtrlC
                            	    63: rmtst1:
00:0000964E B1FC7FFFFFF8    	    64:   cmpa.l #$7FFFFFF8,a0
00:00009654 65E6            	    65:   blo.s ramtest1
00:00009656 6100E49A        	    66:   bsr	CRLF
                            	    67: ;------------------------------------------------------
                            	    68: ;   Save maximum useable address for later comparison.
                            	    69: ;------------------------------------------------------
                            	    70: ramtest6:
00:0000965A 33FCA7A7FD0FFF00	    71: 	move.w	#$A7A7,leds		; diagnostics
00:00009662 2448            	    72:   movea.l a0,a2
00:00009664 207C40000000    	    73:   movea.l #$40000000,a0
                            	    74: ;--------------------------------------------
                            	    75: ;   Read back checkerboard pattern from ram.
                            	    76: ;--------------------------------------------
                            	    77: ramtest2
00:0000966A 2A18            	    78:   move.l (a0)+,d5
00:0000966C 2C18            	    79:   move.l (a0)+,d6
00:0000966E B1CA            	    80:   cmpa.l a2,a0
00:00009670 643E            	    81:   bhs.s	ramtest3
00:00009672 2208            	    82:   move.l a0,d1
00:00009674 4A41            	    83:   tst.w	d1
00:00009676 660A            	    84:   bne.s	rmtst2
00:00009678 6100FF50        	    85:   bsr	DisplayAddr
00:0000967C 4EB9000008C6    	    86: 	bsr CheckForCtrlC
                            	    87: rmtst2
00:00009682 BA83            	    88:   cmp.l d3,d5
00:00009684 6604            	    89:   bne.s rmtst3
00:00009686 BC84            	    90:   cmp.l d4,d6
00:00009688 67E0            	    91:   beq.s ramtest2
                            	    92: ;----------------------------------
                            	    93: ; Report error in ram.
                            	    94: ;----------------------------------
                            	    95: rmtst3
00:0000968A 6100E466        	    96: 	bsr CRLF
00:0000968E 7245            	    97: 	moveq	#'E',d1
00:00009690 61000966        	    98: 	bsr OutputChar
00:00009694 6100FED6        	    99: 	bsr DisplaySpace
00:00009698 2208            	   100: 	move.l a0,d1
00:0000969A 6100FED8        	   101: 	bsr DisplayTetra
00:0000969E 6100FECC        	   102: 	bsr DisplaySpace
00:000096A2 2205            	   103: 	move.l d5,d1
00:000096A4 6100FECE        	   104: 	bsr DisplayTetra
00:000096A8 4EB9000008C6    	   105: 	bsr CheckForCtrlC
00:000096AE 60BA            	   106: 	bra ramtest2
                            	   107: ramtest3
00:000096B0 4E75            	   108: 	rts
                            	   109: 

Source: "boot.x68"
                            	  3370: 	include "LoadS19.x68"

Source: "LoadS19.x68"
                            	     1: ;==============================================================================
                            	     2: ; Load an S19 format file
                            	     3: ;==============================================================================
                            	     4: 	code
                            	     5: 	even
                            	     6: cmdLoadS19:
00:000096B2 6100E43E        	     7: 	bsr			CRLF					; move display to next line
00:000096B6 6012            	     8: 	bra			ProcessRec
                            	     9: NextRec:
00:000096B8 610001E4        	    10: 	bsr			sGetChar			; get character from serial port routines
00:000096BC 0C01000A        	    11: 	cmpi.b	#LF,d1				; look for a line-feed
00:000096C0 66F6            	    12: 	bne			NextRec
00:000096C2 123C002E        	    13: 	move.b	#'.',d1				; progress display
00:000096C6 61000930        	    14: 	bsr			OutputChar
                            	    15: ProcessRec:
00:000096CA 4EB9000008C6    	    16: 	bsr			CheckForCtrlC	; check for CTRL-C once per record
00:000096D0 610001CC        	    17: 	bsr			sGetChar
00:000096D4 0C01000D        	    18: 	cmpi.b	#CR,d1
00:000096D8 67F0            	    19: 	beq.s		ProcessRec
00:000096DA 423900100150    	    20: 	clr.b		S19Checksum		; clear the checksum
00:000096E0 1801            	    21: 	move.b	d1,d4
00:000096E2 0C04001A        	    22: 	cmpi.b	#CTRLZ,d4			; CTRL-Z ?
00:000096E6 6700EA74        	    23: 	beq			Monitor
00:000096EA 0C040053        	    24: 	cmpi.b	#'S',d4				; All records must begin with an 'S'
00:000096EE 66C8            	    25: 	bne.s		NextRec
00:000096F0 610001AC        	    26: 	bsr			sGetChar
00:000096F4 1801            	    27: 	move.b	d1,d4
00:000096F6 0C040030        	    28: 	cmpi.b	#'0',d4				; Record type must be between '0' and '9'
00:000096FA 65BC            	    29: 	blo.s		NextRec
00:000096FC 0C040039        	    30: 	cmpi.b	#'9',d4				; d4 = record type
00:00009700 62B6            	    31: 	bhi.s		NextRec
00:00009702 6100019A        	    32: 	bsr			sGetChar			; get byte count for record
00:00009706 6100FE18        	    33: 	bsr			AsciiToHexNybble
00:0000970A 1401            	    34: 	move.b	d1,d2
00:0000970C 61000190        	    35: 	bsr			sGetChar
00:00009710 6100FE0E        	    36: 	bsr			AsciiToHexNybble
00:00009714 E90A            	    37: 	lsl.b		#4,d2
00:00009716 8202            	    38: 	or.b		d2,d1					; d1 = byte count
00:00009718 1601            	    39: 	move.b	d1,d3					; d3 = byte count
00:0000971A D73900100150    	    40: 	add.b		d3,S19Checksum
00:00009720 0C040030        	    41: 	cmpi.b	#'0',d4				; manufacturer ID record, ignore
00:00009724 6792            	    42: 	beq			NextRec
00:00009726 0C040031        	    43: 	cmpi.b	#'1',d4
00:0000972A 670000A2        	    44: 	beq			ProcessS1
00:0000972E 0C040032        	    45: 	cmpi.b	#'2',d4
00:00009732 6700009E        	    46: 	beq			ProcessS2
00:00009736 0C040033        	    47: 	cmpi.b	#'3',d4
00:0000973A 6700009A        	    48: 	beq			ProcessS3
00:0000973E 0C040035        	    49: 	cmpi.b	#'5',d4				; record count record, ignore
00:00009742 6700FF74        	    50: 	beq			NextRec
00:00009746 0C040037        	    51: 	cmpi.b	#'7',d4
00:0000974A 6700008E        	    52: 	beq			ProcessS7
00:0000974E 0C040038        	    53: 	cmpi.b	#'8',d4
00:00009752 67000098        	    54: 	beq			ProcessS8
00:00009756 0C040039        	    55: 	cmpi.b	#'9',d4
00:0000975A 670000A2        	    56: 	beq			ProcessS9
00:0000975E 6000FF58        	    57: 	bra			NextRec
                            	    58: 
                            	    59: pcssxa:
00:00009762 2209            	    60: 	move.l	a1,d1
00:00009764 6100FE0E        	    61: 	bsr			DisplayTetra
00:00009768 123C000D        	    62: 	move.b	#CR,d1
00:0000976C 6100088A        	    63: 	bsr			OutputChar
00:00009770 024300FF        	    64: 	andi.w	#$ff,d3
00:00009774 5343            	    65: 	subi.w	#1,d3			; one less for dbra
                            	    66: .0001:
00:00009776 7400            	    67: 	clr.l		d2
00:00009778 61000124        	    68: 	bsr			sGetChar
00:0000977C 6100FDA2        	    69: 	bsr			AsciiToHexNybble
00:00009780 E98A            	    70: 	lsl.l		#4,d2
00:00009782 8401            	    71: 	or.b		d1,d2
00:00009784 61000118        	    72: 	bsr			sGetChar
00:00009788 6100FD96        	    73: 	bsr			AsciiToHexNybble
00:0000978C E98A            	    74: 	lsl.l		#4,d2
00:0000978E 8401            	    75: 	or.b		d1,d2
00:00009790 D53900100150    	    76: 	add.b		d2,S19Checksum
00:00009796 12C2            	    77: 	move.b	d2,(a1)+			; move byte to memory
00:00009798 51CBFFDC        	    78: 	dbra		d3,.0001
                            	    79: 	; Get the checksum byte
00:0000979C 7400            	    80: 	clr.l		d2
00:0000979E 610000FE        	    81: 	bsr			sGetChar
00:000097A2 6100FD7C        	    82: 	bsr			AsciiToHexNybble
00:000097A6 E98A            	    83: 	lsl.l		#4,d2
00:000097A8 8401            	    84: 	or.b		d1,d2
00:000097AA 610000F2        	    85: 	bsr			sGetChar
00:000097AE 6100FD70        	    86: 	bsr			AsciiToHexNybble
00:000097B2 E98A            	    87: 	lsl.l		#4,d2
00:000097B4 8401            	    88: 	or.b		d1,d2
00:000097B6 4602            	    89: 	eor.b		#$FF,d2
00:000097B8 B43900100150    	    90: 	cmp.b		S19Checksum,d2
00:000097BE 6700FEF8        	    91: 	beq			NextRec
00:000097C2 123C0045        	    92: 	move.b	#'E',d1
00:000097C6 61000830        	    93: 	bsr			OutputChar
00:000097CA 6000FEEC        	    94: 	bra			NextRec
                            	    95: 
                            	    96: ProcessS1:
00:000097CE 6140            	    97: 	bsr			S19Get16BitAddress
00:000097D0 6090            	    98: 	bra			pcssxa
                            	    99: ProcessS2:
00:000097D2 614A            	   100: 	bsr			S19Get24BitAddress
00:000097D4 608C            	   101: 	bra			pcssxa
                            	   102: ProcessS3:
00:000097D6 6152            	   103: 	bsr			S19Get32BitAddress
00:000097D8 6088            	   104: 	bra			pcssxa
                            	   105: ProcessS7:
00:000097DA 614E            	   106: 	bsr			S19Get32BitAddress
00:000097DC 23C900040008    	   107: 	move.l	a1,S19StartAddress
00:000097E2 4EB9000006CC    	   108: 	bsr			_KeybdInit
00:000097E8 6000E972        	   109: 	bra			Monitor
                            	   110: ProcessS8:
00:000097EC 6130            	   111: 	bsr			S19Get24BitAddress
00:000097EE 23C900040008    	   112: 	move.l	a1,S19StartAddress
00:000097F4 4EB9000006CC    	   113: 	bsr			_KeybdInit
00:000097FA 6000E960        	   114: 	bra			Monitor
                            	   115: ProcessS9:
00:000097FE 6110            	   116: 	bsr			S19Get16BitAddress
00:00009800 23C900040008    	   117: 	move.l	a1,S19StartAddress
00:00009806 4EB9000006CC    	   118: 	bsr			_KeybdInit
00:0000980C 6000E94E        	   119: 	bra			Monitor
                            	   120: 
                            	   121: S19Get16BitAddress:
00:00009810 7400            	   122: 	clr.l		d2
00:00009812 6100008A        	   123: 	bsr			sGetChar
00:00009816 6100FD08        	   124: 	bsr			AsciiToHexNybble
00:0000981A 1401            	   125: 	move.b	d1,d2
00:0000981C 603E            	   126: 	bra			S1932b
                            	   127: 
                            	   128: S19Get24BitAddress:
00:0000981E 7400            	   129: 	clr.l		d2
00:00009820 617C            	   130: 	bsr			sGetChar
00:00009822 6100FCFC        	   131: 	bsr			AsciiToHexNybble
00:00009826 1401            	   132: 	move.b	d1,d2
00:00009828 601E            	   133: 	bra			S1932a
                            	   134: 
                            	   135: S19Get32BitAddress:
00:0000982A 7400            	   136: 	clr.l		d2
00:0000982C 6170            	   137: 	bsr			sGetChar
00:0000982E 6100FCF0        	   138: 	bsr			AsciiToHexNybble
00:00009832 1401            	   139: 	move.b	d1,d2
00:00009834 6168            	   140: 	bsr			sGetChar
00:00009836 6100FCE8        	   141: 	bsr			AsciiToHexNybble
00:0000983A E98A            	   142: 	lsl.l		#4,d2
00:0000983C 8401            	   143: 	or.b		d1,d2
00:0000983E 615E            	   144: 	bsr			sGetChar
00:00009840 6100FCDE        	   145: 	bsr			AsciiToHexNybble
00:00009844 E98A            	   146: 	lsl.l		#4,d2
00:00009846 8401            	   147: 	or.b		d1,d2
                            	   148: S1932a:
00:00009848 6154            	   149: 	bsr			sGetChar
00:0000984A 6100FCD4        	   150: 	bsr			AsciiToHexNybble
00:0000984E E98A            	   151: 	lsl.l		#4,d2
00:00009850 8401            	   152: 	or.b		d1,d2
00:00009852 614A            	   153: 	bsr			sGetChar
00:00009854 6100FCCA        	   154: 	bsr			AsciiToHexNybble
00:00009858 E98A            	   155: 	lsl.l		#4,d2
00:0000985A 8401            	   156: 	or.b		d1,d2
                            	   157: S1932b:
00:0000985C 6140            	   158: 	bsr			sGetChar
00:0000985E 6100FCC0        	   159: 	bsr			AsciiToHexNybble
00:00009862 E98A            	   160: 	lsl.l		#4,d2
00:00009864 8401            	   161: 	or.b		d1,d2
00:00009866 6136            	   162: 	bsr			sGetChar
00:00009868 6100FCB6        	   163: 	bsr			AsciiToHexNybble
00:0000986C E98A            	   164: 	lsl.l		#4,d2
00:0000986E 8401            	   165: 	or.b		d1,d2
00:00009870 612C            	   166: 	bsr			sGetChar
00:00009872 6100FCAC        	   167: 	bsr			AsciiToHexNybble
00:00009876 E98A            	   168: 	lsl.l		#4,d2
00:00009878 8401            	   169: 	or.b		d1,d2
00:0000987A 7800            	   170: 	clr.l		d4
00:0000987C 2242            	   171: 	move.l	d2,a1
                            	   172: 	; Add bytes from address value to checksum
00:0000987E D53900100150    	   173: 	add.b		d2,S19Checksum
00:00009884 E08A            	   174: 	lsr.l		#8,d2
00:00009886 D53900100150    	   175: 	add.b		d2,S19Checksum
00:0000988C E08A            	   176: 	lsr.l		#8,d2
00:0000988E D53900100150    	   177: 	add.b		d2,S19Checksum
00:00009894 E08A            	   178: 	lsr.l		#8,d2
00:00009896 D53900100150    	   179: 	add.b		d2,S19Checksum
00:0000989C 4E75            	   180: 	rts
                            	   181: 
                            	   182: ;------------------------------------------------------------------------------
                            	   183: ; Get a character from auxillary input. Waiting for a character is limited to
                            	   184: ; 32000 tries. If a character is not available within the limit, then a return
                            	   185: ; to the monitor is done.
                            	   186: ;
                            	   187: ;	Parameters:
                            	   188: ;		none
                            	   189: ; Returns:
                            	   190: ;		d1 = character from receive buffer or -1 if no char available
                            	   191: ;------------------------------------------------------------------------------
                            	   192: 
                            	   193: sGetChar:
00:0000989E 48E7A000        	   194: 	movem.l	d0/d2,-(a7)
00:000098A2 343C7D00        	   195: 	move.w	#32000,d2
                            	   196: .0001:
00:000098A6 7024            	   197: 	moveq		#36,d0				; serial get char from buffer
00:000098A8 4E4F            	   198: 	trap		#15
00:000098AA 4A41            	   199: 	tst.w		d1						; was there a char available?
00:000098AC 6A0C            	   200: 	bpl.s		.0002
00:000098AE 51CAFFF6        	   201: 	dbra		d2,.0001			; no - try again
00:000098B2 4CDF0005        	   202: 	movem.l	(a7)+,d0/d2
                            	   203: .0003:
                            	   204: ;	bsr			_KeybdInit
00:000098B6 6000E8A4        	   205: 	bra			Monitor				; ran out of tries
                            	   206: .0002:
00:000098BA 4CDF0005        	   207: 	movem.l	(a7)+,d0/d2
00:000098BE 0C01001A        	   208: 	cmpi.b	#CTRLZ,d1			; receive end of file?
00:000098C2 67F2            	   209: 	beq			.0003
00:000098C4 4E75            	   210: 	rts
                            	   211: 
                            	   212: 

Source: "boot.x68"
                            	  3371: 	
                            	  3372: AudioInputTest:
00:000098C6 4E75            	  3373: 	rts
                            	  3374: BouncingBalls:
00:000098C8 4E75            	  3375: 	rts
                            	  3376: GraphicsDemo:
00:000098CA 4E75            	  3377: 	rts
                            	  3378: ClearScreen:
00:000098CC 7E02            	  3379: 	move.l #2,d7
00:000098CE 7C0C            	  3380: 	move.l #DEV_CLEAR,d6
00:000098D0 4E40            	  3381: 	trap #0
00:000098D2 4E75            	  3382: 	rts
                            	  3383: 
                            	  3384: ;------------------------------------------------------------------------------
                            	  3385: ; Reverse the order of bytes in d1.
                            	  3386: ;------------------------------------------------------------------------------
                            	  3387: 
                            	  3388: rbo:
00:000098D4 E159            	  3389: 	rol.w	#8,d1
00:000098D6 4841            	  3390: 	swap d1
00:000098D8 E159            	  3391: 	rol.w	#8,d1
00:000098DA 4E75            	  3392: 	rts
                            	  3393: 
                            	  3394: ;===============================================================================
                            	  3395: ;===============================================================================
                            	  3396: 
                            	  3397: SPI_MASTER_VERSION_REG equ 0
                            	  3398: SPI_MASTER_CTRL_REG	equ 1
                            	  3399: SPI_TRANS_TYPE_REG equ 2
                            	  3400: SPI_TRANS_CTRL_REG equ 3
                            	  3401: SPI_TRANS_STS_REG equ 4
                            	  3402: SPI_TRANS_ERR_REG equ 5
                            	  3403: SPI_DIRECT_ACCESS_DATA_REG equ 6
                            	  3404: SPI_ADDR_70 equ 7
                            	  3405: SPI_ADDR_158 equ 8
                            	  3406: SPI_ADDR_2316 equ 9
                            	  3407: SPI_ADDR_3124 equ 10
                            	  3408: SPI_CLK_DEL_REG equ 11
                            	  3409: SPI_RX_FIFO_DATA_REG equ 16
                            	  3410: SPI_RX_FIFO_DATA_COUNT_MSB equ 18
                            	  3411: SPI_RX_FIFO_DATA_COUNT_LSB equ 19
                            	  3412: SPI_RX_FIFO_CTRL_REG equ 20
                            	  3413: SPI_TX_FIFO_DATA_REG equ 32
                            	  3414: SPI_TX_FIFO_CTRL_REG equ 36
                            	  3415: 
                            	  3416: SPI_DIRECT_ACCESS equ	0
                            	  3417: SPI_INIT_SD equ 1
                            	  3418: SPI_RW_READ_SD_BLOCK	equ 2
                            	  3419: SPI_RW_WRITE_SD_BLOCK	equ 3
                            	  3420: 
                            	  3421: ; Setup the SPI device.
                            	  3422: ;
                            	  3423: ; Parameters:
                            	  3424: ;		d1 = pointer to SPI master device (handle)
                            	  3425: ; Returns:
                            	  3426: ;		d0 = E_Ok if successful
                            	  3427: ;				 E_NoDev is card not present
                            	  3428: 
                            	  3429: spi_setup:
                            	  3430: spi_init:
                            	  3431: init_spi:
00:000098DC 48E74040        	  3432: 	movem.l d1/a1,-(sp)
                            	  3433: 	macUnhmash d1
00:000098E0 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:000098E6 4841            	     2M 	swap d1
00:000098E8 2241            	  3434: 	move.l d1,a1
                            	  3435: 	; Turn on the power (negate reset) to the card and reset the logic
00:000098EA 137C00010001    	  3436: 	move.b #$01,SPI_MASTER_CTRL_REG(a1)
00:000098F0 082900020001    	  3437: 	btst #2,SPI_MASTER_CTRL_REG(a1)		; ensure there is a card present
00:000098F6 6740            	  3438: 	beq.s .0005
                            	  3439: 	; reset fifos
00:000098F8 137C00010024    	  3440: 	move.b #1,SPI_TX_FIFO_CTRL_REG(a1)
00:000098FE 137C00010014    	  3441: 	move.b #1,SPI_RX_FIFO_CTRL_REG(a1)
00:00009904 137C00010002    	  3442: 	move.b #SPI_INIT_SD,SPI_TRANS_TYPE_REG(a1)
00:0000990A 137C00010003    	  3443: 	move.b #1,SPI_TRANS_CTRL_REG(a1)
                            	  3444: .0001
00:00009910 4EB9000008C6    	  3445: 	bsr CheckForCtrlC
00:00009916 082900000004    	  3446: 	btst #0,SPI_TRANS_STS_REG(a1)	
00:0000991C 66F2            	  3447: 	bne.s .0001
                            	  3448: .0004
00:0000991E 10290005        	  3449: 	move.b SPI_TRANS_ERR_REG(a1),d0
00:00009922 02000003        	  3450: 	andi.b #3,d0
00:00009926 6608            	  3451: 	bne.s .err
00:00009928 4CDF0202        	  3452: 	movem.l (sp)+,d1/a1
00:0000992C 7000            	  3453: 	moveq #E_Ok,d0
00:0000992E 4E75            	  3454: 	rts
                            	  3455: .err
00:00009930 4CDF0202        	  3456: 	movem.l (sp)+,d1/a1
00:00009934 7027            	  3457: 	moveq #E_InitErr,d0
00:00009936 4E75            	  3458: 	rts
                            	  3459: .0005
00:00009938 4CDF0202        	  3460: 	movem.l (sp)+,d1/a1
00:0000993C 7021            	  3461: 	moveq #E_NoDev,d0
00:0000993E 4E75            	  3462: 	rts
                            	  3463: 
                            	  3464: ;		d1 = pointer to SPI master device (handle)
                            	  3465: ;		d2 = byte to write
                            	  3466: ;
                            	  3467: spi_send_byte:
00:00009940 48E74040        	  3468: 	movem.l d1/a1,-(sp)
00:00009944 2241            	  3469: 	move.l d1,a1
                            	  3470: 	macUnhmash d1
00:00009946 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:0000994C 4841            	     2M 	swap d1
                            	  3471: .0001
00:0000994E 4EB9000008C6    	  3472: 	bsr CheckForCtrlC
00:00009954 083800000004    	  3473: 	btst #0,SPI_TRANS_STS_REG
00:0000995A 66F2            	  3474: 	bne.s .0001
00:0000995C 13420006        	  3475: 	move.b d2,SPI_DIRECT_ACCESS_DATA_REG(a1)
00:00009960 42290002        	  3476: 	move.b #0,SPI_TRANS_TYPE_REG(a1)
00:00009964 137C00010003    	  3477: 	move.b #1,SPI_TRANS_CTRL_REG(a1)
00:0000996A 4CDF0202        	  3478: 	movem.l (sp)+,d1/a1
00:0000996E 4E75            	  3479: 	rts
                            	  3480: 
                            	  3481: ; Parameters:
                            	  3482: ;		d1 = pointer to SPI master device (handle)
                            	  3483: ;		d2 = command
                            	  3484: ;		d3 = command arg
                            	  3485: ;		d4 = checksum
                            	  3486: 
                            	  3487: spi_send_cmd:
00:00009970 48E72840        	  3488: 	movem.l d2/d4/a1,-(sp)
00:00009974 00020040        	  3489: 	ori.b #$40,d2
00:00009978 61C6            	  3490: 	bsr spi_send_byte
00:0000997A 2403            	  3491: 	move.l d3,d2
00:0000997C E19A            	  3492: 	rol.l #8,d2
00:0000997E 61C0            	  3493: 	bsr spi_send_byte
00:00009980 E19A            	  3494: 	rol.l #8,d2
00:00009982 61BC            	  3495: 	bsr spi_send_byte
00:00009984 E19A            	  3496: 	rol.l #8,d2
00:00009986 61B8            	  3497: 	bsr spi_send_byte
00:00009988 E19A            	  3498: 	rol.l #8,d2
00:0000998A 61B4            	  3499: 	bsr spi_send_byte
00:0000998C 1404            	  3500: 	move.b d4,d2
00:0000998E 61B0            	  3501: 	bsr spi_send_byte
00:00009990 383C001F        	  3502: 	move.w #31,d4
                            	  3503: .0002
00:00009994 143C00FF        	  3504: 	move.b #$FF,d2
00:00009998 61A6            	  3505: 	bsr spi_send_byte
                            	  3506: 	macUnhmash d1
00:0000999A 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:000099A0 4841            	     2M 	swap d1
00:000099A2 2241            	  3507: 	move.l d1,a1
00:000099A4 14290006        	  3508: 	move.b SPI_DIRECT_ACCESS_DATA_REG(a1),d2
                            	  3509: 	macHmash d1
00:000099A8 4841            	     1M 	swap d1
00:000099AA 0A8156791123    	     2M 	eori.l #DEV_HMASH,d1
00:000099B0 08020007        	  3510: 	btst.l #7,d2
00:000099B4 6704            	  3511: 	beq.s .0001
00:000099B6 51CCFFDC        	  3512: 	dbra d4,.0002
                            	  3513: .0001	
00:000099BA 1202            	  3514: 	move.b d2,d1
00:000099BC 4CDF0214        	  3515: 	movem.l (sp)+,d2/d4/a1
00:000099C0 4200            	  3516: 	move.b #E_Ok,d0
00:000099C2 4E75            	  3517: 	rts
                            	  3518: 
                            	  3519: ;
                            	  3520: ;		d1 = pointer to SPI master device (handle)
                            	  3521: ;		d2 = block number to write
                            	  3522: ;
                            	  3523: spi_setpos:
                            	  3524: spi_set_block_address:
00:000099C4 48E74040        	  3525: 	movem.l d1/a1,-(sp)
                            	  3526: 	macUnhmash d1
00:000099C8 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:000099CE 4841            	     2M 	swap d1
00:000099D0 2241            	  3527: 	move.l d1,a1
                            	  3528: 	; set the block read address
00:000099D2 082900010001    	  3529: 	btst #1,SPI_MASTER_CTRL_REG(a1)		; check for high-density card
00:000099D8 6604            	  3530: 	bne.s .0001
00:000099DA E18A            	  3531: 	lsl.l #8,d2										; for a low density card the address is 
00:000099DC E38A            	  3532: 	lsl.l #1,d2										; specified directly, is not a block address
                            	  3533: .0001:
00:000099DE 13420007        	  3534: 	move.b d2,SPI_ADDR_70(a1)
00:000099E2 E09A            	  3535: 	ror.l #8,d2
00:000099E4 13420008        	  3536: 	move.b d2,SPI_ADDR_158(a1)
00:000099E8 E09A            	  3537: 	ror.l #8,d2
00:000099EA 13420009        	  3538: 	move.b d2,SPI_ADDR_2316(a1)
00:000099EE E09A            	  3539: 	ror.l #8,d2
00:000099F0 1342000A        	  3540: 	move.b d2,SPI_ADDR_3124(a1)
00:000099F4 E09A            	  3541: 	ror.l #8,d2
00:000099F6 4CDF0202        	  3542: 	movem.l (sp)+,d1/a1
00:000099FA 4E75            	  3543: 	rts
                            	  3544: 
                            	  3545: ; Parameters:
                            	  3546: ;		d1 = pointer to SPI master device (handle)
                            	  3547: ;		d2 = block number to read
                            	  3548: ;		d3 = buffer to put read data in
                            	  3549: ;
                            	  3550: ; Returns:
                            	  3551: ;		d0 = E_ReadError if there was a read error
                            	  3552: ;		     E_Ok if successful
                            	  3553: ;
                            	  3554: spi_read_block:
00:000099FC 48E740C0        	  3555: 	movem.l d1/a0/a1,-(sp)
                            	  3556: 	macUnhmash d1
00:00009A00 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:00009A06 4841            	     2M 	swap d1
00:00009A08 2241            	  3557: 	move.l d1,a1
00:00009A0A 2043            	  3558: 	move.l d3,a0
                            	  3559: 	; set the block read address
00:00009A0C 61B6            	  3560: 	bsr spi_set_block_address
00:00009A0E 137C00020002    	  3561: 	move.b #SPI_RW_READ_SD_BLOCK,SPI_TRANS_TYPE_REG(a1)	; set read transaction
00:00009A14 137C00010003    	  3562: 	move.b #1,SPI_TRANS_CTRL_REG(a1)	; start transaction
                            	  3563: .0002
00:00009A1A 4EB9000008C6    	  3564: 	bsr CheckForCtrlC
00:00009A20 082900000004    	  3565: 	btst.b #0,SPI_TRANS_STS_REG(a1)		; wait for transaction not busy
00:00009A26 66F2            	  3566: 	bne.s .0002
00:00009A28 10290005        	  3567: 	move.b SPI_TRANS_ERR_REG(a1),d0
00:00009A2C 0200000C        	  3568: 	andi.b #$0c,d0
00:00009A30 6614            	  3569: 	bne.s .readerr
                            	  3570: 	; now read the data from the fifo
00:00009A32 303C0200        	  3571: 	move.w #512,d0	
                            	  3572: .0003
00:00009A36 10E90010        	  3573: 	move.b SPI_RX_FIFO_DATA_REG(a1),(a0)+
00:00009A3A 51C8FFFA        	  3574: 	dbra d0,.0003
00:00009A3E 4CDF0302        	  3575: 	movem.l (sp)+,d1/a0/a1
00:00009A42 7000            	  3576: 	moveq #E_Ok,d0
00:00009A44 4E75            	  3577: 	rts
                            	  3578: .readerr:
00:00009A46 4CDF0302        	  3579: 	movem.l (sp)+,d1/a0/a1
00:00009A4A 7023            	  3580: 	moveq #E_ReadError,d0
00:00009A4C 4E75            	  3581: 	rts
                            	  3582: 
                            	  3583: ; Parameters:
                            	  3584: ;		d1 = pointer to SPI master device (handle)
                            	  3585: ;		d2 = block number to write
                            	  3586: ;		d3 = buffer to output write data from
                            	  3587: ;
                            	  3588: ; Returns:
                            	  3589: ;		d0 = E_WriteError if there was a write error
                            	  3590: ;		     E_Ok if successful
                            	  3591: ;
                            	  3592: spi_write_block:
00:00009A4E 48E740C0        	  3593: 	movem.l d1/a0/a1,-(sp)
                            	  3594: 	macUnhmash d1
00:00009A52 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:00009A58 4841            	     2M 	swap d1
00:00009A5A 2241            	  3595: 	move.l d1,a1
00:00009A5C 2043            	  3596: 	move.l d3,a0
                            	  3597: 	; First load up the write fifo with data
00:00009A5E 303C0200        	  3598: 	move.w #512,d0
                            	  3599: .0001
00:00009A62 13580020        	  3600: 	move.b (a0)+,SPI_TX_FIFO_DATA_REG(a1)
00:00009A66 51C8FFFA        	  3601: 	dbra d0,.0001	
00:00009A6A 6100FF58        	  3602: 	bsr spi_set_block_address
00:00009A6E 137C00030002    	  3603: 	move.b #SPI_RW_WRITE_SD_BLOCK,SPI_TRANS_TYPE_REG(a1)	; set write transaction
00:00009A74 137C00010003    	  3604: 	move.b #1,SPI_TRANS_CTRL_REG(a1)	; start transaction
                            	  3605: .0002
00:00009A7A 4EB9000008C6    	  3606: 	bsr CheckForCtrlC
00:00009A80 082900000004    	  3607: 	btst.b #0,SPI_TRANS_STS_REG(a1)		; wait for transaction not busy
00:00009A86 66F2            	  3608: 	bne.s .0002
00:00009A88 10290005        	  3609: 	move.b SPI_TRANS_ERR_REG(a1),d0
00:00009A8C 02000030        	  3610: 	andi.b #$30,d0
00:00009A90 6608            	  3611: 	bne.s .writeerr
00:00009A92 4CDF0302        	  3612: 	movem.l (sp)+,d1/a0/a1
00:00009A96 7000            	  3613: 	moveq #E_Ok,d0
00:00009A98 4E75            	  3614: 	rts
                            	  3615: .writeerr
00:00009A9A 4CDF0302        	  3616: 	movem.l (sp)+,d1/a0/a1
00:00009A9E 7024            	  3617: 	moveq #E_WriteError,d0
00:00009AA0 4E75            	  3618: 	rts
                            	  3619: 
                            	  3620: ; Parameters:
                            	  3621: ;		d1 = pointer to SPI master device (handle)
                            	  3622: ;		d2 = first block number to read
                            	  3623: ;		d3 = address of buffer
                            	  3624: ;		d4 = length of buffer
                            	  3625: ;
                            	  3626: ; Returns:
                            	  3627: ;		d0 = E_WriteError if there was a write error
                            	  3628: ;		     E_Ok if successful
                            	  3629: ;
                            	  3630: spi_getbuf:
00:00009AA2 48E778C0        	  3631: 	movem.l d1/d2/d3/d4/a0/a1,-(sp)
                            	  3632: 	macUnhmash d1
00:00009AA6 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:00009AAC 4841            	     2M 	swap d1
00:00009AAE 2241            	  3633: 	move.l d1,a1					; a1 = pointer to SPI device
00:00009AB0 2043            	  3634: 	move.l d3,a0					; a0 = address of buffer
00:00009AB2 2202            	  3635: 	move.l d2,d1					; d1 = block number to write
00:00009AB4 D8BC000001FF    	  3636: 	add.l #511,d4					; round length up to even block number
00:00009ABA 0284FFFFFE00    	  3637: 	andi.l #$FFFFFE00,d4
00:00009AC0 5384            	  3638: 	subq.l #1,d4					; loop the correct number of times
                            	  3639: .0001
00:00009AC2 6100FF38        	  3640: 	bsr spi_read_block
00:00009AC6 4A00            	  3641: 	tst.b d0
00:00009AC8 6612            	  3642: 	bne.s .err
00:00009ACA 41E80200        	  3643: 	lea 512(a0),a0				; advance pointer to next block
00:00009ACE 5281            	  3644: 	addq.l #1,d1					; advance block number
00:00009AD0 51CCFFF0        	  3645: 	dbra d4,.0001
00:00009AD4 4CDF031E        	  3646: 	movem.l (sp)+,d1/d2/d3/d4/a0/a1
00:00009AD8 7000            	  3647: 	moveq #E_Ok,d0
00:00009ADA 4E75            	  3648: 	rts
                            	  3649: .err
00:00009ADC 4CDF031E        	  3650: 	movem.l (sp)+,d1/d2/d3/d4/a0/a1
00:00009AE0 4E75            	  3651: 	rts
                            	  3652: 
                            	  3653: ; Parameters:
                            	  3654: ;		d1 = pointer to SPI master device (handle)
                            	  3655: ;		d2 = first block number to write
                            	  3656: ;		d3 = address of buffer
                            	  3657: ;		d4 = length of buffer
                            	  3658: ;
                            	  3659: ; Returns:
                            	  3660: ;		d0 = E_WriteError if there was a write error
                            	  3661: ;		     E_Ok if successful
                            	  3662: ;
                            	  3663: spi_putbuf:
00:00009AE2 48E778C0        	  3664: 	movem.l d1/d2/d3/d4/a0/a1,-(sp)
                            	  3665: 	macUnhmash d1
00:00009AE6 0A8156791123    	     1M 	eori.l #DEV_HMASH,d1
00:00009AEC 4841            	     2M 	swap d1
00:00009AEE 2241            	  3666: 	move.l d1,a1					; a1 = pointer to SPI device
00:00009AF0 2043            	  3667: 	move.l d3,a0					; a0 = address of buffer
00:00009AF2 2202            	  3668: 	move.l d2,d1					; d1 = block number to write
00:00009AF4 D8BC000001FF    	  3669: 	add.l #511,d4					; round length up to even block number
00:00009AFA 0284FFFFFE00    	  3670: 	andi.l #$FFFFFE00,d4
00:00009B00 5384            	  3671: 	subq.l #1,d4					; loop the correct number of times
                            	  3672: .0001
00:00009B02 6100FF4A        	  3673: 	bsr spi_write_block
00:00009B06 4A00            	  3674: 	tst.b d0
00:00009B08 6612            	  3675: 	bne.s .err
00:00009B0A 41E80200        	  3676: 	lea 512(a0),a0				; advance pointer to next block
00:00009B0E 5281            	  3677: 	addq.l #1,d1					; advance block number
00:00009B10 51CCFFF0        	  3678: 	dbra d4,.0001
00:00009B14 4CDF031E        	  3679: 	movem.l (sp)+,d1/d2/d3/d4/a0/a1
00:00009B18 7000            	  3680: 	moveq #E_Ok,d0
00:00009B1A 4E75            	  3681: 	rts
                            	  3682: .err
00:00009B1C 4CDF031E        	  3683: 	movem.l (sp)+,d1/d2/d3/d4/a0/a1
00:00009B20 4E75            	  3684: 	rts
                            	  3685: 
                            	  3686: ;===============================================================================
                            	  3687: ; Generic I2C routines
                            	  3688: ;
                            	  3689: ; a6 points to I2C device
                            	  3690: ;===============================================================================
                            	  3691: 
                            	  3692: 	even
                            	  3693: ; i2c
                            	  3694: i2c_setup:
                            	  3695: ;		lea		I2C,a6				
                            	  3696: ;		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
                            	  3697: ;		move.w	#0,I2C_PREH(a6)
                            	  3698: init_i2c:
                            	  3699: ;	lea	I2C2,a6				
00:00009B22 422E0002        	  3700: 	move.b #0,I2C_CTRL(a6)		; make sure I2C disabled
00:00009B26 1CBC0031        	  3701: 	move.b #49,I2C_PREL(a6)		; setup prescale for 400kHz clock, 100MHz master
00:00009B2A 422E0001        	  3702: 	move.b #0,I2C_PREH(a6)
00:00009B2E 4E75            	  3703: 	rts
                            	  3704: 
                            	  3705: ; Wait for I2C transfer to complete
                            	  3706: ;
                            	  3707: ; Parameters
                            	  3708: ; 	a6 - I2C controller base address
                            	  3709: 
                            	  3710: i2c_wait_tip:
00:00009B30 2F00            	  3711: 	move.l d0,-(a7)
                            	  3712: .0001
00:00009B32 4EB9000008C6    	  3713: 	bsr CheckForCtrlC				
00:00009B38 102E0004        	  3714: 	move.b I2C_STAT(a6),d0		; wait for tip to clear
00:00009B3C 13FC0003FD0FFF00	  3715: 	move.b #3,leds
00:00009B44 08000001        	  3716: 	btst #1,d0
00:00009B48 66E8            	  3717: 	bne.s	.0001
00:00009B4A 201F            	  3718: 	move.l (a7)+,d0
00:00009B4C 4E75            	  3719: 	rts
                            	  3720: 
                            	  3721: ; Parameters
                            	  3722: ;	d0.b - data to transmit
                            	  3723: ;	d1.b - command value
                            	  3724: ;	a6	 - I2C controller base address
                            	  3725: ;
                            	  3726: i2c_wr_cmd:
00:00009B4E 13FC0002FD0FFF00	  3727: 	move.b #2,leds
00:00009B56 1D400003        	  3728: 	move.b d0,I2C_TXR(a6)
00:00009B5A 1D410004        	  3729: 	move.b d1,I2C_CMD(a6)
00:00009B5E 61D0            	  3730: 	bsr	i2c_wait_tip
00:00009B60 102E0004        	  3731: 	move.b I2C_STAT(a6),d0
00:00009B64 4E75            	  3732: 	rts
                            	  3733: 
                            	  3734: i2c_xmit1:
00:00009B66 2F00            	  3735: 	move.l d0,-(a7)
00:00009B68 1D7C00010002    	  3736: 	move.b #1,I2C_CTRL(a6)		; enable the core
00:00009B6E 7076            	  3737: 	moveq	#$76,d0				; set slave address = %0111011
00:00009B70 323C0090        	  3738: 	move.w #$90,d1				; set STA, WR
00:00009B74 61D8            	  3739: 	bsr i2c_wr_cmd
00:00009B76 610C            	  3740: 	bsr	i2c_wait_rx_nack
00:00009B78 201F            	  3741: 	move.l (a7)+,d0
00:00009B7A 323C0050        	  3742: 	move.w #$50,d1				; set STO, WR
00:00009B7E 61CE            	  3743: 	bsr i2c_wr_cmd
00:00009B80 61000002        	  3744: 	bsr	i2c_wait_rx_nack
                            	  3745: 
                            	  3746: i2c_wait_rx_nack:
00:00009B84 2F00            	  3747: 	move.l d0,-(a7)
                            	  3748: .0001						
00:00009B86 13FC0014FD0FFF00	  3749: 	move.b #20,leds
00:00009B8E 4EB9000008C6    	  3750: 	bsr CheckForCtrlC
00:00009B94 102E0004        	  3751: 	move.b I2C_STAT(a6),d0		; wait for RXack = 0
00:00009B98 08000007        	  3752: 	btst #7,d0
00:00009B9C 66E8            	  3753: 	bne.s	.0001
00:00009B9E 201F            	  3754: 	move.l (a7)+,d0
00:00009BA0 4E75            	  3755: 	rts
                            	  3756: 
                            	  3757: ;===============================================================================
                            	  3758: ; Realtime clock routines
                            	  3759: ;===============================================================================
                            	  3760: 
                            	  3761: rtc_read:
00:00009BA2 13FC0001FD0FFF00	  3762: 	move.b #1,leds
00:00009BAA 48E76006        	  3763: 	movem.l d1/d2/a5/a6,-(sp)
00:00009BAE 2C7CFD069010    	  3764: 	movea.l	#I2C2,a6
00:00009BB4 4BF900100200    	  3765: 	lea	RTCBuf,a5
00:00009BBA 7400            	  3766: 	moveq #0,d2
                            	  3767: .0002	
00:00009BBC 1D7C00800002    	  3768: 	move.b	#$80,I2C_CTRL(a6)	; enable I2C
00:00009BC2 103C00DE        	  3769: 	move.b	#$DE,d0				; read address, write op
00:00009BC6 123C0090        	  3770: 	move.b	#$90,d1				; STA + wr bit
00:00009BCA 6182            	  3771: 	bsr	i2c_wr_cmd
00:00009BCC 13FC0004FD0FFF00	  3772: 	move.b #4,leds
00:00009BD4 4A00            	  3773: 	tst.b	d0
00:00009BD6 6B7A            	  3774: 	bmi	.rxerr
00:00009BD8 1002            	  3775: 	move.b d2,d0					; address zero
00:00009BDA 123C0010        	  3776: 	move.b #$10,d1				; wr bit
00:00009BDE 6100FF6E        	  3777: 	bsr	i2c_wr_cmd
00:00009BE2 13FC0005FD0FFF00	  3778: 	move.b #5,leds
00:00009BEA 4A00            	  3779: 	tst.b	d0
00:00009BEC 6B64            	  3780: 	bmi	.rxerr
00:00009BEE 103C00DF        	  3781: 	move.b #$DF,d0				; read address, read op
00:00009BF2 123C0090        	  3782: 	move.b #$90,d1				; STA + wr bit
00:00009BF6 6100FF56        	  3783: 	bsr i2c_wr_cmd
00:00009BFA 13FC0006FD0FFF00	  3784: 	move.b #6,leds
00:00009C02 4A00            	  3785: 	tst.b	d0
00:00009C04 6B4C            	  3786: 	bmi	.rxerr
                            	  3787: 
                            	  3788: ;	move.w #$00,d2
                            	  3789: .0001
00:00009C06 13FC0007FD0FFF00	  3790: 	move.b #7,leds
00:00009C0E 4EB9000008C6    	  3791: 	bsr CheckForCtrlC
00:00009C14 1D7C00200004    	  3792: 	move.b #$20,I2C_CMD(a6)	; rd bit
00:00009C1A 6100FF14        	  3793: 	bsr	i2c_wait_tip
00:00009C1E 6100FF64        	  3794: 	bsr	i2c_wait_rx_nack
00:00009C22 102E0004        	  3795: 	move.b I2C_STAT(a6),d0
00:00009C26 4A00            	  3796: 	tst.b	d0
00:00009C28 6B28            	  3797: 	bmi	.rxerr
00:00009C2A 102E0003        	  3798: 	move.b I2C_RXR(a6),d0
00:00009C2E 1B802000        	  3799: 	move.b d0,(a5,d2.w)
00:00009C32 5242            	  3800: 	addi.w #1,d2
                            	  3801: ;	cmpi.w #$60,d2
                            	  3802: ;	bne	.0002
00:00009C34 1D7C00680004    	  3803: 	move.b #$68,I2C_CMD(a6)	; STO, rd bit + nack
00:00009C3A 6100FEF4        	  3804: 	bsr i2c_wait_tip
00:00009C3E 0C420060        	  3805: 	cmpi.w #$60,d2
00:00009C42 6600FF78        	  3806: 	bne	.0002
                            	  3807: ;	bsr i2c_wait_rx_nack
                            	  3808: ;	move.b I2C_STAT(a6),d0
                            	  3809: ;	tst.b	d0
                            	  3810: ;	bmi	.rxerr
                            	  3811: ;	move.b I2C_RXR(a6),d0
                            	  3812: ;	move.b d0,(a5,d2.w)
                            	  3813: ;	bsr i2c_wait_tip
00:00009C46 422E0002        	  3814: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return 0
00:00009C4A 4CDF6006        	  3815: 	movem.l (sp)+,d1/d2/a5/a6
00:00009C4E 7000            	  3816: 	moveq	#0,d0
00:00009C50 4E75            	  3817: 	rts
                            	  3818: .rxerr
00:00009C52 6100FEDC        	  3819: 	bsr i2c_wait_tip
00:00009C56 422E0002        	  3820: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return status
00:00009C5A 4CDF6006        	  3821: 	movem.l (sp)+,d1/d2/a5/a6
00:00009C5E 4E75            	  3822: 	rts
                            	  3823: 
                            	  3824: rtc_write:
00:00009C60 13FC000AFD0FFF00	  3825: 	move.b #10,leds
00:00009C68 48E76006        	  3826: 	movem.l d1/d2/a5/a6,-(sp)
00:00009C6C 2C7CFD069010    	  3827: 	movea.l	#I2C2,a6
00:00009C72 4BF900100200    	  3828: 	lea	RTCBuf,a5
00:00009C78 1D7C00800002    	  3829: 	move.b #$80,I2C_CTRL(a6)	; enable I2C
00:00009C7E 4242            	  3830: 	move.w #$00,d2
                            	  3831: .0002
00:00009C80 103C00DE        	  3832: 	move.b #$DE,d0				; read address, write op
00:00009C84 123C0090        	  3833: 	move.b #$90,d1				; STA + wr bit
00:00009C88 6100FEC4        	  3834: 	bsr	i2c_wr_cmd
00:00009C8C 4A00            	  3835: 	tst.b	d0
00:00009C8E 6B50            	  3836: 	bmi	.rxerr
00:00009C90 13FC000BFD0FFF00	  3837: 	move.b #11,leds
00:00009C98 4200            	  3838: 	move.b #$00,d0				; address zero
00:00009C9A 123C0010        	  3839: 	move.b #$10,d1				; wr bit
00:00009C9E 6100FEAE        	  3840: 	bsr	i2c_wr_cmd
00:00009CA2 4A00            	  3841: 	tst.b	d0
00:00009CA4 6B3A            	  3842: 	bmi	.rxerr
                            	  3843: .0001
00:00009CA6 4EB9000008C6    	  3844: 	bsr CheckForCtrlC
00:00009CAC 10352000        	  3845: 	move.b (a5,d2.w),d0
00:00009CB0 123C0010        	  3846: 	move.b #$10,d1
00:00009CB4 6100FE98        	  3847: 	bsr	i2c_wr_cmd
00:00009CB8 4A00            	  3848: 	tst.b	d0
00:00009CBA 6B24            	  3849: 	bmi	.rxerr
                            	  3850: ;	addi.w #1,d2
                            	  3851: ;	cmpi.w #$5F,d2
                            	  3852: ;	bne.s	.0001
                            	  3853: ;	move.b (a5,d2.w),d0
00:00009CBC 123C0050        	  3854: 	move.b #$50,d1				; STO, wr bit
00:00009CC0 6100FE8C        	  3855: 	bsr	i2c_wr_cmd
00:00009CC4 4A00            	  3856: 	tst.b	d0
00:00009CC6 6B18            	  3857: 	bmi	.rxerr
00:00009CC8 6100FE66        	  3858: 	bsr i2c_wait_tip
00:00009CCC 5242            	  3859: 	addi.w #1,d2
00:00009CCE 0C420060        	  3860: 	cmpi.w #$60,d2
00:00009CD2 66AC            	  3861: 	bne.s	.0002
                            	  3862: 
00:00009CD4 422E0002        	  3863: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return 0
00:00009CD8 4CDF6006        	  3864: 	movem.l (sp)+,d1/d2/a5/a6
00:00009CDC 7000            	  3865: 	moveq	#0,d0
00:00009CDE 4E75            	  3866: 	rts
                            	  3867: .rxerr:
00:00009CE0 6100FE4E        	  3868: 	bsr i2c_wait_tip
00:00009CE4 422E0002        	  3869: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return status
00:00009CE8 4CDF6006        	  3870: 	movem.l (sp)+,d1/d2/a5/a6
00:00009CEC 4E75            	  3871: 	rts
                            	  3872: 
                            	  3873: msgRtcReadFail:
00:00009CEE 5254432072656164	  3874: 	dc.b	"RTC read/write failed.",$0A,$0D,$00
00:00009CF6 2F77726974652066
00:00009CFE 61696C65642E
00:00009D04 0A
00:00009D05 0D
00:00009D06 00
                            	  3875: 
                            	  3876: msgBusErr:
00:00009D07 0A              	  3877: 	dc.b	$0A,$0D,"Bus error at: ",$00
00:00009D08 0D
00:00009D09 427573206572726F
00:00009D11 722061743A20
00:00009D17 00
                            	  3878: 	even
                            	  3879: 
                            	  3880: ;------------------------------------------------------------------------------
                            	  3881: ;------------------------------------------------------------------------------
                            	  3882: 	even
                            	  3883: 
                            	  3884: bus_err:
00:00009D18 4E71            	  3885: 	nop
00:00009D1A 43FAFFEB        	  3886: 	lea.l msgBusErr,a1
00:00009D1E 6100DDEC        	  3887: 	bsr DisplayString
00:00009D22 222F0002        	  3888: 	move.l 2(a7),d1
00:00009D26 6100F84C        	  3889: 	bsr DisplayTetra
00:00009D2A 6100DDC6        	  3890: 	bsr CRLF
00:00009D2E 6000E42C        	  3891: 	bra	Monitor
                            	  3892: 
                            	  3893: trap3:
                            	  3894: 	; First save all registers
00:00009D32 48F9FFFF00040100	  3895: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
00:00009D3A 33DF00040140    	  3896: 	move.w		(a7)+,Regsave+$40
00:00009D40 23DF00040144    	  3897: 	move.l		(a7)+,Regsave+$44
00:00009D46 2E7C00040FFC    	  3898: 	move.l		#$40FFC,a7			; reset stack pointer
00:00009D4C 46FC2500        	  3899: 	move.w		#$2500,sr				; enable interrupts
00:00009D50 303900040202    	  3900: 	move.w		NumSetBreakpoints,d0
00:00009D56 5340            	  3901: 	subi.w		#1,d0
00:00009D58 41F900040220    	  3902: 	lea				Breakpoints,a0
00:00009D5E 223900040144    	  3903: 	move.l		Regsave+$44,d1
                            	  3904: .0001:
00:00009D64 B298            	  3905: 	cmp.l			(a0)+,d1
00:00009D66 6708            	  3906: 	beq.s			ProcessBreakpoint
00:00009D68 51C8FFFA        	  3907: 	dbra			d0,.0001
00:00009D6C 6000E3EE        	  3908: 	bra				Monitor					; not a breakpoint
                            	  3909: ProcessBreakpoint:
00:00009D70 6104            	  3910: 	bsr				DisarmAllBreakpoints
00:00009D72 6000F158        	  3911: 	bra				cmdDumpRegs
                            	  3912: 
                            	  3913: ;------------------------------------------------------------------------------
                            	  3914: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  3915: ;------------------------------------------------------------------------------
                            	  3916: 
                            	  3917: DisarmAllBreakpoints:
00:00009D76 48E780E0        	  3918: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
00:00009D7A 303900040202    	  3919: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
00:00009D80 0C400008        	  3920: 	cmpi.w	#numBreakpoints,d0		; check for valid number
00:00009D84 641A            	  3921: 	bhs.s		.0001
00:00009D86 45F900040220    	  3922: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
00:00009D8C 41F900040280    	  3923: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
00:00009D92 6004            	  3924: 	bra.s		.0003									; enter loop at bottom
                            	  3925: .0002:
00:00009D94 225A            	  3926: 	move.l	(a2)+,a1							; a1 = address of breakpoint
00:00009D96 3298            	  3927: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  3928: .0003:
00:00009D98 51C8FFFA        	  3929: 	dbra		d0,.0002
00:00009D9C 4CDF0701        	  3930: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  3931: .0001:
00:00009DA0 4E75            	  3932: 	rts	
                            	  3933: 
                            	  3934: ;------------------------------------------------------------------------------
                            	  3935: ; ArmAllBreakpoints, used when entering the monitor.
                            	  3936: ;------------------------------------------------------------------------------
                            	  3937: 
                            	  3938: ArmAllBreakpoints:
00:00009DA2 48E780E0        	  3939: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
00:00009DA6 303900040202    	  3940: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00009DAC 0C400008        	  3941: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
00:00009DB0 641E            	  3942: 	bhs.s			.0001
00:00009DB2 45F900040220    	  3943: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
00:00009DB8 41F900040280    	  3944: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
00:00009DBE 6008            	  3945: 	bra.s			.0003									; enter loop at bottom
                            	  3946: .0002:
00:00009DC0 225A            	  3947: 	move.l		(a2)+,a1							; a1 = address of breakpoint
00:00009DC2 3091            	  3948: 	move.w		(a1),(a0)							; copy instruction word to table
00:00009DC4 30FC4E43        	  3949: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  3950: .0003:
00:00009DC8 51C8FFF6        	  3951: 	dbra			d0,.0002
00:00009DCC 4CDF0701        	  3952: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  3953: .0001:
00:00009DD0 4E75            	  3954: 	rts	
                            	  3955: 
                            	  3956: ;------------------------------------------------------------------------------
                            	  3957: ;------------------------------------------------------------------------------
                            	  3958: 
                            	  3959: ArmBreakpoint:
00:00009DD2 48E7E0E0        	  3960: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
00:00009DD6 303900040202    	  3961: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00009DDC 0C400008        	  3962: 	cmpi.w		#numBreakpoints,d0		; check if too many
00:00009DE0 645A            	  3963: 	bhs.s			.0001
00:00009DE2 527900040202    	  3964: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
00:00009DE8 2400            	  3965: 	move.l		d0,d2
00:00009DEA 6100EB20        	  3966: 	bsr				ignBlanks
00:00009DEE 6100F1AA        	  3967: 	bsr				GetHexNumber
00:00009DF2 6748            	  3968: 	beq.s			.0001									; was there an address?
00:00009DF4 08010000        	  3969: 	btst			#0,d1									; address value must be even
00:00009DF8 6642            	  3970: 	bne.s			.0001
                            	  3971: 	; See if the breakpoint is in the table already
00:00009DFA 43F900040220    	  3972: 	lea				Breakpoints,a1				; a1 points to breakpoint table
00:00009E00 343C0007        	  3973: 	move.w		#numBreakpoints-1,d2
                            	  3974: .0002:
00:00009E04 B299            	  3975: 	cmp.l			(a1)+,d1
00:00009E06 673A            	  3976: 	beq.s			.0003									; breakpoint is in table already
00:00009E08 51CAFFFA        	  3977: 	dbra			d2,.0002
                            	  3978: 	; Add breakpoint to table
                            	  3979: 	; Search for empty entry
00:00009E0C 43F900040220    	  3980: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
00:00009E12 4242            	  3981: 	clr.w			d2										; d2 = count
                            	  3982: .0006:
00:00009E14 4A91            	  3983: 	tst.l			(a1)									; is the entry empty?
00:00009E16 670C            	  3984: 	beq.s			.0005									; branch if found empty entry
00:00009E18 5889            	  3985: 	lea				4(a1),a1							; point to next entry
00:00009E1A 5242            	  3986: 	addi.w		#1,d2									; increment count
00:00009E1C 0C420008        	  3987: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
00:00009E20 65F2            	  3988: 	blo.s			.0006
00:00009E22 6018            	  3989: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  3990: .0005:
00:00009E24 E542            	  3991: 	asl.w			#2,d2									; d2 = long word index
00:00009E26 23812000        	  3992: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
00:00009E2A 2441            	  3993: 	move.l		d1,a2
00:00009E2C E24A            	  3994: 	lsr.w			#1,d2									; d2 = word index
                            	  3995: .0004:
00:00009E2E 43F900040280    	  3996: 	lea				BreakpointWords,a1
00:00009E34 33922000        	  3997: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
00:00009E38 34BC4E43        	  3998: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  3999: .0001:
00:00009E3C 4CDF0707        	  4000: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
00:00009E40 4E75            	  4001: 	rts
                            	  4002: .0003:
00:00009E42 2469FFFC        	  4003: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
00:00009E46 0C524E43        	  4004: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
00:00009E4A 67F0            	  4005: 	beq.s			.0001
00:00009E4C D482            	  4006: 	asl.l			#1,d2									; d2 = word index
00:00009E4E 60DE            	  4007: 	bra.s			.0004
                            	  4008: 
                            	  4009: 
                            	  4010: ;------------------------------------------------------------------------------
                            	  4011: ;------------------------------------------------------------------------------
                            	  4012: 
                            	  4013: DisarmBreakpoint:
00:00009E50 48E7E0E0        	  4014: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
00:00009E54 303900040202    	  4015: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00009E5A 0C400008        	  4016: 	cmpi.w		#numBreakpoints,d0		; check if too many
00:00009E5E 623E            	  4017: 	bhi.s			.0001
00:00009E60 2400            	  4018: 	move.l		d0,d2
00:00009E62 6100EAA8        	  4019: 	bsr				ignBlanks
00:00009E66 6100F132        	  4020: 	bsr				GetHexNumber
00:00009E6A 6732            	  4021: 	beq.s			.0001									; was there an address?
00:00009E6C 08010000        	  4022: 	btst			#0,d1									; address value must be even
00:00009E70 662C            	  4023: 	bne.s			.0001
                            	  4024: 	; See if the breakpoint is in the table already
00:00009E72 43F900040220    	  4025: 	lea				Breakpoints,a1				; a1 points to breakpoint table
00:00009E78 5342            	  4026: 	subi.w		#1,d2
                            	  4027: .0002:
00:00009E7A B299            	  4028: 	cmp.l			(a1)+,d1
00:00009E7C 6706            	  4029: 	beq.s			.0003									; breakpoint is in table already
00:00009E7E 51CAFFFA        	  4030: 	dbra			d2,.0002
00:00009E82 601A            	  4031: 	bra				.0001									; breakpoint was not in table
                            	  4032: .0003:
                            	  4033: 	; Remove breakpoint from table
00:00009E84 537900040202    	  4034: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
00:00009E8A 2469FFFC        	  4035: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
00:00009E8E 42A9FFFC        	  4036: 	clr.l			-4(a1)								; empty out breakpoint
00:00009E92 43F900040280    	  4037: 	lea				BreakpointWords,a1
00:00009E98 D482            	  4038: 	asl.l			#1,d2									; d2 = word index
00:00009E9A 34B12000        	  4039: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  4040: .0001:
00:00009E9E 4CDF0707        	  4041: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
00:00009EA2 4E75            	  4042: 	rts
                            	  4043: 
                            	  4044: ;------------------------------------------------------------------------------
                            	  4045: ;------------------------------------------------------------------------------
                            	  4046: 
                            	  4047: ListBreakpoints:
00:00009EA4 6100DC4C        	  4048: 	bsr			CRLF
00:00009EA8 343C0008        	  4049: 	move.w	#numBreakpoints,d2
00:00009EAC 43F900040220    	  4050: 	lea			Breakpoints,a1
                            	  4051: .0001:
00:00009EB2 2219            	  4052: 	move.l	(a1)+,d1
00:00009EB4 6100F6BE        	  4053: 	bsr			DisplayTetra
00:00009EB8 6100DC38        	  4054: 	bsr			CRLF
00:00009EBC 51CAFFF4        	  4055: 	dbra		d2,.0001
00:00009EC0 6000E29A        	  4056: 	bra			Monitor
                            	  4057: 
                            	  4058: ;------------------------------------------------------------------------------
                            	  4059: ;------------------------------------------------------------------------------
                            	  4060: 
                            	  4061: ClearBreakpointList:
00:00009EC4 343C0008        	  4062: 	move.w	#numBreakpoints,d2
00:00009EC8 43F900040220    	  4063: 	lea			Breakpoints,a1
                            	  4064: .0001:
00:00009ECE 4299            	  4065: 	clr.l		(a1)+
00:00009ED0 51CAFFFC        	  4066: 	dbra		d2,.0001
00:00009ED4 4E75            	  4067: 	rts
                            	  4068: 
                            	  4069: ;------------------------------------------------------------------------------
                            	  4070: ; SendMsg
                            	  4071: ; 00100xy0
                            	  4072: ;
                            	  4073: ; Parameters:
                            	  4074: ;		d1 = target core number
                            	  4075: ;		d2 = argument 1
                            	  4076: ;		d3 = argument 2
                            	  4077: ;		d4 = argument 3
                            	  4078: ;
                            	  4079: ;------------------------------------------------------------------------------
                            	  4080: 
                            	  4081: SendMsg:
00:00009ED6 48E70440        	  4082: 	movem.l	d5/a1,-(a7)
00:00009EDA E149            	  4083: 	lsl.w		#8,d1
00:00009EDC 4E7A5FE0        	  4084: 	movec		coreno,d5
00:00009EE0 E94D            	  4085: 	lsl.w		#4,d5
00:00009EE2 8245            	  4086: 	or.w		d5,d1
00:00009EE4 43F900100000    	  4087: 	lea			$00100000,a1
00:00009EEA 4AB11000        	  4088: 	tst.l		0(a1,d1.w)
00:00009EEE 661C            	  4089: 	bne			.msgFull
00:00009EF0 4E7A5FE0        	  4090: 	movec		coreno,d5
00:00009EF4 23851000        	  4091: 	move.l	d5,0(a1,d1.w)
00:00009EF8 23821004        	  4092: 	move.l	d2,4(a1,d1.w)
00:00009EFC 23831008        	  4093: 	move.l	d3,8(a1,d1.w)
00:00009F00 2384100C        	  4094: 	move.l	d4,12(a1,d1.w)
00:00009F04 4CDF0220        	  4095: 	movem.l	(a7)+,d5/a1
00:00009F08 7200            	  4096: 	moveq		#0,d1
00:00009F0A 4E75            	  4097: 	rts
                            	  4098: .msgFull:
00:00009F0C 4CDF0220        	  4099: 	movem.l	(a7)+,d5/a1
00:00009F10 72FF            	  4100: 	moveq		#-1,d1
00:00009F12 4E75            	  4101: 	rts
                            	  4102: 
                            	  4103: ;------------------------------------------------------------------------------
                            	  4104: ; ReceiveMsg
                            	  4105: ;		Scan the message table for messages and dispatch them.
                            	  4106: ; 00100xy0
                            	  4107: ;
                            	  4108: ; Parameters:
                            	  4109: ;------------------------------------------------------------------------------
                            	  4110: 
                            	  4111: ReceiveMsg:
00:00009F14 48E77F40        	  4112: 	movem.l		d1/d2/d3/d4/d5/d6/d7/a1,-(a7)
00:00009F18 43F900100000    	  4113: 	lea				$00100000,a1
00:00009F1E 4E7A5FE0        	  4114: 	movec			coreno,d5
00:00009F22 E14D            	  4115: 	lsl.w			#8,d5
00:00009F24 7C02            	  4116: 	moveq			#2,d6
                            	  4117: .nextCore:
00:00009F26 3E06            	  4118: 	move.w		d6,d7
00:00009F28 E94F            	  4119: 	lsl.w			#4,d7
00:00009F2A DE45            	  4120: 	add.w			d5,d7
00:00009F2C 4AB17000        	  4121: 	tst.l			0(a1,d7.w)			; Is there a message from core d6?
00:00009F30 6716            	  4122: 	beq.s			.noMsg
00:00009F32 22317000        	  4123: 	move.l		0(a1,d7.w),d1
00:00009F36 24317004        	  4124: 	move.l		4(a1,d7.w),d2
00:00009F3A 26317008        	  4125: 	move.l		8(a1,d7.w),d3
00:00009F3E 2831700C        	  4126: 	move.l		12(a1,d7.w),d4
00:00009F42 42B17000        	  4127: 	clr.l			0(a1,d7.w)			; indicate message was received
00:00009F46 610E            	  4128: 	bsr				DispatchMsg
                            	  4129: .noMsg:
00:00009F48 5246            	  4130: 	addq			#1,d6
00:00009F4A BC7C0009        	  4131: 	cmp.w			#9,d6
00:00009F4E 63D6            	  4132: 	bls				.nextCore
00:00009F50 4CDF02FE        	  4133: 	movem.l		(a7)+,d1/d2/d3/d4/d5/d6/d7/a1
00:00009F54 4E75            	  4134: 	rts
                            	  4135: 
                            	  4136: ;------------------------------------------------------------------------------
                            	  4137: ;------------------------------------------------------------------------------
                            	  4138: 
                            	  4139: DispatchMsg:
00:00009F56 4E75            	  4140: 	rts
                            	  4141: 
                            	  4142: ;------------------------------------------------------------------------------
                            	  4143: ; Trap #15, function 39 - convert floating-point to string and display
                            	  4144: ;
                            	  4145: ; Parameters
                            	  4146: ;		a1 = pointer to buffer
                            	  4147: ;		fp0 = number to print
                            	  4148: ;		d1 = width of print field
                            	  4149: ;		d2 = precision
                            	  4150: ;		d3 = 'E' or 'e'
                            	  4151: ;------------------------------------------------------------------------------
                            	  4152: 
                            	  4153: prtflt:
00:00009F58 4E52FFD0        	  4154: 	link a2,#-48
00:00009F5C 2F7900040098002C	  4155: 	move.l _canary,44(sp)
00:00009F64 48D7074F        	  4156: 	movem.l d0/d1/d2/d3/d6/a0/a1/a2,(sp)
00:00009F68 F22F68000020    	  4157: 	fmove.x fp0,32(sp)
00:00009F6E 2049            	  4158: 	move.l a1,a0						; a0 = pointer to buffer to use
00:00009F70 13C100040508    	  4159: 	move.b d1,_width
00:00009F76 23C200040514    	  4160: 	move.l d2,_precision
00:00009F7C 13C30004050C    	  4161: 	move.b d3,_E
00:00009F82 6100F36C        	  4162: 	bsr _FloatToString
00:00009F86 6100DB84        	  4163: 	bsr DisplayString
00:00009F8A F22F48000020    	  4164: 	fmove.x 32(sp),fp0
00:00009F90 4CD7074F        	  4165: 	movem.l (sp),d0/d1/d2/d3/d6/a0/a1/a2
00:00009F94 A2AF0003002C    	  4166: 	cchk 44(sp)
00:00009F9A 4E5A            	  4167: 	unlk a2
00:00009F9C 4E75            	  4168: 	rts
                            	  4169: 
                            	  4170: T15FloatToString:
00:00009F9E 4E52FFD4        	  4171: 	link a2,#-44
00:00009FA2 48D7034F        	  4172: 	movem.l d0/d1/d2/d3/d6/a0/a1,(sp)
00:00009FA6 F22F6800001C    	  4173: 	fmove.x fp0,28(sp)
00:00009FAC 2049            	  4174: 	move.l a1,a0						; a0 = pointer to buffer to use
00:00009FAE 13C100040508    	  4175: 	move.b d1,_width
00:00009FB4 23C200040514    	  4176: 	move.l d2,_precision
00:00009FBA 13C30004050C    	  4177: 	move.b d3,_E
00:00009FC0 6100F32E        	  4178: 	bsr _FloatToString
00:00009FC4 F22F4800001C    	  4179: 	fmove.x 28(sp),fp0
00:00009FCA 4CD7034F        	  4180: 	movem.l (sp),d0/d1/d2/d3/d6/a0/a1
00:00009FCE 4E5A            	  4181: 	unlk a2
00:00009FD0 4E75            	  4182: 	rts
                            	  4183: 
                            	  4184: ;==============================================================================
                            	  4185: ; Parameters:
                            	  4186: ;		d7 = device number
                            	  4187: ;		d6 = function number
                            	  4188: ;		d0 to d5 = arguments
                            	  4189: ;==============================================================================
                            	  4190: 
                            	  4191: io_trap:
00:00009FD2 0C070007        	  4192: 	cmpi.b #7,d7							; make sure legal device
00:00009FD6 621C            	  4193: 	bhi.s .0002
00:00009FD8 48E70180        	  4194: 	movem.l d7/a0,-(a7)
00:00009FDC 4887            	  4195: 	ext.w d7
00:00009FDE CEFC0084        	  4196: 	mulu #DCB_SIZE,d7					; index to DCB
00:00009FE2 207C00040A00    	  4197: 	move.l #null_dcb,a0
00:00009FE8 20707018        	  4198: 	move.l DCB_CMDPROC(a0,d7.w),a0
00:00009FEC 4E90            	  4199: 	jsr (a0)
00:00009FEE 4CDF0180        	  4200: 	movem.l (a7)+,d7/a0
00:00009FF2 4E73            	  4201: 	rte
                            	  4202: .0002:
00:00009FF4 7020            	  4203: 	moveq #E_BadDevNum,d0
00:00009FF6 4E73            	  4204: 	rte
                            	  4205: 
                            	  4206: ;==============================================================================
                            	  4207: ; Output a character to the current output device.
                            	  4208: ;
                            	  4209: ; Parameters:
                            	  4210: ;		d1.b	 character to output
                            	  4211: ; Returns:
                            	  4212: ;		none
                            	  4213: ;==============================================================================
                            	  4214: 
                            	  4215: OutputChar:
00:00009FF8 48E78300        	  4216: 	movem.l d0/d6/d7,-(a7)
00:00009FFC 7E00            	  4217: 	clr.l d7
00:00009FFE 7C00            	  4218: 	clr.l d6
00:0000A000 1E39000400A8    	  4219: 	move.b OutputDevice,d7		; d7 = output device
00:0000A006 3C3C0002        	  4220: 	move.w #DEV_PUTCHAR,d6		; d6 = function
00:0000A00A 4E40            	  4221: 	trap #0
00:0000A00C 4CDF00C1        	  4222: 	movem.l (a7)+,d0/d6/d7
00:0000A010 4E75            	  4223: 	rts
                            	  4224: 
                            	  4225: ;------------------------------------------------------------------------------
                            	  4226: ;------------------------------------------------------------------------------
                            	  4227: 
                            	  4228: InitIRQ:
00:0000A012 7006            	  4229: 	moveq		#6,d0
00:0000A014 41F900000B92    	  4230: 	lea			KeybdIRQ,a0
00:0000A01A 610E            	  4231: 	bsr			InstallIRQ
00:0000A01C 41FA0050        	  4232: 	lea			TickIRQ,a0
00:0000A020 6108            	  4233: 	bsr			InstallIRQ
00:0000A022 7003            	  4234: 	moveq		#3,d0
00:0000A024 41F9000017FC    	  4235: 	lea			SerialIRQ,a0
                            	  4236: 	; fall through
                            	  4237: 
                            	  4238: ;------------------------------------------------------------------------------
                            	  4239: ; Install an IRQ handler.
                            	  4240: ;
                            	  4241: ; Parameters:
                            	  4242: ;		a0 = pointer to bucket containing vector
                            	  4243: ;		d0 = vector (64 to 255)
                            	  4244: ; Returns:
                            	  4245: ;		d0 = 0 if successfully added, otherwise E_NotAlloc
                            	  4246: ;		nf = 0, zf = 1 if successfully added, otherwise nf = 1, zf = 0
                            	  4247: ;------------------------------------------------------------------------------
                            	  4248: 
                            	  4249: InstallIRQ:
00:0000A02A 48E70060        	  4250: 	movem.l a1/a2,-(a7)				; save working register
00:0000A02E 4A90            	  4251: 	tst.l (a0)								; link field must be NULL
00:0000A030 6634            	  4252: 	bne.s .0003
00:0000A032 0C400040        	  4253: 	cmpi.w #64,d0							; is vector in range (64 to 255)?
00:0000A036 652E            	  4254: 	blo.s .0003
00:0000A038 0C4000FF        	  4255: 	cmpi.w #255,d0
00:0000A03C 6228            	  4256: 	bhi.s .0003
00:0000A03E 45F80400        	  4257: 	lea	irq_list_tbl,a2				; a2 points to installed IRQ list
00:0000A042 E748            	  4258: 	lsl.w	#3,d0								; multiply by 2 long words
00:0000A044 22720000        	  4259: 	move.l (a2,d0.w),a1				; get first link
00:0000A048 45F20000        	  4260: 	lea (a2,d0.w),a2					; 
                            	  4261: .0002:
00:0000A04C B1C9            	  4262: 	cmpa.l a1,a0							; installed already?
00:0000A04E 6716            	  4263: 	beq.s .0003
00:0000A050 B2FC0000        	  4264: 	cmpa.l #0,a1							; is link NULL?
00:0000A054 6706            	  4265: 	beq.s .0001
00:0000A056 2449            	  4266: 	move.l a1,a2							; save previous link
00:0000A058 2251            	  4267: 	move.l (a1),a1						; get next link
00:0000A05A 60F0            	  4268: 	bra .0002
                            	  4269: .0001:
00:0000A05C 2488            	  4270: 	move.l a0,(a2)						; set link
00:0000A05E 225F245F        	  4271: 	movem.l (a7)+,a1/a2
00:0000A062 7000            	  4272: 	moveq #E_Ok,d0
00:0000A064 4E75            	  4273: 	rts
                            	  4274: .0003:
00:0000A066 225F245F        	  4275: 	movem.l (a7)+,a1/a2
00:0000A06A 7009            	  4276: 	moveq #E_NotAlloc,d0			; return failed to add
00:0000A06C 4E75            	  4277: 	rts
                            	  4278: 
                            	  4279: ;------------------------------------------------------------------------------
                            	  4280: ; TickIRQ
                            	  4281: ; - this IRQ is processed by all cores.
                            	  4282: ; - reset the edge circuit.
                            	  4283: ; - an IRQ live indicator is updated on the text screen for the core
                            	  4284: ;------------------------------------------------------------------------------
                            	  4285: 
                            	  4286: TickIRQ:
00:0000A06E 46FC2600        	  4287: 	move.w #$2600,sr					; disable lower level IRQs
00:0000A072 48E77080        	  4288: 	movem.l	d1/d2/d3/a0,-(a7)
00:0000A076 52B90004009C    	  4289: 	addi.l #1,tickcnt
00:0000A07C 13FC0001000400A0	  4290: 	move.b #1,IRQFlag					; tick interrupt indicator in local memory
00:0000A084 4E7A1FE0        	  4291: 	movec	coreno,d1						; d1 = core number
00:0000A088 2601            	  4292: 	move.l d1,d3
                            	  4293: 	if (SCREEN_FORMAT==1)
00:0000A08A E583            	  4294: 		asl.l #2,d3								; 4 bytes per text cell
                            	  4295: 	else
                            	  4296: 		asl.l #3,d3								; 8 bytes per text cell
                            	  4297: 	endif
00:0000A08C 23FC1D000000FD09	  4298: 	move.l #$1D000000,PLIC+$14	; reset edge sense circuit
00:0000A094 0014
00:0000A096 41F9FD000098    	  4299: 	lea $FD000000+(TEXTCOL-10)*4,a0			; display field address
00:0000A09C 24303004        	  4300: 	move.l 4(a0,d3.w),d2			; get char from screen
                            	  4301: ;	rol.l #8,d2								; extract char field
                            	  4302: ;	clr.b d2									; clear char field
                            	  4303: ;	addi.b #'0',d1						; binary to ascii core number
                            	  4304: ;	or.b	d1,d2								; insert core number
                            	  4305: ;	ror.l #8,d2								; reposition to proper place
                            	  4306: ;	addi.w #1,d2							; flashy colors
00:0000A0A0 5282            	  4307: 	addi.l #$0001,d2
00:0000A0A2 21823004        	  4308: 	move.l d2,4(a0,d3.w)			; update onscreen IRQ flag
00:0000A0A6 6100FE6C        	  4309: 	bsr	ReceiveMsg
00:0000A0AA 4CDF010E        	  4310: 	movem.l	(a7)+,d1/d2/d3/a0
00:0000A0AE 4E73            	  4311: 	rte
                            	  4312: 
                            	  4313: ;------------------------------------------------------------------------------
                            	  4314: ;------------------------------------------------------------------------------
                            	  4315: 
                            	  4316: irq3_rout:
                            	  4317: ;	movem.l	d0/d1/a0/a1,-(a7)
                            	  4318: ;	lea			InstalledIRQ+8*4*3,a0
                            	  4319: ;	bra			irq_rout
                            	  4320: 
                            	  4321: irq6_rout:
                            	  4322: ;	movem.l	d0/d1/a0/a1,-(a7)
                            	  4323: ;	lea			InstalledIRQ+8*4*6,a0
                            	  4324: irq_rout:
00:0000A0B0 7007            	  4325: 	moveq		#7,d0
                            	  4326: .nextHandler:
00:0000A0B2 2258            	  4327: 	move.l	(a0)+,a1
00:0000A0B4 6706            	  4328: 	beq.s		.0003
00:0000A0B6 4E91            	  4329: 	jsr			(a1)
00:0000A0B8 4A81            	  4330: 	tst.l		d1								; was IRQ handled?
00:0000A0BA 6B04            	  4331: 	bmi.s		.0002							; first one to return handled quits loop
                            	  4332: .0003:
00:0000A0BC 51C8FFF4        	  4333: 	dbra		d0,.nextHandler
                            	  4334: .0002:
00:0000A0C0 4CDF0303        	  4335: 	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  4336: 
                            	  4337: ; Load head of list into an address register, then branch to a generic routine.
                            	  4338: 
                            	  4339: ;	rept 192
                            	  4340: ;	macIRQ_proc_label REPTN
                            	  4341: ;	movem.l a0/a1,-(a7)
                            	  4342: ;	move.l irq_list_tbl+REPTN*4,a1	; get the head of the list
                            	  4343: ;	jmp irq_proc_generic
                            	  4344: ;	endr
                            	  4345: 
                            	  4346: irq_proc_generic:
                            	  4347: .0003:
00:0000A0C4 20690004        	  4348: 	move.l 4(a1),a0									; a0 = vector
00:0000A0C8 B0FC0000        	  4349: 	cmpa.l #0,a0										; ugh. move to address does not set flags
00:0000A0CC 6706            	  4350: 	beq.s .0001											; valid vector?
00:0000A0CE 4E90            	  4351: 	jsr (a0)												; call the interrupt routine
00:0000A0D0 4A81            	  4352: 	tst.l d1												; IRQ handled?
00:0000A0D2 6B08            	  4353: 	bmi.s .0002											
                            	  4354: .0001:
00:0000A0D4 2251            	  4355: 	move.l (a1),a1
00:0000A0D6 B0FC0000        	  4356: 	cmpa.l #0,a0										; end of list?
00:0000A0DA 66E8            	  4357: 	bne.s .0003
                            	  4358: .0002:
00:0000A0DC 205F225F        	  4359: 	movem.l (a7)+,a0/a1
00:0000A0E0 4E73            	  4360: 	rte 
                            	  4361: 
                            	  4362: SpuriousIRQ:
00:0000A0E2 4E73            	  4363: 	rte
                            	  4364: 
                            	  4365: ;	bsr			KeybdIRQ
                            	  4366: ;	tst.l		d1								; handled by KeybdIRQ?
                            	  4367: ;	bmi.s		.0002							; if yes, go return
                            	  4368: ;.0001:
                            	  4369: ;	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
                            	  4370: ;	move.l	TextScr,a0				; a0 = screen address
                            	  4371: ;	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  4372: ;.0002:	
                            	  4373: ;	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  4374: ;	rte
                            	  4375: 
                            	  4376: nmi_rout:
00:0000A0E4 48E7C080        	  4377: 	movem.l	d0/d1/a0,-(a7)
00:0000A0E8 123C004E        	  4378: 	move.b	#'N',d1
00:0000A0EC 6100FF0A        	  4379: 	bsr			OutputChar
00:0000A0F0 4CDF0103        	  4380: 	movem.l	(a7)+,d0/d1/a0		; return
00:0000A0F4 4E73            	  4381: 	rte
                            	  4382: 
                            	  4383: addr_err:
00:0000A0F6 544F            	  4384: 	addq		#2,sp						; get rid of sr
00:0000A0F8 221F            	  4385: 	move.l	(sp)+,d1				; pop exception address
00:0000A0FA 6100F478        	  4386: 	bsr			DisplayTetra		; and display it
00:0000A0FE 43FA00A6        	  4387: 	lea			msgAddrErr,a1	; followed by message
00:0000A102 6100DA1E        	  4388: 	bsr			DisplayStringCRLF
                            	  4389: .0001:
00:0000A106 60FE            	  4390: 	bra			.0001
00:0000A108 6000E052        	  4391: 	bra			Monitor
                            	  4392: 	
                            	  4393: brdisp_trap:
00:0000A10C 48F9FFFF00040100	  4394: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
00:0000A114 33DF00040140    	  4395: 	move.w	(a7)+,Regsave+$40
00:0000A11A 23DF00040144    	  4396: 	move.l	(a7)+,Regsave+$44
00:0000A120 2E7C00047FFC    	  4397: 	move.l	#$47FFC,a7			; reset stack pointer
00:0000A126 46FC2500        	  4398: 	move.w	#$2500,sr				; enable interrupts
00:0000A12A 43FA0099        	  4399: 	lea			msg_bad_branch_disp,a1
00:0000A12E 6100D9DC        	  4400: 	bsr			DisplayString
00:0000A132 6100F438        	  4401: 	bsr			DisplaySpace
00:0000A136 223900040144    	  4402: 	move.l	Regsave+$44,d1	; exception address
00:0000A13C 6100F436        	  4403: 	bsr			DisplayTetra		; and display it
                            	  4404: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
00:0000A140 6000ED8A        	  4405: 	bra			cmdDumpRegs
                            	  4406: 
                            	  4407: illegal_trap:
00:0000A144 544F            	  4408: 	addq		#2,sp						; get rid of sr
00:0000A146 221F            	  4409: 	move.l	(sp)+,d1				; pop exception address
00:0000A148 6100F42A        	  4410: 	bsr			DisplayTetra		; and display it
00:0000A14C 43FA0065        	  4411: 	lea			msg_illegal,a1	; followed by message
00:0000A150 6100D9BA        	  4412: 	bsr			DisplayString
                            	  4413: .0001:
00:0000A154 60FE            	  4414: 	bra			.0001
00:0000A156 6000E004        	  4415: 	bra			Monitor
                            	  4416: 	
                            	  4417: io_irq:
00:0000A15A 544F            	  4418: 	addq #2,sp
00:0000A15C 221F            	  4419: 	move.l (sp)+,d1
00:0000A15E 6100F414        	  4420: 	bsr DisplayTetra
00:0000A162 43FA0083        	  4421: 	lea msg_io_access,a1
00:0000A166 6100D9A4        	  4422: 	bsr DisplayString
00:0000A16A 6000ED60        	  4423: 	bra cmdDumpRegs
                            	  4424: 
                            	  4425: ; -----------------------------------------------------------------------------
                            	  4426: ; -----------------------------------------------------------------------------
                            	  4427: 
                            	  4428: msg_start:
00:0000A16E 46656D74696B6920	  4429: 	dc.b	"Femtiki rf68k Multi-core OS Starting",LF,CR,0
00:0000A176 726636386B204D75
00:0000A17E 6C74692D636F7265
00:0000A186 204F532053746172
00:0000A18E 74696E67
00:0000A192 0A
00:0000A193 0D
00:0000A194 00
                            	  4430: ;	dc.b	"rf68k System Starting",CR,LF,0
                            	  4431: msg_core_start:
00:0000A195 20636F7265207374	  4432: 	dc.b	" core starting",CR,LF,0
00:0000A19D 617274696E67
00:0000A1A3 0D
00:0000A1A4 0A
00:0000A1A5 00
                            	  4433: msgAddrErr
00:0000A1A6 2061646472657373	  4434: 	dc.b	" address err",0
00:0000A1AE 20657272
00:0000A1B2 00
                            	  4435: msg_illegal:
00:0000A1B3 20696C6C6567616C	  4436: 	dc.b	" illegal opcode",CR,LF,0
00:0000A1BB 206F70636F6465
00:0000A1C2 0D
00:0000A1C3 0A
00:0000A1C4 00
                            	  4437: msg_bad_branch_disp:
00:0000A1C5 206272616E636820	  4438: 	dc.b	" branch selfref: ",0
00:0000A1CD 73656C667265663A
00:0000A1D5 20
00:0000A1D6 00
                            	  4439: msg_test_done:
00:0000A1D7 2043505520746573	  4440: 	dc.b	" CPU test done.",0
00:0000A1DF 7420646F6E652E
00:0000A1E6 00
                            	  4441: msg_io_access
00:0000A1E7 20756E7065726D69	  4442: 	dc.b " unpermitted access to I/O",0
00:0000A1EF 7474656420616363
00:0000A1F7 65737320746F2049
00:0000A1FF 2F4F
00:0000A201 00
                            	  4443: msgChk
00:0000A202 20636865636B2066	  4444: 	dc.b " check failed",0
00:0000A20A 61696C6564
00:0000A20F 00
                            	  4445: msgStackCanary
00:0000A210 20737461636B2063	  4446: 	dc.b " stack canary overwritten",0
00:0000A218 616E617279206F76
00:0000A220 6572777269747465
00:0000A228 6E
00:0000A229 00
                            	  4447: 
                            	  4448: 	even
                            	  4449: 
                            	  4450: ;-------------------------------------------------------------------------
                            	  4451: ; File HEX2DEC   HEX2DEC convert hex to decimal                   11/02/81
                            	  4452: ;
                            	  4453: ;    CONVERT BINARY TO DECIMAL  REG  D0 PUT IN ( A6) BUFFER AS ASCII
                            	  4454: 
                            	  4455: ; Shift buffer one character to left
                            	  4456: ShiftBuf:
00:0000A22A 48E78028        	  4457: 	movem.l d0/a2/a4,-(a7)
00:0000A22E 200B            	  4458: 	move.l a3,d0
00:0000A230 06800000003F    	  4459: 	addi.l #BUFSIZE,d0
                            	  4460: .0001:
00:0000A236 18EC0001        	  4461: 	move.b 1(a4),(a4)+
00:0000A23A B08C            	  4462: 	cmp.l a4,d0
00:0000A23C 65F8            	  4463: 	blo.s .0001
00:0000A23E 4CDF1401        	  4464: 	movem.l (a7)+,d0/a2/a4
00:0000A242 4E75            	  4465: 	rts
                            	  4466: 
                            	  4467: HEX2DEC2:
00:0000A244 48E7C01C        	  4468: 	movem.l d0/d1/a3/a4/a5,-(a7)
00:0000A248 264E            	  4469: 	move.l a6,a3
00:0000A24A 284E            	  4470: 	move.l a6,a4
00:0000A24C 2200            	  4471: 	move.l d0,d1
00:0000A24E 6A0A            	  4472: 	bpl.s .0001
00:0000A250 4480            	  4473: 	neg.l d0										;
00:0000A252 6B32            	  4474: 	bmi.s .0002									; neg and still minus, must be -tve zero
00:0000A254 1CFC002D        	  4475: 	move.b #'-',(a6)+
00:0000A258 284E            	  4476: 	move.l a6,a4
                            	  4477: .0001:
00:0000A25A 82FC0064        	  4478: 	divu #100,d1								; scale d1 - chop last 2 decimal digits
00:0000A25E A2C10000        	  4479: 	bin2bcd d1									; convert to BCD
00:0000A262 6100F33C        	  4480: 	bsr BufTetra								; capture in buffer (8 digits)
00:0000A266 2200            	  4481: 	move.l d0,d1
00:0000A268 A2C10000        	  4482: 	bin2bcd d1									; convert to BCD
00:0000A26C 6100F33E        	  4483: 	bsr BufByte									; capture last 2 digits in buffer
                            	  4484: .0004:
00:0000A270 0C140030        	  4485: 	cmpi.b #'0',(a4)						; Is there a leading zero?
00:0000A274 6606            	  4486: 	bne.s .0003									; No, we're done shifting
00:0000A276 61B2            	  4487: 	bsr ShiftBuf								; Shift the buffer over a character
00:0000A278 538E            	  4488: 	subq.l #1,a6								; adjust buffer pos.
00:0000A27A 60F4            	  4489: 	bra.s .0004									; go check next character
                            	  4490: .0003:
00:0000A27C 4A14            	  4491: 	tst.b (a4)
00:0000A27E 6706            	  4492: 	beq.s .0002
00:0000A280 0C140020        	  4493: 	cmpi.b #' ',(a4)						; is the buffer empty?
00:0000A284 6606            	  4494: 	bne.s .0005
                            	  4495: .0002:
00:0000A286 18FC0030        	  4496: 	move.b #'0',(a4)+						; ensure at least a '0'
00:0000A28A 2C4C            	  4497: 	move.l a4,a6
                            	  4498: .0005:
00:0000A28C 4CDF3803        	  4499: 	movem.l (a7)+,d0/d1/a3/a4/a5
00:0000A290 4E75            	  4500: 	rts
                            	  4501: 
                            	  4502: HEX2DEC: 
00:0000A292 48E77B00        	  4503: 	movem.l D1-D4/D6-D7,-(A7)   ; SAVE REGISTERS
00:0000A296 2E00            	  4504: 	move.l D0,D7          			; SAVE IT HERE
00:0000A298 6A08            	  4505: 	bpl.s HX2DC
00:0000A29A 4487            	  4506: 	neg.l D7              			; CHANGE TO POSITIVE
00:0000A29C 6B4E            	  4507: 	bmi.s HX2DC57          			; SPECIAL CASE (-0)
00:0000A29E 1CFC002D        	  4508: 	move.b #'-',(A6)+      			; PUT IN NEG SIGN
                            	  4509: HX2DC:  
00:0000A2A2 4244            	  4510: 	clr.w D4              			; FOR ZERO SURPRESS
00:0000A2A4 7C0A            	  4511: 	moveq #10,D6          			; COUNTER
                            	  4512: HX2DC0:
00:0000A2A6 7401            	  4513:   moveq #1,D2           			; VALUE TO SUB
00:0000A2A8 2206            	  4514: 	move.l D6,D1          			; COUNTER
00:0000A2AA 5381            	  4515: 	subq.l #1,D1           			; ADJUST - FORM POWER OF TEN
00:0000A2AC 671A            	  4516: 	beq.s HX2DC2           			; IF POWER IS ZERO
                            	  4517: HX2DC1:
00:0000A2AE 3602            	  4518:   move.w D2,D3          			; D3=LOWER WORD
00:0000A2B0 C6FC000A        	  4519: 	mulu #10,D3
00:0000A2B4 4842            	  4520: 	swap D2              				; D2=UPPER WORD
00:0000A2B6 C4FC000A        	  4521: 	mulu #10,D2
00:0000A2BA 4843            	  4522: 	swap D3              				; ADD UPPER TO UPPER
00:0000A2BC D443            	  4523: 	add.w D3,D2
00:0000A2BE 4842            	  4524: 	swap D2              				; PUT UPPER IN UPPER
00:0000A2C0 4843            	  4525: 	swap D3              				; PUT LOWER IN LOWER
00:0000A2C2 3403            	  4526: 	move.w D3,D2          			; D2=UPPER & LOWER
00:0000A2C4 5381            	  4527: 	subq.l #1,D1
00:0000A2C6 66E6            	  4528: 	bne.s HX2DC1
                            	  4529: HX2DC2:
00:0000A2C8 7000            	  4530:   clr.l D0              			; HOLDS SUB AMT
                            	  4531: HX2DC22:
00:0000A2CA BE82            	  4532: 	cmp.l D2,D7
00:0000A2CC 6D06            	  4533:   blt.s HX2DC3           			; IF NO MORE SUB POSSIBLE
00:0000A2CE 5280            	  4534: 	addq.l #1,D0           			; BUMP SUBS
00:0000A2D0 9E82            	  4535: 	sub.l D2,D7          				; COUNT DOWN BY POWERS OF TEN
00:0000A2D2 60F6            	  4536: 	bra.s HX2DC22          			; DO MORE
                            	  4537: HX2DC3:
00:0000A2D4 4A00            	  4538:   tst.b D0              			; ANY VALUE?
00:0000A2D6 6604            	  4539: 	bne.s HX2DC4
00:0000A2D8 4A44            	  4540: 	tst.w D4              			; ZERO SURPRESS
00:0000A2DA 6708            	  4541: 	beq.s HX2DC5
                            	  4542: HX2DC4:
00:0000A2DC 06000030        	  4543:   addi.b #$30,D0         		; BINARY TO ASCII
00:0000A2E0 1CC0            	  4544: 	move.b D0,(A6)+       			; PUT IN BUFFER
00:0000A2E2 1800            	  4545: 	move.b D0,D4          			; MARK AS NON ZERO SURPRESS
                            	  4546: HX2DC5:
00:0000A2E4 5386            	  4547:   subq.l #1,D6           			; NEXT POWER
00:0000A2E6 66BE            	  4548: 	bne.s HX2DC0
00:0000A2E8 4A44            	  4549: 	tst.w D4              			; SEE IF ANYTHING PRINTED
00:0000A2EA 6604            	  4550: 	bne.s HX2DC6
                            	  4551: HX2DC57:
00:0000A2EC 1CFC0030        	  4552:  move.b #'0',(A6)+      			; PRINT AT LEST A ZERO
                            	  4553: HX2DC6:
00:0000A2F0 4CDF00DE        	  4554: 	movem.l (A7)+,D1-D4/D6-D7 ; RESTORE REGISTERS
00:0000A2F4 4E75            	  4555:   rts                      	; END OF ROUTINE
                            	  4556: 
                            	  4557: 
                            	  4558: PNT4HX:
                            	  4559: PNT4HEX:
00:0000A2F6 6000F2AE        	  4560: 	bra BufWyde
                            	  4561: PNT6HX:
00:0000A2FA 4840            	  4562: 	swap d0
00:0000A2FC 6100F2AE        	  4563: 	bsr BufByte
00:0000A300 4840            	  4564: 	swap d0
00:0000A302 6000F2A2        	  4565: 	bra BufWyde
                            	  4566: PNT8HX:
00:0000A306 6000F298        	  4567: 	bra BufTetra
                            	  4568: 	
                            	  4569: ; FORMAT RELATIVE ADDRESS  AAAAAA+Rn
                            	  4570: ;        ENTER     D0 = VALUE
                            	  4571: ;                  A6 = STORE POINTER
                            	  4572: ;
                            	  4573: FRELADDR:
00:0000A30A 48E74780        	  4574: 	movem.l D1/D5-D7/A0,-(A7)
00:0000A30E 41F900040880    	  4575: 	lea OFFSET,A0
00:0000A314 7EFF            	  4576: 	moveq #-1,D7        	; D7 = DIFF. BEST FIT
00:0000A316 7C00            	  4577: 	clr.l D6            	; D6 = OFFSET POSITION
                            	  4578: FREL10:
00:0000A318 2200            	  4579:   move.l D0,D1
00:0000A31A 4A90            	  4580: 	tst.l (a0)
00:0000A31C 670C            	  4581: 	beq.s FREL15         	; ZERO OFFSET
00:0000A31E 9290            	  4582: 	sub.l (a0),d1      		; D1 = DIFF.
00:0000A320 6B08            	  4583: 	bmi.s FREL15         	; NO FIT
00:0000A322 B287            	  4584: 	cmp.l D7,D1
00:0000A324 6404            	  4585: 	bcc.s FREL15         	; OLD FIT BETTER
00:0000A326 2E01            	  4586: 	move.l D1,D7        	; D7 = NEW BEST FIT
00:0000A328 2A06            	  4587: 	move.l D6,D5        	; D5 = POSITION
                            	  4588: FREL15:
00:0000A32A 5888            	  4589:   addq.l #4,A0
00:0000A32C 5286            	  4590: 	addq.l #1,D6
00:0000A32E 0C460008        	  4591: 	cmpi.w #8,D6
00:0000A332 66E4            	  4592: 	bne.s FREL10         	; MORE OFFSETS TO CHECK
00:0000A334 4A87            	  4593: 	tst.l D7
00:0000A336 6B1E            	  4594: 	bmi.s FREL25         	; NO FIT
00:0000A338 4A46            	  4595: 	tst D6
00:0000A33A 6608            	  4596: 	bne.s FREL20
00:0000A33C 4AB900040880    	  4597: 	tst.l OFFSET
00:0000A342 6712            	  4598: 	beq.s FREL25         	; R0 = 000000; NO FIT
                            	  4599: FREL20:
00:0000A344 2007            	  4600:   move.l D7,D0
00:0000A346 61B2            	  4601: 	bsr	PNT6HX         		; FORMAT OFFSET
00:0000A348 1CFC002B        	  4602: 	move.b #'+',(A6)+    	; +
00:0000A34C 1CFC0052        	  4603: 	move.b #'R',(A6)+    	; R
00:0000A350 06050030        	  4604: 	addi.b #'0',D5       	; MAKE ASCII
00:0000A354 600A            	  4605: 	bra.s FREL30
                            	  4606: FREL25:
00:0000A356 61A2            	  4607:   bsr	PNT6HX         	; FORMAT ADDRESS AS IS
00:0000A358 1A3C0020        	  4608: 	move.b #BLANK,D5
00:0000A35C 1CC5            	  4609: 	move.b D5,(A6)+     	; THREE SPACES FOR ALIGNMENT
00:0000A35E 1CC5            	  4610: 	move.b D5,(A6)+
                            	  4611: FREL30:
00:0000A360 1CC5            	  4612:   move.b D5,(A6)+
00:0000A362 4CDF01E2        	  4613: 	movem.l (A7)+,D1/D5-D7/A0
00:0000A366 4E75            	  4614: 	rts
                            	  4615: 
                            	  4616: 	include "dcode68k.x68"

Source: "dcode68k.x68"
                            	     1: ;-------------------------------------------------------------------------
                            	     2: ; File DCODE68K  68K ONE LINE DISASSEMBLER                        07/28/82
                            	     3: ;
                            	     4: ;        CALLING SEQUENCE:
                            	     5: ;   D0,D1,D2 = CODE TO BE DISASSEMBLED
                            	     6: ;   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
                            	     7: ;   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
                            	     8: ;        JSR       DCODE68K
                            	     9: ;
                            	    10: ;        RETURN:
                            	    11: ;   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
                            	    12: ;   A5 = POINTER TO LINE AS DISASSEMBLED
                            	    13: ;   A6 = POINTER TO END OF LINE
                            	    14: ;
                            	    15: ; 01234567890123456789012345678901234567890123456789
                            	    16: ; AAAAAA FDATA.DDDDDDDDDDDDDD FOC.... FOP.....
                            	    17: ;
                            	    18: ;FDATA   =       10             DATA FIELD
                            	    19: ;FOC     =       31             OP-CODE FIELD
                            	    20: ;FOP     =       39             OPERAND FIELD
                            	    21: ;
                            	    22: ; CAUSES ORGIN MODULO 4
                            	    23: ; LONG:    macro
                            	    24: ;         .align  2
                            	    25: ;         DS.B    (;-X)&2
                            	    26: ;         endm
                            	    27: LOCVARSZ = 16
                            	    28: BUFSIZE  = 63
                            	    29: FDATA    =       10        ; OFFSET TO DATA
                            	    30: FOL      =       31        ; OFFSET TO LABEL
                            	    31: FOC      =       31        ; OFFSET TO OP-CODE (NO LABEL FIELD)
                            	    32: FOP      =       39        ; OFFSET TO OPERAND (NO LABEL FIELD)
                            	    33: 
                            	    34: 					code
                            	    35: 					even
                            	    36: X:       ;              ; BASE ADDRESS THIS MODULE
                            	    37:                                 ; LONG
                            	    38: 
                            	    39: ;  MOVEM REGISTERS TO EA
                            	    40: ;
                            	    41: ;        01001D001S......
                            	    42: ;        ..........XXXXXX       EFFECTIVE ADDRESS
                            	    43: ;        .........0......       WORD
                            	    44: ;        .........1......       LONG
                            	    45: ;        .....0..........       REGISTER TO MEMORY
                            	    46: ;        .....1..........       MEMORY TO REGISTER
                            	    47: ;
                            	    48: ;
                            	    49: IMOVEMFR:
00:0000A368 610006F8        	    50:          BSR     MOVEMS         ; SIZE
                            	    51: 
00:0000A36C 7C38            	    52:          MOVEQ   #$0038,D6
00:0000A36E CC54            	    53:          AND.W   (A4),D6
00:0000A370 0C460020        	    54:          CMPI.W  #$0020,D6
00:0000A374 6706            	    55:          BEQ.S   IM7788         ; PREDECREMENT MODE
                            	    56: 
00:0000A376 7C01            	    57:          MOVEQ   #1,D6         ; D6 = INCREMENTER (BIT POSITION)
00:0000A378 7200            	    58:          MOVEQ   #0,D1         ; D1 = BIT POSITION
00:0000A37A 6004            	    59:          BRA.S   IM7799
                            	    60: 
00:0000A37C 7CFF            	    61: IM7788:  MOVEQ   #-1,D6        ; D6 = DECREMENTER (BIT POSITION)
00:0000A37E 720F            	    62:          MOVEQ   #15,D1        ; D1 = BIT POSITION
00:0000A380 610006F4        	    63: IM7799:  BSR     MOVEMR         ; BUILD MASK WORD
                            	    64: 
00:0000A384 1CFC002C        	    65:          MOVE.B  #',',(A6)+    ; STORE COMMA
                            	    66: 
00:0000A388 5483            	    67:          ADDQ.L  #2,D3
00:0000A38A 3814            	    68:          MOVE.W  (A4),D4
00:0000A38C 3E3C01F4        	    69:          MOVE.W  #$1F4,D7     ; CONTROL + PREDECREMENT
00:0000A390 6100050E        	    70:          BSR     EEA
00:0000A394 601A            	    71:          BRA.S   CS16           ; COMMON
                            	    72: 
                            	    73:          
                            	    74: 
                            	    75: ; MOVEM  EA  TO REGISTERS
                            	    76: ;
00:0000A396 610006CA        	    77: IMOVEMTR:BSR     MOVEMS         ; SIZE
00:0000A39A 5483            	    78:          ADDQ.L  #2,D3
00:0000A39C 3E3C07EC        	    79:          MOVE.W  #$7EC,D7     ; CONTROL + POSTINCREMENT
00:0000A3A0 610004FE        	    80:          BSR     EEA
                            	    81: 
00:0000A3A4 1CFC002C        	    82:          MOVE.B  #',',(A6)+    ; STORE COMMA
                            	    83: 
00:0000A3A8 7C01            	    84:          MOVEQ   #1,D6         ; D6 = BIT POSITION INCREMENTER
00:0000A3AA 7200            	    85:          MOVEQ   #0,D1         ; D1 = BIT POSITION
00:0000A3AC 610006C8        	    86:          BSR     MOVEMR
                            	    87: 
00:0000A3B0 606C            	    88: CS16:    BRA.S   CS15           ; COMMON
                            	    89: 
                            	    90:          
                            	    91: ISTOP:
00:0000A3B2 302C0002        	    92: 	move.w 2(A4),D0
00:0000A3B6 1CFC0023        	    93: 	move.b #'#',(A6)+    	; IMMEDIATE
00:0000A3BA 1CFC0024        	    94: 	move.b #'$',(A6)+    	; HEX
00:0000A3BE 6100FF36        	    95: 	bsr PNT4HX         		; VALUE
00:0000A3C2 600007C6        	    96: 	bra COMMON4
                            	    97: 
                            	    98: IMMED:   ;.align  2              ; ADD  AND  CMP #  EOR  OR  SUB
00:0000A3C6 6100044E        	    99: 	bsr FORMSIZE
00:0000A3CA 5483            	   100: 	addq.l #2,D3         	; SIZE = 4
00:0000A3CC 1CFC0023        	   101: 	move.b #'#',(A6)+    	; IMMEDIATE
00:0000A3D0 7000            	   102: 	clr.l D0
00:0000A3D2 302C0002        	   103: 	move.w 2(A4),D0     	; D0 = EXTENSION WORD
00:0000A3D6 3214            	   104: 	move.w (A4),D1
00:0000A3D8 EC49            	   105: 	lsr.w #6,D1
00:0000A3DA 02410003        	   106: 	andi.w #3,D1
00:0000A3DE 6746            	   107: 	beq.s IMMED65        	; .BYTE
00:0000A3E0 0C010001        	   108: 	cmpi.b #1,D1
00:0000A3E4 6750            	   109: 	beq.s IMMED75        	; .WORD
00:0000A3E6 5483            	   110: 	addq.l #2,D3         	; .LONG    SIZE = 6
00:0000A3E8 202C0002        	   111: 	move.l 2(A4),D0     	; D0 = LONG EXTENSION WORD
                            	   112: 
                            	   113: IMMED45:
00:0000A3EC 6100FEA4        	   114: 	bsr HEX2DEC        		; DECIMAL
00:0000A3F0 1CC5            	   115: 	move.b D5,(A6)+     	; COMMA SEPARATOR
00:0000A3F2 3014            	   116: 	move (A4),D0
00:0000A3F4 0240003F        	   117: 	andi.w #$003F,D0
00:0000A3F8 0C40003C        	   118: 	cmpi.w #$003C,D0    	; DESTINATION ADDRESS MODE 111100  "SR"
00:0000A3FC 6622            	   119: 	bne.s IMMED55        	; NOT FOUND
00:0000A3FE 3014            	   120: 	move.w (A4),D0      	; "SR"  ILLEGAL FOR
00:0000A400 02404000        	   121: 	andi.w #$4000,D0    	; ADDI   SUBI  CMPI
00:0000A404 660007AE        	   122: 	bne FERROR         		; 0600   0400  0C00
00:0000A408 3214            	   123: 	move.w (A4),D1
00:0000A40A 024100C0        	   124: 	andi.w #$00C0,D1
00:0000A40E 0C410080        	   125: 	cmpi.w #$0080,D1
00:0000A412 670007A0        	   126: 	beq FERROR         		; .LONG NOT ALLOWED
00:0000A416 1CFC0053        	   127: 	move.b #'S',(A6)+    	; #,SR FOR ANDI, EORI, ORI
00:0000A41A 1CFC0052        	   128: 	move.b #'R',(A6)+
                            	   129: CS15:
00:0000A41E 603C            	   130: 	bra.s CS14           	; COMMON
                            	   131: IMMED55:
00:0000A420 6100047E        	   132: 	bsr EEA
00:0000A424 6036            	   133: 	bra.s CS14           	; COMMON
                            	   134: IMMED65:
00:0000A426 2200            	   135: 	move.l D0,D1        	; D1 = XXXXXXXX........
00:0000A428 E049            	   136: 	lsr.w #8,D1         	; D1 = 00000000XXXXXXXX
00:0000A42A 670A            	   137: 	beq.s IMMED75
00:0000A42C 2200            	   138: 	move.l D0,D1
00:0000A42E EE41            	   139: 	asr.w #7,D1
00:0000A430 5241            	   140: 	addq.w #1,D1         ; CHECK FOR NEGATIVE
00:0000A432 66000780        	   141: 	bne FERROR
                            	   142: IMMED75:
00:0000A436 48C0            	   143: 	ext.l D0
00:0000A438 60B2            	   144: 	bra.s IMMED45
                            	   145: 
                            	   146: ;  BIT   5432109876543210
                            	   147: ;        ....RRRMMM......       ; DESTINATION REGISTER MODE
                            	   148: ;        ..........MMMRRR       ; SOURCE MODE REGISTER
                            	   149: ;        0001............       ; .BYTE
                            	   150: ;        0011............       ; .WORD
                            	   151: ;        0010............       ; .LONG
                            	   152: ;
                            	   153: ; IF BYTE SIZE; DESTINATION ADDRESS DIRECT NOT ALLOWED
                            	   154:    
                            	   155: IMOVE:
00:0000A43A 6000037E        	   156: 	bra IMOVEA1
                            	   157: 
                            	   158: ILINK:
00:0000A43E 6158            	   159: 	bsr.s FORMREGA
00:0000A440 1CC5            	   160: 	move.b D5,(A6)+     ; COMMA SERARATOR
00:0000A442 1CFC0023        	   161: 	move.b #'#',(A6)+
00:0000A446 302C0002        	   162: 	move.w 2(A4),D0
00:0000A44A 48C0            	   163: 	ext.l D0
00:0000A44C 6100FE44        	   164: 	bsr HEX2DEC        	; DECIMAL DISPLACEMENT
00:0000A450 60000738        	   165: 	bra COMMON4
                            	   166:          
                            	   167:          ; CLR  NEG  NEGX  NOT TST
                            	   168: FORM1:
00:0000A454 610003C0        	   169: 	bsr FORMSIZE
                            	   170: ;                               ; NBCD TAS
                            	   171: FORM1A:
00:0000A458 61000446        	   172: 	bsr EEA            	; DATA ALTERABLE ONLY
                            	   173: CS14:
00:0000A45C 6068            	   174: 	bra.s CS13          ; COMMON
                            	   175:      
                            	   176: 
                            	   177: 				;.align  2              ; EXT  SWAP
                            	   178: FORM3:   
00:0000A45E 6148            	   179: 	bsr.s FORMREGD
00:0000A460 6064            	   180: 	bra.s CS13           	; COMMON
                            	   181:          
                            	   182: 
                            	   183: FORM4:	;   .align  2              ; TRAP
00:0000A462 1CFC0023        	   184:          MOVE.B  #'#',(A6)+
00:0000A466 3014            	   185:          MOVE.W  (A4),D0
00:0000A468 02800000000F    	   186:          ANDI.L  #$0F,D0
00:0000A46E 6100FE22        	   187:          BSR     HEX2DEC        ; DECIMAL
00:0000A472 6052            	   188:          BRA.S   CS13           ; COMMON
                            	   189: 
                            	   190:          
                            	   191: 
                            	   192: FORM5:	;   .align  2              ; UNLNK
00:0000A474 6122            	   193:          BSR.S   FORMREGA
00:0000A476 604E            	   194:          BRA.S   CS13           ; COMMON
                            	   195: 
                            	   196: ;  BIT   5432109876543210
                            	   197: ;        ....RRR.........       ; ADDRESS REGISTER
                            	   198: ;        ..........XXXXXX       ; EFFECTIVE ADDRESS
                            	   199: ;
                            	   200:          
                            	   201: 
                            	   202: FORM6A:	;  .align  2              ; LEA
00:0000A478 3E3C07E4        	   203:          MOVE.W  #$7E4,D7     ; CONTROL ADDRESSING
00:0000A47C 6150            	   204:          BSR.S   EEA10
                            	   205: 
00:0000A47E 1CC5            	   206:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   207: 
00:0000A480 3814            	   208:          MOVE.W  (A4),D4
00:0000A482 EF5C            	   209:          ROL.W   #7,D4
00:0000A484 6112            	   210:          BSR.S   FORMREGA
00:0000A486 603E            	   211:          BRA.S   CS13           ; COMMON
                            	   212: 
                            	   213: ;  BIT   5432109876543210
                            	   214: ;        ....DDD.........       ; DATA REGISTER
                            	   215: ;        ..........XXXXXX       ; EFFECTIVE ADDRESS
                            	   216: ;
                            	   217:          
                            	   218: 
                            	   219: FORM6D:  ;.align  2              ; CHK  DIVS  DIVU  MULS  MULU
00:0000A488 3E3C0FFD        	   220:          MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000A48C 6140            	   221:          BSR.S   EEA10
                            	   222: 
00:0000A48E 1CC5            	   223:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   224: 
00:0000A490 3814            	   225:          MOVE.W  (A4),D4
00:0000A492 EF5C            	   226:          ROL.W   #7,D4
00:0000A494 6112            	   227:          BSR.S   FORMREGD
00:0000A496 602E            	   228:          BRA.S   CS13           ; COMMON
                            	   229: 
00:0000A498 1CFC0041        	   230: FORMREGA:MOVE.B  #'A',(A6)+    ; FORMAT A@
00:0000A49C 02040007        	   231: FORMREG5:ANDI.B  #$07,D4
00:0000A4A0 00040030        	   232:          ORI.B   #'0',D4
00:0000A4A4 1CC4            	   233:          MOVE.B  D4,(A6)+
00:0000A4A6 4E75            	   234:          RTS
                            	   235: 
00:0000A4A8 1CFC0044        	   236: FORMREGD:MOVE.B  #'D',(A6)+    ; FORMAT D@
00:0000A4AC 60EE            	   237:          BRA.S   FORMREG5
                            	   238: 
                            	   239: ;  BIT   5432109876543210
                            	   240: ;        ....DDD......DDD       ; DATA REGISTERS
                            	   241: ;
                            	   242:         
                            	   243: FORM7: ;  .align  2              ; EXG
00:0000A4AE EF5C            	   244: 	rol.w #7,D4
00:0000A4B0 61F6            	   245: 	bsr.s FORMREGD
00:0000A4B2 1CC5            	   246: 	move.b D5,(A6)+     	; COMMA SEPARATOR
00:0000A4B4 3814            	   247: 	move.w (A4),D4
00:0000A4B6 61F0            	   248: 	bsr.s FORMREGD
00:0000A4B8 600C            	   249: 	bra.s CS13           	; COMMON
                            	   250: 
                            	   251: ;  BIT   5432109876543210
                            	   252: ;        ....AAA......AAA       ; ADDRESS REGISTERS
                            	   253: ;
                            	   254:          
                            	   255: FORM8:   ;.align  2              ; EXG
00:0000A4BA EF5C            	   256:          ROL.W   #7,D4
00:0000A4BC 61DA            	   257:          BSR.S   FORMREGA
                            	   258: 
                            	   259: FORM815:
00:0000A4BE 1CFC002C        	   260: 	MOVE.B  #',',(A6)+    ; COMMA SEPARATOR
00:0000A4C2 3814            	   261: 	MOVE.W  (A4),D4
00:0000A4C4 61D2            	   262: 	BSR.S   FORMREGA
                            	   263: CS13:
00:0000A4C6 6078            	   264: 	BRA     CS12           ; COMMON
                            	   265: 
                            	   266: ;  BIT   5432109876543210
                            	   267: ;        ....DDD.........       ; DATA REGISTER
                            	   268: ;        .............AAA       ; ADDRESS REGISTER
                            	   269: ;
                            	   270:          
                            	   271: 
                            	   272: FORM9:   ;.align  2              ; EXG
00:0000A4C8 EF5C            	   273:          ROL.W   #7,D4
00:0000A4CA 61DC            	   274:          BSR.S   FORMREGD       ; DATA REGISTER
00:0000A4CC 60F0            	   275:          BRA.S   FORM815
                            	   276: 
00:0000A4CE 600003D0        	   277: EEA10:   BRA     EEA
                            	   278: 
                            	   279: ;  BIT   5432109876543210
                            	   280: ;        ..........AAAAAA         EFFECTIVE ADDRESS
                            	   281: ;        .......MMM......         OP-MODE
                            	   282: ;        ....RRR.........         D-REGISTER
                            	   283: ;        .......011......         WORD  EA,A@
                            	   284: ;        .......111......         LONG  EA,A@
                            	   285: ;        .......000......         EA,D@ BYTE (ADDRESS REGISTER DIRECT NOT ALLOWED)
                            	   286: ;        .......0........         EA,D@
                            	   287: ;        .......1........         D@,EA
                            	   288: ;        ........00......         BYTE
                            	   289: ;        ........01......         WORD
                            	   290: ;        ........10......         LONG
                            	   291: ;
                            	   292:          
                            	   293: 
                            	   294: ;                               ADD <EA>,A@   CMP <EA>,A@   SUB <EA>,A@
                            	   295: FORM10EX:	;.align  2              ; ADD  CMP  SUB
00:0000A4D2 3E3C0FFF        	   296:          MOVE.W  #$FFF,D7     ; ALL MODES ALLOWED
00:0000A4D6 2004            	   297:          MOVE.L  D4,D0
00:0000A4D8 024001C0        	   298:          ANDI.W  #$01C0,D0
00:0000A4DC 6738            	   299:          BEQ.S   FORM103        ; .......000......
00:0000A4DE 0C4001C0        	   300:          CMPI.W  #$01C0,D0
00:0000A4E2 6710            	   301:          BEQ.S   FORM10E3       ; .......111......
00:0000A4E4 0C4000C0        	   302:          CMPI.W  #$00C0,D0
00:0000A4E8 661E            	   303:          BNE.S   FORM10E6
                            	   304: 
00:0000A4EA 1AFC002E        	   305:          MOVE.B  #'.',(A5)+    ; .......011......       STORE PERIOD
00:0000A4EE 1AFC0057        	   306:          MOVE.B  #'W',(A5)+
00:0000A4F2 6008            	   307:          BRA.S   FORM10E4
                            	   308: 
00:0000A4F4 1AFC002E        	   309: FORM10E3:MOVE.B  #'.',(A5)+
00:0000A4F8 1AFC004C        	   310:          MOVE.B  #'L',(A5)+
                            	   311: 
00:0000A4FC 61D0            	   312: FORM10E4:BSR.S   EEA10
                            	   313: 
00:0000A4FE 1CC5            	   314:          MOVE.B  D5,(A6)+     ; STORE COMMA SEPARATOR
                            	   315: 
00:0000A500 3814            	   316:          MOVE.W  (A4),D4
00:0000A502 EF5C            	   317:          ROL.W   #7,D4
00:0000A504 6192            	   318:          BSR.S   FORMREGA       ; <EA>,A@
00:0000A506 6038            	   319:          BRA.S   CS12           ; COMMON
                            	   320: 
00:0000A508 08140000        	   321: FORM10E6:BTST.B  #0,(A4)
00:0000A50C 661C            	   322:          BNE.S   FORM105        ; .......1........    D@,<EA>
00:0000A50E 600A            	   323:          BRA.S   FORM104        ; .......0........    <EA>,D@
                            	   324: 
                            	   325: ;  BIT   5432109876543210
                            	   326: ;        ..........AAAAAA       EFFECTIVE ADDRESS
                            	   327: ;        .......MMM......       OP-MODE
                            	   328: ;        ....RRR.........       D-REGISTER
                            	   329: ;        .......0........       EA,D@
                            	   330: ;        .......1........       D@,EA
                            	   331: ;        ........00......       BYTE
                            	   332: ;        ........01......       WORD
                            	   333: ;        ........10......       LONG
                            	   334: 
                            	   335:          
                            	   336: 
                            	   337: FORM10:  ;.align  2              ; AND  EOR  OR
00:0000A510 08140000        	   338:          BTST.B  #0,(A4)
00:0000A514 6614            	   339:          BNE.S   FORM105
                            	   340: 
00:0000A516 3E3C0FFD        	   341: FORM103: MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000A51A 610002FA        	   342: FORM104: BSR     FORMSIZE
00:0000A51E 61AE            	   343:          BSR.S   EEA10          ; <EA>,D@
                            	   344: 
00:0000A520 1CC5            	   345:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   346: 
00:0000A522 1814            	   347:          MOVE.B  (A4),D4
00:0000A524 E20C            	   348:          LSR.B   #1,D4
00:0000A526 6180            	   349:          BSR     FORMREGD
00:0000A528 6016            	   350:          BRA.S   CS12           ; COMMON
                            	   351: 
00:0000A52A 610002EA        	   352: FORM105: BSR     FORMSIZE       ; D@,<EA>
00:0000A52E 1814            	   353:          MOVE.B  (A4),D4
00:0000A530 E20C            	   354:          LSR.B   #1,D4
00:0000A532 6100FF74        	   355:          BSR     FORMREGD
                            	   356: 
00:0000A536 1CC5            	   357:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   358: 
00:0000A538 3814            	   359:          MOVE.W  (A4),D4
00:0000A53A 3E3C01FD        	   360:          MOVE.W  #$1FD,D7     ; ALTERABLE MEMORY ADDRESSING
00:0000A53E 618E            	   361:          BSR.S   EEA10
00:0000A540 6000064A        	   362: CS12:    BRA     COMMON
                            	   363: 
                            	   364:          
                            	   365: 
                            	   366: ;                               PEA     (JMP  JSR)
00:0000A544 3E3C07E4        	   367: FORM11:  MOVE.W  #$7E4,D7     ; CONTROL ADDERSSING
00:0000A548 6184            	   368:          BSR     EEA10
00:0000A54A 60F4            	   369:          BRA.S   CS12           ; COMMON
                            	   370: 
                            	   371:          
                            	   372: 
                            	   373: ;                               ; JMP  JSR
00:0000A54C 2004            	   374: FORM11SL:MOVE.L  D4,D0        ; LOOK FOR .S  OR  .L
00:0000A54E 0240003F        	   375:          ANDI.W  #$3F,D0
00:0000A552 0C400038        	   376:          CMPI.W  #$38,D0
00:0000A556 6608            	   377:          BNE.S   FORM112        ; NOT .S
00:0000A558 1AFC002E        	   378:          MOVE.B  #'.',(A5)+    ; PERIOD
00:0000A55C 1AFC0053        	   379:          MOVE.B  #'S',(A5)+    ; S
00:0000A560 0C400039        	   380: FORM112: CMPI.W  #$39,D0
00:0000A564 6608            	   381:          BNE.S   FORM114
00:0000A566 1AFC002E        	   382:          MOVE.B  #'.',(A5)+    ; PERIOD
00:0000A56A 1AFC004C        	   383:          MOVE.B  #'L',(A5)+    ; L
00:0000A56E 60D4            	   384: FORM114: BRA.S   FORM11
                            	   385: 
                            	   386: ;  BIT   5432109876543210
                            	   387: ;        ....XXX.....0...       DATA DESTINATION REGISTER
                            	   388: ;        ....XXX.....1...       ADDRESS REGISTER
                            	   389: ;        ....XXX.00......       BYTE
                            	   390: ;        ........01......       WORD
                            	   391: ;        ........10......       LONG
                            	   392: ;        ............0...       DATA REGISTER TO DATA REGISTER
                            	   393: ;        ............1...       MEMORY TO MEMORY
                            	   394: ;        ............0xXX       DATA SOURCE REGISTER
                            	   395: ;        ............1XXX       ADDRESS SOURCE REGISTER
                            	   396: ;
                            	   397:          
                            	   398: 
                            	   399: FORM12:  ;.align  2              ; ABCD  ADDX  SBCD  SUBX
00:0000A570 610002A4        	   400:          BSR     FORMSIZE
                            	   401: 
00:0000A574 08040003        	   402:          BTST    #3,D4
00:0000A578 6610            	   403:          BNE.S   FORM125
                            	   404: 
00:0000A57A 6100FF2C        	   405:          BSR     FORMREGD       ; D@,D@;   FORMAT SOURCE
                            	   406: 
00:0000A57E 1CC5            	   407:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   408: 
00:0000A580 1814            	   409:          MOVE.B  (A4),D4
00:0000A582 E20C            	   410:          LSR.B   #1,D4
00:0000A584 6100FF22        	   411:          BSR     FORMREGD       ; FORMAT DESTINATION
00:0000A588 6046            	   412:          BRA.S   CS11           ; COMMON
                            	   413: 
00:0000A58A 1CFC002D        	   414: FORM125: MOVE.B  #'-',(A6)+    ; -
00:0000A58E 1CFC0028        	   415:          MOVE.B  #'(',(A6)+    ; (
00:0000A592 6100FF04        	   416:          BSR     FORMREGA       ; A@    SOURCE
                            	   417: 
00:0000A596 203C282D2C29    	   418:          MOVE.L  #$282d2c29,D0 ; ),-(
00:0000A59C 6152            	   419:          BSR.S   SCHR           ; STORE CHARS
                            	   420: 
00:0000A59E 1814            	   421:          MOVE.B  (A4),D4
00:0000A5A0 E20C            	   422:          LSR.B   #1,D4
00:0000A5A2 6100FEF4        	   423:          BSR     FORMREGA       ; A@   DESTINATION
00:0000A5A6 1CFC0029        	   424:          MOVE.B  #')',(A6)+
00:0000A5AA 6024            	   425:          BRA.S   CS11           ; COMMON
                            	   426: 
                            	   427: ;  BIT   5432109876543210
                            	   428: ;        ....XXX.....1...       ADDRESS REGISTER    DESTINATION
                            	   429: ;        ....XXX.00......       BYTE
                            	   430: ;        ........01......       WORD
                            	   431: ;        ........10......       LONG
                            	   432: ;        ............1...       MEMORY TO MEMORY
                            	   433: ;        ............1XXX       ADDRESS SOURCE REGISTER
                            	   434: ;
                            	   435:          
                            	   436: 
                            	   437: FORM12A: ;.align  2              ; CMPM
00:0000A5AC 61000268        	   438:          BSR     FORMSIZE
                            	   439: 
00:0000A5B0 1CFC0028        	   440:          MOVE.B  #'(',(A6)+    ; (
00:0000A5B4 6100FEE2        	   441:          BSR     FORMREGA       ; A@
                            	   442: 
00:0000A5B8 203C282C2B29    	   443:          MOVE.L  #$282c2b29,D0  ; )+,(
00:0000A5BE 6130            	   444:          BSR.S   SCHR           ; STORE CHARS
                            	   445: 
00:0000A5C0 1814            	   446:          MOVE.B  (A4),D4
00:0000A5C2 E20C            	   447:          LSR.B   #1,D4
00:0000A5C4 6100FED2        	   448:          BSR     FORMREGA       ; A@
00:0000A5C8 1CFC0029        	   449:          MOVE.B  #')',(A6)+
00:0000A5CC 1CFC002B        	   450:          MOVE.B  #'+',(A6)+
00:0000A5D0 600005BA        	   451: CS11:    BRA     COMMON
                            	   452: 
                            	   453:          
                            	   454: 
00:0000A5D4 60000210        	   455: IQUICK:  BRA     IQUICKA        ; ADDQ  SUBQ
                            	   456: 
                            	   457: ;  BIT   5432109876543210
                            	   458: ;        0111...0........       FIXED
                            	   459: ;        ....RRR.........       DATA REGISTER
                            	   460: ;        ........DDDDDDDD       SIGN EXTENDED DATA
                            	   461: ;
                            	   462:          
                            	   463: 
                            	   464: IMOVEQ:  ;.align  2
00:0000A5D8 1CFC0023        	   465:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	   466: 
00:0000A5DC 3014            	   467:          MOVE.W  (A4),D0
00:0000A5DE 4880            	   468:          EXT.W   D0
00:0000A5E0 48C0            	   469:          EXT.L   D0
00:0000A5E2 6100FCAE        	   470:          BSR     HEX2DEC        ; DECIMAL
                            	   471: 
00:0000A5E6 1CC5            	   472:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   473: 
00:0000A5E8 EF5C            	   474:          ROL.W   #7,D4
00:0000A5EA 6100FEBC        	   475:          BSR     FORMREGD
00:0000A5EE 60E0            	   476:          BRA.S   CS11           ; COMMON
                            	   477: 
00:0000A5F0 1CC0            	   478: SCHR:    MOVE.B  D0,(A6)+     ; OUTPUT STRING
00:0000A5F2 E088            	   479:          LSR.L   #8,D0
00:0000A5F4 66FA            	   480:          BNE.S   SCHR           ; MORE TO OUTPUT
00:0000A5F6 4E75            	   481:          RTS
                            	   482: 
                            	   483: ; MOVE FROM SR  (STATUS REGISTER)
                            	   484: ;
                            	   485:          
                            	   486: 
00:0000A5F8 203C002C5253    	   487: IMVFSR:  MOVE.L  #$002c5253,D0 ; SR,
                            	   488: 
00:0000A5FE 61F0            	   489:          BSR.S   SCHR
00:0000A600 6100029E        	   490:          BSR     EEA            ; DATA ALTERABLE
00:0000A604 60CA            	   491:          BRA.S   CS11           ; COMMON
                            	   492: 
                            	   493: ; MOVE FROM USP (USER STACK POINTER)
                            	   494: ;
                            	   495:          
                            	   496: 
00:0000A606 203C2C505355    	   497: IMVFUSP: MOVE.L  #$2c505355,D0 ; USP,
00:0000A60C 61E2            	   498:          BSR.S   SCHR
00:0000A60E 6100FE88        	   499:          BSR     FORMREGA
00:0000A612 60BC            	   500:          BRA.S   CS11           ; COMMON
                            	   501: 
                            	   502: ; MOVE TO SR (STATUS REGISTER)
                            	   503: ;
                            	   504:          
                            	   505: 
00:0000A614 3E3C0FFD        	   506: IMVTSR:  MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000A618 61000286        	   507:          BSR     EEA
00:0000A61C 203C0052532C    	   508:          MOVE.L  #$0052532c,D0 ; ,SR
00:0000A622 61CC            	   509: IMVT44:  BSR.S   SCHR
00:0000A624 60AA            	   510:          BRA.S   CS11           ; COMMON
                            	   511: 
                            	   512: ; MOVE TO USP (USER STACK POINTER)
                            	   513: ;
                            	   514:          
                            	   515: 
00:0000A626 6100FE70        	   516: IMVTUSP: BSR     FORMREGA
00:0000A62A 203C5053552C    	   517:          MOVE.L  #$5053552c,D0 ; ,USP
00:0000A630 60F0            	   518:          BRA.S   IMVT44
                            	   519: 
                            	   520: ;  MOVE TO CCR (CONDITION CODE REGISTER)
                            	   521: ;
                            	   522:          
                            	   523: 
00:0000A632 3E3C0FFD        	   524: IMVTCCR: MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000A636 61000268        	   525:          BSR     EEA
00:0000A63A 203C5243432C    	   526:          MOVE.L  #$5243432c,D0 ; ,CCR
00:0000A640 60E0            	   527:          BRA.S   IMVT44
                            	   528: 
                            	   529: ;  BIT   5432109876543210
                            	   530: ;        0000...1..001...       FIXED
                            	   531: ;        ....XXX.........       DATA REGISTER
                            	   532: ;        ........0.......       MEMORY TO REGISTER
                            	   533: ;        ........1.......       REGISTER TO MEMORY
                            	   534: ;        .........0......       WORD
                            	   535: ;        .........1......       LONG
                            	   536: ;        .............XXX       ADDRESS REGISTER
                            	   537: ;
                            	   538:          
                            	   539: 
                            	   540: IMOVEP:  ;.align  2
00:0000A642 1AFC002E        	   541:          MOVE.B  #'.',(A5)+    ; D@,#(A@)
00:0000A646 303C4C57        	   542:          MOVE.W  #$4c57,D0    ; "LW"
00:0000A64A 08040006        	   543:          BTST    #6,D4
00:0000A64E 6702            	   544:          BEQ.S   IMOVEP11       ; USE "W"
00:0000A650 E048            	   545:          LSR.W   #8,D0         ; USE "L"
00:0000A652 1AC0            	   546: IMOVEP11:MOVE.B  D0,(A5)+     ; LENGTH
                            	   547: 
00:0000A654 1814            	   548:          MOVE.B  (A4),D4
00:0000A656 E20C            	   549:          LSR.B   #1,D4
                            	   550: 
00:0000A658 082C00070001    	   551:          BTST.B  #7,1(A4)
00:0000A65E 670E            	   552:          BEQ.S   IMOVEP35
                            	   553: 
00:0000A660 6100FE46        	   554:          BSR     FORMREGD       ; D@,$HHHH(A@)
                            	   555: 
00:0000A664 1CC5            	   556:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   557: 
00:0000A666 3814            	   558:          MOVE.W  (A4),D4
00:0000A668 6112            	   559:          BSR.S   IMOVEP66
00:0000A66A 6000051E        	   560: CS20:    BRA     COMMON4
                            	   561: 
00:0000A66E 610C            	   562: IMOVEP35:BSR.S   IMOVEP66       ; $HHHH(A@),D@
                            	   563: 
00:0000A670 1CC5            	   564:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   565: 
00:0000A672 1814            	   566:          MOVE.B  (A4),D4
00:0000A674 E20C            	   567:          LSR.B   #1,D4
00:0000A676 6100FE30        	   568:          BSR     FORMREGD
00:0000A67A 60EE            	   569:          BRA.S   CS20           ; COMMON4
                            	   570: 
00:0000A67C 1CFC0024        	   571: IMOVEP66:MOVE.B  #'$',(A6)+    ; FORMAT DISPLACEMENT
00:0000A680 302C0002        	   572:          MOVE.W  2(A4),D0
00:0000A684 6100FC70        	   573:          BSR     PNT4HX
                            	   574: 
00:0000A688 1CFC0028        	   575:          MOVE.B  #'(',(A6)+
                            	   576: 
00:0000A68C 3814            	   577:          MOVE.W  (A4),D4
00:0000A68E 6100FE08        	   578:          BSR     FORMREGA
00:0000A692 1CFC0029        	   579:          MOVE.B  #')',(A6)+
00:0000A696 4E75            	   580:          RTS
                            	   581: 
                            	   582: SCOMMON:
00:0000A698 600004F2        	   583: 	bra COMMON         ; NOP RESET RTE RTR RTS TRAPV
                            	   584:         
                            	   585: 
00:0000A69C 610000E4        	   586: ISCC:    BSR     ICCCC          ; GET REST OF OP-CODE
00:0000A6A0 610001FE        	   587:          BSR     EEA            ; DATA ALTERABLE
00:0000A6A4 60F2            	   588:          BRA.S   SCOMMON
                            	   589: 
                            	   590:          
                            	   591: 
                            	   592: IDBCC:   ;.align  2              ; DB--
00:0000A6A6 3814            	   593:          MOVE.W  (A4),D4
00:0000A6A8 6100FDFE        	   594:          BSR     FORMREGD
                            	   595: 
00:0000A6AC 1CC5            	   596:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
00:0000A6AE 1CFC0024        	   597:          MOVE.B  #'$',(A6)+    ; HEX FIELD TO FOLLOW
                            	   598: 
00:0000A6B2 610000CE        	   599:          BSR     ICCCC
00:0000A6B6 602C            	   600:          BRA.S   ICC55
                            	   601: 
                            	   602: ;  BIT   5432109876543210
                            	   603: ;        0110............       FIXED
                            	   604: ;        ....CCCC........       CONDITION
                            	   605: ;        ........DDDDDDD0       DISPLACEMENT
                            	   606: ;        ...............1       ERROR (ODD BOUNDRY DISPLACEMENT)
                            	   607: ;
                            	   608:          
                            	   609: 
                            	   610: ICC:     ;.align  2              ; B--
00:0000A6B8 610000C8        	   611:          BSR     ICCCC
                            	   612: 
00:0000A6BC 1CFC0024        	   613: IBSR:    MOVE.B  #'$',(A6)+    ; BSR.S BRA
                            	   614: 
00:0000A6C0 4A04            	   615:          TST.B   D4
00:0000A6C2 6720            	   616:          BEQ.S   ICC55          ; 16 BIT DISPLACEMENT
                            	   617: 
00:0000A6C4 1AFC002E        	   618:          MOVE.B  #'.',(A5)+
00:0000A6C8 1AFC0053        	   619:          MOVE.B  #'S',(A5)+
00:0000A6CC 4884            	   620:          EXT.W   D4            ; 8 BIT DISPLACEMENT
                            	   621: 
00:0000A6CE 48C4            	   622: ICC35:   EXT.L   D4            ; SIGN-EXTENDED DISPLACEMENT
00:0000A6D0 D8A9FFFC        	   623:          ADD.L   HISPC(A1),D4  ; + PROGRAM COUNTER
00:0000A6D4 5484            	   624:          ADDQ.L  #2,D4         ; + TWO
00:0000A6D6 2004            	   625:          MOVE.L  D4,D0
                            	   626: 
00:0000A6D8 E284            	   627:          ASR.L   #1,D4
00:0000A6DA 650004D8        	   628:          BCS     FERROR         ; ODD BOUNDRY DISPLACEMENT
                            	   629: 
00:0000A6DE 6100FC1A        	   630:          BSR     PNT6HX
00:0000A6E2 60B4            	   631:          BRA.S   SCOMMON
                            	   632: 
00:0000A6E4 5483            	   633: ICC55:   ADDQ.L  #2,D3         ; SIZE
00:0000A6E6 382C0002        	   634:          MOVE.W  2(A4),D4
00:0000A6EA 1AFC002E        	   635:          MOVE.B  #'.',(A5)+
00:0000A6EE 1AFC004C        	   636:          MOVE.B  #'L',(A5)+    ; .L FOR 16 BIT DISPLACEMENT
00:0000A6F2 60DA            	   637:          BRA.S   ICC35
                            	   638: 
                            	   639:          
                            	   640: ;                               ; BCHG  BCLR  BSET  BTST
                            	   641: ISETD:   ;.align  2              ; DYNAMIC BIT
00:0000A6F4 EF5C            	   642:          ROL.W   #7,D4
00:0000A6F6 6100FDB0        	   643:          BSR     FORMREGD       ; DATA REGISTER
                            	   644: 
00:0000A6FA 1CC5            	   645: ISETD12: MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   646: 
00:0000A6FC 3814            	   647:          MOVE.W  (A4),D4
00:0000A6FE 610001A0        	   648:          BSR     EEA            ; DATA ALTERABLE
00:0000A702 6094            	   649: CS18:    BRA.S   SCOMMON
                            	   650: 
                            	   651:          ;.align   4
                            	   652: 
                            	   653: ;                            BCHG  BCLR  BSET  BTST
                            	   654: ;  1ST WORD     .... .... ..XX XXXX    EA   DATA ALTERABLE ONLY
                            	   655: ;  2ND WORD     0000 0000 000Y YYYY    BIT NUMBER
                            	   656: ;
                            	   657: ISETS:   ;.align  2              ; STATIC BIT
00:0000A704 5483            	   658:          ADDQ.L  #2,D3         ; SIZE
00:0000A706 1CFC0023        	   659:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	   660: 
00:0000A70A 7000            	   661:          CLR.L   D0
00:0000A70C 302C0002        	   662:          MOVE.W  2(A4),D0     ; GET BIT POSITION FROM 2ND WORD
00:0000A710 2200            	   663:          MOVE.L  D0,D1
00:0000A712 EA89            	   664:          LSR.L   #5,D1
00:0000A714 6600049E        	   665:          BNE     FERROR
00:0000A718 6100FB78        	   666:          BSR     HEX2DEC        ; DECIMAL
                            	   667: 
00:0000A71C 60DC            	   668:          BRA.S   ISETD12
                            	   669: 
                            	   670: ;   BIT  5432109876543210
                            	   671: ;        ....XXX.........       IMMEDIATE COUNT/REGISTER
                            	   672: ;        .......0........       RIGHT SHIFT
                            	   673: ;        .......1........       LEFT SHIFT
                            	   674: ;        ........00......       BYTE
                            	   675: ;        ........01......       WORD
                            	   676: ;        ........10......       LONG
                            	   677: ;        ....0...11......       WORD (MEMORY)
                            	   678: ;        ....0...11AAAAAA       EFFECTIVE ADDRESS
                            	   679: ;        ..........0.....       SHIFT IMMEDIATE COUNT
                            	   680: ;        ..........1.....       SHIFT COUNT (MODULO 64) IN DATA REGISTER
                            	   681: ;
                            	   682:          ;.align   4
                            	   683: 
                            	   684: ISHIFT:  ;.align   2             ; AS-  LS-  RO-  ROX-
00:0000A71E 303C4C52        	   685:          MOVE.W  #$4c52,D0    ; "LR"
00:0000A722 08040008        	   686:          BTST    #8,D4         ; DIRECTION BIT
00:0000A726 6702            	   687:          BEQ.S   ISHIFT13       ; RIGHT
00:0000A728 E048            	   688:          LSR.W   #8,D0         ; LEFT
00:0000A72A 1AC0            	   689: ISHIFT13:MOVE.B  D0,(A5)+     ; DIRECTION; "L" OR "R"
                            	   690: 
00:0000A72C 3014            	   691:          MOVE.W  (A4),D0
00:0000A72E 024000C0        	   692:          ANDI.W  #$00C0,D0
00:0000A732 0C4000C0        	   693:          CMPI.W  #$00C0,D0
00:0000A736 6730            	   694:          BEQ.S   ISHIFTM1       ; MEMORY SHIFT
                            	   695: 
00:0000A738 610000DC        	   696:          BSR     FORMSIZE
                            	   697: 
00:0000A73C EF5C            	   698:          ROL.W   #7,D4
00:0000A73E 0804000C        	   699:          BTST    #12,D4        ; I/R BIT
00:0000A742 6616            	   700:          BNE.S   ISHIFT33       ; COUNT IN REGISTER
                            	   701: 
00:0000A744 02040007        	   702:          ANDI.B  #$07,D4      ; IMMEDIATE COUNT
00:0000A748 6604            	   703:          BNE.S   ISHIFT23
00:0000A74A 00040008        	   704:          ORI.B   #$08,D4      ; CHANGE ZERO TO EIGHT
00:0000A74E 00040030        	   705: ISHIFT23:ORI.B   #'0',D4
00:0000A752 1CFC0023        	   706:          MOVE.B  #'#',(A6)+
00:0000A756 1CC4            	   707:          MOVE.B  D4,(A6)+
00:0000A758 6004            	   708:          BRA.S   ISHIFT44
                            	   709: 
00:0000A75A 6100FD4C        	   710: ISHIFT33:BSR     FORMREGD
                            	   711: 
00:0000A75E 1CC5            	   712: ISHIFT44:MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   713: 
00:0000A760 3814            	   714:          MOVE.W  (A4),D4
00:0000A762 6100FD44        	   715:          BSR     FORMREGD
00:0000A766 609A            	   716: CS17:    BRA.S   CS18           ; COMMON
                            	   717: 
00:0000A768 1AFC002E        	   718: ISHIFTM1:MOVE.B  #'.',(A5)+    ; PERIOD
00:0000A76C 1AFC0057        	   719:          MOVE.B  #'W',(A5)+    ; .WORD
                            	   720: 
00:0000A770 0804000B        	   721:          BTST    #11,D4
00:0000A774 6600043E        	   722:          BNE     FERROR         ; BIT 11 MUST BE ZERO
                            	   723: 
00:0000A778 3E3C01FC        	   724:          MOVE.W  #$1FC,D7     ; MEMORY ALTERABLE ADDRESSING
00:0000A77C 61000122        	   725:          BSR     EEA
00:0000A780 60E4            	   726:          BRA.S   CS17           ; COMMON
                            	   727: 
00:0000A782 700F            	   728: ICCCC:   MOVEQ   #$0F,D0      ; APPEND CONDITION CODE
00:0000A784 C014            	   729:          AND.B   (A4),D0      ; D0 = CCC
00:0000A786 E388            	   730:          LSL.L   #1,D0         ; D0 = CCC;2
                            	   731: 
00:0000A788 323B0010        	   732:          MOVE.W  BRTBL(PC,D0.W),D1 ; GET BRANCH MNEMONIC
00:0000A78C 1AC1            	   733:          MOVE.B  D1,(A5)+     ; (REVERSED) FROM THE TABLE
00:0000A78E E049            	   734:          LSR.W   #8,D1         ; AND ADD THE NONBLANK PORTION
00:0000A790 0C010020        	   735:          CMPI.B  #BLANK,D1     ; TO THE BUFFER.
00:0000A794 6702            	   736:          BEQ.S   ICCCC9
00:0000A796 1AC1            	   737:          MOVE.B  D1,(A5)+
00:0000A798 4E75            	   738: ICCCC9:  RTS
                            	   739: 
00:0000A79A 2054            	   740: BRTBL:   dc.b  " T"           ; "T " BRA ACCEPTED
00:0000A79C 2046            	   741:          dc.b  " F"           ; "F "
00:0000A79E 4948            	   742:          dc.b  "IH"           ; "HI"
00:0000A7A0 534C            	   743:          dc.b  "SL"           ; "LS"
00:0000A7A2 4343            	   744:          dc.b  "CC"           ; "CC"
00:0000A7A4 5343            	   745:          dc.b  "SC"           ; "CS"
00:0000A7A6 454E            	   746:          dc.b  "EN"           ; "NE"
00:0000A7A8 5145            	   747:          dc.b  "QE"           ; "EQ"
00:0000A7AA 4356            	   748:          dc.b  "CV"           ; "VC"
00:0000A7AC 5356            	   749:          dc.b  "SV"           ; "VS"
00:0000A7AE 4C50            	   750:          dc.b  "LP"           ; "PL"
00:0000A7B0 494D            	   751:          dc.b  "IM"           ; "MI"
00:0000A7B2 4547            	   752:          dc.b  "EG"           ; "GE"
00:0000A7B4 544C            	   753:          dc.b  "TL"           ; "LT"
00:0000A7B6 5447            	   754:          dc.b  "TG"           ; "GT"
00:0000A7B8 454C            	   755:          dc.b  "EL"           ; "LE"
                            	   756: 
                            	   757: ;   BIT  5432109876543210
                            	   758: ;        ....RRRMMM......    DESTINATION REGISTER MODE
                            	   759: ;        ..........MMMRRR    SOURCE MODE REGISTER
                            	   760: ;
                            	   761: ; IF BYTE SIZE; ADDRESS DIRECT NOT ALLOWED AS SOURCE
                            	   762: ;
                            	   763: 					even
                            	   764: IMOVEA1: ;.align  2
00:0000A7BA 3E3C0FFF        	   765:          MOVE.W  #$FFF,D7     ; ALL MODES
00:0000A7BE 610000E0        	   766:          BSR     EEA
                            	   767: 
00:0000A7C2 1CC5            	   768:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   769: 
00:0000A7C4 3814            	   770:          MOVE.W  (A4),D4      ; ....RRRMMM......
00:0000A7C6 E24C            	   771:          LSR.W   #1,D4         ; .....RRRMMM.....
00:0000A7C8 EA0C            	   772:          LSR.B   #5,D4         ; .....RRR.....MMM
00:0000A7CA E05C            	   773:          ROR.W   #8,D4         ; .....MMM.....RRR
00:0000A7CC EB0C            	   774:          LSL.B   #5,D4         ; .....MMMRRR.....
00:0000A7CE EA4C            	   775:          LSR.W   #5,D4         ; ..........MMMRRR
                            	   776: 
                            	   777: ; IF .BYTE DESTINATION A@ NOT ALLOWED
00:0000A7D0 3E3C01FF        	   778:          MOVE.W  #$1FF,D7     ; DATA ALTERABLE + A@
00:0000A7D4 1014            	   779:          MOVE.B  (A4),D0
00:0000A7D6 0C000001        	   780:          CMPI.B  #$01,D0
00:0000A7DA 6604            	   781:          BNE.S   IMOVE19        ; NOT BYTE SIZE
                            	   782: 
00:0000A7DC 3E3C01FD        	   783:          MOVE.W  #$1FD,D7     ; DATA ALTERABLE
                            	   784: IMOVE19:
                            	   785: 
00:0000A7E0 610000BE        	   786:          BSR     EEA
00:0000A7E4 602C            	   787:          BRA.S   CS19           ; COMMON
                            	   788: 
                            	   789: ;  IF BYTE; ADDRESS REGISTER DIRECT NOT ALLOWED
                            	   790: IQUICKA: ;.align  2              ; ADDQ  SUBQ
00:0000A7E6 612E            	   791:          BSR.S   FORMSIZE
                            	   792: 
00:0000A7E8 1CFC0023        	   793:          MOVE.B  #'#',(A6)+
00:0000A7EC EF5C            	   794:          ROL.W   #7,D4
00:0000A7EE 02040007        	   795:          ANDI.B  #7,D4
00:0000A7F2 6604            	   796:          BNE.S   IQUICK21
00:0000A7F4 00040008        	   797:          ORI.B   #8,D4         ; MAKE ZERO INTO EIGHT
00:0000A7F8 00040030        	   798: IQUICK21:ORI.B   #'0',D4       ; MAKE ASCII
00:0000A7FC 1CC4            	   799:          MOVE.B  D4,(A6)+
                            	   800: 
00:0000A7FE 1CC5            	   801:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   802: 
00:0000A800 3814            	   803:          MOVE.W  (A4),D4
                            	   804: 
00:0000A802 3014            	   805:          MOVE.W  (A4),D0
00:0000A804 024000C0        	   806:          ANDI.W  #$00C0,D0
00:0000A808 6704            	   807:          BEQ.S   IQUICK31       ; DATA ALTERABLE
00:0000A80A 3E3C01FF        	   808:          MOVE.W  #$1FF,D7     ; ALTERABLE ADDRESSING
00:0000A80E 61000090        	   809: IQUICK31:BSR     EEA
00:0000A812 60000378        	   810: CS19:    BRA     COMMON
                            	   811: 
                            	   812: ;  BIT   5432109876543210
                            	   813: ;        ........00......       BYTE
                            	   814: ;        ........01......       WORD
                            	   815: ;        ........10......       LONG
                            	   816: ;        ........11......       ERROR
                            	   817: ;
                            	   818: FORMSIZE: ;.align  2
00:0000A816 3414            	   819:          MOVE.W  (A4),D2
00:0000A818 1AFC002E        	   820:          MOVE.B  #'.',(A5)+    ; STORE PERIOD
00:0000A81C EC4A            	   821:          LSR.W   #6,D2
00:0000A81E 02420003        	   822:          ANDI.W  #$03,D2
00:0000A822 6606            	   823:          BNE.S   FORM91
00:0000A824 1AFC0042        	   824:          MOVE.B  #'B',(A5)+    ; STORE "B"
00:0000A828 6016            	   825:          BRA.S   FORM95
                            	   826: 
00:0000A82A 103C0057        	   827: FORM91:  MOVE.B  #'W',D0
00:0000A82E 0C020001        	   828:          CMPI.B  #1,D2
00:0000A832 670A            	   829:          BEQ.S   FORM93
00:0000A834 103C004C        	   830:          MOVE.B  #'L',D0
00:0000A838 0C020002        	   831:          CMPI.B  #2,D2
00:0000A83C 665E            	   832:          BNE.S   FE10           ; FERROR
00:0000A83E 1AC0            	   833: FORM93:  MOVE.B  D0,(A5)+     ; STORE "W" OR "L"
00:0000A840 4E75            	   834: FORM95:  RTS
                            	   835: 
00:0000A842 6100FC64        	   836: EA000:   BSR     FORMREGD
00:0000A846 08070000        	   837:          BTST    #0,D7
00:0000A84A 6750            	   838:          BEQ.S   FE10           ; FERROR
00:0000A84C 4E75            	   839:          RTS
                            	   840: 
00:0000A84E 6100FC48        	   841: EA001:   BSR     FORMREGA
00:0000A852 08070001        	   842:          BTST    #1,D7
00:0000A856 6744            	   843:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:0000A858 4E75            	   844:          RTS
                            	   845: 
00:0000A85A 1CFC0028        	   846: EA010:   MOVE.B  #'(',(A6)+
00:0000A85E 6100FC38        	   847:          BSR     FORMREGA
00:0000A862 1CFC0029        	   848:          MOVE.B  #')',(A6)+
00:0000A866 08070002        	   849:          BTST    #2,D7
00:0000A86A 6730            	   850:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:0000A86C 4E75            	   851:          RTS
                            	   852: 
00:0000A86E 1CFC0028        	   853: EA011:   MOVE.B  #'(',(A6)+
00:0000A872 6100FC24        	   854:          BSR     FORMREGA
00:0000A876 1CFC0029        	   855:          MOVE.B  #')',(A6)+
00:0000A87A 1CFC002B        	   856:          MOVE.B  #'+',(A6)+
00:0000A87E 08070003        	   857:          BTST    #3,D7
00:0000A882 6718            	   858:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:0000A884 4E75            	   859: EA011RTS:RTS
                            	   860: 
00:0000A886 1CFC002D        	   861: EA100:   MOVE.B  #'-',(A6)+
00:0000A88A 1CFC0028        	   862:          MOVE.B  #'(',(A6)+
00:0000A88E 6100FC08        	   863:          BSR     FORMREGA
00:0000A892 1CFC0029        	   864:          MOVE.B  #')',(A6)+
00:0000A896 08070004        	   865:          BTST    #4,D7
00:0000A89A 66E8            	   866:          BNE.S   EA011RTS
00:0000A89C 60000316        	   867: FE10:    BRA     FERROR         ; THIS MODE NOT ALLOWED
                            	   868: 
                            	   869: ;  ENTER       A4 = POINTER TO FIRST WORD
                            	   870: ;              D3 = OFFSET TO EXTENSION
                            	   871: ;              D4 = VALUE TO PROCESS
                            	   872: ;              D7 = MODES ALLOWED MASK
                            	   873: ;
                            	   874: EEA:     ;.align  2
00:0000A8A0 2004            	   875: 	move.l D4,D0
00:0000A8A2 E648            	   876: 	lsr.w #3,D0
00:0000A8A4 02400007        	   877: 	andi.w #$7,D0
00:0000A8A8 6798            	   878: 	beq.s EA000
00:0000A8AA 0C000001        	   879: 	cmpi.b #1,D0
00:0000A8AE 679E            	   880: 	beq.s EA001
00:0000A8B0 0C000002        	   881: 	cmpi.b #2,D0
00:0000A8B4 67A4            	   882: 	beq.s EA010
00:0000A8B6 0C000003        	   883: 	cmpi.b #3,D0
00:0000A8BA 67B2            	   884: 	beq.s EA011
00:0000A8BC 0C000004        	   885: 	cmpi.b #4,D0
00:0000A8C0 67C4            	   886: 	beq.s EA100
00:0000A8C2 0C000005        	   887: 	cmpi.b #5,D0
00:0000A8C6 6760            	   888: 	beq.s EA101
00:0000A8C8 0C000007        	   889: 	cmpi.b #7,D0
00:0000A8CC 6770            	   890: 	beq.s EA111
                            	   891: 
                            	   892: ;    EXTENSION WORD
                            	   893: ;   BIT  5432109876543210
                            	   894: ;        0...............    DATA REGISTER
                            	   895: ;        1...............    ADDRESS REGISTER
                            	   896: ;        .RRR............    REGISTER
                            	   897: ;        ....0...........    SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REG
                            	   898: ;        ....1...........    LONG VALUE IN INDEX REGISTER
                            	   899: ;        .....000........
                            	   900: ;        ........DDDDDDDD    DISPLACEMENT INTEGER
                            	   901: ;
                            	   902: ; EA110            ADDRESS REGISTER INDIRECT WITH INDEX
                            	   903: 
00:0000A8CE 08070006        	   904:          BTST    #6,D7
00:0000A8D2 67C8            	   905:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
                            	   906: 
00:0000A8D4 32343000        	   907:          MOVE.W  (A4,D3.W),D1
00:0000A8D8 02410700        	   908:          ANDI.W  #$0700,D1
00:0000A8DC 66BE            	   909:          BNE.S   FE10           ; FERROR  BITS 10-8 MUST BE ZERO
                            	   910: 
00:0000A8DE 30343000        	   911:          MOVE.W  (A4,D3.W),D0  ; D0 = DISPLACEMENT
00:0000A8E2 4880            	   912:          EXT.W   D0
00:0000A8E4 48C0            	   913:          EXT.L   D0
00:0000A8E6 6100F9AA        	   914:          BSR     HEX2DEC        ; DECIMAL
00:0000A8EA 1CFC0028        	   915:          MOVE.B  #'(',(A6)+    ; (
                            	   916: 
00:0000A8EE 6100FBA8        	   917:          BSR     FORMREGA       ; XX(A@
                            	   918: 
00:0000A8F2 1CFC002C        	   919:          MOVE.B  #',',(A6)+    ; XX(A@,
                            	   920: 
00:0000A8F6 18343000        	   921:          MOVE.B  (A4,D3.W),D4
00:0000A8FA E804            	   922:          ASR.B   #4,D4
00:0000A8FC 6A06            	   923:          BPL.S   EA1105
00:0000A8FE 6100FB98        	   924:          BSR     FORMREGA
00:0000A902 6004            	   925:          BRA.S   EA1107
                            	   926: 
00:0000A904 6100FBA2        	   927: EA1105:  BSR     FORMREGD
00:0000A908 1CFC002E        	   928: EA1107:  MOVE.B  #'.',(A6)+    ; XX(A@,X@.
                            	   929: 
00:0000A90C 38343000        	   930:          MOVE.W  (A4,D3.W),D4 ; D4 = R@
00:0000A910 103C0057        	   931:          MOVE.B  #'W',D0       ; ..........W
00:0000A914 0804000B        	   932:          BTST    #11,D4
00:0000A918 6704            	   933:          BEQ.S   EA1109
00:0000A91A 103C004C        	   934:          MOVE.B  #'L',D0       ; ..........L
00:0000A91E 1CC0            	   935: EA1109:  MOVE.B  D0,(A6)+
00:0000A920 1CFC0029        	   936:          MOVE.B  #')',(A6)+    ; ...........)
00:0000A924 5483            	   937:          ADDQ.L  #2,D3
00:0000A926 4E75            	   938:          RTS
                            	   939: 
                            	   940: ; ADDRESS REGISTER INDIRECT WITH DISPLACEMENT
                            	   941: ;
                            	   942: EA101:
00:0000A928 08070005        	   943: 	btst #5,D7         	; 101000;   DIS(A@)
00:0000A92C 6756            	   944: 	beq.s FE11          ; FERROR;  THIS MODE NOT ALLOWED
00:0000A92E 30343000        	   945: 	move.w (A4,D3.W),D0
00:0000A932 48C0            	   946: 	ext.l D0
00:0000A934 6100F95C        	   947: 	bsr HEX2DEC        	; DECIMAL
00:0000A938 5483            	   948: 	addq.l #2,D3        ; SIZE
00:0000A93A 6000FF1E        	   949: 	bra EA010
                            	   950: 
                            	   951: ;  111000        ABSOLUTE SHORT
                            	   952: ;  111001        ABSOLUTE LONG
                            	   953: ;  111010        PROGRAM COUNTER WITH DISPLACEMENT
                            	   954: ;  111011        PROGRAM COUNTER WITH INDEX
                            	   955: ;  111100        IMMEDIATE OR STATUS REG
                            	   956: ;
                            	   957: EA111:
00:0000A93E 02440007        	   958: 	andi.w #7,D4
00:0000A942 6618            	   959: 	bne.s EA1112
00:0000A944 08070007        	   960: 	btst #7,D7
00:0000A948 673A            	   961: 	beq.s FE11           	; FERROR;  THIS MODE NOT ALLOWED
00:0000A94A 30343000        	   962: 	move.w (A4,D3.W),D0 	; 111000;   ABSOLUTE SHORT
00:0000A94E 48C0            	   963: 	ext.l D0
00:0000A950 1CFC0024        	   964: 	move.b #'$',(A6)+
00:0000A954 6100F9B0        	   965: 	bsr PNT8HX         		; SIGN EXTENDED VALUE
00:0000A958 5483            	   966: 	addq.l #2,D3         	; SIZE + 2
00:0000A95A 4E75            	   967: 	rts
                            	   968: 
                            	   969: EA1112:
00:0000A95C 0C040001        	   970: 	cmpi.b #1,D4
00:0000A960 6616            	   971: 	bne.s EA1113
00:0000A962 08070008        	   972: 	btst #8,D7
00:0000A966 671C            	   973: 	beq.s FE11          	; FERROR;  THIS MODE NOT ALLOWED
00:0000A968 1CFC0024        	   974: 	move.b #'$',(A6)+    	; HEX
00:0000A96C 20343000        	   975: 	move.l (A4,D3.W),D0  	; 111001;     ABSOLUTE LONG
00:0000A970 6100F994        	   976: 	bsr PNT8HX
                            	   977: 	;-       MOVE.B  #'.',(A6)+    ; FORCE LONG FORMAT
                            	   978: 	;-       MOVE.B  #'L',(A6)+    ; IE   .L
00:0000A974 5883            	   979: 	addq.l #4,D3
00:0000A976 4E75            	   980: 	rts
                            	   981: 
                            	   982: EA1113:
00:0000A978 0C040002        	   983: 	cmpi.b #2,D4
00:0000A97C 662C            	   984: 	bne.s EA1114
00:0000A97E 08070009        	   985: 	btst #9,D7
00:0000A982 6604            	   986: 	bne.s EA1113A
                            	   987: FE11:
00:0000A984 6000022E        	   988: 	bra FERROR         	; THIS MODE NOT ALLOWED
                            	   989: 
                            	   990: EA1113A:
00:0000A988 30343000        	   991: 	move.w (A4,D3.W),D0  ; 111010;  PC + DISPLACEMENT  DESTINATION(PC)
00:0000A98C 48C0            	   992: 	ext.l D0
00:0000A98E D0A9FFFC        	   993: 	add.l HISPC(A1),D0
00:0000A992 5480            	   994: 	addq.l #2,D0
00:0000A994 1CFC0024        	   995: 	move.b #'$',(A6)+    ; HEX "$"
00:0000A998 6100F96C        	   996: 	bsr PNT8HX         ; DESTINATION
00:0000A99C 203C29435028    	   997: 	move.l #$29435028,D0  ; (PC)
00:0000A9A2 6100FC4C        	   998: 	bsr SCHR           ; STORE WORD
00:0000A9A6 5483            	   999: 	addq.l #2,D3         ; SIZE
00:0000A9A8 4E75            	  1000: 	rts
                            	  1001: 
                            	  1002: EA1114:
00:0000A9AA 0C040003        	  1003: 	cmpi.b #3,D4
00:0000A9AE 6664            	  1004: 	bne.s EA1115
                            	  1005: 
                            	  1006: ; PROGRAM COUNTER WITH INDEX    DESTINATION(PC,R@.X)
                            	  1007: ;
                            	  1008: ;        5432109876543210       SECOND WORD
                            	  1009: ;        0...............       DATA REGISTER
                            	  1010: ;        1...............       ADDRESS REGISTER
                            	  1011: ;        .XXX............       REGISTER
                            	  1012: ;        ....0...........       SIGN-EXTENDED, LOW ORDER WORD INTEGER
                            	  1013: ;                               ..IN INDEX REGISTER
                            	  1014: ;        ....1...........       LONG VALUE IN INDEX REGISTER
                            	  1015: ;        .....000........
                            	  1016: ;        ........XXXXXXXX       DISPLACEMENT INTEGER
                            	  1017: ;
00:0000A9B0 0807000A        	  1018:          BTST    #10,D7
00:0000A9B4 67CE            	  1019:          BEQ.S   FE11           ; FERROR  THIS MODE NOT ASLLOWED
                            	  1020: 
00:0000A9B6 32343000        	  1021:          MOVE.W  (A4,D3.W),D1
00:0000A9BA 02410700        	  1022:          ANDI.W  #$0700,D1
00:0000A9BE 66C4            	  1023:          BNE.S   FE11           ; FERROR;  BITS 10-8 MUST BE ZERO
                            	  1024: 
00:0000A9C0 10343001        	  1025:          MOVE.B  1(A4,D3.W),D0 ; 111100;   DESTINATION(PC,R@.X)
00:0000A9C4 4880            	  1026:          EXT.W   D0
00:0000A9C6 48C0            	  1027:          EXT.L   D0
00:0000A9C8 D0A9FFFC        	  1028:          ADD.L   HISPC(A1),D0
00:0000A9CC 5480            	  1029:          ADDQ.L  #2,D0
00:0000A9CE 1CFC0024        	  1030:          MOVE.B  #'$',(A6)+    ; HEX "$"
00:0000A9D2 6100F932        	  1031:          BSR     PNT8HX         ; DESTINATION
                            	  1032: 
00:0000A9D6 203C2C435028    	  1033:          MOVE.L  #$2c435028,D0
00:0000A9DC 6100FC12        	  1034:          BSR     SCHR           ; DES(PC,
                            	  1035: 
00:0000A9E0 38343000        	  1036:          MOVE.W  (A4,D3.W),D4
00:0000A9E4 E95C            	  1037:          ROL.W   #4,D4
00:0000A9E6 08040003        	  1038:          BTST    #3,D4
00:0000A9EA 6706            	  1039:          BEQ.S   EAF25
00:0000A9EC 6100FAAA        	  1040:          BSR     FORMREGA
00:0000A9F0 6004            	  1041:          BRA.S   EAF27
00:0000A9F2 6100FAB4        	  1042: EAF25:   BSR     FORMREGD       ; DES(PC,R@
                            	  1043: EAF27:
                            	  1044: 
00:0000A9F6 1CFC002E        	  1045:          MOVE.B  #'.',(A6)+    ; DES(PC,R@.
                            	  1046: 
00:0000A9FA 38343000        	  1047:          MOVE.W  (A4,D3.W),D4
00:0000A9FE 303C4C57        	  1048:          MOVE.W  #$4c57,D0    ; "LW"
00:0000AA02 0804000B        	  1049:          BTST    #11,D4
00:0000AA06 6702            	  1050:          BEQ.S   EAF35
00:0000AA08 E048            	  1051:          LSR.W   #8,D0
00:0000AA0A 1CC0            	  1052: EAF35:   MOVE.B  D0,(A6)+     ; DES(PC,R@.X
                            	  1053: 
00:0000AA0C 1CFC0029        	  1054:          MOVE.B  #')',(A6)+    ; DES(PC,R@.X)
00:0000AA10 5483            	  1055:          ADDQ.L  #2,D3
00:0000AA12 4E75            	  1056:          RTS
                            	  1057: 
                            	  1058: ;   BIT  5432109876543210
                            	  1059: ;        ..........111100       ; FIRST WORD;  #<IMMEDIATE>
                            	  1060: ;
00:0000AA14 0C040004        	  1061: EA1115:  CMPI.B  #4,D4
00:0000AA18 6600FF6A        	  1062:          BNE     FE11           ; FERROR
                            	  1063: 
00:0000AA1C 0807000B        	  1064:          BTST    #11,D7
00:0000AA20 6700FF62        	  1065:          BEQ     FE11           ; FERROR;  THIS MODE NOT ALLOWED
                            	  1066: 
00:0000AA24 1CFC0023        	  1067:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	  1068: 
00:0000AA28 122DFFFF        	  1069:          MOVE.B  -1(A5),D1
00:0000AA2C 0C01004C        	  1070:          CMPI.B  #'L',D1
00:0000AA30 6724            	  1071:          BEQ.S   EA11155        ; LONG
                            	  1072: 
00:0000AA32 30343000        	  1073:          MOVE.W  (A4,D3.W),D0
                            	  1074: 
00:0000AA36 0C010042        	  1075:          CMPI.B  #'B',D1
00:0000AA3A 6610            	  1076:          BNE.S   EA11153        ; .WORD
                            	  1077: 
                            	  1078: ; BYTE SIZE; DATA ALLOWED
                            	  1079: ;  0000 0000 XXXX XXXX
                            	  1080: ;  1111 1111 1XXX XXXX
00:0000AA3C 2200            	  1081:          MOVE.L  D0,D1
00:0000AA3E E049            	  1082:          LSR.W   #8,D1
00:0000AA40 670A            	  1083:          BEQ.S   EA11153
00:0000AA42 2200            	  1084:          MOVE.L  D0,D1
00:0000AA44 EE41            	  1085:          ASR.W   #7,D1
00:0000AA46 5241            	  1086:          ADDQ.W  #1,D1
00:0000AA48 6600FF3A        	  1087:          BNE     FE11           ; FERROR
                            	  1088: 
00:0000AA4C 48C0            	  1089: EA11153: EXT.L   D0
00:0000AA4E 6100F842        	  1090:          BSR     HEX2DEC
00:0000AA52 5483            	  1091:          ADDQ.L  #2,D3
00:0000AA54 4E75            	  1092:          RTS
                            	  1093: 
00:0000AA56 20343000        	  1094: EA11155: MOVE.L  (A4,D3.W),D0
00:0000AA5A 6100F836        	  1095:          BSR     HEX2DEC
00:0000AA5E 5883            	  1096:          ADDQ.L  #4,D3         ; SIZE
00:0000AA60 4E75            	  1097:          RTS
                            	  1098: 
00:0000AA62 1AFC002E        	  1099: MOVEMS:  MOVE.B  #'.',(A5)+    ; PERIOD
00:0000AA66 303C4C57        	  1100:          MOVE.W  #$4c57,D0    ; "LW"
00:0000AA6A 08040006        	  1101:          BTST    #6,D4
00:0000AA6E 6702            	  1102:          BEQ.S   MOVEMS2
00:0000AA70 E048            	  1103:          LSR.W   #8,D0
00:0000AA72 1AC0            	  1104: MOVEMS2: MOVE.B  D0,(A5)+     ; SIZE
00:0000AA74 4E75            	  1105:          RTS
                            	  1106: 
                            	  1107: ; MOVEM - REGISTER EXPANSION
                            	  1108: ;
                            	  1109: MOVEMR:  ;.align  2
00:0000AA76 342C0002        	  1110:          MOVE.W  2(A4),D2     ; D2 = SECOND WORD
00:0000AA7A 7020            	  1111:          MOVEQ   #$20,D0      ; D0 = SPACE
00:0000AA7C 7E2F            	  1112:          MOVEQ   #$2F,D7      ; D7 = /
00:0000AA7E 538E            	  1113:          SUBQ.L  #1,A6         ; ADJUST STORE POINTER
00:0000AA80 7A30            	  1114:          MOVEQ   #$30,D5      ; D5 = REGISTER #
00:0000AA82 383C4144        	  1115:          MOVE.W  #$4144,D4    ; "AD" D4 = REG CLASS
                            	  1116: 
00:0000AA86 0302            	  1117: MOVEMR11:BTST    D1,D2
00:0000AA88 6730            	  1118:          BEQ.S   MOVEMR77       ; BIT RESET
                            	  1119: 
00:0000AA8A B016            	  1120:          CMP.B   (A6),D0      ; BIT SET
00:0000AA8C 6612            	  1121:          BNE.S   MOVEMR44       ; NOT SPACE
                            	  1122: 
00:0000AA8E 1D440001        	  1123: MOVEMR33:MOVE.B  D4,1(A6)     ; REG TYPE
00:0000AA92 1D450002        	  1124:          MOVE.B  D5,2(A6)     ; REG #
00:0000AA96 1D7C002D0003    	  1125:          MOVE.B  #'-',3(A6)    ; -
00:0000AA9C 568E            	  1126:          ADDQ.L  #3,A6
00:0000AA9E 602E            	  1127:          BRA.S   MOVEMR88
                            	  1128: 
                            	  1129: MOVEMR44:
00:0000AAA0 0C16002C        	  1130: 	cmpi.b #',',(A6)
00:0000AAA4 67E8            	  1131: 	beq.s MOVEMR33      ; COMMA SEPARATOR
00:0000AAA6 BE16            	  1132: 	cmp.b (A6),D7      	; / SEPARATOR
00:0000AAA8 67E4            	  1133: 	beq.s MOVEMR33
00:0000AAAA 1D440001        	  1134: 	move.b D4,1(A6)     ; REG TYPE
00:0000AAAE 1D450002        	  1135: 	move.b D5,2(A6)     ; REG #
00:0000AAB2 1D7C002D0003    	  1136: 	move.b #'-',3(A6)   ; - SEPARATOR
00:0000AAB8 6014            	  1137: 	bra.s MOVEMR88
                            	  1138: 
                            	  1139: MOVEMR77:
00:0000AABA 0C16002C        	  1140: 	cmpi.b #',',(A6)
00:0000AABE 670E            	  1141: 	beq.s MOVEMR88       ; COMMA
00:0000AAC0 B016            	  1142: 	cmp.b (A6),D0
00:0000AAC2 670A            	  1143: 	beq.s MOVEMR88       ; SPACE
00:0000AAC4 B02E0001        	  1144: 	cmp.b 1(A6),D0
00:0000AAC8 6702            	  1145: 	beq.s MOVEMR79       ; SPACE
00:0000AACA 568E            	  1146: 	addq.l #3,A6
                            	  1147: MOVEMR79:
00:0000AACC 1C87            	  1148: 	move.b D7,(A6)      ; / SEPARATOR
                            	  1149: 
                            	  1150: MOVEMR88:
00:0000AACE 5285            	  1151: 	addq.l #1,D5
00:0000AAD0 D286            	  1152: 	add.l D6,D1        ; D1 = BIT POSITION
00:0000AAD2 0C050038        	  1153: 	cmpi.b #'8',D5
00:0000AAD6 66AE            	  1154: 	bne.s MOVEMR11
00:0000AAD8 B016            	  1155: 	cmp.b (A6),D0      ; SPACE
00:0000AADA 670A            	  1156: 	beq.s MOVEMR94
00:0000AADC B02E0001        	  1157: 	cmp.b 1(A6),D0     ; SPACE
00:0000AAE0 6704            	  1158: 	beq.s MOVEMR94
00:0000AAE2 568E            	  1159: 	addq.l #3,A6
00:0000AAE4 1C87            	  1160: 	move.b D7,(A6)      ; /   SEPARATOR
                            	  1161: 
                            	  1162: MOVEMR94:
00:0000AAE6 1A3C0030        	  1163: 	move.b #'0',D5       	; RESET REG TO ZERO
00:0000AAEA E04C            	  1164: 	lsr.w #8,D4         	; CHANGE REG TYPE
00:0000AAEC 6698            	  1165: 	bne.s MOVEMR11       	; MORE
00:0000AAEE 1C80            	  1166: 	move.b D0,(A6)      	; SPACE
00:0000AAF0 4E75            	  1167: 	rts
                            	  1168: 
                            	  1169: DCODE68K:
00:0000AAF2 4E51FFF0        	  1170: 	link A1,#-LOCVARSZ 	; CREATE A FRAME FOR THE
00:0000AAF6 48E91007FFF0    	  1171: 	movem.l D0-D2/A4,DDATA(A1)  ; CODE AND ITS PC.  A4
00:0000AAFC 49E9FFF0        	  1172: 	lea DDATA(A1),A4 		; POINTS TO THE CODE.
00:0000AB00 264D            	  1173: 	move.l A5,A3        ; A3 = START OF OUTPUT BUFFER
00:0000AB02 2C4D            	  1174: 	move.l A5,A6
00:0000AB04 703F            	  1175: 	moveq #BUFSIZE,D0
                            	  1176: DEC311:
00:0000AB06 1CFC0020        	  1177:   move.b #BLANK,(a6)+  ; SPACE FILL BUFFER
00:0000AB0A 5380            	  1178: 	subq.l #1,D0
00:0000AB0C 66F8            	  1179: 	bne.s DEC311
00:0000AB0E 421E            	  1180: 	clr.b (a6)+					; NULL temrinate
00:0000AB10 2C4B            	  1181: 	move.l A3,A6        ; FORMAT ADDRESS
00:0000AB12 2029FFFC        	  1182: 	move.l HISPC(A1),D0
00:0000AB16 6100F7F2        	  1183: 	bsr FRELADDR
                            	  1184: 
                            	  1185: ; CHECK FOR KNOWN ILLEGAL CODES
00:0000AB1A 3014            	  1186: 	move.w (a4),d0
00:0000AB1C 4BFA00C0        	  1187: 	lea KI(PC),a5
00:0000AB20 2C4D            	  1188: 	move.l a5,a6
00:0000AB22 548E            	  1189: 	add.l #KIEND-KI,a6
                            	  1190: DEC404:
00:0000AB24 B05D            	  1191:   cmp.w (a5)+,d0
00:0000AB26 671A            	  1192: 	beq.s FE12           ; FERROR;  ILLEGAL CODE
00:0000AB28 BBCE            	  1193: 	cmp.l a6,a5
00:0000AB2A 66F8            	  1194: 	bne.s DEC404
                            	  1195: 
                            	  1196: ; LOOK FOR MATCH OF OP-CODE
                            	  1197: ;
00:0000AB2C 4BFA00B2        	  1198: 	lea TBL(PC),A5   		; A5 = POINTER TO DECODE TABLE
00:0000AB30 4DFA0366        	  1199: 	lea TBLE(PC),A6  		; A6 = POINTER TO END OF TABLE
                            	  1200: DEC411:
00:0000AB34 3014            	  1201: 	move.w (A4),D0      ;  FIRST WORD
00:0000AB36 C05D            	  1202: 	and.w (A5)+,D0     	;  MASK
00:0000AB38 B05D            	  1203: 	cmp.w (A5)+,D0
00:0000AB3A 6708            	  1204: 	beq.s DEC425        ; FOUND MATCH
00:0000AB3C 588D            	  1205: 	addq.l #4,A5        ; UPDATE POINTER
00:0000AB3E BBCE            	  1206: 	cmp.l A6,A5
00:0000AB40 65F2            	  1207: 	blo.s DEC411        ; MORE TABLE
                            	  1208: FE12:
00:0000AB42 6070            	  1209: 	bra.s FERROR        ; ILLEGAL INSTRUCTION
                            	  1210: DEC425:
00:0000AB44 7C00            	  1211:   clr.l D6
00:0000AB46 3C1D            	  1212: 	move.w (A5)+,D6     ; D6 = (GOTO OFFSET)/4
                            	  1213: ;         LSL.L   #2,D6
00:0000AB48 7E00            	  1214: 	clr.l D7
00:0000AB4A 3E1D            	  1215: 	move.w (A5)+,D7     ; D7 = INDEX TO OP-CODE
                            	  1216: 
                            	  1217: ; MOVE OP-CODE TO BUFFER
                            	  1218: ;
00:0000AB4C 41FA034A        	  1219: 	lea OPCTBL(PC),A0
                            	  1220: DEC510:
00:0000AB50 4A47            	  1221:   tst D7
00:0000AB52 6708            	  1222: 	beq.s DEC530         	; AT INDEX
                            	  1223: DEC515:
00:0000AB54 4A18            	  1224:   tst.b (A0)+
00:0000AB56 6AFC            	  1225: 	bpl.s DEC515         	; MOVE THROUGH FIELD
00:0000AB58 5387            	  1226: 	subq.l #1,D7
00:0000AB5A 60F4            	  1227: 	bra.s DEC510
                            	  1228: DEC530:
00:0000AB5C 701F            	  1229: 	moveq #FOC,D0
00:0000AB5E 4BF30000        	  1230: 	lea.l (A3,D0.W),A5 		; A5 = STORE POINTER  OP-CODE
                            	  1231: DEC535:
00:0000AB62 1018            	  1232:   move.b (A0)+,D0
00:0000AB64 08800007        	  1233: 	bclr #7,D0
00:0000AB68 6604            	  1234: 	bne.s DEC537         	; END OF MOVE
00:0000AB6A 1AC0            	  1235: 	move.b D0,(A5)+
00:0000AB6C 60F4            	  1236: 	bra.s DEC535
                            	  1237: DEC537:
00:0000AB6E 1AC0            	  1238:   move.b D0,(A5)+
                            	  1239: 
                            	  1240: ; CALCULATE GOTO AND GO
                            	  1241: ;
00:0000AB70 7602            	  1242: 	moveq #2,D3         ; D3= SIZE
00:0000AB72 41FAF7F4        	  1243: 	lea X(PC),A0
00:0000AB76 D1C6            	  1244: 	add.l D6,A0
00:0000AB78 7027            	  1245: 	moveq #FOP,D0
00:0000AB7A 4DF30000        	  1246: 	lea.l (A3,D0.W),A6 	; A6 = POINTER FOR OPERAND
00:0000AB7E 3814            	  1247: 	move.w (A4),D4      ; D4 = FIRST WORD
00:0000AB80 1A3C002C        	  1248: 	move.b #',',D5      ; D5 = CONTAINS ASCII COMMA
00:0000AB84 3E3C01FD        	  1249: 	move.w #$1FD,D7     ; D7 = DATA ALTERABLE MODES ALLOWED
00:0000AB88 4ED0            	  1250: 	jmp (A0)
                            	  1251: 
                            	  1252: ;	 A3 = pointer to beginning of buffer
                            	  1253: ;  A4 = POINTER TO DATA IN FRAME CREATED BY "LINK A1,..."
                            	  1254: ;  A5 = POINTER STORE OP-CODE
                            	  1255: ;  A6 = POINTER STORE OPERAND
                            	  1256: ;  D3 = SIZE = 2 BYTES
                            	  1257: ;  D4 = FIRST WORD
                            	  1258: ;  D7 = ADDRESS MODES ALLOWED ($1FD) DATA ALTERABLE
                            	  1259: 
                            	  1260: COMMON4:
00:0000AB8A 5483            	  1261: 	addq.l #2,D3         	; SIZE = 4
                            	  1262: COMMON:
00:0000AB8C 2C03            	  1263: 	move.l D3,D6        	; D6 = SIZE
00:0000AB8E 1CFC0020        	  1264: 	move.b #BLANK,(A6)+ 	; SPACE AS LAST CHAR
00:0000AB92 2A4E            	  1265: 	move.l A6,A5        	; SAVE END OF BUFFER POINTER
00:0000AB94 700A            	  1266: 	moveq #FDATA,D0
00:0000AB96 4DF30000        	  1267: 	lea.l (A3,D0.W),A6
                            	  1268: COMMON35:
00:0000AB9A 301C            	  1269: 	move.w (A4)+,D0     	; GET NEXT WORD OF DATA.
00:0000AB9C 54A9FFFC        	  1270: 	addq.l #2,HISPC(A1)  	; ADJUST PROG COUNTER.
00:0000ABA0 6100F754        	  1271: 	bsr PNT4HX         		; FORMAT DATA. (A6)+
00:0000ABA4 5503            	  1272: 	subq.b #2,D3
00:0000ABA6 66F2            	  1273: 	bne.s COMMON35
00:0000ABA8 2C4D            	  1274: 	move.l A5,A6        	; A6 = RESTORE END POINTER
00:0000ABAA 2A4B            	  1275: 	move.l A3,A5        	; A5 =  BEGINNING OF BUFFER
00:0000ABAC 2869FFFC        	  1276: 	move.l HISPC(A1),A4 	; MOVE THE UPDATED PC
00:0000ABB0 4E59            	  1277: 	unlk A1            		; TO A4 AND UNDO FRAME.
00:0000ABB2 4E75            	  1278: 	rts
                            	  1279: 
                            	  1280: FERROR:  ;.align  2
                            	  1281: ; ILLEGAL INSTRUCTION
                            	  1282: ;
00:0000ABB4 701F            	  1283: 	moveq #FOC,D0
00:0000ABB6 4DF30000        	  1284: 	lea.l (A3,D0.W),A6
00:0000ABBA 4BFA0018        	  1285: 	lea MSG111(PC),A5
                            	  1286: FERROR35:
00:0000ABBE 101D            	  1287: 	move.b (A5)+,D0
00:0000ABC0 0C000004        	  1288: 	cmpi.b #EOT,D0
00:0000ABC4 6704            	  1289: 	beq.s FERROR39
00:0000ABC6 1CC0            	  1290: 	move.b D0,(A6)+
00:0000ABC8 60F4            	  1291: 	bra.s FERROR35
                            	  1292: FERROR39:
00:0000ABCA 3014            	  1293: 	move.w (A4),D0
00:0000ABCC 6100F728        	  1294: 	bsr PNT4HX
00:0000ABD0 7602            	  1295: 	moveq #2,D3         ; SIZE
00:0000ABD2 60B8            	  1296: 	bra.s COMMON
                            	  1297: MSG111:  
00:0000ABD4 44432E5720202020	  1298: 	dc.b "DC.W    $"
00:0000ABDC 24
00:0000ABDD 04              	  1299: 	dc.b EOT
                            	  1300: 
                            	  1301: KI:
00:0000ABDE 4AFB            	  1302: 	dc.w $4AFB         ; KNOWN ILLEGAL CODES
                            	  1303: KIEND:   
                            	  1304: 	even
                            	  1305: 
                            	  1306: ;  \1   MASK
                            	  1307: ;  \2   OP-CODE PATTERN
                            	  1308: ;  \3   GOTO OFFSET
                            	  1309: ;  \4   INDEX TO OP-CODE
                            	  1310: C68:     macro arg1,arg2,arg3,arg4
                            	  1311:          DC.W    $\1
                            	  1312:          DC.W    $\2
                            	  1313:          DC.W    (\3-X)
                            	  1314:          DC.w    \4
                            	  1315:          endm
                            	  1316: 
                            	  1317: 				 even
                            	  1318: TBL:     ;.align  2
                            	  1319:          C68     FEC0,E6C0,ISHIFT,56           ; RO
00:0000ABE0 FEC0            	     1M          DC.W    $FEC0
00:0000ABE2 E6C0            	     2M          DC.W    $E6C0
00:0000ABE4 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000ABE6 0038            	     4M          DC.w    56
                            	  1320:          C68     FEC0,E4C0,ISHIFT,57           ; ROX
00:0000ABE8 FEC0            	     1M          DC.W    $FEC0
00:0000ABEA E4C0            	     2M          DC.W    $E4C0
00:0000ABEC 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000ABEE 0039            	     4M          DC.w    57
                            	  1321:          C68     FEC0,E2C0,ISHIFT,55           ; LS
00:0000ABF0 FEC0            	     1M          DC.W    $FEC0
00:0000ABF2 E2C0            	     2M          DC.W    $E2C0
00:0000ABF4 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000ABF6 0037            	     4M          DC.w    55
                            	  1322:          C68     FEC0,E0C0,ISHIFT,54           ; AS
00:0000ABF8 FEC0            	     1M          DC.W    $FEC0
00:0000ABFA E0C0            	     2M          DC.W    $E0C0
00:0000ABFC 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000ABFE 0036            	     4M          DC.w    54
                            	  1323:          C68     F018,E018,ISHIFT,56           ; RO
00:0000AC00 F018            	     1M          DC.W    $F018
00:0000AC02 E018            	     2M          DC.W    $E018
00:0000AC04 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000AC06 0038            	     4M          DC.w    56
                            	  1324:          C68     F018,E010,ISHIFT,57           ; ROX
00:0000AC08 F018            	     1M          DC.W    $F018
00:0000AC0A E010            	     2M          DC.W    $E010
00:0000AC0C 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000AC0E 0039            	     4M          DC.w    57
                            	  1325:          C68     F018,E008,ISHIFT,55           ; LS
00:0000AC10 F018            	     1M          DC.W    $F018
00:0000AC12 E008            	     2M          DC.W    $E008
00:0000AC14 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000AC16 0037            	     4M          DC.w    55
                            	  1326:          C68     F018,E000,ISHIFT,54           ; AS
00:0000AC18 F018            	     1M          DC.W    $F018
00:0000AC1A E000            	     2M          DC.W    $E000
00:0000AC1C 03B6            	     3M          DC.W    (ISHIFT-X)
00:0000AC1E 0036            	     4M          DC.w    54
                            	  1327:          C68     F0C0,D0C0,FORM10EX,4          ; ADD       <EA>,A@
00:0000AC20 F0C0            	     1M          DC.W    $F0C0
00:0000AC22 D0C0            	     2M          DC.W    $D0C0
00:0000AC24 016A            	     3M          DC.W    (FORM10EX-X)
00:0000AC26 0004            	     4M          DC.w    4
                            	  1328:          C68     F130,D100,FORM12,53           ; ADDX
00:0000AC28 F130            	     1M          DC.W    $F130
00:0000AC2A D100            	     2M          DC.W    $D100
00:0000AC2C 0208            	     3M          DC.W    (FORM12-X)
00:0000AC2E 0035            	     4M          DC.w    53
                            	  1329:          C68     F000,D000,FORM10EX,4          ; ADD
00:0000AC30 F000            	     1M          DC.W    $F000
00:0000AC32 D000            	     2M          DC.W    $D000
00:0000AC34 016A            	     3M          DC.W    (FORM10EX-X)
00:0000AC36 0004            	     4M          DC.w    4
                            	  1330:          C68     F1F8,C188,FORM9,50            ; EXG
00:0000AC38 F1F8            	     1M          DC.W    $F1F8
00:0000AC3A C188            	     2M          DC.W    $C188
00:0000AC3C 0160            	     3M          DC.W    (FORM9-X)
00:0000AC3E 0032            	     4M          DC.w    50
                            	  1331:          C68     F1F8,C148,FORM8,50            ; EXG
00:0000AC40 F1F8            	     1M          DC.W    $F1F8
00:0000AC42 C148            	     2M          DC.W    $C148
00:0000AC44 0152            	     3M          DC.W    (FORM8-X)
00:0000AC46 0032            	     4M          DC.w    50
                            	  1332:          C68     F1F8,C140,FORM7,50            ; EXG
00:0000AC48 F1F8            	     1M          DC.W    $F1F8
00:0000AC4A C140            	     2M          DC.W    $C140
00:0000AC4C 0146            	     3M          DC.W    (FORM7-X)
00:0000AC4E 0032            	     4M          DC.w    50
                            	  1333:          C68     F1F0,C100,FORM12,49           ; ABCD
00:0000AC50 F1F0            	     1M          DC.W    $F1F0
00:0000AC52 C100            	     2M          DC.W    $C100
00:0000AC54 0208            	     3M          DC.W    (FORM12-X)
00:0000AC56 0031            	     4M          DC.w    49
                            	  1334:          C68     F1C0,C1C0,FORM6D,48           ; MULS
00:0000AC58 F1C0            	     1M          DC.W    $F1C0
00:0000AC5A C1C0            	     2M          DC.W    $C1C0
00:0000AC5C 0120            	     3M          DC.W    (FORM6D-X)
00:0000AC5E 0030            	     4M          DC.w    48
                            	  1335:          C68     F1C0,C0C0,FORM6D,47           ; MULU
00:0000AC60 F1C0            	     1M          DC.W    $F1C0
00:0000AC62 C0C0            	     2M          DC.W    $C0C0
00:0000AC64 0120            	     3M          DC.W    (FORM6D-X)
00:0000AC66 002F            	     4M          DC.w    47
                            	  1336:          C68     F000,C000,FORM10,2            ; AND
00:0000AC68 F000            	     1M          DC.W    $F000
00:0000AC6A C000            	     2M          DC.W    $C000
00:0000AC6C 01A8            	     3M          DC.W    (FORM10-X)
00:0000AC6E 0002            	     4M          DC.w    2
                            	  1337:          C68     F0C0,B0C0,FORM10EX,6          ; CMP     <EA>,A@
00:0000AC70 F0C0            	     1M          DC.W    $F0C0
00:0000AC72 B0C0            	     2M          DC.W    $B0C0
00:0000AC74 016A            	     3M          DC.W    (FORM10EX-X)
00:0000AC76 0006            	     4M          DC.w    6
                            	  1338:          C68     F138,B108,FORM12A,46          ; CMPM
00:0000AC78 F138            	     1M          DC.W    $F138
00:0000AC7A B108            	     2M          DC.W    $B108
00:0000AC7C 0244            	     3M          DC.W    (FORM12A-X)
00:0000AC7E 002E            	     4M          DC.w    46
                            	  1339:          C68     F100,B100,FORM10,5            ; EOR
00:0000AC80 F100            	     1M          DC.W    $F100
00:0000AC82 B100            	     2M          DC.W    $B100
00:0000AC84 01A8            	     3M          DC.W    (FORM10-X)
00:0000AC86 0005            	     4M          DC.w    5
                            	  1340:          C68     F000,B000,FORM10EX,6          ; CMP
00:0000AC88 F000            	     1M          DC.W    $F000
00:0000AC8A B000            	     2M          DC.W    $B000
00:0000AC8C 016A            	     3M          DC.W    (FORM10EX-X)
00:0000AC8E 0006            	     4M          DC.w    6
                            	  1341:          C68     F0C0,90C0,FORM10EX,44         ; SUB       <EA>,A@
00:0000AC90 F0C0            	     1M          DC.W    $F0C0
00:0000AC92 90C0            	     2M          DC.W    $90C0
00:0000AC94 016A            	     3M          DC.W    (FORM10EX-X)
00:0000AC96 002C            	     4M          DC.w    44
                            	  1342:          C68     F130,9100,FORM12,45           ; SUBX
00:0000AC98 F130            	     1M          DC.W    $F130
00:0000AC9A 9100            	     2M          DC.W    $9100
00:0000AC9C 0208            	     3M          DC.W    (FORM12-X)
00:0000AC9E 002D            	     4M          DC.w    45
                            	  1343:          C68     F000,9000,FORM10EX,44         ; SUB
00:0000ACA0 F000            	     1M          DC.W    $F000
00:0000ACA2 9000            	     2M          DC.W    $9000
00:0000ACA4 016A            	     3M          DC.W    (FORM10EX-X)
00:0000ACA6 002C            	     4M          DC.w    44
                            	  1344:          C68     F1F0,8100,FORM12,43           ; SBCD
00:0000ACA8 F1F0            	     1M          DC.W    $F1F0
00:0000ACAA 8100            	     2M          DC.W    $8100
00:0000ACAC 0208            	     3M          DC.W    (FORM12-X)
00:0000ACAE 002B            	     4M          DC.w    43
                            	  1345:          C68     F1C0,81C0,FORM6D,42           ; DIVS
00:0000ACB0 F1C0            	     1M          DC.W    $F1C0
00:0000ACB2 81C0            	     2M          DC.W    $81C0
00:0000ACB4 0120            	     3M          DC.W    (FORM6D-X)
00:0000ACB6 002A            	     4M          DC.w    42
                            	  1346:          C68     F1C0,80C0,FORM6D,41           ; DIVU
00:0000ACB8 F1C0            	     1M          DC.W    $F1C0
00:0000ACBA 80C0            	     2M          DC.W    $80C0
00:0000ACBC 0120            	     3M          DC.W    (FORM6D-X)
00:0000ACBE 0029            	     4M          DC.w    41
                            	  1347:          C68     F000,8000,FORM10,40           ; OR
00:0000ACC0 F000            	     1M          DC.W    $F000
00:0000ACC2 8000            	     2M          DC.W    $8000
00:0000ACC4 01A8            	     3M          DC.W    (FORM10-X)
00:0000ACC6 0028            	     4M          DC.w    40
                            	  1348:          C68     F100,7000,IMOVEQ,39           ; MOVEQ
00:0000ACC8 F100            	     1M          DC.W    $F100
00:0000ACCA 7000            	     2M          DC.W    $7000
00:0000ACCC 0270            	     3M          DC.W    (IMOVEQ-X)
00:0000ACCE 0027            	     4M          DC.w    39
                            	  1349:          C68     FF00,6100,IBSR,51             ; BSR
00:0000ACD0 FF00            	     1M          DC.W    $FF00
00:0000ACD2 6100            	     2M          DC.W    $6100
00:0000ACD4 0354            	     3M          DC.W    (IBSR-X)
00:0000ACD6 0033            	     4M          DC.w    51
                            	  1350:          C68     FF00,6000,IBSR,65             ; BRA
00:0000ACD8 FF00            	     1M          DC.W    $FF00
00:0000ACDA 6000            	     2M          DC.W    $6000
00:0000ACDC 0354            	     3M          DC.W    (IBSR-X)
00:0000ACDE 0041            	     4M          DC.w    65
                            	  1351:          C68     F000,6000,ICC,38              ; B
00:0000ACE0 F000            	     1M          DC.W    $F000
00:0000ACE2 6000            	     2M          DC.W    $6000
00:0000ACE4 0350            	     3M          DC.W    (ICC-X)
00:0000ACE6 0026            	     4M          DC.w    38
                            	  1352:          C68     F0F8,50C8,IDBCC,37            ; DB
00:0000ACE8 F0F8            	     1M          DC.W    $F0F8
00:0000ACEA 50C8            	     2M          DC.W    $50C8
00:0000ACEC 033E            	     3M          DC.W    (IDBCC-X)
00:0000ACEE 0025            	     4M          DC.w    37
                            	  1353:          C68     F0C0,50C0,ISCC,36             ; S
00:0000ACF0 F0C0            	     1M          DC.W    $F0C0
00:0000ACF2 50C0            	     2M          DC.W    $50C0
00:0000ACF4 0334            	     3M          DC.W    (ISCC-X)
00:0000ACF6 0024            	     4M          DC.w    36
                            	  1354:          C68     F100,5100,IQUICK,35           ; SUBQ
00:0000ACF8 F100            	     1M          DC.W    $F100
00:0000ACFA 5100            	     2M          DC.W    $5100
00:0000ACFC 026C            	     3M          DC.W    (IQUICK-X)
00:0000ACFE 0023            	     4M          DC.w    35
                            	  1355:          C68     F100,5000,IQUICK,34           ; ADDQ
00:0000AD00 F100            	     1M          DC.W    $F100
00:0000AD02 5000            	     2M          DC.W    $5000
00:0000AD04 026C            	     3M          DC.W    (IQUICK-X)
00:0000AD06 0022            	     4M          DC.w    34
                            	  1356:          C68     F1C0,41C0,FORM6A,33           ; LEA
00:0000AD08 F1C0            	     1M          DC.W    $F1C0
00:0000AD0A 41C0            	     2M          DC.W    $41C0
00:0000AD0C 0110            	     3M          DC.W    (FORM6A-X)
00:0000AD0E 0021            	     4M          DC.w    33
                            	  1357:          C68     F1C0,4180,FORM6D,32           ; CHK
00:0000AD10 F1C0            	     1M          DC.W    $F1C0
00:0000AD12 4180            	     2M          DC.W    $4180
00:0000AD14 0120            	     3M          DC.W    (FORM6D-X)
00:0000AD16 0020            	     4M          DC.w    32
                            	  1358:          C68     FFC0,4EC0,FORM11SL,31         ; JMP
00:0000AD18 FFC0            	     1M          DC.W    $FFC0
00:0000AD1A 4EC0            	     2M          DC.W    $4EC0
00:0000AD1C 01E4            	     3M          DC.W    (FORM11SL-X)
00:0000AD1E 001F            	     4M          DC.w    31
                            	  1359:          C68     FFC0,4E80,FORM11SL,30         ; JSR
00:0000AD20 FFC0            	     1M          DC.W    $FFC0
00:0000AD22 4E80            	     2M          DC.W    $4E80
00:0000AD24 01E4            	     3M          DC.W    (FORM11SL-X)
00:0000AD26 001E            	     4M          DC.w    30
                            	  1360:          C68     FFFF,4E77,SCOMMON,29          ; RTR
00:0000AD28 FFFF            	     1M          DC.W    $FFFF
00:0000AD2A 4E77            	     2M          DC.W    $4E77
00:0000AD2C 0330            	     3M          DC.W    (SCOMMON-X)
00:0000AD2E 001D            	     4M          DC.w    29
                            	  1361:          C68     FFFF,4E76,SCOMMON,28          ; TRAPV
00:0000AD30 FFFF            	     1M          DC.W    $FFFF
00:0000AD32 4E76            	     2M          DC.W    $4E76
00:0000AD34 0330            	     3M          DC.W    (SCOMMON-X)
00:0000AD36 001C            	     4M          DC.w    28
                            	  1362:          C68     FFFF,4E75,SCOMMON,27          ; RTS
00:0000AD38 FFFF            	     1M          DC.W    $FFFF
00:0000AD3A 4E75            	     2M          DC.W    $4E75
00:0000AD3C 0330            	     3M          DC.W    (SCOMMON-X)
00:0000AD3E 001B            	     4M          DC.w    27
                            	  1363:          C68     FFFF,4E73,SCOMMON,26          ; RTE
00:0000AD40 FFFF            	     1M          DC.W    $FFFF
00:0000AD42 4E73            	     2M          DC.W    $4E73
00:0000AD44 0330            	     3M          DC.W    (SCOMMON-X)
00:0000AD46 001A            	     4M          DC.w    26
                            	  1364:          C68     FFFF,4E72,ISTOP,25            ; STOP
00:0000AD48 FFFF            	     1M          DC.W    $FFFF
00:0000AD4A 4E72            	     2M          DC.W    $4E72
00:0000AD4C 004A            	     3M          DC.W    (ISTOP-X)
00:0000AD4E 0019            	     4M          DC.w    25
                            	  1365:          C68     FFFF,4E71,SCOMMON,24          ; NOP
00:0000AD50 FFFF            	     1M          DC.W    $FFFF
00:0000AD52 4E71            	     2M          DC.W    $4E71
00:0000AD54 0330            	     3M          DC.W    (SCOMMON-X)
00:0000AD56 0018            	     4M          DC.w    24
                            	  1366:          C68     FFFF,4E70,SCOMMON,23          ; RESET
00:0000AD58 FFFF            	     1M          DC.W    $FFFF
00:0000AD5A 4E70            	     2M          DC.W    $4E70
00:0000AD5C 0330            	     3M          DC.W    (SCOMMON-X)
00:0000AD5E 0017            	     4M          DC.w    23
                            	  1367:          C68     FFF8,4E68,IMVFUSP,60          ; MOVE FROM USP
00:0000AD60 FFF8            	     1M          DC.W    $FFF8
00:0000AD62 4E68            	     2M          DC.W    $4E68
00:0000AD64 029E            	     3M          DC.W    (IMVFUSP-X)
00:0000AD66 003C            	     4M          DC.w    60
                            	  1368:          C68     FFF8,4E60,IMVTUSP,60          ; MOVE TO USP
00:0000AD68 FFF8            	     1M          DC.W    $FFF8
00:0000AD6A 4E60            	     2M          DC.W    $4E60
00:0000AD6C 02BE            	     3M          DC.W    (IMVTUSP-X)
00:0000AD6E 003C            	     4M          DC.w    60
                            	  1369:          C68     FFF8,4E58,FORM5,22            ; UNLINK
00:0000AD70 FFF8            	     1M          DC.W    $FFF8
00:0000AD72 4E58            	     2M          DC.W    $4E58
00:0000AD74 010C            	     3M          DC.W    (FORM5-X)
00:0000AD76 0016            	     4M          DC.w    22
                            	  1370:          C68     FFF8,4E50,ILINK,21            ; LINK
00:0000AD78 FFF8            	     1M          DC.W    $FFF8
00:0000AD7A 4E50            	     2M          DC.W    $4E50
00:0000AD7C 00D6            	     3M          DC.W    (ILINK-X)
00:0000AD7E 0015            	     4M          DC.w    21
                            	  1371:          C68     FFF0,4E40,FORM4,20            ; TRAP
00:0000AD80 FFF0            	     1M          DC.W    $FFF0
00:0000AD82 4E40            	     2M          DC.W    $4E40
00:0000AD84 00FA            	     3M          DC.W    (FORM4-X)
00:0000AD86 0014            	     4M          DC.w    20
                            	  1372:          C68     FF80,4C80,IMOVEMTR,15         ; MOVEM FROM REGISTERS
00:0000AD88 FF80            	     1M          DC.W    $FF80
00:0000AD8A 4C80            	     2M          DC.W    $4C80
00:0000AD8C 002E            	     3M          DC.W    (IMOVEMTR-X)
00:0000AD8E 000F            	     4M          DC.w    15
                            	  1373:          C68     FFC0,4AC0,FORM1A,19           ; TAS
00:0000AD90 FFC0            	     1M          DC.W    $FFC0
00:0000AD92 4AC0            	     2M          DC.W    $4AC0
00:0000AD94 00F0            	     3M          DC.W    (FORM1A-X)
00:0000AD96 0013            	     4M          DC.w    19
                            	  1374:          C68     FF00,4A00,FORM1,18            ; TST
00:0000AD98 FF00            	     1M          DC.W    $FF00
00:0000AD9A 4A00            	     2M          DC.W    $4A00
00:0000AD9C 00EC            	     3M          DC.W    (FORM1-X)
00:0000AD9E 0012            	     4M          DC.w    18
                            	  1375:          C68     FFF8,48C0,FORM3,17            ; EXT.L
00:0000ADA0 FFF8            	     1M          DC.W    $FFF8
00:0000ADA2 48C0            	     2M          DC.W    $48C0
00:0000ADA4 00F6            	     3M          DC.W    (FORM3-X)
00:0000ADA6 0011            	     4M          DC.w    17
                            	  1376:          C68     FFF8,4880,FORM3,16            ; EXT.W
00:0000ADA8 FFF8            	     1M          DC.W    $FFF8
00:0000ADAA 4880            	     2M          DC.W    $4880
00:0000ADAC 00F6            	     3M          DC.W    (FORM3-X)
00:0000ADAE 0010            	     4M          DC.w    16
                            	  1377:          C68     FF80,4880,IMOVEMFR,15         ; MOVEA TO REGISTERS
00:0000ADB0 FF80            	     1M          DC.W    $FF80
00:0000ADB2 4880            	     2M          DC.W    $4880
00:0000ADB4 0000            	     3M          DC.W    (IMOVEMFR-X)
00:0000ADB6 000F            	     4M          DC.w    15
                            	  1378:          C68     FFF8,4840,FORM3,14            ; SWAP
00:0000ADB8 FFF8            	     1M          DC.W    $FFF8
00:0000ADBA 4840            	     2M          DC.W    $4840
00:0000ADBC 00F6            	     3M          DC.W    (FORM3-X)
00:0000ADBE 000E            	     4M          DC.w    14
                            	  1379:          C68     FFC0,4840,FORM11,13           ; PEA
00:0000ADC0 FFC0            	     1M          DC.W    $FFC0
00:0000ADC2 4840            	     2M          DC.W    $4840
00:0000ADC4 01DC            	     3M          DC.W    (FORM11-X)
00:0000ADC6 000D            	     4M          DC.w    13
                            	  1380:          C68     FFC0,4800,FORM1A,12           ; NBCD
00:0000ADC8 FFC0            	     1M          DC.W    $FFC0
00:0000ADCA 4800            	     2M          DC.W    $4800
00:0000ADCC 00F0            	     3M          DC.W    (FORM1A-X)
00:0000ADCE 000C            	     4M          DC.w    12
                            	  1381:          C68     FFC0,46C0,IMVTSR,59           ; MOVE TO SR
00:0000ADD0 FFC0            	     1M          DC.W    $FFC0
00:0000ADD2 46C0            	     2M          DC.W    $46C0
00:0000ADD4 02AC            	     3M          DC.W    (IMVTSR-X)
00:0000ADD6 003B            	     4M          DC.w    59
                            	  1382:          C68     FF00,4600,FORM1,11            ; NOT
00:0000ADD8 FF00            	     1M          DC.W    $FF00
00:0000ADDA 4600            	     2M          DC.W    $4600
00:0000ADDC 00EC            	     3M          DC.W    (FORM1-X)
00:0000ADDE 000B            	     4M          DC.w    11
                            	  1383:          C68     FFC0,44C0,IMVTCCR,59          ; MOVE TO CCR
00:0000ADE0 FFC0            	     1M          DC.W    $FFC0
00:0000ADE2 44C0            	     2M          DC.W    $44C0
00:0000ADE4 02CA            	     3M          DC.W    (IMVTCCR-X)
00:0000ADE6 003B            	     4M          DC.w    59
                            	  1384:          C68     FF00,4400,FORM1,10            ; NEG
00:0000ADE8 FF00            	     1M          DC.W    $FF00
00:0000ADEA 4400            	     2M          DC.W    $4400
00:0000ADEC 00EC            	     3M          DC.W    (FORM1-X)
00:0000ADEE 000A            	     4M          DC.w    10
                            	  1385:          C68     FF00,4200,FORM1,9             ; CLR
00:0000ADF0 FF00            	     1M          DC.W    $FF00
00:0000ADF2 4200            	     2M          DC.W    $4200
00:0000ADF4 00EC            	     3M          DC.W    (FORM1-X)
00:0000ADF6 0009            	     4M          DC.w    9
                            	  1386:          C68     FFC0,40C0,IMVFSR,59           ; MOVE.W  FROM  SR
00:0000ADF8 FFC0            	     1M          DC.W    $FFC0
00:0000ADFA 40C0            	     2M          DC.W    $40C0
00:0000ADFC 0290            	     3M          DC.W    (IMVFSR-X)
00:0000ADFE 003B            	     4M          DC.w    59
                            	  1387:          C68     FF00,4000,FORM1,8             ; NEGX
00:0000AE00 FF00            	     1M          DC.W    $FF00
00:0000AE02 4000            	     2M          DC.W    $4000
00:0000AE04 00EC            	     3M          DC.W    (FORM1-X)
00:0000AE06 0008            	     4M          DC.w    8
                            	  1388:          C68     F000,3000,IMOVE,59            ; MOVE.W
00:0000AE08 F000            	     1M          DC.W    $F000
00:0000AE0A 3000            	     2M          DC.W    $3000
00:0000AE0C 00D2            	     3M          DC.W    (IMOVE-X)
00:0000AE0E 003B            	     4M          DC.w    59
                            	  1389:          C68     F000,2000,IMOVE,60            ; MOVE.L
00:0000AE10 F000            	     1M          DC.W    $F000
00:0000AE12 2000            	     2M          DC.W    $2000
00:0000AE14 00D2            	     3M          DC.W    (IMOVE-X)
00:0000AE16 003C            	     4M          DC.w    60
                            	  1390:          C68     F000,1000,IMOVE,58            ; MOVE.B
00:0000AE18 F000            	     1M          DC.W    $F000
00:0000AE1A 1000            	     2M          DC.W    $1000
00:0000AE1C 00D2            	     3M          DC.W    (IMOVE-X)
00:0000AE1E 003A            	     4M          DC.w    58
                            	  1391:          C68     FF00,0C00,IMMED,6             ; CMP       #
00:0000AE20 FF00            	     1M          DC.W    $FF00
00:0000AE22 0C00            	     2M          DC.W    $0C00
00:0000AE24 005E            	     3M          DC.W    (IMMED-X)
00:0000AE26 0006            	     4M          DC.w    6
                            	  1392:          C68     FF00,0A00,IMMED,5             ; EOR       #
00:0000AE28 FF00            	     1M          DC.W    $FF00
00:0000AE2A 0A00            	     2M          DC.W    $0A00
00:0000AE2C 005E            	     3M          DC.W    (IMMED-X)
00:0000AE2E 0005            	     4M          DC.w    5
                            	  1393:          C68     FF00,0600,IMMED,4             ; ADD       #
00:0000AE30 FF00            	     1M          DC.W    $FF00
00:0000AE32 0600            	     2M          DC.W    $0600
00:0000AE34 005E            	     3M          DC.W    (IMMED-X)
00:0000AE36 0004            	     4M          DC.w    4
                            	  1394:          C68     FF00,0400,IMMED,3             ; SUB       #
00:0000AE38 FF00            	     1M          DC.W    $FF00
00:0000AE3A 0400            	     2M          DC.W    $0400
00:0000AE3C 005E            	     3M          DC.W    (IMMED-X)
00:0000AE3E 0003            	     4M          DC.w    3
                            	  1395:          C68     FF00,0200,IMMED,2             ; AND       #
00:0000AE40 FF00            	     1M          DC.W    $FF00
00:0000AE42 0200            	     2M          DC.W    $0200
00:0000AE44 005E            	     3M          DC.W    (IMMED-X)
00:0000AE46 0002            	     4M          DC.w    2
                            	  1396:          C68     FF00,0000,IMMED,1             ; OR        #
00:0000AE48 FF00            	     1M          DC.W    $FF00
00:0000AE4A 0000            	     2M          DC.W    $0000
00:0000AE4C 005E            	     3M          DC.W    (IMMED-X)
00:0000AE4E 0001            	     4M          DC.w    1
                            	  1397:          C68     F138,0108,IMOVEP,0            ; MOVEP
00:0000AE50 F138            	     1M          DC.W    $F138
00:0000AE52 0108            	     2M          DC.W    $0108
00:0000AE54 02DA            	     3M          DC.W    (IMOVEP-X)
00:0000AE56 0000            	     4M          DC.w    0
                            	  1398:          C68     FFC0,08C0,ISETS,64            ; BSET
00:0000AE58 FFC0            	     1M          DC.W    $FFC0
00:0000AE5A 08C0            	     2M          DC.W    $08C0
00:0000AE5C 039C            	     3M          DC.W    (ISETS-X)
00:0000AE5E 0040            	     4M          DC.w    64
                            	  1399:          C68     FFC0,0880,ISETS,63            ; BCLR
00:0000AE60 FFC0            	     1M          DC.W    $FFC0
00:0000AE62 0880            	     2M          DC.W    $0880
00:0000AE64 039C            	     3M          DC.W    (ISETS-X)
00:0000AE66 003F            	     4M          DC.w    63
                            	  1400:          C68     FFC0,0840,ISETS,62            ; BCHG
00:0000AE68 FFC0            	     1M          DC.W    $FFC0
00:0000AE6A 0840            	     2M          DC.W    $0840
00:0000AE6C 039C            	     3M          DC.W    (ISETS-X)
00:0000AE6E 003E            	     4M          DC.w    62
                            	  1401:          C68     FFC0,0800,ISETS,61            ; BTST
00:0000AE70 FFC0            	     1M          DC.W    $FFC0
00:0000AE72 0800            	     2M          DC.W    $0800
00:0000AE74 039C            	     3M          DC.W    (ISETS-X)
00:0000AE76 003D            	     4M          DC.w    61
                            	  1402:          C68     F1C0,01C0,ISETD,64            ; BSET
00:0000AE78 F1C0            	     1M          DC.W    $F1C0
00:0000AE7A 01C0            	     2M          DC.W    $01C0
00:0000AE7C 038C            	     3M          DC.W    (ISETD-X)
00:0000AE7E 0040            	     4M          DC.w    64
                            	  1403:          C68     F1C0,0180,ISETD,63            ; BCLR
00:0000AE80 F1C0            	     1M          DC.W    $F1C0
00:0000AE82 0180            	     2M          DC.W    $0180
00:0000AE84 038C            	     3M          DC.W    (ISETD-X)
00:0000AE86 003F            	     4M          DC.w    63
                            	  1404:          C68     F1C0,0140,ISETD,62            ; BCHG
00:0000AE88 F1C0            	     1M          DC.W    $F1C0
00:0000AE8A 0140            	     2M          DC.W    $0140
00:0000AE8C 038C            	     3M          DC.W    (ISETD-X)
00:0000AE8E 003E            	     4M          DC.w    62
                            	  1405:          C68     F1C0,0100,ISETD,61            ; BTST
00:0000AE90 F1C0            	     1M          DC.W    $F1C0
00:0000AE92 0100            	     2M          DC.W    $0100
00:0000AE94 038C            	     3M          DC.W    (ISETD-X)
00:0000AE96 003D            	     4M          DC.w    61
                            	  1406: TBLE:
                            	  1407:           even
                            	  1408: 
                            	  1409: N68:     macro arg1,arg2
                            	  1410:          dc.b  "\1",\2
                            	  1411:          endm
                            	  1412: 
                            	  1413: 				even
                            	  1414: OPCTBL:  ;.align  2
                            	  1415:          N68     MOVE,$d0    ; 0
00:0000AE98 4D4F5645        	     1M          dc.b  "MOVE",$d0
00:0000AE9C D0
                            	  1416:          N68     O,$d2       ; 1
00:0000AE9D 4F              	     1M          dc.b  "O",$d2
00:0000AE9E D2
                            	  1417:          N68     AN,$c4      ; 2
00:0000AE9F 414E            	     1M          dc.b  "AN",$c4
00:0000AEA1 C4
                            	  1418:          N68     SU,$c2      ; 3
00:0000AEA2 5355            	     1M          dc.b  "SU",$c2
00:0000AEA4 C2
                            	  1419:          N68     AD,$c4      ; 4
00:0000AEA5 4144            	     1M          dc.b  "AD",$c4
00:0000AEA7 C4
                            	  1420:          N68     EO,$d2      ; 5
00:0000AEA8 454F            	     1M          dc.b  "EO",$d2
00:0000AEAA D2
                            	  1421:          N68     CM,$d0      ; 6
00:0000AEAB 434D            	     1M          dc.b  "CM",$d0
00:0000AEAD D0
                            	  1422:          N68     MOV,$c5     ; 7
00:0000AEAE 4D4F56          	     1M          dc.b  "MOV",$c5
00:0000AEB1 C5
                            	  1423:          N68     NEG,$d8     ; 8
00:0000AEB2 4E4547          	     1M          dc.b  "NEG",$d8
00:0000AEB5 D8
                            	  1424:          N68     CL,$d2      ; 9
00:0000AEB6 434C            	     1M          dc.b  "CL",$d2
00:0000AEB8 D2
                            	  1425:          N68     NE,$c7      ; 10
00:0000AEB9 4E45            	     1M          dc.b  "NE",$c7
00:0000AEBB C7
                            	  1426:          N68     NO,$d4      ; 11
00:0000AEBC 4E4F            	     1M          dc.b  "NO",$d4
00:0000AEBE D4
                            	  1427:          N68     NBC,$c4     ; 12
00:0000AEBF 4E4243          	     1M          dc.b  "NBC",$c4
00:0000AEC2 C4
                            	  1428:          N68     PEA.,$cc    ; 13
00:0000AEC3 5045412E        	     1M          dc.b  "PEA.",$cc
00:0000AEC7 CC
                            	  1429:          N68     SWAP.,$d7   ; 14
00:0000AEC8 535741502E      	     1M          dc.b  "SWAP.",$d7
00:0000AECD D7
                            	  1430:          N68     MOVE,$cd    ; 15
00:0000AECE 4D4F5645        	     1M          dc.b  "MOVE",$cd
00:0000AED2 CD
                            	  1431:          N68     EXT.,$d7    ; 16
00:0000AED3 4558542E        	     1M          dc.b  "EXT.",$d7
00:0000AED7 D7
                            	  1432:          N68     EXT.,$cc    ; 17
00:0000AED8 4558542E        	     1M          dc.b  "EXT.",$cc
00:0000AEDC CC
                            	  1433:          N68     TS,$d4      ; 18
00:0000AEDD 5453            	     1M          dc.b  "TS",$d4
00:0000AEDF D4
                            	  1434:          N68     TAS.,$c2    ; 19
00:0000AEE0 5441532E        	     1M          dc.b  "TAS.",$c2
00:0000AEE4 C2
                            	  1435:          N68     TRA,$d0     ; 20
00:0000AEE5 545241          	     1M          dc.b  "TRA",$d0
00:0000AEE8 D0
                            	  1436:          N68     LIN,$cb     ; 21
00:0000AEE9 4C494E          	     1M          dc.b  "LIN",$cb
00:0000AEEC CB
                            	  1437:          N68     UNL,$cb     ; 22
00:0000AEED 554E4C          	     1M          dc.b  "UNL",$cb
00:0000AEF0 CB
                            	  1438:          N68     RESE,$d4    ; 23
00:0000AEF1 52455345        	     1M          dc.b  "RESE",$d4
00:0000AEF5 D4
                            	  1439:          N68     NO,$d0      ; 24
00:0000AEF6 4E4F            	     1M          dc.b  "NO",$d0
00:0000AEF8 D0
                            	  1440:          N68     STO,$d0     ; 25
00:0000AEF9 53544F          	     1M          dc.b  "STO",$d0
00:0000AEFC D0
                            	  1441:          N68     RT,$c5      ; 26
00:0000AEFD 5254            	     1M          dc.b  "RT",$c5
00:0000AEFF C5
                            	  1442:          N68     RT,$d3      ; 27
00:0000AF00 5254            	     1M          dc.b  "RT",$d3
00:0000AF02 D3
                            	  1443:          N68     TRAP,$d6    ; 28
00:0000AF03 54524150        	     1M          dc.b  "TRAP",$d6
00:0000AF07 D6
                            	  1444:          N68     RT,$d2      ; 29
00:0000AF08 5254            	     1M          dc.b  "RT",$d2
00:0000AF0A D2
                            	  1445:          N68     JS,$d2      ; 30
00:0000AF0B 4A53            	     1M          dc.b  "JS",$d2
00:0000AF0D D2
                            	  1446:          N68     JM,$d0      ; 31
00:0000AF0E 4A4D            	     1M          dc.b  "JM",$d0
00:0000AF10 D0
                            	  1447:          N68     CHK.,$d7    ; 32
00:0000AF11 43484B2E        	     1M          dc.b  "CHK.",$d7
00:0000AF15 D7
                            	  1448:          N68     LEA.,$cc    ; 33
00:0000AF16 4C45412E        	     1M          dc.b  "LEA.",$cc
00:0000AF1A CC
                            	  1449:          N68     ADD,$d1     ; 34
00:0000AF1B 414444          	     1M          dc.b  "ADD",$d1
00:0000AF1E D1
                            	  1450:          N68     SUB,$d1     ; 35
00:0000AF1F 535542          	     1M          dc.b  "SUB",$d1
00:0000AF22 D1
00:0000AF23 D3              	  1451:          DC.B    $d3         ; 36
                            	  1452:          N68     D,$c2       ; 37
00:0000AF24 44              	     1M          dc.b  "D",$c2
00:0000AF25 C2
00:0000AF26 C2              	  1453:          DC.B    $c2         ; 38
                            	  1454:          N68     MOVEQ.,$cc  ; .....39
00:0000AF27 4D4F5645512E    	     1M          dc.b  "MOVEQ.",$cc
00:0000AF2D CC
                            	  1455:          N68     O,$d2       ; 40
00:0000AF2E 4F              	     1M          dc.b  "O",$d2
00:0000AF2F D2
                            	  1456:          N68     DIVU.,$d7   ; 41
00:0000AF30 444956552E      	     1M          dc.b  "DIVU.",$d7
00:0000AF35 D7
                            	  1457:          N68     DIVS.,$d7   ; 42
00:0000AF36 444956532E      	     1M          dc.b  "DIVS.",$d7
00:0000AF3B D7
                            	  1458:          N68     SBC,$c4     ; 43
00:0000AF3C 534243          	     1M          dc.b  "SBC",$c4
00:0000AF3F C4
                            	  1459:          N68     SU,$c2      ; 44
00:0000AF40 5355            	     1M          dc.b  "SU",$c2
00:0000AF42 C2
                            	  1460:          N68     SUB,$d8     ; 45
00:0000AF43 535542          	     1M          dc.b  "SUB",$d8
00:0000AF46 D8
                            	  1461:          N68     CMP,$cd     ; 46
00:0000AF47 434D50          	     1M          dc.b  "CMP",$cd
00:0000AF4A CD
                            	  1462:          N68     MULU.,$d7   ; 47
00:0000AF4B 4D554C552E      	     1M          dc.b  "MULU.",$d7
00:0000AF50 D7
                            	  1463:          N68     MULS.,$d7   ; 48
00:0000AF51 4D554C532E      	     1M          dc.b  "MULS.",$d7
00:0000AF56 D7
                            	  1464:          N68     ABC,$c4     ; 49
00:0000AF57 414243          	     1M          dc.b  "ABC",$c4
00:0000AF5A C4
                            	  1465:          N68     EX,$c7      ; 50
00:0000AF5B 4558            	     1M          dc.b  "EX",$c7
00:0000AF5D C7
                            	  1466:          N68     BS,$d2      ; .....51
00:0000AF5E 4253            	     1M          dc.b  "BS",$d2
00:0000AF60 D2
                            	  1467:          N68     NUL,$cc     ; .....52
00:0000AF61 4E554C          	     1M          dc.b  "NUL",$cc
00:0000AF64 CC
                            	  1468:          N68     ADD,$d8     ; 53
00:0000AF65 414444          	     1M          dc.b  "ADD",$d8
00:0000AF68 D8
                            	  1469:          N68     A,$d3       ; 54
00:0000AF69 41              	     1M          dc.b  "A",$d3
00:0000AF6A D3
                            	  1470:          N68     L,$d3       ; 55
00:0000AF6B 4C              	     1M          dc.b  "L",$d3
00:0000AF6C D3
                            	  1471:          N68     R,$cf       ; 56
00:0000AF6D 52              	     1M          dc.b  "R",$cf
00:0000AF6E CF
                            	  1472:          N68     RO,$d8      ; 57
00:0000AF6F 524F            	     1M          dc.b  "RO",$d8
00:0000AF71 D8
                            	  1473:          N68     MOVE.,$c2   ; 58
00:0000AF72 4D4F56452E      	     1M          dc.b  "MOVE.",$c2
00:0000AF77 C2
                            	  1474:          N68     MOVE.,$d7   ; 59
00:0000AF78 4D4F56452E      	     1M          dc.b  "MOVE.",$d7
00:0000AF7D D7
                            	  1475:          N68     MOVE.,$cc   ; 60
00:0000AF7E 4D4F56452E      	     1M          dc.b  "MOVE.",$cc
00:0000AF83 CC
                            	  1476:          N68     BTS,$d4     ; 61
00:0000AF84 425453          	     1M          dc.b  "BTS",$d4
00:0000AF87 D4
                            	  1477:          N68     BCH,$c7     ; 62
00:0000AF88 424348          	     1M          dc.b  "BCH",$c7
00:0000AF8B C7
                            	  1478:          N68     BCL,$d2     ; 63
00:0000AF8C 42434C          	     1M          dc.b  "BCL",$d2
00:0000AF8F D2
                            	  1479:          N68     BSE,$d4     ; 64
00:0000AF90 425345          	     1M          dc.b  "BSE",$d4
00:0000AF93 D4
                            	  1480:          N68     BR,$c1      ; 65
00:0000AF94 4252            	     1M          dc.b  "BR",$c1
00:0000AF96 C1
                            	  1481: 
00:0000AF97 00              	  1482:          DC.B    0         ; PAD BYTE
                            	  1483: 
                            	  1484: 

Source: "boot.x68"
                            	  4617:  	include "games/asteroids/asteroids 1_0.x68"

Source: "games\asteroids\asteroids 1_0.x68"
                            	     1: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	     2: ;														;
                            	     3: ;	ASTEROIDS type game for the EASy68k simulator	2009/05/17	V1.00			;
                            	     4: ;														;
                            	     5: ;	The objective of of the game is to score as many points as possible by		;
                            	     6: ;	destroying asteroids and flying saucers. You control a triangular ship		;
                            	     7: ;	that can rotate, fire shots forward and thrust forward. As the ship moves,	;
                            	     8: ;	momentum is not conserved, the ship eventually comes to a stop when not		;
                            	     9: ;	thrusting. In moments of extreme danger you can send the ship into		;
                            	    10: ;	hyperspace, causing it to disappear and reappear in a random location.		;
                            	    11: ;														;
                            	    12: ;	Each wave starts with the asteroids drifting in random directions onto the	;
                            	    13: ;	screen. Objects wrap around screen edges, an asteroid that drifts off the	;
                            	    14: ;	left edge of the screen reappears at the right and continues moving in the	;
                            	    15: ;	same direction. As you shoot asteroids they break into smaller asteroids	;
                            	    16: ;	that often move faster and are more difficult to hit. The smaller the		;
                            	    17: ;	asteroid the higher the points scored.							;
                            	    18: ;														;
                            	    19: ;	Every so often a flying saucer will appear on one side of the screen and	;
                            	    20: ;	move to the other before disappearing again. Large saucers fire in random	;
                            	    21: ;	directions, while small saucers aim their fire towards the player's ship.	;
                            	    22: ;														;
                            	    23: ;	Once all of the asteroids and flying saucers have been cleared a new set of	;
                            	    24: ;	large asteroids appears. The number of asteroids increases by two each round	;
                            	    25: ;	up to a maximum of eleven. The game continues until all the player lives	;
                            	    26: ;	are lost, a bonus life being awarded for each 10,000 points scored up to a	;
                            	    27: ;	maximum of 255 lives. A maximum of only 18 lives are shown on screen.		;
                            	    28: ;														;
                            	    29: ;	Like the original game the maximum possible score in this game is 99,990	;
                            	    30: ;	points after which it rolls over back to zero.						;
                            	    31: ;														;
                            	    32: ;	Also like the original game some game parameters can be set using the		;
                            	    33: ;	switches in the hardware window. These can be changed at any time during	;
                            	    34: ;	the game.												;
                            	    35: ;														;
                            	    36: ;	Switch	Function										;
                            	    37: ;	------	--------										;
                            	    38: ;	7 - 3		Unused										;
                            	    39: ;	  2		Starting ship count. On = 4, off = 3					;
                            	    40: ;	1 - 0		Language	1	0								;
                            	    41: ;					off	off	English						;
                            	    42: ;					off	on	German						;
                            	    43: ;					on	off	French						;
                            	    44: ;					on	on	Spanish						;
                            	    45: ;														;
                            	    46: ;	Game controls...											;
                            	    47: ;														;
                            	    48: ;	 [1] or [2] for a one or two player game start						;
                            	    49: ;	 [s] to toggle the sound off and on								;
                            	    50: ;														;
                            	    51: ;	 [q] to rotate the ship widdershins								;
                            	    52: ;	 [w] to rotate the ship deocil								;
                            	    53: ;	 [l] to fire the ship thruster								;
                            	    54: ;	 [p] to fire the ship weapon									;
                            	    55: ;	 [SPACE] to jump to hyperspace								;
                            	    56: ;														;
                            	    57: ;	Other keys are:											;
                            	    58: ;														;
                            	    59: ;	 The F2, F3 and F4 keys can be used to select a screen size of 640 x 480,	;
                            	    60: ;	 800 x 600 and 1024 x 768 respectively.							;
                            	    61: ;														;
                            	    62: ;	The game saves the high scores in the file asteroids.hi If this file is		;
                            	    63: ;	not present it will be created after the first high score is entered. If	;
                            	    64: ;	this file is read only new high scores will not be saved. No check is made	;
                            	    65: ;	on the validity of this file, editing the file may cause the game to crash.	;
                            	    66: ;														;
                            	    67: ;	This version for Sim68K 4.6.0 or later							;
                            	    68: ;														;
                            	    69: ;	More 68000 and other projects can be found on my website at ..			;
                            	    70: ;														;
                            	    71: ;	 http://mycorner.no-ip.org/index.html							;
                            	    72: ;														;
                            	    73: ;	mail : leeedavison@googlemail.com								;
                            	    74: ;														;
                            	    75: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    76: 
                            	    77: ; a0 = system calls and volatile
                            	    78: ; a1 = system calls and volatile
                            	    79: ; a2 = volatile
                            	    80: ; a3 = variables base address
                            	    81: ; a4 = vector list pointer
                            	    82: ; a5 = player 1 / current player
                            	    83: ; a6 = player 2 / other player
                            	    84: ; a7 = stack pointer
                            	    85: 
                            	    86: 
                            	    87: 	ORG	$10000
                            	    88: 	code
                            	    89: 	even
                            	    90: 
                            	    91: asteroids_start:
00:0000AF98 61001222        	    92: 	bsr	Initialise				; go setup everything
00:0000AF9C 610006DA        	    93: 	bsr reset_game				; clear the scores and set the ship start count
                            	    94: 
                            	    95: ; main loop. this is executed at most once every 16ms, as it waits for the 16ms counter
                            	    96: ; to be incremented from zero since the last loop
                            	    97: 
                            	    98: main_loop:
00:0000AFA0 705E            	    99: 	moveq	#94,d0					; copy screen buffer to main (page flip)
00:0000AFA2 4E4F            	   100: 	trap #15
                            	   101: 
00:0000AFA4 7E06            	   102: 	moveq #6,d7						; video frame buffer
00:0000AFA6 7C0C            	   103: 	moveq #DEV_CLEAR,d6
00:0000AFA8 4E40            	   104: 	trap #0
                            	   105: 
                            	   106: ;	move.w #$FF00,d1			; clear screen
                            	   107: ;	moveq #11,d0					; position cursor
                            	   108: ;	trap #15
                            	   109: 
                            	   110: ;	bsr sound_key					; handle the sound key
00:0000AFAA 61001204        	   111: 	bsr s_controls				; go check the screen controls
                            	   112: 
00:0000AFAE 20390004009C    	   113: 	move.l tickcnt,d0
                            	   114: .0001:
00:0000AFB4 B0B90004009C    	   115: 	cmp.l tickcnt,d0
00:0000AFBA 67F8            	   116: 	beq.s .0001
00:0000AFBC 7001            	   117: 	moveq #1,d0
                            	   118: ;wait_16ms
                            	   119: ;	MOVE.b	sixteen_ms(a3),d0		; get the 16ms counter
                            	   120: ;	BEQ.s		wait_16ms			; if not there yet just loop
                            	   121: 
                            	   122: ;	clr.b	sixteen_ms(a3)			; clear the 16ms counter
00:0000AFBE D16B0059        	   123: 	add.w d0,game_count(a3)		; increment the game counter
00:0000AFC2 D12B0025        	   124: 	add.b d0,time_count(a3)		; increment the timeout counter
                            	   125: 
00:0000AFC6 49FA13D4        	   126: 	lea vector(pc),a4			; reset the vector RAM pointer
                            	   127: 
00:0000AFCA 6168            	   128: 	bsr game_message			; do "PLAYER x", "GAME OVER" or credit messages
                            	   129: 
00:0000AFCC 61000F1C        	   130: 	bsr check_hiscores		; do the high score checks
00:0000AFD0 610004C0        	   131: 	bsr enter_hiscores		; get the player high score entries
00:0000AFD4 6A30            	   132: 	bpl.s no_play					; if the high scores are being entered skip the
                            	   133: 												; active play routines
                            	   134: 
00:0000AFD6 61000C70        	   135: 	bsr high_scores				; display the high score table if the game is
                            	   136: 												; over
00:0000AFDA 652A            	   137: 	bcs.s	no_play					; if the high score table was displayed skip
                            	   138: 												; active play
                            	   139: 
00:0000AFDC 4A2B001C        	   140: 	tst.b px_time(a3)			; test the "PLAYER x" timer
00:0000AFE0 661C            	   141: 	bne.s px_hide					; skip the control checks if the "PLAYER x"
                            	   142: 												; timer is not timed out
                            	   143: 
00:0000AFE2 4A2B001A        	   144: 	tst.b num_players(a3)	; test the number of players in the game
00:0000AFE6 6712            	   145: 	beq.s skip_player_cont		; if no players skip the player controls
                            	   146: 
00:0000AFE8 4A2D0027        	   147: 	tst.b p_flag_off(a5)			; test the player flag
00:0000AFEC 6B08            	   148: 	bmi.s skip_player_move		; if the player is exploding skip the player
                            	   149: 														; move controls
                            	   150: 
00:0000AFEE 610003FA        	   151: 	bsr	ship_fire					; handle the fire button			##
00:0000AFF2 610005F4        	   152: 	bsr	hyperspace				; handle the hyperspace button		##
                            	   153: skip_player_move
00:0000AFF6 610007F0        	   154: 	bsr ship_move					; handle ship rotation and thrust		##
                            	   155: skip_player_cont
00:0000AFFA 61000280        	   156: 	bsr do_saucer					; handle the saucer
                            	   157: px_hide
00:0000AFFE 610006F6        	   158: 	bsr move_items				; move all the objects and add them to the
                            	   159: 												; vector list
00:0000B002 61000146        	   160: 	bsr check_hits				; check for player/saucer/shot hits
                            	   161: no_play
00:0000B006 61000AB0        	   162: 	bsr static_messages		; add (c), scores and players ships to the
                            	   163: 												; vector list
                            	   164: 
00:0000B00A 61000E26        	   165: 	bsr fx_sounds					; do the saucer and thump sounds
                            	   166: 
00:0000B00E 38FCB000        	   167: 	move.w #HALT,(a4)+		; add HALT to the vector list
                            	   168: 
00:0000B012 49FA1388        	   169: 	lea vector(pc),a4			; reset the vector RAM pointer
00:0000B016 6100123A        	   170: 	bsr do_vector					; go do the vector list, draw them
                            	   171: 
00:0000B01A 102D007B        	   172: 	move.b new_rocks(a5),d0			; test the generate new rocks flag
00:0000B01E 6704            	   173: 	beq.s no_dec_new_rocks			; if counted out skip the decrement
                            	   174: 
00:0000B020 532D007B        	   175: 	subq.b #1,new_rocks(a5)			; else decrement the generate new rocks flag
                            	   176: no_dec_new_rocks
00:0000B024 802D0076        	   177: 	or.b rock_count(a5),d0			; OR the new rocks flag with the rock count
00:0000B028 6600FF76        	   178: 	bne main_loop					; if not counted out or still rocks go do the
                            	   179: 												; main loop
                            	   180: 
00:0000B02C 487AFF72        	   181: 	pea main_loop					; return to the main loop
00:0000B030 6000090C        	   182: 	bra make_rocks				; go generate new rocks
                            	   183: 
                            	   184: 
                            	   185: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   186: ;
                            	   187: ; do "PLAYER x", "GAME OVER" or credit messages
                            	   188: 
                            	   189: game_message:
00:0000B034 4A2B001A        	   190: 	tst.b num_players(a3)		; test the number of players in the game
00:0000B038 670E            	   191: 	beq.s do_start_mess			; if no players go do the start message
                            	   192: 
00:0000B03A 4A2B001C        	   193: 	tst.b px_time(a3)				; test the "PLAYER x" timer
00:0000B03E 6778            	   194: 	beq.s game_over					; if timed out go do "GAME OVER" or thump
                            	   195: 													; sound count
                            	   196: 
00:0000B040 532B001C        	   197: 	subq.b #1,px_time(a3)		; decrement the "PLAYER x" timer
00:0000B044 60001100        	   198: 	bra player_x						; add "PLAYER x" to the vector list and return
                            	   199: 
                            	   200: ; do the push start message
                            	   201: 
                            	   202: do_start_mess:
00:0000B048 7005            	   203: 	moveq #5,d0					; GetKey
00:0000B04A 4E4F            	   204: 	trap #15
00:0000B04C 7001            	   205: 	moveq #1,d0
00:0000B04E 0C010031        	   206: 	cmpi.b #'1',d1
00:0000B052 6718            	   207: 	beq.s start_game
00:0000B054 0C010032        	   208: 	cmpi.b #'2',d1
00:0000B058 6646            	   209: 	bne.s push_start_mess
                            	   210: 
                            	   211: ;	MOVE.l	#'2121',d1			; [2][1][2][1] key
                            	   212: ;	MOVEQ		#19,d0			; check for keypress
                            	   213: ;	TRAP		#15
                            	   214: 
                            	   215: ;	MOVEQ		#1,d0				; default to one player
                            	   216: ;	TST.b		d1				; test the [1] key result
                            	   217: ;	BMI.s		start_game			; if pressed go start a one player game
                            	   218: 
                            	   219: ;	TST.w		d1				; test the [2] key result
                            	   220: 	;BPL.s		push_start_mess		; if not pressed go do the "PUSH START" message
                            	   221: 
                            	   222: 							; else the two player start was pressed
00:0000B05A 4BEB01F7        	   223: 	lea player_2(a3),a5		; set the pointer to player two's variables
00:0000B05E 61000618        	   224: 	bsr reset_game				; clear the score and set the ship start count
00:0000B062 61000982        	   225: 	bsr player_init				; initialise the player variables
00:0000B066 610008D6        	   226: 	bsr make_rocks				; generate new rocks
00:0000B06A 7002            	   227: 	moveq #2,d0						; set two players in this game
                            	   228: 
                            	   229: ; one or two player game start
                            	   230: 
                            	   231: start_game:
00:0000B06C 1740001A        	   232: 	move.b d0,num_players(a3)	; save the number of players in the game
                            	   233: 
00:0000B070 422B0018        	   234: 	clr.b player_idx(a3)			; clear the player index
00:0000B074 4BEB00F3        	   235: 	lea	player_1(a3),a5				; set the pointer to player one's variables
00:0000B078 4DEB01F7        	   236: 	lea player_2(a3),a6				; set the pointer to player two's variables
                            	   237: 
00:0000B07C 610005FA        	   238: 	bsr reset_game				; clear the scores and set the ship start count
00:0000B080 61000964        	   239: 	bsr player_init				; initialise the player variables
00:0000B084 610008B8        	   240: 	bsr make_rocks				; generate new rocks
                            	   241: 
00:0000B088 7000            	   242: 	moveq #0,d0						; clear the longword
00:0000B08A 3B400080        	   243: 	move.w d0,score_off(a5)		; clear player 1's score
00:0000B08E 3D400080        	   244: 	move.w d0,score_off(a6)		; clear player 2's score
                            	   245: 
00:0000B092 177C0080001C    	   246: 	move.b #$80,px_time(a3)		; set the "PLAYER x" timer
00:0000B098 177C00040024    	   247: 	move.b #$04,thump_time(a3)	; set the thump sound change timer
00:0000B09E 4E75            	   248: 	rts
                            	   249: 
                            	   250: ; else do the "PUSH START" message
                            	   251: 
                            	   252: push_start_mess:
00:0000B0A0 102B0176        	   253: 	move.b p1_high(a3),d0			; get the player 1 highscore flag
00:0000B0A4 C02B027A        	   254: 	and.b p2_high(a3),d0			; and with the player 2 highscore flag
00:0000B0A8 6A0C            	   255: 	bpl.s exit_push_start			; if either player is entering their high score
                            	   256: 														; skip the "PUSH START" message
                            	   257: 
00:0000B0AA 7206            	   258: 	moveq #$06,d1								; message 6 - "PUSH START"
00:0000B0AC 082B0005005A    	   259: 	btst.b #5,game_count+1(a3)	; test a bit in the game counter low byte
00:0000B0B2 67001024        	   260: 	beq add_message							; if set add message d1 to the display list
                            	   261: 															; and return
                            	   262: exit_push_start
00:0000B0B6 4E75            	   263: 	rts
                            	   264: 
                            	   265: ; do "GAME OVER" or thump sound count
                            	   266: 
                            	   267: game_over:
00:0000B0B8 703F            	   268: 	moveq #$3F,d0							; set the game counter mask
00:0000B0BA C06B0059        	   269: 	and.w game_count(a3),d0		; mask the game counter
00:0000B0BE 660C            	   270: 	bne.s nodec_thmpi					; branch if not zero
                            	   271: 
                            	   272: 							; gets here 1/64th of the time
00:0000B0C0 0C2D0006007C    	   273: 	cmpi.b #6,thmp_sndi(a5)		; compare the thump sound change timer initial
                            	   274: 							; value with the minimum value
00:0000B0C6 6704            	   275: 	beq.s nodec_thmpi					; if there already don't decrement it
                            	   276: 
00:0000B0C8 532D007C        	   277: 	subq.b #1,thmp_sndi(a5)		; else decrement the thump sound change timer
                            	   278: 							; initial value
                            	   279: nodec_thmpi
00:0000B0CC 4A2D0082        	   280: 	tst.b ships_off(a5)			; test the player ship count
00:0000B0D0 6624            	   281: 	bne.s no_game_over			; if ships left skip game over
                            	   282: 
                            	   283: 							; else this player has no ships left
00:0000B0D2 102D002B        	   284: 	move.b p_fire_off(a5),d0		; get player fire 1
00:0000B0D6 802D002C        	   285: 	or.b p_fire_off+1(a5),d0		; OR with player fire 2
00:0000B0DA 802D002D        	   286: 	or.b p_fire_off+2(a5),d0		; OR with player fire 3
00:0000B0DE 802D002E        	   287: 	or.b p_fire_off+3(a5),d0		; OR with player fire 4
00:0000B0E2 6612            	   288: 	bne.s no_game_over			; if shots still flying skip the game over
                            	   289: 
00:0000B0E4 7207            	   290: 	moveq #7,d1							; else message 7 - "GAME OVER"
00:0000B0E6 61000FF0        	   291: 	bsr add_message					; add message d1 to the display list
                            	   292: 
00:0000B0EA 0C2B0002001A    	   293: 	cmpi.b #$02,num_players(a3)	; compare the number of players with two
00:0000B0F0 6604            	   294: 	bne.s no_game_over			; if not two player skip which game's over
                            	   295: 
00:0000B0F2 61001052        	   296: 	bsr player_x						; add "PLAYER x" to the vector list
                            	   297: no_game_over
00:0000B0F6 4A2D0027        	   298: 	tst.b p_flag_off(a5)		; test the player flag
00:0000B0FA 6638            	   299: 	bne.s	exit_game_message		; if alive or exploding just exit
                            	   300: 
00:0000B0FC 0C2D0080007A    	   301: 	cmpi.b #$80,hide_p_cnt(a5)	; compare with about to die - 1 with the hide
                            	   302: 							; the player count
00:0000B102 6630            	   303: 	bne.s exit_game_message			; if not about to die just exit
                            	   304: 
00:0000B104 1B7C0010007A    	   305: 	move.b #$10,hide_p_cnt(a5)	; set the hide the player count
                            	   306: 
00:0000B10A 122B001A        	   307: 	move.b num_players(a3),d1	; get the number of players in the game
                            	   308: 
00:0000B10E 102B0175        	   309: 	move.b p1_ships(a3),d0		; get player 1's ship count
00:0000B112 802B0279        	   310: 	or.b p2_ships(a3),d0			; OR with player 2's ship count
00:0000B116 671E            	   311: 	beq.s end_game					; if no ships left go end the game
                            	   312: 
00:0000B118 610006BA        	   313: 	bsr clear_saucer				; clear the saucer and restart the saucer timer
00:0000B11C 5301            	   314: 	subq.b #1,d1						; decrement the number of players in the game
00:0000B11E 6714            	   315: 	beq.s exit_game_message	; if that was the last player go flag no game
                            	   316: 							; and exit
                            	   317: 
00:0000B120 177C0080001C    	   318: 	move.b #$80,px_time(a3)		; set the "PLAYER x" timer
                            	   319: 
00:0000B126 4A2E0082        	   320: 	tst.b ships_off(a6)			; test the other player's ship count
00:0000B12A 6708            	   321: 	beq.s exit_game_message		; if no ships left go flag no game and exit
                            	   322: 
                            	   323: 														; else change to the other player
00:0000B12C 0A2B00010018    	   324: 	eori.b #1,player_idx(a3)		; toggle the player index
00:0000B132 CB4E            	   325: 	exg a5,a6									; swap the player pointers
                            	   326: exit_game_message
00:0000B134 4E75            	   327: 	rts
                            	   328: 
                            	   329: ; neither player has any ships left so end the game
                            	   330: 
                            	   331: end_game:
00:0000B136 17410019        	   332: 	move.b d1,past_play(a3)		; save the number of players that were in the
                            	   333: 							; game
00:0000B13A 177C00FF001A    	   334: 	move.b #$FF,num_players(a3)	; clear the number of players in the game
00:0000B140 4BEB00F3        	   335: 	lea player_1(a3),a5		; set the pointer to player one's variables
00:0000B144 4DEB01F7        	   336: 	lea player_2(a3),a6		; set the pointer to player two's variables
00:0000B148 4E75            	   337: 	rts
                            	   338: 
                            	   339: 
                            	   340: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   341: ;
                            	   342: ; check for player/saucer/shot hits
                            	   343: 
                            	   344: check_hits:
00:0000B14A 7C07            	   345: 	moveq #flag_end-p_flag_off-1,d6
                            	   346: 							; set the count/index for player/saucer/shots
                            	   347: pss_check_loop
00:0000B14C 4A356027        	   348: 	tst.b p_flag_off(a5,d6.w)	; test if the player/saucer/shot exists
00:0000B150 6E06            	   349: 	bgt.s check_pss			; if the item exists and is not exploding go
                            	   350: 							; test it
                            	   351: 
                            	   352: next_pss
00:0000B152 51CEFFF8        	   353: 	dbf d6,pss_check_loop	; decrement count/index and loop if more to do
                            	   354: 
00:0000B156 4E75            	   355: 	rts
                            	   356: 
                            	   357: ; the player/saucer/shot exists and is not exploding
                            	   358: 
                            	   359: check_pss
00:0000B158 7E1C            	   360: 	moveq #s_flag_off-flags_off,d7
                            	   361: 							; set the item index to the saucer
00:0000B15A 0C460004        	   362: 	cmpi.w #p_fire_off-p_flag_off,d6
                            	   363: 							; compare the player/saucer/shot index with the
                            	   364: 							; first player shot
00:0000B15E 640A            	   365: 	bcc.s check_all			; if it is a player shot go test it against all
                            	   366: 							; the items
                            	   367: 
00:0000B160 5347            	   368: 	subq.w #1,d7				; else skip the saucer
00:0000B162 4A46            	   369: 	tst.w d6						; test the player/saucer/shot index
00:0000B164 6604            	   370: 	bne.s check_all			; if not the player go test against everything
                            	   371: 
                            	   372: 							; else skip the player
                            	   373: check_next_object
00:0000B166 5347            	   374: 	subq.w #1,d7				; decrement the item index
00:0000B168 6BE8            	   375: 	bmi.s next_pss			; if all done go do next player/saucer/shot
                            	   376: 
                            	   377: check_all
00:0000B16A 1435700C        	   378: 	move.b flags_off(a5,d7.w),d2	; get the item flag indexed by d7
00:0000B16E 6FF6            	   379: 	ble.s	check_next_object		; if the item doesn't exist or the item is
                            	   380: 							; exploding go try the next item
                            	   381: 
00:0000B170 3A07            	   382: 	move.w d7,d5				; copy the item index
00:0000B172 DA45            	   383: 	add.w d5,d5					; *2 for the item position index
                            	   384: 
00:0000B174 3806            	   385: 	move.w d6,d4				; copy the fire item index
00:0000B176 D844            	   386: 	add.w	d4,d4					; * 2 for the fire item position index
                            	   387: 
00:0000B178 30355080        	   388: 	move.w x_pos_off(a5,d5.w),d0	; get item x position
00:0000B17C 907540B6        	   389: 	sub.w p_xpos_off(a5,d4.w),d0	; subtract the player/saucer/shot x position
00:0000B180 6A02            	   390: 	bpl.s delta_x_pos			; if the delta is positive skip the negate
                            	   391: 
00:0000B182 4440            	   392: 	neg.w	d0						; else negate the delta
                            	   393: delta_x_pos
00:0000B184 0C400151        	   394: 	CMPI.w	#$0151,d0			; compare the range with $0151
00:0000B188 64DC            	   395: 	BCC.s		check_next_object		; if it's out of range go try the next item
                            	   396: 
00:0000B18A 323550C6        	   397: 	MOVE.w	y_pos_off(a5,d5.w),d1	; get item y position
00:0000B18E 927540FC        	   398: 	SUB.w		p_ypos_off(a5,d4.w),d1	; subtract the player/saucer/shot y position
00:0000B192 6A02            	   399: 	BPL.s		delta_y_pos			; if the delta is positive skip the negate
                            	   400: 
00:0000B194 4441            	   401: 	NEG.w		d1				; else negate the delta
                            	   402: delta_y_pos
00:0000B196 0C410151        	   403: 	CMPI.w	#$0151,d1			; compare the range with $0151
00:0000B19A 64CA            	   404: 	BCC.s		check_next_object		; if it's out of range go try the next item
                            	   405: 
00:0000B19C C0C0            	   406: 	MULU.w	d0,d0				; calculate delta x^2
00:0000B19E C2C1            	   407: 	MULU.w	d1,d1				; calculate delta y^2
00:0000B1A0 D081            	   408: 	ADD.l		d1,d0				; calculate delta x^2 + delta y^2
00:0000B1A2 E480            	   409: 	ASR.l		#2,d0				; / 4 makes it a word value again
                            	   410: 
00:0000B1A4 02420007        	   411: 	ANDI.w	#$07,d2			; mask the size bits
00:0000B1A8 5302            	   412: 	SUBQ.b	#1,d2				; make $01 to $04 into $00 to $03
00:0000B1AA D402            	   413: 	ADD.b		d2,d2				; ; 2 bytes per size^2
                            	   414: 
00:0000B1AC 0C460001        	   415: 	CMPI.w	#s_flag_off-p_flag_off,d6
                            	   416: 							; compare the player/saucer/shot index with the
                            	   417: 							; saucer
00:0000B1B0 6E10            	   418: 	BGT.s		no_add_size			; if shot index just go get the collision size
                            	   419: 
00:0000B1B2 6B0C            	   420: 	BMI.s		add_p_size			; if player index only add the player offset
                            	   421: 
00:0000B1B4 083500016027    	   422: 	BTST.b	#1,p_flag_off(a5,d6.w)	; else test the saucer size flag
00:0000B1BA 6702            	   423: 	BEQ.s		small_s_size		; if not size $02 only add the small saucer size
                            	   424: 
00:0000B1BC 5042            	   425: 	ADDQ.w	#col_table_l-col_table_s,d2
                            	   426: 							; add the offset to the item + large saucer size
                            	   427: 							; table
                            	   428: small_s_size
00:0000B1BE 5042            	   429: 	ADDQ.w	#col_table_s-col_table_p,d2
                            	   430: 							; add the offset to the item + small saucer size
                            	   431: 							; table
                            	   432: add_p_size
00:0000B1C0 5042            	   433: 	ADDQ.w	#col_table_p-col_table,d2
                            	   434: 							; add the offset to the item + player size table
                            	   435: no_add_size
00:0000B1C2 343B200C        	   436: 	MOVE.w	col_table(pc,d2.w),d2	; get the collision size from the table
                            	   437: 
00:0000B1C6 B440            	   438: 	CMP.w		d0,d2				; compare the distance^2 with the collision size
00:0000B1C8 659C            	   439: 	BCS.s		check_next_object		; if it's out of range go try the next item
                            	   440: 
00:0000B1CA 487AFF86        	   441: 	PEA		next_pss(pc)		; now go try the next fire item, this one died
00:0000B1CE 6020            	   442: 	BRA.s		handle_collision		; else go handle a collision between items
                            	   443: 
                            	   444: ; table of collision distance squares
                            	   445: 
                            	   446: col_table
00:0000B1D0 06E4            	   447: 	dc.w	$06E4			; $24^2		small rock, small saucer, player
00:0000B1D2 1440            	   448: 	dc.w	$1440			; $48^2		medium rock, large saucer
00:0000B1D4 0000            	   449: 	dc.w	$0000			; no size 3 rock
00:0000B1D6 4410            	   450: 	dc.w	$4410			; $84^2		large rock
                            	   451: col_table_p
00:0000B1D8 1000            	   452: 	dc.w	$1000			; ($24 + $1C)^2	small rock  + player
00:0000B1DA 2710            	   453: 	dc.w	$2710			; ($48 + $1C)^2	medium rock + player
00:0000B1DC 0000            	   454: 	dc.w	$0000			; no size 3 rock
00:0000B1DE 6400            	   455: 	dc.w	$6400			; ($84 + $1C)^2	large rock  + player
                            	   456: col_table_s
00:0000B1E0 0B64            	   457: 	dc.w	$0B64			; ($24 + $12)^2	small rock  + small saucer
00:0000B1E2 1FA4            	   458: 	dc.w	$1FA4			; ($48 + $12)^2	medium rock + small saucer
00:0000B1E4 0000            	   459: 	dc.w	$0000			; no size 3 rock
00:0000B1E6 57E4            	   460: 	dc.w	$57E4			; ($84 + $12)^2	large rock  + small saucer
                            	   461: col_table_l
00:0000B1E8 1440            	   462: 	dc.w	$1440			; ($24 + $24)^2	small rock  + large saucer
00:0000B1EA 2D90            	   463: 	dc.w	$2D90			; ($48 + $24)^2	medium rock + large saucer
00:0000B1EC 0000            	   464: 	dc.w	$0000			; no size 3 rock
00:0000B1EE 6E40            	   465: 	dc.w	$6E40			; ($84 + $24)^2	large rock  + large saucer
                            	   466: 
                            	   467: 
                            	   468: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   469: ;
                            	   470: ; handle collision between items
                            	   471: ;
                            	   472: ; d6 = X = player/saucer/shot index
                            	   473: ; d7 = Y = object index
                            	   474: 
                            	   475: handle_collision:
00:0000B1F0 0C460001        	   476: 	CMPI.w	#s_flag_off-p_flag_off,d6
                            	   477: 							; compare the player/saucer/shot index with the
                            	   478: 							; saucer
00:0000B1F4 660A            	   479: 	BNE.s		not_saucer			; if not the saucer go find out what it was
                            	   480: 
                            	   481: 							; else the saucer hit something
00:0000B1F6 0C47001B        	   482: 	CMPI.w	#p_flag_off-flags_off,d7
                            	   483: 							; compare the object with the player index
00:0000B1FA 6612            	   484: 	BNE.s		not_player			; if not the player go find out what it was
                            	   485: 
                            	   486: 							; else the saucer hit the player so make it that
                            	   487: 							; the player hit the saucer
00:0000B1FC 7E1C            	   488: 	MOVEQ		#s_flag_off-flags_off,d7
                            	   489: 							; make the object the saucer
00:0000B1FE 7C00            	   490: 	MOVEQ		#p_flag_off-p_flag_off,d6
                            	   491: 							; make the player/saucer/shot index the player
                            	   492: not_saucer
00:0000B200 4A46            	   493: 	TST.w		d6				; test the player/saucer/shot index
00:0000B202 6622            	   494: 	BNE.s		not_pss_player		; if it's not the player go find out what it was
                            	   495: 
                            	   496: ; the player hit something
                            	   497: 
00:0000B204 1B7C0081007A    	   498: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
00:0000B20A 532D0082        	   499: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
                            	   500: 
                            	   501: ; either the player hit the saucer or the player or saucer hit either a rock or a shot
                            	   502: 
                            	   503: not_player
00:0000B20E 1BBC00A06027    	   504: 	MOVE.b	#$A0,p_flag_off(a5,d6.w)
                            	   505: 							; set the item is exploding flag
00:0000B214 7000            	   506: 	MOVEQ		#0,d0				; clear the longword
00:0000B216 1B80604A        	   507: 	MOVE.b	d0,p_xvel_off(a5,d6.w)	; clear the player/saucer/shot x velocity
00:0000B21A 1B80606D        	   508: 	MOVE.b	d0,p_yvel_off(a5,d6.w)	; clear the player/saucer/shot y velocity
00:0000B21E 0C47001B        	   509: 	CMPI.w	#p_flag_off-flags_off,d7
                            	   510: 							; compare the object with the player index
00:0000B222 650E            	   511: 	BCS.s		what_hit_rock		; if less go handle something hitting a rock
                            	   512: 
00:0000B224 6038            	   513: 	BRA.s		what_hit_saucer		; else go handle something hitting the saucer
                            	   514: 
                            	   515: ; else a shot hit something
                            	   516: 
                            	   517: not_pss_player
00:0000B226 42356027        	   518: 	CLR.b		p_flag_off(a5,d6.w)	; clear the shot object
00:0000B22A 0C07001B        	   519: 	CMPI.b	#p_flag_off-flags_off,d7
                            	   520: 							; compare the item with the player's index
00:0000B22E 6722            	   521: 	BEQ.s		player_shot			; if it's the player go handle a shot hitting
                            	   522: 							; the player
                            	   523: 
00:0000B230 642C            	   524: 	BCC.s		what_hit_saucer		; if it's the saucer go handle a shot hitting
                            	   525: 							; the saucer
                            	   526: 
                            	   527: what_hit_rock
00:0000B232 61000C40        	   528: 	BSR		hit_a_rock			; handle something hitting a rock
                            	   529: 
                            	   530: ; explode the object
                            	   531: 
                            	   532: explode_object
00:0000B236 7203            	   533: 	MOVEQ		#$03,d1			; set the mask for the two size bits
00:0000B238 C235700C        	   534: 	AND.b		flags_off(a5,d7.w),d1	; and it with the item flag
00:0000B23C 5A01            	   535: 	ADDQ.b	#sexpl_snd,d1		; add the small explosion sound to the size
00:0000B23E 61002B8C        	   536: 	BSR		play_sample			; go play the sample
                            	   537: 
00:0000B242 1BBC00A0700C    	   538: 	MOVE.b	#$A0,flags_off(a5,d7.w)	; set the item to exploding
00:0000B248 4235702F        	   539: 	CLR.b		x_vel_off(a5,d7.w)	; clear the item x velocity byte
00:0000B24C 42357052        	   540: 	CLR.b		y_vel_off(a5,d7.w)	; clear the item y velocity byte
00:0000B250 4E75            	   541: 	RTS
                            	   542: 
                            	   543: ; handle a shot hitting the player
                            	   544: 
                            	   545: player_shot
00:0000B252 532D0082        	   546: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
00:0000B256 1B7C0081007A    	   547: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
00:0000B25C 60D8            	   548: 	BRA.s		explode_object		; go explode the player
                            	   549: 
                            	   550: ; handle something hitting the saucer
                            	   551: 
                            	   552: what_hit_saucer
00:0000B25E 1B6D00780077    	   553: 	MOVE.b	i_sauc_tim(a5),sauc_cntdn(a5)
                            	   554: 							; save the small saucer boundary/initial saucer
                            	   555: 							; value to the saucer countdown timer
00:0000B264 4A2B001A        	   556: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000B268 67CC            	   557: 	BEQ.s		explode_object		; if no players skip adding the score
                            	   558: 
00:0000B26A 7299            	   559: 	MOVEQ		#$99,d1			; default to 990 points for a small saucer
00:0000B26C 082D00000028    	   560: 	BTST.b	#0,s_flag_off(a5)		; test the saucer size bit
00:0000B272 6602            	   561: 	BNE.s		keep_small			; if it was a small saucer keep the score value
                            	   562: 
00:0000B274 7220            	   563: 	MOVEQ		#$20,d1			; else set 200 points for the large saucer
                            	   564: keep_small
00:0000B276 6100099C        	   565: 	BSR		add_score			; add d1 to the current player's score
00:0000B27A 60BA            	   566: 	BRA.s		explode_object		; go explode the saucer
                            	   567: 
                            	   568: 
                            	   569: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   570: ;
                            	   571: ; handle the saucer
                            	   572: 
                            	   573: do_saucer
00:0000B27C 70FC            	   574: 	MOVEQ		#-4,d0			; set the timeout counter mask
00:0000B27E C02B0025        	   575: 	AND.b		time_count(a3),d0		; mask the timeout counter
00:0000B282 670000B0        	   576: 	BEQ		exit_do_saucer		; 3/4 of the time just exit
                            	   577: 
00:0000B286 B12B0025        	   578: 	EOR.b		d0,time_count(a3)		; reset the timeout counter
                            	   579: 
00:0000B28A 4A2D0028        	   580: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000B28E 6B0000A4        	   581: 	BMI		exit_do_saucer		; if the saucer is exploding just exit
                            	   582: 
00:0000B292 660000A2        	   583: 	BNE		existing_saucer		; if a saucer exists go handle it
                            	   584: 
                            	   585: ; no saucer exists so possibly generate a new one
                            	   586: 
00:0000B296 4A2B001A        	   587: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000B29A 670C            	   588: 	BEQ.s		attract_saucer		; if no players go do the attract mode saucer
                            	   589: 
00:0000B29C 4A2D0027        	   590: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000B2A0 67000092        	   591: 	BEQ		exit_do_saucer		; if this player doesn't exist just exit
                            	   592: 
00:0000B2A4 6B00008E        	   593: 	BMI		exit_do_saucer		; if this player is exploding just exit
                            	   594: 
                            	   595: attract_saucer
00:0000B2A8 4A2D0079        	   596: 	TST.b		r_hit_tim(a5)		; test the rock hit timer
00:0000B2AC 6704            	   597: 	BEQ.s		rock_hit_out		; if counted out skip the decrement
                            	   598: 
00:0000B2AE 532D0079        	   599: 	SUBQ.b	#1,r_hit_tim(a5)		; else decrement the rock hit timer
                            	   600: rock_hit_out
00:0000B2B2 532D0077        	   601: 	SUBQ.b	#1,sauc_cntdn(a5)		; decrement the saucer countdown timer
00:0000B2B6 667C            	   602: 	BNE		exit_do_saucer		; if not there yet just exit
                            	   603: 
00:0000B2B8 1B7C00120077    	   604: 	MOVE.b	#$12,sauc_cntdn(a5)	; set the first saucer fire count
                            	   605: 
00:0000B2BE 4A2D0079        	   606: 	TST.b		r_hit_tim(a5)		; test the rock hit timer
00:0000B2C2 670C            	   607: 	BEQ.s		dec_isaucer_time		; if timed out go decrement the initial saucer
                            	   608: 							; timer
                            	   609: 
00:0000B2C4 102D0076        	   610: 	MOVE.b	rock_count(a5),d0		; get the rock count
00:0000B2C8 676A            	   611: 	BEQ.s		exit_do_saucer		; if no rocks just exit
                            	   612: 
00:0000B2CA B02D007D        	   613: 	CMP.b		min_rocks(a5),d0		; compare the rock count with the minimum rock
                            	   614: 							; count before the saucer initial timer starts
                            	   615: 							; to decrement
00:0000B2CE 6364            	   616: 	BLS.s		exit_do_saucer		; if the minimum rock count is >= the rock count
                            	   617: 							; just exit
                            	   618: 
                            	   619: dec_isaucer_time
00:0000B2D0 70FA            	   620: 	MOVEQ		#-6,d0			; set to subtract 6
00:0000B2D2 D02D0078        	   621: 	ADD.b		i_sauc_tim(a5),d0		; subtract it from the small saucer
                            	   622: 							; boundary/initial saucer timer
00:0000B2D6 0C000020        	   623: 	CMPI.b	#$20,d0			; compare it with the minimum value
00:0000B2DA 6504            	   624: 	BCS.s		no_save_ist			; if less skip the save
                            	   625: 
00:0000B2DC 1B400078        	   626: 	MOVE.b	d0,i_sauc_tim(a5)		; save the small saucer boundary/initial saucer
                            	   627: 							; timer
                            	   628: no_save_ist
00:0000B2E0 61000F5E        	   629: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B2E4 302B000A        	   630: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000B2E8 0C401800        	   631: 	CMPI.w	#$1800,d0			; compare with $1800
00:0000B2EC 6504            	   632: 	BCS.s		saucer_yok			; if less than $1800 just use it
                            	   633: 
00:0000B2EE 024017FF        	   634: 	ANDI.w	#$17FF,d0			; else mask to $17xx
                            	   635: saucer_yok
00:0000B2F2 3B40FFFE        	   636: 	MOVE.w	d0,s_ypos_off(a5)		; save the saucer y position
                            	   637: 
00:0000B2F6 7000            	   638: 	MOVEQ		#0,d0				; clear the saucer x position
00:0000B2F8 7210            	   639: 	MOVEQ		#$10,d1			; set the saucer x velocity to + $10
00:0000B2FA 4A6B000C        	   640: 	TST.w		PRNlword+2(a3)		; test a pseudo random word
00:0000B2FE 6B06            	   641: 	BMI.s		start_left			; if bit set start on the left
                            	   642: 
                            	   643: 							; else start at the right side and move left
00:0000B300 303C1FFF        	   644: 	MOVE.w	#$1FFF,d0			; set the saucer x position
00:0000B304 72F0            	   645: 	MOVEQ		#$F0,d1			; set the saucer x velocity to - $10
                            	   646: start_left
00:0000B306 1B41004B        	   647: 	MOVE.b	d1,s_xvel_off(a5)		; save the saucer x velocity byte
00:0000B30A 3B40FFB8        	   648: 	MOVE.w	d0,s_xpos_off(a5)		; save the saucer x position
                            	   649: 
00:0000B30E 7202            	   650: 	MOVEQ		#$02,d1			; default to a large saucer
00:0000B310 4A2D0078        	   651: 	TST.b		i_sauc_tim(a5)		; test the small saucer boundary/initial saucer
                            	   652: 							; timer
00:0000B314 6B1A            	   653: 	BMI.s		save_saucer			; if > $80 always make a big saucer
                            	   654: 
00:0000B316 0C2D00300080    	   655: 	CMPI.b	#$30,score_off(a5)	; compare the player's score with 30000 points
00:0000B31C 6410            	   656: 	BCC.s		small_saucer		; if >= 30000 points go make a small saucer
                            	   657: 
00:0000B31E 61000F20        	   658: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B322 142D0078        	   659: 	MOVE.b	i_sauc_tim(a5),d2		; get the small saucer boundary/initial saucer
                            	   660: 							; timer
00:0000B326 E20A            	   661: 	LSR.b		#1,d2				; / 2
00:0000B328 B42B000C        	   662: 	CMP.b		PRNlword+2(a3),d2		; compare it with the random byte
00:0000B32C 6402            	   663: 	BCC.s		save_saucer			; if the small saucer boundary is > the random
                            	   664: 							; byte go save the large saucer
                            	   665: 
                            	   666: small_saucer
00:0000B32E 7201            	   667: 	MOVEQ		#$01,d1			; else make it a small saucer
                            	   668: save_saucer
00:0000B330 1B410028        	   669: 	MOVE.b	d1,s_flag_off(a5)		; save the saucer flag
                            	   670: exit_do_saucer
00:0000B334 4E75            	   671: 	RTS
                            	   672: 
                            	   673: ; there is an existing saucer
                            	   674: 
                            	   675: existing_saucer
00:0000B336 707E            	   676: 	MOVEQ		#$7E,d0			; set saucer change mask
00:0000B338 C06B0059        	   677: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000B33C 6610            	   678: 	BNE.s		keep_saucer_dir		; if it was not x000 000x skip the saucer
                            	   679: 							; direction change
                            	   680: 
00:0000B33E 61000F00        	   681: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B342 7003            	   682: 	MOVEQ		#3,d0				; set the direction mask
00:0000B344 C02B000A        	   683: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000B348 1B7B0018006E    	   684: 	MOVE.b	saucer_yvel(pc,d0.w),s_yvel_off(a5)
                            	   685: 							; save the saucer y velocity byte
                            	   686: keep_saucer_dir
00:0000B34E 4A2B001A        	   687: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000B352 6706            	   688: 	BEQ.s		attract_fire		; if no players just go do the fire countdown
                            	   689: 
00:0000B354 4A2D007A        	   690: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000B358 6606            	   691: 	BNE.s		exit_existing_saucer	; if the player is hidden just exit
                            	   692: 
                            	   693: attract_fire
00:0000B35A 532D0077        	   694: 	SUBQ.b	#1,sauc_cntdn(a5)		; decrement the saucer countdown timer
00:0000B35E 6706            	   695: 	BEQ.s		fire_saucer			; if counted out go fire
                            	   696: 
                            	   697: exit_existing_saucer
00:0000B360 4E75            	   698: 	RTS
                            	   699: 
                            	   700: ; saucer y velocity byte
                            	   701: 
                            	   702: saucer_yvel
00:0000B362 F0              	   703: 	dc.b	$F0			; down
00:0000B363 00              	   704: 	dc.b	$00			; horizontal
00:0000B364 00              	   705: 	dc.b	$00			; horizontal
00:0000B365 10              	   706: 	dc.b	$10			; up
                            	   707: 
                            	   708: 
                            	   709: ; handle the saucer fire
                            	   710: 
                            	   711: fire_saucer
00:0000B366 1B7C000A0077    	   712: 	MOVE.b	#$0A,sauc_cntdn(a5)	; set the time between saucer shots, save the
                            	   713: 							; countdown timer
00:0000B36C 7001            	   714: 	MOVEQ		#1,d0				; set the mask for a small saucer
00:0000B36E C02D0028        	   715: 	AND.b		s_flag_off(a5),d0		; mask the saucer flag
00:0000B372 660A            	   716: 	BNE.s		aim_shot			; if it's a small saucer go aim at the player
                            	   717: 
00:0000B374 61000ECA        	   718: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B378 102B000A        	   719: 	MOVE.b	PRNlword(a3),d0		; get a pseudo random byte
00:0000B37C 6056            	   720: 	BRA.s		no_aim_shot			; and go fire wildly in any direction
                            	   721: 
                            	   722: ; aim the shot at the player
                            	   723: 
                            	   724: aim_shot
00:0000B37E 1F2D004B        	   725: 	MOVE.b	s_xvel_off(a5),-(sp)	; copy the saucer x velocity byte
00:0000B382 301F            	   726: 	MOVE.w	(sp)+,d0			; get the byte as a word
00:0000B384 4200            	   727: 	CLR.b		d0				; clear the low byte
00:0000B386 E240            	   728: 	ASR.w		#1,d0				; / 2
                            	   729: 
00:0000B388 322DFFB6        	   730: 	MOVE.w	p_xpos_off(a5),d1		; get the player x position
00:0000B38C 926DFFB8        	   731: 	SUB.w		s_xpos_off(a5),d1		; subtract the saucer x position
00:0000B390 E541            	   732: 	ASL.w		#2,d1				; ; 4 delta x
                            	   733: 
00:0000B392 9240            	   734: 	SUB.w		d0,d1				; subtract the half saucer x velocity word
                            	   735: 
00:0000B394 1F2D006E        	   736: 	MOVE.b	s_yvel_off(a5),-(sp)	; copy the saucer y velocity byte
00:0000B398 301F            	   737: 	MOVE.w	(sp)+,d0			; get the byte as a word
00:0000B39A 4200            	   738: 	CLR.b		d0				; clear the low byte
00:0000B39C E240            	   739: 	ASR.w		#1,d0				; / 2
                            	   740: 
00:0000B39E 342DFFFC        	   741: 	MOVE.w	p_ypos_off(a5),d2		; get the player y position
00:0000B3A2 946DFFFE        	   742: 	SUB.w		s_ypos_off(a5),d2		; subtract the saucer y position
00:0000B3A6 E542            	   743: 	ASL.w		#2,d2				; ; 4 delta x low byte
                            	   744: 
00:0000B3A8 9440            	   745: 	SUB.w		d0,d2				; subtract the half saucer y velocity word
                            	   746: 
00:0000B3AA 61000BE4        	   747: 	BSR		get_atn			; calculate the angle given the delta x,y in
                            	   748: 							; d1.w,d2.w
00:0000B3AE 1740001F        	   749: 	MOVE.b	d0,s_orient(a3)		; save the saucer shot direction
                            	   750: 
00:0000B3B2 61000E8C        	   751: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B3B6 7200            	   752: 	MOVEQ		#0,d1				; set index to +/- $0F degree units perturbation
00:0000B3B8 102B000A        	   753: 	MOVE.b	PRNlword(a3),d0		; get a pseudo random byte
00:0000B3BC 0C2D00350080    	   754: 	CMPI.b	#$35,score_off(a5)	; compare the player's score with 35000
00:0000B3C2 6502            	   755: 	BCS.s		wide_shot			; if less than 35000 skip the index change
                            	   756: 
00:0000B3C4 7201            	   757: 	MOVEQ		#1,d1				; set index to +/- $07 degree units perturbation
                            	   758: wide_shot
00:0000B3C6 C03B101E        	   759: 	AND.b		shot_mask(pc,d1.w),d0	; mask with the shot AND mask
00:0000B3CA 6A04            	   760: 	BPL.s		no_shot_or			; if the result is positive skip the bit set
                            	   761: 
00:0000B3CC 803B101A        	   762: 	OR.b		shot_or(pc,d1.w),d0	; else set the correct bits for a negative
                            	   763: 							; perturbation
                            	   764: no_shot_or
00:0000B3D0 D02B001F        	   765: 	ADD.b		s_orient(a3),d0		; add the saucer shot direction to the
                            	   766: 							; perturbation
                            	   767: no_aim_shot
00:0000B3D4 1740001F        	   768: 	MOVE.b	d0,s_orient(a3)		; save the saucer shot direction
                            	   769: 
00:0000B3D8 7801            	   770: 	MOVEQ		#1,d4				; set the index to the saucer velocity
00:0000B3DA 7A02            	   771: 	MOVEQ		#2,d5				; set the index to the saucer position
00:0000B3DC 7CFF            	   772: 	MOVEQ		#-1,d6			; set the minimum shot index - 1
00:0000B3DE 7E01            	   773: 	MOVEQ		#1,d7				; set the shot start index
                            	   774: 
00:0000B3E0 122B0021        	   775: 	MOVE.b	last_fire(a3),d1		; get the fire last state
00:0000B3E4 6022            	   776: 	BRA.s		test_fire_loop		; go fire the shot
                            	   777: 
                            	   778: 
                            	   779: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   780: ;
                            	   781: ; these two byte pairs together effect the accuracy of the small saucer's shooting
                            	   782: ; by limiting the range of the random perturbation to the saucer's aim
                            	   783: 
                            	   784: ; shot AND mask, masks the perturbation to either +/- $0F or +/- $07 degree units
                            	   785: 
                            	   786: shot_mask
00:0000B3E6 8F              	   787: 	dc.b	$8F			; AND mask to +/- $0F degree units
00:0000B3E7 87              	   788: 	dc.b	$87			; AND mask to +/- $07 degree units
                            	   789: 
                            	   790: ; shot OR byte, sets the needed bits for a negative perturbation result
                            	   791: 
                            	   792: shot_or
00:0000B3E8 70              	   793: 	dc.b	$70			; OR to set bits after - $0F mask result
00:0000B3E9 78              	   794: 	dc.b	$78			; OR to set bits after - $07 mask result
                            	   795: 
                            	   796: 
                            	   797: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   798: ;
                            	   799: ; handle the fire button
                            	   800: 
                            	   801: ship_fire:
                            	   802: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	   803: ;##	BEQ.s		exit_ship_fire		; if no players just exit
                            	   804: 
                            	   805: ;##	TST.b		hide_p_cnt(a5)		; test the hide the player count
                            	   806: ;##	BNE.s		exit_ship_fire		; if the player is hidden just exit
                            	   807: 
                            	   808: ;	MOVEQ		#'P',d1			; [P] key
                            	   809: ;	MOVEQ		#19,d0			; check for keypress
                            	   810: ;	TRAP		#15
                            	   811: 
00:0000B3EA 7005            	   812: 	moveq #5,d0					; getkey
00:0000B3EC 4E4F            	   813: 	trap #15
00:0000B3EE 0C010050        	   814: 	cmpi.b #'P',d1
00:0000B3F2 6620            	   815: 	bne.s save_ship_fire
                            	   816: 
                            	   817: ;	TST.b		d1				; test the result
                            	   818: ;	BEQ.s		save_ship_fire		; if fire not pressed go clear the fire state
                            	   819: 							; and exit
                            	   820: 
00:0000B3F4 4A2B0021        	   821: 	tst.b last_fire(a3)		; test the fire last state
00:0000B3F8 661E            	   822: 	bne.s exit_ship_fire	; if the fire button is held just exit
                            	   823: 
00:0000B3FA 7800            	   824: 	moveq #0,d4					; set the index to the player velocity
00:0000B3FC 7A00            	   825: 	moveq #0,d5					; set the index to the player position
00:0000B3FE 7C01            	   826: 	moveq #1,d6					; set the minimum shot index - 1
00:0000B400 7E05            	   827: 	moveq #5,d7					; set the shot start index
                            	   828: 
00:0000B402 176B001E001F    	   829: 	move.b p_orient(a3),s_orient(a3)
                            	   830: 							; copy the player orientation
                            	   831: 
                            	   832: ; fire the shot, player or saucer
                            	   833: 
                            	   834: test_fire_loop
00:0000B408 4A357029        	   835: 	tst.b s_fire_off(a5,d7.w)	; test this fire object
00:0000B40C 670C            	   836: 	beq.s fire_shot			; if this shot is free go use it
                            	   837: 
00:0000B40E 5347            	   838: 	subq.w #1,d7				; decrement the shot index
00:0000B410 BC47            	   839: 	cmp.w d7,d6					; compare with minimum - 1 index
00:0000B412 66F4            	   840: 	bne.s test_fire_loop		; loop if more to do
                            	   841: 
                            	   842: save_ship_fire
00:0000B414 17410021        	   843: 	move.b d1,last_fire(a3)		; save the fire last state
                            	   844: exit_ship_fire
00:0000B418 4E75            	   845: 	rts
                            	   846: 
                            	   847: ; player/saucer fired and a shot, indexed by d7, is free
                            	   848: 
                            	   849: fire_shot:
00:0000B41A 3C07            	   850: 	move.w d7,d6				; copy the item index
00:0000B41C DC46            	   851: 	add.w d6,d6					; 2 for position index
                            	   852: 
00:0000B41E 1BBC00127029    	   853: 	MOVE.b	#$12,s_fire_off(a5,d7.w)
                            	   854: 							; set the fire item flag
                            	   855: 
00:0000B424 102B001F        	   856: 	MOVE.b	s_orient(a3),d0		; get the player/saucer orientation
00:0000B428 61000C0E        	   857: 	BSR		cos_d0			; do COS(d0)
                            	   858: 
00:0000B42C 1635404A        	   859: 	MOVE.b	p_xvel_off(a5,d4.w),d3	; get the player/saucer x velocity byte
00:0000B430 613A            	   860: 	BSR.s		calc_fire_byte		; test the fire velocity and make 3/4 sin/cos
00:0000B432 1B83704C        	   861: 	MOVE.b	d3,f_xvel_off(a5,d7.w)	; save the shot x velocity byte
                            	   862: 
00:0000B436 D07550B6        	   863: 	ADD.w		p_xpos_off(a5,d5.w),d0	; add the player/saucer x position
00:0000B43A 3B8060BA        	   864: 	MOVE.w	d0,f_xpos_off(a5,d6.w)	; save the shot x position
                            	   865: 
00:0000B43E 102B001F        	   866: 	MOVE.b	s_orient(a3),d0		; get the player/saucer orientation
00:0000B442 61000BF8        	   867: 	BSR		sin_d0			; do SIN(d0)
                            	   868: 
00:0000B446 1635406D        	   869: 	MOVE.b	p_yvel_off(a5,d4.w),d3	; get the player/saucer y velocity byte
00:0000B44A 6120            	   870: 	BSR		calc_fire_byte		; test the fire velocity and make 3/4 sin/cos
00:0000B44C 1B83706F        	   871: 	MOVE.b	d3,f_yvel_off(a5,d7.w)	; save the shot y velocity byte
                            	   872: 
00:0000B450 D07550FC        	   873: 	ADD.w		p_ypos_off(a5,d5.w),d0	; add the player/saucer y position
00:0000B454 3B806000        	   874: 	MOVE.w	d0,f_ypos_off(a5,d6.w)	; save the shot y position
                            	   875: 
00:0000B458 17410021        	   876: 	MOVE.b	d1,last_fire(a3)		; save the fire last state
                            	   877: 
00:0000B45C 7201            	   878: 	MOVEQ		#pfire_snd,d1		; default to the player fire sound
00:0000B45E 0C470002        	   879: 	CMPI.w	#2,d7				; compare the index with the lowest player fire
00:0000B462 64002968        	   880: 	BCC		play_sample			; if it was the player go play the sample and
                            	   881: 							; return
                            	   882: 
                            	   883: 							; else it must be the saucer that fired so
00:0000B466 7200            	   884: 	MOVEQ		#sfire_snd,d1		; set the saucer fire sound
00:0000B468 60002962        	   885: 	BRA		play_sample			; play the sample and return
                            	   886: 
                            	   887: 
                            	   888: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   889: ;
                            	   890: ; test the fire velocity and make 3/4 sin/cos
                            	   891: 
                            	   892: calc_fire_byte
00:0000B46C E240            	   893: 	ASR.w		#1,d0				; / 2
                            	   894: 
00:0000B46E 3F00            	   895: 	MOVE.w	d0,-(sp)			; push the word value
00:0000B470 101F            	   896: 	MOVE.b	(sp)+,d0			; pop it as a byte value
                            	   897: 
00:0000B472 D600            	   898: 	ADD.b		d0,d3				; add it to the COS / 2 value
00:0000B474 6B0A            	   899: 	BMI.s		test_neg_fire		; if negative go test the negative limit
                            	   900: 
00:0000B476 0C030070        	   901: 	CMPI.b	#$70,d3			; else compare it with the positive limit
00:0000B47A 650C            	   902: 	BCS.s		fire_ok			; if < the positive limit skip the adjust
                            	   903: 
00:0000B47C 766F            	   904: 	MOVEQ		#$6F,d3			; else set the value to the positive limit
00:0000B47E 6008            	   905: 	BRA.s		fire_ok			; go save the shot x velocity
                            	   906: 
                            	   907: test_neg_fire
00:0000B480 0C030091        	   908: 	CMPI.b	#$91,d3			; compare it with the negative limit
00:0000B484 6402            	   909: 	BCC.s		fire_ok			; if < the negative limit skip the adjust
                            	   910: 
00:0000B486 7691            	   911: 	MOVEQ		#$91,d3			; else set the value to the negative limit
                            	   912: fire_ok
00:0000B488 4880            	   913: 	EXT.w		d0				; make the byte value into a word
                            	   914: 
00:0000B48A 3400            	   915: 	MOVE.w	d0,d2				; get the COS / 2 back
00:0000B48C E242            	   916: 	ASR.w		#1,d2				; / 4
00:0000B48E D142            	   917: 	ADDX.w	d2,d0				; make 3 / 4 COS and round up
                            	   918: 
00:0000B490 4E75            	   919: 	RTS
                            	   920: 
                            	   921: 
                            	   922: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   923: ;
                            	   924: ; get the player high score entries
                            	   925: 
                            	   926: enter_hiscores
00:0000B492 102D0083        	   927: 	MOVE.b	high_off(a5),d0		; get the player 1 highscore flag
00:0000B496 C02E0083        	   928: 	AND.b		high_off(a6),d0		; and with the player 2 highscore flag
00:0000B49A 6B00014A        	   929: 	BMI		exit_enter_hiscores	; if neither player is entering their high
                            	   930: 							; score just exit
                            	   931: 
00:0000B49E 102D0083        	   932: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000B4A2 6B000088        	   933: 	BMI		next_p_high			; if this player isn't entering their high
                            	   934: 							; score go try the other player
                            	   935: 
                            	   936: 							; get a player high score entry
00:0000B4A6 0C2B00010019    	   937: 	CMPI.b	#1,past_play(a3)		; compare 1 with the number of players that
                            	   938: 							; were in the game
00:0000B4AC 6712            	   939: 	BEQ.s		no_playerx			; if it was only 1 player skip the "PLAYER x"
                            	   940: 							; message
                            	   941: 
00:0000B4AE 7201            	   942: 	MOVEQ		#1,d1				; message 1 - "PLAYER "
00:0000B4B0 61000C26        	   943: 	BSR		add_message			; add message d1 to the display list
                            	   944: 
00:0000B4B4 7010            	   945: 	MOVEQ		#$10,d0			; set game counter mask
00:0000B4B6 C06B0059        	   946: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000B4BA 6604            	   947: 	BNE.s		no_playerx			; if bit set skip the player number write
                            	   948: 
00:0000B4BC 61000C8C        	   949: 	BSR		player_n			; add the player number to the vector list
                            	   950: no_playerx
00:0000B4C0 7202            	   951: 	MOVEQ		#2,d1				; message 2 - "YOUR SCORE IS ONE OF THE TE..."
00:0000B4C2 61000C14        	   952: 	BSR		add_message			; add message d1 to the display list
00:0000B4C6 7203            	   953: 	MOVEQ		#3,d1				; message 3 - "PLEASE ENTER YOUR INITIALS"
00:0000B4C8 61000C0E        	   954: 	BSR		add_message			; add message d1 to the display list
00:0000B4CC 7204            	   955: 	MOVEQ		#4,d1				; message 4 - "PUSH ROTATE TO SELECT LETTER"
00:0000B4CE 61000C08        	   956: 	BSR		add_message			; add message d1 to the display list
00:0000B4D2 7205            	   957: 	MOVEQ		#5,d1				; message 5 - "PUSH HYPERSPACE WHEN LETTER..."
00:0000B4D4 61000C02        	   958: 	BSR		add_message			; add message d1 to the display list
                            	   959: 
00:0000B4D8 36BC2000        	   960: 	MOVE.w	#$2000,glob_scale(a3)	; set the global scale
                            	   961: 
00:0000B4DC 7264            	   962: 	MOVEQ		#$64,d1			; set the x co-ordinate
00:0000B4DE 7439            	   963: 	MOVEQ		#$39,d2			; set the y co-ordinate
00:0000B4E0 61000CAC        	   964: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	   965: 							; a draw command
                            	   966: 
00:0000B4E4 323C7000        	   967: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000B4E8 61000CBE        	   968: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	   969: 
00:0000B4EC 7000            	   970: 	MOVEQ		#0,d0				; clear the longword
00:0000B4EE 102D0083        	   971: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000B4F2 41F3003B        	   972: 	LEA		hinames(a3,d0.w),a0	; point to the high score names
                            	   973: 
00:0000B4F6 610001AA        	   974: 	BSR		write_initial		; write a high score initial to the vector list
00:0000B4FA 610001A6        	   975: 	BSR		write_initial		; write a high score initial to the vector list
00:0000B4FE 610001A2        	   976: 	BSR		write_initial		; write a high score initial to the vector list
                            	   977: 
                            	   978: ;	MOVEQ		#' ',d1			; [SPACE] key
                            	   979: ;	MOVEQ		#19,d0			; check for keypress
                            	   980: ;	TRAP		#15
00:0000B502 7005            	   981: 	moveq #5,d0
00:0000B504 4E4F            	   982: 	trap #15
00:0000B506 4A81            	   983: 	tst.l d1
00:0000B508 6B6E            	   984: 	bmi.s save_hbutton
00:0000B50A 0C010020        	   985: 	cmpi.b #' ',d1
00:0000B50E 6668            	   986: 	bne.s save_hbutton
                            	   987: 
                            	   988: ;	TST.b		d1				; test the result
                            	   989: ;	BEQ.s		save_hbutton		; if hyperspace not pressed go save the state
                            	   990: 
00:0000B510 4A2B0022        	   991: 	TST.b		last_hype(a3)		; test the hyperspace last state
00:0000B514 6662            	   992: 	BNE.s		save_hbutton		; if hyperspace is held go save the state
                            	   993: 
                            	   994: ; the hyperspace button has just been pressed
                            	   995: 
00:0000B516 522B0020        	   996: 	ADDQ.b	#1,hi_char(a3)		; increment the input character index
00:0000B51A 0C2B00030020    	   997: 	CMPI.b	#3,hi_char(a3)		; compare with end + 1
00:0000B520 653E            	   998: 	BCS.s		next_hi_char		; if not there yet go and increment to the next
                            	   999: 							; character
                            	  1000: 
                            	  1001: 							; else that was the last character
00:0000B522 17410022        	  1002: 	MOVE.b	d1,last_hype(a3)		; save the hyperspace last state
00:0000B526 1B7C00FF0083    	  1003: 	MOVE.b	#$FF,high_off(a5)		; clear the player highscore flag
                            	  1004: next_p_high
00:0000B52C 7000            	  1005: 	MOVEQ		#0,d0				; clear the longword
00:0000B52E 17400020        	  1006: 	MOVE.b	d0,hi_char(a3)		; clear the input character index
                            	  1007: 
00:0000B532 43FA29AA        	  1008: 	LEA		filename(pc),a1		; point to the highscore filename
00:0000B536 7034            	  1009: 	MOVEQ		#52,d0			; open new file
00:0000B538 4E4F            	  1010: 	TRAP		#15
                            	  1011: 
00:0000B53A 4A40            	  1012: 	TST.w		d0				; check for errors
00:0000B53C 660A            	  1013: 	BNE.s		close_all			; if error go close all files
                            	  1014: 
00:0000B53E 43EB0027        	  1015: 	LEA		hiscores(a3),a1		; point to the highscore tables
00:0000B542 7432            	  1016: 	MOVEQ		#50,d2			; set the table length
00:0000B544 7036            	  1017: 	MOVEQ		#54,d0			; write file
00:0000B546 4E4F            	  1018: 	TRAP		#15
                            	  1019: 
                            	  1020: close_all
00:0000B548 7032            	  1021: 	MOVEQ		#50,d0			; close all files
00:0000B54A 4E4F            	  1022: 	TRAP		#15
                            	  1023: 
00:0000B54C 17400018        	  1024: 	MOVE.b	d0,player_idx(a3)		; clear the player index
00:0000B550 4BEB00F3        	  1025: 	LEA		player_1(a3),a5		; get the pointer to player one's variables
00:0000B554 4DEB01F7        	  1026: 	LEA		player_2(a3),a6		; get the pointer to player two's variables
                            	  1027: 
00:0000B558 177C00F00059    	  1028: 	MOVE.b	#$F0,game_count(a3)	; set the game counter high byte, high score
                            	  1029: 							; entry timeout
00:0000B55E 4E75            	  1030: 	RTS
                            	  1031: 
                            	  1032: ; hyperspace button press accepted and not at initials end
                            	  1033: 
                            	  1034: next_hi_char
00:0000B560 177C00F40059    	  1035: 	MOVE.b	#$F4,game_count(a3)	; set the game counter high byte, high score
                            	  1036: 							; entry timeout
                            	  1037: 
00:0000B566 7000            	  1038: 	MOVEQ		#0,d0				; clear the longword
00:0000B568 102D0083        	  1039: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000B56C D02B0020        	  1040: 	ADD.b		hi_char(a3),d0		; add the input character index
00:0000B570 41F3003B        	  1041: 	LEA		hinames(a3,d0.w),a0	; point to the high score names
00:0000B574 10BC000B        	  1042: 	MOVE.b	#$0B,(a0)			; set the next character to "A"
                            	  1043: save_hbutton
00:0000B578 17410022        	  1044: 	MOVE.b	d1,last_hype(a3)		; save the hyperspace button last state
                            	  1045: 
00:0000B57C 4A2B0059        	  1046: 	TST.b		game_count(a3)		; test the game counter high byte
00:0000B580 660C            	  1047: 	BNE.s		not_timed_out		; if not timed out just continue
                            	  1048: 
00:0000B582 70FF            	  1049: 	MOVEQ		#-1,d0			; flag high score done
00:0000B584 1B400083        	  1050: 	MOVE.b	d0,high_off(a5)		; clear the player 1 highscore flag
00:0000B588 1D400083        	  1051: 	MOVE.b	d0,high_off(a6)		; clear the player 2 highscore flag
00:0000B58C 609E            	  1052: 	BRA.s		next_p_high			; go save the entry end exit, branch always
                            	  1053: 
                            	  1054: not_timed_out
00:0000B58E 70F8            	  1055: 	MOVEQ		#-8,d0			; set the timeout counter mask
00:0000B590 C02B0025        	  1056: 	AND.b		time_count(a3),d0		; mask the timeout counter
00:0000B594 674E            	  1057: 	BEQ.s		exit_not_done		; just exit 7/8ths of the time
                            	  1058: 
00:0000B596 B12B0025        	  1059: 	EOR.b		d0,time_count(a3)		; reset the timeout counter
                            	  1060: 
00:0000B59A 7400            	  1061: 	MOVEQ		#0,d2				; assume no rotate
                            	  1062: ;	MOVE.w	#'WQ',d1			; [WQ] keys
                            	  1063: ;	MOVEQ		#19,d0			; check for keypress
                            	  1064: ;	TRAP		#15
00:0000B59C 7005            	  1065: 	moveq #5,d0
00:0000B59E 4E4F            	  1066: 	trap #15
00:0000B5A0 0C010051        	  1067: 	cmpi.b #'Q',d1
00:0000B5A4 6604            	  1068: 	bne.s not_rot_left
00:0000B5A6 7401            	  1069: 	moveq #1,d2
00:0000B5A8 6008            	  1070: 	bra.s was_rot_left
                            	  1071: not_rot_left:
00:0000B5AA 0C010057        	  1072: 	cmpi.b #'W',d1
00:0000B5AE 6602            	  1073: 	bne.s not_rot_right2
00:0000B5B0 5302            	  1074: 	subq.b #1,d2	
                            	  1075: 
                            	  1076: ;	TST.b		d1				; test the result
                            	  1077: ;	BPL.s		rot_not_left		; if not pressed go test rotate right
                            	  1078: ;
                            	  1079: ;	MOVEQ		#1,d2				; if pressed set the offset to + 1
                            	  1080: rot_not_left
                            	  1081: ;	TST.w		d1				; test the result
                            	  1082: ;	BPL.s		rot_not_right		; if not pressed go add the rotation
                            	  1083: 
                            	  1084: ;	SUBQ.b	#1,d2				; if pressed set the offset to - 1
                            	  1085: not_rot_right2
                            	  1086: was_rot_left:
00:0000B5B2 7000            	  1087: 	MOVEQ		#0,d0				; clear the longword
00:0000B5B4 102D0083        	  1088: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000B5B8 D02B0020        	  1089: 	ADD.b		hi_char(a3),d0		; add the input character index
00:0000B5BC D433003B        	  1090: 	ADD.b		hinames(a3,d0.w),d2	; add the character to the offset
00:0000B5C0 6B14            	  1091: 	BMI.s		wrap_to_z			; if negative go set "Z"
                            	  1092: 
00:0000B5C2 0C02000B        	  1093: 	CMPI.b	#$0B,d2			; compare with "A"
00:0000B5C6 6410            	  1094: 	BCC.s		check_alpha			; if >= "A" go test for <= "Z"
                            	  1095: 
00:0000B5C8 0C020001        	  1096: 	CMPI.b	#$01,d2			; compare with "0"
00:0000B5CC 6704            	  1097: 	BEQ.s		wrap_to_a			; if "0" go set to "A"
                            	  1098: 
                            	  1099: 							; gets here if it was "2" to "9"
00:0000B5CE 7400            	  1100: 	MOVEQ		#0,d2				; else set to " "
00:0000B5D0 600E            	  1101: 	BRA.s		save_char			; go save the new character
                            	  1102: 
                            	  1103: wrap_to_a
00:0000B5D2 740B            	  1104: 	MOVEQ		#$0B,d2			; set to "A"
00:0000B5D4 600A            	  1105: 	BRA.s		save_char			; go save the new character
                            	  1106: 
                            	  1107: wrap_to_z
00:0000B5D6 7424            	  1108: 	MOVEQ		#$24,d2			; set to "Z"
                            	  1109: check_alpha
00:0000B5D8 0C020025        	  1110: 	CMPI.b	#$25,d2			; compare with "Z" + 1
00:0000B5DC 6502            	  1111: 	BCS.s		save_char			; if less skip the reset
                            	  1112: 
00:0000B5DE 7400            	  1113: 	MOVEQ		#0,d2				; else reset it to " "
                            	  1114: save_char
00:0000B5E0 1782003B        	  1115: 	MOVE.b	d2,hinames(a3,d0.w)	; save the new character
                            	  1116: exit_not_done
00:0000B5E4 7000            	  1117: 	MOVEQ		#0,d0				; flag high score not complete
                            	  1118: exit_enter_hiscores
00:0000B5E6 4E75            	  1119: 	RTS
                            	  1120: 
                            	  1121: 
                            	  1122: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1123: ;
                            	  1124: ; handle the hyperspace button
                            	  1125: 
                            	  1126: hyperspace
                            	  1127: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	  1128: ;##	BEQ		exit_hyperspace		; if no players just exit
                            	  1129: 
                            	  1130: ;##	TST.b		hide_p_cnt(a5)		; test the hide the player count
                            	  1131: ;##	BNE		exit_hyperspace		; if the player is hidden just exit
                            	  1132: 
00:0000B5E8 4A2D0027        	  1133: 	tst.b p_flag_off(a5)		; test the player flag
00:0000B5EC 6F000088        	  1134: 	ble exit_hyperspace			; if no player or player exploding just exit
                            	  1135: 
                            	  1136: ;	MOVEQ		#' ',d1			; [SPACE] key, read the hyperspace button
                            	  1137: ;	MOVEQ		#19,d0			; check for keypress
                            	  1138: ;	TRAP		#15
00:0000B5F0 7005            	  1139: 	moveq #5,d0
00:0000B5F2 4E4F            	  1140: 	trap #15
00:0000B5F4 0C010020        	  1141: 	cmpi.b #' ',d1
00:0000B5F8 667C            	  1142: 	bne.s exit_hyperspace
                            	  1143: 
                            	  1144: ;	TST.b		d1				; test the result
                            	  1145: ;	BEQ.s		exit_hyperspace		; if the key is not pressed just exit
                            	  1146: 
00:0000B5FA 7000            	  1147: 	MOVEQ		#0,d0				; clear the longword
00:0000B5FC 1B400027        	  1148: 	MOVE.b	d0,p_flag_off(a5)		; clear the player flag
00:0000B600 1B40004A        	  1149: 	MOVE.b	d0,p_xvel_off(a5)		; clear the player x velocity
00:0000B604 1B40006D        	  1150: 	MOVE.b	d0,p_yvel_off(a5)		; clear the player y velocity
                            	  1151: 
00:0000B608 1B7C0030007A    	  1152: 	MOVE.b	#$30,hide_p_cnt(a5)	; set the hide the player count
                            	  1153: 
00:0000B60E 61000C30        	  1154: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B612 302B000A        	  1155: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000B616 02401FFF        	  1156: 	ANDI.w	#$1FFF,d0			; mask to $1Fxx
00:0000B61A 0C401E00        	  1157: 	CMPI.w	#$1E00,d0			; compare with $1E00
00:0000B61E 6504            	  1158: 	BCS.s		hype_xok1			; if less than $1E00 just use it
                            	  1159: 
00:0000B620 02401CFF        	  1160: 	ANDI.w	#$1CFF,d0			; else restrict it to $1Cxx
                            	  1161: hype_xok1
00:0000B624 0C400400        	  1162: 	CMPI.w	#$0400,d0			; compare it with $0400
00:0000B628 6404            	  1163: 	BCC.s		hype_xok2			; if >= $0400 go use it
                            	  1164: 
00:0000B62A 00400300        	  1165: 	ORI.w		#$0300,d0			; else make it $03xx
                            	  1166: hype_xok2
00:0000B62E 3B40FFB6        	  1167: 	MOVE.w	d0,p_xpos_off(a5)		; save the player x position
                            	  1168: 
00:0000B632 61000C0C        	  1169: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B636 302B000A        	  1170: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000B63A 02401FFF        	  1171: 	ANDI.w	#$1FFF,d0			; mask to $1Fxx
                            	  1172: 
00:0000B63E 3F00            	  1173: 	MOVE.w	d0,-(sp)			; push the word
00:0000B640 141F            	  1174: 	MOVE.b	(sp)+,d2			; pull the byte for later success/fail check
                            	  1175: 
00:0000B642 0C401600        	  1176: 	CMPI.w	#$1600,d0			; compare with $1600
00:0000B646 6504            	  1177: 	BCS.s		hype_yok1			; if less than $1600 just use it
                            	  1178: 
00:0000B648 024014FF        	  1179: 	ANDI.w	#$14FF,d0			; else restrict it to $14xx
                            	  1180: hype_yok1
00:0000B64C 0C400400        	  1181: 	CMPI.w	#$0400,d0			; compare it with $0400
00:0000B650 6404            	  1182: 	BCC.s		hype_yok2			; if >= $0400 go use it
                            	  1183: 
00:0000B652 00400300        	  1184: 	ORI.w		#$0300,d0			; else make it $03xx
                            	  1185: hype_yok2
00:0000B656 3B40FFFC        	  1186: 	MOVE.w	d0,p_ypos_off(a5)		; save the player y position
                            	  1187: 
00:0000B65A 7201            	  1188: 	MOVEQ		#1,d1				; default to a successful hyperspace jump
                            	  1189: 
00:0000B65C 0C020018        	  1190: 	CMPI.b	#$18,d2			; compare with $18xx
00:0000B660 6510            	  1191: 	BCS.s		save_hyperspace		; if less than $18xx go save the hyperspace flag
                            	  1192: 
00:0000B662 02020007        	  1193: 	ANDI.b	#$07,d2			; else mask it
00:0000B666 D402            	  1194: 	ADD.b		d2,d2				; ; 2
00:0000B668 5802            	  1195: 	ADDI.b	#$04,d2			; + 4
00:0000B66A B42D0076        	  1196: 	CMP.b		rock_count(a5),d2		; compare this with the rock count
00:0000B66E 6502            	  1197: 	BCS.s		save_hyperspace		; if < the rock count allow the jump
                            	  1198: 
00:0000B670 7280            	  1199: 	MOVEQ		#$80,d1			; else flag an unsuccessful hyperspace jump
                            	  1200: save_hyperspace
00:0000B672 17410026        	  1201: 	MOVE.b	d1,hyper(a3)		; save the hyperspace flag
                            	  1202: exit_hyperspace
00:0000B676 4E75            	  1203: 	RTS
                            	  1204: 
                            	  1205: 
                            	  1206: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1207: ;
                            	  1208: ; clear the items and set the ship start count
                            	  1209: 
                            	  1210: reset_game:
00:0000B678 7003            	  1211: 	MOVEQ		#3,d0				; default to a 3 ship game
00:0000B67A 206B000E        	  1212: 	MOVEA.l	switch_addr(a3),a0	; point to the switch
00:0000B67E 08100002        	  1213: 	BTST		#2,(a0)			; test the ship start switch
00:0000B682 6702            	  1214: 	BEQ.s		three_ship_start		; if 0 go start with three ships
                            	  1215: 
00:0000B684 7004            	  1216: 	MOVEQ		#4,d0				; else make it a 4 ship game
                            	  1217: three_ship_start
00:0000B686 1740001B        	  1218: 	MOVE.b	d0,ss_count(a3)		; save the starting ship count
                            	  1219: 
00:0000B68A 1B7C00020075    	  1220: 	MOVE.b	#2,i_rk_count(a5)		; set the previous initial rock count
                            	  1221: 
00:0000B690 7000            	  1222: 	MOVEQ		#0,d0				; clear the longword
00:0000B692 7E22            	  1223: 	MOVEQ		#flag_end-flags_off-1,d7
                            	  1224: 							; set the count for the number of items
                            	  1225: clear_items_loop
00:0000B694 1B80700C        	  1226: 	MOVE.b	d0,flags_off(a5,d7.w)	; clear an item
00:0000B698 51CFFFFA        	  1227: 	DBF		d7,clear_items_loop	; loop if more to do
                            	  1228: 
00:0000B69C 1B400076        	  1229: 	MOVE.b	d0,rock_count(a5)		; clear the rock count
                            	  1230: 
00:0000B6A0 4E75            	  1231: 	RTS
                            	  1232: 
                            	  1233: 
                            	  1234: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1235: ;
                            	  1236: ; write a high score initial to the vector list
                            	  1237: 
                            	  1238: write_initial:
00:0000B6A2 7200            	  1239: 	MOVEQ		#0,d1				; clear the longword
00:0000B6A4 1218            	  1240: 	MOVE.b	(a0)+,d1			; get a high score initial
00:0000B6A6 6614            	  1241: 	BNE.s		add_character		; if not [SPACE] just go add it
                            	  1242: 
00:0000B6A8 102B0176        	  1243: 	MOVE.b	p1_high(a3),d0		; get the player 1 highscore flag
00:0000B6AC C02B027A        	  1244: 	AND.b		p2_high(a3),d0		; and with the player 2 highscore flag
00:0000B6B0 6B0A            	  1245: 	BMI.s		add_character		; if neither is entering their initials just
                            	  1246: 							; go add the character
                            	  1247: 
                            	  1248: 							; else add a "_" instead of a [SPACE]
00:0000B6B2 38FCF872        	  1249: 	MOVE.w	#$F872,(a4)+		; add the underline vector word to the vector
                            	  1250: 							; list
00:0000B6B6 38FCF801        	  1251: 	MOVE.w	#$F801,(a4)+		; add the step to next character vector word
                            	  1252: 							; to the vector list
00:0000B6BA 4E75            	  1253: 	RTS
                            	  1254: 
                            	  1255: 
                            	  1256: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1257: ;
                            	  1258: ; add character (d1) to the vector list
                            	  1259: 
                            	  1260: add_character:
00:0000B6BC 2F08            	  1261: 	MOVE.l	a0,-(sp)			; save a0
00:0000B6BE D241            	  1262: 	ADD.w		d1,d1				; ; 2 bytes per character (d1) JSRL
00:0000B6C0 41FA22F6        	  1263: 	LEA		char_set(pc),a0		; point to the character JSRL table
00:0000B6C4 38F01000        	  1264: 	MOVE.w	(a0,d1.w),(a4)+		; add the JSRL word to the vector list
00:0000B6C8 205F            	  1265: 	MOVE.l	(sp)+,a0			; restore a0
00:0000B6CA 4E75            	  1266: 	RTS
                            	  1267: 
                            	  1268: 
                            	  1269: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1270: ;
                            	  1271: ; add d7 ships to the vector list. this is limited to a maximum of eighteen ships for
                            	  1272: ; speed and clarity
                            	  1273: 
                            	  1274: add_ships:
00:0000B6CC 6726            	  1275: 	BEQ.s		exit_add_ships		; if no ships left just exit
                            	  1276: 
00:0000B6CE 7012            	  1277: 	MOVEQ		#18,d0			; set the maximum ship count
00:0000B6D0 B047            	  1278: 	CMP.w		d7,d0				; compare the ship count with the max count
00:0000B6D2 6402            	  1279: 	BCC.s		show_ships			; if <= to max go show the ships
                            	  1280: 
00:0000B6D4 3E00            	  1281: 	MOVE.w	d0,d7				; else set the ship count to the maximum
                            	  1282: show_ships
00:0000B6D6 9247            	  1283: 	SUB.w		d7,d1				; subtract the ship count twice to move the ..
00:0000B6D8 9247            	  1284: 	SUB.w		d7,d1				; .. ships further right the more there are
                            	  1285: 
00:0000B6DA 36BCE000        	  1286: 	MOVE.w	#$E000,glob_scale(a3)	; set the global scale
00:0000B6DE 343C00D1        	  1287: 	MOVE.w	#$D1,d2			; set the ships y co-ordinate
00:0000B6E2 61000AAA        	  1288: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1289: 							; a draw command
00:0000B6E6 5347            	  1290: 	SUBQ.w	#1,d7				; adjust for loop type
                            	  1291: add_ships_loop
00:0000B6E8 43FA20D4        	  1292: 	LEA		play_liv(pc),a1		; set the pointer to ships left
00:0000B6EC 61000A8A        	  1293: 	BSR		add_address			; convert the a1 address and add it to the
                            	  1294: 							; vector list as a vector subroutine call
00:0000B6F0 51CFFFF6        	  1295: 	DBF		d7,add_ships_loop		; decrement the ship count and loop if more
                            	  1296: 							; to do
                            	  1297: exit_add_ships
00:0000B6F4 4E75            	  1298: 	RTS
                            	  1299: 
                            	  1300: 
                            	  1301: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1302: ;
                            	  1303: ; move all the items and add them to the vector list
                            	  1304: 
                            	  1305: ; d6 = object index
                            	  1306: ; d7 = position index
                            	  1307: 
                            	  1308: move_items:
00:0000B6F6 7E44            	  1309: 	MOVEQ		#x_pos_end-x_pos_off-2,d7
                            	  1310: 							; set the index to the last object position
00:0000B6F8 7C22            	  1311: 	MOVEQ		#flag_end-flags_off-1,d6
                            	  1312: 							; set the count to the last object
                            	  1313: move_next_item
00:0000B6FA 1035600C        	  1314: 	MOVE.b	flags_off(a5,d6.w),d0	; get an object flag
00:0000B6FE 670000CC        	  1315: 	BEQ		move_next_object		; if no item go do the next one
                            	  1316: 
                            	  1317: ; have an active item
                            	  1318: 
00:0000B702 6A5C            	  1319: 	BPL.s		move_item			; if the item is not exploding go move the item
                            	  1320: 
                            	  1321: 							; else the item is exploding
00:0000B704 4400            	  1322: 	NEG.b		d0				; do twos complement [$A0 becones $60]
00:0000B706 E808            	  1323: 	LSR.b		#4,d0				; shift the high nibble to the low nibble
                            	  1324: 							; [$60 becomes $06]
00:0000B708 5200            	  1325: 	ADDQ.b	#1,d0				; + 1
00:0000B70A 0C06001B        	  1326: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  1327: 							; compare the index with the player index
00:0000B70E 6606            	  1328: 	BNE.s		skip_play_inc		; if not the player skip setting the player
                            	  1329: 							; increment
                            	  1330: 
                            	  1331: ; set the player explosion increment to 1/2 by only setting it to 1 on alternate loops
                            	  1332: 
00:0000B710 7001            	  1333: 	MOVEQ		#1,d0				; set game counter mask
00:0000B712 C06B0059        	  1334: 	AND.w		game_count(a3),d0		; mask the game counter
                            	  1335: skip_play_inc
00:0000B716 D035600C        	  1336: 	ADD.b		flags_off(a5,d6.w),d0	; add the item flag
00:0000B71A 6B2A            	  1337: 	BMI.s		item_exploding		; go handle the item still exploding
                            	  1338: 
00:0000B71C 0C46001B        	  1339: 	CMPI.w	#p_flag_off-flags_off,d6
                            	  1340: 							; compare the index with the player index
00:0000B720 6716            	  1341: 	BEQ.s		go_reset_play		; if the player go reset the player and do next
                            	  1342: 
00:0000B722 641A            	  1343: 	BCC.s		go_reset_sauc		; if the saucer go reset the saucer and do next
                            	  1344: 
                            	  1345: 							; else it was a rock so clear it
00:0000B724 532D0076        	  1346: 	SUBQ.b	#1,rock_count(a5)		; decrement the rock count
00:0000B728 6606            	  1347: 	BNE.s		no_new_rocks		; skip flag set if rocks still left
                            	  1348: 
00:0000B72A 1B7C007F007B    	  1349: 	MOVE.b	#$7F,new_rocks(a5)	; else set the generate new rocks flag
                            	  1350: no_new_rocks
00:0000B730 4235600C        	  1351: 	CLR.b		flags_off(a5,d6.w)	; clear the item flag
00:0000B734 60000096        	  1352: 	BRA		move_next_object		; go check next item
                            	  1353: 
                            	  1354: go_reset_play
00:0000B738 610002E2        	  1355: 	BSR		player_reset		; reset the player velocity and position
00:0000B73C 60F2            	  1356: 	BRA		no_new_rocks		; go clear the player and do the next item
                            	  1357: 
                            	  1358: ; reset the saucer timer
                            	  1359: 
                            	  1360: go_reset_sauc
00:0000B73E 1B6D00780077    	  1361: 	MOVE.b	i_sauc_tim(a5),sauc_cntdn(a5)
                            	  1362: 							; get the small saucer boundary/initial saucer
                            	  1363: 							; timer and reset the saucer countdown timer
00:0000B744 60EA            	  1364: 	BRA.s		no_new_rocks		; go clear the saucer and do the next item
                            	  1365: 
                            	  1366: ; the item is still exploding
                            	  1367: 
                            	  1368: item_exploding
00:0000B746 1B80600C        	  1369: 	MOVE.b	d0,flags_off(a5,d6.w)	; save the incremented item flag
00:0000B74A 1F00            	  1370: 	MOVE.b	d0,-(sp)			; save the byte
00:0000B74C 321F            	  1371: 	MOVE.w	(sp)+,d1			; pull the word
00:0000B74E C27CF000        	  1372: 	AND.w		#$F000,d1			; mask the top nibble as the scale
00:0000B752 D27C1000        	  1373: 	ADD.w		#$1000,d1			; + $10
00:0000B756 0C06001B        	  1374: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  1375: 							; compare the index with the player index
00:0000B75A 6602            	  1376: 	BNE.s		no_reset_scale		; if not the player ship skip the scale reset
                            	  1377: 
00:0000B75C 7200            	  1378: 	MOVEQ		#$0000,d1			; else it was the player so reset the scale
                            	  1379: no_reset_scale
00:0000B75E 6066            	  1380: 	BRA.s		keep_scale			; go add the object to the vector list and do
                            	  1381: 							; the next item
                            	  1382: 
                            	  1383: ; the item is not exploding so move the item
                            	  1384: 
                            	  1385: move_item:
00:0000B760 1035602F        	  1386: 	MOVE.b	x_vel_off(a5,d6.w),d0	; get the x velocity byte
00:0000B764 4880            	  1387: 	EXT.w		d0				; extend it to a word value
00:0000B766 D0757080        	  1388: 	ADD.w		x_pos_off(a5,d7.w),d0	; add the x position
00:0000B76A 6B06            	  1389: 	BMI.s		x_pos_neg			; if negative go mask to $2000
                            	  1390: 
00:0000B76C B07C2000        	  1391: 	CMP.w		#$2000,d0			; compare the object x position with $2000
00:0000B770 6510            	  1392: 	BCS.s		not_x_max			; if less go do y position
                            	  1393: 
                            	  1394: x_pos_neg
00:0000B772 02401FFF        	  1395: 	ANDI.w	#$1FFF,d0			; else wrap round the x position
                            	  1396: 
00:0000B776 0C06001C        	  1397: 	CMPI.b	#s_flag_off-flags_off,d6
                            	  1398: 							; compare the index with the saucer index
00:0000B77A 6606            	  1399: 	BNE.s		not_x_max			; if not saucer continue
                            	  1400: 
                            	  1401: 							; else the saucer has passed the screen end
00:0000B77C 487A004E        	  1402: 	PEA		move_next_object(pc)	; on RTS go check the next item
00:0000B780 6052            	  1403: 	BRA.s		clear_saucer		; clear the saucer and restart the saucer timer
                            	  1404: 
                            	  1405: not_x_max
00:0000B782 3B807080        	  1406: 	MOVE.w	d0,x_pos_off(a5,d7.w)	; save the new x position
                            	  1407: 
00:0000B786 10356052        	  1408: 	MOVE.b	y_vel_off(a5,d6.w),d0	; get the y velocity byte
00:0000B78A 4880            	  1409: 	EXT.w		d0				; extend it to a word value
00:0000B78C D07570C6        	  1410: 	ADD.w		y_pos_off(a5,d7.w),d0	; add the y position
00:0000B790 6A06            	  1411: 	BPL.s		y_not_neg			; skip add if not < 0
                            	  1412: 
00:0000B792 D07C1800        	  1413: 	ADD.w		#$1800,d0			; else wrap round the y position
00:0000B796 600A            	  1414: 	BRA.s		not_y_max			; and skip the max check
                            	  1415: 
                            	  1416: y_not_neg
00:0000B798 B07C1800        	  1417: 	CMP.w		#$1800,d0			; compare the object y position with $1800
00:0000B79C 6504            	  1418: 	BCS.s		not_y_max			; if less just continue
                            	  1419: 
00:0000B79E 907C1800        	  1420: 	SUB.w		#$1800,d0			; else wrap round the y position
                            	  1421: not_y_max
00:0000B7A2 3B8070C6        	  1422: 	MOVE.w	d0,y_pos_off(a5,d7.w)	; save the new y position
                            	  1423: 
00:0000B7A6 323CE000        	  1424: 	MOVE.w	#$E000,d1			; set the scale to $E000
00:0000B7AA 0C46001D        	  1425: 	CMPI.w	#s_fire_off-flags_off,d6
                            	  1426: 							; compare the index with the fire objects
00:0000B7AE 6416            	  1427: 	BCC.s		keep_scale			; if fire object keep this scale and go add the
                            	  1428: 							; item and do next
                            	  1429: 
00:0000B7B0 1035600C        	  1430: 	MOVE.b	flags_off(a5,d6.w),d0	; get the object flag
00:0000B7B4 08000000        	  1431: 	BTST.l	#0,d0				; test bit 0
00:0000B7B8 660C            	  1432: 	BNE.s		keep_scale			; if %xx1 keep this scale and go add the item
                            	  1433: 							; and do next
                            	  1434: 
00:0000B7BA 323CF000        	  1435: 	MOVE.w	#$F000,d1			; set the scale to $F000
00:0000B7BE 08000001        	  1436: 	BTST.l	#1,d0				; test bit 0
00:0000B7C2 6602            	  1437: 	BNE.s		keep_scale			; if %x10 keep this scale and go add the item
                            	  1438: 							; and do next
                            	  1439: 
00:0000B7C4 7200            	  1440: 	MOVEQ		#0,d1				; set the scale to $0000
                            	  1441: 
                            	  1442: ; add the item to the vector list and go do the next item
                            	  1443: 
                            	  1444: keep_scale
00:0000B7C6 3681            	  1445: 	MOVE.w	d1,glob_scale(a3)		; save the global scale
00:0000B7C8 610003DE        	  1446: 	BSR		add_to_list			; add an object to the vector list
                            	  1447: move_next_object
00:0000B7CC 5547            	  1448: 	SUBQ.w	#2,d7				; decrement the position index
00:0000B7CE 51CEFF2A        	  1449: 	DBF		d6,move_next_item		; decrement the count and loop if more to do
                            	  1450: 
00:0000B7D2 4E75            	  1451: 	RTS
                            	  1452: 
                            	  1453: 
                            	  1454: 
                            	  1455: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1456: ;
                            	  1457: ; clear the saucer and restart the saucer timer
                            	  1458: 
                            	  1459: clear_saucer:
00:0000B7D4 1B6D00780077    	  1460: 	move.b i_sauc_tim(a5),sauc_cntdn(a5)	
                            	  1461: 							; copy the small saucer boundary/initial saucer
                            	  1462: 							; timer to the saucer countdown timer
00:0000B7DA 422D0028        	  1463: 	clr.b s_flag_off(a5)		; clear the saucer flag
00:0000B7DE 422D004B        	  1464: 	clr.b s_xvel_off(a5)		; clear the saucer x velocity byte
00:0000B7E2 422D006E        	  1465: 	clr.b s_yvel_off(a5)		; clear the saucer y velocity byte
00:0000B7E6 4E75            	  1466: 	rts
                            	  1467: 
                            	  1468: 
                            	  1469: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1470: ;
                            	  1471: ; handle ship rotation and thrust
                            	  1472: 
                            	  1473: ship_move:
                            	  1474: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	  1475: ;##	BEQ.s		exit_ship_move		; if no players just exit
                            	  1476: 
00:0000B7E8 4A2D0027        	  1477: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000B7EC 6B4A            	  1478: 	BMI.s		exit_ship_move		; if the player is exploding just exit
                            	  1479: 
00:0000B7EE 4A2D007A        	  1480: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000B7F2 6746            	  1481: 	BEQ.s		rot_and_thrust		; if the player is visible go handle the ship
                            	  1482: 							; rotate and thrust
                            	  1483: 
00:0000B7F4 532D007A        	  1484: 	SUBQ.b	#1,hide_p_cnt(a5)		; else decrement the hide the player count
00:0000B7F8 663E            	  1485: 	BNE.s		exit_ship_move		; if not timed out just exit
                            	  1486: 
00:0000B7FA 4A2B0026        	  1487: 	TST.b		hyper(a3)			; test the hyperspace flag
00:0000B7FE 6B1E            	  1488: 	BMI.s		kill_the_player		; if negative go handle an unsuccessful
                            	  1489: 							; hyperspace jump
                            	  1490: 
00:0000B800 6614            	  1491: 	BNE.s		reveal_player		; else if non zero go handle a successful
                            	  1492: 							; hyperspace jump
                            	  1493: 
                            	  1494: 							; else the player has just become visible
00:0000B802 610000F8        	  1495: 	BSR		check_clear			; check items within $0400 range of the player
00:0000B806 662C            	  1496: 	BNE.s		clear_hyper			; if there are items within range go clear the
                            	  1497: 							; hyperspace flag and exit
                            	  1498: 
00:0000B808 4A2D0028        	  1499: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000B80C 6708            	  1500: 	BEQ.s		reveal_player		; if there's no saucer go reveal the player
                            	  1501: 
00:0000B80E 1B7C0002007A    	  1502: 	MOVE.b	#$02,hide_p_cnt(a5)	; else set the hide the player count
00:0000B814 4E75            	  1503: 	RTS
                            	  1504: 
                            	  1505: ; handle a successful hyperspace jump
                            	  1506: 
                            	  1507: reveal_player
00:0000B816 1B7C00010027    	  1508: 	MOVE.b	#$01,p_flag_off(a5)	; set the player flag
00:0000B81C 6016            	  1509: 	BRA.s		clear_hyper			; go clear the hyperspace flag and return
                            	  1510: 
                            	  1511: ; handle an unsuccessful hyperspace jump
                            	  1512: 
                            	  1513: kill_the_player:
00:0000B81E 1B7C00A00027    	  1514: 	MOVE.b	#$A0,p_flag_off(a5)	; flag that the player's ship is exploding
00:0000B824 532D0082        	  1515: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
00:0000B828 1B7C0081007A    	  1516: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
                            	  1517: 
00:0000B82E 7206            	  1518: 	MOVEQ		#mexpl_snd,d1		; set the medium explosion sound
00:0000B830 6100259A        	  1519: 	BSR		play_sample			; go play the sample
                            	  1520: clear_hyper
00:0000B834 422B0026        	  1521: 	CLR.b		hyper(a3)			; clear the hyperspace flag
                            	  1522: exit_ship_move
00:0000B838 4E75            	  1523: 	RTS
                            	  1524: 
                            	  1525: ; handle the ship rotate and thrust
                            	  1526: 
                            	  1527: rot_and_thrust
                            	  1528: ;	MOVEQ		#0,d2				; assume no rotate
                            	  1529: ;	MOVE.l	#'L WQ',d1			; [L WQ] keys
                            	  1530: ;	MOVEQ		#19,d0			; check for keypress
                            	  1531: ;	TRAP		#15
00:0000B83A 7005            	  1532: 	moveq #5,d0
00:0000B83C 4E4F            	  1533: 	trap #15
00:0000B83E 0C010051        	  1534: 	cmpi.b #'Q',d1
00:0000B842 6602            	  1535: 	bne.s not_rot_left1
00:0000B844 7403            	  1536: 	moveq #3,d2
                            	  1537: not_rot_left1:
00:0000B846 0C010057        	  1538: 	cmpi.b #'W',d1
00:0000B84A 6602            	  1539: 	bne.s not_rot_right1
00:0000B84C 5702            	  1540: 	subq.b #3,d2
                            	  1541: not_rot_right1:
                            	  1542: 
                            	  1543: ;	TST.b		d1				; test the [Q] result
                            	  1544: ;	BPL.s		not_rot_left		; if not pressed go test rotate right
                            	  1545: 
                            	  1546: ;	MOVEQ		#3,d2				; if pressed set the rotation angle to + 3
                            	  1547: ;not_rot_left
                            	  1548: ;	TST.w		d1				; test the [W] result
                            	  1549: ;	BPL.s		not_rot_right		; if not pressed go add the rotation
                            	  1550: 
                            	  1551: ;	SUBQ.b	#3,d2				; if pressed set the rotation angle to - 3
                            	  1552: ;not_rot_right
00:0000B84E D52B001E        	  1553: 	add.b d2,p_orient(a3)		; add the roataion to the player orientation
                            	  1554: 
00:0000B852 7001            	  1555: 	moveq #1,d0				; set game counter mask
00:0000B854 C06B0059        	  1556: 	and.w game_count(a3),d0		; mask the game counter
00:0000B858 66DE            	  1557: 	bne.s exit_ship_move		; just exit half the time
                            	  1558: 
00:0000B85A 0C01004C        	  1559: 	cmpi.b #'L',d1
00:0000B85E 664C            	  1560: 	bne.s not_thrust
                            	  1561: ;	TST.l		d1				; test the [L] result
                            	  1562: ;	BPL.s		not_thrust			; if not pressed then go slow the ship
                            	  1563: 
                            	  1564: ; thrust button is pressed so increase the ship velocity
                            	  1565: 
00:0000B860 7202            	  1566: 	MOVEQ		#thrst_snd,d1		; set the thrust sound
00:0000B862 61002568        	  1567: 	BSR		play_sample			; play the sample and return
                            	  1568: 
00:0000B866 102B001E        	  1569: 	MOVE.b	p_orient(a3),d0		; get the player orientation
00:0000B86A 610007CC        	  1570: 	BSR		cos_d0			; do COS(d0)
00:0000B86E EE40            	  1571: 	ASR.w		#7,d0				; scale to 1/128th
                            	  1572: 
00:0000B870 1F2D004A        	  1573: 	MOVE.b	p_xvel_off(a5),-(sp)	; get the x velocity high byte
00:0000B874 321F            	  1574: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000B876 122D007E        	  1575: 	MOVE.b	p_xvlo_off(a5),d1		; get the x velocity low byte
00:0000B87A D240            	  1576: 	ADD.w		d0,d1				; add the thrust x component
00:0000B87C 6164            	  1577: 	BSR.s		check_velocity		; limit check the velocity in d1
00:0000B87E 1B41007E        	  1578: 	MOVE.b	d1,p_xvlo_off(a5)		; save the x velocity low byte
00:0000B882 3F01            	  1579: 	MOVE.w	d1,-(sp)			; save the word
00:0000B884 1B5F004A        	  1580: 	MOVE.b	(sp)+,p_xvel_off(a5)	; save the x velocity high byte
                            	  1581: 
00:0000B888 102B001E        	  1582: 	MOVE.b	p_orient(a3),d0		; get the player orientation
00:0000B88C 610007AE        	  1583: 	BSR		sin_d0			; do SIN(d0)
00:0000B890 EE40            	  1584: 	ASR.w		#7,d0				; scale to 1/128th
                            	  1585: 
00:0000B892 1F2D006D        	  1586: 	MOVE.b	p_yvel_off(a5),-(sp)	; get the y velocity high byte
00:0000B896 321F            	  1587: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000B898 122D007F        	  1588: 	MOVE.b	p_yvlo_off(a5),d1		; get the y velocity low byte
00:0000B89C D240            	  1589: 	ADD.w		d0,d1				; add the thrust y component
00:0000B89E 6142            	  1590: 	BSR.s		check_velocity		; limit check the velocity in d1
00:0000B8A0 1B41007F        	  1591: 	MOVE.b	d1,p_yvlo_off(a5)		; save the y velocity low byte
00:0000B8A4 3F01            	  1592: 	MOVE.w	d1,-(sp)			; save the word
00:0000B8A6 1B5F006D        	  1593: 	MOVE.b	(sp)+,p_yvel_off(a5)	; save the y velocity high byte
                            	  1594: 
00:0000B8AA 4E75            	  1595: 	RTS
                            	  1596: 
                            	  1597: ; thrust button is not pressed so slow the ship by adding - 128 ; velocity
                            	  1598: 
                            	  1599: not_thrust
00:0000B8AC 1F2D004A        	  1600: 	MOVE.b	p_xvel_off(a5),-(sp)	; get the x velocity high byte
00:0000B8B0 321F            	  1601: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000B8B2 122D007E        	  1602: 	MOVE.b	p_xvlo_off(a5),d1		; get the x velocity low byte
00:0000B8B6 3001            	  1603: 	MOVE.w	d1,d0				; copy the x velocity
00:0000B8B8 EE40            	  1604: 	ASR.w		#7,d0				; scale to 1/128th
00:0000B8BA 9240            	  1605: 	SUB.w		d0,d1				; subtract the x drag component
00:0000B8BC 1B41007E        	  1606: 	MOVE.b	d1,p_xvlo_off(a5)		; save the x velocity low byte
00:0000B8C0 3F01            	  1607: 	MOVE.w	d1,-(sp)			; save the word
00:0000B8C2 1B5F004A        	  1608: 	MOVE.b	(sp)+,p_xvel_off(a5)	; save the x velocity high byte
                            	  1609: 
                            	  1610: ; done the x velocity now do the y
                            	  1611: 
00:0000B8C6 1F2D006D        	  1612: 	MOVE.b	p_yvel_off(a5),-(sp)	; get the y velocity high byte
00:0000B8CA 321F            	  1613: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000B8CC 122D007F        	  1614: 	MOVE.b	p_yvlo_off(a5),d1		; get the y velocity low byte
00:0000B8D0 3001            	  1615: 	MOVE.w	d1,d0				; copy the y velocity
00:0000B8D2 EE40            	  1616: 	ASR.w		#7,d0				; scale to 1/128th
00:0000B8D4 9240            	  1617: 	SUB.w		d0,d1				; subtract the y drag component
00:0000B8D6 1B41007F        	  1618: 	MOVE.b	d1,p_yvlo_off(a5)		; save the y velocity low byte
00:0000B8DA 3F01            	  1619: 	MOVE.w	d1,-(sp)			; save the word
00:0000B8DC 1B5F006D        	  1620: 	MOVE.b	(sp)+,p_yvel_off(a5)	; save the y velocity high byte
                            	  1621: 
00:0000B8E0 4E75            	  1622: 	RTS
                            	  1623: 
                            	  1624: 
                            	  1625: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1626: ;
                            	  1627: ; limit check the velocity in XA
                            	  1628: 
                            	  1629: check_velocity:
00:0000B8E2 6B0C            	  1630: 	BMI.s		check_neg_velocity	; if negative go check negative limit
                            	  1631: 
00:0000B8E4 0C414000        	  1632: 	CMPI.w	#$4000,d1			; compare velocity with positive limit
00:0000B8E8 6510            	  1633: 	BCS.s		exit_check_velocity	; if less just exit
                            	  1634: 
00:0000B8EA 323C3FFF        	  1635: 	MOVE.w	#$3FFF,d1			; else set the velocity
00:0000B8EE 4E75            	  1636: 	rts
                            	  1637: 
                            	  1638: ; velocity is negative so check against the negative limit
                            	  1639: 
                            	  1640: check_neg_velocity
00:0000B8F0 0C41C002        	  1641: 	CMPI.w	#$C002,d1			; compare velocity with negative limit
00:0000B8F4 6404            	  1642: 	BCC.s		exit_check_velocity	; if greater or equal just exit
                            	  1643: 
00:0000B8F6 323CC001        	  1644: 	MOVE.w	#$C001,d1			; else set the velocity
                            	  1645: exit_check_velocity
00:0000B8FA 4E75            	  1646: 	rts
                            	  1647: 
                            	  1648: 
                            	  1649: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1650: ;
                            	  1651: ; check items within $0400 range of the player
                            	  1652: 
                            	  1653: check_clear:
00:0000B8FC 7C1C            	  1654: 	moveq #s_flag_off-flags_off,d6
                            	  1655: 							; set the count/index to the saucer
00:0000B8FE 7E38            	  1656: 	moveq #s_xpos_off-x_pos_off,d7
                            	  1657: 							; set the index to the saucer position
                            	  1658: check_clear_loop
00:0000B900 4A35600C        	  1659: 	tst.b flags_off(a5,d6.w)	; test the item flag
00:0000B904 6F28            	  1660: 	BLE.s		not_closer			; if no item or exploding go do the next item
                            	  1661: 
00:0000B906 30357080        	  1662: 	MOVE.w	x_pos_off(a5,d7.w),d0	; get the item x position
00:0000B90A 906DFFB6        	  1663: 	SUB.w		p_xpos_off(a5),d0		; subtract the player x position
00:0000B90E 0C400400        	  1664: 	CMPI.w	#$0400,d0			; compare the result with $0400
00:0000B912 6506            	  1665: 	BCS.s		check_clear_y		; if closer go check the y distance
                            	  1666: 
00:0000B914 0C40FC00        	  1667: 	CMPI.w	#$FC00,d0			; compare the result with -$0400
00:0000B918 6514            	  1668: 	BCS.s		not_closer			; if not closer go do the next item
                            	  1669: 
                            	  1670: check_clear_y
00:0000B91A 303570C6        	  1671: 	MOVE.w	y_pos_off(a5,d7.w),d0	; get the item y position
00:0000B91E 906DFFFC        	  1672: 	SUB.w		p_ypos_off(a5),d0		; subtract the player y position
00:0000B922 0C400400        	  1673: 	CMPI.w	#$0400,d0			; compare the result with $0400
00:0000B926 6510            	  1674: 	BCS.s		is_closer			; if closer go flag within distance and
                            	  1675: 							; increment the hide the player count
                            	  1676: 
00:0000B928 0C40FC00        	  1677: 	CMPI.w	#$FC00,d0			; compare the result with -$0400
00:0000B92C 640A            	  1678: 	BCC.s		is_closer			; if closer go flag within distance and
                            	  1679: 							; increment the hide the player count
                            	  1680: 
                            	  1681: not_closer
00:0000B92E 5547            	  1682: 	SUBQ.w	#2,d7				; decrement the position index
00:0000B930 51CEFFCE        	  1683: 	DBF		d6,check_clear_loop	; decrement the count and loop if more to do
                            	  1684: 
00:0000B934 7000            	  1685: 	MOVEQ		#0,d0				; return Zb = 1
00:0000B936 4E75            	  1686: 	rts
                            	  1687: 
                            	  1688: is_closer
00:0000B938 522D007A        	  1689: 	ADDQ.b	#1,hide_p_cnt(a5)		; increment the hide the player count
                            	  1690: 							; return Zb = 0
00:0000B93C 4E75            	  1691: 	rts
                            	  1692: 
                            	  1693: 
                            	  1694: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1695: ;
                            	  1696: ; generate new rocks
                            	  1697: 
                            	  1698: make_rocks:
00:0000B93E 4A2D0028        	  1699: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000B942 660000A0        	  1700: 	BNE		exit_make_rocks		; if existing saucer just exit
                            	  1701: 
00:0000B946 7C34            	  1702: 	MOVEQ		#p_xpos_off-x_pos_off-2,d6
                            	  1703: 							; set the index to the last rock position
00:0000B948 7A1A            	  1704: 	MOVEQ		#p_flag_off-flags_off-1,d5
                            	  1705: 							; set the count/index to the last rock flag
00:0000B94A 4A2D007B        	  1706: 	TST.b		new_rocks(a5)		; test the generate new rocks flag
00:0000B94E 6600008A        	  1707: 	BNE		clear_rocks			; if not counted out go clear all the rocks
                            	  1708: 
                            	  1709: ; these are used as the new rock initial velocity
                            	  1710: 
00:0000B952 7000            	  1711: 	MOVEQ		#0,d0				; clear the longword
00:0000B954 1B40004B        	  1712: 	MOVE.b	d0,s_xvel_off(a5)		; clear the saucer x velocity byte
00:0000B958 1B40006E        	  1713: 	MOVE.b	d0,s_yvel_off(a5)		; clear the saucer y velocity byte
                            	  1714: 
00:0000B95C 700A            	  1715: 	MOVEQ		#$0A,d0			; set the max value
00:0000B95E B02D007D        	  1716: 	CMP.b		min_rocks(a5),d0		; compare minimum rock count with $0A
00:0000B962 6504            	  1717: 	BCS.s		no_inc_min			; if > skip the increment
                            	  1718: 
00:0000B964 522D007D        	  1719: 	ADDQ.b	#1,min_rocks(a5)		; else decrement the minimum rock count before
                            	  1720: 							; the saucer initial timer starts to decrement
                            	  1721: no_inc_min
00:0000B968 7800            	  1722: 	MOVEQ		#0,d4				; clear the longword
00:0000B96A 182D0075        	  1723: 	MOVE.b	i_rk_count(a5),d4		; get the initial rock count
00:0000B96E 5404            	  1724: 	ADDQ.b	#2,d4				; + 2
00:0000B970 0C04000B        	  1725: 	CMPI.b	#11,d4			; compare the new rock count with 11 rocks
00:0000B974 6302            	  1726: 	BLS.s		no_set_max			; if less or equal just use it
                            	  1727: 
00:0000B976 780B            	  1728: 	MOVEQ		#11,d4			; else set the new rock count to 11
                            	  1729: no_set_max
00:0000B978 1B440076        	  1730: 	MOVE.b	d4,rock_count(a5)		; save the rock count
00:0000B97C 1B440075        	  1731: 	MOVE.b	d4,i_rk_count(a5)		; save the initial rock count
                            	  1732: 
00:0000B980 7E1C            	  1733: 	MOVEQ		#s_xvel_off-x_vel_off,d7
                            	  1734: 							; set the index to the saucer for a zero initial
                            	  1735: 							; velocity
                            	  1736: 
00:0000B982 5344            	  1737: 	SUBQ.w	#1,d4				; adjust for the loop type
                            	  1738: gen_rock_loop
00:0000B984 610008BA        	  1739: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B988 7018            	  1740: 	MOVEQ		#$18,d0			; set the rock type mask
00:0000B98A C02B000A        	  1741: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000B98E 00000004        	  1742: 	ORI.b		#$04,d0			; set the rock size to the largest
00:0000B992 1B80500C        	  1743: 	MOVE.b	d0,flags_off(a5,d5.w)	; save the rock flag
00:0000B996 610000C4        	  1744: 	BSR		copy_velocity		; copy the saucer velocity, (d7), plus a random
                            	  1745: 							; delta x,y velocity to the new rock, (d5),
                            	  1746: 							; velocity
                            	  1747: 
00:0000B99A 610008A4        	  1748: 	BSR		gen_prng			; generate the next pseudo random number
00:0000B99E 7200            	  1749: 	MOVEQ		#0,d1				; clear the other axis position
00:0000B9A0 303C3FFF        	  1750: 	MOVE.w	#$3FFF,d0			; set the starting position mask
00:0000B9A4 C06B000A        	  1751: 	AND.w		PRNlword(a3),d0		; mask a pseudo random word
00:0000B9A8 E248            	  1752: 	LSR.w		#1,d0				; shift a random bit into Cb
00:0000B9AA 640C            	  1753: 	BCC.s		rock_on_x			; if Cb = 0 go set the rock at a point along
                            	  1754: 							; the x axis
                            	  1755: 
                            	  1756: ; set the rock at a point along the y axis
                            	  1757: 
00:0000B9AC 0C401800        	  1758: 	CMPI.w	#$1800,d0			; compare the position with the y axis maximum
00:0000B9B0 6504            	  1759: 	BCS.s		rock_y_ok			; if less just use it
                            	  1760: 
00:0000B9B2 024017FF        	  1761: 	ANDI.w	#$17FF,d0			; mask the position to the y axis maximum
                            	  1762: rock_y_ok
00:0000B9B6 C340            	  1763: 	EXG		d1,d0				; swap y value to d1, zero to d0
                            	  1764: 
                            	  1765: ; set the rock at a point along the x axis
                            	  1766: 
                            	  1767: rock_on_x
00:0000B9B8 3B806080        	  1768: 	MOVE.w	d0,x_pos_off(a5,d6.w)	; save the rock x position
00:0000B9BC 3B8160C6        	  1769: 	MOVE.w	d1,y_pos_off(a5,d6.w)	; save the rock y position
00:0000B9C0 5546            	  1770: 	SUBQ.w	#2,d6				; decrement the rock position index
00:0000B9C2 5345            	  1771: 	SUBQ.w	#1,d5				; decrement the rock count/index
00:0000B9C4 51CCFFBE        	  1772: 	DBF		d4,gen_rock_loop		; decrement the new rock count and loop if more
                            	  1773: 							; to do
                            	  1774: 
00:0000B9C8 1B7C007F0077    	  1775: 	MOVE.b	#$7F,sauc_cntdn(a5)	; set the saucer countdown timer
00:0000B9CE 1B7C0034007C    	  1776: 	MOVE.b	#$34,thmp_sndi(a5)	; reset the thump sound change timer initial
                            	  1777: 							; value
00:0000B9D4 177C00080023    	  1778: 	MOVE.b	#beat1_snd,thump_snd(a3)
                            	  1779: 							; reset the thump sound value
                            	  1780: 
                            	  1781: ; now clear all the other rocks
                            	  1782: 
                            	  1783: clear_rocks
00:0000B9DA 7000            	  1784: 	MOVEQ		#0,d0				; clear the longword
                            	  1785: clear_rocks_loop
00:0000B9DC 1B80500C        	  1786: 	MOVE.b	d0,flags_off(a5,d5.w)	; clear the rock flag
00:0000B9E0 51CDFFFA        	  1787: 	DBF		d5,clear_rocks_loop	; decrement the count and loop if more to do
                            	  1788: 
                            	  1789: exit_make_rocks
00:0000B9E4 4E75            	  1790: 	rts
                            	  1791: 
                            	  1792: 
                            	  1793: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1794: ;
                            	  1795: ; initialise the player variables
                            	  1796: 
                            	  1797: player_init:
00:0000B9E6 1B6B001B0082    	  1798: 	move.b ss_count(a3),ships_off(a5)
                            	  1799: 							; set the player's starting ship count
00:0000B9EC 1B7C00920078    	  1800: 	move.b #$92,i_sauc_tim(a5)	; set the small saucer boundary/initial saucer
                            	  1801: 							; timer
00:0000B9F2 1B7C00920077    	  1802: 	move.b #$92,sauc_cntdn(a5)	; set the saucer countdown timer
00:0000B9F8 1B7C007F007B    	  1803: 	move.b #$7F,new_rocks(a5)	; set the generate new rocks flag
                            	  1804: 
00:0000B9FE 1B7C0005007D    	  1805: 	move.b #$05,min_rocks(a5)	; set the minimum rock count before the saucer
                            	  1806: 							; initial timer starts to decrement
00:0000BA04 1B7C0034007C    	  1807: 	move.b #$34,thmp_sndi(a5)	; reset the thump sound change timer initial
                            	  1808: 							; value
00:0000BA0A 177C00080023    	  1809: 	move.b #beat1_snd,thump_snd(a3)	; reset the thump sound value
00:0000BA10 1B7C00FF0083    	  1810: 	move.b #$FF,high_off(a5)		; clear the player highscore flag
00:0000BA16 1B7C0001007A    	  1811: 	move.b #$01,hide_p_cnt(a5)	; set the hide the player count
                            	  1812: 
                            	  1813: 
                            	  1814: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1815: ;
                            	  1816: ; reset the player velocity and position
                            	  1817: 
                            	  1818: player_reset:
00:0000BA1C 3B7C1000FFB6    	  1819: 	move.w #$1000,p_xpos_off(a5)	; set the player x position
00:0000BA22 3B7C0C00FFFC    	  1820: 	move.w #$0C00,p_ypos_off(a5)	; set the player y position
00:0000BA28 422D004A        	  1821: 	clr.b p_xvel_off(a5)					; clear the player x velocity
00:0000BA2C 422D006D        	  1822: 	clr.b p_yvel_off(a5)					; clear the player y velocity
00:0000BA30 4E75            	  1823: 	rts
                            	  1824: 
                            	  1825: 
                            	  1826: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1827: ;
                            	  1828: ; copy the item parameters from the old rock, (d7), to the new rock, (d5)
                            	  1829: 
                            	  1830: copy_rock:
00:0000BA32 3807            	  1831: 	MOVE.w	d7,d4				; copy the old rock index
00:0000BA34 D844            	  1832: 	ADD.w		d4,d4				; ; 2 for the old rock position index
                            	  1833: 
                            	  1834: copy_rock_2
00:0000BA36 3605            	  1835: 	MOVE.w	d5,d3				; copy the new rock index
00:0000BA38 D643            	  1836: 	ADD.w		d3,d3				; ; 2 for the new rock position index
                            	  1837: 
00:0000BA3A 7207            	  1838: 	MOVEQ		#$07,d1			; set the size mask
00:0000BA3C C235700C        	  1839: 	AND.b		flags_off(a5,d7.w),d1	; mask the old rock size
00:0000BA40 610007FE        	  1840: 	BSR		gen_prng			; generate the next pseudo random number
00:0000BA44 7018            	  1841: 	MOVEQ		#$18,d0			; set the rock type mask
00:0000BA46 C02B000A        	  1842: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000BA4A 8001            	  1843: 	OR.b		d1,d0				; OR in the old rock size
00:0000BA4C 1B80500C        	  1844: 	MOVE.b	d0,flags_off(a5,d5.w)	; save the new rock flag
                            	  1845: 
00:0000BA50 3BB540803080    	  1846: 	MOVE.w	x_pos_off(a5,d4.w),x_pos_off(a5,d3.w)
                            	  1847: 							; copy the old rock x position to the new rock
                            	  1848: 							; x position
00:0000BA56 3BB540C630C6    	  1849: 	MOVE.w	y_pos_off(a5,d4.w),y_pos_off(a5,d3.w)
                            	  1850: 							; copy the old rock y position to the new rock
                            	  1851: 							; y position
                            	  1852: 
                            	  1853: 
                            	  1854: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1855: ;
                            	  1856: ; copy the old rock, (d7), velocity plus random delta x,y velocity to the new rock,
                            	  1857: ; (d5), velocity
                            	  1858: 
                            	  1859: copy_velocity:
00:0000BA5C 610007E2        	  1860: 	BSR		gen_prng			; generate the next pseudo random number
00:0000BA60 708F            	  1861: 	MOVEQ		#$8F,d0			; mask +/- $00 to $0F
00:0000BA62 C02B000A        	  1862: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000BA66 6A04            	  1863: 	BPL.s		x_off_pos			; skip bits set if positive
                            	  1864: 
00:0000BA68 00000070        	  1865: 	ORI.b		#$70,d0			; else make $Fx
                            	  1866: x_off_pos
00:0000BA6C D035702F        	  1867: 	ADD.b		x_vel_off(a5,d7.w),d0	; add the item (d7) to the delta x velocity
00:0000BA70 6120            	  1868: 	BSR.s		limit_velocity		; ensure velocity is within limits
00:0000BA72 1B80502F        	  1869: 	MOVE.b	d0,x_vel_off(a5,d5.w)	; save the rock x velocity
                            	  1870: 
                            	  1871: 
00:0000BA76 610007C8        	  1872: 	BSR		gen_prng			; generate the next pseudo random number
00:0000BA7A 708F            	  1873: 	MOVEQ		#$8F,d0			; mask +/- $00 to $0F
00:0000BA7C C02B000A        	  1874: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000BA80 6A04            	  1875: 	BPL.s		y_off_pos			; skip bits set if positive
                            	  1876: 
00:0000BA82 00000070        	  1877: 	ORI.b		#$70,d0			; else make $Fx
                            	  1878: y_off_pos
00:0000BA86 D0357052        	  1879: 	ADD.b		y_vel_off(a5,d7.w),d0	; add the item (d5) to the delta y velocity
00:0000BA8A 6106            	  1880: 	BSR.s		limit_velocity		; ensure velocity is within limits
00:0000BA8C 1B805052        	  1881: 	MOVE.b	d0,y_vel_off(a5,d5.w)	; save the rock y velocity
                            	  1882: 
00:0000BA90 4E75            	  1883: 	RTS
                            	  1884: 
                            	  1885: 
                            	  1886: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1887: ;
                            	  1888: ; ensure velocity is within limits
                            	  1889: 
                            	  1890: limit_velocity:
00:0000BA92 6A12            	  1891: 	BPL.s		limit_p_vel			; if positive go test positive limit
                            	  1892: 
00:0000BA94 0C0000E1        	  1893: 	CMPI.b	#$E1,d0			; compare velocity with upper limit
00:0000BA98 6402            	  1894: 	BCC.s		neg_upper_ok		; if less skip set
                            	  1895: 
00:0000BA9A 70E1            	  1896: 	MOVEQ		#$E1,d0			; else set velocity to -$1F
                            	  1897: neg_upper_ok
00:0000BA9C 0C0000FB        	  1898: 	CMPI.b	#$FB,d0			; compare velocity with lower limit
00:0000BAA0 6514            	  1899: 	BCS.s		exit_limit_velocity	; if greater just exit
                            	  1900: 
00:0000BAA2 70FA            	  1901: 	MOVEQ		#$FA,d0			; else set velocity to -$06
00:0000BAA4 4E75            	  1902: 	RTS
                            	  1903: 
                            	  1904: ; test velocity positive limit
                            	  1905: 
                            	  1906: limit_p_vel
00:0000BAA6 0C000006        	  1907: 	CMPI.b	#$06,d0			; compare velocity with lower limit
00:0000BAAA 6402            	  1908: 	BCC.s		pos_lower_ok		; skip set if greater
                            	  1909: 
00:0000BAAC 7006            	  1910: 	MOVEQ		#$06,d0			; else set velocity to $06
                            	  1911: pos_lower_ok
00:0000BAAE 0C000020        	  1912: 	CMPI.b	#$20,d0			; compare velocity with upper limit
00:0000BAB2 6502            	  1913: 	BCS.s		exit_limit_velocity	; if less just exit
                            	  1914: 
00:0000BAB4 701F            	  1915: 	MOVEQ		#$1F,d0			; else set velocity to $1F
                            	  1916: exit_limit_velocity
00:0000BAB6 4E75            	  1917: 	RTS
                            	  1918: 
                            	  1919: 
                            	  1920: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1921: ;
                            	  1922: ; add (c), scores and players ships to the vector list
                            	  1923: 
                            	  1924: static_messages:
00:0000BAB8 43FA18E2        	  1925: 	LEA		copy_msg(pc),a1		; set the pointer to the copyright message
00:0000BABC 610006BA        	  1926: 	BSR		add_address			; convert the a1 address and add it to the
                            	  1927: 							; vector list as a vector subroutine call
                            	  1928: 
00:0000BAC0 36BC1000        	  1929: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
00:0000BAC4 7219            	  1930: 	MOVEQ		#$19,d1			; set the score x co-ordinate
00:0000BAC6 343C00D7        	  1931: 	MOVE.w	#$D7,d2			; set the score y co-ordinate
00:0000BACA 610006C2        	  1932: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1933: 							; a draw command
                            	  1934: 
00:0000BACE 323C7000        	  1935: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000BAD2 610006D4        	  1936: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  1937: 
00:0000BAD6 0C2B0002001A    	  1938: 	CMPI.b	#$02,num_players(a3)	; compare the number of players in the game
00:0000BADC 661E            	  1939: 	BNE.s		skip_play_flash		; if not two players skip flashing the active
                            	  1940: 							; player
                            	  1941: 
00:0000BADE 4A2B0018        	  1942: 	TST.b		player_idx(a3)		; test the player index
00:0000BAE2 6618            	  1943: 	BNE.s		skip_play_flash		; if player 2 go add the player to the vector
                            	  1944: 							; list
                            	  1945: 
00:0000BAE4 102D0027        	  1946: 	MOVE.b	p_flag_off(a5),d0		; get the player flag
00:0000BAE8 802B0026        	  1947: 	OR.b		hyper(a3),d0		; OR with the hyperspace flag
00:0000BAEC 660E            	  1948: 	BNE.s		skip_play_flash		; if playing go add player 1's score to the
                            	  1949: 							; vector list
                            	  1950: 
00:0000BAEE 4A2D007A        	  1951: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000BAF2 6B08            	  1952: 	BMI.s		skip_play_flash		; if the player is dieing go display the score
                            	  1953: 
00:0000BAF4 082B0004005A    	  1954: 	BTST.b	#4,game_count+1(a3)	; test a bit in the game counter low byte
00:0000BAFA 6714            	  1955: 	BEQ.s		do_p1_ships			; skip the score display if the flash is off
                            	  1956: 
                            	  1957: ; add the active player to the vector list
                            	  1958: 
                            	  1959: skip_play_flash
00:0000BAFC 43EB0173        	  1960: 	LEA		p1_score(a3),a1		; point to player 1's score
00:0000BB00 7E02            	  1961: 	MOVEQ		#$02,d7			; set the number byte count
00:0000BB02 17470016        	  1962: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000BB06 61000512        	  1963: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  1964: 							; suppressed character string
00:0000BB0A 7200            	  1965: 	MOVEQ		#0,d1				; add player 1's score's trailing "0"
00:0000BB0C 61000650        	  1966: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  1967: 
                            	  1968: do_p1_ships
00:0000BB10 7229            	  1969: 	MOVEQ		#$29,d1			; set the x co-ordinate for player 1's ships
00:0000BB12 7E00            	  1970: 	MOVEQ		#0,d7				; clear the longword
00:0000BB14 1E2B0175        	  1971: 	MOVE.b	p1_ships(a3),d7		; get player 1's ship count
00:0000BB18 6100FBB2        	  1972: 	BSR		add_ships			; add d7 ships to the vector list
                            	  1973: 
00:0000BB1C 4253            	  1974: 	MOVE.w	#$0000,glob_scale(a3)	; set the global scale
                            	  1975: 
00:0000BB1E 7278            	  1976: 	MOVEQ		#$78,d1			; set the high score x co-ordinate
00:0000BB20 343C00D7        	  1977: 	MOVE.w	#$D7,d2			; set the high score y co-ordinate
00:0000BB24 61000668        	  1978: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1979: 							; a draw command
00:0000BB28 323C5000        	  1980: 	MOVE.w	#REL5,d1			; make a $5000,$0000 command
00:0000BB2C 6100067A        	  1981: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  1982: 
00:0000BB30 43EB0027        	  1983: 	LEA		hiscores(a3),a1		; point to the highest high score
00:0000BB34 7E02            	  1984: 	MOVEQ		#$02,d7			; set the number byte count
00:0000BB36 17470016        	  1985: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000BB3A 610004DE        	  1986: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  1987: 							; suppressed character string
                            	  1988: 
00:0000BB3E 7200            	  1989: 	MOVEQ		#0,d1				; add the high score trailing "0"
00:0000BB40 6100061C        	  1990: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  1991: 
00:0000BB44 36BC1000        	  1992: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  1993: 
00:0000BB48 323C00C0        	  1994: 	MOVE.w	#$C0,d1			; set the score x co-ordinate
00:0000BB4C 343C00D7        	  1995: 	MOVE.w	#$D7,d2			; set the score y co-ordinate
00:0000BB50 6100063C        	  1996: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1997: 							; a draw command
00:0000BB54 323C5000        	  1998: 	MOVE.w	#REL5,d1			; make a $5000,$0000 command
00:0000BB58 6100064E        	  1999: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2000: 
00:0000BB5C 0C2B0001001A    	  2001: 	CMPI.b	#$01,num_players(a3)	; compare the number of players in the game
                            	  2002: 							; with one
00:0000BB62 6742            	  2003: 	BEQ.s		exit_static			; if just one player skip displaying p2 score
                            	  2004: 
00:0000BB64 651E            	  2005: 	BCS.s		do_p2_score			; if no players go add player 2's score to
                            	  2006: 							; the vector list
                            	  2007: 
00:0000BB66 4A2B0018        	  2008: 	TST.b		player_idx(a3)		; test the player index
00:0000BB6A 6718            	  2009: 	BEQ.s		do_p2_score			; if player 1 go add the player to the vector
                            	  2010: 							; list
                            	  2011: 
00:0000BB6C 102D0027        	  2012: 	MOVE.b	p_flag_off(a5),d0		; get the player flag
00:0000BB70 802B0026        	  2013: 	OR.b		hyper(a3),d0		; OR with the hyperspace flag
00:0000BB74 660E            	  2014: 	BNE.s		do_p2_score			; if playing go add player 2's score to the
                            	  2015: 							; vector list
                            	  2016: 
00:0000BB76 4A2D007A        	  2017: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000BB7A 6B08            	  2018: 	BMI.s		do_p2_score			; if the player is dieing go display the score
                            	  2019: 
00:0000BB7C 082B0004005A    	  2020: 	BTST.b	#4,game_count+1(a3)	; test a bit in the game counter low byte
00:0000BB82 6714            	  2021: 	BEQ.s		skip_p2_score		; skip the score display if the flash is off
                            	  2022: 
                            	  2023: do_p2_score
00:0000BB84 43EB0277        	  2024: 	LEA		p2_score(a3),a1		; point to player 2's score
00:0000BB88 7E02            	  2025: 	MOVEQ		#$02,d7			; set the number byte count
00:0000BB8A 17470016        	  2026: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000BB8E 6100048A        	  2027: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  2028: 							; suppressed character string
00:0000BB92 7200            	  2029: 	MOVEQ		#0,d1				; add player 2's score's trailing "0"
00:0000BB94 610005C8        	  2030: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  2031: 
                            	  2032: skip_p2_score
00:0000BB98 323C00D0        	  2033: 	MOVE.w	#$D0,d1			; set the x co-ordinate for player 2's ships
00:0000BB9C 7E00            	  2034: 	MOVEQ		#0,d7				; clear the longword
00:0000BB9E 1E2B0279        	  2035: 	MOVE.b	p2_ships(a3),d7		; get player 2's ship count
00:0000BBA2 6000FB28        	  2036: 	BRA		add_ships			; add d7 ships to the vector list and return
                            	  2037: 
                            	  2038: exit_static
00:0000BBA6 4E75            	  2039: 	RTS
                            	  2040: 
                            	  2041: 
                            	  2042: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2043: ;
                            	  2044: ; add an item to the vector list
                            	  2045: ;
                            	  2046: ; d6 = object flag offset
                            	  2047: ; d7 = position offset
                            	  2048: 
                            	  2049: 							; first add the DRAW to the item's origin
                            	  2050: add_to_list:
00:0000BBA8 303570C6        	  2051: 	MOVE.w	y_pos_off(a5,d7.w),d0	; get the y position
00:0000BBAC D07C0400        	  2052: 	ADD.w		#$0400,d0			; add offset so y is centred around 512
00:0000BBB0 E648            	  2053: 	LSR.w		#3,d0				; / 8
00:0000BBB2 0040A000        	  2054: 	ORI.w		#DRAW,d0			; OR in the draw command
00:0000BBB6 38C0            	  2055: 	MOVE.w	d0,(a4)+			; add it to the vector list
                            	  2056: 
00:0000BBB8 30357080        	  2057: 	MOVE.w	x_pos_off(a5,d7.w),d0	; get the x position
00:0000BBBC E648            	  2058: 	LSR.w		#3,d0				; / 8
00:0000BBBE 8041            	  2059: 	OR.w		d1,d0				; OR in the global scale
00:0000BBC0 38C0            	  2060: 	MOVE.w	d0,(a4)+			; add it to the vector list
                            	  2061: 
00:0000BBC2 7200            	  2062: 	MOVEQ		#0,d1				; clear the longword
00:0000BBC4 1235600C        	  2063: 	MOVE.b	flags_off(a5,d6.w),d1	; get the object flag
00:0000BBC8 6A12            	  2064: 	BPL.s		add_item			; if not exploding go add the item to the
                            	  2065: 							; vector list
                            	  2066: 
                            	  2067: 							; else add an exploding item
00:0000BBCA 0C06001B        	  2068: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  2069: 							; compare the index with the player index
00:0000BBCE 6700014A        	  2070: 	BEQ		add_play_explode		; if it is the player go add ship pieces to the
                            	  2071: 							; vector list
                            	  2072: 
00:0000BBD2 0201000C        	  2073: 	ANDI.b	#$0C,d1			; else mask the rock type
00:0000BBD6 43FA1804        	  2074: 	LEA		expl_tab(pc),a1		; point to the explosion JSRL table
00:0000BBDA 601A            	  2075: 	BRA.s		add_explode			; go add the JSRL word to the vector list and
                            	  2076: 							; return
                            	  2077: 
                            	  2078: ; add item d6 to the vector list
                            	  2079: 
                            	  2080: add_item:
00:0000BBDC 0C06001B        	  2081: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  2082: 							; compare the index with the player index
00:0000BBE0 670001DE        	  2083: 	BEQ		add_player			; if = go add the player to the vector list
                            	  2084: 
00:0000BBE4 0C06001C        	  2085: 	CMPI.b	#s_flag_off-flags_off,d6
                            	  2086: 							; compare the index with the saucer index
00:0000BBE8 6712            	  2087: 	BEQ.s		add_saucer			; if = go add the saucer to the vector list
                            	  2088: 
00:0000BBEA 6416            	  2089: 	BCC.s		add_fire			; if > saucer go add fire to the vector list
                            	  2090: 
                            	  2091: 							; else add a rock to the vector list
00:0000BBEC 02410018        	  2092: 	ANDI.w	#$0018,d1			; mask the rock type
00:0000BBF0 E449            	  2093: 	LSR.w		#2,d1				; >> 3 << 1
00:0000BBF2 43FA18CE        	  2094: 	LEA		rock_tab(pc),a1		; point to the rock JSRL table
                            	  2095: add_explode
00:0000BBF6 38F11000        	  2096: 	MOVE.w	(a1,d1.w),(a4)+		; add the JSRL word to the vector list
00:0000BBFA 4E75            	  2097: 	RTS
                            	  2098: 
                            	  2099: ; add the saucer to the vector list
                            	  2100: 
                            	  2101: add_saucer:
00:0000BBFC 38FA1936        	  2102: 	MOVE.w	sauc_jsr(pc),(a4)+	; add the saucer JSRL to the vector list
00:0000BC00 4E75            	  2103: 	RTS
                            	  2104: 
                            	  2105: ; add fire to the vector list
                            	  2106: 
                            	  2107: add_fire:
00:0000BC02 38FA1DFE        	  2108: 	MOVE.w	shot_jsr(pc),(a4)+	; add the shot JSRL to the vector list
                            	  2109: 
00:0000BC06 7003            	  2110: 	MOVEQ		#3,d0				; set the game counter mask
00:0000BC08 C06B0059        	  2111: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000BC0C 6604            	  2112: 	BNE.s		no_shot_dec			; skip the shot decrement 3/4 of the time
                            	  2113: 
00:0000BC0E 5335600C        	  2114: 	SUBQ.b	#1,flags_off(a5,d6.w)	; decrement fire item (d7) flag
                            	  2115: no_shot_dec
00:0000BC12 4E75            	  2116: 	RTS
                            	  2117: 
                            	  2118: 
                            	  2119: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2120: ;
                            	  2121: ; add d1.b to the current player's score
                            	  2122: 
                            	  2123: add_score:
00:0000BC14 44FC0004        	  2124: 	MOVE.w	#4,CCR			; set Zb, clear everything else
00:0000BC18 142D0081        	  2125: 	MOVE.b	score_off+1(a5),d2	; get the player's score, tens
00:0000BC1C C501            	  2126: 	ABCD.b	d1,d2				; add the value to the score
00:0000BC1E 6422            	  2127: 	BCC.s		exit_add_score		; if no carry just exit
                            	  2128: 
00:0000BC20 7200            	  2129: 	MOVEQ		#0,d1				; clear the add high byte
00:0000BC22 102D0080        	  2130: 	MOVE.b	score_off(a5),d0		; get the player's score, thousands
00:0000BC26 C101            	  2131: 	ABCD.b	d1,d0				; add the value to the score
00:0000BC28 1B400080        	  2132: 	MOVE.b	d0,score_off(a5)		; save the player's score, thousands
                            	  2133: 
00:0000BC2C 0200000F        	  2134: 	ANDI.b	#$0F,d0			; mask the units of thousands
00:0000BC30 6610            	  2135: 	BNE.s		exit_add_score		; if the score is not x0000 just exit
                            	  2136: 
00:0000BC32 720A            	  2137: 	MOVEQ		#extra_snd,d1		; set the bonus ship sound
00:0000BC34 61002196        	  2138: 	BSR		play_sample			; go play the sample
                            	  2139: 
00:0000BC38 522D0082        	  2140: 	ADDQ.b	#1,ships_off(a5)		; increment the player's ship count
00:0000BC3C 6604            	  2141: 	BNE.s		exit_add_score		; exit if not wrappwd
                            	  2142: 
00:0000BC3E 532D0082        	  2143: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
                            	  2144: exit_add_score
00:0000BC42 1B420081        	  2145: 	MOVE.b	d2,score_off+1(a5)	; save the player's score, tens
00:0000BC46 4E75            	  2146: 	RTS
                            	  2147: 
                            	  2148: 
                            	  2149: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2150: ;
                            	  2151: ; display the high score table if the game is over
                            	  2152: 
                            	  2153: high_scores:
00:0000BC48 4A2B001A        	  2154: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000BC4C 660000A0        	  2155: 	BNE		exit_no_scores		; if playing skip the high scores
                            	  2156: 
00:0000BC50 082B00020059    	  2157: 	BTST.b	#2,game_count(a3)		; test a bit in the game counter high byte
00:0000BC56 66000096        	  2158: 	BNE		exit_no_scores		; if not high score time just exit
                            	  2159: 
00:0000BC5A 45EB0027        	  2160: 	LEA		hiscores(a3),a2		; point to the high score table
                            	  2161: 
00:0000BC5E 4A52            	  2162: 	TST.w		(a2)				; test the highest high score
00:0000BC60 6700008C        	  2163: 	BEQ		exit_no_scores		; if the high score table is empty just exit
                            	  2164: 
00:0000BC64 7200            	  2165: 	MOVEQ		#0,d1				; message 0 - "HIGH SCORES"
00:0000BC66 61000470        	  2166: 	BSR		add_message			; add message d1 to the display list
                            	  2167: 
00:0000BC6A 36BC1000        	  2168: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  2169: 
00:0000BC6E 41EB003B        	  2170: 	LEA		hinames(a3),a0		; point to the high score names
00:0000BC72 7C00            	  2171: 	MOVEQ		#0,d6				; clear the high score index
00:0000BC74 377C00A70012    	  2172: 	MOVE.w	#$00A7,hiscore_y(a3)	; set the score's y co-ordinate
                            	  2173: high_scores_loop
00:0000BC7A 4A52            	  2174: 	TST.w		(a2)				; test the high score entry
00:0000BC7C 676A            	  2175: 	BEQ.s		exit_high_scores		; if this score is zero just exit
                            	  2176: 
00:0000BC7E 725F            	  2177: 	MOVEQ		#$5F,d1			; set the score's x co-ordinate
00:0000BC80 342B0012        	  2178: 	MOVE.w	hiscore_y(a3),d2		; get the score's y co-ordinate
00:0000BC84 61000508        	  2179: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  2180: 							; a draw command
                            	  2181: 
00:0000BC88 323C4000        	  2182: 	MOVE.w	#REL4,d1			; make a $4000,$0000 command
00:0000BC8C 6100051A        	  2183: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2184: 
00:0000BC90 43EB0017        	  2185: 	LEA		high_idx(a3),a1		; point to the high score index
00:0000BC94 7E01            	  2186: 	MOVEQ		#$01,d7			; set the number byte count and the increment
00:0000BC96 44FC0004        	  2187: 	MOVE.w	#4,CCR			; set Zb, clear everything else
00:0000BC9A CD07            	  2188: 	ABCD.b	d7,d6				; add to the high score index
00:0000BC9C 1286            	  2189: 	MOVE.b	d6,(a1)			; save the high score decimal index
00:0000BC9E 17470016        	  2190: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000BCA2 61000376        	  2191: 	BSR		output_number		; output a number as a leading zero suppressed
                            	  2192: 							; string
                            	  2193: 
                            	  2194: 							; set the point after the high score number
00:0000BCA6 323C4000        	  2195: 	MOVE.w	#REL4,d1			; make a $4000,$xx00 command
00:0000BCAA 3401            	  2196: 	MOVE.w	d1,d2				; make a $4000,$4000 command, point after entry
                            	  2197: 							; number
00:0000BCAC 610004FC        	  2198: 	BSR		add_pair			; add (d1)00,(d2)00 to the vector list
                            	  2199: 
00:0000BCB0 7200            	  2200: 	MOVEQ		#0,d1				; set [SPACE] character
00:0000BCB2 6100FA08        	  2201: 	BSR		add_character		; add character (d1) to the vector list
                            	  2202: 
00:0000BCB6 224A            	  2203: 	MOVEA.l	a2,a1				; point to the high score entry
00:0000BCB8 7E02            	  2204: 	MOVEQ		#$02,d7			; set the number byte count
00:0000BCBA 177C00FF0016    	  2205: 	MOVE.b	#-1,suppress_0(a3)	; set the flag to suppress leading zeros
00:0000BCC0 61000358        	  2206: 	BSR		output_number		; output a number as a leading zero suppressed
                            	  2207: 							; string
                            	  2208: 
00:0000BCC4 7200            	  2209: 	MOVEQ		#0,d1				; add the final "0"
00:0000BCC6 61000496        	  2210: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  2211: 
00:0000BCCA 7200            	  2212: 	MOVEQ		#0,d1				; set [SPACE] character
00:0000BCCC 6100F9EE        	  2213: 	BSR		add_character		; add character (d1) to the vector list
                            	  2214: 
00:0000BCD0 6100F9D0        	  2215: 	BSR		write_initial		; write a high score initial to the vector list
00:0000BCD4 6100F9CC        	  2216: 	BSR		write_initial		; write a high score initial to the vector list
00:0000BCD8 6100F9C8        	  2217: 	BSR		write_initial		; write a high score initial to the vector list
                            	  2218: 
00:0000BCDC 516B0012        	  2219: 	SUBQ.w	#8,hiscore_y(a3)		; subtract 8 from the score's y co-ordinate
00:0000BCE0 544A            	  2220: 	ADDQ.w	#2,a2				; increment the high score pointer
                            	  2221: 
00:0000BCE2 0C060010        	  2222: 	CMPI.b	#$10,d6			; compare the high score index with 10
00:0000BCE6 6592            	  2223: 	BCS.s		high_scores_loop		; loop if more to do
                            	  2224: 
                            	  2225: exit_high_scores
00:0000BCE8 003C0001        	  2226: 	ORI.b		#$01,CCR			; set the carry, flag scores displayed
00:0000BCEC 4E75            	  2227: 	RTS
                            	  2228: 
                            	  2229: exit_no_scores
00:0000BCEE 023C00FE        	  2230: 	ANDI.b	#$FE,CCR			; clear the carry, flag scores not displayed
00:0000BCF2 4E75            	  2231: 	RTS
                            	  2232: 
                            	  2233: 
                            	  2234: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2235: ;
                            	  2236: ; find a free rock item, the index is returned in d5
                            	  2237: 
                            	  2238: find_rock:
00:0000BCF4 7A1A            	  2239: 	MOVEQ		#p_flag_off-flags_off-1,d5
                            	  2240: 							; set the count/index to the last rock flag
                            	  2241: 
                            	  2242: ; find a free rock item from d5
                            	  2243: 
                            	  2244: find_next_rock
00:0000BCF6 4A35500C        	  2245: 	TST.b		flags_off(a5,d5.w)	; test the rock flag
00:0000BCFA 6704            	  2246: 	BEQ.s		exit_find_rock		; if free return this index
                            	  2247: 
00:0000BCFC 51CDFFF8        	  2248: 	DBF		d5,find_next_rock		; else loop if more to do
                            	  2249: 
                            	  2250: exit_find_rock
00:0000BD00 4E75            	  2251: 	RTS
                            	  2252: 
                            	  2253: 
                            	  2254: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2255: ;
                            	  2256: ; wrecked ship piece x,y velocities
                            	  2257: 
                            	  2258: ship_wrk_x
00:0000BD02 FFD8            	  2259: 	dc.w	$FFD8					; x
00:0000BD04 0032            	  2260: 	dc.w	$0032					; x
00:0000BD06 0000            	  2261: 	dc.w	$0000					; x
00:0000BD08 003C            	  2262: 	dc.w	$003C					; x
00:0000BD0A 000A            	  2263: 	dc.w	$000A					; x
00:0000BD0C FFD8            	  2264: 	dc.w	$FFD8					; x
                            	  2265: 
                            	  2266: ship_wrk_y
00:0000BD0E 001E            	  2267: 	dc.w	$001E					; y
00:0000BD10 FFEC            	  2268: 	dc.w	$FFEC					; y
00:0000BD12 FFC4            	  2269: 	dc.w	$FFC4					; y
00:0000BD14 0014            	  2270: 	dc.w	$0014					; y
00:0000BD16 0046            	  2271: 	dc.w	$0046					; y
00:0000BD18 FFD8            	  2272: 	dc.w	$FFD8					; y
                            	  2273: 
                            	  2274: 
                            	  2275: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2276: ;
                            	  2277: ; add the player explosion to the vector list
                            	  2278: 
                            	  2279: add_play_explode:
00:0000BD1A 48E70300        	  2280: 	MOVEM.l	d6-d7,-(sp)			; save the registers
00:0000BD1E 7200            	  2281: 	MOVEQ		#0,d1				; clear the longword
00:0000BD20 122D0027        	  2282: 	MOVE.b	p_flag_off(a5),d1		; get the player flag
00:0000BD24 0C0100A2        	  2283: 	CMPI.b	#$A2,d1			; compare the player flag with $A2
00:0000BD28 641A            	  2284: 	BCC.s		no_reset_xy			; if >= $A2 skip resetting the explosion
                            	  2285: 							; start point
                            	  2286: 
                            	  2287: 							; else reset the explosion start point
00:0000BD2A 7E0A            	  2288: 	MOVEQ		#$0A,d7			; set the index to the last piece x,y pair
                            	  2289: reset_xy_loop
00:0000BD2C 303B70D4        	  2290: 	MOVE.w	ship_wrk_x(pc,d7.w),d0	; get the x velocity word
00:0000BD30 E948            	  2291: 	LSL.w		#4,d0				; ; 16
00:0000BD32 3780705B        	  2292: 	MOVE.w	d0,expl_x_pos(a3,d7.w)	; save the x position word
                            	  2293: 
00:0000BD36 303B70D6        	  2294: 	MOVE.w	ship_wrk_y(pc,d7.w),d0	; get the y velocity word
00:0000BD3A E948            	  2295: 	LSL.w		#4,d0				; ; 16
00:0000BD3C 37807067        	  2296: 	MOVE.w	d0,expl_y_pos(a3,d7.w)	; save the y position word
                            	  2297: 
00:0000BD40 5547            	  2298: 	SUBQ.w	#2,d7				; decrement the index
00:0000BD42 6AE8            	  2299: 	BPL.s		reset_xy_loop		; loop if more to do
                            	  2300: 
                            	  2301: ; now use the player flag as the start index to the ship pieces. this means there will
                            	  2302: ; be less pieces as the explosion progresses
                            	  2303: 
                            	  2304: no_reset_xy
00:0000BD44 7070            	  2305: 	MOVEQ		#$70,d0			; set the mask
00:0000BD46 B101            	  2306: 	EOR.b		d0,d1				; toggle the player flag
00:0000BD48 C200            	  2307: 	AND.b		d0,d1				; mask the player flag
00:0000BD4A E609            	  2308: 	LSR.b		#3,d1				; / 16 ; 2 gives the piece start index
00:0000BD4C 3E01            	  2309: 	MOVE.w	d1,d7				; copy the index
                            	  2310: 
                            	  2311: 							; the piece draw loop	
                            	  2312: piece_draw_loop
00:0000BD4E 303B70B2        	  2313: 	MOVE.w	ship_wrk_x(pc,d7.w),d0	; get the x velocity word
00:0000BD52 D073705B        	  2314: 	ADD.w		expl_x_pos(a3,d7.w),d0	; add the x position word
00:0000BD56 3780705B        	  2315: 	MOVE.w	d0,expl_x_pos(a3,d7.w)	; save the x position word
                            	  2316: 
00:0000BD5A 323B70B2        	  2317: 	MOVE.w	ship_wrk_y(pc,d7.w),d1	; get the y velocity word
00:0000BD5E D2737067        	  2318: 	ADD.w		expl_y_pos(a3,d7.w),d1	; add the y position word
00:0000BD62 37817067        	  2319: 	MOVE.w	d1,expl_y_pos(a3,d7.w)	; save the y position word
                            	  2320: 
00:0000BD66 244C            	  2321: 	MOVEA.l	a4,a2				; copy the vector pointer
                            	  2322: 
00:0000BD68 7400            	  2323: 	MOVEQ		#0,d2				; clear the x sign bit
00:0000BD6A 4A40            	  2324: 	TST.w		d0				; test the x position word
00:0000BD6C 6A06            	  2325: 	BPL.s		vec_x_pos			; if positive skip the negate
                            	  2326: 
00:0000BD6E 4440            	  2327: 	NEG.w		d0				; else negate the x position, make it positive
00:0000BD70 343C0400        	  2328: 	MOVE.w	#$0400,d2			; and set the x sign bit
                            	  2329: vec_x_pos
                            	  2330: 
00:0000BD74 7600            	  2331: 	MOVEQ		#0,d3				; clear the y sign bit
00:0000BD76 4A41            	  2332: 	TST.w		d1				; test the y position word
00:0000BD78 6A06            	  2333: 	BPL.s		vec_y_pos			; if positive skip the negate
                            	  2334: 
00:0000BD7A 4441            	  2335: 	NEG.w		d1				; else negate the y position, make it positive
00:0000BD7C 363C0400        	  2336: 	MOVE.w	#$0400,d3			; and set the y sign bit
                            	  2337: vec_y_pos
00:0000BD80 E848            	  2338: 	LSR.w		#4,d0				; shift the x position
00:0000BD82 E849            	  2339: 	LSR.w		#4,d1				; shift the y position
                            	  2340: 
00:0000BD84 8042            	  2341: 	OR.w		d2,d0				; OR in the x sign bit
00:0000BD86 00416000        	  2342: 	ORI.w		#$6000,d1			; fix the scale
00:0000BD8A 8243            	  2343: 	OR.w		d3,d1				; OR in the y sign bit
                            	  2344: 
00:0000BD8C 38C1            	  2345: 	MOVE.w	d1,(a4)+			; add y position to the vector list
00:0000BD8E 38C0            	  2346: 	MOVE.w	d0,(a4)+			; add x position to the vector list
                            	  2347: 
                            	  2348: 							; add the piece vector to the list
                            	  2349: 
00:0000BD90 303B7022        	  2350: 	MOVE.w	ship_parts(pc,d7.w),d0	; get wrecked ship piece vector word
00:0000BD94 38C0            	  2351: 	MOVE.w	d0,(a4)+			; add the wrecked ship piece vector word to the
                            	  2352: 							; vector list
                            	  2353: 
00:0000BD96 0A400404        	  2354: 	EORI.w	#$0404,d0			; toggle the sign bits
00:0000BD9A 0240FF0F        	  2355: 	ANDI.w	#$FF0F,d0			; clear the intensity bits
00:0000BD9E 38C0            	  2356: 	MOVE.w	d0,(a4)+			; add the inverse wrecked ship piece vector word
                            	  2357: 							; to the vector list
                            	  2358: 
                            	  2359: 							; now copy an inverse relative long vector to
                            	  2360: 							; the list
00:0000BDA0 2012            	  2361: 	MOVE.l	(a2),d0			; get the vector to the piece
00:0000BDA2 0A8004000400    	  2362: 	EORI.l	#$04000400,d0		; toggle the sign bits
00:0000BDA8 28C0            	  2363: 	MOVE.l	d0,(a4)+			; save the inverse vector to the list
                            	  2364: 
00:0000BDAA 5547            	  2365: 	SUBQ.w	#2,d7				; decrement the index
00:0000BDAC 6AA0            	  2366: 	BPL		piece_draw_loop		; loop if more to do
                            	  2367: 
00:0000BDAE 4CDF00C0        	  2368: 	MOVEM.l	(sp)+,d6-d7			; restore the registers
00:0000BDB2 4E75            	  2369: 	rts
                            	  2370: 
                            	  2371: 
                            	  2372: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2373: ;
                            	  2374: ; pieces of wrecked ship
                            	  2375: 
                            	  2376: ship_parts
00:0000BDB4 FFC6            	  2377: 	dc.w	$FFC6				; x = -2, Y = -3
00:0000BDB6 FEC1            	  2378: 	dc.w	$FEC1				; x =  1, Y = -2
00:0000BDB8 F1C3            	  2379: 	dc.w	$F1C3				; x =  3, Y =  1
00:0000BDBA F1CD            	  2380: 	dc.w	$F1CD				; x = -1, Y =  1
00:0000BDBC F1C7            	  2381: 	dc.w	$F1C7				; x = -3, Y =  1
00:0000BDBE FDC1            	  2382: 	dc.w	$FDC1				; x =  1, Y = -1
                            	  2383: 
                            	  2384: 
                            	  2385: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2386: ;
                            	  2387: ; add the player ship to the vector list
                            	  2388: 
                            	  2389: add_player:
00:0000BDC0 7600            	  2390: 	MOVEQ		#0,d3				; clear the x_sign
00:0000BDC2 7400            	  2391: 	MOVEQ		#0,d2				; clear the y_sign
00:0000BDC4 7800            	  2392: 	MOVEQ		#0,d4				; yx_sign
                            	  2393: 
00:0000BDC6 122B001E        	  2394: 	MOVE.b	p_orient(a3),d1		; get the player orientation
00:0000BDCA 6A0A            	  2395: 	BPL.s		no_pos_reflect		; if positive skip reflection
                            	  2396: 
00:0000BDCC 343C0400        	  2397: 	MOVE.w	#$0400,d2			; set the y_sign
00:0000BDD0 3802            	  2398: 	MOVE.w	d2,d4				; set the yx_sign
00:0000BDD2 4401            	  2399: 	NEG.b		d1				; make ABS orientation
00:0000BDD4 6B06            	  2400: 	BMI.s		third_quad			; if still negative go do the third quad
                            	  2401: 
                            	  2402: no_pos_reflect
00:0000BDD6 08010006        	  2403: 	BTST.l	#6,d1				; test the quadrant
00:0000BDDA 670E            	  2404: 	BEQ.s		first_quad			; skip reflect if in first quadrant
                            	  2405: 
                            	  2406: third_quad
00:0000BDDC 363C0400        	  2407: 	MOVE.w	#$0400,d3			; set the x_sign
00:0000BDE0 183C0004        	  2408: 	MOVE.b	#$04,d4			; set the yx_sign
                            	  2409: 
00:0000BDE4 4401            	  2410: 	NEG.b		d1				; negate the byte
00:0000BDE6 D23C0080        	  2411: 	ADD.b		#$80,d1			; reflect the quadrant
                            	  2412: first_quad
00:0000BDEA E209            	  2413: 	LSR.b		#1,d1				; do quadrant value / 2
00:0000BDEC C23C003E        	  2414: 	AND.b		#$3E,d1			; mask to word boundary, value is $00 to $20
                            	  2415: 
00:0000BDF0 43FA1760        	  2416: 	LEA		play_tab(pc),a1		; point to the player ship table
00:0000BDF4 32311000        	  2417: 	MOVE.w	(a1,d1.w),d1		; get the offset to the player ship
00:0000BDF8 43F11000        	  2418: 	LEA		(a1,d1.w),a1		; get the pointer to the player ship
00:0000BDFC 6118            	  2419: 	BSR.s		copy_vectors		; copy the vectors from (a1) to the vector list
                            	  2420: 
                            	  2421: ;	MOVEQ		#'L',d1			; set for the thrust button
                            	  2422: ;	MOVEQ		#19,d0			; check for keypress
                            	  2423: ;	TRAP		#15
00:0000BDFE 7005            	  2424: 	moveq #5,d0
00:0000BE00 4E4F            	  2425: 	trap #15
00:0000BE02 0C01004C        	  2426: 	cmpi.b #'L',d1
00:0000BE06 6608            	  2427: 	bne.s no_thrust
                            	  2428: 
                            	  2429: ;	TST.b		d1				; test the result
                            	  2430: ;	BEQ.s		no_thrust			; if not pressed then skip the thrust copy
                            	  2431: 
00:0000BE08 7003            	  2432: 	MOVEQ		#3,d0				; set the game counter mask
00:0000BE0A C06B0059        	  2433: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000BE0E 6606            	  2434: 	BNE.s		copy_vectors		; 3/4 of the time go copy the vectors from (a1)
                            	  2435: 							; to the vector list and return
                            	  2436: no_thrust
00:0000BE10 4E75            	  2437: 	RTS
                            	  2438: 
                            	  2439: 
                            	  2440: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2441: ;
                            	  2442: ; copy the vectors from (a1) to the vector list
                            	  2443: 
                            	  2444: copy_short:
00:0000BE12 B940            	  2445: 	EOR.w		d4,d0				; possibly toggle the x and y signs
00:0000BE14 38C0            	  2446: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
                            	  2447: 
                            	  2448: copy_vectors
00:0000BE16 3019            	  2449: 	MOVE.w	(a1)+,d0			; get a vector word
00:0000BE18 B07CF000        	  2450: 	CMP.w		#SHRT,d0			; compare with short form vector
00:0000BE1C 64F4            	  2451: 	BCC.s		copy_short			; if short vector go copy it
                            	  2452: 
00:0000BE1E B07CA000        	  2453: 	CMP.w		#DRAW,d0			; compare with the DRAW command
00:0000BE22 640C            	  2454: 	BCC.s		exit_copy_vectors		; if DRAW or greater exit the vector copy
                            	  2455: 
                            	  2456: ; else it is a long vector
                            	  2457: 
00:0000BE24 B540            	  2458: 	EOR.w		d2,d0				; possibly toggle the y sign
00:0000BE26 38C0            	  2459: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
00:0000BE28 3019            	  2460: 	MOVE.w	(a1)+,d0			; get the second vector word
00:0000BE2A B740            	  2461: 	EOR.w		d3,d0				; possibly toggle the x sign
00:0000BE2C 38C0            	  2462: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
00:0000BE2E 60E6            	  2463: 	BRA.s		copy_vectors		; go do the next word
                            	  2464: 
                            	  2465: ; it's a short form vector
                            	  2466: 
                            	  2467: exit_copy_vectors
00:0000BE30 4E75            	  2468: 	RTS
                            	  2469: 
                            	  2470: 
                            	  2471: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2472: ;
                            	  2473: ; do the game sounds
                            	  2474: 
                            	  2475: fx_sounds:
00:0000BE32 7200            	  2476: 	MOVEQ		#0,d1				; clear the longword
00:0000BE34 122D0028        	  2477: 	MOVE.b	s_flag_off(a5),d1		; get the saucer flag
00:0000BE38 6F06            	  2478: 	BLE.s		no_saucer_sound		; if no saucer or the saucer is exploding skip
                            	  2479: 							; the saucer sound
                            	  2480: 
00:0000BE3A 5401            	  2481: 	ADDQ.b	#smsau_snd-1,d1		; add the small saucer sound to the size
00:0000BE3C 61001F8E        	  2482: 	BSR		play_sample			; go play the sample
                            	  2483: no_saucer_sound
00:0000BE40 4A2D0076        	  2484: 	TST.b		rock_count(a5)		; test the rock count
00:0000BE44 672C            	  2485: 	BEQ.s		no_thump_sound		; if no rocks skip the thump sound
                            	  2486: 
00:0000BE46 4A2D0027        	  2487: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000BE4A 6F26            	  2488: 	BLE.s		no_thump_sound		; if no player or the player is exploding skip
                            	  2489: 							; the thump sound
                            	  2490: 
00:0000BE4C 4A2B0026        	  2491: 	TST.b		hyper(a3)			; test the hyperspace flag
00:0000BE50 6620            	  2492: 	BNE.s		no_thump_sound		; if in hyperspace skip the thump sound
                            	  2493: 
00:0000BE52 532B0024        	  2494: 	SUBQ.b	#1,thump_time(a3)		; decrement the thump sound change timer
00:0000BE56 661A            	  2495: 	BNE.s		no_thump_sound		; skip changing the sound if not timed out
                            	  2496: 
00:0000BE58 7004            	  2497: 	MOVEQ		#4,d0				; add the sound on time
00:0000BE5A D02D007C        	  2498: 	ADD.b		thmp_sndi(a5),d0		; add the thump sound change timer initial
00:0000BE5E 17400024        	  2499: 	MOVE.b	d0,thump_time(a3)		; save the thump sound change timer
                            	  2500: 
00:0000BE62 7001            	  2501: 	MOVEQ		#1,d0				; set the bitmap change mask
00:0000BE64 122B0023        	  2502: 	MOVE.b	thump_snd(a3),d1		; get the thump sound value
00:0000BE68 B101            	  2503: 	EOR.b		d0,d1				; change the thump sound value
00:0000BE6A 17410023        	  2504: 	MOVE.b	d1,thump_snd(a3)		; save the thump sound value
00:0000BE6E 60001F5C        	  2505: 	BRA		play_sample			; go play the sample and return
                            	  2506: 
                            	  2507: no_thump_sound
00:0000BE72 4E75            	  2508: 	RTS
                            	  2509: 
                            	  2510: 
                            	  2511: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2512: ;
                            	  2513: ; handle something hitting a rock
                            	  2514: 
                            	  2515: ; d6 = player/saucer/shot object index
                            	  2516: ; d7 = object index
                            	  2517: 
                            	  2518: hit_a_rock:
00:0000BE74 1B7C00500079    	  2519: 	MOVE.b	#$50,r_hit_tim(a5)	; set the rock hit timer
00:0000BE7A 1035700C        	  2520: 	MOVE.b	flags_off(a5,d7.w),d0	; get the rock flag
00:0000BE7E 7278            	  2521: 	MOVEQ		#$78,d1			; set the mask for the rock type
00:0000BE80 C200            	  2522: 	AND.b		d0,d1				; mask the rock type
                            	  2523: 
00:0000BE82 02400007        	  2524: 	ANDI.w	#$07,d0			; mask the rock size
00:0000BE86 E248            	  2525: 	LSR.w		#1,d0				; / 2
00:0000BE88 3400            	  2526: 	MOVE.w	d0,d2				; copy the size
00:0000BE8A 6702            	  2527: 	BEQ.s		clear_rock			; if the size is zero then the rock is destroyed
                            	  2528: 							; so go clear the rock flag
                            	  2529: 
00:0000BE8C 8001            	  2530: 	OR.b		d1,d0				; else OR back the rock type
                            	  2531: clear_rock
00:0000BE8E 1B80700C        	  2532: 	MOVE.b	d0,flags_off(a5,d7.w)	; save the rock flag
                            	  2533: 
00:0000BE92 4A2B001A        	  2534: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000BE96 6712            	  2535: 	BEQ.s		skip_add			; if no players skip the score add
                            	  2536: 
00:0000BE98 4A46            	  2537: 	TST.w		d6				; test the player/saucer/shot index
00:0000BE9A 6706            	  2538: 	BEQ.s		add_to_score		; if the player hit the rock go add it to the
                            	  2539: 							; player's score
                            	  2540: 
00:0000BE9C 0C460004        	  2541: 	CMPI.w	#p_fire_off-p_flag_off,d6
                            	  2542: 							; compare the player/saucer/shot index with the
                            	  2543: 							; first of the player's fire
00:0000BEA0 6508            	  2544: 	BCS.s		skip_add			; if < the player's fire skip adding to the
                            	  2545: 							; player's score
                            	  2546: 
                            	  2547: add_to_score
00:0000BEA2 123B2042        	  2548: 	MOVE.b	rock_score(pc,d2.w),d1	; get the score per rock size
00:0000BEA6 6100FD6C        	  2549: 	BSR		add_score			; add d1.b to the current player's score
                            	  2550: skip_add
00:0000BEAA 4A35700C        	  2551: 	TST.b		flags_off(a5,d7.w)	; test the rock flag
00:0000BEAE 6734            	  2552: 	BEQ.s		exit_hit_a_rock		; if the rock was destroyed just exit
                            	  2553: 
                            	  2554: ; else break the rock into none, one, or two smaller rocks
                            	  2555: 
00:0000BEB0 6100FE42        	  2556: 	BSR		find_rock			; find a free rock, the index is returned in d5
00:0000BEB4 662E            	  2557: 	BNE.s		exit_hit_a_rock		; if there are no free rocks just exit
                            	  2558: 
00:0000BEB6 522D0076        	  2559: 	ADDQ.b	#1,rock_count(a5)		; else increment the rock count
                            	  2560: 
00:0000BEBA 6100FB76        	  2561: 	BSR		copy_rock			; copy the item parameters from the old rock,
                            	  2562: 							; (d7), to the new rock, (d5)
                            	  2563: 
00:0000BEBE 701F            	  2564: 	MOVEQ		#$1F,d0			; set the mask for the low 5 bits
00:0000BEC0 C035502F        	  2565: 	AND.b		x_vel_off(a5,d5.w),d0	; get the new rock x velocity byte
00:0000BEC4 D000            	  2566: 	ADD.b		d0,d0				; ; 2
00:0000BEC6 B1353081        	  2567: 	EOR.b		d0,x_pos_off+1(a5,d3.w)	; purturb the new rock x position low byte
                            	  2568: 
00:0000BECA 6100FE2A        	  2569: 	BSR		find_next_rock		; find a free rock from d5, the index is
                            	  2570: 							; returned in d5
00:0000BECE 6614            	  2571: 	BNE.s		exit_hit_a_rock		; if there are no free rocks just exit
                            	  2572: 
00:0000BED0 522D0076        	  2573: 	ADDQ.b	#1,rock_count(a5)		; else increment the rock count
                            	  2574: 
00:0000BED4 6100FB60        	  2575: 	BSR		copy_rock_2			; copy the item parameters from the old rock,
                            	  2576: 							; (d7), to the new rock, (d5)
                            	  2577: 
00:0000BED8 701F            	  2578: 	MOVEQ		#$1F,d0			; set the mask for the low 5 bits
00:0000BEDA C0355052        	  2579: 	AND.b		y_vel_off(a5,d5.w),d0	; get the new rock y velocity byte
00:0000BEDE D000            	  2580: 	ADD.b		d0,d0				; ; 2
00:0000BEE0 B13530C7        	  2581: 	EOR.b		d0,y_pos_off+1(a5,d3.w)	; purturb the new rock y position low byte
                            	  2582: exit_hit_a_rock
00:0000BEE4 4E75            	  2583: 	RTS
                            	  2584: 
                            	  2585: 
                            	  2586: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2587: ;
                            	  2588: ; score per rock size
                            	  2589: 
                            	  2590: rock_score
00:0000BEE6 10              	  2591: 	dc.b	$10					; 100 points, small rock
00:0000BEE7 05              	  2592: 	dc.b	$05					;  50 points, medium rock
00:0000BEE8 02              	  2593: 	dc.b	$02					;  20 points, large rock
00:0000BEE9 00              	  2594: 	dc.b	$00					;   0 points, null pad byte
                            	  2595: 
                            	  2596: 
                            	  2597: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2598: ;
                            	  2599: ; do the high score checks
                            	  2600: 
                            	  2601: check_hiscores:
00:0000BEEA 102B001A        	  2602: 	MOVE.b	num_players(a3),d0	; get the number of players in the game
00:0000BEEE 6A5A            	  2603: 	BPL.s		exit_check_hiscores	; if still players just exit
                            	  2604: 
00:0000BEF0 1B400083        	  2605: 	MOVE.b	d0,high_off(a5)		; clear the player 2 highscore flag
00:0000BEF4 1D400083        	  2606: 	MOVE.b	d0,high_off(a6)		; clear the player 1 highscore flag
                            	  2607: 
00:0000BEF8 177C00010018    	  2608: 	MOVE.b	#$01,player_idx(a3)	; set the player index for player two
00:0000BEFE 4BEB01F7        	  2609: 	LEA		player_2(a3),a5		; set the pointer to player two's variables
00:0000BF02 4DEB00F3        	  2610: 	LEA		player_1(a3),a6		; set the pointer to player one's variables
                            	  2611: check_hi_player
00:0000BF06 7400            	  2612: 	MOVEQ		#0,d2				; clear the high score index
00:0000BF08 302D0080        	  2613: 	MOVE.w	score_off(a5),d0		; get the player score
00:0000BF0C 670E            	  2614: 	BEQ.s		check_hi_next		; if zero go try the other player
                            	  2615: 
                            	  2616: check_hi_loop
00:0000BF0E B0732027        	  2617: 	CMP.w		hiscores(a3,d2.w),d0	; compare the high score with the player score
00:0000BF12 6238            	  2618: 	BHI.s		insert_hiscore		; if the player score was more go insert the
                            	  2619: 							; score
                            	  2620: 
00:0000BF14 5442            	  2621: 	ADDQ.w	#2,d2				; increment the high score index
00:0000BF16 0C420014        	  2622: 	CMPI.w	#20,d2			; compare with max + 2
00:0000BF1A 65F2            	  2623: 	BCS.s		check_hi_loop		; loop if more high scores to do
                            	  2624: 
                            	  2625: 							; else change to the other player
                            	  2626: check_hi_next
00:0000BF1C CB4E            	  2627: 	EXG		a5,a6				; swap the players
00:0000BF1E 0A2B00010018    	  2628: 	EORI.b	#1,player_idx(a3)		; toggle the player index
00:0000BF24 67E0            	  2629: 	BEQ.s		check_hi_player		; loop if more players to do
                            	  2630: 
00:0000BF26 102D0083        	  2631: 	MOVE.b	high_off(a5),d0		; get player 2's highscore flag
00:0000BF2A 6B14            	  2632: 	BMI.s		exit_hi_chk			; if not entering a high score go clear the
                            	  2633: 							; player count and exit
                            	  2634: 
00:0000BF2C B02E0083        	  2635: 	CMP.b		high_off(a6),d0		; compare with the player 1 highscore flag
00:0000BF30 650E            	  2636: 	BCS.s		exit_hi_chk			; if player 2's position < player 1's position
                            	  2637: 							; just exit
                            	  2638: 
00:0000BF32 5600            	  2639: 	ADDQ.b	#3,d0				; else increment player 2's position to the
                            	  2640: 							; next entry
00:0000BF34 0C00001E        	  2641: 	CMPI.b	#$1E,d0			; compare the result with max + 1
00:0000BF38 6502            	  2642: 	BCS.s		save_hi_index		; if less go save the new player 1 index
                            	  2643: 
00:0000BF3A 70FF            	  2644: 	MOVEQ		#-1,d0			; else reset player 2's highscore flag
                            	  2645: save_hi_index
00:0000BF3C 1B400083        	  2646: 	MOVE.b	d0,high_off(a5)		; save player 2's highscore flag
                            	  2647: exit_hi_chk
00:0000BF40 7000            	  2648: 	MOVEQ		#0,d0				; clear the longword
00:0000BF42 1740001A        	  2649: 	MOVE.b	d0,num_players(a3)	; clear the number of players in the game
00:0000BF46 17400020        	  2650: 	MOVE.b	d0,hi_char(a3)		; clear the input character index
                            	  2651: exit_check_hiscores
00:0000BF4A 4E75            	  2652: 	RTS
                            	  2653: 
                            	  2654: ; insert a new high score into the high score table. the index is in d2.w
                            	  2655: 
                            	  2656: insert_hiscore:
00:0000BF4C 7612            	  2657: 	MOVEQ		#18,d3			; index to the last high score
00:0000BF4E 781B            	  2658: 	MOVEQ		#27,d4			; index to the last high score initials
                            	  2659: insert_loop
00:0000BF50 B443            	  2660: 	CMP.w		d3,d2				; compare the current high score with the insert
                            	  2661: 							; point
00:0000BF52 671E            	  2662: 	BEQ.s		exit_insert_loop		; if there exit the loop
                            	  2663: 
00:0000BF54 37B330253027    	  2664: 	MOVE.w	hiscores-2(a3,d3.w),hiscores(a3,d3.w)
                            	  2665: 							; copy the (n-1)th high score to this one
00:0000BF5A 17B34038403B    	  2666: 	MOVE.b	hinames-3(a3,d4.w),hinames(a3,d4.w)
                            	  2667: 							; copy the (n-1)th high score name first byte
00:0000BF60 17B34039403C    	  2668: 	MOVE.b	hinames-2(a3,d4.w),hinames+1(a3,d4.w)
                            	  2669: 							; copy the (n-1)th high score name second byte
00:0000BF66 17B3403A403D    	  2670: 	MOVE.b	hinames-1(a3,d4.w),hinames+2(a3,d4.w)
                            	  2671: 							; copy the (n-1)th high score name third byte
                            	  2672: 
00:0000BF6C 5543            	  2673: 	SUBQ.w	#2,d3				; decrement the index to the previous score
00:0000BF6E 5744            	  2674: 	SUBQ.w	#3,d4				; decrement the index to the previous initials
00:0000BF70 66DE            	  2675: 	BNE.s		insert_loop			; loop for the next high score
                            	  2676: 
                            	  2677: exit_insert_loop
00:0000BF72 1B440083        	  2678: 	MOVE.b	d4,high_off(a5)		; save the player highscore flag
00:0000BF76 37803027        	  2679: 	MOVE.w	d0,hiscores(a3,d3.w)	; copy the player score to this one
00:0000BF7A 17BC000B403B    	  2680: 	MOVE.b	#$0B,hinames(a3,d4.w)	; make the high score name first byte "A"
00:0000BF80 4233403C        	  2681: 	CLR.b		hinames+1(a3,d4.w)	; make the high score name second byte " "
00:0000BF84 4233403D        	  2682: 	CLR.b		hinames+2(a3,d4.w)	; make the high score name third byte " "
                            	  2683: 
00:0000BF88 177C00F00059    	  2684: 	MOVE.b	#$F0,game_count(a3)	; set the game counter high byte, high score
                            	  2685: 							; entry timeout
                            	  2686: 
00:0000BF8E 608C            	  2687: 	BRA.s		check_hi_next		; loop for the other player
                            	  2688: 
                            	  2689: 
                            	  2690: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2691: ;
                            	  2692: ; calculate the angle given the delta x,y. the delta is calculated by subtracting the
                            	  2693: ; source x,y co-ordinates from the target x,y co-ordinates. the angle is returned in
                            	  2694: ; d0.b with $00 being 3 o'clock
                            	  2695: ;
                            	  2696: ; d1.w = delta x = target x - source x
                            	  2697: ; d2.w = delta y = target y - source y
                            	  2698: 
                            	  2699: get_atn:
00:0000BF90 4A42            	  2700: 	TST.w		d2				; test the delta y
00:0000BF92 6A08            	  2701: 	BPL.s		atn_semi			; if +ve skip the delta y negate
                            	  2702: 
00:0000BF94 4442            	  2703: 	NEG.w		d2				; else make delta y positive
00:0000BF96 6104            	  2704: 	BSR.s		atn_semi			; get arctan(y/x) for the semicircle
00:0000BF98 4400            	  2705: 	NEG.b		d0				; negate the result
00:0000BF9A 4E75            	  2706: 	RTS
                            	  2707: 
                            	  2708: ; get arctan(y/x) for the semicircle
                            	  2709: 
                            	  2710: atn_semi:
00:0000BF9C 4A41            	  2711: 	TST.w		d1				; test the delta x
00:0000BF9E 6A0C            	  2712: 	BPL.s		atn_quad			; if +ve skip the delta x negate
                            	  2713: 
00:0000BFA0 4441            	  2714: 	NEG.w		d1				; else make delta x positive
00:0000BFA2 6108            	  2715: 	BSR.s		atn_quad			; get arctan(y/x) or arctan(x/y)
00:0000BFA4 0A000080        	  2716: 	EORI.b	#$80,d0			; reflect 180 degrees
00:0000BFA8 4400            	  2717: 	NEG.b		d0				; negate the result
00:0000BFAA 4E75            	  2718: 	RTS
                            	  2719: 
                            	  2720: 
                            	  2721: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2722: ;
                            	  2723: ; get arctan(y/x) or arctan(x/y) for one quadrant.
                            	  2724: 
                            	  2725: atn_quad:
00:0000BFAC B441            	  2726: 	CMP.w		d1,d2				; compare y with x
00:0000BFAE 650C            	  2727: 	BCS.s		atn_eight			; if x > y get arctan(y/x) from the table
                            	  2728: 							; and return
                            	  2729: 
00:0000BFB0 C342            	  2730: 	EXG		d1,d2				; else swap x,y
00:0000BFB2 6108            	  2731: 	BSR.s		atn_eight			; get arctan(x/y) from the table
00:0000BFB4 04000040        	  2732: 	SUBI.b	#$40,d0			; reflect the quadrant
00:0000BFB8 4400            	  2733: 	NEG.b		d0				; and negate the result
00:0000BFBA 4E75            	  2734: 	RTS
                            	  2735: 
                            	  2736: 
                            	  2737: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2738: ;
                            	  2739: ; divide d2.w by d1.w, the six bit result in d0.w is then used to index the ATN()
                            	  2740: ; table to get the result for this octant. (is that the right word for one eighth
                            	  2741: ; of a circle?)
                            	  2742: 
                            	  2743: atn_eight:
00:0000BFBC 7000            	  2744: 	MOVEQ		#0,d0				; clear the result
00:0000BFBE 7E05            	  2745: 	MOVEQ		#6-1,d7			; set the bit count
                            	  2746: loop_atn
00:0000BFC0 D442            	  2747: 	ADD.w		d2,d2				; shift the dividend
00:0000BFC2 3602            	  2748: 	MOVE.w	d2,d3				; copy the dividend
00:0000BFC4 9641            	  2749: 	SUB.w		d1,d3				; compare it with the divisor
00:0000BFC6 6502            	  2750: 	BCS.s		skip_sub			; if the dividend < the divisor skip the
                            	  2751: 							; subtract
                            	  2752: 
00:0000BFC8 9441            	  2753: 	SUB.w		d1,d2				; else subtract the divisor
                            	  2754: skip_sub
00:0000BFCA D100            	  2755: 	ADDX.b	d0,d0				; shift a bit into the result
00:0000BFCC 51CFFFF2        	  2756: 	DBF		d7,loop_atn			; loop if more to do
                            	  2757: 
00:0000BFD0 0200003F        	  2758: 	ANDI.b	#$3F,d0			; mask the result to $0000 to $003F
00:0000BFD4 103B0004        	  2759: 	MOVE.b	atn_tab(pc,d0.w),d0	; get the arctan from the table
00:0000BFD8 4E75            	  2760: 	RTS
                            	  2761: 
                            	  2762: 
                            	  2763: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2764: ;
                            	  2765: ; arctangent table. returns the effective angle of the dx/dy ratio for scaled values
                            	  2766: ; of dx/dy of up to 0.984375 or 63/64ths. this is only 1/8th of a full circle but it
                            	  2767: ; is easy to rotate and reflect these values to cover the other 7/8ths.
                            	  2768: 
                            	  2769: atn_tab
00:0000BFDA 20              	  2770: 	dc.b	$20,$20,$1F,$1F,$1F,$1E,$1E,$1E,$1D,$1D,$1C,$1C,$1C,$1B,$1B,$1A
00:0000BFDB 20
00:0000BFDC 1F
00:0000BFDD 1F
00:0000BFDE 1F
00:0000BFDF 1E
00:0000BFE0 1E
00:0000BFE1 1E
00:0000BFE2 1D
00:0000BFE3 1D
00:0000BFE4 1C
00:0000BFE5 1C
00:0000BFE6 1C
00:0000BFE7 1B
00:0000BFE8 1B
00:0000BFE9 1A
00:0000BFEA 1A              	  2771: 	dc.b	$1A,$1A,$19,$19,$18,$18,$17,$17,$17,$16,$16,$15,$15,$14,$14,$13
00:0000BFEB 1A
00:0000BFEC 19
00:0000BFED 19
00:0000BFEE 18
00:0000BFEF 18
00:0000BFF0 17
00:0000BFF1 17
00:0000BFF2 17
00:0000BFF3 16
00:0000BFF4 16
00:0000BFF5 15
00:0000BFF6 15
00:0000BFF7 14
00:0000BFF8 14
00:0000BFF9 13
00:0000BFFA 13              	  2772: 	dc.b	$13,$12,$12,$11,$11,$10,$0F,$0F,$0E,$0E,$0D,$0D,$0C,$0B,$0B,$0A
00:0000BFFB 12
00:0000BFFC 12
00:0000BFFD 11
00:0000BFFE 11
00:0000BFFF 10
00:0000C000 0F
00:0000C001 0F
00:0000C002 0E
00:0000C003 0E
00:0000C004 0D
00:0000C005 0D
00:0000C006 0C
00:0000C007 0B
00:0000C008 0B
00:0000C009 0A
00:0000C00A 0A              	  2773: 	dc.b	$0A,$09,$08,$08,$07,$07,$06,$05,$05,$04,$03,$03,$02,$02,$01,$00
00:0000C00B 09
00:0000C00C 08
00:0000C00D 08
00:0000C00E 07
00:0000C00F 07
00:0000C010 06
00:0000C011 05
00:0000C012 05
00:0000C013 04
00:0000C014 03
00:0000C015 03
00:0000C016 02
00:0000C017 02
00:0000C018 01
00:0000C019 00
                            	  2774: 
                            	  2775: 
                            	  2776: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2777: ;
                            	  2778: ; output a number as a leading zero suppressed character string
                            	  2779: ;
                            	  2780: ; a1 = number address
                            	  2781: ; d7 = number byte count
                            	  2782: 
                            	  2783: output_number:
00:0000C01A 5347            	  2784: 	SUBQ.w	#1,d7				; adjust for the loop type
                            	  2785: output_number_loop
00:0000C01C 1211            	  2786: 	MOVE.b	(a1),d1			; get a byte
00:0000C01E E809            	  2787: 	LSR.b		#4,d1				; shift the high nibble to the low nibble
00:0000C020 61000130        	  2788: 	BSR		add_sup_hex_chr		; add a leading zero suppressed character
00:0000C024 4A47            	  2789: 	TST.w		d7				; test the byte count
00:0000C026 6604            	  2790: 	BNE.s		zero_suppress		; if this isn't the last byte skip the zero
                            	  2791: 							; suppress clear
                            	  2792: 
00:0000C028 422B0016        	  2793: 	CLR.b		suppress_0(a3)		; clear the zero suppress for the last digit
                            	  2794: zero_suppress
00:0000C02C 1219            	  2795: 	MOVE.b	(a1)+,d1			; get a byte and increment the pointer
00:0000C02E 61000122        	  2796: 	BSR		add_sup_hex_chr		; add a leading zero suppressed character
00:0000C032 51CFFFE8        	  2797: 	DBF		d7,output_number_loop	; decrement count and loop if more to do
                            	  2798: 
00:0000C036 4E75            	  2799: 	RTS
                            	  2800: 
                            	  2801: 
                            	  2802: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2803: ;
                            	  2804: ; get COS(d0) in d0. d0 is an eight bit value representing a full circle with the
                            	  2805: ; value increasing as you turn widdershins
                            	  2806: 
                            	  2807: cos_d0
00:0000C038 06000040        	  2808: 	ADDI.b	#$40,d0			; add 1/4 rotation
                            	  2809: 
                            	  2810: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2811: ;
                            	  2812: ; get SIN(d0) in d0. d0 is an eight bit value representing a full circle with the
                            	  2813: ; value increasing as you turn widdershins
                            	  2814: 
                            	  2815: sin_d0
00:0000C03C 024000FF        	  2816: 	ANDI.w	#$00FF,d0			; mask one full circle
00:0000C040 4A00            	  2817: 	TST.b		d0				; test angle sign
00:0000C042 6A06            	  2818: 	BPL.s		cossin_d0			; if +ve just get SIN/COS and return
                            	  2819: 
00:0000C044 6104            	  2820: 	BSR.s		cossin_d0			; else get SIN/COS
00:0000C046 4440            	  2821: 	NEG.w		d0				; now do twos complement
00:0000C048 4E75            	  2822: 	RTS
                            	  2823: 
                            	  2824: ; get d0 from SIN/COS table
                            	  2825: 
                            	  2826: cossin_d0
00:0000C04A D000            	  2827: 	ADD.b		d0,d0				; ; 2 bytes per word value
00:0000C04C 6A02            	  2828: 	BPL.s		a_was_less			; branch if the angle < 1/4 circle
                            	  2829: 
00:0000C04E 4400            	  2830: 	NEG.b		d0				; wrap $82 to $FE to $7E to $02
                            	  2831: a_was_less
00:0000C050 303B0004        	  2832: 	MOVE.w	sin_cos(pc,d0.w),d0	; get the SIN/COS value
00:0000C054 4E75            	  2833: 	RTS
                            	  2834: 
                            	  2835: 
                            	  2836: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2837: ;
                            	  2838: ; SIN/COS table, returns values between $0000 and $7FFF. the last value should be
                            	  2839: ; $8000 but that can cause an overflow in the word length calculations and it's
                            	  2840: ; easier to fudge the table a bit. no one will ever notice.
                            	  2841: 
                            	  2842: sin_cos
00:0000C056 0000            	  2843: 	dc.w	$0000,$0324,$0648,$096B,$0C8C,$0FAB,$12C8,$15E2
00:0000C058 0324
00:0000C05A 0648
00:0000C05C 096B
00:0000C05E 0C8C
00:0000C060 0FAB
00:0000C062 12C8
00:0000C064 15E2
00:0000C066 18F9            	  2844: 	dc.w	$18F9,$1C0C,$1F1A,$2224,$2528,$2827,$2B1F,$2E11
00:0000C068 1C0C
00:0000C06A 1F1A
00:0000C06C 2224
00:0000C06E 2528
00:0000C070 2827
00:0000C072 2B1F
00:0000C074 2E11
00:0000C076 30FC            	  2845: 	dc.w	$30FC,$33DF,$36BA,$398D,$3C57,$3F17,$41CE,$447B
00:0000C078 33DF
00:0000C07A 36BA
00:0000C07C 398D
00:0000C07E 3C57
00:0000C080 3F17
00:0000C082 41CE
00:0000C084 447B
00:0000C086 471D            	  2846: 	dc.w	$471D,$49B4,$4C40,$4EC0,$5134,$539B,$55F6,$5843
00:0000C088 49B4
00:0000C08A 4C40
00:0000C08C 4EC0
00:0000C08E 5134
00:0000C090 539B
00:0000C092 55F6
00:0000C094 5843
00:0000C096 5A82            	  2847: 	dc.w	$5A82,$5CB4,$5ED7,$60EC,$62F2,$64E9,$66CF,$68A7
00:0000C098 5CB4
00:0000C09A 5ED7
00:0000C09C 60EC
00:0000C09E 62F2
00:0000C0A0 64E9
00:0000C0A2 66CF
00:0000C0A4 68A7
00:0000C0A6 6A6E            	  2848: 	dc.w	$6A6E,$6C24,$6DCA,$6F5F,$70E3,$7255,$73B6,$7505
00:0000C0A8 6C24
00:0000C0AA 6DCA
00:0000C0AC 6F5F
00:0000C0AE 70E3
00:0000C0B0 7255
00:0000C0B2 73B6
00:0000C0B4 7505
00:0000C0B6 7642            	  2849: 	dc.w	$7642,$776C,$7885,$798A,$7A7D,$7B5D,$7C2A,$7CE4
00:0000C0B8 776C
00:0000C0BA 7885
00:0000C0BC 798A
00:0000C0BE 7A7D
00:0000C0C0 7B5D
00:0000C0C2 7C2A
00:0000C0C4 7CE4
00:0000C0C6 7D8A            	  2850: 	dc.w	$7D8A,$7E1E,$7E9D,$7F0A,$7F62,$7FA7,$7FD9,$7FF6
00:0000C0C8 7E1E
00:0000C0CA 7E9D
00:0000C0CC 7F0A
00:0000C0CE 7F62
00:0000C0D0 7FA7
00:0000C0D2 7FD9
00:0000C0D4 7FF6
00:0000C0D6 7FFF            	  2851: 	dc.w	$7FFF
                            	  2852: 
                            	  2853: 
                            	  2854: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2855: ;
                            	  2856: ; add message d1 to the display list
                            	  2857: 
                            	  2858: add_message:
00:0000C0D8 36BC1000        	  2859: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  2860: 
00:0000C0DC D241            	  2861: 	ADD.w		d1,d1				; make into a word index
00:0000C0DE 3F01            	  2862: 	MOVE.w	d1,-(sp)			; save the index
                            	  2863: 
00:0000C0E0 D241            	  2864: 	ADD.w		d1,d1				; make into a word pair index
00:0000C0E2 41FA1932        	  2865: 	LEA		mess_origin(pc),a0	; point to the mesage co-ordinate table
00:0000C0E6 34301002        	  2866: 	MOVE.w	2(a0,d1.w),d2		; get the message y co-ordinate
00:0000C0EA 32301000        	  2867: 	MOVE.w	(a0,d1.w),d1		; get the message x co-ordinate
00:0000C0EE 6100009E        	  2868: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  2869: 							; a draw command
                            	  2870: 
00:0000C0F2 323C7000        	  2871: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000C0F6 610000B0        	  2872: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2873: 
00:0000C0FA 7003            	  2874: 	MOVEQ		#$03,d0			; set the mask for the language bits
00:0000C0FC 206B000E        	  2875: 	MOVEA.l	switch_addr(a3),a0	; point to the switch
00:0000C100 C010            	  2876: 	AND.b		(a0),d0			; get and mask the switch bits
00:0000C102 D040            	  2877: 	ADD.w		d0,d0				; make into a word pointer
                            	  2878: 
00:0000C104 41FA1930        	  2879: 	LEA		mess_table(pc),a0		; point to the mesage language table
00:0000C108 30300000        	  2880: 	MOVE.w	(a0,d0.w),d0		; get the offset to the messages
00:0000C10C 41F00000        	  2881: 	LEA		(a0,d0.w),a0		; get the pointer to the messages
                            	  2882: 
00:0000C110 321F            	  2883: 	MOVE.w	(sp)+,d1			; restore the message index
                            	  2884: 
00:0000C112 32301000        	  2885: 	MOVE.w	(a0,d1.w),d1		; get the offset to the message
00:0000C116 41F01000        	  2886: 	LEA		(a0,d1.w),a0		; get the pointer to the message
00:0000C11A 43FA189C        	  2887: 	LEA		char_set(pc),a1		; get the pointer to the character JSRL table
00:0000C11E 7000            	  2888: 	MOVEQ		#0,d0				; clear the longword
                            	  2889: add_char_loop
00:0000C120 1018            	  2890: 	MOVE.b	(a0)+,d0			; get the next character
00:0000C122 671A            	  2891: 	BEQ.s		exit_add_message		; if null just exit
                            	  2892: 
                            	  2893: ; convert the character and add it to the vector list
                            	  2894: 
00:0000C124 903C0020        	  2895: 	SUB.b		#' ',d0			; subtract [SPACE]
00:0000C128 670C            	  2896: 	BEQ.s		add_the_char		; if it was [SPACE] go add it
                            	  2897: 
00:0000C12A 903C000F        	  2898: 	SUB.b		#15,d0			; convert a number
00:0000C12E 0C00000B        	  2899: 	CMPI.b	#11,d0			; compare with converted "9"+1
00:0000C132 6502            	  2900: 	BCS.s		add_the_char		; if it was <="9" go add it
                            	  2901: 
00:0000C134 5F00            	  2902: 	SUBQ.b	#7,d0				; else convert "A" to "Z"
                            	  2903: add_the_char
00:0000C136 D000            	  2904: 	ADD.b		d0,d0				; ; 2
00:0000C138 38F10000        	  2905: 	MOVE.w	(a1,d0.w),(a4)+		; copy the JSRL to the vector list
00:0000C13C 60E2            	  2906: 	BRA.s		add_char_loop		; loop for next
                            	  2907: 
                            	  2908: exit_add_message
00:0000C13E 4E75            	  2909: 	RTS
                            	  2910: 
                            	  2911: 
                            	  2912: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2913: ;
                            	  2914: ; timer interrupt. the timer interrupt should be triggered every 16ms
                            	  2915: 
                            	  2916: timer_interrupt
00:0000C140 522B001D        	  2917: 	ADDQ.b	#1,sixteen_ms(a3)		; increment the 16ms counter
00:0000C144 4E73            	  2918: 	RTE
                            	  2919: 
                            	  2920: 
                            	  2921: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2922: ;
                            	  2923: ; add "PLAYER x" to the vector list
                            	  2924: 
                            	  2925: player_x:
00:0000C146 7201            	  2926: 	MOVEQ		#1,d1				; message 1 - "PLAYER "
00:0000C148 618E            	  2927: 	BSR		add_message			; add message d1 to the display list
                            	  2928: player_n
00:0000C14A 7201            	  2929: 	MOVEQ		#1,d1				; make 0,1 into 1,2
00:0000C14C D22B0018        	  2930: 	ADD.b		player_idx(a3),d1		; add the player index
00:0000C150 600C            	  2931: 	BRA.s		add_hex_chr			; write a hex character to the vector list
                            	  2932: 							; and return
                            	  2933: 
                            	  2934: 
                            	  2935: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2936: ;
                            	  2937: ; if suppress_0 <> 0 write a leading zero suppressed hex character to the vector list
                            	  2938: 
                            	  2939: add_sup_hex_chr
00:0000C152 4A2B0016        	  2940: 	TST.b		suppress_0(a3)		; test the leading zero suppressed flag
00:0000C156 6706            	  2941: 	BEQ.s		add_hex_chr			; if not suppressed go write a hex character
                            	  2942: 							; to the vector list
                            	  2943: 
                            	  2944: ; if supressed write a [SPACE] instead of a "0"
                            	  2945: 
00:0000C158 700F            	  2946: 	MOVEQ		#$0F,d0			; set the nibble mask
00:0000C15A C240            	  2947: 	AND.w		d0,d1				; mask the low nibble
00:0000C15C 670A            	  2948: 	BEQ.s		add_sup_zero		; if it is zero go write a space
                            	  2949: 
                            	  2950: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2951: ;
                            	  2952: ; write a hex character d1 to the vector list
                            	  2953: 
                            	  2954: add_hex_chr
00:0000C15E C27C000F        	  2955: 	AND.w		#$0F,d1			; mask the low nibble
00:0000C162 5241            	  2956: 	ADDQ.w	#1,d1				; add 1 to pass the [SPACE] character
00:0000C164 422B0016        	  2957: 	CLR.b		suppress_0(a3)		; clear the leading zero suppressed flag
                            	  2958: add_sup_zero
00:0000C168 D241            	  2959: 	ADD.w		d1,d1				; ; 2, bytes per character
00:0000C16A 2F08            	  2960: 	MOVE.l	a0,-(sp)			; save a0
00:0000C16C 41FA184A        	  2961: 	LEA		char_set(pc),a0		; point to the character JSRL table
00:0000C170 38F01000        	  2962: 	MOVE.w	(a0,d1.w),(a4)+		; copy the character JSRL to the vector list
00:0000C174 205F            	  2963: 	MOVE.l	(sp)+,a0			; restore a0
                            	  2964: 
00:0000C176 4E75            	  2965: 	RTS
                            	  2966: 
                            	  2967: 
                            	  2968: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2969: ;
                            	  2970: ; convert the a1 address and add it to the vector list as a vector subroutine call
                            	  2971: 
                            	  2972: add_address:
00:0000C178 41FA0222        	  2973: 	LEA		vector(pc),a0		; point to the vector memory
00:0000C17C 93C8            	  2974: 	SUBA.l	a0,a1				; convert the pointer to an offset
00:0000C17E 2209            	  2975: 	MOVE.l	a1,d1				; copy the result
00:0000C180 E249            	  2976: 	LSR.w		#1,d1				; / 2
00:0000C182 C27C0FFF        	  2977: 	AND.w		#$0FFF,d1			; mask the address bits
00:0000C186 0041C000        	  2978: 	ORI.w		#JSRL,d1			; OR with vector subroutine call
00:0000C18A 38C1            	  2979: 	MOVE.w	d1,(a4)+			; copy to the vector list
00:0000C18C 4E75            	  2980: 	RTS
                            	  2981: 
                            	  2982: 
                            	  2983: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2984: ;
                            	  2985: ; add 4 ; the co-ordinate pair in d1,d2 to the list as a draw command
                            	  2986: 
                            	  2987: add_coords:
00:0000C18E 7002            	  2988: 	MOVEQ		#2,d0				; set shift count
00:0000C190 E161            	  2989: 	ASL.w		d0,d1				; x co-ordinate ; 4
00:0000C192 E162            	  2990: 	ASL.w		d0,d2				; y co-ordinate ; 4
                            	  2991: 
00:0000C194 303C0FFC        	  2992: 	MOVE.w	#$0FFC,d0			; set the co-ordinate mask
00:0000C198 C240            	  2993: 	AND.w		d0,d1				; mask the x co-ordinate
00:0000C19A C440            	  2994: 	AND.w		d0,d2				; mask the y co-ordinate
                            	  2995: 
00:0000C19C 0042A000        	  2996: 	ORI.w		#DRAW,d2			; OR in the draw command
00:0000C1A0 8253            	  2997: 	OR.w		glob_scale(a3),d1		; OR in the global scale
                            	  2998: 
00:0000C1A2 38C2            	  2999: 	MOVE.w	d2,(a4)+			; save the command/y co-ordinate to the list
00:0000C1A4 38C1            	  3000: 	MOVE.w	d1,(a4)+			; save the scale/x co-ordinate to the list
00:0000C1A6 4E75            	  3001: 	RTS
                            	  3002: 
                            	  3003: 
                            	  3004: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3005: ;
                            	  3006: ; add (d1)00,0000 to the vector list
                            	  3007: 
                            	  3008: add_single
00:0000C1A8 7400            	  3009: 	MOVEQ		#0,d2				; clear the second word
                            	  3010: 
                            	  3011: 
                            	  3012: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3013: ;
                            	  3014: ; add (A)00,(X)00 to the vector list
                            	  3015: 
                            	  3016: add_pair
00:0000C1AA 38C1            	  3017: 	MOVE.w	d1,(a4)+			; save the first word to the vector list
00:0000C1AC 38C2            	  3018: 	MOVE.w	d2,(a4)+			; save the second word to the vector list
00:0000C1AE 4E75            	  3019: 	RTS
                            	  3020: 
                            	  3021: 
                            	  3022: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3023: ;
                            	  3024: ; check the [F2], [F3] and [F4] keys. set the screen size to 640 x 480, 800 x 600 or
                            	  3025: ; 1024 x 768 if the corresponding key has been pressed
                            	  3026: 
                            	  3027: s_controls
                            	  3028: ;	MOVE.l	#$71007273,d1		; [F2], [], [F3] and [F4] keys
                            	  3029: ;	MOVEQ		#19,d0			; check for keypress
                            	  3030: ;	TRAP		#15
                            	  3031: 
                            	  3032: ;	MOVEQ		#33,d0			; set/get output window size
                            	  3033: 
                            	  3034: ;	MOVE.l	d1,d2				; copy result
                            	  3035: ;	BEQ.s		notscreen			; skip screen size if no F key
                            	  3036: 
                            	  3037: ;	MOVE.l	#$028001E0,d1		; set 640 x 480
                            	  3038: ;	TST.l		d2				; test result
                            	  3039: ;	BMI.s		setscreen			; if F2 go set window size
                            	  3040: 
                            	  3041: ;	MOVE.l	#$03200258,d1		; set 800 x 600
                            	  3042: ;	TST.w		d2				; test result
                            	  3043: ;	BMI.s		setscreen			; if F3 go set window size
                            	  3044: 
                            	  3045: 							; else was F4 so ..
                            	  3046: ;	MOVE.l	#$04000300,d1		; set 1024 x 768
                            	  3047: setscreen
                            	  3048: ;	CMP.l		scr_x(a3),d1		; compare with current screen size
                            	  3049: ;	BEQ.s		notscreen			; if already set skip setting it now
                            	  3050: 
                            	  3051: ;	TRAP		#15
                            	  3052: 
                            	  3053: notscreen
                            	  3054: ;	MOVEQ		#0,d1				; get the current window size
                            	  3055: ;	TRAP		#15
                            	  3056: 
00:0000C1B0 223C03200258    	  3057: 	move.l #$03200258,d1		; always 800x600
00:0000C1B6 27410006        	  3058: 	move.l d1,scr_x(a3)			; save the screen x and y size
00:0000C1BA 4E75            	  3059: 	rts
                            	  3060: 
                            	  3061: 
                            	  3062: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3063: ;
                            	  3064: ; setup stuff.
                            	  3065: 
                            	  3066: Initialise:
00:0000C1BC 7200            	  3067: 	moveq	#0,d1					; turn off echo
00:0000C1BE 700C            	  3068: 	moveq	#12,d0				; keyboard echo
00:0000C1C0 4E4F            	  3069: 	trap #15
                            	  3070: 
                            	  3071: ;	move.w #$FF00,d1		; clear screen
                            	  3072: ;	moveq #11,d0				; position cursor
                            	  3073: ;	trap #15
                            	  3074: 
00:0000C1C2 7211            	  3075: 	moveq #17,d1				; enable double buffering
00:0000C1C4 705C            	  3076: 	moveq	#92,d0				; set draw mode
00:0000C1C6 4E4F            	  3077: 	trap #15
                            	  3078: 
00:0000C1C8 720A            	  3079: 	moveq #10,d1				; OR mode drawing, this helps on two ways.
                            	  3080: 							; first it emulates a vector display where
                            	  3081: 							; the vectors that cross can bright up the
                            	  3082: 							; intersection and second it means we can
                            	  3083: 							; forget depth sorting of objects
00:0000C1CA 705C            	  3084: 	moveq #92,d0				; set draw mode
00:0000C1CC 4E4F            	  3085: 	trap #15
                            	  3086: 
00:0000C1CE 47FA1D1B        	  3087: 	lea	variables(pc),a3	; get the pointer to the variables base
00:0000C1D2 4BEB00F3        	  3088: 	lea player_1(a3),a5		; get the pointer to player one's variables
00:0000C1D6 4DEB01F7        	  3089: 	lea player_2(a3),a6		; get the pointer to player two's variables
                            	  3090: 
                            	  3091: 										; clear all the variable space
00:0000C1DA 7000            	  3092: 	moveq #0,d0				; clear the longword
00:0000C1DC 41EB0012        	  3093: 	lea hiscore_y(a3),a0		; get the start address
00:0000C1E0 43EB027B        	  3094: 	lea p_2_end(a3),a1			; get the end address
                            	  3095: clear_loop
00:0000C1E4 30C0            	  3096: 	move.w d0,(a0)+			; clear the word
00:0000C1E6 B1C9            	  3097: 	cmpa.l a1,a0				; compare the addresses
00:0000C1E8 66FA            	  3098: 	bne.s clear_loop		; if not at end loop
                            	  3099: 
00:0000C1EA 7008            	  3100: 	moveq #8,d0					; get the time in 1/100 ths seconds
00:0000C1EC 4E4F            	  3101: 	trap #15
                            	  3102: 
00:0000C1EE 0A81DEADBEEF    	  3103: 	eori.l	#$DEADBEEF,d1		; EOR with the initial PRNG seed, this must
                            	  3104: 													; result in any value but zero
00:0000C1F4 4EB90000244A    	  3105: 	jsr InitRand
00:0000C1FA 2741000A        	  3106: 	move.l	d1,PRNlword(a3)		; save the initial PRNG seed
                            	  3107: 
00:0000C1FE 7203            	  3108: 	moveq #3,d1					; get the switches address
00:0000C200 7020            	  3109: 	moveq #32,d0				; simulator hardware
00:0000C202 4E4F            	  3110: 	trap #15
                            	  3111: 
00:0000C204 2741000E        	  3112: 	move.l d1,switch_addr(a3)	; save the switches address
                            	  3113: 
                            	  3114: 	;LEA		timer_interrupt(pc),a0	; get the timer interrupt routine address
                            	  3115: 	;MOVE.l	a0,$64.w			; save the timer interrupt as interrupt 1
                            	  3116: 
                            	  3117: 	;MOVEQ		#6,d1				; set auto IRQ
                            	  3118: 	;MOVEQ		#$81,d2			; enable IRQ 1
                            	  3119: 	;MOVEQ		#16,d3			; set the time in ms
                            	  3120: 	;MOVEQ		#32,d0			; set simulator hardware
                            	  3121: 	;TRAP		#15
                            	  3122: 
                            	  3123: 	;MOVEQ		#5,d1				; enable exceptions
                            	  3124: 	;MOVEQ		#32,d0			; set simulator hardware
                            	  3125: 	;TRAP		#15
                            	  3126: 
00:0000C208 49FA0192        	  3127: 	lea vector(pc),a4			; get the pointer to the vector list RAM
00:0000C20C 38BCB000        	  3128: 	move.w #HALT,(a4)			; add HALT to the vector list
                            	  3129: 
00:0000C210 61001B4D        	  3130: 	bsr sound_init				; initialise the sounds
                            	  3131: 
00:0000C214 70FF            	  3132: 	moveq #-1,d0					; flag high score done
00:0000C216 17400176        	  3133: 	move.b d0,p1_high(a3)	; save the player 1 highscore flag
00:0000C21A 1740027A        	  3134: 	move.b d0,p2_high(a3)	; save the player 2 highscore flag
                            	  3135: 
00:0000C21E 43FA1CBE        	  3136: 	lea filename(pc),a1		; point to the highscore filename
00:0000C222 7033            	  3137: 	moveq	#51,d0					; open existing file
00:0000C224 4E4F            	  3138: 	trap #15
                            	  3139: 
00:0000C226 4A40            	  3140: 	tst.w d0							; check for errors
00:0000C228 6706            	  3141: 	beq.s read_hi					; if no error go read the file
                            	  3142: 
00:0000C22A 0C400003        	  3143: 	cmpi.w #3,d0					; compare with read only
00:0000C22E 660A            	  3144: 	bne.s	close_all_2			; if not read only go close all files
                            	  3145: 
                            	  3146: read_hi
00:0000C230 43EB0027        	  3147: 	lea hiscores(a3),a1		; point to the highscore tables
00:0000C234 7432            	  3148: 	moveq	#50,d2					; set the table length
00:0000C236 7035            	  3149: 	moveq	#53,d0					; read file
00:0000C238 4E4F            	  3150: 	trap #15
                            	  3151: 
                            	  3152: close_all_2
00:0000C23A 7032            	  3153: 	moveq #50,d0					; close all files
00:0000C23C 4E4F            	  3154: 	trap #15
                            	  3155: 
00:0000C23E 4E75            	  3156: 	rts
                            	  3157: 
                            	  3158: 
                            	  3159: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3160: ;
                            	  3161: ; This is the code that generates the pseudo random sequence. A seed word located in
                            	  3162: ; PRNlword(a3) is loaded into a register before being operated on to generate the
                            	  3163: ; next number in the sequence. This number is then saved as the seed for the next
                            	  3164: ; time it's called.
                            	  3165: ;
                            	  3166: ; This code is adapted from the 32 bit version of RND(n) used in EhBASIC68. Taking
                            	  3167: ; the 19th next number is slower but helps to hide the shift and add nature of this
                            	  3168: ; generator as can be seen from analysing the output.
                            	  3169: 
                            	  3170: gen_prng:
00:0000C240 2F01            	  3171: 	move.l d1,-(a7)
00:0000C242 4EB9000024B4    	  3172: 	jsr RandGetNum
00:0000C248 2741000A        	  3173: 	move.l d1,PRNlword(a3)
00:0000C24C 221F            	  3174: 	move.l (a7)+,d1
00:0000C24E 4E75            	  3175: 	rts
                            	  3176: 
                            	  3177: ;	MOVEM.l	d0-d2,-(sp)			; save d0, d1 and d2
                            	  3178: ;	MOVE.l	PRNlword(a3),d0		; get current seed longword
                            	  3179: ;	MOVEQ		#$AF-$100,d1		; set the EOR value
                            	  3180: ;	MOVEQ		#18,d2			; do this 19 times
                            	  3181: Ninc0
                            	  3182: ;	ADD.l		d0,d0				; shift left 1 bit
                            	  3183: ;	BCC.s		Ninc1				; if bit not set skip feedback
                            	  3184: 
                            	  3185: ;	EOR.b		d1,d0				; do Galois LFSR feedback
                            	  3186: Ninc1
                            	  3187: ;	DBF		d2,Ninc0			; loop
                            	  3188: 
                            	  3189: ;	MOVE.l	d0,PRNlword(a3)		; save back to seed longword
                            	  3190: ;	MOVEM.l	(sp)+,d0-d2			; restore d0, d1 and d2
                            	  3191: 
                            	  3192: ;	RTS
                            	  3193: 
                            	  3194: 
                            	  3195: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3196: ;
                            	  3197: ; vector generator subroutines. this code emulates the atari digital vector generator
                            	  3198: ; and truns the vector draw list into lines on the screen
                            	  3199: 
                            	  3200: ; vector subroutine return code. if a vector subroutine is called the address for this
                            	  3201: ; code is pushed on the stack
                            	  3202: 
                            	  3203: op_rtsvec:
00:0000C250 285F            	  3204: 	MOVE.l	(sp)+,a4			; restore the vector pointer
                            	  3205: 
                            	  3206: ; evaluate the next vector command. the command is pointed to by (a4) and execution
                            	  3207: ; will continue until an RTSL or HALT command is encountered. this is a subset of the
                            	  3208: ; battlezone DVG command set
                            	  3209: 
                            	  3210: do_vector:
00:0000C252 381C            	  3211: 	MOVE.w	(a4)+,d4			; get the vector opcode
00:0000C254 3004            	  3212: 	MOVE.w	d4,d0				; copy it
00:0000C256 ED58            	  3213: 	ROL.w		#6,d0				; shift opcode bits to b5-b2
00:0000C258 0240003C        	  3214: 	ANDI.w	#$003C,d0			; mask the opcode bits
00:0000C25C 4EFB0076        	  3215: 	JMP		vector_base(pc,d0.w)	; go do the vector opcode
                            	  3216: 
                            	  3217: ; call vector subroutine, push the vector pointer and then the vector subroutine
                            	  3218: ; address as the return address then do jump to vector address
                            	  3219: 
                            	  3220: op_call
00:0000C260 2F0C            	  3221: 	MOVE.l	a4,-(sp)			; save the vector pointer
00:0000C262 487AFFEC        	  3222: 	PEA		op_rtsvec(pc)		; push vector return code as return address
                            	  3223: 
                            	  3224: ; jump to vector, the address is a thirteen bit address
                            	  3225: 
                            	  3226: op_jump
00:0000C266 C87C0FFF        	  3227: 	AND.w		#$0FFF,d4			; mask the address
00:0000C26A D844            	  3228: 	ADD.w		d4,d4				; make it a word address
00:0000C26C 49FA012E        	  3229: 	LEA		vector(pc),a4		; reset the vector RAM pointer
00:0000C270 49F44000        	  3230: 	LEA		(a4,d4.w),a4		; calculate the new address
00:0000C274 60DC            	  3231: 	BRA.s		do_vector			; go do the next vector
                            	  3232: 
                            	  3233: ; relative vector routine. co-ordinates are ten bit with sign numbers
                            	  3234: 
                            	  3235: op_vctr
00:0000C276 3E3C07FF        	  3236: 	MOVE.w	#$07FF,d7			; set the co-ordinate and sign bits mask
00:0000C27A 720A            	  3237: 	MOVEQ		#10,d1			; set the sign bit number
                            	  3238: 
00:0000C27C C847            	  3239: 	AND.w		d7,d4				; mask the y co-ordinate and sign
00:0000C27E 0384            	  3240: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000C280 6702            	  3241: 	BEQ.s		no_neg_y11			; if positive skip the negate
                            	  3242: 
00:0000C282 4444            	  3243: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3244: no_neg_y11
                            	  3245: 
00:0000C284 361C            	  3246: 	MOVE.w	(a4)+,d3			; get the second word
00:0000C286 3403            	  3247: 	MOVE.w	d3,d2				; copy the intensity
                            	  3248: 
00:0000C288 C647            	  3249: 	AND.w		d7,d3				; mask the x co-ordinate and sign
00:0000C28A 0383            	  3250: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000C28C 6702            	  3251: 	BEQ.s		no_neg_x11			; if positive skip the negate
                            	  3252: 
00:0000C28E 4443            	  3253: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3254: no_neg_x11
                            	  3255: 
00:0000C290 E440            	  3256: 	ASR.w		#2,d0				; make the scale count from the masked JMP
00:0000C292 4440            	  3257: 	NEG.w		d0				; make negative
00:0000C294 D07C0009        	  3258: 	ADD.w		#9,d0				; make 9 - scale
                            	  3259: 
00:0000C298 E063            	  3260: 	ASR.w		d0,d3				; scale the x co-ordinate
00:0000C29A E064            	  3261: 	ASR.w		d0,d4				; scale the y co-ordinate
                            	  3262: 
00:0000C29C 600000A2        	  3263: 	BRA		end_vector			; go do the end of the vector draw
                            	  3264: 
                            	  3265: ; set scale and position the beam
                            	  3266: 
                            	  3267: op_abs
00:0000C2A0 3E3C07FF        	  3268: 	MOVE.w	#$07FF,d7			; set the co-ordinate and sign bits mask
00:0000C2A4 720A            	  3269: 	MOVEQ		#10,d1			; set the sign bit number
                            	  3270: 
00:0000C2A6 C847            	  3271: 	AND.w		d7,d4				; mask the y co-ordinate and sign
00:0000C2A8 0384            	  3272: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000C2AA 6702            	  3273: 	BEQ.s		no_neg_y10			; if positive skip the negate
                            	  3274: 
00:0000C2AC 4444            	  3275: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3276: no_neg_y10
                            	  3277: 
00:0000C2AE 361C            	  3278: 	MOVE.w	(a4)+,d3			; get the second word
00:0000C2B0 3403            	  3279: 	MOVE.w	d3,d2				; copy the scale
                            	  3280: 
00:0000C2B2 C647            	  3281: 	AND.w		d7,d3				; mask the x co-ordinate and sign
00:0000C2B4 0383            	  3282: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000C2B6 6702            	  3283: 	BEQ.s		no_neg_x10			; if positive skip the negate
                            	  3284: 
00:0000C2B8 4443            	  3285: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3286: no_neg_x10
                            	  3287: 
                            	  3288: ; now convert the scale so it is b15 = direction flag and the rest is the shift count
                            	  3289: 
00:0000C2BA E95A            	  3290: 	ROL.w		#4,d2				; move the scale bits to bits 3 to 0
00:0000C2BC 0242000F        	  3291: 	ANDI.w	#$000F,d2			; mask the scale bits
00:0000C2C0 08820003        	  3292: 	BCLR.l	#3,d2				; clear the top bit
00:0000C2C4 6706            	  3293: 	BEQ.s		not_right			; ship right shift adjust
                            	  3294: 
00:0000C2C6 4442            	  3295: 	NEG.w		d2				; make negative
00:0000C2C8 D47C8008        	  3296: 	ADD.w		#$8008,d2			; add offset and flag right shift
                            	  3297: not_right
00:0000C2CC 3682            	  3298: 	MOVE.w	d2,(a3)			; save the global scal, offset is zero	##
                            	  3299: ;##	MOVE.w	d2,vector_s(a3)		; save the global scale
                            	  3300: 
00:0000C2CE 7056            	  3301: 	MOVEQ		#86,d0			; set move to x,y
00:0000C2D0 6000009E        	  3302: 	BRA		vector_move			; go do the move
                            	  3303: 
                            	  3304: vector_base
00:0000C2D4 4E75            	  3305: 	RTS						; treat $0xxx as HALT, quit processing vectors
00:0000C2D6 4E71            	  3306: 	NOP						; filler
00:0000C2D8 6000FF9C        	  3307: 	BRA.w		op_vctr			; scale 1 relative long vector
00:0000C2DC 6000FF98        	  3308: 	BRA.w		op_vctr			; scale 2 relative long vector
00:0000C2E0 6000FF94        	  3309: 	BRA.w		op_vctr			; scale 3 relative long vector
00:0000C2E4 6000FF90        	  3310: 	BRA.w		op_vctr			; scale 4 relative long vector
00:0000C2E8 6000FF8C        	  3311: 	BRA.w		op_vctr			; scale 5 relative long vector
00:0000C2EC 6000FF88        	  3312: 	BRA.w		op_vctr			; scale 6 relative long vector
00:0000C2F0 6000FF84        	  3313: 	BRA.w		op_vctr			; scale 7 relative long vector
00:0000C2F4 6000FF80        	  3314: 	BRA.w		op_vctr			; scale 8 relative long vector
00:0000C2F8 6000FF7C        	  3315: 	BRA.w		op_vctr			; scale 9 relative long vector
00:0000C2FC 6000FFA2        	  3316: 	BRA.w		op_abs			; set scale and position beam
00:0000C300 4E75            	  3317: 	RTS						; do HALT, quit processing vectors
00:0000C302 4E71            	  3318: 	NOP						; filler
00:0000C304 6000FF5A        	  3319: 	BRA.w		op_call			; call vector subroutine
00:0000C308 4E75            	  3320: 	RTS						; return from vector subroutine
00:0000C30A 4E71            	  3321: 	NOP						; filler
00:0000C30C 6000FF58        	  3322: 	BRA.w		op_jump			; do vector jump
                            	  3323: ;##	BRA.w		op_short			; draw relative short vector
                            	  3324: 
                            	  3325: ; do relative short vector
                            	  3326: 
                            	  3327: op_short
00:0000C310 3E04            	  3328: 	MOVE.w	d4,d7				; copy the opcode
00:0000C312 02470808        	  3329: 	ANDI.w	#$0808,d7			; mask the scale bits	0000 x000 0000 y000
00:0000C316 E94F            	  3330: 	LSL.w		#4,d7				; shift bits to b8,b0	x000 0000 y000 0000
00:0000C318 E31F            	  3331: 	ROL.b		#1,d7				; shift bits together	x000 0000 0000 000y
00:0000C31A E35F            	  3332: 	ROL.w		#1,d7				; shift bits to b1,b0	0000 0000 0000 00yx
00:0000C31C 5247            	  3333: 	ADDQ.w	#1,d7				; make 1 to 4
                            	  3334: 
00:0000C31E 1F04            	  3335: 	MOVE.b	d4,-(sp)			; push the intensity byte
00:0000C320 341F            	  3336: 	MOVE.w	(sp)+,d2			; pull the word, intensity now in high byte
                            	  3337: 
00:0000C322 7007            	  3338: 	MOVEQ		#7,d0				; set the co-ordinate and sign bits mask
00:0000C324 7202            	  3339: 	MOVEQ		#2,d1				; set the sign bit number
                            	  3340: 
00:0000C326 3604            	  3341: 	MOVE.w	d4,d3				; copy the opcode for the x co-ordinate
                            	  3342: 
00:0000C328 3F04            	  3343: 	MOVE.w	d4,-(sp)			; push the opcode
00:0000C32A 181F            	  3344: 	MOVE.b	(sp)+,d4			; pull the y co-ordinate byte
                            	  3345: 
00:0000C32C C840            	  3346: 	AND.w		d0,d4				; mask the y co-ordinate and sign bits
00:0000C32E 0384            	  3347: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000C330 6702            	  3348: 	BEQ.s		no_neg_y2			; if positive just exit
                            	  3349: 
00:0000C332 4444            	  3350: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3351: no_neg_y2
                            	  3352: 
00:0000C334 C640            	  3353: 	AND.w		d0,d3				; mask the x co-ordinate and sign bits
00:0000C336 0383            	  3354: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000C338 6702            	  3355: 	BEQ.s		no_neg_x2			; if positive just exit
                            	  3356: 
00:0000C33A 4443            	  3357: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3358: no_neg_x2
                            	  3359: 
00:0000C33C EF63            	  3360: 	ASL.w		d7,d3				; scale the x magnitude
00:0000C33E EF64            	  3361: 	ASL.w		d7,d4				; scale the y magnitude
                            	  3362: 
                            	  3363: end_vector
00:0000C340 3E13            	  3364: 	MOVE.w	(a3),d7			; get the global scale, offset is zero	##
                            	  3365: ;##	MOVE.w	vector_s(a3),d7		; get the global scale
00:0000C342 6A06            	  3366: 	BPL.s		shift_left			; if positive go shift left
                            	  3367: 
                            	  3368: 							; else shift right
00:0000C344 EE63            	  3369: 	ASR.w		d7,d3				; scale the x co-ordinate
00:0000C346 EE64            	  3370: 	ASR.w		d7,d4				; scale the y co-ordinate
00:0000C348 6004            	  3371: 	BRA.s		last_vector			; continue
                            	  3372: 
                            	  3373: shift_left
00:0000C34A EF63            	  3374: 	ASL.w		d7,d3				; scale the x co-ordinate
00:0000C34C EF64            	  3375: 	ASL.w		d7,d4				; scale the y co-ordinate
                            	  3376: last_vector
00:0000C34E D66B0002        	  3377: 	ADD.w		local_x(a3),d3		; add x the co-ordinate to vector x
00:0000C352 D86B0004        	  3378: 	ADD.w		local_y(a3),d4		; add y the co-ordinate to vector y
                            	  3379: 
00:0000C356 7056            	  3380: 	MOVEQ		#86,d0			; set move to x,y
                            	  3381: 
00:0000C358 C47CF000        	  3382: 	AND.w		#$F000,d2			; d2 is intensity
00:0000C35C 6712            	  3383: 	BEQ.s		vector_move			; if zero intensity just do move
                            	  3384: 
00:0000C35E 7200            	  3385: 	MOVEQ		#0,d1				; clear the longword
00:0000C360 3F02            	  3386: 	MOVE.w	d2,-(sp)			; copy the intensity
00:0000C362 141F            	  3387: 	MOVE.b	(sp)+,d2			; to the low byte byte
00:0000C364 1202            	  3388: 	MOVE.b	d2,d1				; copy the intensity byte
00:0000C366 4841            	  3389: 	SWAP		d1				; move to the high word
00:0000C368 3202            	  3390: 	MOVE.w	d2,d1				; get the other word
                            	  3391: 
00:0000C36A 7050            	  3392: 	MOVEQ		#80,d0			; set pen colour
00:0000C36C 4E4F            	  3393: 	TRAP		#15
                            	  3394: 
00:0000C36E 7055            	  3395: 	MOVEQ		#85,d0			; set draw to x,y
                            	  3396: vector_move
00:0000C370 3404            	  3397: 	MOVE.w	d4,d2				; copy the y co-ordinate
00:0000C372 3203            	  3398: 	MOVE.w	d3,d1				; copy the x co-ordinate
                            	  3399: ;##	BRA.s		display_vector		; display the vector
                            	  3400: 
                            	  3401: 
                            	  3402: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3403: ;
                            	  3404: ; display vector and do next. takes the vector, scales the x and y to the current
                            	  3405: ; screen size - does axis inversion if needed - and then displays it. set up the
                            	  3406: ; graphics function in d0, x co-ordinate in d1.w and y co-ordinate in d2.w
                            	  3407: 
                            	  3408: ;##display_vector
00:0000C374 37410002        	  3409: 	MOVE.w	d1,local_x(a3)		; save as new local x co-ordinate
00:0000C378 37420004        	  3410: 	MOVE.w	d2,local_y(a3)		; save as new local y co-ordinate
                            	  3411: 
00:0000C37C 760A            	  3412: 	MOVEQ		#10,d3			; set the shift count for / 1024
                            	  3413: 
00:0000C37E C3EB0006        	  3414: 	MULS.w	scr_x(a3),d1		; x ; screen x
00:0000C382 E6A1            	  3415: 	ASR.l		d3,d1				; / 1024
                            	  3416: 
00:0000C384 947C0080        	  3417: 	SUB.w		#128,d2			; subtract offset to centre vertically
00:0000C388 C5EB0006        	  3418: 	MULS.w	scr_x(a3),d2		; y ; screen x
00:0000C38C E6A2            	  3419: 	ASR.l		d3,d2				; / 1024
00:0000C38E 4442            	  3420: 	NEG.w		d2				; y = 0 is top of screen remember
00:0000C390 D46B0008        	  3421: 	ADD.w		scr_y(a3),d2		; + screen y
00:0000C394 5342            	  3422: 	SUBQ.w	#1,d2				; - 1
                            	  3423: 
00:0000C396 4E4F            	  3424: 	TRAP		#15				; do move or draw
                            	  3425: 
00:0000C398 6000FEB8        	  3426: 	BRA		do_vector			; go do the next vector opcode
                            	  3427: 
                            	  3428: 
                            	  3429: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3430: ;
                            	  3431: ; vector commands
                            	  3432: 
                            	  3433: REL1		EQU $1000				; draw relative
                            	  3434: REL2		EQU $2000				; draw relative
                            	  3435: REL3		EQU $3000				; draw relative
                            	  3436: REL4		EQU $4000				; draw relative
                            	  3437: REL5		EQU $5000				; draw relative
                            	  3438: REL6		EQU $6000				; draw relative
                            	  3439: REL7		EQU $7000				; draw relative
                            	  3440: REL8		EQU $8000				; draw relative
                            	  3441: REL9		EQU $9000				; draw relative
                            	  3442: DRAW		EQU $A000				; draw absolute
                            	  3443: HALT		EQU $B000				; halt
                            	  3444: JSRL		EQU $C000				; vector subroutine call
                            	  3445: RTSL		EQU $D000				; return from vector subroutine
                            	  3446: JMPL		EQU $E000				; vector jump
                            	  3447: SHRT		EQU $F000				; relative short vector
                            	  3448: 
                            	  3449: 
                            	  3450: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3451: ;
                            	  3452: ; vector list RAM
                            	  3453: 
                            	  3454: vector
00:0000C39C 00              	  3455: 	ds.b	$1000					; 4k of space
00:0000C39D *
                            	  3456: 
                            	  3457: 
                            	  3458: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3459: ;
                            	  3460: ; vector ROM
                            	  3461: 
                            	  3462: ; copyright symbol followed by JSR's to write "2009 LEE DAVISO", followed by a JMP to
                            	  3463: ; char_n, which is the routine for "N"
                            	  3464: 
                            	  3465: copy_msg
00:0000D39C A088            	  3466: 	dc.w	$A088,$019A,$7000,$0000,$F573,$F173,$F178,$F177
00:0000D39E 019A
00:0000D3A0 7000
00:0000D3A2 0000
00:0000D3A4 F573
00:0000D3A6 F173
00:0000D3A8 F178
00:0000D3AA F177
00:0000D3AC F577            	  3467: 	dc.w	$F577,$F578,$3180,$0200,$F875,$FD70,$F871,$FD02
00:0000D3AE F578
00:0000D3B0 3180
00:0000D3B2 0200
00:0000D3B4 F875
00:0000D3B6 FD70
00:0000D3B8 F871
00:0000D3BA FD02
00:0000D3BC CAD6            	  3468: 	dc.w	JSRL+(char_2-vector)>>1		; 2
00:0000D3BE CA81            	  3469: 	dc.w	JSRL+(char_o0-vector)>>1	; 0
00:0000D3C0 CA81            	  3470: 	dc.w	JSRL+(char_o0-vector)>>1	; 0
00:0000D3C2 CB07            	  3471: 	dc.w	JSRL+(char_9-vector)>>1		; 9
00:0000D3C4 CAD0            	  3472: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000D3C6 CA71            	  3473: 	dc.w	JSRL+(char_l-vector)>>1		; L
00:0000D3C8 CA3F            	  3474: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000D3CA CA3F            	  3475: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000D3CC CAD0            	  3476: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000D3CE CA37            	  3477: 	dc.w	JSRL+(char_d-vector)>>1		; D
00:0000D3D0 CA1C            	  3478: 	dc.w	JSRL+(char_a-vector)>>1		; A
00:0000D3D2 CAB2            	  3479: 	dc.w	JSRL+(char_v-vector)>>1		; V
00:0000D3D4 CA5E            	  3480: 	dc.w	JSRL+(char_i-vector)>>1		; I
00:0000D3D6 CA9F            	  3481: 	dc.w	JSRL+(char_s-vector)>>1		; S
00:0000D3D8 CA81            	  3482: 	dc.w	JSRL+(char_o0-vector)>>1	; O
00:0000D3DA EA7C            	  3483: 	dc.w	JMPL+(char_n-vector)>>1		; N
                            	  3484: 
                            	  3485: ; table for the various saucer and rock explosions
                            	  3486: 
                            	  3487: expl_tab
00:0000D3DC C874            	  3488: 	dc.w	JSRL+(expl_0-vector)>>1		; explosion 0
00:0000D3DE C859            	  3489: 	dc.w	JSRL+(expl_1-vector)>>1		; explosion 1
00:0000D3E0 C83A            	  3490: 	dc.w	JSRL+(expl_2-vector)>>1		; explosion 2
00:0000D3E2 C824            	  3491: 	dc.w	JSRL+(expl_3-vector)>>1		; explosion 3
                            	  3492: 
                            	  3493: ; explosion 3
                            	  3494: 
                            	  3495: expl_3
00:0000D3E4 F80D            	  3496: 	dc.w	$F80D,$F8F8,$FD0D,$F8F8,$FD09,$F8F8,$F10B,$F8F8
00:0000D3E6 F8F8
00:0000D3E8 FD0D
00:0000D3EA F8F8
00:0000D3EC FD09
00:0000D3EE F8F8
00:0000D3F0 F10B
00:0000D3F2 F8F8
00:0000D3F4 F50A            	  3497: 	dc.w	$F50A,$F8F8,$F908,$F8F8,$F309,$F8F8,$F30D,$F8F8
00:0000D3F6 F8F8
00:0000D3F8 F908
00:0000D3FA F8F8
00:0000D3FC F309
00:0000D3FE F8F8
00:0000D400 F30D
00:0000D402 F8F8
00:0000D404 5480            	  3498: 	dc.w	$5480,$0600,$F8F8,$F10F,$F8F8,RTSL
00:0000D406 0600
00:0000D408 F8F8
00:0000D40A F10F
00:0000D40C F8F8
00:0000D40E D000
                            	  3499: 
                            	  3500: ; explosion 2
                            	  3501: 
                            	  3502: expl_2
00:0000D410 3000            	  3503: 	dc.w	$3000,$0780,$F8F8,$3780,$0780,$F8F8,$3780,$0380
00:0000D412 0780
00:0000D414 F8F8
00:0000D416 3780
00:0000D418 0780
00:0000D41A F8F8
00:0000D41C 3780
00:0000D41E 0380
00:0000D420 F8F8            	  3504: 	dc.w	$F8F8,$40E0,$02A0,$F8F8,$35C0,$0380,$F8F8,$3380
00:0000D422 40E0
00:0000D424 02A0
00:0000D426 F8F8
00:0000D428 35C0
00:0000D42A 0380
00:0000D42C F8F8
00:0000D42E 3380
00:0000D430 0000            	  3505: 	dc.w	$0000,$F8F8,$42A0,$00E0,$F8F8,$42A0,$04E0,$F8F8
00:0000D432 F8F8
00:0000D434 42A0
00:0000D436 00E0
00:0000D438 F8F8
00:0000D43A 42A0
00:0000D43C 04E0
00:0000D43E F8F8
00:0000D440 44E0            	  3506: 	dc.w	$44E0,$0780,$F8F8,$40E0,$06A0,$F8F8,RTSL
00:0000D442 0780
00:0000D444 F8F8
00:0000D446 40E0
00:0000D448 06A0
00:0000D44A F8F8
00:0000D44C D000
                            	  3507: 
                            	  3508: ; explosion 1
                            	  3509: 
                            	  3510: expl_1
00:0000D44E F807            	  3511: 	dc.w	$F807,$F8F8,$FF07,$F8F8,$FF03,$F8F8,$40C0,$0240
00:0000D450 F8F8
00:0000D452 FF07
00:0000D454 F8F8
00:0000D456 FF03
00:0000D458 F8F8
00:0000D45A 40C0
00:0000D45C 0240
00:0000D45E F8F8            	  3512: 	dc.w	$F8F8,$3580,$0300,$F8F8,$FB00,$F8F8,$4240,$00C0
00:0000D460 3580
00:0000D462 0300
00:0000D464 F8F8
00:0000D466 FB00
00:0000D468 F8F8
00:0000D46A 4240
00:0000D46C 00C0
00:0000D46E F8F8            	  3513: 	dc.w	$F8F8,$4240,$04C0,$F8F8,$44C0,$0700,$F8F8,$40C0
00:0000D470 4240
00:0000D472 04C0
00:0000D474 F8F8
00:0000D476 44C0
00:0000D478 0700
00:0000D47A F8F8
00:0000D47C 40C0
00:0000D47E 0640            	  3514: 	dc.w	$0640,$F8F8,RTSL
00:0000D480 F8F8
00:0000D482 D000
                            	  3515: 
                            	  3516: ; explosion 0
                            	  3517: 
                            	  3518: expl_0
00:0000D484 3000            	  3519: 	dc.w	$3000,$0680,$F8F8,$3680,$0680,$F8F8,$3680,$0280
00:0000D486 0680
00:0000D488 F8F8
00:0000D48A 3680
00:0000D48C 0680
00:0000D48E F8F8
00:0000D490 3680
00:0000D492 0280
00:0000D494 F8F8            	  3520: 	dc.w	$F8F8,$3140,$03C0,$F8F8,$3540,$0280,$F8F8,$3280
00:0000D496 3140
00:0000D498 03C0
00:0000D49A F8F8
00:0000D49C 3540
00:0000D49E 0280
00:0000D4A0 F8F8
00:0000D4A2 3280
00:0000D4A4 0000            	  3521: 	dc.w	$0000,$F8F8,$33C0,$0140,$F8F8,$33C0,$0540,$F8F8
00:0000D4A6 F8F8
00:0000D4A8 33C0
00:0000D4AA 0140
00:0000D4AC F8F8
00:0000D4AE 33C0
00:0000D4B0 0540
00:0000D4B2 F8F8
00:0000D4B4 44A0            	  3522: 	dc.w	$44A0,$0680,$F8F8,$3140,$07C0,$F8F8,RTSL
00:0000D4B6 0680
00:0000D4B8 F8F8
00:0000D4BA 3140
00:0000D4BC 07C0
00:0000D4BE F8F8
00:0000D4C0 D000
                            	  3523: 
                            	  3524: ; table for rocks
                            	  3525: 
                            	  3526: rock_tab
00:0000D4C2 C897            	  3527: 	dc.w	JSRL+(rock_0-vector)>>1		; top notch rock
00:0000D4C4 C8A3            	  3528: 	dc.w	JSRL+(rock_1-vector)>>1		; "X" rock
00:0000D4C6 C8B1            	  3529: 	dc.w	JSRL+(rock_2-vector)>>1		; bottom and left notch rock
00:0000D4C8 C8BE            	  3530: 	dc.w	JSRL+(rock_3-vector)>>1		; left and right notch rock
                            	  3531: 
                            	  3532: ; top notch rock
                            	  3533: 
                            	  3534: rock_0
00:0000D4CA F908            	  3535: 	dc.w	$F908,$F979,$FD79,$F67D,$F679,$F68F,$F08F,$F97D
00:0000D4CC F979
00:0000D4CE FD79
00:0000D4D0 F67D
00:0000D4D2 F679
00:0000D4D4 F68F
00:0000D4D6 F08F
00:0000D4D8 F97D
00:0000D4DA FA78            	  3536: 	dc.w	$FA78,$F979,$FD79,RTSL
00:0000D4DC F979
00:0000D4DE FD79
00:0000D4E0 D000
                            	  3537: 
                            	  3538: ; "X" rock
                            	  3539: 
                            	  3540: rock_1
00:0000D4E2 F10A            	  3541: 	dc.w	$F10A,$F17A,$F97D,$F57E,$F17E,$FD7D,$F679,$F67D
00:0000D4E4 F17A
00:0000D4E6 F97D
00:0000D4E8 F57E
00:0000D4EA F17E
00:0000D4EC FD7D
00:0000D4EE F679
00:0000D4F0 F67D
00:0000D4F2 FD79            	  3542: 	dc.w	$FD79,$F179,$F58B,$F38A,$F97D,RTSL
00:0000D4F4 F179
00:0000D4F6 F58B
00:0000D4F8 F38A
00:0000D4FA F97D
00:0000D4FC D000
                            	  3543: 
                            	  3544: ; bottom and left notch rock
                            	  3545: 
                            	  3546: rock_2
00:0000D4FE F80D            	  3547: 	dc.w	$F80D,$F57E,$F77A,$F37A,$F778,$F879,$F37A,$F978
00:0000D500 F57E
00:0000D502 F77A
00:0000D504 F37A
00:0000D506 F778
00:0000D508 F879
00:0000D50A F37A
00:0000D50C F978
00:0000D50E F37E            	  3548: 	dc.w	$F37E,$F07F,$F77F,$F57A,RTSL
00:0000D510 F07F
00:0000D512 F77F
00:0000D514 F57A
00:0000D516 D000
                            	  3549: 
                            	  3550: ; left and right notch rock
                            	  3551: 
                            	  3552: rock_3
00:0000D518 F009            	  3553: 	dc.w	$F009,$F17B,$F168,$F27F,$F07F,$F669,$F07F,$F778
00:0000D51A F17B
00:0000D51C F168
00:0000D51E F27F
00:0000D520 F07F
00:0000D522 F669
00:0000D524 F07F
00:0000D526 F778
00:0000D528 F77A            	  3554: 	dc.w	$F77A,$F17B,$F569,$F969,$F27F,RTSL
00:0000D52A F17B
00:0000D52C F569
00:0000D52E F969
00:0000D530 F27F
00:0000D532 D000
                            	  3555: 
                            	  3556: ; indirect saucer table
                            	  3557: 
                            	  3558: sauc_jsr
00:0000D534 C8CD            	  3559: 	dc.w	JSRL+(sauc_vec-vector)>>1	; saucer
                            	  3560: 
                            	  3561: ; saucer
                            	  3562: 
                            	  3563: sauc_vec
00:0000D536 F10E            	  3564: 	dc.w	$F10E,$F8CA,$F60B,$6000,$D680,$F6DB,$F8CA,$F2DB
00:0000D538 F8CA
00:0000D53A F60B
00:0000D53C 6000
00:0000D53E D680
00:0000D540 F6DB
00:0000D542 F8CA
00:0000D544 F2DB
00:0000D546 F2DF            	  3565: 	dc.w	$F2DF,$F2CD,$F8CD,$F6CD,$F6DF,RTSL
00:0000D548 F2CD
00:0000D54A F8CD
00:0000D54C F6CD
00:0000D54E F6DF
00:0000D550 D000
                            	  3566: 
                            	  3567: ; player ship address table
                            	  3568: 
                            	  3569: play_tab
00:0000D552 0022            	  3570: 	dc.w	play_00-play_tab
00:0000D554 003A            	  3571: 	dc.w	play_01-play_tab
00:0000D556 005E            	  3572: 	dc.w	play_02-play_tab
00:0000D558 0082            	  3573: 	dc.w	play_03-play_tab
00:0000D55A 00A6            	  3574: 	dc.w	play_04-play_tab
00:0000D55C 00C8            	  3575: 	dc.w	play_05-play_tab
00:0000D55E 00EC            	  3576: 	dc.w	play_06-play_tab
00:0000D560 0110            	  3577: 	dc.w	play_07-play_tab
00:0000D562 0134            	  3578: 	dc.w	play_08-play_tab
00:0000D564 0158            	  3579: 	dc.w	play_09-play_tab
00:0000D566 017C            	  3580: 	dc.w	play_0A-play_tab
00:0000D568 01A0            	  3581: 	dc.w	play_0B-play_tab
00:0000D56A 01C4            	  3582: 	dc.w	play_0C-play_tab
00:0000D56C 01E8            	  3583: 	dc.w	play_0D-play_tab
00:0000D56E 020C            	  3584: 	dc.w	play_0E-play_tab
00:0000D570 0230            	  3585: 	dc.w	play_0F-play_tab
00:0000D572 0254            	  3586: 	dc.w	play_10-play_tab
                            	  3587: 
                            	  3588: ; ship and thrust outlines. each ship outline is followed by its thrust outline which
                            	  3589: ; is only copied if the thrust button is pressed
                            	  3590: 
                            	  3591: play_00
00:0000D574 F60F            	  3592: 	dc.w	$F60F,$FAC8,$F9BD,$6500,$C300,$6500,$C700,$F9B9
00:0000D576 FAC8
00:0000D578 F9BD
00:0000D57A 6500
00:0000D57C C300
00:0000D57E 6500
00:0000D580 C700
00:0000D582 F9B9
00:0000D584 D000            	  3593: 	dc.w	RTSL
00:0000D586 F9CE            	  3594: 	dc.w	$F9CE,$F9CA,RTSL
00:0000D588 F9CA
00:0000D58A D000
                            	  3595: play_01
00:0000D58C 4640            	  3596: 	dc.w	$4640,$06C0,$5200,$C430,$41C0,$C620,$64B0,$C318
00:0000D58E 06C0
00:0000D590 5200
00:0000D592 C430
00:0000D594 41C0
00:0000D596 C620
00:0000D598 64B0
00:0000D59A C318
00:0000D59C 6548            	  3597: 	dc.w	$6548,$C6E0,$4220,$C1C0,RTSL
00:0000D59E C6E0
00:0000D5A0 4220
00:0000D5A2 C1C0
00:0000D5A4 D000
00:0000D5A6 50D0            	  3598: 	dc.w	$50D0,$C610,$4260,$C3C0,RTSL
00:0000D5A8 C610
00:0000D5AA 4260
00:0000D5AC C3C0
00:0000D5AE D000
                            	  3599: play_02
00:0000D5B0 4680            	  3600: 	dc.w	$4680,$0680,$43E0,$C4C0,$41A0,$C660,$6468,$C320
00:0000D5B2 0680
00:0000D5B4 43E0
00:0000D5B6 C4C0
00:0000D5B8 41A0
00:0000D5BA C660
00:0000D5BC 6468
00:0000D5BE C320
00:0000D5C0 6590            	  3601: 	dc.w	$6590,$C6C0,$4260,$C1A0,RTSL
00:0000D5C2 C6C0
00:0000D5C4 4260
00:0000D5C6 C1A0
00:0000D5C8 D000
00:0000D5CA 5090            	  3602: 	dc.w	$5090,$C630,$42C0,$C380,RTSL
00:0000D5CC C630
00:0000D5CE 42C0
00:0000D5D0 C380
00:0000D5D2 D000
                            	  3603: play_03
00:0000D5D4 46C0            	  3604: 	dc.w	$46C0,$0640,$43E0,$C520,$4160,$C680,$6418,$C328
00:0000D5D6 0640
00:0000D5D8 43E0
00:0000D5DA C520
00:0000D5DC 4160
00:0000D5DE C680
00:0000D5E0 6418
00:0000D5E2 C328
00:0000D5E4 65D0            	  3605: 	dc.w	$65D0,$C698,$4280,$C160,RTSL
00:0000D5E6 C698
00:0000D5E8 4280
00:0000D5EA C160
00:0000D5EC D000
00:0000D5EE 5060            	  3606: 	dc.w	$5060,$C630,$4320,$C340,RTSL
00:0000D5F0 C630
00:0000D5F2 4320
00:0000D5F4 C340
00:0000D5F6 D000
                            	  3607: play_04
00:0000D5F8 F70E            	  3608: 	dc.w	$F70E,$43C0,$C580,$4120,$C6A0,$6038,$C328,$6610
00:0000D5FA 43C0
00:0000D5FC C580
00:0000D5FE 4120
00:0000D600 C6A0
00:0000D602 6038
00:0000D604 C328
00:0000D606 6610
00:0000D608 C660            	  3609: 	dc.w	$C660,$42A0,$C120,RTSL
00:0000D60A 42A0
00:0000D60C C120
00:0000D60E D000
00:0000D610 5030            	  3610: 	dc.w	$5030,$C640,$4360,$C2E0,RTSL
00:0000D612 C640
00:0000D614 4360
00:0000D616 C2E0
00:0000D618 D000
                            	  3611: play_05
00:0000D61A 4720            	  3612: 	dc.w	$4720,$05C0,$4380,$C5E0,$40E0,$C6C0,$6088,$C320
00:0000D61C 05C0
00:0000D61E 4380
00:0000D620 C5E0
00:0000D622 40E0
00:0000D624 C6C0
00:0000D626 6088
00:0000D628 C320
00:0000D62A 6648            	  3613: 	dc.w	$6648,$C630,$42C0,$C0E0,RTSL
00:0000D62C C630
00:0000D62E 42C0
00:0000D630 C0E0
00:0000D632 D000
00:0000D634 5410            	  3614: 	dc.w	$5410,$C640,$43A0,$C2A0,RTSL
00:0000D636 C640
00:0000D638 43A0
00:0000D63A C2A0
00:0000D63C D000
                            	  3615: play_06
00:0000D63E 4760            	  3616: 	dc.w	$4760,$0560,$4360,$C640,$4080,$C6C0,$60D8,$C310
00:0000D640 0560
00:0000D642 4360
00:0000D644 C640
00:0000D646 4080
00:0000D648 C6C0
00:0000D64A 60D8
00:0000D64C C310
00:0000D64E 6680            	  3617: 	dc.w	$6680,$C5F0,$42C0,$C080,RTSL
00:0000D650 C5F0
00:0000D652 42C0
00:0000D654 C080
00:0000D656 D000
00:0000D658 5440            	  3618: 	dc.w	$5440,$C630,$43E0,$C240,RTSL
00:0000D65A C630
00:0000D65C 43E0
00:0000D65E C240
00:0000D660 D000
                            	  3619: play_07
00:0000D662 4780            	  3620: 	dc.w	$4780,$0500,$4320,$C680,$4040,$C6E0,$6120,$C2F8
00:0000D664 0500
00:0000D666 4320
00:0000D668 C680
00:0000D66A 4040
00:0000D66C C6E0
00:0000D66E 6120
00:0000D670 C2F8
00:0000D672 66B0            	  3621: 	dc.w	$66B0,$C5B0,$42E0,$C040,RTSL
00:0000D674 C5B0
00:0000D676 42E0
00:0000D678 C040
00:0000D67A D000
00:0000D67C 5480            	  3622: 	dc.w	$5480,$C630,$5210,$C0F0,RTSL
00:0000D67E C630
00:0000D680 5210
00:0000D682 C0F0
00:0000D684 D000
                            	  3623: play_08
00:0000D686 4780            	  3624: 	dc.w	$4780,$04C0,$42E0,$C6E0,$4000,$C6E0,$6168,$C2D8
00:0000D688 04C0
00:0000D68A 42E0
00:0000D68C C6E0
00:0000D68E 4000
00:0000D690 C6E0
00:0000D692 6168
00:0000D694 C2D8
00:0000D696 66D8            	  3625: 	dc.w	$66D8,$C568,$42E0,$C000,RTSL
00:0000D698 C568
00:0000D69A 42E0
00:0000D69C C000
00:0000D69E D000
00:0000D6A0 54B0            	  3626: 	dc.w	$54B0,$C620,$5220,$C0B0,RTSL
00:0000D6A2 C620
00:0000D6A4 5220
00:0000D6A6 C0B0
00:0000D6A8 D000
                            	  3627: play_09
00:0000D6AA 47A0            	  3628: 	dc.w	$47A0,$0460,$4280,$C720,$4440,$C6E0,$61B0,$C2B0
00:0000D6AC 0460
00:0000D6AE 4280
00:0000D6B0 C720
00:0000D6B2 4440
00:0000D6B4 C6E0
00:0000D6B6 61B0
00:0000D6B8 C2B0
00:0000D6BA 66F8            	  3629: 	dc.w	$66F8,$C520,$42E0,$C440,RTSL
00:0000D6BC C520
00:0000D6BE 42E0
00:0000D6C0 C440
00:0000D6C2 D000
00:0000D6C4 54F0            	  3630: 	dc.w	$54F0,$C610,$5230,$C080,RTSL
00:0000D6C6 C610
00:0000D6C8 5230
00:0000D6CA C080
00:0000D6CC D000
                            	  3631: play_0A
00:0000D6CE 47A0            	  3632: 	dc.w	$47A0,$0000,$4240,$C760,$4480,$C6C0,$61F0,$C280
00:0000D6D0 0000
00:0000D6D2 4240
00:0000D6D4 C760
00:0000D6D6 4480
00:0000D6D8 C6C0
00:0000D6DA 61F0
00:0000D6DC C280
00:0000D6DE 6710            	  3633: 	dc.w	$6710,$C4D8,$42C0,$C480,RTSL
00:0000D6E0 C4D8
00:0000D6E2 42C0
00:0000D6E4 C480
00:0000D6E6 D000
00:0000D6E8 4640            	  3634: 	dc.w	$4640,$C7E0,$5230,$C040,RTSL
00:0000D6EA C7E0
00:0000D6EC 5230
00:0000D6EE C040
00:0000D6F0 D000
                            	  3635: play_0B
00:0000D6F2 47A0            	  3636: 	dc.w	$47A0,$0060,$41E0,$C780,$44E0,$C6C0,$6230,$C248
00:0000D6F4 0060
00:0000D6F6 41E0
00:0000D6F8 C780
00:0000D6FA 44E0
00:0000D6FC C6C0
00:0000D6FE 6230
00:0000D700 C248
00:0000D702 6720            	  3637: 	dc.w	$6720,$C488,$42C0,$C4E0,RTSL
00:0000D704 C488
00:0000D706 42C0
00:0000D708 C4E0
00:0000D70A D000
00:0000D70C 46A0            	  3638: 	dc.w	$46A0,$C7A0,$5240,$C010,RTSL
00:0000D70E C7A0
00:0000D710 5240
00:0000D712 C010
00:0000D714 D000
                            	  3639: play_0C
00:0000D716 4780            	  3640: 	dc.w	$4780,$00C0,$4180,$C7C0,$4520,$C6A0,$6260,$C210
00:0000D718 00C0
00:0000D71A 4180
00:0000D71C C7C0
00:0000D71E 4520
00:0000D720 C6A0
00:0000D722 6260
00:0000D724 C210
00:0000D726 6728            	  3641: 	dc.w	$6728,$C438,$42A0,$C520,RTSL
00:0000D728 C438
00:0000D72A 42A0
00:0000D72C C520
00:0000D72E D000
00:0000D730 46E0            	  3642: 	dc.w	$46E0,$C760,$5240,$C430,RTSL
00:0000D732 C760
00:0000D734 5240
00:0000D736 C430
00:0000D738 D000
                            	  3643: play_0D
00:0000D73A 4780            	  3644: 	dc.w	$4780,$0100,$4120,$C7E0,$4560,$C680,$6298,$C1D0
00:0000D73C 0100
00:0000D73E 4120
00:0000D740 C7E0
00:0000D742 4560
00:0000D744 C680
00:0000D746 6298
00:0000D748 C1D0
00:0000D74A 6728            	  3645: 	dc.w	$6728,$C018,$4280,$C560,RTSL
00:0000D74C C018
00:0000D74E 4280
00:0000D750 C560
00:0000D752 D000
00:0000D754 4740            	  3646: 	dc.w	$4740,$C720,$5230,$C460,RTSL
00:0000D756 C720
00:0000D758 5230
00:0000D75A C460
00:0000D75C D000
                            	  3647: play_0E
00:0000D75E 4760            	  3648: 	dc.w	$4760,$0160,$40C0,$C7E0,$45A0,$C660,$62C0,$C190
00:0000D760 0160
00:0000D762 40C0
00:0000D764 C7E0
00:0000D766 45A0
00:0000D768 C660
00:0000D76A 62C0
00:0000D76C C190
00:0000D76E 6720            	  3649: 	dc.w	$6720,$C068,$4260,$C5A0,RTSL
00:0000D770 C068
00:0000D772 4260
00:0000D774 C5A0
00:0000D776 D000
00:0000D778 4780            	  3650: 	dc.w	$4780,$C6C0,$5230,$C490,RTSL
00:0000D77A C6C0
00:0000D77C 5230
00:0000D77E C490
00:0000D780 D000
                            	  3651: play_0F
00:0000D782 4720            	  3652: 	dc.w	$4720,$01C0,$5030,$C600,$45C0,$C620,$62E0,$C148
00:0000D784 01C0
00:0000D786 5030
00:0000D788 C600
00:0000D78A 45C0
00:0000D78C C620
00:0000D78E 62E0
00:0000D790 C148
00:0000D792 6718            	  3653: 	dc.w	$6718,$C0B0,$4220,$C5C0,RTSL
00:0000D794 C0B0
00:0000D796 4220
00:0000D798 C5C0
00:0000D79A D000
00:0000D79C 47C0            	  3654: 	dc.w	$47C0,$C660,$5210,$C4D0,RTSL
00:0000D79E C660
00:0000D7A0 5210
00:0000D7A2 C4D0
00:0000D7A4 D000
                            	  3655: play_10
00:0000D7A6 F70A            	  3656: 	dc.w	$F70A,$F8CE,$FDCD,$6300,$C100,$6700,$C100,$F9CD
00:0000D7A8 F8CE
00:0000D7AA FDCD
00:0000D7AC 6300
00:0000D7AE C100
00:0000D7B0 6700
00:0000D7B2 C100
00:0000D7B4 F9CD
00:0000D7B6 D000            	  3657: 	dc.w	RTSL
00:0000D7B8 FECD            	  3658: 	dc.w	$FECD,$FACD,RTSL
00:0000D7BA FACD
00:0000D7BC D000
                            	  3659: 
                            	  3660: ; ship outline for player lives
                            	  3661: 
                            	  3662: play_liv
00:0000D7BE F70E            	  3663: 	dc.w	$F70E,$F87A,$FD79,$6300,$7500,$6700,$7500,$F979
00:0000D7C0 F87A
00:0000D7C2 FD79
00:0000D7C4 6300
00:0000D7C6 7500
00:0000D7C8 6700
00:0000D7CA 7500
00:0000D7CC F979
00:0000D7CE 60C0            	  3664: 	dc.w	$60C0,$0280,$D09F
00:0000D7D0 0280
00:0000D7D2 D09F
                            	  3665: 
                            	  3666: ; character set
                            	  3667: 
                            	  3668: char_a						; A
00:0000D7D4 FA70            	  3669: 	dc.w	$FA70,$F272,$F672,$FE70
00:0000D7D6 F272
00:0000D7D8 F672
00:0000D7DA FE70
00:0000D7DC F906            	  3670: 	dc.w	$F906,$F872,$F602,RTSL
00:0000D7DE F872
00:0000D7E0 F602
00:0000D7E2 D000
                            	  3671: char_b						; B
00:0000D7E4 FB70            	  3672: 	dc.w	$FB70,$F073,$F571,$F570
00:0000D7E6 F073
00:0000D7E8 F571
00:0000D7EA F570
00:0000D7EC F575            	  3673: 	dc.w	$F575,$F077,$F003,$F571
00:0000D7EE F077
00:0000D7F0 F003
00:0000D7F2 F571
00:0000D7F4 F570            	  3674: 	dc.w	$F570,$F575,$F077,$F803,RTSL
00:0000D7F6 F575
00:0000D7F8 F077
00:0000D7FA F803
00:0000D7FC D000
                            	  3675: char_c						; C
00:0000D7FE FB70            	  3676: 	dc.w	$FB70,$F872,$FF06,$F872
00:0000D800 F872
00:0000D802 FF06
00:0000D804 F872
00:0000D806 F002            	  3677: 	dc.w	$F002,RTSL
00:0000D808 D000
                            	  3678: char_d						; D
00:0000D80A FB70            	  3679: 	dc.w	$FB70,$F072,$F672,$F670
00:0000D80C F072
00:0000D80E F672
00:0000D810 F670
00:0000D812 F676            	  3680: 	dc.w	$F676,$F076,$F803,RTSL
00:0000D814 F076
00:0000D816 F803
00:0000D818 D000
                            	  3681: char_e						; E
00:0000D81A FB70            	  3682: 	dc.w	$FB70,$F872,$F705,$F077
00:0000D81C F872
00:0000D81E F705
00:0000D820 F077
00:0000D822 F700            	  3683: 	dc.w	$F700,$F872,$F002,RTSL
00:0000D824 F872
00:0000D826 F002
00:0000D828 D000
                            	  3684: char_f						; F
00:0000D82A FB70            	  3685: 	dc.w	$FB70,$F872,$F705,$F077
00:0000D82C F872
00:0000D82E F705
00:0000D830 F077
00:0000D832 F700            	  3686: 	dc.w	$F700,$F803,RTSL
00:0000D834 F803
00:0000D836 D000
                            	  3687: char_g						; G
00:0000D838 FB70            	  3688: 	dc.w	$FB70,$F872,$F670,$F606
00:0000D83A F872
00:0000D83C F670
00:0000D83E F606
00:0000D840 F072            	  3689: 	dc.w	$F072,$F670,$F876,$F803
00:0000D842 F670
00:0000D844 F876
00:0000D846 F803
00:0000D848 D000            	  3690: 	dc.w	RTSL
                            	  3691: char_h						; H
00:0000D84A FB70            	  3692: 	dc.w	$FB70,$F700,$F872,$F300
00:0000D84C F700
00:0000D84E F872
00:0000D850 F300
00:0000D852 FF70            	  3693: 	dc.w	$FF70,$F002,RTSL
00:0000D854 F002
00:0000D856 D000
                            	  3694: char_i						; I
00:0000D858 F872            	  3695: 	dc.w	$F872,$F006,$FB70,$F002
00:0000D85A F006
00:0000D85C FB70
00:0000D85E F002
00:0000D860 F876            	  3696: 	dc.w	$F876,$FF03,RTSL
00:0000D862 FF03
00:0000D864 D000
                            	  3697: char_j						; J
00:0000D866 F200            	  3698: 	dc.w	$F200,$F672,$F072,$FB70
00:0000D868 F672
00:0000D86A F072
00:0000D86C FB70
00:0000D86E FF01            	  3699: 	dc.w	$FF01,RTSL
00:0000D870 D000
                            	  3700: char_k						; K
00:0000D872 FB70            	  3701: 	dc.w	$FB70,$F003,$F777,$F773
00:0000D874 F003
00:0000D876 F777
00:0000D878 F773
00:0000D87A F003            	  3702: 	dc.w	$F003,RTSL
00:0000D87C D000
                            	  3703: char_l						; L
00:0000D87E FB00            	  3704: 	dc.w	$FB00,$FF70,$F872,$F002,RTSL
00:0000D880 FF70
00:0000D882 F872
00:0000D884 F002
00:0000D886 D000
                            	  3705: char_m						; M
00:0000D888 FB70            	  3706: 	dc.w	$FB70,$F672,$F272,$FF70
00:0000D88A F672
00:0000D88C F272
00:0000D88E FF70
00:0000D890 F002            	  3707: 	dc.w	$F002,RTSL
00:0000D892 D000
                            	  3708: char_n						; N
00:0000D894 FB70            	  3709: 	dc.w	$FB70,$FF72,$FB70,$FF01,RTSL
00:0000D896 FF72
00:0000D898 FB70
00:0000D89A FF01
00:0000D89C D000
                            	  3710: char_o0						; O,0
00:0000D89E FB70            	  3711: 	dc.w	$FB70,$F872,$FF70,$F876
00:0000D8A0 F872
00:0000D8A2 FF70
00:0000D8A4 F876
00:0000D8A6 F803            	  3712: 	dc.w	$F803,RTSL
00:0000D8A8 D000
                            	  3713: char_p						; P
00:0000D8AA FB70            	  3714: 	dc.w	$FB70,$F872,$F770,$F876
00:0000D8AC F872
00:0000D8AE F770
00:0000D8B0 F876
00:0000D8B2 F703            	  3715: 	dc.w	$F703,$F003,RTSL
00:0000D8B4 F003
00:0000D8B6 D000
                            	  3716: char_q						; Q
00:0000D8B8 FB70            	  3717: 	dc.w	$FB70,$F872,$FE70,$F676
00:0000D8BA F872
00:0000D8BC FE70
00:0000D8BE F676
00:0000D8C0 F076            	  3718: 	dc.w	$F076,$F202,$F672,$F002
00:0000D8C2 F202
00:0000D8C4 F672
00:0000D8C6 F002
00:0000D8C8 D000            	  3719: 	dc.w	RTSL
                            	  3720: char_r						; R
00:0000D8CA FB70            	  3721: 	dc.w	$FB70,$F872,$F770,$F876
00:0000D8CC F872
00:0000D8CE F770
00:0000D8D0 F876
00:0000D8D2 F001            	  3722: 	dc.w	$F001,$F773,$F002,RTSL
00:0000D8D4 F773
00:0000D8D6 F002
00:0000D8D8 D000
                            	  3723: char_s						; S
00:0000D8DA F872            	  3724: 	dc.w	$F872,$F370,$F876,$F370
00:0000D8DC F370
00:0000D8DE F876
00:0000D8E0 F370
00:0000D8E2 F872            	  3725: 	dc.w	$F872,$FF01,RTSL
00:0000D8E4 FF01
00:0000D8E6 D000
                            	  3726: char_t						; T
00:0000D8E8 F002            	  3727: 	dc.w	$F002,$FB70,$F006,$F872
00:0000D8EA FB70
00:0000D8EC F006
00:0000D8EE F872
00:0000D8F0 FF01            	  3728: 	dc.w	$FF01,RTSL
00:0000D8F2 D000
                            	  3729: char_u						; U
00:0000D8F4 FB00            	  3730: 	dc.w	$FB00,$FF70,$F872,$FB70
00:0000D8F6 FF70
00:0000D8F8 F872
00:0000D8FA FB70
00:0000D8FC FF01            	  3731: 	dc.w	$FF01,RTSL
00:0000D8FE D000
                            	  3732: char_v						; V
00:0000D900 FB00            	  3733: 	dc.w	$FB00,$FF71,$FB71,$FF01,RTSL
00:0000D902 FF71
00:0000D904 FB71
00:0000D906 FF01
00:0000D908 D000
                            	  3734: char_w						; W
00:0000D90A FB00            	  3735: 	dc.w	$FB00,$FF70,$F272,$F672
00:0000D90C FF70
00:0000D90E F272
00:0000D910 F672
00:0000D912 FB70            	  3736: 	dc.w	$FB70,$FF01,RTSL
00:0000D914 FF01
00:0000D916 D000
                            	  3737: char_x						; X
00:0000D918 FB72            	  3738: 	dc.w	$FB72,$F806,$FF72,$F002,RTSL
00:0000D91A F806
00:0000D91C FF72
00:0000D91E F002
00:0000D920 D000
                            	  3739: char_y						; Y
00:0000D922 F002            	  3740: 	dc.w	$F002,$FA70,$F276,$F802
00:0000D924 FA70
00:0000D926 F276
00:0000D928 F802
00:0000D92A F676            	  3741: 	dc.w	$F676,$FE02,RTSL
00:0000D92C FE02
00:0000D92E D000
                            	  3742: char_z						; Z
00:0000D930 FB00            	  3743: 	dc.w	$FB00,$F872,$FF76,$F872
00:0000D932 F872
00:0000D934 FF76
00:0000D936 F872
00:0000D938 F002            	  3744: 	dc.w	$F002,RTSL
00:0000D93A D000
                            	  3745: char_spc						; [SPACE]
00:0000D93C F803            	  3746: 	dc.w	$F803,RTSL
00:0000D93E D000
                            	  3747: char_1						; 1
00:0000D940 F002            	  3748: 	dc.w	$F002,$FB70,$FF02,RTSL
00:0000D942 FB70
00:0000D944 FF02
00:0000D946 D000
                            	  3749: char_2						; 2
00:0000D948 FB00            	  3750: 	dc.w	$FB00,$F872,$F770,$F876
00:0000D94A F872
00:0000D94C F770
00:0000D94E F876
00:0000D950 F770            	  3751: 	dc.w	$F770,$F872,$F002,RTSL
00:0000D952 F872
00:0000D954 F002
00:0000D956 D000
                            	  3752: char_3						; 3
00:0000D958 F872            	  3753: 	dc.w	$F872,$FB70,$F876,$F700
00:0000D95A FB70
00:0000D95C F876
00:0000D95E F700
00:0000D960 F872            	  3754: 	dc.w	$F872,$F702,RTSL
00:0000D962 F702
00:0000D964 D000
                            	  3755: char_4						; 4
00:0000D966 FB00            	  3756: 	dc.w	$FB00,$F770,$F872,$F300
00:0000D968 F770
00:0000D96A F872
00:0000D96C F300
00:0000D96E FF70            	  3757: 	dc.w	$FF70,$F002,RTSL
00:0000D970 F002
00:0000D972 D000
                            	  3758: char_5						; 6
00:0000D974 F872            	  3759: 	dc.w	$F872,$F370,$F876,$F370
00:0000D976 F370
00:0000D978 F876
00:0000D97A F370
00:0000D97C F872            	  3760: 	dc.w	$F872,$FF01,RTSL
00:0000D97E FF01
00:0000D980 D000
                            	  3761: char_6						; 6
00:0000D982 F300            	  3762: 	dc.w	$F300,$F872,$F770,$F876
00:0000D984 F872
00:0000D986 F770
00:0000D988 F876
00:0000D98A FB70            	  3763: 	dc.w	$FB70,$FF03,RTSL
00:0000D98C FF03
00:0000D98E D000
                            	  3764: char_7						; 7
00:0000D990 FB00            	  3765: 	dc.w	$FB00,$F872,$FF70,$F002,RTSL
00:0000D992 F872
00:0000D994 FF70
00:0000D996 F002
00:0000D998 D000
                            	  3766: char_8						; 8
00:0000D99A F872            	  3767: 	dc.w	$F872,$FB70,$F876,$FF70
00:0000D99C FB70
00:0000D99E F876
00:0000D9A0 FF70
00:0000D9A2 F300            	  3768: 	dc.w	$F300,$F872,$F702,RTSL
00:0000D9A4 F872
00:0000D9A6 F702
00:0000D9A8 D000
                            	  3769: char_9						; 9
00:0000D9AA F802            	  3770: 	dc.w	$F802,$FB70,$F876,$F770
00:0000D9AC FB70
00:0000D9AE F876
00:0000D9B0 F770
00:0000D9B2 F872            	  3771: 	dc.w	$F872,$F702,RTSL
00:0000D9B4 F702
00:0000D9B6 D000
                            	  3772: 
                            	  3773: ; indirect table for character set
                            	  3774: 
                            	  3775: char_set
00:0000D9B8 CAD0            	  3776: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000D9BA CA81            	  3777: 	dc.w	JSRL+(char_o0-vector)>>1	; 0 also O
00:0000D9BC CAD2            	  3778: 	dc.w	JSRL+(char_1-vector)>>1		; 1
00:0000D9BE CAD6            	  3779: 	dc.w	JSRL+(char_2-vector)>>1		; 2
00:0000D9C0 CADE            	  3780: 	dc.w	JSRL+(char_3-vector)>>1		; 3
00:0000D9C2 CAE5            	  3781: 	dc.w	JSRL+(char_4-vector)>>1		; 4
00:0000D9C4 CAEC            	  3782: 	dc.w	JSRL+(char_5-vector)>>1		; 5
00:0000D9C6 CAF3            	  3783: 	dc.w	JSRL+(char_6-vector)>>1		; 6
00:0000D9C8 CAFA            	  3784: 	dc.w	JSRL+(char_7-vector)>>1		; 7
00:0000D9CA CAFF            	  3785: 	dc.w	JSRL+(char_8-vector)>>1		; 8
00:0000D9CC CB07            	  3786: 	dc.w	JSRL+(char_9-vector)>>1		; 9
00:0000D9CE CA1C            	  3787: 	dc.w	JSRL+(char_a-vector)>>1		; A
00:0000D9D0 CA24            	  3788: 	dc.w	JSRL+(char_b-vector)>>1		; B
00:0000D9D2 CA31            	  3789: 	dc.w	JSRL+(char_c-vector)>>1		; C
00:0000D9D4 CA37            	  3790: 	dc.w	JSRL+(char_d-vector)>>1		; D
00:0000D9D6 CA3F            	  3791: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000D9D8 CA47            	  3792: 	dc.w	JSRL+(char_f-vector)>>1		; F
00:0000D9DA CA4E            	  3793: 	dc.w	JSRL+(char_g-vector)>>1		; G
00:0000D9DC CA57            	  3794: 	dc.w	JSRL+(char_h-vector)>>1		; H
00:0000D9DE CA5E            	  3795: 	dc.w	JSRL+(char_i-vector)>>1		; I
00:0000D9E0 CA65            	  3796: 	dc.w	JSRL+(char_j-vector)>>1		; J
00:0000D9E2 CA6B            	  3797: 	dc.w	JSRL+(char_k-vector)>>1		; K
00:0000D9E4 CA71            	  3798: 	dc.w	JSRL+(char_l-vector)>>1		; L
00:0000D9E6 CA76            	  3799: 	dc.w	JSRL+(char_m-vector)>>1		; M
00:0000D9E8 CA7C            	  3800: 	dc.w	JSRL+(char_n-vector)>>1		; N
00:0000D9EA CA81            	  3801: 	dc.w	JSRL+(char_o0-vector)>>1	; O also 0
00:0000D9EC CA87            	  3802: 	dc.w	JSRL+(char_p-vector)>>1		; P
00:0000D9EE CA8E            	  3803: 	dc.w	JSRL+(char_q-vector)>>1		; Q
00:0000D9F0 CA97            	  3804: 	dc.w	JSRL+(char_r-vector)>>1		; R
00:0000D9F2 CA9F            	  3805: 	dc.w	JSRL+(char_s-vector)>>1		; S
00:0000D9F4 CAA6            	  3806: 	dc.w	JSRL+(char_t-vector)>>1		; T
00:0000D9F6 CAAC            	  3807: 	dc.w	JSRL+(char_u-vector)>>1		; U
00:0000D9F8 CAB2            	  3808: 	dc.w	JSRL+(char_v-vector)>>1		; V
00:0000D9FA CAB7            	  3809: 	dc.w	JSRL+(char_w-vector)>>1		; W
00:0000D9FC CABE            	  3810: 	dc.w	JSRL+(char_x-vector)>>1		; X
00:0000D9FE CAC3            	  3811: 	dc.w	JSRL+(char_y-vector)>>1		; Y
00:0000DA00 CACA            	  3812: 	dc.w	JSRL+(char_z-vector)>>1		; Z
                            	  3813: 
                            	  3814: ; indirect shot table
                            	  3815: 
                            	  3816: shot_jsr
00:0000DA02 CB34            	  3817: 	dc.w	JSRL+(shot_vec-vector)>>1	; shot
                            	  3818: 
                            	  3819: ; shot vector object, a small cross of intensity $F
                            	  3820: 
                            	  3821: shot_vec
00:0000DA04 7420            	  3822: 	dc.w	$7420,$0000
00:0000DA06 0000
00:0000DA08 7040            	  3823: 	dc.w	$7040,$F000
00:0000DA0A F000
00:0000DA0C 7420            	  3824: 	dc.w	$7420,$0420
00:0000DA0E 0420
00:0000DA10 7000            	  3825: 	dc.w	$7000,$F040
00:0000DA12 F040
00:0000DA14 D000            	  3826: 	dc.w	RTSL
                            	  3827: 
                            	  3828: 
                            	  3829: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3830: ;
                            	  3831: ; canned messages
                            	  3832: 
                            	  3833: ; x,y co-ordinates for the message origins
                            	  3834: 
                            	  3835: mess_origin
00:0000DA16 0064            	  3836: 	dc.w	$0064,$00B6				; message 0 x,y
00:0000DA18 00B6
00:0000DA1A 0064            	  3837: 	dc.w	$0064,$00B6				; message 1 x,y
00:0000DA1C 00B6
00:0000DA1E 000C            	  3838: 	dc.w	$000C,$00AA				; message 2 x,y
00:0000DA20 00AA
00:0000DA22 000C            	  3839: 	dc.w	$000C,$00A2				; message 3 x,y
00:0000DA24 00A2
00:0000DA26 000C            	  3840: 	dc.w	$000C,$009A				; message 4 x,y
00:0000DA28 009A
00:0000DA2A 000C            	  3841: 	dc.w	$000C,$0092				; message 5 x,y
00:0000DA2C 0092
00:0000DA2E 0064            	  3842: 	dc.w	$0064,$00C6				; message 6 x,y
00:0000DA30 00C6
00:0000DA32 0064            	  3843: 	dc.w	$0064,$009D				; message 7 x,y
00:0000DA34 009D
                            	  3844: 
                            	  3845: ; message tables
                            	  3846: 
                            	  3847: mess_table
00:0000DA36 0008            	  3848: 	dc.w	e_messages-mess_table		; english
00:0000DA38 00C2            	  3849: 	dc.w	d_messages-mess_table		; german
00:0000DA3A 019E            	  3850: 	dc.w	f_messages-mess_table		; french
00:0000DA3C 026C            	  3851: 	dc.w	s_messages-mess_table		; spanish
                            	  3852: 
                            	  3853: ; message offset table
                            	  3854: 
                            	  3855: e_messages
00:0000DA3E 0010            	  3856: 	dc.w	e_mess_0-e_messages		; message 0
00:0000DA40 001C            	  3857: 	dc.w	e_mess_1-e_messages		; message 1
00:0000DA42 0024            	  3858: 	dc.w	e_mess_2-e_messages		; message 2
00:0000DA44 0046            	  3859: 	dc.w	e_mess_3-e_messages		; message 3
00:0000DA46 0061            	  3860: 	dc.w	e_mess_4-e_messages		; message 4
00:0000DA48 007E            	  3861: 	dc.w	e_mess_5-e_messages		; message 5
00:0000DA4A 00A5            	  3862: 	dc.w	e_mess_6-e_messages		; message 6
00:0000DA4C 00B0            	  3863: 	dc.w	e_mess_7-e_messages		; message 7
                            	  3864: 
                            	  3865: e_mess_0
00:0000DA4E 484947482053434F	  3866: 	dc.b	'HIGH SCORES',$00
00:0000DA56 524553
00:0000DA59 00
                            	  3867: e_mess_1
00:0000DA5A 504C4159455220  	  3868: 	dc.b	'PLAYER ',$00
00:0000DA61 00
                            	  3869: e_mess_2
00:0000DA62 594F55522053434F	  3870: 	dc.b	'YOUR SCORE IS ONE OF THE TEN BEST',$00
00:0000DA6A 5245204953204F4E
00:0000DA72 45204F4620544845
00:0000DA7A 2054454E20424553
00:0000DA82 54
00:0000DA83 00
                            	  3871: e_mess_3
00:0000DA84 504C454153452045	  3872: 	dc.b	'PLEASE ENTER YOUR INITIALS',$00
00:0000DA8C 4E54455220594F55
00:0000DA94 5220494E49544941
00:0000DA9C 4C53
00:0000DA9E 00
                            	  3873: e_mess_4
00:0000DA9F 5055534820524F54	  3874: 	dc.b	'PUSH ROTATE TO SELECT LETTER',$00
00:0000DAA7 41544520544F2053
00:0000DAAF 454C454354204C45
00:0000DAB7 54544552
00:0000DABB 00
                            	  3875: e_mess_5
00:0000DABC 5055534820485950	  3876: 	dc.b	'PUSH HYPERSPACE WHEN LETTER IS CORRECT',$00
00:0000DAC4 4552535041434520
00:0000DACC 5748454E204C4554
00:0000DAD4 5445522049532043
00:0000DADC 4F5252454354
00:0000DAE2 00
                            	  3877: e_mess_6
00:0000DAE3 5055534820535441	  3878: 	dc.b	'PUSH START',$00
00:0000DAEB 5254
00:0000DAED 00
                            	  3879: e_mess_7
00:0000DAEE 47414D45204F5645	  3880: 	dc.b	'GAME OVER',$00
00:0000DAF6 52
00:0000DAF7 00
                            	  3881: 
                            	  3882: 	ds.w	0					; ensure even
                            	  3883: 
                            	  3884: ; german message offset table
                            	  3885: 
                            	  3886: d_messages
00:0000DAF8 0010            	  3887: 	dc.w	d_mess_0-d_messages		; message 0
00:0000DAFA 0020            	  3888: 	dc.w	d_mess_1-d_messages		; message 1
00:0000DAFC 0029            	  3889: 	dc.w	d_mess_2-d_messages		; message 2
00:0000DAFE 0050            	  3890: 	dc.w	d_mess_3-d_messages		; message 3
00:0000DB00 0073            	  3891: 	dc.w	d_mess_4-d_messages		; message 4
00:0000DB02 0096            	  3892: 	dc.w	d_mess_5-d_messages		; message 5
00:0000DB04 00BC            	  3893: 	dc.w	d_mess_6-d_messages		; message 6
00:0000DB06 00D2            	  3894: 	dc.w	d_mess_7-d_messages		; message 7
                            	  3895: 
                            	  3896: d_mess_0
00:0000DB08 484F454348535445	  3897: 	dc.b	'HOECHSTERGEBNIS',$00
00:0000DB10 524745424E4953
00:0000DB17 00
                            	  3898: d_mess_1
00:0000DB18 535049454C455220	  3899: 	dc.b	'SPIELER ',$00
00:0000DB20 00
                            	  3900: d_mess_2
00:0000DB21 4948522045524745	  3901: 	dc.b	'IHR ERGEBNIS IST EINES DER ZEHN BESTEN',$00
00:0000DB29 424E495320495354
00:0000DB31 2045494E45532044
00:0000DB39 4552205A45484E20
00:0000DB41 42455354454E
00:0000DB47 00
                            	  3902: d_mess_3
00:0000DB48 4249545445204745	  3903: 	dc.b	'BITTE GEBEN SIE IHRE INITIALEN EIN',$00
00:0000DB50 42454E2053494520
00:0000DB58 4948524520494E49
00:0000DB60 5449414C454E2045
00:0000DB68 494E
00:0000DB6A 00
                            	  3904: d_mess_4
00:0000DB6B 5A55522042554348	  3905: 	dc.b	'ZUR BUCHSTABENWAHL ROTATE DRUECKEN',$00
00:0000DB73 53544142454E5741
00:0000DB7B 484C20524F544154
00:0000DB83 452044525545434B
00:0000DB8B 454E
00:0000DB8D 00
                            	  3906: d_mess_5
00:0000DB8E 57454E4E20425543	  3907: 	dc.b	'WENN BUCHSTABE OK HYPERSPACE DRUECKEN',$00
00:0000DB96 485354414245204F
00:0000DB9E 4B20485950455253
00:0000DBA6 5041434520445255
00:0000DBAE 45434B454E
00:0000DBB3 00
                            	  3908: d_mess_6
00:0000DBB4 53544152544B4E4F	  3909: 	dc.b	'STARTKNOEPFE DRUECKEN',$00
00:0000DBBC 4550464520445255
00:0000DBC4 45434B454E
00:0000DBC9 00
                            	  3910: d_mess_7
00:0000DBCA 535049454C454E44	  3911: 	dc.b	'SPIELENDE',$00
00:0000DBD2 45
00:0000DBD3 00
                            	  3912: 
                            	  3913: 	ds.w	0					; ensure even
                            	  3914: 
                            	  3915: ; french message offset table
                            	  3916: 
                            	  3917: f_messages
00:0000DBD4 0010            	  3918: 	dc.w	f_mess_0-f_messages		; message 0
00:0000DBD6 001F            	  3919: 	dc.w	f_mess_1-f_messages		; message 1
00:0000DBD8 0026            	  3920: 	dc.w	f_mess_2-f_messages		; message 2
00:0000DBDA 004A            	  3921: 	dc.w	f_mess_3-f_messages		; message 3
00:0000DBDC 0063            	  3922: 	dc.w	f_mess_4-f_messages		; message 4
00:0000DBDE 0085            	  3923: 	dc.w	f_mess_5-f_messages		; message 5
00:0000DBE0 00AE            	  3924: 	dc.w	f_mess_6-f_messages		; message 6
00:0000DBE2 00C0            	  3925: 	dc.w	f_mess_7-f_messages		; message 7
                            	  3926: 
                            	  3927: f_mess_0
00:0000DBE4 4D45494C4C455552	  3928: 	dc.b	'MEILLEUR SCORE',$00
00:0000DBEC 2053434F5245
00:0000DBF2 00
                            	  3929: f_mess_1
00:0000DBF3 4A4F55455220    	  3930: 	dc.b	'JOUER ',$00
00:0000DBF9 00
                            	  3931: f_mess_2
00:0000DBFA 564F545245205343	  3932: 	dc.b	'VOTRE SCORE EST UN DES 10 MEILLEURS',$00
00:0000DC02 4F52452045535420
00:0000DC0A 554E204445532031
00:0000DC12 30204D45494C4C45
00:0000DC1A 555253
00:0000DC1D 00
                            	  3933: f_mess_3
00:0000DC1E 53565020454E5452	  3934: 	dc.b	'SVP ENTREZ VOS INITIALES',$00
00:0000DC26 455A20564F532049
00:0000DC2E 4E495449414C4553
00:0000DC36 00
                            	  3935: f_mess_4
00:0000DC37 504F555353455A20	  3936: 	dc.b	'POUSSEZ ROTATE POUR VOS INITIALES',$00
00:0000DC3F 524F544154452050
00:0000DC47 4F555220564F5320
00:0000DC4F 494E495449414C45
00:0000DC57 53
00:0000DC58 00
                            	  3937: f_mess_5
00:0000DC59 504F555353455A20	  3938: 	dc.b	'POUSSEZ HYPERSPACE QUAND LETTRE CORRECTE',$00
00:0000DC61 4859504552535041
00:0000DC69 4345205155414E44
00:0000DC71 204C455454524520
00:0000DC79 434F525245435445
00:0000DC81 00
                            	  3939: f_mess_6
00:0000DC82 4150505559455220	  3940: 	dc.b	'APPUYER SUR START',$00
00:0000DC8A 5355522053544152
00:0000DC92 54
00:0000DC93 00
                            	  3941: f_mess_7
00:0000DC94 46494E2044452050	  3942: 	dc.b	'FIN DE PARTIE',$00
00:0000DC9C 4152544945
00:0000DCA1 00
                            	  3943: 
                            	  3944: 	ds.w	0					; ensure even
                            	  3945: 
                            	  3946: ; spanish message offset table
                            	  3947: 
                            	  3948: s_messages
00:0000DCA2 0010            	  3949: 	dc.w	s_mess_0-s_messages		; message 0
00:0000DCA4 0018            	  3950: 	dc.w	s_mess_1-s_messages		; message 1
00:0000DCA6 0021            	  3951: 	dc.w	s_mess_2-s_messages		; message 2
00:0000DCA8 0048            	  3952: 	dc.w	s_mess_3-s_messages		; message 3
00:0000DCAA 0066            	  3953: 	dc.w	s_mess_4-s_messages		; message 4
00:0000DCAC 008E            	  3954: 	dc.w	s_mess_5-s_messages		; message 5
00:0000DCAE 00A0            	  3955: 	dc.w	s_mess_6-s_messages		; message 6
00:0000DCB0 00AD            	  3956: 	dc.w	s_mess_7-s_messages		; message 7
                            	  3957: 
                            	  3958: s_mess_0
00:0000DCB2 5245434F524453  	  3959: 	dc.b	'RECORDS',$00
00:0000DCB9 00
                            	  3960: s_mess_1
00:0000DCBA 4A554741444F5220	  3961: 	dc.b	'JUGADOR ',$00
00:0000DCC2 00
                            	  3962: s_mess_2
00:0000DCC3 53552050554E5441	  3963: 	dc.b	'SU PUNTAJE ESTA ENTRE LOS DIEZ MEJORES',$00
00:0000DCCB 4A45204553544120
00:0000DCD3 454E545245204C4F
00:0000DCDB 53204449455A204D
00:0000DCE3 454A4F524553
00:0000DCE9 00
                            	  3964: s_mess_3
00:0000DCEA 504F52204641564F	  3965: 	dc.b	'POR FAVOR ENTRE SUS INICIALES',$00
00:0000DCF2 5220454E54524520
00:0000DCFA 53555320494E4943
00:0000DD02 49414C4553
00:0000DD07 00
                            	  3966: s_mess_4
00:0000DD08 4F5052494D412052	  3967: 	dc.b	'OPRIMA ROTATE PARA SELECCIONAR LA LETRA',$00
00:0000DD10 4F54415445205041
00:0000DD18 52412053454C4543
00:0000DD20 43494F4E4152204C
00:0000DD28 41204C45545241
00:0000DD2F 00
                            	  3968: s_mess_5
00:0000DD30 4F5052494D412048	  3969: 	dc.b	'OPRIMA HYPERSPACE',$00
00:0000DD38 5950455253504143
00:0000DD40 45
00:0000DD41 00
                            	  3970: s_mess_6
00:0000DD42 50554C5341522053	  3971: 	dc.b	'PULSAR START',$00
00:0000DD4A 54415254
00:0000DD4E 00
                            	  3972: s_mess_7
00:0000DD4F 4A5545474F205445	  3973: 	dc.b	'JUEGO TERMINADO',$00
00:0000DD57 524D494E41444F
00:0000DD5E 00
                            	  3974: 
                            	  3975: 	ds.w	0					; ensure even
                            	  3976: 
                            	  3977: 
                            	  3978: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3979: ;
                            	  3980: ; include files
                            	  3981: 
                            	  3982: 	INCLUDE	"games/asteroids/sounds.x68"

Source: "games\asteroids\sounds.x68"
                            	     1: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	     2: ;														;
                            	     3: ;	Sound routines V1.00. This is an include file for asteroids 1_0.x68		;
                            	     4: ;														;
                            	     5: ;	load the sounds, play an indexed sample. Uses the DirextX sound play and	;
                            	     6: ;	requires EASy68K 3.7.10 beta or later.							;
                            	     7: ;														;
                            	     8: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	     9: 
                            	    10: sfire_snd	EQU  0
                            	    11: pfire_snd	EQU  1
                            	    12: thrst_snd	EQU  2
                            	    13: smsau_snd	EQU  3
                            	    14: lgsau_snd	EQU  4
                            	    15: sexpl_snd	EQU  5
                            	    16: mexpl_snd	EQU  sexpl_snd+1
                            	    17: lexpl_snd	EQU  sexpl_snd+2
                            	    18: beat1_snd	EQU  8				; beat_2 must be beat_1 XOR 1
                            	    19: beat2_snd	EQU  9				; see above
                            	    20: extra_snd	EQU 10
                            	    21: 
                            	    22: 
                            	    23: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    24: ;
                            	    25: ; initialise the sounds routine
                            	    26: 
                            	    27: sound_init
00:0000DD60 422B0014        	    28: 	MOVE.b	#0,s_key(a3)		; clear the last [S] key status
00:0000DD64 177C00FF0015    	    29: 	MOVE.b	#-1,play_sound(a3)	; set the sound flag
                            	    30: 
00:0000DD6A 43FA0098        	    31: 	LEA		beat1_sound(pc),a1	; point to the background beat sound file name
00:0000DD6E 7208            	    32: 	MOVEQ		#beat1_snd,d1		; index 10
00:0000DD70 614E            	    33: 	BSR.s		load_sound			; load the sound into directx memory
                            	    34: 
00:0000DD72 43FA00A2        	    35: 	LEA		beat2_sound(pc),a1	; point to the background beat sound file name
00:0000DD76 7209            	    36: 	MOVEQ		#beat2_snd,d1		; index 9
00:0000DD78 6146            	    37: 	BSR.s		load_sound			; load the sound into directx memory
                            	    38: 
00:0000DD7A 43FA00AC        	    39: 	LEA		lexpl_sound(pc),a1	; point to the large explosion sound file name
00:0000DD7E 7207            	    40: 	MOVEQ		#lexpl_snd,d1		; index 8
00:0000DD80 613E            	    41: 	BSR.s		load_sound			; load the sound into directx memory
                            	    42: 
00:0000DD82 43FA00B9        	    43: 	LEA		mexpl_sound(pc),a1	; point to the medium explosion sound file name
00:0000DD86 7206            	    44: 	MOVEQ		#mexpl_snd,d1		; index 7
00:0000DD88 6136            	    45: 	BSR.s		load_sound			; load the sound into directx memory
                            	    46: 
00:0000DD8A 43FA00C6        	    47: 	LEA		sexpl_sound(pc),a1	; point to the small explosion sound file name
00:0000DD8E 7205            	    48: 	MOVEQ		#sexpl_snd,d1		; index 6
00:0000DD90 612E            	    49: 	BSR.s		load_sound			; load the sound into directx memory
                            	    50: 
00:0000DD92 43FA00D3        	    51: 	LEA		extra_sound(pc),a1	; point to the extra life sound file name
00:0000DD96 720A            	    52: 	MOVEQ		#extra_snd,d1		; index 5
00:0000DD98 6126            	    53: 	BSR.s		load_sound			; load the sound into directx memory
                            	    54: 
00:0000DD9A 43FA00E1        	    55: 	LEA		lgsau_sound(pc),a1	; point to the large saucer sound file name
00:0000DD9E 7204            	    56: 	MOVEQ		#lgsau_snd,d1		; index 4
00:0000DDA0 6124            	    57: 	BSR.s		load_old_sound		; load the sound into sound memory
                            	    58: 
00:0000DDA2 43FA00EE        	    59: 	LEA		smsau_sound(pc),a1	; point to the small saucer sound file name
00:0000DDA6 7203            	    60: 	MOVEQ		#smsau_snd,d1		; index 3
00:0000DDA8 611C            	    61: 	BSR.s		load_old_sound		; load the sound into directx memory
                            	    62: 
00:0000DDAA 43FA00FB        	    63: 	LEA		thrst_sound(pc),a1	; point to the ship thrust sound file name
00:0000DDAE 7202            	    64: 	MOVEQ		#thrst_snd,d1		; index 2
00:0000DDB0 610E            	    65: 	BSR.s		load_sound			; load the sound into directx memory
                            	    66: 
00:0000DDB2 43FA0106        	    67: 	LEA		pfire_sound(pc),a1	; point to the player fire sound file name
00:0000DDB6 7201            	    68: 	MOVEQ		#pfire_snd,d1		; index 1
00:0000DDB8 6106            	    69: 	BSR.s		load_sound			; load the sound into directx memory
                            	    70: 
00:0000DDBA 43FA0110        	    71: 	LEA		sfire_sound(pc),a1	; point to the saucer fire sound file name
00:0000DDBE 7200            	    72: 	MOVEQ		#sfire_snd,d1		; index 0
                            	    73: 
                            	    74: 
                            	    75: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    76: ;
                            	    77: ; load the sound into directx memory
                            	    78: 
                            	    79: load_sound
00:0000DDC0 704A            	    80: 	MOVEQ		#74,d0			; load the sound into directx memory
00:0000DDC2 4E4F            	    81: 	TRAP		#15
                            	    82: 
00:0000DDC4 4E75            	    83: 	RTS
                            	    84: 
                            	    85: 
                            	    86: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    87: ;
                            	    88: ; load the sound into sound memory
                            	    89: 
                            	    90: load_old_sound
00:0000DDC6 7047            	    91: 	MOVEQ		#71,d0			; load the sound into sound memory
00:0000DDC8 4E4F            	    92: 	TRAP		#15
                            	    93: 
00:0000DDCA 4E75            	    94: 	RTS
                            	    95: 
                            	    96: 
                            	    97: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    98: ;
                            	    99: ; play a sound sample
                            	   100: 
                            	   101: play_sample
00:0000DDCC 4A2B001A        	   102: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000DDD0 6718            	   103: 	BEQ.s		exit_play_sample		; if no players left just exit
                            	   104: 
00:0000DDD2 4A2B0015        	   105: 	TST.b		play_sound(a3)		; test the sound flag
00:0000DDD6 6712            	   106: 	BEQ.s		exit_play_sample		; if the sound is off just exit
                            	   107: 
00:0000DDD8 7048            	   108: 	MOVEQ		#72,d0			; play a sound from sound memory
00:0000DDDA 0C410003        	   109: 	CMPI.w	#smsau_snd,d1		; is it the small saucer sound
00:0000DDDE 6708            	   110: 	BEQ.s		old_sound_play		; if so go play it with the old player
                            	   111: 
00:0000DDE0 0C410004        	   112: 	CMPI.w	#lgsau_snd,d1		; is it the large saucer sound
00:0000DDE4 6702            	   113: 	BEQ.s		old_sound_play		; if so go play it with the old player
                            	   114: 
00:0000DDE6 704B            	   115: 	MOVEQ		#75,d0			; play a sound from directx memory
                            	   116: old_sound_play
00:0000DDE8 4E4F            	   117: 	TRAP		#15
                            	   118: 
                            	   119: exit_play_sample
00:0000DDEA 4E75            	   120: 	RTS
                            	   121: 
                            	   122: 
                            	   123: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   124: ;
                            	   125: ; test the sound key
                            	   126: 
                            	   127: sound_key
00:0000DDEC 7253            	   128: 	MOVEQ		#$53,d1			; [][][][S] key
00:0000DDEE 7013            	   129: 	MOVEQ		#19,d0			; check for keypress
00:0000DDF0 4E4F            	   130: 	TRAP		#15
                            	   131: 
00:0000DDF2 102B0014        	   132: 	MOVE.b	s_key(a3),d0		; get the last key(s) state
00:0000DDF6 B300            	   133: 	EOR.b		d1,d0				; compare the result with the last key(s) state,
                            	   134: 							; each byte is now $FF if a key has changed or
                            	   135: 							; $00 if a key has not changed
00:0000DDF8 C001            	   136: 	AND.b		d1,d0				; make each byte $FF if key just pressed or
                            	   137: 							; $00 if key not just pressed
00:0000DDFA B12B0015        	   138: 	EOR.b		d0,play_sound(a3)		; if key just pressed toggle the sound flag
00:0000DDFE 17410014        	   139: 	MOVE.b	d1,s_key(a3)		; save the last [S] key status
00:0000DE02 4E75            	   140: 	RTS
                            	   141: 
                            	   142: 
                            	   143: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   144: ;
                            	   145: ; sound file names
                            	   146: 
                            	   147: beat1_sound
00:0000DE04 73616D706C65735C	   148: 	dc.b	'samples\beat1.wav',$00		; background beat sound
00:0000DE0C 62656174312E7761
00:0000DE14 76
00:0000DE15 00
                            	   149: 
                            	   150: beat2_sound
00:0000DE16 73616D706C65735C	   151: 	dc.b	'samples\beat2.wav',$00		; background beat sound
00:0000DE1E 62656174322E7761
00:0000DE26 76
00:0000DE27 00
                            	   152: 
                            	   153: lexpl_sound
00:0000DE28 73616D706C65735C	   154: 	dc.b	'samples\lexplode.wav',$00	; large explosion sound
00:0000DE30 6C6578706C6F6465
00:0000DE38 2E776176
00:0000DE3C 00
                            	   155: 
                            	   156: mexpl_sound
00:0000DE3D 73616D706C65735C	   157: 	dc.b	'samples\mexplode.wav',$00	; medium explosion sound
00:0000DE45 6D6578706C6F6465
00:0000DE4D 2E776176
00:0000DE51 00
                            	   158: 
                            	   159: sexpl_sound
00:0000DE52 73616D706C65735C	   160: 	dc.b	'samples\sexplode.wav',$00	; small explosion sound
00:0000DE5A 736578706C6F6465
00:0000DE62 2E776176
00:0000DE66 00
                            	   161: 
                            	   162: extra_sound
00:0000DE67 73616D706C65735C	   163: 	dc.b	'samples\extraship.wav',$00	; extra life sound
00:0000DE6F 6578747261736869
00:0000DE77 702E776176
00:0000DE7C 00
                            	   164: 
                            	   165: lgsau_sound
00:0000DE7D 73616D706C65735C	   166: 	dc.b	'samples\lgsaucer.wav',$00	; large saucer sound
00:0000DE85 6C67736175636572
00:0000DE8D 2E776176
00:0000DE91 00
                            	   167: 
                            	   168: smsau_sound
00:0000DE92 73616D706C65735C	   169: 	dc.b	'samples\smsaucer.wav',$00	; small saucer sound
00:0000DE9A 736D736175636572
00:0000DEA2 2E776176
00:0000DEA6 00
                            	   170: 
                            	   171: thrst_sound
00:0000DEA7 73616D706C65735C	   172: 	dc.b	'samples\thrust.wav',$00	; ship thrust sound
00:0000DEAF 7468727573742E77
00:0000DEB7 6176
00:0000DEB9 00
                            	   173: 
                            	   174: pfire_sound
00:0000DEBA 73616D706C65735C	   175: 	dc.b	'samples\pfire.wav',$00		; player fire sound
00:0000DEC2 70666972652E7761
00:0000DECA 76
00:0000DECB 00
                            	   176: 
                            	   177: sfire_sound
00:0000DECC 73616D706C65735C	   178: 	dc.b	'samples\sfire.wav',$00		; saucer fire sound
00:0000DED4 73666972652E7761
00:0000DEDC 76
00:0000DEDD 00
                            	   179: 
                            	   180: 	ds.w	0					; ensure even
                            	   181: 
                            	   182: 
                            	   183: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   184: 
                            	   185: 

Source: "games\asteroids\asteroids 1_0.x68"
                            	  3983: 							; sound routines
                            	  3984: 
                            	  3985: 
                            	  3986: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3987: ;
                            	  3988: ; high score table filename
                            	  3989: 
                            	  3990: filename
00:0000DEDE 61737465726F6964	  3991: 	dc.b		'asteroids.hi',0		; highscore filename
00:0000DEE6 732E6869
00:0000DEEA 00
                            	  3992: 	ds.w		0				; ensure even
                            	  3993: 
                            	  3994: 
                            	  3995: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3996: ;
                            	  3997: ; variables
                            	  3998: 
                            	  3999: variables
                            	  4000: 
                            	  4001: 	OFFSET	0				; going to use relative addressing
                            	  4002: 
                            	  4003: vector_s
                            	  4004: ;##	ds.w	1				; vector scale
02:00000000 0000            	  4005: glob_scale	ds.w	1				; global scale
                            	  4006: 
                            	  4007: 
02:00000002 0000            	  4008: local_x	ds.w	1				; local screen x co-ordinate offset
02:00000004 0000            	  4009: local_y	ds.w	1				; local screen y co-ordinate offset
                            	  4010: 
02:00000006 0000            	  4011: scr_x		ds.w	1				; screen x size
02:00000008 0000            	  4012: scr_y		ds.w	1				; screen y size
                            	  4013: 
02:0000000A 00000000        	  4014: PRNlword	ds.l	1				; PRNG seed long word
                            	  4015: 
02:0000000E 00000000        	  4016: switch_addr	ds.l	1				; hardware switch address
                            	  4017: 
02:00000012 0000            	  4018: hiscore_y	ds.w	1				; high score y co-ordinate
                            	  4019: 
                            	  4020: 
02:00000014 00              	  4021: s_key		ds.b	1				; last [s] key status
02:00000015 00              	  4022: play_sound	ds.b	1				; sound flag
                            	  4023: 
02:00000016 00              	  4024: suppress_0	ds.b	1				; leading zero suppress flag
                            	  4025: 							; 0 = don't suppress
                            	  4026: 
02:00000017 00              	  4027: high_idx	ds.b	1				; high score index, single byte, 1 to 10 in BCD
                            	  4028: 
02:00000018 00              	  4029: player_idx	ds.b	1				; player index
                            	  4030: 							; 0 = player 1
                            	  4031: 							; 1 = player 2
                            	  4032: 
02:00000019 00              	  4033: past_play	ds.b	1				; number of players that were in the game
                            	  4034: 
02:0000001A 00              	  4035: num_players	ds.b	1				; number of players in the game
                            	  4036: 							; $00 - game over
                            	  4037: 							; $01 - 1 player game
                            	  4038: 							; $02 - 2 player game
                            	  4039: 							; $FF - game over, high score not checked
                            	  4040: 
02:0000001B 00              	  4041: ss_count	ds.b	1				; starting ship count
                            	  4042: 
02:0000001C 00              	  4043: px_time	ds.b	1				; "PLAYER x" timer. while this is non zero
                            	  4044: 							; "PLAYER x" will be displayed. this is used at
                            	  4045: 							; the beginning of any game and at the beginning
                            	  4046: 							; of each turn in a two player game
                            	  4047: 
02:0000001D 00              	  4048: sixteen_ms	ds.b	1				; 16ms counter, incremented every 16ms by the
                            	  4049: 							; timer interrupt and cleared by the main
                            	  4050: 							; program loop
                            	  4051: 
02:0000001E 00              	  4052: p_orient	ds.b	1				; player orientation, this is shared by both
                            	  4053: 							; players as it is in the arcade machine
                            	  4054: 							;
                            	  4055: 							; $00 = right
                            	  4056: 							; $40 = up
                            	  4057: 							; $80 = left
                            	  4058: 							; $C0 = down
                            	  4059: 							;
                            	  4060: 							; this is $00 = right then anticlockwise each
                            	  4061: 							; positive step being 1.40625 degrees so that
                            	  4062: 							; by the time you get back to $00 one full
                            	  4063: 							; rotation has been done
                            	  4064: 
02:0000001F 00              	  4065: s_orient	ds.b	1				; shot direction, see above
                            	  4066: 
02:00000020 00              	  4067: hi_char	ds.b	1				; high score input character index
                            	  4068: 
02:00000021 00              	  4069: last_fire	ds.b	1				; fire key last state register
02:00000022 00              	  4070: last_hype	ds.b	1				; hyperspace key last state register
                            	  4071: 
02:00000023 00              	  4072: thump_snd	ds.b	1				; thump sound value
02:00000024 00              	  4073: thump_time	ds.b	1				; thump sound change timer
02:00000025 00              	  4074: time_count	ds.b	1				; game counter byte
                            	  4075: 
02:00000026 00              	  4076: hyper		ds.b	1				; hyperspace flag
                            	  4077: 							; $00 = no jump
                            	  4078: 							; $01 = jump successful
                            	  4079: 							; $80 = jump unsuccessful
                            	  4080: 							; $xx = 
                            	  4081: 
                            	  4082: 		ds.w	0
                            	  4083: 
02:00000027 0000            	  4084: hiscores	ds.w	10				; high score table, each score is a BCD word
02:00000029 *
02:0000003B 00              	  4085: hinames	ds.b	3*10				; high score initials table
02:0000003C *
                            	  4086: 
02:00000059 0000            	  4087: game_count	ds.w	1				; game counter word
                            	  4088: 
02:0000005B 0000            	  4089: expl_x_pos	ds.w	6				; player ship explosion pieces x positions
02:0000005D *
                            	  4090: 
02:00000067 0000            	  4091: expl_y_pos	ds.w	6				; player ship explosion pieces y positions
02:00000069 *
                            	  4092: 
                            	  4093: 
                            	  4094: ; player 1 variables
                            	  4095: 
                            	  4096: player_1	EQU	*+$80				; player one variables base
                            	  4097: 
                            	  4098: x_pos_off	EQU	*-player_1			; offset to the x position base
02:00000073 0000            	  4099: 		ds.w	$1B				; item x position base address
02:00000075 *
                            	  4100: 
                            	  4101: p_xpos_off	EQU	*-player_1			; offset to the player x position
02:000000A9 0000            	  4102: 		ds.w	1				; player x position
                            	  4103: 
                            	  4104: s_xpos_off	EQU	*-player_1			; offset to the saucer x position
02:000000AB 0000            	  4105: 		ds.w	1				; saucer x position
                            	  4106: 
                            	  4107: f_xpos_off	EQU	*-player_1			; offset to the player x position
02:000000AD 0000            	  4108: 		ds.w	6				; fire objects x position
02:000000AF *
                            	  4109: x_pos_end	EQU	*-player_1			; offset to the flags end
                            	  4110: 
                            	  4111: y_pos_off	EQU	*-player_1			; offset to the y position base
02:000000B9 0000            	  4112: 		ds.w	$1B				; item y position base address
02:000000BB *
                            	  4113: 
                            	  4114: p_ypos_off	EQU	*-player_1			; offset to the player y position
02:000000EF 0000            	  4115: 		ds.w	1				; player y position
                            	  4116: s_ypos_off	EQU	*-player_1			; offset to the saucer y position
02:000000F1 0000            	  4117: 		ds.w	1				; saucer y position
                            	  4118: 
                            	  4119: f_ypos_off	EQU	*-player_1			; offset to the player y position
02:000000F3 0000            	  4120: 		ds.w	6				; fire objects y position
02:000000F5 *
                            	  4121: 
                            	  4122: 							; items $xx00 to $xx1A are rocks
                            	  4123: 							; $00 = no item
                            	  4124: 							; $0x = item exists
                            	  4125: 							; $Ax = item exploding
                            	  4126: 
                            	  4127: flags_off	EQU	*-player_1			; offset to the flags base
02:000000FF 00              	  4128: 		ds.b	$1B				; space for the rock flags
02:00000100 *
                            	  4129: 
                            	  4130: p_flag_off	EQU	*-player_1			; offset to the player flag
02:0000011A 00              	  4131: 		ds.b	1				; player flag
                            	  4132: 
                            	  4133: s_flag_off	EQU	*-player_1			; offset to the saucer flag
02:0000011B 00              	  4134: 		ds.b	1				; saucer flag
                            	  4135: 							; $00 = no saucer
                            	  4136: 							; $01 = small saucer
                            	  4137: 							; $02 = large saucer
                            	  4138: 							; $8x = saucer exploding
                            	  4139: 
                            	  4140: s_fire_off	EQU	*-player_1			; offset to the saucer fire flags
02:0000011C 00              	  4141: 		ds.b	2				; saucer fire objects
02:0000011D *
                            	  4142: 
                            	  4143: p_fire_off	EQU	*-player_1			; offset to the player fire flags
02:0000011E 00              	  4144: 		ds.b	4				; player fire objects
02:0000011F *
                            	  4145: flag_end	EQU	*-player_1			; offset to the flags end
                            	  4146: 
                            	  4147: x_vel_off	EQU	*-player_1			; offset to the x velocity base
02:00000122 00              	  4148: 		ds.b	$1B				; item x velocity base address
02:00000123 *
                            	  4149: 
                            	  4150: p_xvel_off	EQU	*-player_1			; offset to the player x velocity
02:0000013D 00              	  4151: 		ds.b	1				; player x velocity
                            	  4152: 
                            	  4153: s_xvel_off	EQU	*-player_1			; offset to the saucer x velocity
02:0000013E 00              	  4154: 		ds.b	1				; saucer x velocity
                            	  4155: 
                            	  4156: f_xvel_off	EQU	*-player_1			; offset to the fire objects x velocity
02:0000013F 00              	  4157: 		ds.b	6				; fire objects x velocity
02:00000140 *
                            	  4158: 
                            	  4159: y_vel_off	EQU	*-player_1			; offset to the x velocity base
02:00000145 00              	  4160: 		ds.b	$1B				; item y velocity base address
02:00000146 *
                            	  4161: 
                            	  4162: p_yvel_off	EQU	*-player_1			; offset to the player y velocity
02:00000160 00              	  4163: 		ds.b	1				; player y velocity
                            	  4164: 
                            	  4165: s_yvel_off	EQU	*-player_1			; offset to the saucer y velocity
02:00000161 00              	  4166: 		ds.b	1				; saucer y velocity
                            	  4167: 
                            	  4168: f_yvel_off	EQU	*-player_1			; offset to the fire objects y velocity
02:00000162 00              	  4169: 		ds.b	6				; fire objects y velocity
02:00000163 *
                            	  4170: 
                            	  4171: 
                            	  4172: i_rk_count	EQU	*-player_1			; offset to the initial rock count
02:00000168 00              	  4173: 		ds.b	1				; initial rock count
                            	  4174: rock_count	EQU	*-player_1			; offset to the rock count
02:00000169 00              	  4175: 		ds.b	1				; rock count
                            	  4176: 
                            	  4177: sauc_cntdn	EQU	*-player_1			; offset to the saucer countdown timer
02:0000016A 00              	  4178: 		ds.b	1				; saucer countdown timer
                            	  4179: 
                            	  4180: i_sauc_tim	EQU	*-player_1			; offset to the initial saucer timer
02:0000016B 00              	  4181: 		ds.b	1				; small saucer boundary/initial saucer timer
                            	  4182: 
                            	  4183: r_hit_tim	EQU	*-player_1			; offset to the rock hit timer
02:0000016C 00              	  4184: 		ds.b	1				; rock hit timer. if this times out because the
                            	  4185: 							; player hasn't shot a rock for a while then
                            	  4186: 							; the saucer timer initial value is decremented
                            	  4187: 							; so that the saucers come faster if the player
                            	  4188: 							; is just ignoring the last rock
                            	  4189: 
                            	  4190: hide_p_cnt	EQU	*-player_1			; offset to the hide the player count
02:0000016D 00              	  4191: 		ds.b	1				; hide the player count. when this count is non
                            	  4192: 							; zero the player is not displayed and the
                            	  4193: 							; thump sound does not sound. this count is set
                            	  4194: 							; to various lengths after certain events have
                            	  4195: 							; occured
                            	  4196: 							;
                            	  4197: 							; $0x player hidden, will appear
                            	  4198: 							; $8x player hidden, gonna die
                            	  4199: 
                            	  4200: new_rocks	EQU	*-player_1			; offset to the new rocks flag
02:0000016E 00              	  4201: 		ds.b	1				; generate new rocks flag
                            	  4202: 							; 0 = generate new rocks
                            	  4203: thmp_sndi	EQU	*-player_1			; offset to the thump sound change initial value
02:0000016F 00              	  4204: 		ds.b	1				; thump sound change timer initial value
                            	  4205: 
                            	  4206: min_rocks	EQU	*-player_1			; offset to the minimum rock count
02:00000170 00              	  4207: 		ds.b	1				; minimum rock count before the saucer initial
                            	  4208: 							; timer starts to decrement
                            	  4209: 
                            	  4210: p_xvlo_off	EQU	*-player_1			; offset to the player y velocity low byte
02:00000171 00              	  4211: 		ds.b	1				; player x velocity low byte
                            	  4212: p_yvlo_off	EQU	*-player_1			; offset to the player y velocity low byte
02:00000172 00              	  4213: 		ds.b	1				; player y velocity low byte
                            	  4214: 
                            	  4215: 		ds.w	0				; ensure even
                            	  4216: 
                            	  4217: score_off	EQU	*-player_1			; offset to the score word
02:00000173 0000            	  4218: p1_score	ds.w	1				; player score
                            	  4219: 
                            	  4220: ships_off	EQU	*-player_1			; offset to the ship count
02:00000175 00              	  4221: p1_ships	ds.b	1				; player 1 ship count
                            	  4222: 
                            	  4223: high_off	EQU	*-player_1			; offset to the player entering hiscore flag
02:00000176 00              	  4224: p1_high	ds.b	1				; player 1 highscore flag
                            	  4225: 							; $0x - entering high score, also index
                            	  4226: 							; $8x - done
                            	  4227: 
                            	  4228: 
                            	  4229: 		ds.w	0				; ensure even
                            	  4230: 
                            	  4231: ; player 2 variables
                            	  4232: 
                            	  4233: 
                            	  4234: player_2	EQU	*+$80				; player two variables base
02:00000177 00              	  4235: 		ds.b	score_off+$80		; space for the player two variables
02:00000178 *
                            	  4236: 
02:00000277 0000            	  4237: p2_score	ds.w	1				; player 2 score
                            	  4238: 
02:00000279 00              	  4239: p2_ships	ds.b	1				; player 2 ship count
                            	  4240: 
02:0000027A 00              	  4241: p2_high	ds.b	1				; player 2 highscore flag
                            	  4242: 							; $0x - entering high score, also index
                            	  4243: 							; $8x - done
                            	  4244: 
                            	  4245: 		ds.w	0				; ensure even
                            	  4246: 
                            	  4247: p_2_end
                            	  4248: 
                            	  4249: 
                            	  4250: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  4251: 
                            	  4252: 
                            	  4253: ;	END	asteroids_start
                            	  4254: 
                            	  4255: 
                            	  4256: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  4257: 

Source: "boot.x68"
                            	  4618: 	include "games/plants/plants.x68"

Source: "games\plants\plants.x68"
                            	     1: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	     2: ;														;
                            	     3: ;	Plants and animals demo EASy68K V1.20			2011/05/30			;
                            	     4: ;														;
                            	     5: ;	This world is inhabited by two types of life. Plants, which are photosyn-	;
                            	     6: ;	thetic and will grow until they fill all space, and animals which eat the	;
                            	     7: ;	foliage of the plants and will multiply while food is available.			;
                            	     8: ;														;
                            	     9: ;	The growing tip of the plant is a redish bud, this tip not only grows but	;
                            	    10: ;	sprouts new buds as it goes up to a preset maximum number of buds. As a		;
                            	    11: ;	bud grows and moves on it leaves behind green foliage. If a bud has no		;
                            	    12: ;	space to grow into that bud stops growing and another bud can be spawned	;
                            	    13: ;	elsewhere on the plant.										;
                            	    14: ;														;
                            	    15: ;	The animals eat the plant's green foliage and once they have eaten enough	;
                            	    16: ;	they will spawn a new animal which will go its own way eating another share	;
                            	    17: ;	of green foliage. If there is no green foliage to eat an animal will starve.	;
                            	    18: ;														;
                            	    19: ;	Also a bud trying to grow into the space where there is an animal will get	;
                            	    20: ;	stepped on and die, and animal trying to eat the bud of a plant will get	;
                            	    21: ;	sick and die. Watching over all this is a benevolent deity who, on seeing	;
                            	    22: ;	the extinction of growing plants or eating animals will spawn a new proge-	;
                            	    23: ;	nitor for the extinct species.								;
                            	    24: ;														;
                            	    25: ;														;
                            	    26: ;	The main loop time is throttled by measuring the time the loop took and		;
                            	    27: ;	then waiting the remains of the required time using task #23, delay. This,	;
                            	    28: ;	on my laptop, reduces the CPU loading from 100% to 65%.				;
                            	    29: ;														;
                            	    30: ;	Changes to the way new plants and animals are spawned, the plant or animal	;
                            	    31: ;	array is not searched if it is already full, has further reduced the CPU	;
                            	    32: ;	loading to 50% on my laptop.									;
                            	    33: ;														;
                            	    34: ;														;
                            	    35: ;	The [F2], [F3] and [F4]	keys can be used to select a screen size of 640 x	;
                            	    36: ;	480, 800 x 600 and 1024 x 768 respectively.						;
                            	    37: ;														;
                            	    38: ;	[ESC] can be used to quit the program.							;
                            	    39: ;														;
                            	    40: ;	More 68000 and other projects can be found on my website at ..			;
                            	    41: ;														;
                            	    42: ;	 http://mycorner.no-ip.org/index.html							;
                            	    43: ;														;
                            	    44: ;	mail : leeedavison@googlemail.com								;
                            	    45: ;														;
                            	    46: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    47: ;
                            	    48: ; some equates
                            	    49: 
                            	    50: ESC		EQU	$1B				; [ESC] character
                            	    51: ;CR		EQU	$0D				; [CR] character
                            	    52: ;LF		EQU	$0A				; [LF] character
                            	    53: 
                            	    54: def_back	EQU	$000000			; the default background colour
                            	    55: def_animal	EQU	$FFFFFF		; the default animal colour
                            	    56: def_plant	EQU	$8080FF			; the default plant colour
                            	    57: def_leaf	EQU	$008000			; the default leaf colour
                            	    58: 
                            	    59: def_plants	EQU	50				; the default plant count
                            	    60: def_p_spawn	EQU	1				; the default plant spawn level
                            	    61: def_animals	EQU	50				; the default animal count
                            	    62: def_a_spawn	EQU	5				; the default animal spawn level
                            	    63: 
                            	    64: 
                            	    65: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    66: ;
                            	    67: 
                            	    68: ;	ORG		$20000
                            	    69: 
                            	    70: start_plants:
02:0000027C 13FC000EFD0FFF00	    71: 	move.b #14,leds
02:00000284 61000362        	    72: 	bsr InitialisePlants	; go setup everything but the world
                            	    73: restart
02:00000288 13FC000FFD0FFF00	    74: 	move.b #15,leds
02:00000290 6100008E        	    75: 	bsr	init_world				; go setup the world
                            	    76: 
                            	    77: ; main loop
                            	    78: 
                            	    79: plants_main_loop
02:00000294 7008            	    80: 	MOVEQ		#8,d0				; get the time in 1/100 ths seconds
02:00000296 4E4F            	    81: 	TRAP		#15
                            	    82: 
02:00000298 2F01            	    83: 	MOVE.l	d1,-(sp)			; save the time on the stack
                            	    84: 
02:0000029A 705E            	    85: 	MOVEQ		#94,d0			; copy buffer screen to main
02:0000029C 4E4F            	    86: 	TRAP		#15
02:0000029E 13FC0003FD0FFF00	    87: 	move.b #$03,leds
                            	    88: 
                            	    89: ; animate the scene
                            	    90: 
02:000002A6 61000118        	    91: 	BSR		do_plants			; do the plants
02:000002AA 6100014A        	    92: 	BSR		do_animals			; do the animals
                            	    93: 
                            	    94: ; test the keys used
                            	    95: 
02:000002AE 610003BE        	    96: 	BSR		screen_size			; test and handle widow size change keys
02:000002B2 61000053        	    97: 	BSR		test_escape			; test if the user wants to quit
                            	    98: 
                            	    99: ; now see if we need to wait for some time
                            	   100: 
02:000002B6 2E1F            	   101: 	MOVE.l	(sp)+,d7			; get the main loop start time
02:000002B8 7008            	   102: 	MOVEQ		#8,d0				; get time in 1/100 ths seconds
02:000002BA 4E4F            	   103: 	TRAP		#15
                            	   104: 
02:000002BC 13FC0004FD0FFF00	   105: 	move.b #$04,leds
                            	   106: 
                            	   107: ; doing the BGT means that if the clock passed midnight while the code was in the main
                            	   108: ; loop then the delay is skipped this go. this means things may run a bit fast for one
                            	   109: ; loop which is waaaaay better than waiting for a few 100ths of a second shy of twenty
                            	   110: ; four hours by mistake
                            	   111: 
02:000002C4 9E81            	   112: 	SUB.l		d1,d7				; subtract the current time from the start time
02:000002C6 6E1A            	   113: 	BGT.s		end_main_loop		; if the time crossed midnight just contimue
                            	   114: 
                            	   115: ; moving the wait time into d1 like this menas we can have any wait up to 1.27 seconds
                            	   116: ; and still use the MOVEQ form to load it
                            	   117: 
02:000002C8 7205            	   118: 	MOVEQ		#5,d1				; set the wait time in 100ths of a second
02:000002CA D287            	   119: 	ADD.l		d7,d1				; add the loop negative time delta
02:000002CC 6F14            	   120: 	BLE.s		end_main_loop		; if the time is up just contimue
                            	   121: 
02:000002CE 13FC0005FD0FFF00	   122: 	move.b #$05,leds
02:000002D6 7017            	   123: 	moveq	#23,d0				; else wait d1 100ths of a second
02:000002D8 4E4F            	   124: 	trap #15
02:000002DA 13FC0006FD0FFF00	   125: 	move.b #$06,leds
                            	   126: 
                            	   127: end_main_loop
02:000002E2 4A6B0002        	   128: 	TST.w		redraw(a3)			; test the redraw flag
02:000002E6 66A0            	   129: 	BNE.s		restart			; if redraw go initialise the world
                            	   130: 
02:000002E8 4A53            	   131: 	TST.w		quit(a3)			; test the quit flag
02:000002EA 67A8            	   132: 	BEQ.s		plants_main_loop			; if not quit go get another key
                            	   133: 
                            	   134: ; all done so tidy up and stop
                            	   135: 
                            	   136: ;	MOVE.b	#16,d1			; disable double buffering
                            	   137: ;	MOVE.b	#92,d0			; set draw mode
                            	   138: ;	TRAP		#15
                            	   139: 
02:000002EC 43FA02FA        	   140: 	LEA		goodbye_message(pc),a1	; set the goodbye message pointer
02:000002F0 700D            	   141: 	MOVEQ		#13,d0			; display a string with [CR][LF]
02:000002F2 4E4F            	   142: 	TRAP		#15
                            	   143: 
02:000002F4 4EF90000815C    	   144: 	jmp Monitor
                            	   145: ;	MOVEQ		#9,d0				; halt the simulator
                            	   146: ;	TRAP		#15
                            	   147: 
                            	   148: goodbye_message
02:000002FA 0C              	   149: 	dc.b	$0C,CR,LF
02:000002FB 0D
02:000002FC 0A
02:000002FD 2020476F6F646279	   150: 	dc.b	'  Goodbye',0
02:00000305 65
02:00000306 00
                            	   151: 
                            	   152: 	ds.w	0					; ensure even
                            	   153: 
                            	   154: 
                            	   155: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   156: ;
                            	   157: ; test if the user wants to quit
                            	   158: 
                            	   159: test_escape
02:00000308 7007            	   160: 	MOVEQ		#7,d0				; read the key status
02:0000030A 4E4F            	   161: 	TRAP		#15
                            	   162: 
02:0000030C 4A01            	   163: 	TST.b		d1				; test the result
02:0000030E 670E            	   164: 	BEQ.s		exit_test_escape		; if no key just exit
                            	   165: 
02:00000310 7005            	   166: 	MOVEQ		#5,d0				; read a key
02:00000312 4E4F            	   167: 	TRAP		#15
                            	   168: 
02:00000314 0C01001B        	   169: 	CMPI.b	#ESC,d1			; compare with [ESC]
02:00000318 6604            	   170: 	BNE.s		exit_test_escape		; if not [ESC] just exit
                            	   171: 
02:0000031A 72FF            	   172: 	MOVEQ		#-1,d1			; set the longword
02:0000031C 3681            	   173: 	MOVE.w	d1,quit(a3)			; set the quit flag
                            	   174: exit_test_escape
02:0000031E 4E75            	   175: 	RTS
                            	   176: 
                            	   177: 
                            	   178: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   179: ;
                            	   180: ; setup the world
                            	   181: 
                            	   182: init_world:
                            	   183: ;	MOVE.w	#$FF00,d1			; clear screen
                            	   184: ;	MOVEQ		#11,d0			; position cursor
                            	   185: ;	TRAP		#15
02:00000320 7E07            	   186: 	moveq #7,d7
02:00000322 7C0C            	   187: 	moveq #DEV_CLEAR,d6
02:00000324 4E40            	   188: 	trap #0
02:00000326 123C0045        	   189: 	move.b #'E',d1
02:0000032A 4EB900000000    	   190: 	jsr DisplayChar
                            	   191: 
02:00000330 203C00FFFFFF    	   192: 	MOVE.l	#def_animal,d0		; set the default animal colour
02:00000336 27400014        	   193: 	MOVE.l	d0,animal_colour(a3)	; save the animal colour
02:0000033A 7000            	   194: 	MOVE.l	#def_back,d0		; set the default background colour
02:0000033C 27400018        	   195: 	MOVE.l	d0,animal_fill(a3)	; save the animal fill colour
                            	   196: 
                            	   197: 
02:00000340 203C008080FF    	   198: 	MOVE.l	#def_plant,d0		; set the default plant colour
02:00000346 27400010        	   199: 	MOVE.l	d0,plant_colour(a3)	; save the plant colour
02:0000034A 203C00008000    	   200: 	MOVE.l	#def_leaf,d0		; set the default leaf colour
02:00000350 27400012        	   201: 	MOVE.l	d0,plant_fill(a3)		; save the plant fill colour
                            	   202: 
02:00000354 7032            	   203: 	MOVEQ		#def_plants,d0		; set the default plant count
02:00000356 3740000A        	   204: 	MOVE.w	d0,max_plants(a3)		; save the maximum plants count
02:0000035A 7001            	   205: 	MOVEQ		#def_p_spawn,d0		; set the default plant spawn value
02:0000035C 17400220        	   206: 	MOVE.b	d0,plant_spawn(a3)	; save the plant spawn value
                            	   207: 
02:00000360 7032            	   208: 	MOVEQ		#def_animals,d0		; set the default animal count
02:00000362 3740000E        	   209: 	MOVE.w	d0,max_animals(a3)	; save the maximum animals count
02:00000366 7005            	   210: 	MOVEQ		#def_a_spawn,d0		; set the default animal spawn value
02:00000368 17400221        	   211: 	MOVE.b	d0,animal_spawn(a3)	; save the animal spawn value
                            	   212: 
02:0000036C 7000            	   213: 	MOVEQ		#0,d0				; clear the longword
02:0000036E 37400002        	   214: 	MOVE.w	d0,redraw(a3)		; clear the redraw flag
                            	   215: 
                            	   216: ; clear all the plants
                            	   217: 
02:00000372 41EB00F4        	   218: 	LEA		plant_flag(a3),a0		; set the pointer to the plant flags
02:00000376 3E2B000A        	   219: 	MOVE.w	max_plants(a3),d7		; get the maximum plants count
02:0000037A 5347            	   220: 	SUBQ.w	#1,d7				; adjust for the loop type
02:0000037C 13FC0001FD0FFF00	   221: 	move.b #$01,leds
                            	   222: clr_plant_loop
02:00000384 10C0            	   223: 	MOVE.b	d0,(a0)+			; clear the plant flag
02:00000386 51CFFFFC        	   224: 	DBF		d7,clr_plant_loop		; loop if more to do
                            	   225: 
02:0000038A 37400008        	   226: 	MOVE.w	d0,num_plants(a3)		; clear the plants count
                            	   227: 
                            	   228: ; clear all the animals
                            	   229: 
02:0000038E 41EB01EE        	   230: 	LEA		animal_flag(a3),a0	; set the pointer to the animal flags
02:00000392 3E2B000E        	   231: 	MOVE.w	max_animals(a3),d7	; get the maximum animals count
02:00000396 5347            	   232: 	SUBQ.w	#1,d7				; adjust for the loop type
                            	   233: clr_animals_loop
02:00000398 10C0            	   234: 	MOVE.b	d0,(a0)+			; clear the animal flag
02:0000039A 51CFFFFC        	   235: 	DBF		d7,clr_animals_loop	; loop if more to do
                            	   236: 
02:0000039E 3740000C        	   237: 	MOVE.w	d0,num_animals(a3)	; clear the animals count
                            	   238: 
                            	   239: ; get the screen size
02:000003A2 13FC0002FD0FFF00	   240: 	move.b #$02,leds
                            	   241: 
02:000003AA 7200            	   242: 	moveq #0,d1				; get current window size
02:000003AC 7021            	   243: 	moveq #33,d0			; set/get output window size
02:000003AE 4E4F            	   244: 	trap #15
02:000003B0 13FC0003FD0FFF00	   245: 	move.b #$03,leds
                            	   246: 
02:000003B8 E289            	   247: 	lsr.l	#1,d1				; / 2 for 2x2 pixels
02:000003BA 27410004        	   248: 	move.l d1,width(a3)		; save the screen x,y size
                            	   249: 
02:000003BE 4E75            	   250: 	rts
                            	   251: 
                            	   252: 
                            	   253: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   254: ;
                            	   255: ; do the plants
                            	   256: 
                            	   257: do_plants
02:000003C0 13FC0007FD0FFF00	   258: 	move.b #$07,leds
02:000003C8 41EB0008        	   259: 	LEA		num_plants(a3),a0		; point to the plants count
02:000003CC 326B000A        	   260: 	MOVE.w	max_plants(a3),a1		; get the plants maximum
02:000003D0 45EB0220        	   261: 	LEA		plant_spawn(a3),a2	; point to the plant spawn level
02:000003D4 49EB002C        	   262: 	LEA		plant_xy(a3),a4		; point to the plant position array
02:000003D8 4BEB00F4        	   263: 	LEA		plant_flag(a3),a5		; point to the plant flags
02:000003DC 276B0010001C    	   264: 	MOVE.l	plant_colour(a3),thing_colour(a3)
                            	   265: 							; copy the plant colour
02:000003E2 276B00120020    	   266: 	MOVE.l	plant_fill(a3),fill_colour(a3)
                            	   267: 							; copy the plant fill colour
02:000003E8 276B00180024    	   268: 	MOVE.l	animal_fill(a3),food_colour(a3)
                            	   269: 							; copy the animal fill colour
02:000003EE 276B00140028    	   270: 	MOVE.l	animal_colour(a3),poison_colour(a3)
                            	   271: 							; copy the animal colour
02:000003F4 6034            	   272: 	BRA.s		do_things			; go do the plants
                            	   273: 
                            	   274: 
                            	   275: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   276: ;
                            	   277: ; do the animals
                            	   278: 
                            	   279: do_animals
02:000003F6 13FC0008FD0FFF00	   280: 	move.b #$08,leds
02:000003FE 41EB000C        	   281: 	LEA		num_animals(a3),a0	; point to the animals count
02:00000402 326B000E        	   282: 	MOVE.w	max_animals(a3),a1	; get the animals maximum
02:00000406 45EB0221        	   283: 	LEA		animal_spawn(a3),a2	; point to the animal spawn level
02:0000040A 49EB0126        	   284: 	LEA		animal_xy(a3),a4		; point to the animal position array
02:0000040E 4BEB01EE        	   285: 	LEA		animal_flag(a3),a5	; point to the animal flags
02:00000412 276B0014001C    	   286: 	MOVE.l	animal_colour(a3),thing_colour(a3)
                            	   287: 							; copy the animal colour
02:00000418 276B00180020    	   288: 	MOVE.l	animal_fill(a3),fill_colour(a3)
                            	   289: 							; copy the animal fill colour
02:0000041E 276B00120024    	   290: 	MOVE.l	plant_fill(a3),food_colour(a3)
                            	   291: 							; copy the plant fill colour
02:00000424 276B00100028    	   292: 	MOVE.l	plant_colour(a3),poison_colour(a3)
                            	   293: 							; copy the plant colour
                            	   294: 
                            	   295: 
                            	   296: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   297: ;
                            	   298: ; do things
                            	   299: 
                            	   300: do_things
02:0000042A 13FC0009FD0FFF00	   301: 	move.b #$09,leds
02:00000432 3E10            	   302: 	MOVE.w	(a0),d7			; get the things count
02:00000434 6636            	   303: 	BNE.s		things_exist		; if things exist go make them eat
                            	   304: 
                            	   305: ; else get a random position for thing zero
                            	   306: 
02:00000436 302B0004        	   307: 	MOVE.w	width(a3),d0		; get the screen width
02:0000043A 61000222        	   308: 	BSR		get_prng			; get a random number between 0 and d0.w - 1
02:0000043E 3600            	   309: 	MOVE.w	d0,d3				; copy the x co-ordinate
02:00000440 3800            	   310: 	MOVE.w	d0,d4				; copy the x co-ordinate again
02:00000442 4844            	   311: 	SWAP		d4				; swap it to the high word
02:00000444 302B0006        	   312: 	MOVE.w	height(a3),d0		; get the screen height
02:00000448 61000214        	   313: 	BSR		get_prng			; get a random number between 0 and d0.w - 1
02:0000044C 3800            	   314: 	MOVE.w	d0,d4				; copy the x co-ordinate
02:0000044E 2884            	   315: 	MOVE.l	d4,(a4)			; set the x,y for thing zero
                            	   316: 
02:00000450 7008            	   317: 	MOVEQ		#8,d0				; direction is this position
02:00000452 610000DE        	   318: 	BSR		neighbour			; get the neighbouring pixel colour in
                            	   319: 							; direction d0
02:00000456 BAAB0024        	   320: 	CMP.l		food_colour(a3),d5	; compare the colour with the food colour
02:0000045A 660000D4        	   321: 	BNE		exit_do_things		; if it is not food just exit
                            	   322: 
                            	   323: ; else make thing zero active
                            	   324: 
02:0000045E 5250            	   325: 	ADDQ.w	#1,(a0)			; increment the thing count
02:00000460 1ABC0001        	   326: 	MOVE.b	#1,(a5)			; flag thing zero active
                            	   327: 
02:00000464 2F2B001C        	   328: 	MOVE.l	thing_colour(a3),-(sp)	; fill the old position with the thing colour
02:00000468 600000BC        	   329: 	BRA		fill_old_thing		; go draw thing zero, d7.w = 0 here
                            	   330: 
                            	   331: ; set the direction delta, randomly setting -1 and +1 should remove any bias toward
                            	   332: ; sweeping round the screen clockwise or anticlockwise
                            	   333: 
                            	   334: things_exist
02:0000046C 13FC000AFD0FFF00	   335: 	move.b #10,leds
02:00000474 7002            	   336: 	MOVEQ		#2,d0				; set for 0 or 1
02:00000476 610001E6        	   337: 	BSR		get_prng			; get a random number between 0 and d0.w - 1
02:0000047A D040            	   338: 	ADD.w		d0,d0				; now 0 or 2
02:0000047C 5340            	   339: 	SUBQ.w	#1,d0				; -1 or + 1
02:0000047E 3C40            	   340: 	MOVE.w	d0,a6				; copy the direction delta
                            	   341: 
                            	   342: ; scan through all the possible things
02:00000480 5349            	   343: 	SUBQ.w	#1,a1				; - 1 for loop type
02:00000482 3E09            	   344: 	MOVE.w	a1,d7				; get the maximum things count
                            	   345: do_things_loop
02:00000484 4A357000        	   346: 	TST.b		(a5,d7.w)			; test the thing status
02:00000488 670000A2        	   347: 	BEQ		next_thing			; if not active skip this thing
                            	   348: 
                            	   349: ; get this thing's x,y position
                            	   350: 
                            	   351: thing_zero_only
02:0000048C 13FC000BFD0FFF00	   352: 	move.b #11,leds
02:00000494 3807            	   353: 	MOVE.w	d7,d4				; copy the index
02:00000496 E544            	   354: 	ASL.w		#2,d4				; ; 4 bytes per word
02:00000498 28344000        	   355: 	MOVE.l	(a4,d4.w),d4		; get the thing's x,y position
02:0000049C 2604            	   356: 	MOVE.l	d4,d3				; copy the thing's x position
02:0000049E 4843            	   357: 	SWAP		d3				; move the thing's x position to the low word
                            	   358: 
                            	   359: ; fill the thing's current position
                            	   360: 
02:000004A0 2F2B0020        	   361: 	MOVE.l	fill_colour(a3),-(sp)	; set the fill behind colour
                            	   362: 
                            	   363: ; get a random direction
                            	   364: 
02:000004A4 610001B6        	   365: 	BSR		get_direction		; get a random direction
                            	   366: 
                            	   367: ; remember the direction we start from
                            	   368: 
02:000004A8 3C00            	   369: 	MOVE.w	d0,d6				; copy the start direction
                            	   370: check_for_food
02:000004AA 13FC000CFD0FFF00	   371: 	move.b #12,leds
02:000004B2 617E            	   372: 	BSR.s		neighbour			; get the neighbouring pixel colour in
                            	   373: 							; direction d0
02:000004B4 BAAB0024        	   374: 	CMP.l		food_colour(a3),d5	; compare the colour with the food colour
02:000004B8 6720            	   375: 	BEQ.s		is_food			; if it is food go move the thing
                            	   376: 
02:000004BA BAAB0028        	   377: 	CMP.l		poison_colour(a3),d5	; compare the colour with the poison colour
02:000004BE 670A            	   378: 	BEQ.s		kill_thing			; if it is poison go kill the thing
                            	   379: 
                            	   380: ; no food in the direction looked so try the next direction
                            	   381: 
02:000004C0 D04E            	   382: 	ADD.w		a6,d0				; add the direction delta
02:000004C2 02400007        	   383: 	ANDI.w	#7,d0				; mask 0 to 7
02:000004C6 BC40            	   384: 	CMP.w		d0,d6				; compare it with the start direction
02:000004C8 66E0            	   385: 	BNE.s		check_for_food		; if not back at the start go check for food
                            	   386: 
                            	   387: ; else this thing has starved so kill it
                            	   388: 
                            	   389: kill_thing
02:000004CA 13FC000DFD0FFF00	   390: 	move.b #13,leds
02:000004D2 5350            	   391: 	SUBQ.w	#1,(a0)			; decrement the thing count
02:000004D4 42357000        	   392: 	MOVE.b	#0,(a5,d7.w)		; clear the thing flag
02:000004D8 604C            	   393: 	BRA.s		fill_old_thing		; go fill this thing with the fill behind colour
                            	   394: 
                            	   395: ; found food beside the thing so move it there
                            	   396: 
                            	   397: is_food
02:000004DA 13FC000EFD0FFF00	   398: 	move.b #14,leds
02:000004E2 3007            	   399: 	MOVE.w	d7,d0				; copy the index
02:000004E4 E540            	   400: 	ASL.w		#2,d0				; ; 4 bytes per word
02:000004E6 39810000        	   401: 	MOVE.w	d1,(a4,d0.w)		; save the thing's new x position
02:000004EA 39820002        	   402: 	MOVE.w	d2,2(a4,d0.w)		; save the thing's new y position
                            	   403: 
02:000004EE 52357000        	   404: 	ADDQ.b	#1,(a5,d7.w)		; increment the thing flag
                            	   405: 
                            	   406: ; check for spawning a new thing
                            	   407: 
02:000004F2 10357000        	   408: 	MOVE.b	(a5,d7.w),d0		; get the thing flag
02:000004F6 9012            	   409: 	SUB.b		(a2),d0			; compare it with the spawn level
02:000004F8 6F2A            	   410: 	BLE.s		draw_old_thing		; if not there yet skip the spawn
                            	   411: 
                            	   412: ; else the thing is going to try to spawn
                            	   413: 
02:000004FA 1B807000        	   414: 	MOVE.b	d0,(a5,d7.w)		; reset the flag for this thing, d0 = 1
                            	   415: 
                            	   416: ; search for a free thing slot
                            	   417: 
02:000004FE 3C09            	   418: 	MOVE.w	a1,d6				; get the maximum things count
02:00000500 BC50            	   419: 	CMP.w		(a0),d6			; compare it with the things count
02:00000502 6B20            	   420: 	BMI.s		draw_old_thing		; if no space just draw the old thing
                            	   421: 
                            	   422: new_thing_loop
02:00000504 13FC000FFD0FFF00	   423: 	move.b #15,leds
02:0000050C 4A356000        	   424: 	TST.b		(a5,d6.w)			; test this thing flag
02:00000510 57CEFFF2        	   425: 	DBEQ		d6,new_thing_loop		; loop if active
                            	   426: 
                            	   427: ; found one of the free thing slots so flag that the new thing is active
                            	   428: 
02:00000514 5250            	   429: 	ADDQ.w	#1,(a0)			; increment the thing count
02:00000516 1B806000        	   430: 	MOVE.b	d0,(a5,d6.w)		; set the new thing's active flag, d0 = 1
                            	   431: 
                            	   432: ; save the new thing position
                            	   433: 
02:0000051A E546            	   434: 	ASL.w		#2,d6				; ; 4 bytes per word
02:0000051C 29846000        	   435: 	MOVE.l	d4,(a4,d6.w)		; save the new thing's x,y position
                            	   436: 
                            	   437: ; set the new thing's colour to fill the thing's old position
                            	   438: 
02:00000520 2EAB001C        	   439: 	MOVE.l	thing_colour(a3),(sp)	; fill the old position with the thing colour
                            	   440: 
                            	   441: ; now draw the current thing in the new position and fill the old position
                            	   442: 
                            	   443: draw_old_thing
02:00000524 617C            	   444: 	BSR.s		set_thing_pixel		; set the pixel at d1,d2 to the thing's colour
                            	   445: fill_old_thing
02:00000526 201F            	   446: 	MOVE.l	(sp)+,d0			; get the d3,d4 pixel's colout
02:00000528 6100008E        	   447: 	BSR		set_a_pixel			; set the pixel at d3,d4 to the d0's colour
                            	   448: next_thing
02:0000052C 51CFFF56        	   449: 	DBF		d7,do_things_loop		; decrement and loop if more things to do
                            	   450: 
                            	   451: exit_do_things
02:00000530 4E75            	   452: 	RTS
                            	   453: 
                            	   454: 
                            	   455: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   456: ;
                            	   457: ; get the neighbouring 2x2 pixel colour in direction d0.w
                            	   458: ;
                            	   459: ; x is in d3.w, y is in d4.w
                            	   460: ;
                            	   461: ; returns the pixel colour or -1 of out of range in d5.l
                            	   462: ; returns the new x,y in d1,d2
                            	   463: 
                            	   464: neighbour
02:00000532 13FC0010FD0FFF00	   465: 	move.b #16,leds
02:0000053A 48E78080        	   466: 	MOVEM.l	d0/a0,-(sp)		; save the direction
                            	   467: 
02:0000053E 7AFF            	   468: 	MOVEQ		#-1,d5			; flag out of range
                            	   469: 
02:00000540 3203            	   470: 	MOVE.w	d3,d1				; copy x
02:00000542 3404            	   471: 	MOVE.w	d4,d2				; copy y
                            	   472: 
02:00000544 D040            	   473: 	add.w	d0,d0					; * 2 bytes per word
02:00000546 41FA057E        	   474: 	lea delta_x(pc),a0
02:0000054A D2700000        	   475: 	add.w	(a0,d0.w),d1			; add the direction delta x to x
02:0000054E 6B28            	   476: 	BMI.s		exit_neighbour		; if x < screen x minimum just exit
                            	   477: 
02:00000550 B26B0004        	   478: 	CMP.w		width(a3),d1		; compare it with the screen width
02:00000554 6C22            	   479: 	BGE.s		exit_neighbour		; if x > screen x maximum just exit
                            	   480: 
02:00000556 41FA0590        	   481: 	lea delta_y(pc),a0
02:0000055A D4700000        	   482: 	add.w	(a0,d0.w),d2	; add the direction delta y to y
02:0000055E 6B18            	   483: 	BMI.s		exit_neighbour		; if y < screen y minimum just exit
                            	   484: 
02:00000560 B46B0006        	   485: 	CMP.w		height(a3),d2		; compare it with the screen height
02:00000564 6C12            	   486: 	BGE.s		exit_neighbour		; if y > screen y maximum just exit
                            	   487: 
02:00000566 48E76000        	   488: 	MOVEM.l	d1-d2,-(sp)			; save the new x,y
                            	   489: 
02:0000056A D241            	   490: 	ADD.w		d1,d1				; * 2
02:0000056C D442            	   491: 	ADD.w		d2,d2				; * 2
02:0000056E 7053            	   492: 	MOVEQ		#83,d0			; read a pixel
02:00000570 4E4F            	   493: 	trap #15
                            	   494: 
02:00000572 4CDF0006        	   495: 	MOVEM.l	(sp)+,d1-d2			; restore the new x,y
                            	   496: 
02:00000576 2A00            	   497: 	MOVE.l	d0,d5				; copy the pixel colour
                            	   498: exit_neighbour
02:00000578 4CDF0101        	   499: 	MOVEM.l	(sp)+,d0/a0			; restore the direction
                            	   500: 
02:0000057C 4E75            	   501: 	rts
                            	   502: 
                            	   503: ; direction deltas				; the directions are
                            	   504: 							;
                            	   505: 							; +---+---+---+
                            	   506: 							; | 5 | 4 | 3 |
                            	   507: 							; +---+---+---+
                            	   508: 							; | 6 | 8 | 2 |
                            	   509: 							; +---+---+---+
                            	   510: 							; | 7 | 0 | 1 |
                            	   511: 							; +---+---+---+
                            	   512: delta_x
02:0000057E 0000            	   513: 	dc.w	0					; direction 0 dx,dy =  0, 1
02:00000580 0001            	   514: 	dc.w	1					; direction 1 dx,dy =  1, 1
02:00000582 0001            	   515: 	dc.w	1					; direction 2 dx,dy =  1, 0
02:00000584 0001            	   516: 	dc.w	1					; direction 3 dx,dy =  1,-1
02:00000586 0000            	   517: 	dc.w	0					; direction 4 dx,dy =  0,-1
02:00000588 FFFF            	   518: 	dc.w	-1					; direction 5 dx,dy = -1,-1
02:0000058A FFFF            	   519: 	dc.w	-1					; direction 6 dx,dy = -1, 0
02:0000058C FFFF            	   520: 	dc.w	-1					; direction 7 dx,dy = -1, 1
02:0000058E 0000            	   521: 	dc.w	0					; direction 8 dx,dy =  0, 0
                            	   522: 
                            	   523: delta_y
02:00000590 0001            	   524: 	dc.w	1					; direction 0 dx,dy =  0, 1
02:00000592 0001            	   525: 	dc.w	1					; direction 1 dx,dy =  1, 1
02:00000594 0000            	   526: 	dc.w	0					; direction 2 dx,dy =  1, 0
02:00000596 FFFF            	   527: 	dc.w	-1					; direction 3 dx,dy =  1,-1
02:00000598 FFFF            	   528: 	dc.w	-1					; direction 4 dx,dy =  0,-1
02:0000059A FFFF            	   529: 	dc.w	-1					; direction 5 dx,dy = -1,-1
02:0000059C 0000            	   530: 	dc.w	0					; direction 6 dx,dy = -1, 0
02:0000059E 0001            	   531: 	dc.w	1					; direction 7 dx,dy = -1, 1
02:000005A0 0000            	   532: 	dc.w	0					; direction 8 dx,dy =  0, 0
                            	   533: 
                            	   534: 
                            	   535: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   536: ;
                            	   537: ; set the 2x2 pixel at d1,d2 to the thing's
                            	   538: 
                            	   539: set_thing_pixel
02:000005A2 13FC0012FD0FFF00	   540: 	move.b #18,leds
02:000005AA 48E77800        	   541: 	MOVEM.l	d1-d4,-(sp)			; save the registers
02:000005AE 3601            	   542: 	MOVE.w	d1,d3				; copy the thing's new x position
02:000005B0 3802            	   543: 	MOVE.w	d2,d4				; copy the thing's new y position
02:000005B2 202B001C        	   544: 	MOVE.l	thing_colour(a3),d0	; get the thing colour
02:000005B6 600C            	   545: 	BRA.s		set_this_pixel		; go set this pixel
                            	   546: 
                            	   547: 
                            	   548: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   549: ;
                            	   550: ; set the 2x2 pixel at d3,d4 to colour d0
                            	   551: 
                            	   552: set_a_pixel
02:000005B8 13FC0013FD0FFF00	   553: 	move.b #19,leds
02:000005C0 48E77800        	   554: 	MOVEM.l	d1-d4,-(sp)			; save the registers
                            	   555: 
                            	   556: set_this_pixel
02:000005C4 13FC0014FD0FFF00	   557: 	move.b #20,leds
02:000005CC 2200            	   558: 	MOVE.l	d0,d1				; copy the colour
02:000005CE 7050            	   559: 	MOVEQ		#80,d0			; set the pen colour
02:000005D0 4E4F            	   560: 	TRAP		#15
                            	   561: 
02:000005D2 7201            	   562: 	MOVEQ		#1,d1				; + 1
02:000005D4 7401            	   563: 	MOVEQ		#1,d2				; + 1
02:000005D6 D643            	   564: 	ADD.w		d3,d3				; x*2
02:000005D8 D844            	   565: 	ADD.w		d4,d4				; y*2
02:000005DA D243            	   566: 	ADD.w		d3,d1				; x*2 + 1
02:000005DC D444            	   567: 	ADD.w		d4,d2				; y*2 + 1
02:000005DE 705A            	   568: 	MOVEQ		#90,d0			; draw a rectangle in the pen colour
02:000005E0 4E4F            	   569: 	TRAP		#15
                            	   570: 
02:000005E2 4CDF001E        	   571: 	MOVEM.l	(sp)+,d1-d4			; restore the registers
02:000005E6 4E75            	   572: 	RTS
                            	   573: 
                            	   574: 
                            	   575: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   576: ;
                            	   577: ; setup stuff
                            	   578: 
                            	   579: InitialisePlants:
02:000005E8 123C0040        	   580: 	move.b #'@',d1
02:000005EC 4EB900000000    	   581: 	jsr DisplayChar
                            	   582: 	
                            	   583: ;	MOVE.b	#17,d1			; enable double buffering
                            	   584: ;	MOVE.b	#92,d0			; set draw mode
                            	   585: ;	TRAP		#15
                            	   586: 
02:000005F2 123C0041        	   587: 	move.b #'A',d1
02:000005F6 4EB900000000    	   588: 	jsr DisplayChar
                            	   589: 	
02:000005FC 7200            	   590: 	moveq #0,d1					; echo off
02:000005FE 700C            	   591: 	moveq #12,d0				; set keyboard echo
02:00000600 4E4F            	   592: 	trap #15
02:00000602 123C0042        	   593: 	move.b #'B',d1
02:00000606 4EB900000000    	   594: 	jsr DisplayChar
                            	   595: 
02:0000060C 223C00000888    	   596: 	move.l #$00000888,d1		; 24 bpp
02:00000612 7E06            	   597: 	moveq #6,d7							; framebuf device
02:00000614 7C21            	   598: 	moveq #DEV_SET_COLOR_DEPTH,d6
02:00000616 4E40            	   599: 	trap #0
02:00000618 7E07            	   600: 	moveq #7,d7							; graphics accelerator device
02:0000061A 4E40            	   601: 	trap #0
02:0000061C 223C0F003F4F    	   602: 	move.l #$0F003F4F,d1		; set burst length, max burst number and interval
02:00000622 4EB9000098D4    	   603: 	jsr rbo
02:00000628 23C1FD200004    	   604: 	move.l d1,FRAMEBUF+4
02:0000062E 123C0043        	   605: 	move.b #'C',d1
02:00000632 4EB900000000    	   606: 	jsr DisplayChar
                            	   607: 
02:00000638 47FA06AC        	   608: 	lea	pvariables(pc),a3		; get the variables base address
                            	   609: 
02:0000063C 3681            	   610: 	move.w d1,quit(a3)			; clear the quit flag
                            	   611: 
02:0000063E 7008            	   612: 	moveq #8,d0					; get time in 1/100 ths seconds
02:00000640 4E4F            	   613: 	trap #15
02:00000642 2001            	   614: 	move.l d1,d0
02:00000644 123C0044        	   615: 	move.b #'D',d1
02:00000648 4EB900000000    	   616: 	jsr DisplayChar
02:0000064E 2200            	   617: 	move.l d0,d1
                            	   618: 
02:00000650 0A81DEADBEEF    	   619: 	eori.l #$DEADBEEF,d1		; EOR with the initial PRNG seed, this must
                            	   620: 													; result in any value but zero
02:00000656 2741000A        	   621: 	move.l d1,PRNlword(a3)	; save the initial PRNG seed
02:0000065A 4E75            	   622: 	rts
                            	   623: 
                            	   624: 
                            	   625: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   626: ;
                            	   627: ; get a random direction
                            	   628: 
                            	   629: get_direction
02:0000065C 7008            	   630: 	moveq #8,d0				; set for direction 0 to 7
                            	   631: 
                            	   632: 
                            	   633: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   634: ;
                            	   635: ; get a random number between 0 and d0.w - 1
                            	   636: 
                            	   637: get_prng
02:0000065E 4EB90000C240    	   638: 	jsr gen_prng			; call the PRNG code
02:00000664 C0EB000A        	   639: 	mulu.w PRNlword(a3),d0		; random word times scale
02:00000668 4240            	   640: 	clr.w	d0					; clear the low word
02:0000066A 4840            	   641: 	swap d0						; return the high word as the result
02:0000066C 4E75            	   642: 	rts
                            	   643: 
                            	   644: 
                            	   645: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   646: ;
                            	   647: ; This is the code that generates the pseudo random sequence. A seed word located in
                            	   648: ; PRNlword(a3) is loaded into a register before being operated on to generate the
                            	   649: ; next number in the sequence. This number is then saved as the seed for the next
                            	   650: ; time it's called.
                            	   651: ;
                            	   652: ; This code is adapted from the 32 bit version of RND(n) used in EhBASIC68. Taking
                            	   653: ; the 19th next number is slower but helps to hide the shift and add nature of this
                            	   654: ; generator as can be seen from analysing the output.
                            	   655: 
                            	   656: ;gen_prng
                            	   657: ;	MOVEM.l	d0-d2,-(sp)			; save d0, d1 and d2
                            	   658: ;	MOVE.l	PRNlword(a3),d0		; get current seed longword
                            	   659: ;	MOVEQ		#$AF-$100,d1		; set EOR value
                            	   660: ;	MOVEQ		#18,d2			; do this 19 times
                            	   661: ;Ninc0
                            	   662: ;	ADD.l		d0,d0				; shift left 1 bit
                            	   663: ;	BCC.s		Ninc1				; if bit not set skip feedback
                            	   664: 
                            	   665: ;	EOR.b		d1,d0				; do Galois LFSR feedback
                            	   666: ;Ninc1
                            	   667: ;	DBF		d2,Ninc0			; loop;
                            	   668: 
                            	   669: ;	MOVE.l	d0,PRNlword(a3)		; save back to seed longword
                            	   670: ;	MOVEM.l	(sp)+,d0-d2			; restore d0, d1 and d2
                            	   671: 
                            	   672: ;	RTS
                            	   673: 
                            	   674: 
                            	   675: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   676: ;
                            	   677: ; check the [F2], [F3] and [F4] keys. set the screen size to 640 x 480, 800 x 600 or
                            	   678: ; 1024 x 768 if the corresponding key has been pressed
                            	   679: 
                            	   680: screen_size
02:0000066E 4E75            	   681: 	rts
02:00000670 223C71007273    	   682: 	MOVE.l	#$71007273,d1		; [F2], [], [F3] and [F4] keys
02:00000676 7013            	   683: 	MOVEQ		#19,d0			; check for keypress
02:00000678 4E4F            	   684: 	TRAP		#15
                            	   685: 
02:0000067A 2401            	   686: 	MOVE.l	d1,d2				; copy result
02:0000067C 672C            	   687: 	BEQ.s		pnotscreen			; skip screen size if no F key
                            	   688: 
02:0000067E 223C014000F0    	   689: 	MOVE.l	#$028001E0/2,d1		; set 640 x 480
02:00000684 4A82            	   690: 	TST.l		d2				; test result
02:00000686 6B10            	   691: 	BMI.s		psetscreen			; if F2 go set window size
                            	   692: 
02:00000688 223C0190012C    	   693: 	MOVE.l	#$03200258/2,d1		; set 800 x 600
02:0000068E 4A42            	   694: 	TST.w		d2				; test result
02:00000690 6B06            	   695: 	BMI.s		psetscreen			; if F3 go set window size
                            	   696: 
                            	   697: 							; else was F4 so ..
02:00000692 223C02000180    	   698: 	MOVE.l	#$04000300/2,d1		; set 1024 x 768
                            	   699: psetscreen
02:00000698 B2AB0004        	   700: 	CMP.l		width(a3),d1		; compare with current screen size
02:0000069C 670C            	   701: 	BEQ.s		.0001			; if already set skip setting it now
                            	   702: 
02:0000069E D281            	   703: 	ADD.l		d1,d1				; make it the full size
02:000006A0 7021            	   704: 	MOVEQ 	#33,d0			; get/set window size
02:000006A2 4E4F            	   705: 	TRAP		#15
                            	   706: 
02:000006A4 70FF            	   707: 	MOVEQ		#-1,d0			; set the longword
02:000006A6 37400002        	   708: 	MOVE.w	d0,redraw(a3)		; set the redraw flag
                            	   709: .0001
                            	   710: pnotscreen:
02:000006AA 4E75            	   711: 	rts
                            	   712: 
                            	   713: 
                            	   714: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   715: ;
                            	   716: ; variables
                            	   717: 
                            	   718: pvariables
                            	   719: 
                            	   720: 	OFFSET	0				; going to use relative addressing
                            	   721: 
                            	   722: ;PRNlword
                            	   723: ;	ds.l	1					; PRNG seed long word
                            	   724: quit
03:00000000 0000            	   725: 	ds.w	1					; quit flag
                            	   726: redraw
03:00000002 0000            	   727: 	ds.w	1					; redraw the world flag
                            	   728: 
                            	   729: width
03:00000004 0000            	   730: 	ds.w	1					; screen width
                            	   731: height
03:00000006 0000            	   732: 	ds.w	1					; screen height
                            	   733: 
                            	   734: num_plants
03:00000008 0000            	   735: 	ds.w	1					; the number of plants
                            	   736: max_plants
03:0000000A 0000            	   737: 	ds.w	1					; the maximum number of plants
                            	   738: 
                            	   739: num_animals
03:0000000C 0000            	   740: 	ds.w	1					; the number of animals
                            	   741: max_animals
03:0000000E 0000            	   742: 	ds.w	1					; the maximum number of animals
                            	   743: 
                            	   744: plant_colour
03:00000010 0000            	   745: 	ds.w	1					; plant colour
                            	   746: plant_fill
03:00000012 0000            	   747: 	ds.w	1					; plant overfill
                            	   748: 
                            	   749: animal_colour
03:00000014 00000000        	   750: 	ds.l	1					; animal colour
                            	   751: animal_fill
03:00000018 00000000        	   752: 	ds.l	1					; animal overfill
                            	   753: 
                            	   754: thing_colour
03:0000001C 00000000        	   755: 	ds.l	1					; the colour of things
                            	   756: fill_colour
03:00000020 00000000        	   757: 	ds.l	1					; the colour that things leave
                            	   758: food_colour
03:00000024 00000000        	   759: 	ds.l	1					; the colour that things eat
                            	   760: poison_colour
03:00000028 00000000        	   761: 	ds.l	1					; the colour that kills things
                            	   762: 
                            	   763: plant_xy
03:0000002C 0000            	   764: 	ds.w	def_plants*2			; plant x,y positions
03:0000002E *
                            	   765: plant_flag
03:000000F4 00              	   766: 	ds.b	def_plants				; plant active flags
03:000000F5 *
                            	   767: 
                            	   768: animal_xy
03:00000126 0000            	   769: 	ds.w	def_animals*2			; animal x,y positions
03:00000128 *
                            	   770: animal_flag
03:000001EE 00              	   771: 	ds.b	def_animals				; animal active and state
03:000001EF *
                            	   772: 
                            	   773: plant_spawn
03:00000220 00              	   774: 	ds.b	1					; the space count at which a plant reproduces
                            	   775: animal_spawn
03:00000221 00              	   776: 	ds.b	1					; the leaf count at which a animal reproduces
                            	   777: 
                            	   778: 	ds.w	0					; ensure even
                            	   779: 
                            	   780: 
                            	   781: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   782: 
                            	   783: 	END		start_plants
                            	   784: 
                            	   785: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   786: 

Source: "boot.x68"
                            	  4619: 


Symbols by name:
ABCD_INNER1                     00:000049FA
ABCD_INNER2                     00:00004A68
ABCD_NO_C1                      00:00004A16
ABCD_NO_C2                      00:00004A1E
ABCD_NO_C3                      00:00004A84
ABCD_NO_C4                      00:00004A8C
ABCD_OUTER1                     00:000049F8
ABCD_OUTER2                     00:00004A66
ABS                             00:0000739E
ACIA                             E:FD060000
ACIA_CMD                         E:00000008
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     00:00005568
ADDQ_LOOP1                      00:00004D82
ADDQ_LOOP2                      00:00004DC0
ADDQ_LOOP3                      00:00004DF6
ADDX_LOOP3                      00:0000568E
ADDX_LOOP4                      00:000056AA
ADDX_LOOP5                      00:000056C6
ADDX_OUTER1                     00:000055FA
ADD_OUTER1                      00:0000538E
ADD_OUTER2                      00:00005402
AHOW                            00:00007626
ALL_DONE                        00:0000275C
AND_OUTER1                      00:000050AC
AND_OUTER2                      00:00005120
ASORRY                          00:0000761E
AUXIN                           00:0000794A
AUXOUT                          00:00007936
AWHAT                           00:000075DE
AXIRET                          00:00007968
AllocateString                  00:000070B6
ArmAllBreakpoints               00:00009DA2
ArmBreakpoint                   00:00009DD2
AsciiToHexNybble                00:00009520
AudioInputTest                  00:000098C6
BCC1                            00:00004CA0
BCC10                           00:00004CF2
BCC11                           00:00004CFA
BCC12                           00:00004D04
BCC13                           00:00004D0C
BCC14                           00:00004D16
BCC2                            00:00004CAA
BCC3                            00:00004CB2
BCC4                            00:00004CBC
BCC5                            00:00004CC4
BCC6                            00:00004CCE
BCC7                            00:00004CD6
BCC8                            00:00004CE0
BCC9                            00:00004CE8
BLANK                            E:00000020
BRTBL                           00:0000A79A
BSR_CLOSE1                      00:00003830
BSR_CLOSE2                      00:00003866
BSR_FAR1                        00:0000275E
BSR_FAR2                        00:00004C90
BUFFER                          00:00007A3C
BUFLEN                           E:00000050
BUFSIZE                          E:0000003F
BYEBYE                          00:0000796A
BlankLastLine                   00:0000147C
BouncingBalls                   00:000098C8
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
BufByte                         00:000095AC
BufNybble                       00:000095B2
BufTetra                        00:000095A0
BufWyde                         00:000095A6
CALL                            00:00006B02
CHKIO                           00:000078DC
CHKRET                          00:000078EC
CHR                             00:00007558
CLEAR                           00:00006B18
CLMSG                           00:000079D2
CLS                             00:000078FA
CMPA_OUTER1                     00:00005282
CMPM_LOOP1                      00:00005310
CMPM_LOOP2                      00:0000532A
CMPM_LOOP3                      00:00005344
CMP_OUTER1                      00:0000520C
COLOR                           00:00006B7A
COLOR1                          00:00006B86
COLOR2                          00:00006BDA
COMMON                          00:0000AB8C
COMMON35                        00:0000AB9A
COMMON4                         00:0000AB8A
COM_CMDTBL                      00:0000155C
CORENO                          00:000073C6
CR                               E:0000000D
CRLF                            00:00007AF2
CS11                            00:0000A5D0
CS12                            00:0000A540
CS13                            00:0000A4C6
CS14                            00:0000A45C
CS15                            00:0000A41E
CS16                            00:0000A3B0
CS17                            00:0000A766
CS18                            00:0000A702
CS19                            00:0000A812
CS20                            00:0000A66A
CSTART                          00:000061EE
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLS                            E:00000013
CTRLX                            E:00000018
CTRLZ                            E:0000001A
CURRNT                          00:000079E4
CURVE                           00:00006D2C
CalcScreenLoc                   00:00001250
CallOS                          00:00000240
CheckForCtrlC                   00:000008C6
CheckForKey                     00:00000880
CheckNumeric                    00:00006E26
ClearBreakpointList             00:00009EC4
ClearScreen                     00:000098CC
ClearStringArea                 00:0000631A
ClearStringStack                00:0000633A
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
ConcatString                    00:00006F32
Cursor1                         00:00007FC2
DBCC_LOOP1                      00:00004D20
DBCC_LOOP2                      00:00004D2E
DCB_BKCOLOR                      E:00000060
DCB_CMDPROC                      E:00000018
DCB_FGCOLOR                      E:00000064
DCB_INBUFPTR                     E:00000038
DCB_INBUFPTR2                    E:00000070
DCB_INBUFSIZE                    E:00000040
DCB_INDIMX                       E:00000048
DCB_INDIMY                       E:0000004C
DCB_INDIMZ                       E:00000050
DCB_INPOSX                       E:0000002C
DCB_INPOSY                       E:00000030
DCB_INPOSZ                       E:00000034
DCB_MAGIC                        E:00000000
DCB_NAME                         E:00000004
DCB_OPCODE                       E:00000068
DCB_OUTBUFPTR                    E:0000003C
DCB_OUTBUFPTR2                   E:00000074
DCB_OUTBUFSIZE                   E:00000044
DCB_OUTBUFSIZE2                  E:0000007C
DCB_OUTDIMX                      E:00000054
DCB_OUTDIMY                      E:00000058
DCB_OUTDIMZ                      E:0000005C
DCB_OUTPOSX                      E:00000020
DCB_OUTPOSY                      E:00000024
DCB_OUTPOSZ                      E:00000028
DCB_SIZE                         E:00000084
DCB_UNIT                         E:00000080
DCODE68K                        00:0000AAF2
DDATA                            E:FFFFFFF0
DEC311                          00:0000AB06
DEC404                          00:0000AB24
DEC411                          00:0000AB34
DEC425                          00:0000AB44
DEC510                          00:0000AB50
DEC515                          00:0000AB54
DEC530                          00:0000AB5C
DEC535                          00:0000AB62
DEC537                          00:0000AB6E
DEFLT                           00:00006992
DEV_CLEAR                        E:0000000C
DEV_DRAW_CURVE                   E:0000001F
DEV_DRAW_LINE                    E:0000001C
DEV_DRAW_RECTANGLE               E:0000001E
DEV_DRAW_TRIANGLE                E:0000001D
DEV_GETBUF1                      E:00000010
DEV_GET_DIMEN                    E:00000014
DEV_GET_OUTPOS                   E:00000017
DEV_GET_OUTPTR                   E:00000018
DEV_HMASH                        E:56791123
DEV_PLOT_POINT                   E:0000001B
DEV_PUTCHAR                      E:00000002
DEV_SET_COLOR                    E:00000019
DEV_SET_COLOR_DEPTH              E:00000021
DEV_SET_DESTBUF                  E:00000022
DEV_SET_DIMEN                    E:00000020
DEV_SET_DISPBUF                  E:00000023
DEV_SET_OUTPOS                   E:00000007
DEV_SWAPBUF                      E:0000000D
DEV_WRITEAT                      E:00000012
DIRECT                          00:0000655C
DIRFLG                          00:00007A38
DISPBUF                         00:00006B6A
DIV1                            00:000072E2
DIV2                            00:000072E8
DIV3                            00:000072EE
DIV32                           00:000072D0
DIV4                            00:000072FC
DIVRT                           00:0000730A
DIVS_OUTER1                     00:00004F6C
DIVU_OUTER1                     00:00004F1A
DOMID                           00:00007476
DOQUO                           00:000078BA
DOQUO1                          00:000078C2
DRAW                             E:0000A000
DRAWBUF                         00:00006B5A
DT_NUMERIC                       E:00000001
DT_STRING                        E:00000002
Delay3s                         00:0000263E
Delay3s2                        00:00002662
Diagonal1                       00:00007E46
Diagonal2                       00:00007E66
DisarmAllBreakpoints            00:00009D76
DisarmBreakpoint                00:00009E50
DispatchMsg                     00:00009F56
DisplayAddr                     00:000095CA
DisplayByte                     00:00009580
DisplayChar                     external
DisplayHelp                     00:000084D2
DisplayMem                      00:00008E36
DisplayNybble                   00:00009586
DisplaySpace                    00:0000956C
DisplayString                   00:00007B0C
DisplayStringCRLF               00:00007B22
DisplayStringLimited            00:00007B26
DisplayStringLimitedCRLF        00:00007B46
DisplayTetra                    00:00009574
DisplayTwoSpaces                00:0000955A
DisplayWyde                     00:0000957A
DrawHorizTo                     00:00007F60
DrawToXY                        00:00007EE2
DrawVertTo                      00:00007F92
DumpMem1                        00:00008E24
EA000                           00:0000A842
EA001                           00:0000A84E
EA010                           00:0000A85A
EA011                           00:0000A86E
EA011RTS                        00:0000A884
EA100                           00:0000A886
EA101                           00:0000A928
EA1105                          00:0000A904
EA1107                          00:0000A908
EA1109                          00:0000A91E
EA111                           00:0000A93E
EA1112                          00:0000A95C
EA1113                          00:0000A978
EA1113A                         00:0000A988
EA1114                          00:0000A9AA
EA1115                          00:0000AA14
EA11153                         00:0000AA4C
EA11155                         00:0000AA56
EAF25                           00:0000A9F2
EAF27                           00:0000A9F6
EAF35                           00:0000AA0A
EEA                             00:0000A8A0
EEA10                           00:0000A4CE
ENDCHK                          00:000075CA
ENDCHK1                         00:000075DA
ENDMEM                          00:000061EA
EOR_OUTER2                      00:00005196
EOT                              E:00000004
ERROR                           00:000075E2
ESC                              E:0000001B
ETYPE                           00:0000762C
EX1                             00:00006596
EXCEPTION_6                     00:00002766
EXCEPTION_7                     00:0000276E
EXEC                            00:0000656C
EXGO                            00:000065A2
EXLP                            00:00006574
EXMAT                           00:0000659C
EXNGO                           00:0000657E
EXP4RT                          00:00007026
EXPR                            00:00006DD4
EXPR2                           00:00006EC2
EXPR3                           00:00006FA0
EXPR4                           00:0000700A
EXPR_AND                        00:00006DFA
EXPR_OR                         00:00006DD4
EXPR_REL                        00:00006E38
E_BadDevNum                      E:00000020
E_Func                           E:00000002
E_InitErr                        E:00000027
E_NoDev                          E:00000021
E_NotAlloc                       E:00000009
E_NotSupported                   E:0000000A
E_Ok                             E:00000000
E_ReadError                      E:00000023
E_WriteError                     E:00000024
EditMemHelper                   00:0000894A
ExecuteCode                     00:000089CA
FDATA                            E:0000000A
FE10                            00:0000A89C
FE11                            00:0000A984
FE12                            00:0000AB42
FERROR                          00:0000ABB4
FERROR35                        00:0000ABBE
FERROR39                        00:0000ABCA
FI1                             00:000075BC
FI2                             00:000075C8
FIN                             00:000075B0
FINISH                          00:0000677A
FMTK_SEMA                        E:00000008
FNDLN                           00:000076D0
FNDLNP                          00:000076DE
FNDNXT                          00:000076F6
FNDRET                          00:000076F4
FNDSKP                          00:000076F8
FOC                              E:0000001F
FOP                              E:00000027
FOR                             00:000067E8
FORM1                           00:0000A454
FORM10                          00:0000A510
FORM103                         00:0000A516
FORM104                         00:0000A51A
FORM105                         00:0000A52A
FORM10E3                        00:0000A4F4
FORM10E4                        00:0000A4FC
FORM10E6                        00:0000A508
FORM10EX                        00:0000A4D2
FORM11                          00:0000A544
FORM112                         00:0000A560
FORM114                         00:0000A56E
FORM11SL                        00:0000A54C
FORM12                          00:0000A570
FORM125                         00:0000A58A
FORM12A                         00:0000A5AC
FORM1A                          00:0000A458
FORM3                           00:0000A45E
FORM4                           00:0000A462
FORM5                           00:0000A474
FORM6A                          00:0000A478
FORM6D                          00:0000A488
FORM7                           00:0000A4AE
FORM8                           00:0000A4BA
FORM815                         00:0000A4BE
FORM9                           00:0000A4C8
FORM91                          00:0000A82A
FORM93                          00:0000A83E
FORM95                          00:0000A840
FORMREG5                        00:0000A49C
FORMREGA                        00:0000A498
FORMREGD                        00:0000A4A8
FORMSIZE                        00:0000A816
FR1                             00:00006802
FR2                             00:0000681A
FR3                             00:00006820
FR4                             00:00006826
FR5                             00:0000682E
FR6                             00:00006840
FR7                             00:0000684C
FR8                             00:00006864
FRAMEBUF                         E:FD200000
FRAMEBUF_BMPSIZE_X               E:00000068
FRAMEBUF_BMPSIZE_Y               E:0000006C
FRAMEBUF_CMDTBL                 00:000018DC
FRAMEBUF_COLOR_COMP              E:00000098
FRAMEBUF_CTRL                    E:00000000
FRAMEBUF_PAGE1_ADDR              E:00000010
FRAMEBUF_PAGE2_ADDR              E:00000018
FRAMEBUF_PPS                     E:000000B0
FRAMEBUF_WINDOW_DIMEN            E:00000078
FREL10                          00:0000A318
FREL15                          00:0000A32A
FREL20                          00:0000A344
FREL25                          00:0000A356
FREL30                          00:0000A360
FRELADDR                        00:0000A30A
FemtikiInit                     00:00000220
FemtikiInitIRQ                  00:00000230
FemtikiTimerIRQ                 00:0000030E
ForceUnlockSemaphore            00:000025C2
FreeTCB                          E:0010030C
FromScreen                      00:00008148
GBYTE                           00:000069EA
GBYTE1                          00:000069EE
GBYTE2                          00:000069FC
GETLN                           00:00007632
GFXACCEL                         E:FD300000
GFXACCEL_CMDTBL                 00:00001E04
GFX_CLIP_PIXEL0_X                E:00000074
GFX_CLIP_PIXEL0_Y                E:00000078
GFX_CLIP_PIXEL1_X                E:0000007C
GFX_CLIP_PIXEL1_Y                E:00000080
GFX_COLOR0                       E:00000084
GFX_COLOR1                       E:00000088
GFX_COLOR2                       E:0000008C
GFX_COLOR_COMP                   E:000000D0
GFX_CTRL                         E:00000000
GFX_DEST_PIXEL_X                 E:00000038
GFX_DEST_PIXEL_Y                 E:0000003C
GFX_DEST_PIXEL_Z                 E:00000040
GFX_PPS                          E:000000D4
GFX_STATUS                       E:00000004
GFX_TARGET_BASE                  E:00000010
GFX_TARGET_SIZE_X                E:00000014
GFX_TARGET_SIZE_Y                E:00000018
GFX_TARGET_X0                    E:000000B0
GFX_TARGET_X1                    E:000000B8
GFX_TARGET_Y0                    E:000000B4
GFX_TARGET_Y1                    E:000000BC
GL1                             00:00007642
GL2                             00:00007660
GL3                             00:00007674
GL4                             00:00007698
GL5                             00:000076A4
GL6                             00:000076C0
GL7                             00:000076C8
GOAUXI                          00:000061DE
GOAUXO                          00:000061DA
GOBYE                           00:000061E2
GOIN                            00:000061D6
GOOUT                           00:000061D2
GOSUB                           00:00006782
GOTO                            00:00006684
GOWARM                          00:000061CE
GRBufferToScreen                00:00007D9E
GarbageCollectStrings           00:00007114
GetCmdLine                      00:0000870E
GetDecNumber                    00:00008FC8
GetHexNumber                    00:00008F9A
GetKey                          00:0000088C
GetRunningTCBPointer            00:000002AA
GetSzChar                       00:00008924
GetTick                         00:00007D04
GlobalReadLong                  00:000023F0
GlobalWriteLong                 00:000023F6
GraphicsDemo                    00:000098CA
HALT                             E:0000B000
HAS_MMU                          E:00000000
HEX2DEC                         00:0000A292
HEX2DEC2                        00:0000A244
HISPC                            E:FFFFFFFC
HOWMSG                          00:000079A3
HX2DC                           00:0000A2A2
HX2DC0                          00:0000A2A6
HX2DC1                          00:0000A2AE
HX2DC2                          00:0000A2C8
HX2DC22                         00:0000A2CA
HX2DC3                          00:0000A2D4
HX2DC4                          00:0000A2DC
HX2DC5                          00:0000A2E4
HX2DC57                         00:0000A2EC
HX2DC6                          00:0000A2F0
HelpMsg                         00:00008550
HomeCursor                      00:000014D6
I2C1                             E:FD069000
I2C2                             E:FD069010
I2C_CMD                          E:00000004
I2C_CTRL                         E:00000002
I2C_PREH                         E:00000001
I2C_PREL                         E:00000000
I2C_RXR                          E:00000003
I2C_STAT                         E:00000004
I2C_TXR                          E:00000003
IBSR                            00:0000A6BC
ICC                             00:0000A6B8
ICC35                           00:0000A6CE
ICC55                           00:0000A6E4
ICCCC                           00:0000A782
ICCCC9                          00:0000A798
IDBCC                           00:0000A6A6
IF                              00:000068D4
IF1                             00:000068D8
IF2                             00:000068DE
IGNBLK                          00:00007888
ILINK                           00:0000A43E
IM7788                          00:0000A37C
IM7799                          00:0000A380
IMMED                           00:0000A3C6
IMMED45                         00:0000A3EC
IMMED55                         00:0000A420
IMMED65                         00:0000A426
IMMED75                         00:0000A436
IMOVE                           00:0000A43A
IMOVE19                         00:0000A7E0
IMOVEA1                         00:0000A7BA
IMOVEMFR                        00:0000A368
IMOVEMTR                        00:0000A396
IMOVEP                          00:0000A642
IMOVEP11                        00:0000A652
IMOVEP35                        00:0000A66E
IMOVEP66                        00:0000A67C
IMOVEQ                          00:0000A5D8
IMVFSR                          00:0000A5F8
IMVFUSP                         00:0000A606
IMVT44                          00:0000A622
IMVTCCR                         00:0000A632
IMVTSR                          00:0000A614
IMVTUSP                         00:0000A626
INC                             00:00007916
INC1                            00:00007922
INCOM                           00:000065B4
INCON                           00:000065A6
INITMSG                         00:00007978
INPERR                          00:000068EE
INPPTR                          00:000079DC
INPUT                           00:000068FC
INT                             00:00007532
INT_EXPR                        00:00006DC2
IOCOM                           00:000065C2
IOCON                           00:000065D8
IOFocus                          E:00100000
IP2                             00:0000692E
IP3                             00:00006948
IP4                             00:00006982
IP5                             00:0000698E
IP6                             00:0000692A
IP7                             00:00006920
IQUICK                          00:0000A5D4
IQUICK21                        00:0000A7F8
IQUICK31                        00:0000A80E
IQUICKA                         00:0000A7E6
IRQFlag                          E:000400A0
IRQROUT                         00:00007A18
IRQ_trampolines                 01:00000100
ISCC                            00:0000A69C
ISETD                           00:0000A6F4
ISETD12                         00:0000A6FA
ISETS                           00:0000A704
ISHIFT                          00:0000A71E
ISHIFT13                        00:0000A72A
ISHIFT23                        00:0000A74E
ISHIFT33                        00:0000A75A
ISHIFT44                        00:0000A75E
ISHIFTM1                        00:0000A768
ISTOP                           00:0000A3B2
IncCursorPos                    00:000013F2
IncCursorRow                    00:0000140C
InitIOPBitmap                   00:000023FE
InitIRQ                         00:0000A012
InitRand                        00:0000244A
InitSemaphores                  00:0000257A
Initialise                      00:0000C1BC
InitialisePlants                 S:000005E8
InputDevice                      E:000400A4
InstallIRQ                      00:0000A02A
JMPL                             E:0000E000
JSRL                             E:0000C000
KBD_CMDTBL                      00:00000604
KEYBD                            E:FD0FFE00
KEYBD_SEMA                       E:00000003
KI                              00:0000ABDE
KIEND                           00:0000ABE0
KeybdEcho                        E:0004000C
KeybdGetChar                    00:000008E6
KeybdGetCharNoWait              00:000008D6
KeybdGetCharWait                00:000008DE
KeybdGetID                      00:00000662
KeybdID                          E:00100018
KeybdIRQ                        00:00000B92
KeybdInit                       00:000006CC
KeybdLEDs                        E:0010000E
KeybdRecvByte                   00:00000830
KeybdSendByte                   00:00000B52
KeybdSetLED                     00:000006A0
KeybdSetLEDStatus               00:00000B02
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     00:00000852
LEA1                            00:0000423C
LEFT                            00:000074D8
LEN                             00:0000750C
LET                             00:0000699A
LF                               E:0000000A
LINE                            00:00006C14
LINEERR                         00:00006C56
LINEERR1                        00:00006C5A
LINEERR2                        00:00006C60
LIST                            00:000066CC
LOAD                            00:000069AA
LOCVARSZ                         E:00000010
LOD1                            00:000069B6
LOD2                            00:000069D0
LODEND                          00:000069E0
LOPINC                          00:000079F8
LOPLMT                          00:00007A04
LOPLN                           00:00007A10
LOPPT                           00:00007A14
LOPVAR                          00:000079F4
LS1                             00:000066D8
LS2                             00:000066EC
LS3                             00:000066F2
LSTROM                          00:000079D6
LT1                             00:000069A6
LastStr                         00:00007A28
ListBreakpoints                 00:00009EA4
LockSemaphore                   00:000025A0
LockSysSemaphore                00:00000396
LorR1                           00:0000740A
LorRArgs                        00:000073D2
MAX_TID                          E:00000FFF
MEMORY_SEMA                      E:00000006
MID                             00:0000740E
MID1                            00:000074D4
MID2                            00:00007456
MID4                            00:000074A2
MID5                            00:0000746E
MMU                              E:FDC00000
MOVE1                           00:00003EAA
MOVE2                           00:00003E2E
MOVE3                           00:00003F2A
MOVE4                           00:00004084
MOVEMR                          00:0000AA76
MOVEMR11                        00:0000AA86
MOVEMR33                        00:0000AA8E
MOVEMR44                        00:0000AAA0
MOVEMR77                        00:0000AABA
MOVEMR79                        00:0000AACC
MOVEMR88                        00:0000AACE
MOVEMR94                        00:0000AAE6
MOVEMS                          00:0000AA62
MOVEMS2                         00:0000AA72
MSG111                          00:0000ABD4
MULS_OUTER1                     00:00005862
MULU_OUTER1                     00:00005816
MVDOWN                          00:0000771A
MVRET                           00:0000770E
MVUP                            00:00007706
MVUPW                           00:00007710
Monitor                         00:0000815C
MoveToXY                        00:00007ED4
NBCD_LOOP                       00:00004BE0
NBCD_LOOP1                      00:00004C26
NBCD_NO_C                       00:00004BEC
NBCD_NO_C1                      00:00004C3A
NBCD_NO_Z                       00:00004BF0
NBCD_NO_Z1                      00:00004C3E
NCORES                           E:00000004
NEW                             00:000065EE
NEXT                            00:00006868
NOSTRING                        00:000079BA
NR_TCB                           E:00001000
NUM_EXPR                        00:00006DB4
NX0                             00:00006872
NX1                             00:000068B2
NX2                             00:000068CA
NX3                             00:00006884
NextRec                         00:000096B8
NextString                      00:00007150
Ninc0                           00:0000C250
Ninc1                           00:0000C250
NumSetBreakpoints                E:00040202
OFFSET                           E:00040880
OKMSG                           00:0000799C
ONIRQ                           00:00006698
ONIRQ1                          00:000066B2
OPCTBL                          00:0000AE98
OR_OUTER1                       00:00004FC2
OR_OUTER2                       00:00005036
OSCallTable                     00:0000023E
OUTC                            00:00007906
OUTCOM                          00:000065CC
OUTCON                          00:000065E2
OUTPTR                          00:000079E0
OutputChar                      00:00009FF8
OutputDevice                     E:000400A8
PARN                            00:000070A0
PBYTE                           00:00006A68
PBYTE1                          00:00006A6A
PBYTE2                          00:00006A7E
PEEK                            00:0000730C
PKER                            00:00006AFE
PLIC                             E:FD090000
PNT4HEX                         00:0000A2F6
PNT4HX                          00:0000A2F6
PNT6HX                          00:0000A2FA
PNT8HX                          00:0000A306
POINT                           00:00006BEE
POINTERR                        00:00006C10
POKE                            00:00006A88
POPA                            00:00007722
PR0                             00:00006716
PR1                             00:00006724
PR2                             00:00006708
PR3                             00:00006732
PR6                             00:0000673E
PR8                             00:00006744
PR9                             00:00006760
PRINT                           00:000066F8
PRMESG                          00:000078EE
PRMRET                          00:000078F8
PRNlword                         S:0000000A
PRTLN                           00:00007806
PRTNUM                          00:000077BC
PRTRET                          00:000077AE
PRTSTG                          00:00007794
PRTSTR2                         00:000077B6
PRTSTR2a                        00:000077B0
PS1                             00:00007796
PUSHA                           00:0000775E
PeekScreenChar                  00:0000891E
PointsIntoStringArea            00:000071AC
ProcessBreakpoint               00:00009D70
ProcessRec                      00:000096CA
ProcessS1                       00:000097CE
ProcessS2                       00:000097D2
ProcessS3                       00:000097D6
ProcessS7                       00:000097DA
ProcessS8                       00:000097EC
ProcessS9                       00:000097FE
Prompt1                         00:0000819E
Prompt3                         00:00008188
PromptLn                        00:0000817C
QHOW                            00:00007624
QSORRY                          00:0000761C
QWHAT                           00:000075DC
QueueCycle                       E:0010031C
RAND                             E:FD0FFD00
RAND_MW                          E:FD0FFD0C
RAND_MZ                          E:FD0FFD08
RAND_NUM                         E:FD0FFD00
RAND_SEMA                        E:00000004
RAND_STRM                        E:FD0FFD04
RANPNT                          00:000079D8
RECT                            00:00006C66
REL4                             E:00004000
REL5                             E:00005000
REL7                             E:00007000
REM                             00:000068D2
RETURN                          00:000067BC
RIGHT                           00:000074E4
RND                             00:00007374
ROXx_FLAGS                      00:00005B2A
ROXx_LOOP1                      00:00005B40
ROXx_LOOP2                      00:00005B60
ROXx_LOOP3                      00:00005B80
ROXx_LOOP4                      00:00005BA0
ROXx_LOOP5                      00:00005BC0
ROXx_LOOP6                      00:00005BE2
ROx_FLAGS                       00:000058F4
ROx_LOOP1                       00:0000590A
ROx_LOOP2                       00:0000592A
ROx_LOOP3                       00:0000594A
ROx_LOOP4                       00:0000596A
ROx_LOOP5                       00:0000598A
ROx_LOOP6                       00:000059AC
RST_REG                          E:FD0FFC00
RTCBuf                           E:00100200
RTR_DONE                        00:00004C82
RTSL                             E:0000D000
RUN                             00:0000660A
RUN1                            00:0000665E
RUNNXL                          00:0000661E
RUNSML                          00:00006674
RUNTSL                          00:0000666A
RandGetNum                      00:000024B4
RandInit                        00:0000244A
RandWait                        00:00002562
ReceiveMsg                      00:00009F14
Regsave                          E:00040100
RunningTCB                       E:00100224
S1932a                          00:00009848
S1932b                          00:0000985C
S19Checksum                      E:00100150
S19Get16BitAddress              00:00009810
S19Get24BitAddress              00:0000981E
S19Get32BitAddress              00:0000982A
S19StartAddress                  E:00040008
SAVE                            00:00006A0A
SAVE1                           00:00006A12
SAVE2                           00:00006A36
SAVEND                          00:00006A44
SBCD_INNER1                     00:00004AF2
SBCD_INNER2                     00:00004B60
SBCD_NO_C1                      00:00004B0E
SBCD_NO_C2                      00:00004B16
SBCD_NO_C3                      00:00004B7C
SBCD_NO_C4                      00:00004B84
SBCD_OUTER1                     00:00004AF0
SBCD_OUTER2                     00:00004B5E
SCHR                            00:0000A5F0
SCOMMON                         00:0000A698
SCREEN_FORMAT                    E:00000001
SCREEN_SEMA                      E:00000005
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SERIAL_SEMA                      E:00000002
SETVAL                          00:00007590
SHIFTS2_FLAGS                   00:00005FA2
SHIFTS2_LOOP1                   00:00005FB8
SHIFTS2_LOOP2                   00:00005FD4
SHIFTS2_LOOP3                   00:00005FF0
SHIFTS2_LOOP4                   00:0000600C
SHIFTS2_LOOP5                   00:00006028
SHIFTS2_LOOP6                   00:00006046
SHIFTS_FLAGS                    00:00005D60
SHIFTS_LOOP1                    00:00005D76
SHIFTS_LOOP2                    00:00005D96
SHIFTS_LOOP3                    00:00005DB6
SHIFTS_LOOP4                    00:00005DD6
SHIFTS_LOOP5                    00:00005DF6
SHIFTS_LOOP6                    00:00005E18
SHRT                             E:0000F000
SIV1                            00:00007184
SIZE                            00:000073AA
SPI_ADDR_158                     E:00000008
SPI_ADDR_2316                    E:00000009
SPI_ADDR_3124                    E:0000000A
SPI_ADDR_70                      E:00000007
SPI_DIRECT_ACCESS_DATA_REG       E:00000006
SPI_INIT_SD                      E:00000001
SPI_MASTER1                      E:FD06A000
SPI_MASTER2                      E:FD06A100
SPI_MASTER_CTRL_REG              E:00000001
SPI_RW_READ_SD_BLOCK             E:00000002
SPI_RW_WRITE_SD_BLOCK            E:00000003
SPI_RX_FIFO_CTRL_REG             E:00000014
SPI_RX_FIFO_DATA_REG             E:00000010
SPI_TRANS_CTRL_REG               E:00000003
SPI_TRANS_ERR_REG                E:00000005
SPI_TRANS_STS_REG                E:00000004
SPI_TRANS_TYPE_REG               E:00000002
SPI_TX_FIFO_CTRL_REG             E:00000024
SPI_TX_FIFO_DATA_REG             E:00000020
SRYMSG                          00:000079CC
ST3                             00:0000628E
ST4                             00:000062E0
START                           00:000061CC
STKFP                           00:000079E8
STKGOS                          00:000079EC
STKINP                          00:000079F0
STKLMT                          00:00007A34
STOP                            00:00006602
STRAREASIZE                      E:00000800
STRSTK                          00:00007A1C
SUBA_OUTER1                     00:000055B4
SUBQ_LOOP1                      00:00004E40
SUBQ_LOOP2                      00:00004E7A
SUBQ_LOOP3                      00:00004EB0
SUBX_LOOP3                      00:0000579E
SUBX_LOOP4                      00:000057BA
SUBX_LOOP5                      00:000057D6
SUBX_OUTER1                     00:0000570A
SUB_OUTER1                      00:00005478
SUB_OUTER2                      00:000054EC
SV1                             00:000075AE
ScrollUp                        00:00001436
SelectThreadToRun               00:000002C2
SendMsg                         00:00009ED6
SerHeadRcv                       E:00100162
SerHeadXmit                      E:00100168
SerRcvBuf                        E:00101000
SerRcvXoff                       E:00100165
SerRcvXon                        E:00100164
SerTailRcv                       E:00100160
SerTailXmit                      E:00100166
SerXmitBuf                       E:00102000
SerXmitXoff                      E:0010016A
SerialGetChar                   00:00001686
SerialIRQ                       00:000017FC
SerialInit                      00:00001648
SerialPeekChar                  00:000016FE
SerialPeekCharDirect            00:0000173A
SerialPutChar                   00:00001754
SerialPutCharDirect             00:000017B8
SerialRbo                       00:000017D4
SerialRcvCount                  00:000017DC
SetDrawMode                     00:00007D28
SetKeyboardEcho                 00:00000878
SetPenColor                     00:00007D4A
ShiftBuf                        00:0000A22A
SimHardware                     00:00007CF4
SpuriousIRQ                     00:0000A0E2
StartMon                        00:00008152
StartQ                          00:00000172
StrArea                         00:00007A24
StrSp                           00:00007A20
StringInVar                     00:00007166
StringOnStack                   00:000071D0
StubRout                        00:00007FFA
SyncCursor                      00:000014E8
T15Abort                        00:0000261A
T15DispatchTable                00:00007B64
T15FloatToString                00:00009F9E
T15GetFloat                     00:00002604
T15GetPixel                     00:00007D68
T15GetWindowSize                00:00007D88
T15LockSemaphore                00:000025F8
T15Rectangle                    00:00007D56
T15UnlockSemaphore              00:000025FE
T15Wait100ths                   00:00007D0C
TAB1                            00:0000634E
TAB10                           00:00006434
TAB10_1                         00:00006544
TAB11                           00:00006437
TAB11_1                         00:0000654C
TAB12                           00:0000643C
TAB12_1                         00:00006554
TAB1_1                          00:00006444
TAB2                            00:0000637D
TAB2_1                          00:00006474
TAB4                            00:000063EB
TAB4_1                          00:000064DC
TAB5                            00:0000641D
TAB5_1                          00:00006510
TAB6                            00:00006420
TAB6_1                          00:00006518
TAB8                            00:00006425
TAB8_1                          00:00006520
TAB9                            00:00006430
TAB9_1                          00:0000653C
TBL                             00:0000ABE0
TBLE                            00:0000AE98
TC1                             00:00007836
TCBAffineChose                  00:000000A0
TCBAffinity                      E:00000084
TCBAffinityBase                  E:00000082
TCBAlloc                        00:0000006E
TCBEndTick                       E:00000070
TCBFree                         00:00000092
TCBHandleToPointer              00:00000028
TCBIAlloc                       00:00000050
TCBIFree                        00:0000007C
TCBInit                         00:00000000
TCBInsertIntoReadyQueue         00:000000D8
TCBNext                          E:0000007C
TCBPC                            E:00000050
TCBPointerToHandle              00:00000040
TCBPopReadyQueue                00:0000017A
TCBPrev                          E:00000080
TCBPriority                      E:00000055
TCBRegs                          E:00000004
TCBRemoveFromReadyQueue         00:00000150
TCBSR                            E:0000004C
TCBSSP                           E:00000048
TCBStartTick                     E:0000006C
TCBStatus                        E:00000054
TCBTicks                         E:00000074
TCBUSP                           E:00000044
TCB_SIZE                         E:00000100
TEXT                            00:00006B26
TEXTCOL                          E:00000030
TEXTERR                         00:00006B56
TEXTREG                          E:FD080000
TEXTROW                          E:00000020
TEXTVID_CMDTBL                  00:00000F48
TICK                            00:000073BA
TOUPB1                          00:00007898
TOUPBRT                         00:000078B8
TOUPBUF                         00:00007892
TOUPPER                         00:000078CA
TOUPRET                         00:000078DA
TRAP15                          00:00007B4A
TRIANGLE                        00:00006CAC
TRIERR                          00:00006D0C
TRIERR1                         00:00006D10
TRIERR2                         00:00006D16
TRIERR3                         00:00006D1C
TRIERR4                         00:00006D24
TSTC                            00:00007824
TSTNUM                          00:0000783C
TSTV                            00:0000724E
TSTVRT                          00:000072CE
TS_PREEMPT                       E:00000020
TS_RUNNING                       E:00000080
TV1                             00:00007296
TV2                             00:000072C6
TXT                             00:00007A8C
TXTBGN                          00:000061E6
TXTUNF                          00:00007A2C
TYPMSG                          00:000079B2
TestBitmap                      00:00007DA6
TextCols                         E:0004008D
TextRows                         E:0004008C
TextScr                          E:00040004
TickIRQ                         00:0000A06E
TimeBuf                          E:000408E0
TimerStack                       E:00041BFC
USP1                            00:0000722C
UnlockSemaphore                 00:000025DC
UnlockSysSemaphore              00:000003A6
UpdateIRQLive                   00:000002EC
UpdateStringPointers            00:00007200
VARBGN                          00:00007A30
VIDEO_X                          E:00000320
VIDEO_Y                          E:00000258
Vertical1                       00:00007E90
Vertical2                       00:00007EAC
WAITIRQ                         00:000066BC
WHTMSG                          00:000079AA
WSTART                          00:0000625A
Wait10ms                        00:00000B5A
Wait300ms                       00:00000B76
X                               00:0000A368
XOFF                             E:00000013
XON                              E:00000011
XP11                            00:00006E4C
XP12                            00:00006E58
XP13                            00:00006E64
XP14                            00:00006E70
XP15                            00:00006E7C
XP15RT                          00:00006E88
XP16                            00:00006E8A
XP17                            00:00006EA8
XP18                            00:00006EAE
XP21                            00:00006ED0
XP22                            00:00006ED6
XP23                            00:00006EDA
XP24                            00:00006EE8
XP25                            00:00006F16
XP26                            00:00006F1C
XP27                            00:00006F30
XP30                            00:00006FA6
XP31                            00:00006FB2
XP34                            00:00006FC8
XP35                            00:00006FE2
XP36                            00:00006FA2
XP40                            00:00007016
XP41                            00:00007028
XP42                            00:000070B0
XP43                            00:000070B2
XP44                            00:00007094
XP45                            00:00007042
XPRT0                           00:00006E98
XPRT1                           00:00006EA0
XPSTNG                          00:00007038
XP_AND                          00:00006E0A
XP_ANDX                         00:00006E20
XP_MOD                          00:00006FE8
XP_OR                           00:00006DE4
XP_ORX                          00:00006E20
XP_POP                          00:00006D94
XP_POP1                         00:00006DA4
XP_PUSH                         00:00006D84
_CheckNan                       00:0000902C
_CheckNegative                  00:000090AA
_CheckZero                      00:00009090
_ComputeDigitsBeforeDecpt       00:00009104
_E                               E:0004050C
_ExtExpDigit                    00:00009228
_ExtExpDigits                   00:00009246
_FloatToString                  00:000092F0
_GetExponent                    00:000093A8
_GetFloat                       00:000094A8
_GetFloatBackupChar             00:00009340
_GetFloatGetChar                00:00009332
_GetFloatIgnBlanks              00:00009338
_GetFraction                    00:00009344
_GetInteger                     00:00009432
_GetRand                        00:0000253E
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdClearIRQ                  00:0000081A
_KeybdCnt                        E:00100013
_KeybdGetScancode               00:000007FC
_KeybdGetStatus                 00:000007DE
_KeybdHead                       E:00100011
_KeybdInit                      00:000006CC
_KeybdOBuf                       E:00100080
_KeybdTail                       E:00100012
_Keybd_tick                      E:0001001C
_LeadingZero                    00:0000913E
_LessThanDbl                    00:000090D8
_MakeBig                        00:000090BC
_PadLeft                        00:0000926E
_PadRight                       00:000092BE
_SpitOutDigits                  00:0000914E
_SpitOutE                       00:00009210
_TrimDotZero                    00:000091E8
_TrimTrailingPoint              00:000091CA
_TrimTrailingZeros              00:00009204
_canary                          E:00040098
_dasmbuf                         E:00040800
_dfMil                          00:00009018
_dfOne                          00:00009000
_dfTen                          00:0000900C
_digits_before_decpt             E:00040510
_fpBuf                           E:00040520
_fpTextIncr                      E:00040094
_fpWork                          E:00040600
_keybdControlCodes              00:00000E48
_keybdExtendedCodes             00:00000EC8
_msgInf                         00:00009028
_msgNan                         00:00009024
_precision                       E:00040514
_shiftedScanCodes               00:00000D48
_unshiftedScanCodes             00:00000C48
_width                           E:00040508
a_was_less                      00:0000C050
add_address                     00:0000C178
add_char_loop                   00:0000C120
add_character                   00:0000B6BC
add_coords                      00:0000C18E
add_explode                     00:0000BBF6
add_fire                        00:0000BC02
add_hex_chr                     00:0000C15E
add_item                        00:0000BBDC
add_message                     00:0000C0D8
add_p_size                      00:0000B1C0
add_pair                        00:0000C1AA
add_play_explode                00:0000BD1A
add_player                      00:0000BDC0
add_saucer                      00:0000BBFC
add_score                       00:0000BC14
add_ships                       00:0000B6CC
add_ships_loop                  00:0000B6E8
add_single                      00:0000C1A8
add_sup_hex_chr                 00:0000C152
add_sup_zero                    00:0000C168
add_the_char                    00:0000C136
add_to_list                     00:0000BBA8
add_to_score                    00:0000BEA2
addr_err                        00:0000A0F6
aim_shot                        00:0000B37E
animal_colour                    S:00000014
animal_fill                      S:00000018
animal_flag                      S:000001EE
animal_spawn                     S:00000221
animal_xy                        S:00000126
asteroids_start                 00:0000AF98
atn_eight                       00:0000BFBC
atn_quad                        00:0000BFAC
atn_semi                        00:0000BF9C
atn_tab                         00:0000BFDA
attract_fire                    00:0000B35A
attract_saucer                  00:0000B2A8
beat1_snd                        E:00000008
beat1_sound                     00:0000DE04
beat2_snd                        E:00000009
beat2_sound                     00:0000DE16
bkColor                          E:00040088
brdisp_trap                     00:0000A10C
bus_err                         00:00009D18
calc_fire_byte                  00:0000B46C
char_1                          00:0000D940
char_2                          00:0000D948
char_3                          00:0000D958
char_4                          00:0000D966
char_5                          00:0000D974
char_6                          00:0000D982
char_7                          00:0000D990
char_8                          00:0000D99A
char_9                          00:0000D9AA
char_a                          00:0000D7D4
char_b                          00:0000D7E4
char_c                          00:0000D7FE
char_d                          00:0000D80A
char_e                          00:0000D81A
char_f                          00:0000D82A
char_g                          00:0000D838
char_h                          00:0000D84A
char_i                          00:0000D858
char_j                          00:0000D866
char_k                          00:0000D872
char_l                          00:0000D87E
char_m                          00:0000D888
char_n                          00:0000D894
char_o0                         00:0000D89E
char_p                          00:0000D8AA
char_q                          00:0000D8B8
char_r                          00:0000D8CA
char_s                          00:0000D8DA
char_set                        00:0000D9B8
char_spc                        00:0000D93C
char_t                          00:0000D8E8
char_u                          00:0000D8F4
char_v                          00:0000D900
char_w                          00:0000D90A
char_x                          00:0000D918
char_y                          00:0000D922
char_z                          00:0000D930
check_all                       00:0000B16A
check_alpha                     00:0000B5D8
check_clear                     00:0000B8FC
check_clear_loop                00:0000B900
check_clear_y                   00:0000B91A
check_for_food                   S:000004AA
check_hi_loop                   00:0000BF0E
check_hi_next                   00:0000BF1C
check_hi_player                 00:0000BF06
check_hiscores                  00:0000BEEA
check_hits                      00:0000B14A
check_neg_velocity              00:0000B8F0
check_next_object               00:0000B166
check_pss                       00:0000B158
check_velocity                  00:0000B8E2
chk_exception                   00:0000262A
clear_graphics_screen           00:00001D30
clear_graphics_screen2          00:00008AEC
clear_hyper                     00:0000B834
clear_items_loop                00:0000B694
clear_loop                      00:0000C1E4
clear_rock                      00:0000BE8E
clear_rocks                     00:0000B9DA
clear_rocks_loop                00:0000B9DC
clear_saucer                    00:0000B7D4
close_all                       00:0000B548
close_all_2                     00:0000C23A
clr_animals_loop                 S:00000398
clr_plant_loop                   S:00000384
cmdAsteroids                    00:00008264
cmdBreakpoint                   00:00008240
cmdClearScreen                  00:0000836E
cmdClock                        00:00008462
cmdCore                         00:0000837A
cmdDisassemble                  00:00008DB0
cmdDispatch                     00:000081B8
cmdDumpMemory                   00:00008E00
cmdDumpRegs                     00:00008ECC
cmdEditMemory                   00:0000896C
cmdFMTK                         00:0000839E
cmdFillB                        00:00008816
cmdFillL                        00:000088BE
cmdFillW                        00:0000886A
cmdGrDemo                       00:000089DA
cmdHelp                         00:000084D2
cmdJump                         00:000089CA
cmdLoadS19                      00:000096B2
cmdMonitor                      00:0000815C
cmdPlants                       00:0000826C
cmdReceiveSerial                00:000087E2
cmdReset                        00:00008480
cmdSendSerial                   00:000087B2
cmdSetTime                      00:00008274
cmdString                       00:00008074
cmdTable                        00:000080C8
cmdTestCPU                      00:0000835E
cmdTestFP                       00:000083A8
cmdTestGF                       00:00008434
cmdTestRAM                      00:000095EA
cmdTestSD                       00:000084DE
cmdTestSerialReceive            00:00008F76
cmdTime                         00:000082E2
cmdTinyBasic                    00:0000835A
cmdVideoMode                    00:000081FE
col_table                       00:0000B1D0
col_table_l                     00:0000B1E8
col_table_p                     00:0000B1D8
col_table_s                     00:0000B1E0
copy_msg                        00:0000D39C
copy_rock                       00:0000BA32
copy_rock_2                     00:0000BA36
copy_short                      00:0000BE12
copy_vectors                    00:0000BE16
copy_velocity                   00:0000BA5C
cos_d0                          00:0000C038
cossin_d0                       00:0000C04A
cpu_test                        00:0000267E
d_mess_0                        00:0000DB08
d_mess_1                        00:0000DB18
d_mess_2                        00:0000DB21
d_mess_3                        00:0000DB48
d_mess_4                        00:0000DB6B
d_mess_5                        00:0000DB8E
d_mess_6                        00:0000DBB4
d_mess_7                        00:0000DBCA
d_messages                      00:0000DAF8
dccr                            00:000012A4
dclf                            00:00001378
dcx10                           00:0000130C
dcx11                           00:0000132E
dcx12                           00:00001324
dcx14                           00:00001298
dcx16                           00:0000137C
dcx4                            00:00001380
dcx6                            00:000012C2
dcx7                            00:0000129C
dcx8                            00:000012D8
dcx9                            00:000012EE
dec_isaucer_time                00:0000B2D0
def_a_spawn                      E:00000005
def_animal                       E:00FFFFFF
def_animals                      E:00000032
def_back                         E:00000000
def_leaf                         E:00008000
def_p_spawn                      E:00000001
def_plant                        E:008080FF
def_plants                       E:00000032
delta_x                          S:0000057E
delta_x_pos                     00:0000B184
delta_y                          S:00000590
delta_y_pos                     00:0000B196
dly3s1                          00:0000264E
dly3s2                          00:0000264C
doBackspace                     00:0000138A
doCtrlX                         00:000013CE
doDelete                        00:00001398
do_animals                       S:000003F6
do_nothing                      00:00000532
do_p1_ships                     00:0000BB10
do_p2_score                     00:0000BB84
do_plants                        S:000003C0
do_saucer                       00:0000B27C
do_start_mess                   00:0000B048
do_things                        S:0000042A
do_things_loop                   S:00000484
do_vector                       00:0000C252
draw_old_thing                   S:00000524
dspj1                           00:00007B10
dspmem1                         00:00008E62
dspspc1                         00:00009564
dsret                           00:00007B1C
e_mess_0                        00:0000DA4E
e_mess_1                        00:0000DA5A
e_mess_2                        00:0000DA62
e_mess_3                        00:0000DA84
e_mess_4                        00:0000DA9F
e_mess_5                        00:0000DABC
e_mess_6                        00:0000DAE3
e_mess_7                        00:0000DAEE
e_messages                      00:0000DA3E
edtmem1                         00:00008976
end_game                        00:0000B136
end_main_loop                    S:000002E2
end_vector                      00:0000C340
enter_hiscores                  00:0000B492
err_cmdproc                     00:00001558
err_dcb                          E:00040B8C
err_init                        00:0000152A
err_ret                         00:00001556
existing_saucer                 00:0000B336
exit_add_message                00:0000C13E
exit_add_score                  00:0000BC42
exit_add_ships                  00:0000B6F4
exit_check_hiscores             00:0000BF4A
exit_check_velocity             00:0000B8FA
exit_copy_vectors               00:0000BE30
exit_do_saucer                  00:0000B334
exit_do_things                   S:00000530
exit_enter_hiscores             00:0000B5E6
exit_existing_saucer            00:0000B360
exit_find_rock                  00:0000BD00
exit_game_message               00:0000B134
exit_hi_chk                     00:0000BF40
exit_high_scores                00:0000BCE8
exit_hit_a_rock                 00:0000BEE4
exit_hyperspace                 00:0000B676
exit_insert_loop                00:0000BF72
exit_limit_velocity             00:0000BAB6
exit_make_rocks                 00:0000B9E4
exit_neighbour                   S:00000578
exit_no_scores                  00:0000BCEE
exit_not_done                   00:0000B5E4
exit_play_sample                00:0000DDEA
exit_push_start                 00:0000B0B6
exit_ship_fire                  00:0000B418
exit_ship_move                  00:0000B838
exit_static                     00:0000BBA6
exit_test_escape                 S:0000031E
expl_0                          00:0000D484
expl_1                          00:0000D44E
expl_2                          00:0000D410
expl_3                          00:0000D3E4
expl_tab                        00:0000D3DC
expl_x_pos                       S:0000005B
expl_y_pos                       S:00000067
explode_object                  00:0000B236
extra_snd                        E:0000000A
extra_sound                     00:0000DE67
f_mess_0                        00:0000DBE4
f_mess_1                        00:0000DBF3
f_mess_2                        00:0000DBFA
f_mess_3                        00:0000DC1E
f_mess_4                        00:0000DC37
f_mess_5                        00:0000DC59
f_mess_6                        00:0000DC82
f_mess_7                        00:0000DC94
f_messages                      00:0000DBD4
f_xpos_off                       E:FFFFFFBA
f_xvel_off                       E:0000004C
f_ypos_off                       E:00000000
f_yvel_off                       E:0000006F
fgColor                          E:00040084
filename                        00:0000DEDE
fill_colour                      S:00000020
fill_old_thing                   S:00000526
find_next_rock                  00:0000BCF6
find_rock                       00:0000BCF4
fire_ok                         00:0000B488
fire_saucer                     00:0000B366
fire_shot                       00:0000B41A
first_quad                      00:0000BDEA
flag_end                         E:0000002F
flags_off                        E:0000000C
food_colour                      S:00000024
fpBuf                            E:000402C0
framebuf_clear                  00:00001D64
framebuf_cmdproc                00:0000196C
framebuf_dcb                     E:00040D18
framebuf_get_color              00:00001B7A
framebuf_get_dimen              00:00001B8A
framebuf_getbuf                 00:00001B64
framebuf_getbuf1                00:00001AC6
framebuf_getbuf2                00:00001ACE
framebuf_getchar                00:00001AA8
framebuf_init                   00:000019FE
framebuf_putbuf                 00:00001B64
framebuf_putchar                00:00001AA8
framebuf_set_color_depth        00:00001B68
framebuf_set_destbuf            00:00001AA8
framebuf_set_dimen              00:00001BBA
framebuf_set_dispbuf            00:00001B50
framebuf_set_inpos              00:00001AAA
framebuf_set_outpos             00:00001AB8
framebuf_set_unit               00:00001B5A
framebuf_setbuf1                00:00001AD6
framebuf_setbuf2                00:00001AE4
framebuf_stat                   00:00001AA8
framebuf_stub                   00:00001B64
framebuf_swapbuf                00:00001AF2
framebuf_writeat                00:00001C36
fx_sounds                       00:0000BE32
game_count                       S:00000059
game_message                    00:0000B034
game_over                       00:0000B0B8
gen_prng                        00:0000C240
gen_rock_loop                   00:0000B984
get_atn                         00:0000BF90
get_direction                    S:0000065C
get_prng                         S:0000065E
get_screen_address              00:00007AE0
get_screen_color                00:00001230
get_time                        00:000082F4
gfxaccel_clear                  00:00002016
gfxaccel_clip_rect              00:00002122
gfxaccel_cmdproc                00:00001E94
gfxaccel_ctrl                    E:000408C0
gfxaccel_dcb                     E:00040D9C
gfxaccel_draw_curve             00:0000233C
gfxaccel_draw_line              00:000021E4
gfxaccel_draw_rectangle         00:0000224C
gfxaccel_draw_triangle          00:000022B4
gfxaccel_get_color              00:000020BC
gfxaccel_get_dimen              00:00001FB2
gfxaccel_get_inpos              00:00001FB2
gfxaccel_get_outpos             00:00001FB2
gfxaccel_get_outptr             00:00001FB2
gfxaccel_getbuf                 00:00001FB2
gfxaccel_getbuf1                00:00001FB2
gfxaccel_getbuf2                00:00001FB2
gfxaccel_getchar                00:00001FB2
gfxaccel_init                   00:00001F42
gfxaccel_plot_point             00:00002192
gfxaccel_putbuf                 00:00001FB2
gfxaccel_putchar                00:00001FB2
gfxaccel_set_active_point       00:00002166
gfxaccel_set_color              00:000020CA
gfxaccel_set_color123           00:000020EA
gfxaccel_set_color_depth        00:000020AA
gfxaccel_set_destbuf            00:00001FEA
gfxaccel_set_dimen              00:00001FB6
gfxaccel_set_dispbuf            00:00001FB2
gfxaccel_set_inpos              00:00001FB2
gfxaccel_set_outpos             00:00001FB2
gfxaccel_set_unit               00:00001FB2
gfxaccel_setbuf1                00:00001FB2
gfxaccel_setbuf2                00:00001FB2
gfxaccel_stat                   00:00001FA4
gfxaccel_stub                   00:00001FB2
gfxaccel_swapbuf                00:00001FB2
gfxaccel_wait                   00:000023C2
gfxaccel_writeat                00:00001FB2
glob_scale                       S:00000000
go_reset_play                   00:0000B738
go_reset_sauc                   00:0000B73E
goodbye_message                  S:000002FA
gr_double_buffer                 E:000408AC
gr_height                        E:000408A0
gr_width                         E:0004089C
gr_x                             E:00040894
gr_y                             E:00040898
gthx3                           00:00009556
gthx5                           00:00009532
gthx6                           00:00009544
handle_collision                00:0000B1F0
height                           S:00000006
hi_char                          S:00000020
hide_p_cnt                       E:0000007A
high_idx                         S:00000017
high_off                         E:00000083
high_scores                     00:0000BC48
high_scores_loop                00:0000BC7A
hinames                          S:0000003B
hiscore_y                        S:00000012
hiscores                         S:00000027
hit_a_rock                      00:0000BE74
hype_xok1                       00:0000B624
hype_xok2                       00:0000B62E
hype_yok1                       00:0000B64C
hype_yok2                       00:0000B656
hyper                            S:00000026
hyperspace                      00:0000B5E8
i2c_setup                       00:00009B22
i2c_wait_rx_nack                00:00009B84
i2c_wait_tip                    00:00009B30
i2c_wr_cmd                      00:00009B4E
i2c_xmit1                       00:00009B66
i_rk_count                       E:00000075
i_sauc_tim                       E:00000078
icc1                            00:00001434
ignBlanks                       00:0000890C
illegal_trap                    00:0000A144
init_i2c                        00:00009B22
init_plic                       00:0000803E
init_spi                        00:000098DC
init_world                       S:00000320
insert_hiscore                  00:0000BF4C
insert_loop                     00:0000BF50
io_irq                          00:0000A15A
io_trap                         00:00009FD2
irq3_rout                       00:0000A0B0
irq6_rout                       00:0000A0B0
irq_list_tbl                     A:00000400
irq_proc_generic                00:0000A0C4
irq_rout                        00:0000A0B0
is_closer                       00:0000B938
is_food                          S:000004DA
item_exploding                  00:0000B746
kbdi0002                        00:000006F8
kbdi0004                        00:00000770
kbdi0005                        00:0000078C
kbdiTryAgain                    00:00000762
kbdiXmitBusy                    00:000007A6
keep_saucer_dir                 00:0000B34E
keep_scale                      00:0000B7C6
keep_small                      00:0000B276
keybd_cmdproc                   00:00000624
keybd_dcb                        E:00040A84
keybd_getbuf                    00:0000065E
keybd_getchar                   00:00000656
keybd_init                      00:00000580
keybd_putbuf                    00:0000065E
keybd_putchar                   00:0000064E
keybd_set_inpos                 00:0000065E
keybd_set_outpos                00:0000065E
keybd_stat                      00:00000646
kgid1                           00:00000694
kgnotKbd                        00:0000069C
kill_the_player                 00:0000B81E
kill_thing                       S:000004CA
last_fire                        S:00000021
last_hype                        S:00000022
last_vector                     00:0000C34E
leds                             E:FD0FFF00
ledxit                          00:00000790
lexpl_snd                        E:00000007
lexpl_sound                     00:0000DE28
lgsau_snd                        E:00000004
lgsau_sound                     00:0000DE7D
limit_p_vel                     00:0000BAA6
limit_velocity                  00:0000BA92
load_old_sound                  00:0000DDC6
load_sound                      00:0000DDC0
local_x                          S:00000002
local_y                          S:00000004
loop1                           00:000004FA
loop2                           00:000004F8
loop3                           00:00001212
loop_atn                        00:0000BFC0
m_w                              E:000408D4
m_z                              E:000408D0
main_loop                       00:0000AFA0
make_rocks                      00:0000B93E
max_animals                      S:0000000E
max_plants                       S:0000000A
memend                           E:00100004
mess_origin                     00:0000DA16
mess_table                      00:0000DA36
mexpl_snd                        E:00000006
mexpl_sound                     00:0000DE3D
min_rocks                        E:0000007D
move_item                       00:0000B760
move_items                      00:0000B6F6
move_next_item                  00:0000B6FA
move_next_object                00:0000B7CC
msgAddrErr                      00:0000A1A6
msgBadKeybd                     00:000007B4
msgBusErr                       00:00009D07
msgChk                          00:0000A202
msgHello                        00:000086FD
msgRtcReadFail                  00:00009CEE
msgStackCanary                  00:0000A210
msgUnknownCmd                   00:000086ED
msgXmitBusy                     00:000007C3
msg_bad_branch_disp             00:0000A1C5
msg_core_start                  00:0000A195
msg_illegal                     00:0000A1B3
msg_io_access                   00:0000A1E7
msg_reglist                     00:00008F50
msg_regs                        00:00008F4C
msg_start                       00:0000A16E
msg_test_done                   00:0000A1D7
nd1                             00:000023FA
nd2                             00:000023FA
nd3                             00:000023FA
nd4                             00:000023FA
neg_upper_ok                    00:0000BA9C
neighbour                        S:00000532
net_delay                       00:000023FA
new_rocks                        E:0000007B
new_thing_loop                   S:00000504
next_hi_char                    00:0000B560
next_m_w                         E:000408DC
next_m_z                         E:000408D8
next_p_high                     00:0000B52C
next_pss                        00:0000B152
next_thing                       S:0000052C
nmeSerial                       00:000018D2
nmi_rout                        00:0000A0E4
no_add_size                     00:0000B1C2
no_aim_shot                     00:0000B3D4
no_dec_new_rocks                00:0000B024
no_game_over                    00:0000B0F6
no_inc_min                      00:0000B968
no_neg_x10                      00:0000C2BA
no_neg_x11                      00:0000C290
no_neg_x2                       00:0000C33C
no_neg_y10                      00:0000C2AE
no_neg_y11                      00:0000C284
no_neg_y2                       00:0000C334
no_new_rocks                    00:0000B730
no_play                         00:0000B006
no_playerx                      00:0000B4C0
no_pos_reflect                  00:0000BDD6
no_reset_scale                  00:0000B75E
no_reset_xy                     00:0000BD44
no_saucer_sound                 00:0000BE40
no_save_ist                     00:0000B2E0
no_set_max                      00:0000B978
no_shot_dec                     00:0000BC12
no_shot_or                      00:0000B3D0
no_thrust                       00:0000BE10
no_thump_sound                  00:0000BE72
nodec_thmpi                     00:0000B0CC
notRxInt                        00:00001872
notTxInt                        00:000018C0
not_closer                      00:0000B92E
not_player                      00:0000B20E
not_pss_player                  00:0000B226
not_right                       00:0000C2CC
not_rot_left                    00:0000B5AA
not_rot_left1                   00:0000B846
not_rot_right1                  00:0000B84E
not_rot_right2                  00:0000B5B2
not_saucer                      00:0000B200
not_thrust                      00:0000B8AC
not_timed_out                   00:0000B58E
not_x_max                       00:0000B782
not_y_max                       00:0000B7A2
notscreen                       00:0000C1B0
null_cmdproc                    00:0000057C
null_dcb                         E:00040A00
null_init                       00:00000538
null_ret                        00:0000057A
numBreakpoints                   E:00000008
num_animals                      S:0000000C
num_plants                       S:00000008
num_players                      S:0000001A
old_sound_play                  00:0000DDE8
op_ABCD                         00:000049D8
op_ADD                          00:0000536E
op_ADDA                         00:00005542
op_ADDQ                         00:00004D6E
op_ADDX                         00:000055DA
op_ADD_I                        00:00003A56
op_AND                          00:0000508C
op_ANDI_TO_CCR                  00:00002806
op_ANDI_TO_SR                   00:0000282C
op_BCC                          00:00004C98
op_BCHG                         00:00002BFC
op_BCLR                         00:00002F64
op_BOOL_I                       00:00003686
op_BSET                         00:000032B2
op_BSR                          00:00003838
op_BTST                         00:00002852
op_BTST0                        00:000029DC
op_BTST1                        00:000029E8
op_BTST10                       00:00002A30
op_BTST11                       00:00002A38
op_BTST12                       00:00002A3E
op_BTST2                        00:000029F0
op_BTST20                       00:00002B96
op_BTST21                       00:00002BA0
op_BTST22                       00:00002BA6
op_BTST23                       00:00002BAC
op_BTST24                       00:00002BB2
op_BTST25                       00:00002BB8
op_BTST26                       00:00002BBE
op_BTST27                       00:00002BC4
op_BTST28                       00:00002BCA
op_BTST29                       00:00002BD0
op_BTST3                        00:000029F8
op_BTST30                       00:00002BD6
op_BTST31                       00:00002BDC
op_BTST32                       00:00002BE0
op_BTST4                        00:00002A00
op_BTST5                        00:00002A08
op_BTST6                        00:00002A10
op_BTST7                        00:00002A18
op_BTST8                        00:00002A20
op_BTST9                        00:00002A28
op_CHK                          00:000042E2
op_CMP                          00:000051EC
op_CMPA                         00:00005262
op_CMPM                         00:000052C8
op_CMP_I                        00:0000386E
op_DBCC                         00:00004D18
op_DIVS                         00:00004F50
op_DIVU                         00:00004EFE
op_EOR                          00:00005176
op_EORI_TO_CCR                  00:000027BA
op_EORI_TO_SR                   00:000027E0
op_EXG                          00:00005892
op_EXT                          00:00004162
op_LEAPEA                       00:000041A4
op_LINKS                        00:000042B4
op_MOVE                         00:00003D62
op_MOVEM                        00:000046BA
op_MOVEP                        00:000035FA
op_MOVEQ                        00:00004EE2
op_MOVE_USP                     00:000042D2
op_MOVE_xxx_FLAGS               00:00003F6E
op_MULS                         00:00005846
op_MULU                         00:000057FA
op_NBCD                         00:00004BC8
op_NEGS                         00:0000432C
op_OR                           00:00004FA2
op_ORI_TO_CCR                   00:00002776
op_ORI_TO_SR                    00:00002798
op_ROXx                         00:00005B36
op_ROx                          00:00005900
op_RTR                          00:00004C76
op_SBCD                         00:00004AD0
op_SCC                          00:00004D3E
op_SHIFTS                       00:00005D6C
op_SHIFTS2                      00:00005FAE
op_SUB                          00:00005458
op_SUBA                         00:0000558E
op_SUBQ                         00:00004E28
op_SUBX                         00:000056EA
op_SUB_I                        00:00003BDC
op_SWAP                         00:0000418E
op_TAS                          00:00004250
op_TRAPV                        00:00004C5A
op_TST                          00:00004276
op_abs                          00:0000C2A0
op_call                         00:0000C260
op_jump                         00:0000C266
op_rtsvec                       00:0000C250
op_short                        00:0000C310
op_vctr                         00:0000C276
output_number                   00:0000C01A
output_number_loop              00:0000C01C
p1_high                          S:00000176
p1_score                         S:00000173
p1_ships                         S:00000175
p2_high                          S:0000027A
p2_score                         S:00000277
p2_ships                         S:00000279
p_2_end                          S:0000027B
p_fire_off                       E:0000002B
p_flag_off                       E:00000027
p_orient                         S:0000001E
p_xpos_off                       E:FFFFFFB6
p_xvel_off                       E:0000004A
p_xvlo_off                       E:0000007E
p_ypos_off                       E:FFFFFFFC
p_yvel_off                       E:0000006D
p_yvlo_off                       E:0000007F
past_play                        S:00000019
pcssxa                          00:00009762
pen_color                        E:00040890
pfire_snd                        E:00000001
pfire_sound                     00:0000DEBA
piece_draw_loop                 00:0000BD4E
plant_colour                     S:00000010
plant_fill                       S:00000012
plant_flag                       S:000000F4
plant_spawn                      S:00000220
plant_xy                         S:0000002C
plants_main_loop                 S:00000294
play_00                         00:0000D574
play_01                         00:0000D58C
play_02                         00:0000D5B0
play_03                         00:0000D5D4
play_04                         00:0000D5F8
play_05                         00:0000D61A
play_06                         00:0000D63E
play_07                         00:0000D662
play_08                         00:0000D686
play_09                         00:0000D6AA
play_0A                         00:0000D6CE
play_0B                         00:0000D6F2
play_0C                         00:0000D716
play_0D                         00:0000D73A
play_0E                         00:0000D75E
play_0F                         00:0000D782
play_10                         00:0000D7A6
play_liv                        00:0000D7BE
play_sample                     00:0000DDCC
play_sound                       S:00000015
play_tab                        00:0000D552
player_1                         E:000000F3
player_2                         E:000001F7
player_idx                       S:00000018
player_init                     00:0000B9E6
player_n                        00:0000C14A
player_reset                    00:0000BA1C
player_shot                     00:0000B252
player_x                        00:0000C146
plot                            00:00001C36
plot_and                        00:00001CF8
plot_black                      00:00001D1A
plot_copy                       00:00001D0C
plot_or                         00:00001CCE
plot_rand_points                00:00008A6E
plot_sw                         00:00001CA8
plot_white                      00:00001D24
plot_xor                        00:00001CE2
plottbl                         00:00001C6C
pnotscreen                       S:000006AA
poison_colour                    S:00000028
pos_lower_ok                    00:0000BAAE
prng                            00:000024E4
prtflt                          00:00009F58
psetscreen                       S:00000698
pss_check_loop                  00:0000B14C
push_start_mess                 00:0000B0A0
pvariables                       S:000006AC
px_hide                         00:0000AFFE
px_time                          S:0000001C
quit                             S:00000000
r_hit_tim                        E:00000079
ramtest                         00:000095EA
ramtest0                        00:00009634
ramtest1                        00:0000963C
ramtest2                        00:0000966A
ramtest3                        00:000096B0
ramtest6                        00:0000965A
rand_curve                      00:00008D38
rand_lines                      00:00008BB6
rand_points                     00:00008B80
rand_rect                       00:00008C16
rand_rect2                      00:00008C76
rand_triangle                   00:00008CC0
rbo                             00:000098D4
read_hi                         00:0000C230
readyQ                           E:00100320
redraw                           S:00000002
reset_game                      00:0000B678
reset_xy_loop                   00:0000BD2C
restart                          S:00000288
reveal_player                   00:0000B816
rmtst1                          00:0000964E
rmtst2                          00:00009682
rmtst3                          00:0000968A
rmtst5                          00:00009604
rock_0                          00:0000D4CA
rock_1                          00:0000D4E2
rock_2                          00:0000D4FE
rock_3                          00:0000D518
rock_count                       E:00000076
rock_hit_out                    00:0000B2B2
rock_on_x                       00:0000B9B8
rock_score                      00:0000BEE6
rock_tab                        00:0000D4C2
rock_y_ok                       00:0000B9B6
rot_and_thrust                  00:0000B83A
rot_not_left                    00:0000B5B2
rotate_iofocus                  00:0000800E
rtc_read                        00:00009BA2
rtc_write                       00:00009C60
sGetChar                        00:0000989E
s_controls                      00:0000C1B0
s_fire_off                       E:00000029
s_flag_off                       E:00000028
s_key                            S:00000014
s_mess_0                        00:0000DCB2
s_mess_1                        00:0000DCBA
s_mess_2                        00:0000DCC3
s_mess_3                        00:0000DCEA
s_mess_4                        00:0000DD08
s_mess_5                        00:0000DD30
s_mess_6                        00:0000DD42
s_mess_7                        00:0000DD4F
s_messages                      00:0000DCA2
s_orient                         S:0000001F
s_xpos_off                       E:FFFFFFB8
s_xvel_off                       E:0000004B
s_ypos_off                       E:FFFFFFFE
s_yvel_off                       E:0000006E
sauc_cntdn                       E:00000077
sauc_jsr                        00:0000D534
sauc_vec                        00:0000D536
saucer_yok                      00:0000B2F2
saucer_yvel                     00:0000B362
save_char                       00:0000B5E0
save_hbutton                    00:0000B578
save_hi_index                   00:0000BF3C
save_hyperspace                 00:0000B672
save_saucer                     00:0000B330
save_ship_fire                  00:0000B414
score_off                        E:00000080
scr_x                            S:00000006
scr_y                            S:00000008
screen_size                      S:0000066E
select_focus1                   00:00008020
select_iofocus                  00:00007FFC
semamem                          E:FD050000
serial_cmdproc                  00:000015F0
serial_dcb                       E:00040C94
serial_getbuf                   00:00001644
serial_getchar                  00:0000161E
serial_getchar_direct           00:00001624
serial_init                     00:0000158C
serial_peek_char                00:0000162C
serial_peek_char_direct         00:00001634
serial_putbuf                   00:00001644
serial_putchar                  00:00001616
serial_putchar_direct           00:0000163C
serial_set_inpos                00:00001644
serial_set_outpos               00:00001644
serial_stat                     00:00001612
set_a_pixel                      S:000005B8
set_graphics_mode               00:00007AB6
set_text_mode                   00:00007A8C
set_thing_pixel                  S:000005A2
set_this_pixel                   S:000005C4
setscreen                       00:0000C1B0
setup_err                       00:0000152A
setup_framebuf                  00:00001990
setup_gfxaccel                  00:00001EB8
setup_keybd                     00:00000580
setup_null                      00:00000538
setup_serial                    00:0000158C
setup_textvid                   00:00000FD0
sexpl_snd                        E:00000005
sexpl_sound                     00:0000DE52
sfire_snd                        E:00000000
sfire_sound                     00:0000DECC
shift_left                      00:0000C34A
ship_fire                       00:0000B3EA
ship_move                       00:0000B7E8
ship_parts                      00:0000BDB4
ship_wrk_x                      00:0000BD02
ship_wrk_y                      00:0000BD0E
ships_off                        E:00000082
shot_jsr                        00:0000DA02
shot_mask                       00:0000B3E6
shot_or                         00:0000B3E8
shot_vec                        00:0000DA04
show_ships                      00:0000B6D6
sin_cos                         00:0000C056
sin_d0                          00:0000C03C
sirq0001                        00:00001822
sirq0002                        00:000018C0
sirqNxtByte                     00:00001810
sirqRxFull                      00:00001872
sirqTxEmpty                     00:000018C0
sirqXmitOff                     00:000018C0
sixteen_ms                       S:0000001D
skip_add                        00:0000BEAA
skip_p2_score                   00:0000BB98
skip_play_flash                 00:0000BAFC
skip_play_inc                   00:0000B716
skip_player_cont                00:0000AFFA
skip_player_move                00:0000AFF6
skip_sub                        00:0000BFCA
small_s_size                    00:0000B1BE
small_saucer                    00:0000B32E
smsau_snd                        E:00000003
smsau_sound                     00:0000DE92
sound_init                      00:0000DD5F
sound_key                       00:0000DDEC
spi_buff                         E:00042000
spi_getbuf                      00:00009AA2
spi_init                        00:000098DC
spi_putbuf                      00:00009AE2
spi_read_block                  00:000099FC
spi_send_byte                   00:00009940
spi_send_cmd                    00:00009970
spi_set_block_address           00:000099C4
spi_setpos                      00:000099C4
spi_setup                       00:000098DC
spi_write_block                 00:00009A4E
ss_count                         S:0000001B
start                           00:000003B8
start_game                      00:0000B06C
start_left                      00:0000B306
start_other                     00:0000050C
start_plants                     S:0000027B
static_messages                 00:0000BAB8
suppress_0                       S:00000016
switch_addr                      S:0000000E
sys_switches                     E:000408B8
tblPow2                         00:000084B2
tcbs                             E:20010000
test_escape                      S:00000307
test_fire_loop                  00:0000B408
test_neg_fire                   00:0000B480
textvid_clear                   00:000011B8
textvid_cmdproc                 00:00000FAC
textvid_dcb                      E:00040B08
textvid_get_color               00:0000115E
textvid_get_dimen               00:00001188
textvid_get_inpos               00:000010E0
textvid_get_outpos              00:00001122
textvid_get_outptr              00:00001138
textvid_getbuf                  00:000010DC
textvid_getbuf1                 00:0000116E
textvid_getchar                 00:000010D4
textvid_init                    00:00001028
textvid_putbuf                  00:000010DC
textvid_putchar                 00:0000127A
textvid_set_inpos               00:000010F6
textvid_set_outpos              00:0000110C
textvid_set_unit                00:0000117E
textvid_stat                    00:000010D0
textvid_stub                    00:000010DC
thing_colour                     S:0000001C
things_exist                     S:0000046C
third_quad                      00:0000BDDC
thmp_sndi                        E:0000007C
three_ship_start                00:0000B686
thrst_snd                        E:00000002
thrst_sound                     00:0000DEA7
thump_snd                        S:00000023
thump_time                       S:00000024
tickcnt                          E:0004009C
time_count                       S:00000025
timer_interrupt                 00:0000C140
trap3                           00:00009D32
variables                       00:0000DEEB
vec_x_pos                       00:0000BD74
vec_y_pos                       00:0000BD80
vector                          00:0000C39C
vector_base                     00:0000C2D4
vector_move                     00:0000C370
wait1ms                         00:00008B34
was_rot_left                    00:0000B5B2
what_hit_rock                   00:0000B232
what_hit_saucer                 00:0000B25E
white_rect                      00:00008B5C
wide_shot                       00:0000B3C6
width                            S:00000004
wrap_to_a                       00:0000B5D2
wrap_to_z                       00:0000B5D6
write_initial                   00:0000B6A2
x_off_pos                       00:0000BA6C
x_pos_end                        E:FFFFFFC6
x_pos_neg                       00:0000B772
x_pos_off                        E:FFFFFF80
x_vel_off                        E:0000002F
y_not_neg                       00:0000B798
y_off_pos                       00:0000BA86
y_pos_off                        E:FFFFFFC6
y_vel_off                        E:00000052
zero_suppress                   00:0000C02C

Symbols by value:
FD050000 semamem
FD060000 ACIA
FD069000 I2C1
FD069010 I2C2
FD06A000 SPI_MASTER1
FD06A100 SPI_MASTER2
FD080000 TEXTREG
FD090000 PLIC
FD0FFC00 RST_REG
FD0FFD00 RAND_NUM
FD0FFD00 RAND
FD0FFD04 RAND_STRM
FD0FFD08 RAND_MZ
FD0FFD0C RAND_MW
FD0FFE00 KEYBD
FD0FFF00 leds
FD200000 FRAMEBUF
FD300000 GFXACCEL
FDC00000 MMU
FFFFFF80 x_pos_off
FFFFFFB6 p_xpos_off
FFFFFFB8 s_xpos_off
FFFFFFBA f_xpos_off
FFFFFFC6 y_pos_off
FFFFFFC6 x_pos_end
FFFFFFF0 DDATA
FFFFFFFC p_ypos_off
FFFFFFFC HISPC
FFFFFFFE s_ypos_off
00000000 DCB_MAGIC
00000000 sfire_snd
00000000 FRAMEBUF_CTRL
00000000 glob_scale
00000000 ACIA_TX
00000000 f_ypos_off
00000000 GFX_CTRL
00000000 E_Ok
00000000 TCBInit
00000000 HAS_MMU
00000000 ACIA_RX
00000000 def_back
00000000 I2C_PREL
00000000 quit
00000001 def_p_spawn
00000001 SPI_INIT_SD
00000001 DT_NUMERIC
00000001 pfire_snd
00000001 SPI_MASTER_CTRL_REG
00000001 SCREEN_FORMAT
00000001 I2C_PREH
00000002 redraw
00000002 I2C_CTRL
00000002 DEV_PUTCHAR
00000002 DT_STRING
00000002 thrst_snd
00000002 local_x
00000002 E_Func
00000002 SPI_RW_READ_SD_BLOCK
00000002 SERIAL_SEMA
00000002 SPI_TRANS_TYPE_REG
00000003 I2C_TXR
00000003 CTRLC
00000003 I2C_RXR
00000003 SPI_RW_WRITE_SD_BLOCK
00000003 KEYBD_SEMA
00000003 SPI_TRANS_CTRL_REG
00000003 smsau_snd
00000004 ACIA_STAT
00000004 lgsau_snd
00000004 NCORES
00000004 I2C_STAT
00000004 I2C_CMD
00000004 EOT
00000004 RAND_SEMA
00000004 DCB_NAME
00000004 local_y
00000004 GFX_STATUS
00000004 width
00000004 TCBRegs
00000004 SPI_TRANS_STS_REG
00000005 SCREEN_SEMA
00000005 sexpl_snd
00000005 SPI_TRANS_ERR_REG
00000005 def_a_spawn
00000006 height
00000006 scr_x
00000006 MEMORY_SEMA
00000006 SPI_DIRECT_ACCESS_DATA_REG
00000006 mexpl_snd
00000007 SPI_ADDR_70
00000007 lexpl_snd
00000007 DEV_SET_OUTPOS
00000008 FMTK_SEMA
00000008 SPI_ADDR_158
00000008 numBreakpoints
00000008 num_plants
00000008 ACIA_CMD
00000008 beat1_snd
00000008 scr_y
00000008 CTRLH
00000009 E_NotAlloc
00000009 SPI_ADDR_2316
00000009 beat2_snd
0000000A E_NotSupported
0000000A max_plants
0000000A SPI_ADDR_3124
0000000A FDATA
0000000A PRNlword
0000000A extra_snd
0000000A LF
0000000C DEV_CLEAR
0000000C num_animals
0000000C ACIA_CTRL
0000000C flags_off
0000000D CR
0000000D DEV_SWAPBUF
0000000D SC_TAB
0000000E switch_addr
0000000E max_animals
00000010 LOCVARSZ
00000010 FRAMEBUF_PAGE1_ADDR
00000010 SPI_RX_FIFO_DATA_REG
00000010 GFX_TARGET_BASE
00000010 plant_colour
00000010 DEV_GETBUF1
00000011 SC_ALT
00000011 XON
00000012 hiscore_y
00000012 SC_LSHIFT
00000012 DEV_WRITEAT
00000012 plant_fill
00000013 CTRLS
00000013 XOFF
00000014 SPI_RX_FIFO_CTRL_REG
00000014 GFX_TARGET_SIZE_X
00000014 s_key
00000014 SC_CTRL
00000014 animal_colour
00000014 DEV_GET_DIMEN
00000015 play_sound
00000016 suppress_0
00000017 high_idx
00000017 DEV_GET_OUTPOS
00000018 FRAMEBUF_PAGE2_ADDR
00000018 player_idx
00000018 DEV_GET_OUTPTR
00000018 CTRLX
00000018 animal_fill
00000018 GFX_TARGET_SIZE_Y
00000018 DCB_CMDPROC
00000019 past_play
00000019 DEV_SET_COLOR
0000001A num_players
0000001A CTRLZ
0000001B ss_count
0000001B DEV_PLOT_POINT
0000001B ESC
0000001C px_time
0000001C DEV_DRAW_LINE
0000001C thing_colour
0000001D sixteen_ms
0000001D DEV_DRAW_TRIANGLE
0000001E p_orient
0000001E DEV_DRAW_RECTANGLE
0000001F DEV_DRAW_CURVE
0000001F s_orient
0000001F FOC
00000020 E_BadDevNum
00000020 fill_colour
00000020 TS_PREEMPT
00000020 hi_char
00000020 TEXTROW
00000020 DEV_SET_DIMEN
00000020 SPI_TX_FIFO_DATA_REG
00000020 BLANK
00000020 DCB_OUTPOSX
00000021 E_NoDev
00000021 DEV_SET_COLOR_DEPTH
00000021 last_fire
00000022 last_hype
00000022 DEV_SET_DESTBUF
00000023 DEV_SET_DISPBUF
00000023 E_ReadError
00000023 thump_snd
00000024 thump_time
00000024 DCB_OUTPOSY
00000024 E_WriteError
00000024 food_colour
00000024 SPI_TX_FIFO_CTRL_REG
00000025 time_count
00000026 hyper
00000027 hiscores
00000027 p_flag_off
00000027 E_InitErr
00000027 FOP
00000028 TCBHandleToPointer
00000028 DCB_OUTPOSZ
00000028 s_flag_off
00000028 poison_colour
00000029 s_fire_off
0000002B p_fire_off
0000002C plant_xy
0000002C DCB_INPOSX
0000002F flag_end
0000002F x_vel_off
00000030 TEXTCOL
00000030 DCB_INPOSY
00000032 def_plants
00000032 def_animals
00000034 DCB_INPOSZ
00000038 DCB_INBUFPTR
00000038 GFX_DEST_PIXEL_X
0000003B hinames
0000003C DCB_OUTBUFPTR
0000003C GFX_DEST_PIXEL_Y
0000003F BUFSIZE
00000040 GFX_DEST_PIXEL_Z
00000040 TCBPointerToHandle
00000040 DCB_INBUFSIZE
00000044 TCBUSP
00000044 DCB_OUTBUFSIZE
00000048 DCB_INDIMX
00000048 TCBSSP
0000004A p_xvel_off
0000004B s_xvel_off
0000004C f_xvel_off
0000004C TCBSR
0000004C DCB_INDIMY
00000050 TCBPC
00000050 DCB_INDIMZ
00000050 TCBIAlloc
00000050 BUFLEN
00000052 y_vel_off
00000054 TCBStatus
00000054 DCB_OUTDIMX
00000055 TCBPriority
00000058 DCB_OUTDIMY
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000059 game_count
0000005B expl_x_pos
0000005C DCB_OUTDIMZ
00000060 DCB_BKCOLOR
00000064 DCB_FGCOLOR
00000067 expl_y_pos
00000068 DCB_OPCODE
00000068 FRAMEBUF_BMPSIZE_X
0000006C FRAMEBUF_BMPSIZE_Y
0000006C TCBStartTick
0000006D p_yvel_off
0000006E TCBAlloc
0000006E s_yvel_off
0000006F f_yvel_off
00000070 TCBEndTick
00000070 DCB_INBUFPTR2
00000074 TCBTicks
00000074 DCB_OUTBUFPTR2
00000074 GFX_CLIP_PIXEL0_X
00000075 i_rk_count
00000076 rock_count
00000077 SC_NUMLOCK
00000077 sauc_cntdn
00000078 FRAMEBUF_WINDOW_DIMEN
00000078 i_sauc_tim
00000078 GFX_CLIP_PIXEL0_Y
00000079 r_hit_tim
0000007A hide_p_cnt
0000007B new_rocks
0000007C thmp_sndi
0000007C GFX_CLIP_PIXEL1_X
0000007C DCB_OUTBUFSIZE2
0000007C TCBNext
0000007C TCBIFree
0000007D min_rocks
0000007E SC_SCROLLLOCK
0000007E p_xvlo_off
0000007F p_yvlo_off
00000080 GFX_CLIP_PIXEL1_Y
00000080 TS_RUNNING
00000080 DCB_UNIT
00000080 score_off
00000080 TCBPrev
00000082 ships_off
00000082 TCBAffinityBase
00000083 high_off
00000084 DCB_SIZE
00000084 GFX_COLOR0
00000084 TCBAffinity
00000088 GFX_COLOR1
0000008C GFX_COLOR2
00000092 TCBFree
00000098 FRAMEBUF_COLOR_COMP
000000A0 TCBAffineChose
000000B0 FRAMEBUF_PPS
000000B0 GFX_TARGET_X0
000000B4 GFX_TARGET_Y0
000000B8 GFX_TARGET_X1
000000BC GFX_TARGET_Y1
000000D0 GFX_COLOR_COMP
000000D4 GFX_PPS
000000D8 TCBInsertIntoReadyQueue
000000E0 SC_EXTEND
000000F0 SC_KEYUP
000000F3 player_1
000000F4 plant_flag
00000100 IRQ_trampolines
00000100 TCB_SIZE
00000126 animal_xy
00000150 TCBRemoveFromReadyQueue
00000172 StartQ
00000173 p1_score
00000175 p1_ships
00000176 p1_high
0000017A TCBPopReadyQueue
000001EE animal_flag
000001F7 player_2
00000220 plant_spawn
00000220 FemtikiInit
00000221 animal_spawn
00000230 FemtikiInitIRQ
0000023E OSCallTable
00000240 CallOS
00000258 VIDEO_Y
00000277 p2_score
00000279 p2_ships
0000027A p2_high
0000027B p_2_end
0000027B start_plants
00000288 restart
00000294 plants_main_loop
000002AA GetRunningTCBPointer
000002C2 SelectThreadToRun
000002E2 end_main_loop
000002EC UpdateIRQLive
000002FA goodbye_message
00000307 test_escape
0000030E FemtikiTimerIRQ
0000031E exit_test_escape
00000320 VIDEO_X
00000320 init_world
00000384 clr_plant_loop
00000396 LockSysSemaphore
00000398 clr_animals_loop
000003A6 UnlockSysSemaphore
000003B8 start
000003C0 do_plants
000003F6 do_animals
00000400 irq_list_tbl
0000042A do_things
0000046C things_exist
00000484 do_things_loop
000004AA check_for_food
000004CA kill_thing
000004DA is_food
000004F8 loop2
000004FA loop1
00000504 new_thing_loop
0000050C start_other
00000524 draw_old_thing
00000526 fill_old_thing
0000052C next_thing
00000530 exit_do_things
00000532 neighbour
00000532 do_nothing
00000538 null_init
00000538 setup_null
00000578 exit_neighbour
0000057A null_ret
0000057C null_cmdproc
0000057E delta_x
00000580 keybd_init
00000580 setup_keybd
00000590 delta_y
000005A2 set_thing_pixel
000005B8 set_a_pixel
000005C4 set_this_pixel
000005E8 InitialisePlants
00000604 KBD_CMDTBL
00000624 keybd_cmdproc
00000646 keybd_stat
0000064E keybd_putchar
00000656 keybd_getchar
0000065C get_direction
0000065E keybd_putbuf
0000065E keybd_set_outpos
0000065E get_prng
0000065E keybd_set_inpos
0000065E keybd_getbuf
00000662 KeybdGetID
0000066E screen_size
00000694 kgid1
00000698 psetscreen
0000069C kgnotKbd
000006A0 KeybdSetLED
000006AA pnotscreen
000006AC pvariables
000006CC KeybdInit
000006CC _KeybdInit
000006F8 kbdi0002
00000762 kbdiTryAgain
00000770 kbdi0004
0000078C kbdi0005
00000790 ledxit
000007A6 kbdiXmitBusy
000007B4 msgBadKeybd
000007C3 msgXmitBusy
000007DE _KeybdGetStatus
000007FC _KeybdGetScancode
00000800 STRAREASIZE
0000081A _KeybdClearIRQ
00000830 KeybdRecvByte
00000852 KeybdWaitTx
00000878 SetKeyboardEcho
00000880 CheckForKey
0000088C GetKey
000008C6 CheckForCtrlC
000008D6 KeybdGetCharNoWait
000008DE KeybdGetCharWait
000008E6 KeybdGetChar
00000B02 KeybdSetLEDStatus
00000B52 KeybdSendByte
00000B5A Wait10ms
00000B76 Wait300ms
00000B92 KeybdIRQ
00000C48 _unshiftedScanCodes
00000D48 _shiftedScanCodes
00000E48 _keybdControlCodes
00000EC8 _keybdExtendedCodes
00000F48 TEXTVID_CMDTBL
00000FAC textvid_cmdproc
00000FD0 setup_textvid
00000FFF MAX_TID
00001000 NR_TCB
00001028 textvid_init
000010D0 textvid_stat
000010D4 textvid_getchar
000010DC textvid_putbuf
000010DC textvid_getbuf
000010DC textvid_stub
000010E0 textvid_get_inpos
000010F6 textvid_set_inpos
0000110C textvid_set_outpos
00001122 textvid_get_outpos
00001138 textvid_get_outptr
0000115E textvid_get_color
0000116E textvid_getbuf1
0000117E textvid_set_unit
00001188 textvid_get_dimen
000011B8 textvid_clear
00001212 loop3
00001230 get_screen_color
00001250 CalcScreenLoc
0000127A textvid_putchar
00001298 dcx14
0000129C dcx7
000012A4 dccr
000012C2 dcx6
000012D8 dcx8
000012EE dcx9
0000130C dcx10
00001324 dcx12
0000132E dcx11
00001378 dclf
0000137C dcx16
00001380 dcx4
0000138A doBackspace
00001398 doDelete
000013CE doCtrlX
000013F2 IncCursorPos
0000140C IncCursorRow
00001434 icc1
00001436 ScrollUp
0000147C BlankLastLine
000014D6 HomeCursor
000014E8 SyncCursor
0000152A err_init
0000152A setup_err
00001556 err_ret
00001558 err_cmdproc
0000155C COM_CMDTBL
0000158C setup_serial
0000158C serial_init
000015F0 serial_cmdproc
00001612 serial_stat
00001616 serial_putchar
0000161E serial_getchar
00001624 serial_getchar_direct
0000162C serial_peek_char
00001634 serial_peek_char_direct
0000163C serial_putchar_direct
00001644 serial_set_outpos
00001644 serial_getbuf
00001644 serial_set_inpos
00001644 serial_putbuf
00001648 SerialInit
00001686 SerialGetChar
000016FE SerialPeekChar
0000173A SerialPeekCharDirect
00001754 SerialPutChar
000017B8 SerialPutCharDirect
000017D4 SerialRbo
000017DC SerialRcvCount
000017FC SerialIRQ
00001810 sirqNxtByte
00001822 sirq0001
00001872 sirqRxFull
00001872 notRxInt
000018C0 sirqXmitOff
000018C0 sirqTxEmpty
000018C0 sirq0002
000018C0 notTxInt
000018D2 nmeSerial
000018DC FRAMEBUF_CMDTBL
0000196C framebuf_cmdproc
00001990 setup_framebuf
000019FE framebuf_init
00001AA8 framebuf_stat
00001AA8 framebuf_getchar
00001AA8 framebuf_putchar
00001AA8 framebuf_set_destbuf
00001AAA framebuf_set_inpos
00001AB8 framebuf_set_outpos
00001AC6 framebuf_getbuf1
00001ACE framebuf_getbuf2
00001AD6 framebuf_setbuf1
00001AE4 framebuf_setbuf2
00001AF2 framebuf_swapbuf
00001B50 framebuf_set_dispbuf
00001B5A framebuf_set_unit
00001B64 framebuf_getbuf
00001B64 framebuf_putbuf
00001B64 framebuf_stub
00001B68 framebuf_set_color_depth
00001B7A framebuf_get_color
00001B8A framebuf_get_dimen
00001BBA framebuf_set_dimen
00001C36 plot
00001C36 framebuf_writeat
00001C6C plottbl
00001CA8 plot_sw
00001CCE plot_or
00001CE2 plot_xor
00001CF8 plot_and
00001D0C plot_copy
00001D1A plot_black
00001D24 plot_white
00001D30 clear_graphics_screen
00001D64 framebuf_clear
00001E04 GFXACCEL_CMDTBL
00001E94 gfxaccel_cmdproc
00001EB8 setup_gfxaccel
00001F42 gfxaccel_init
00001FA4 gfxaccel_stat
00001FB2 gfxaccel_setbuf2
00001FB2 gfxaccel_setbuf1
00001FB2 gfxaccel_get_inpos
00001FB2 gfxaccel_stub
00001FB2 gfxaccel_getchar
00001FB2 gfxaccel_get_dimen
00001FB2 gfxaccel_set_unit
00001FB2 gfxaccel_getbuf2
00001FB2 gfxaccel_swapbuf
00001FB2 gfxaccel_getbuf1
00001FB2 gfxaccel_getbuf
00001FB2 gfxaccel_putbuf
00001FB2 gfxaccel_get_outptr
00001FB2 gfxaccel_putchar
00001FB2 gfxaccel_set_dispbuf
00001FB2 gfxaccel_set_inpos
00001FB2 gfxaccel_set_outpos
00001FB2 gfxaccel_get_outpos
00001FB2 gfxaccel_writeat
00001FB6 gfxaccel_set_dimen
00001FEA gfxaccel_set_destbuf
00002016 gfxaccel_clear
000020AA gfxaccel_set_color_depth
000020BC gfxaccel_get_color
000020CA gfxaccel_set_color
000020EA gfxaccel_set_color123
00002122 gfxaccel_clip_rect
00002166 gfxaccel_set_active_point
00002192 gfxaccel_plot_point
000021E4 gfxaccel_draw_line
0000224C gfxaccel_draw_rectangle
000022B4 gfxaccel_draw_triangle
0000233C gfxaccel_draw_curve
000023C2 gfxaccel_wait
000023F0 GlobalReadLong
000023F6 GlobalWriteLong
000023FA nd1
000023FA nd3
000023FA net_delay
000023FA nd2
000023FA nd4
000023FE InitIOPBitmap
0000244A RandInit
0000244A InitRand
000024B4 RandGetNum
000024E4 prng
0000253E _GetRand
00002562 RandWait
0000257A InitSemaphores
000025A0 LockSemaphore
000025C2 ForceUnlockSemaphore
000025DC UnlockSemaphore
000025F8 T15LockSemaphore
000025FE T15UnlockSemaphore
00002604 T15GetFloat
0000261A T15Abort
0000262A chk_exception
0000263E Delay3s
0000264C dly3s2
0000264E dly3s1
00002662 Delay3s2
0000267E cpu_test
0000275C ALL_DONE
0000275E BSR_FAR1
00002766 EXCEPTION_6
0000276E EXCEPTION_7
00002776 op_ORI_TO_CCR
00002798 op_ORI_TO_SR
000027BA op_EORI_TO_CCR
000027E0 op_EORI_TO_SR
00002806 op_ANDI_TO_CCR
0000282C op_ANDI_TO_SR
00002852 op_BTST
000029DC op_BTST0
000029E8 op_BTST1
000029F0 op_BTST2
000029F8 op_BTST3
00002A00 op_BTST4
00002A08 op_BTST5
00002A10 op_BTST6
00002A18 op_BTST7
00002A20 op_BTST8
00002A28 op_BTST9
00002A30 op_BTST10
00002A38 op_BTST11
00002A3E op_BTST12
00002B96 op_BTST20
00002BA0 op_BTST21
00002BA6 op_BTST22
00002BAC op_BTST23
00002BB2 op_BTST24
00002BB8 op_BTST25
00002BBE op_BTST26
00002BC4 op_BTST27
00002BCA op_BTST28
00002BD0 op_BTST29
00002BD6 op_BTST30
00002BDC op_BTST31
00002BE0 op_BTST32
00002BFC op_BCHG
00002F64 op_BCLR
000032B2 op_BSET
000035FA op_MOVEP
00003686 op_BOOL_I
00003830 BSR_CLOSE1
00003838 op_BSR
00003866 BSR_CLOSE2
0000386E op_CMP_I
00003A56 op_ADD_I
00003BDC op_SUB_I
00003D62 op_MOVE
00003E2E MOVE2
00003EAA MOVE1
00003F2A MOVE3
00003F6E op_MOVE_xxx_FLAGS
00004000 REL4
00004084 MOVE4
00004162 op_EXT
0000418E op_SWAP
000041A4 op_LEAPEA
0000423C LEA1
00004250 op_TAS
00004276 op_TST
000042B4 op_LINKS
000042D2 op_MOVE_USP
000042E2 op_CHK
0000432C op_NEGS
000046BA op_MOVEM
000049D8 op_ABCD
000049F8 ABCD_OUTER1
000049FA ABCD_INNER1
00004A16 ABCD_NO_C1
00004A1E ABCD_NO_C2
00004A66 ABCD_OUTER2
00004A68 ABCD_INNER2
00004A84 ABCD_NO_C3
00004A8C ABCD_NO_C4
00004AD0 op_SBCD
00004AF0 SBCD_OUTER1
00004AF2 SBCD_INNER1
00004B0E SBCD_NO_C1
00004B16 SBCD_NO_C2
00004B5E SBCD_OUTER2
00004B60 SBCD_INNER2
00004B7C SBCD_NO_C3
00004B84 SBCD_NO_C4
00004BC8 op_NBCD
00004BE0 NBCD_LOOP
00004BEC NBCD_NO_C
00004BF0 NBCD_NO_Z
00004C26 NBCD_LOOP1
00004C3A NBCD_NO_C1
00004C3E NBCD_NO_Z1
00004C5A op_TRAPV
00004C76 op_RTR
00004C82 RTR_DONE
00004C90 BSR_FAR2
00004C98 op_BCC
00004CA0 BCC1
00004CAA BCC2
00004CB2 BCC3
00004CBC BCC4
00004CC4 BCC5
00004CCE BCC6
00004CD6 BCC7
00004CE0 BCC8
00004CE8 BCC9
00004CF2 BCC10
00004CFA BCC11
00004D04 BCC12
00004D0C BCC13
00004D16 BCC14
00004D18 op_DBCC
00004D20 DBCC_LOOP1
00004D2E DBCC_LOOP2
00004D3E op_SCC
00004D6E op_ADDQ
00004D82 ADDQ_LOOP1
00004DC0 ADDQ_LOOP2
00004DF6 ADDQ_LOOP3
00004E28 op_SUBQ
00004E40 SUBQ_LOOP1
00004E7A SUBQ_LOOP2
00004EB0 SUBQ_LOOP3
00004EE2 op_MOVEQ
00004EFE op_DIVU
00004F1A DIVU_OUTER1
00004F50 op_DIVS
00004F6C DIVS_OUTER1
00004FA2 op_OR
00004FC2 OR_OUTER1
00005000 REL5
00005036 OR_OUTER2
0000508C op_AND
000050AC AND_OUTER1
00005120 AND_OUTER2
00005176 op_EOR
00005196 EOR_OUTER2
000051EC op_CMP
0000520C CMP_OUTER1
00005262 op_CMPA
00005282 CMPA_OUTER1
000052C8 op_CMPM
00005310 CMPM_LOOP1
0000532A CMPM_LOOP2
00005344 CMPM_LOOP3
0000536E op_ADD
0000538E ADD_OUTER1
00005402 ADD_OUTER2
00005458 op_SUB
00005478 SUB_OUTER1
000054EC SUB_OUTER2
00005542 op_ADDA
00005568 ADDA_OUTER1
0000558E op_SUBA
000055B4 SUBA_OUTER1
000055DA op_ADDX
000055FA ADDX_OUTER1
0000568E ADDX_LOOP3
000056AA ADDX_LOOP4
000056C6 ADDX_LOOP5
000056EA op_SUBX
0000570A SUBX_OUTER1
0000579E SUBX_LOOP3
000057BA SUBX_LOOP4
000057D6 SUBX_LOOP5
000057FA op_MULU
00005816 MULU_OUTER1
00005846 op_MULS
00005862 MULS_OUTER1
00005892 op_EXG
000058F4 ROx_FLAGS
00005900 op_ROx
0000590A ROx_LOOP1
0000592A ROx_LOOP2
0000594A ROx_LOOP3
0000596A ROx_LOOP4
0000598A ROx_LOOP5
000059AC ROx_LOOP6
00005B2A ROXx_FLAGS
00005B36 op_ROXx
00005B40 ROXx_LOOP1
00005B60 ROXx_LOOP2
00005B80 ROXx_LOOP3
00005BA0 ROXx_LOOP4
00005BC0 ROXx_LOOP5
00005BE2 ROXx_LOOP6
00005D60 SHIFTS_FLAGS
00005D6C op_SHIFTS
00005D76 SHIFTS_LOOP1
00005D96 SHIFTS_LOOP2
00005DB6 SHIFTS_LOOP3
00005DD6 SHIFTS_LOOP4
00005DF6 SHIFTS_LOOP5
00005E18 SHIFTS_LOOP6
00005FA2 SHIFTS2_FLAGS
00005FAE op_SHIFTS2
00005FB8 SHIFTS2_LOOP1
00005FD4 SHIFTS2_LOOP2
00005FF0 SHIFTS2_LOOP3
0000600C SHIFTS2_LOOP4
00006028 SHIFTS2_LOOP5
00006046 SHIFTS2_LOOP6
000061CC START
000061CE GOWARM
000061D2 GOOUT
000061D6 GOIN
000061DA GOAUXO
000061DE GOAUXI
000061E2 GOBYE
000061E6 TXTBGN
000061EA ENDMEM
000061EE CSTART
0000625A WSTART
0000628E ST3
000062E0 ST4
0000631A ClearStringArea
0000633A ClearStringStack
0000634E TAB1
0000637D TAB2
000063EB TAB4
0000641D TAB5
00006420 TAB6
00006425 TAB8
00006430 TAB9
00006434 TAB10
00006437 TAB11
0000643C TAB12
00006444 TAB1_1
00006474 TAB2_1
000064DC TAB4_1
00006510 TAB5_1
00006518 TAB6_1
00006520 TAB8_1
0000653C TAB9_1
00006544 TAB10_1
0000654C TAB11_1
00006554 TAB12_1
0000655C DIRECT
0000656C EXEC
00006574 EXLP
0000657E EXNGO
00006596 EX1
0000659C EXMAT
000065A2 EXGO
000065A6 INCON
000065B4 INCOM
000065C2 IOCOM
000065CC OUTCOM
000065D8 IOCON
000065E2 OUTCON
000065EE NEW
00006602 STOP
0000660A RUN
0000661E RUNNXL
0000665E RUN1
0000666A RUNTSL
00006674 RUNSML
00006684 GOTO
00006698 ONIRQ
000066B2 ONIRQ1
000066BC WAITIRQ
000066CC LIST
000066D8 LS1
000066EC LS2
000066F2 LS3
000066F8 PRINT
00006708 PR2
00006716 PR0
00006724 PR1
00006732 PR3
0000673E PR6
00006744 PR8
00006760 PR9
0000677A FINISH
00006782 GOSUB
000067BC RETURN
000067E8 FOR
00006802 FR1
0000681A FR2
00006820 FR3
00006826 FR4
0000682E FR5
00006840 FR6
0000684C FR7
00006864 FR8
00006868 NEXT
00006872 NX0
00006884 NX3
000068B2 NX1
000068CA NX2
000068D2 REM
000068D4 IF
000068D8 IF1
000068DE IF2
000068EE INPERR
000068FC INPUT
00006920 IP7
0000692A IP6
0000692E IP2
00006948 IP3
00006982 IP4
0000698E IP5
00006992 DEFLT
0000699A LET
000069A6 LT1
000069AA LOAD
000069B6 LOD1
000069D0 LOD2
000069E0 LODEND
000069EA GBYTE
000069EE GBYTE1
000069FC GBYTE2
00006A0A SAVE
00006A12 SAVE1
00006A36 SAVE2
00006A44 SAVEND
00006A68 PBYTE
00006A6A PBYTE1
00006A7E PBYTE2
00006A88 POKE
00006AFE PKER
00006B02 CALL
00006B18 CLEAR
00006B26 TEXT
00006B56 TEXTERR
00006B5A DRAWBUF
00006B6A DISPBUF
00006B7A COLOR
00006B86 COLOR1
00006BDA COLOR2
00006BEE POINT
00006C10 POINTERR
00006C14 LINE
00006C56 LINEERR
00006C5A LINEERR1
00006C60 LINEERR2
00006C66 RECT
00006CAC TRIANGLE
00006D0C TRIERR
00006D10 TRIERR1
00006D16 TRIERR2
00006D1C TRIERR3
00006D24 TRIERR4
00006D2C CURVE
00006D84 XP_PUSH
00006D94 XP_POP
00006DA4 XP_POP1
00006DB4 NUM_EXPR
00006DC2 INT_EXPR
00006DD4 EXPR
00006DD4 EXPR_OR
00006DE4 XP_OR
00006DFA EXPR_AND
00006E0A XP_AND
00006E20 XP_ORX
00006E20 XP_ANDX
00006E26 CheckNumeric
00006E38 EXPR_REL
00006E4C XP11
00006E58 XP12
00006E64 XP13
00006E70 XP14
00006E7C XP15
00006E88 XP15RT
00006E8A XP16
00006E98 XPRT0
00006EA0 XPRT1
00006EA8 XP17
00006EAE XP18
00006EC2 EXPR2
00006ED0 XP21
00006ED6 XP22
00006EDA XP23
00006EE8 XP24
00006F16 XP25
00006F1C XP26
00006F30 XP27
00006F32 ConcatString
00006FA0 EXPR3
00006FA2 XP36
00006FA6 XP30
00006FB2 XP31
00006FC8 XP34
00006FE2 XP35
00006FE8 XP_MOD
00007000 REL7
0000700A EXPR4
00007016 XP40
00007026 EXP4RT
00007028 XP41
00007038 XPSTNG
00007042 XP45
00007094 XP44
000070A0 PARN
000070B0 XP42
000070B2 XP43
000070B6 AllocateString
00007114 GarbageCollectStrings
00007150 NextString
00007166 StringInVar
00007184 SIV1
000071AC PointsIntoStringArea
000071D0 StringOnStack
00007200 UpdateStringPointers
0000722C USP1
0000724E TSTV
00007296 TV1
000072C6 TV2
000072CE TSTVRT
000072D0 DIV32
000072E2 DIV1
000072E8 DIV2
000072EE DIV3
000072FC DIV4
0000730A DIVRT
0000730C PEEK
00007374 RND
0000739E ABS
000073AA SIZE
000073BA TICK
000073C6 CORENO
000073D2 LorRArgs
0000740A LorR1
0000740E MID
00007456 MID2
0000746E MID5
00007476 DOMID
000074A2 MID4
000074D4 MID1
000074D8 LEFT
000074E4 RIGHT
0000750C LEN
00007532 INT
00007558 CHR
00007590 SETVAL
000075AE SV1
000075B0 FIN
000075BC FI1
000075C8 FI2
000075CA ENDCHK
000075DA ENDCHK1
000075DC QWHAT
000075DE AWHAT
000075E2 ERROR
0000761C QSORRY
0000761E ASORRY
00007624 QHOW
00007626 AHOW
0000762C ETYPE
00007632 GETLN
00007642 GL1
00007660 GL2
00007674 GL3
00007698 GL4
000076A4 GL5
000076C0 GL6
000076C8 GL7
000076D0 FNDLN
000076DE FNDLNP
000076F4 FNDRET
000076F6 FNDNXT
000076F8 FNDSKP
00007706 MVUP
0000770E MVRET
00007710 MVUPW
0000771A MVDOWN
00007722 POPA
0000775E PUSHA
00007794 PRTSTG
00007796 PS1
000077AE PRTRET
000077B0 PRTSTR2a
000077B6 PRTSTR2
000077BC PRTNUM
00007806 PRTLN
00007824 TSTC
00007836 TC1
0000783C TSTNUM
00007888 IGNBLK
00007892 TOUPBUF
00007898 TOUPB1
000078B8 TOUPBRT
000078BA DOQUO
000078C2 DOQUO1
000078CA TOUPPER
000078DA TOUPRET
000078DC CHKIO
000078EC CHKRET
000078EE PRMESG
000078F8 PRMRET
000078FA CLS
00007906 OUTC
00007916 INC
00007922 INC1
00007936 AUXOUT
0000794A AUXIN
00007968 AXIRET
0000796A BYEBYE
00007978 INITMSG
0000799C OKMSG
000079A3 HOWMSG
000079AA WHTMSG
000079B2 TYPMSG
000079BA NOSTRING
000079CC SRYMSG
000079D2 CLMSG
000079D6 LSTROM
000079D8 RANPNT
000079DC INPPTR
000079E0 OUTPTR
000079E4 CURRNT
000079E8 STKFP
000079EC STKGOS
000079F0 STKINP
000079F4 LOPVAR
000079F8 LOPINC
00007A04 LOPLMT
00007A10 LOPLN
00007A14 LOPPT
00007A18 IRQROUT
00007A1C STRSTK
00007A20 StrSp
00007A24 StrArea
00007A28 LastStr
00007A2C TXTUNF
00007A30 VARBGN
00007A34 STKLMT
00007A38 DIRFLG
00007A3C BUFFER
00007A8C TXT
00007A8C set_text_mode
00007AB6 set_graphics_mode
00007AE0 get_screen_address
00007AF2 CRLF
00007B0C DisplayString
00007B10 dspj1
00007B1C dsret
00007B22 DisplayStringCRLF
00007B26 DisplayStringLimited
00007B46 DisplayStringLimitedCRLF
00007B4A TRAP15
00007B64 T15DispatchTable
00007CF4 SimHardware
00007D04 GetTick
00007D0C T15Wait100ths
00007D28 SetDrawMode
00007D4A SetPenColor
00007D56 T15Rectangle
00007D68 T15GetPixel
00007D88 T15GetWindowSize
00007D9E GRBufferToScreen
00007DA6 TestBitmap
00007E46 Diagonal1
00007E66 Diagonal2
00007E90 Vertical1
00007EAC Vertical2
00007ED4 MoveToXY
00007EE2 DrawToXY
00007F60 DrawHorizTo
00007F92 DrawVertTo
00007FC2 Cursor1
00007FFA StubRout
00007FFC select_iofocus
00008000 def_leaf
0000800E rotate_iofocus
00008020 select_focus1
0000803E init_plic
00008074 cmdString
000080C8 cmdTable
00008148 FromScreen
00008152 StartMon
0000815C cmdMonitor
0000815C Monitor
0000817C PromptLn
00008188 Prompt3
0000819E Prompt1
000081B8 cmdDispatch
000081FE cmdVideoMode
00008240 cmdBreakpoint
00008264 cmdAsteroids
0000826C cmdPlants
00008274 cmdSetTime
000082E2 cmdTime
000082F4 get_time
0000835A cmdTinyBasic
0000835E cmdTestCPU
0000836E cmdClearScreen
0000837A cmdCore
0000839E cmdFMTK
000083A8 cmdTestFP
00008434 cmdTestGF
00008462 cmdClock
00008480 cmdReset
000084B2 tblPow2
000084D2 cmdHelp
000084D2 DisplayHelp
000084DE cmdTestSD
00008550 HelpMsg
000086ED msgUnknownCmd
000086FD msgHello
0000870E GetCmdLine
000087B2 cmdSendSerial
000087E2 cmdReceiveSerial
00008816 cmdFillB
0000886A cmdFillW
000088BE cmdFillL
0000890C ignBlanks
0000891E PeekScreenChar
00008924 GetSzChar
0000894A EditMemHelper
0000896C cmdEditMemory
00008976 edtmem1
000089CA ExecuteCode
000089CA cmdJump
000089DA cmdGrDemo
00008A6E plot_rand_points
00008AEC clear_graphics_screen2
00008B34 wait1ms
00008B5C white_rect
00008B80 rand_points
00008BB6 rand_lines
00008C16 rand_rect
00008C76 rand_rect2
00008CC0 rand_triangle
00008D38 rand_curve
00008DB0 cmdDisassemble
00008E00 cmdDumpMemory
00008E24 DumpMem1
00008E36 DisplayMem
00008E62 dspmem1
00008ECC cmdDumpRegs
00008F4C msg_regs
00008F50 msg_reglist
00008F76 cmdTestSerialReceive
00008F9A GetHexNumber
00008FC8 GetDecNumber
00009000 _dfOne
0000900C _dfTen
00009018 _dfMil
00009024 _msgNan
00009028 _msgInf
0000902C _CheckNan
00009090 _CheckZero
000090AA _CheckNegative
000090BC _MakeBig
000090D8 _LessThanDbl
00009104 _ComputeDigitsBeforeDecpt
0000913E _LeadingZero
0000914E _SpitOutDigits
000091CA _TrimTrailingPoint
000091E8 _TrimDotZero
00009204 _TrimTrailingZeros
00009210 _SpitOutE
00009228 _ExtExpDigit
00009246 _ExtExpDigits
0000926E _PadLeft
000092BE _PadRight
000092F0 _FloatToString
00009332 _GetFloatGetChar
00009338 _GetFloatIgnBlanks
00009340 _GetFloatBackupChar
00009344 _GetFraction
000093A8 _GetExponent
00009432 _GetInteger
000094A8 _GetFloat
00009520 AsciiToHexNybble
00009532 gthx5
00009544 gthx6
00009556 gthx3
0000955A DisplayTwoSpaces
00009564 dspspc1
0000956C DisplaySpace
00009574 DisplayTetra
0000957A DisplayWyde
00009580 DisplayByte
00009586 DisplayNybble
000095A0 BufTetra
000095A6 BufWyde
000095AC BufByte
000095B2 BufNybble
000095CA DisplayAddr
000095EA cmdTestRAM
000095EA ramtest
00009604 rmtst5
00009634 ramtest0
0000963C ramtest1
0000964E rmtst1
0000965A ramtest6
0000966A ramtest2
00009682 rmtst2
0000968A rmtst3
000096B0 ramtest3
000096B2 cmdLoadS19
000096B8 NextRec
000096CA ProcessRec
00009762 pcssxa
000097CE ProcessS1
000097D2 ProcessS2
000097D6 ProcessS3
000097DA ProcessS7
000097EC ProcessS8
000097FE ProcessS9
00009810 S19Get16BitAddress
0000981E S19Get24BitAddress
0000982A S19Get32BitAddress
00009848 S1932a
0000985C S1932b
0000989E sGetChar
000098C6 AudioInputTest
000098C8 BouncingBalls
000098CA GraphicsDemo
000098CC ClearScreen
000098D4 rbo
000098DC init_spi
000098DC spi_setup
000098DC spi_init
00009940 spi_send_byte
00009970 spi_send_cmd
000099C4 spi_set_block_address
000099C4 spi_setpos
000099FC spi_read_block
00009A4E spi_write_block
00009AA2 spi_getbuf
00009AE2 spi_putbuf
00009B22 init_i2c
00009B22 i2c_setup
00009B30 i2c_wait_tip
00009B4E i2c_wr_cmd
00009B66 i2c_xmit1
00009B84 i2c_wait_rx_nack
00009BA2 rtc_read
00009C60 rtc_write
00009CEE msgRtcReadFail
00009D07 msgBusErr
00009D18 bus_err
00009D32 trap3
00009D70 ProcessBreakpoint
00009D76 DisarmAllBreakpoints
00009DA2 ArmAllBreakpoints
00009DD2 ArmBreakpoint
00009E50 DisarmBreakpoint
00009EA4 ListBreakpoints
00009EC4 ClearBreakpointList
00009ED6 SendMsg
00009F14 ReceiveMsg
00009F56 DispatchMsg
00009F58 prtflt
00009F9E T15FloatToString
00009FD2 io_trap
00009FF8 OutputChar
0000A000 DRAW
0000A012 InitIRQ
0000A02A InstallIRQ
0000A06E TickIRQ
0000A0B0 irq3_rout
0000A0B0 irq_rout
0000A0B0 irq6_rout
0000A0C4 irq_proc_generic
0000A0E2 SpuriousIRQ
0000A0E4 nmi_rout
0000A0F6 addr_err
0000A10C brdisp_trap
0000A144 illegal_trap
0000A15A io_irq
0000A16E msg_start
0000A195 msg_core_start
0000A1A6 msgAddrErr
0000A1B3 msg_illegal
0000A1C5 msg_bad_branch_disp
0000A1D7 msg_test_done
0000A1E7 msg_io_access
0000A202 msgChk
0000A210 msgStackCanary
0000A22A ShiftBuf
0000A244 HEX2DEC2
0000A292 HEX2DEC
0000A2A2 HX2DC
0000A2A6 HX2DC0
0000A2AE HX2DC1
0000A2C8 HX2DC2
0000A2CA HX2DC22
0000A2D4 HX2DC3
0000A2DC HX2DC4
0000A2E4 HX2DC5
0000A2EC HX2DC57
0000A2F0 HX2DC6
0000A2F6 PNT4HX
0000A2F6 PNT4HEX
0000A2FA PNT6HX
0000A306 PNT8HX
0000A30A FRELADDR
0000A318 FREL10
0000A32A FREL15
0000A344 FREL20
0000A356 FREL25
0000A360 FREL30
0000A368 X
0000A368 IMOVEMFR
0000A37C IM7788
0000A380 IM7799
0000A396 IMOVEMTR
0000A3B0 CS16
0000A3B2 ISTOP
0000A3C6 IMMED
0000A3EC IMMED45
0000A41E CS15
0000A420 IMMED55
0000A426 IMMED65
0000A436 IMMED75
0000A43A IMOVE
0000A43E ILINK
0000A454 FORM1
0000A458 FORM1A
0000A45C CS14
0000A45E FORM3
0000A462 FORM4
0000A474 FORM5
0000A478 FORM6A
0000A488 FORM6D
0000A498 FORMREGA
0000A49C FORMREG5
0000A4A8 FORMREGD
0000A4AE FORM7
0000A4BA FORM8
0000A4BE FORM815
0000A4C6 CS13
0000A4C8 FORM9
0000A4CE EEA10
0000A4D2 FORM10EX
0000A4F4 FORM10E3
0000A4FC FORM10E4
0000A508 FORM10E6
0000A510 FORM10
0000A516 FORM103
0000A51A FORM104
0000A52A FORM105
0000A540 CS12
0000A544 FORM11
0000A54C FORM11SL
0000A560 FORM112
0000A56E FORM114
0000A570 FORM12
0000A58A FORM125
0000A5AC FORM12A
0000A5D0 CS11
0000A5D4 IQUICK
0000A5D8 IMOVEQ
0000A5F0 SCHR
0000A5F8 IMVFSR
0000A606 IMVFUSP
0000A614 IMVTSR
0000A622 IMVT44
0000A626 IMVTUSP
0000A632 IMVTCCR
0000A642 IMOVEP
0000A652 IMOVEP11
0000A66A CS20
0000A66E IMOVEP35
0000A67C IMOVEP66
0000A698 SCOMMON
0000A69C ISCC
0000A6A6 IDBCC
0000A6B8 ICC
0000A6BC IBSR
0000A6CE ICC35
0000A6E4 ICC55
0000A6F4 ISETD
0000A6FA ISETD12
0000A702 CS18
0000A704 ISETS
0000A71E ISHIFT
0000A72A ISHIFT13
0000A74E ISHIFT23
0000A75A ISHIFT33
0000A75E ISHIFT44
0000A766 CS17
0000A768 ISHIFTM1
0000A782 ICCCC
0000A798 ICCCC9
0000A79A BRTBL
0000A7BA IMOVEA1
0000A7E0 IMOVE19
0000A7E6 IQUICKA
0000A7F8 IQUICK21
0000A80E IQUICK31
0000A812 CS19
0000A816 FORMSIZE
0000A82A FORM91
0000A83E FORM93
0000A840 FORM95
0000A842 EA000
0000A84E EA001
0000A85A EA010
0000A86E EA011
0000A884 EA011RTS
0000A886 EA100
0000A89C FE10
0000A8A0 EEA
0000A904 EA1105
0000A908 EA1107
0000A91E EA1109
0000A928 EA101
0000A93E EA111
0000A95C EA1112
0000A978 EA1113
0000A984 FE11
0000A988 EA1113A
0000A9AA EA1114
0000A9F2 EAF25
0000A9F6 EAF27
0000AA0A EAF35
0000AA14 EA1115
0000AA4C EA11153
0000AA56 EA11155
0000AA62 MOVEMS
0000AA72 MOVEMS2
0000AA76 MOVEMR
0000AA86 MOVEMR11
0000AA8E MOVEMR33
0000AAA0 MOVEMR44
0000AABA MOVEMR77
0000AACC MOVEMR79
0000AACE MOVEMR88
0000AAE6 MOVEMR94
0000AAF2 DCODE68K
0000AB06 DEC311
0000AB24 DEC404
0000AB34 DEC411
0000AB42 FE12
0000AB44 DEC425
0000AB50 DEC510
0000AB54 DEC515
0000AB5C DEC530
0000AB62 DEC535
0000AB6E DEC537
0000AB8A COMMON4
0000AB8C COMMON
0000AB9A COMMON35
0000ABB4 FERROR
0000ABBE FERROR35
0000ABCA FERROR39
0000ABD4 MSG111
0000ABDE KI
0000ABE0 KIEND
0000ABE0 TBL
0000AE98 OPCTBL
0000AE98 TBLE
0000AF98 asteroids_start
0000AFA0 main_loop
0000AFF6 skip_player_move
0000AFFA skip_player_cont
0000AFFE px_hide
0000B000 HALT
0000B006 no_play
0000B024 no_dec_new_rocks
0000B034 game_message
0000B048 do_start_mess
0000B06C start_game
0000B0A0 push_start_mess
0000B0B6 exit_push_start
0000B0B8 game_over
0000B0CC nodec_thmpi
0000B0F6 no_game_over
0000B134 exit_game_message
0000B136 end_game
0000B14A check_hits
0000B14C pss_check_loop
0000B152 next_pss
0000B158 check_pss
0000B166 check_next_object
0000B16A check_all
0000B184 delta_x_pos
0000B196 delta_y_pos
0000B1BE small_s_size
0000B1C0 add_p_size
0000B1C2 no_add_size
0000B1D0 col_table
0000B1D8 col_table_p
0000B1E0 col_table_s
0000B1E8 col_table_l
0000B1F0 handle_collision
0000B200 not_saucer
0000B20E not_player
0000B226 not_pss_player
0000B232 what_hit_rock
0000B236 explode_object
0000B252 player_shot
0000B25E what_hit_saucer
0000B276 keep_small
0000B27C do_saucer
0000B2A8 attract_saucer
0000B2B2 rock_hit_out
0000B2D0 dec_isaucer_time
0000B2E0 no_save_ist
0000B2F2 saucer_yok
0000B306 start_left
0000B32E small_saucer
0000B330 save_saucer
0000B334 exit_do_saucer
0000B336 existing_saucer
0000B34E keep_saucer_dir
0000B35A attract_fire
0000B360 exit_existing_saucer
0000B362 saucer_yvel
0000B366 fire_saucer
0000B37E aim_shot
0000B3C6 wide_shot
0000B3D0 no_shot_or
0000B3D4 no_aim_shot
0000B3E6 shot_mask
0000B3E8 shot_or
0000B3EA ship_fire
0000B408 test_fire_loop
0000B414 save_ship_fire
0000B418 exit_ship_fire
0000B41A fire_shot
0000B46C calc_fire_byte
0000B480 test_neg_fire
0000B488 fire_ok
0000B492 enter_hiscores
0000B4C0 no_playerx
0000B52C next_p_high
0000B548 close_all
0000B560 next_hi_char
0000B578 save_hbutton
0000B58E not_timed_out
0000B5AA not_rot_left
0000B5B2 rot_not_left
0000B5B2 was_rot_left
0000B5B2 not_rot_right2
0000B5D2 wrap_to_a
0000B5D6 wrap_to_z
0000B5D8 check_alpha
0000B5E0 save_char
0000B5E4 exit_not_done
0000B5E6 exit_enter_hiscores
0000B5E8 hyperspace
0000B624 hype_xok1
0000B62E hype_xok2
0000B64C hype_yok1
0000B656 hype_yok2
0000B672 save_hyperspace
0000B676 exit_hyperspace
0000B678 reset_game
0000B686 three_ship_start
0000B694 clear_items_loop
0000B6A2 write_initial
0000B6BC add_character
0000B6CC add_ships
0000B6D6 show_ships
0000B6E8 add_ships_loop
0000B6F4 exit_add_ships
0000B6F6 move_items
0000B6FA move_next_item
0000B716 skip_play_inc
0000B730 no_new_rocks
0000B738 go_reset_play
0000B73E go_reset_sauc
0000B746 item_exploding
0000B75E no_reset_scale
0000B760 move_item
0000B772 x_pos_neg
0000B782 not_x_max
0000B798 y_not_neg
0000B7A2 not_y_max
0000B7C6 keep_scale
0000B7CC move_next_object
0000B7D4 clear_saucer
0000B7E8 ship_move
0000B816 reveal_player
0000B81E kill_the_player
0000B834 clear_hyper
0000B838 exit_ship_move
0000B83A rot_and_thrust
0000B846 not_rot_left1
0000B84E not_rot_right1
0000B8AC not_thrust
0000B8E2 check_velocity
0000B8F0 check_neg_velocity
0000B8FA exit_check_velocity
0000B8FC check_clear
0000B900 check_clear_loop
0000B91A check_clear_y
0000B92E not_closer
0000B938 is_closer
0000B93E make_rocks
0000B968 no_inc_min
0000B978 no_set_max
0000B984 gen_rock_loop
0000B9B6 rock_y_ok
0000B9B8 rock_on_x
0000B9DA clear_rocks
0000B9DC clear_rocks_loop
0000B9E4 exit_make_rocks
0000B9E6 player_init
0000BA1C player_reset
0000BA32 copy_rock
0000BA36 copy_rock_2
0000BA5C copy_velocity
0000BA6C x_off_pos
0000BA86 y_off_pos
0000BA92 limit_velocity
0000BA9C neg_upper_ok
0000BAA6 limit_p_vel
0000BAAE pos_lower_ok
0000BAB6 exit_limit_velocity
0000BAB8 static_messages
0000BAFC skip_play_flash
0000BB10 do_p1_ships
0000BB84 do_p2_score
0000BB98 skip_p2_score
0000BBA6 exit_static
0000BBA8 add_to_list
0000BBDC add_item
0000BBF6 add_explode
0000BBFC add_saucer
0000BC02 add_fire
0000BC12 no_shot_dec
0000BC14 add_score
0000BC42 exit_add_score
0000BC48 high_scores
0000BC7A high_scores_loop
0000BCE8 exit_high_scores
0000BCEE exit_no_scores
0000BCF4 find_rock
0000BCF6 find_next_rock
0000BD00 exit_find_rock
0000BD02 ship_wrk_x
0000BD0E ship_wrk_y
0000BD1A add_play_explode
0000BD2C reset_xy_loop
0000BD44 no_reset_xy
0000BD4E piece_draw_loop
0000BD74 vec_x_pos
0000BD80 vec_y_pos
0000BDB4 ship_parts
0000BDC0 add_player
0000BDD6 no_pos_reflect
0000BDDC third_quad
0000BDEA first_quad
0000BE10 no_thrust
0000BE12 copy_short
0000BE16 copy_vectors
0000BE30 exit_copy_vectors
0000BE32 fx_sounds
0000BE40 no_saucer_sound
0000BE72 no_thump_sound
0000BE74 hit_a_rock
0000BE8E clear_rock
0000BEA2 add_to_score
0000BEAA skip_add
0000BEE4 exit_hit_a_rock
0000BEE6 rock_score
0000BEEA check_hiscores
0000BF06 check_hi_player
0000BF0E check_hi_loop
0000BF1C check_hi_next
0000BF3C save_hi_index
0000BF40 exit_hi_chk
0000BF4A exit_check_hiscores
0000BF4C insert_hiscore
0000BF50 insert_loop
0000BF72 exit_insert_loop
0000BF90 get_atn
0000BF9C atn_semi
0000BFAC atn_quad
0000BFBC atn_eight
0000BFC0 loop_atn
0000BFCA skip_sub
0000BFDA atn_tab
0000C000 JSRL
0000C01A output_number
0000C01C output_number_loop
0000C02C zero_suppress
0000C038 cos_d0
0000C03C sin_d0
0000C04A cossin_d0
0000C050 a_was_less
0000C056 sin_cos
0000C0D8 add_message
0000C120 add_char_loop
0000C136 add_the_char
0000C13E exit_add_message
0000C140 timer_interrupt
0000C146 player_x
0000C14A player_n
0000C152 add_sup_hex_chr
0000C15E add_hex_chr
0000C168 add_sup_zero
0000C178 add_address
0000C18E add_coords
0000C1A8 add_single
0000C1AA add_pair
0000C1B0 notscreen
0000C1B0 setscreen
0000C1B0 s_controls
0000C1BC Initialise
0000C1E4 clear_loop
0000C230 read_hi
0000C23A close_all_2
0000C240 gen_prng
0000C250 Ninc1
0000C250 op_rtsvec
0000C250 Ninc0
0000C252 do_vector
0000C260 op_call
0000C266 op_jump
0000C276 op_vctr
0000C284 no_neg_y11
0000C290 no_neg_x11
0000C2A0 op_abs
0000C2AE no_neg_y10
0000C2BA no_neg_x10
0000C2CC not_right
0000C2D4 vector_base
0000C310 op_short
0000C334 no_neg_y2
0000C33C no_neg_x2
0000C340 end_vector
0000C34A shift_left
0000C34E last_vector
0000C370 vector_move
0000C39C vector
0000D000 RTSL
0000D39C copy_msg
0000D3DC expl_tab
0000D3E4 expl_3
0000D410 expl_2
0000D44E expl_1
0000D484 expl_0
0000D4C2 rock_tab
0000D4CA rock_0
0000D4E2 rock_1
0000D4FE rock_2
0000D518 rock_3
0000D534 sauc_jsr
0000D536 sauc_vec
0000D552 play_tab
0000D574 play_00
0000D58C play_01
0000D5B0 play_02
0000D5D4 play_03
0000D5F8 play_04
0000D61A play_05
0000D63E play_06
0000D662 play_07
0000D686 play_08
0000D6AA play_09
0000D6CE play_0A
0000D6F2 play_0B
0000D716 play_0C
0000D73A play_0D
0000D75E play_0E
0000D782 play_0F
0000D7A6 play_10
0000D7BE play_liv
0000D7D4 char_a
0000D7E4 char_b
0000D7FE char_c
0000D80A char_d
0000D81A char_e
0000D82A char_f
0000D838 char_g
0000D84A char_h
0000D858 char_i
0000D866 char_j
0000D872 char_k
0000D87E char_l
0000D888 char_m
0000D894 char_n
0000D89E char_o0
0000D8AA char_p
0000D8B8 char_q
0000D8CA char_r
0000D8DA char_s
0000D8E8 char_t
0000D8F4 char_u
0000D900 char_v
0000D90A char_w
0000D918 char_x
0000D922 char_y
0000D930 char_z
0000D93C char_spc
0000D940 char_1
0000D948 char_2
0000D958 char_3
0000D966 char_4
0000D974 char_5
0000D982 char_6
0000D990 char_7
0000D99A char_8
0000D9AA char_9
0000D9B8 char_set
0000DA02 shot_jsr
0000DA04 shot_vec
0000DA16 mess_origin
0000DA36 mess_table
0000DA3E e_messages
0000DA4E e_mess_0
0000DA5A e_mess_1
0000DA62 e_mess_2
0000DA84 e_mess_3
0000DA9F e_mess_4
0000DABC e_mess_5
0000DAE3 e_mess_6
0000DAEE e_mess_7
0000DAF8 d_messages
0000DB08 d_mess_0
0000DB18 d_mess_1
0000DB21 d_mess_2
0000DB48 d_mess_3
0000DB6B d_mess_4
0000DB8E d_mess_5
0000DBB4 d_mess_6
0000DBCA d_mess_7
0000DBD4 f_messages
0000DBE4 f_mess_0
0000DBF3 f_mess_1
0000DBFA f_mess_2
0000DC1E f_mess_3
0000DC37 f_mess_4
0000DC59 f_mess_5
0000DC82 f_mess_6
0000DC94 f_mess_7
0000DCA2 s_messages
0000DCB2 s_mess_0
0000DCBA s_mess_1
0000DCC3 s_mess_2
0000DCEA s_mess_3
0000DD08 s_mess_4
0000DD30 s_mess_5
0000DD42 s_mess_6
0000DD4F s_mess_7
0000DD5F sound_init
0000DDC0 load_sound
0000DDC6 load_old_sound
0000DDCC play_sample
0000DDE8 old_sound_play
0000DDEA exit_play_sample
0000DDEC sound_key
0000DE04 beat1_sound
0000DE16 beat2_sound
0000DE28 lexpl_sound
0000DE3D mexpl_sound
0000DE52 sexpl_sound
0000DE67 extra_sound
0000DE7D lgsau_sound
0000DE92 smsau_sound
0000DEA7 thrst_sound
0000DEBA pfire_sound
0000DECC sfire_sound
0000DEDE filename
0000DEEB variables
0000E000 JMPL
0000F000 SHRT
0001001C _Keybd_tick
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040094 _fpTextIncr
00040098 _canary
0004009C tickcnt
000400A0 IRQFlag
000400A4 InputDevice
000400A8 OutputDevice
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
000402C0 fpBuf
00040508 _width
0004050C _E
00040510 _digits_before_decpt
00040514 _precision
00040520 _fpBuf
00040600 _fpWork
00040800 _dasmbuf
00040880 OFFSET
00040890 pen_color
00040894 gr_x
00040898 gr_y
0004089C gr_width
000408A0 gr_height
000408AC gr_double_buffer
000408B8 sys_switches
000408C0 gfxaccel_ctrl
000408D0 m_z
000408D4 m_w
000408D8 next_m_z
000408DC next_m_w
000408E0 TimeBuf
00040A00 null_dcb
00040A84 keybd_dcb
00040B08 textvid_dcb
00040B8C err_dcb
00040C94 serial_dcb
00040D18 framebuf_dcb
00040D9C gfxaccel_dcb
00041BFC TimerStack
00042000 spi_buff
00100000 IOFocus
00100004 memend
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100018 KeybdID
00100020 _KeybdBuf
00100080 _KeybdOBuf
00100150 S19Checksum
00100160 SerTailRcv
00100162 SerHeadRcv
00100164 SerRcvXon
00100165 SerRcvXoff
00100166 SerTailXmit
00100168 SerHeadXmit
0010016A SerXmitXoff
00100200 RTCBuf
00100224 RunningTCB
0010030C FreeTCB
0010031C QueueCycle
00100320 readyQ
00101000 SerRcvBuf
00102000 SerXmitBuf
008080FF def_plant
00FFFFFF def_animal
20010000 tcbs
56791123 DEV_HMASH
