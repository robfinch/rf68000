Sections:
00: "DATA" (0-41F)
01: "CODE" (0-4D60)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+
                            	     7: ;          | startup sp,pc  | 8 B
                            	     8: ; 00000008 +----------------+
                            	     9: ;					 |    vectors     |
                            	    10: ; 00000400 +----------------+
                            	    11: ;					 |   bios mem     |
                            	    12: ; 00000800 +----------------+
                            	    13: ;					 |   bios code    |
                            	    14: ; 00008000 +----------------+
                            	    15: ;					 |    unused      |
                            	    16: ; 20000000 +----------------+
                            	    17: ;          |                |
                            	    18: ;          |                |
                            	    19: ;          |                |
                            	    20: ;          :  dram memory   : 512 MB
                            	    21: ;          |                |
                            	    22: ;          |                |
                            	    23: ;          |                |
                            	    24: ; 40000000 +----------------+
                            	    25: ;          |                |
                            	    26: ;          :     unused     :
                            	    27: ;          |                |
                            	    28: ; FFD00000 +----------------+
                            	    29: ;          |                |
                            	    30: ;          :    I/O area    : 1.0 M
                            	    31: ;          |                |
                            	    32: ; FFE00000 +----------------+
                            	    33: ;          |                |
                            	    34: ;          :     unused     :
                            	    35: ;          |                |
                            	    36: ; FFFFFFE0 +----------------+
                            	    37: ;          | special regs   |
                            	    38: ; FFFFFFFF +----------------+
                            	    39: ;
                            	    40: ;-------------------------------------------------------------------------------
                            	    41: ;
                            	    42: CTRLC	EQU		$03
                            	    43: CTRLH	EQU		$08
                            	    44: CTRLX	EQU		$18
                            	    45: LF		EQU		$0A
                            	    46: CR		EQU		$0D
                            	    47: 
                            	    48: SC_F12  EQU    $07
                            	    49: SC_C    EQU    $21
                            	    50: SC_T    EQU    $2C
                            	    51: SC_Z    EQU    $1A
                            	    52: SC_KEYUP	EQU		$F0
                            	    53: SC_EXTEND   EQU		$E0
                            	    54: SC_CTRL		EQU		$14
                            	    55: SC_RSHIFT	EQU		$59
                            	    56: SC_NUMLOCK	EQU		$77
                            	    57: SC_SCROLLLOCK	EQU	$7E
                            	    58: SC_CAPSLOCK		EQU	$58
                            	    59: SC_ALT		EQU		$11
                            	    60: SC_LSHIFT	EQU		$12
                            	    61: SC_DEL		EQU		$71		; extend
                            	    62: SC_LCTRL	EQU		$58
                            	    63: SC_TAB      EQU		$0D
                            	    64: 
                            	    65: TEXTREG		EQU	$FD03FF00
                            	    66: txtscreen	EQU	$FD000000
                            	    67: semamem		EQU	$FD050000
                            	    68: ACIA			EQU	$FD060000
                            	    69: ACIA_RX		EQU	0
                            	    70: ACIA_STAT	EQU	4
                            	    71: leds			EQU	$FD0FFF00
                            	    72: keybd			EQU	$FD0FFE00
                            	    73: KEYBD			EQU	$FD0FFE00
                            	    74: rand			EQU	$FD0FFD00
                            	    75: IOFocus		EQU	$00100000
                            	    76: Keybuf		EQU	$00100004
                            	    77: 
                            	    78: 	data
00:00000000 0001FFFC        	    79: 	dc.l		$0001FFFC
00:00000004 00000000        	    80: 	dc.l		start
00:00000008 00000000        	    81: 	dc.l		0
00:0000000C 00000000        	    82: 	dc.l		0
00:00000010 00004CFE        	    83: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    84: 	dc.l		0
00:00000018 00000240        	    85: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000250        	    86: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	    87: 	dc.l		0
00:00000024 00000000        	    88: 	dc.l		0
                            	    89: 	
                            	    90: 	; 10
00:00000028 00000000        	    91: 	dc.l		0
00:0000002C 00000000        	    92: 	dc.l		0
00:00000030 00000000        	    93: 	dc.l		0
00:00000034 00000000        	    94: 	dc.l		0
00:00000038 00000000        	    95: 	dc.l		0
00:0000003C 00000000        	    96: 	dc.l		0
00:00000040 00000000        	    97: 	dc.l		0
00:00000044 00000000        	    98: 	dc.l		0
00:00000048 00000000        	    99: 	dc.l		0
00:0000004C 00000000        	   100: 	dc.l		0
                            	   101: 	
                            	   102: 	; 20
00:00000050 00000000        	   103: 	dc.l		0
00:00000054 00000000        	   104: 	dc.l		0
00:00000058 00000000        	   105: 	dc.l		0
00:0000005C 00000000        	   106: 	dc.l		0
00:00000060 00000000        	   107: 	dc.l		0
00:00000064 00000000        	   108: 	dc.l		0
00:00000068 00000000        	   109: 	dc.l		0
00:0000006C 00000000        	   110: 	dc.l		0
00:00000070 00000000        	   111: 	dc.l		0
00:00000074 00000000        	   112: 	dc.l		0
                            	   113: 	
                            	   114: 	; 30
00:00000078 00004CD4        	   115: 	dc.l		irq_rout					* IRQ 30 - timer
00:0000007C 00000000        	   116: 	dc.l		0
00:00000080 00000000        	   117: 	dc.l		0
00:00000084 00000000        	   118: 	dc.l		0
00:00000088 00000000        	   119: 	dc.l		0
00:0000008C 00000000        	   120: 	dc.l		0
00:00000090 00000000        	   121: 	dc.l		0
00:00000094 00000000        	   122: 	dc.l		0
00:00000098 00000000        	   123: 	dc.l		0
00:0000009C 00000000        	   124: 	dc.l		0
                            	   125: 
                            	   126: 	; 40
00:000000A0 00000000        	   127: 	dc.l		0
00:000000A4 00000000        	   128: 	dc.l		0
00:000000A8 00000000        	   129: 	dc.l		0
00:000000AC 00000000        	   130: 	dc.l		0
00:000000B0 00000000        	   131: 	dc.l		0
00:000000B4 00000000        	   132: 	dc.l		0
00:000000B8 00000000        	   133: 	dc.l		0
00:000000BC 00003FF4        	   134: 	dc.l		TRAP15
00:000000C0 00000000        	   135: 	dc.l		0
00:000000C4 00000000        	   136: 	dc.l		0
                            	   137: 
                            	   138: 	; 50	
00:000000C8 00000000        	   139: 	dc.l		0
00:000000CC 00000000        	   140: 	dc.l		0
00:000000D0 00000000        	   141: 	dc.l		0
00:000000D4 00000000        	   142: 	dc.l		0
00:000000D8 00000000        	   143: 	dc.l		0
00:000000DC 00000000        	   144: 	dc.l		0
00:000000E0 00000000        	   145: 	dc.l		0
00:000000E4 00000000        	   146: 	dc.l		0
00:000000E8 00000000        	   147: 	dc.l		0
00:000000EC 00000000        	   148: 	dc.l		0
                            	   149: 
                            	   150: 	; 60
00:000000F0 00000000        	   151: 	dc.l		0
00:000000F4 00000000        	   152: 	dc.l		0
00:000000F8 00000000        	   153: 	dc.l		0
00:000000FC 00000000        	   154: 	dc.l		0
00:00000100 00004CE4        	   155: 	dc.l		brdisp_trap
00:00000104 00000000        	   156: 	dc.l		0
00:00000108 00000000        	   157: 	dc.l		0
00:0000010C 00000000        	   158: 	dc.l		0
00:00000110 00000000        	   159: 	dc.l		0
00:00000114 00000000        	   160: 	dc.l		0
                            	   161: 
                            	   162: 
                            	   163: 	align		10
                            	   164: ;fgcolor:
                            	   165: ;	ds.l		1
                            	   166: ;bkcolor:
                            	   167: ;	ds.l		1
                            	   168: ;CursorRow
                            	   169: ;	ds.b		1
                            	   170: ;CursorCol
                            	   171: ;	ds.b		1
                            	   172: ;TextRows
                            	   173: ;	ds.b		1
                            	   174: ;TextCols
                            	   175: ;	ds.b		1
                            	   176: ;TextPos
                            	   177: ;TextCurpos
                            	   178: ;	ds.w		1
                            	   179: ;	ds.w		1
                            	   180: ;TextScr
                            	   181: ;	ds.l		1
                            	   182: ;S19StartAddress
                            	   183: ;	ds.l		1
                            	   184: ;KeybdEcho
                            	   185: ;	ds.b		1
                            	   186: ;KeybdWaitFlag
                            	   187: ;	ds.b		1
                            	   188: ;KeybdLEDs
                            	   189: ;	ds.b		1
                            	   190: ;_KeyState1
                            	   191: ;	ds.b		1
                            	   192: ;_KeyState2
                            	   193: ;	ds.b		1
                            	   194: ;CmdBuf:
                            	   195: ;	ds.b		1
                            	   196: ;CmdBufEnd:
                            	   197: ;	ds.b		1
                            	   198: 
                            	   199: 
                            	   200: ;-------------------------------------------------------------------------------
                            	   201: ;-------------------------------------------------------------------------------
                            	   202: 
                            	   203: const_tbl:
                            	   204: fgcolor:
00:00000400 001FFFFF        	   205: 	dc.l		$1fffff					; white
                            	   206: bkcolor:
00:00000404 0000003F        	   207: 	dc.l		$00003f					; dark blue
                            	   208: CursorRow
00:00000408 00              	   209: 	dc.b		$00
                            	   210: CursorCol
00:00000409 00              	   211: 	dc.b		$00
                            	   212: TextRows
00:0000040A 20              	   213: 	dc.b		32
                            	   214: TextCols
00:0000040B 40              	   215: 	dc.b		64
                            	   216: TextPos
                            	   217: TextCurpos
00:0000040C 0000            	   218: 	dc.w		$00
00:0000040E 0000            	   219: 	dc.w		0
                            	   220: TextScr
00:00000410 FD000000        	   221: 	dc.l		$FD000000
                            	   222: S19StartAddress
00:00000414 10000000        	   223: 	dc.l		$10000000
                            	   224: KeybdEcho
00:00000418 00              	   225: 	dc.b		0
                            	   226: KeybdWaitFlag
00:00000419 00              	   227: 	dc.b		0
                            	   228: KeybdLEDs
00:0000041A 00              	   229: 	dc.b		0
                            	   230: _KeyState1
00:0000041B 00              	   231: 	dc.b		0
                            	   232: _KeyState2
00:0000041C 00              	   233: 	dc.b		0
                            	   234: CmdBuf:
00:0000041D 00              	   235: 	dc.b		0
                            	   236: CmdBufEnd:
00:0000041E 00              	   237: 	dc.b		0
                            	   238: 
                            	   239: 	code
                            	   240: 	align		2
                            	   241: start:
01:00000000 46FC2700        	   242: 	move.w	#$2700,sr				* enable level 6 and higher interrupts
01:00000004 4E7A0FE0        	   243: 	movec.l	coreno,d0				* get core number
01:00000008 0C000002        	   244: 	cmpi.b	#2,d0
01:0000000C 664A            	   245: 	bne			start_other
01:0000000E 23FC000000040010	   246: 	move.l	#$4,IOFocus			* Set the IO focus map in global memory
01:00000016 0000
                            	   247: ;	bsr			InitSemaphores
01:00000018 6100011A        	   248: 	bsr			Delay3s					* give devices time to reset
01:0000001C 61003CCC        	   249: 	bsr			clear_screen
                            	   250: 
                            	   251: 	; Write startup message to screen
                            	   252: 
01:00000020 43FA4CF2        	   253: 	lea			msg_start,a1
01:00000024 61003F88        	   254: 	bsr			DisplayString
01:00000028 7201            	   255: 	moveq.l	#1,d1
01:0000002A 610000E8        	   256: 	bsr			UnlockSemaphore	; allow another cpu access
01:0000002E 7200            	   257: 	moveq.l	#0,d1
01:00000030 610000E2        	   258: 	bsr			UnlockSemaphore	; allow other cpus to proceed
01:00000034 33FCA4A4FD0FFF00	   259: 	move.w	#$A4A4,leds			; diagnostics
01:0000003C 600046E0        	   260: 	bra			Monitor
01:00000040 61000116        	   261: 	bsr			cpu_test
                            	   262: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   263: ;	move.l	a0,64*4
                            	   264: 
                            	   265: loop2:
01:00000044 70FF            	   266: 	move.l	#-1,d0
                            	   267: loop1:
01:00000046 2200            	   268: 	move.l	d0,d1
01:00000048 E089            	   269: 	lsr.l		#8,d1
01:0000004A E089            	   270: 	lsr.l		#8,d1
01:0000004C 13C1FD0FFF00    	   271: 	move.b	d1,leds
01:00000052 51C8FFF2        	   272: 	dbra		d0,loop1
01:00000056 60EC            	   273: 	bra			loop2
                            	   274: start_other:
01:00000058 203900000410    	   275: 	move.l	TextScr,d0
01:0000005E 4E7A1FE0        	   276: 	movec.l	coreno,d1					; get the core number
01:00000062 08010000        	   277: 	btst		#0,d1							; calc new screen address for even cores only
01:00000066 660E            	   278: 	bne.s		.0001
01:00000068 5581            	   279: 	subi.l	#2,d1							; core numbers start at 2
01:0000006A E181            	   280: 	asl.l		#8,d1							; * 16384 bytes per screen
01:0000006C ED81            	   281: 	asl.l		#6,d1
01:0000006E D081            	   282: 	add.l		d1,d0							; adjust index to screen
01:00000070 23C000000410    	   283: 	move.l	d0,TextScr				; set new text screen location
                            	   284: .0001:
                            	   285: 	* Delay a bit before trying to access the screen. Need some time for the
                            	   286: 	* screen locations of other cores to update.
01:00000076 223C000493E0    	   287: 	move.l	#300000,d1
                            	   288: .0002:
01:0000007C 4E71            	   289: 	nop
01:0000007E 51C9FFFC        	   290: 	dbra		d1,.0002
01:00000082 61003C66        	   291: 	bsr			clear_screen
01:00000086 4E7A1FE0        	   292: 	movec		coreno,d1
01:0000008A 61004A82        	   293: 	bsr			DisplayByte
01:0000008E 43FA4C9C        	   294: 	lea			msg_core_start,a1
01:00000092 61003F1A        	   295: 	bsr			DisplayString
                            	   296: do_nothing:	
01:00000096 4E71            	   297: 	nop
01:00000098 60FC            	   298: 	bra			do_nothing
                            	   299: 
                            	   300: ;------------------------------------------------------------------------------
                            	   301: ; Initialize semaphores
                            	   302: ; - all semaphores are set to one except the first one, which is set to zero.
                            	   303: ;
                            	   304: ; Parameters:
                            	   305: ;		<none>
                            	   306: ; Modifies:
                            	   307: ;		<none>
                            	   308: ; Returns:
                            	   309: ;		<none>
                            	   310: ;------------------------------------------------------------------------------
                            	   311: 
                            	   312: InitSemaphores:
01:0000009A 48E7C080        	   313: 	movem.l	d0/d1/a0,-(a7)
01:0000009E 41F9FD050000    	   314: 	lea			semamem,a0
01:000000A4 42284000        	   315: 	move.b	#0,$4000(a0)		; lock the first semaphore
01:000000A8 323C00FE        	   316: 	move.w	#254,d1
01:000000AC 7001            	   317: 	moveq		#1,d0
                            	   318: .0001:
01:000000AE 41E80010        	   319: 	lea			16(a0),a0
01:000000B2 11404000        	   320: 	move.b	d0,$4000(a0)
01:000000B6 51C9FFF6        	   321: 	dbra		d1,.0001
01:000000BA 4CDF0103        	   322: 	movem.l	(a7)+,d0/d1/a0
01:000000BE 4E75            	   323: 	rts
                            	   324: 
                            	   325: ; -----------------------------------------------------------------------------
                            	   326: ; Test a semaphore to see if it is non-zero.
                            	   327: ;
                            	   328: ; Parameters:
                            	   329: ;		d1 semaphore number
                            	   330: ; -----------------------------------------------------------------------------
                            	   331: 
                            	   332: TestSemaphore:
01:000000C0 48E74080        	   333: 	movem.l	d1/a0,-(a7)			; save registers
01:000000C4 41F9FD050000    	   334: 	lea			semamem,a0			; point to semaphore memory
01:000000CA 4881            	   335: 	ext.w		d1							; make d1 word value
01:000000CC E941            	   336: 	asl.w		#4,d1						; align to memory
01:000000CE 06414000        	   337: 	addi.w	#$4000,d1				; point to read / write memory
01:000000D2 4A301000        	   338: 	tst.b		(a0,d1.w)				; read (test) value for zero
01:000000D6 4CDF0102        	   339: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000DA 4E75            	   340: 	rts
                            	   341: 
                            	   342: ; -----------------------------------------------------------------------------
                            	   343: ; Parameters:
                            	   344: ;		d1 semaphore number
                            	   345: ;
                            	   346: ; Side Effects:
                            	   347: ;		increments semaphore, saturates at 255
                            	   348: ;
                            	   349: ; Returns:	
                            	   350: ; 	z flag set if semaphore was zero
                            	   351: ; -----------------------------------------------------------------------------
                            	   352: 
                            	   353: IncrementSemaphore:
01:000000DC 48E74080        	   354: 	movem.l	d1/a0,-(a7)			; save registers
01:000000E0 41F9FD050000    	   355: 	lea			semamem,a0			; point to semaphore memory
01:000000E6 4881            	   356: 	ext.w		d1							; make d1 word value
01:000000E8 E941            	   357: 	asl.w		#4,d1						; align to memory
01:000000EA 4A301001        	   358: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:000000EE 4CDF0102        	   359: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000F2 4E75            	   360: 	rts
                            	   361: 	
                            	   362: ; -----------------------------------------------------------------------------
                            	   363: ; Parameters:
                            	   364: ;		d1 semaphore number
                            	   365: ;
                            	   366: ; Side Effects:
                            	   367: ;		decrements semaphore, saturates at zero
                            	   368: ;
                            	   369: ; Returns:	
                            	   370: ; 	z flag set if semaphore was zero
                            	   371: ; -----------------------------------------------------------------------------
                            	   372: 
                            	   373: DecrementSemaphore:
01:000000F4 48E74080        	   374: 	movem.l	d1/a0,-(a7)			; save registers
01:000000F8 41F9FD050000    	   375: 	lea			semamem,a0			; point to semaphore memory
01:000000FE 024100FF        	   376: 	andi.w	#255,d1					; make d1 word value
01:00000102 E941            	   377: 	asl.w		#4,d1						; align to memory
01:00000104 4A301001        	   378: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:00000108 4CDF0102        	   379: 	movem.l	(a7)+,a0/d1			; restore regs
01:0000010C 4E75            	   380: 	rts
                            	   381: 
                            	   382: ; -----------------------------------------------------------------------------
                            	   383: ; Parameters:
                            	   384: ;		d1 semaphore number
                            	   385: ; -----------------------------------------------------------------------------
                            	   386: 
                            	   387: LockSemaphore:
                            	   388: .0001:
01:0000010E 61E4            	   389: 	bsr			DecrementSemaphore
01:00000110 67FC            	   390: 	beq.s		.0001
01:00000112 4E75            	   391: 	rts
                            	   392: 	
                            	   393: ; -----------------------------------------------------------------------------
                            	   394: ; Test a semaphore to see if it is non-zero.
                            	   395: ;
                            	   396: ; Parameters:
                            	   397: ;		d1 semaphore number
                            	   398: ; -----------------------------------------------------------------------------
                            	   399: 
                            	   400: UnlockSemaphore:
01:00000114 48E74080        	   401: 	movem.l	d1/a0,-(a7)			; save registers
01:00000118 41F9FD050000    	   402: 	lea			semamem,a0			; point to semaphore memory
01:0000011E 024100FF        	   403: 	andi.w	#255,d1					; make d1 word value
01:00000122 E941            	   404: 	asl.w		#4,d1						; align to memory
01:00000124 06414000        	   405: 	addi.w	#$4000,d1				; point to read / write memory
01:00000128 11BC00011000    	   406: 	move.b	#1,(a0,d1.w)		; write one to unlock
01:0000012E 4CDF0102        	   407: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000132 4E75            	   408: 	rts
                            	   409: 
                            	   410: ; -----------------------------------------------------------------------------
                            	   411: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   412: ; -----------------------------------------------------------------------------
                            	   413: 
                            	   414: Delay3s:
01:00000134 203C002DC6C0    	   415: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:0000013A 41F9FD0FFF00    	   416: 	lea			leds,a0				; a0 = address of LED output register
01:00000140 6002            	   417: 	bra			dly3s1				; branch to the loop
                            	   418: dly3s2:	
01:00000142 4840            	   419: 	swap		d0						; loop is larger than 16-bits
                            	   420: dly3s1:
01:00000144 2200            	   421: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:00000146 E199            	   422: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:00000148 E199            	   423: 	rol.l		#8,d1
01:0000014A 1081            	   424: 	move.b	d1,(a0)				; set the LEDs
01:0000014C 51C8FFF6        	   425: 	dbra		d0,dly3s1			; decrement and branch back
01:00000150 4840            	   426: 	swap		d0
01:00000152 51C8FFEE        	   427: 	dbra		d0,dly3s2
01:00000156 4E75            	   428: 	rts
                            	   429: 
                            	   430: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
01:00000158 610000FE        	    84: 	bsr	op_ORI_TO_CCR
01:0000015C 6100011C        	    85: 	bsr	op_ORI_TO_SR
01:00000160 6100013E        	    86: 	bsr	op_EORI_TO_CCR
01:00000164 61000160        	    87: 	bsr	op_EORI_TO_SR
01:00000168 61000186        	    88: 	bsr	op_ANDI_TO_CCR
01:0000016C 610001A8        	    89: 	bsr	op_ANDI_TO_SR
01:00000170 610001CE        	    90: 	bsr	op_BTST
01:00000174 61000574        	    91: 	bsr	op_BCHG
01:00000178 610008D8        	    92: 	bsr	op_BCLR
01:0000017C 61000C22        	    93: 	bsr	op_BSET
01:00000180 61000F66        	    94: 	bsr op_MOVEP
01:00000184 61000FEE        	    95: 	bsr op_BOOL_I
01:00000188 610011D2        	    96: 	bsr op_CMP_I
01:0000018C 610013B6        	    97: 	bsr op_ADD_I
01:00000190 61001538        	    98: 	bsr op_SUB_I
01:00000194 610016BA        	    99: 	bsr op_MOVE
01:00000198 610018C2        	   100: 	bsr op_MOVE_xxx_FLAGS
01:0000019C 61001AB2        	   101: 	bsr op_EXT
01:000001A0 61001ADA        	   102: 	bsr op_SWAP
01:000001A4 61001AEC        	   103: 	bsr op_LEAPEA
01:000001A8 61001B94        	   104: 	bsr op_TAS
01:000001AC 61001BB6        	   105: 	bsr op_TST
01:000001B0 61001BF0        	   106: 	bsr op_LINKS
01:000001B4 61001C0A        	   107: 	bsr op_MOVE_USP
                            	   108: *	bsr op_CHK
01:000001B8 61001C50        	   109: 	bsr op_NEGS
01:000001BC 61001FDA        	   110: 	bsr op_MOVEM
                            	   111: ** fails
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
                            	   115: *	bsr op_TRAPV
01:000001C0 61002592        	   116: 	bsr op_RTR
01:000001C4 61001160        	   117: 	bsr op_BSR
01:000001C8 610025AE        	   118: 	bsr op_BCC
01:000001CC 6100262A        	   119: 	bsr op_DBCC
01:000001D0 6100264C        	   120: 	bsr op_SCC
01:000001D4 61002670        	   121: 	bsr op_ADDQ
01:000001D8 61002726        	   122: 	bsr op_SUBQ
01:000001DC 610027DC        	   123: 	bsr op_MOVEQ
                            	   124: *** fails
                            	   125: *	bsr op_DIVU
                            	   126: *	bsr op_DIVS
01:000001E0 61002898        	   127: 	bsr op_OR
01:000001E4 6100297E        	   128: 	bsr op_AND
01:000001E8 61002A64        	   129: 	bsr op_EOR
01:000001EC 61002AD6        	   130: 	bsr op_CMP
01:000001F0 61002B48        	   131: 	bsr op_CMPA
01:000001F4 61002BAA        	   132: 	bsr op_CMPM
01:000001F8 61002C4C        	   133: 	bsr op_ADD
01:000001FC 61002D32        	   134: 	bsr op_SUB
01:00000200 61002E18        	   135: 	bsr op_ADDA
01:00000204 61002E60        	   136: 	bsr op_SUBA
01:00000208 61002EA8        	   137: 	bsr op_ADDX
01:0000020C 61002FB4        	   138: 	bsr op_SUBX
01:00000210 610030C0        	   139: 	bsr op_MULU
01:00000214 61003108        	   140: 	bsr op_MULS
01:00000218 61003150        	   141: 	bsr op_EXG
01:0000021C 610031BA        	   142: 	bsr op_ROx
01:00000220 610033EC        	   143: 	bsr op_ROXx
01:00000224 6100361E        	   144: 	bsr op_SHIFTS
01:00000228 6100385C        	   145: 	bsr op_SHIFTS2
                            	   146: 
01:0000022C 4E75            	   147: 	rts
                            	   148: 	bra ALL_DONE
                            	   149: 
                            	   150: * Loop here when all tests pass
                            	   151: *
                            	   152: 
01:0000022E 60FE            	   153: ALL_DONE: bra.s ALL_DONE
                            	   154: 
01:00000230 263C33333333    	   155: BSR_FAR1:       move.l #$33333333,d3
01:00000236 4E75            	   156:                 rts
                            	   157: 
                            	   158: ;	moveq		#-1,d0
                            	   159: ;	move.l	d0,$FD0FFF00
                            	   160: ;do_nothing:
                            	   161: ;	bra			*		
                            	   162: 
                            	   163: 
                            	   164: * Exception Vector = 6   CHK Instruction
                            	   165: *
                            	   166: 	align	4
                            	   167: EXCEPTION_6:
01:00000240 2C3CEEEE0006    	   168: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000246 4E73            	   169: 	rte
                            	   170: 
                            	   171: * Exception Vector = 7   TRAPV Instruction
                            	   172: *
                            	   173: 	align	4
                            	   174: EXCEPTION_7:
01:00000250 203C12345678    	   175: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000256 4E73            	   176: 	rte
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_CCR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: op_ORI_TO_CCR:
                            	   184: 
01:00000258 003C00FF        	   185:     ori.b #$FF,CCR
01:0000025C 6AFE            	   186:     bpl.s *                   ; branch if Z clear
01:0000025E 66FE            	   187:     bne.s *                   ; branch if N clear
01:00000260 68FE            	   188:     bvc.s *                   ; branch if V clear
01:00000262 64FE            	   189:     bcc.s *                   ; branch if C clear
                            	   190: 
01:00000264 44FC0000        	   191:     move #$00,CCR
01:00000268 003C0000        	   192:     ori.b #$00,CCR
01:0000026C 67FE            	   193:     beq.s *                   ; branch if Z set
01:0000026E 6BFE            	   194:     bmi.s *                   ; branch if N set
01:00000270 69FE            	   195:     bvs.s *                   ; branch if V set
01:00000272 65FE            	   196:     bcs.s *                   ; branch if C set
                            	   197: 
01:00000274 46FC2700        	   198:     move.w #$2700,SR          ; Put flags back to initial value
                            	   199: 
01:00000278 4E75            	   200:     rts
                            	   201: 
                            	   202: ;-----------------------------------------------------------
                            	   203: ;-----------------------------------------------------------
                            	   204: ; OPCODE : ORI_TO_SR
                            	   205: ;-----------------------------------------------------------
                            	   206: ;-----------------------------------------------------------
                            	   207: 
                            	   208: op_ORI_TO_SR:
                            	   209: 
01:0000027A 00BCFF002FFF    	   210:     ori.l #$FF002FFF,SR
01:00000280 6AFE            	   211:     bpl.s *                   * branch if Z clear
01:00000282 66FE            	   212:     bne.s *                   * branch if N clear
01:00000284 68FE            	   213:     bvc.s *                   * branch if V clear
01:00000286 64FE            	   214:     bcc.s *                   * branch if C clear
                            	   215: 
01:00000288 46FC2000        	   216:     move.w #$2000,SR
01:0000028C 00BC00000000    	   217:     ori.l #$0000,SR
01:00000292 67FE            	   218:     beq.s *                   * branch if Z set
01:00000294 6BFE            	   219:     bmi.s *                   * branch if N set
01:00000296 69FE            	   220:     bvs.s *                   * branch if V set
01:00000298 65FE            	   221:     bcs.s *                   * branch if C set
                            	   222: 
01:0000029A 46FC2700        	   223:     move.w #$2700,sr         * Put flags back to initial value
                            	   224: 
01:0000029E 4E75            	   225:     rts
                            	   226: ; 
                            	   227: ;-----------------------------------------------------------
                            	   228: ;-----------------------------------------------------------
                            	   229: ; OPCODE : EORI_TO_CCR
                            	   230: ;-----------------------------------------------------------
                            	   231: ;-----------------------------------------------------------
                            	   232: op_EORI_TO_CCR:
                            	   233: 
01:000002A0 44FC0000        	   234:     move #$00,CCR
01:000002A4 0A3C00FF        	   235:     eori.b #$FF,CCR
01:000002A8 6AFE            	   236:     bpl.s *                   ; branch if Z clear
01:000002AA 66FE            	   237:     bne.s *                   ; branch if N clear
01:000002AC 68FE            	   238:     bvc.s *                   ; branch if V clear
01:000002AE 64FE            	   239:     bcc.s *                   ; branch if C clear
                            	   240: 
01:000002B0 44FC0000        	   241:     move #$00,CCR
01:000002B4 0A3C0000        	   242:     eori.b #$00,CCR
01:000002B8 67FE            	   243:     beq.s *                   ; branch if Z set
01:000002BA 6BFE            	   244:     bmi.s *                   ; branch if N set
01:000002BC 69FE            	   245:     bvs.s *                   ; branch if V set
01:000002BE 65FE            	   246:     bcs.s *                   ; branch if C set
                            	   247: 
01:000002C0 46FC2700        	   248:     move.w #$2700,sr           ; Put flags back to initial value
                            	   249: 
01:000002C4 4E75            	   250:     rts
                            	   251: 
                            	   252: 
                            	   253: 
                            	   254: *-----------------------------------------------------------
                            	   255: *-----------------------------------------------------------
                            	   256: * OPCODE : EORI_TO_SR
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: op_EORI_TO_SR:
                            	   260: 
01:000002C6 46FC2000        	   261:     move.w #$2000,SR
01:000002CA 0ABC00000FFF    	   262:     eori.l #$0FFF,SR
01:000002D0 6AFE            	   263:     bpl.s *                   * branch if Z clear
01:000002D2 66FE            	   264:     bne.s *                   * branch if N clear
01:000002D4 68FE            	   265:     bvc.s *                   * branch if V clear
01:000002D6 64FE            	   266:     bcc.s *                   * branch if C clear
                            	   267: 
01:000002D8 46FC2000        	   268:     move.w #$2000,SR
01:000002DC 0ABC00000000    	   269:     eori.l #$0000,SR
01:000002E2 67FE            	   270:     beq.s *                   * branch if Z set
01:000002E4 6BFE            	   271:     bmi.s *                   * branch if N set
01:000002E6 69FE            	   272:     bvs.s *                   * branch if V set
01:000002E8 65FE            	   273:     bcs.s *                   * branch if C set
                            	   274: 
01:000002EA 46FC2700        	   275:     move.w #$2700,sr          * Put flags back to initial value
                            	   276: 
01:000002EE 4E75            	   277:     rts
                            	   278: 
                            	   279: 
                            	   280: 
                            	   281: *-----------------------------------------------------------
                            	   282: *-----------------------------------------------------------
                            	   283: * OPCODE : ANDI_TO_CCR
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: op_ANDI_TO_CCR:
                            	   287: 
01:000002F0 44FC00FF        	   288:     move #$FF,CCR
01:000002F4 023C00FF        	   289:     andi.b #$FF,CCR
01:000002F8 6AFE            	   290:     bpl.s *                   * branch if Z clear
01:000002FA 66FE            	   291:     bne.s *                   * branch if N clear
01:000002FC 68FE            	   292:     bvc.s *                   * branch if V clear
01:000002FE 64FE            	   293:     bcc.s *                   * branch if C clear
                            	   294: 
01:00000300 44FC00FF        	   295:     move #$FF,CCR
01:00000304 023C0000        	   296:     andi.b #$00,CCR
01:00000308 67FE            	   297:     beq.s *                   * branch if Z set
01:0000030A 6BFE            	   298:     bmi.s *                   * branch if N set
01:0000030C 69FE            	   299:     bvs.s *                   * branch if V set
01:0000030E 65FE            	   300:     bcs.s *                   * branch if C set
                            	   301: 
01:00000310 46FC2700        	   302:     move #$2700,SR           * Put flags back to initial value
                            	   303: 
01:00000314 4E75            	   304:     rts
                            	   305: 
                            	   306: 
                            	   307: 
                            	   308: *-----------------------------------------------------------
                            	   309: *-----------------------------------------------------------
                            	   310: * OPCODE : ANDI_TO_SR
                            	   311: *-----------------------------------------------------------
                            	   312: *-----------------------------------------------------------
                            	   313: op_ANDI_TO_SR:
01:00000316 46FC20FF        	   314:     move.w #$20FF,SR
01:0000031A 02BCFFFFFFFF    	   315:     andi.l #$FFFFFFFF,SR
01:00000320 6AFE            	   316:     bpl.s *                   * branch if Z clear
01:00000322 66FE            	   317:     bne.s *                   * branch if N clear
01:00000324 68FE            	   318:     bvc.s *                   * branch if V clear
01:00000326 64FE            	   319:     bcc.s *                   * branch if C clear
                            	   320: 
01:00000328 46FC20FF        	   321:     move.w #$20FF,SR
01:0000032C 02BCFFFFFF00    	   322:     andi.l #$FFFFFF00,SR
01:00000332 67FE            	   323:     beq.s *                   * branch if Z set
01:00000334 6BFE            	   324:     bmi.s *                   * branch if N set
01:00000336 69FE            	   325:     bvs.s *                   * branch if V set
01:00000338 65FE            	   326:     bcs.s *                   * branch if C set
                            	   327: 
01:0000033A 46FC2700        	   328:     move.w #$2700,sr           * Put flags back to initial value
                            	   329: 
01:0000033E 4E75            	   330:     rts
                            	   331: 
                            	   332: 
                            	   333: *-----------------------------------------------------------
                            	   334: *-----------------------------------------------------------
                            	   335: * OPCODE : BTST
                            	   336: *-----------------------------------------------------------
                            	   337: *-----------------------------------------------------------
                            	   338: op_BTST:
                            	   339: 
                            	   340: *  Bit Number.s Static
                            	   341: 
                            	   342: *             EA = Dn  - LONG only
01:00000340 203C80000001    	   343:             move.l #$80000001,d0      * populate test data
01:00000346 08000000        	   344:             btst.l #0,d0
01:0000034A 67FE            	   345:             beq.s *               * branch if Z set
01:0000034C 08000001        	   346:             btst.l #1,d0              *
01:00000350 66FE            	   347:             bne.s *               * branch if Z clear
01:00000352 0800001F        	   348:             btst.l #31,d0             *
01:00000356 67FE            	   349:             beq.s *               * branch if Z set
                            	   350: 
                            	   351: 
                            	   352: *             EA = (An)  - BYTE only
01:00000358 307C0100        	   353:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000035C 10BC0081        	   354:             move.b #$81,(a0)          * populate test data
01:00000360 1210            	   355:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000362 08100000        	   356:             btst.b #0,(a0)
01:00000366 67FE            	   357:             beq.s *               * branch if Z set
01:00000368 08100001        	   358:             btst.b #1,(a0)            *
01:0000036C 66FE            	   359:             bne.s *               * branch if Z clear
01:0000036E 08100007        	   360:             btst.b #7,(a0)            *
01:00000372 67FE            	   361:             beq.s *               * branch if Z set
                            	   362: 
                            	   363: 
                            	   364: *             EA = (An)+  - BYTE only
01:00000374 307C0100        	   365:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000378 10FC0001        	   366:             move.b #$01,(a0)+         * populate test data
01:0000037C 10FC00FC        	   367:             move.b #$FC,(a0)+         * populate test data
01:00000380 10FC0080        	   368:             move.b #$80,(a0)+         * populate test data
01:00000384 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000388 08180000        	   370:             btst.b #0,(a0)+
01:0000038C 67FE            	   371:             beq.s *               * branch if Z set
01:0000038E 08180001        	   372:             btst.b #1,(a0)+           *
01:00000392 66FE            	   373:             bne.s *               * branch if Z clear
01:00000394 08180007        	   374:             btst.b #7,(a0)+           *
01:00000398 67FE            	   375:             beq.s *               * branch if Z set
                            	   376: 
                            	   377: 
                            	   378: *             EA = -(An)  - BYTE only
01:0000039A 307C0100        	   379:             move.l #$00000100,a0      * point to memory to address
01:0000039E 10FC0080        	   380:             move.b #$80,(a0)+         * populate test data
01:000003A2 10FC00FC        	   381:             move.b #$FC,(a0)+         * populate test data
01:000003A6 10FC0001        	   382:             move.b #$01,(a0)+         * populate test data
01:000003AA 307C0103        	   383:             move.l #$00000103,a0      * point to memory to address
01:000003AE 08200000        	   384:             btst.b #0,-(a0)
01:000003B2 67FE            	   385:             beq.s *               * branch if Z set
01:000003B4 08200001        	   386:             btst.b #1,-(a0)           *
01:000003B8 66FE            	   387:             bne.s *               * branch if Z clear
01:000003BA 08200007        	   388:             btst.b #7,-(a0)           *
01:000003BE 67FE            	   389:             beq.s *               * branch if Z set
                            	   390: 
                            	   391: 
                            	   392: *             EA = n(An)  - BYTE only
01:000003C0 307C0100        	   393:             move.l #$00000100,a0      * point to memory to address
01:000003C4 10FC0001        	   394:             move.b #$01,(a0)+         * populate test data
01:000003C8 10FC00FC        	   395:             move.b #$FC,(a0)+         * populate test data
01:000003CC 10FC0080        	   396:             move.b #$80,(a0)+         * populate test data
01:000003D0 307C0100        	   397:             move.l #$00000100,a0      * point to memory to address
01:000003D4 08100000        	   398:             btst.b #0,0(a0)
01:000003D8 67FE            	   399:             beq.s *               * branch if Z set
01:000003DA 082800010001    	   400:             btst.b #1,1(a0)           *
01:000003E0 66FE            	   401:             bne.s *               * branch if Z clear
01:000003E2 082800070002    	   402:             btst.b #7,2(a0)           *
01:000003E8 67FE            	   403:             beq.s *               * branch if Z set
                            	   404: 
                            	   405: 
                            	   406: *             EA = n(An,R.W)  - BYTE only
01:000003EA 307C0100        	   407:             move.l #$00000100,a0      * point to memory to address
01:000003EE 93C9            	   408:             move.l #$00000000,a1      * point to memory to address
01:000003F0 347C0001        	   409:             move.l #$00000001,a2      * point to memory to address
01:000003F4 7000            	   410:             moveq  #$00000000,d0      * point to memory to address
01:000003F6 7201            	   411:             moveq  #$00000001,d1      * point to memory to address
01:000003F8 083000000000    	   412:             btst.b #0,0(a0,d0.w)
01:000003FE 67FE            	   413:             beq.s *               * branch if Z set
01:00000400 083000011000    	   414:             btst.b #1,0(a0,d1.w)      *
01:00000406 66FE            	   415:             bne.s *               * branch if Z clear
01:00000408 083000071001    	   416:             btst.b #7,1(a0,d1.w)      *
01:0000040E 67FE            	   417:             beq.s *               * branch if Z set
                            	   418: *             EA = n(An,R.L)  - BYTE only
01:00000410 083000000800    	   419:             btst.b #0,0(a0,d0.l)
01:00000416 67FE            	   420:             beq.s *               * branch if Z set
01:00000418 083000011800    	   421:             btst.b #1,0(a0,d1.l)      *
01:0000041E 66FE            	   422:             bne.s *               * branch if Z clear
01:00000420 083000071801    	   423:             btst.b #7,1(a0,d1.l)      *
01:00000426 67FE            	   424:             beq.s *               * branch if Z set
                            	   425: *             EA = n(An,A.W)  - BYTE only
01:00000428 083000009000    	   426:             btst.b #0,0(a0,a1.w)
01:0000042E 67FE            	   427:             beq.s *               * branch if Z set
01:00000430 08300001A000    	   428:             btst.b #1,0(a0,a2.w)      *
01:00000436 66FE            	   429:             bne.s *               * branch if Z clear
01:00000438 08300007A001    	   430:             btst.b #7,1(a0,a2.w)      *
01:0000043E 67FE            	   431:             beq.s *               * branch if Z set
                            	   432: *             EA = n(An,A.L)  - BYTE only
01:00000440 083000009800    	   433:             btst.b #0,0(a0,a1.l)
01:00000446 67FE            	   434:             beq.s *               * branch if Z set
01:00000448 08300001A800    	   435:             btst.b #1,0(a0,a2.l)      *
01:0000044E 66FE            	   436:             bne.s *               * branch if Z clear
01:00000450 08300007A801    	   437:             btst.b #7,1(a0,a2.l)      *
01:00000456 67FE            	   438:             beq.s *               * branch if Z set
                            	   439: 
                            	   440: 
                            	   441: *             EA = x.W  - BYTE only
01:00000458 083800000100    	   442:             btst.b #0,$0100
01:0000045E 67FE            	   443:             beq.s *               * branch if Z set
01:00000460 083800010101    	   444:             btst.b #1,$0101           *
01:00000466 66FE            	   445:             bne.s *               * branch if Z clear
01:00000468 083800070102    	   446:             btst.b #7,$0102           *
01:0000046E 67FE            	   447:             beq.s *               * branch if Z set
                            	   448: 
                            	   449: 
                            	   450: *             EA = x.L  - BYTE only
01:00000470 207C0000F100    	   451:             move.l #$F100,a0      * point to memory to address 0x100
01:00000476 10FC0001        	   452:             move.b #$01,(a0)+         * populate test data
01:0000047A 10FC00FC        	   453:             move.b #$FC,(a0)+         * populate test data
01:0000047E 10FC0080        	   454:             move.b #$80,(a0)+         * populate test data
01:00000482 083900000000F100	   455:             btst.b #0,$F100
01:0000048A 67FE            	   456:             beq.s *               * branch if Z set
01:0000048C 083900010000F101	   457:             btst.b #1,$F101       *
01:00000494 66FE            	   458:             bne.s *               * branch if Z clear
01:00000496 083900070000F102	   459:             btst.b #7,$F102       *
01:0000049E 67FE            	   460:             beq.s *               * branch if Z set
                            	   461: 
                            	   462: 
                            	   463: *             EA = x(PC)  - BYTE only
01:000004A0 4BFAFE9E        	   464:             lea op_BTST(pc),a5
01:000004A4 083A0000FE98    	   465:             btst.b #0,op_BTST(pc)
01:000004AA 66FE            	   466:             bne.s *               * branch if Z clear
01:000004AC 083A0003001A    	   467:             btst.b #3,op_BTST0(pc)     *
01:000004B2 67FE            	   468:             beq.s *               * branch if Z set
01:000004B4 083A00060074    	   469:             btst.b #6,op_BTST12(pc)    *
01:000004BA 67FE            	   470:             beq.s *               * branch if Z set
                            	   471: 
                            	   472: 
                            	   473: *             EA = n(PC,R.W)  - BYTE only
01:000004BC 307C0100        	   474:             move.l #$00000100,a0      * point to memory to address
01:000004C0 93C9            	   475:             move.l #$00000000,a1      * point to memory to address
01:000004C2 347C0001        	   476:             move.l #$00000001,a2      * point to memory to address
01:000004C6 7000            	   477:             moveq  #$00000000,d0      * point to memory to address
01:000004C8 7201            	   478:             moveq  #$00000001,d1      * point to memory to address
                            	   479: 
01:000004CA 083B000000FC    	   480: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:000004D0 66FE            	   481:             bne.s *               * branch if Z clear
                            	   482: 
01:000004D2 4BFB1002        	   483:             lea op_BTST1(pc,d1.w),a5
01:000004D6 083B000110FC    	   484: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:000004DC 67FE            	   485:             beq.s *               * branch if Z set
01:000004DE 083B000710FC    	   486: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:000004E4 66FE            	   487:             bne.s *               * branch if Z clear
                            	   488: *             EA = n(PC,R.L)  - BYTE only
01:000004E6 083B000008FC    	   489: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:000004EC 66FE            	   490:             bne.s *               * branch if Z clear
01:000004EE 083B000118FC    	   491: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:000004F4 67FE            	   492:             beq.s *               * branch if Z set
01:000004F6 083B000718FC    	   493: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:000004FC 66FE            	   494:             bne.s *               * branch if Z clear
                            	   495: *             EA = n(PC,A.W)  - BYTE only
01:000004FE 083B000090FC    	   496: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:00000504 66FE            	   497:             bne.s *               * branch if Z clear
01:00000506 083B0001A0FC    	   498: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:0000050C 67FE            	   499:             beq.s *               * branch if Z set
01:0000050E 083B0007A0FC    	   500: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:00000514 66FE            	   501:             bne.s *               * branch if Z clear
                            	   502: *             EA = n(PC,A.L)  - BYTE only
01:00000516 083B000098FC    	   503: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:0000051C 66FE            	   504:             bne.s *               * branch if Z clear
01:0000051E 083B0001A8FC    	   505: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:00000524 67FE            	   506:             beq.s *               * branch if Z set
01:00000526 083B0007A8FC    	   507: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:0000052C 66FE            	   508: op_BTST12:  bne.s *               * branch if Z clear
                            	   509: 
                            	   510: 
                            	   511: 
                            	   512: * Bit Number.s Dynamic
                            	   513: 
                            	   514: *             EA = Dn  - LONG only
01:0000052E 203C80000001    	   515:             move.l #$80000001,d0      * populate test data
01:00000534 7A00            	   516:             move.l #0,d5              * populate bit.s number to test
01:00000536 7C01            	   517:             move.l #1,d6              * populate bit.s number to test
01:00000538 7E1F            	   518:             move.l #31,d7              * populate bit.s number to test
                            	   519: 
01:0000053A 0B00            	   520:             btst.l d5,d0
01:0000053C 67FE            	   521:             beq.s *               * branch if Z set
01:0000053E 0D00            	   522:             btst.l d6,d0              *
01:00000540 66FE            	   523:             bne.s *               * branch if Z clear
01:00000542 0F00            	   524:             btst.l d7,d0             *
01:00000544 67FE            	   525:             beq.s *               * branch if Z set
                            	   526: 
                            	   527: 
                            	   528: *             EA = (An)  - BYTE only
01:00000546 7A00            	   529:             move.l #0,d5              * populate bit.s number to test
01:00000548 7C01            	   530:             move.l #1,d6              * populate bit.s number to test
01:0000054A 7E07            	   531:             move.l #7,d7              * populate bit.s number to test
01:0000054C 307C0100        	   532:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000550 10BC0081        	   533:             move.b #$81,(a0)          * populate test data
01:00000554 1210            	   534:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000556 0B10            	   535:             btst.b d5,(a0)
01:00000558 67FE            	   536:             beq.s *               * branch if Z set
01:0000055A 0D10            	   537:             btst.b d6,(a0)            *
01:0000055C 66FE            	   538:             bne.s *               * branch if Z clear
01:0000055E 0F10            	   539:             btst.b d7,(a0)            *
01:00000560 67FE            	   540:             beq.s *               * branch if Z set
                            	   541: 
                            	   542: * ---
                            	   543: 
                            	   544: 
                            	   545: *             EA = (An)+  - BYTE only
01:00000562 307C0100        	   546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000566 10FC0001        	   547:             move.b #$01,(a0)+         * populate test data
01:0000056A 10FC00FC        	   548:             move.b #$FC,(a0)+         * populate test data
01:0000056E 10FC0080        	   549:             move.b #$80,(a0)+         * populate test data
01:00000572 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000576 0B18            	   551:             btst.b d5,(a0)+
01:00000578 67FE            	   552:             beq.s *               * branch if Z set
01:0000057A 0D18            	   553:             btst.b d6,(a0)+           *
01:0000057C 66FE            	   554:             bne.s *               * branch if Z clear
01:0000057E 0F18            	   555:             btst.b d7,(a0)+           *
01:00000580 67FE            	   556:             beq.s *               * branch if Z set
                            	   557: 
                            	   558: 
                            	   559: *             EA = -(An)  - BYTE only
01:00000582 307C0100        	   560:             move.l #$00000100,a0      * point to memory to address
01:00000586 10FC0080        	   561:             move.b #$80,(a0)+         * populate test data
01:0000058A 10FC00FC        	   562:             move.b #$FC,(a0)+         * populate test data
01:0000058E 10FC0001        	   563:             move.b #$01,(a0)+         * populate test data
01:00000592 307C0103        	   564:             move.l #$00000103,a0      * point to memory to address
01:00000596 0B20            	   565:             btst.b d5,-(a0)
01:00000598 67FE            	   566:             beq.s *               * branch if Z set
01:0000059A 0D20            	   567:             btst.b d6,-(a0)           *
01:0000059C 66FE            	   568:             bne.s *               * branch if Z clear
01:0000059E 0F20            	   569:             btst.b d7,-(a0)           *
01:000005A0 67FE            	   570:             beq.s *               * branch if Z set
                            	   571: 
                            	   572: 
                            	   573: *             EA = n(An)  - BYTE only
01:000005A2 307C0100        	   574:             move.l #$00000100,a0      * point to memory to address
01:000005A6 10FC0001        	   575:             move.b #$01,(a0)+         * populate test data
01:000005AA 10FC00FC        	   576:             move.b #$FC,(a0)+         * populate test data
01:000005AE 10FC0080        	   577:             move.b #$80,(a0)+         * populate test data
01:000005B2 307C0100        	   578:             move.l #$00000100,a0      * point to memory to address
01:000005B6 0B10            	   579:             btst.b d5,0(a0)
01:000005B8 67FE            	   580:             beq.s *               * branch if Z set
01:000005BA 0D280001        	   581:             btst.b d6,1(a0)           *
01:000005BE 66FE            	   582:             bne.s *               * branch if Z clear
01:000005C0 0F280002        	   583:             btst.b d7,2(a0)           *
01:000005C4 67FE            	   584:             beq.s *               * branch if Z set
                            	   585: 
                            	   586: 
                            	   587: *             EA = n(An,R.W)  - BYTE only
01:000005C6 307C0100        	   588:             move.l #$00000100,a0      * point to memory to address
01:000005CA 93C9            	   589:             move.l #$00000000,a1      * point to memory to address
01:000005CC 347C0001        	   590:             move.l #$00000001,a2      * point to memory to address
01:000005D0 7000            	   591:             moveq  #$00000000,d0      * point to memory to address
01:000005D2 7201            	   592:             moveq  #$00000001,d1      * point to memory to address
01:000005D4 0B300000        	   593:             btst.b d5,0(a0,d0.w)
01:000005D8 67FE            	   594:             beq.s *               * branch if Z set
01:000005DA 0D301000        	   595:             btst.b d6,0(a0,d1.w)      *
01:000005DE 66FE            	   596:             bne.s *               * branch if Z clear
01:000005E0 0F301001        	   597:             btst.b d7,1(a0,d1.w)      *
01:000005E4 67FE            	   598:             beq.s *               * branch if Z set
                            	   599: *             EA = n(An,R.L)  - BYTE only
01:000005E6 0B300800        	   600:             btst.b d5,0(a0,d0.l)
01:000005EA 67FE            	   601:             beq.s *               * branch if Z set
01:000005EC 0D301800        	   602:             btst.b d6,0(a0,d1.l)      *
01:000005F0 66FE            	   603:             bne.s *               * branch if Z clear
01:000005F2 0F301801        	   604:             btst.b d7,1(a0,d1.l)      *
01:000005F6 67FE            	   605:             beq.s *               * branch if Z set
                            	   606: *             EA = n(An,A.W)  - BYTE only
01:000005F8 0B309000        	   607:             btst.b d5,0(a0,a1.w)
01:000005FC 67FE            	   608:             beq.s *               * branch if Z set
01:000005FE 0D30A000        	   609:             btst.b d6,0(a0,a2.w)      *
01:00000602 66FE            	   610:             bne.s *               * branch if Z clear
01:00000604 0F30A001        	   611:             btst.b d7,1(a0,a2.w)      *
01:00000608 67FE            	   612:             beq.s *               * branch if Z set
                            	   613: *             EA = n(An,A.L)  - BYTE only
01:0000060A 0B309800        	   614:             btst.b d5,0(a0,a1.l)
01:0000060E 67FE            	   615:             beq.s *               * branch if Z set
01:00000610 0D30A800        	   616:             btst.b d6,0(a0,a2.l)      *
01:00000614 66FE            	   617:             bne.s *               * branch if Z clear
01:00000616 0F30A801        	   618:             btst.b d7,1(a0,a2.l)      *
01:0000061A 67FE            	   619:             beq.s *               * branch if Z set
                            	   620: 
                            	   621: 
                            	   622: *             EA = x.W  - BYTE only
01:0000061C 0B380100        	   623:             btst.b d5,$0100
01:00000620 67FE            	   624:             beq.s *               * branch if Z set
01:00000622 0D380101        	   625:             btst.b d6,$0101           *
01:00000626 66FE            	   626:             bne.s *               * branch if Z clear
01:00000628 0F380102        	   627:             btst.b d7,$0102           *
01:0000062C 67FE            	   628:             beq.s *               * branch if Z set
                            	   629: 
                            	   630: 
                            	   631: *             EA = x.L  - BYTE only
01:0000062E 207C0000F100    	   632:             move.l #$F100,a0      * point to memory to address 0x100
01:00000634 10FC0001        	   633:             move.b #$01,(a0)+         * populate test data
01:00000638 10FC00FC        	   634:             move.b #$FC,(a0)+         * populate test data
01:0000063C 10FC0080        	   635:             move.b #$80,(a0)+         * populate test data
01:00000640 0B390000F100    	   636:             btst.b d5,$F100
01:00000646 67FE            	   637:             beq.s *               * branch if Z set
01:00000648 0D390000F101    	   638:             btst.b d6,$F101       *
01:0000064E 66FE            	   639:             bne.s *               * branch if Z clear
01:00000650 0F390000F102    	   640:             btst.b d7,$F102       *
01:00000656 67FE            	   641:             beq.s *               * branch if Z set
                            	   642: 
                            	   643: 
                            	   644: *             EA = x(PC)  - BYTE only
01:00000658 7C03            	   645:             move.l #3,d6              * populate bit.s number to test
01:0000065A 7E06            	   646:             move.l #6,d7              * populate bit.s number to test
01:0000065C 4BFAFCE2        	   647:             lea op_BTST(pc),a5
01:00000660 0B3AFCDE        	   648:             btst.b d5,op_BTST(pc)
01:00000664 66FE            	   649:             bne.s *               * branch if Z clear
01:00000666 0D3AFE62        	   650:             btst.b d6,op_BTST0(pc)     *
01:0000066A 67FE            	   651:             beq.s *               * branch if Z set
01:0000066C 0F3AFEBE        	   652:             btst.b d7,op_BTST12(pc)    *
01:00000670 67FE            	   653:             beq.s *               * branch if Z set
                            	   654: 
                            	   655: 
                            	   656: *             EA = n(PC,R.W)  - BYTE only
01:00000672 307C0100        	   657:             move.l #$00000100,a0      * point to memory to address
01:00000676 93C9            	   658:             move.l #$00000000,a1      * point to memory to address
01:00000678 347C0001        	   659:             move.l #$00000001,a2      * point to memory to address
01:0000067C 7000            	   660:             moveq  #$00000000,d0      * point to memory to address
01:0000067E 7201            	   661:             moveq  #$00000001,d1      * point to memory to address
01:00000680 7C01            	   662:             move.l #1,d6              * populate bit.s number to test
01:00000682 7E07            	   663:             move.l #7,d7              * populate bit.s number to test
                            	   664: 
01:00000684 0B3B00FE        	   665: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:00000688 67FE            	   666:             beq.s *               * branch if Z set
01:0000068A 4BFB1002        	   667:             lea op_BTST21(pc,d1.w),a5
01:0000068E 0D3B10FE        	   668: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:00000692 67FE            	   669:             beq.s *               * branch if Z set
01:00000694 0F3B10FE        	   670: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:00000698 66FE            	   671:             bne.s *               * branch if Z clear
                            	   672: *             EA = n(PC,R.L)  - BYTE only
01:0000069A 0B3B08FE        	   673: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:0000069E 67FE            	   674:             beq.s *               * branch if Z set
01:000006A0 0D3B18FE        	   675: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:000006A4 67FE            	   676:             beq.s *               * branch if Z set
01:000006A6 0F3B18FE        	   677: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:000006AA 66FE            	   678:             bne.s *               * branch if Z clear
                            	   679: *             EA = n(PC,A.W)  - BYTE only
01:000006AC 0B3B90FE        	   680: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:000006B0 67FE            	   681:             beq.s *               * branch if Z set
01:000006B2 0D3BA0FE        	   682: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:000006B6 67FE            	   683:             beq.s *               * branch if Z set
01:000006B8 0F3BA0FE        	   684: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:000006BC 66FE            	   685:             bne.s *               * branch if Z clear
                            	   686: *             EA = n(PC,A.L)  - BYTE only
01:000006BE 0B3B98FE        	   687: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:000006C2 67FE            	   688:             beq.s *               * branch if Z set
01:000006C4 0D3BA8FE        	   689: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:000006C8 67FE            	   690:             beq.s *               * branch if Z set
01:000006CA 0F3BA8FE        	   691: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000006CE 66FE            	   692: op_BTST32:  bne.s *               * branch if Z clear
                            	   693: 
                            	   694: *             EA = #x  - BYTE only
                            	   695: 
01:000006D0 7A00            	   696:             move.l #0,d5              * populate bit.s number to test
01:000006D2 7C03            	   697:             move.l #3,d6              * populate bit.s number to test
01:000006D4 7E07            	   698:             move.l #7,d7              * populate bit.s number to test
                            	   699: 
01:000006D6 0B3C0088        	   700:             btst.b d5,#$88
01:000006DA 66FE            	   701:             bne.s *               * branch if Z clear
01:000006DC 0D3C0088        	   702:             btst.b d6,#$88
01:000006E0 67FE            	   703:             beq.s *               * branch if Z set
01:000006E2 0F3C0088        	   704:             btst.b d7,#$88
01:000006E6 67FE            	   705:             beq.s *               * branch if Z set
                            	   706: 
                            	   707: 
01:000006E8 4E75            	   708:     rts
                            	   709: 
                            	   710: *-----------------------------------------------------------
                            	   711: *-----------------------------------------------------------
                            	   712: * OPCODE : BCHG
                            	   713: *-----------------------------------------------------------
                            	   714: *-----------------------------------------------------------
                            	   715: op_BCHG:
                            	   716: 
                            	   717: 
                            	   718: *  Bit Number.s Static
                            	   719: 
                            	   720: *             EA = Dn  - LONG only
01:000006EA 203C80000001    	   721:             move.l #$80000001,d0      * populate test data
01:000006F0 08400000        	   722:             bchg.l #0,d0
01:000006F4 67FE            	   723:             beq.s *               * branch if Z set
01:000006F6 08400001        	   724:             bchg.l #1,d0              *
01:000006FA 66FE            	   725:             bne.s *               * branch if Z clear
01:000006FC 0840001F        	   726:             bchg.l #31,d0             *
01:00000700 67FE            	   727:             beq.s *               * branch if Z set
01:00000702 0C8000000002    	   728:             cmpi.l #$00000002,d0
01:00000708 66FE            	   729:             bne.s *               * branch if Z clear
                            	   730: 
                            	   731: 
                            	   732: *             EA = (An)  - BYTE only
01:0000070A 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000070E 10BC0081        	   734:             move.b #$81,(a0)          * populate test data
01:00000712 1210            	   735:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000714 08500000        	   736:             bchg.b #0,(a0)
01:00000718 67FE            	   737:             beq.s *               * branch if Z set
01:0000071A 08500001        	   738:             bchg.b #1,(a0)            *
01:0000071E 66FE            	   739:             bne.s *               * branch if Z clear
01:00000720 08500007        	   740:             bchg.b #7,(a0)            *
01:00000724 67FE            	   741:             beq.s *               * branch if Z set
01:00000726 0C100002        	   742:             cmpi.b #$02,(a0)
01:0000072A 66FE            	   743:             bne.s *               * branch if Z clear
                            	   744: 
                            	   745: *             EA = (An)+  - BYTE only
01:0000072C 307C0100        	   746:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000730 10FC0001        	   747:             move.b #$01,(a0)+         * populate test data
01:00000734 10FC00FC        	   748:             move.b #$FC,(a0)+         * populate test data
01:00000738 10FC0080        	   749:             move.b #$80,(a0)+         * populate test data
01:0000073C 307C0100        	   750:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000740 08580000        	   751:             bchg.b #0,(a0)+
01:00000744 67FE            	   752:             beq.s *               * branch if Z set
01:00000746 08580001        	   753:             bchg.b #1,(a0)+           *
01:0000074A 66FE            	   754:             bne.s *               * branch if Z clear
01:0000074C 08580007        	   755:             bchg.b #7,(a0)+           *
01:00000750 67FE            	   756:             beq.s *               * branch if Z set
01:00000752 307C0100        	   757:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000756 4A18            	   758:             cmpi.b #$00,(a0)+
01:00000758 66FE            	   759:             bne.s *               * branch if Z clear
01:0000075A 0C1800FE        	   760:             cmpi.b #$FE,(a0)+
01:0000075E 66FE            	   761:             bne.s *               * branch if Z clear
01:00000760 4A18            	   762:             cmpi.b #$00,(a0)+
01:00000762 66FE            	   763:             bne.s *               * branch if Z clear
                            	   764: 
                            	   765: *             EA = -(An)  - BYTE only
01:00000764 307C0100        	   766:             move.l #$00000100,a0      * point to memory to address
01:00000768 10FC0080        	   767:             move.b #$80,(a0)+         * populate test data
01:0000076C 10FC00FC        	   768:             move.b #$FC,(a0)+         * populate test data
01:00000770 10FC0001        	   769:             move.b #$01,(a0)+         * populate test data
01:00000774 307C0103        	   770:             move.l #$00000103,a0      * point to memory to address
01:00000778 08600000        	   771:             bchg.b #0,-(a0)
01:0000077C 67FE            	   772:             beq.s *               * branch if Z set
01:0000077E 08600001        	   773:             bchg.b #1,-(a0)           *
01:00000782 66FE            	   774:             bne.s *               * branch if Z clear
01:00000784 08600007        	   775:             bchg.b #7,-(a0)           *
01:00000788 67FE            	   776:             beq.s *               * branch if Z set
01:0000078A 307C0103        	   777:             move.l #$00000103,a0      * point to memory to address 0x100
01:0000078E 4A20            	   778:             cmpi.b #$00,-(a0)
01:00000790 66FE            	   779:             bne.s *               * branch if Z clear
01:00000792 0C2000FE        	   780:             cmpi.b #$FE,-(a0)
01:00000796 66FE            	   781:             bne.s *               * branch if Z clear
01:00000798 4A20            	   782:             cmpi.b #$00,-(a0)
01:0000079A 66FE            	   783:             bne.s *               * branch if Z clear
                            	   784: 
                            	   785: 
                            	   786: *             EA = n(An)  - BYTE only
01:0000079C 307C0100        	   787:             move.l #$00000100,a0      * point to memory to address
01:000007A0 10FC0001        	   788:             move.b #$01,(a0)+         * populate test data
01:000007A4 10FC00FC        	   789:             move.b #$FC,(a0)+         * populate test data
01:000007A8 10FC0080        	   790:             move.b #$80,(a0)+         * populate test data
01:000007AC 307C0100        	   791:             move.l #$00000100,a0      * point to memory to address
01:000007B0 08500000        	   792:             bchg.b #0,0(a0)
01:000007B4 67FE            	   793:             beq.s *               * branch if Z set
01:000007B6 086800010001    	   794:             bchg.b #1,1(a0)           *
01:000007BC 66FE            	   795:             bne.s *               * branch if Z clear
01:000007BE 086800070002    	   796:             bchg.b #7,2(a0)           *
01:000007C4 67FE            	   797:             beq.s *               * branch if Z set
01:000007C6 307C0100        	   798:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007CA 4A18            	   799:             cmpi.b #$00,(a0)+
01:000007CC 66FE            	   800:             bne.s *               * branch if Z clear
01:000007CE 0C1800FE        	   801:             cmpi.b #$FE,(a0)+
01:000007D2 66FE            	   802:             bne.s *               * branch if Z clear
01:000007D4 4A18            	   803:             cmpi.b #$00,(a0)+
01:000007D6 66FE            	   804:             bne.s *               * branch if Z clear
                            	   805: 
                            	   806: 
                            	   807: *             EA = n(An,D.W)  - BYTE only
01:000007D8 307C0100        	   808:             move.l #$00000100,a0      * point to memory to address
01:000007DC 93C9            	   809:             move.l #$00000000,a1      * point to memory to address
01:000007DE 347C0001        	   810:             move.l #$00000001,a2      * point to memory to address
01:000007E2 7000            	   811:             moveq  #$00000000,d0      * point to memory to address
01:000007E4 7201            	   812:             moveq  #$00000001,d1      * point to memory to address
01:000007E6 087000000000    	   813:             bchg.b #0,0(a0,d0.w)
01:000007EC 66FE            	   814:             bne.s *               * branch if Z clear
01:000007EE 087000011000    	   815:             bchg.b #1,0(a0,d1.w)      *
01:000007F4 67FE            	   816:             beq.s *               * branch if Z set
01:000007F6 087000071001    	   817:             bchg.b #7,1(a0,d1.w)      *
01:000007FC 66FE            	   818:             bne.s *               * branch if Z clear
                            	   819: *             EA = n(An,D.L)  - BYTE only
01:000007FE 087000000800    	   820:             bchg.b #0,0(a0,d0.l)
01:00000804 67FE            	   821:             beq.s *               * branch if Z set
01:00000806 087000011800    	   822:             bchg.b #1,0(a0,d1.l)      *
01:0000080C 66FE            	   823:             bne.s *               * branch if Z clear
01:0000080E 087000071801    	   824:             bchg.b #7,1(a0,d1.l)      *
01:00000814 67FE            	   825:             beq.s *               * branch if Z set
                            	   826: *             EA = n(An,A.W)  - BYTE only
01:00000816 087000009000    	   827:             bchg.b #0,0(a0,a1.w)
01:0000081C 66FE            	   828:             bne.s *               * branch if Z clear
01:0000081E 08700001A000    	   829:             bchg.b #1,0(a0,a2.w)      *
01:00000824 67FE            	   830:             beq.s *               * branch if Z set
01:00000826 08700007A001    	   831:             bchg.b #7,1(a0,a2.w)      *
01:0000082C 66FE            	   832:             bne.s *               * branch if Z clear
                            	   833: *             EA = n(An,A.L)  - BYTE only
01:0000082E 087000009800    	   834:             bchg.b #0,0(a0,a1.l)
01:00000834 67FE            	   835:             beq.s *               * branch if Z set
01:00000836 08700001A800    	   836:             bchg.b #1,0(a0,a2.l)      *
01:0000083C 66FE            	   837:             bne.s *               * branch if Z clear
01:0000083E 08700007A801    	   838:             bchg.b #7,1(a0,a2.l)      *
01:00000844 67FE            	   839:             beq.s *               * branch if Z set
01:00000846 307C0100        	   840:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000084A 4A18            	   841:             cmpi.b #$00,(a0)+
01:0000084C 66FE            	   842:             bne.s *               * branch if Z clear
01:0000084E 0C1800FE        	   843:             cmpi.b #$FE,(a0)+
01:00000852 66FE            	   844:             bne.s *               * branch if Z clear
01:00000854 4A18            	   845:             cmpi.b #$00,(a0)+
01:00000856 66FE            	   846:             bne.s *               * branch if Z clear
                            	   847: 
                            	   848: 
                            	   849: *             EA = x.W  - BYTE only
01:00000858 087800000100    	   850:             bchg.b #0,$0100
01:0000085E 66FE            	   851:             bne.s *               * branch if Z clear
01:00000860 087800010101    	   852:             bchg.b #1,$0101           *
01:00000866 67FE            	   853:             beq.s *               * branch if Z set
01:00000868 087800070102    	   854:             bchg.b #7,$0102           *
01:0000086E 66FE            	   855:             bne.s *               * branch if Z clear
01:00000870 307C0100        	   856:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000874 0C180001        	   857:             cmpi.b #$01,(a0)+
01:00000878 66FE            	   858:             bne.s *               * branch if Z clear
01:0000087A 0C1800FC        	   859:             cmpi.b #$FC,(a0)+
01:0000087E 66FE            	   860:             bne.s *               * branch if Z clear
01:00000880 0C180080        	   861:             cmpi.b #$80,(a0)+
01:00000884 66FE            	   862:             bne.s *               * branch if Z clear
                            	   863: 
                            	   864: *             EA = x.L  - BYTE only
01:00000886 207C0000F100    	   865:             move.l #$F100,a0      * point to memory to address 0x100
01:0000088C 10FC0001        	   866:             move.b #$01,(a0)+         * populate test data
01:00000890 10FC00FC        	   867:             move.b #$FC,(a0)+         * populate test data
01:00000894 10FC0080        	   868:             move.b #$80,(a0)+         * populate test data
01:00000898 087900000000F100	   869:             bchg.b #0,$F100
01:000008A0 67FE            	   870:             beq.s *               * branch if Z set
01:000008A2 087900010000F101	   871:             bchg.b #1,$F101       *
01:000008AA 66FE            	   872:             bne.s *               * branch if Z clear
01:000008AC 087900070000F102	   873:             bchg.b #7,$F102       *
01:000008B4 67FE            	   874:             beq.s *               * branch if Z set
01:000008B6 307C0100        	   875:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008BA 0C180001        	   876:             cmpi.b #$01,(a0)+
01:000008BE 66FE            	   877:             bne.s *               * branch if Z clear
01:000008C0 0C1800FC        	   878:             cmpi.b #$FC,(a0)+
01:000008C4 66FE            	   879:             bne.s *               * branch if Z clear
01:000008C6 0C180080        	   880:             cmpi.b #$80,(a0)+
01:000008CA 66FE            	   881:             bne.s *               * branch if Z clear
                            	   882: 
                            	   883: 
                            	   884: * Bit Number.s Dynamic
                            	   885: 
                            	   886: *             EA = Dn  - LONG only
01:000008CC 203C80000001    	   887:             move.l #$80000001,d0      * populate test data
01:000008D2 7A00            	   888:             move.l #0,d5              * populate bit.s number to test
01:000008D4 7C01            	   889:             move.l #1,d6              * populate bit.s number to test
01:000008D6 7E1F            	   890:             move.l #31,d7              * populate bit.s number to test
                            	   891: 
01:000008D8 0B40            	   892:             bchg.l d5,d0
01:000008DA 67FE            	   893:             beq.s *               * branch if Z set
01:000008DC 0D40            	   894:             bchg.l d6,d0              *
01:000008DE 66FE            	   895:             bne.s *               * branch if Z clear
01:000008E0 0F40            	   896:             bchg.l d7,d0             *
01:000008E2 67FE            	   897:             beq.s *               * branch if Z set
01:000008E4 0C8000000002    	   898:             cmpi.l #$00000002,d0
01:000008EA 66FE            	   899:             bne.s *               * branch if Z clear
                            	   900: 
                            	   901: 
                            	   902: *             EA = (An)  - BYTE only
01:000008EC 7A00            	   903:             move.l #0,d5              * populate bit.s number to test
01:000008EE 7C01            	   904:             move.l #1,d6              * populate bit.s number to test
01:000008F0 7E07            	   905:             move.l #7,d7              * populate bit.s number to test
01:000008F2 307C0100        	   906:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008F6 10BC0081        	   907:             move.b #$81,(a0)          * populate test data
01:000008FA 1210            	   908:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:000008FC 0B50            	   909:             bchg.b d5,(a0)
01:000008FE 67FE            	   910:             beq.s *               * branch if Z set
01:00000900 0D50            	   911:             bchg.b d6,(a0)            *
01:00000902 66FE            	   912:             bne.s *               * branch if Z clear
01:00000904 0F50            	   913:             bchg.b d7,(a0)            *
01:00000906 67FE            	   914:             beq.s *               * branch if Z set
01:00000908 0C100002        	   915:             cmpi.b #$02,(a0)
01:0000090C 66FE            	   916:             bne.s *               * branch if Z clear
                            	   917: 
                            	   918: 
                            	   919: *             EA = (An)+  - BYTE only
01:0000090E 307C0100        	   920:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000912 10FC0001        	   921:             move.b #$01,(a0)+         * populate test data
01:00000916 10FC00FC        	   922:             move.b #$FC,(a0)+         * populate test data
01:0000091A 10FC0080        	   923:             move.b #$80,(a0)+         * populate test data
01:0000091E 307C0100        	   924:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000922 0B58            	   925:             bchg.b d5,(a0)+
01:00000924 67FE            	   926:             beq.s *               * branch if Z set
01:00000926 0D58            	   927:             bchg.b d6,(a0)+           *
01:00000928 66FE            	   928:             bne.s *               * branch if Z clear
01:0000092A 0F58            	   929:             bchg.b d7,(a0)+           *
01:0000092C 67FE            	   930:             beq.s *               * branch if Z set
01:0000092E 307C0100        	   931:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000932 4A18            	   932:             cmpi.b #$00,(a0)+
01:00000934 66FE            	   933:             bne.s *               * branch if Z clear
01:00000936 0C1800FE        	   934:             cmpi.b #$FE,(a0)+
01:0000093A 66FE            	   935:             bne.s *               * branch if Z clear
01:0000093C 4A18            	   936:             cmpi.b #$00,(a0)+
01:0000093E 66FE            	   937:             bne.s *               * branch if Z clear
                            	   938: 
                            	   939: *             EA = -(An)  - BYTE only
01:00000940 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
01:00000944 10FC0080        	   941:             move.b #$80,(a0)+         * populate test data
01:00000948 10FC00FC        	   942:             move.b #$FC,(a0)+         * populate test data
01:0000094C 10FC0001        	   943:             move.b #$01,(a0)+         * populate test data
01:00000950 307C0103        	   944:             move.l #$00000103,a0      * point to memory to address
01:00000954 0B60            	   945:             bchg.b d5,-(a0)
01:00000956 67FE            	   946:             beq.s *               * branch if Z set
01:00000958 0D60            	   947:             bchg.b d6,-(a0)           *
01:0000095A 66FE            	   948:             bne.s *               * branch if Z clear
01:0000095C 0F60            	   949:             bchg.b d7,-(a0)           *
01:0000095E 67FE            	   950:             beq.s *               * branch if Z set
01:00000960 307C0103        	   951:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000964 4A20            	   952:             cmpi.b #$00,-(a0)
01:00000966 66FE            	   953:             bne.s *               * branch if Z clear
01:00000968 0C2000FE        	   954:             cmpi.b #$FE,-(a0)
01:0000096C 66FE            	   955:             bne.s *               * branch if Z clear
01:0000096E 4A20            	   956:             cmpi.b #$00,-(a0)
01:00000970 66FE            	   957:             bne.s *               * branch if Z clear
                            	   958: 
                            	   959: *             EA = n(An)  - BYTE only
01:00000972 307C0100        	   960:             move.l #$00000100,a0      * point to memory to address
01:00000976 10FC0001        	   961:             move.b #$01,(a0)+         * populate test data
01:0000097A 10FC00FC        	   962:             move.b #$FC,(a0)+         * populate test data
01:0000097E 10FC0080        	   963:             move.b #$80,(a0)+         * populate test data
01:00000982 307C0100        	   964:             move.l #$00000100,a0      * point to memory to address
01:00000986 0B50            	   965:             bchg.b d5,0(a0)
01:00000988 67FE            	   966:             beq.s *               * branch if Z set
01:0000098A 0D680001        	   967:             bchg.b d6,1(a0)           *
01:0000098E 66FE            	   968:             bne.s *               * branch if Z clear
01:00000990 0F680002        	   969:             bchg.b d7,2(a0)           *
01:00000994 67FE            	   970:             beq.s *               * branch if Z set
01:00000996 307C0100        	   971:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000099A 4A18            	   972:             cmpi.b #$00,(a0)+
01:0000099C 66FE            	   973:             bne.s *               * branch if Z clear
01:0000099E 0C1800FE        	   974:             cmpi.b #$FE,(a0)+
01:000009A2 66FE            	   975:             bne.s *               * branch if Z clear
01:000009A4 4A18            	   976:             cmpi.b #$00,(a0)+
01:000009A6 66FE            	   977:             bne.s *               * branch if Z clear
                            	   978: 
                            	   979: *             EA = n(An,R.W)  - BYTE only
01:000009A8 307C0100        	   980:             move.l #$00000100,a0      * point to memory to address
01:000009AC 93C9            	   981:             move.l #$00000000,a1      * point to memory to address
01:000009AE 347C0001        	   982:             move.l #$00000001,a2      * point to memory to address
01:000009B2 7000            	   983:             moveq  #$00000000,d0      * point to memory to address
01:000009B4 7201            	   984:             moveq  #$00000001,d1      * point to memory to address
01:000009B6 0B700000        	   985:             bchg.b d5,0(a0,d0.w)
01:000009BA 66FE            	   986:             bne.s *               * branch if Z clear
01:000009BC 0D701000        	   987:             bchg.b d6,0(a0,d1.w)      *
01:000009C0 67FE            	   988:             beq.s *               * branch if Z set
01:000009C2 0F701001        	   989:             bchg.b d7,1(a0,d1.w)      *
01:000009C6 66FE            	   990:             bne.s *               * branch if Z clear
                            	   991: *             EA = n(An,R.L)  - BYTE only
01:000009C8 0B700800        	   992:             bchg.b d5,0(a0,d0.l)
01:000009CC 67FE            	   993:             beq.s *               * branch if Z set
01:000009CE 0D701800        	   994:             bchg.b d6,0(a0,d1.l)      *
01:000009D2 66FE            	   995:             bne.s *               * branch if Z clear
01:000009D4 0F701801        	   996:             bchg.b d7,1(a0,d1.l)      *
01:000009D8 67FE            	   997:             beq.s *               * branch if Z set
                            	   998: *             EA = n(An,A.W)  - BYTE only
01:000009DA 0B709000        	   999:             bchg.b d5,0(a0,a1.w)
01:000009DE 66FE            	  1000:             bne.s *               * branch if Z clear
01:000009E0 0D70A000        	  1001:             bchg.b d6,0(a0,a2.w)      *
01:000009E4 67FE            	  1002:             beq.s *               * branch if Z set
01:000009E6 0F70A001        	  1003:             bchg.b d7,1(a0,a2.w)      *
01:000009EA 66FE            	  1004:             bne.s *               * branch if Z clear
                            	  1005: *             EA = n(An,A.L)  - BYTE only
01:000009EC 0B709800        	  1006:             bchg.b d5,0(a0,a1.l)
01:000009F0 67FE            	  1007:             beq.s *               * branch if Z set
01:000009F2 0D70A800        	  1008:             bchg.b d6,0(a0,a2.l)      *
01:000009F6 66FE            	  1009:             bne.s *               * branch if Z clear
01:000009F8 0F70A801        	  1010:             bchg.b d7,1(a0,a2.l)      *
01:000009FC 67FE            	  1011:             beq.s *               * branch if Z set
01:000009FE 4A18            	  1012:             cmpi.b #$00,(a0)+
01:00000A00 66FE            	  1013:             bne.s *               * branch if Z clear
                            	  1014: 
                            	  1015: *             EA = x.W  - BYTE only
01:00000A02 0B780100        	  1016:             bchg.b d5,$0100
01:00000A06 66FE            	  1017:             bne.s *               * branch if Z clear
01:00000A08 0D780101        	  1018:             bchg.b d6,$0101           *
01:00000A0C 67FE            	  1019:             beq.s *               * branch if Z set
01:00000A0E 0F780102        	  1020:             bchg.b d7,$0102           *
01:00000A12 66FE            	  1021:             bne.s *               * branch if Z clear
01:00000A14 0C1800FC        	  1022:             cmpi.b #$FC,(a0)+
01:00000A18 66FE            	  1023:             bne.s *               * branch if Z clear
                            	  1024: 
                            	  1025: *             EA = x.L  - BYTE only
01:00000A1A 207C0000F100    	  1026:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A20 10FC0001        	  1027:             move.b #$01,(a0)+         * populate test data
01:00000A24 10FC00FC        	  1028:             move.b #$FC,(a0)+         * populate test data
01:00000A28 10FC0080        	  1029:             move.b #$80,(a0)+         * populate test data
01:00000A2C 0B790000F100    	  1030:             bchg.b d5,$F100
01:00000A32 67FE            	  1031:             beq.s *               * branch if Z set
01:00000A34 0D790000F101    	  1032:             bchg.b d6,$F101       *
01:00000A3A 66FE            	  1033:             bne.s *               * branch if Z clear
01:00000A3C 0F790000F102    	  1034:             bchg.b d7,$F102       *
01:00000A42 67FE            	  1035:             beq.s *               * branch if Z set
01:00000A44 207C0000F101    	  1036:             move.l #$F101,a0      * point to memory to address 0x100
01:00000A4A 0C1000FE        	  1037:             cmpi.b #$FE,(a0)
01:00000A4E 66FE            	  1038:             bne.s *               * branch if Z clear
                            	  1039: 
                            	  1040: 
01:00000A50 4E75            	  1041:     rts
                            	  1042: 
                            	  1043: *-----------------------------------------------------------
                            	  1044: *-----------------------------------------------------------
                            	  1045: * OPCODE : BCLR
                            	  1046: *-----------------------------------------------------------
                            	  1047: *-----------------------------------------------------------
                            	  1048: op_BCLR:
                            	  1049: 
                            	  1050: 
                            	  1051: *  Bit Number.s Static
                            	  1052: 
                            	  1053: *             EA = Dn  - LONG only
01:00000A52 203CFF0000FF    	  1054:             move.l #$FF0000FF,d0      * populate test data
01:00000A58 08800000        	  1055:             bclr.l #0,d0
01:00000A5C 67FE            	  1056:             beq.s *               * branch if Z set
01:00000A5E 08800001        	  1057:             bclr.l #1,d0              *
01:00000A62 67FE            	  1058:             beq.s *               * branch if Z set
01:00000A64 0880000F        	  1059:             bclr.l #15,d0             *
01:00000A68 66FE            	  1060:             bne.s *               * branch if Z clear
01:00000A6A 0880001F        	  1061:             bclr.l #31,d0             *
01:00000A6E 67FE            	  1062:             beq.s *               * branch if Z set
01:00000A70 0C807F0000FC    	  1063:             cmpi.l #$7F0000FC,d0
01:00000A76 66FE            	  1064:             bne.s *               * branch if Z clear
                            	  1065: 
                            	  1066: 
                            	  1067: *             EA = (An)  - BYTE only
01:00000A78 307C0100        	  1068:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A7C 10BC000F        	  1069:             move.b #$0F,(a0)          * populate test data
01:00000A80 08900000        	  1070:             bclr.b #0,(a0)
01:00000A84 67FE            	  1071:             beq.s *               * branch if Z set
01:00000A86 08900007        	  1072:             bclr.b #7,(a0)            *
01:00000A8A 66FE            	  1073:             bne.s *               * branch if Z clear
01:00000A8C 0C10000E        	  1074:             cmpi.b #$0E,(a0)
01:00000A90 66FE            	  1075:             bne.s *               * branch if Z clear
                            	  1076: 
                            	  1077: *             EA = (An)+  - BYTE only
01:00000A92 307C0100        	  1078:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A96 10FC0001        	  1079:             move.b #$01,(a0)+         * populate test data
01:00000A9A 4218            	  1080:             move.b #$00,(a0)+         * populate test data
01:00000A9C 307C0100        	  1081:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AA0 08980000        	  1082:             bclr.b #0,(a0)+
01:00000AA4 67FE            	  1083:             beq.s *               * branch if Z set
01:00000AA6 08980001        	  1084:             bclr.b #1,(a0)+           *
01:00000AAA 66FE            	  1085:             bne.s *               * branch if Z clear
01:00000AAC 307C0100        	  1086:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AB0 4A18            	  1087:             cmpi.b #$00,(a0)+
01:00000AB2 66FE            	  1088:             bne.s *               * branch if Z clear
01:00000AB4 4A18            	  1089:             cmpi.b #$00,(a0)+
01:00000AB6 66FE            	  1090:             bne.s *               * branch if Z clear
                            	  1091: 
                            	  1092: 
                            	  1093: *             EA = -(An)  - BYTE only
01:00000AB8 307C0100        	  1094:             move.l #$00000100,a0      * point to memory to address
01:00000ABC 10FC0001        	  1095:             move.b #$01,(a0)+         * populate test data
01:00000AC0 10FC0080        	  1096:             move.b #$80,(a0)+         * populate test data
01:00000AC4 08A00007        	  1097:             bclr.b #7,-(a0)
01:00000AC8 67FE            	  1098:             beq.s *               * branch if Z set
01:00000ACA 08A00000        	  1099:             bclr.b #0,-(a0)           *
01:00000ACE 67FE            	  1100:             beq.s *               * branch if Z set
01:00000AD0 307C0102        	  1101:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000AD4 4A20            	  1102:             cmpi.b #$00,-(a0)
01:00000AD6 66FE            	  1103:             bne.s *               * branch if Z clear
01:00000AD8 4A20            	  1104:             cmpi.b #$00,-(a0)
01:00000ADA 66FE            	  1105:             bne.s *               * branch if Z clear
                            	  1106: 
                            	  1107: 
                            	  1108: *             EA = n(An)  - BYTE only
01:00000ADC 307C0100        	  1109:             move.l #$00000100,a0      * point to memory to address
01:00000AE0 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
01:00000AE4 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
01:00000AE8 307C0100        	  1112:             move.l #$00000100,a0      * point to memory to address
01:00000AEC 08900000        	  1113:             bclr.b #0,0(a0)
01:00000AF0 67FE            	  1114:             beq.s *               * branch if Z set
01:00000AF2 08A800040001    	  1115:             bclr.b #4,1(a0)           *
01:00000AF8 67FE            	  1116:             beq.s *               * branch if Z set
01:00000AFA 307C0100        	  1117:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AFE 0C1800FE        	  1118:             cmpi.b #$FE,(a0)+
01:00000B02 66FE            	  1119:             bne.s *               * branch if Z clear
01:00000B04 0C1800EF        	  1120:             cmpi.b #$EF,(a0)+
01:00000B08 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: 
                            	  1123: 
                            	  1124: *             EA = n(An,D.W)  - BYTE only
01:00000B0A 307C0100        	  1125:             move.l #$00000100,a0      * point to memory to address
01:00000B0E 93C9            	  1126:             move.l #$00000000,a1      * point to memory to address
01:00000B10 347C0001        	  1127:             move.l #$00000001,a2      * point to memory to address
01:00000B14 7000            	  1128:             moveq  #$00000000,d0      * point to memory to address
01:00000B16 7201            	  1129:             moveq  #$00000001,d1      * point to memory to address
01:00000B18 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
01:00000B1C 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
01:00000B20 307C0100        	  1132:             move.l #$00000100,a0      * point to memory to address
01:00000B24 08B000000000    	  1133:             bclr.b #0,0(a0,d0.w)
01:00000B2A 67FE            	  1134:             beq.s *               * branch if Z set
01:00000B2C 08B000011000    	  1135:             bclr.b #1,0(a0,d1.w)      *
01:00000B32 67FE            	  1136:             beq.s *               * branch if Z set
01:00000B34 08B000021001    	  1137:             bclr.b #2,1(a0,d1.w)      *
01:00000B3A 66FE            	  1138:             bne.s *               * branch if Z clear
                            	  1139: *             EA = n(An,D.L)  - BYTE only
01:00000B3C 08B000030800    	  1140:             bclr.b #3,0(a0,d0.l)
01:00000B42 67FE            	  1141:             beq.s *               * branch if Z set
01:00000B44 08B000041800    	  1142:             bclr.b #4,0(a0,d1.l)      *
01:00000B4A 67FE            	  1143:             beq.s *               * branch if Z set
01:00000B4C 08B000051801    	  1144:             bclr.b #5,1(a0,d1.l)      *
01:00000B52 66FE            	  1145:             bne.s *               * branch if Z clear
                            	  1146: *             EA = n(An,A.W)  - BYTE only
01:00000B54 08B000069000    	  1147:             bclr.b #6,0(a0,a1.w)
01:00000B5A 67FE            	  1148:             beq.s *               * branch if Z set
01:00000B5C 08B00001A000    	  1149:             bclr.b #1,0(a0,a2.w)      *
01:00000B62 66FE            	  1150:             bne.s *               * branch if Z clear
01:00000B64 08B00007A001    	  1151:             bclr.b #7,1(a0,a2.w)      *
01:00000B6A 67FE            	  1152:             beq.s *               * branch if Z set
                            	  1153: *             EA = n(An,A.L)  - BYTE only
01:00000B6C 08B000009800    	  1154:             bclr.b #0,0(a0,a1.l)
01:00000B72 66FE            	  1155:             bne.s *               * branch if Z clear
01:00000B74 08B00000A800    	  1156:             bclr.b #0,0(a0,a2.l)      *
01:00000B7A 67FE            	  1157:             beq.s *               * branch if Z set
01:00000B7C 08B00001A801    	  1158:             bclr.b #1,1(a0,a2.l)      *
01:00000B82 66FE            	  1159:             bne.s *               * branch if Z clear
01:00000B84 307C0100        	  1160:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B88 0C1800B6        	  1161:             cmpi.b #$B6,(a0)+
01:00000B8C 66FE            	  1162:             bne.s *               * branch if Z clear
01:00000B8E 0C1800EC        	  1163:             cmpi.b #$EC,(a0)+
01:00000B92 66FE            	  1164:             bne.s *               * branch if Z clear
01:00000B94 0C180059        	  1165:             cmpi.b #$59,(a0)+
01:00000B98 67FE            	  1166:             beq.s *               * branch if Z set
                            	  1167: 
                            	  1168: 
                            	  1169: *             EA = x.W  - BYTE only
01:00000B9A 307C0100        	  1170:             move.l #$00000100,a0      * point to memory to address
01:00000B9E 10FC00FF        	  1171:             move.b #$FF,(a0)+         * populate test data
01:00000BA2 08B800000100    	  1172:             bclr.b #0,$0100
01:00000BA8 67FE            	  1173:             beq.s *               * branch if Z set
01:00000BAA 08B800010100    	  1174:             bclr.b #1,$0100           *
01:00000BB0 67FE            	  1175:             beq.s *               * branch if Z set
01:00000BB2 307C0100        	  1176:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BB6 0C1800FC        	  1177:             cmpi.b #$FC,(a0)+
01:00000BBA 66FE            	  1178:             bne.s *               * branch if Z clear
                            	  1179: 
                            	  1180: 
                            	  1181: *             EA = x.L  - BYTE only
01:00000BBC 207C0000F100    	  1182:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BC2 10BC00FF        	  1183:             move.b #$FF,(a0)          * populate test data
01:00000BC6 08B900000000F100	  1184:             bclr.b #0,$F100
01:00000BCE 67FE            	  1185:             beq.s *               * branch if Z set
01:00000BD0 08B900010000F100	  1186:             bclr.b #1,$F100       *
01:00000BD8 67FE            	  1187:             beq.s *               * branch if Z set
01:00000BDA 08B900020000F100	  1188:             bclr.b #2,$F100       *
01:00000BE2 67FE            	  1189:             beq.s *               * branch if Z set
01:00000BE4 207C0000F100    	  1190:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BEA 0C1800F8        	  1191:             cmpi.b #$F8,(a0)+
01:00000BEE 66FE            	  1192:             bne.s *               * branch if Z clear
                            	  1193: 
                            	  1194: 
                            	  1195: * Bit Number.s Dynamic
                            	  1196: 
                            	  1197: *             EA = Dn  - LONG only
01:00000BF0 203CFF00FF00    	  1198:             move.l #$FF00FF00,d0      * populate test data
01:00000BF6 7A00            	  1199:             move.l #0,d5              * populate bit.s number to test
01:00000BF8 7C01            	  1200:             move.l #1,d6              * populate bit.s number to test
01:00000BFA 7E1F            	  1201:             move.l #31,d7              * populate bit.s number to test
                            	  1202: 
01:00000BFC 0B80            	  1203:             bclr.l d5,d0
01:00000BFE 66FE            	  1204:             bne.s *               * branch if Z clear
01:00000C00 0D80            	  1205:             bclr.l d6,d0              *
01:00000C02 66FE            	  1206:             bne.s *               * branch if Z clear
01:00000C04 0F80            	  1207:             bclr.l d7,d0             *
01:00000C06 67FE            	  1208:             beq.s *               * branch if Z set
01:00000C08 0C807F00FF00    	  1209:             cmpi.l #$7F00FF00,d0
01:00000C0E 66FE            	  1210:             bne.s *               * branch if Z clear
                            	  1211: 
                            	  1212: 
                            	  1213: *             EA = (An)  - BYTE only
01:00000C10 7A00            	  1214:             move.l #0,d5              * populate bit.s number to test
01:00000C12 7C01            	  1215:             move.l #1,d6              * populate bit.s number to test
01:00000C14 7E07            	  1216:             move.l #7,d7              * populate bit.s number to test
01:00000C16 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C1A 10BC0081        	  1218:             move.b #$81,(a0)          * populate test data
01:00000C1E 0B90            	  1219:             bclr.b d5,(a0)
01:00000C20 67FE            	  1220:             beq.s *               * branch if Z set
01:00000C22 0D90            	  1221:             bclr.b d6,(a0)            *
01:00000C24 66FE            	  1222:             bne.s *               * branch if Z clear
01:00000C26 0F90            	  1223:             bclr.b d7,(a0)            *
01:00000C28 67FE            	  1224:             beq.s *               * branch if Z set
01:00000C2A 4A10            	  1225:             cmpi.b #$00,(a0)
01:00000C2C 66FE            	  1226:             bne.s *               * branch if Z clear
                            	  1227: 
                            	  1228: 
                            	  1229: *             EA = (An)+  - BYTE only
01:00000C2E 307C0100        	  1230:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C32 10FC0001        	  1231:             move.b #$01,(a0)+         * populate test data
01:00000C36 10FC00FC        	  1232:             move.b #$FC,(a0)+         * populate test data
01:00000C3A 10FC0080        	  1233:             move.b #$80,(a0)+         * populate test data
01:00000C3E 307C0100        	  1234:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C42 0B98            	  1235:             bclr.b d5,(a0)+
01:00000C44 67FE            	  1236:             beq.s *               * branch if Z set
01:00000C46 0D98            	  1237:             bclr.b d6,(a0)+           *
01:00000C48 66FE            	  1238:             bne.s *               * branch if Z clear
01:00000C4A 0F98            	  1239:             bclr.b d7,(a0)+           *
01:00000C4C 67FE            	  1240:             beq.s *               * branch if Z set
01:00000C4E 307C0100        	  1241:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C52 4A18            	  1242:             cmpi.b #$00,(a0)+
01:00000C54 66FE            	  1243:             bne.s *               * branch if Z clear
01:00000C56 0C1800FC        	  1244:             cmpi.b #$FC,(a0)+
01:00000C5A 66FE            	  1245:             bne.s *               * branch if Z clear
01:00000C5C 4A18            	  1246:             cmpi.b #$00,(a0)+
01:00000C5E 66FE            	  1247:             bne.s *               * branch if Z clear
                            	  1248: 
                            	  1249: *             EA = -(An)  - BYTE only
01:00000C60 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
01:00000C64 10FC0080        	  1251:             move.b #$80,(a0)+         * populate test data
01:00000C68 10FC00FC        	  1252:             move.b #$FC,(a0)+         * populate test data
01:00000C6C 10FC0001        	  1253:             move.b #$01,(a0)+         * populate test data
01:00000C70 307C0103        	  1254:             move.l #$00000103,a0      * point to memory to address
01:00000C74 0BA0            	  1255:             bclr.b d5,-(a0)
01:00000C76 67FE            	  1256:             beq.s *               * branch if Z set
01:00000C78 0DA0            	  1257:             bclr.b d6,-(a0)           *
01:00000C7A 66FE            	  1258:             bne.s *               * branch if Z clear
01:00000C7C 0FA0            	  1259:             bclr.b d7,-(a0)           *
01:00000C7E 67FE            	  1260:             beq.s *               * branch if Z set
01:00000C80 307C0103        	  1261:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000C84 4A20            	  1262:             cmpi.b #$00,-(a0)
01:00000C86 66FE            	  1263:             bne.s *               * branch if Z clear
01:00000C88 0C2000FC        	  1264:             cmpi.b #$FC,-(a0)
01:00000C8C 66FE            	  1265:             bne.s *               * branch if Z clear
01:00000C8E 4A20            	  1266:             cmpi.b #$00,-(a0)
01:00000C90 66FE            	  1267:             bne.s *               * branch if Z clear
                            	  1268: 
                            	  1269: *             EA = n(An)  - BYTE only
01:00000C92 307C0100        	  1270:             move.l #$00000100,a0      * point to memory to address
01:00000C96 10FC0001        	  1271:             move.b #$01,(a0)+         * populate test data
01:00000C9A 10FC00FC        	  1272:             move.b #$FC,(a0)+         * populate test data
01:00000C9E 10FC0080        	  1273:             move.b #$80,(a0)+         * populate test data
01:00000CA2 307C0100        	  1274:             move.l #$00000100,a0      * point to memory to address
01:00000CA6 0B90            	  1275:             bclr.b d5,0(a0)
01:00000CA8 67FE            	  1276:             beq.s *               * branch if Z set
01:00000CAA 0DA80001        	  1277:             bclr.b d6,1(a0)           *
01:00000CAE 66FE            	  1278:             bne.s *               * branch if Z clear
01:00000CB0 0FA80002        	  1279:             bclr.b d7,2(a0)           *
01:00000CB4 67FE            	  1280:             beq.s *               * branch if Z set
01:00000CB6 307C0100        	  1281:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CBA 4A18            	  1282:             cmpi.b #$00,(a0)+
01:00000CBC 66FE            	  1283:             bne.s *               * branch if Z clear
01:00000CBE 0C1800FC        	  1284:             cmpi.b #$FC,(a0)+
01:00000CC2 66FE            	  1285:             bne.s *               * branch if Z clear
01:00000CC4 4A18            	  1286:             cmpi.b #$00,(a0)+
01:00000CC6 66FE            	  1287:             bne.s *               * branch if Z clear
                            	  1288: 
                            	  1289: *             EA = n(An,R.W)  - BYTE only
01:00000CC8 307C0100        	  1290:             move.l #$00000100,a0      * point to memory to address
01:00000CCC 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
01:00000CD0 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000CD4 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
01:00000CD8 307C0103        	  1294:             move.l #$00000103,a0      * point to memory to address
01:00000CDC 307C0100        	  1295:             move.l #$00000100,a0      * point to memory to address
01:00000CE0 93C9            	  1296:             move.l #$00000000,a1      * point to memory to address
01:00000CE2 347C0001        	  1297:             move.l #$00000001,a2      * point to memory to address
01:00000CE6 7000            	  1298:             moveq  #$00000000,d0      * point to memory to address
01:00000CE8 7201            	  1299:             moveq  #$00000001,d1      * point to memory to address
01:00000CEA 0BB00000        	  1300:             bclr.b d5,0(a0,d0.w)
01:00000CEE 67FE            	  1301:             beq.s *               * branch if Z set
01:00000CF0 0DB01000        	  1302:             bclr.b d6,0(a0,d1.w)      *
01:00000CF4 67FE            	  1303:             beq.s *               * branch if Z set
01:00000CF6 0FB01001        	  1304:             bclr.b d7,1(a0,d1.w)      *
01:00000CFA 67FE            	  1305:             beq.s *               * branch if Z set
                            	  1306: *             EA = n(An,R.L)  - BYTE only
01:00000CFC 0BB00800        	  1307:             bclr.b d5,0(a0,d0.l)
01:00000D00 66FE            	  1308:             bne.s *               * branch if Z clear
01:00000D02 0DB01800        	  1309:             bclr.b d6,0(a0,d1.l)      *
01:00000D06 66FE            	  1310:             bne.s *               * branch if Z clear
01:00000D08 0FB01801        	  1311:             bclr.b d7,1(a0,d1.l)      *
01:00000D0C 66FE            	  1312:             bne.s *               * branch if Z clear
                            	  1313: *             EA = n(An,A.W)  - BYTE only
01:00000D0E 0BB09000        	  1314:             bclr.b d5,0(a0,a1.w)
01:00000D12 66FE            	  1315:             bne.s *               * branch if Z clear
01:00000D14 0DB0A000        	  1316:             bclr.b d6,0(a0,a2.w)      *
01:00000D18 66FE            	  1317:             bne.s *               * branch if Z clear
01:00000D1A 0FB0A001        	  1318:             bclr.b d7,1(a0,a2.w)      *
01:00000D1E 66FE            	  1319:             bne.s *               * branch if Z clear
                            	  1320: *             EA = n(An,A.L)  - BYTE only
01:00000D20 0BB09800        	  1321:             bclr.b d5,0(a0,a1.l)
01:00000D24 66FE            	  1322:             bne.s *               * branch if Z clear
01:00000D26 0DB0A800        	  1323:             bclr.b d6,0(a0,a2.l)      *
01:00000D2A 66FE            	  1324:             bne.s *               * branch if Z clear
01:00000D2C 0FB0A801        	  1325:             bclr.b d7,1(a0,a2.l)      *
01:00000D30 66FE            	  1326:             bne.s *               * branch if Z clear
01:00000D32 307C0100        	  1327:             move.l #$00000100,a0      * point to memory to address
01:00000D36 0C1000FE        	  1328:             cmpi.b #$FE,(a0)
01:00000D3A 66FE            	  1329:             bne.s *               * branch if Z clear
                            	  1330: 
                            	  1331: *             EA = x.W  - BYTE only
01:00000D3C 307C0100        	  1332:             move.l #$00000100,a0      * point to memory to address
01:00000D40 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
01:00000D44 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000D48 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
01:00000D4C 0BB80100        	  1336:             bclr.b d5,$0100
01:00000D50 67FE            	  1337:             beq.s *               * branch if Z set
01:00000D52 0DB80101        	  1338:             bclr.b d6,$0101           *
01:00000D56 67FE            	  1339:             beq.s *               * branch if Z set
01:00000D58 0FB80102        	  1340:             bclr.b d7,$0102           *
01:00000D5C 67FE            	  1341:             beq.s *               * branch if Z set
01:00000D5E 307C0100        	  1342:             move.l #$00000100,a0      * point to memory to address
01:00000D62 0C1800FE        	  1343:             cmpi.b #$FE,(a0)+
01:00000D66 66FE            	  1344:             bne.s *               * branch if Z clear
                            	  1345: 
                            	  1346: *             EA = x.L  - BYTE only
01:00000D68 207C0000F100    	  1347:             move.l #$F100,a0      * point to memory to address 0x100
01:00000D6E 10FC0001        	  1348:             move.b #$01,(a0)+         * populate test data
01:00000D72 10FC00FC        	  1349:             move.b #$FC,(a0)+         * populate test data
01:00000D76 10FC0080        	  1350:             move.b #$80,(a0)+         * populate test data
01:00000D7A 0BB90000F100    	  1351:             bclr.b d5,$F100
01:00000D80 67FE            	  1352:             beq.s *               * branch if Z set
01:00000D82 0DB90000F101    	  1353:             bclr.b d6,$F101       *
01:00000D88 66FE            	  1354:             bne.s *               * branch if Z clear
01:00000D8A 0FB90000F102    	  1355:             bclr.b d7,$F102       *
01:00000D90 67FE            	  1356:             beq.s *               * branch if Z set
01:00000D92 207C0000F101    	  1357:             move.l #$F101,a0      * point to memory to address 0x100
01:00000D98 0C1000FC        	  1358:             cmpi.b #$FC,(a0)
01:00000D9C 66FE            	  1359:             bne.s *               * branch if Z clear
                            	  1360: 
                            	  1361: 
                            	  1362: 
01:00000D9E 4E75            	  1363:     rts
                            	  1364: 
                            	  1365: *-----------------------------------------------------------
                            	  1366: *-----------------------------------------------------------
                            	  1367: * OPCODE : BSET
                            	  1368: *-----------------------------------------------------------
                            	  1369: *-----------------------------------------------------------
                            	  1370: op_BSET:
                            	  1371: 
                            	  1372: 
                            	  1373: *  Bit Number.s Static
                            	  1374: 
                            	  1375: *             EA = Dn  - LONG only
01:00000DA0 7000            	  1376:             moveq  #$00000000,d0      * populate test data
01:00000DA2 08C00000        	  1377:             bset.l #0,d0
01:00000DA6 66FE            	  1378:             bne.s *               * branch if Z clear
01:00000DA8 08C00001        	  1379:             bset.l #1,d0              *
01:00000DAC 66FE            	  1380:             bne.s *               * branch if Z clear
01:00000DAE 08C0000F        	  1381:             bset.l #15,d0             *
01:00000DB2 66FE            	  1382:             bne.s *               * branch if Z clear
01:00000DB4 08C0001F        	  1383:             bset.l #31,d0             *
01:00000DB8 66FE            	  1384:             bne.s *               * branch if Z clear
01:00000DBA 0C8080008003    	  1385:             cmpi.l #$80008003,d0
01:00000DC0 66FE            	  1386:             bne.s *               * branch if Z clear
                            	  1387: 
                            	  1388: 
                            	  1389: *             EA = (An)  - BYTE only
01:00000DC2 307C0100        	  1390:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DC6 4210            	  1391:             move.b #$00,(a0)          * populate test data
01:00000DC8 08D00000        	  1392:             bset.b #0,(a0)
01:00000DCC 66FE            	  1393:             bne.s *               * branch if Z clear
01:00000DCE 08D00007        	  1394:             bset.b #7,(a0)            *
01:00000DD2 66FE            	  1395:             bne.s *               * branch if Z clear
01:00000DD4 0C100081        	  1396:             cmpi.b #$81,(a0)
01:00000DD8 66FE            	  1397:             bne.s *               * branch if Z clear
                            	  1398: 
                            	  1399: *             EA = (An)+  - BYTE only
01:00000DDA 307C0100        	  1400:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DDE 4218            	  1401:             move.b #$00,(a0)+         * populate test data
01:00000DE0 4218            	  1402:             move.b #$00,(a0)+         * populate test data
01:00000DE2 307C0100        	  1403:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DE6 08D80000        	  1404:             bset.b #0,(a0)+
01:00000DEA 66FE            	  1405:             bne.s *               * branch if Z clear
01:00000DEC 08D80001        	  1406:             bset.b #1,(a0)+           *
01:00000DF0 66FE            	  1407:             bne.s *               * branch if Z clear
01:00000DF2 307C0100        	  1408:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DF6 0C180001        	  1409:             cmpi.b #$01,(a0)+
01:00000DFA 66FE            	  1410:             bne.s *               * branch if Z clear
01:00000DFC 0C180002        	  1411:             cmpi.b #$02,(a0)+
01:00000E00 66FE            	  1412:             bne.s *               * branch if Z clear
                            	  1413: 
                            	  1414: 
                            	  1415: *             EA = -(An)  - BYTE only
01:00000E02 307C0100        	  1416:             move.l #$00000100,a0      * point to memory to address
01:00000E06 4218            	  1417:             move.b #$00,(a0)+         * populate test data
01:00000E08 4218            	  1418:             move.b #$00,(a0)+         * populate test data
01:00000E0A 08E00007        	  1419:             bset.b #7,-(a0)
01:00000E0E 66FE            	  1420:             bne.s *               * branch if Z clear
01:00000E10 08E00000        	  1421:             bset.b #0,-(a0)           *
01:00000E14 66FE            	  1422:             bne.s *               * branch if Z clear
01:00000E16 307C0102        	  1423:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000E1A 0C200080        	  1424:             cmpi.b #$80,-(a0)
01:00000E1E 66FE            	  1425:             bne.s *               * branch if Z clear
01:00000E20 0C200001        	  1426:             cmpi.b #$01,-(a0)
01:00000E24 66FE            	  1427:             bne.s *               * branch if Z clear
                            	  1428: 
                            	  1429: 
                            	  1430: *             EA = n(An)  - BYTE only
01:00000E26 307C0100        	  1431:             move.l #$00000100,a0      * point to memory to address
01:00000E2A 4218            	  1432:             move.b #$00,(a0)+         * populate test data
01:00000E2C 4218            	  1433:             move.b #$00,(a0)+         * populate test data
01:00000E2E 307C0100        	  1434:             move.l #$00000100,a0      * point to memory to address
01:00000E32 08D00000        	  1435:             bset.b #0,0(a0)
01:00000E36 66FE            	  1436:             bne.s *               * branch if Z clear
01:00000E38 08E800040001    	  1437:             bset.b #4,1(a0)           *
01:00000E3E 66FE            	  1438:             bne.s *               * branch if Z clear
01:00000E40 307C0100        	  1439:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E44 0C180001        	  1440:             cmpi.b #$01,(a0)+
01:00000E48 66FE            	  1441:             bne.s *               * branch if Z clear
01:00000E4A 0C180010        	  1442:             cmpi.b #$10,(a0)+
01:00000E4E 66FE            	  1443:             bne.s *               * branch if Z clear
                            	  1444: 
                            	  1445: 
                            	  1446: *             EA = n(An,D.W)  - BYTE only
01:00000E50 307C0100        	  1447:             move.l #$00000100,a0      * point to memory to address
01:00000E54 93C9            	  1448:             move.l #$00000000,a1      * point to memory to address
01:00000E56 347C0004        	  1449:             move.l #$00000004,a2      * point to memory to address
01:00000E5A 7000            	  1450:             moveq  #$00000000,d0      * point to memory to address
01:00000E5C 7201            	  1451:             moveq  #$00000001,d1      * point to memory to address
01:00000E5E 4218            	  1452:             move.b #$00,(a0)+         * populate test data
01:00000E60 4218            	  1453:             move.b #$00,(a0)+         * populate test data
01:00000E62 4218            	  1454:             move.b #$00,(a0)+         * populate test data
01:00000E64 4218            	  1455:             move.b #$00,(a0)+         * populate test data
01:00000E66 4218            	  1456:             move.b #$00,(a0)+         * populate test data
01:00000E68 4218            	  1457:             move.b #$00,(a0)+         * populate test data
01:00000E6A 4218            	  1458:             move.b #$00,(a0)+         * populate test data
01:00000E6C 4218            	  1459:             move.b #$00,(a0)+         * populate test data
01:00000E6E 4218            	  1460:             move.b #$00,(a0)+         * populate test data
01:00000E70 4218            	  1461:             move.b #$00,(a0)+         * populate test data
01:00000E72 307C0100        	  1462:             move.l #$00000100,a0      * point to memory to address
01:00000E76 08F000000000    	  1463:             bset.b #0,0(a0,d0.w)
01:00000E7C 66FE            	  1464:             bne.s *               * branch if Z clear
01:00000E7E 08F000011000    	  1465:             bset.b #1,0(a0,d1.w)      *
01:00000E84 66FE            	  1466:             bne.s *               * branch if Z clear
01:00000E86 08F000021001    	  1467:             bset.b #2,1(a0,d1.w)      *
01:00000E8C 66FE            	  1468:             bne.s *               * branch if Z clear
                            	  1469: *             EA = n(An,D.L)  - BYTE only
01:00000E8E 08F000030802    	  1470:             bset.b #3,2(a0,d0.l)
01:00000E94 66FE            	  1471:             bne.s *               * branch if Z clear
01:00000E96 08F000041800    	  1472:             bset.b #4,0(a0,d1.l)      *
01:00000E9C 66FE            	  1473:             bne.s *               * branch if Z clear
01:00000E9E 08F000051801    	  1474:             bset.b #5,1(a0,d1.l)      *
01:00000EA4 66FE            	  1475:             bne.s *               * branch if Z clear
                            	  1476: *             EA = n(An,A.W)  - BYTE only
01:00000EA6 08F000069000    	  1477:             bset.b #6,0(a0,a1.w)
01:00000EAC 66FE            	  1478:             bne.s *               * branch if Z clear
01:00000EAE 08F00001A000    	  1479:             bset.b #1,0(a0,a2.w)      *
01:00000EB4 66FE            	  1480:             bne.s *               * branch if Z clear
01:00000EB6 08F00007A001    	  1481:             bset.b #7,1(a0,a2.w)      *
01:00000EBC 66FE            	  1482:             bne.s *               * branch if Z clear
                            	  1483: *             EA = n(An,A.L)  - BYTE only
01:00000EBE 08F00000A802    	  1484:             bset.b #0,2(a0,a2.l)
01:00000EC4 66FE            	  1485:             bne.s *               * branch if Z clear
01:00000EC6 08F00000A803    	  1486:             bset.b #0,3(a0,a2.l)      *
01:00000ECC 66FE            	  1487:             bne.s *               * branch if Z clear
01:00000ECE 08F00001A804    	  1488:             bset.b #1,4(a0,a2.l)      *
01:00000ED4 66FE            	  1489:             bne.s *               * branch if Z clear
01:00000ED6 307C0100        	  1490:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EDA 0C9841122C00    	  1491:             cmpi.l #$41122C00,(a0)+
01:00000EE0 66FE            	  1492:             bne.s *               * branch if Z clear
01:00000EE2 0C9802800101    	  1493:             cmpi.l #$02800101,(a0)+
01:00000EE8 66FE            	  1494:             bne.s *
                            	  1495: 
                            	  1496: 
                            	  1497: 
                            	  1498: *             EA = x.W  - BYTE only
01:00000EEA 307C0100        	  1499:             move.l #$00000100,a0      * point to memory to address
01:00000EEE 4218            	  1500:             move.b #$00,(a0)+         * populate test data
01:00000EF0 08F800000100    	  1501:             bset.b #0,$0100
01:00000EF6 66FE            	  1502:             bne.s *               * branch if Z clear
01:00000EF8 08F800010100    	  1503:             bset.b #1,$0100           *
01:00000EFE 66FE            	  1504:             bne.s *               * branch if Z clear
01:00000F00 307C0100        	  1505:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F04 0C180003        	  1506:             cmpi.b #$03,(a0)+
01:00000F08 66FE            	  1507:             bne.s *
                            	  1508: 
                            	  1509: 
                            	  1510: *             EA = x.L  - BYTE only
01:00000F0A 207C0000F100    	  1511:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F10 4210            	  1512:             move.b #$00,(a0)          * populate test data
01:00000F12 08F900000000F100	  1513:             bset.b #0,$F100
01:00000F1A 66FE            	  1514:             bne.s *               * branch if Z clear
01:00000F1C 08F900010000F100	  1515:             bset.b #1,$F100       *
01:00000F24 66FE            	  1516:             bne.s *               * branch if Z clear
01:00000F26 08F900020000F100	  1517:             bset.b #2,$F100       *
01:00000F2E 66FE            	  1518:             bne.s *               * branch if Z clear
01:00000F30 207C0000F100    	  1519:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F36 0C180007        	  1520:             cmpi.b #$07,(a0)+
01:00000F3A 66FE            	  1521:             bne.s *
                            	  1522: 
                            	  1523: 
                            	  1524: * Bit Number.s Dynamic
                            	  1525: 
                            	  1526: *             EA = Dn  - LONG only
01:00000F3C 7000            	  1527:             moveq  #$00000000,d0      * populate test data
01:00000F3E 7A00            	  1528:             move.l #0,d5              * populate bit.s number to test
01:00000F40 7C01            	  1529:             move.l #1,d6              * populate bit.s number to test
01:00000F42 7E1F            	  1530:             move.l #31,d7              * populate bit.s number to test
                            	  1531: 
01:00000F44 0BC0            	  1532:             bset.l d5,d0
01:00000F46 66FE            	  1533:             bne.s *               * branch if Z clear
01:00000F48 0DC0            	  1534:             bset.l d6,d0              *
01:00000F4A 66FE            	  1535:             bne.s *               * branch if Z clear
01:00000F4C 0FC0            	  1536:             bset.l d7,d0             *
01:00000F4E 66FE            	  1537:             bne.s *               * branch if Z clear
01:00000F50 0C8080000003    	  1538:             cmpi.l #$80000003,d0
01:00000F56 66FE            	  1539:             bne.s *               * branch if Z clear
                            	  1540: 
                            	  1541: 
                            	  1542: *             EA = (An)  - BYTE only
01:00000F58 7A00            	  1543:             move.l #0,d5              * populate bit.s number to test
01:00000F5A 7C01            	  1544:             move.l #1,d6              * populate bit.s number to test
01:00000F5C 7E07            	  1545:             move.l #7,d7              * populate bit.s number to test
01:00000F5E 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F62 4210            	  1547:             move.b #$00,(a0)          * populate test data
01:00000F64 0BD0            	  1548:             bset.b d5,(a0)
01:00000F66 66FE            	  1549:             bne.s *               * branch if Z clear
01:00000F68 0DD0            	  1550:             bset.b d6,(a0)            *
01:00000F6A 66FE            	  1551:             bne.s *               * branch if Z clear
01:00000F6C 0FD0            	  1552:             bset.b d7,(a0)            *
01:00000F6E 66FE            	  1553:             bne.s *               * branch if Z clear
01:00000F70 0C100083        	  1554:             cmpi.b #$83,(a0)
01:00000F74 66FE            	  1555:             bne.s *               * branch if Z clear
                            	  1556: 
                            	  1557: 
                            	  1558: *             EA = (An)+  - BYTE only
01:00000F76 307C0100        	  1559:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F7A 4218            	  1560:             move.b #$00,(a0)+         * populate test data
01:00000F7C 4218            	  1561:             move.b #$00,(a0)+         * populate test data
01:00000F7E 4218            	  1562:             move.b #$00,(a0)+         * populate test data
01:00000F80 307C0100        	  1563:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F84 0BD8            	  1564:             bset.b d5,(a0)+
01:00000F86 66FE            	  1565:             bne.s *               * branch if Z clear
01:00000F88 0DD8            	  1566:             bset.b d6,(a0)+           *
01:00000F8A 66FE            	  1567:             bne.s *               * branch if Z clear
01:00000F8C 0FD8            	  1568:             bset.b d7,(a0)+           *
01:00000F8E 66FE            	  1569:             bne.s *               * branch if Z clear
01:00000F90 307C0100        	  1570:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F94 0C180001        	  1571:             cmpi.b #$01,(a0)+
01:00000F98 66FE            	  1572:             bne.s *               * branch if Z clear
01:00000F9A 0C180002        	  1573:             cmpi.b #$02,(a0)+
01:00000F9E 66FE            	  1574:             bne.s *               * branch if Z clear
01:00000FA0 0C180080        	  1575:             cmpi.b #$80,(a0)+
01:00000FA4 66FE            	  1576:             bne.s *               * branch if Z clear
                            	  1577: 
                            	  1578: *             EA = -(An)  - BYTE only
01:00000FA6 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
01:00000FAA 4218            	  1580:             move.b #$00,(a0)+         * populate test data
01:00000FAC 4218            	  1581:             move.b #$00,(a0)+         * populate test data
01:00000FAE 4218            	  1582:             move.b #$00,(a0)+         * populate test data
01:00000FB0 307C0103        	  1583:             move.l #$00000103,a0      * point to memory to address
01:00000FB4 0BE0            	  1584:             bset.b d5,-(a0)
01:00000FB6 66FE            	  1585:             bne.s *               * branch if Z clear
01:00000FB8 0DE0            	  1586:             bset.b d6,-(a0)           *
01:00000FBA 66FE            	  1587:             bne.s *               * branch if Z clear
01:00000FBC 0FE0            	  1588:             bset.b d7,-(a0)           *
01:00000FBE 66FE            	  1589:             bne.s *               * branch if Z clear
01:00000FC0 307C0103        	  1590:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000FC4 0C200001        	  1591:             cmpi.b #$01,-(a0)
01:00000FC8 66FE            	  1592:             bne.s *               * branch if Z clear
01:00000FCA 0C200002        	  1593:             cmpi.b #$02,-(a0)
01:00000FCE 66FE            	  1594:             bne.s *               * branch if Z clear
01:00000FD0 0C200080        	  1595:             cmpi.b #$80,-(a0)
01:00000FD4 66FE            	  1596:             bne.s *               * branch if Z clear
                            	  1597: 
                            	  1598: *             EA = n(An)  - BYTE only
01:00000FD6 307C0100        	  1599:             move.l #$00000100,a0      * point to memory to address
01:00000FDA 4218            	  1600:             move.b #$00,(a0)+         * populate test data
01:00000FDC 4218            	  1601:             move.b #$00,(a0)+         * populate test data
01:00000FDE 4218            	  1602:             move.b #$00,(a0)+         * populate test data
01:00000FE0 307C0100        	  1603:             move.l #$00000100,a0      * point to memory to address
01:00000FE4 0BD0            	  1604:             bset.b d5,0(a0)
01:00000FE6 66FE            	  1605:             bne.s *               * branch if Z clear
01:00000FE8 0DE80001        	  1606:             bset.b d6,1(a0)           *
01:00000FEC 66FE            	  1607:             bne.s *               * branch if Z clear
01:00000FEE 0FE80002        	  1608:             bset.b d7,2(a0)           *
01:00000FF2 66FE            	  1609:             bne.s *               * branch if Z clear
01:00000FF4 307C0100        	  1610:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FF8 0C180001        	  1611:             cmpi.b #$01,(a0)+
01:00000FFC 66FE            	  1612:             bne.s *               * branch if Z clear
01:00000FFE 0C180002        	  1613:             cmpi.b #$02,(a0)+
01:00001002 66FE            	  1614:             bne.s *               * branch if Z clear
01:00001004 0C180080        	  1615:             cmpi.b #$80,(a0)+
01:00001008 66FE            	  1616:             bne.s *               * branch if Z clear
                            	  1617: 
                            	  1618: *             EA = n(An,R.W)  - BYTE only
01:0000100A 307C0100        	  1619:             move.l #$00000100,a0      * point to memory to address
01:0000100E 4218            	  1620:             move.b #$00,(a0)+         * populate test data
01:00001010 4218            	  1621:             move.b #$00,(a0)+         * populate test data
01:00001012 4218            	  1622:             move.b #$00,(a0)+         * populate test data
01:00001014 4218            	  1623:             move.b #$00,(a0)+         * populate test data
01:00001016 4218            	  1624:             move.b #$00,(a0)+         * populate test data
01:00001018 4218            	  1625:             move.b #$00,(a0)+         * populate test data
01:0000101A 4218            	  1626:             move.b #$00,(a0)+         * populate test data
01:0000101C 4218            	  1627:             move.b #$00,(a0)+         * populate test data
01:0000101E 4218            	  1628:             move.b #$00,(a0)+         * populate test data
01:00001020 4218            	  1629:             move.b #$00,(a0)+         * populate test data
01:00001022 4218            	  1630:             move.b #$00,(a0)+         * populate test data
01:00001024 4218            	  1631:             move.b #$00,(a0)+         * populate test data
01:00001026 307C0100        	  1632:             move.l #$00000100,a0      * point to memory to address
01:0000102A 93C9            	  1633:             move.l #$00000000,a1      * point to memory to address
01:0000102C 347C0001        	  1634:             move.l #$00000001,a2      * point to memory to address
01:00001030 7000            	  1635:             moveq  #$00000000,d0      * point to memory to address
01:00001032 7201            	  1636:             moveq  #$00000001,d1      * point to memory to address
01:00001034 0BF00000        	  1637:             bset.b d5,0(a0,d0.w)
01:00001038 66FE            	  1638:             bne.s *               * branch if Z clear
01:0000103A 0DF01000        	  1639:             bset.b d6,0(a0,d1.w)      *
01:0000103E 66FE            	  1640:             bne.s *               * branch if Z clear
01:00001040 0FF01001        	  1641:             bset.b d7,1(a0,d1.w)      *
01:00001044 66FE            	  1642:             bne.s *               * branch if Z clear
                            	  1643: *             EA = n(An,R.L)  - BYTE only
01:00001046 0BF00802        	  1644:             bset.b d5,2(a0,d0.l)
01:0000104A 66FE            	  1645:             bne.s *               * branch if Z clear
01:0000104C 0DF01803        	  1646:             bset.b d6,3(a0,d1.l)      *
01:00001050 66FE            	  1647:             bne.s *               * branch if Z clear
01:00001052 0FF01804        	  1648:             bset.b d7,4(a0,d1.l)      *
01:00001056 66FE            	  1649:             bne.s *               * branch if Z clear
                            	  1650: *             EA = n(An,A.W)  - BYTE only
01:00001058 0BF09005        	  1651:             bset.b d5,5(a0,a1.w)
01:0000105C 66FE            	  1652:             bne.s *               * branch if Z clear
01:0000105E 0DF0A006        	  1653:             bset.b d6,6(a0,a2.w)      *
01:00001062 66FE            	  1654:             bne.s *               * branch if Z clear
01:00001064 0FF0A007        	  1655:             bset.b d7,7(a0,a2.w)      *
01:00001068 66FE            	  1656:             bne.s *               * branch if Z clear
                            	  1657: *             EA = n(An,A.L)  - BYTE only
01:0000106A 0BF09808        	  1658:             bset.b d5,8(a0,a1.l)
01:0000106E 66FE            	  1659:             bne.s *               * branch if Z clear
01:00001070 0DF0A809        	  1660:             bset.b d6,9(a0,a2.l)      *
01:00001074 66FE            	  1661:             bne.s *               * branch if Z clear
01:00001076 0FF0A80A        	  1662:             bset.b d7,10(a0,a2.l)      *
01:0000107A 66FE            	  1663:             bne.s *               * branch if Z clear
01:0000107C 307C0100        	  1664:             move.l #$00000100,a0      * point to memory to address 0x100
01:00001080 0C9801028100    	  1665:             cmpi.l #$01028100,(a0)+
01:00001086 66FE            	  1666:             bne.s *               * branch if Z clear
01:00001088 0C9802810002    	  1667:             cmpi.l #$02810002,(a0)+
01:0000108E 66FE            	  1668:             bne.s *
                            	  1669: 
                            	  1670: 
                            	  1671: *             EA = x.W  - BYTE only
01:00001090 307C0100        	  1672:             move.l #$00000100,a0      * point to memory to address
01:00001094 4218            	  1673:             move.b #$00,(a0)+         * populate test data
01:00001096 4218            	  1674:             move.b #$00,(a0)+         * populate test data
01:00001098 4218            	  1675:             move.b #$00,(a0)+         * populate test data
01:0000109A 0BF80100        	  1676:             bset.b d5,$0100
01:0000109E 66FE            	  1677:             bne.s *               * branch if Z clear
01:000010A0 0DF80100        	  1678:             bset.b d6,$0100           *
01:000010A4 66FE            	  1679:             bne.s *               * branch if Z clear
01:000010A6 0FF80100        	  1680:             bset.b d7,$0100           *
01:000010AA 66FE            	  1681:             bne.s *               * branch if Z clear
01:000010AC 307C0100        	  1682:             move.l #$00000100,a0      * point to memory to address
01:000010B0 0C180083        	  1683:             cmpi.b #$83,(a0)+
01:000010B4 66FE            	  1684:             bne.s *               * branch if Z clear
                            	  1685: 
                            	  1686: *             EA = x.L  - BYTE only
01:000010B6 207C0000F100    	  1687:             move.l #$F100,a0      * point to memory to address 0x100
01:000010BC 4218            	  1688:             move.b #$00,(a0)+         * populate test data
01:000010BE 4218            	  1689:             move.b #$00,(a0)+         * populate test data
01:000010C0 4218            	  1690:             move.b #$00,(a0)+         * populate test data
01:000010C2 0BF90000F100    	  1691:             bset.b d5,$F100
01:000010C8 66FE            	  1692:             bne.s *               * branch if Z clear
01:000010CA 0DF90000F100    	  1693:             bset.b d6,$F100       *
01:000010D0 66FE            	  1694:             bne.s *               * branch if Z clear
01:000010D2 0FF90000F100    	  1695:             bset.b d7,$F100       *
01:000010D8 66FE            	  1696:             bne.s *               * branch if Z clear
01:000010DA 207C0000F100    	  1697:             move.l #$F100,a0      * point to memory to address 0x100
01:000010E0 0C100083        	  1698:             cmpi.b #$83,(a0)
01:000010E4 66FE            	  1699:             bne.s *               * branch if Z clear
                            	  1700: 
                            	  1701: 
01:000010E6 4E75            	  1702:     rts
                            	  1703: 
                            	  1704: *-----------------------------------------------------------
                            	  1705: *-----------------------------------------------------------
                            	  1706: * OPCODE : MOVEP
                            	  1707: *-----------------------------------------------------------
                            	  1708: *-----------------------------------------------------------
                            	  1709: op_MOVEP:
                            	  1710: 
                            	  1711: * Dn --> x(An)
01:000010E8 307C0100        	  1712:             move.l #$00000100,a0
01:000010EC 203C12345678    	  1713:             move.l #$12345678,d0
01:000010F2 223CAABBCCDD    	  1714:             move.l #$AABBCCDD,d1
01:000010F8 4290            	  1715:             move.l #0,(a0)
01:000010FA 42A80004        	  1716:             move.l #0,4(a0)
                            	  1717: 
01:000010FE 01880000        	  1718:             movep.w d0,0(a0)      * even offset
01:00001102 03880001        	  1719:             movep.w d1,1(a0)      * odd offset
                            	  1720: 
01:00001106 01C80004        	  1721:             movep.l d0,4(a0)      * even offset
01:0000110A 03C80005        	  1722:             movep.l d1,5(a0)      * odd offset
                            	  1723: 
01:0000110E 0C9056CC78DD    	  1724:             cmpi.l #$56CC78DD,(a0)
01:00001114 66FE            	  1725:             bne.s *
01:00001116 0CA812AA34BB0004	  1726:             cmpi.l #$12AA34BB,4(a0)
01:0000111E 66FE            	  1727:             bne.s *
01:00001120 0CA856CC78DD0008	  1728:             cmpi.l #$56CC78DD,8(a0)
01:00001128 66FE            	  1729:             bne.s *
                            	  1730: 
                            	  1731: 
                            	  1732: * x(An)--> Dn
01:0000112A 203C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d0
01:00001130 223C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d1
01:00001136 243C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d2
01:0000113C 263C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d3
                            	  1737: 
01:00001142 01080000        	  1738:             movep.w 0(a0),d0      * even offset
01:00001146 03080001        	  1739:             movep.w 1(a0),d1      * odd offset
                            	  1740: 
01:0000114A 05480004        	  1741:             movep.l 4(a0),d2      * even offset
01:0000114E 07480005        	  1742:             movep.l 5(a0),d3      * odd offset
                            	  1743: 
01:00001152 0C805A5A5678    	  1744:             cmpi.l #$5a5a5678,d0
01:00001158 66FE            	  1745:             bne.s *
01:0000115A 0C815A5ACCDD    	  1746:             cmpi.l #$5a5aCCDD,d1
01:00001160 66FE            	  1747:             bne.s *
01:00001162 0C8212345678    	  1748:             cmpi.l #$12345678,d2
01:00001168 66FE            	  1749:             bne.s *
01:0000116A 0C83AABBCCDD    	  1750:             cmpi.l #$AABBCCDD,d3
01:00001170 66FE            	  1751:             bne.s *
                            	  1752: 
01:00001172 4E75            	  1753:             rts
                            	  1754: 
                            	  1755: 
                            	  1756: 
                            	  1757: *-----------------------------------------------------------
                            	  1758: *-----------------------------------------------------------
                            	  1759: * OPCODE : BOOL_I
                            	  1760: *-----------------------------------------------------------
                            	  1761: *-----------------------------------------------------------
                            	  1762: op_BOOL_I:
                            	  1763: 
                            	  1764: *     Dn -- BYTE
01:00001174 203C12345678    	  1765:             move.l #$12345678,d0
01:0000117A 44FC000F        	  1766:             move.w #$000F,CCR          * pre-set Flags
01:0000117E 000000FF        	  1767:             ori.b  #$FF,d0
01:00001182 0A00005A        	  1768:             eori.b #$5A,d0
01:00001186 020000F0        	  1769:             andi.b #$F0,d0
01:0000118A 69FE            	  1770:             bvs.s *                       * Check V,C are cleared
01:0000118C 65FE            	  1771:             bcs.s *
01:0000118E 6AFE            	  1772:             bpl.s *                       * Verify if N flag is set
01:00001190 4200            	  1773:             andi.b #$00,d0
01:00001192 6BFE            	  1774:             bmi.s *                       * Verify if N flag is cleared
01:00001194 66FE            	  1775:             bne.s *                       * Verify if Z flag is set
                            	  1776: 
                            	  1777: *     Dn -- WORD
01:00001196 223C12345678    	  1778:             move.l #$12345678,d1
01:0000119C 44FC000F        	  1779:             move.w #$000F,CCR          * pre-set Flags
01:000011A0 0041FFFF        	  1780:             ori.w  #$FFFF,d1
01:000011A4 0A415A5A        	  1781:             eori.w #$5A5A,d1
01:000011A8 0241F0F0        	  1782:             andi.w #$F0F0,d1
01:000011AC 69FE            	  1783:             bvs.s *                       * Check V,C are cleared
01:000011AE 65FE            	  1784:             bcs.s *
01:000011B0 6AFE            	  1785:             bpl.s *                       * Verify if N flag is set
01:000011B2 4241            	  1786:             andi.w #$0000,d1
01:000011B4 6BFE            	  1787:             bmi.s *                       * Verify if N flag is cleared
01:000011B6 66FE            	  1788:             bne.s *                       * Verify if Z flag is set
                            	  1789: 
                            	  1790: *     Dn -- LONG
01:000011B8 243C12345678    	  1791:             move.l #$12345678,d2
01:000011BE 44FC000F        	  1792:             move.w #$000F,CCR          * pre-set Flags
01:000011C2 0082FFFFFFFF    	  1793:             ori.l  #$FFFFFFFF,d2
01:000011C8 0A825A5A5A5A    	  1794:             eori.l #$5A5A5A5A,d2
01:000011CE 0282F0F0F0F0    	  1795:             andi.l #$F0F0F0F0,d2
01:000011D4 69FE            	  1796:             bvs.s *                       * Check V,C are cleared
01:000011D6 65FE            	  1797:             bcs.s *
01:000011D8 6AFE            	  1798:             bpl.s *                       * Verify if N flag is set
01:000011DA 4282            	  1799:             andi.l #$00000000,d2
01:000011DC 6BFE            	  1800:             bmi.s *                       * Verify if N flag is cleared
01:000011DE 66FE            	  1801:             bne.s *                       * Verify if Z flag is set
                            	  1802: 
                            	  1803: 
                            	  1804: *     (An) -- BYTE
01:000011E0 307C0100        	  1805:             move.l #$00000100,a0
01:000011E4 20BC12345678    	  1806:             move.l #$12345678,(a0)
01:000011EA 44FC000F        	  1807:             move.w #$000F,CCR          * pre-set Flags
01:000011EE 001000FF        	  1808:             ori.b  #$FF,(a0)
01:000011F2 0A10005A        	  1809:             eori.b #$5A,(a0)
01:000011F6 021000F0        	  1810:             andi.b #$F0,(a0)
01:000011FA 69FE            	  1811:             bvs.s *                       * Check V,C are cleared
01:000011FC 65FE            	  1812:             bcs.s *
01:000011FE 6AFE            	  1813:             bpl.s *                       * Verify if N flag is set
01:00001200 4210            	  1814:             andi.b #$00,(a0)
01:00001202 6BFE            	  1815:             bmi.s *                       * Verify if N flag is cleared
01:00001204 66FE            	  1816:             bne.s *                       * Verify if Z flag is set
01:00001206 4A10            	  1817:             cmpi.b #$00,(a0)
01:00001208 66FE            	  1818:             bne.s *                       * Verify if Z flag is set
                            	  1819: 
                            	  1820: *     (An) -- WORD
01:0000120A 20BC12345678    	  1821:             move.l #$12345678,(a0)
01:00001210 44FC000F        	  1822:             move.w #$000F,CCR          * pre-set Flags
01:00001214 0050FFFF        	  1823:             ori.w  #$FFFF,(a0)
01:00001218 0A505A5A        	  1824:             eori.w #$5A5A,(a0)
01:0000121C 0250F0F0        	  1825:             andi.w #$F0F0,(a0)
01:00001220 69FE            	  1826:             bvs.s *                       * Check V,C are cleared
01:00001222 65FE            	  1827:             bcs.s *
01:00001224 6AFE            	  1828:             bpl.s *                       * Verify if N flag is set
01:00001226 4250            	  1829:             andi.w #$0000,(a0)
01:00001228 6BFE            	  1830:             bmi.s *                       * Verify if N flag is cleared
01:0000122A 66FE            	  1831:             bne.s *                       * Verify if Z flag is set
01:0000122C 4A50            	  1832:             cmpi.w #$00,(a0)
01:0000122E 66FE            	  1833:             bne.s *                       * Verify if Z flag is set
                            	  1834: 
                            	  1835: *     (An) -- LONG
01:00001230 20BC12345678    	  1836:             move.l #$12345678,(a0)
01:00001236 44FC000F        	  1837:             move.w #$000F,CCR          * pre-set Flags
01:0000123A 0090FFFFFFFF    	  1838:             ori.l  #$FFFFFFFF,(a0)
01:00001240 0A905A5A5A5A    	  1839:             eori.l #$5A5A5A5A,(a0)
01:00001246 0290F0F0F0F0    	  1840:             andi.l #$F0F0F0F0,(a0)
01:0000124C 69FE            	  1841:             bvs.s *                       * Check V,C are cleared
01:0000124E 65FE            	  1842:             bcs.s *
01:00001250 6AFE            	  1843:             bpl.s *                       * Verify if N flag is set
01:00001252 4290            	  1844:             andi.l #$00000000,(a0)
01:00001254 6BFE            	  1845:             bmi.s *                       * Verify if N flag is cleared
01:00001256 66FE            	  1846:             bne.s *                       * Verify if Z flag is set
01:00001258 4A90            	  1847:             cmpi.l #$00,(a0)
01:0000125A 66FE            	  1848:             bne.s *                       * Verify if Z flag is set
                            	  1849: 
                            	  1850: 
                            	  1851: 
                            	  1852: *     (An)+ -- BYTE
01:0000125C 307C0100        	  1853:             move.l #$00000100,a0
01:00001260 20BC00A5FF88    	  1854:             move.l #$00A5FF88,(a0)
01:00001266 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
01:0000126A 001800F5        	  1857:             ori.b  #$F5,(a0)+
01:0000126E 6AFE            	  1858:             bpl.s *                       * Verify if N flag is set
01:00001270 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
01:00001272 4618            	  1861:             eori.b #$FF,(a0)+
01:00001274 6BFE            	  1862:             bmi.s *                       * Verify if N flag is cleared
01:00001276 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
01:00001278 021800AA        	  1865:             andi.b #$AA,(a0)+
01:0000127C 6AFE            	  1866:             bpl.s *                       * Verify if N flag is set
01:0000127E 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
01:00001280 307C0100        	  1869:             move.l #$00000100,a0
01:00001284 0C90F55AAA88    	  1870:             cmpi.l #$F55AAA88,(a0)
01:0000128A 66FE            	  1871:             bne.s *                       * Verify if Z flag is set
                            	  1872: 
                            	  1873: 
                            	  1874: *     (An)+ -- WORD
01:0000128C 307C0100        	  1875:             move.l #$00000100,a0
01:00001290 327C0104        	  1876:             move.l #$00000104,a1
01:00001294 20BC00005A5A    	  1877:             move.l #$00005a5a,(a0)
01:0000129A 22BC12345678    	  1878:             move.l #$12345678,(a1)
01:000012A0 44FC000F        	  1879:             move.w #$000F,CCR          * pre-set Flags
                            	  1880: 
01:000012A4 00585678        	  1881:             ori.w  #$5678,(a0)+
01:000012A8 6BFE            	  1882:             bmi.s *                       * Verify if N flag is cleared
01:000012AA 67FE            	  1883:             beq.s *                       * Verify if Z flag is cleared
                            	  1884: 
01:000012AC 4658            	  1885:             eori.w #$FFFF,(a0)+
01:000012AE 6AFE            	  1886:             bpl.s *                       * Verify if N flag is set
01:000012B0 67FE            	  1887:             beq.s *                       * Verify if Z flag is cleared
                            	  1888: 
01:000012B2 0258A55A        	  1889:             andi.w #$A55A,(a0)+
01:000012B6 6BFE            	  1890:             bmi.s *                       * Verify if N flag is cleared
01:000012B8 67FE            	  1891:             beq.s *                       * Verify if Z flag is cleared
                            	  1892: 
01:000012BA 307C0100        	  1893:             move.l #$00000100,a0
01:000012BE 0C905678A5A5    	  1894:             cmpi.l #$5678a5a5,(a0)
01:000012C4 307C0104        	  1895:             move.l #$00000104,a0
01:000012C8 0C9000105678    	  1896:             cmpi.l #$00105678,(a0)
01:000012CE 66FE            	  1897:             bne.s *                       * Verify if Z flag is set
                            	  1898: 
                            	  1899: *     (An)+ -- LONG
01:000012D0 307C0100        	  1900:             move.l #$00000100,a0
01:000012D4 4298            	  1901:             move.l #$00000000,(a0)+
01:000012D6 20FC5A5A5A5A    	  1902:             move.l #$5a5a5a5a,(a0)+
01:000012DC 20FCFFFFFFFF    	  1903:             move.l #$FFFFFFFF,(a0)+
01:000012E2 307C0100        	  1904:             move.l #$00000100,a0
01:000012E6 44FC000F        	  1905:             move.w #$000F,CCR          * pre-set Flags
                            	  1906: 
01:000012EA 009812345678    	  1907:             ori.l  #$12345678,(a0)+
01:000012F0 6BFE            	  1908:             bmi.s *                       * Verify if N flag is cleared
01:000012F2 67FE            	  1909:             beq.s *                       * Verify if Z flag is cleared
                            	  1910: 
01:000012F4 4698            	  1911:             eori.l #$FFFFFFFF,(a0)+
01:000012F6 6AFE            	  1912:             bpl.s *                       * Verify if N flag is set
01:000012F8 67FE            	  1913:             beq.s *                       * Verify if Z flag is cleared
                            	  1914: 
01:000012FA 0298A5A5A55A    	  1915:             andi.l #$A5A5A55A,(a0)+
01:00001300 6AFE            	  1916:             bpl.s *                       * Verify if N flag is set
01:00001302 67FE            	  1917:             beq.s *                       * Verify if Z flag is cleared
                            	  1918: 
01:00001304 307C0100        	  1919:             move.l #$00000100,a0
01:00001308 0C9812345678    	  1920:             cmpi.l #$12345678,(a0)+
01:0000130E 0C98A5A5A5A5    	  1921:             cmpi.l #$a5a5a5a5,(a0)+
01:00001314 0C98A5A5A55A    	  1922:             cmpi.l #$a5a5a55a,(a0)+
01:0000131A 66FE            	  1923:             bne.s *                       * Verify if Z flag is set
                            	  1924: 
01:0000131C 4E75            	  1925:             rts
                            	  1926: 
                            	  1927: 
                            	  1928: *-----------------------------------------------------------
                            	  1929: *-----------------------------------------------------------
                            	  1930: * OPCODE : BSR
                            	  1931: *-----------------------------------------------------------
                            	  1932: *-----------------------------------------------------------
                            	  1933: 
                            	  1934: 
01:0000131E 223C11111111    	  1935: BSR_CLOSE1:     move.l #$11111111,d1
01:00001324 4E75            	  1936:                 rts
                            	  1937: 
                            	  1938: 
                            	  1939: 
01:00001326 61F6            	  1940: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:00001328 612A            	  1941:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:0000132A 6100EF04        	  1942:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:0000132E 61001440        	  1943:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1944: 
01:00001332 0C8111111111    	  1945:                 cmpi.l #$11111111,d1
01:00001338 66FE            	  1946:                 bne.s *
01:0000133A 0C8222222222    	  1947:                 cmpi.l #$22222222,d2
01:00001340 66FE            	  1948:                 bne.s *
01:00001342 0C8333333333    	  1949:                 cmpi.l #$33333333,d3
01:00001348 66FE            	  1950:                 bne.s *
01:0000134A 0C8444444444    	  1951:                 cmpi.l #$44444444,d4
01:00001350 66FE            	  1952:                 bne.s *
                            	  1953: 
01:00001352 4E75            	  1954:                 rts
                            	  1955: 
                            	  1956: 
01:00001354 243C22222222    	  1957: BSR_CLOSE2:     move.l #$22222222,d2
01:0000135A 4E75            	  1958:                 rts
                            	  1959: 
                            	  1960: *-----------------------------------------------------------
                            	  1961: *-----------------------------------------------------------
                            	  1962: * OPCODE : op_CMP_I
                            	  1963: *-----------------------------------------------------------
                            	  1964: *-----------------------------------------------------------
                            	  1965: op_CMP_I:
                            	  1966: 
01:0000135C 307C0100        	  1967:             move.l #$00000100,a0
01:00001360 20BC00000100    	  1968:             move.l #$00000100,(a0)
                            	  1969: 
                            	  1970: *     REGISTER - BYTE
01:00001366 7080            	  1971:             move.l #$FFFFFF80,d0
01:00001368 0C000080        	  1972:             cmpi.b #$80,d0
01:0000136C 66FE            	  1973:             bne.s *                       * Check Z Flag  beq/bne
01:0000136E 6BFE            	  1974:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001370 65FE            	  1975:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001372 69FE            	  1976:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1977: 
01:00001374 223CFFFFF000    	  1978:             move.l #$FFFFF000,d1
01:0000137A 4A01            	  1979:             cmpi.b #$00,d1
01:0000137C 66FE            	  1980:             bne.s *                       * Check Z Flag  beq/bne
01:0000137E 6BFE            	  1981:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001380 65FE            	  1982:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001382 69FE            	  1983:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1984: 
01:00001384 7481D442        	  1985:             move.l #$FFFFFF02,d2
01:00001388 0C0200FF        	  1986:             cmpi.b #$FF,d2
01:0000138C 67FE            	  1987:             beq.s *                       * Check Z Flag  beq/bne
01:0000138E 6BFE            	  1988:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001390 64FE            	  1989:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001392 69FE            	  1990:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1991: 
01:00001394 263CFFFFFF7F    	  1992:             move.l #$FFFFFF7F,d3
01:0000139A 0C0300FF        	  1993:             cmpi.b #$FF,d3
01:0000139E 67FE            	  1994:             beq.s *                       * Check Z Flag  beq/bne
01:000013A0 6AFE            	  1995:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013A2 64FE            	  1996:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013A4 68FE            	  1997:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1998: 
                            	  1999: 
                            	  2000: *     REGISTER - WORD
01:000013A6 203CFFFF8000    	  2001:             move.l #$FFFF8000,d0
01:000013AC 0C408000        	  2002:             cmpi.w #$8000,d0
01:000013B0 66FE            	  2003:             bne.s *                       * Check Z Flag  beq/bne
01:000013B2 6BFE            	  2004:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013B4 65FE            	  2005:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013B6 69FE            	  2006:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2007: 
01:000013B8 223CFFF00000    	  2008:             move.l #$FFF00000,d1
01:000013BE 4A41            	  2009:             cmpi.w #$0000,d1
01:000013C0 66FE            	  2010:             bne.s *                       * Check Z Flag  beq/bne
01:000013C2 6BFE            	  2011:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013C4 65FE            	  2012:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013C6 69FE            	  2013:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2014: 
01:000013C8 243CFFFF0002    	  2015:             move.l #$FFFF0002,d2
01:000013CE 0C42FFFF        	  2016:             cmpi.w #$FFFF,d2
01:000013D2 67FE            	  2017:             beq.s *                       * Check Z Flag  beq/bne
01:000013D4 6BFE            	  2018:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013D6 64FE            	  2019:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013D8 69FE            	  2020:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2021: 
01:000013DA 263CFFFF7FFF    	  2022:             move.l #$FFFF7FFF,d3
01:000013E0 0C43FFFF        	  2023:             cmpi.w #$FFFF,d3
01:000013E4 67FE            	  2024:             beq.s *                       * Check Z Flag  beq/bne
01:000013E6 6AFE            	  2025:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013E8 64FE            	  2026:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013EA 68FE            	  2027:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2028: 
                            	  2029: *     REGISTER - LONG
01:000013EC 203C80000000    	  2030:             move.l #$80000000,d0
01:000013F2 0C8080000000    	  2031:             cmpi.l #$80000000,d0
01:000013F8 66FE            	  2032:             bne.s *                       * Check Z Flag  beq/bne
01:000013FA 6BFE            	  2033:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013FC 65FE            	  2034:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013FE 69FE            	  2035:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2036: 
01:00001400 7200            	  2037:             moveq  #$00000000,d1
01:00001402 4A81            	  2038:             cmpi.l #$00000000,d1
01:00001404 66FE            	  2039:             bne.s *                       * Check Z Flag  beq/bne
01:00001406 6BFE            	  2040:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001408 65FE            	  2041:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000140A 69FE            	  2042:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2043: 
01:0000140C 7402            	  2044:             moveq  #$00000002,d2
01:0000140E 0C82FFFFFFFF    	  2045:             cmpi.l #$FFFFFFFF,d2
01:00001414 67FE            	  2046:             beq.s *                       * Check Z Flag  beq/bne
01:00001416 6BFE            	  2047:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001418 64FE            	  2048:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000141A 69FE            	  2049:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2050: 
01:0000141C 263C7FFFFFFF    	  2051:             move.l #$7FFFFFFF,d3
01:00001422 0C83FFFFFFFF    	  2052:             cmpi.l #$FFFFFFFF,d3
01:00001428 67FE            	  2053:             beq.s *                       * Check Z Flag  beq/bne
01:0000142A 6AFE            	  2054:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000142C 64FE            	  2055:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000142E 68FE            	  2056:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: *     EA=x(An,Dn) - BYTE
01:00001430 307C0100        	  2062:             move.l #$00000100,a0
01:00001434 7E04            	  2063:             moveq  #$00000004,d7
                            	  2064: 
01:00001436 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
01:0000143E 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
01:00001446 0C300080700F    	  2067:             cmpi.b #$80,15(a0,d7)
01:0000144C 66FE            	  2068:             bne.s *                       * Check Z Flag  beq/bne
01:0000144E 6BFE            	  2069:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001450 65FE            	  2070:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001452 69FE            	  2071:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2072: 
01:00001454 21BCFFFFF000700C	  2073:             move.l #$FFFFF000,12(a0,d7)
01:0000145C 4A30700F        	  2074:             cmpi.b #$00,15(a0,d7)
01:00001460 66FE            	  2075:             bne.s *                       * Check Z Flag  beq/bne
01:00001462 6BFE            	  2076:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001464 65FE            	  2077:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001466 69FE            	  2078:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2079: 
01:00001468 21BCFFFFFF02700C	  2080:             move.l #$FFFFFF02,12(a0,d7)
01:00001470 0C3000FF700F    	  2081:             cmpi.b #$FF,15(a0,d7)
01:00001476 67FE            	  2082:             beq.s *                       * Check Z Flag  beq/bne
01:00001478 6BFE            	  2083:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000147A 64FE            	  2084:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000147C 69FE            	  2085:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2086: 
01:0000147E 21BCFFFFFF7F700C	  2087:             move.l #$FFFFFF7F,12(a0,d7)
01:00001486 0C3000FF700F    	  2088:             cmpi.b #$FF,15(a0,d7)
01:0000148C 67FE            	  2089:             beq.s *                       * Check Z Flag  beq/bne
01:0000148E 6AFE            	  2090:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001490 64FE            	  2091:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001492 68FE            	  2092:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2093: 
                            	  2094: 
                            	  2095: *     EA=x(An,Dn) - WORD
01:00001494 21BCFFFF8000700C	  2096:             move.l #$FFFF8000,12(a0,d7)
01:0000149C 0C708000700E    	  2097:             cmpi.w #$8000,14(a0,d7)
01:000014A2 66FE            	  2098:             bne.s *                       * Check Z Flag  beq/bne
01:000014A4 6BFE            	  2099:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014A6 65FE            	  2100:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014A8 69FE            	  2101:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2102: 
01:000014AA 21BCFFF00000700C	  2103:             move.l #$FFF00000,12(a0,d7)
01:000014B2 4A70700E        	  2104:             cmpi.w #$0000,14(a0,d7)
01:000014B6 66FE            	  2105:             bne.s *                       * Check Z Flag  beq/bne
01:000014B8 6BFE            	  2106:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014BA 65FE            	  2107:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014BC 69FE            	  2108:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2109: 
01:000014BE 21BCFFFF0002700C	  2110:             move.l #$FFFF0002,12(a0,d7)
01:000014C6 0C70FFFF700E    	  2111:             cmpi.w #$FFFF,14(a0,d7)
01:000014CC 67FE            	  2112:             beq.s *                       * Check Z Flag  beq/bne
01:000014CE 6BFE            	  2113:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014D0 64FE            	  2114:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014D2 69FE            	  2115:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2116: 
01:000014D4 21BCFFFF7FFF700C	  2117:             move.l #$FFFF7FFF,12(a0,d7)
01:000014DC 0C70FFFF700E    	  2118:             cmpi.w #$FFFF,14(a0,d7)
01:000014E2 67FE            	  2119:             beq.s *                       * Check Z Flag  beq/bne
01:000014E4 6AFE            	  2120:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014E6 64FE            	  2121:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014E8 68FE            	  2122:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2123: 
                            	  2124: *     EA=x(An,Dn) - LONG
01:000014EA 21BC80000000700C	  2125:             move.l #$80000000,12(a0,d7)
01:000014F2 0CB080000000700C	  2126:             cmpi.l #$80000000,12(a0,d7)
01:000014FA 66FE            	  2127:             bne.s *                       * Check Z Flag  beq/bne
01:000014FC 6BFE            	  2128:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014FE 65FE            	  2129:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001500 69FE            	  2130:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2131: 
01:00001502 42B0700C        	  2132:             move.l #$00000000,12(a0,d7)
01:00001506 4AB0700C        	  2133:             cmpi.l #$00000000,12(a0,d7)
01:0000150A 66FE            	  2134:             bne.s *                       * Check Z Flag  beq/bne
01:0000150C 6BFE            	  2135:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000150E 65FE            	  2136:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001510 69FE            	  2137:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2138: 
01:00001512 21BC00000002700C	  2139:             move.l #$00000002,12(a0,d7)
01:0000151A 0CB0FFFFFFFF700C	  2140:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001522 67FE            	  2141:             beq.s *                       * Check Z Flag  beq/bne
01:00001524 6BFE            	  2142:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001526 64FE            	  2143:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001528 69FE            	  2144:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2145: 
01:0000152A 21BC7FFFFFFF700C	  2146:             move.l #$7FFFFFFF,12(a0,d7)
01:00001532 0CB0FFFFFFFF700C	  2147:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:0000153A 67FE            	  2148:             beq.s *                       * Check Z Flag  beq/bne
01:0000153C 6AFE            	  2149:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000153E 64FE            	  2150:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001540 68FE            	  2151:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2152: 
                            	  2153: 
                            	  2154: 
                            	  2155: 
01:00001542 4E75            	  2156:             rts
                            	  2157: 
                            	  2158: 
                            	  2159: 
                            	  2160: *-----------------------------------------------------------
                            	  2161: *-----------------------------------------------------------
                            	  2162: * OPCODE : ADD_I
                            	  2163: *-----------------------------------------------------------
                            	  2164: *-----------------------------------------------------------
                            	  2165: op_ADD_I:
                            	  2166: 
                            	  2167: *     EA = Dn  - Byte
01:00001544 203C12345678    	  2168:             move.l #$12345678,d0      * populate test data
01:0000154A 06000000        	  2169:             addi.b #0,d0
01:0000154E 67FE            	  2170:             beq.s *                       * Check Z Flag  beq/bne
01:00001550 6BFE            	  2171:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001552 65FE            	  2172:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001554 69FE            	  2173:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001556 06000010        	  2174:             addi.b #$10,d0
01:0000155A 67FE            	  2175:             beq.s *                       * Check Z Flag  beq/bne
01:0000155C 6AFE            	  2176:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000155E 65FE            	  2177:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001560 68FE            	  2178:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001562 060000A5        	  2179:             addi.b #$A5,d0
01:00001566 67FE            	  2180:             beq.s *                       * Check Z Flag  beq/bne
01:00001568 6BFE            	  2181:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000156A 64FE            	  2182:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000156C 68FE            	  2183:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000156E 0C00002D        	  2184:             cmpi.b #$2D,d0
01:00001572 66FE            	  2185:             bne.s *                       * Check Z Flag  beq/bne
                            	  2186: 
                            	  2187: *     EA = Dn  - WORD
01:00001574 203C12345678    	  2188:             move.l #$12345678,d0      * populate test data
01:0000157A 06400000        	  2189:             addi.w #0,d0
01:0000157E 67FE            	  2190:             beq.s *                       * Check Z Flag  beq/bne
01:00001580 6BFE            	  2191:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001582 65FE            	  2192:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001584 69FE            	  2193:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001586 06407000        	  2194:             addi.w #$7000,d0
01:0000158A 67FE            	  2195:             beq.s *                       * Check Z Flag  beq/bne
01:0000158C 6AFE            	  2196:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000158E 65FE            	  2197:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001590 68FE            	  2198:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001592 0640A55A        	  2199:             addi.w #$A55A,d0
01:00001596 67FE            	  2200:             beq.s *                       * Check Z Flag  beq/bne
01:00001598 6BFE            	  2201:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000159A 64FE            	  2202:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000159C 68FE            	  2203:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000159E 0C406BD2        	  2204:             cmpi.w #$6BD2,d0
01:000015A2 66FE            	  2205:             bne.s *                       * Check Z Flag  beq/bne
                            	  2206: 
                            	  2207: *     EA = Dn  - LONG
01:000015A4 203C12345678    	  2208:             move.l #$12345678,d0      * populate test data
01:000015AA 068000000000    	  2209:             addi.l #0,d0
01:000015B0 67FE            	  2210:             beq.s *                       * Check Z Flag  beq/bne
01:000015B2 6BFE            	  2211:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015B4 65FE            	  2212:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015B6 69FE            	  2213:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015B8 0680F0000000    	  2214:             addi.l #$F0000000,d0
01:000015BE 67FE            	  2215:             beq.s *                       * Check Z Flag  beq/bne
01:000015C0 6BFE            	  2216:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015C2 64FE            	  2217:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015C4 69FE            	  2218:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015C6 0680855AA55A    	  2219:             addi.l #$855AA55A,d0
01:000015CC 67FE            	  2220:             beq.s *                       * Check Z Flag  beq/bne
01:000015CE 6AFE            	  2221:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015D0 65FE            	  2222:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015D2 69FE            	  2223:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015D4 0680A0000000    	  2224:             addi.l #$A0000000,d0
01:000015DA 68FE            	  2225:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015DC 0C80278EFBD2    	  2226:             cmpi.l #$278EFBD2,d0
01:000015E2 66FE            	  2227:             bne.s *                       * Check Z Flag  beq/bne
                            	  2228: 
                            	  2229: 
                            	  2230: 
                            	  2231: *     EA = x.L  - Byte
01:000015E4 207C0000F100    	  2232:             move.l #$F100,a0      * populate test data
01:000015EA 20BC12345678    	  2233:             move.l #$12345678,(a0)     * populate test data
01:000015F0 063900000000F103	  2234:             addi.b #0,$F103
01:000015F8 67FE            	  2235:             beq.s *                       * Check Z Flag  beq/bne
01:000015FA 6BFE            	  2236:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015FC 65FE            	  2237:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015FE 69FE            	  2238:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001600 063900100000F103	  2239:             addi.b #$10,$F103
01:00001608 67FE            	  2240:             beq.s *                       * Check Z Flag  beq/bne
01:0000160A 6AFE            	  2241:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000160C 65FE            	  2242:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000160E 68FE            	  2243:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001610 063900A50000F103	  2244:             addi.b #$A5,$F103
01:00001618 67FE            	  2245:             beq.s *                       * Check Z Flag  beq/bne
01:0000161A 6BFE            	  2246:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000161C 64FE            	  2247:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000161E 68FE            	  2248:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001620 0C39002D0000F103	  2249:             cmpi.b #$2D,$F103
01:00001628 66FE            	  2250:             bne.s *                       * Check Z Flag  beq/bne
                            	  2251: 
                            	  2252: *     EA = x.L- WORD
01:0000162A 207C0000F100    	  2253:             move.l #$F100,a0      * populate test data
01:00001630 20BC12345678    	  2254:             move.l #$12345678,(a0)     * populate test data
01:00001636 067900000000F100	  2255:             addi.w #0,$F100
01:0000163E 67FE            	  2256:             beq.s *                       * Check Z Flag  beq/bne
01:00001640 6BFE            	  2257:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001642 65FE            	  2258:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001644 69FE            	  2259:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001646 067970000000F100	  2260:             addi.w #$7000,$F100
01:0000164E 67FE            	  2261:             beq.s *                       * Check Z Flag  beq/bne
01:00001650 6AFE            	  2262:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001652 65FE            	  2263:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001654 68FE            	  2264:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001656 0679A55A0000F100	  2265:             addi.w #$A55A,$F100
01:0000165E 67FE            	  2266:             beq.s *                       * Check Z Flag  beq/bne
01:00001660 6BFE            	  2267:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001662 64FE            	  2268:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001664 68FE            	  2269:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001666 0C79278E0000F100	  2270:             cmpi.w #$278E,$F100
01:0000166E 66FE            	  2271:             bne.s *                       * Check Z Flag  beq/bne
                            	  2272: 
                            	  2273: *     EA = x.L- LONG
01:00001670 23FC123456780000	  2274:             move.l #$12345678,$F100  * populate test data
01:00001678 F100
01:0000167A 06B9000000000000	  2275:             addi.l #0,$F100
01:00001682 F100
01:00001684 67FE            	  2276:             beq.s *                       * Check Z Flag  beq/bne
01:00001686 6BFE            	  2277:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001688 65FE            	  2278:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000168A 69FE            	  2279:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000168C 06B9F00000000000	  2280:             addi.l #$F0000000,$F100
01:00001694 F100
01:00001696 67FE            	  2281:             beq.s *                       * Check Z Flag  beq/bne
01:00001698 6BFE            	  2282:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000169A 64FE            	  2283:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000169C 69FE            	  2284:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000169E 06B9855AA55A0000	  2285:             addi.l #$855AA55A,$F100
01:000016A6 F100
01:000016A8 67FE            	  2286:             beq.s *                       * Check Z Flag  beq/bne
01:000016AA 6AFE            	  2287:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016AC 65FE            	  2288:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016AE 69FE            	  2289:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016B0 06B9A00000000000	  2290:             addi.l #$A0000000,$F100
01:000016B8 F100
01:000016BA 68FE            	  2291:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016BC 0CB9278EFBD20000	  2292:             cmpi.l #$278EFBD2,$F100
01:000016C4 F100
01:000016C6 66FE            	  2293:             bne.s *                       * Check Z Flag  beq/bne
                            	  2294: 
01:000016C8 4E75            	  2295:             rts
                            	  2296: 
                            	  2297: 
                            	  2298: *-----------------------------------------------------------
                            	  2299: *-----------------------------------------------------------
                            	  2300: * OPCODE : SUB_I
                            	  2301: *-----------------------------------------------------------
                            	  2302: *-----------------------------------------------------------
                            	  2303: op_SUB_I:
                            	  2304: 
                            	  2305: *     EA = Dn  - Byte
01:000016CA 203C12345678    	  2306:             move.l #$12345678,d0      * populate test data
01:000016D0 04000000        	  2307:             subi.b #0,d0
01:000016D4 67FE            	  2308:             beq.s *                       * Check Z Flag  beq/bne
01:000016D6 6BFE            	  2309:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016D8 65FE            	  2310:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016DA 69FE            	  2311:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016DC 04000010        	  2312:             subi.b #$10,d0
01:000016E0 67FE            	  2313:             beq.s *                       * Check Z Flag  beq/bne
01:000016E2 6BFE            	  2314:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016E4 65FE            	  2315:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016E6 69FE            	  2316:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016E8 040000A5        	  2317:             subi.b #$A5,d0
01:000016EC 67FE            	  2318:             beq.s *                       * Check Z Flag  beq/bne
01:000016EE 6AFE            	  2319:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016F0 64FE            	  2320:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016F2 68FE            	  2321:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016F4 0C0000C3        	  2322:             cmpi.b #$C3,d0
01:000016F8 66FE            	  2323:             bne.s *                       * Check Z Flag  beq/bne
                            	  2324: 
                            	  2325: *     EA = Dn  - WORD
01:000016FA 203C12345678    	  2326:             move.l #$12345678,d0      * populate test data
01:00001700 04400000        	  2327:             subi.w #0,d0
01:00001704 67FE            	  2328:             beq.s *                       * Check Z Flag  beq/bne
01:00001706 6BFE            	  2329:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001708 65FE            	  2330:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000170A 69FE            	  2331:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000170C 04407000        	  2332:             subi.w #$7000,d0
01:00001710 67FE            	  2333:             beq.s *                       * Check Z Flag  beq/bne
01:00001712 6AFE            	  2334:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001714 64FE            	  2335:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001716 69FE            	  2336:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001718 0440A55A        	  2337:             subi.w #$A55A,d0
01:0000171C 67FE            	  2338:             beq.s *                       * Check Z Flag  beq/bne
01:0000171E 6BFE            	  2339:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001720 65FE            	  2340:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001722 69FE            	  2341:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001724 0C40411E        	  2342:             cmpi.w #$411E,d0
01:00001728 66FE            	  2343:             bne.s *                       * Check Z Flag  beq/bne
                            	  2344: 
                            	  2345: *     EA = Dn  - LONG
01:0000172A 203C12345678    	  2346:             move.l #$12345678,d0      * populate test data
01:00001730 048000000000    	  2347:             subi.l #0,d0
01:00001736 67FE            	  2348:             beq.s *                       * Check Z Flag  beq/bne
01:00001738 6BFE            	  2349:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000173A 65FE            	  2350:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000173C 69FE            	  2351:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000173E 0480F0000000    	  2352:             subi.l #$F0000000,d0
01:00001744 67FE            	  2353:             beq.s *                       * Check Z Flag  beq/bne
01:00001746 6BFE            	  2354:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001748 64FE            	  2355:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000174A 69FE            	  2356:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000174C 0480855AA55A    	  2357:             subi.l #$855AA55A,d0
01:00001752 67FE            	  2358:             beq.s *                       * Check Z Flag  beq/bne
01:00001754 6AFE            	  2359:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001756 64FE            	  2360:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001758 68FE            	  2361:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000175A 0480A0000000    	  2362:             subi.l #$A0000000,d0
01:00001760 69FE            	  2363:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001762 0C80FCD9B11E    	  2364:             cmpi.l #$FCD9B11E,d0
01:00001768 66FE            	  2365:             bne.s *                       * Check Z Flag  beq/bne
                            	  2366: 
                            	  2367: 
                            	  2368: 
                            	  2369: *     EA = x.L  - Byte
01:0000176A 207C0000F100    	  2370:             move.l #$F100,a0      * populate test data
01:00001770 20BC12345678    	  2371:             move.l #$12345678,(a0)     * populate test data
01:00001776 043900000000F103	  2372:             subi.b #0,$F103
01:0000177E 67FE            	  2373:             beq.s *                       * Check Z Flag  beq/bne
01:00001780 6BFE            	  2374:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001782 65FE            	  2375:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001784 69FE            	  2376:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001786 043900100000F103	  2377:             subi.b #$10,$F103
01:0000178E 67FE            	  2378:             beq.s *                       * Check Z Flag  beq/bne
01:00001790 6BFE            	  2379:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001792 65FE            	  2380:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001794 69FE            	  2381:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001796 043900A50000F103	  2382:             subi.b #$A5,$F103
01:0000179E 67FE            	  2383:             beq.s *                       * Check Z Flag  beq/bne
01:000017A0 6AFE            	  2384:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017A2 64FE            	  2385:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017A4 68FE            	  2386:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017A6 0C3900C30000F103	  2387:             cmpi.b #$C3,$F103
01:000017AE 66FE            	  2388:             bne.s *                       * Check Z Flag  beq/bne
                            	  2389: 
                            	  2390: *     EA = x.L- WORD
01:000017B0 207C0000F100    	  2391:             move.l #$F100,a0      * populate test data
01:000017B6 20BC12345678    	  2392:             move.l #$12345678,(a0)     * populate test data
01:000017BC 047900000000F100	  2393:             subi.w #0,$F100
01:000017C4 67FE            	  2394:             beq.s *                       * Check Z Flag  beq/bne
01:000017C6 6BFE            	  2395:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017C8 65FE            	  2396:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017CA 69FE            	  2397:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017CC 047970000000F100	  2398:             subi.w #$7000,$F100
01:000017D4 67FE            	  2399:             beq.s *                       * Check Z Flag  beq/bne
01:000017D6 6AFE            	  2400:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017D8 64FE            	  2401:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017DA 69FE            	  2402:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017DC 0479A55A0000F100	  2403:             subi.w #$A55A,$F100
01:000017E4 67FE            	  2404:             beq.s *                       * Check Z Flag  beq/bne
01:000017E6 6AFE            	  2405:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017E8 64FE            	  2406:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017EA 69FE            	  2407:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017EC 0C79FCDA0000F100	  2408:             cmpi.w #$FCDA,$F100
01:000017F4 66FE            	  2409:             bne.s *                       * Check Z Flag  beq/bne
                            	  2410: 
                            	  2411: *     EA = x.L- LONG
01:000017F6 23FC123456780000	  2412:             move.l #$12345678,$F100  * populate test data
01:000017FE F100
01:00001800 04B9000000000000	  2413:             subi.l #0,$F100
01:00001808 F100
01:0000180A 67FE            	  2414:             beq.s *                       * Check Z Flag  beq/bne
01:0000180C 6BFE            	  2415:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000180E 65FE            	  2416:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001810 69FE            	  2417:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001812 04B9F00000000000	  2418:             subi.l #$F0000000,$F100
01:0000181A F100
01:0000181C 67FE            	  2419:             beq.s *                       * Check Z Flag  beq/bne
01:0000181E 6BFE            	  2420:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001820 64FE            	  2421:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001822 69FE            	  2422:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001824 04B9855AA55A0000	  2423:             subi.l #$855AA55A,$F100
01:0000182C F100
01:0000182E 67FE            	  2424:             beq.s *                       * Check Z Flag  beq/bne
01:00001830 6AFE            	  2425:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001832 64FE            	  2426:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001834 68FE            	  2427:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001836 04B9A00000000000	  2428:             subi.l #$A0000000,$F100
01:0000183E F100
01:00001840 69FE            	  2429:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001842 0CB9FCD9B11E0000	  2430:             cmpi.l #$FCD9B11E,$F100
01:0000184A F100
01:0000184C 66FE            	  2431:             bne.s *                       * Check Z Flag  beq/bne
                            	  2432: 
01:0000184E 4E75            	  2433:             rts
                            	  2434: 
                            	  2435: 
                            	  2436: 
                            	  2437: *-----------------------------------------------------------
                            	  2438: *-----------------------------------------------------------
                            	  2439: * OPCODE : MOVE
                            	  2440: *-----------------------------------------------------------
                            	  2441: *-----------------------------------------------------------
                            	  2442: op_MOVE:
01:00001850 203C11223344    	  2443:             move.l #$11223344,d0
01:00001856 223C55667788    	  2444:             move.l #$55667788,d1
01:0000185C 243C8899AABB    	  2445:             move.l #$8899aabb,d2
01:00001862 263CCCDDEEFF    	  2446:             move.l #$ccddeeff,d3
01:00001868 7800            	  2447:             moveq  #$00000000,d4
01:0000186A 7A00            	  2448:             moveq  #$00000000,d5
01:0000186C 7C00            	  2449:             moveq  #$00000000,d6
01:0000186E 7E00            	  2450:             moveq  #$00000000,d7
01:00001870 207C44332211    	  2451:             move.l #$44332211,a0
01:00001876 227C88776655    	  2452:             move.l #$88776655,a1
01:0000187C 247CBBAA9988    	  2453:             move.l #$bbaa9988,a2
01:00001882 267CFFEEDDCC    	  2454:             move.l #$ffeeddcc,a3
                            	  2455: 
01:00001888 1800            	  2456:             move.b d0,d4              * BYTE - DATA REGISTER
01:0000188A 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
01:0000188C 6BFE            	  2458:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000188E 0C8400000044    	  2459:             cmpi.l #$00000044,d4
01:00001894 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
01:00001896 3A01            	  2462:             move.w d1,d5              * WORD - DATA REGISTER
01:00001898 67FE            	  2463:             beq.s *                       * Check Z Flag  beq/bne
01:0000189A 6BFE            	  2464:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000189C 0C8500007788    	  2465:             cmpi.l #$00007788,d5
01:000018A2 66FE            	  2466:             bne.s *                       * Check Z Flag  beq/bne
                            	  2467: 
01:000018A4 2C02            	  2468:             move.l d2,d6              * LONG - DATA REGISTER
01:000018A6 67FE            	  2469:             beq.s *                       * Check Z Flag  beq/bne
01:000018A8 6AFE            	  2470:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018AA 0C868899AABB    	  2471:             cmpi.l #$8899aabb,d6
01:000018B0 66FE            	  2472:             bne.s *                       * Check Z Flag  beq/bne
                            	  2473: 
01:000018B2 3A09            	  2474:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:000018B4 67FE            	  2475:             beq.s *                       * Check Z Flag  beq/bne
01:000018B6 6BFE            	  2476:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018B8 0C8500006655    	  2477:             cmpi.l #$00006655,d5
01:000018BE 66FE            	  2478:             bne.s *                       * Check Z Flag  beq/bne
                            	  2479: 
01:000018C0 2C0A            	  2480:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:000018C2 67FE            	  2481:             beq.s *                       * Check Z Flag  beq/bne
01:000018C4 6AFE            	  2482:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018C6 0C86BBAA9988    	  2483:             cmpi.l #$bbaa9988,d6
01:000018CC 66FE            	  2484:             bne.s *                       * Check Z Flag  beq/bne
                            	  2485: 
                            	  2486: 
01:000018CE 3842            	  2487:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018D0 B9C2            	  2488:             cmpa.l d2,a4
01:000018D2 67FE            	  2489:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2490: 
01:000018D4 2A41            	  2491:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018D6 BBC1            	  2492:             cmpa.l d1,a5
01:000018D8 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: 
                            	  2496: 
                            	  2497: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2498: 
01:000018DA 203C11223344    	  2499:             move.l #$11223344,d0
01:000018E0 223C00010100    	  2500:             move.l #$00010100,d1
01:000018E6 243C8899AABB    	  2501:             move.l #$8899aabb,d2
01:000018EC 7601            	  2502:             moveq  #$00000001,d3
01:000018EE 7800            	  2503:             moveq  #$00000000,d4
01:000018F0 7A00            	  2504:             moveq  #$00000000,d5
01:000018F2 7C00            	  2505:             moveq  #$00000000,d6
01:000018F4 7E00            	  2506:             moveq  #$00000000,d7
01:000018F6 91C8            	  2507:             move.l #$00000000,a0
01:000018F8 227C00010100    	  2508:             move.l #$00010100,a1
                            	  2509: 
                            	  2510: *     x(An,AL) --> x.L
01:000018FE 11BC005A9804    	  2511:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001904 47F09804        	  2512:             lea 4(a0,a1.l),a3
01:00001908 13F0980400010105	  2513:             move.b 4(a0,a1.l),$00010105
01:00001910 67FE            	  2514:             beq.s *                       * Check Z Flag  beq/bne
01:00001912 6BFE            	  2515:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001914 0C30005A9805    	  2516:             cmpi.b #$5A,5(a0,a1.l)
01:0000191A 66FE            	  2517:             bne.s *                       * Check Z Flag  beq/bne
                            	  2518: 
                            	  2519: *     x.L --> n(An,Dw)
01:0000191C 11B9000101051007	  2520: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:00001924 67FE            	  2521:             beq.s *                       * Check Z Flag  beq/bne
01:00001926 6BFE            	  2522:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001928 0C30005A1007    	  2523:             cmpi.b #$5A,7(a0,d1.w)
01:0000192E 66FE            	  2524:             bne.s *                       * Check Z Flag  beq/bne
                            	  2525: 
                            	  2526: *     x(PC,Ds) --> x.w
01:00001930 11FB30660100    	  2527:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:00001936 67FE            	  2528:             beq.s *                       * Check Z Flag  beq/bne
01:00001938 6AFE            	  2529:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000193A 0C3900B90000191D	  2530:             cmpi.b #$B9,1+MOVE2
01:00001942 66FE            	  2531:             bne.s *                       * Check Z Flag  beq/bne
                            	  2532: 
                            	  2533: *     #x -->    n(An,AL)
01:00001944 11BC00781007    	  2534:             move.b  #$78,7(a0,d1.w)    * BYTE
01:0000194A 67FE            	  2535:             beq.s *                       * Check Z Flag  beq/bne
01:0000194C 6BFE            	  2536:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000194E 0C3000781007    	  2537:             cmpi.b #$78,7(a0,d1.w)
01:00001954 66FE            	  2538:             bne.s *                       * Check Z Flag  beq/bne
                            	  2539: 
01:00001956 203C11223344    	  2540:             move.l #$11223344,d0
01:0000195C 223C00010100    	  2541:             move.l #$00010100,d1
01:00001962 243C8899AABB    	  2542:             move.l #$8899aabb,d2
01:00001968 7602            	  2543:             moveq  #$00000002,d3
01:0000196A 7800            	  2544:             moveq  #$00000000,d4
01:0000196C 7A00            	  2545:             moveq  #$00000000,d5
01:0000196E 7C00            	  2546:             moveq  #$00000000,d6
01:00001970 7E00            	  2547:             moveq  #$00000000,d7
01:00001972 91C8            	  2548:             move.l #$00000000,a0
01:00001974 227C00010100    	  2549:             move.l #$00010100,a1
                            	  2550: 
                            	  2551: *     x(An,AL) --> x.L
01:0000197A 31BC5A5A9804    	  2552:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:00001980 49F09804        	  2553:             lea 4(a0,a1.l),a4
01:00001984 33F0980400010104	  2554:             move.w 4(a0,a1.l),$00010104
01:0000198C 67FE            	  2555:             beq.s *                       * Check Z Flag  beq/bne
01:0000198E 6BFE            	  2556:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001990 0C705A5A9804    	  2557:             cmpi.w #$5A5A,4(a0,a1.l)
01:00001996 66FE            	  2558:             bne.s *                       * Check Z Flag  beq/bne
                            	  2559: 
                            	  2560: *     x.L --> n(An,Dw)
01:00001998 31B9000101041006	  2561: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000019A0 67FE            	  2562:             beq.s *                       * Check Z Flag  beq/bne
01:000019A2 6BFE            	  2563:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019A4 0C705A5A1006    	  2564:             cmpi.w #$5A5A,6(a0,d1.w)
01:000019AA 66FE            	  2565:             bne.s *                       * Check Z Flag  beq/bne
                            	  2566: 
                            	  2567: *     x(PC,Ds) --> x.w
01:000019AC 31FB30EA0100    	  2568:             move.w  MOVE1(pc,d3),$0100 * WORD
01:000019B2 67FE            	  2569:             beq.s *                       * Check Z Flag  beq/bne
01:000019B4 6BFE            	  2570:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019B6 0C7967FE000019A0	  2571:             cmpi.w #$67FE,8+MOVE1
01:000019BE 66FE            	  2572:             bne.s *                       * Check Z Flag  beq/bne
                            	  2573: 
                            	  2574: *     #x -->    n(An,AL)
01:000019C0 31BC78781006    	  2575:             move.w  #$7878,6(a0,d1.w)    * WORD
01:000019C6 67FE            	  2576:             beq.s *                       * Check Z Flag  beq/bne
01:000019C8 6BFE            	  2577:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019CA 0C7078781006    	  2578:             cmpi.w #$7878,6(a0,d1.w)
01:000019D0 66FE            	  2579:             bne.s *                       * Check Z Flag  beq/bne
                            	  2580: 
                            	  2581: * ---
                            	  2582: 
01:000019D2 203C11223344    	  2583:             move.l #$11223344,d0
01:000019D8 223C00010100    	  2584:             move.l #$00010100,d1
01:000019DE 243C8899AABB    	  2585:             move.l #$8899aabb,d2
01:000019E4 7602            	  2586:             moveq  #$00000002,d3
01:000019E6 7800            	  2587:             moveq  #$00000000,d4
01:000019E8 7A00            	  2588:             moveq  #$00000000,d5
01:000019EA 7C00            	  2589:             moveq  #$00000000,d6
01:000019EC 7E00            	  2590:             moveq  #$00000000,d7
01:000019EE 91C8            	  2591:             move.l #$00000000,a0
01:000019F0 227C00010100    	  2592:             move.l #$00010100,a1
                            	  2593: 
                            	  2594: *     x(An,AL) --> x.L
01:000019F6 21BC5A5A12349804	  2595:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:000019FE 49F09804        	  2596:             lea 4(a0,a1.l),a4
01:00001A02 23F0980400010104	  2597:             move.l 4(a0,a1.l),$00010104
01:00001A0A 67FE            	  2598:             beq.s *                       * Check Z Flag  beq/bne
01:00001A0C 6BFE            	  2599:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A0E 0CB05A5A12349804	  2600:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001A16 66FE            	  2601:             bne.s *                       * Check Z Flag  beq/bne
                            	  2602: 
                            	  2603: *     x.L --> n(An,Dw)
01:00001A18 21B9000101041006	  2604: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:00001A20 67FE            	  2605:             beq.s *                       * Check Z Flag  beq/bne
01:00001A22 6BFE            	  2606:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A24 0CB05A5A12341006	  2607:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001A2C 66FE            	  2608:             bne.s *                       * Check Z Flag  beq/bne
                            	  2609: 
                            	  2610: *     x(PC,Ds) --> x.w
01:00001A2E 21FB30E80100    	  2611:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001A34 67FE            	  2612:             beq.s *                       * Check Z Flag  beq/bne
01:00001A36 6BFE            	  2613:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A38 0CB967FE6BFE0000	  2614:             cmpi.l #$67FE6BFE,8+MOVE3
01:00001A40 1A20
01:00001A42 66FE            	  2615:             bne.s *                       * Check Z Flag  beq/bne
                            	  2616: 
                            	  2617: *     #x -->    n(An,AL)
01:00001A44 21BC787823231006	  2618:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001A4C 67FE            	  2619:             beq.s *                       * Check Z Flag  beq/bne
01:00001A4E 6BFE            	  2620:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A50 0CB0787823231006	  2621:             cmpi.l #$78782323,6(a0,d1.w)
01:00001A58 66FE            	  2622:             bne.s *                       * Check Z Flag  beq/bne
                            	  2623: 
                            	  2624: 
01:00001A5A 4E75            	  2625:          rts
                            	  2626: 
                            	  2627: 
                            	  2628: *-----------------------------------------------------------
                            	  2629: *-----------------------------------------------------------
                            	  2630: * OPCODE : MOVE_xxx_FLAGS
                            	  2631: *-----------------------------------------------------------
                            	  2632: *-----------------------------------------------------------
                            	  2633: op_MOVE_xxx_FLAGS:
                            	  2634: 
                            	  2635: *     Move_To_SR
                            	  2636: 
                            	  2637: *     Dn
                            	  2638: 
01:00001A5C 303C2FFF        	  2639:             move.w #$2FFF,d0
01:00001A60 46C0            	  2640:             move.w d0,SR
01:00001A62 6AFE            	  2641:             bpl.s *           * branch if Z clear
01:00001A64 66FE            	  2642:             bne.s *           * branch if N clear
01:00001A66 68FE            	  2643:             bvc.s *           * branch if V clear
01:00001A68 64FE            	  2644:             bcc.s *           * branch if C clear
01:00001A6A 303C2F00        	  2645:             move.w #$2F00,d0
01:00001A6E 44C0            	  2646:             move d0,CCR
01:00001A70 67FE            	  2647:             beq.s *           * branch if Z set
01:00001A72 6BFE            	  2648:             bmi.s *           * branch if N set
01:00001A74 69FE            	  2649:             bvs.s *           * branch if V set
01:00001A76 65FE            	  2650:             bcs.s *           * branch if C set
                            	  2651: 
01:00001A78 303C2000        	  2652:             move.w #$2000,d0
01:00001A7C 46C0            	  2653:             move.w d0,SR
01:00001A7E 67FE            	  2654:             beq.s *           * branch if Z set
01:00001A80 6BFE            	  2655:             bmi.s *           * branch if N set
01:00001A82 69FE            	  2656:             bvs.s *           * branch if V set
01:00001A84 65FE            	  2657:             bcs.s *           * branch if C set
                            	  2658: 
                            	  2659: *     (An)
01:00001A86 307C0100        	  2660:             move.l #$00000100,a0
01:00001A8A 30BC2FFF        	  2661:             move.w #$2FFF,(a0)
01:00001A8E 46D0            	  2662:             move.w (a0),SR
01:00001A90 6AFE            	  2663:             bpl.s *           * branch if Z clear
01:00001A92 66FE            	  2664:             bne.s *           * branch if N clear
01:00001A94 68FE            	  2665:             bvc.s *           * branch if V clear
01:00001A96 64FE            	  2666:             bcc.s *           * branch if C clear
                            	  2667: 
01:00001A98 30BC2000        	  2668:             move.w #$2000,(a0)
01:00001A9C 46D0            	  2669:             move.w (a0),SR
01:00001A9E 67FE            	  2670:             beq.s *           * branch if Z set
01:00001AA0 6BFE            	  2671:             bmi.s *           * branch if N set
01:00001AA2 69FE            	  2672:             bvs.s *           * branch if V set
01:00001AA4 65FE            	  2673:             bcs.s *           * branch if C set
                            	  2674: 
                            	  2675: *     (An)+
01:00001AA6 307C0100        	  2676:             move.l #$00000100,a0
01:00001AAA 30BC2FFF        	  2677:             move.w #$2FFF,(a0)
01:00001AAE 46D8            	  2678:             move.w (a0)+,SR
01:00001AB0 6AFE            	  2679:             bpl.s *           * branch if Z clear
01:00001AB2 66FE            	  2680:             bne.s *           * branch if N clear
01:00001AB4 68FE            	  2681:             bvc.s *           * branch if V clear
01:00001AB6 64FE            	  2682:             bcc.s *           * branch if C clear
                            	  2683: 
01:00001AB8 30BC2000        	  2684:             move.w #$2000,(a0)
01:00001ABC 46D8            	  2685:             move.w (a0)+,SR
01:00001ABE 67FE            	  2686:             beq.s *           * branch if Z set
01:00001AC0 6BFE            	  2687:             bmi.s *           * branch if N set
01:00001AC2 69FE            	  2688:             bvs.s *           * branch if V set
01:00001AC4 65FE            	  2689:             bcs.s *           * branch if C set
                            	  2690: 
                            	  2691: *     -(An)
01:00001AC6 307C0102        	  2692:             move.l #$00000102,a0
01:00001ACA 30BC2FFF        	  2693:             move.w #$2FFF,(a0)
01:00001ACE 46D8            	  2694:             move.w (a0)+,SR
01:00001AD0 6AFE            	  2695:             bpl.s *           * branch if Z clear
01:00001AD2 66FE            	  2696:             bne.s *           * branch if N clear
01:00001AD4 68FE            	  2697:             bvc.s *           * branch if V clear
01:00001AD6 64FE            	  2698:             bcc.s *           * branch if C clear
                            	  2699: 
01:00001AD8 30BC2000        	  2700:             move.w #$2000,(a0)
01:00001ADC 46D8            	  2701:             move.w (a0)+,SR
01:00001ADE 67FE            	  2702:             beq.s *           * branch if Z set
01:00001AE0 6BFE            	  2703:             bmi.s *           * branch if N set
01:00001AE2 69FE            	  2704:             bvs.s *           * branch if V set
01:00001AE4 65FE            	  2705:             bcs.s *           * branch if C set
                            	  2706: 
                            	  2707: *     n(An)
01:00001AE6 307C0102        	  2708:             move.l #$00000102,a0
01:00001AEA 317C2FFF0002    	  2709:             move.w #$2FFF,2(a0)
01:00001AF0 46E80002        	  2710:             move.w 2(a0),SR
01:00001AF4 6AFE            	  2711:             bpl.s *           * branch if Z clear
01:00001AF6 66FE            	  2712:             bne.s *           * branch if N clear
01:00001AF8 68FE            	  2713:             bvc.s *           * branch if V clear
01:00001AFA 64FE            	  2714:             bcc.s *           * branch if C clear
                            	  2715: 
01:00001AFC 317C20000002    	  2716:             move.w #$2000,2(a0)
01:00001B02 46E80002        	  2717:             move.w 2(a0),SR
01:00001B06 67FE            	  2718:             beq.s *           * branch if Z set
01:00001B08 6BFE            	  2719:             bmi.s *           * branch if N set
01:00001B0A 69FE            	  2720:             bvs.s *           * branch if V set
01:00001B0C 65FE            	  2721:             bcs.s *           * branch if C set
                            	  2722: 
                            	  2723: *     n(An,Rn.l)
01:00001B0E 307C0100        	  2724:             move.l #$00000100,a0
01:00001B12 7002            	  2725:             moveq  #$00000002,d0
01:00001B14 31BC2FFF0802    	  2726:             move.w #$2FFF,2(a0,d0.l)
01:00001B1A 46F00802        	  2727:             move.w 2(a0,d0.l),SR
01:00001B1E 6AFE            	  2728:             bpl.s *           * branch if Z clear
01:00001B20 66FE            	  2729:             bne.s *           * branch if N clear
01:00001B22 68FE            	  2730:             bvc.s *           * branch if V clear
01:00001B24 64FE            	  2731:             bcc.s *           * branch if C clear
                            	  2732: 
01:00001B26 31BC20000802    	  2733:             move.w #$2000,2(a0,d0.l)
01:00001B2C 46F00802        	  2734:             move.w 2(a0,d0.l),SR
01:00001B30 67FE            	  2735:             beq.s *           * branch if Z set
01:00001B32 6BFE            	  2736:             bmi.s *           * branch if N set
01:00001B34 69FE            	  2737:             bvs.s *           * branch if V set
01:00001B36 65FE            	  2738:             bcs.s *           * branch if C set
                            	  2739: 
                            	  2740: *     x.W
01:00001B38 31FC2FFF0100    	  2741:             move.w #$2FFF,$0100
01:00001B3E 46F80100        	  2742:             move.w $0100,SR
01:00001B42 6AFE            	  2743:             bpl.s *           * branch if Z clear
01:00001B44 66FE            	  2744:             bne.s *           * branch if N clear
01:00001B46 68FE            	  2745:             bvc.s *           * branch if V clear
01:00001B48 64FE            	  2746:             bcc.s *           * branch if C clear
                            	  2747: 
01:00001B4A 31FC20000100    	  2748:             move.w #$2000,$0100
01:00001B50 46F80100        	  2749:             move.w $0100,SR
01:00001B54 67FE            	  2750:             beq.s *           * branch if Z set
01:00001B56 6BFE            	  2751:             bmi.s *           * branch if N set
01:00001B58 69FE            	  2752:             bvs.s *           * branch if V set
01:00001B5A 65FE            	  2753:             bcs.s *           * branch if C set
                            	  2754: 
                            	  2755: *     x.L
01:00001B5C 33FC2FFF00010100	  2756:             move.w #$2FFF,$00010100
01:00001B64 46F900010100    	  2757:             move.w $00010100,SR
01:00001B6A 6AFE            	  2758:             bpl.s *           * branch if Z clear
01:00001B6C 66FE            	  2759:             bne.s *           * branch if N clear
01:00001B6E 68FE            	  2760:             bvc.s *           * branch if V clear
01:00001B70 64FE            	  2761:             bcc.s *           * branch if C clear
                            	  2762: 
01:00001B72 33FC200000010100	  2763: MOVE4:      move.w #$2000,$00010100
01:00001B7A 46F900010100    	  2764:             move.w $00010100,SR
01:00001B80 67FE            	  2765:             beq.s *           * branch if Z set
01:00001B82 6BFE            	  2766:             bmi.s *           * branch if N set
01:00001B84 69FE            	  2767:             bvs.s *           * branch if V set
01:00001B86 65FE            	  2768:             bcs.s *           * branch if C set
                            	  2769: 
                            	  2770: *     x(PC)
01:00001B88 46FAFFEA        	  2771:             move.w MOVE4+2(pc),SR
01:00001B8C 67FE            	  2772:             beq.s *           * branch if Z set
01:00001B8E 6BFE            	  2773:             bmi.s *           * branch if N set
01:00001B90 69FE            	  2774:             bvs.s *           * branch if V set
01:00001B92 65FE            	  2775:             bcs.s *           * branch if C set
                            	  2776: 
                            	  2777: *     x(PC,d0.l)
01:00001B94 7000            	  2778:             moveq  #$00000000,d0
01:00001B96 46FB08DC        	  2779:             move.w MOVE4+2(pc,d0.l),SR
01:00001B9A 67FE            	  2780:             beq.s *           * branch if Z set
01:00001B9C 6BFE            	  2781:             bmi.s *           * branch if N set
01:00001B9E 69FE            	  2782:             bvs.s *           * branch if V set
01:00001BA0 65FE            	  2783:             bcs.s *           * branch if C set
01:00001BA2 44FB08D0        	  2784:             move MOVE4+2(pc,d0.l),CCR
01:00001BA6 67FE            	  2785:             beq.s *           * branch if Z set
01:00001BA8 6BFE            	  2786:             bmi.s *           * branch if N set
01:00001BAA 69FE            	  2787:             bvs.s *           * branch if V set
01:00001BAC 65FE            	  2788:             bcs.s *           * branch if C set
                            	  2789: 
                            	  2790: *     #x
01:00001BAE 46FC2FFF        	  2791:             move.w #$2FFF,SR
01:00001BB2 66FE            	  2792:             bne.s *           * branch if Z clear
01:00001BB4 6AFE            	  2793:             bpl.s *           * branch if N clear
01:00001BB6 68FE            	  2794:             bvc.s *           * branch if V clear
01:00001BB8 64FE            	  2795:             bcc.s *           * branch if C clear
                            	  2796: 
                            	  2797: 
                            	  2798: 
                            	  2799: *  MOVE_From_SR
                            	  2800: 
                            	  2801: 
                            	  2802: 
                            	  2803: *     Dn
01:00001BBA 46FC275A        	  2804:             move.w #$275A,SR          * Initial value
01:00001BBE 40C0            	  2805:             move.w SR,d0
01:00001BC0 0C40271A        	  2806:             cmpi.w #$271A,d0
                            	  2807: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2808: *            bne.s *                   * branch if Z set
                            	  2809: 
                            	  2810: *     (An)
01:00001BC4 307C0100        	  2811:             move.l #$00000100,a0
01:00001BC8 46FC275A        	  2812:             move.w #$275A,SR          * Initial value
01:00001BCC 40D0            	  2813:             move.w SR,(a0)
01:00001BCE 0C50275A        	  2814:             cmpi.w #$275A,(a0)
01:00001BD2 66FE            	  2815:             bne.s *                   * branch if Z set
                            	  2816: 
                            	  2817: *     (An)+
01:00001BD4 307C0100        	  2818:             move.l #$00000100,a0
01:00001BD8 46FC257A        	  2819:             move.w #$257A,SR          * Initial value
01:00001BDC 40D8            	  2820:             move.w SR,(a0)+
01:00001BDE 307C0100        	  2821:             move.l #$00000100,a0
01:00001BE2 0C58257A        	  2822:             cmpi.w #$257A,(a0)+
01:00001BE6 66FE            	  2823:             bne.s *                   * branch if Z set
                            	  2824: 
                            	  2825: *     -(An)
01:00001BE8 307C0102        	  2826:             move.l #$00000102,a0
01:00001BEC 46FC2766        	  2827:             move.w #$2766,SR          * Initial value
01:00001BF0 40E0            	  2828:             move.w SR,-(a0)
01:00001BF2 307C0100        	  2829:             move.l #$00000100,a0
01:00001BF6 0C502766        	  2830:             cmpi.w #$2766,(a0)
01:00001BFA 66FE            	  2831:             bne.s *                   * branch if Z set
                            	  2832: 
                            	  2833: *     x(An)
01:00001BFC 307C0102        	  2834:             move.l #$00000102,a0
01:00001C00 46FC2733        	  2835:             move.w #$2733,SR          * Initial value
01:00001C04 40E80004        	  2836:             move.w SR,4(a0)
01:00001C08 0C6827330004    	  2837:             cmpi.w #$2733,4(a0)
01:00001C0E 66FE            	  2838:             bne.s *                   * branch if Z set
                            	  2839: 
                            	  2840: *     x(An,rn)
01:00001C10 307C0102        	  2841:             move.l #$00000102,a0
01:00001C14 7004            	  2842:             moveq  #$00000004,d0
01:00001C16 46FC275A        	  2843:             move.w #$275a,SR          * Initial value
01:00001C1A 40F00804        	  2844:             move.w SR,4(a0,d0.l)
01:00001C1E 0C70275A0804    	  2845:             cmpi.w #$275a,4(a0,d0.l)
01:00001C24 66FE            	  2846:             bne.s *                   * branch if Z set
                            	  2847: 
                            	  2848: *     x.W
01:00001C26 46FC2777        	  2849:             move.w #$2777,SR          * Initial value
01:00001C2A 40F80102        	  2850:             move.w SR,$0102
01:00001C2E 0C7827770102    	  2851:             cmpi.w #$2777,$0102
01:00001C34 66FE            	  2852:             bne.s *                   * branch if Z set
                            	  2853: 
                            	  2854: *     x.L
01:00001C36 46FC2777        	  2855:             move.w #$2777,SR          * Initial value
01:00001C3A 40F900010102    	  2856:             move.w SR,$10102
01:00001C40 0C79277700010102	  2857:             cmpi.w #$2777,$10102
01:00001C48 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
                            	  2860: 
                            	  2861: 
01:00001C4A 46FC2700        	  2862:             move.w #$2700,SR          * Put flags back to initial value
                            	  2863: 
01:00001C4E 4E75            	  2864:             rts
                            	  2865: 
                            	  2866: 
                            	  2867: *-----------------------------------------------------------
                            	  2868: *-----------------------------------------------------------
                            	  2869: * OPCODE : EXT
                            	  2870: *-----------------------------------------------------------
                            	  2871: *-----------------------------------------------------------
                            	  2872: op_EXT:
                            	  2873: 
01:00001C50 707F            	  2874:             move.l #$0000007F,d0
01:00001C52 223C00008FFF    	  2875:             move.l #$00008FFF,d1
01:00001C58 7400            	  2876:             moveq  #$00000000,d2
                            	  2877: 
01:00001C5A 4880            	  2878:             ext.w d0
01:00001C5C 6BFE            	  2879:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C5E 67FE            	  2880:             beq.s *                   * Check Z Flag  beq/bne
01:00001C60 0C800000007F    	  2881:             cmpi.l #$0000007F,d0
01:00001C66 66FE            	  2882:             bne.s *                   * branch if Z set
                            	  2883: 
01:00001C68 48C1            	  2884:             ext.l d1
01:00001C6A 6AFE            	  2885:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C6C 67FE            	  2886:             beq.s *                   * Check Z Flag  beq/bne
01:00001C6E 0C81FFFF8FFF    	  2887:             cmpi.l #$FFFF8FFF,d1
01:00001C74 66FE            	  2888:             bne.s *                   * branch if Z set
                            	  2889: 
01:00001C76 48C2            	  2890:             ext.l d2
01:00001C78 66FE            	  2891:             bne.s *                   * Check Z Flag  beq/bne
                            	  2892: 
                            	  2893: 
                            	  2894: 
01:00001C7A 4E75            	  2895:             rts
                            	  2896: 
                            	  2897: 
                            	  2898: *-----------------------------------------------------------
                            	  2899: *-----------------------------------------------------------
                            	  2900: * OPCODE : SWAP
                            	  2901: *-----------------------------------------------------------
                            	  2902: *-----------------------------------------------------------
                            	  2903: op_SWAP:
                            	  2904: 
01:00001C7C 203C12345678    	  2905:             move.l #$12345678,d0
                            	  2906: 
01:00001C82 4840            	  2907:             swap d0
01:00001C84 6BFE            	  2908:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C86 67FE            	  2909:             beq.s *                   * Check Z Flag  beq/bne
01:00001C88 0C8056781234    	  2910:             cmpi.l #$56781234,d0
01:00001C8E 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912: 
                            	  2913: 
                            	  2914: 
01:00001C90 4E75            	  2915:             rts
                            	  2916: 
                            	  2917: 
                            	  2918: *-----------------------------------------------------------
                            	  2919: *-----------------------------------------------------------
                            	  2920: * OPCODE : LEA_PEA
                            	  2921: *-----------------------------------------------------------
                            	  2922: *-----------------------------------------------------------
                            	  2923: op_LEAPEA:
                            	  2924: 
01:00001C92 207C00345678    	  2925:             move.l #$00345678,a0
01:00001C98 7800            	  2926:             moveq  #$00000000,d4
                            	  2927: 
                            	  2928: *     (An)
01:00001C9A 4DD0            	  2929:             lea (a0),a6
01:00001C9C 200E            	  2930:             move.l a6,d0
01:00001C9E 0C8000345678    	  2931:             cmpi.l #$00345678,d0
01:00001CA4 66FE            	  2932:             bne.s *                   * branch if Z set
01:00001CA6 4850            	  2933:             pea (a0)
01:00001CA8 0C9700345678    	  2934:             cmpi.l #$00345678,(a7)
01:00001CAE 66FE            	  2935:             bne.s *                   * branch if Z set
                            	  2936:             * This was without a specifier which the assembler defaulted to .w
01:00001CB0 588F            	  2937:             addq.l #4,a7            * Restore Stack Pointer
                            	  2938: 
                            	  2939: *     x(An)
01:00001CB2 4DE80004        	  2940:             lea 4(a0),a6
01:00001CB6 200E            	  2941:             move.l a6,d0
01:00001CB8 0C800034567C    	  2942:             cmpi.l #$0034567C,d0
01:00001CBE 66FE            	  2943:             bne.s *                   * branch if Z set
01:00001CC0 48680004        	  2944:             pea 4(a0)
01:00001CC4 0C970034567C    	  2945:             cmpi.l #$0034567C,(a7)
01:00001CCA 66FE            	  2946:             bne.s *                   * branch if Z set
                            	  2947:             * This was without a specifier which the assembler defaulted to .w
01:00001CCC 588F            	  2948:             addq.l #4,a7            * Restore Stack Pointer
                            	  2949: 
                            	  2950: *     x(An,Dn.l)
01:00001CCE 4DF04004        	  2951:             lea 4(a0,d4),a6
01:00001CD2 200E            	  2952:             move.l a6,d0
01:00001CD4 0C800034567C    	  2953:             cmpi.l #$0034567C,d0
01:00001CDA 66FE            	  2954:             bne.s *                   * branch if Z set
01:00001CDC 48704804        	  2955:             pea 4(a0,d4.l)
01:00001CE0 0C970034567C    	  2956:             cmpi.l #$0034567C,(a7)
01:00001CE6 66FE            	  2957:             bne.s *                   * branch if Z set
                            	  2958:             * This was without a specifier which the assembler defaulted to .w
01:00001CE8 588F            	  2959:             addq.l #4,a7            * Restore Stack Pointer
                            	  2960: 
                            	  2961: *     x.W
01:00001CEA 4DF81234        	  2962:             lea $1234,a6
01:00001CEE 200E            	  2963:             move.l a6,d0
01:00001CF0 0C401234        	  2964:             cmpi.w #$1234,d0
01:00001CF4 66FE            	  2965:             bne.s *                   * branch if Z set
01:00001CF6 48781234        	  2966:             pea $1234
01:00001CFA 0C9700001234    	  2967:             cmpi.l #$00001234,(a7)
01:00001D00 66FE            	  2968:             bne.s *                   * branch if Z set
                            	  2969:             * This was without a specifier which the assembler defaulted to .w
01:00001D02 588F            	  2970:             addq.l #4,a7            * Restore Stack Pointer
                            	  2971: 
                            	  2972: *     x.L
01:00001D04 4DF900345678    	  2973:             lea $00345678,a6
01:00001D0A 200E            	  2974:             move.l a6,d0
01:00001D0C B08E            	  2975:             cmp.l a6,d0
01:00001D0E 66FE            	  2976:             bne.s *                   * branch if Z set
01:00001D10 487900345678    	  2977:             pea $00345678
01:00001D16 0C9700345678    	  2978:             cmpi.l #$00345678,(a7)
01:00001D1C 66FE            	  2979:             bne.s *                   * branch if Z set
                            	  2980:             * This was without a specifier which the assembler defaulted to .w
01:00001D1E 588F            	  2981:             addq.l #4,a7            * Restore Stack Pointer
                            	  2982: 
                            	  2983: *     x(PC)
01:00001D20 4DFA0008        	  2984:             lea LEA1(pc),a6
01:00001D24 200E            	  2985:             move.l a6,d0
01:00001D26 B08E            	  2986:             cmp.l a6,d0
01:00001D28 66FE            	  2987:             bne.s *                   * branch if Z set
01:00001D2A 487AFFFE        	  2988: LEA1:       pea LEA1(pc)
01:00001D2E 0C970000241E    	  2989:             cmpi.l #$0000241E,(a7)
01:00001D34 67FE            	  2990:             beq.s *                   * branch if Z clear
                            	  2991:             * This was without a specifier which the assembler defaulted to .w
01:00001D36 588F            	  2992:             addq.l #4,a7              * Restore Stack Pointer
                            	  2993: 
                            	  2994: 
                            	  2995: 
                            	  2996: 
01:00001D38 46FC2700        	  2997:             move.w #$2700,sr          * Put flags back to initial value
                            	  2998: 
01:00001D3C 4E75            	  2999:             rts
                            	  3000:  	
                            	  3001: 
                            	  3002: 
                            	  3003: *-----------------------------------------------------------
                            	  3004: *-----------------------------------------------------------
                            	  3005: * OPCODE : LEA_TAS
                            	  3006: *-----------------------------------------------------------
                            	  3007: *-----------------------------------------------------------
                            	  3008: op_TAS:
                            	  3009: 
                            	  3010: *     Test just one addressing mode
                            	  3011: 
01:00001D3E 307C0100        	  3012:             move.l #$00000100,a0
                            	  3013: 
                            	  3014: *     (An)
01:00001D42 4210            	  3015:             move.b #$00,(a0)
01:00001D44 6BFE            	  3016:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D46 66FE            	  3017:             bne.s *                   * Check Z Flag  beq/bne
01:00001D48 4AD0            	  3018:             tas (a0)
01:00001D4A 0C100080        	  3019:             cmpi.b #$80,(a0)
01:00001D4E 66FE            	  3020:             bne.s *                   * branch if Z set
01:00001D50 10BC00F5        	  3021:             move.b #$F5,(a0)
01:00001D54 4AD0            	  3022:             tas (a0)
01:00001D56 6AFE            	  3023:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D58 67FE            	  3024:             beq.s *                   * Check Z Flag  beq/bne
01:00001D5A 4AD0            	  3025:             tas (a0)
01:00001D5C 0C1000F5        	  3026:             cmpi.b #$F5,(a0)
01:00001D60 66FE            	  3027:             bne.s *                   * branch if Z set
                            	  3028: 
01:00001D62 4E75            	  3029:             rts
                            	  3030: 
                            	  3031: 
                            	  3032: *-----------------------------------------------------------
                            	  3033: *-----------------------------------------------------------
                            	  3034: * OPCODE : LEA_TST
                            	  3035: *-----------------------------------------------------------
                            	  3036: *-----------------------------------------------------------
                            	  3037: op_TST:
                            	  3038: 
                            	  3039: *     Test just one addressing mode
                            	  3040: 
01:00001D64 307C0100        	  3041:             move.l #$00000100,a0
                            	  3042: 
                            	  3043: *     (An) - BYTE
01:00001D68 4210            	  3044:             move.b #$00,(a0)
01:00001D6A 4A10            	  3045:             tst.b (a0)
01:00001D6C 6BFE            	  3046:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D6E 66FE            	  3047:             bne.s *                   * Check Z Flag  beq/bne
01:00001D70 10BC00F5        	  3048:             move.b #$F5,(a0)
01:00001D74 4A10            	  3049:             tst.b (a0)
01:00001D76 6AFE            	  3050:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D78 67FE            	  3051:             beq.s *                   * Check Z Flag  beq/bne
                            	  3052: 
                            	  3053: *     (An) - WORD
01:00001D7A 4250            	  3054:             move.w #$0000,(a0)
01:00001D7C 4A50            	  3055:             tst.w (a0)
01:00001D7E 6BFE            	  3056:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D80 66FE            	  3057:             bne.s *                   * Check Z Flag  beq/bne
01:00001D82 30BCF567        	  3058:             move.w #$F567,(a0)
01:00001D86 4A50            	  3059:             tst.w (a0)
01:00001D88 6AFE            	  3060:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D8A 67FE            	  3061:             beq.s *                   * Check Z Flag  beq/bne
                            	  3062: 
                            	  3063: *     (An) - LONG
01:00001D8C 4290            	  3064:             move.l #$00000000,(a0)
01:00001D8E 4A90            	  3065:             tst.l (a0)
01:00001D90 6BFE            	  3066:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D92 66FE            	  3067:             bne.s *                   * Check Z Flag  beq/bne
01:00001D94 20BCF56789AB    	  3068:             move.l #$F56789ab,(a0)
01:00001D9A 4A90            	  3069:             tst.l (a0)
01:00001D9C 6AFE            	  3070:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D9E 67FE            	  3071:             beq.s *                   * Check Z Flag  beq/bne
                            	  3072: 
                            	  3073: 
01:00001DA0 4E75            	  3074:             rts
                            	  3075: 
                            	  3076: 
                            	  3077: *-----------------------------------------------------------
                            	  3078: *-----------------------------------------------------------
                            	  3079: * OPCODE : LINKS
                            	  3080: *-----------------------------------------------------------
                            	  3081: *-----------------------------------------------------------
                            	  3082: op_LINKS:
                            	  3083: 
01:00001DA2 207C11223344    	  3084:             move.l #$11223344,a0
01:00001DA8 203C11223344    	  3085:             move.l #$11223344,d0
01:00001DAE 4E500000        	  3086:             link a0,#$0
01:00001DB2 0C9711223344    	  3087:             cmpi.l #$11223344,(a7)
                            	  3088: 
01:00001DB8 4E58            	  3089:             unlk a0
01:00001DBA B1C0            	  3090:             cmp.l d0,a0
01:00001DBC 66FE            	  3091:             bne.s *                   * branch if Z set
                            	  3092: 
01:00001DBE 4E75            	  3093:             rts
                            	  3094: 
                            	  3095: *-----------------------------------------------------------
                            	  3096: *-----------------------------------------------------------
                            	  3097: * OPCODE : MOVE_USP
                            	  3098: *-----------------------------------------------------------
                            	  3099: *-----------------------------------------------------------
                            	  3100: op_MOVE_USP:
                            	  3101: 
01:00001DC0 207C11223344    	  3102:             move.l #$11223344,a0
01:00001DC6 4E60            	  3103:             move a0,USP
01:00001DC8 4E69            	  3104:             move USP,a1
01:00001DCA B3C8            	  3105:             cmp.l a0,a1
01:00001DCC 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
01:00001DCE 4E75            	  3108:             rts
                            	  3109: 
                            	  3110: 
                            	  3111: *-----------------------------------------------------------
                            	  3112: *-----------------------------------------------------------
                            	  3113: * OPCODE : CHK
                            	  3114: *-----------------------------------------------------------
                            	  3115: *-----------------------------------------------------------
                            	  3116: op_CHK:
01:00001DD0 303C1122        	  3117:             move.w #$1122,d0
01:00001DD4 323C1122        	  3118:             move.w #$1122,d1
01:00001DD8 4380            	  3119:             chk d0,d1
                            	  3120: 
01:00001DDA 4E71            	  3121:             nop
01:00001DDC 4E71            	  3122:             nop
                            	  3123: 
01:00001DDE 323C1122        	  3124:             move.w #$1122,d1
01:00001DE2 43BC1122        	  3125:             chk #$1122,d1
                            	  3126: 
01:00001DE6 323C1122        	  3127:             move.w #$1122,d1
01:00001DEA 43BC007A        	  3128:             chk #00122,d1
01:00001DEE BCBCEEEE0006    	  3129:             cmp.l #$EEEE0006,d6
01:00001DF4 66FE            	  3130:             bne.s *                   * branch if Z set
                            	  3131: 
01:00001DF6 303C1122        	  3132:             move.w #$1122,d0
01:00001DFA 323C8000        	  3133:             move.w #$8000,d1
01:00001DFE 4380            	  3134:             chk d0,d1
01:00001E00 BCBCEEEE0006    	  3135:             cmp.l #$EEEE0006,d6
01:00001E06 66FE            	  3136:             bne.s *                   * branch if Z set
                            	  3137: 
01:00001E08 4E75            	  3138:             rts
                            	  3139: 
                            	  3140: 
                            	  3141: *-----------------------------------------------------------
                            	  3142: *-----------------------------------------------------------
                            	  3143: * OPCODE : NEGS
                            	  3144: *-----------------------------------------------------------
                            	  3145: *-----------------------------------------------------------
                            	  3146: op_NEGS:
                            	  3147: 
                            	  3148: *     NOT - BYTE
01:00001E0A 307C0100        	  3149:             move.l #$00000100,a0
01:00001E0E 7000            	  3150:             moveq  #$00000000,d0
01:00001E10 4600            	  3151:             not.b d0
01:00001E12 6AFE            	  3152:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E14 67FE            	  3153:             beq.s *                   * Check Z Flag  beq/bne
01:00001E16 4600            	  3154:             not.b d0
01:00001E18 6BFE            	  3155:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E1A 66FE            	  3156:             bne.s *                   * Check Z Flag  beq/bne
01:00001E1C 4A00            	  3157:             cmpi.b #$00,d0
01:00001E1E 66FE            	  3158:             bne.s *                   * Check Z Flag  beq/bne
01:00001E20 10BC0080        	  3159:             move.b #$80,(a0)
01:00001E24 4610            	  3160:             not.b (a0)
01:00001E26 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E28 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
01:00001E2A 4610            	  3163:             not.b (a0)
01:00001E2C 6AFE            	  3164:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E2E 67FE            	  3165:             beq.s *                   * Check Z Flag  beq/bne
01:00001E30 0C100080        	  3166:             cmpi.b #$80,(a0)
01:00001E34 66FE            	  3167:             bne.s *                   * Check Z Flag  beq/bne
                            	  3168: 
                            	  3169: *     NOT - WORD
01:00001E36 307C0100        	  3170:             move.l #$00000100,a0
01:00001E3A 7000            	  3171:             moveq  #$00000000,d0
01:00001E3C 4640            	  3172:             not.w d0
01:00001E3E 6AFE            	  3173:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E40 67FE            	  3174:             beq.s *                   * Check Z Flag  beq/bne
01:00001E42 4640            	  3175:             not.w d0
01:00001E44 6BFE            	  3176:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E46 66FE            	  3177:             bne.s *                   * Check Z Flag  beq/bne
01:00001E48 4A40            	  3178:             cmpi.w #$0000,d0
01:00001E4A 66FE            	  3179:             bne.s *                   * Check Z Flag  beq/bne
01:00001E4C 30BC5A5A        	  3180:             move.w #$5a5a,(a0)
01:00001E50 4650            	  3181:             not.w (a0)
01:00001E52 6AFE            	  3182:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E54 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
01:00001E56 4650            	  3184:             not.w (a0)
01:00001E58 6BFE            	  3185:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E5A 67FE            	  3186:             beq.s *                   * Check Z Flag  beq/bne
01:00001E5C 0C505A5A        	  3187:             cmpi.w #$5a5a,(a0)
01:00001E60 66FE            	  3188:             bne.s *                   * Check Z Flag  beq/bne
                            	  3189: 
                            	  3190: *     NOT - LONG
01:00001E62 307C0100        	  3191:             move.l #$00000100,a0
01:00001E66 7000            	  3192:             moveq  #$00000000,d0
01:00001E68 4680            	  3193:             not.l d0
01:00001E6A 6AFE            	  3194:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E6C 67FE            	  3195:             beq.s *                   * Check Z Flag  beq/bne
01:00001E6E 4680            	  3196:             not.l d0
01:00001E70 6BFE            	  3197:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E72 66FE            	  3198:             bne.s *                   * Check Z Flag  beq/bne
01:00001E74 4A80            	  3199:             cmpi.l #$00000000,d0
01:00001E76 66FE            	  3200:             bne.s *                   * Check Z Flag  beq/bne
01:00001E78 20BC5A5A1234    	  3201:             move.l #$5a5a1234,(a0)
01:00001E7E 4690            	  3202:             not.l (a0)
01:00001E80 6AFE            	  3203:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E82 67FE            	  3204:             beq.s *                   * Check Z Flag  beq/bne
01:00001E84 4690            	  3205:             not.l (a0)
01:00001E86 6BFE            	  3206:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E88 67FE            	  3207:             beq.s *                   * Check Z Flag  beq/bne
01:00001E8A 0C905A5A1234    	  3208:             cmpi.l #$5a5a1234,(a0)
01:00001E90 66FE            	  3209:             bne.s *                   * Check Z Flag  beq/bne
                            	  3210: 
                            	  3211: * -----
                            	  3212: 
                            	  3213: *     NEG - BYTE
01:00001E92 307C0100        	  3214:             move.l #$00000100,a0
01:00001E96 7000            	  3215:             moveq  #$00000000,d0
01:00001E98 7240D241        	  3216:             move.l #$00000080,d1
01:00001E9C 4400            	  3217:             neg.b d0
01:00001E9E 6BFE            	  3218:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EA0 66FE            	  3219:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001EA2 65FE            	  3220:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001EA4 69FE            	  3221:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EA6 4401            	  3222:             neg.b d1
01:00001EA8 6AFE            	  3223:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EAA 67FE            	  3224:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EAC 64FE            	  3225:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EAE 68FE            	  3226:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001EB0 0C010080        	  3227:             cmpi.b #$80,d1
01:00001EB4 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne
01:00001EB6 10BC007F        	  3229:             move.b #$7F,(a0)
01:00001EBA 4410            	  3230:             neg.b (a0)
01:00001EBC 6AFE            	  3231:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EBE 67FE            	  3232:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EC0 64FE            	  3233:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EC2 69FE            	  3234:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EC4 10BC00F5        	  3235:             move.b #$F5,(a0)
01:00001EC8 4410            	  3236:             neg.b (a0)
01:00001ECA 6BFE            	  3237:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001ECC 67FE            	  3238:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001ECE 64FE            	  3239:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001ED0 69FE            	  3240:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001ED2 0C10000B        	  3241:             cmpi.b #$0B,(a0)
01:00001ED6 66FE            	  3242:             bne.s *                   * Check Z Flag  beq/bne
                            	  3243: 
                            	  3244: * -----
                            	  3245: 
                            	  3246: *     NEG - WORD
01:00001ED8 307C0100        	  3247:             move.l #$00000100,a0
01:00001EDC 7000            	  3248:             moveq  #$00000000,d0
01:00001EDE 223C00008000    	  3249:             move.l #$00008000,d1
01:00001EE4 4440            	  3250:             neg.w d0
01:00001EE6 6BFE            	  3251:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EE8 66FE            	  3252:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001EEA 65FE            	  3253:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001EEC 69FE            	  3254:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EEE 4441            	  3255:             neg.w d1
01:00001EF0 6AFE            	  3256:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EF2 67FE            	  3257:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EF4 64FE            	  3258:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EF6 68FE            	  3259:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001EF8 0C418000        	  3260:             cmpi.w #$8000,d1
01:00001EFC 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne
01:00001EFE 30BC7FFF        	  3262:             move.w #$7FFF,(a0)
01:00001F02 4450            	  3263:             neg.w (a0)
01:00001F04 6AFE            	  3264:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F06 67FE            	  3265:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F08 64FE            	  3266:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F0A 69FE            	  3267:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F0C 30BCF578        	  3268:             move.w #$F578,(a0)
01:00001F10 4450            	  3269:             neg.w (a0)
01:00001F12 6BFE            	  3270:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F14 67FE            	  3271:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F16 64FE            	  3272:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F18 69FE            	  3273:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F1A 0C500A88        	  3274:             cmpi.w #$0A88,(a0)
01:00001F1E 66FE            	  3275:             bne.s *                   * Check Z Flag  beq/bne
                            	  3276: 
                            	  3277: * -----
                            	  3278: 
                            	  3279: *     NEG - LONG
01:00001F20 307C0100        	  3280:             move.l #$00000100,a0
01:00001F24 7000            	  3281:             moveq  #$00000000,d0
01:00001F26 223C80000000    	  3282:             move.l #$80000000,d1
01:00001F2C 4480            	  3283:             neg.l d0
01:00001F2E 6BFE            	  3284:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F30 66FE            	  3285:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F32 65FE            	  3286:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F34 69FE            	  3287:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F36 4481            	  3288:             neg.l d1
01:00001F38 6AFE            	  3289:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F3A 67FE            	  3290:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F3C 64FE            	  3291:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F3E 68FE            	  3292:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F40 0C8180000000    	  3293:             cmpi.l #$80000000,d1
01:00001F46 66FE            	  3294:             bne.s *                   * Check Z Flag  beq/bne
01:00001F48 20BC7FFFFFFF    	  3295:             move.l #$7FFFFFFF,(a0)
01:00001F4E 4490            	  3296:             neg.l (a0)
01:00001F50 6AFE            	  3297:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F52 67FE            	  3298:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F54 64FE            	  3299:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F56 69FE            	  3300:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F58 20BCF5781234    	  3301:             move.l #$F5781234,(a0)
01:00001F5E 4490            	  3302:             neg.l (a0)
01:00001F60 6BFE            	  3303:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F62 67FE            	  3304:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F64 64FE            	  3305:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F66 69FE            	  3306:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F68 0C900A87EDCC    	  3307:             cmpi.l #$0A87EDCC,(a0)
01:00001F6E 66FE            	  3308:             bne.s *                   * Check Z Flag  beq/bne
                            	  3309: 
                            	  3310: 
                            	  3311: * -----
                            	  3312: 
                            	  3313: *     NEGX - BYTE
01:00001F70 307C0100        	  3314:             move.l #$00000100,a0
01:00001F74 7000            	  3315:             moveq  #$00000000,d0
01:00001F76 7240D241        	  3316:             move.l #$00000080,d1
01:00001F7A 003C0010        	  3317:             ori.b #$10,CCR        * Set X Flag
01:00001F7E 4000            	  3318:             negx.b d0
01:00001F80 6AFE            	  3319:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001F82 67FE            	  3320:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F84 64FE            	  3321:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F86 69FE            	  3322:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F88 023C00EF        	  3323:             andi.b #$EF,CCR       * Clear X Flag
01:00001F8C 4000            	  3324:             negx.b d0
01:00001F8E 6BFE            	  3325:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F90 67FE            	  3326:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001F92 64FE            	  3327:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001F94 69FE            	  3328:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F96 003C0010        	  3329:             ori.b #$10,CCR        * Set X Flag
01:00001F9A 4001            	  3330:             negx.b d1
01:00001F9C 6BFE            	  3331:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001F9E 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FA0 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FA2 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FA4 0C01007F        	  3335:             cmpi.b #$7F,d1
01:00001FA8 66FE            	  3336:             bne.s *                   * Check Z Flag  beq/bne
01:00001FAA 023C00EF        	  3337:             andi.b #$EF,CCR       * Clear X Flag
01:00001FAE 4001            	  3338:             negx.b d1
01:00001FB0 6AFE            	  3339:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FB2 67FE            	  3340:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FB4 64FE            	  3341:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FB6 69FE            	  3342:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FB8 0C010081        	  3343:             cmpi.b #$81,d1
01:00001FBC 66FE            	  3344:             bne.s *                   * Check Z Flag  beq/bne
01:00001FBE 10BC007F        	  3345:             move.b #$7F,(a0)
01:00001FC2 003C0010        	  3346:             ori.b #$10,CCR        * Set X Flag
01:00001FC6 4010            	  3347:             negx.b (a0)
01:00001FC8 6AFE            	  3348:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FCA 67FE            	  3349:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FCC 64FE            	  3350:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3351:             * I think overflow should happen here.
                            	  3352: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FCE 10BC007F        	  3353:             move.b #$7F,(a0)
01:00001FD2 023C00EF        	  3354:             andi.b #$EF,CCR       * Clear X Flag
01:00001FD6 4010            	  3355:             negx.b (a0)
01:00001FD8 6AFE            	  3356:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FDA 67FE            	  3357:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FDC 64FE            	  3358:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FDE 69FE            	  3359:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FE0 10BC00F5        	  3360:             move.b #$F5,(a0)
01:00001FE4 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
01:00001FE8 4010            	  3362:             negx.b (a0)
01:00001FEA 6BFE            	  3363:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FEC 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FEE 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FF0 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FF2 0C10000A        	  3367:             cmpi.b #$0A,(a0)
01:00001FF6 66FE            	  3368:             bne.s *                   * Check Z Flag  beq/bne
01:00001FF8 023C00EF        	  3369:             andi.b #$EF,CCR       * Clear X Flag
01:00001FFC 4010            	  3370:             negx.b (a0)
01:00001FFE 6AFE            	  3371:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002000 67FE            	  3372:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002002 64FE            	  3373:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002004 69FE            	  3374:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002006 0C1000F6        	  3375:             cmpi.b #$F6,(a0)
01:0000200A 66FE            	  3376:             bne.s *                   * Check Z Flag  beq/bne
                            	  3377: 
                            	  3378: 
                            	  3379: 
                            	  3380: * -----
                            	  3381: 
                            	  3382: *     NEGX - WORD
01:0000200C 307C0100        	  3383:             move.l #$00000100,a0
01:00002010 7000            	  3384:             moveq  #$00000000,d0
01:00002012 223C00008000    	  3385:             move.l #$00008000,d1
01:00002018 003C0010        	  3386:             ori.b #$10,CCR        * Set X Flag
01:0000201C 4040            	  3387:             negx.w d0
01:0000201E 6AFE            	  3388:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002020 67FE            	  3389:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002022 64FE            	  3390:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002024 69FE            	  3391:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002026 023C00EF        	  3392:             andi.b #$EF,CCR       * Clear X Flag
01:0000202A 4040            	  3393:             negx.w d0
01:0000202C 6BFE            	  3394:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000202E 67FE            	  3395:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002030 64FE            	  3396:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002032 69FE            	  3397:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002034 003C0010        	  3398:             ori.b #$10,CCR        * Set X Flag
01:00002038 4041            	  3399:             negx.w d1
01:0000203A 6BFE            	  3400:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000203C 67FE            	  3401:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000203E 64FE            	  3402:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002040 69FE            	  3403:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002042 0C417FFF        	  3404:             cmpi.w #$7FFF,d1
01:00002046 66FE            	  3405:             bne.s *                   * Check Z Flag  beq/bne
01:00002048 023C00EF        	  3406:             andi.b #$EF,CCR       * Clear X Flag
01:0000204C 4041            	  3407:             negx.w d1
01:0000204E 6AFE            	  3408:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002050 67FE            	  3409:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002052 64FE            	  3410:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002054 69FE            	  3411:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002056 0C418001        	  3412:             cmpi.w #$8001,d1
01:0000205A 66FE            	  3413:             bne.s *                   * Check Z Flag  beq/bne
01:0000205C 30BC7FFF        	  3414:             move.w #$7FFF,(a0)
01:00002060 003C0010        	  3415:             ori.b #$10,CCR        * Set X Flag
01:00002064 4050            	  3416:             negx.w (a0)
01:00002066 6AFE            	  3417:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002068 67FE            	  3418:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000206A 64FE            	  3419:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3420: ***            
                            	  3421: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000206C 30BCF567        	  3422:             move.w #$F567,(a0)
01:00002070 023C00EF        	  3423:             andi.b #$EF,CCR       * Clear X Flag
01:00002074 4050            	  3424:             negx.w (a0)
01:00002076 6BFE            	  3425:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002078 67FE            	  3426:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000207A 64FE            	  3427:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000207C 69FE            	  3428:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000207E 30BCF567        	  3429:             move.w #$F567,(a0)
01:00002082 003C0010        	  3430:             ori.b #$10,CCR        * Set X Flag
01:00002086 4050            	  3431:             negx.w (a0)
01:00002088 6BFE            	  3432:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000208A 67FE            	  3433:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000208C 64FE            	  3434:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000208E 69FE            	  3435:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002090 0C500A98        	  3436:             cmpi.w #$0A98,(a0)
01:00002094 66FE            	  3437:             bne.s *                   * Check Z Flag  beq/bne
01:00002096 023C00EF        	  3438:             andi.b #$EF,CCR       * Clear X Flag
01:0000209A 4050            	  3439:             negx.w (a0)
01:0000209C 6AFE            	  3440:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:0000209E 67FE            	  3441:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020A0 64FE            	  3442:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020A2 69FE            	  3443:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020A4 0C50F568        	  3444:             cmpi.w #$F568,(a0)
01:000020A8 66FE            	  3445:             bne.s *                   * Check Z Flag  beq/bne
                            	  3446: 
                            	  3447: 
                            	  3448: * -----
                            	  3449: 
                            	  3450: *     NEGX - LONG
01:000020AA 307C0100        	  3451:             move.l #$00000100,a0
01:000020AE 7000            	  3452:             moveq  #$00000000,d0
01:000020B0 223C80000000    	  3453:             move.l #$80000000,d1
01:000020B6 003C0010        	  3454:             ori.b #$10,CCR        * Set X Flag
01:000020BA 4080            	  3455:             negx.l d0
01:000020BC 6AFE            	  3456:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020BE 67FE            	  3457:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020C0 64FE            	  3458:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020C2 69FE            	  3459:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020C4 023C00EF        	  3460:             andi.b #$EF,CCR       * Clear X Flag
01:000020C8 4080            	  3461:             negx.l d0
01:000020CA 6BFE            	  3462:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020CC 67FE            	  3463:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020CE 64FE            	  3464:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020D0 69FE            	  3465:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020D2 003C0010        	  3466:             ori.b #$10,CCR        * Set X Flag
01:000020D6 4081            	  3467:             negx.l d1
01:000020D8 6BFE            	  3468:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020DA 67FE            	  3469:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020DC 64FE            	  3470:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020DE 69FE            	  3471:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:000020E0 0C817FFFFFFF    	  3472:             cmpi.l #$7FFFFFFF,d1
01:000020E6 66FE            	  3473:             bne.s *                   * Check Z Flag  beq/bne
01:000020E8 023C00EF        	  3474:             andi.b #$EF,CCR       * Clear X Flag
01:000020EC 4081            	  3475:             negx.l d1
01:000020EE 6AFE            	  3476:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:000020F0 67FE            	  3477:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020F2 64FE            	  3478:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3479: ****            
                            	  3480: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:000020F4 0C8180000001    	  3481:             cmpi.l #$80000001,d1
01:000020FA 66FE            	  3482:             bne.s *                   * Check Z Flag  beq/bne
01:000020FC 20BC00007FFF    	  3483:             move.l #$7FFF,(a0)
01:00002102 003C0010        	  3484:             ori.b #$10,CCR        * Set X Flag
01:00002106 4090            	  3485:             negx.l (a0)
01:00002108 6AFE            	  3486:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000210A 67FE            	  3487:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000210C 64FE            	  3488:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3489: ****            
                            	  3490: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000210E 20BCF5671234    	  3491:             move.l #$F5671234,(a0)
01:00002114 023C00EF        	  3492:             andi.b #$EF,CCR       * Clear X Flag
01:00002118 4090            	  3493:             negx.l (a0)
01:0000211A 6BFE            	  3494:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000211C 67FE            	  3495:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000211E 64FE            	  3496:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002120 69FE            	  3497:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002122 20BCF5675678    	  3498:             move.l #$F5675678,(a0)
01:00002128 003C0010        	  3499:             ori.b #$10,CCR        * Set X Flag
01:0000212C 4090            	  3500:             negx.l (a0)
01:0000212E 6BFE            	  3501:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002130 67FE            	  3502:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002132 64FE            	  3503:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002134 69FE            	  3504:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002136 0C900A98A987    	  3505:             cmpi.l #$0A98A987,(a0)
01:0000213C 66FE            	  3506:             bne.s *                   * Check Z Flag  beq/bne
01:0000213E 023C00EF        	  3507:             andi.b #$EF,CCR       * Clear X Flag
01:00002142 4090            	  3508:             negx.l (a0)
01:00002144 6AFE            	  3509:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002146 67FE            	  3510:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002148 64FE            	  3511:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000214A 69FE            	  3512:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000214C 0C90F5675679    	  3513:             cmpi.l #$F5675679,(a0)
01:00002152 66FE            	  3514:             bne.s *                   * Check Z Flag  beq/bne
                            	  3515: 
                            	  3516: 
                            	  3517: * -----
                            	  3518: 
                            	  3519: *     CLR - BYTE
01:00002154 307C0100        	  3520:             move.l #$00000100,a0
01:00002158 203C12345678    	  3521:             move.l #$12345678,d0
01:0000215E 223C12345678    	  3522:             move.l #$12345678,d1
01:00002164 243C12345678    	  3523:             move.l #$12345678,d2
01:0000216A 283C12345600    	  3524:             move.l #$12345600,d4
01:00002170 2A3C12340000    	  3525:             move.l #$12340000,d5
01:00002176 7C00            	  3526:             moveq  #$00000000,d6
                            	  3527: 
01:00002178 4200            	  3528:             clr.b d0
01:0000217A 66FE            	  3529:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000217C 6BFE            	  3530:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000217E B880            	  3531:             cmp.l d0,d4
01:00002180 66FE            	  3532:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3533: 
01:00002182 4241            	  3534:             clr.w d1
01:00002184 66FE            	  3535:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002186 6BFE            	  3536:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002188 BA81            	  3537:             cmp.l d1,d5
01:0000218A 66FE            	  3538:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3539: 
01:0000218C 7400            	  3540:             clr.l d2
01:0000218E 66FE            	  3541:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002190 6BFE            	  3542:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002192 BC82            	  3543:             cmp.l d2,d6
01:00002194 66FE            	  3544:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3545: 
01:00002196 4E75            	  3546:             rts
                            	  3547: 
                            	  3548: 
                            	  3549: 
                            	  3550: *-----------------------------------------------------------
                            	  3551: *-----------------------------------------------------------
                            	  3552: * OPCODE : MOVEM
                            	  3553: *-----------------------------------------------------------
                            	  3554: *-----------------------------------------------------------
                            	  3555: op_MOVEM:
                            	  3556: 
                            	  3557: *     WORD  Registers --> Memory
01:00002198 203C0000D0D0    	  3558:             move.l #$0000d0d0,d0
01:0000219E 223C0000D1D1    	  3559:             move.l #$0000d1d1,d1
01:000021A4 243C0000D2D2    	  3560:             move.l #$0000d2d2,d2
01:000021AA 263C0000D3D3    	  3561:             move.l #$0000d3d3,d3
01:000021B0 283C0000D4D4    	  3562:             move.l #$0000d4d4,d4
01:000021B6 2A3C0000D5D5    	  3563:             move.l #$0000d5d5,d5
01:000021BC 2C3C0000D6D6    	  3564:             move.l #$0000d6d6,d6
01:000021C2 2E3C0000D7D7    	  3565:             move.l #$0000d7d7,d7
01:000021C8 307C0A0A        	  3566:             move.l #$00000a0a,a0
01:000021CC 327C1A1A        	  3567:             move.l #$00001a1a,a1
01:000021D0 347C2A2A        	  3568:             move.l #$00002a2a,a2
01:000021D4 367C3A3A        	  3569:             move.l #$00003a3a,a3
01:000021D8 387C4A4A        	  3570:             move.l #$00004a4a,a4
01:000021DC 3A7C5A5A        	  3571:             move.l #$00005a5a,a5
01:000021E0 3C7C6A6A        	  3572:             move.l #$00006a6a,a6
                            	  3573: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3574: 
01:000021E4 48B8FFFF0100    	  3575:             movem.w D0-D7/A0-A7,$00000100
                            	  3576: 
01:000021EA 307C0100        	  3577:             move.l #$00000100,a0
                            	  3578: 
01:000021EE B058            	  3579:             cmp.w (a0)+,d0
01:000021F0 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021F2 B258            	  3581:             cmp.w (a0)+,d1
01:000021F4 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021F6 B458            	  3583:             cmp.w (a0)+,d2
01:000021F8 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021FA B658            	  3585:             cmp.w (a0)+,d3
01:000021FC 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021FE B858            	  3587:             cmp.w (a0)+,d4
01:00002200 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002202 BA58            	  3589:             cmp.w (a0)+,d5
01:00002204 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002206 BC58            	  3591:             cmp.w (a0)+,d6
01:00002208 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000220A BE58            	  3593:             cmp.w (a0)+,d7
01:0000220C 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3595: 
01:0000220E 0C580A0A        	  3596:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002212 66FE            	  3597:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3598: 
01:00002214 B2D8            	  3599:             cmp.w (a0)+,a1
01:00002216 66FE            	  3600:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002218 B4D8            	  3601:             cmp.w (a0)+,a2
01:0000221A 66FE            	  3602:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000221C B6D8            	  3603:             cmp.w (a0)+,a3
01:0000221E 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002220 B8D8            	  3605:             cmp.w (a0)+,a4
01:00002222 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002224 BAD8            	  3607:             cmp.w (a0)+,a5
01:00002226 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002228 BCD8            	  3609:             cmp.w (a0)+,a6
01:0000222A 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: *     LONG  Registers --> Memory
01:0000222C 203CD0D0D0D0    	  3616:             move.l #$d0d0d0d0,d0
01:00002232 223CD1D1D1D1    	  3617:             move.l #$d1d1d1d1,d1
01:00002238 243CD2D2D2D2    	  3618:             move.l #$d2d2d2d2,d2
01:0000223E 263CD3D3D3D3    	  3619:             move.l #$d3d3d3d3,d3
01:00002244 283CD4D4D4D4    	  3620:             move.l #$d4d4d4d4,d4
01:0000224A 2A3CD5D5D5D5    	  3621:             move.l #$d5d5d5d5,d5
01:00002250 2C3CD6D6D6D6    	  3622:             move.l #$d6d6d6d6,d6
01:00002256 2E3CD7D7D7D7    	  3623:             move.l #$d7d7d7d7,d7
01:0000225C 207C0A0A0A0A    	  3624:             move.l #$0a0a0a0a,a0
01:00002262 227C1A1A1A1A    	  3625:             move.l #$1a1a1a1a,a1
01:00002268 247C2A2A2A2A    	  3626:             move.l #$2a2a2a2a,a2
01:0000226E 267C3A3A3A3A    	  3627:             move.l #$3a3a3a3a,a3
01:00002274 287C4A4A4A4A    	  3628:             move.l #$4a4a4a4a,a4
01:0000227A 2A7C5A5A5A5A    	  3629:             move.l #$5a5a5a5a,a5
01:00002280 2C7C6A6A6A6A    	  3630:             move.l #$6a6a6a6a,a6
                            	  3631: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3632: 
                            	  3633: 
01:00002286 48F8FFFF0120    	  3634:             movem.l D0-D7/A0-A7,$00000120
                            	  3635: 
01:0000228C 307C0120        	  3636:             move.l #$00000120,a0
                            	  3637: 
01:00002290 B098            	  3638:             cmp.l (a0)+,d0
01:00002292 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002294 B298            	  3640:             cmp.l (a0)+,d1
01:00002296 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002298 B498            	  3642:             cmp.l (a0)+,d2
01:0000229A 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000229C B698            	  3644:             cmp.l (a0)+,d3
01:0000229E 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022A0 B898            	  3646:             cmp.l (a0)+,d4
01:000022A2 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022A4 BA98            	  3648:             cmp.l (a0)+,d5
01:000022A6 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022A8 BC98            	  3650:             cmp.l (a0)+,d6
01:000022AA 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022AC BE98            	  3652:             cmp.l (a0)+,d7
01:000022AE 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3654: 
01:000022B0 0C980A0A0A0A    	  3655:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:000022B6 66FE            	  3656:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3657: 
01:000022B8 B3D8            	  3658:             cmp.l (a0)+,a1
01:000022BA 66FE            	  3659:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022BC B5D8            	  3660:             cmp.l (a0)+,a2
01:000022BE 66FE            	  3661:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C0 B7D8            	  3662:             cmp.l (a0)+,a3
01:000022C2 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C4 B9D8            	  3664:             cmp.l (a0)+,a4
01:000022C6 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C8 BBD8            	  3666:             cmp.l (a0)+,a5
01:000022CA 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CC BDD8            	  3668:             cmp.l (a0)+,a6
01:000022CE 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3670: *      ----
                            	  3671: 
                            	  3672: 
                            	  3673: *     WORD  Registers --> Memory  -(An) EA Mode
01:000022D0 203C0000D0D0    	  3674:             move.l #$0000d0d0,d0
01:000022D6 223C0000D1D1    	  3675:             move.l #$0000d1d1,d1
01:000022DC 243C0000D2D2    	  3676:             move.l #$0000d2d2,d2
01:000022E2 263C0000D3D3    	  3677:             move.l #$0000d3d3,d3
01:000022E8 283C0000D4D4    	  3678:             move.l #$0000d4d4,d4
01:000022EE 2A3C0000D5D5    	  3679:             move.l #$0000d5d5,d5
01:000022F4 2C3C0000D6D6    	  3680:             move.l #$0000d6d6,d6
01:000022FA 2E3C0000D7D7    	  3681:             move.l #$0000d7d7,d7
01:00002300 307C0A0A        	  3682:             move.l #$00000a0a,a0
01:00002304 327C1A1A        	  3683:             move.l #$00001a1a,a1
01:00002308 347C2A2A        	  3684:             move.l #$00002a2a,a2
01:0000230C 367C3A3A        	  3685:             move.l #$00003a3a,a3
01:00002310 387C4A4A        	  3686:             move.l #$00004a4a,a4
01:00002314 3A7C5A5A        	  3687:             move.l #$00005a5a,a5
01:00002318 3C7C6A6A        	  3688:             move.l #$00006a6a,a6
                            	  3689: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3690: 
01:0000231C 307C01A0        	  3691:             move.l #$000001A0,a0
01:00002320 48A0FFFF        	  3692:             movem.w D0-D7/A0-A7,-(a0)
                            	  3693: 
01:00002324 307C019E        	  3694:             move.l #$0000019E,a0
                            	  3695: 
01:00002328 BCE0            	  3696:             cmp.w -(a0),a6
01:0000232A 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000232C BAE0            	  3698:             cmp.w -(a0),a5
01:0000232E 66FE            	  3699:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002330 B8E0            	  3700:             cmp.w -(a0),a4
01:00002332 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002334 B6E0            	  3702:             cmp.w -(a0),a3
01:00002336 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002338 B4E0            	  3704:             cmp.w -(a0),a2
01:0000233A 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000233C B2E0            	  3706:             cmp.w -(a0),a1
01:0000233E 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002340 B0E0            	  3708:             cmp.w -(a0),a0
                            	  3709: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002342 BE60            	  3710:             cmp.w -(a0),d7
01:00002344 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002346 BC60            	  3712:             cmp.w -(a0),d6
01:00002348 66FE            	  3713:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000234A BA60            	  3714:             cmp.w -(a0),d5
01:0000234C 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000234E B860            	  3716:             cmp.w -(a0),d4
01:00002350 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002352 B660            	  3718:             cmp.w -(a0),d3
01:00002354 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002356 B460            	  3720:             cmp.w -(a0),d2
01:00002358 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235A B260            	  3722:             cmp.w -(a0),d1
01:0000235C 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235E B060            	  3724:             cmp.w -(a0),d0
01:00002360 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: *     LONG  Registers --> Memory   -(An) EA Mode
01:00002362 203CD0D0D0D0    	  3731:             move.l #$d0d0d0d0,d0
01:00002368 223CD1D1D1D1    	  3732:             move.l #$d1d1d1d1,d1
01:0000236E 243CD2D2D2D2    	  3733:             move.l #$d2d2d2d2,d2
01:00002374 263CD3D3D3D3    	  3734:             move.l #$d3d3d3d3,d3
01:0000237A 283CD4D4D4D4    	  3735:             move.l #$d4d4d4d4,d4
01:00002380 2A3CD5D5D5D5    	  3736:             move.l #$d5d5d5d5,d5
01:00002386 2C3CD6D6D6D6    	  3737:             move.l #$d6d6d6d6,d6
01:0000238C 2E3CD7D7D7D7    	  3738:             move.l #$d7d7d7d7,d7
01:00002392 207C0A0A0A0A    	  3739:             move.l #$0a0a0a0a,a0
01:00002398 227C1A1A1A1A    	  3740:             move.l #$1a1a1a1a,a1
01:0000239E 247C2A2A2A2A    	  3741:             move.l #$2a2a2a2a,a2
01:000023A4 267C3A3A3A3A    	  3742:             move.l #$3a3a3a3a,a3
01:000023AA 287C4A4A4A4A    	  3743:             move.l #$4a4a4a4a,a4
01:000023B0 2A7C5A5A5A5A    	  3744:             move.l #$5a5a5a5a,a5
01:000023B6 2C7C6A6A6A6A    	  3745:             move.l #$6a6a6a6a,a6
                            	  3746: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3747: 
                            	  3748: 
01:000023BC 307C01A0        	  3749:             move.l #$000001A0,a0
01:000023C0 48E0FFFF        	  3750:             movem.l D0-D7/A0-A7,-(a0)
                            	  3751: 
01:000023C4 307C019C        	  3752:             move.l #$0000019C,a0
                            	  3753: 
01:000023C8 BDE0            	  3754:             cmp.l -(a0),a6
01:000023CA 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023CC BBE0            	  3756:             cmp.l -(a0),a5
01:000023CE 66FE            	  3757:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023D0 B9E0            	  3758:             cmp.l -(a0),a4
01:000023D2 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023D4 B7E0            	  3760:             cmp.l -(a0),a3
01:000023D6 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023D8 B5E0            	  3762:             cmp.l -(a0),a2
01:000023DA 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023DC B3E0            	  3764:             cmp.l -(a0),a1
01:000023DE 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023E0 B1E0            	  3766:             cmp.l -(a0),a0
                            	  3767: *            bne.s *                   * Check Z Flag  beq/bne 0
01:000023E2 BEA0            	  3768:             cmp.l -(a0),d7
01:000023E4 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023E6 BCA0            	  3770:             cmp.l -(a0),d6
01:000023E8 66FE            	  3771:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EA BAA0            	  3772:             cmp.l -(a0),d5
01:000023EC 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EE B8A0            	  3774:             cmp.l -(a0),d4
01:000023F0 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F2 B6A0            	  3776:             cmp.l -(a0),d3
01:000023F4 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F6 B4A0            	  3778:             cmp.l -(a0),d2
01:000023F8 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FA B2A0            	  3780:             cmp.l -(a0),d1
01:000023FC 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FE B0A0            	  3782:             cmp.l -(a0),d0
01:00002400 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3784: 
                            	  3785: 
                            	  3786: 
                            	  3787: *     ----
                            	  3788: 
                            	  3789: *     WORD - Memory --> Registers
01:00002402 7000            	  3790:             moveq  #$00000000,d0
01:00002404 7200            	  3791:             moveq  #$00000000,d1
01:00002406 7400            	  3792:             moveq  #$00000000,d2
01:00002408 7600            	  3793:             moveq  #$00000000,d3
01:0000240A 7800            	  3794:             moveq  #$00000000,d4
01:0000240C 7A00            	  3795:             moveq  #$00000000,d5
01:0000240E 7C00            	  3796:             moveq  #$00000000,d6
01:00002410 7E00            	  3797:             moveq  #$00000000,d7
01:00002412 91C8            	  3798:             move.l #$00000000,a0
01:00002414 93C9            	  3799:             move.l #$00000000,a1
01:00002416 95CA            	  3800:             move.l #$00000000,a2
01:00002418 97CB            	  3801:             move.l #$00000000,a3
01:0000241A 99CC            	  3802:             move.l #$00000000,a4
01:0000241C 9BCD            	  3803:             move.l #$00000000,a5
01:0000241E 9DCE            	  3804:             move.l #$00000000,a6
                            	  3805: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3806: 
01:00002420 4CB82A550100    	  3807:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3808: 
01:00002426 B0BCFFFFD0D0    	  3809:             cmp.l #$FFFFD0D0,d0
01:0000242C 66FE            	  3810:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000242E B4BCFFFFD1D1    	  3811:             cmp.l #$FFFFD1D1,d2
01:00002434 66FE            	  3812:             bne.s *                  * Check Z Flag  beq/bne 0
01:00002436 B8BCFFFFD2D2    	  3813:             cmp.l #$FFFFD2D2,d4
01:0000243C 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000243E BCBCFFFFD3D3    	  3815:             cmp.l #$FFFFD3D3,d6
01:00002444 66FE            	  3816:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002446 B2FCD4D4        	  3817:             cmp.l #$FFFFD4D4,a1
01:0000244A 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000244C B6FCD5D5        	  3819:             cmp.l #$FFFFD5D5,a3
01:00002450 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002452 BAFCD6D6        	  3821:             cmp.l #$FFFFD6D6,a5
01:00002456 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3823: 
                            	  3824: 
                            	  3825: *     LONG - Memory --> Registers
01:00002458 7000            	  3826:             moveq  #$00000000,d0
01:0000245A 7200            	  3827:             moveq  #$00000000,d1
01:0000245C 7400            	  3828:             moveq  #$00000000,d2
01:0000245E 7600            	  3829:             moveq  #$00000000,d3
01:00002460 7800            	  3830:             moveq  #$00000000,d4
01:00002462 7A00            	  3831:             moveq  #$00000000,d5
01:00002464 7C00            	  3832:             moveq  #$00000000,d6
01:00002466 7E00            	  3833:             moveq  #$00000000,d7
01:00002468 91C8            	  3834:             move.l #$00000000,a0
01:0000246A 93C9            	  3835:             move.l #$00000000,a1
01:0000246C 95CA            	  3836:             move.l #$00000000,a2
01:0000246E 97CB            	  3837:             move.l #$00000000,a3
01:00002470 99CC            	  3838:             move.l #$00000000,a4
01:00002472 9BCD            	  3839:             move.l #$00000000,a5
01:00002474 9DCE            	  3840:             move.l #$00000000,a6
                            	  3841: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3842: 
01:00002476 4CF82A550120    	  3843:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3844: 
01:0000247C B0BCD0D0D0D0    	  3845:             cmp.l #$D0D0D0D0,d0
01:00002482 66FE            	  3846:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002484 B4BCD1D1D1D1    	  3847:             cmp.l #$D1D1D1D1,d2
01:0000248A 66FE            	  3848:             bne.s *                  * Check Z Flag  beq/bne 0
01:0000248C B8BCD2D2D2D2    	  3849:             cmp.l #$D2D2D2D2,d4
01:00002492 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002494 BCBCD3D3D3D3    	  3851:             cmp.l #$D3D3D3D3,d6
01:0000249A 66FE            	  3852:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000249C B3FCD4D4D4D4    	  3853:             cmp.l #$D4D4D4D4,a1
01:000024A2 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024A4 B7FCD5D5D5D5    	  3855:             cmp.l #$D5D5D5D5,a3
01:000024AA 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024AC BBFCD6D6D6D6    	  3857:             cmp.l #$D6D6D6D6,a5
01:000024B2 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3859: 
01:000024B4 4E75            	  3860:             rts
                            	  3861: 
                            	  3862: 
                            	  3863: *-----------------------------------------------------------
                            	  3864: *-----------------------------------------------------------
                            	  3865: * OPCODE : ABCD
                            	  3866: *-----------------------------------------------------------
                            	  3867: *-----------------------------------------------------------
                            	  3868: op_ABCD:
                            	  3869: 
                            	  3870: *     Test with X Flag CLEARED
01:000024B6 307C0110        	  3871:                 move.l #$00000110,a0 * Address pointer-X
01:000024BA 327C0120        	  3872:                 move.l #$00000120,a1 * Address pointer-Y
01:000024BE 7000            	  3873:                 moveq  #$00000000,d0 * BCD byte-X
01:000024C0 7200            	  3874:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024C2 7400            	  3875:                 moveq  #$00000000,d2
01:000024C4 7600            	  3876:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000024C6 7800            	  3877:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000024C8 7A00            	  3878:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000024CA 2C3C00000099    	  3879:                 move.l #$00000099,d6 * Inner loop counter
01:000024D0 2E3C00000099    	  3880:                 move.l #$00000099,d7 * Outer loop counter
                            	  3881: 
01:000024D6 2007            	  3882: ABCD_OUTER1:    move.l d7,d0
01:000024D8 2206            	  3883: ABCD_INNER1:    move.l d6,d1
01:000024DA 023C00EF        	  3884:                 andi.b #$EF,CCR     * Clear X Flag
01:000024DE 307C0110        	  3885:                 move.l #$00000110,a0 * Address pointer-X
01:000024E2 327C0120        	  3886:                 move.l #$00000120,a1 * Address pointer-Y
01:000024E6 1140FFFF        	  3887:                 move.b d0,-1(a0)
01:000024EA 1341FFFF        	  3888:                 move.b d1,-1(a1)
                            	  3889: 
01:000024EE C300            	  3890:                 abcd d0,d1
01:000024F0 6402            	  3891:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:000024F2 5284            	  3892:                 add.l #1,d4
01:000024F4 DA81            	  3893: ABCD_NO_C1:     add.l d1,d5
                            	  3894: 
01:000024F6 C308            	  3895:                 abcd -(a0),-(a1)
01:000024F8 6402            	  3896:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:000024FA 5284            	  3897:                 add.l #1,d4
01:000024FC D611            	  3898: ABCD_NO_C2:     add.b (a1),d3
                            	  3899: 
                            	  3900: 
01:000024FE 51CEFFD8        	  3901:                 dbf d6,ABCD_INNER1
01:00002502 2C3C00000099    	  3902:                 move.l #$00000099,d6
01:00002508 51CFFFCC        	  3903:                 dbf d7,ABCD_OUTER1
01:0000250C 0C8400005AFC    	  3904:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:00002512 66FE            	  3905:                 bne.s *
01:00002514 0C85001C9A34    	  3906:                 cmpi.l #$001C9A34,d5
01:0000251A 66FE            	  3907:                 bne.s *
01:0000251C 0C8300000034    	  3908:                 cmpi.l #$00000034,d3
01:00002522 66FE            	  3909:                 bne.s *
                            	  3910: 
                            	  3911: *     Test with X Flag SET
01:00002524 307C0110        	  3912:                 move.l #$00000110,a0 * Address pointer-X
01:00002528 327C0120        	  3913:                 move.l #$00000120,a1 * Address pointer-Y
01:0000252C 7000            	  3914:                 moveq  #$00000000,d0 * BCD byte-X
01:0000252E 7200            	  3915:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002530 7400            	  3916:                 moveq  #$00000000,d2
01:00002532 7600            	  3917:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002534 7800            	  3918:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002536 7A00            	  3919:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002538 2C3C00000099    	  3920:                 move.l #$00000099,d6 * Inner loop counter
01:0000253E 2E3C00000099    	  3921:                 move.l #$00000099,d7 * Outer loop counter
                            	  3922: 
01:00002544 2007            	  3923: ABCD_OUTER2:    move.l d7,d0
01:00002546 2206            	  3924: ABCD_INNER2:    move.l d6,d1
01:00002548 003C0010        	  3925:                 ori.b #$10,CCR      * Set X Flag
01:0000254C 307C0110        	  3926:                 move.l #$00000110,a0 * Address pointer-X
01:00002550 327C0120        	  3927:                 move.l #$00000120,a1 * Address pointer-Y
01:00002554 1140FFFF        	  3928:                 move.b d0,-1(a0)
01:00002558 1341FFFF        	  3929:                 move.b d1,-1(a1)
                            	  3930: 
01:0000255C C300            	  3931:                 abcd d0,d1
01:0000255E 6402            	  3932:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002560 5284            	  3933:                 add.l #1,d4
01:00002562 DA81            	  3934: ABCD_NO_C3:     add.l d1,d5
                            	  3935: 
01:00002564 C308            	  3936:                 abcd -(a0),-(a1)
01:00002566 6402            	  3937:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002568 5284            	  3938:                 add.l #1,d4
01:0000256A D611            	  3939: ABCD_NO_C4:     add.b (a1),d3
                            	  3940: 
                            	  3941: 
01:0000256C 51CEFFD8        	  3942:                 dbf d6,ABCD_INNER2
01:00002570 2C3C00000099    	  3943:                 move.l #$00000099,d6
01:00002576 51CFFFCC        	  3944:                 dbf d7,ABCD_OUTER2
01:0000257A 0C8400005B60    	  3945:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:00002580 66FE            	  3946:                 bne.s *
01:00002582 0C85001CCFC8    	  3947:                 cmpi.l #$001CCFC8,d5
01:00002588 66FE            	  3948:                 bne.s *
01:0000258A 0C8300000034    	  3949:                 cmpi.l #$00000034,d3
01:00002590 66FE            	  3950:                 bne.s *
                            	  3951: 
                            	  3952: *             Quick check of Z Flag
01:00002592 4200            	  3953:                 move.b #$00,d0
01:00002594 4201            	  3954:                 move.b #$00,d1
01:00002596 44FC0000        	  3955:                 move #$00,CCR              * Set Z flag to 0
01:0000259A C101            	  3956:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:0000259C 67FE            	  3957:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3958: 
01:0000259E 103C0001        	  3959:                 move.b #$01,d0
01:000025A2 4201            	  3960:                 move.b #$00,d1
01:000025A4 44FC0004        	  3961:                 move #$04,CCR              * Set Z flag to 0
01:000025A8 C101            	  3962:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025AA 67FE            	  3963:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3964: 
01:000025AC 4E75            	  3965:                 rts
                            	  3966: 
                            	  3967: *-----------------------------------------------------------
                            	  3968: *-----------------------------------------------------------
                            	  3969: * OPCODE : SBCD
                            	  3970: *-----------------------------------------------------------
                            	  3971: *-----------------------------------------------------------
                            	  3972: op_SBCD:
                            	  3973: 
                            	  3974: *     Test with X Flag CLEARED
01:000025AE 307C0110        	  3975:                 move.l #$00000110,a0 * Address pointer-X
01:000025B2 327C0120        	  3976:                 move.l #$00000120,a1 * Address pointer-Y
01:000025B6 7000            	  3977:                 moveq  #$00000000,d0 * BCD byte-X
01:000025B8 7200            	  3978:                 moveq  #$00000000,d1 * BCD byte-Y
01:000025BA 7400            	  3979:                 moveq  #$00000000,d2
01:000025BC 7600            	  3980:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000025BE 7800            	  3981:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025C0 7A00            	  3982:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000025C2 2C3C00000099    	  3983:                 move.l #$00000099,d6 * Inner loop counter
01:000025C8 2E3C00000099    	  3984:                 move.l #$00000099,d7 * Outer loop counter
                            	  3985: 
01:000025CE 2007            	  3986: SBCD_OUTER1:    move.l d7,d0
01:000025D0 2206            	  3987: SBCD_INNER1:    move.l d6,d1
01:000025D2 023C00EF        	  3988:                 andi.b #$EF,CCR     * Clear X Flag
01:000025D6 307C0110        	  3989:                 move.l #$00000110,a0 * Address pointer-X
01:000025DA 327C0120        	  3990:                 move.l #$00000120,a1 * Address pointer-Y
01:000025DE 1140FFFF        	  3991:                 move.b d0,-1(a0)
01:000025E2 1341FFFF        	  3992:                 move.b d1,-1(a1)
                            	  3993: 
01:000025E6 8300            	  3994:                 sbcd d0,d1
01:000025E8 6402            	  3995:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:000025EA 5284            	  3996:                 add.l #1,d4
01:000025EC DA81            	  3997: SBCD_NO_C1:     add.l d1,d5
                            	  3998: 
01:000025EE 8308            	  3999:                 sbcd -(a0),-(a1)
01:000025F0 6402            	  4000:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:000025F2 5284            	  4001:                 add.l #1,d4
01:000025F4 D611            	  4002: SBCD_NO_C2:     add.b (a1),d3
                            	  4003: 
                            	  4004: 
01:000025F6 51CEFFD8        	  4005:                 dbf d6,SBCD_INNER1
01:000025FA 2C3C00000099    	  4006:                 move.l #$00000099,d6
01:00002600 51CFFFCC        	  4007:                 dbf d7,SBCD_OUTER1
01:00002604 0C8400005C0A    	  4008:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:0000260A 66FE            	  4009:                 bne.s *
01:0000260C 0C85001C459E    	  4010:                 cmpi.l #$001C459E,d5
01:00002612 66FE            	  4011:                 bne.s *
01:00002614 0C830000009E    	  4012:                 cmpi.l #$0000009E,d3
01:0000261A 66FE            	  4013:                 bne.s *
                            	  4014: 
                            	  4015: *     Test with X Flag SET
01:0000261C 307C0110        	  4016:                 move.l #$00000110,a0 * Address pointer-X
01:00002620 327C0120        	  4017:                 move.l #$00000120,a1 * Address pointer-Y
01:00002624 7000            	  4018:                 moveq  #$00000000,d0 * BCD byte-X
01:00002626 7200            	  4019:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002628 7400            	  4020:                 moveq  #$00000000,d2
01:0000262A 7600            	  4021:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:0000262C 7800            	  4022:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000262E 7A00            	  4023:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002630 2C3C00000099    	  4024:                 move.l #$00000099,d6 * Inner loop counter
01:00002636 2E3C00000099    	  4025:                 move.l #$00000099,d7 * Outer loop counter
                            	  4026: 
01:0000263C 2007            	  4027: SBCD_OUTER2:    move.l d7,d0
01:0000263E 2206            	  4028: SBCD_INNER2:    move.l d6,d1
01:00002640 003C0010        	  4029:                 ori.b #$10,CCR      * Set X Flag
01:00002644 307C0110        	  4030:                 move.l #$00000110,a0 * Address pointer-X
01:00002648 327C0120        	  4031:                 move.l #$00000120,a1 * Address pointer-Y
01:0000264C 1140FFFF        	  4032:                 move.b d0,-1(a0)
01:00002650 1341FFFF        	  4033:                 move.b d1,-1(a1)
                            	  4034: 
01:00002654 8300            	  4035:                 sbcd d0,d1
01:00002656 6402            	  4036:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002658 5284            	  4037:                 add.l #1,d4
01:0000265A DA81            	  4038: SBCD_NO_C3:     add.l d1,d5
                            	  4039: 
01:0000265C 8308            	  4040:                 sbcd -(a0),-(a1)
01:0000265E 6402            	  4041:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002660 5284            	  4042:                 add.l #1,d4
01:00002662 D611            	  4043: SBCD_NO_C4:     add.b (a1),d3
                            	  4044: 
01:00002664 51CEFFD8        	  4045:                 dbf d6,SBCD_INNER2
01:00002668 2C3C00000099    	  4046:                 move.l #$00000099,d6
01:0000266E 51CFFFCC        	  4047:                 dbf d7,SBCD_OUTER2
01:00002672 0C8400005CA4    	  4048:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:00002678 66FE            	  4049:                 bne.s *
01:0000267A 0C85001C5C66    	  4050:                 cmpi.l #$001C5C66,d5
01:00002680 66FE            	  4051:                 bne.s *
01:00002682 0C830000009E    	  4052:                 cmpi.l #$0000009E,d3
01:00002688 66FE            	  4053:                 bne.s *
                            	  4054: 
                            	  4055: 
                            	  4056: *             Quick check of Z Flag
01:0000268A 4200            	  4057:                 move.b #$00,d0
01:0000268C 4201            	  4058:                 move.b #$00,d1
01:0000268E 44FC0000        	  4059:                 move #$00,CCR              * Set Z flag to 0
01:00002692 8101            	  4060:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:00002694 67FE            	  4061:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4062: 
01:00002696 103C0001        	  4063:                 move.b #$01,d0
01:0000269A 4201            	  4064:                 move.b #$00,d1
01:0000269C 44FC0004        	  4065:                 move #$04,CCR              * Set Z flag to 0
01:000026A0 8101            	  4066:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026A2 67FE            	  4067:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4068: 
01:000026A4 4E75            	  4069:                 rts
                            	  4070: 
                            	  4071: *-----------------------------------------------------------
                            	  4072: *-----------------------------------------------------------
                            	  4073: * OPCODE : NBCD
                            	  4074: *-----------------------------------------------------------
                            	  4075: *-----------------------------------------------------------
                            	  4076: op_NBCD:
                            	  4077: 
                            	  4078: *        NBCD to a  Register
                            	  4079: 
01:000026A6 7000            	  4080:                 moveq  #$00000000,d0 * BCD byte
01:000026A8 7200            	  4081:                 moveq  #$00000000,d1
01:000026AA 7400            	  4082:                 moveq  #$00000000,d2
01:000026AC 7600            	  4083:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000026AE 7800            	  4084:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026B0 7A00            	  4085:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026B2 2C3C00000099    	  4086:                 move.l #$00000099,d6
01:000026B8 2E3C00000099    	  4087:                 move.l #$00000099,d7 * Loop counter
                            	  4088: 
01:000026BE 2007            	  4089: NBCD_LOOP:      move.l d7,d0
01:000026C0 44FC0004        	  4090:                 move #$04,CCR        * Set Z flag to 0
                            	  4091: 
01:000026C4 4800            	  4092:                 nbcd d0
                            	  4093: 
01:000026C6 6402            	  4094:                 bcc.s NBCD_NO_C         * Check C Flag
01:000026C8 5284            	  4095:                 add.l #1,d4
01:000026CA 6602            	  4096: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:000026CC 5283            	  4097:                 add.l #1,d3
01:000026CE DA80            	  4098: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4099: 
01:000026D0 51CFFFEC        	  4100:                 dbf d7,NBCD_LOOP
                            	  4101: 
01:000026D4 0C8300000001    	  4102:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:000026DA 66FE            	  4103:                 bne.s *
01:000026DC 0C8400000099    	  4104:                 cmpi.l #$00000099,d4
01:000026E2 66FE            	  4105:                 bne.s *
01:000026E4 0C8500002E3B    	  4106:                 cmpi.l #$00002E3B,d5
01:000026EA 66FE            	  4107:                 bne.s *
                            	  4108: 
                            	  4109: 
                            	  4110: *        NBCD to a memory location
                            	  4111: 
01:000026EC 7000            	  4112:                 moveq  #$00000000,d0 * BCD byte
01:000026EE 7200            	  4113:                 moveq  #$00000000,d1
01:000026F0 7400            	  4114:                 moveq  #$00000000,d2
01:000026F2 7600            	  4115:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000026F4 7800            	  4116:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026F6 7A00            	  4117:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026F8 2C3C00000099    	  4118:                 move.l #$00000099,d6
01:000026FE 2E3C00000099    	  4119:                 move.l #$00000099,d7 * Loop counter
                            	  4120: 
01:00002704 11C70100        	  4121: NBCD_LOOP1:     move.b d7,$00000100
01:00002708 44FC0004        	  4122:                 move #$04,CCR        * Set Z flag to 0
                            	  4123: 
01:0000270C 48380100        	  4124:                 nbcd $00000100
01:00002710 10380100        	  4125:                 move.b $00000100,d0
                            	  4126: 
01:00002714 6402            	  4127:                 bcc.s NBCD_NO_C1        * Check C Flag
01:00002716 5284            	  4128:                 add.l #1,d4
01:00002718 6602            	  4129: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:0000271A 5283            	  4130:                 add.l #1,d3
01:0000271C DA80            	  4131: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4132: 
01:0000271E 51CFFFE4        	  4133:                 dbf d7,NBCD_LOOP1
                            	  4134: 
01:00002722 0C8300000001    	  4135:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002728 66FE            	  4136:                 bne.s *
01:0000272A 4A84            	  4137:                 cmpi.l #$00000000,d4
01:0000272C 66FE            	  4138:                 bne.s *
01:0000272E 0C8500002E3B    	  4139:                 cmpi.l #$00002E3B,d5
01:00002734 66FE            	  4140:                 bne.s *
                            	  4141: 
                            	  4142: 
01:00002736 4E75            	  4143:                 rts
                            	  4144: 
                            	  4145: 
                            	  4146: 
                            	  4147: *-----------------------------------------------------------
                            	  4148: *-----------------------------------------------------------
                            	  4149: * OPCODE : TRAPV
                            	  4150: *-----------------------------------------------------------
                            	  4151: *-----------------------------------------------------------
                            	  4152: op_TRAPV:
                            	  4153: 
                            	  4154: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4155: 
01:00002738 7000            	  4156:                 moveq  #$00000000,d0 * Clear d0
                            	  4157: 
01:0000273A 44FC0000        	  4158:                 move #$00,CCR        * Clear V flag
01:0000273E 4E76            	  4159:                 trapv
01:00002740 4A80            	  4160:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:00002742 66FE            	  4161:                 bne.s *
                            	  4162: 
01:00002744 44FC0002        	  4163:                 move #$02,CCR        * Set V flag
01:00002748 4E76            	  4164:                 trapv
01:0000274A 0C8012345678    	  4165:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:00002750 66FE            	  4166:                 bne.s *
                            	  4167: 
                            	  4168: 
01:00002752 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: 
                            	  4173: *-----------------------------------------------------------
                            	  4174: *-----------------------------------------------------------
                            	  4175: * OPCODE : RTR
                            	  4176: *-----------------------------------------------------------
                            	  4177: *-----------------------------------------------------------
                            	  4178: 
                            	  4179: op_RTR:
                            	  4180: 
                            	  4181: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4182: 
01:00002754 41FA000C        	  4183:                 lea RTR_DONE,a0
01:00002758 2F08            	  4184:                 move.l a0,-(a7)     * push destination PC to the stack
01:0000275A 2F3C0000FF15    	  4185:                 move.l #$FF15,-(a7)       * push flags=0xFFFF to the stack
01:00002760 4E77            	  4186:                 rtr
                            	  4187: 
01:00002762 40C0            	  4188: RTR_DONE:       move.w SR,d0
01:00002764 0240001F        	  4189:                 andi #$1F,d0
01:00002768 0C400015        	  4190:                 cmpi #$15,d0
01:0000276C 66FE            	  4191:                 bne.s *
                            	  4192: 
01:0000276E 4E75            	  4193:                 rts
                            	  4194: 
                            	  4195: 
01:00002770 283C44444444    	  4196: BSR_FAR2:       move.l #$44444444,d4
01:00002776 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
                            	  4200: *-----------------------------------------------------------
                            	  4201: *-----------------------------------------------------------
                            	  4202: * OPCODE : BCC
                            	  4203: *-----------------------------------------------------------
                            	  4204: *-----------------------------------------------------------
                            	  4205: 
01:00002778 44FC0000        	  4206: op_BCC:         move #$00,CCR
01:0000277C 6202            	  4207:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:0000277E 60FE            	  4208:                 bra.s *
                            	  4209: 
01:00002780 44FC0001        	  4210: BCC1:           move #$01,CCR
01:00002784 63000004        	  4211:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:00002788 60FE            	  4212:                 bra.s *
                            	  4213: 
01:0000278A 44FC0000        	  4214: BCC2:           move #$00,CCR
01:0000278E 6402            	  4215:                 bcc.s BCC3            * Carry Clear         C=0
01:00002790 60FE            	  4216:                 bra.s *
                            	  4217: 
01:00002792 44FC0001        	  4218: BCC3:           move #$01,CCR
01:00002796 65000004        	  4219:                 bcs.w BCC4            * Carry Set           C=1
01:0000279A 60FE            	  4220:                 bra.s *
                            	  4221: 
01:0000279C 44FC0000        	  4222: BCC4:           move #$00,CCR
01:000027A0 6602            	  4223:                 bne.s BCC5            * Not Equal           Z=0
01:000027A2 60FE            	  4224:                 bra.s *
                            	  4225: 
01:000027A4 44FC0004        	  4226: BCC5:           move #$04,CCR
01:000027A8 67000004        	  4227:                 beq.w BCC6            * Equal               Z=1
01:000027AC 60FE            	  4228:                 bra.s *
                            	  4229: 
01:000027AE 44FC0000        	  4230: BCC6:           move #$00,CCR
01:000027B2 6802            	  4231:                 bvc.s BCC7            * V Clear             V=0
01:000027B4 60FE            	  4232:                 bra.s *
                            	  4233: 
01:000027B6 44FC0002        	  4234: BCC7:           move #$02,CCR
01:000027BA 69000004        	  4235:                 bvs.w BCC8            * V Set               V=1
01:000027BE 60FE            	  4236:                 bra.s *
                            	  4237: 
01:000027C0 44FC0000        	  4238: BCC8:           move #$00,CCR
01:000027C4 6A02            	  4239:                 bpl.s BCC9            * Plus                N=0
01:000027C6 60FE            	  4240:                 bra.s *
                            	  4241: 
01:000027C8 44FC0008        	  4242: BCC9:           move #$08,CCR
01:000027CC 6B000004        	  4243:                 bmi.w BCC10           * Minus               N=1
01:000027D0 60FE            	  4244:                 bra.s *
                            	  4245: 
01:000027D2 44FC0000        	  4246: BCC10:          move #$00,CCR
01:000027D6 6C02            	  4247:                 bge.s BCC11           * Greater or Equal    N=V
01:000027D8 60FE            	  4248:                 bra.s *
                            	  4249: 
01:000027DA 44FC0002        	  4250: BCC11:          move #$02,CCR
01:000027DE 6D000004        	  4251:                 blt.w BCC12           * Less Than           N!=V
01:000027E2 60FE            	  4252:                 bra.s *
                            	  4253: 
01:000027E4 44FC000A        	  4254: BCC12:          move #$0A,CCR
01:000027E8 6E02            	  4255:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:000027EA 60FE            	  4256:                 bra.s *
                            	  4257: 
01:000027EC 44FC0006        	  4258: BCC13:          move #$06,CCR
01:000027F0 6F000004        	  4259:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:000027F4 60FE            	  4260:                 bra.s *
                            	  4261: 
                            	  4262: 
01:000027F6 4E75            	  4263: BCC14:          rts
                            	  4264: 
                            	  4265: 
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: * OPCODE : DBCC
                            	  4269: *-----------------------------------------------------------
                            	  4270: *-----------------------------------------------------------
                            	  4271: 
01:000027F8 7003            	  4272: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:000027FA 7200            	  4273:                 moveq  #$00000000,d1    * Accumulator
01:000027FC 44FC0000        	  4274:                 move #$00,CCR
                            	  4275: 
01:00002800 5201            	  4276: DBCC_LOOP1:     addi.b #$1,d1
01:00002802 51C8FFFC        	  4277:                 dbf d0,DBCC_LOOP1
                            	  4278: 
01:00002806 0C8100000004    	  4279:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:0000280C 66FE            	  4280:                 bne.s *
                            	  4281: 
01:0000280E 5201            	  4282: DBCC_LOOP2:     addi.b #$1,d1
01:00002810 54C8FFFC        	  4283:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4284: 
01:00002814 0C8100000005    	  4285:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:0000281A 66FE            	  4286:                 bne.s *
                            	  4287: 
01:0000281C 4E75            	  4288:                 rts
                            	  4289: 
                            	  4290: 
                            	  4291: *-----------------------------------------------------------
                            	  4292: *-----------------------------------------------------------
                            	  4293: * OPCODE : SCC
                            	  4294: *-----------------------------------------------------------
                            	  4295: *-----------------------------------------------------------
                            	  4296: 
01:0000281E 44FC0001        	  4297: op_SCC:         move #$01,CCR
01:00002822 54F900010000    	  4298:                 scc $00010000                   * Clear the EA byte
01:00002828 4A3900010000    	  4299:                 cmpi.b #$00,$00010000
01:0000282E 66FE            	  4300:                 bne.s *
                            	  4301: 
01:00002830 44FC0000        	  4302:                 move #$00,CCR
01:00002834 54F900010000    	  4303:                 scc $00010000                   * Set the EA byte to 0xFF
01:0000283A 0C3900FF00010000	  4304:                 cmpi.b #$FF,$00010000
01:00002842 66FE            	  4305:                 bne.s *
                            	  4306: 
01:00002844 4E75            	  4307:                 rts
                            	  4308: 
                            	  4309: 
                            	  4310: 
                            	  4311: *-----------------------------------------------------------
                            	  4312: *-----------------------------------------------------------
                            	  4313: * OPCODE : ADDQ
                            	  4314: *-----------------------------------------------------------
                            	  4315: *-----------------------------------------------------------
                            	  4316: 
                            	  4317: op_ADDQ:
                            	  4318: 
                            	  4319: *     BYTE
01:00002846 203C000000FF    	  4320:                 move.l #$000000FF,d0    * Loop counter
01:0000284C 7200            	  4321:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000284E 7400            	  4322:                 moveq  #$00000000,d2    * Data results accumulator
01:00002850 7600            	  4323:                 moveq  #$00000000,d3
01:00002852 7800            	  4324:                 moveq  #$00000000,d4
01:00002854 7A00            	  4325:                 moveq  #$00000000,d5
01:00002856 7C00            	  4326:                 moveq  #$00000000,d6
01:00002858 7E00            	  4327:                 moveq  #$00000000,d7
                            	  4328: 
01:0000285A 5605            	  4329: ADDQ_LOOP1:     addq.b #3,d5
01:0000285C 40C6            	  4330:                 move.w SR,d6
01:0000285E 02860000001F    	  4331:                 andi.l #$1F,d6        * Isolate flags
01:00002864 D286            	  4332:                 add.l d6,d1           * Copy flag results into accumulator
01:00002866 D485            	  4333:                 add.l d5,d2           * Copy data results into data accumulator
01:00002868 51C8FFF0        	  4334:                 dbf d0,ADDQ_LOOP1
                            	  4335: 
01:0000286C 0C810000043D    	  4336:                 cmpi.l #$0000043D,d1
01:00002872 66FE            	  4337:                 bne.s *
01:00002874 0C8200007F80    	  4338:                 cmpi.l #$00007F80,d2
01:0000287A 66FE            	  4339:                 bne.s *
                            	  4340: 
                            	  4341: 
                            	  4342: *     WORD
01:0000287C 203C000000FF    	  4343:                 move.l #$000000FF,d0    * Loop counter
01:00002882 7200            	  4344:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002884 7400            	  4345:                 moveq  #$00000000,d2    * Data results accumulator
01:00002886 7600            	  4346:                 moveq  #$00000000,d3
01:00002888 7800            	  4347:                 moveq  #$00000000,d4
01:0000288A 2A3C0000FFF0    	  4348:                 move.l #$0000FFF0,d5
01:00002890 7C00            	  4349:                 moveq  #$00000000,d6
01:00002892 7E00            	  4350:                 moveq  #$00000000,d7
01:00002894 307C0100        	  4351:                 move.l #$00000100,a0
                            	  4352: 
01:00002898 5A45            	  4353: ADDQ_LOOP2:     addq.w #5,d5
01:0000289A 40C6            	  4354:                 move.w SR,d6
01:0000289C 02860000001F    	  4355:                 andi.l #$1F,d6        * Isolate flags
01:000028A2 D286            	  4356:                 add.l d6,d1           * Copy flag results into accumulator
01:000028A4 D485            	  4357:                 add.l d5,d2           * Copy data results into data accumulator
01:000028A6 51C8FFF0        	  4358:                 dbf d0,ADDQ_LOOP2
                            	  4359: 
01:000028AA 0C8100000029    	  4360:                 cmpi.l #$00000029,d1
01:000028B0 66FE            	  4361:                 bne.s *
01:000028B2 0C8200057280    	  4362:                 cmpi.l #$00057280,d2
01:000028B8 66FE            	  4363:                 bne.s *
                            	  4364: 
                            	  4365: 
                            	  4366: *     LONG
01:000028BA 203C000000FF    	  4367:                 move.l #$000000FF,d0    * Loop counter
01:000028C0 7200            	  4368:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028C2 7400            	  4369:                 moveq  #$00000000,d2    * Data results accumulator
01:000028C4 7600            	  4370:                 moveq  #$00000000,d3
01:000028C6 7800            	  4371:                 moveq  #$00000000,d4
01:000028C8 7AF0            	  4372:                 move.l #$FFFFFFF0,d5
01:000028CA 7C00            	  4373:                 moveq  #$00000000,d6
01:000028CC 7E00            	  4374:                 moveq  #$00000000,d7
                            	  4375: 
01:000028CE 5285            	  4376: ADDQ_LOOP3:     addq.l #1,d5
01:000028D0 40C6            	  4377:                 move.w SR,d6
01:000028D2 02860000001F    	  4378:                 andi.l #$1F,d6        * Isolate flags
01:000028D8 D286            	  4379:                 add.l d6,d1           * Copy flag results into accumulator
01:000028DA D485            	  4380:                 add.l d5,d2           * Copy data results into data accumulator
01:000028DC 51C8FFF0        	  4381:                 dbf d0,ADDQ_LOOP3
                            	  4382: 
01:000028E0 0C810000008D    	  4383:                 cmpi.l #$0000008D,d1
01:000028E6 66FE            	  4384:                 bne.s *
01:000028E8 0C8200007080    	  4385:                 cmpi.l #$00007080,d2
01:000028EE 66FE            	  4386:                 bne.s *
                            	  4387: 
                            	  4388: *     Check that Flags are not updated for Address registers
01:000028F0 207C0000FFFF    	  4389:                 move.l #$0000FFFF,a0
01:000028F6 44FC0000        	  4390:                 move #$00,CCR         * Clear flags
01:000028FA 5E48            	  4391:                 addq.w #$7,a0
01:000028FC 65FE            	  4392:                 bcs.s *
                            	  4393: 
01:000028FE 4E75            	  4394:                 rts
                            	  4395: 
                            	  4396: 
                            	  4397: 
                            	  4398: *-----------------------------------------------------------
                            	  4399: *-----------------------------------------------------------
                            	  4400: * OPCODE : SUBQ
                            	  4401: *-----------------------------------------------------------
                            	  4402: *-----------------------------------------------------------
                            	  4403: 
                            	  4404: op_SUBQ:
                            	  4405: 
                            	  4406: *     BYTE
01:00002900 203C000000FF    	  4407:                 move.l #$000000FF,d0    * Loop counter
01:00002906 7200            	  4408:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002908 243C00001234    	  4409:                 move.l #$00001234,d2    * Data results accumulator
01:0000290E 7600            	  4410:                 moveq  #$00000000,d3
01:00002910 7800            	  4411:                 moveq  #$00000000,d4
01:00002912 7A12            	  4412:                 moveq  #$00000012,d5
01:00002914 7C00            	  4413:                 moveq  #$00000000,d6
01:00002916 7E00            	  4414:                 moveq  #$00000000,d7
                            	  4415: 
01:00002918 5305            	  4416: SUBQ_LOOP1:     subq.b #1,d5
01:0000291A 40C6            	  4417:                 move.w SR,d6
01:0000291C 02860000001F    	  4418:                 andi.l #$1F,d6        * Isolate flags
01:00002922 D286            	  4419:                 add.l d6,d1           * Copy flag results into accumulator
01:00002924 D485            	  4420:                 add.l d5,d2           * Copy data results into data accumulator
01:00002926 51C8FFF0        	  4421:                 dbf d0,SUBQ_LOOP1
                            	  4422: 
01:0000292A 0C8100000417    	  4423:                 cmpi.l #$00000417,d1
01:00002930 66FE            	  4424:                 bne.s *
01:00002932 0C82000091B4    	  4425:                 cmpi.l #$000091B4,d2
01:00002938 66FE            	  4426:                 bne.s *
                            	  4427: 
                            	  4428: 
                            	  4429: *     WORD
01:0000293A 203C000000FF    	  4430:                 move.l #$000000FF,d0    * Loop counter
01:00002940 7200            	  4431:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002942 7400            	  4432:                 moveq  #$00000000,d2    * Data results accumulator
01:00002944 7600            	  4433:                 moveq  #$00000000,d3
01:00002946 7800            	  4434:                 moveq  #$00000000,d4
01:00002948 7A02            	  4435:                 moveq  #$00000002,d5
01:0000294A 7C00            	  4436:                 moveq  #$00000000,d6
01:0000294C 7E00            	  4437:                 moveq  #$00000000,d7
01:0000294E 307C0100        	  4438:                 move.l #$00000100,a0
                            	  4439: 
01:00002952 5B45            	  4440: SUBQ_LOOP2:     subq.w #5,d5
01:00002954 40C6            	  4441:                 move.w SR,d6
01:00002956 02860000001F    	  4442:                 andi.l #$1F,d6        * Isolate flags
01:0000295C D286            	  4443:                 add.l d6,d1           * Copy flag results into accumulator
01:0000295E D485            	  4444:                 add.l d5,d2           * Copy data results into data accumulator
01:00002960 51C8FFF0        	  4445:                 dbf d0,SUBQ_LOOP2
                            	  4446: 
01:00002964 0C8100000811    	  4447:                 cmpi.l #$00000811,d1
01:0000296A 66FE            	  4448:                 bne.s *
01:0000296C 0C8200FD7F80    	  4449:                 cmpi.l #$00FD7F80,d2
01:00002972 66FE            	  4450:                 bne.s *
                            	  4451: 
                            	  4452: 
                            	  4453: *     LONG
01:00002974 203C000000FF    	  4454:                 move.l #$000000FF,d0    * Loop counter
01:0000297A 7200            	  4455:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000297C 7400            	  4456:                 moveq  #$00000000,d2    * Data results accumulator
01:0000297E 7600            	  4457:                 moveq  #$00000000,d3
01:00002980 7800            	  4458:                 moveq  #$00000000,d4
01:00002982 7A07            	  4459:                 moveq  #$00000007,d5
01:00002984 7C00            	  4460:                 moveq  #$00000000,d6
01:00002986 7E00            	  4461:                 moveq  #$00000000,d7
                            	  4462: 
01:00002988 5385            	  4463: SUBQ_LOOP3:     subq.l #1,d5
01:0000298A 40C6            	  4464:                 move.w SR,d6
01:0000298C 02860000001F    	  4465:                 andi.l #$1F,d6        * Isolate flags
01:00002992 D286            	  4466:                 add.l d6,d1           * Copy flag results into accumulator
01:00002994 D485            	  4467:                 add.l d5,d2           * Copy data results into data accumulator
01:00002996 51C8FFF0        	  4468:                 dbf d0,SUBQ_LOOP3
                            	  4469: 
01:0000299A 0C81000007DD    	  4470:                 cmpi.l #$000007DD,d1
01:000029A0 66FE            	  4471:                 bne.s *
01:000029A2 0C82FFFF8680    	  4472:                 cmpi.l #$FFFF8680,d2
01:000029A8 66FE            	  4473:                 bne.s *
                            	  4474: 
                            	  4475: *     Check that Flags are not updated for Address registers
01:000029AA 207C0001FFFF    	  4476:                 move.l #$0001FFFF,a0
01:000029B0 44FC0000        	  4477:                 move #$00,CCR         * Clear flags
01:000029B4 5F48            	  4478:                 subq.w #$7,a0
01:000029B6 65FE            	  4479:                 bcs.s *
                            	  4480: 
01:000029B8 4E75            	  4481:                 rts
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: *-----------------------------------------------------------
                            	  4487: *-----------------------------------------------------------
                            	  4488: * OPCODE : MOVEQ
                            	  4489: *-----------------------------------------------------------
                            	  4490: *-----------------------------------------------------------
                            	  4491: 
                            	  4492: op_MOVEQ:
01:000029BA 7000            	  4493:                 moveq  #$00000000,d0
01:000029BC 7000            	  4494:                 moveq #$0,d0
01:000029BE 66FE            	  4495:                 bne.s *
01:000029C0 4A80            	  4496:                 cmpi.l #$00000000,d0
01:000029C2 66FE            	  4497:                 bne.s *
                            	  4498: 
01:000029C4 7000            	  4499:                 moveq  #$00000000,d0
01:000029C6 7080            	  4500:                 moveq #-128,d0
01:000029C8 67FE            	  4501:                 beq.s *
01:000029CA 6AFE            	  4502:                 bpl.s *
01:000029CC 0C80FFFFFF80    	  4503:                 cmpi.l #$FFFFFF80,d0
01:000029D2 66FE            	  4504:                 bne.s *
                            	  4505: 
                            	  4506: 
01:000029D4 4E75            	  4507:                 rts
                            	  4508: 
                            	  4509: 
                            	  4510: *-----------------------------------------------------------
                            	  4511: *-----------------------------------------------------------
                            	  4512: * OPCODE : DIVU
                            	  4513: *-----------------------------------------------------------
                            	  4514: *-----------------------------------------------------------
                            	  4515: 
                            	  4516: op_DIVU:
                            	  4517: 
01:000029D6 203CA5A5A5A5    	  4518:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:000029DC 223C00005A5A    	  4519:                 move.l #$00005a5a,d1        * Initial Divisor
01:000029E2 243CA5A5A5A5    	  4520:                 move.l #$a5a5a5a5,d2
01:000029E8 7600            	  4521:                 moveq  #$00000000,d3
01:000029EA 7800            	  4522:                 moveq  #$00000000,d4        * Cumulative data results
01:000029EC 7A00            	  4523:                 moveq  #$00000000,d5       * Cumulative flag results
01:000029EE 7C0E            	  4524:                 move.l #$0000000E,d6       * Inner loop counter
01:000029F0 7E1E            	  4525:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4526: 
                            	  4527: 
01:000029F2 80C1            	  4528: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:000029F4 40C3            	  4529:                 move.w SR,d3
01:000029F6 02830000000C    	  4530:                 andi.l #$0C,d3            * Isolate flags
01:000029FC DA83            	  4531:                 add.l d3,d5               * Copy flag results into accumulator
01:000029FE D880            	  4532:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A00 E289            	  4533:                 lsr.l #$1,d1
                            	  4534: 
01:00002A02 51CEFFEE        	  4535:                 dbf d6,DIVU_OUTER1
01:00002A06 E28A            	  4536:                 lsr.l #$1,d2
01:00002A08 2002            	  4537:                 move.l d2,d0
01:00002A0A 223C00005A5A    	  4538:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A10 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A12 51CFFFDE        	  4540:                 dbf d7,DIVU_OUTER1
                            	  4541: 
01:00002A16 0C8492FEDB89    	  4542:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002A1C 66FE            	  4543:                 bne.s *
                            	  4544: 
01:00002A1E 0C8500000110    	  4545:                 cmpi.l #$00000110,d5      * Check the Flag results
01:00002A24 66FE            	  4546:                 bne.s *
                            	  4547: 
                            	  4548: 
01:00002A26 4E75            	  4549:                 rts
                            	  4550: 
                            	  4551: 
                            	  4552: 
                            	  4553: *-----------------------------------------------------------
                            	  4554: *-----------------------------------------------------------
                            	  4555: * OPCODE : DIVS
                            	  4556: *-----------------------------------------------------------
                            	  4557: *-----------------------------------------------------------
                            	  4558: 
                            	  4559: op_DIVS:
                            	  4560: 
01:00002A28 203CA5A5A5A5    	  4561:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A2E 223C00005A5A    	  4562:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A34 243CA5A5A5A5    	  4563:                 move.l #$a5a5a5a5,d2
01:00002A3A 7600            	  4564:                 moveq  #$00000000,d3
01:00002A3C 7800            	  4565:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A3E 7A00            	  4566:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A40 7C0E            	  4567:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A42 7E1E            	  4568:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4569: 
                            	  4570: 
01:00002A44 81C1            	  4571: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:00002A46 40C3            	  4572:                 move.w SR,d3
01:00002A48 02830000000C    	  4573:                 andi.l #$0C,d3            * Isolate flags
01:00002A4E DA83            	  4574:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A50 D880            	  4575:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A52 E289            	  4576:                 lsr.l #$1,d1
                            	  4577: 
01:00002A54 51CEFFEE        	  4578:                 dbf d6,DIVS_OUTER1
01:00002A58 E28A            	  4579:                 lsr.l #$1,d2
01:00002A5A 2002            	  4580:                 move.l d2,d0
01:00002A5C 223C00005A5A    	  4581:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A62 7C0E            	  4582:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A64 51CFFFDE        	  4583:                 dbf d7,DIVS_OUTER1
                            	  4584: 
01:00002A68 0C844EC5D057    	  4585:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002A6E 66FE            	  4586:                 bne.s *
                            	  4587: 
01:00002A70 0C8500000038    	  4588:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002A76 66FE            	  4589:                 bne.s *
                            	  4590: 
                            	  4591: 
01:00002A78 4E75            	  4592:                 rts
                            	  4593: 
                            	  4594: 
                            	  4595: 
                            	  4596: *-----------------------------------------------------------
                            	  4597: *-----------------------------------------------------------
                            	  4598: * OPCODE : OR
                            	  4599: *-----------------------------------------------------------
                            	  4600: *-----------------------------------------------------------
                            	  4601: 
                            	  4602: op_OR:
                            	  4603: 
                            	  4604: *  * <EA> to Register
                            	  4605: 
01:00002A7A 203CA5A5A5A5    	  4606:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002A80 223C8167E123    	  4607:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002A86 243CA5A5A5A5    	  4608:                 move.l #$a5a5a5a5,d2
01:00002A8C 7600            	  4609:                 moveq  #$00000000,d3
01:00002A8E 7800            	  4610:                 moveq  #$00000000,d4       * Cumulative data results
01:00002A90 7A00            	  4611:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A92 7C1E            	  4612:                 move.l #$0000001E,d6       * Inner loop counter
01:00002A94 7E1E            	  4613:                 move.l #$0000001E,d7       * Outer loop counter
01:00002A96 307C0100        	  4614:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4615: 
                            	  4616: 
                            	  4617: OR_OUTER1:
                            	  4618: 
                            	  4619: *     BYTE
01:00002A9A 2081            	  4620:                 move.l d1,(a0)
01:00002A9C 8010            	  4621:                 or.b (a0),d0
01:00002A9E 40C3            	  4622:                 move.w SR,d3
01:00002AA0 02830000000C    	  4623:                 andi.l #$0C,d3            * Isolate flags
01:00002AA6 DA83            	  4624:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AA8 D880            	  4625:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4626: 
                            	  4627: *     WORD
01:00002AAA 2081            	  4628:                 move.l d1,(a0)
01:00002AAC 8050            	  4629:                 or.w (a0),d0
01:00002AAE 40C3            	  4630:                 move.w SR,d3
01:00002AB0 02830000000C    	  4631:                 andi.l #$0C,d3            * Isolate flags
01:00002AB6 DA83            	  4632:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AB8 D880            	  4633:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4634: 
                            	  4635: *     LONG
01:00002ABA 2081            	  4636:                 move.l d1,(a0)
01:00002ABC 8090            	  4637:                 or.l (a0),d0
01:00002ABE 40C3            	  4638:                 move.w SR,d3
01:00002AC0 02830000000F    	  4639:                 andi.l #$0F,d3            * Isolate flags
01:00002AC6 DA83            	  4640:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AC8 D880            	  4641:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4642: 
                            	  4643: 
01:00002ACA E289            	  4644:                 lsr.l #$1,d1
01:00002ACC 51CEFFCC        	  4645:                 dbf d6,OR_OUTER1
01:00002AD0 E28A            	  4646:                 lsr.l #$1,d2
01:00002AD2 223C8167E123    	  4647:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002AD8 7C1E            	  4648:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ADA 51CFFFBE        	  4649:                 dbf d7,OR_OUTER1
                            	  4650: 
01:00002ADE 0C8476EAC803    	  4651:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002AE4 66FE            	  4652:                 bne.s *
01:00002AE6 0C8500005A18    	  4653:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002AEC 66FE            	  4654:                 bne.s *
                            	  4655: 
                            	  4656: 
                            	  4657: *  * Register to <EA>
                            	  4658: 
01:00002AEE 203C86738374    	  4659:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002AF4 223CFC55F2FE    	  4660:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002AFA 243C86738374    	  4661:                 move.l #$86738374,d2
01:00002B00 7600            	  4662:                 moveq  #$00000000,d3
01:00002B02 7800            	  4663:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B04 7A00            	  4664:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B06 7C1E            	  4665:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B08 7E1D            	  4666:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B0A 307C0100        	  4667:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4668: 
                            	  4669: 
                            	  4670: OR_OUTER2:
                            	  4671: 
                            	  4672: *     BYTE
01:00002B0E 2080            	  4673:                 move.l d0,(a0)
01:00002B10 8310            	  4674:                 or.b d1,(a0)
01:00002B12 40C3            	  4675:                 move.w SR,d3
01:00002B14 02830000000C    	  4676:                 andi.l #$0C,d3            * Isolate flags
01:00002B1A DA83            	  4677:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B1C D890            	  4678:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4679: 
                            	  4680: *     WORD
01:00002B1E 2080            	  4681:                 move.l d0,(a0)
01:00002B20 8350            	  4682:                 or.w d1,(a0)
01:00002B22 40C3            	  4683:                 move.w SR,d3
01:00002B24 02830000000C    	  4684:                 andi.l #$0C,d3            * Isolate flags
01:00002B2A DA83            	  4685:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B2C D890            	  4686:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4687: 
                            	  4688: *     LONG
01:00002B2E 2080            	  4689:                 move.l d0,(a0)
01:00002B30 8390            	  4690:                 or.l d1,(a0)
01:00002B32 40C3            	  4691:                 move.w SR,d3
01:00002B34 02830000000F    	  4692:                 andi.l #$0F,d3            * Isolate flags
01:00002B3A DA83            	  4693:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B3C D890            	  4694:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4695: 
                            	  4696: 
01:00002B3E E289            	  4697:                 lsr.l #$1,d1
01:00002B40 51CEFFCC        	  4698:                 dbf d6,OR_OUTER2
01:00002B44 E28A            	  4699:                 lsr.l #$1,d2
01:00002B46 223C8167E123    	  4700:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B4C 7C1E            	  4701:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B4E 51CFFFBE        	  4702:                 dbf d7,OR_OUTER2
                            	  4703: 
01:00002B52 0C84FA82B9E4    	  4704:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002B58 66FE            	  4705:                 bne.s *
01:00002B5A 0C8500005730    	  4706:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002B60 66FE            	  4707:                 bne.s *
                            	  4708: 
                            	  4709: 
01:00002B62 4E75            	  4710:                 rts
                            	  4711: 
                            	  4712: 
                            	  4713: 
                            	  4714: *-----------------------------------------------------------
                            	  4715: *-----------------------------------------------------------
                            	  4716: * OPCODE : AND
                            	  4717: *-----------------------------------------------------------
                            	  4718: *-----------------------------------------------------------
                            	  4719: 
                            	  4720: op_AND:
                            	  4721: 
                            	  4722: *  * <EA> to Register
                            	  4723: 
01:00002B64 203CA5A5A5A5    	  4724:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002B6A 223C8167E123    	  4725:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002B70 243CA5A5A5A5    	  4726:                 move.l #$a5a5a5a5,d2
01:00002B76 7600            	  4727:                 moveq  #$00000000,d3
01:00002B78 7800            	  4728:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B7A 7A00            	  4729:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B7C 7C1E            	  4730:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B7E 7E1E            	  4731:                 move.l #$0000001E,d7       * Outer loop counter
01:00002B80 307C0100        	  4732:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4733: 
                            	  4734: 
                            	  4735: AND_OUTER1:
                            	  4736: 
                            	  4737: *     BYTE
01:00002B84 2081            	  4738:                 move.l d1,(a0)
01:00002B86 C010            	  4739:                 and.b (a0),d0
01:00002B88 40C3            	  4740:                 move.w sr,d3
01:00002B8A 02830000000C    	  4741:                 andi.l #$0C,d3            * Isolate flags
01:00002B90 DA83            	  4742:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B92 D880            	  4743:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4744: 
                            	  4745: *     WORD
01:00002B94 2081            	  4746:                 move.l d1,(a0)
01:00002B96 C050            	  4747:                 and.w (a0),d0
01:00002B98 40C3            	  4748:                 move.w sr,d3
01:00002B9A 02830000000C    	  4749:                 andi.l #$0C,d3            * Isolate flags
01:00002BA0 DA83            	  4750:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BA2 D880            	  4751:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4752: 
                            	  4753: *     LONG
01:00002BA4 2081            	  4754:                 move.l d1,(a0)
01:00002BA6 C090            	  4755:                 and.l (a0),d0
01:00002BA8 40C3            	  4756:                 move.w sr,d3
01:00002BAA 02830000000F    	  4757:                 andi.l #$0F,d3            * Isolate flags
01:00002BB0 DA83            	  4758:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BB2 D880            	  4759:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4760: 
                            	  4761: 
01:00002BB4 E289            	  4762:                 lsr.l #$1,d1
01:00002BB6 51CEFFCC        	  4763:                 dbf d6,AND_OUTER1
01:00002BBA E28A            	  4764:                 lsr.l #$1,d2
01:00002BBC 223C8167E123    	  4765:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BC2 7C1E            	  4766:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BC4 51CFFFBE        	  4767:                 dbf d7,AND_OUTER1
                            	  4768: 
01:00002BC8 0C84CF212883    	  4769:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002BCE 66FE            	  4770:                 bne.s *
01:00002BD0 0C8500002D10    	  4771:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002BD6 66FE            	  4772:                 bne.s *
                            	  4773: 
                            	  4774: 
                            	  4775: *  * Register to <EA>
                            	  4776: 
01:00002BD8 203C86738374    	  4777:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002BDE 223CFC55F2FE    	  4778:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002BE4 243C86738374    	  4779:                 move.l #$86738374,d2
01:00002BEA 7600            	  4780:                 moveq  #$00000000,d3
01:00002BEC 7800            	  4781:                 moveq  #$00000000,d4       * Cumulative data results
01:00002BEE 7A00            	  4782:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002BF0 7C1E            	  4783:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BF2 7E1D            	  4784:                 move.l #$0000001D,d7       * Outer loop counter
01:00002BF4 307C0100        	  4785:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4786: 
                            	  4787: 
                            	  4788: AND_OUTER2:
                            	  4789: 
                            	  4790: *     BYTE
01:00002BF8 2080            	  4791:                 move.l d0,(a0)
01:00002BFA C310            	  4792:                 and.b d1,(a0)
01:00002BFC 40C3            	  4793:                 move.w sr,d3
01:00002BFE 02830000000C    	  4794:                 andi.l #$0C,d3            * Isolate flags
01:00002C04 DA83            	  4795:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C06 D890            	  4796:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4797: 
                            	  4798: *     WORD
01:00002C08 2080            	  4799:                 move.l d0,(a0)
01:00002C0A C350            	  4800:                 and.w d1,(a0)
01:00002C0C 40C3            	  4801:                 move.w sr,d3
01:00002C0E 02830000000C    	  4802:                 andi.l #$0C,d3            * Isolate flags
01:00002C14 DA83            	  4803:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C16 D890            	  4804:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4805: 
                            	  4806: *     LONG
01:00002C18 2080            	  4807:                 move.l d0,(a0)
01:00002C1A C390            	  4808:                 and.l d1,(a0)
01:00002C1C 40C3            	  4809:                 move.w sr,d3
01:00002C1E 02830000000F    	  4810:                 andi.l #$0F,d3            * Isolate flags
01:00002C24 DA83            	  4811:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C26 D890            	  4812:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4813: 
                            	  4814: 
01:00002C28 E289            	  4815:                 lsr.l #$1,d1
01:00002C2A 51CEFFCC        	  4816:                 dbf d6,AND_OUTER2
01:00002C2E E28A            	  4817:                 lsr.l #$1,d2
01:00002C30 223C8167E123    	  4818:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C36 7C1E            	  4819:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C38 51CFFFBE        	  4820:                 dbf d7,AND_OUTER2
                            	  4821: 
01:00002C3C 0C844A3DE544    	  4822:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002C42 66FE            	  4823:                 bne.s *
01:00002C44 0C85000018E8    	  4824:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002C4A 66FE            	  4825:                 bne.s *
                            	  4826: 
                            	  4827: 
01:00002C4C 4E75            	  4828:                 rts
                            	  4829: 
                            	  4830: 
                            	  4831: 
                            	  4832: *-----------------------------------------------------------
                            	  4833: *-----------------------------------------------------------
                            	  4834: * OPCODE : EOR
                            	  4835: *-----------------------------------------------------------
                            	  4836: *-----------------------------------------------------------
                            	  4837: 
                            	  4838: op_EOR:
                            	  4839: 
                            	  4840: *  * Register to <EA>
                            	  4841: 
01:00002C4E 203C86738374    	  4842:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C54 223CFC55F2FE    	  4843:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C5A 243C86738374    	  4844:                 move.l #$86738374,d2
01:00002C60 7600            	  4845:                 moveq  #$00000000,d3
01:00002C62 7800            	  4846:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C64 7A00            	  4847:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C66 7C1E            	  4848:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C68 7E1D            	  4849:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C6A 307C0100        	  4850:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4851: 
                            	  4852: 
                            	  4853: EOR_OUTER2:
                            	  4854: 
                            	  4855: *     BYTE
01:00002C6E 2080            	  4856:                 move.l d0,(a0)
01:00002C70 B310            	  4857:                 eor.b d1,(a0)
01:00002C72 40C3            	  4858:                 move.w sr,d3
01:00002C74 02830000000C    	  4859:                 andi.l #$0C,d3            * Isolate flags
01:00002C7A DA83            	  4860:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C7C D890            	  4861:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4862: 
                            	  4863: *     WORD
01:00002C7E 2080            	  4864:                 move.l d0,(a0)
01:00002C80 B350            	  4865:                 eor.w d1,(a0)
01:00002C82 40C3            	  4866:                 move.w sr,d3
01:00002C84 02830000000C    	  4867:                 andi.l #$0C,d3            * Isolate flags
01:00002C8A DA83            	  4868:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C8C D890            	  4869:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4870: 
                            	  4871: *     LONG
01:00002C8E 2080            	  4872:                 move.l d0,(a0)
01:00002C90 B390            	  4873:                 eor.l d1,(a0)
01:00002C92 40C3            	  4874:                 move.w sr,d3
01:00002C94 02830000000F    	  4875:                 andi.l #$0F,d3            * Isolate flags
01:00002C9A DA83            	  4876:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C9C D890            	  4877:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4878: 
                            	  4879: 
01:00002C9E E289            	  4880:                 lsr.l #$1,d1
01:00002CA0 51CEFFCC        	  4881:                 dbf d6,EOR_OUTER2
01:00002CA4 E28A            	  4882:                 lsr.l #$1,d2
01:00002CA6 223C8167E123    	  4883:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CAC 7C1E            	  4884:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CAE 51CFFFBE        	  4885:                 dbf d7,EOR_OUTER2
                            	  4886: 
01:00002CB2 0C8455C5EB70    	  4887:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002CB8 66FE            	  4888:                 bne.s *
01:00002CBA 0C8500004430    	  4889:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002CC0 66FE            	  4890:                 bne.s *
                            	  4891: 
                            	  4892: 
01:00002CC2 4E75            	  4893:                 rts
                            	  4894: 
                            	  4895: 
                            	  4896: *-----------------------------------------------------------
                            	  4897: *-----------------------------------------------------------
                            	  4898: * OPCODE : CMP
                            	  4899: *-----------------------------------------------------------
                            	  4900: *-----------------------------------------------------------
                            	  4901: 
                            	  4902: op_CMP:
                            	  4903: 
                            	  4904: 
                            	  4905: *  * <EA> to Register
                            	  4906: 
01:00002CC4 203CA5A5A5A5    	  4907:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002CCA 223C8167E123    	  4908:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002CD0 243CA5A5A5A5    	  4909:                 move.l #$a5a5a5a5,d2
01:00002CD6 7600            	  4910:                 moveq  #$00000000,d3
01:00002CD8 7800            	  4911:                 moveq  #$00000000,d4       * Cumulative data results
01:00002CDA 7A00            	  4912:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002CDC 7C1E            	  4913:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CDE 7E1E            	  4914:                 move.l #$0000001E,d7       * Outer loop counter
01:00002CE0 307C0100        	  4915:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4916: 
                            	  4917: 
                            	  4918: CMP_OUTER1:
                            	  4919: 
                            	  4920: *     BYTE
01:00002CE4 2081            	  4921:                 move.l d1,(a0)
01:00002CE6 B010            	  4922:                 cmp.b (a0),d0
01:00002CE8 40C3            	  4923:                 move.w sr,d3
01:00002CEA 02830000000F    	  4924:                 andi.l #$0F,d3            * Isolate flags
01:00002CF0 DA83            	  4925:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CF2 D880            	  4926:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4927: 
                            	  4928: *     WORD
01:00002CF4 2081            	  4929:                 move.l d1,(a0)
01:00002CF6 B050            	  4930:                 cmp.w (a0),d0
01:00002CF8 40C3            	  4931:                 move.w sr,d3
01:00002CFA 02830000000F    	  4932:                 andi.l #$0F,d3            * Isolate flags
01:00002D00 DA83            	  4933:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D02 D880            	  4934:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4935: 
                            	  4936: *     LONG
01:00002D04 2081            	  4937:                 move.l d1,(a0)
01:00002D06 B090            	  4938:                 cmp.l (a0),d0
01:00002D08 40C3            	  4939:                 move.w sr,d3
01:00002D0A 02830000000F    	  4940:                 andi.l #$0F,d3            * Isolate flags
01:00002D10 DA83            	  4941:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D12 D880            	  4942:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4943: 
                            	  4944: 
01:00002D14 E289            	  4945:                 lsr.l #$1,d1
01:00002D16 51CEFFCC        	  4946:                 dbf d6,CMP_OUTER1
01:00002D1A E28A            	  4947:                 lsr.l #$1,d2
01:00002D1C 223C8167E123    	  4948:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D22 7C1E            	  4949:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D24 51CFFFBE        	  4950:                 dbf d7,CMP_OUTER1
                            	  4951: 
01:00002D28 0C847878712F    	  4952:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002D2E 66FE            	  4953:                 bne.s *
01:00002D30 0C8500005502    	  4954:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002D36 66FE            	  4955:                 bne.s *
                            	  4956: 
                            	  4957: 
                            	  4958: 
01:00002D38 4E75            	  4959:                 rts
                            	  4960: 
                            	  4961: 
                            	  4962: *-----------------------------------------------------------
                            	  4963: *-----------------------------------------------------------
                            	  4964: * OPCODE : CMPA
                            	  4965: *-----------------------------------------------------------
                            	  4966: *-----------------------------------------------------------
                            	  4967: 
                            	  4968: op_CMPA:
                            	  4969: 
                            	  4970: 
                            	  4971: *  * <EA> to Register
                            	  4972: 
01:00002D3A 207CA5A5A5A5    	  4973:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002D40 223C8167E123    	  4974:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D46 243CA5A5A5A5    	  4975:                 move.l #$a5a5a5a5,d2
01:00002D4C 7600            	  4976:                 moveq  #$00000000,d3
01:00002D4E 7800            	  4977:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D50 7A00            	  4978:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D52 7C1E            	  4979:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D54 7E1E            	  4980:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D56 327C0100        	  4981:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4982: 
                            	  4983: 
                            	  4984: CMPA_OUTER1:
                            	  4985: 
                            	  4986: 
                            	  4987: *     WORD
01:00002D5A 2281            	  4988:                 move.l d1,(a1)
01:00002D5C B0D1            	  4989:                 cmpa.w (a1),a0
01:00002D5E 40C3            	  4990:                 move.w sr,d3
01:00002D60 02830000000F    	  4991:                 andi.l #$0F,d3            * Isolate flags
01:00002D66 DA83            	  4992:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D68 D888            	  4993:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4994: 
                            	  4995: *     LONG
01:00002D6A 2281            	  4996:                 move.l d1,(a1)
01:00002D6C B1D1            	  4997:                 cmpa.l (a1),a0
01:00002D6E 40C3            	  4998:                 move.w sr,d3
01:00002D70 02830000000F    	  4999:                 andi.l #$0F,d3            * Isolate flags
01:00002D76 DA83            	  5000:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D78 D888            	  5001:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5002: 
                            	  5003: 
01:00002D7A E289            	  5004:                 lsr.l #$1,d1
01:00002D7C 51CEFFDC        	  5005:                 dbf d6,CMPA_OUTER1
01:00002D80 E28A            	  5006:                 lsr.l #$1,d2
01:00002D82 223C8167E123    	  5007:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D88 7C1E            	  5008:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D8A 51CFFFCE        	  5009:                 dbf d7,CMPA_OUTER1
                            	  5010: 
01:00002D8E 0C84A5A5A0CA    	  5011:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002D94 66FE            	  5012:                 bne.s *
01:00002D96 0C8500003A7D    	  5013:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002D9C 66FE            	  5014:                 bne.s *
                            	  5015: 
                            	  5016: 
01:00002D9E 4E75            	  5017:                 rts
                            	  5018: 
                            	  5019: 
                            	  5020: 
                            	  5021: *-----------------------------------------------------------
                            	  5022: *-----------------------------------------------------------
                            	  5023: * OPCODE : CMPM
                            	  5024: *-----------------------------------------------------------
                            	  5025: *-----------------------------------------------------------
                            	  5026: 
                            	  5027: op_CMPM:
                            	  5028: 
01:00002DA0 307C0100        	  5029:                 move.l #$00000100,a0       * Address for Data-X
01:00002DA4 327C0200        	  5030:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DA8 7000            	  5031:                 moveq  #$00000000,d0
01:00002DAA 7200            	  5032:                 moveq  #$00000000,d1
01:00002DAC 7400            	  5033:                 moveq  #$00000000,d2
                            	  5034: 
01:00002DAE 20FC11FF5580    	  5035:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002DB4 20FC1111FFFF    	  5036:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002DBA 20FC33333333    	  5037:                 move.l #$33333333,(a0)+   * Populate test data
01:00002DC0 20FC44444444    	  5038:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5039: 
01:00002DC6 22FC80FF337F    	  5040:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002DCC 22FCFFFF1111    	  5041:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002DD2 22FC33333333    	  5042:                 move.l #$33333333,(a1)+   * Populate test data
01:00002DD8 22FC44444444    	  5043:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5044: 
01:00002DDE 307C0100        	  5045:                 move.l #$00000100,a0       * Address for Data-X
01:00002DE2 327C0200        	  5046:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DE6 7C0F            	  5047:                 move.l #$0000000F,d6       * Loop counter
                            	  5048: 
01:00002DE8 B308            	  5049: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002DEA 40C3            	  5050:                 move.w sr,d3
01:00002DEC 02830000000F    	  5051:                 andi.l #$0F,d3            * Isolate flags
01:00002DF2 D083            	  5052:                 add.l d3,d0               * Copy flag results into accumulator
01:00002DF4 51CEFFF2        	  5053:                 dbf d6,CMPM_LOOP1
                            	  5054: 
                            	  5055: 
01:00002DF8 307C0100        	  5056:                 move.l #$00000100,a0       * Address for Data-X
01:00002DFC 327C0200        	  5057:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E00 7C07            	  5058:                 moveq  #$00000007,d6       * Loop counter
                            	  5059: 
01:00002E02 B348            	  5060: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002E04 40C3            	  5061:                 move.w sr,d3
01:00002E06 02830000000F    	  5062:                 andi.l #$0F,d3            * Isolate flags
01:00002E0C D283            	  5063:                 add.l d3,d1               * Copy flag results into accumulator
01:00002E0E 51CEFFF2        	  5064:                 dbf d6,CMPM_LOOP2
                            	  5065: 
                            	  5066: 
01:00002E12 307C0100        	  5067:                 move.l #$00000100,a0       * Address for Data-X
01:00002E16 327C0200        	  5068:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E1A 7C03            	  5069:                 moveq  #$00000003,d6       * Loop counter
                            	  5070: 
01:00002E1C B388            	  5071: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002E1E 40C3            	  5072:                 move.w sr,d3
01:00002E20 02830000000F    	  5073:                 andi.l #$0F,d3            * Isolate flags
01:00002E26 D483            	  5074:                 add.l d3,d2               * Copy flag results into accumulator
01:00002E28 51CEFFF2        	  5075:                 dbf d6,CMPM_LOOP3
                            	  5076: 
                            	  5077: 
01:00002E2C 0C800000004C    	  5078:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002E32 66FE            	  5079:                 bne.s *
01:00002E34 0C8100000024    	  5080:                 cmpi.l #$00000024,d1
01:00002E3A 66FE            	  5081:                 bne.s *
01:00002E3C 0C8200000012    	  5082:                 cmpi.l #$00000012,d2
01:00002E42 66FE            	  5083:                 bne.s *
                            	  5084: 
01:00002E44 4E75            	  5085:                 rts
                            	  5086: 
                            	  5087: 
                            	  5088: *-----------------------------------------------------------
                            	  5089: *-----------------------------------------------------------
                            	  5090: * OPCODE : ADD
                            	  5091: *-----------------------------------------------------------
                            	  5092: *-----------------------------------------------------------
                            	  5093: 
                            	  5094: op_ADD:
                            	  5095: 
                            	  5096: 
                            	  5097: *  * <EA> to Register
01:00002E46 203CA5A5A5A5    	  5098:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002E4C 223C8167E123    	  5099:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002E52 243CA5A5A5A5    	  5100:                 move.l #$a5a5a5a5,d2
01:00002E58 7600            	  5101:                 moveq  #$00000000,d3
01:00002E5A 7800            	  5102:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E5C 7A00            	  5103:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E5E 7C1E            	  5104:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E60 7E1E            	  5105:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E62 307C0100        	  5106:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5107: 
                            	  5108: 
                            	  5109: ADD_OUTER1:
                            	  5110: 
                            	  5111: *     BYTE
01:00002E66 2081            	  5112:                 move.l d1,(a0)
01:00002E68 D010            	  5113:                 add.b (a0),d0
01:00002E6A 40C3            	  5114:                 move.w sr,d3
01:00002E6C 02830000001F    	  5115:                 andi.l #$1F,d3            * Isolate flags
01:00002E72 DA83            	  5116:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E74 D880            	  5117:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5118: 
                            	  5119: *     WORD
01:00002E76 2081            	  5120:                 move.l d1,(a0)
01:00002E78 D050            	  5121:                 add.w (a0),d0
01:00002E7A 40C3            	  5122:                 move.w sr,d3
01:00002E7C 02830000000C    	  5123:                 andi.l #$0C,d3            * Isolate flags
01:00002E82 DA83            	  5124:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E84 D880            	  5125:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5126: 
                            	  5127: *     LONG
01:00002E86 2081            	  5128:                 move.l d1,(a0)
01:00002E88 D090            	  5129:                 add.l (a0),d0
01:00002E8A 40C3            	  5130:                 move.w sr,d3
01:00002E8C 02830000000F    	  5131:                 andi.l #$0F,d3            * Isolate flags
01:00002E92 DA83            	  5132:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E94 D880            	  5133:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5134: 
                            	  5135: 
01:00002E96 E299            	  5136:                 ror.l #$1,d1
01:00002E98 51CEFFCC        	  5137:                 dbf d6,ADD_OUTER1
01:00002E9C E29A            	  5138:                 ror.l #$1,d2
01:00002E9E 223C8167E123    	  5139:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002EA4 7C1E            	  5140:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EA6 51CFFFBE        	  5141:                 dbf d7,ADD_OUTER1
                            	  5142: 
01:00002EAA 0C8423ED428F    	  5143:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002EB0 66FE            	  5144:                 bne.s *
01:00002EB2 0C8500004C96    	  5145:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002EB8 66FE            	  5146:                 bne.s *
                            	  5147: 
                            	  5148: 
                            	  5149: *  * Register to <EA>
01:00002EBA 203C86738374    	  5150:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002EC0 223CFC55F2FE    	  5151:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002EC6 243C86738374    	  5152:                 move.l #$86738374,d2
01:00002ECC 7600            	  5153:                 moveq  #$00000000,d3
01:00002ECE 7800            	  5154:                 moveq  #$00000000,d4       * Cumulative data results
01:00002ED0 7A00            	  5155:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002ED2 7C1E            	  5156:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ED4 7E1D            	  5157:                 move.l #$0000001D,d7       * Outer loop counter
01:00002ED6 307C0100        	  5158:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5159: 
                            	  5160: 
                            	  5161: ADD_OUTER2:
                            	  5162: 
                            	  5163: *     BYTE
01:00002EDA 2080            	  5164:                 move.l d0,(a0)
01:00002EDC D310            	  5165:                 add.b d1,(a0)
01:00002EDE 40C3            	  5166:                 move.w sr,d3
01:00002EE0 02830000000C    	  5167:                 andi.l #$0C,d3            * Isolate flags
01:00002EE6 DA83            	  5168:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EE8 D890            	  5169:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5170: 
                            	  5171: *     WORD
01:00002EEA 2080            	  5172:                 move.l d0,(a0)
01:00002EEC D350            	  5173:                 add.w d1,(a0)
01:00002EEE 40C3            	  5174:                 move.w sr,d3
01:00002EF0 02830000001F    	  5175:                 andi.l #$1F,d3            * Isolate flags
01:00002EF6 DA83            	  5176:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EF8 D890            	  5177:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5178: 
                            	  5179: *     LONG
01:00002EFA 2080            	  5180:                 move.l d0,(a0)
01:00002EFC D390            	  5181:                 add.l d1,(a0)
01:00002EFE 40C3            	  5182:                 move.w sr,d3
01:00002F00 02830000000F    	  5183:                 andi.l #$0F,d3            * Isolate flags
01:00002F06 DA83            	  5184:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F08 D890            	  5185:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5186: 
                            	  5187: 
01:00002F0A E299            	  5188:                 ror.l #$1,d1
01:00002F0C 51CEFFCC        	  5189:                 dbf d6,ADD_OUTER2
01:00002F10 E29A            	  5190:                 ror.l #$1,d2
01:00002F12 223C8167E123    	  5191:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F18 7C1E            	  5192:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F1A 51CFFFBE        	  5193:                 dbf d7,ADD_OUTER2
                            	  5194: 
01:00002F1E 0C846701B884    	  5195:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002F24 66FE            	  5196:                 bne.s *
01:00002F26 0C8500005467    	  5197:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002F2C 66FE            	  5198:                 bne.s *
                            	  5199: 
01:00002F2E 4E75            	  5200:                 rts
                            	  5201: 
                            	  5202: *-----------------------------------------------------------
                            	  5203: *-----------------------------------------------------------
                            	  5204: * OPCODE : SUB
                            	  5205: *-----------------------------------------------------------
                            	  5206: *-----------------------------------------------------------
                            	  5207: 
                            	  5208: op_SUB:
                            	  5209: 
                            	  5210: *  * <EA> to Register
01:00002F30 203CA5A5A5A5    	  5211:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002F36 223C8167E123    	  5212:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002F3C 243CA5A5A5A5    	  5213:                 move.l #$a5a5a5a5,d2
01:00002F42 7600            	  5214:                 moveq  #$00000000,d3
01:00002F44 7800            	  5215:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F46 7A00            	  5216:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F48 7C1E            	  5217:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F4A 7E1E            	  5218:                 move.l #$0000001E,d7       * Outer loop counter
01:00002F4C 307C0100        	  5219:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5220: 
                            	  5221: 
                            	  5222: SUB_OUTER1:
                            	  5223: 
                            	  5224: *     BYTE
01:00002F50 2081            	  5225:                 move.l d1,(a0)
01:00002F52 9010            	  5226:                 sub.b (a0),d0
01:00002F54 40C3            	  5227:                 move.w sr,d3
01:00002F56 02830000001F    	  5228:                 andi.l #$1F,d3            * Isolate flags
01:00002F5C DA83            	  5229:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F5E D880            	  5230:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5231: 
                            	  5232: *     WORD
01:00002F60 2081            	  5233:                 move.l d1,(a0)
01:00002F62 9050            	  5234:                 sub.w (a0),d0
01:00002F64 40C3            	  5235:                 move.w sr,d3
01:00002F66 02830000000C    	  5236:                 andi.l #$0C,d3            * Isolate flags
01:00002F6C DA83            	  5237:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F6E D880            	  5238:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5239: 
                            	  5240: *     LONG
01:00002F70 2081            	  5241:                 move.l d1,(a0)
01:00002F72 9090            	  5242:                 sub.l (a0),d0
01:00002F74 40C3            	  5243:                 move.w sr,d3
01:00002F76 02830000000F    	  5244:                 andi.l #$0F,d3            * Isolate flags
01:00002F7C DA83            	  5245:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F7E D880            	  5246:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5247: 
                            	  5248: 
01:00002F80 E299            	  5249:                 ror.l #$1,d1
01:00002F82 51CEFFCC        	  5250:                 dbf d6,SUB_OUTER1
01:00002F86 E29A            	  5251:                 ror.l #$1,d2
01:00002F88 223C8167E123    	  5252:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F8E 7C1E            	  5253:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F90 51CFFFBE        	  5254:                 dbf d7,SUB_OUTER1
                            	  5255: 
01:00002F94 0C841A8D14CF    	  5256:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002F9A 66FE            	  5257:                 bne.s *
01:00002F9C 0C8500004FC4    	  5258:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002FA2 66FE            	  5259:                 bne.s *
                            	  5260: 
                            	  5261: 
                            	  5262: *  * Register to <EA>
01:00002FA4 203C86738374    	  5263:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002FAA 223CFC55F2FE    	  5264:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002FB0 243C86738374    	  5265:                 move.l #$86738374,d2
01:00002FB6 7600            	  5266:                 moveq  #$00000000,d3
01:00002FB8 7800            	  5267:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FBA 7A00            	  5268:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FBC 7C1E            	  5269:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FBE 7E1D            	  5270:                 move.l #$0000001D,d7       * Outer loop counter
01:00002FC0 307C0100        	  5271:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5272: 
                            	  5273: 
                            	  5274: SUB_OUTER2:
                            	  5275: 
                            	  5276: *     BYTE
01:00002FC4 2080            	  5277:                 move.l d0,(a0)
01:00002FC6 9310            	  5278:                 sub.b d1,(a0)
01:00002FC8 40C3            	  5279:                 move.w sr,d3
01:00002FCA 02830000000C    	  5280:                 andi.l #$0C,d3            * Isolate flags
01:00002FD0 DA83            	  5281:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FD2 D890            	  5282:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5283: 
                            	  5284: *     WORD
01:00002FD4 2080            	  5285:                 move.l d0,(a0)
01:00002FD6 9350            	  5286:                 sub.w d1,(a0)
01:00002FD8 40C3            	  5287:                 move.w sr,d3
01:00002FDA 02830000001F    	  5288:                 andi.l #$1F,d3            * Isolate flags
01:00002FE0 DA83            	  5289:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FE2 D890            	  5290:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5291: 
                            	  5292: *     LONG
01:00002FE4 2080            	  5293:                 move.l d0,(a0)
01:00002FE6 9390            	  5294:                 sub.l d1,(a0)
01:00002FE8 40C3            	  5295:                 move.w sr,d3
01:00002FEA 02830000000F    	  5296:                 andi.l #$0F,d3            * Isolate flags
01:00002FF0 DA83            	  5297:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FF2 D890            	  5298:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5299: 
                            	  5300: 
01:00002FF4 E299            	  5301:                 ror.l #$1,d1
01:00002FF6 51CEFFCC        	  5302:                 dbf d6,SUB_OUTER2
01:00002FFA E29A            	  5303:                 ror.l #$1,d2
01:00002FFC 223C8167E123    	  5304:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003002 7C1E            	  5305:                 move.l #$0000001E,d6       * Inner loop counter
01:00003004 51CFFFBE        	  5306:                 dbf d7,SUB_OUTER2
                            	  5307: 
01:00003008 0C8436D38BEC    	  5308:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:0000300E 66FE            	  5309:                 bne.s *
01:00003010 0C85000045A5    	  5310:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00003016 66FE            	  5311:                 bne.s *
                            	  5312: 
                            	  5313: 
                            	  5314: 
                            	  5315: 
01:00003018 4E75            	  5316:                 rts
                            	  5317: 
                            	  5318: 
                            	  5319: 
                            	  5320: *-----------------------------------------------------------
                            	  5321: *-----------------------------------------------------------
                            	  5322: * OPCODE : ADDA
                            	  5323: *-----------------------------------------------------------
                            	  5324: *-----------------------------------------------------------
                            	  5325: 
                            	  5326: op_ADDA:
                            	  5327: 
                            	  5328: *  * <EA> to Register
01:0000301A 203CA5A5A5A5    	  5329:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00003020 223C8167E123    	  5330:                 move.l #$8167E123,d1
01:00003026 243CA5A5A5A5    	  5331:                 move.l #$a5a5a5a5,d2
01:0000302C 7600            	  5332:                 moveq  #$00000000,d3
01:0000302E 7800            	  5333:                 moveq  #$00000000,d4       * Cumulative data results
01:00003030 7A00            	  5334:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003032 7C1E            	  5335:                 move.l #$0000001E,d6       * Inner loop counter
01:00003034 7E1E            	  5336:                 move.l #$0000001E,d7       * Outer loop counter
01:00003036 307C0100        	  5337:                 move.l #$00000100,a0       * Address for memory EA operations
01:0000303A 227C8167E123    	  5338:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5339: 
                            	  5340: ADDA_OUTER1:
                            	  5341: 
                            	  5342: *     WORD
                            	  5343: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5344: *                adda.w (a0),a1
                            	  5345: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5346: 
                            	  5347: *     LONG
01:00003040 2081            	  5348:                 move.l d1,(a0)
01:00003042 D3D0            	  5349:                 adda.l (a0),a1
01:00003044 D889            	  5350:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5351: 
01:00003046 E299            	  5352:                 ror.l #$1,d1
01:00003048 51CEFFF6        	  5353:                 dbf d6,ADDA_OUTER1
01:0000304C E299            	  5354:                 ror.l #$1,d1
01:0000304E 2241            	  5355:                 move.l d1,a1
01:00003050 223C8167E123    	  5356:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003056 7C1E            	  5357:                 move.l #$0000001E,d6       * Inner loop counter
01:00003058 51CFFFE6        	  5358:                 dbf d7,ADDA_OUTER1
                            	  5359: 
01:0000305C 0C84AC04DB4C    	  5360:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:00003062 66FE            	  5361:                 bne.s *
                            	  5362: 
                            	  5363: 
01:00003064 4E75            	  5364:                 rts
                            	  5365: 
                            	  5366: 
                            	  5367: *-----------------------------------------------------------
                            	  5368: *-----------------------------------------------------------
                            	  5369: * OPCODE : SUBA
                            	  5370: *-----------------------------------------------------------
                            	  5371: *-----------------------------------------------------------
                            	  5372: 
                            	  5373: op_SUBA:
                            	  5374: 
                            	  5375: *  * <EA> to Register
01:00003066 203CA5A5A5A5    	  5376:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000306C 223C8167E123    	  5377:                 move.l #$8167E123,d1
01:00003072 243CA5A5A5A5    	  5378:                 move.l #$a5a5a5a5,d2
01:00003078 7600            	  5379:                 moveq  #$00000000,d3
01:0000307A 7800            	  5380:                 moveq  #$00000000,d4       * Cumulative data results
01:0000307C 7A00            	  5381:                 moveq  #$00000000,d5       * Cumulative flag results
01:0000307E 7C1E            	  5382:                 move.l #$0000001E,d6       * Inner loop counter
01:00003080 7E1E            	  5383:                 move.l #$0000001E,d7       * Outer loop counter
01:00003082 307C0100        	  5384:                 move.l #$00000100,a0       * Address for memory EA operations
01:00003086 227C8167E123    	  5385:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5386: 
                            	  5387: SUBA_OUTER1:
                            	  5388: 
                            	  5389: *     WORD
                            	  5390: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5391: *                suba.w (a0),a1
                            	  5392: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5393: 
                            	  5394: *     LONG
01:0000308C 2081            	  5395:                 move.l d1,(a0)
01:0000308E 93D0            	  5396:                 suba.l (a0),a1
01:00003090 D889            	  5397:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5398: 
01:00003092 E299            	  5399:                 ror.l #$1,d1
01:00003094 51CEFFF6        	  5400:                 dbf d6,SUBA_OUTER1
01:00003098 E299            	  5401:                 ror.l #$1,d1
01:0000309A 2241            	  5402:                 move.l d1,a1
01:0000309C 223C8167E123    	  5403:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030A2 7C1E            	  5404:                 move.l #$0000001E,d6       * Inner loop counter
01:000030A4 51CFFFE6        	  5405:                 dbf d7,SUBA_OUTER1
                            	  5406: 
01:000030A8 0C84E1E36D7A    	  5407:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:000030AE 66FE            	  5408:                 bne.s *
                            	  5409: 
                            	  5410: 
01:000030B0 4E75            	  5411:                 rts
                            	  5412: 
                            	  5413: 
                            	  5414: 
                            	  5415: *-----------------------------------------------------------
                            	  5416: *-----------------------------------------------------------
                            	  5417: * OPCODE : ADDX
                            	  5418: *-----------------------------------------------------------
                            	  5419: *-----------------------------------------------------------
                            	  5420: 
                            	  5421: op_ADDX:
                            	  5422: 
                            	  5423: 
                            	  5424: *  * Register to Register
01:000030B2 203CA5A5A5A5    	  5425:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000030B8 223C8167E123    	  5426:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000030BE 243CA5A5A5A5    	  5427:                 move.l #$a5a5a5a5,d2
01:000030C4 7600            	  5428:                 moveq  #$00000000,d3
01:000030C6 7800            	  5429:                 moveq  #$00000000,d4       * Cumulative data results
01:000030C8 7A00            	  5430:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030CA 7C1E            	  5431:                 move.l #$0000001E,d6       * Inner loop counter
01:000030CC 7E1E            	  5432:                 move.l #$0000001E,d7       * Outer loop counter
01:000030CE 307C0100        	  5433:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5434: 
                            	  5435: 
                            	  5436: ADDX_OUTER1:
                            	  5437: 
                            	  5438: *     BYTE
01:000030D2 2002            	  5439:                 move.l d2,d0
01:000030D4 D101            	  5440:                 addx.b d1,d0
01:000030D6 40C3            	  5441:                 move.w sr,d3
01:000030D8 02830000001F    	  5442:                 andi.l #$1F,d3            * Isolate flags
01:000030DE DA83            	  5443:                 add.l d3,d5               * Copy flag results into accumulator
01:000030E0 D880            	  5444:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5445: 
                            	  5446: *     WORD
01:000030E2 2002            	  5447:                 move.l d2,d0
01:000030E4 D141            	  5448:                 addx.w d1,d0
01:000030E6 40C3            	  5449:                 move.w sr,d3
01:000030E8 02830000001F    	  5450:                 andi.l #$1F,d3            * Isolate flags
01:000030EE DA83            	  5451:                 add.l d3,d5               * Copy flag results into accumulator
01:000030F0 D880            	  5452:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5453: 
                            	  5454: *     LONG
01:000030F2 2002            	  5455:                 move.l d2,d0
01:000030F4 D181            	  5456:                 addx.l d1,d0
01:000030F6 40C3            	  5457:                 move.w sr,d3
01:000030F8 02830000001F    	  5458:                 andi.l #$1F,d3            * Isolate flags
01:000030FE DA83            	  5459:                 add.l d3,d5               * Copy flag results into accumulator
01:00003100 D880            	  5460:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5461: 
01:00003102 E299            	  5462:                 ror.l #$1,d1
01:00003104 51CEFFCC        	  5463:                 dbf d6,ADDX_OUTER1
01:00003108 E29A            	  5464:                 ror.l #$1,d2
01:0000310A 223C8167E123    	  5465:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003110 7C1E            	  5466:                 move.l #$0000001E,d6       * Inner loop counter
01:00003112 51CFFFBE        	  5467:                 dbf d7,ADDX_OUTER1
                            	  5468: 
01:00003116 0C844E96A4D9    	  5469:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:0000311C 66FE            	  5470:                 bne.s *
01:0000311E 0C85000085CD    	  5471:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:00003124 66FE            	  5472:                 bne.s *
                            	  5473: 
                            	  5474: 
                            	  5475: 
                            	  5476: *     -(An),-(An)
                            	  5477: 
01:00003126 7000            	  5478:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003128 7200            	  5479:                 moveq  #$00000000,d1
01:0000312A 7400            	  5480:                 moveq  #$00000000,d2
01:0000312C 307C0100        	  5481:                 move.l #$00000100,a0       * Address for Data-X
01:00003130 327C0200        	  5482:                 move.l #$00000200,a1       * Address for Data-Y
01:00003134 20FC11FF5580    	  5483:                 move.l #$11FF5580,(a0)+   * Populate test data
01:0000313A 20FC1111FFFF    	  5484:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00003140 20FC33333333    	  5485:                 move.l #$33333333,(a0)+   * Populate test data
01:00003146 20FC44444444    	  5486:                 move.l #$44444444,(a0)+   * Populate test data
01:0000314C 22FC80FF337F    	  5487:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003152 22FCFFFF1111    	  5488:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00003158 22FC33333333    	  5489:                 move.l #$33333333,(a1)+   * Populate test data
01:0000315E 22FC44444444    	  5490:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5491: 
                            	  5492: 
01:00003164 7C0F            	  5493:                 move.l #$0000000F,d6       * Loop counter
                            	  5494: 
01:00003166 D308            	  5495: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:00003168 40C3            	  5496:                 move.w sr,d3
01:0000316A 02830000000F    	  5497:                 andi.l #$0F,d3            * Isolate flags
01:00003170 D083            	  5498:                 add.l d3,d0               * Copy flag results into accumulator
01:00003172 D211            	  5499:                 add.b (a1),d1
01:00003174 51CEFFF0        	  5500:                 dbf d6,ADDX_LOOP3
                            	  5501: 
                            	  5502: 
01:00003178 307C0110        	  5503:                 move.l #$00000110,a0       * Address for Data-X
01:0000317C 327C0210        	  5504:                 move.l #$00000210,a1       * Address for Data-Y
01:00003180 7C07            	  5505:                 moveq  #$00000007,d6       * Loop counter
                            	  5506: 
01:00003182 D348            	  5507: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:00003184 40C3            	  5508:                 move.w sr,d3
01:00003186 02830000000F    	  5509:                 andi.l #$0F,d3            * Isolate flags
01:0000318C D083            	  5510:                 add.l d3,d0               * Copy flag results into accumulator
01:0000318E D251            	  5511:                 add.w (a1),d1
01:00003190 51CEFFF0        	  5512:                 dbf d6,ADDX_LOOP4
                            	  5513: 
                            	  5514: 
01:00003194 307C0110        	  5515:                 move.l #$00000110,a0       * Address for Data-X
01:00003198 327C0210        	  5516:                 move.l #$00000210,a1       * Address for Data-Y
01:0000319C 7C03            	  5517:                 moveq  #$00000003,d6       * Loop counter
                            	  5518: 
01:0000319E D388            	  5519: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:000031A0 40C3            	  5520:                 move.w sr,d3
01:000031A2 02830000000F    	  5521:                 andi.l #$0F,d3            * Isolate flags
01:000031A8 D083            	  5522:                 add.l d3,d0               * Copy flag results into accumulator
01:000031AA D291            	  5523:                 add.l (a1),d1
01:000031AC 51CEFFF0        	  5524:                 dbf d6,ADDX_LOOP5
                            	  5525: 
                            	  5526: 
01:000031B0 0C8000000095    	  5527:                 cmpi.l #$00000095,d0      * Check the flag results
01:000031B6 66FE            	  5528:                 bne.s *
01:000031B8 0C81C812A682    	  5529:                 cmpi.l #$C812A682,d1      * Check the data results
01:000031BE 66FE            	  5530:                 bne.s *
                            	  5531: 
01:000031C0 4E75            	  5532:                 rts
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: *-----------------------------------------------------------
                            	  5538: *-----------------------------------------------------------
                            	  5539: * OPCODE : SUBX
                            	  5540: *-----------------------------------------------------------
                            	  5541: *-----------------------------------------------------------
                            	  5542: 
                            	  5543: op_SUBX:
                            	  5544: 
                            	  5545: 
                            	  5546: *  * Register to Register
01:000031C2 203CA5A5A5A5    	  5547:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000031C8 223C8167E123    	  5548:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000031CE 243CA5A5A5A5    	  5549:                 move.l #$a5a5a5a5,d2
01:000031D4 7600            	  5550:                 moveq  #$00000000,d3
01:000031D6 7800            	  5551:                 moveq  #$00000000,d4       * Cumulative data results
01:000031D8 7A00            	  5552:                 moveq  #$00000000,d5       * Cumulative flag results
01:000031DA 7C1E            	  5553:                 move.l #$0000001E,d6       * Inner loop counter
01:000031DC 7E1E            	  5554:                 move.l #$0000001E,d7       * Outer loop counter
01:000031DE 307C0100        	  5555:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5556: 
                            	  5557: 
                            	  5558: SUBX_OUTER1:
                            	  5559: 
                            	  5560: *     BYTE
01:000031E2 2002            	  5561:                 move.l d2,d0
01:000031E4 9101            	  5562:                 subx.b d1,d0
01:000031E6 40C3            	  5563:                 move.w sr,d3
01:000031E8 02830000001F    	  5564:                 andi.l #$1F,d3            * Isolate flags
01:000031EE DA83            	  5565:                 add.l d3,d5               * Copy flag results into accumulator
01:000031F0 D880            	  5566:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5567: 
                            	  5568: *     WORD
01:000031F2 2002            	  5569:                 move.l d2,d0
01:000031F4 9141            	  5570:                 subx.w d1,d0
01:000031F6 40C3            	  5571:                 move.w sr,d3
01:000031F8 02830000001F    	  5572:                 andi.l #$1F,d3            * Isolate flags
01:000031FE DA83            	  5573:                 add.l d3,d5               * Copy flag results into accumulator
01:00003200 D880            	  5574:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5575: 
                            	  5576: *     LONG
01:00003202 2002            	  5577:                 move.l d2,d0
01:00003204 9181            	  5578:                 subx.l d1,d0
01:00003206 40C3            	  5579:                 move.w sr,d3
01:00003208 02830000001F    	  5580:                 andi.l #$1F,d3            * Isolate flags
01:0000320E DA83            	  5581:                 add.l d3,d5               * Copy flag results into accumulator
01:00003210 D880            	  5582:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5583: 
01:00003212 E299            	  5584:                 ror.l #$1,d1
01:00003214 51CEFFCC        	  5585:                 dbf d6,SUBX_OUTER1
01:00003218 E29A            	  5586:                 ror.l #$1,d2
01:0000321A 223C8167E123    	  5587:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003220 7C1E            	  5588:                 move.l #$0000001E,d6       * Inner loop counter
01:00003222 51CFFFBE        	  5589:                 dbf d7,SUBX_OUTER1
                            	  5590: 
01:00003226 0C84FCAA913E    	  5591:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:0000322C 66FE            	  5592:                 bne.s *
01:0000322E 0C8500007E89    	  5593:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:00003234 66FE            	  5594:                 bne.s *
                            	  5595: 
                            	  5596: 
                            	  5597: 
                            	  5598: *     -(An),-(An)
                            	  5599: 
01:00003236 7000            	  5600:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003238 7200            	  5601:                 moveq  #$00000000,d1
01:0000323A 7400            	  5602:                 moveq  #$00000000,d2
01:0000323C 307C0100        	  5603:                 move.l #$00000100,a0       * Address for Data-X
01:00003240 327C0200        	  5604:                 move.l #$00000200,a1       * Address for Data-Y
01:00003244 20FC11FF5580    	  5605:                 move.l #$11FF5580,(a0)+   * Populate test data
01:0000324A 20FC1111FFFF    	  5606:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00003250 20FC80FF337F    	  5607:                 move.l #$80FF337F,(a0)+   * Populate test data
01:00003256 20FC44444444    	  5608:                 move.l #$44444444,(a0)+   * Populate test data
01:0000325C 22FC80FF337F    	  5609:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003262 22FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:00003268 22FC33333333    	  5611:                 move.l #$33333333,(a1)+   * Populate test data
01:0000326E 22FC5580EECC    	  5612:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5613: 
                            	  5614: 
01:00003274 7C0F            	  5615:                 move.l #$0000000F,d6       * Loop counter
                            	  5616: 
01:00003276 9308            	  5617: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:00003278 40C3            	  5618:                 move.w sr,d3
01:0000327A 02830000000F    	  5619:                 andi.l #$0F,d3            * Isolate flags
01:00003280 D083            	  5620:                 add.l d3,d0               * Copy flag results into accumulator
01:00003282 D211            	  5621:                 add.b (a1),d1
01:00003284 51CEFFF0        	  5622:                 dbf d6,SUBX_LOOP3
                            	  5623: 
                            	  5624: 
01:00003288 307C0110        	  5625:                 move.l #$00000110,a0       * Address for Data-X
01:0000328C 327C0210        	  5626:                 move.l #$00000210,a1       * Address for Data-Y
01:00003290 7C07            	  5627:                 moveq  #$00000007,d6       * Loop counter
                            	  5628: 
01:00003292 9348            	  5629: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:00003294 40C3            	  5630:                 move.w sr,d3
01:00003296 02830000000F    	  5631:                 andi.l #$0F,d3            * Isolate flags
01:0000329C D083            	  5632:                 add.l d3,d0               * Copy flag results into accumulator
01:0000329E D251            	  5633:                 add.w (a1),d1
01:000032A0 51CEFFF0        	  5634:                 dbf d6,SUBX_LOOP4
                            	  5635: 
                            	  5636: 
01:000032A4 307C0110        	  5637:                 move.l #$00000110,a0       * Address for Data-X
01:000032A8 327C0210        	  5638:                 move.l #$00000210,a1       * Address for Data-Y
01:000032AC 7C03            	  5639:                 moveq  #$00000003,d6       * Loop counter
                            	  5640: 
01:000032AE 9388            	  5641: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:000032B0 40C3            	  5642:                 move.w sr,d3
01:000032B2 02830000000F    	  5643:                 andi.l #$0F,d3            * Isolate flags
01:000032B8 D083            	  5644:                 add.l d3,d0               * Copy flag results into accumulator
01:000032BA D291            	  5645:                 add.l (a1),d1
01:000032BC 51CEFFF0        	  5646:                 dbf d6,SUBX_LOOP5
                            	  5647: 
                            	  5648: 
01:000032C0 0C80000000B1    	  5649:                 cmpi.l #$000000B1,d0      * Check the flag results
01:000032C6 66FE            	  5650:                 bne.s *
01:000032C8 0C8162C6F417    	  5651:                 cmpi.l #$62C6F417,d1      * Check the data results
01:000032CE 66FE            	  5652:                 bne.s *
                            	  5653: 
01:000032D0 4E75            	  5654:                 rts
                            	  5655: 
                            	  5656: 
                            	  5657: *-----------------------------------------------------------
                            	  5658: *-----------------------------------------------------------
                            	  5659: * OPCODE : MULU
                            	  5660: *-----------------------------------------------------------
                            	  5661: *-----------------------------------------------------------
                            	  5662: 
                            	  5663: op_MULU:
                            	  5664: 
01:000032D2 203CFE805501    	  5665:                 move.l #$FE805501,d0        * Initial
01:000032D8 223C5697EDB6    	  5666:                 move.l #$5697EDB6,d1        * Initial Y
01:000032DE 243CFE805501    	  5667:                 move.l #$FE805501,d2
01:000032E4 7600            	  5668:                 moveq  #$00000000,d3
01:000032E6 7800            	  5669:                 moveq  #$00000000,d4        * Cumulative data results
01:000032E8 7A00            	  5670:                 moveq  #$00000000,d5       * Cumulative flag results
01:000032EA 7C0E            	  5671:                 move.l #$0000000E,d6       * Inner loop counter
01:000032EC 7E0E            	  5672:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5673: 
                            	  5674: 
01:000032EE C0C1            	  5675: MULU_OUTER1:    mulu d1,d0
01:000032F0 40C3            	  5676:                 move.w sr,d3
01:000032F2 02830000000C    	  5677:                 andi.l #$0C,d3            * Isolate flags
01:000032F8 DA83            	  5678:                 add.l d3,d5               * Copy flag results into accumulator
01:000032FA D880            	  5679:                 add.l d0,d4               * Copy data results into data accumulator
01:000032FC E299            	  5680:                 ror.l #$1,d1
                            	  5681: 
01:000032FE 51CEFFEE        	  5682:                 dbf d6,MULU_OUTER1
01:00003302 E29A            	  5683:                 ror.l #$1,d2
01:00003304 2002            	  5684:                 move.l d2,d0
01:00003306 7C0E            	  5685:                 move.l #$0000000E,d6       * Inner loop counter
01:00003308 51CFFFE4        	  5686:                 dbf d7,MULU_OUTER1
                            	  5687: 
01:0000330C 0C8476FB988C    	  5688:                 cmpi.l #$76FB988C,d4      * Check the data results
01:00003312 66FE            	  5689:                 bne.s *
                            	  5690: 
01:00003314 0C8500000170    	  5691:                 cmpi.l #$00000170,d5      * Check the Flag results
01:0000331A 66FE            	  5692:                 bne.s *
                            	  5693: 
                            	  5694: 
01:0000331C 4E75            	  5695:                 rts
                            	  5696: 
                            	  5697: 
                            	  5698: *-----------------------------------------------------------
                            	  5699: *-----------------------------------------------------------
                            	  5700: * OPCODE : MULS
                            	  5701: *-----------------------------------------------------------
                            	  5702: *-----------------------------------------------------------
                            	  5703: 
                            	  5704: op_MULS:
                            	  5705: 
01:0000331E 203CFE805501    	  5706:                 move.l #$FE805501,d0        * Initial
01:00003324 223C5697EDB6    	  5707:                 move.l #$5697EDB6,d1        * Initial Y
01:0000332A 243CFE805501    	  5708:                 move.l #$FE805501,d2
01:00003330 7600            	  5709:                 moveq  #$00000000,d3
01:00003332 7800            	  5710:                 moveq  #$00000000,d4        * Cumulative data results
01:00003334 7A00            	  5711:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003336 7C0E            	  5712:                 move.l #$0000000E,d6       * Inner loop counter
01:00003338 7E0E            	  5713:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5714: 
                            	  5715: 
01:0000333A C1C1            	  5716: MULS_OUTER1:    muls d1,d0
01:0000333C 40C3            	  5717:                 move.w sr,d3
01:0000333E 02830000000C    	  5718:                 andi.l #$0C,d3            * Isolate flags
01:00003344 DA83            	  5719:                 add.l d3,d5               * Copy flag results into accumulator
01:00003346 D880            	  5720:                 add.l d0,d4               * Copy data results into data accumulator
01:00003348 E299            	  5721:                 ror.l #$1,d1
                            	  5722: 
01:0000334A 51CEFFEE        	  5723:                 dbf d6,MULS_OUTER1
01:0000334E E29A            	  5724:                 ror.l #$1,d2
01:00003350 2002            	  5725:                 move.l d2,d0
01:00003352 7C0E            	  5726:                 move.l #$0000000E,d6       * Inner loop counter
01:00003354 51CFFFE4        	  5727:                 dbf d7,MULS_OUTER1
                            	  5728: 
01:00003358 0C84D4E2988C    	  5729:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:0000335E 66FE            	  5730:                 bne.s *
                            	  5731: 
01:00003360 0C85000003E0    	  5732:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:00003366 66FE            	  5733:                 bne.s *
                            	  5734: 
                            	  5735: 
01:00003368 4E75            	  5736:                 rts
                            	  5737: 
                            	  5738: 
                            	  5739: 
                            	  5740: *-----------------------------------------------------------
                            	  5741: *-----------------------------------------------------------
                            	  5742: * OPCODE : EXG
                            	  5743: *-----------------------------------------------------------
                            	  5744: *-----------------------------------------------------------
                            	  5745: 
                            	  5746: op_EXG:
01:0000336A 223CD1D1D1D1    	  5747:                 move.l #$d1d1d1d1,d1
01:00003370 243CD2D2D2D2    	  5748:                 move.l #$d2d2d2d2,d2
01:00003376 263CD3D3D3D3    	  5749:                 move.l #$d3d3d3d3,d3
01:0000337C 227CA1A1A1A1    	  5750:                 move.l #$a1a1a1a1,a1
01:00003382 247CA2A2A2A2    	  5751:                 move.l #$a2a2a2a2,a2
01:00003388 267CA3A3A3A3    	  5752:                 move.l #$a3a3a3a3,a3
                            	  5753: 
01:0000338E C342            	  5754:                 exg d1,d2
01:00003390 C34A            	  5755:                 exg a1,a2
01:00003392 C78B            	  5756:                 exg d3,a3
                            	  5757: 
01:00003394 0C81D2D2D2D2    	  5758:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:0000339A 66FE            	  5759:                 bne.s *
01:0000339C 0C82D1D1D1D1    	  5760:                 cmpi.l #$d1d1d1d1,d2
01:000033A2 66FE            	  5761:                 bne.s *
01:000033A4 0C83A3A3A3A3    	  5762:                 cmpi.l #$a3a3a3a3,d3
01:000033AA 66FE            	  5763:                 bne.s *
                            	  5764: 
01:000033AC 2209            	  5765:                 move.l a1,d1
01:000033AE 240A            	  5766:                 move.l a2,d2
01:000033B0 260B            	  5767:                 move.l a3,d3
                            	  5768: 
01:000033B2 0C81A2A2A2A2    	  5769:                 cmpi.l #$a2a2a2a2,d1
01:000033B8 66FE            	  5770:                 bne.s *
01:000033BA 0C82A1A1A1A1    	  5771:                 cmpi.l #$a1a1a1a1,d2
01:000033C0 66FE            	  5772:                 bne.s *
01:000033C2 0C83D3D3D3D3    	  5773:                 cmpi.l #$d3d3d3d3,d3
01:000033C8 66FE            	  5774:                 bne.s *
                            	  5775: 
01:000033CA 4E75            	  5776:                 rts
                            	  5777: 
                            	  5778: 
                            	  5779: *-----------------------------------------------------------
                            	  5780: *-----------------------------------------------------------
                            	  5781: * OPCODE : ROx
                            	  5782: *-----------------------------------------------------------
                            	  5783: *-----------------------------------------------------------
                            	  5784: 
                            	  5785: *     Subroutine to check and accumulate the flags
01:000033CC 40C3            	  5786: ROx_FLAGS:      move.w sr,d3
01:000033CE 02830000000F    	  5787:                 andi.l #$0F,d3            * Isolate flags
01:000033D4 DA83            	  5788:                 add.l d3,d5               * Copy flag results into accumulator
01:000033D6 4E75            	  5789:                 rts
                            	  5790: 
                            	  5791: op_ROx:
                            	  5792: 
                            	  5793: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5794: 
                            	  5795: *        BYTE LEFT
01:000033D8 203C80018FF1    	  5796:                 move.l #$80018FF1,d0
01:000033DE 7A00            	  5797:                 moveq  #$00000000,d5
01:000033E0 7C11            	  5798:                 moveq  #$00000011,d6
                            	  5799: ROx_LOOP1:
01:000033E2 ED38            	  5800:                 rol.b d6,d0
01:000033E4 61E6            	  5801:                 bsr ROx_FLAGS
01:000033E6 51CEFFFA        	  5802:                 dbf d6,ROx_LOOP1
01:000033EA 0C8080018FE3    	  5803:                 cmpi.l #$80018FE3,d0
01:000033F0 66FE            	  5804:                 bne.s *
01:000033F2 0C850000006B    	  5805:                 cmpi.l #$0000006B,d5
01:000033F8 66FE            	  5806:                 bne.s *
                            	  5807: 
                            	  5808: *        BYTE RIGHT
01:000033FA 203C80018FF1    	  5809:                 move.l #$80018FF1,d0
01:00003400 7C12            	  5810:                 moveq  #$00000012,d6
                            	  5811: ROx_LOOP2:
01:00003402 EC38            	  5812:                 ror.b d6,d0
01:00003404 61C6            	  5813:                 bsr ROx_FLAGS
01:00003406 51CEFFFA        	  5814:                 dbf d6,ROx_LOOP2
01:0000340A 0C8080018F3E    	  5815:                 cmpi.l #$80018F3E,d0
01:00003410 66FE            	  5816:                 bne.s *
01:00003412 0C85000000C5    	  5817:                 cmpi.l #$000000C5,d5
01:00003418 66FE            	  5818:                 bne.s *
                            	  5819: 
                            	  5820: 
                            	  5821: *        WORD LEFT
01:0000341A 203C80018FF1    	  5822:                 move.l #$80018FF1,d0
01:00003420 7C13            	  5823:                 moveq  #$00000013,d6
                            	  5824: ROx_LOOP3:
01:00003422 ED78            	  5825:                 rol.w d6,d0
01:00003424 61A6            	  5826:                 bsr ROx_FLAGS
01:00003426 51CEFFFA        	  5827:                 dbf d6,ROx_LOOP3
01:0000342A 0C80800163FC    	  5828:                 cmpi.l #$800163FC,d0
01:00003430 66FE            	  5829:                 bne.s *
01:00003432 0C8500000131    	  5830:                 cmpi.l #$00000131,d5
01:00003438 66FE            	  5831:                 bne.s *
                            	  5832: 
                            	  5833: *        WORD RIGHT
01:0000343A 203C80018FF1    	  5834:                 move.l #$80018FF1,d0
01:00003440 7C1E            	  5835:                 move.l #$0000001E,d6
                            	  5836: ROx_LOOP4:
01:00003442 EC78            	  5837:                 ror.w d6,d0
01:00003444 6186            	  5838:                 bsr ROx_FLAGS
01:00003446 51CEFFFA        	  5839:                 dbf d6,ROx_LOOP4
01:0000344A 0C808001C7F8    	  5840:                 cmpi.l #$8001C7F8,d0
01:00003450 66FE            	  5841:                 bne.s *
01:00003452 0C85000001DB    	  5842:                 cmpi.l #$000001DB,d5
01:00003458 66FE            	  5843:                 bne.s *
                            	  5844: 
                            	  5845: 
                            	  5846: *        LONG LEFT
01:0000345A 203C80018FF1    	  5847:                 move.l #$80018FF1,d0
01:00003460 7C15            	  5848:                 moveq  #$00000015,d6
                            	  5849: ROx_LOOP5:
01:00003462 EDB8            	  5850:                 rol.l d6,d0
01:00003464 6100FF66        	  5851:                 bsr ROx_FLAGS
01:00003468 51CEFFF8        	  5852:                 dbf d6,ROx_LOOP5
01:0000346C 0C8000C7F8C0    	  5853:                 cmpi.l #$00C7F8C0,d0
01:00003472 66FE            	  5854:                 bne.s *
01:00003474 0C850000021A    	  5855:                 cmpi.l #$0000021A,d5
01:0000347A 66FE            	  5856:                 bne.s *
                            	  5857: 
                            	  5858: *        LONG RIGHT
01:0000347C 203C80018FF1    	  5859:                 move.l #$80018FF1,d0
01:00003482 7C16            	  5860:                 moveq  #$00000016,d6
                            	  5861: ROx_LOOP6:
01:00003484 ECB8            	  5862:                 ror.l d6,d0
01:00003486 6100FF44        	  5863:                 bsr ROx_FLAGS
01:0000348A 51CEFFF8        	  5864:                 dbf d6,ROx_LOOP6
01:0000348E 0C80000C7F8C    	  5865:                 cmpi.l #$000C7F8C,d0
01:00003494 66FE            	  5866:                 bne.s *
01:00003496 0C8500000250    	  5867:                 cmpi.l #$00000250,d5
01:0000349C 66FE            	  5868:                 bne.s *
                            	  5869: 
                            	  5870: 
                            	  5871: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5872: 
01:0000349E 203C80018FF1    	  5873:                 move.l #$80018FF1,d0
01:000034A4 7A00            	  5874:                 moveq  #$00000000,d5
                            	  5875: 
                            	  5876: *        BYTE LEFT
01:000034A6 E318            	  5877:                 rol.b #1,d0
01:000034A8 6100FF22        	  5878:                 bsr ROx_FLAGS
01:000034AC EB18            	  5879:                 rol.b #5,d0
01:000034AE 6100FF1C        	  5880:                 bsr ROx_FLAGS
01:000034B2 EF18            	  5881:                 rol.b #7,d0
01:000034B4 6100FF16        	  5882:                 bsr ROx_FLAGS
01:000034B8 E118            	  5883:                 rol.b #8,d0
01:000034BA 6100FF10        	  5884:                 bsr ROx_FLAGS
01:000034BE 0C8080018F3E    	  5885:                 cmpi.l #$80018F3E,d0
01:000034C4 66FE            	  5886:                 bne.s *
01:000034C6 0C8500000009    	  5887:                 cmpi.l #$00000009,d5
01:000034CC 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        BYTE RIGHT
01:000034CE E218            	  5891:                 ror.b #1,d0
01:000034D0 6100FEFA        	  5892:                 bsr ROx_FLAGS
01:000034D4 EA18            	  5893:                 ror.b #5,d0
01:000034D6 6100FEF4        	  5894:                 bsr ROx_FLAGS
01:000034DA EE18            	  5895:                 ror.b #7,d0
01:000034DC 6100FEEE        	  5896:                 bsr ROx_FLAGS
01:000034E0 E018            	  5897:                 ror.b #8,d0
01:000034E2 6100FEE8        	  5898:                 bsr ROx_FLAGS
01:000034E6 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
01:000034EC 66FE            	  5900:                 bne.s *
01:000034EE 0C8500000024    	  5901:                 cmpi.l #$00000024,d5
01:000034F4 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        WORD LEFT
01:000034F6 E358            	  5905:                 rol.w #1,d0
01:000034F8 6100FED2        	  5906:                 bsr ROx_FLAGS
01:000034FC EB58            	  5907:                 rol.w #5,d0
01:000034FE 6100FECC        	  5908:                 bsr ROx_FLAGS
01:00003502 EF58            	  5909:                 rol.w #7,d0
01:00003504 6100FEC6        	  5910:                 bsr ROx_FLAGS
01:00003508 E158            	  5911:                 rol.w #8,d0
01:0000350A 6100FEC0        	  5912:                 bsr ROx_FLAGS
01:0000350E 0C808001FE31    	  5913:                 cmpi.l #$8001FE31,d0
01:00003514 66FE            	  5914:                 bne.s *
01:00003516 0C8500000037    	  5915:                 cmpi.l #$00000037,d5
01:0000351C 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        WORD RIGHT
01:0000351E E258            	  5919:                 ror.w #1,d0
01:00003520 6100FEAA        	  5920:                 bsr ROx_FLAGS
01:00003524 EA58            	  5921:                 ror.w #5,d0
01:00003526 6100FEA4        	  5922:                 bsr ROx_FLAGS
01:0000352A EE58            	  5923:                 ror.w #7,d0
01:0000352C 6100FE9E        	  5924:                 bsr ROx_FLAGS
01:00003530 E058            	  5925:                 ror.w #8,d0
01:00003532 6100FE98        	  5926:                 bsr ROx_FLAGS
01:00003536 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
01:0000353C 66FE            	  5928:                 bne.s *
01:0000353E 0C850000005B    	  5929:                 cmpi.l #$0000005B,d5
01:00003544 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: *        LONG LEFT
01:00003546 E398            	  5933:                 rol.l #1,d0
01:00003548 6100FE82        	  5934:                 bsr ROx_FLAGS
01:0000354C EB98            	  5935:                 rol.l #5,d0
01:0000354E 6100FE7C        	  5936:                 bsr ROx_FLAGS
01:00003552 EF98            	  5937:                 rol.l #7,d0
01:00003554 6100FE76        	  5938:                 bsr ROx_FLAGS
01:00003558 E198            	  5939:                 rol.l #8,d0
01:0000355A 6100FE70        	  5940:                 bsr ROx_FLAGS
01:0000355E 0C80FE300031    	  5941:                 cmpi.l #$FE300031,d0
01:00003564 66FE            	  5942:                 bne.s *
01:00003566 0C8500000065    	  5943:                 cmpi.l #$00000065,d5
01:0000356C 66FE            	  5944:                 bne.s *
                            	  5945: 
                            	  5946: *        LONG RIGHT
01:0000356E E298            	  5947:                 ror.l #1,d0
01:00003570 6100FE5A        	  5948:                 bsr ROx_FLAGS
01:00003574 EA98            	  5949:                 ror.l #5,d0
01:00003576 6100FE54        	  5950:                 bsr ROx_FLAGS
01:0000357A EE98            	  5951:                 ror.l #7,d0
01:0000357C 6100FE4E        	  5952:                 bsr ROx_FLAGS
01:00003580 E098            	  5953:                 ror.l #8,d0
01:00003582 6100FE48        	  5954:                 bsr ROx_FLAGS
01:00003586 0C8080018FF1    	  5955:                 cmpi.l #$80018FF1,d0
01:0000358C 66FE            	  5956:                 bne.s *
01:0000358E 0C8500000080    	  5957:                 cmpi.l #$00000080,d5
01:00003594 66FE            	  5958:                 bne.s *
                            	  5959: 
                            	  5960: 
                            	  5961: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5962: 
01:00003596 7A00            	  5963:                 moveq  #$00000000,d5
01:00003598 307C0100        	  5964:                 move.l #$00000100,a0
01:0000359C 30BC8FF1        	  5965:                 move.w #$8FF1,(a0)
                            	  5966: 
                            	  5967: *        WORD LEFT
01:000035A0 E7D0            	  5968:                 rol (a0)
01:000035A2 6100FE28        	  5969:                 bsr ROx_FLAGS
01:000035A6 E7D0            	  5970:                 rol (a0)
01:000035A8 6100FE22        	  5971:                 bsr ROx_FLAGS
01:000035AC E7D0            	  5972:                 rol (a0)
01:000035AE 6100FE1C        	  5973:                 bsr ROx_FLAGS
01:000035B2 E7D0            	  5974:                 rol (a0)
01:000035B4 6100FE16        	  5975:                 bsr ROx_FLAGS
01:000035B8 3010            	  5976:                 move.w (a0),d0
01:000035BA 0C808001FF18    	  5977:                 cmpi.l #$8001FF18,d0
01:000035C0 66FE            	  5978:                 bne.s *
01:000035C2 0C8500000009    	  5979:                 cmpi.l #$00000009,d5
01:000035C8 66FE            	  5980:                 bne.s *
                            	  5981: 
                            	  5982: *        WORD RIGHT
01:000035CA E6D0            	  5983:                 ror (a0)
01:000035CC 6100FDFE        	  5984:                 bsr ROx_FLAGS
01:000035D0 E6D0            	  5985:                 ror (a0)
01:000035D2 6100FDF8        	  5986:                 bsr ROx_FLAGS
01:000035D6 E6D0            	  5987:                 ror (a0)
01:000035D8 6100FDF2        	  5988:                 bsr ROx_FLAGS
01:000035DC E6D0            	  5989:                 ror (a0)
01:000035DE 6100FDEC        	  5990:                 bsr ROx_FLAGS
01:000035E2 E6D0            	  5991:                 ror (a0)
01:000035E4 6100FDE6        	  5992:                 bsr ROx_FLAGS
01:000035E8 E6D0            	  5993:                 ror (a0)
01:000035EA 6100FDE0        	  5994:                 bsr ROx_FLAGS
01:000035EE 3010            	  5995:                 move.w (a0),d0
01:000035F0 0C80800163FC    	  5996:                 cmpi.l #$800163FC,d0
01:000035F6 66FE            	  5997:                 bne.s *
01:000035F8 0C850000001B    	  5998:                 cmpi.l #$0000001B,d5
01:000035FE 66FE            	  5999:                 bne.s *
                            	  6000: 
01:00003600 4E75            	  6001:                 rts
                            	  6002: 
                            	  6003: 
                            	  6004: 
                            	  6005: *-----------------------------------------------------------
                            	  6006: *-----------------------------------------------------------
                            	  6007: * OPCODE : ROXx
                            	  6008: *-----------------------------------------------------------
                            	  6009: *-----------------------------------------------------------
                            	  6010: 
                            	  6011: *     Subroutine to check and accumulate the flags
01:00003602 40C3            	  6012: ROXx_FLAGS:     move.w sr,d3
01:00003604 02830000000F    	  6013:                 andi.l #$0F,d3            * Isolate flags
01:0000360A DA83            	  6014:                 add.l d3,d5               * Copy flag results into accumulator
01:0000360C 4E75            	  6015:                 rts
                            	  6016: 
                            	  6017: op_ROXx:
                            	  6018: 
                            	  6019: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6020: 
                            	  6021: *        BYTE LEFT
01:0000360E 203C80018FF1    	  6022:                 move.l #$80018FF1,d0
01:00003614 7A00            	  6023:                 moveq  #$00000000,d5
01:00003616 7C11            	  6024:                 moveq  #$00000011,d6
                            	  6025: ROXx_LOOP1:
01:00003618 ED30            	  6026:                 roxl.b d6,d0
01:0000361A 61E6            	  6027:                 bsr ROXx_FLAGS
01:0000361C 51CEFFFA        	  6028:                 dbf d6,ROXx_LOOP1
01:00003620 0C8080018FD0    	  6029:                 cmpi.l #$80018FD0,d0
01:00003626 66FE            	  6030:                 bne.s *
01:00003628 0C8500000042    	  6031:                 cmpi.l #$00000042,d5
01:0000362E 66FE            	  6032:                 bne.s *
                            	  6033: 
                            	  6034: *        BYTE RIGHT
01:00003630 203C80018FF1    	  6035:                 move.l #$80018FF1,d0
01:00003636 7C12            	  6036:                 moveq  #$00000012,d6
                            	  6037: ROXx_LOOP2:
01:00003638 EC30            	  6038:                 roxr.b d6,d0
01:0000363A 61C6            	  6039:                 bsr ROXx_FLAGS
01:0000363C 51CEFFFA        	  6040:                 dbf d6,ROXx_LOOP2
01:00003640 0C8080018F51    	  6041:                 cmpi.l #$80018F51,d0
01:00003646 66FE            	  6042:                 bne.s *
01:00003648 0C850000009C    	  6043:                 cmpi.l #$0000009C,d5
01:0000364E 66FE            	  6044:                 bne.s *
                            	  6045: 
                            	  6046: 
                            	  6047: *        WORD LEFT
01:00003650 203C80018FF1    	  6048:                 move.l #$80018FF1,d0
01:00003656 7C13            	  6049:                 moveq  #$00000013,d6
                            	  6050: ROXx_LOOP3:
01:00003658 ED70            	  6051:                 roxl.w d6,d0
01:0000365A 61A6            	  6052:                 bsr ROXx_FLAGS
01:0000365C 51CEFFFA        	  6053:                 dbf d6,ROXx_LOOP3
01:00003660 0C8080013980    	  6054:                 cmpi.l #$80013980,d0
01:00003666 66FE            	  6055:                 bne.s *
01:00003668 0C85000000C9    	  6056:                 cmpi.l #$000000C9,d5
01:0000366E 66FE            	  6057:                 bne.s *
                            	  6058: 
                            	  6059: *        WORD RIGHT
01:00003670 203C80018FF1    	  6060:                 move.l #$80018FF1,d0
01:00003676 7C1E            	  6061:                 move.l #$0000001E,d6
                            	  6062: ROXx_LOOP4:
01:00003678 EC70            	  6063:                 roxr.w d6,d0
01:0000367A 6186            	  6064:                 bsr ROXx_FLAGS
01:0000367C 51CEFFFA        	  6065:                 dbf d6,ROXx_LOOP4
01:00003680 0C8080010A1D    	  6066:                 cmpi.l #$80010A1D,d0
01:00003686 66FE            	  6067:                 bne.s *
01:00003688 0C850000014D    	  6068:                 cmpi.l #$0000014D,d5
01:0000368E 66FE            	  6069:                 bne.s *
                            	  6070: 
                            	  6071: 
                            	  6072: *        LONG LEFT
01:00003690 203C80018FF1    	  6073:                 move.l #$80018FF1,d0
01:00003696 7C15            	  6074:                 moveq  #$00000015,d6
                            	  6075: ROXx_LOOP5:
01:00003698 EDB0            	  6076:                 roxl.l d6,d0
01:0000369A 6100FF66        	  6077:                 bsr ROXx_FLAGS
01:0000369E 51CEFFF8        	  6078:                 dbf d6,ROXx_LOOP5
01:000036A2 0C80800185D0    	  6079:                 cmpi.l #$800185D0,d0
01:000036A8 66FE            	  6080:                 bne.s *
01:000036AA 0C85000001A1    	  6081:                 cmpi.l #$000001A1,d5
01:000036B0 66FE            	  6082:                 bne.s *
                            	  6083: 
                            	  6084: *        LONG RIGHT
01:000036B2 203C80018FF1    	  6085:                 move.l #$80018FF1,d0
01:000036B8 7C16            	  6086:                 moveq  #$00000016,d6
                            	  6087: ROXx_LOOP6:
01:000036BA ECB0            	  6088:                 roxr.l d6,d0
01:000036BC 6100FF44        	  6089:                 bsr ROXx_FLAGS
01:000036C0 51CEFFF8        	  6090:                 dbf d6,ROXx_LOOP6
01:000036C4 0C80082D8200    	  6091:                 cmpi.l #$082D8200,d0
01:000036CA 66FE            	  6092:                 bne.s *
01:000036CC 0C85000001DE    	  6093:                 cmpi.l #$000001DE,d5
01:000036D2 66FE            	  6094:                 bne.s *
                            	  6095: 
                            	  6096: 
                            	  6097: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6098: 
01:000036D4 203C80018FF1    	  6099:                 move.l #$80018FF1,d0
01:000036DA 7A00            	  6100:                 moveq  #$00000000,d5
                            	  6101: 
                            	  6102: *        BYTE LEFT
01:000036DC E310            	  6103:                 roxl.b #1,d0
01:000036DE 6100FF22        	  6104:                 bsr ROXx_FLAGS
01:000036E2 EB10            	  6105:                 roxl.b #5,d0
01:000036E4 6100FF1C        	  6106:                 bsr ROXx_FLAGS
01:000036E8 EF10            	  6107:                 roxl.b #7,d0
01:000036EA 6100FF16        	  6108:                 bsr ROXx_FLAGS
01:000036EE E110            	  6109:                 roxl.b #8,d0
01:000036F0 6100FF10        	  6110:                 bsr ROXx_FLAGS
01:000036F4 0C8080018F09    	  6111:                 cmpi.l #$80018F09,d0
01:000036FA 66FE            	  6112:                 bne.s *
01:000036FC 0C850000000B    	  6113:                 cmpi.l #$0000000B,d5
01:00003702 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        BYTE RIGHT
01:00003704 E210            	  6117:                 roxr.b #1,d0
01:00003706 6100FEFA        	  6118:                 bsr ROXx_FLAGS
01:0000370A EA10            	  6119:                 roxr.b #5,d0
01:0000370C 6100FEF4        	  6120:                 bsr ROXx_FLAGS
01:00003710 EE10            	  6121:                 roxr.b #7,d0
01:00003712 6100FEEE        	  6122:                 bsr ROXx_FLAGS
01:00003716 E010            	  6123:                 roxr.b #8,d0
01:00003718 6100FEE8        	  6124:                 bsr ROXx_FLAGS
01:0000371C 0C8080018F00    	  6125:                 cmpi.l #$80018F00,d0
01:00003722 66FE            	  6126:                 bne.s *
01:00003724 0C8500000015    	  6127:                 cmpi.l #$00000015,d5
01:0000372A 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        WORD LEFT
01:0000372C E350            	  6131:                 roxl.w #1,d0
01:0000372E 6100FED2        	  6132:                 bsr ROXx_FLAGS
01:00003732 EB50            	  6133:                 roxl.w #5,d0
01:00003734 6100FECC        	  6134:                 bsr ROXx_FLAGS
01:00003738 EF50            	  6135:                 roxl.w #7,d0
01:0000373A 6100FEC6        	  6136:                 bsr ROXx_FLAGS
01:0000373E E150            	  6137:                 roxl.w #8,d0
01:00003740 6100FEC0        	  6138:                 bsr ROXx_FLAGS
01:00003744 0C808001B000    	  6139:                 cmpi.l #$8001B000,d0
01:0000374A 66FE            	  6140:                 bne.s *
01:0000374C 0C8500000027    	  6141:                 cmpi.l #$00000027,d5
01:00003752 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        WORD RIGHT
01:00003754 E250            	  6145:                 roxr.w #1,d0
01:00003756 6100FEAA        	  6146:                 bsr ROXx_FLAGS
01:0000375A EA50            	  6147:                 roxr.w #5,d0
01:0000375C 6100FEA4        	  6148:                 bsr ROXx_FLAGS
01:00003760 EE50            	  6149:                 roxr.w #7,d0
01:00003762 6100FE9E        	  6150:                 bsr ROXx_FLAGS
01:00003766 E050            	  6151:                 roxr.w #8,d0
01:00003768 6100FE98        	  6152:                 bsr ROXx_FLAGS
01:0000376C 0C8080010A00    	  6153:                 cmpi.l #$80010A00,d0
01:00003772 66FE            	  6154:                 bne.s *
01:00003774 0C8500000028    	  6155:                 cmpi.l #$00000028,d5
01:0000377A 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: *        LONG LEFT
01:0000377C E390            	  6159:                 roxl.l #1,d0
01:0000377E 6100FE82        	  6160:                 bsr ROXx_FLAGS
01:00003782 EB90            	  6161:                 roxl.l #5,d0
01:00003784 6100FE7C        	  6162:                 bsr ROXx_FLAGS
01:00003788 EF90            	  6163:                 roxl.l #7,d0
01:0000378A 6100FE76        	  6164:                 bsr ROXx_FLAGS
01:0000378E E190            	  6165:                 roxl.l #8,d0
01:00003790 6100FE70        	  6166:                 bsr ROXx_FLAGS
01:00003794 0C8040000010    	  6167:                 cmpi.l #$40000010,d0
01:0000379A 66FE            	  6168:                 bne.s *
01:0000379C 0C850000002A    	  6169:                 cmpi.l #$0000002A,d5
01:000037A2 66FE            	  6170:                 bne.s *
                            	  6171: 
                            	  6172: *        LONG RIGHT
01:000037A4 E290            	  6173:                 roxr.l #1,d0
01:000037A6 6100FE5A        	  6174:                 bsr ROXx_FLAGS
01:000037AA EA90            	  6175:                 roxr.l #5,d0
01:000037AC 6100FE54        	  6176:                 bsr ROXx_FLAGS
01:000037B0 EE90            	  6177:                 roxr.l #7,d0
01:000037B2 6100FE4E        	  6178:                 bsr ROXx_FLAGS
01:000037B6 E090            	  6179:                 roxr.l #8,d0
01:000037B8 6100FE48        	  6180:                 bsr ROXx_FLAGS
01:000037BC 0C8000010200    	  6181:                 cmpi.l #$00010200,d0
01:000037C2 66FE            	  6182:                 bne.s *
01:000037C4 0C8500000032    	  6183:                 cmpi.l #$00000032,d5
01:000037CA 66FE            	  6184:                 bne.s *
                            	  6185: 
                            	  6186: 
                            	  6187: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6188: 
01:000037CC 7A00            	  6189:                 moveq  #$00000000,d5
01:000037CE 307C0100        	  6190:                 move.l #$00000100,a0
01:000037D2 30BC8FF1        	  6191:                 move.w #$8FF1,(a0)
                            	  6192: 
                            	  6193: *        WORD LEFT
01:000037D6 E5D0            	  6194:                 roxl (a0)
01:000037D8 6100FE28        	  6195:                 bsr ROXx_FLAGS
01:000037DC E5D0            	  6196:                 roxl (a0)
01:000037DE 6100FE22        	  6197:                 bsr ROXx_FLAGS
01:000037E2 E5D0            	  6198:                 roxl (a0)
01:000037E4 6100FE1C        	  6199:                 bsr ROXx_FLAGS
01:000037E8 E5D0            	  6200:                 roxl (a0)
01:000037EA 6100FE16        	  6201:                 bsr ROXx_FLAGS
01:000037EE 3010            	  6202:                 move.w (a0),d0
01:000037F0 0C800001FF10    	  6203:                 cmpi.l #$0001FF10,d0
01:000037F6 66FE            	  6204:                 bne.s *
01:000037F8 0C8500000009    	  6205:                 cmpi.l #$00000009,d5
01:000037FE 66FE            	  6206:                 bne.s *
                            	  6207: 
                            	  6208: *        WORD RIGHT
01:00003800 E4D0            	  6209:                 roxr (a0)
01:00003802 6100FDFE        	  6210:                 bsr ROXx_FLAGS
01:00003806 E4D0            	  6211:                 roxr (a0)
01:00003808 6100FDF8        	  6212:                 bsr ROXx_FLAGS
01:0000380C E4D0            	  6213:                 roxr (a0)
01:0000380E 6100FDF2        	  6214:                 bsr ROXx_FLAGS
01:00003812 E4D0            	  6215:                 roxr (a0)
01:00003814 6100FDEC        	  6216:                 bsr ROXx_FLAGS
01:00003818 E4D0            	  6217:                 roxr (a0)
01:0000381A 6100FDE6        	  6218:                 bsr ROXx_FLAGS
01:0000381E E4D0            	  6219:                 roxr (a0)
01:00003820 6100FDE0        	  6220:                 bsr ROXx_FLAGS
01:00003824 3010            	  6221:                 move.w (a0),d0
01:00003826 0C80000103FC    	  6222:                 cmpi.l #$000103FC,d0
01:0000382C 66FE            	  6223:                 bne.s *
01:0000382E 0C850000000A    	  6224:                 cmpi.l #$0000000A,d5
01:00003834 66FE            	  6225:                 bne.s *
                            	  6226: 
01:00003836 4E75            	  6227:                 rts
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: *-----------------------------------------------------------
                            	  6233: *-----------------------------------------------------------
                            	  6234: * OPCODE : SHIFTS
                            	  6235: *-----------------------------------------------------------
                            	  6236: *-----------------------------------------------------------
                            	  6237: 
                            	  6238: *     Subroutine to check and accumulate the flags
01:00003838 40C3            	  6239: SHIFTS_FLAGS:   move.w sr,d3
01:0000383A 02830000000F    	  6240:                 andi.l #$0F,d3            * Isolate flags
01:00003840 DA83            	  6241:                 add.l d3,d5               * Copy flag results into accumulator
01:00003842 4E75            	  6242:                 rts
                            	  6243: 
                            	  6244: op_SHIFTS:
                            	  6245: 
                            	  6246: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6247: 
                            	  6248: *        BYTE LEFT
01:00003844 203C80018F81    	  6249:                 move.l #$80018F81,d0
01:0000384A 7A00            	  6250:                 moveq  #$00000000,d5
01:0000384C 7C02            	  6251:                 moveq  #$00000002,d6
                            	  6252: SHIFTS_LOOP1:
01:0000384E ED20            	  6253:                 asl.b d6,d0
01:00003850 61E6            	  6254:                 bsr SHIFTS_FLAGS
01:00003852 51CEFFFA        	  6255:                 dbf d6,SHIFTS_LOOP1
01:00003856 0C8080018F08    	  6256:                 cmpi.l #$80018F08,d0
01:0000385C 66FE            	  6257:                 bne.s *
01:0000385E 0C8500000002    	  6258:                 cmpi.l #$00000002,d5
01:00003864 66FE            	  6259:                 bne.s *
                            	  6260: 
                            	  6261: *        BYTE RIGHT
01:00003866 203C80018F81    	  6262:                 move.l #$80018F81,d0
01:0000386C 7C02            	  6263:                 moveq  #$00000002,d6
                            	  6264: SHIFTS_LOOP2:
01:0000386E EC20            	  6265:                 asr.b d6,d0
01:00003870 61C6            	  6266:                 bsr SHIFTS_FLAGS
01:00003872 51CEFFFA        	  6267:                 dbf d6,SHIFTS_LOOP2
01:00003876 0C8080018FF0    	  6268:                 cmpi.l #$80018FF0,d0
01:0000387C 66FE            	  6269:                 bne.s *
01:0000387E 0C850000001A    	  6270:                 cmpi.l #$0000001A,d5
01:00003884 66FE            	  6271:                 bne.s *
                            	  6272: 
                            	  6273: 
                            	  6274: *        WORD LEFT
01:00003886 203C80018FF1    	  6275:                 move.l #$80018FF1,d0
01:0000388C 7C02            	  6276:                 moveq  #$00000002,d6
                            	  6277: SHIFTS_LOOP3:
01:0000388E ED60            	  6278:                 asl.w d6,d0
01:00003890 61A6            	  6279:                 bsr SHIFTS_FLAGS
01:00003892 51CEFFFA        	  6280:                 dbf d6,SHIFTS_LOOP3
01:00003896 0C8080017F88    	  6281:                 cmpi.l #$80017F88,d0
01:0000389C 66FE            	  6282:                 bne.s *
01:0000389E 0C850000001C    	  6283:                 cmpi.l #$0000001C,d5
01:000038A4 66FE            	  6284:                 bne.s *
                            	  6285: 
                            	  6286: *        WORD RIGHT
01:000038A6 203C80018FF1    	  6287:                 move.l #$80018FF1,d0
01:000038AC 7C02            	  6288:                 moveq  #$00000002,d6
                            	  6289: SHIFTS_LOOP4:
01:000038AE EC60            	  6290:                 asr.w d6,d0
01:000038B0 6186            	  6291:                 bsr SHIFTS_FLAGS
01:000038B2 51CEFFFA        	  6292:                 dbf d6,SHIFTS_LOOP4
01:000038B6 0C808001F1FE    	  6293:                 cmpi.l #$8001F1FE,d0
01:000038BC 66FE            	  6294:                 bne.s *
01:000038BE 0C8500000034    	  6295:                 cmpi.l #$00000034,d5
01:000038C4 66FE            	  6296:                 bne.s *
                            	  6297: 
                            	  6298: 
                            	  6299: *        LONG LEFT
01:000038C6 203C80018FF1    	  6300:                 move.l #$80018FF1,d0
01:000038CC 7C02            	  6301:                 moveq  #$00000002,d6
                            	  6302: SHIFTS_LOOP5:
01:000038CE EDA0            	  6303:                 asl.l d6,d0
01:000038D0 6100FF66        	  6304:                 bsr SHIFTS_FLAGS
01:000038D4 51CEFFF8        	  6305:                 dbf d6,SHIFTS_LOOP5
01:000038D8 0C80000C7F88    	  6306:                 cmpi.l #$000C7F88,d0
01:000038DE 66FE            	  6307:                 bne.s *
01:000038E0 0C8500000036    	  6308:                 cmpi.l #$00000036,d5
01:000038E6 66FE            	  6309:                 bne.s *
                            	  6310: 
                            	  6311: *        LONG RIGHT
01:000038E8 203C80018FF1    	  6312:                 move.l #$80018FF1,d0
01:000038EE 7C02            	  6313:                 moveq  #$00000002,d6
                            	  6314: SHIFTS_LOOP6:
01:000038F0 ECA0            	  6315:                 asr.l d6,d0
01:000038F2 6100FF44        	  6316:                 bsr SHIFTS_FLAGS
01:000038F6 51CEFFF8        	  6317:                 dbf d6,SHIFTS_LOOP6
01:000038FA 0C80F00031FE    	  6318:                 cmpi.l #$F00031FE,d0
01:00003900 66FE            	  6319:                 bne.s *
01:00003902 0C850000004E    	  6320:                 cmpi.l #$0000004E,d5
01:00003908 66FE            	  6321:                 bne.s *
                            	  6322: 
                            	  6323: 
                            	  6324: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6325: 
01:0000390A 203C80018FF1    	  6326:                 move.l #$80018FF1,d0
01:00003910 7A00            	  6327:                 moveq  #$00000000,d5
                            	  6328: 
                            	  6329: *        BYTE LEFT
01:00003912 D000            	  6330:                 asl.b #1,d0
01:00003914 6100FF22        	  6331:                 bsr SHIFTS_FLAGS
01:00003918 E500            	  6332:                 asl.b #2,d0
01:0000391A 6100FF1C        	  6333:                 bsr SHIFTS_FLAGS
01:0000391E D000            	  6334:                 asl.b #1,d0
01:00003920 6100FF16        	  6335:                 bsr SHIFTS_FLAGS
01:00003924 E700            	  6336:                 asl.b #3,d0
01:00003926 6100FF10        	  6337:                 bsr SHIFTS_FLAGS
01:0000392A 0C8080018F80    	  6338:                 cmpi.l #$80018F80,d0
01:00003930 66FE            	  6339:                 bne.s *
01:00003932 0C850000001F    	  6340:                 cmpi.l #$0000001F,d5
01:00003938 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        BYTE RIGHT
01:0000393A E200            	  6344:                 asr.b #1,d0
01:0000393C 6100FEFA        	  6345:                 bsr SHIFTS_FLAGS
01:00003940 E400            	  6346:                 asr.b #2,d0
01:00003942 6100FEF4        	  6347:                 bsr SHIFTS_FLAGS
01:00003946 E600            	  6348:                 asr.b #3,d0
01:00003948 6100FEEE        	  6349:                 bsr SHIFTS_FLAGS
01:0000394C E200            	  6350:                 asr.b #1,d0
01:0000394E 6100FEE8        	  6351:                 bsr SHIFTS_FLAGS
01:00003952 0C8080018FFF    	  6352:                 cmpi.l #$80018FFF,d0
01:00003958 66FE            	  6353:                 bne.s *
01:0000395A 0C850000003F    	  6354:                 cmpi.l #$0000003F,d5
01:00003960 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        WORD LEFT
01:00003962 D040            	  6358:                 asl.w #1,d0
01:00003964 6100FED2        	  6359:                 bsr SHIFTS_FLAGS
01:00003968 E540            	  6360:                 asl.w #2,d0
01:0000396A 6100FECC        	  6361:                 bsr SHIFTS_FLAGS
01:0000396E E740            	  6362:                 asl.w #3,d0
01:00003970 6100FEC6        	  6363:                 bsr SHIFTS_FLAGS
01:00003974 EB40            	  6364:                 asl.w #5,d0
01:00003976 6100FEC0        	  6365:                 bsr SHIFTS_FLAGS
01:0000397A 0C808001F800    	  6366:                 cmpi.l #$8001F800,d0
01:00003980 66FE            	  6367:                 bne.s *
01:00003982 0C8500000056    	  6368:                 cmpi.l #$00000056,d5
01:00003988 66FE            	  6369:                 bne.s *
                            	  6370: 
                            	  6371: *        WORD RIGHT
01:0000398A EA40            	  6372:                 asr.w #5,d0
01:0000398C 6100FEAA        	  6373:                 bsr SHIFTS_FLAGS
01:00003990 E240            	  6374:                 asr.w #1,d0
01:00003992 6100FEA4        	  6375:                 bsr SHIFTS_FLAGS
01:00003996 E440            	  6376:                 asr.w #2,d0
01:00003998 6100FE9E        	  6377:                 bsr SHIFTS_FLAGS
01:0000399C E840            	  6378:                 asr.w #4,d0
01:0000399E 6100FE98        	  6379:                 bsr SHIFTS_FLAGS
01:000039A2 0C808001FFFF    	  6380:                 cmpi.l #$8001FFFF,d0
01:000039A8 66FE            	  6381:                 bne.s *
01:000039AA 0C8500000077    	  6382:                 cmpi.l #$00000077,d5
01:000039B0 66FE            	  6383:                 bne.s *
                            	  6384: 
                            	  6385: *        LONG LEFT
01:000039B2 203C80018FF1    	  6386:                 move.l #$80018FF1,d0
01:000039B8 D080            	  6387:                 asl.l #1,d0
01:000039BA 6100FE7C        	  6388:                 bsr SHIFTS_FLAGS
01:000039BE E580            	  6389:                 asl.l #2,d0
01:000039C0 6100FE76        	  6390:                 bsr SHIFTS_FLAGS
01:000039C4 EF80            	  6391:                 asl.l #7,d0
01:000039C6 6100FE70        	  6392:                 bsr SHIFTS_FLAGS
01:000039CA E980            	  6393:                 asl.l #4,d0
01:000039CC 6100FE6A        	  6394:                 bsr SHIFTS_FLAGS
01:000039D0 0C8063FC4000    	  6395:                 cmpi.l #$63FC4000,d0
01:000039D6 66FE            	  6396:                 bne.s *
01:000039D8 0C850000007A    	  6397:                 cmpi.l #$0000007A,d5
01:000039DE 66FE            	  6398:                 bne.s *
                            	  6399: 
                            	  6400: *        LONG RIGHT
01:000039E0 203C80018FF1    	  6401:                 move.l #$80018FF1,d0
01:000039E6 E280            	  6402:                 asr.l #1,d0
01:000039E8 6100FE4E        	  6403:                 bsr SHIFTS_FLAGS
01:000039EC EA80            	  6404:                 asr.l #5,d0
01:000039EE 6100FE48        	  6405:                 bsr SHIFTS_FLAGS
01:000039F2 EE80            	  6406:                 asr.l #7,d0
01:000039F4 6100FE42        	  6407:                 bsr SHIFTS_FLAGS
01:000039F8 E080            	  6408:                 asr.l #8,d0
01:000039FA 6100FE3C        	  6409:                 bsr SHIFTS_FLAGS
01:000039FE 0C80FFFFFC00    	  6410:                 cmpi.l #$FFFFFC00,d0
01:00003A04 66FE            	  6411:                 bne.s *
01:00003A06 0C850000009C    	  6412:                 cmpi.l #$0000009C,d5
01:00003A0C 66FE            	  6413:                 bne.s *
                            	  6414: 
                            	  6415: 
                            	  6416: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6417: 
01:00003A0E 7A00            	  6418:                 moveq  #$00000000,d5
01:00003A10 307C0100        	  6419:                 move.l #$00000100,a0
01:00003A14 30BC8FF1        	  6420:                 move.w #$8FF1,(a0)
                            	  6421: 
                            	  6422: *        WORD LEFT
01:00003A18 E1D0            	  6423:                 asl  (a0)
01:00003A1A 6100FE1C        	  6424:                 bsr SHIFTS_FLAGS
01:00003A1E E1D0            	  6425:                 asl  (a0)
01:00003A20 6100FE16        	  6426:                 bsr SHIFTS_FLAGS
01:00003A24 E1D0            	  6427:                 asl  (a0)
01:00003A26 6100FE10        	  6428:                 bsr SHIFTS_FLAGS
01:00003A2A E1D0            	  6429:                 asl  (a0)
01:00003A2C 6100FE0A        	  6430:                 bsr SHIFTS_FLAGS
01:00003A30 3010            	  6431:                 move.w (a0),d0
01:00003A32 0C80FFFFFF10    	  6432:                 cmpi.l #$FFFFFF10,d0
01:00003A38 66FE            	  6433:                 bne.s *
01:00003A3A 0C850000000D    	  6434:                 cmpi.l #$0000000D,d5
01:00003A40 66FE            	  6435:                 bne.s *
                            	  6436: 
                            	  6437: *        WORD RIGHT
01:00003A42 E0D0            	  6438:                 asr (a0)
01:00003A44 6100FDF2        	  6439:                 bsr SHIFTS_FLAGS
01:00003A48 E0D0            	  6440:                 asr (a0)
01:00003A4A 6100FDEC        	  6441:                 bsr SHIFTS_FLAGS
01:00003A4E E0D0            	  6442:                 asr (a0)
01:00003A50 6100FDE6        	  6443:                 bsr SHIFTS_FLAGS
01:00003A54 E0D0            	  6444:                 asr (a0)
01:00003A56 6100FDE0        	  6445:                 bsr SHIFTS_FLAGS
01:00003A5A E0D0            	  6446:                 asr (a0)
01:00003A5C 6100FDDA        	  6447:                 bsr SHIFTS_FLAGS
01:00003A60 E0D0            	  6448:                 asr (a0)
01:00003A62 6100FDD4        	  6449:                 bsr SHIFTS_FLAGS
01:00003A66 3010            	  6450:                 move.w (a0),d0
01:00003A68 0C80FFFFFFFC    	  6451:                 cmpi.l #$FFFFFFFC,d0
01:00003A6E 66FE            	  6452:                 bne.s *
01:00003A70 0C850000003E    	  6453:                 cmpi.l #$0000003E,d5
01:00003A76 66FE            	  6454:                 bne.s *
                            	  6455: 
01:00003A78 4E75            	  6456:                 rts
                            	  6457: 
                            	  6458: 
                            	  6459: 
                            	  6460: *-----------------------------------------------------------
                            	  6461: *-----------------------------------------------------------
                            	  6462: * OPCODE : SHIFTS2
                            	  6463: *-----------------------------------------------------------
                            	  6464: *-----------------------------------------------------------
                            	  6465: 
                            	  6466: *     Subroutine to check and accumulate the flags
01:00003A7A 40C3            	  6467: SHIFTS2_FLAGS:  move.w sr,d3
01:00003A7C 02830000000F    	  6468:                 andi.l #$0F,d3            * Isolate flags
01:00003A82 DA83            	  6469:                 add.l d3,d5               * Copy flag results into accumulator
01:00003A84 4E75            	  6470:                 rts
                            	  6471: 
                            	  6472: op_SHIFTS2:
                            	  6473: 
                            	  6474: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6475: 
                            	  6476: *        BYTE LEFT
01:00003A86 203C80018F81    	  6477:                 move.l #$80018F81,d0
01:00003A8C 7A00            	  6478:                 moveq  #$00000000,d5
01:00003A8E 7C02            	  6479:                 moveq  #$00000002,d6
                            	  6480: SHIFTS2_LOOP1:
01:00003A90 ED28            	  6481:                 lsl.b d6,d0
01:00003A92 61E6            	  6482:                 bsr SHIFTS2_FLAGS
01:00003A94 51CEFFFA        	  6483:                 dbf d6,SHIFTS2_LOOP1
01:00003A98 0C8080018F08    	  6484:                 cmpi.l #$80018F08,d0
01:00003A9E 66FE            	  6485:                 bne.s *
01:00003AA0 4A85            	  6486:                 cmpi.l #$00000000,d5
01:00003AA2 66FE            	  6487:                 bne.s *
                            	  6488: 
                            	  6489: *        BYTE RIGHT
01:00003AA4 203C80018F81    	  6490:                 move.l #$80018F81,d0
01:00003AAA 7C02            	  6491:                 moveq  #$00000002,d6
                            	  6492: SHIFTS2_LOOP2:
01:00003AAC EC28            	  6493:                 lsr.b d6,d0
01:00003AAE 61CA            	  6494:                 bsr SHIFTS2_FLAGS
01:00003AB0 51CEFFFA        	  6495:                 dbf d6,SHIFTS2_LOOP2
01:00003AB4 0C8080018F10    	  6496:                 cmpi.l #$80018F10,d0
01:00003ABA 66FE            	  6497:                 bne.s *
01:00003ABC 4A85            	  6498:                 cmpi.l #$00000000,d5
01:00003ABE 66FE            	  6499:                 bne.s *
                            	  6500: 
                            	  6501: 
                            	  6502: *        WORD LEFT
01:00003AC0 203C80018FF1    	  6503:                 move.l #$80018FF1,d0
01:00003AC6 7C02            	  6504:                 moveq  #$00000002,d6
                            	  6505: SHIFTS2_LOOP3:
01:00003AC8 ED68            	  6506:                 lsl.w d6,d0
01:00003ACA 61AE            	  6507:                 bsr SHIFTS2_FLAGS
01:00003ACC 51CEFFFA        	  6508:                 dbf d6,SHIFTS2_LOOP3
01:00003AD0 0C8080017F88    	  6509:                 cmpi.l #$80017F88,d0
01:00003AD6 66FE            	  6510:                 bne.s *
01:00003AD8 4A85            	  6511:                 cmpi.l #$00000000,d5
01:00003ADA 66FE            	  6512:                 bne.s *
                            	  6513: 
                            	  6514: *        WORD RIGHT
01:00003ADC 203C80018FF1    	  6515:                 move.l #$80018FF1,d0
01:00003AE2 7C02            	  6516:                 moveq  #$00000002,d6
                            	  6517: SHIFTS2_LOOP4:
01:00003AE4 EC68            	  6518:                 lsr.w d6,d0
01:00003AE6 6192            	  6519:                 bsr SHIFTS2_FLAGS
01:00003AE8 51CEFFFA        	  6520:                 dbf d6,SHIFTS2_LOOP4
01:00003AEC 0C80800111FE    	  6521:                 cmpi.l #$800111FE,d0
01:00003AF2 66FE            	  6522:                 bne.s *
01:00003AF4 4A85            	  6523:                 cmpi.l #$00000000,d5
01:00003AF6 66FE            	  6524:                 bne.s *
                            	  6525: 
                            	  6526: 
                            	  6527: *        LONG LEFT
01:00003AF8 203C80018FF1    	  6528:                 move.l #$80018FF1,d0
01:00003AFE 7C02            	  6529:                 moveq  #$00000002,d6
                            	  6530: SHIFTS2_LOOP5:
01:00003B00 EDA8            	  6531:                 lsl.l d6,d0
01:00003B02 6100FF76        	  6532:                 bsr SHIFTS2_FLAGS
01:00003B06 51CEFFF8        	  6533:                 dbf d6,SHIFTS2_LOOP5
01:00003B0A 0C80000C7F88    	  6534:                 cmpi.l #$000C7F88,d0
01:00003B10 66FE            	  6535:                 bne.s *
01:00003B12 4A85            	  6536:                 cmpi.l #$00000000,d5
01:00003B14 66FE            	  6537:                 bne.s *
                            	  6538: 
                            	  6539: *        LONG RIGHT
01:00003B16 203C80018FF1    	  6540:                 move.l #$80018FF1,d0
01:00003B1C 7C02            	  6541:                 moveq  #$00000002,d6
                            	  6542: SHIFTS2_LOOP6:
01:00003B1E ECA8            	  6543:                 lsr.l d6,d0
01:00003B20 6100FF58        	  6544:                 bsr SHIFTS2_FLAGS
01:00003B24 51CEFFF8        	  6545:                 dbf d6,SHIFTS2_LOOP6
01:00003B28 0C80100031FE    	  6546:                 cmpi.l #$100031FE,d0
01:00003B2E 66FE            	  6547:                 bne.s *
01:00003B30 4A85            	  6548:                 cmpi.l #$00000000,d5
01:00003B32 66FE            	  6549:                 bne.s *
                            	  6550: 
                            	  6551: 
                            	  6552: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6553: 
01:00003B34 203C80018FF1    	  6554:                 move.l #$80018FF1,d0
01:00003B3A 7A00            	  6555:                 moveq  #$00000000,d5
                            	  6556: 
                            	  6557: *        BYTE LEFT
01:00003B3C E308            	  6558:                 lsl.b #1,d0
01:00003B3E 6100FF3A        	  6559:                 bsr SHIFTS2_FLAGS
01:00003B42 E508            	  6560:                 lsl.b #2,d0
01:00003B44 6100FF34        	  6561:                 bsr SHIFTS2_FLAGS
01:00003B48 E308            	  6562:                 lsl.b #1,d0
01:00003B4A 6100FF2E        	  6563:                 bsr SHIFTS2_FLAGS
01:00003B4E E708            	  6564:                 lsl.b #3,d0
01:00003B50 6100FF28        	  6565:                 bsr SHIFTS2_FLAGS
01:00003B54 0C8080018F80    	  6566:                 cmpi.l #$80018F80,d0
01:00003B5A 66FE            	  6567:                 bne.s *
01:00003B5C 0C850000001B    	  6568:                 cmpi.l #$0000001B,d5
01:00003B62 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        BYTE RIGHT
01:00003B64 E208            	  6572:                 lsr.b #1,d0
01:00003B66 6100FF12        	  6573:                 bsr SHIFTS2_FLAGS
01:00003B6A E408            	  6574:                 lsr.b #2,d0
01:00003B6C 6100FF0C        	  6575:                 bsr SHIFTS2_FLAGS
01:00003B70 E608            	  6576:                 lsr.b #3,d0
01:00003B72 6100FF06        	  6577:                 bsr SHIFTS2_FLAGS
01:00003B76 E208            	  6578:                 lsr.b #1,d0
01:00003B78 6100FF00        	  6579:                 bsr SHIFTS2_FLAGS
01:00003B7C 0C8080018F01    	  6580:                 cmpi.l #$80018F01,d0
01:00003B82 66FE            	  6581:                 bne.s *
01:00003B84 0C850000001B    	  6582:                 cmpi.l #$0000001B,d5
01:00003B8A 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        WORD LEFT
01:00003B8C E348            	  6586:                 lsl.w #1,d0
01:00003B8E 6100FEEA        	  6587:                 bsr SHIFTS2_FLAGS
01:00003B92 E548            	  6588:                 lsl.w #2,d0
01:00003B94 6100FEE4        	  6589:                 bsr SHIFTS2_FLAGS
01:00003B98 E748            	  6590:                 lsl.w #3,d0
01:00003B9A 6100FEDE        	  6591:                 bsr SHIFTS2_FLAGS
01:00003B9E EB48            	  6592:                 lsl.w #5,d0
01:00003BA0 6100FED8        	  6593:                 bsr SHIFTS2_FLAGS
01:00003BA4 0C8080010800    	  6594:                 cmpi.l #$80010800,d0
01:00003BAA 66FE            	  6595:                 bne.s *
01:00003BAC 0C8500000025    	  6596:                 cmpi.l #$00000025,d5
01:00003BB2 66FE            	  6597:                 bne.s *
                            	  6598: 
                            	  6599: *        WORD RIGHT
01:00003BB4 EA48            	  6600:                 lsr.w #5,d0
01:00003BB6 6100FEC2        	  6601:                 bsr SHIFTS2_FLAGS
01:00003BBA E248            	  6602:                 lsr.w #1,d0
01:00003BBC 6100FEBC        	  6603:                 bsr SHIFTS2_FLAGS
01:00003BC0 E448            	  6604:                 lsr.w #2,d0
01:00003BC2 6100FEB6        	  6605:                 bsr SHIFTS2_FLAGS
01:00003BC6 E848            	  6606:                 lsr.w #4,d0
01:00003BC8 6100FEB0        	  6607:                 bsr SHIFTS2_FLAGS
01:00003BCC 0C8080010000    	  6608:                 cmpi.l #$80010000,d0
01:00003BD2 66FE            	  6609:                 bne.s *
01:00003BD4 0C850000002A    	  6610:                 cmpi.l #$0000002A,d5
01:00003BDA 66FE            	  6611:                 bne.s *
                            	  6612: 
                            	  6613: *        LONG LEFT
01:00003BDC 203C80018FF1    	  6614:                 move.l #$80018FF1,d0
01:00003BE2 E388            	  6615:                 lsl.l #1,d0
01:00003BE4 6100FE94        	  6616:                 bsr SHIFTS2_FLAGS
01:00003BE8 E588            	  6617:                 lsl.l #2,d0
01:00003BEA 6100FE8E        	  6618:                 bsr SHIFTS2_FLAGS
01:00003BEE EF88            	  6619:                 lsl.l #7,d0
01:00003BF0 6100FE88        	  6620:                 bsr SHIFTS2_FLAGS
01:00003BF4 E988            	  6621:                 lsl.l #4,d0
01:00003BF6 6100FE82        	  6622:                 bsr SHIFTS2_FLAGS
01:00003BFA 0C8063FC4000    	  6623:                 cmpi.l #$63FC4000,d0
01:00003C00 66FE            	  6624:                 bne.s *
01:00003C02 0C850000002B    	  6625:                 cmpi.l #$0000002B,d5
01:00003C08 66FE            	  6626:                 bne.s *
                            	  6627: 
                            	  6628: *        LONG RIGHT
01:00003C0A 203C80018FF1    	  6629:                 move.l #$80018FF1,d0
01:00003C10 E288            	  6630:                 lsr.l #1,d0
01:00003C12 6100FE66        	  6631:                 bsr SHIFTS2_FLAGS
01:00003C16 EA88            	  6632:                 lsr.l #5,d0
01:00003C18 6100FE60        	  6633:                 bsr SHIFTS2_FLAGS
01:00003C1C EE88            	  6634:                 lsr.l #7,d0
01:00003C1E 6100FE5A        	  6635:                 bsr SHIFTS2_FLAGS
01:00003C22 E088            	  6636:                 lsr.l #8,d0
01:00003C24 6100FE54        	  6637:                 bsr SHIFTS2_FLAGS
01:00003C28 0C8000000400    	  6638:                 cmpi.l #$00000400,d0
01:00003C2E 66FE            	  6639:                 bne.s *
01:00003C30 0C850000002D    	  6640:                 cmpi.l #$0000002D,d5
01:00003C36 66FE            	  6641:                 bne.s *
                            	  6642: 
                            	  6643: 
                            	  6644: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6645: 
01:00003C38 7A00            	  6646:                 moveq  #$00000000,d5
01:00003C3A 307C0100        	  6647:                 move.l #$00000100,a0
01:00003C3E 30BC8FF1        	  6648:                 move.w #$8FF1,(a0)
                            	  6649: 
                            	  6650: *        WORD LEFT
01:00003C42 E3D0            	  6651:                 lsl  (a0)
01:00003C44 6100FE34        	  6652:                 bsr SHIFTS2_FLAGS
01:00003C48 E3D0            	  6653:                 lsl  (a0)
01:00003C4A 6100FE2E        	  6654:                 bsr SHIFTS2_FLAGS
01:00003C4E E3D0            	  6655:                 lsl  (a0)
01:00003C50 6100FE28        	  6656:                 bsr SHIFTS2_FLAGS
01:00003C54 E3D0            	  6657:                 lsl  (a0)
01:00003C56 6100FE22        	  6658:                 bsr SHIFTS2_FLAGS
01:00003C5A 3010            	  6659:                 move.w (a0),d0
01:00003C5C 0C800000FF10    	  6660:                 cmpi.l #$0000FF10,d0
01:00003C62 66FE            	  6661:                 bne.s *
01:00003C64 0C8500000009    	  6662:                 cmpi.l #$00000009,d5
01:00003C6A 66FE            	  6663:                 bne.s *
                            	  6664: 
                            	  6665: *        WORD RIGHT
01:00003C6C E2D0            	  6666:                 lsr (a0)
01:00003C6E 6100FE0A        	  6667:                 bsr SHIFTS2_FLAGS
01:00003C72 E2D0            	  6668:                 lsr (a0)
01:00003C74 6100FE04        	  6669:                 bsr SHIFTS2_FLAGS
01:00003C78 E2D0            	  6670:                 lsr (a0)
01:00003C7A 6100FDFE        	  6671:                 bsr SHIFTS2_FLAGS
01:00003C7E E2D0            	  6672:                 lsr (a0)
01:00003C80 6100FDF8        	  6673:                 bsr SHIFTS2_FLAGS
01:00003C84 E2D0            	  6674:                 lsr (a0)
01:00003C86 6100FDF2        	  6675:                 bsr SHIFTS2_FLAGS
01:00003C8A E2D0            	  6676:                 lsr (a0)
01:00003C8C 6100FDEC        	  6677:                 bsr SHIFTS2_FLAGS
01:00003C90 3010            	  6678:                 move.w (a0),d0
01:00003C92 0C80000003FC    	  6679:                 cmpi.l #$000003FC,d0
01:00003C98 66FE            	  6680:                 bne.s *
01:00003C9A 0C850000000A    	  6681:                 cmpi.l #$0000000A,d5
01:00003CA0 66FE            	  6682:                 bne.s *
                            	  6683: 
01:00003CA2 4E75            	  6684:                 rts
                            	  6685: 
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ; OPCODE : BSR / RTS
                            	  6689: ;-----------------------------------------------------------
                            	  6690: ;-----------------------------------------------------------
                            	  6691: 
                            	  6692: ;t3_bsr:
                            	  6693: ;	moveq	#3,d3
                            	  6694: ;	rts
                            	  6695: 
                            	  6696: ;t1_bsr:
                            	  6697: ;	moveq	#1,d1
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;op_bsr:
                            	  6701: ;	bsr			t1_bsr
                            	  6702: ;	bsr			t2_bsr
                            	  6703: ;	bsr.w		t3_bsr
                            	  6704: ;	bsr.w		t4_bsr
                            	  6705: ;	cmpi.l	#1,d1
                            	  6706: ;	bne			*
                            	  6707: ;	cmpi.l	#2,d2
                            	  6708: ;	bne			*
                            	  6709: ;	cmpi.l	#3,d3
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#4,d4
                            	  6712: ;	bne			*
                            	  6713: ;	rts
                            	  6714: 
                            	  6715: ;t2_bsr:
                            	  6716: ;	moveq	#2,d2
                            	  6717: ;	rts
                            	  6718: 	
                            	  6719: ;t4_bsr:
                            	  6720: ;	moveq	#4,d4
                            	  6721: ;	rts
                            	  6722: 

Source: "boot.asm"
                            	   431: 
                            	   432: ; -----------------------------------------------------------------------------
                            	   433: ; Gets the screen color in d0 and d1.
                            	   434: ; -----------------------------------------------------------------------------
                            	   435: 
                            	   436: get_screen_color:
01:00003CA4 203900000400    	   437: 	move.l	fgcolor,d0			; get foreground color
01:00003CAA EB80            	   438: 	asl.l		#5,d0						; shift into position
01:00003CAC 008040000000    	   439: 	ori.l		#$40000000,d0		; set priority
01:00003CB2 223900000404    	   440: 	move.l	bkcolor,d1
01:00003CB8 E089            	   441: 	lsr.l		#8,d1
01:00003CBA E089            	   442: 	lsr.l		#8,d1
01:00003CBC 02810000001F    	   443: 	andi.l	#31,d1					; mask off extra bits
01:00003CC2 8081            	   444: 	or.l		d1,d0						; set background color bits in upper long word
01:00003CC4 223900000404    	   445: 	move.l	bkcolor,d1			; get background color
01:00003CCA E181            	   446: 	asl.l		#8,d1						; shift into position for display ram
01:00003CCC E181            	   447: 	asl.l		#8,d1
01:00003CCE 4E75            	   448: 	rts
                            	   449: 
                            	   450: ; -----------------------------------------------------------------------------
                            	   451: ; -----------------------------------------------------------------------------
                            	   452: 
                            	   453: get_screen_address:
01:00003CD0 2F00            	   454: 	move.l	d0,-(a7)
01:00003CD2 207900000410    	   455: 	move.l	TextScr,a0
01:00003CD8 4E7A0FE0        	   456: 	movec.l	coreno,d0
01:00003CDC 08000000        	   457: 	btst		#0,d0
01:00003CE0 6704            	   458: 	beq.s		.0001
01:00003CE2 41E84000        	   459: 	lea			$4000(a0),a0
                            	   460: .0001:
01:00003CE6 201F            	   461: 	move.l	(a7)+,d0
01:00003CE8 4E75            	   462: 	rts
                            	   463: 	
                            	   464: ; -----------------------------------------------------------------------------
                            	   465: ; -----------------------------------------------------------------------------
                            	   466: 
                            	   467: clear_screen:
01:00003CEA 61E4            	   468: 	bsr			get_screen_address	; a0 = pointer to screen area
01:00003CEC 10390000040A    	   469: 	move.b	TextRows,d0					; d0 = rows
01:00003CF2 14390000040B    	   470: 	move.b	TextCols,d2					; d2 = cols
01:00003CF8 4880            	   471: 	ext.w		d0									; convert to word
01:00003CFA 4882            	   472: 	ext.w		d2									; convert to word
01:00003CFC C4C0            	   473: 	mulu		d0,d2								; d2 = number of character cells to clear
01:00003CFE 61A4            	   474: 	bsr			get_screen_color		; get the color bits
01:00003D00 00410020        	   475: 	ori.w		#32,d1							; load space character
01:00003D04 E159            	   476: 	rol.w		#8,d1								; swap endian, text controller expects little endian
01:00003D06 4841            	   477: 	swap		d1
01:00003D08 E159            	   478: 	rol.w		#8,d1
01:00003D0A E158            	   479: 	rol.w		#8,d0								; swap endian
01:00003D0C 4840            	   480: 	swap		d0
01:00003D0E E158            	   481: 	rol.w		#8,d0
                            	   482: loop3:
01:00003D10 20C1            	   483: 	move.l	d1,(a0)+						; copy char plus bkcolor to cell
01:00003D12 4E71            	   484: 	nop	
01:00003D14 4E71            	   485: 	nop
01:00003D16 4E71            	   486: 	nop	
01:00003D18 4E71            	   487: 	nop
01:00003D1A 20C0            	   488: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003D1C 4E71            	   489: 	nop
01:00003D1E 4E71            	   490: 	nop
01:00003D20 4E71            	   491: 	nop	
01:00003D22 4E71            	   492: 	nop
01:00003D24 51CAFFEA        	   493: 	dbra		d2,loop3
01:00003D28 4E75            	   494: 	rts
                            	   495: 
                            	   496: CRLF:
01:00003D2A 2F01            	   497: 	move.l	d1,-(a7)
01:00003D2C 123C000D        	   498: 	move.b	#13,d1
01:00003D30 6140            	   499: 	bsr			DisplayChar
01:00003D32 123C000A        	   500: 	move.b	#10,d1
01:00003D36 613A            	   501: 	bsr			DisplayChar
01:00003D38 221F            	   502: 	move.l	(a7)+,d1
01:00003D3A 4E75            	   503: 	rts
                            	   504: 
                            	   505: ;------------------------------------------------------------------------------
                            	   506: ;------------------------------------------------------------------------------
                            	   507: 
                            	   508: UpdateTextPos:
01:00003D3C 103900000408    	   509: 	move.b	CursorRow,d0		; compute screen location
01:00003D42 0240007F        	   510: 	andi.w	#$7f,d0
01:00003D46 14390000040B    	   511: 	move.b	TextCols,d2
01:00003D4C 4882            	   512: 	ext.w		d2
01:00003D4E C0C2            	   513: 	mulu.w	d2,d0
01:00003D50 143900000409    	   514: 	move.b	CursorCol,d2
01:00003D56 024200FF        	   515: 	andi.w	#$ff,d2
01:00003D5A D042            	   516: 	add.w		d2,d0
01:00003D5C 33C00000040C    	   517: 	move.w	d0,TextPos			; save cursor pos
01:00003D62 4E75            	   518: 	rts
                            	   519: 
                            	   520: ;------------------------------------------------------------------------------
                            	   521: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   522: ; Destroys d0,d2,a0
                            	   523: ;------------------------------------------------------------------------------
                            	   524: 
                            	   525: CalcScreenLoc:
01:00003D64 61D6            	   526: 	bsr			UpdateTextPos
01:00003D66 48C0            	   527: 	ext.l		d0								* make it into a long
01:00003D68 E780            	   528: 	asl.l		#3,d0							* 8 bytes per char
01:00003D6A 6100FF64        	   529: 	bsr			get_screen_address
01:00003D6E D1C0            	   530: 	add.l		d0,a0							* a0 = screen location
01:00003D70 4E75            	   531: 	rts
                            	   532: 
                            	   533: ;------------------------------------------------------------------------------
                            	   534: ; Display a character on the screen
                            	   535: ; d1.b = char to display
                            	   536: ;------------------------------------------------------------------------------
                            	   537: 
                            	   538: DisplayChar:
01:00003D72 48E77000        	   539: 	movem.l	d1/d2/d3,-(a7)
01:00003D76 0281000000FF    	   540: 	andi.l	#$ff,d1				; zero out upper bytes of d1
01:00003D7C 0C01000D        	   541: 	cmpi.b	#13,d1				; carriage return ?
01:00003D80 6610            	   542: 	bne.s		dccr
01:00003D82 423900000409    	   543: 	clr.b		CursorCol			; just set cursor column to zero on a CR
01:00003D88 61000254        	   544: 	bsr			SyncCursor		; set position in text controller
01:00003D8C 4CDF000E        	   545: 	movem.l	(a7)+,d1/d2/d3
01:00003D90 4E75            	   546: 	rts
                            	   547: dccr:
01:00003D92 0C010091        	   548: 	cmpi.b	#$91,d1			; cursor right ?
01:00003D96 6620            	   549: 	bne.s   dcx6
01:00003D98 14390000040B    	   550: 	move.b	TextCols,d2
01:00003D9E 5302            	   551: 	sub.b		#1,d2
01:00003DA0 943900000409    	   552: 	sub.b		CursorCol,d2
01:00003DA6 670A            	   553: 	beq.s		dcx7
01:00003DA8 523900000409    	   554: 	addi.b	#1,CursorCol
                            	   555: dcx14:
01:00003DAE 6100022E        	   556: 	bsr		SyncCursor
                            	   557: dcx7:
01:00003DB2 4CDF000E        	   558: 	movem.l	(a7)+,d1/d2/d3
01:00003DB6 4E75            	   559: 	rts
                            	   560: dcx6:
01:00003DB8 0C010090        	   561: 	cmpi.b	#$90,d1			; cursor up ?
01:00003DBC 6610            	   562: 	bne.s	dcx8
01:00003DBE 4A3900000408    	   563: 	cmpi.b	#0,CursorRow
01:00003DC4 67EC            	   564: 	beq.s	dcx7
01:00003DC6 533900000408    	   565: 	subi.b	#1,CursorRow
01:00003DCC 60E0            	   566: 	bra.s	dcx14
                            	   567: dcx8:
01:00003DCE 0C010093        	   568: 	cmpi.b	#$93,d1			; cursor left?
01:00003DD2 6610            	   569: 	bne.s	dcx9
01:00003DD4 4A3900000409    	   570: 	cmpi.b	#0,CursorCol
01:00003DDA 67D6            	   571: 	beq.s	dcx7
01:00003DDC 533900000409    	   572: 	subi.b	#1,CursorCol
01:00003DE2 60CA            	   573: 	bra.s	dcx14
                            	   574: dcx9:
01:00003DE4 0C010092        	   575: 	cmpi.b	#$92,d1			; cursor down ?
01:00003DE8 6618            	   576: 	bne.s	dcx10
01:00003DEA 14390000040A    	   577: 	move.b	TextRows,d2
01:00003DF0 5302            	   578: 	sub.b	#1,d2
01:00003DF2 B43900000408    	   579: 	cmp.b	CursorRow,d2
01:00003DF8 67B8            	   580: 	beq.s	dcx7
01:00003DFA 523900000408    	   581: 	addi.b	#1,CursorRow
01:00003E00 60AC            	   582: 	bra.s	dcx14
                            	   583: dcx10:
01:00003E02 0C010094        	   584: 	cmpi.b	#$94,d1			; cursor home ?
01:00003E06 6618            	   585: 	bne.s	dcx11
01:00003E08 4A3900000409    	   586: 	cmpi.b	#0,CursorCol
01:00003E0E 6708            	   587: 	beq.s	dcx12
01:00003E10 423900000409    	   588: 	clr.b	CursorCol
01:00003E16 6096            	   589: 	bra.s	dcx14
                            	   590: dcx12:
01:00003E18 423900000408    	   591: 	clr.b	CursorRow
01:00003E1E 608E            	   592: 	bra.s	dcx14
                            	   593: dcx11:
01:00003E20 48E7E080        	   594: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003E24 0C010099        	   595: 	cmpi.b	#$99,d1			; delete ?
01:00003E28 675C            	   596: 	beq.s		doDelete
01:00003E2A 0C010008        	   597: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003E2E 6748            	   598: 	beq.s   doBackspace
01:00003E30 0C010018        	   599: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003E34 6700008C        	   600: 	beq			doCtrlX
01:00003E38 0C01000A        	   601: 	cmpi.b	#10,d1		; linefeed ?
01:00003E3C 6728            	   602: 	beq.s		dclf
                            	   603: 
                            	   604: 	; regular char
01:00003E3E 6100FF24        	   605: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003E42 2401            	   606: 	move.l	d1,d2					; d2 = char
01:00003E44 6100FE5E        	   607: 	bsr			get_screen_color	; d0,d1 = color
01:00003E48 8282            	   608: 	or.l		d2,d1					; d1 = char + color
01:00003E4A E159            	   609: 	rol.w		#8,d1					; text controller expects little endian data
01:00003E4C 4841            	   610: 	swap		d1
01:00003E4E E159            	   611: 	rol.w		#8,d1
01:00003E50 2081            	   612: 	move.l	d1,(a0)
01:00003E52 E158            	   613: 	rol.w		#8,d0					; swap bytes
01:00003E54 4840            	   614: 	swap		d0						; swap halfs
01:00003E56 E158            	   615: 	rol.w		#8,d0					; swap remaining bytes
01:00003E58 21400004        	   616: 	move.l	d0,4(a0)
01:00003E5C 61000088        	   617: 	bsr			IncCursorPos
01:00003E60 6100017C        	   618: 	bsr			SyncCursor
01:00003E64 6008            	   619: 	bra			dcx4
                            	   620: dclf:
01:00003E66 6100009E        	   621: 	bsr			IncCursorRow
                            	   622: dcx16:
01:00003E6A 61000172        	   623: 	bsr			SyncCursor
                            	   624: dcx4:
01:00003E6E 4CDF0107        	   625: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003E72 4CDF000E        	   626: 	movem.l	(a7)+,d1/d2/d3
01:00003E76 4E75            	   627: 	rts
                            	   628: 
                            	   629: 	;---------------------------
                            	   630: 	; CTRL-H: backspace
                            	   631: 	;---------------------------
                            	   632: doBackspace:
01:00003E78 4A3900000409    	   633: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003E7E 67EE            	   634: 	beq.s   dcx4						; nothing to do
01:00003E80 533900000409    	   635: 	subi.b	#1,CursorCol		; decrement column
                            	   636: 
                            	   637: 	;---------------------------
                            	   638: 	; Delete key
                            	   639: 	;---------------------------
                            	   640: doDelete:
01:00003E86 48E7C080        	   641: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003E8A 6100FED8        	   642: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003E8E 103900000409    	   643: 	move.b	CursorCol,d0
                            	   644: .0001:
01:00003E94 20A80008        	   645: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003E98 2168000C0004    	   646: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003E9E 5088            	   647: 	lea			8(a0),a0
01:00003EA0 5200            	   648: 	addi.b	#1,d0
01:00003EA2 B0390000040B    	   649: 	cmp.b		TextCols,d0
01:00003EA8 65EA            	   650: 	blo.s		.0001
01:00003EAA 6100FDF8        	   651: 	bsr			get_screen_color
01:00003EAE 323C0020        	   652: 	move.w	#' ',d1				; terminate line with a space
01:00003EB2 E159            	   653: 	rol.w		#8,d1
01:00003EB4 4841            	   654: 	swap		d1
01:00003EB6 E159            	   655: 	rol.w		#8,d1
01:00003EB8 2141FFF8        	   656: 	move.l	d1,-8(a0)
01:00003EBC 4CDF0103        	   657: 	movem.l	(a7)+,d0/d1/a0
01:00003EC0 60A8            	   658: 	bra.s		dcx16				; finished
                            	   659: 
                            	   660: 	;---------------------------
                            	   661: 	; CTRL-X: erase line
                            	   662: 	;---------------------------
                            	   663: doCtrlX:
01:00003EC2 423900000409    	   664: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003EC8 10390000040B    	   665: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003ECE 4880            	   666: 	ext.w		d0
01:00003ED0 48C0            	   667: 	ext.l		d0
01:00003ED2 123C0020        	   668: 	move.b	#' ',d1				; d1 = space char
                            	   669: .0001:
                            	   670: 	; DisplayChar is called recursively here
                            	   671: 	; It's safe to do because we know it won't recurse again due to the
                            	   672: 	; fact we know the character being displayed is a space char
01:00003ED6 6100FE9A        	   673: 	bsr		DisplayChar			
01:00003EDA 5340            	   674: 	subq	#1,d0
01:00003EDC 66F8            	   675: 	bne.s	.0001
01:00003EDE 423900000409    	   676: 	clr.b	CursorCol			; now really go back to start of line
01:00003EE4 6084            	   677: 	bra.s	dcx16				; we're done
                            	   678: 
                            	   679: ;------------------------------------------------------------------------------
                            	   680: ; Increment the cursor position, scroll the screen if needed.
                            	   681: ;------------------------------------------------------------------------------
                            	   682: 
                            	   683: IncCursorPos:
01:00003EE6 52790000040C    	   684: 	addi.w	#1,TextCurpos
01:00003EEC 523900000409    	   685: 	addi.b	#1,CursorCol
01:00003EF2 10390000040B    	   686: 	move.b	TextCols,d0
01:00003EF8 B03900000409    	   687: 	cmp.b		CursorCol,d0
01:00003EFE 6438            	   688: 	bhs.s		icc1
01:00003F00 423900000409    	   689: 	clr.b		CursorCol
                            	   690: IncCursorRow:
01:00003F06 523900000408    	   691: 	addi.b	#1,CursorRow
01:00003F0C 10390000040A    	   692: 	move.b	TextRows,d0
01:00003F12 B03900000408    	   693: 	cmp.b		CursorRow,d0
01:00003F18 621E            	   694: 	bhi.s		icc1
01:00003F1A 10390000040A    	   695: 	move.b	TextRows,d0
01:00003F20 13C000000408    	   696: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003F26 533900000408    	   697: 	subi.b	#1,CursorRow
01:00003F2C 4880            	   698: 	ext.w		d0
01:00003F2E D040            	   699: 	asl.w		#1,d0
01:00003F30 91790000040C    	   700: 	sub.w		d0,TextCurpos
01:00003F36 6102            	   701: 	bsr			ScrollUp
                            	   702: icc1:
01:00003F38 4E75            	   703: 	rts
                            	   704: 
                            	   705: ;------------------------------------------------------------------------------
                            	   706: ; Scroll screen up.
                            	   707: ;------------------------------------------------------------------------------
                            	   708: 
                            	   709: ScrollUp:
01:00003F3A 48E7C084        	   710: 	movem.l	d0/d1/a0/a5,-(a7)		* save off some regs
01:00003F3E 6100FD90        	   711: 	bsr			get_screen_address
01:00003F42 2A48            	   712: 	move.l	a0,a5								* a5 = pointer to text screen
                            	   713: .0003:								
01:00003F44 10390000040B    	   714: 	move.b	TextCols,d0					* d0 = columns
01:00003F4A 12390000040A    	   715: 	move.b	TextRows,d1					* d1 = rows
01:00003F50 4880            	   716: 	ext.w		d0									* make cols into a word value
01:00003F52 4881            	   717: 	ext.w		d1									* make rows into a word value
01:00003F54 E740            	   718: 	asl.w		#3,d0								* make into cell index
01:00003F56 41F50000        	   719: 	lea			0(a5,d0.w),a0				* a0 = pointer to second row of text screen
01:00003F5A E648            	   720: 	lsr.w		#3,d0								* get back d0
01:00003F5C 5341            	   721: 	subq		#1,d1								* number of rows-1
01:00003F5E C0C1            	   722: 	mulu		d1,d0								* d0 = count of characters to move
                            	   723: .0001:
01:00003F60 2AD8            	   724: 	move.l	(a0)+,(a5)+					* each char is 64 bits
01:00003F62 2AD8            	   725: 	move.l	(a0)+,(a5)+	
01:00003F64 51C8FFFA        	   726: 	dbra		d0,.0001
01:00003F68 4CDF2103        	   727: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   728: 	* Fall through into blanking out last line
                            	   729: 
                            	   730: ;------------------------------------------------------------------------------
                            	   731: ; Blank out the last line on the screen.
                            	   732: ;------------------------------------------------------------------------------
                            	   733: 
                            	   734: BlankLastLine:
01:00003F6C 48E7E080        	   735: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003F70 6100FD5E        	   736: 	bsr			get_screen_address
01:00003F74 10390000040A    	   737: 	move.b	TextRows,d0					; d0 = columns
01:00003F7A 12390000040B    	   738: 	move.b	TextCols,d1					; d1 = rows
01:00003F80 4880            	   739: 	ext.w		d0
01:00003F82 4881            	   740: 	ext.w		d1
01:00003F84 5341            	   741: 	subq		#1,d1								; last row = #rows-1
01:00003F86 C0C1            	   742: 	mulu		d1,d0								; d0 = index of last line
01:00003F88 E740            	   743: 	asl.w		#3,d0								; *8 bytes per char
01:00003F8A 41F00000        	   744: 	lea			(a0,d0.w),a0				; point a0 to last row
01:00003F8E 14390000040B    	   745: 	move.b	TextCols,d2					; number of text cells to clear
01:00003F94 4882            	   746: 	ext.w		d2
01:00003F96 5342            	   747: 	subi.w	#1,d2								; count must be one less than desired
01:00003F98 6100FD0A        	   748: 	bsr			get_screen_color		; d0,d1 = screen color
01:00003F9C 323C0020        	   749: 	move.w	#32,d1							; set the character for display in low 16 bits
                            	   750: .0001:
01:00003FA0 20C1            	   751: 	move.l	d1,(a0)+
01:00003FA2 20C0            	   752: 	move.l	d0,(a0)+
01:00003FA4 51CAFFFA        	   753: 	dbra		d2,.0001
01:00003FA8 4CDF0107        	   754: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003FAC 4E75            	   755: 	rts
                            	   756: 
                            	   757: ;------------------------------------------------------------------------------
                            	   758: ; Display a string on the screen.
                            	   759: ;------------------------------------------------------------------------------
                            	   760: 
                            	   761: DisplayString:
01:00003FAE 48E7C040        	   762: 	movem.l	d0/d1/a1,-(a7)
                            	   763: dspj1:
01:00003FB2 7200            	   764: 	clr.l		d1				; clear upper bits of d1
01:00003FB4 1219            	   765: 	move.b	(a1)+,d1		; move string char into d1
01:00003FB6 4A01            	   766: 	cmpi.b	#0,d1			; is it end of string ?
01:00003FB8 6706            	   767: 	beq.s		dsret			
01:00003FBA 6100FDB6        	   768: 	bsr			DisplayChar		; display character
01:00003FBE 60F2            	   769: 	bra.s		dspj1			; go back for next character
                            	   770: dsret:
01:00003FC0 4CDF0203        	   771: 	movem.l	(a7)+,d0/d1/a1
01:00003FC4 4E75            	   772: 	rts
                            	   773: 
                            	   774: ;------------------------------------------------------------------------------
                            	   775: ; Display a string on the screen followed by carriage return / linefeed.
                            	   776: ;------------------------------------------------------------------------------
                            	   777: 
                            	   778: DisplayStringCRLF:
01:00003FC6 61E6            	   779: 	bsr		DisplayString
01:00003FC8 6000FD60        	   780: 	bra		CRLF
                            	   781: 
                            	   782: ;------------------------------------------------------------------------------
                            	   783: ; Set cursor position to top left of screen.
                            	   784: ;
                            	   785: ; Parameters:
                            	   786: ;		<none>
                            	   787: ; Returns:
                            	   788: ;		<none>
                            	   789: ; Registers Affected:
                            	   790: ;		<none>
                            	   791: ;------------------------------------------------------------------------------
                            	   792: 
                            	   793: HomeCursor:
01:00003FCC 423900000408    	   794: 	clr.b		CursorRow
01:00003FD2 423900000409    	   795: 	clr.b		CursorCol
01:00003FD8 42790000040C    	   796: 	clr.w		TextPos
                            	   797: 	; fall through
                            	   798: 
                            	   799: ;------------------------------------------------------------------------------
                            	   800: ; SyncCursor:
                            	   801: ;
                            	   802: ; Sync the hardware cursor's position to the text cursor position.
                            	   803: ;
                            	   804: ; Parameters:
                            	   805: ;		<none>
                            	   806: ; Returns:
                            	   807: ;		<none>
                            	   808: ; Registers Affected:
                            	   809: ;		<none>
                            	   810: ;------------------------------------------------------------------------------
                            	   811: 
                            	   812: SyncCursor:
01:00003FDE 48E7A000        	   813: 	movem.l	d0/d2,-(a7)
01:00003FE2 6100FD58        	   814: 	bsr			UpdateTextPos
01:00003FE6 E158            	   815: 	rol.w		#8,d0						; swap byte order
01:00003FE8 33C0FD03FF24    	   816: 	move.w	d0,TEXTREG+$24
01:00003FEE 4CDF0005        	   817: 	movem.l	(a7)+,d0/d2
01:00003FF2 4E75            	   818: 	rts
                            	   819: 
                            	   820: ;==============================================================================
                            	   821: ; TRAP #15 handler
                            	   822: ;==============================================================================
                            	   823: 
                            	   824: TRAP15:
01:00003FF4 48E78080        	   825: 	movem.l	d0/a0,-(a7)
01:00003FF8 41FA0012        	   826: 	lea			T15DispatchTable,a0
01:00003FFC E580            	   827: 	asl.l		#2,d0
01:00003FFE 20700000        	   828: 	move.l	(a0,d0.w),a0
01:00004002 4E90            	   829: 	jsr			(a0)
01:00004004 4CDF0101        	   830: 	movem.l	(a7)+,d0/a0
01:00004008 4E73            	   831: 	rte
                            	   832: 
                            	   833: 		align	2
                            	   834: T15DispatchTable:
01:0000400C 000040AC        	   835: 	dc.l	StubRout
01:00004010 000040AC        	   836: 	dc.l	StubRout
01:00004014 000040AC        	   837: 	dc.l	StubRout
01:00004018 000040AC        	   838: 	dc.l	StubRout
01:0000401C 000040AC        	   839: 	dc.l	StubRout
01:00004020 00004134        	   840: 	dc.l	GetKey
01:00004024 00003D72        	   841: 	dc.l	DisplayChar
01:00004028 00004122        	   842: 	dc.l	CheckForKey
01:0000402C 000040AC        	   843: 	dc.l	StubRout
01:00004030 000040AC        	   844: 	dc.l	StubRout
01:00004034 000040AC        	   845: 	dc.l	StubRout
01:00004038 000040AC        	   846: 	dc.l	Cursor1
01:0000403C 0000411A        	   847: 	dc.l	SetKeyboardEcho
01:00004040 00003FC6        	   848: 	dc.l	DisplayStringCRLF
01:00004044 00003FAE        	   849: 	dc.l	DisplayString
01:00004048 000040AC        	   850: 	dc.l	StubRout
01:0000404C 000040AC        	   851: 	dc.l	StubRout
01:00004050 000040AC        	   852: 	dc.l	StubRout
01:00004054 000040AC        	   853: 	dc.l	StubRout
01:00004058 000040AC        	   854: 	dc.l	StubRout
01:0000405C 000040AC        	   855: 	dc.l	StubRout
01:00004060 000040AC        	   856: 	dc.l	StubRout
01:00004064 000040AC        	   857: 	dc.l	StubRout
01:00004068 000040AC        	   858: 	dc.l	StubRout
01:0000406C 000040AC        	   859: 	dc.l	StubRout
01:00004070 000040AC        	   860: 	dc.l	StubRout
01:00004074 000040AC        	   861: 	dc.l	StubRout
01:00004078 000040AC        	   862: 	dc.l	StubRout
01:0000407C 000040AC        	   863: 	dc.l	StubRout
01:00004080 000040AC        	   864: 	dc.l	StubRout
01:00004084 000040AC        	   865: 	dc.l	StubRout
01:00004088 000040AC        	   866: 	dc.l	StubRout
01:0000408C 000040AC        	   867: 	dc.l	StubRout
01:00004090 000040AC        	   868: 	dc.l	StubRout
01:00004094 000040AC        	   869: 	dc.l	StubRout
01:00004098 000040AC        	   870: 	dc.l	StubRout
01:0000409C 000040AC        	   871: 	dc.l	StubRout
01:000040A0 000040AC        	   872: 	dc.l	StubRout
01:000040A4 000040AC        	   873: 	dc.l	StubRout
01:000040A8 000040AC        	   874: 	dc.l	StubRout
                            	   875: 
                            	   876: ;------------------------------------------------------------------------------
                            	   877: ; Stub routine for unimplemented functionality.
                            	   878: ;------------------------------------------------------------------------------
                            	   879: 
                            	   880: Cursor1:
                            	   881: StubRout:
01:000040AC 4E75            	   882: 	rts
                            	   883: 
                            	   884: ;==============================================================================
                            	   885: ; Keyboard stuff
                            	   886: ;
                            	   887: ; KeyState2_
                            	   888: ; 876543210
                            	   889: ; ||||||||+ = shift
                            	   890: ; |||||||+- = alt
                            	   891: ; ||||||+-- = control
                            	   892: ; |||||+--- = numlock
                            	   893: ; ||||+---- = capslock
                            	   894: ; |||+----- = scrolllock
                            	   895: ; ||+------ =
                            	   896: ; |+------- = 
                            	   897: ; +-------- = extended
                            	   898: ;
                            	   899: ;==============================================================================
                            	   900: 
                            	   901: _KeybdInit:
01:000040AE 42390000041B    	   902: 	clr.b	_KeyState1
01:000040B4 42390000041C    	   903: 	clr.b	_KeyState2
01:000040BA 4E75            	   904: 	rts
                            	   905: 
                            	   906: _KeybdGetStatus:
01:000040BC 1239FD0FFE01    	   907: 	move.b	KEYBD+1,d1
01:000040C2 4E75            	   908: 	rts
                            	   909: 
                            	   910: ; Get the scancode from the keyboard port
                            	   911: ;
                            	   912: _KeybdGetScancode:
01:000040C4 7200            	   913: 	moveq	#0,d1
01:000040C6 1239FD0FFE00    	   914: 	move.b	KEYBD,d1				; get the scan code
01:000040CC 4239FD0FFE01    	   915: 	move.b	#0,KEYBD+1				; clear receive register
01:000040D2 4E75            	   916: 	rts
                            	   917: 
                            	   918: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   919: ; keyboard in order to wait for a response.
                            	   920: ;
                            	   921: KeybdRecvByte:
01:000040D4 2F03            	   922: 	move.l	d3,-(a7)
01:000040D6 363C0064        	   923: 	move.w	#100,d3		; wait up to 1s
                            	   924: .0003:
01:000040DA 61E0            	   925: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:000040DC 4A01            	   926: 	tst.b	d1
01:000040DE 6B0E            	   927: 	bmi		.0004		; is input buffer full ? yes, branch
01:000040E0 61000320        	   928: 	bsr		Wait10ms		; wait a bit
01:000040E4 51CBFFF4        	   929: 	dbra	d3,.0003	; go back and try again
01:000040E8 261F            	   930: 	move.l	(a7)+,d3
01:000040EA 72FF            	   931: 	moveq	#-1,d1			; return -1
01:000040EC 4E75            	   932: 	rts
                            	   933: .0004:
01:000040EE 61D4            	   934: 	bsr		_KeybdGetScancode
01:000040F0 261F            	   935: 	move.l	(a7)+,d3
01:000040F2 4E75            	   936: 	rts
                            	   937: 
                            	   938: 
                            	   939: ; Wait until the keyboard transmit is complete
                            	   940: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	   941: ;
                            	   942: KeybdWaitTx:
01:000040F4 48E73000        	   943: 	movem.l	d2/d3,-(a7)
01:000040F8 7664            	   944: 	moveq	#100,d3		; wait a max of 1s
                            	   945: .0001:
01:000040FA 61C0            	   946: 	bsr		_KeybdGetStatus
01:000040FC 08010006        	   947: 	btst	#6,d1		; check for transmit complete bit
01:00004100 6610            	   948: 	bne	    .0002		; branch if bit set
01:00004102 610002FE        	   949: 	bsr		Wait10ms		; delay a little bit
01:00004106 51CBFFF2        	   950: 	dbra	d3,.0001	; go back and try again
01:0000410A 4CDF000C        	   951: 	movem.l	(a7)+,d2/d3
01:0000410E 72FF            	   952: 	moveq	#-1,d1		; return -1
01:00004110 4E75            	   953: 	rts
                            	   954: .0002:
01:00004112 4CDF000C        	   955: 	movem.l	(a7)+,d2/d3
01:00004116 7200            	   956: 	moveq	#0,d1		; return 0
01:00004118 4E75            	   957: 	rts
                            	   958: 
                            	   959: ;------------------------------------------------------------------------------
                            	   960: ; d1.b 0=echo off, non-zero = echo on
                            	   961: ;------------------------------------------------------------------------------
                            	   962: 
                            	   963: SetKeyboardEcho:
01:0000411A 13C100000418    	   964: 	move.b	d1,KeybdEcho
01:00004120 4E75            	   965: 	rts
                            	   966: 
                            	   967: ;------------------------------------------------------------------------------
                            	   968: ; get key pending status into d1.b
                            	   969: ;------------------------------------------------------------------------------
                            	   970: 
                            	   971: CheckForKey:
01:00004122 1239FD0FFE01    	   972: 	move.b	KEYBD+1,d1
01:00004128 6A06            	   973: 	bpl.s		cfk1
01:0000412A 123C0001        	   974: 	move.b	#1,d1
01:0000412E 4E75            	   975: 	rts
                            	   976: cfk1:
01:00004130 4201            	   977: 	clr.b		d1
01:00004132 4E75            	   978: 	rts
                            	   979: 
                            	   980: ;------------------------------------------------------------------------------
                            	   981: ; GetKey
                            	   982: ; 	Get a character from the keyboard. If Alt-tab is pressed then the screen
                            	   983: ; is switched to the next screen and -1 is returned.
                            	   984: ;
                            	   985: ; Modifies:
                            	   986: ;		d1
                            	   987: ; Returns:
                            	   988: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	   989: ;------------------------------------------------------------------------------
                            	   990: 
                            	   991: GetKey:
01:00004134 2F00            	   992: 	move.l	d0,-(a7)					* push d0
                            	   993: 	* Check for focus. Even if the core does not have the focus ALT-TAB still
                            	   994: 	* needs to be checked for.
01:00004136 223900100000    	   995: 	move.l	IOFocus,d1				* Check if the core has the IO focus
01:0000413C 4E7A0FE0        	   996: 	movec.l	coreno,d0
01:00004140 0101            	   997: 	btst		d0,d1
01:00004142 6618            	   998: 	bne.s		.0007
                            	   999: 	* If the core does not have the focus then the keyboard scan code buffer
                            	  1000: 	* must be read directly to determine if a tab character is pressed. A non-
                            	  1001: 	* destructive buffer read is needed.
01:00004144 7200            	  1002: 	moveq		#0,d1
01:00004146 1239FD0FFE00    	  1003: 	move.b	KEYBD,d1					* get the scan code non destructively
01:0000414C 0C01000D        	  1004: 	cmpi.b	#SC_TAB,d1				* is it the TAB key?
01:00004150 6656            	  1005: 	bne.s		.0004							* if not return no key available
01:00004152 083900010000041C	  1006: 	btst		#1,_KeyState2			* is ALT down?
01:0000415A 674C            	  1007: 	beq.s		.0004							* if ALT-TAB goto switch screens
                            	  1008: 	* Got here when a tab scan code was detected. We know there is a tab key
                            	  1009: 	* available at the keyboard port. Get the key.
                            	  1010: .0007:	
01:0000415C 616A            	  1011: 	bsr			KeybdGetCharWait	* get a character
01:0000415E 0C010009        	  1012: 	cmpi.b	#9,d1							* tab pressed?
01:00004162 6628            	  1013: 	bne.s		.0006
01:00004164 083900010000041C	  1014: 	btst		#1,_KeyState2			* is ALT down?
01:0000416C 671E            	  1015: 	beq.s		.0006
                            	  1016: .0008:
                            	  1017: 	* Got alt-tab, switch screens
01:0000416E 3039FD03FF28    	  1018: 	move.w	TEXTREG+$28,d0
01:00004174 E158            	  1019: 	rol.w		#8,d0							* swap byte order
01:00004176 D07C0800        	  1020: 	add.w		#2048,d0					* increment to next screen page
01:0000417A B07C4000        	  1021: 	cmp.w		#16384,d0					* hit max screen page?
01:0000417E 6502            	  1022: 	blo.s		.0002
01:00004180 7000            	  1023: 	moveq		#0,d0							* wrap around
                            	  1024: .0002:
01:00004182 E058            	  1025: 	ror.w		#8,d0							* swap byte order
01:00004184 33C0FD03FF28    	  1026: 	move.w	d0,TEXTREG+$28
01:0000418A 601C            	  1027: 	bra.s		.0004							* eat Alt-tab, return no key available
                            	  1028: .0006:
01:0000418C 4A3900000418    	  1029: 	cmpi.b	#0,KeybdEcho			* is keyboard echo on ?
01:00004192 6710            	  1030: 	beq.s		.0003							* no echo, just return the key
01:00004194 0C01000D        	  1031: 	cmpi.b	#CR,d1						* convert CR keystroke into CRLF
01:00004198 6606            	  1032: 	bne.s		.0005
01:0000419A 6100FB8E        	  1033: 	bsr			CRLF
01:0000419E 6004            	  1034: 	bra.s		.0003
                            	  1035: .0005:
01:000041A0 6100FBD0        	  1036: 	bsr			DisplayChar
                            	  1037: .0003:
01:000041A4 201F            	  1038: 	move.l	(a7)+,d0					* pop d0
01:000041A6 4E75            	  1039: 	rts												* return key
                            	  1040: * Return -1 indicating no char was available
                            	  1041: .0004:
01:000041A8 201F            	  1042: 	move.l	(a7)+,d0					* pop d0
01:000041AA 72FF            	  1043: 	moveq		#-1,d1						* return no key available
01:000041AC 4E75            	  1044: 	rts
                            	  1045: 
                            	  1046: CheckForCtrlC
01:000041AE 6100FF72        	  1047: 	bsr			CheckForKey
01:000041B2 670A            	  1048: 	beq.s		.0001
01:000041B4 611A            	  1049: 	bsr			KeybdGetChar
01:000041B6 B23C0003        	  1050: 	cmp.b		#CTRLC,d1
01:000041BA 67000562        	  1051: 	beq			Monitor
                            	  1052: .0001:
01:000041BE 4E75            	  1053: 	rts
                            	  1054: 
                            	  1055: ;------------------------------------------------------------------------------
                            	  1056: ;------------------------------------------------------------------------------
                            	  1057: 
                            	  1058: KeybdGetCharNoWait:
01:000041C0 423900000419    	  1059: 	clr.b	KeybdWaitFlag
01:000041C6 6008            	  1060: 	bra		KeybdGetChar
                            	  1061: 
                            	  1062: KeybdGetCharWait:
01:000041C8 13FC00FF00000419	  1063: 	move.b	#-1,KeybdWaitFlag
                            	  1064: 
                            	  1065: KeybdGetChar:
01:000041D0 48E73080        	  1066: 	movem.l	d2/d3/a0,-(a7)
                            	  1067: .0003:
01:000041D4 6100FEE6        	  1068: 	bsr		_KeybdGetStatus			; check keyboard status for key available
01:000041D8 6B10            	  1069: 	bmi		.0006					; yes, go process
01:000041DA 4A3900000419    	  1070: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:000041E0 6BF2            	  1071: 	bmi		.0003					; yes, branch back
01:000041E2 4CDF010C        	  1072: 	movem.l	(a7)+,d2/d3/a0
01:000041E6 72FF            	  1073: 	moveq	#-1,d1					; flag no char available
01:000041E8 4E75            	  1074: 	rts
                            	  1075: .0006:
01:000041EA 6100FED8        	  1076: 	bsr		_KeybdGetScancode
                            	  1077: .0001:
01:000041EE 33FC0001FD0FFF00	  1078: 	move.w	#1,leds
01:000041F6 B23C00F0        	  1079: 	cmp.b	#SC_KEYUP,d1
01:000041FA 670000BE        	  1080: 	beq		.doKeyup
01:000041FE B23C00E0        	  1081: 	cmp.b	#SC_EXTEND,d1
01:00004202 670000C2        	  1082: 	beq		.doExtend
01:00004206 B23C0014        	  1083: 	cmp.b	#SC_CTRL,d1
01:0000420A 670000C6        	  1084: 	beq		.doCtrl
01:0000420E B23C0012        	  1085: 	cmp.b	#SC_LSHIFT,d1
01:00004212 67000128        	  1086: 	beq		.doShift
01:00004216 B23C0059        	  1087: 	cmp.b	#SC_RSHIFT,d1
01:0000421A 67000120        	  1088: 	beq		.doShift
01:0000421E B23C0077        	  1089: 	cmp.b	#SC_NUMLOCK,d1
01:00004222 67000140        	  1090: 	beq		.doNumLock
01:00004226 B23C0058        	  1091: 	cmp.b	#SC_CAPSLOCK,d1
01:0000422A 67000146        	  1092: 	beq		.doCapsLock
01:0000422E B23C007E        	  1093: 	cmp.b	#SC_SCROLLLOCK,d1
01:00004232 6700014C        	  1094: 	beq		.doScrollLock
01:00004236 B23C0011        	  1095: 	cmp.b   #SC_ALT,d1
01:0000423A 670000BE        	  1096: 	beq     .doAlt
01:0000423E 14390000041B    	  1097: 	move.b	_KeyState1,d2			; check key up/down
01:00004244 42390000041B    	  1098: 	move.b	#0,_KeyState1			; clear keyup status
01:0000424A 4A02            	  1099: 	tst.b	d2
01:0000424C 6686            	  1100: 	bne	    .0003					; ignore key up
01:0000424E B23C000D        	  1101: 	cmp.b   #SC_TAB,d1
01:00004252 670000CE        	  1102: 	beq     .doTab
                            	  1103: .0013:
01:00004256 14390000041C    	  1104: 	move.b	_KeyState2,d2
01:0000425C 6A1A            	  1105: 	bpl		.0010					; is it extended code ?
01:0000425E C43C007F        	  1106: 	and.b	#$7F,d2					; clear extended bit
01:00004262 13C20000041C    	  1107: 	move.b	d2,_KeyState2
01:00004268 42390000041B    	  1108: 	move.b	#0,_KeyState1			; clear keyup
01:0000426E 41FA0422        	  1109: 	lea		_keybdExtendedCodes,a0
01:00004272 12301000        	  1110: 	move.b	(a0,d1.w),d1
01:00004276 6034            	  1111: 	bra		.0008
                            	  1112: .0010:
01:00004278 08020002        	  1113: 	btst	#2,d2					; is it CTRL code ?
01:0000427C 670E            	  1114: 	beq		.0009
01:0000427E C27C007F        	  1115: 	and.w	#$7F,d1
01:00004282 41FA038E        	  1116: 	lea		_keybdControlCodes,a0
01:00004286 12301000        	  1117: 	move.b	(a0,d1.w),d1
01:0000428A 6020            	  1118: 	bra		.0008
                            	  1119: .0009:
01:0000428C 08020000        	  1120: 	btst	#0,d2					; is it shift down ?
01:00004290 670A            	  1121: 	beq  	.0007
01:00004292 41FA027E        	  1122: 	lea		_shiftedScanCodes,a0
01:00004296 12301000        	  1123: 	move.b	(a0,d1.w),d1
01:0000429A 6010            	  1124: 	bra		.0008
                            	  1125: .0007:
01:0000429C 41FA0174        	  1126: 	lea		_unshiftedScanCodes,a0
01:000042A0 12301000        	  1127: 	move.b	(a0,d1.w),d1
01:000042A4 33FC0202FD0FFF00	  1128: 	move.w	#$0202,leds
                            	  1129: .0008:
01:000042AC 33FC0303FD0FFF00	  1130: 	move.w	#$0303,leds
01:000042B4 4CDF010C        	  1131: 	movem.l	(a7)+,d2/d3/a0
01:000042B8 4E75            	  1132: 	rts
                            	  1133: .doKeyup:
01:000042BA 13FC00FF0000041B	  1134: 	move.b	#-1,_KeyState1
01:000042C2 6000FF10        	  1135: 	bra		.0003
                            	  1136: .doExtend:
01:000042C6 003900800000041C	  1137: 	or.b	#$80,_KeyState2
01:000042CE 6000FF04        	  1138: 	bra		.0003
                            	  1139: .doCtrl:
01:000042D2 12390000041B    	  1140: 	move.b	_KeyState1,d1
01:000042D8 42390000041B    	  1141: 	clr.b	_KeyState1
01:000042DE 4A01            	  1142: 	tst.b	d1
01:000042E0 6A0C            	  1143: 	bpl.s	.0004
01:000042E2 08B900020000041C	  1144: 	bclr	#2,_KeyState2
01:000042EA 6000FEE8        	  1145: 	bra		.0003
                            	  1146: .0004:
01:000042EE 08F900020000041C	  1147: 	bset	#2,_KeyState2
01:000042F6 6000FEDC        	  1148: 	bra		.0003
                            	  1149: .doAlt:
01:000042FA 12390000041B    	  1150: 	move.b	_KeyState1,d1
01:00004300 42390000041B    	  1151: 	clr.b	_KeyState1
01:00004306 4A01            	  1152: 	tst.b	d1
01:00004308 6A0C            	  1153: 	bpl		.0011
01:0000430A 08B900010000041C	  1154: 	bclr	#1,_KeyState2
01:00004312 6000FEC0        	  1155: 	bra		.0003
                            	  1156: .0011:
01:00004316 08F900010000041C	  1157: 	bset	#1,_KeyState2
01:0000431E 6000FEB4        	  1158: 	bra		.0003
                            	  1159: .doTab:
01:00004322 2F01            	  1160: 	move.l	d1,-(a7)
01:00004324 12390000041C    	  1161:   move.b  _KeyState2,d1
01:0000432A 08010000        	  1162:   btst	#0,d1                 ; is ALT down ?
01:0000432E 6706            	  1163:   beq     .0012
                            	  1164: ;    	inc     _iof_switch
01:00004330 221F            	  1165:   move.l	(a7)+,d1
01:00004332 6000FEA0        	  1166:   bra     .0003
                            	  1167: .0012:
01:00004336 221F            	  1168:   move.l	(a7)+,d1
01:00004338 6000FF1C        	  1169:   bra     .0013
                            	  1170: .doShift:
01:0000433C 12390000041B    	  1171: 	move.b	_KeyState1,d1
01:00004342 42390000041B    	  1172: 	clr.b	_KeyState1
01:00004348 4A01            	  1173: 	tst.b	d1
01:0000434A 6A0C            	  1174: 	bpl.s	.0005
01:0000434C 08B900000000041C	  1175: 	bclr	#0,_KeyState2
01:00004354 6000FE7E        	  1176: 	bra		.0003
                            	  1177: .0005:
01:00004358 08F900000000041C	  1178: 	bset	#0,_KeyState2
01:00004360 6000FE72        	  1179: 	bra		.0003
                            	  1180: .doNumLock:
01:00004364 087900040000041C	  1181: 	bchg	#4,_KeyState2
01:0000436C 6120            	  1182: 	bsr		KeybdSetLEDStatus
01:0000436E 6000FE64        	  1183: 	bra		.0003
                            	  1184: .doCapsLock:
01:00004372 087900050000041C	  1185: 	bchg	#5,_KeyState2
01:0000437A 6112            	  1186: 	bsr		KeybdSetLEDStatus
01:0000437C 6000FE56        	  1187: 	bra		.0003
                            	  1188: .doScrollLock:
01:00004380 087900060000041C	  1189: 	bchg	#6,_KeyState2
01:00004388 6104            	  1190: 	bsr		KeybdSetLEDStatus
01:0000438A 6000FE48        	  1191: 	bra		.0003
                            	  1192: 
                            	  1193: KeybdSetLEDStatus:
01:0000438E 48E73000        	  1194: 	movem.l	d2/d3,-(a7)
01:00004392 42390000041A    	  1195: 	clr.b	KeybdLEDs
01:00004398 083900040000041C	  1196: 	btst	#4,_KeyState2
01:000043A0 6708            	  1197: 	beq.s	.0002
01:000043A2 13FC00020000041A	  1198: 	move.b	#2,KeybdLEDs
                            	  1199: .0002:
01:000043AA 083900050000041C	  1200: 	btst	#5,_KeyState2
01:000043B2 6708            	  1201: 	beq.s	.0003
01:000043B4 08F900020000041A	  1202: 	bset	#2,KeybdLEDs
                            	  1203: .0003:
01:000043BC 083900060000041C	  1204: 	btst	#6,_KeyState2
01:000043C4 6708            	  1205: 	beq.s	.0004
01:000043C6 08F900000000041A	  1206: 	bset	#0,KeybdLEDs
                            	  1207: .0004:
01:000043CE 123C00ED        	  1208: 	move.b	#$ED,d1
01:000043D2 6126            	  1209: 	bsr		KeybdSendByte
01:000043D4 6100FD1E        	  1210: 	bsr		KeybdWaitTx
01:000043D8 6100FCFA        	  1211: 	bsr		KeybdRecvByte
01:000043DC 4A01            	  1212: 	tst.b	d1
01:000043DE 6B14            	  1213: 	bmi		.0001
01:000043E0 B27C00FA        	  1214: 	cmp		#$FA,d1
01:000043E4 12390000041A    	  1215: 	move.b	KeybdLEDs,d1
01:000043EA 610E            	  1216: 	bsr		KeybdSendByte
01:000043EC 6100FD06        	  1217: 	bsr		KeybdWaitTx
01:000043F0 6100FCE2        	  1218: 	bsr		KeybdRecvByte
                            	  1219: .0001:
01:000043F4 4CDF000C        	  1220: 	movem.l	(a7)+,d2/d3
01:000043F8 4E75            	  1221: 	rts
                            	  1222: 
                            	  1223: KeybdSendByte:
01:000043FA 13C1FD0FFE00    	  1224: 	move.b	d1,KEYBD
01:00004400 4E75            	  1225: 	rts
                            	  1226: 	
                            	  1227: Wait10ms:
01:00004402 2F03            	  1228: 	move.l	d3,-(a7)
01:00004404 263C000003E8    	  1229: 	move.l	#1000,d3
                            	  1230: .0001:
01:0000440A 51CBFFFE        	  1231: 	dbra	d3,.0001
01:0000440E 261F            	  1232: 	move.l	(a7)+,d3
01:00004410 4E75            	  1233: 	rts
                            	  1234: 
                            	  1235: 
                            	  1236: ;--------------------------------------------------------------------------
                            	  1237: ; PS2 scan codes to ascii conversion tables.
                            	  1238: ;--------------------------------------------------------------------------
                            	  1239: ;
                            	  1240: _unshiftedScanCodes:
01:00004412 2E              	  1241: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:00004413 A9
01:00004414 2E
01:00004415 A5
01:00004416 A3
01:00004417 A1
01:00004418 A2
01:00004419 AC
01:0000441A 2E              	  1242: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:0000441B AA
01:0000441C A8
01:0000441D A6
01:0000441E A4
01:0000441F 09
01:00004420 60
01:00004421 2E
01:00004422 2E              	  1243: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:00004423 2E
01:00004424 2E
01:00004425 2E
01:00004426 2E
01:00004427 71
01:00004428 31
01:00004429 2E
01:0000442A 2E              	  1244: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:0000442B 2E
01:0000442C 7A
01:0000442D 73
01:0000442E 61
01:0000442F 77
01:00004430 32
01:00004431 2E
01:00004432 2E              	  1245: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:00004433 63
01:00004434 78
01:00004435 64
01:00004436 65
01:00004437 34
01:00004438 33
01:00004439 2E
01:0000443A 2E              	  1246: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:0000443B 20
01:0000443C 76
01:0000443D 66
01:0000443E 74
01:0000443F 72
01:00004440 35
01:00004441 2E
01:00004442 2E              	  1247: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:00004443 6E
01:00004444 62
01:00004445 68
01:00004446 67
01:00004447 79
01:00004448 36
01:00004449 2E
01:0000444A 2E              	  1248: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:0000444B 2E
01:0000444C 6D
01:0000444D 6A
01:0000444E 75
01:0000444F 37
01:00004450 38
01:00004451 2E
01:00004452 2E              	  1249: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:00004453 2C
01:00004454 6B
01:00004455 69
01:00004456 6F
01:00004457 30
01:00004458 39
01:00004459 2E
01:0000445A 2E              	  1250: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:0000445B 2E
01:0000445C 2F
01:0000445D 6C
01:0000445E 3B
01:0000445F 70
01:00004460 2D
01:00004461 2E
01:00004462 2E              	  1251: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:00004463 2E
01:00004464 27
01:00004465 2E
01:00004466 5B
01:00004467 3D
01:00004468 2E
01:00004469 2E
01:0000446A AD              	  1252: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:0000446B 2E
01:0000446C 0D
01:0000446D 5D
01:0000446E 2E
01:0000446F 5C
01:00004470 2E
01:00004471 2E
01:00004472 2E              	  1253: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004473 2E
01:00004474 2E
01:00004475 2E
01:00004476 2E
01:00004477 2E
01:00004478 08
01:00004479 2E
01:0000447A 2E              	  1254: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:0000447B 95
01:0000447C 2E
01:0000447D 93
01:0000447E 94
01:0000447F 2E
01:00004480 2E
01:00004481 2E
01:00004482 98              	  1255: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:00004483 7F
01:00004484 92
01:00004485 2E
01:00004486 91
01:00004487 90
01:00004488 1B
01:00004489 AF
01:0000448A AB              	  1256: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:0000448B 2E
01:0000448C 97
01:0000448D 2E
01:0000448E 2E
01:0000448F 96
01:00004490 AE
01:00004491 2E
                            	  1257: 
01:00004492 2E              	  1258: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:00004493 2E
01:00004494 2E
01:00004495 A7
01:00004496 2E
01:00004497 2E
01:00004498 2E
01:00004499 2E
01:0000449A 2E              	  1259: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000449B 2E
01:0000449C 2E
01:0000449D 2E
01:0000449E 2E
01:0000449F 2E
01:000044A0 2E
01:000044A1 2E
01:000044A2 2E              	  1260: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044A3 2E
01:000044A4 2E
01:000044A5 2E
01:000044A6 2E
01:000044A7 2E
01:000044A8 2E
01:000044A9 2E
01:000044AA 2E              	  1261: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044AB 2E
01:000044AC 2E
01:000044AD 2E
01:000044AE 2E
01:000044AF 2E
01:000044B0 2E
01:000044B1 2E
01:000044B2 2E              	  1262: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044B3 2E
01:000044B4 2E
01:000044B5 2E
01:000044B6 2E
01:000044B7 2E
01:000044B8 2E
01:000044B9 2E
01:000044BA 2E              	  1263: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044BB 2E
01:000044BC 2E
01:000044BD 2E
01:000044BE 2E
01:000044BF 2E
01:000044C0 2E
01:000044C1 2E
01:000044C2 2E              	  1264: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044C3 2E
01:000044C4 2E
01:000044C5 2E
01:000044C6 2E
01:000044C7 2E
01:000044C8 2E
01:000044C9 2E
01:000044CA 2E              	  1265: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044CB 2E
01:000044CC 2E
01:000044CD 2E
01:000044CE 2E
01:000044CF 2E
01:000044D0 2E
01:000044D1 2E
01:000044D2 2E              	  1266: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044D3 2E
01:000044D4 2E
01:000044D5 2E
01:000044D6 2E
01:000044D7 2E
01:000044D8 2E
01:000044D9 2E
01:000044DA 2E              	  1267: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044DB 2E
01:000044DC 2E
01:000044DD 2E
01:000044DE 2E
01:000044DF 2E
01:000044E0 2E
01:000044E1 2E
01:000044E2 2E              	  1268: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044E3 2E
01:000044E4 2E
01:000044E5 2E
01:000044E6 2E
01:000044E7 2E
01:000044E8 2E
01:000044E9 2E
01:000044EA 2E              	  1269: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044EB 2E
01:000044EC 2E
01:000044ED 2E
01:000044EE 2E
01:000044EF 2E
01:000044F0 2E
01:000044F1 2E
01:000044F2 2E              	  1270: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044F3 2E
01:000044F4 2E
01:000044F5 2E
01:000044F6 2E
01:000044F7 2E
01:000044F8 2E
01:000044F9 2E
01:000044FA 2E              	  1271: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000044FB 2E
01:000044FC 2E
01:000044FD 2E
01:000044FE 2E
01:000044FF 2E
01:00004500 2E
01:00004501 2E
01:00004502 2E              	  1272: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004503 2E
01:00004504 2E
01:00004505 2E
01:00004506 2E
01:00004507 2E
01:00004508 2E
01:00004509 2E
01:0000450A 2E              	  1273: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:0000450B 2E
01:0000450C FA
01:0000450D 2E
01:0000450E 2E
01:0000450F 2E
01:00004510 2E
01:00004511 2E
                            	  1274: 
                            	  1275: _shiftedScanCodes:
01:00004512 2E              	  1276: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004513 2E
01:00004514 2E
01:00004515 2E
01:00004516 2E
01:00004517 2E
01:00004518 2E
01:00004519 2E
01:0000451A 2E              	  1277: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:0000451B 2E
01:0000451C 2E
01:0000451D 2E
01:0000451E 2E
01:0000451F 09
01:00004520 7E
01:00004521 2E
01:00004522 2E              	  1278: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:00004523 2E
01:00004524 2E
01:00004525 2E
01:00004526 2E
01:00004527 51
01:00004528 21
01:00004529 2E
01:0000452A 2E              	  1279: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:0000452B 2E
01:0000452C 5A
01:0000452D 53
01:0000452E 41
01:0000452F 57
01:00004530 40
01:00004531 2E
01:00004532 2E              	  1280: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:00004533 43
01:00004534 58
01:00004535 44
01:00004536 45
01:00004537 24
01:00004538 23
01:00004539 2E
01:0000453A 2E              	  1281: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:0000453B 20
01:0000453C 56
01:0000453D 46
01:0000453E 54
01:0000453F 52
01:00004540 25
01:00004541 2E
01:00004542 2E              	  1282: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:00004543 4E
01:00004544 42
01:00004545 48
01:00004546 47
01:00004547 59
01:00004548 5E
01:00004549 2E
01:0000454A 2E              	  1283: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:0000454B 2E
01:0000454C 4D
01:0000454D 4A
01:0000454E 55
01:0000454F 26
01:00004550 2A
01:00004551 2E
01:00004552 2E              	  1284: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:00004553 3C
01:00004554 4B
01:00004555 49
01:00004556 4F
01:00004557 29
01:00004558 28
01:00004559 2E
01:0000455A 2E              	  1285: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:0000455B 3E
01:0000455C 3F
01:0000455D 4C
01:0000455E 3A
01:0000455F 50
01:00004560 5F
01:00004561 2E
01:00004562 2E              	  1286: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004563 2E
01:00004564 22
01:00004565 2E
01:00004566 7B
01:00004567 2B
01:00004568 2E
01:00004569 2E
01:0000456A 2E              	  1287: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:0000456B 2E
01:0000456C 0D
01:0000456D 7D
01:0000456E 2E
01:0000456F 7C
01:00004570 2E
01:00004571 2E
01:00004572 2E              	  1288: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004573 2E
01:00004574 2E
01:00004575 2E
01:00004576 2E
01:00004577 2E
01:00004578 08
01:00004579 2E
01:0000457A 2E              	  1289: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000457B 2E
01:0000457C 2E
01:0000457D 2E
01:0000457E 2E
01:0000457F 2E
01:00004580 2E
01:00004581 2E
01:00004582 2E              	  1290: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:00004583 7F
01:00004584 2E
01:00004585 2E
01:00004586 2E
01:00004587 2E
01:00004588 1B
01:00004589 2E
01:0000458A 2E              	  1291: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000458B 2E
01:0000458C 2E
01:0000458D 2E
01:0000458E 2E
01:0000458F 2E
01:00004590 2E
01:00004591 2E
                            	  1292: 
01:00004592 2E              	  1293: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004593 2E
01:00004594 2E
01:00004595 2E
01:00004596 2E
01:00004597 2E
01:00004598 2E
01:00004599 2E
01:0000459A 2E              	  1294: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000459B 2E
01:0000459C 2E
01:0000459D 2E
01:0000459E 2E
01:0000459F 2E
01:000045A0 2E
01:000045A1 2E
01:000045A2 2E              	  1295: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045A3 2E
01:000045A4 2E
01:000045A5 2E
01:000045A6 2E
01:000045A7 2E
01:000045A8 2E
01:000045A9 2E
01:000045AA 2E              	  1296: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045AB 2E
01:000045AC 2E
01:000045AD 2E
01:000045AE 2E
01:000045AF 2E
01:000045B0 2E
01:000045B1 2E
01:000045B2 2E              	  1297: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B3 2E
01:000045B4 2E
01:000045B5 2E
01:000045B6 2E
01:000045B7 2E
01:000045B8 2E
01:000045B9 2E
01:000045BA 2E              	  1298: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045BB 2E
01:000045BC 2E
01:000045BD 2E
01:000045BE 2E
01:000045BF 2E
01:000045C0 2E
01:000045C1 2E
01:000045C2 2E              	  1299: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C3 2E
01:000045C4 2E
01:000045C5 2E
01:000045C6 2E
01:000045C7 2E
01:000045C8 2E
01:000045C9 2E
01:000045CA 2E              	  1300: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045CB 2E
01:000045CC 2E
01:000045CD 2E
01:000045CE 2E
01:000045CF 2E
01:000045D0 2E
01:000045D1 2E
01:000045D2 2E              	  1301: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D3 2E
01:000045D4 2E
01:000045D5 2E
01:000045D6 2E
01:000045D7 2E
01:000045D8 2E
01:000045D9 2E
01:000045DA 2E              	  1302: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045DB 2E
01:000045DC 2E
01:000045DD 2E
01:000045DE 2E
01:000045DF 2E
01:000045E0 2E
01:000045E1 2E
01:000045E2 2E              	  1303: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E3 2E
01:000045E4 2E
01:000045E5 2E
01:000045E6 2E
01:000045E7 2E
01:000045E8 2E
01:000045E9 2E
01:000045EA 2E              	  1304: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045EB 2E
01:000045EC 2E
01:000045ED 2E
01:000045EE 2E
01:000045EF 2E
01:000045F0 2E
01:000045F1 2E
01:000045F2 2E              	  1305: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F3 2E
01:000045F4 2E
01:000045F5 2E
01:000045F6 2E
01:000045F7 2E
01:000045F8 2E
01:000045F9 2E
01:000045FA 2E              	  1306: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045FB 2E
01:000045FC 2E
01:000045FD 2E
01:000045FE 2E
01:000045FF 2E
01:00004600 2E
01:00004601 2E
01:00004602 2E              	  1307: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004603 2E
01:00004604 2E
01:00004605 2E
01:00004606 2E
01:00004607 2E
01:00004608 2E
01:00004609 2E
01:0000460A 2E              	  1308: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000460B 2E
01:0000460C 2E
01:0000460D 2E
01:0000460E 2E
01:0000460F 2E
01:00004610 2E
01:00004611 2E
                            	  1309: 
                            	  1310: ; control
                            	  1311: _keybdControlCodes:
01:00004612 2E              	  1312: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004613 2E
01:00004614 2E
01:00004615 2E
01:00004616 2E
01:00004617 2E
01:00004618 2E
01:00004619 2E
01:0000461A 2E              	  1313: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:0000461B 2E
01:0000461C 2E
01:0000461D 2E
01:0000461E 2E
01:0000461F 09
01:00004620 7E
01:00004621 2E
01:00004622 2E              	  1314: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:00004623 2E
01:00004624 2E
01:00004625 2E
01:00004626 2E
01:00004627 11
01:00004628 21
01:00004629 2E
01:0000462A 2E              	  1315: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:0000462B 2E
01:0000462C 1A
01:0000462D 13
01:0000462E 01
01:0000462F 17
01:00004630 40
01:00004631 2E
01:00004632 2E              	  1316: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:00004633 03
01:00004634 18
01:00004635 04
01:00004636 05
01:00004637 24
01:00004638 23
01:00004639 2E
01:0000463A 2E              	  1317: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:0000463B 20
01:0000463C 16
01:0000463D 06
01:0000463E 14
01:0000463F 12
01:00004640 25
01:00004641 2E
01:00004642 2E              	  1318: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:00004643 0E
01:00004644 02
01:00004645 08
01:00004646 07
01:00004647 19
01:00004648 5E
01:00004649 2E
01:0000464A 2E              	  1319: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:0000464B 2E
01:0000464C 0D
01:0000464D 0A
01:0000464E 15
01:0000464F 26
01:00004650 2A
01:00004651 2E
01:00004652 2E              	  1320: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:00004653 3C
01:00004654 0B
01:00004655 09
01:00004656 0F
01:00004657 29
01:00004658 28
01:00004659 2E
01:0000465A 2E              	  1321: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:0000465B 3E
01:0000465C 3F
01:0000465D 0C
01:0000465E 3A
01:0000465F 10
01:00004660 5F
01:00004661 2E
01:00004662 2E              	  1322: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004663 2E
01:00004664 22
01:00004665 2E
01:00004666 7B
01:00004667 2B
01:00004668 2E
01:00004669 2E
01:0000466A 2E              	  1323: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:0000466B 2E
01:0000466C 0D
01:0000466D 7D
01:0000466E 2E
01:0000466F 7C
01:00004670 2E
01:00004671 2E
01:00004672 2E              	  1324: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004673 2E
01:00004674 2E
01:00004675 2E
01:00004676 2E
01:00004677 2E
01:00004678 08
01:00004679 2E
01:0000467A 2E              	  1325: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000467B 2E
01:0000467C 2E
01:0000467D 2E
01:0000467E 2E
01:0000467F 2E
01:00004680 2E
01:00004681 2E
01:00004682 2E              	  1326: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:00004683 7F
01:00004684 2E
01:00004685 2E
01:00004686 2E
01:00004687 2E
01:00004688 1B
01:00004689 2E
01:0000468A 2E              	  1327: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000468B 2E
01:0000468C 2E
01:0000468D 2E
01:0000468E 2E
01:0000468F 2E
01:00004690 2E
01:00004691 2E
                            	  1328: 
                            	  1329: _keybdExtendedCodes:
01:00004692 2E              	  1330: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:00004693 2E
01:00004694 2E
01:00004695 2E
01:00004696 A3
01:00004697 A1
01:00004698 A2
01:00004699 2E
01:0000469A 2E              	  1331: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000469B 2E
01:0000469C 2E
01:0000469D 2E
01:0000469E 2E
01:0000469F 2E
01:000046A0 2E
01:000046A1 2E
01:000046A2 2E              	  1332: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046A3 2E
01:000046A4 2E
01:000046A5 2E
01:000046A6 2E
01:000046A7 2E
01:000046A8 2E
01:000046A9 2E
01:000046AA 2E              	  1333: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046AB 2E
01:000046AC 2E
01:000046AD 2E
01:000046AE 2E
01:000046AF 2E
01:000046B0 2E
01:000046B1 2E
01:000046B2 2E              	  1334: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B3 2E
01:000046B4 2E
01:000046B5 2E
01:000046B6 2E
01:000046B7 2E
01:000046B8 2E
01:000046B9 2E
01:000046BA 2E              	  1335: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046BB 2E
01:000046BC 2E
01:000046BD 2E
01:000046BE 2E
01:000046BF 2E
01:000046C0 2E
01:000046C1 2E
01:000046C2 2E              	  1336: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C3 2E
01:000046C4 2E
01:000046C5 2E
01:000046C6 2E
01:000046C7 2E
01:000046C8 2E
01:000046C9 2E
01:000046CA 2E              	  1337: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046CB 2E
01:000046CC 2E
01:000046CD 2E
01:000046CE 2E
01:000046CF 2E
01:000046D0 2E
01:000046D1 2E
01:000046D2 2E              	  1338: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D3 2E
01:000046D4 2E
01:000046D5 2E
01:000046D6 2E
01:000046D7 2E
01:000046D8 2E
01:000046D9 2E
01:000046DA 2E              	  1339: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046DB 2E
01:000046DC 2E
01:000046DD 2E
01:000046DE 2E
01:000046DF 2E
01:000046E0 2E
01:000046E1 2E
01:000046E2 2E              	  1340: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E3 2E
01:000046E4 2E
01:000046E5 2E
01:000046E6 2E
01:000046E7 2E
01:000046E8 2E
01:000046E9 2E
01:000046EA 2E              	  1341: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046EB 2E
01:000046EC 2E
01:000046ED 2E
01:000046EE 2E
01:000046EF 2E
01:000046F0 2E
01:000046F1 2E
01:000046F2 2E              	  1342: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046F3 2E
01:000046F4 2E
01:000046F5 2E
01:000046F6 2E
01:000046F7 2E
01:000046F8 2E
01:000046F9 2E
01:000046FA 2E              	  1343: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:000046FB 95
01:000046FC 2E
01:000046FD 93
01:000046FE 94
01:000046FF 2E
01:00004700 2E
01:00004701 2E
01:00004702 98              	  1344: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:00004703 99
01:00004704 92
01:00004705 2E
01:00004706 91
01:00004707 90
01:00004708 2E
01:00004709 2E
01:0000470A 2E              	  1345: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:0000470B 2E
01:0000470C 97
01:0000470D 2E
01:0000470E 2E
01:0000470F 96
01:00004710 2E
01:00004711 2E
                            	  1346: 
                            	  1347: ;==============================================================================
                            	  1348: ;==============================================================================
                            	  1349: ; Monitor
                            	  1350: ;==============================================================================
                            	  1351: ;==============================================================================
                            	  1352: ;
                            	  1353: ; Get a word from screen memory and swap byte order
                            	  1354: 
                            	  1355: FromScreen:
01:00004712 2210            	  1356: 	move.l	(a0),d1
01:00004714 E159            	  1357: 	rol.w		#8,d1
01:00004716 4841            	  1358: 	swap		d1
01:00004718 E159            	  1359: 	rol.w		#8,d1
01:0000471A 5088            	  1360: 	lea			8(a0),a0	; increment screen pointer
01:0000471C 4E75            	  1361: 	rts
                            	  1362: 
                            	  1363: StartMon:
                            	  1364: Monitor:
01:0000471E 7201            	  1365: 	moveq	#1,d1
01:00004720 6100B9F2        	  1366: 	bsr		UnlockSemaphore
                            	  1367: ;	lea		STACK,a7		; reset the stack pointer
01:00004724 423900000418    	  1368: 	clr.b	KeybdEcho		; turn off keyboard echo
                            	  1369: PromptLn:
01:0000472A 6100F5FE        	  1370: 	bsr			CRLF
01:0000472E 123C0024        	  1371: 	move.b	#'$',d1
01:00004732 6100F63E        	  1372: 	bsr			DisplayChar
                            	  1373: 
                            	  1374: ; Get characters until a CR is keyed
                            	  1375: ;
                            	  1376: Prompt3:
01:00004736 6100F9FC        	  1377: 	bsr			GetKey
01:0000473A 0C01000D        	  1378: 	cmpi.b	#CR,d1
01:0000473E 6706            	  1379: 	beq.s		Prompt1
01:00004740 6100F630        	  1380: 	bsr			DisplayChar
01:00004744 60F0            	  1381: 	bra.s		Prompt3
                            	  1382: 
                            	  1383: ; Process the screen line that the CR was keyed on
                            	  1384: ;
                            	  1385: Prompt1:
01:00004746 423900000409    	  1386: 	clr.b		CursorCol			; go back to the start of the line
01:0000474C 6100F616        	  1387: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1388: .0001:
01:00004750 61C0            	  1389: 	bsr			FromScreen		; grab character off screen
01:00004752 0C010024        	  1390: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:00004756 67F8            	  1391: 	beq.s		.0001
                            	  1392: 	
                            	  1393: ; Dispatch based on command character
                            	  1394: ;
                            	  1395: Prompt2:
01:00004758 0C010061        	  1396: 	cmpi.b	#'a',d1
01:0000475C 6700054A        	  1397: 	beq			AudioInputTest
01:00004760 0C010062        	  1398: 	cmpi.b	#'b',d1
01:00004764 67000544        	  1399: 	beq			BouncingBalls
01:00004768 0C010067        	  1400: 	cmpi.b	#'g',d1
01:0000476C 6700053E        	  1401: 	beq			GraphicsDemo
01:00004770 0C01003A        	  1402: 	cmpi.b	#':',d1			; $: - edit memory
01:00004774 6700022A        	  1403: 	beq			EditMem
01:00004778 0C010044        	  1404: 	cmpi.b	#'D',d1			; $D - dump memory
01:0000477C 6700027C        	  1405: 	beq			DumpMem
01:00004780 0C010046        	  1406: 	cmpi.b	#'F',d1
01:00004784 670001C2        	  1407: 	beq			FillMem
01:00004788 0C010042        	  1408: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:0000478C 6606            	  1409: 	bne.s	.0001
01:0000478E 4EF9FFFCC000    	  1410: 	jmp			$FFFCC000
                            	  1411: .0001:
01:00004794 0C01004A        	  1412: 	cmpi.b	#'J',d1			; $J - execute code
01:00004798 67000252        	  1413: 	beq			ExecuteCode
01:0000479C 0C01004C        	  1414: 	cmpi.b	#'L',d1			; $L - load S19 file
01:000047A0 6700038C        	  1415: 	beq			LoadS19
01:000047A4 0C01003F        	  1416: 	cmpi.b	#'?',d1			; $? - display help
01:000047A8 673C            	  1417: 	beq			DisplayHelp
01:000047AA 0C010043        	  1418: 	cmpi.b	#'C',d1			; $C - clear screen
01:000047AE 670E            	  1419: 	beq			TestCLS
01:000047B0 0C010054        	  1420: 	cmpi.b	#'T',d1			; $T - run cpu test program
01:000047B4 6604            	  1421: 	bne.s		.0002
01:000047B6 6100B9A0        	  1422: 	bsr			cpu_test
                            	  1423: .0002:
01:000047BA 6000FF62        	  1424: 	bra			Monitor
                            	  1425: 
                            	  1426: TestCLS:
01:000047BE 6100FF52        	  1427: 	bsr			FromScreen
01:000047C2 5242            	  1428: 	addq		#1,d2
01:000047C4 0C01004C        	  1429: 	cmpi.b	#'L',d1
01:000047C8 6600FF54        	  1430: 	bne			Monitor
01:000047CC 6100FF44        	  1431: 	bsr			FromScreen
01:000047D0 5242            	  1432: 	addq		#1,d2
01:000047D2 0C010053        	  1433: 	cmpi.b	#'S',d1
01:000047D6 6600FF46        	  1434: 	bne			Monitor
01:000047DA 610004D2        	  1435: 	bsr			ClearScreen
01:000047DE 6100F7EC        	  1436: 	bsr			HomeCursor
01:000047E2 6000FF3A        	  1437: 	bra			Monitor
                            	  1438: 	
                            	  1439: DisplayHelp:
01:000047E6 43FA000A        	  1440: 	lea			HelpMsg,a1
01:000047EA 6100F7C2        	  1441: 	bsr			DisplayString
01:000047EE 6000FF2E        	  1442: 	bra			Monitor
                            	  1443: 
                            	  1444: HelpMsg:
01:000047F2 3F203D2044697370	  1445: 	dc.b	"? = Display help",CR,LF
01:000047FA 6C61792068656C70
01:00004802 0D
01:00004803 0A
01:00004804 434C53203D20636C	  1446: 	dc.b	"CLS = clear screen",CR,LF
01:0000480C 6561722073637265
01:00004814 656E
01:00004816 0D
01:00004817 0A
01:00004818 3A203D2045646974	  1447: 	dc.b	": = Edit memory bytes",CR,LF
01:00004820 206D656D6F727920
01:00004828 6279746573
01:0000482D 0D
01:0000482E 0A
01:0000482F 46203D2046696C6C	  1448: 	dc.b	"F = Fill memory",CR,LF
01:00004837 206D656D6F7279
01:0000483E 0D
01:0000483F 0A
01:00004840 4C203D204C6F6164	  1449: 	dc.b	"L = Load S19 file",CR,LF
01:00004848 205331392066696C
01:00004850 65
01:00004851 0D
01:00004852 0A
01:00004853 44203D2044756D70	  1450: 	dc.b	"D = Dump memory",CR,LF
01:0000485B 206D656D6F7279
01:00004862 0D
01:00004863 0A
01:00004864 42203D2073746172	  1451: 	dc.b	"B = start tiny basic",CR,LF
01:0000486C 742074696E792062
01:00004874 61736963
01:00004878 0D
01:00004879 0A
01:0000487A 4A203D204A756D70	  1452: 	dc.b	"J = Jump to code",CR,LF
01:00004882 20746F20636F6465
01:0000488A 0D
01:0000488B 0A
01:0000488C 54203D2063707520	  1453: 	dc.b	"T = cpu test program",CR,LF,0
01:00004894 746573742070726F
01:0000489C 6772616D
01:000048A0 0D
01:000048A1 0A
01:000048A2 00
                            	  1454: 	even
                            	  1455: 
                            	  1456: ;------------------------------------------------------------------------------
                            	  1457: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1458: ; Used to fetch a command line. (Not currently used).
                            	  1459: ;
                            	  1460: ; d0.b	- command prompt
                            	  1461: ;------------------------------------------------------------------------------
                            	  1462: 
                            	  1463: GetCmdLine:
01:000048A4 6100F4CC        	  1464: 		bsr		DisplayChar		; display prompt
01:000048A8 103C0020        	  1465: 		move.b	#' ',d0
01:000048AC 6100F4C4        	  1466: 		bsr		DisplayChar
01:000048B0 41F90000041D    	  1467: 		lea		CmdBuf,a0
                            	  1468: .0001:
01:000048B6 6100F87C        	  1469: 		bsr		GetKey
01:000048BA B03C0008        	  1470: 		cmp.b	#CTRLH,d0
01:000048BE 6728            	  1471: 		beq.s	.0003
01:000048C0 B03C0018        	  1472: 		cmp.b	#CTRLX,d0
01:000048C4 6746            	  1473: 		beq.s	.0004
01:000048C6 B03C000D        	  1474: 		cmp.b	#CR,d0
01:000048CA 6706            	  1475: 		beq.s	.0002
01:000048CC B03C0020        	  1476: 		cmp.b	#' ',d0
01:000048D0 65E4            	  1477: 		bcs.s	.0001
                            	  1478: .0002:
01:000048D2 1080            	  1479: 		move.b	d0,(a0)
01:000048D4 5088            	  1480: 		lea			8(a0),a0
01:000048D6 6100F49A        	  1481: 		bsr		DisplayChar
01:000048DA B03C000D        	  1482: 		cmp.b	#CR,d0
01:000048DE 675E            	  1483: 		beq		.0007
01:000048E0 B1FC0000041D    	  1484: 		cmp.l	#CmdBufEnd-1,a0
01:000048E6 65CE            	  1485: 		bcs.s	.0001
                            	  1486: .0003:
01:000048E8 103C0008        	  1487: 		move.b	#CTRLH,d0
01:000048EC 6100F484        	  1488: 		bsr		DisplayChar
01:000048F0 103C0020        	  1489: 		move.b	#' ',d0
01:000048F4 6100F47C        	  1490: 		bsr		DisplayChar
01:000048F8 B1FC0000041D    	  1491: 		cmp.l	#CmdBuf,a0
01:000048FE 63B6            	  1492: 		bls.s	.0001
01:00004900 103C0008        	  1493: 		move.b	#CTRLH,d0
01:00004904 6100F46C        	  1494: 		bsr		DisplayChar
01:00004908 5388            	  1495: 		subq.l	#1,a0
01:0000490A 60AA            	  1496: 		bra.s	.0001
                            	  1497: .0004:
01:0000490C 2208            	  1498: 		move.l	a0,d1
01:0000490E 92BC0000041D    	  1499: 		sub.l	#CmdBuf,d1
01:00004914 671E            	  1500: 		beq.s	.0006
01:00004916 5341            	  1501: 		subq	#1,d1
                            	  1502: .0005:
01:00004918 103C0008        	  1503: 		move.b	#CTRLH,d0
01:0000491C 6100F454        	  1504: 		bsr		DisplayChar
01:00004920 103C0020        	  1505: 		move.b	#' ',d0
01:00004924 6100F44C        	  1506: 		bsr		DisplayChar
01:00004928 103C0008        	  1507: 		move.b	#CTRLH,d0
01:0000492C 6100F444        	  1508: 		bsr		DisplayChar
01:00004930 51C9FFE6        	  1509: 		dbra	d1,.0005
                            	  1510: .0006:
01:00004934 41F90000041D    	  1511: 		lea		CmdBuf,a0
01:0000493A 6000FF7A        	  1512: 		bra		.0001
                            	  1513: .0007:
01:0000493E 103C000A        	  1514: 		move.b	#LF,d0
01:00004942 6100F42E        	  1515: 		bsr		DisplayChar
01:00004946 4E75            	  1516: 		rts
                            	  1517: 
                            	  1518: 		
                            	  1519: ;------------------------------------------------------------------------------
                            	  1520: ; Fill memory
                            	  1521: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1522: ; FW = fill words
                            	  1523: ; FL = fill longs
                            	  1524: ; F = fill bytes
                            	  1525: ;------------------------------------------------------------------------------
                            	  1526: ;
                            	  1527: FillMem:
01:00004948 6100FDC8        	  1528: 	bsr			FromScreen
                            	  1529: 	;bsr		ScreenToAscii
01:0000494C 1801            	  1530: 	move.b	d1,d4			; d4 = fill size
01:0000494E 613E            	  1531: 	bsr			ignBlanks
01:00004950 61000130        	  1532: 	bsr			GetHexNumber
01:00004954 2241            	  1533: 	move.l	d1,a1			; a1 = start
01:00004956 6136            	  1534: 	bsr			ignBlanks
01:00004958 61000128        	  1535: 	bsr			GetHexNumber
01:0000495C 2601            	  1536: 	move.l	d1,d3			; d3 = count
01:0000495E 612E            	  1537: 	bsr			ignBlanks
01:00004960 61000120        	  1538: 	bsr			GetHexNumber	; fill value
01:00004964 0C04004C        	  1539: 	cmpi.b	#'L',d4
01:00004968 660A            	  1540: 	bne			fmem1
                            	  1541: fmemL:
01:0000496A 22C1            	  1542: 	move.l	d1,(a1)+
01:0000496C 5383            	  1543: 	sub.l	#1,d3
01:0000496E 66FA            	  1544: 	bne.s	fmemL
01:00004970 6000FDAC        	  1545: 	bra		Monitor
                            	  1546: fmem1
01:00004974 0C040057        	  1547: 	cmpi.b	#'W',d4
01:00004978 660A            	  1548: 	bne		fmemB
                            	  1549: fmemW:
01:0000497A 32C1            	  1550: 	move.w	d1,(a1)+
01:0000497C 5383            	  1551: 	sub.l	#1,d3
01:0000497E 66FA            	  1552: 	bne.s	fmemW
01:00004980 6000FD9C        	  1553: 	bra		Monitor
                            	  1554: fmemB:
01:00004984 12C1            	  1555: 	move.b	d1,(a1)+
01:00004986 5383            	  1556: 	sub.l	#1,d3
01:00004988 66FA            	  1557: 	bne.s	fmemB
01:0000498A 6000FD92        	  1558: 	bra		Monitor
                            	  1559: 
                            	  1560: ;------------------------------------------------------------------------------
                            	  1561: ; Modifies:
                            	  1562: ;	a0	- text pointer
                            	  1563: ;------------------------------------------------------------------------------
                            	  1564: ;
                            	  1565: ignBlanks:
01:0000498E 2F01            	  1566: 	move.l	d1,-(a7)
                            	  1567: .0001:
01:00004990 6100FD80        	  1568: 	bsr			FromScreen
01:00004994 0C010020        	  1569: 	cmpi.b	#' ',d1
01:00004998 67F6            	  1570: 	beq.s		.0001
01:0000499A 5188            	  1571: 	lea			-8(a0),a0
01:0000499C 221F            	  1572: 	move.l	(a7)+,d1
01:0000499E 4E75            	  1573: 	rts
                            	  1574: 
                            	  1575: ;------------------------------------------------------------------------------
                            	  1576: ; Edit memory byte.
                            	  1577: ;------------------------------------------------------------------------------
                            	  1578: ;
                            	  1579: EditMem:
01:000049A0 61EC            	  1580: 	bsr		ignBlanks
01:000049A2 610000DE        	  1581: 	bsr		GetHexNumber
01:000049A6 2241            	  1582: 	move.l	d1,a1
                            	  1583: edtmem1:
01:000049A8 61E4            	  1584: 	bsr		ignBlanks
01:000049AA 610000D6        	  1585: 	bsr		GetHexNumber
01:000049AE 12C1            	  1586: 	move.b	d1,(a1)+
01:000049B0 61DC            	  1587: 	bsr		ignBlanks
01:000049B2 610000CE        	  1588: 	bsr		GetHexNumber
01:000049B6 12C1            	  1589: 	move.b	d1,(a1)+
01:000049B8 61D4            	  1590: 	bsr		ignBlanks
01:000049BA 610000C6        	  1591: 	bsr		GetHexNumber
01:000049BE 12C1            	  1592: 	move.b	d1,(a1)+
01:000049C0 61CC            	  1593: 	bsr		ignBlanks
01:000049C2 610000BE        	  1594: 	bsr		GetHexNumber
01:000049C6 12C1            	  1595: 	move.b	d1,(a1)+
01:000049C8 61C4            	  1596: 	bsr		ignBlanks
01:000049CA 610000B6        	  1597: 	bsr		GetHexNumber
01:000049CE 12C1            	  1598: 	move.b	d1,(a1)+
01:000049D0 61BC            	  1599: 	bsr		ignBlanks
01:000049D2 610000AE        	  1600: 	bsr		GetHexNumber
01:000049D6 12C1            	  1601: 	move.b	d1,(a1)+
01:000049D8 61B4            	  1602: 	bsr		ignBlanks
01:000049DA 610000A6        	  1603: 	bsr		GetHexNumber
01:000049DE 12C1            	  1604: 	move.b	d1,(a1)+
01:000049E0 61AC            	  1605: 	bsr		ignBlanks
01:000049E2 6100009E        	  1606: 	bsr		GetHexNumber
01:000049E6 12C1            	  1607: 	move.b	d1,(a1)+
01:000049E8 6000FD34        	  1608: 	bra		Monitor
                            	  1609: 
                            	  1610: ;------------------------------------------------------------------------------
                            	  1611: ; Execute code at the specified address.
                            	  1612: ;------------------------------------------------------------------------------
                            	  1613: 
                            	  1614: ExecuteCode:
01:000049EC 61A0            	  1615: 	bsr			ignBlanks
01:000049EE 61000092        	  1616: 	bsr			GetHexNumber
01:000049F2 2041            	  1617: 	move.l	d1,a0
01:000049F4 4E90            	  1618: 	jsr			(a0)
01:000049F6 6000FD26        	  1619: 	bra     Monitor
                            	  1620: 
                            	  1621: ;------------------------------------------------------------------------------
                            	  1622: ; Do a memory dump of the requested location.
                            	  1623: ; D 0800 0850
                            	  1624: ;------------------------------------------------------------------------------
                            	  1625: 
                            	  1626: DumpMem:
01:000049FA 6192            	  1627: 	bsr			ignBlanks
01:000049FC 61000084        	  1628: 	bsr			GetHexNumber
01:00004A00 6700FD1C        	  1629: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
01:00004A04 2601            	  1630: 	move.l	d1,d3				; save off start of range
01:00004A06 6186            	  1631: 	bsr			ignBlanks
01:00004A08 6178            	  1632: 	bsr			GetHexNumber
01:00004A0A 6608            	  1633: 	bne.s		DumpMem1
01:00004A0C 2203            	  1634: 	move.l	d3,d1
01:00004A0E 068100000040    	  1635: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1636: DumpMem1:
01:00004A14 2043            	  1637: 	move.l	d3,a0
01:00004A16 2241            	  1638: 	move.l	d1,a1
01:00004A18 6100F310        	  1639: 	bsr			CRLF
                            	  1640: .0001:
01:00004A1C B3C8            	  1641: 	cmpa.l	a0,a1
01:00004A1E 6300FCFE        	  1642: 	bls			Monitor
01:00004A22 6102            	  1643: 	bsr			DisplayMem
01:00004A24 60F6            	  1644: 	bra.s		.0001
                            	  1645: 
                            	  1646: ;------------------------------------------------------------------------------
                            	  1647: ; Display memory dump in a format suitable for edit.
                            	  1648: ;
                            	  1649: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  1650: ;
                            	  1651: ; Modifies:
                            	  1652: ;		d1,d2,a0
                            	  1653: ;------------------------------------------------------------------------------
                            	  1654: 
                            	  1655: DisplayMem:
01:00004A26 123C003A        	  1656: 	move.b	#':',d1
01:00004A2A 6100F346        	  1657: 	bsr			DisplayChar
01:00004A2E 2208            	  1658: 	move.l	a0,d1
01:00004A30 610000D0        	  1659: 	bsr			DisplayTetra
01:00004A34 7407            	  1660: 	moveq		#7,d2
                            	  1661: dspmem1:
01:00004A36 123C0020        	  1662: 	move.b	#' ',d1
01:00004A3A 6100F336        	  1663: 	bsr			DisplayChar
01:00004A3E 1218            	  1664: 	move.b	(a0)+,d1
01:00004A40 610000CC        	  1665: 	bsr			DisplayByte
01:00004A44 51CAFFF0        	  1666: 	dbra		d2,dspmem1
01:00004A48 6100009E        	  1667: 	bsr			DisplayTwoSpaces
01:00004A4C 123C0022        	  1668: 	move.b	#34,d1
01:00004A50 6100F320        	  1669: 	bsr			DisplayChar
01:00004A54 5188            	  1670: 	lea			-8(a0),a0
01:00004A56 7407            	  1671: 	moveq		#7,d2
                            	  1672: .0002:	
01:00004A58 1218            	  1673: 	move.b	(a0)+,d1
01:00004A5A B23C0020        	  1674: 	cmp.b		#' ',d1
01:00004A5E 6506            	  1675: 	blo.s		.0003
01:00004A60 B23C007F        	  1676: 	cmp.b		#127,d1
01:00004A64 6304            	  1677: 	bls.s		.0001
                            	  1678: .0003:
01:00004A66 123C002E        	  1679: 	move.b	#'.',d1
                            	  1680: .0001:
01:00004A6A 6100F306        	  1681: 	bsr			DisplayChar
01:00004A6E 51CAFFE8        	  1682: 	dbra		d2,.0002
01:00004A72 123C0022        	  1683: 	move.b	#34,d1
01:00004A76 6100F2FA        	  1684: 	bsr			DisplayChar
01:00004A7A 6100F732        	  1685: 	bsr			CheckForCtrlC
01:00004A7E 6000F2AA        	  1686: 	bra			CRLF
                            	  1687: 
                            	  1688: ;------------------------------------------------------------------------------
                            	  1689: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1690: ;
                            	  1691: ; Returns:
                            	  1692: ;		d0 = number of digits
                            	  1693: ;		d1 = value of number
                            	  1694: ;		zf = number of digits == 0
                            	  1695: ;------------------------------------------------------------------------------
                            	  1696: ;
                            	  1697: GetHexNumber:
01:00004A82 2F02            	  1698: 	move.l	d2,-(a7)
01:00004A84 7400            	  1699: 	clr.l		d2
01:00004A86 7000            	  1700: 	moveq		#0,d0
                            	  1701: .0002:
01:00004A88 6100FC88        	  1702: 	bsr			FromScreen
01:00004A8C 6120            	  1703: 	bsr			AsciiToHexNybble
01:00004A8E B23C00FF        	  1704: 	cmp.b		#$ff,d1
01:00004A92 6712            	  1705: 	beq.s		.0001
01:00004A94 E98A            	  1706: 	lsl.l		#4,d2
01:00004A96 02810000000F    	  1707: 	andi.l	#$0f,d1
01:00004A9C 8481            	  1708: 	or.l		d1,d2
01:00004A9E 5240            	  1709: 	addq		#1,d0
01:00004AA0 0C000008        	  1710: 	cmpi.b	#8,d0
01:00004AA4 65E2            	  1711: 	blo.s		.0002
                            	  1712: .0001:
01:00004AA6 2202            	  1713: 	move.l	d2,d1
01:00004AA8 241F            	  1714: 	move.l	(a7)+,d2
01:00004AAA 4A00            	  1715: 	tst.b		d0
01:00004AAC 4E75            	  1716: 	rts	
                            	  1717: 
                            	  1718: ;------------------------------------------------------------------------------
                            	  1719: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  1720: ; to a hex nybble.
                            	  1721: ;------------------------------------------------------------------------------
                            	  1722: 
                            	  1723: AsciiToHexNybble:
01:00004AAE 0C010030        	  1724: 	cmpi.b	#'0',d1
01:00004AB2 6530            	  1725: 	blo.s		gthx3
01:00004AB4 0C010039        	  1726: 	cmpi.b	#'9',d1
01:00004AB8 6206            	  1727: 	bhi.s		gthx5
01:00004ABA 04010030        	  1728: 	subi.b	#'0',d1
01:00004ABE 4E75            	  1729: 	rts
                            	  1730: gthx5:
01:00004AC0 0C010041        	  1731: 	cmpi.b	#'A',d1
01:00004AC4 651E            	  1732: 	blo.s		gthx3
01:00004AC6 0C010046        	  1733: 	cmpi.b	#'F',d1
01:00004ACA 6206            	  1734: 	bhi.s		gthx6
01:00004ACC 060100C9        	  1735: 	addi.b	#10-'A',d1
01:00004AD0 4E75            	  1736: 	rts
                            	  1737: gthx6:
01:00004AD2 0C010061        	  1738: 	cmpi.b	#'a',d1
01:00004AD6 650C            	  1739: 	blo.s		gthx3
01:00004AD8 0C010066        	  1740: 	cmpi.b	#'f',d1
01:00004ADC 6206            	  1741: 	bhi.s		gthx3
01:00004ADE 060100A9        	  1742: 	addi.b	#10-'a',d1
01:00004AE2 4E75            	  1743: 	rts
                            	  1744: gthx3:
01:00004AE4 72FF            	  1745: 	moveq	#-1,d1		; not a hex number
01:00004AE6 4E75            	  1746: 	rts
                            	  1747: 
                            	  1748: ;------------------------------------------------------------------------------
                            	  1749: ;------------------------------------------------------------------------------
                            	  1750: 
                            	  1751: DisplayTwoSpaces:
01:00004AE8 2F01            	  1752: 	move.l	d1,-(a7)
01:00004AEA 123C0020        	  1753: 	move.b	#' ',d1
01:00004AEE 6100F282        	  1754: 	bsr			DisplayChar
                            	  1755: dspspc1:
01:00004AF2 6100F27E        	  1756: 	bsr			DisplayChar
01:00004AF6 221F            	  1757: 	move.l	(a7)+,d1
01:00004AF8 4E75            	  1758: 	rts
                            	  1759: 
                            	  1760: DisplaySpace:
01:00004AFA 2F01            	  1761: 	move.l	d1,-(a7)
01:00004AFC 123C0020        	  1762: 	move.b	#' ',d1
01:00004B00 60F0            	  1763: 	bra			dspspc1
                            	  1764: 
                            	  1765: ;------------------------------------------------------------------------------
                            	  1766: ; Display the 32 bit word in D1.L
                            	  1767: ;------------------------------------------------------------------------------
                            	  1768: 
                            	  1769: DisplayTetra:
01:00004B02 4841            	  1770: 	swap	d1
01:00004B04 6102            	  1771: 	bsr		DisplayWyde
01:00004B06 4841            	  1772: 	swap	d1
                            	  1773: 
                            	  1774: ;------------------------------------------------------------------------------
                            	  1775: ; Display the byte in D1.W
                            	  1776: ;------------------------------------------------------------------------------
                            	  1777: 
                            	  1778: DisplayWyde:
01:00004B08 E059            	  1779: 	ror.w		#8,d1
01:00004B0A 6102            	  1780: 	bsr			DisplayByte
01:00004B0C E159            	  1781: 	rol.w		#8,d1
                            	  1782: 
                            	  1783: ;------------------------------------------------------------------------------
                            	  1784: ; Display the byte in D1.B
                            	  1785: ;------------------------------------------------------------------------------
                            	  1786: 
                            	  1787: DisplayByte:
01:00004B0E E819            	  1788: 	ror.b		#4,d1
01:00004B10 6102            	  1789: 	bsr			DisplayNybble
01:00004B12 E919            	  1790: 	rol.b		#4,d1
                            	  1791: 
                            	  1792: ;------------------------------------------------------------------------------
                            	  1793: ; Display nybble in D1.B
                            	  1794: ;------------------------------------------------------------------------------
                            	  1795: 
                            	  1796: DisplayNybble:
01:00004B14 2F01            	  1797: 	move.l	d1,-(a7)
01:00004B16 0201000F        	  1798: 	andi.b	#$F,d1
01:00004B1A 06010030        	  1799: 	addi.b	#'0',d1
01:00004B1E 0C010039        	  1800: 	cmpi.b	#'9',d1
01:00004B22 6302            	  1801: 	bls.s		.0001
01:00004B24 5E01            	  1802: 	addi.b	#7,d1
                            	  1803: .0001:
01:00004B26 6100F24A        	  1804: 	bsr			DisplayChar
01:00004B2A 221F            	  1805: 	move.l	(a7)+,d1
01:00004B2C 4E75            	  1806: 	rts
                            	  1807: 
                            	  1808: ;------------------------------------------------------------------------------
                            	  1809: ;------------------------------------------------------------------------------
                            	  1810: ;
                            	  1811: ;DisplayHexNumber:
                            	  1812: ;	move.w	#$A6A6,leds		; diagnostics
                            	  1813: ;	move.l	#VDGREG,a6
                            	  1814: ;	move.w	#7,d2		; number-1 of digits to display
                            	  1815: ;disphnum1:
                            	  1816: ;	move.b	d1,d0		; get digit into d0.b
                            	  1817: ;	andi.w	#$0f,d0
                            	  1818: ;	cmpi.w	#$09,d0
                            	  1819: ;	bls.s	disphnum2
                            	  1820: ;	addi.w	#7,d0
                            	  1821: ;disphnum2:
                            	  1822: ;	addi.w	#$30,d0	; convert to display char
                            	  1823: ;	move.w	d2,d3		; char count into d3
                            	  1824: ;	asl.w	#3,d3		; scale * 8
                            	  1825: ;disphnum3:
                            	  1826: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  1827: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  1828: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  1829: ;	ext.w	d0						; zero out high order bits
                            	  1830: ;	move.w	d0,$420(a6)			; set char code
                            	  1831: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  1832: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  1833: ;	move.w	d3,$426(a6)			; set x pos
                            	  1834: ;	move.w	#8,$428(a6)			; set y pos
                            	  1835: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  1836: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  1837: ;	ror.l	#4,d1					; rot to next digit
                            	  1838: ;	dbeq	d2,disphnum1
                            	  1839: ;	jmp		(a5)
                            	  1840: 
                            	  1841: ;==============================================================================
                            	  1842: ; Load an S19 format file
                            	  1843: ;==============================================================================
                            	  1844: ;
                            	  1845: LoadS19:
01:00004B2E 600A            	  1846: 	bra			ProcessRec
                            	  1847: NextRec:
01:00004B30 6100015A        	  1848: 	bsr			sGetChar
01:00004B34 0C00000A        	  1849: 	cmpi.b	#LF,d0
01:00004B38 66F6            	  1850: 	bne			NextRec
                            	  1851: ProcessRec
01:00004B3A 61000150        	  1852: 	bsr			sGetChar
01:00004B3E 1800            	  1853: 	move.b	d0,d4
01:00004B40 0C04001A        	  1854: 	cmpi.b	#26,d4		; CTRL-Z ?
01:00004B44 6700FBD8        	  1855: 	beq			Monitor
01:00004B48 0C040053        	  1856: 	cmpi.b	#'S',d4
01:00004B4C 66E2            	  1857: 	bne			NextRec
01:00004B4E 6100013C        	  1858: 	bsr			sGetChar
01:00004B52 1800            	  1859: 	move.b	d0,d4
01:00004B54 0C040030        	  1860: 	cmpi.b	#'0',d4
01:00004B58 65D6            	  1861: 	blo			NextRec
01:00004B5A 0C040039        	  1862: 	cmpi.b	#'9',d4		; d4 = record type
01:00004B5E 62D0            	  1863: 	bhi			NextRec
01:00004B60 6100012A        	  1864: 	bsr			sGetChar
01:00004B64 6100FF48        	  1865: 	bsr			AsciiToHexNybble
01:00004B68 1401            	  1866: 	move.b	d1,d2
01:00004B6A 61000120        	  1867: 	bsr		sGetChar
01:00004B6E 6100FF3E        	  1868: 	bsr		AsciiToHexNybble
01:00004B72 E90A            	  1869: 	lsl.b	#4,d2
01:00004B74 8202            	  1870: 	or.b	d2,d1		; d1 = byte count
01:00004B76 1601            	  1871: 	move.b	d1,d3		; d3 = byte count
01:00004B78 0C040030        	  1872: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
01:00004B7C 67B2            	  1873: 	beq		NextRec
01:00004B7E 0C040031        	  1874: 	cmpi.b	#'1',d4
01:00004B82 676A            	  1875: 	beq		ProcessS1
01:00004B84 0C040032        	  1876: 	cmpi.b	#'2',d4
01:00004B88 6768            	  1877: 	beq		ProcessS2
01:00004B8A 0C040033        	  1878: 	cmpi.b	#'3',d4
01:00004B8E 6766            	  1879: 	beq		ProcessS3
01:00004B90 0C040035        	  1880: 	cmpi.b	#'5',d4		; record count record, ignore
01:00004B94 679A            	  1881: 	beq		NextRec
01:00004B96 0C040037        	  1882: 	cmpi.b	#'7',d4
01:00004B9A 675E            	  1883: 	beq		ProcessS7
01:00004B9C 0C040038        	  1884: 	cmpi.b	#'8',d4
01:00004BA0 6764            	  1885: 	beq		ProcessS8
01:00004BA2 0C040039        	  1886: 	cmpi.b	#'9',d4
01:00004BA6 676A            	  1887: 	beq		ProcessS9
01:00004BA8 6086            	  1888: 	bra		NextRec
                            	  1889: 
                            	  1890: pcssxa
01:00004BAA 024300FF        	  1891: 	andi.w	#$ff,d3
01:00004BAE 5343            	  1892: 	subi.w	#1,d3			; one less for dbra
                            	  1893: .0001
01:00004BB0 7400            	  1894: 	clr.l		d2
01:00004BB2 610000D8        	  1895: 	bsr			sGetChar
01:00004BB6 6100FEF6        	  1896: 	bsr			AsciiToHexNybble
01:00004BBA E98A            	  1897: 	lsl.l		#4,d2
01:00004BBC 8401            	  1898: 	or.b		d1,d2
01:00004BBE 610000CC        	  1899: 	bsr			sGetChar
01:00004BC2 6100FEEA        	  1900: 	bsr			AsciiToHexNybble
01:00004BC6 E98A            	  1901: 	lsl.l		#4,d2
01:00004BC8 8401            	  1902: 	or.b		d1,d2
01:00004BCA 12C2            	  1903: 	move.b	d2,(a1)+
01:00004BCC 51CBFFE2        	  1904: 	dbra		d3,.0001
                            	  1905: ; Get the checksum byte
01:00004BD0 7400            	  1906: 	clr.l		d2
01:00004BD2 610000B8        	  1907: 	bsr			sGetChar
01:00004BD6 6100FED6        	  1908: 	bsr			AsciiToHexNybble
01:00004BDA E98A            	  1909: 	lsl.l		#4,d2
01:00004BDC 8401            	  1910: 	or.b		d1,d2
01:00004BDE 610000AC        	  1911: 	bsr			sGetChar
01:00004BE2 6100FECA        	  1912: 	bsr			AsciiToHexNybble
01:00004BE6 E98A            	  1913: 	lsl.l		#4,d2
01:00004BE8 8401            	  1914: 	or.b		d1,d2
01:00004BEA 6000FF44        	  1915: 	bra			NextRec
                            	  1916: 
                            	  1917: ProcessS1:
01:00004BEE 612E            	  1918: 	bsr			S19Get16BitAddress
01:00004BF0 60B8            	  1919: 	bra			pcssxa
                            	  1920: ProcessS2:
01:00004BF2 6136            	  1921: 	bsr			S19Get24BitAddress
01:00004BF4 60B4            	  1922: 	bra			pcssxa
                            	  1923: ProcessS3:
01:00004BF6 613E            	  1924: 	bsr			S19Get32BitAddress
01:00004BF8 60B0            	  1925: 	bra			pcssxa
                            	  1926: ProcessS7:
01:00004BFA 613A            	  1927: 	bsr			S19Get32BitAddress
01:00004BFC 23C900000414    	  1928: 	move.l	a1,S19StartAddress
01:00004C02 6000FB1A        	  1929: 	bra			Monitor
                            	  1930: ProcessS8:
01:00004C06 6122            	  1931: 	bsr			S19Get24BitAddress
01:00004C08 23C900000414    	  1932: 	move.l	a1,S19StartAddress
01:00004C0E 6000FB0E        	  1933: 	bra			Monitor
                            	  1934: ProcessS9:
01:00004C12 610A            	  1935: 	bsr			S19Get16BitAddress
01:00004C14 23C900000414    	  1936: 	move.l	a1,S19StartAddress
01:00004C1A 6000FB02        	  1937: 	bra			Monitor
                            	  1938: 
                            	  1939: S19Get16BitAddress:
01:00004C1E 7400            	  1940: 	clr.l		d2
01:00004C20 616A            	  1941: 	bsr			sGetChar
01:00004C22 6100FE8A        	  1942: 	bsr			AsciiToHexNybble
01:00004C26 1401            	  1943: 	move.b	d1,d2
01:00004C28 603E            	  1944: 	bra			S1932b
                            	  1945: 
                            	  1946: S19Get24BitAddress:
01:00004C2A 7400            	  1947: 	clr.l	d2
01:00004C2C 615E            	  1948: 	bsr		sGetChar
01:00004C2E 6100FE7E        	  1949: 	bsr		AsciiToHexNybble
01:00004C32 1401            	  1950: 	move.b	d1,d2
01:00004C34 601E            	  1951: 	bra		S1932a
                            	  1952: 
                            	  1953: S19Get32BitAddress:
01:00004C36 7400            	  1954: 	clr.l	d2
01:00004C38 6152            	  1955: 	bsr			sGetChar
01:00004C3A 6100FE72        	  1956: 	bsr			AsciiToHexNybble
01:00004C3E 1401            	  1957: 	move.b	d1,d2
01:00004C40 614A            	  1958: 	bsr			sGetChar
01:00004C42 6100FE6A        	  1959: 	bsr			AsciiToHexNybble
01:00004C46 E98A            	  1960: 	lsl.l		#4,d2
01:00004C48 8401            	  1961: 	or.b		d1,d2
01:00004C4A 6140            	  1962: 	bsr			sGetChar
01:00004C4C 6100FE60        	  1963: 	bsr			AsciiToHexNybble
01:00004C50 E98A            	  1964: 	lsl.l		#4,d2
01:00004C52 8401            	  1965: 	or.b		d1,d2
                            	  1966: S1932a:
01:00004C54 6136            	  1967: 	bsr			sGetChar
01:00004C56 6100FE56        	  1968: 	bsr			AsciiToHexNybble
01:00004C5A E98A            	  1969: 	lsl.l		#4,d2
01:00004C5C 8401            	  1970: 	or.b		d1,d2
01:00004C5E 612C            	  1971: 	bsr			sGetChar
01:00004C60 6100FE4C        	  1972: 	bsr			AsciiToHexNybble
01:00004C64 E98A            	  1973: 	lsl.l		#4,d2
01:00004C66 8401            	  1974: 	or.b		d1,d2
                            	  1975: S1932b:
01:00004C68 6122            	  1976: 	bsr			sGetChar
01:00004C6A 6100FE42        	  1977: 	bsr			AsciiToHexNybble
01:00004C6E E98A            	  1978: 	lsl.l		#4,d2
01:00004C70 8401            	  1979: 	or.b		d1,d2
01:00004C72 6118            	  1980: 	bsr			sGetChar
01:00004C74 6100FE38        	  1981: 	bsr			AsciiToHexNybble
01:00004C78 E98A            	  1982: 	lsl.l		#4,d2
01:00004C7A 8401            	  1983: 	or.b		d1,d2
01:00004C7C 610E            	  1984: 	bsr			sGetChar
01:00004C7E 6100FE2E        	  1985: 	bsr			AsciiToHexNybble
01:00004C82 E98A            	  1986: 	lsl.l		#4,d2
01:00004C84 8401            	  1987: 	or.b		d1,d2
01:00004C86 7800            	  1988: 	clr.l		d4
01:00004C88 2242            	  1989: 	move.l	d2,a1
01:00004C8A 4E75            	  1990: 	rts
                            	  1991: 
                            	  1992: ;------------------------------------------------------------------------------
                            	  1993: ; Get a character from auxillary input, checking the keyboard status for a
                            	  1994: ; CTRL-C
                            	  1995: ;------------------------------------------------------------------------------
                            	  1996: ;
                            	  1997: sGetChar:
01:00004C8C 6100F494        	  1998: 	bsr			CheckForKey
01:00004C90 670C            	  1999: 	beq			.0001
01:00004C92 6100F4A0        	  2000: 	bsr			GetKey
01:00004C96 0C010003        	  2001: 	cmpi.b	#CTRLC,d1
01:00004C9A 6700FA82        	  2002: 	beq			Monitor
                            	  2003: .0001:
01:00004C9E 6114            	  2004: 	bsr			AUXIN
01:00004CA0 4A80            	  2005: 	tst.l		d0
01:00004CA2 6BE8            	  2006: 	bmi			sGetChar
01:00004CA4 1200            	  2007: 	move.b	d0,d1
01:00004CA6 4E75            	  2008: 	rts
                            	  2009: 
                            	  2010: AudioInputTest:
01:00004CA8 4E75            	  2011: 	rts
                            	  2012: BouncingBalls:
01:00004CAA 4E75            	  2013: 	rts
                            	  2014: GraphicsDemo:
01:00004CAC 4E75            	  2015: 	rts
                            	  2016: ClearScreen:
01:00004CAE 6000F03A        	  2017: 	bra		clear_screen
01:00004CB2 4E75            	  2018: 	rts
                            	  2019: 
                            	  2020: AUXIN:
                            	  2021: 
                            	  2022: ;------------------------------------------------------------------------------
                            	  2023: ; SerialPeekChar
                            	  2024: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2025: ; buffer.
                            	  2026: ;
                            	  2027: ; Stack Space:
                            	  2028: ;		0 words
                            	  2029: ; Parameters:
                            	  2030: ;		none
                            	  2031: ; Modifies:
                            	  2032: ;		d
                            	  2033: ; Returns:
                            	  2034: ;		d0 = character or -1
                            	  2035: ;------------------------------------------------------------------------------
                            	  2036: 
                            	  2037: SerialPeekCharDirect:
                            	  2038: 	; Disallow interrupts between status read and rx read.
01:00004CB4 40E7            	  2039: 	move.w	sr,-(a7)					; save off SR
01:00004CB6 007C7000        	  2040: 	ori.w		#$7000,sr					; disable interrupts
01:00004CBA 2039FD060004    	  2041: 	move.l	ACIA+ACIA_STAT,d0	; get serial status
01:00004CC0 08000003        	  2042: 	btst		#3,d0							; look for Rx not empty
01:00004CC4 670A            	  2043: 	beq.s		.0001
01:00004CC6 7000            	  2044: 	moveq.l	#0,d0							; clear upper bits of return value
01:00004CC8 2039FD060000    	  2045: 	move.l	ACIA+ACIA_RX,d0		; get data from ACIA
01:00004CCE 4E73            	  2046: 	rte												; restore SR and return
                            	  2047: .0001:
01:00004CD0 70FF            	  2048: 	moveq		#-1,d0
01:00004CD2 4E73            	  2049: 	rte
                            	  2050: 
                            	  2051: irq_rout:
01:00004CD4 2F08            	  2052: 	move.l	a0,-(a7)
01:00004CD6 207900000410    	  2053: 	move.l	TextScr,a0
01:00004CDC 52A801F0        	  2054: 	addi.l	#1,496(a0)
01:00004CE0 205F            	  2055: 	move.l	(a7)+,a0
01:00004CE2 4E73            	  2056: 	rte
                            	  2057: 
                            	  2058: brdisp_trap:
01:00004CE4 584F            	  2059: 	addq		#4,sp					; get rid of sr
01:00004CE6 43FA0066        	  2060: 	lea			msg_bad_branch_disp,a1
01:00004CEA 6100F2C2        	  2061: 	bsr			DisplayString
01:00004CEE 6100FE0A        	  2062: 	bsr			DisplaySpace
01:00004CF2 221F            	  2063: 	move.l	(sp)+,d1			; pop exception address
01:00004CF4 6100FE0C        	  2064: 	bsr			DisplayTetra	; and display it
01:00004CF8 221F            	  2065: 	move.l	(sp)+,d1			; pop format word
01:00004CFA 6000FA22        	  2066: 	bra			Monitor
                            	  2067: 
                            	  2068: illegal_trap:
01:00004CFE 584F            	  2069: 	addq		#4,sp						; get rid of sr
01:00004D00 221F            	  2070: 	move.l	(sp)+,d1				; pop exception address
01:00004D02 6100FDFE        	  2071: 	bsr			DisplayTetra		; and display it
01:00004D06 43FA0034        	  2072: 	lea			msg_illegal,a1	; followed by message
01:00004D0A 6100F2A2        	  2073: 	bsr			DisplayString
                            	  2074: .0001:
01:00004D0E 60FE            	  2075: 	bra			.0001
01:00004D10 6000FA0C        	  2076: 	bra			Monitor
                            	  2077: 	
                            	  2078: ; -----------------------------------------------------------------------------
                            	  2079: ; -----------------------------------------------------------------------------
                            	  2080: 
                            	  2081: msg_start:
01:00004D14 726636386B205379	  2082: 	dc.b	"rf68k System Starting",CR,LF,0
01:00004D1C 7374656D20537461
01:00004D24 7274696E67
01:00004D29 0D
01:00004D2A 0A
01:00004D2B 00
                            	  2083: msg_core_start:
01:00004D2C 20636F7265207374	  2084: 	dc.b	" core starting",CR,LF
01:00004D34 617274696E67
01:00004D3A 0D
01:00004D3B 0A
                            	  2085: msg_illegal:
01:00004D3C 20696C6C6567616C	  2086: 	dc.b	" illegal opcode",CR,LF,0
01:00004D44 206F70636F6465
01:00004D4B 0D
01:00004D4C 0A
01:00004D4D 00
                            	  2087: msg_bad_branch_disp:
01:00004D4E 206272616E636820	  2088: 	dc.b	" branch selfref: ",0
01:00004D56 73656C667265663A
01:00004D5E 20
01:00004D5F 00
                            	  2089: 
                            	  2090: 
                            	  2091: 


Symbols by name:
ABCD_INNER1                     01:000024D8
ABCD_INNER2                     01:00002546
ABCD_NO_C1                      01:000024F4
ABCD_NO_C2                      01:000024FC
ABCD_NO_C3                      01:00002562
ABCD_NO_C4                      01:0000256A
ABCD_OUTER1                     01:000024D6
ABCD_OUTER2                     01:00002544
ACIA                             E:FD060000
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ADDA_OUTER1                     01:00003040
ADDQ_LOOP1                      01:0000285A
ADDQ_LOOP2                      01:00002898
ADDQ_LOOP3                      01:000028CE
ADDX_LOOP3                      01:00003166
ADDX_LOOP4                      01:00003182
ADDX_LOOP5                      01:0000319E
ADDX_OUTER1                     01:000030D2
ADD_OUTER1                      01:00002E66
ADD_OUTER2                      01:00002EDA
ALL_DONE                        01:0000022E
AND_OUTER1                      01:00002B84
AND_OUTER2                      01:00002BF8
AUXIN                           01:00004CB4
AsciiToHexNybble                01:00004AAE
AudioInputTest                  01:00004CA8
BCC1                            01:00002780
BCC10                           01:000027D2
BCC11                           01:000027DA
BCC12                           01:000027E4
BCC13                           01:000027EC
BCC14                           01:000027F6
BCC2                            01:0000278A
BCC3                            01:00002792
BCC4                            01:0000279C
BCC5                            01:000027A4
BCC6                            01:000027AE
BCC7                            01:000027B6
BCC8                            01:000027C0
BCC9                            01:000027C8
BSR_CLOSE1                      01:0000131E
BSR_CLOSE2                      01:00001354
BSR_FAR1                        01:00000230
BSR_FAR2                        01:00002770
BlankLastLine                   01:00003F6C
BouncingBalls                   01:00004CAA
CMPA_OUTER1                     01:00002D5A
CMPM_LOOP1                      01:00002DE8
CMPM_LOOP2                      01:00002E02
CMPM_LOOP3                      01:00002E1C
CMP_OUTER1                      01:00002CE4
CR                               E:0000000D
CRLF                            01:00003D2A
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003D64
CheckForCtrlC                   01:000041AE
CheckForKey                     01:00004122
ClearScreen                     01:00004CAE
CmdBuf                          00:0000041D
CmdBufEnd                       00:0000041E
Cursor1                         01:000040AC
CursorCol                       00:00000409
CursorRow                       00:00000408
DBCC_LOOP1                      01:00002800
DBCC_LOOP2                      01:0000280E
DIVS_OUTER1                     01:00002A44
DIVU_OUTER1                     01:000029F2
DecrementSemaphore              01:000000F4
Delay3s                         01:00000134
DisplayByte                     01:00004B0E
DisplayChar                     01:00003D72
DisplayHelp                     01:000047E6
DisplayMem                      01:00004A26
DisplayNybble                   01:00004B14
DisplaySpace                    01:00004AFA
DisplayString                   01:00003FAE
DisplayStringCRLF               01:00003FC6
DisplayTetra                    01:00004B02
DisplayTwoSpaces                01:00004AE8
DisplayWyde                     01:00004B08
DumpMem                         01:000049FA
DumpMem1                        01:00004A14
EOR_OUTER2                      01:00002C6E
EXCEPTION_6                     01:00000240
EXCEPTION_7                     01:00000250
EditMem                         01:000049A0
ExecuteCode                     01:000049EC
FillMem                         01:00004948
FromScreen                      01:00004712
GetCmdLine                      01:000048A4
GetHexNumber                    01:00004A82
GetKey                          01:00004134
GraphicsDemo                    01:00004CAC
HelpMsg                         01:000047F2
HomeCursor                      01:00003FCC
IOFocus                          E:00100000
IncCursorPos                    01:00003EE6
IncCursorRow                    01:00003F06
IncrementSemaphore              01:000000DC
InitSemaphores                  01:0000009A
KEYBD                            E:FD0FFE00
KeybdEcho                       00:00000418
KeybdGetChar                    01:000041D0
KeybdGetCharNoWait              01:000041C0
KeybdGetCharWait                01:000041C8
KeybdLEDs                       00:0000041A
KeybdRecvByte                   01:000040D4
KeybdSendByte                   01:000043FA
KeybdSetLEDStatus               01:0000438E
KeybdWaitFlag                   00:00000419
KeybdWaitTx                     01:000040F4
LEA1                            01:00001D2A
LF                               E:0000000A
LoadS19                         01:00004B2E
LockSemaphore                   01:0000010E
MOVE1                           01:00001998
MOVE2                           01:0000191C
MOVE3                           01:00001A18
MOVE4                           01:00001B72
MULS_OUTER1                     01:0000333A
MULU_OUTER1                     01:000032EE
Monitor                         01:0000471E
NBCD_LOOP                       01:000026BE
NBCD_LOOP1                      01:00002704
NBCD_NO_C                       01:000026CA
NBCD_NO_C1                      01:00002718
NBCD_NO_Z                       01:000026CE
NBCD_NO_Z1                      01:0000271C
NextRec                         01:00004B30
OR_OUTER1                       01:00002A9A
OR_OUTER2                       01:00002B0E
ProcessRec                      01:00004B3A
ProcessS1                       01:00004BEE
ProcessS2                       01:00004BF2
ProcessS3                       01:00004BF6
ProcessS7                       01:00004BFA
ProcessS8                       01:00004C06
ProcessS9                       01:00004C12
Prompt1                         01:00004746
Prompt2                         01:00004758
Prompt3                         01:00004736
PromptLn                        01:0000472A
ROXx_FLAGS                      01:00003602
ROXx_LOOP1                      01:00003618
ROXx_LOOP2                      01:00003638
ROXx_LOOP3                      01:00003658
ROXx_LOOP4                      01:00003678
ROXx_LOOP5                      01:00003698
ROXx_LOOP6                      01:000036BA
ROx_FLAGS                       01:000033CC
ROx_LOOP1                       01:000033E2
ROx_LOOP2                       01:00003402
ROx_LOOP3                       01:00003422
ROx_LOOP4                       01:00003442
ROx_LOOP5                       01:00003462
ROx_LOOP6                       01:00003484
RTR_DONE                        01:00002762
S1932a                          01:00004C54
S1932b                          01:00004C68
S19Get16BitAddress              01:00004C1E
S19Get24BitAddress              01:00004C2A
S19Get32BitAddress              01:00004C36
S19StartAddress                 00:00000414
SBCD_INNER1                     01:000025D0
SBCD_INNER2                     01:0000263E
SBCD_NO_C1                      01:000025EC
SBCD_NO_C2                      01:000025F4
SBCD_NO_C3                      01:0000265A
SBCD_NO_C4                      01:00002662
SBCD_OUTER1                     01:000025CE
SBCD_OUTER2                     01:0000263C
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003A7A
SHIFTS2_LOOP1                   01:00003A90
SHIFTS2_LOOP2                   01:00003AAC
SHIFTS2_LOOP3                   01:00003AC8
SHIFTS2_LOOP4                   01:00003AE4
SHIFTS2_LOOP5                   01:00003B00
SHIFTS2_LOOP6                   01:00003B1E
SHIFTS_FLAGS                    01:00003838
SHIFTS_LOOP1                    01:0000384E
SHIFTS_LOOP2                    01:0000386E
SHIFTS_LOOP3                    01:0000388E
SHIFTS_LOOP4                    01:000038AE
SHIFTS_LOOP5                    01:000038CE
SHIFTS_LOOP6                    01:000038F0
SUBA_OUTER1                     01:0000308C
SUBQ_LOOP1                      01:00002918
SUBQ_LOOP2                      01:00002952
SUBQ_LOOP3                      01:00002988
SUBX_LOOP3                      01:00003276
SUBX_LOOP4                      01:00003292
SUBX_LOOP5                      01:000032AE
SUBX_OUTER1                     01:000031E2
SUB_OUTER1                      01:00002F50
SUB_OUTER2                      01:00002FC4
ScrollUp                        01:00003F3A
SerialPeekCharDirect            01:00004CB4
SetKeyboardEcho                 01:0000411A
StartMon                        01:0000471E
StubRout                        01:000040AC
SyncCursor                      01:00003FDE
T15DispatchTable                01:0000400C
TEXTREG                          E:FD03FF00
TRAP15                          01:00003FF4
TestCLS                         01:000047BE
TestSemaphore                   01:000000C0
TextCols                        00:0000040B
TextCurpos                      00:0000040C
TextPos                         00:0000040C
TextRows                        00:0000040A
TextScr                         00:00000410
UnlockSemaphore                 01:00000114
UpdateTextPos                   01:00003D3C
Wait10ms                        01:00004402
_KeyState1                      00:0000041B
_KeyState2                      00:0000041C
_KeybdGetScancode               01:000040C4
_KeybdGetStatus                 01:000040BC
_KeybdInit                      01:000040AE
_keybdControlCodes              01:00004612
_keybdExtendedCodes             01:00004692
_shiftedScanCodes               01:00004512
_unshiftedScanCodes             01:00004412
bkcolor                         00:00000404
brdisp_trap                     01:00004CE4
cfk1                            01:00004130
clear_screen                    01:00003CEA
const_tbl                       00:00000400
cpu_test                        01:00000158
dccr                            01:00003D92
dclf                            01:00003E66
dcx10                           01:00003E02
dcx11                           01:00003E20
dcx12                           01:00003E18
dcx14                           01:00003DAE
dcx16                           01:00003E6A
dcx4                            01:00003E6E
dcx6                            01:00003DB8
dcx7                            01:00003DB2
dcx8                            01:00003DCE
dcx9                            01:00003DE4
dly3s1                          01:00000144
dly3s2                          01:00000142
doBackspace                     01:00003E78
doCtrlX                         01:00003EC2
doDelete                        01:00003E86
do_nothing                      01:00000096
dspj1                           01:00003FB2
dspmem1                         01:00004A36
dspspc1                         01:00004AF2
dsret                           01:00003FC0
edtmem1                         01:000049A8
fgcolor                         00:00000400
fmem1                           01:00004974
fmemB                           01:00004984
fmemL                           01:0000496A
fmemW                           01:0000497A
get_screen_address              01:00003CD0
get_screen_color                01:00003CA4
gthx3                           01:00004AE4
gthx5                           01:00004AC0
gthx6                           01:00004AD2
icc1                            01:00003F38
ignBlanks                       01:0000498E
illegal_trap                    01:00004CFE
irq_rout                        01:00004CD4
leds                             E:FD0FFF00
loop1                           01:00000046
loop2                           01:00000044
loop3                           01:00003D10
msg_bad_branch_disp             01:00004D4E
msg_core_start                  01:00004D2C
msg_illegal                     01:00004D3C
msg_start                       01:00004D14
op_ABCD                         01:000024B6
op_ADD                          01:00002E46
op_ADDA                         01:0000301A
op_ADDQ                         01:00002846
op_ADDX                         01:000030B2
op_ADD_I                        01:00001544
op_AND                          01:00002B64
op_ANDI_TO_CCR                  01:000002F0
op_ANDI_TO_SR                   01:00000316
op_BCC                          01:00002778
op_BCHG                         01:000006EA
op_BCLR                         01:00000A52
op_BOOL_I                       01:00001174
op_BSET                         01:00000DA0
op_BSR                          01:00001326
op_BTST                         01:00000340
op_BTST0                        01:000004CA
op_BTST1                        01:000004D6
op_BTST10                       01:0000051E
op_BTST11                       01:00000526
op_BTST12                       01:0000052C
op_BTST2                        01:000004DE
op_BTST20                       01:00000684
op_BTST21                       01:0000068E
op_BTST22                       01:00000694
op_BTST23                       01:0000069A
op_BTST24                       01:000006A0
op_BTST25                       01:000006A6
op_BTST26                       01:000006AC
op_BTST27                       01:000006B2
op_BTST28                       01:000006B8
op_BTST29                       01:000006BE
op_BTST3                        01:000004E6
op_BTST30                       01:000006C4
op_BTST31                       01:000006CA
op_BTST32                       01:000006CE
op_BTST4                        01:000004EE
op_BTST5                        01:000004F6
op_BTST6                        01:000004FE
op_BTST7                        01:00000506
op_BTST8                        01:0000050E
op_BTST9                        01:00000516
op_CHK                          01:00001DD0
op_CMP                          01:00002CC4
op_CMPA                         01:00002D3A
op_CMPM                         01:00002DA0
op_CMP_I                        01:0000135C
op_DBCC                         01:000027F8
op_DIVS                         01:00002A28
op_DIVU                         01:000029D6
op_EOR                          01:00002C4E
op_EORI_TO_CCR                  01:000002A0
op_EORI_TO_SR                   01:000002C6
op_EXG                          01:0000336A
op_EXT                          01:00001C50
op_LEAPEA                       01:00001C92
op_LINKS                        01:00001DA2
op_MOVE                         01:00001850
op_MOVEM                        01:00002198
op_MOVEP                        01:000010E8
op_MOVEQ                        01:000029BA
op_MOVE_USP                     01:00001DC0
op_MOVE_xxx_FLAGS               01:00001A5C
op_MULS                         01:0000331E
op_MULU                         01:000032D2
op_NBCD                         01:000026A6
op_NEGS                         01:00001E0A
op_OR                           01:00002A7A
op_ORI_TO_CCR                   01:00000258
op_ORI_TO_SR                    01:0000027A
op_ROXx                         01:0000360E
op_ROx                          01:000033D8
op_RTR                          01:00002754
op_SBCD                         01:000025AE
op_SCC                          01:0000281E
op_SHIFTS                       01:00003844
op_SHIFTS2                      01:00003A86
op_SUB                          01:00002F30
op_SUBA                         01:00003066
op_SUBQ                         01:00002900
op_SUBX                         01:000031C2
op_SUB_I                        01:000016CA
op_SWAP                         01:00001C7C
op_TAS                          01:00001D3E
op_TRAPV                        01:00002738
op_TST                          01:00001D64
pcssxa                          01:00004BAA
sGetChar                        01:00004C8C
semamem                          E:FD050000
start                           01:00000000
start_other                     01:00000058

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 ACIA_RX
00000000 start
00000003 CTRLC
00000004 ACIA_STAT
00000008 CTRLH
0000000A LF
0000000D CR
0000000D SC_TAB
00000011 SC_ALT
00000012 SC_LSHIFT
00000014 SC_CTRL
00000018 CTRLX
00000044 loop2
00000046 loop1
00000058 start_other
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
00000096 do_nothing
0000009A InitSemaphores
000000C0 TestSemaphore
000000DC IncrementSemaphore
000000E0 SC_EXTEND
000000F0 SC_KEYUP
000000F4 DecrementSemaphore
0000010E LockSemaphore
00000114 UnlockSemaphore
00000134 Delay3s
00000142 dly3s2
00000144 dly3s1
00000158 cpu_test
0000022E ALL_DONE
00000230 BSR_FAR1
00000240 EXCEPTION_6
00000250 EXCEPTION_7
00000258 op_ORI_TO_CCR
0000027A op_ORI_TO_SR
000002A0 op_EORI_TO_CCR
000002C6 op_EORI_TO_SR
000002F0 op_ANDI_TO_CCR
00000316 op_ANDI_TO_SR
00000340 op_BTST
00000400 const_tbl
00000400 fgcolor
00000404 bkcolor
00000408 CursorRow
00000409 CursorCol
0000040A TextRows
0000040B TextCols
0000040C TextPos
0000040C TextCurpos
00000410 TextScr
00000414 S19StartAddress
00000418 KeybdEcho
00000419 KeybdWaitFlag
0000041A KeybdLEDs
0000041B _KeyState1
0000041C _KeyState2
0000041D CmdBuf
0000041E CmdBufEnd
000004CA op_BTST0
000004D6 op_BTST1
000004DE op_BTST2
000004E6 op_BTST3
000004EE op_BTST4
000004F6 op_BTST5
000004FE op_BTST6
00000506 op_BTST7
0000050E op_BTST8
00000516 op_BTST9
0000051E op_BTST10
00000526 op_BTST11
0000052C op_BTST12
00000684 op_BTST20
0000068E op_BTST21
00000694 op_BTST22
0000069A op_BTST23
000006A0 op_BTST24
000006A6 op_BTST25
000006AC op_BTST26
000006B2 op_BTST27
000006B8 op_BTST28
000006BE op_BTST29
000006C4 op_BTST30
000006CA op_BTST31
000006CE op_BTST32
000006EA op_BCHG
00000A52 op_BCLR
00000DA0 op_BSET
000010E8 op_MOVEP
00001174 op_BOOL_I
0000131E BSR_CLOSE1
00001326 op_BSR
00001354 BSR_CLOSE2
0000135C op_CMP_I
00001544 op_ADD_I
000016CA op_SUB_I
00001850 op_MOVE
0000191C MOVE2
00001998 MOVE1
00001A18 MOVE3
00001A5C op_MOVE_xxx_FLAGS
00001B72 MOVE4
00001C50 op_EXT
00001C7C op_SWAP
00001C92 op_LEAPEA
00001D2A LEA1
00001D3E op_TAS
00001D64 op_TST
00001DA2 op_LINKS
00001DC0 op_MOVE_USP
00001DD0 op_CHK
00001E0A op_NEGS
00002198 op_MOVEM
000024B6 op_ABCD
000024D6 ABCD_OUTER1
000024D8 ABCD_INNER1
000024F4 ABCD_NO_C1
000024FC ABCD_NO_C2
00002544 ABCD_OUTER2
00002546 ABCD_INNER2
00002562 ABCD_NO_C3
0000256A ABCD_NO_C4
000025AE op_SBCD
000025CE SBCD_OUTER1
000025D0 SBCD_INNER1
000025EC SBCD_NO_C1
000025F4 SBCD_NO_C2
0000263C SBCD_OUTER2
0000263E SBCD_INNER2
0000265A SBCD_NO_C3
00002662 SBCD_NO_C4
000026A6 op_NBCD
000026BE NBCD_LOOP
000026CA NBCD_NO_C
000026CE NBCD_NO_Z
00002704 NBCD_LOOP1
00002718 NBCD_NO_C1
0000271C NBCD_NO_Z1
00002738 op_TRAPV
00002754 op_RTR
00002762 RTR_DONE
00002770 BSR_FAR2
00002778 op_BCC
00002780 BCC1
0000278A BCC2
00002792 BCC3
0000279C BCC4
000027A4 BCC5
000027AE BCC6
000027B6 BCC7
000027C0 BCC8
000027C8 BCC9
000027D2 BCC10
000027DA BCC11
000027E4 BCC12
000027EC BCC13
000027F6 BCC14
000027F8 op_DBCC
00002800 DBCC_LOOP1
0000280E DBCC_LOOP2
0000281E op_SCC
00002846 op_ADDQ
0000285A ADDQ_LOOP1
00002898 ADDQ_LOOP2
000028CE ADDQ_LOOP3
00002900 op_SUBQ
00002918 SUBQ_LOOP1
00002952 SUBQ_LOOP2
00002988 SUBQ_LOOP3
000029BA op_MOVEQ
000029D6 op_DIVU
000029F2 DIVU_OUTER1
00002A28 op_DIVS
00002A44 DIVS_OUTER1
00002A7A op_OR
00002A9A OR_OUTER1
00002B0E OR_OUTER2
00002B64 op_AND
00002B84 AND_OUTER1
00002BF8 AND_OUTER2
00002C4E op_EOR
00002C6E EOR_OUTER2
00002CC4 op_CMP
00002CE4 CMP_OUTER1
00002D3A op_CMPA
00002D5A CMPA_OUTER1
00002DA0 op_CMPM
00002DE8 CMPM_LOOP1
00002E02 CMPM_LOOP2
00002E1C CMPM_LOOP3
00002E46 op_ADD
00002E66 ADD_OUTER1
00002EDA ADD_OUTER2
00002F30 op_SUB
00002F50 SUB_OUTER1
00002FC4 SUB_OUTER2
0000301A op_ADDA
00003040 ADDA_OUTER1
00003066 op_SUBA
0000308C SUBA_OUTER1
000030B2 op_ADDX
000030D2 ADDX_OUTER1
00003166 ADDX_LOOP3
00003182 ADDX_LOOP4
0000319E ADDX_LOOP5
000031C2 op_SUBX
000031E2 SUBX_OUTER1
00003276 SUBX_LOOP3
00003292 SUBX_LOOP4
000032AE SUBX_LOOP5
000032D2 op_MULU
000032EE MULU_OUTER1
0000331E op_MULS
0000333A MULS_OUTER1
0000336A op_EXG
000033CC ROx_FLAGS
000033D8 op_ROx
000033E2 ROx_LOOP1
00003402 ROx_LOOP2
00003422 ROx_LOOP3
00003442 ROx_LOOP4
00003462 ROx_LOOP5
00003484 ROx_LOOP6
00003602 ROXx_FLAGS
0000360E op_ROXx
00003618 ROXx_LOOP1
00003638 ROXx_LOOP2
00003658 ROXx_LOOP3
00003678 ROXx_LOOP4
00003698 ROXx_LOOP5
000036BA ROXx_LOOP6
00003838 SHIFTS_FLAGS
00003844 op_SHIFTS
0000384E SHIFTS_LOOP1
0000386E SHIFTS_LOOP2
0000388E SHIFTS_LOOP3
000038AE SHIFTS_LOOP4
000038CE SHIFTS_LOOP5
000038F0 SHIFTS_LOOP6
00003A7A SHIFTS2_FLAGS
00003A86 op_SHIFTS2
00003A90 SHIFTS2_LOOP1
00003AAC SHIFTS2_LOOP2
00003AC8 SHIFTS2_LOOP3
00003AE4 SHIFTS2_LOOP4
00003B00 SHIFTS2_LOOP5
00003B1E SHIFTS2_LOOP6
00003CA4 get_screen_color
00003CD0 get_screen_address
00003CEA clear_screen
00003D10 loop3
00003D2A CRLF
00003D3C UpdateTextPos
00003D64 CalcScreenLoc
00003D72 DisplayChar
00003D92 dccr
00003DAE dcx14
00003DB2 dcx7
00003DB8 dcx6
00003DCE dcx8
00003DE4 dcx9
00003E02 dcx10
00003E18 dcx12
00003E20 dcx11
00003E66 dclf
00003E6A dcx16
00003E6E dcx4
00003E78 doBackspace
00003E86 doDelete
00003EC2 doCtrlX
00003EE6 IncCursorPos
00003F06 IncCursorRow
00003F38 icc1
00003F3A ScrollUp
00003F6C BlankLastLine
00003FAE DisplayString
00003FB2 dspj1
00003FC0 dsret
00003FC6 DisplayStringCRLF
00003FCC HomeCursor
00003FDE SyncCursor
00003FF4 TRAP15
0000400C T15DispatchTable
000040AC StubRout
000040AC Cursor1
000040AE _KeybdInit
000040BC _KeybdGetStatus
000040C4 _KeybdGetScancode
000040D4 KeybdRecvByte
000040F4 KeybdWaitTx
0000411A SetKeyboardEcho
00004122 CheckForKey
00004130 cfk1
00004134 GetKey
000041AE CheckForCtrlC
000041C0 KeybdGetCharNoWait
000041C8 KeybdGetCharWait
000041D0 KeybdGetChar
0000438E KeybdSetLEDStatus
000043FA KeybdSendByte
00004402 Wait10ms
00004412 _unshiftedScanCodes
00004512 _shiftedScanCodes
00004612 _keybdControlCodes
00004692 _keybdExtendedCodes
00004712 FromScreen
0000471E Monitor
0000471E StartMon
0000472A PromptLn
00004736 Prompt3
00004746 Prompt1
00004758 Prompt2
000047BE TestCLS
000047E6 DisplayHelp
000047F2 HelpMsg
000048A4 GetCmdLine
00004948 FillMem
0000496A fmemL
00004974 fmem1
0000497A fmemW
00004984 fmemB
0000498E ignBlanks
000049A0 EditMem
000049A8 edtmem1
000049EC ExecuteCode
000049FA DumpMem
00004A14 DumpMem1
00004A26 DisplayMem
00004A36 dspmem1
00004A82 GetHexNumber
00004AAE AsciiToHexNybble
00004AC0 gthx5
00004AD2 gthx6
00004AE4 gthx3
00004AE8 DisplayTwoSpaces
00004AF2 dspspc1
00004AFA DisplaySpace
00004B02 DisplayTetra
00004B08 DisplayWyde
00004B0E DisplayByte
00004B14 DisplayNybble
00004B2E LoadS19
00004B30 NextRec
00004B3A ProcessRec
00004BAA pcssxa
00004BEE ProcessS1
00004BF2 ProcessS2
00004BF6 ProcessS3
00004BFA ProcessS7
00004C06 ProcessS8
00004C12 ProcessS9
00004C1E S19Get16BitAddress
00004C2A S19Get24BitAddress
00004C36 S19Get32BitAddress
00004C54 S1932a
00004C68 S1932b
00004C8C sGetChar
00004CA8 AudioInputTest
00004CAA BouncingBalls
00004CAC GraphicsDemo
00004CAE ClearScreen
00004CB4 AUXIN
00004CB4 SerialPeekCharDirect
00004CD4 irq_rout
00004CE4 brdisp_trap
00004CFE illegal_trap
00004D14 msg_start
00004D2C msg_core_start
00004D3C msg_illegal
00004D4E msg_bad_branch_disp
00100000 IOFocus
