Sections:
00: "DATA" (0-118)
01: "CODE" (0-51F1)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+      <+
                            	     7: ;          | startup sp,pc  | 8 B   |
                            	     8: ; 00000008 +----------------+       |
                            	     9: ;					 |    vectors     | pair shared+
                            	    10: ; 00000400 +----------------+       |
                            	    11: ;					 |   bios mem     |       |
                            	    12: ; 00001000 +----------------+       |
                            	    13: ;					 |   bios code    |       |
                            	    14: ; 00008000 +----------------+      <+
                            	    15: ;					 |    unused      |
                            	    16: ; 00040000 +----------------+
                            	    17: ;					 |   local ram    |
                            	    18: ; 00041000 +----------------+
                            	    19: ;					 |    unused      |
                            	    20: ; 00100000 +----------------+
                            	    21: ;					 |   global ram   |
                            	    22: ; 00101000 +----------------+
                            	    23: ;					 |    unused      |
                            	    24: ; 20000000 +----------------+
                            	    25: ;          |                |
                            	    26: ;          |                |
                            	    27: ;          |                |
                            	    28: ;          :  dram memory   : 512 MB
                            	    29: ;          |                |
                            	    30: ;          |                |
                            	    31: ;          |                |
                            	    32: ; 40000000 +----------------+
                            	    33: ;          |                |
                            	    34: ;          :     unused     :
                            	    35: ;          |                |
                            	    36: ; FFD00000 +----------------+
                            	    37: ;          |                |
                            	    38: ;          :    I/O area    : 1.0 M
                            	    39: ;          |                |
                            	    40: ; FFE00000 +----------------+
                            	    41: ;          |                |
                            	    42: ;          :     unused     :
                            	    43: ;          |                |
                            	    44: ; FFFFFFFF +----------------+
                            	    45: ;
                            	    46: ;-------------------------------------------------------------------------------
                            	    47: ;
                            	    48: CTRLC	EQU		$03
                            	    49: CTRLH	EQU		$08
                            	    50: CTRLX	EQU		$18
                            	    51: LF		EQU		$0A
                            	    52: CR		EQU		$0D
                            	    53: 
                            	    54: SC_F12  EQU    $07
                            	    55: SC_C    EQU    $21
                            	    56: SC_T    EQU    $2C
                            	    57: SC_Z    EQU    $1A
                            	    58: SC_KEYUP	EQU		$F0
                            	    59: SC_EXTEND   EQU		$E0
                            	    60: SC_CTRL		EQU		$14
                            	    61: SC_RSHIFT	EQU		$59
                            	    62: SC_NUMLOCK	EQU		$77
                            	    63: SC_SCROLLLOCK	EQU	$7E
                            	    64: SC_CAPSLOCK		EQU	$58
                            	    65: SC_ALT		EQU		$11
                            	    66: SC_LSHIFT	EQU		$12
                            	    67: SC_DEL		EQU		$71		; extend
                            	    68: SC_LCTRL	EQU		$58
                            	    69: SC_TAB      EQU		$0D
                            	    70: 
                            	    71: TEXTREG		EQU	$FD03FF00
                            	    72: txtscreen	EQU	$FD000000
                            	    73: semamem		EQU	$FD050000
                            	    74: ACIA			EQU	$FD060000
                            	    75: ACIA_RX		EQU	0
                            	    76: ACIA_TX		EQU	0
                            	    77: ACIA_STAT	EQU	4
                            	    78: PLIC			EQU	$FD090000
                            	    79: leds			EQU	$FD0FFF00
                            	    80: keybd			EQU	$FD0FFE00
                            	    81: KEYBD			EQU	$FD0FFE00
                            	    82: rand			EQU	$FD0FFD00
                            	    83: IOFocus		EQU	$00100000
                            	    84: 
                            	    85: 	data
00:00000000 00040FFC        	    86: 	dc.l		$00040FFC
00:00000004 00000000        	    87: 	dc.l		start
00:00000008 00004ED4        	    88: 	dc.l		bus_err
00:0000000C 00000000        	    89: 	dc.l		0
00:00000010 0000517E        	    90: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    91: 	dc.l		0
00:00000018 00000260        	    92: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000270        	    93: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	    94: 	dc.l		0
00:00000024 00000000        	    95: 	dc.l		0
                            	    96: 	
                            	    97: 	; 10
00:00000028 00000000        	    98: 	dc.l		0
00:0000002C 00000000        	    99: 	dc.l		0
00:00000030 00000000        	   100: 	dc.l		0
00:00000034 00000000        	   101: 	dc.l		0
00:00000038 00000000        	   102: 	dc.l		0
00:0000003C 00000000        	   103: 	dc.l		0
00:00000040 00000000        	   104: 	dc.l		0
00:00000044 00000000        	   105: 	dc.l		0
00:00000048 00000000        	   106: 	dc.l		0
00:0000004C 00000000        	   107: 	dc.l		0
                            	   108: 	
                            	   109: 	; 20
00:00000050 00000000        	   110: 	dc.l		0
00:00000054 00000000        	   111: 	dc.l		0
00:00000058 00000000        	   112: 	dc.l		0
00:0000005C 00000000        	   113: 	dc.l		0
00:00000060 00000000        	   114: 	dc.l		0
00:00000064 00000000        	   115: 	dc.l		0
00:00000068 00000000        	   116: 	dc.l		0
00:0000006C 00000000        	   117: 	dc.l		0
00:00000070 00000000        	   118: 	dc.l		0
00:00000074 00000000        	   119: 	dc.l		0
                            	   120: 	
                            	   121: 	; 30
00:00000078 000050A2        	   122: 	dc.l		irq_rout					* IRQ 30 - timer
00:0000007C 00005134        	   123: 	dc.l		nmi_rout
00:00000080 00000000        	   124: 	dc.l		0
00:00000084 00000000        	   125: 	dc.l		0
00:00000088 00000000        	   126: 	dc.l		0
00:0000008C 00004F00        	   127: 	dc.l		trap3							; breakpoint
00:00000090 00000000        	   128: 	dc.l		0
00:00000094 00000000        	   129: 	dc.l		0
00:00000098 00000000        	   130: 	dc.l		0
00:0000009C 00000000        	   131: 	dc.l		0
                            	   132: 
                            	   133: 	; 40
00:000000A0 00000000        	   134: 	dc.l		0
00:000000A4 00000000        	   135: 	dc.l		0
00:000000A8 00000000        	   136: 	dc.l		0
00:000000AC 00000000        	   137: 	dc.l		0
00:000000B0 00000000        	   138: 	dc.l		0
00:000000B4 00000000        	   139: 	dc.l		0
00:000000B8 00000000        	   140: 	dc.l		0
00:000000BC 00004050        	   141: 	dc.l		TRAP15
00:000000C0 00000000        	   142: 	dc.l		0
00:000000C4 00000000        	   143: 	dc.l		0
                            	   144: 
                            	   145: 	; 50	
00:000000C8 00000000        	   146: 	dc.l		0
00:000000CC 00000000        	   147: 	dc.l		0
00:000000D0 00000000        	   148: 	dc.l		0
00:000000D4 00000000        	   149: 	dc.l		0
00:000000D8 00000000        	   150: 	dc.l		0
00:000000DC 00000000        	   151: 	dc.l		0
00:000000E0 00000000        	   152: 	dc.l		0
00:000000E4 00000000        	   153: 	dc.l		0
00:000000E8 00000000        	   154: 	dc.l		0
00:000000EC 00000000        	   155: 	dc.l		0
                            	   156: 
                            	   157: 	; 60
00:000000F0 00000000        	   158: 	dc.l		0
00:000000F4 00000000        	   159: 	dc.l		0
00:000000F8 00000000        	   160: 	dc.l		0
00:000000FC 00005146        	   161: 	dc.l		brdisp_trap
00:00000100 00000000        	   162: 	dc.l		0
00:00000104 00000000        	   163: 	dc.l		0
00:00000108 00000000        	   164: 	dc.l		0
00:0000010C 00000000        	   165: 	dc.l		0
00:00000110 00000000        	   166: 	dc.l		0
00:00000114 00000000        	   167: 	dc.l		0
                            	   168: 
                            	   169: 
                            	   170: ;-------------------------------------------------------------------------------
                            	   171: ;-------------------------------------------------------------------------------
                            	   172: 
                            	   173: ; BIOS variables which must be local (not shared) to each core
                            	   174: 
                            	   175: CursorRow	equ		$40000
                            	   176: CursorCol	equ		$40001
                            	   177: TextPos		equ		$40002
                            	   178: TextCurpos	equ	$40002
                            	   179: TextScr			equ	$40004
                            	   180: S19StartAddress	equ	$40008
                            	   181: KeybdEcho		equ	$4000C
                            	   182: KeybdWaitFlag	equ	$4000D
                            	   183: CmdBuf			equ $40040
                            	   184: CmdBufEnd		equ	$40080
                            	   185: fgColor			equ	$40084
                            	   186: bkColor			equ	$40088
                            	   187: TextRows		equ	$4008C
                            	   188: TextCols		equ	$4008D
                            	   189: Regsave			equ	$40100
                            	   190: numBreakpoints	equ		8
                            	   191: BreakpointFlag	equ		$40200
                            	   192: NumSetBreakpoints	equ	$40202	; to $40203
                            	   193: Breakpoints			equ		$40220	; to $40240
                            	   194: BreakpointWords	equ		$40280	; to $402A0
                            	   195: 
                            	   196: ; Keyboard buffer is in shared memory
                            	   197: KeybdLEDs		equ	$0010000E
                            	   198: _KeyState1	equ	$0010000F
                            	   199: _KeyState2	equ	$00100010
                            	   200: _KeybdHead	equ	$00100011
                            	   201: _KeybdTail	equ	$00100012
                            	   202: _KeybdCnt		equ	$00100013
                            	   203: _KeybdBuf		equ	$00100020
                            	   204: 
                            	   205: 	code
                            	   206: 	align		2
                            	   207: start:
01:00000000 46FC2700        	   208: 	move.w	#$2700,sr				; enable level 6 and higher interrupts
                            	   209: 	; Prepare local variable storage
01:00000004 303C03FF        	   210: 	move.w	#1023,d0					; 1024 longs to clear
01:00000008 41F900040000    	   211: 	lea			$40000,a0					; non shared local memory address
                            	   212: .0111:
01:0000000E 4298            	   213: 	clr.l		(a0)+							; clear the memory area
01:00000010 51C8FFFC        	   214: 	dbra		d0,.0111
01:00000014 23FC001FFFFF0004	   215: 	move.l	#$1fffff,fgColor	; set foreground / background color
01:0000001C 0084
01:0000001E 23FC0000003F0004	   216: 	move.l	#$00003f,bkColor
01:00000026 0088
01:00000028 4E7A0FE0        	   217: 	movec.l	coreno,d0					; get core number (2 to 9)
01:0000002C 5500            	   218: 	subi.b	#2,d0							; adjust (0 to 7)
01:0000002E C0FC4000        	   219: 	mulu		#16384,d0					; compute screen location
01:00000032 0680FD000000    	   220: 	addi.l	#$FD000000,d0
01:00000038 23C000040004    	   221: 	move.l	d0,TextScr
01:0000003E 13FC00400004008D	   222: 	move.b	#64,TextCols			; set rows and columns
01:00000046 13FC00200004008C	   223: 	move.b	#32,TextRows
01:0000004E 4E7A0FE0        	   224: 	movec.l	coreno,d0					; get core number
01:00000052 0C000002        	   225: 	cmpi.b	#2,d0
01:00000056 664A            	   226: 	bne			start_other
01:00000058 13C000100000    	   227: 	move.b	d0,IOFocus				; Set the IO focus in global memory
                            	   228: ;	bsr			InitSemaphores
01:0000005E 610000F6        	   229: 	bsr			Delay3s						; give devices time to reset
01:00000062 61003C92        	   230: 	bsr			clear_screen
                            	   231: 
                            	   232: 	; Write startup message to screen
                            	   233: 
01:00000066 43FA512C        	   234: 	lea			msg_start,a1
01:0000006A 61003F6E        	   235: 	bsr			DisplayString
01:0000006E 7201            	   236: 	moveq.l	#1,d1
01:00000070 610000C4        	   237: 	bsr			UnlockSemaphore	; allow another cpu access
01:00000074 7200            	   238: 	moveq.l	#0,d1
01:00000076 610000BE        	   239: 	bsr			UnlockSemaphore	; allow other cpus to proceed
01:0000007A 33FCA4A4FD0FFF00	   240: 	move.w	#$A4A4,leds			; diagnostics
01:00000082 610040E8        	   241: 	bsr			init_plic				; initialize platform level interrupt controller
01:00000086 60004774        	   242: 	bra			StartMon
01:0000008A 610000EE        	   243: 	bsr			cpu_test
                            	   244: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   245: ;	move.l	a0,64*4
                            	   246: 
                            	   247: loop2:
01:0000008E 70FF            	   248: 	move.l	#-1,d0
                            	   249: loop1:
01:00000090 2200            	   250: 	move.l	d0,d1
01:00000092 E089            	   251: 	lsr.l		#8,d1
01:00000094 E089            	   252: 	lsr.l		#8,d1
01:00000096 13C1FD0FFF00    	   253: 	move.b	d1,leds
01:0000009C 51C8FFF2        	   254: 	dbra		d0,loop1
01:000000A0 60EC            	   255: 	bra			loop2
                            	   256: 
                            	   257: start_other:
01:000000A2 61003C52        	   258: 	bsr			clear_screen
01:000000A6 4E7A1FE0        	   259: 	movec.l	coreno,d1
01:000000AA 61004C60        	   260: 	bsr			DisplayByte
01:000000AE 43FA50FC        	   261: 	lea			msg_core_start,a1
01:000000B2 61003F26        	   262: 	bsr			DisplayString
                            	   263: do_nothing:	
01:000000B6 60004744        	   264: 	bra			StartMon
01:000000BA 60FA            	   265: 	bra			do_nothing
                            	   266: 
                            	   267: ;------------------------------------------------------------------------------
                            	   268: ; Initialize semaphores
                            	   269: ; - all semaphores are set to one except the first one, which is set to zero.
                            	   270: ;
                            	   271: ; Parameters:
                            	   272: ;		<none>
                            	   273: ; Modifies:
                            	   274: ;		<none>
                            	   275: ; Returns:
                            	   276: ;		<none>
                            	   277: ;------------------------------------------------------------------------------
                            	   278: 
                            	   279: InitSemaphores:
01:000000BC 48E7C080        	   280: 	movem.l	d0/d1/a0,-(a7)
01:000000C0 41F9FD050000    	   281: 	lea			semamem,a0
01:000000C6 42284000        	   282: 	move.b	#0,$4000(a0)		; lock the first semaphore
01:000000CA 323C00FE        	   283: 	move.w	#254,d1
01:000000CE 7001            	   284: 	moveq		#1,d0
                            	   285: .0001:
01:000000D0 41E80010        	   286: 	lea			16(a0),a0
01:000000D4 11404000        	   287: 	move.b	d0,$4000(a0)
01:000000D8 51C9FFF6        	   288: 	dbra		d1,.0001
01:000000DC 4CDF0103        	   289: 	movem.l	(a7)+,d0/d1/a0
01:000000E0 4E75            	   290: 	rts
                            	   291: 
                            	   292: ; -----------------------------------------------------------------------------
                            	   293: ; Test a semaphore to see if it is non-zero.
                            	   294: ;
                            	   295: ; Parameters:
                            	   296: ;		d1 semaphore number
                            	   297: ; -----------------------------------------------------------------------------
                            	   298: 
                            	   299: TestSemaphore:
01:000000E2 48E74080        	   300: 	movem.l	d1/a0,-(a7)			; save registers
01:000000E6 41F9FD050000    	   301: 	lea			semamem,a0			; point to semaphore memory
01:000000EC 4881            	   302: 	ext.w		d1							; make d1 word value
01:000000EE E941            	   303: 	asl.w		#4,d1						; align to memory
01:000000F0 06414000        	   304: 	addi.w	#$4000,d1				; point to read / write memory
01:000000F4 4A301000        	   305: 	tst.b		(a0,d1.w)				; read (test) value for zero
01:000000F8 4CDF0102        	   306: 	movem.l	(a7)+,a0/d1			; restore regs
01:000000FC 4E75            	   307: 	rts
                            	   308: 
                            	   309: ; -----------------------------------------------------------------------------
                            	   310: ; Parameters:
                            	   311: ;		d1 semaphore number
                            	   312: ;
                            	   313: ; Side Effects:
                            	   314: ;		increments semaphore, saturates at 255
                            	   315: ;
                            	   316: ; Returns:	
                            	   317: ; 	z flag set if semaphore was zero
                            	   318: ; -----------------------------------------------------------------------------
                            	   319: 
                            	   320: IncrementSemaphore:
01:000000FE 48E74080        	   321: 	movem.l	d1/a0,-(a7)			; save registers
01:00000102 41F9FD050000    	   322: 	lea			semamem,a0			; point to semaphore memory
01:00000108 4881            	   323: 	ext.w		d1							; make d1 word value
01:0000010A E941            	   324: 	asl.w		#4,d1						; align to memory
01:0000010C 4A301001        	   325: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:00000110 4CDF0102        	   326: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000114 4E75            	   327: 	rts
                            	   328: 	
                            	   329: ; -----------------------------------------------------------------------------
                            	   330: ; Parameters:
                            	   331: ;		d1 semaphore number
                            	   332: ;
                            	   333: ; Side Effects:
                            	   334: ;		decrements semaphore, saturates at zero
                            	   335: ;
                            	   336: ; Returns:	
                            	   337: ; 	z flag set if semaphore was zero
                            	   338: ; -----------------------------------------------------------------------------
                            	   339: 
                            	   340: DecrementSemaphore:
01:00000116 48E74080        	   341: 	movem.l	d1/a0,-(a7)			; save registers
01:0000011A 41F9FD050000    	   342: 	lea			semamem,a0			; point to semaphore memory
01:00000120 024100FF        	   343: 	andi.w	#255,d1					; make d1 word value
01:00000124 E941            	   344: 	asl.w		#4,d1						; align to memory
01:00000126 4A301001        	   345: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:0000012A 4CDF0102        	   346: 	movem.l	(a7)+,a0/d1			; restore regs
01:0000012E 4E75            	   347: 	rts
                            	   348: 
                            	   349: ; -----------------------------------------------------------------------------
                            	   350: ; Parameters:
                            	   351: ;		d1 semaphore number
                            	   352: ; -----------------------------------------------------------------------------
                            	   353: 
                            	   354: LockSemaphore:
                            	   355: .0001:
01:00000130 61E4            	   356: 	bsr			DecrementSemaphore
01:00000132 67FC            	   357: 	beq.s		.0001
01:00000134 4E75            	   358: 	rts
                            	   359: 	
                            	   360: ; -----------------------------------------------------------------------------
                            	   361: ; Test a semaphore to see if it is non-zero.
                            	   362: ;
                            	   363: ; Parameters:
                            	   364: ;		d1 semaphore number
                            	   365: ; -----------------------------------------------------------------------------
                            	   366: 
                            	   367: UnlockSemaphore:
01:00000136 48E74080        	   368: 	movem.l	d1/a0,-(a7)			; save registers
01:0000013A 41F9FD050000    	   369: 	lea			semamem,a0			; point to semaphore memory
01:00000140 024100FF        	   370: 	andi.w	#255,d1					; make d1 word value
01:00000144 E941            	   371: 	asl.w		#4,d1						; align to memory
01:00000146 06414000        	   372: 	addi.w	#$4000,d1				; point to read / write memory
01:0000014A 11BC00011000    	   373: 	move.b	#1,(a0,d1.w)		; write one to unlock
01:00000150 4CDF0102        	   374: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000154 4E75            	   375: 	rts
                            	   376: 
                            	   377: ; -----------------------------------------------------------------------------
                            	   378: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   379: ; -----------------------------------------------------------------------------
                            	   380: 
                            	   381: Delay3s:
01:00000156 203C002DC6C0    	   382: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:0000015C 41F9FD0FFF00    	   383: 	lea			leds,a0				; a0 = address of LED output register
01:00000162 6002            	   384: 	bra			dly3s1				; branch to the loop
                            	   385: dly3s2:	
01:00000164 4840            	   386: 	swap		d0						; loop is larger than 16-bits
                            	   387: dly3s1:
01:00000166 2200            	   388: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:00000168 E199            	   389: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:0000016A E199            	   390: 	rol.l		#8,d1
01:0000016C 1081            	   391: 	move.b	d1,(a0)				; set the LEDs
01:0000016E 51C8FFF6        	   392: 	dbra		d0,dly3s1			; decrement and branch back
01:00000172 4840            	   393: 	swap		d0
01:00000174 51C8FFEE        	   394: 	dbra		d0,dly3s2
01:00000178 4E75            	   395: 	rts
                            	   396: 
                            	   397: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
01:0000017A 610000FC        	    84: 	bsr	op_ORI_TO_CCR
01:0000017E 6100011A        	    85: 	bsr	op_ORI_TO_SR
01:00000182 6100013C        	    86: 	bsr	op_EORI_TO_CCR
01:00000186 6100015E        	    87: 	bsr	op_EORI_TO_SR
01:0000018A 61000184        	    88: 	bsr	op_ANDI_TO_CCR
01:0000018E 610001A6        	    89: 	bsr	op_ANDI_TO_SR
01:00000192 610001CC        	    90: 	bsr	op_BTST
01:00000196 61000572        	    91: 	bsr	op_BCHG
01:0000019A 610008D6        	    92: 	bsr	op_BCLR
01:0000019E 61000C20        	    93: 	bsr	op_BSET
01:000001A2 61000F64        	    94: 	bsr op_MOVEP
01:000001A6 61000FEC        	    95: 	bsr op_BOOL_I
01:000001AA 610011D0        	    96: 	bsr op_CMP_I
01:000001AE 610013B4        	    97: 	bsr op_ADD_I
01:000001B2 61001536        	    98: 	bsr op_SUB_I
01:000001B6 610016B8        	    99: 	bsr op_MOVE
01:000001BA 610018C0        	   100: 	bsr op_MOVE_xxx_FLAGS
01:000001BE 61001AB0        	   101: 	bsr op_EXT
01:000001C2 61001AD8        	   102: 	bsr op_SWAP
01:000001C6 61001AEA        	   103: 	bsr op_LEAPEA
01:000001CA 61001B92        	   104: 	bsr op_TAS
01:000001CE 61001BB4        	   105: 	bsr op_TST
01:000001D2 61001BEE        	   106: 	bsr op_LINKS
01:000001D6 61001C08        	   107: 	bsr op_MOVE_USP
01:000001DA 61001C14        	   108: 	bsr op_CHK
01:000001DE 61001C4A        	   109: 	bsr op_NEGS
01:000001E2 61001FD4        	   110: 	bsr op_MOVEM
                            	   111: ** fails
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
01:000001E6 61002570        	   115: 	bsr op_TRAPV
01:000001EA 61002588        	   116: 	bsr op_RTR
01:000001EE 61001156        	   117: 	bsr op_BSR
01:000001F2 610025A2        	   118: 	bsr op_BCC
01:000001F6 6100261E        	   119: 	bsr op_DBCC
01:000001FA 61002640        	   120: 	bsr op_SCC
01:000001FE 61002664        	   121: 	bsr op_ADDQ
01:00000202 6100271A        	   122: 	bsr op_SUBQ
01:00000206 610027D0        	   123: 	bsr op_MOVEQ
                            	   124: *** fails
                            	   125: *	bsr op_DIVU
                            	   126: *	bsr op_DIVS
01:0000020A 6100288C        	   127: 	bsr op_OR
01:0000020E 61002972        	   128: 	bsr op_AND
01:00000212 61002A58        	   129: 	bsr op_EOR
01:00000216 61002ACA        	   130: 	bsr op_CMP
01:0000021A 61002B3C        	   131: 	bsr op_CMPA
                            	   132: *	bsr op_CMPM
01:0000021E 61002C44        	   133: 	bsr op_ADD
01:00000222 61002D2A        	   134: 	bsr op_SUB
01:00000226 61002E10        	   135: 	bsr op_ADDA
01:0000022A 61002E58        	   136: 	bsr op_SUBA
                            	   137: *	bsr op_ADDX	
                            	   138: *	bsr op_SUBX
01:0000022E 610030C0        	   139: 	bsr op_MULU
01:00000232 61003108        	   140: 	bsr op_MULS
01:00000236 61003150        	   141: 	bsr op_EXG
01:0000023A 610031BA        	   142: 	bsr op_ROx
01:0000023E 610033EC        	   143: 	bsr op_ROXx
01:00000242 6100361E        	   144: 	bsr op_SHIFTS
01:00000246 6100385C        	   145: 	bsr op_SHIFTS2
                            	   146: 
01:0000024A 4E75            	   147: 	rts
                            	   148: 	bra ALL_DONE
                            	   149: 
                            	   150: * Loop here when all tests pass
                            	   151: *
                            	   152: 
01:0000024C 60FE            	   153: ALL_DONE: bra.s ALL_DONE
                            	   154: 
01:0000024E 263C33333333    	   155: BSR_FAR1:       move.l #$33333333,d3
01:00000254 4E75            	   156:                 rts
                            	   157: 
                            	   158: ;	moveq		#-1,d0
                            	   159: ;	move.l	d0,$FD0FFF00
                            	   160: ;do_nothing:
                            	   161: ;	bra			*		
                            	   162: 
                            	   163: 
                            	   164: * Exception Vector = 6   CHK Instruction
                            	   165: *
                            	   166: 	align	4
                            	   167: EXCEPTION_6:
01:00000260 2C3CEEEE0006    	   168: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000266 4E73            	   169: 	rte
                            	   170: 
                            	   171: * Exception Vector = 7   TRAPV Instruction
                            	   172: *
                            	   173: 	align	4
                            	   174: EXCEPTION_7:
01:00000270 203C12345678    	   175: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000276 4E73            	   176: 	rte
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_CCR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: op_ORI_TO_CCR:
                            	   184: 
01:00000278 003C00FF        	   185:     ori.b #$FF,CCR
01:0000027C 6AFE            	   186:     bpl.s *                   ; branch if Z clear
01:0000027E 66FE            	   187:     bne.s *                   ; branch if N clear
01:00000280 68FE            	   188:     bvc.s *                   ; branch if V clear
01:00000282 64FE            	   189:     bcc.s *                   ; branch if C clear
                            	   190: 
01:00000284 44FC0000        	   191:     move #$00,CCR
01:00000288 003C0000        	   192:     ori.b #$00,CCR
01:0000028C 67FE            	   193:     beq.s *                   ; branch if Z set
01:0000028E 6BFE            	   194:     bmi.s *                   ; branch if N set
01:00000290 69FE            	   195:     bvs.s *                   ; branch if V set
01:00000292 65FE            	   196:     bcs.s *                   ; branch if C set
                            	   197: 
01:00000294 46FC2700        	   198:     move.w #$2700,SR          ; Put flags back to initial value
                            	   199: 
01:00000298 4E75            	   200:     rts
                            	   201: 
                            	   202: ;-----------------------------------------------------------
                            	   203: ;-----------------------------------------------------------
                            	   204: ; OPCODE : ORI_TO_SR
                            	   205: ;-----------------------------------------------------------
                            	   206: ;-----------------------------------------------------------
                            	   207: 
                            	   208: op_ORI_TO_SR:
                            	   209: 
01:0000029A 00BCFF002FFF    	   210:     ori.l #$FF002FFF,SR
01:000002A0 6AFE            	   211:     bpl.s *                   * branch if Z clear
01:000002A2 66FE            	   212:     bne.s *                   * branch if N clear
01:000002A4 68FE            	   213:     bvc.s *                   * branch if V clear
01:000002A6 64FE            	   214:     bcc.s *                   * branch if C clear
                            	   215: 
01:000002A8 46FC2000        	   216:     move.w #$2000,SR
01:000002AC 00BC00000000    	   217:     ori.l #$0000,SR
01:000002B2 67FE            	   218:     beq.s *                   * branch if Z set
01:000002B4 6BFE            	   219:     bmi.s *                   * branch if N set
01:000002B6 69FE            	   220:     bvs.s *                   * branch if V set
01:000002B8 65FE            	   221:     bcs.s *                   * branch if C set
                            	   222: 
01:000002BA 46FC2700        	   223:     move.w #$2700,sr         * Put flags back to initial value
                            	   224: 
01:000002BE 4E75            	   225:     rts
                            	   226: ; 
                            	   227: ;-----------------------------------------------------------
                            	   228: ;-----------------------------------------------------------
                            	   229: ; OPCODE : EORI_TO_CCR
                            	   230: ;-----------------------------------------------------------
                            	   231: ;-----------------------------------------------------------
                            	   232: op_EORI_TO_CCR:
                            	   233: 
01:000002C0 44FC0000        	   234:     move #$00,CCR
01:000002C4 0A3C00FF        	   235:     eori.b #$FF,CCR
01:000002C8 6AFE            	   236:     bpl.s *                   ; branch if Z clear
01:000002CA 66FE            	   237:     bne.s *                   ; branch if N clear
01:000002CC 68FE            	   238:     bvc.s *                   ; branch if V clear
01:000002CE 64FE            	   239:     bcc.s *                   ; branch if C clear
                            	   240: 
01:000002D0 44FC0000        	   241:     move #$00,CCR
01:000002D4 0A3C0000        	   242:     eori.b #$00,CCR
01:000002D8 67FE            	   243:     beq.s *                   ; branch if Z set
01:000002DA 6BFE            	   244:     bmi.s *                   ; branch if N set
01:000002DC 69FE            	   245:     bvs.s *                   ; branch if V set
01:000002DE 65FE            	   246:     bcs.s *                   ; branch if C set
                            	   247: 
01:000002E0 46FC2700        	   248:     move.w #$2700,sr           ; Put flags back to initial value
                            	   249: 
01:000002E4 4E75            	   250:     rts
                            	   251: 
                            	   252: 
                            	   253: 
                            	   254: *-----------------------------------------------------------
                            	   255: *-----------------------------------------------------------
                            	   256: * OPCODE : EORI_TO_SR
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: op_EORI_TO_SR:
                            	   260: 
01:000002E6 46FC2000        	   261:     move.w #$2000,SR
01:000002EA 0ABC00000FFF    	   262:     eori.l #$0FFF,SR
01:000002F0 6AFE            	   263:     bpl.s *                   * branch if Z clear
01:000002F2 66FE            	   264:     bne.s *                   * branch if N clear
01:000002F4 68FE            	   265:     bvc.s *                   * branch if V clear
01:000002F6 64FE            	   266:     bcc.s *                   * branch if C clear
                            	   267: 
01:000002F8 46FC2000        	   268:     move.w #$2000,SR
01:000002FC 0ABC00000000    	   269:     eori.l #$0000,SR
01:00000302 67FE            	   270:     beq.s *                   * branch if Z set
01:00000304 6BFE            	   271:     bmi.s *                   * branch if N set
01:00000306 69FE            	   272:     bvs.s *                   * branch if V set
01:00000308 65FE            	   273:     bcs.s *                   * branch if C set
                            	   274: 
01:0000030A 46FC2700        	   275:     move.w #$2700,sr          * Put flags back to initial value
                            	   276: 
01:0000030E 4E75            	   277:     rts
                            	   278: 
                            	   279: 
                            	   280: 
                            	   281: *-----------------------------------------------------------
                            	   282: *-----------------------------------------------------------
                            	   283: * OPCODE : ANDI_TO_CCR
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: op_ANDI_TO_CCR:
                            	   287: 
01:00000310 44FC00FF        	   288:     move #$FF,CCR
01:00000314 023C00FF        	   289:     andi.b #$FF,CCR
01:00000318 6AFE            	   290:     bpl.s *                   * branch if Z clear
01:0000031A 66FE            	   291:     bne.s *                   * branch if N clear
01:0000031C 68FE            	   292:     bvc.s *                   * branch if V clear
01:0000031E 64FE            	   293:     bcc.s *                   * branch if C clear
                            	   294: 
01:00000320 44FC00FF        	   295:     move #$FF,CCR
01:00000324 023C0000        	   296:     andi.b #$00,CCR
01:00000328 67FE            	   297:     beq.s *                   * branch if Z set
01:0000032A 6BFE            	   298:     bmi.s *                   * branch if N set
01:0000032C 69FE            	   299:     bvs.s *                   * branch if V set
01:0000032E 65FE            	   300:     bcs.s *                   * branch if C set
                            	   301: 
01:00000330 46FC2700        	   302:     move #$2700,SR           * Put flags back to initial value
                            	   303: 
01:00000334 4E75            	   304:     rts
                            	   305: 
                            	   306: 
                            	   307: 
                            	   308: *-----------------------------------------------------------
                            	   309: *-----------------------------------------------------------
                            	   310: * OPCODE : ANDI_TO_SR
                            	   311: *-----------------------------------------------------------
                            	   312: *-----------------------------------------------------------
                            	   313: op_ANDI_TO_SR:
01:00000336 46FC20FF        	   314:     move.w #$20FF,SR
01:0000033A 02BCFFFFFFFF    	   315:     andi.l #$FFFFFFFF,SR
01:00000340 6AFE            	   316:     bpl.s *                   * branch if Z clear
01:00000342 66FE            	   317:     bne.s *                   * branch if N clear
01:00000344 68FE            	   318:     bvc.s *                   * branch if V clear
01:00000346 64FE            	   319:     bcc.s *                   * branch if C clear
                            	   320: 
01:00000348 46FC20FF        	   321:     move.w #$20FF,SR
01:0000034C 02BCFFFFFF00    	   322:     andi.l #$FFFFFF00,SR
01:00000352 67FE            	   323:     beq.s *                   * branch if Z set
01:00000354 6BFE            	   324:     bmi.s *                   * branch if N set
01:00000356 69FE            	   325:     bvs.s *                   * branch if V set
01:00000358 65FE            	   326:     bcs.s *                   * branch if C set
                            	   327: 
01:0000035A 46FC2700        	   328:     move.w #$2700,sr           * Put flags back to initial value
                            	   329: 
01:0000035E 4E75            	   330:     rts
                            	   331: 
                            	   332: 
                            	   333: *-----------------------------------------------------------
                            	   334: *-----------------------------------------------------------
                            	   335: * OPCODE : BTST
                            	   336: *-----------------------------------------------------------
                            	   337: *-----------------------------------------------------------
                            	   338: op_BTST:
                            	   339: 
                            	   340: *  Bit Number.s Static
                            	   341: 
                            	   342: *             EA = Dn  - LONG only
01:00000360 203C80000001    	   343:             move.l #$80000001,d0      * populate test data
01:00000366 08000000        	   344:             btst.l #0,d0
01:0000036A 67FE            	   345:             beq.s *               * branch if Z set
01:0000036C 08000001        	   346:             btst.l #1,d0              *
01:00000370 66FE            	   347:             bne.s *               * branch if Z clear
01:00000372 0800001F        	   348:             btst.l #31,d0             *
01:00000376 67FE            	   349:             beq.s *               * branch if Z set
                            	   350: 
                            	   351: 
                            	   352: *             EA = (An)  - BYTE only
01:00000378 307C0100        	   353:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000037C 10BC0081        	   354:             move.b #$81,(a0)          * populate test data
01:00000380 1210            	   355:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000382 08100000        	   356:             btst.b #0,(a0)
01:00000386 67FE            	   357:             beq.s *               * branch if Z set
01:00000388 08100001        	   358:             btst.b #1,(a0)            *
01:0000038C 66FE            	   359:             bne.s *               * branch if Z clear
01:0000038E 08100007        	   360:             btst.b #7,(a0)            *
01:00000392 67FE            	   361:             beq.s *               * branch if Z set
                            	   362: 
                            	   363: 
                            	   364: *             EA = (An)+  - BYTE only
01:00000394 307C0100        	   365:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000398 10FC0001        	   366:             move.b #$01,(a0)+         * populate test data
01:0000039C 10FC00FC        	   367:             move.b #$FC,(a0)+         * populate test data
01:000003A0 10FC0080        	   368:             move.b #$80,(a0)+         * populate test data
01:000003A4 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address 0x100
01:000003A8 08180000        	   370:             btst.b #0,(a0)+
01:000003AC 67FE            	   371:             beq.s *               * branch if Z set
01:000003AE 08180001        	   372:             btst.b #1,(a0)+           *
01:000003B2 66FE            	   373:             bne.s *               * branch if Z clear
01:000003B4 08180007        	   374:             btst.b #7,(a0)+           *
01:000003B8 67FE            	   375:             beq.s *               * branch if Z set
                            	   376: 
                            	   377: 
                            	   378: *             EA = -(An)  - BYTE only
01:000003BA 307C0100        	   379:             move.l #$00000100,a0      * point to memory to address
01:000003BE 10FC0080        	   380:             move.b #$80,(a0)+         * populate test data
01:000003C2 10FC00FC        	   381:             move.b #$FC,(a0)+         * populate test data
01:000003C6 10FC0001        	   382:             move.b #$01,(a0)+         * populate test data
01:000003CA 307C0103        	   383:             move.l #$00000103,a0      * point to memory to address
01:000003CE 08200000        	   384:             btst.b #0,-(a0)
01:000003D2 67FE            	   385:             beq.s *               * branch if Z set
01:000003D4 08200001        	   386:             btst.b #1,-(a0)           *
01:000003D8 66FE            	   387:             bne.s *               * branch if Z clear
01:000003DA 08200007        	   388:             btst.b #7,-(a0)           *
01:000003DE 67FE            	   389:             beq.s *               * branch if Z set
                            	   390: 
                            	   391: 
                            	   392: *             EA = n(An)  - BYTE only
01:000003E0 307C0100        	   393:             move.l #$00000100,a0      * point to memory to address
01:000003E4 10FC0001        	   394:             move.b #$01,(a0)+         * populate test data
01:000003E8 10FC00FC        	   395:             move.b #$FC,(a0)+         * populate test data
01:000003EC 10FC0080        	   396:             move.b #$80,(a0)+         * populate test data
01:000003F0 307C0100        	   397:             move.l #$00000100,a0      * point to memory to address
01:000003F4 08100000        	   398:             btst.b #0,0(a0)
01:000003F8 67FE            	   399:             beq.s *               * branch if Z set
01:000003FA 082800010001    	   400:             btst.b #1,1(a0)           *
01:00000400 66FE            	   401:             bne.s *               * branch if Z clear
01:00000402 082800070002    	   402:             btst.b #7,2(a0)           *
01:00000408 67FE            	   403:             beq.s *               * branch if Z set
                            	   404: 
                            	   405: 
                            	   406: *             EA = n(An,R.W)  - BYTE only
01:0000040A 307C0100        	   407:             move.l #$00000100,a0      * point to memory to address
01:0000040E 93C9            	   408:             move.l #$00000000,a1      * point to memory to address
01:00000410 347C0001        	   409:             move.l #$00000001,a2      * point to memory to address
01:00000414 7000            	   410:             moveq  #$00000000,d0      * point to memory to address
01:00000416 7201            	   411:             moveq  #$00000001,d1      * point to memory to address
01:00000418 083000000000    	   412:             btst.b #0,0(a0,d0.w)
01:0000041E 67FE            	   413:             beq.s *               * branch if Z set
01:00000420 083000011000    	   414:             btst.b #1,0(a0,d1.w)      *
01:00000426 66FE            	   415:             bne.s *               * branch if Z clear
01:00000428 083000071001    	   416:             btst.b #7,1(a0,d1.w)      *
01:0000042E 67FE            	   417:             beq.s *               * branch if Z set
                            	   418: *             EA = n(An,R.L)  - BYTE only
01:00000430 083000000800    	   419:             btst.b #0,0(a0,d0.l)
01:00000436 67FE            	   420:             beq.s *               * branch if Z set
01:00000438 083000011800    	   421:             btst.b #1,0(a0,d1.l)      *
01:0000043E 66FE            	   422:             bne.s *               * branch if Z clear
01:00000440 083000071801    	   423:             btst.b #7,1(a0,d1.l)      *
01:00000446 67FE            	   424:             beq.s *               * branch if Z set
                            	   425: *             EA = n(An,A.W)  - BYTE only
01:00000448 083000009000    	   426:             btst.b #0,0(a0,a1.w)
01:0000044E 67FE            	   427:             beq.s *               * branch if Z set
01:00000450 08300001A000    	   428:             btst.b #1,0(a0,a2.w)      *
01:00000456 66FE            	   429:             bne.s *               * branch if Z clear
01:00000458 08300007A001    	   430:             btst.b #7,1(a0,a2.w)      *
01:0000045E 67FE            	   431:             beq.s *               * branch if Z set
                            	   432: *             EA = n(An,A.L)  - BYTE only
01:00000460 083000009800    	   433:             btst.b #0,0(a0,a1.l)
01:00000466 67FE            	   434:             beq.s *               * branch if Z set
01:00000468 08300001A800    	   435:             btst.b #1,0(a0,a2.l)      *
01:0000046E 66FE            	   436:             bne.s *               * branch if Z clear
01:00000470 08300007A801    	   437:             btst.b #7,1(a0,a2.l)      *
01:00000476 67FE            	   438:             beq.s *               * branch if Z set
                            	   439: 
                            	   440: 
                            	   441: *             EA = x.W  - BYTE only
01:00000478 083800000100    	   442:             btst.b #0,$0100
01:0000047E 67FE            	   443:             beq.s *               * branch if Z set
01:00000480 083800010101    	   444:             btst.b #1,$0101           *
01:00000486 66FE            	   445:             bne.s *               * branch if Z clear
01:00000488 083800070102    	   446:             btst.b #7,$0102           *
01:0000048E 67FE            	   447:             beq.s *               * branch if Z set
                            	   448: 
                            	   449: 
                            	   450: *             EA = x.L  - BYTE only
01:00000490 207C0000F100    	   451:             move.l #$F100,a0      * point to memory to address 0x100
01:00000496 10FC0001        	   452:             move.b #$01,(a0)+         * populate test data
01:0000049A 10FC00FC        	   453:             move.b #$FC,(a0)+         * populate test data
01:0000049E 10FC0080        	   454:             move.b #$80,(a0)+         * populate test data
01:000004A2 083900000000F100	   455:             btst.b #0,$F100
01:000004AA 67FE            	   456:             beq.s *               * branch if Z set
01:000004AC 083900010000F101	   457:             btst.b #1,$F101       *
01:000004B4 66FE            	   458:             bne.s *               * branch if Z clear
01:000004B6 083900070000F102	   459:             btst.b #7,$F102       *
01:000004BE 67FE            	   460:             beq.s *               * branch if Z set
                            	   461: 
                            	   462: 
                            	   463: *             EA = x(PC)  - BYTE only
01:000004C0 4BFAFE9E        	   464:             lea op_BTST(pc),a5
01:000004C4 083A0000FE98    	   465:             btst.b #0,op_BTST(pc)
01:000004CA 66FE            	   466:             bne.s *               * branch if Z clear
01:000004CC 083A0003001A    	   467:             btst.b #3,op_BTST0(pc)     *
01:000004D2 67FE            	   468:             beq.s *               * branch if Z set
01:000004D4 083A00060074    	   469:             btst.b #6,op_BTST12(pc)    *
01:000004DA 67FE            	   470:             beq.s *               * branch if Z set
                            	   471: 
                            	   472: 
                            	   473: *             EA = n(PC,R.W)  - BYTE only
01:000004DC 307C0100        	   474:             move.l #$00000100,a0      * point to memory to address
01:000004E0 93C9            	   475:             move.l #$00000000,a1      * point to memory to address
01:000004E2 347C0001        	   476:             move.l #$00000001,a2      * point to memory to address
01:000004E6 7000            	   477:             moveq  #$00000000,d0      * point to memory to address
01:000004E8 7201            	   478:             moveq  #$00000001,d1      * point to memory to address
                            	   479: 
01:000004EA 083B000000FC    	   480: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:000004F0 66FE            	   481:             bne.s *               * branch if Z clear
                            	   482: 
01:000004F2 4BFB1002        	   483:             lea op_BTST1(pc,d1.w),a5
01:000004F6 083B000110FC    	   484: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:000004FC 67FE            	   485:             beq.s *               * branch if Z set
01:000004FE 083B000710FC    	   486: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:00000504 66FE            	   487:             bne.s *               * branch if Z clear
                            	   488: *             EA = n(PC,R.L)  - BYTE only
01:00000506 083B000008FC    	   489: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:0000050C 66FE            	   490:             bne.s *               * branch if Z clear
01:0000050E 083B000118FC    	   491: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:00000514 67FE            	   492:             beq.s *               * branch if Z set
01:00000516 083B000718FC    	   493: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:0000051C 66FE            	   494:             bne.s *               * branch if Z clear
                            	   495: *             EA = n(PC,A.W)  - BYTE only
01:0000051E 083B000090FC    	   496: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:00000524 66FE            	   497:             bne.s *               * branch if Z clear
01:00000526 083B0001A0FC    	   498: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:0000052C 67FE            	   499:             beq.s *               * branch if Z set
01:0000052E 083B0007A0FC    	   500: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:00000534 66FE            	   501:             bne.s *               * branch if Z clear
                            	   502: *             EA = n(PC,A.L)  - BYTE only
01:00000536 083B000098FC    	   503: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:0000053C 66FE            	   504:             bne.s *               * branch if Z clear
01:0000053E 083B0001A8FC    	   505: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:00000544 67FE            	   506:             beq.s *               * branch if Z set
01:00000546 083B0007A8FC    	   507: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:0000054C 66FE            	   508: op_BTST12:  bne.s *               * branch if Z clear
                            	   509: 
                            	   510: 
                            	   511: 
                            	   512: * Bit Number.s Dynamic
                            	   513: 
                            	   514: *             EA = Dn  - LONG only
01:0000054E 203C80000001    	   515:             move.l #$80000001,d0      * populate test data
01:00000554 7A00            	   516:             move.l #0,d5              * populate bit.s number to test
01:00000556 7C01            	   517:             move.l #1,d6              * populate bit.s number to test
01:00000558 7E1F            	   518:             move.l #31,d7              * populate bit.s number to test
                            	   519: 
01:0000055A 0B00            	   520:             btst.l d5,d0
01:0000055C 67FE            	   521:             beq.s *               * branch if Z set
01:0000055E 0D00            	   522:             btst.l d6,d0              *
01:00000560 66FE            	   523:             bne.s *               * branch if Z clear
01:00000562 0F00            	   524:             btst.l d7,d0             *
01:00000564 67FE            	   525:             beq.s *               * branch if Z set
                            	   526: 
                            	   527: 
                            	   528: *             EA = (An)  - BYTE only
01:00000566 7A00            	   529:             move.l #0,d5              * populate bit.s number to test
01:00000568 7C01            	   530:             move.l #1,d6              * populate bit.s number to test
01:0000056A 7E07            	   531:             move.l #7,d7              * populate bit.s number to test
01:0000056C 307C0100        	   532:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000570 10BC0081        	   533:             move.b #$81,(a0)          * populate test data
01:00000574 1210            	   534:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000576 0B10            	   535:             btst.b d5,(a0)
01:00000578 67FE            	   536:             beq.s *               * branch if Z set
01:0000057A 0D10            	   537:             btst.b d6,(a0)            *
01:0000057C 66FE            	   538:             bne.s *               * branch if Z clear
01:0000057E 0F10            	   539:             btst.b d7,(a0)            *
01:00000580 67FE            	   540:             beq.s *               * branch if Z set
                            	   541: 
                            	   542: * ---
                            	   543: 
                            	   544: 
                            	   545: *             EA = (An)+  - BYTE only
01:00000582 307C0100        	   546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000586 10FC0001        	   547:             move.b #$01,(a0)+         * populate test data
01:0000058A 10FC00FC        	   548:             move.b #$FC,(a0)+         * populate test data
01:0000058E 10FC0080        	   549:             move.b #$80,(a0)+         * populate test data
01:00000592 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000596 0B18            	   551:             btst.b d5,(a0)+
01:00000598 67FE            	   552:             beq.s *               * branch if Z set
01:0000059A 0D18            	   553:             btst.b d6,(a0)+           *
01:0000059C 66FE            	   554:             bne.s *               * branch if Z clear
01:0000059E 0F18            	   555:             btst.b d7,(a0)+           *
01:000005A0 67FE            	   556:             beq.s *               * branch if Z set
                            	   557: 
                            	   558: 
                            	   559: *             EA = -(An)  - BYTE only
01:000005A2 307C0100        	   560:             move.l #$00000100,a0      * point to memory to address
01:000005A6 10FC0080        	   561:             move.b #$80,(a0)+         * populate test data
01:000005AA 10FC00FC        	   562:             move.b #$FC,(a0)+         * populate test data
01:000005AE 10FC0001        	   563:             move.b #$01,(a0)+         * populate test data
01:000005B2 307C0103        	   564:             move.l #$00000103,a0      * point to memory to address
01:000005B6 0B20            	   565:             btst.b d5,-(a0)
01:000005B8 67FE            	   566:             beq.s *               * branch if Z set
01:000005BA 0D20            	   567:             btst.b d6,-(a0)           *
01:000005BC 66FE            	   568:             bne.s *               * branch if Z clear
01:000005BE 0F20            	   569:             btst.b d7,-(a0)           *
01:000005C0 67FE            	   570:             beq.s *               * branch if Z set
                            	   571: 
                            	   572: 
                            	   573: *             EA = n(An)  - BYTE only
01:000005C2 307C0100        	   574:             move.l #$00000100,a0      * point to memory to address
01:000005C6 10FC0001        	   575:             move.b #$01,(a0)+         * populate test data
01:000005CA 10FC00FC        	   576:             move.b #$FC,(a0)+         * populate test data
01:000005CE 10FC0080        	   577:             move.b #$80,(a0)+         * populate test data
01:000005D2 307C0100        	   578:             move.l #$00000100,a0      * point to memory to address
01:000005D6 0B10            	   579:             btst.b d5,0(a0)
01:000005D8 67FE            	   580:             beq.s *               * branch if Z set
01:000005DA 0D280001        	   581:             btst.b d6,1(a0)           *
01:000005DE 66FE            	   582:             bne.s *               * branch if Z clear
01:000005E0 0F280002        	   583:             btst.b d7,2(a0)           *
01:000005E4 67FE            	   584:             beq.s *               * branch if Z set
                            	   585: 
                            	   586: 
                            	   587: *             EA = n(An,R.W)  - BYTE only
01:000005E6 307C0100        	   588:             move.l #$00000100,a0      * point to memory to address
01:000005EA 93C9            	   589:             move.l #$00000000,a1      * point to memory to address
01:000005EC 347C0001        	   590:             move.l #$00000001,a2      * point to memory to address
01:000005F0 7000            	   591:             moveq  #$00000000,d0      * point to memory to address
01:000005F2 7201            	   592:             moveq  #$00000001,d1      * point to memory to address
01:000005F4 0B300000        	   593:             btst.b d5,0(a0,d0.w)
01:000005F8 67FE            	   594:             beq.s *               * branch if Z set
01:000005FA 0D301000        	   595:             btst.b d6,0(a0,d1.w)      *
01:000005FE 66FE            	   596:             bne.s *               * branch if Z clear
01:00000600 0F301001        	   597:             btst.b d7,1(a0,d1.w)      *
01:00000604 67FE            	   598:             beq.s *               * branch if Z set
                            	   599: *             EA = n(An,R.L)  - BYTE only
01:00000606 0B300800        	   600:             btst.b d5,0(a0,d0.l)
01:0000060A 67FE            	   601:             beq.s *               * branch if Z set
01:0000060C 0D301800        	   602:             btst.b d6,0(a0,d1.l)      *
01:00000610 66FE            	   603:             bne.s *               * branch if Z clear
01:00000612 0F301801        	   604:             btst.b d7,1(a0,d1.l)      *
01:00000616 67FE            	   605:             beq.s *               * branch if Z set
                            	   606: *             EA = n(An,A.W)  - BYTE only
01:00000618 0B309000        	   607:             btst.b d5,0(a0,a1.w)
01:0000061C 67FE            	   608:             beq.s *               * branch if Z set
01:0000061E 0D30A000        	   609:             btst.b d6,0(a0,a2.w)      *
01:00000622 66FE            	   610:             bne.s *               * branch if Z clear
01:00000624 0F30A001        	   611:             btst.b d7,1(a0,a2.w)      *
01:00000628 67FE            	   612:             beq.s *               * branch if Z set
                            	   613: *             EA = n(An,A.L)  - BYTE only
01:0000062A 0B309800        	   614:             btst.b d5,0(a0,a1.l)
01:0000062E 67FE            	   615:             beq.s *               * branch if Z set
01:00000630 0D30A800        	   616:             btst.b d6,0(a0,a2.l)      *
01:00000634 66FE            	   617:             bne.s *               * branch if Z clear
01:00000636 0F30A801        	   618:             btst.b d7,1(a0,a2.l)      *
01:0000063A 67FE            	   619:             beq.s *               * branch if Z set
                            	   620: 
                            	   621: 
                            	   622: *             EA = x.W  - BYTE only
01:0000063C 0B380100        	   623:             btst.b d5,$0100
01:00000640 67FE            	   624:             beq.s *               * branch if Z set
01:00000642 0D380101        	   625:             btst.b d6,$0101           *
01:00000646 66FE            	   626:             bne.s *               * branch if Z clear
01:00000648 0F380102        	   627:             btst.b d7,$0102           *
01:0000064C 67FE            	   628:             beq.s *               * branch if Z set
                            	   629: 
                            	   630: 
                            	   631: *             EA = x.L  - BYTE only
01:0000064E 207C0000F100    	   632:             move.l #$F100,a0      * point to memory to address 0x100
01:00000654 10FC0001        	   633:             move.b #$01,(a0)+         * populate test data
01:00000658 10FC00FC        	   634:             move.b #$FC,(a0)+         * populate test data
01:0000065C 10FC0080        	   635:             move.b #$80,(a0)+         * populate test data
01:00000660 0B390000F100    	   636:             btst.b d5,$F100
01:00000666 67FE            	   637:             beq.s *               * branch if Z set
01:00000668 0D390000F101    	   638:             btst.b d6,$F101       *
01:0000066E 66FE            	   639:             bne.s *               * branch if Z clear
01:00000670 0F390000F102    	   640:             btst.b d7,$F102       *
01:00000676 67FE            	   641:             beq.s *               * branch if Z set
                            	   642: 
                            	   643: 
                            	   644: *             EA = x(PC)  - BYTE only
01:00000678 7C03            	   645:             move.l #3,d6              * populate bit.s number to test
01:0000067A 7E06            	   646:             move.l #6,d7              * populate bit.s number to test
01:0000067C 4BFAFCE2        	   647:             lea op_BTST(pc),a5
01:00000680 0B3AFCDE        	   648:             btst.b d5,op_BTST(pc)
01:00000684 66FE            	   649:             bne.s *               * branch if Z clear
01:00000686 0D3AFE62        	   650:             btst.b d6,op_BTST0(pc)     *
01:0000068A 67FE            	   651:             beq.s *               * branch if Z set
01:0000068C 0F3AFEBE        	   652:             btst.b d7,op_BTST12(pc)    *
01:00000690 67FE            	   653:             beq.s *               * branch if Z set
                            	   654: 
                            	   655: 
                            	   656: *             EA = n(PC,R.W)  - BYTE only
01:00000692 307C0100        	   657:             move.l #$00000100,a0      * point to memory to address
01:00000696 93C9            	   658:             move.l #$00000000,a1      * point to memory to address
01:00000698 347C0001        	   659:             move.l #$00000001,a2      * point to memory to address
01:0000069C 7000            	   660:             moveq  #$00000000,d0      * point to memory to address
01:0000069E 7201            	   661:             moveq  #$00000001,d1      * point to memory to address
01:000006A0 7C01            	   662:             move.l #1,d6              * populate bit.s number to test
01:000006A2 7E07            	   663:             move.l #7,d7              * populate bit.s number to test
                            	   664: 
01:000006A4 0B3B00FE        	   665: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:000006A8 67FE            	   666:             beq.s *               * branch if Z set
01:000006AA 4BFB1002        	   667:             lea op_BTST21(pc,d1.w),a5
01:000006AE 0D3B10FE        	   668: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:000006B2 67FE            	   669:             beq.s *               * branch if Z set
01:000006B4 0F3B10FE        	   670: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:000006B8 66FE            	   671:             bne.s *               * branch if Z clear
                            	   672: *             EA = n(PC,R.L)  - BYTE only
01:000006BA 0B3B08FE        	   673: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:000006BE 67FE            	   674:             beq.s *               * branch if Z set
01:000006C0 0D3B18FE        	   675: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:000006C4 67FE            	   676:             beq.s *               * branch if Z set
01:000006C6 0F3B18FE        	   677: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:000006CA 66FE            	   678:             bne.s *               * branch if Z clear
                            	   679: *             EA = n(PC,A.W)  - BYTE only
01:000006CC 0B3B90FE        	   680: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:000006D0 67FE            	   681:             beq.s *               * branch if Z set
01:000006D2 0D3BA0FE        	   682: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:000006D6 67FE            	   683:             beq.s *               * branch if Z set
01:000006D8 0F3BA0FE        	   684: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:000006DC 66FE            	   685:             bne.s *               * branch if Z clear
                            	   686: *             EA = n(PC,A.L)  - BYTE only
01:000006DE 0B3B98FE        	   687: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:000006E2 67FE            	   688:             beq.s *               * branch if Z set
01:000006E4 0D3BA8FE        	   689: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:000006E8 67FE            	   690:             beq.s *               * branch if Z set
01:000006EA 0F3BA8FE        	   691: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000006EE 66FE            	   692: op_BTST32:  bne.s *               * branch if Z clear
                            	   693: 
                            	   694: *             EA = #x  - BYTE only
                            	   695: 
01:000006F0 7A00            	   696:             move.l #0,d5              * populate bit.s number to test
01:000006F2 7C03            	   697:             move.l #3,d6              * populate bit.s number to test
01:000006F4 7E07            	   698:             move.l #7,d7              * populate bit.s number to test
                            	   699: 
01:000006F6 0B3C0088        	   700:             btst.b d5,#$88
01:000006FA 66FE            	   701:             bne.s *               * branch if Z clear
01:000006FC 0D3C0088        	   702:             btst.b d6,#$88
01:00000700 67FE            	   703:             beq.s *               * branch if Z set
01:00000702 0F3C0088        	   704:             btst.b d7,#$88
01:00000706 67FE            	   705:             beq.s *               * branch if Z set
                            	   706: 
                            	   707: 
01:00000708 4E75            	   708:     rts
                            	   709: 
                            	   710: *-----------------------------------------------------------
                            	   711: *-----------------------------------------------------------
                            	   712: * OPCODE : BCHG
                            	   713: *-----------------------------------------------------------
                            	   714: *-----------------------------------------------------------
                            	   715: op_BCHG:
                            	   716: 
                            	   717: 
                            	   718: *  Bit Number.s Static
                            	   719: 
                            	   720: *             EA = Dn  - LONG only
01:0000070A 203C80000001    	   721:             move.l #$80000001,d0      * populate test data
01:00000710 08400000        	   722:             bchg.l #0,d0
01:00000714 67FE            	   723:             beq.s *               * branch if Z set
01:00000716 08400001        	   724:             bchg.l #1,d0              *
01:0000071A 66FE            	   725:             bne.s *               * branch if Z clear
01:0000071C 0840001F        	   726:             bchg.l #31,d0             *
01:00000720 67FE            	   727:             beq.s *               * branch if Z set
01:00000722 0C8000000002    	   728:             cmpi.l #$00000002,d0
01:00000728 66FE            	   729:             bne.s *               * branch if Z clear
                            	   730: 
                            	   731: 
                            	   732: *             EA = (An)  - BYTE only
01:0000072A 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000072E 10BC0081        	   734:             move.b #$81,(a0)          * populate test data
01:00000732 1210            	   735:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000734 08500000        	   736:             bchg.b #0,(a0)
01:00000738 67FE            	   737:             beq.s *               * branch if Z set
01:0000073A 08500001        	   738:             bchg.b #1,(a0)            *
01:0000073E 66FE            	   739:             bne.s *               * branch if Z clear
01:00000740 08500007        	   740:             bchg.b #7,(a0)            *
01:00000744 67FE            	   741:             beq.s *               * branch if Z set
01:00000746 0C100002        	   742:             cmpi.b #$02,(a0)
01:0000074A 66FE            	   743:             bne.s *               * branch if Z clear
                            	   744: 
                            	   745: *             EA = (An)+  - BYTE only
01:0000074C 307C0100        	   746:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000750 10FC0001        	   747:             move.b #$01,(a0)+         * populate test data
01:00000754 10FC00FC        	   748:             move.b #$FC,(a0)+         * populate test data
01:00000758 10FC0080        	   749:             move.b #$80,(a0)+         * populate test data
01:0000075C 307C0100        	   750:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000760 08580000        	   751:             bchg.b #0,(a0)+
01:00000764 67FE            	   752:             beq.s *               * branch if Z set
01:00000766 08580001        	   753:             bchg.b #1,(a0)+           *
01:0000076A 66FE            	   754:             bne.s *               * branch if Z clear
01:0000076C 08580007        	   755:             bchg.b #7,(a0)+           *
01:00000770 67FE            	   756:             beq.s *               * branch if Z set
01:00000772 307C0100        	   757:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000776 4A18            	   758:             cmpi.b #$00,(a0)+
01:00000778 66FE            	   759:             bne.s *               * branch if Z clear
01:0000077A 0C1800FE        	   760:             cmpi.b #$FE,(a0)+
01:0000077E 66FE            	   761:             bne.s *               * branch if Z clear
01:00000780 4A18            	   762:             cmpi.b #$00,(a0)+
01:00000782 66FE            	   763:             bne.s *               * branch if Z clear
                            	   764: 
                            	   765: *             EA = -(An)  - BYTE only
01:00000784 307C0100        	   766:             move.l #$00000100,a0      * point to memory to address
01:00000788 10FC0080        	   767:             move.b #$80,(a0)+         * populate test data
01:0000078C 10FC00FC        	   768:             move.b #$FC,(a0)+         * populate test data
01:00000790 10FC0001        	   769:             move.b #$01,(a0)+         * populate test data
01:00000794 307C0103        	   770:             move.l #$00000103,a0      * point to memory to address
01:00000798 08600000        	   771:             bchg.b #0,-(a0)
01:0000079C 67FE            	   772:             beq.s *               * branch if Z set
01:0000079E 08600001        	   773:             bchg.b #1,-(a0)           *
01:000007A2 66FE            	   774:             bne.s *               * branch if Z clear
01:000007A4 08600007        	   775:             bchg.b #7,-(a0)           *
01:000007A8 67FE            	   776:             beq.s *               * branch if Z set
01:000007AA 307C0103        	   777:             move.l #$00000103,a0      * point to memory to address 0x100
01:000007AE 4A20            	   778:             cmpi.b #$00,-(a0)
01:000007B0 66FE            	   779:             bne.s *               * branch if Z clear
01:000007B2 0C2000FE        	   780:             cmpi.b #$FE,-(a0)
01:000007B6 66FE            	   781:             bne.s *               * branch if Z clear
01:000007B8 4A20            	   782:             cmpi.b #$00,-(a0)
01:000007BA 66FE            	   783:             bne.s *               * branch if Z clear
                            	   784: 
                            	   785: 
                            	   786: *             EA = n(An)  - BYTE only
01:000007BC 307C0100        	   787:             move.l #$00000100,a0      * point to memory to address
01:000007C0 10FC0001        	   788:             move.b #$01,(a0)+         * populate test data
01:000007C4 10FC00FC        	   789:             move.b #$FC,(a0)+         * populate test data
01:000007C8 10FC0080        	   790:             move.b #$80,(a0)+         * populate test data
01:000007CC 307C0100        	   791:             move.l #$00000100,a0      * point to memory to address
01:000007D0 08500000        	   792:             bchg.b #0,0(a0)
01:000007D4 67FE            	   793:             beq.s *               * branch if Z set
01:000007D6 086800010001    	   794:             bchg.b #1,1(a0)           *
01:000007DC 66FE            	   795:             bne.s *               * branch if Z clear
01:000007DE 086800070002    	   796:             bchg.b #7,2(a0)           *
01:000007E4 67FE            	   797:             beq.s *               * branch if Z set
01:000007E6 307C0100        	   798:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007EA 4A18            	   799:             cmpi.b #$00,(a0)+
01:000007EC 66FE            	   800:             bne.s *               * branch if Z clear
01:000007EE 0C1800FE        	   801:             cmpi.b #$FE,(a0)+
01:000007F2 66FE            	   802:             bne.s *               * branch if Z clear
01:000007F4 4A18            	   803:             cmpi.b #$00,(a0)+
01:000007F6 66FE            	   804:             bne.s *               * branch if Z clear
                            	   805: 
                            	   806: 
                            	   807: *             EA = n(An,D.W)  - BYTE only
01:000007F8 307C0100        	   808:             move.l #$00000100,a0      * point to memory to address
01:000007FC 93C9            	   809:             move.l #$00000000,a1      * point to memory to address
01:000007FE 347C0001        	   810:             move.l #$00000001,a2      * point to memory to address
01:00000802 7000            	   811:             moveq  #$00000000,d0      * point to memory to address
01:00000804 7201            	   812:             moveq  #$00000001,d1      * point to memory to address
01:00000806 087000000000    	   813:             bchg.b #0,0(a0,d0.w)
01:0000080C 66FE            	   814:             bne.s *               * branch if Z clear
01:0000080E 087000011000    	   815:             bchg.b #1,0(a0,d1.w)      *
01:00000814 67FE            	   816:             beq.s *               * branch if Z set
01:00000816 087000071001    	   817:             bchg.b #7,1(a0,d1.w)      *
01:0000081C 66FE            	   818:             bne.s *               * branch if Z clear
                            	   819: *             EA = n(An,D.L)  - BYTE only
01:0000081E 087000000800    	   820:             bchg.b #0,0(a0,d0.l)
01:00000824 67FE            	   821:             beq.s *               * branch if Z set
01:00000826 087000011800    	   822:             bchg.b #1,0(a0,d1.l)      *
01:0000082C 66FE            	   823:             bne.s *               * branch if Z clear
01:0000082E 087000071801    	   824:             bchg.b #7,1(a0,d1.l)      *
01:00000834 67FE            	   825:             beq.s *               * branch if Z set
                            	   826: *             EA = n(An,A.W)  - BYTE only
01:00000836 087000009000    	   827:             bchg.b #0,0(a0,a1.w)
01:0000083C 66FE            	   828:             bne.s *               * branch if Z clear
01:0000083E 08700001A000    	   829:             bchg.b #1,0(a0,a2.w)      *
01:00000844 67FE            	   830:             beq.s *               * branch if Z set
01:00000846 08700007A001    	   831:             bchg.b #7,1(a0,a2.w)      *
01:0000084C 66FE            	   832:             bne.s *               * branch if Z clear
                            	   833: *             EA = n(An,A.L)  - BYTE only
01:0000084E 087000009800    	   834:             bchg.b #0,0(a0,a1.l)
01:00000854 67FE            	   835:             beq.s *               * branch if Z set
01:00000856 08700001A800    	   836:             bchg.b #1,0(a0,a2.l)      *
01:0000085C 66FE            	   837:             bne.s *               * branch if Z clear
01:0000085E 08700007A801    	   838:             bchg.b #7,1(a0,a2.l)      *
01:00000864 67FE            	   839:             beq.s *               * branch if Z set
01:00000866 307C0100        	   840:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000086A 4A18            	   841:             cmpi.b #$00,(a0)+
01:0000086C 66FE            	   842:             bne.s *               * branch if Z clear
01:0000086E 0C1800FE        	   843:             cmpi.b #$FE,(a0)+
01:00000872 66FE            	   844:             bne.s *               * branch if Z clear
01:00000874 4A18            	   845:             cmpi.b #$00,(a0)+
01:00000876 66FE            	   846:             bne.s *               * branch if Z clear
                            	   847: 
                            	   848: 
                            	   849: *             EA = x.W  - BYTE only
01:00000878 087800000100    	   850:             bchg.b #0,$0100
01:0000087E 66FE            	   851:             bne.s *               * branch if Z clear
01:00000880 087800010101    	   852:             bchg.b #1,$0101           *
01:00000886 67FE            	   853:             beq.s *               * branch if Z set
01:00000888 087800070102    	   854:             bchg.b #7,$0102           *
01:0000088E 66FE            	   855:             bne.s *               * branch if Z clear
01:00000890 307C0100        	   856:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000894 0C180001        	   857:             cmpi.b #$01,(a0)+
01:00000898 66FE            	   858:             bne.s *               * branch if Z clear
01:0000089A 0C1800FC        	   859:             cmpi.b #$FC,(a0)+
01:0000089E 66FE            	   860:             bne.s *               * branch if Z clear
01:000008A0 0C180080        	   861:             cmpi.b #$80,(a0)+
01:000008A4 66FE            	   862:             bne.s *               * branch if Z clear
                            	   863: 
                            	   864: *             EA = x.L  - BYTE only
01:000008A6 207C0000F100    	   865:             move.l #$F100,a0      * point to memory to address 0x100
01:000008AC 10FC0001        	   866:             move.b #$01,(a0)+         * populate test data
01:000008B0 10FC00FC        	   867:             move.b #$FC,(a0)+         * populate test data
01:000008B4 10FC0080        	   868:             move.b #$80,(a0)+         * populate test data
01:000008B8 087900000000F100	   869:             bchg.b #0,$F100
01:000008C0 67FE            	   870:             beq.s *               * branch if Z set
01:000008C2 087900010000F101	   871:             bchg.b #1,$F101       *
01:000008CA 66FE            	   872:             bne.s *               * branch if Z clear
01:000008CC 087900070000F102	   873:             bchg.b #7,$F102       *
01:000008D4 67FE            	   874:             beq.s *               * branch if Z set
01:000008D6 307C0100        	   875:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008DA 0C180001        	   876:             cmpi.b #$01,(a0)+
01:000008DE 66FE            	   877:             bne.s *               * branch if Z clear
01:000008E0 0C1800FC        	   878:             cmpi.b #$FC,(a0)+
01:000008E4 66FE            	   879:             bne.s *               * branch if Z clear
01:000008E6 0C180080        	   880:             cmpi.b #$80,(a0)+
01:000008EA 66FE            	   881:             bne.s *               * branch if Z clear
                            	   882: 
                            	   883: 
                            	   884: * Bit Number.s Dynamic
                            	   885: 
                            	   886: *             EA = Dn  - LONG only
01:000008EC 203C80000001    	   887:             move.l #$80000001,d0      * populate test data
01:000008F2 7A00            	   888:             move.l #0,d5              * populate bit.s number to test
01:000008F4 7C01            	   889:             move.l #1,d6              * populate bit.s number to test
01:000008F6 7E1F            	   890:             move.l #31,d7              * populate bit.s number to test
                            	   891: 
01:000008F8 0B40            	   892:             bchg.l d5,d0
01:000008FA 67FE            	   893:             beq.s *               * branch if Z set
01:000008FC 0D40            	   894:             bchg.l d6,d0              *
01:000008FE 66FE            	   895:             bne.s *               * branch if Z clear
01:00000900 0F40            	   896:             bchg.l d7,d0             *
01:00000902 67FE            	   897:             beq.s *               * branch if Z set
01:00000904 0C8000000002    	   898:             cmpi.l #$00000002,d0
01:0000090A 66FE            	   899:             bne.s *               * branch if Z clear
                            	   900: 
                            	   901: 
                            	   902: *             EA = (An)  - BYTE only
01:0000090C 7A00            	   903:             move.l #0,d5              * populate bit.s number to test
01:0000090E 7C01            	   904:             move.l #1,d6              * populate bit.s number to test
01:00000910 7E07            	   905:             move.l #7,d7              * populate bit.s number to test
01:00000912 307C0100        	   906:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000916 10BC0081        	   907:             move.b #$81,(a0)          * populate test data
01:0000091A 1210            	   908:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000091C 0B50            	   909:             bchg.b d5,(a0)
01:0000091E 67FE            	   910:             beq.s *               * branch if Z set
01:00000920 0D50            	   911:             bchg.b d6,(a0)            *
01:00000922 66FE            	   912:             bne.s *               * branch if Z clear
01:00000924 0F50            	   913:             bchg.b d7,(a0)            *
01:00000926 67FE            	   914:             beq.s *               * branch if Z set
01:00000928 0C100002        	   915:             cmpi.b #$02,(a0)
01:0000092C 66FE            	   916:             bne.s *               * branch if Z clear
                            	   917: 
                            	   918: 
                            	   919: *             EA = (An)+  - BYTE only
01:0000092E 307C0100        	   920:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000932 10FC0001        	   921:             move.b #$01,(a0)+         * populate test data
01:00000936 10FC00FC        	   922:             move.b #$FC,(a0)+         * populate test data
01:0000093A 10FC0080        	   923:             move.b #$80,(a0)+         * populate test data
01:0000093E 307C0100        	   924:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000942 0B58            	   925:             bchg.b d5,(a0)+
01:00000944 67FE            	   926:             beq.s *               * branch if Z set
01:00000946 0D58            	   927:             bchg.b d6,(a0)+           *
01:00000948 66FE            	   928:             bne.s *               * branch if Z clear
01:0000094A 0F58            	   929:             bchg.b d7,(a0)+           *
01:0000094C 67FE            	   930:             beq.s *               * branch if Z set
01:0000094E 307C0100        	   931:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000952 4A18            	   932:             cmpi.b #$00,(a0)+
01:00000954 66FE            	   933:             bne.s *               * branch if Z clear
01:00000956 0C1800FE        	   934:             cmpi.b #$FE,(a0)+
01:0000095A 66FE            	   935:             bne.s *               * branch if Z clear
01:0000095C 4A18            	   936:             cmpi.b #$00,(a0)+
01:0000095E 66FE            	   937:             bne.s *               * branch if Z clear
                            	   938: 
                            	   939: *             EA = -(An)  - BYTE only
01:00000960 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
01:00000964 10FC0080        	   941:             move.b #$80,(a0)+         * populate test data
01:00000968 10FC00FC        	   942:             move.b #$FC,(a0)+         * populate test data
01:0000096C 10FC0001        	   943:             move.b #$01,(a0)+         * populate test data
01:00000970 307C0103        	   944:             move.l #$00000103,a0      * point to memory to address
01:00000974 0B60            	   945:             bchg.b d5,-(a0)
01:00000976 67FE            	   946:             beq.s *               * branch if Z set
01:00000978 0D60            	   947:             bchg.b d6,-(a0)           *
01:0000097A 66FE            	   948:             bne.s *               * branch if Z clear
01:0000097C 0F60            	   949:             bchg.b d7,-(a0)           *
01:0000097E 67FE            	   950:             beq.s *               * branch if Z set
01:00000980 307C0103        	   951:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000984 4A20            	   952:             cmpi.b #$00,-(a0)
01:00000986 66FE            	   953:             bne.s *               * branch if Z clear
01:00000988 0C2000FE        	   954:             cmpi.b #$FE,-(a0)
01:0000098C 66FE            	   955:             bne.s *               * branch if Z clear
01:0000098E 4A20            	   956:             cmpi.b #$00,-(a0)
01:00000990 66FE            	   957:             bne.s *               * branch if Z clear
                            	   958: 
                            	   959: *             EA = n(An)  - BYTE only
01:00000992 307C0100        	   960:             move.l #$00000100,a0      * point to memory to address
01:00000996 10FC0001        	   961:             move.b #$01,(a0)+         * populate test data
01:0000099A 10FC00FC        	   962:             move.b #$FC,(a0)+         * populate test data
01:0000099E 10FC0080        	   963:             move.b #$80,(a0)+         * populate test data
01:000009A2 307C0100        	   964:             move.l #$00000100,a0      * point to memory to address
01:000009A6 0B50            	   965:             bchg.b d5,0(a0)
01:000009A8 67FE            	   966:             beq.s *               * branch if Z set
01:000009AA 0D680001        	   967:             bchg.b d6,1(a0)           *
01:000009AE 66FE            	   968:             bne.s *               * branch if Z clear
01:000009B0 0F680002        	   969:             bchg.b d7,2(a0)           *
01:000009B4 67FE            	   970:             beq.s *               * branch if Z set
01:000009B6 307C0100        	   971:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009BA 4A18            	   972:             cmpi.b #$00,(a0)+
01:000009BC 66FE            	   973:             bne.s *               * branch if Z clear
01:000009BE 0C1800FE        	   974:             cmpi.b #$FE,(a0)+
01:000009C2 66FE            	   975:             bne.s *               * branch if Z clear
01:000009C4 4A18            	   976:             cmpi.b #$00,(a0)+
01:000009C6 66FE            	   977:             bne.s *               * branch if Z clear
                            	   978: 
                            	   979: *             EA = n(An,R.W)  - BYTE only
01:000009C8 307C0100        	   980:             move.l #$00000100,a0      * point to memory to address
01:000009CC 93C9            	   981:             move.l #$00000000,a1      * point to memory to address
01:000009CE 347C0001        	   982:             move.l #$00000001,a2      * point to memory to address
01:000009D2 7000            	   983:             moveq  #$00000000,d0      * point to memory to address
01:000009D4 7201            	   984:             moveq  #$00000001,d1      * point to memory to address
01:000009D6 0B700000        	   985:             bchg.b d5,0(a0,d0.w)
01:000009DA 66FE            	   986:             bne.s *               * branch if Z clear
01:000009DC 0D701000        	   987:             bchg.b d6,0(a0,d1.w)      *
01:000009E0 67FE            	   988:             beq.s *               * branch if Z set
01:000009E2 0F701001        	   989:             bchg.b d7,1(a0,d1.w)      *
01:000009E6 66FE            	   990:             bne.s *               * branch if Z clear
                            	   991: *             EA = n(An,R.L)  - BYTE only
01:000009E8 0B700800        	   992:             bchg.b d5,0(a0,d0.l)
01:000009EC 67FE            	   993:             beq.s *               * branch if Z set
01:000009EE 0D701800        	   994:             bchg.b d6,0(a0,d1.l)      *
01:000009F2 66FE            	   995:             bne.s *               * branch if Z clear
01:000009F4 0F701801        	   996:             bchg.b d7,1(a0,d1.l)      *
01:000009F8 67FE            	   997:             beq.s *               * branch if Z set
                            	   998: *             EA = n(An,A.W)  - BYTE only
01:000009FA 0B709000        	   999:             bchg.b d5,0(a0,a1.w)
01:000009FE 66FE            	  1000:             bne.s *               * branch if Z clear
01:00000A00 0D70A000        	  1001:             bchg.b d6,0(a0,a2.w)      *
01:00000A04 67FE            	  1002:             beq.s *               * branch if Z set
01:00000A06 0F70A001        	  1003:             bchg.b d7,1(a0,a2.w)      *
01:00000A0A 66FE            	  1004:             bne.s *               * branch if Z clear
                            	  1005: *             EA = n(An,A.L)  - BYTE only
01:00000A0C 0B709800        	  1006:             bchg.b d5,0(a0,a1.l)
01:00000A10 67FE            	  1007:             beq.s *               * branch if Z set
01:00000A12 0D70A800        	  1008:             bchg.b d6,0(a0,a2.l)      *
01:00000A16 66FE            	  1009:             bne.s *               * branch if Z clear
01:00000A18 0F70A801        	  1010:             bchg.b d7,1(a0,a2.l)      *
01:00000A1C 67FE            	  1011:             beq.s *               * branch if Z set
01:00000A1E 4A18            	  1012:             cmpi.b #$00,(a0)+
01:00000A20 66FE            	  1013:             bne.s *               * branch if Z clear
                            	  1014: 
                            	  1015: *             EA = x.W  - BYTE only
01:00000A22 0B780100        	  1016:             bchg.b d5,$0100
01:00000A26 66FE            	  1017:             bne.s *               * branch if Z clear
01:00000A28 0D780101        	  1018:             bchg.b d6,$0101           *
01:00000A2C 67FE            	  1019:             beq.s *               * branch if Z set
01:00000A2E 0F780102        	  1020:             bchg.b d7,$0102           *
01:00000A32 66FE            	  1021:             bne.s *               * branch if Z clear
01:00000A34 0C1800FC        	  1022:             cmpi.b #$FC,(a0)+
01:00000A38 66FE            	  1023:             bne.s *               * branch if Z clear
                            	  1024: 
                            	  1025: *             EA = x.L  - BYTE only
01:00000A3A 207C0000F100    	  1026:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A40 10FC0001        	  1027:             move.b #$01,(a0)+         * populate test data
01:00000A44 10FC00FC        	  1028:             move.b #$FC,(a0)+         * populate test data
01:00000A48 10FC0080        	  1029:             move.b #$80,(a0)+         * populate test data
01:00000A4C 0B790000F100    	  1030:             bchg.b d5,$F100
01:00000A52 67FE            	  1031:             beq.s *               * branch if Z set
01:00000A54 0D790000F101    	  1032:             bchg.b d6,$F101       *
01:00000A5A 66FE            	  1033:             bne.s *               * branch if Z clear
01:00000A5C 0F790000F102    	  1034:             bchg.b d7,$F102       *
01:00000A62 67FE            	  1035:             beq.s *               * branch if Z set
01:00000A64 207C0000F101    	  1036:             move.l #$F101,a0      * point to memory to address 0x100
01:00000A6A 0C1000FE        	  1037:             cmpi.b #$FE,(a0)
01:00000A6E 66FE            	  1038:             bne.s *               * branch if Z clear
                            	  1039: 
                            	  1040: 
01:00000A70 4E75            	  1041:     rts
                            	  1042: 
                            	  1043: *-----------------------------------------------------------
                            	  1044: *-----------------------------------------------------------
                            	  1045: * OPCODE : BCLR
                            	  1046: *-----------------------------------------------------------
                            	  1047: *-----------------------------------------------------------
                            	  1048: op_BCLR:
                            	  1049: 
                            	  1050: 
                            	  1051: *  Bit Number.s Static
                            	  1052: 
                            	  1053: *             EA = Dn  - LONG only
01:00000A72 203CFF0000FF    	  1054:             move.l #$FF0000FF,d0      * populate test data
01:00000A78 08800000        	  1055:             bclr.l #0,d0
01:00000A7C 67FE            	  1056:             beq.s *               * branch if Z set
01:00000A7E 08800001        	  1057:             bclr.l #1,d0              *
01:00000A82 67FE            	  1058:             beq.s *               * branch if Z set
01:00000A84 0880000F        	  1059:             bclr.l #15,d0             *
01:00000A88 66FE            	  1060:             bne.s *               * branch if Z clear
01:00000A8A 0880001F        	  1061:             bclr.l #31,d0             *
01:00000A8E 67FE            	  1062:             beq.s *               * branch if Z set
01:00000A90 0C807F0000FC    	  1063:             cmpi.l #$7F0000FC,d0
01:00000A96 66FE            	  1064:             bne.s *               * branch if Z clear
                            	  1065: 
                            	  1066: 
                            	  1067: *             EA = (An)  - BYTE only
01:00000A98 307C0100        	  1068:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000A9C 10BC000F        	  1069:             move.b #$0F,(a0)          * populate test data
01:00000AA0 08900000        	  1070:             bclr.b #0,(a0)
01:00000AA4 67FE            	  1071:             beq.s *               * branch if Z set
01:00000AA6 08900007        	  1072:             bclr.b #7,(a0)            *
01:00000AAA 66FE            	  1073:             bne.s *               * branch if Z clear
01:00000AAC 0C10000E        	  1074:             cmpi.b #$0E,(a0)
01:00000AB0 66FE            	  1075:             bne.s *               * branch if Z clear
                            	  1076: 
                            	  1077: *             EA = (An)+  - BYTE only
01:00000AB2 307C0100        	  1078:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AB6 10FC0001        	  1079:             move.b #$01,(a0)+         * populate test data
01:00000ABA 4218            	  1080:             move.b #$00,(a0)+         * populate test data
01:00000ABC 307C0100        	  1081:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AC0 08980000        	  1082:             bclr.b #0,(a0)+
01:00000AC4 67FE            	  1083:             beq.s *               * branch if Z set
01:00000AC6 08980001        	  1084:             bclr.b #1,(a0)+           *
01:00000ACA 66FE            	  1085:             bne.s *               * branch if Z clear
01:00000ACC 307C0100        	  1086:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AD0 4A18            	  1087:             cmpi.b #$00,(a0)+
01:00000AD2 66FE            	  1088:             bne.s *               * branch if Z clear
01:00000AD4 4A18            	  1089:             cmpi.b #$00,(a0)+
01:00000AD6 66FE            	  1090:             bne.s *               * branch if Z clear
                            	  1091: 
                            	  1092: 
                            	  1093: *             EA = -(An)  - BYTE only
01:00000AD8 307C0100        	  1094:             move.l #$00000100,a0      * point to memory to address
01:00000ADC 10FC0001        	  1095:             move.b #$01,(a0)+         * populate test data
01:00000AE0 10FC0080        	  1096:             move.b #$80,(a0)+         * populate test data
01:00000AE4 08A00007        	  1097:             bclr.b #7,-(a0)
01:00000AE8 67FE            	  1098:             beq.s *               * branch if Z set
01:00000AEA 08A00000        	  1099:             bclr.b #0,-(a0)           *
01:00000AEE 67FE            	  1100:             beq.s *               * branch if Z set
01:00000AF0 307C0102        	  1101:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000AF4 4A20            	  1102:             cmpi.b #$00,-(a0)
01:00000AF6 66FE            	  1103:             bne.s *               * branch if Z clear
01:00000AF8 4A20            	  1104:             cmpi.b #$00,-(a0)
01:00000AFA 66FE            	  1105:             bne.s *               * branch if Z clear
                            	  1106: 
                            	  1107: 
                            	  1108: *             EA = n(An)  - BYTE only
01:00000AFC 307C0100        	  1109:             move.l #$00000100,a0      * point to memory to address
01:00000B00 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
01:00000B04 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
01:00000B08 307C0100        	  1112:             move.l #$00000100,a0      * point to memory to address
01:00000B0C 08900000        	  1113:             bclr.b #0,0(a0)
01:00000B10 67FE            	  1114:             beq.s *               * branch if Z set
01:00000B12 08A800040001    	  1115:             bclr.b #4,1(a0)           *
01:00000B18 67FE            	  1116:             beq.s *               * branch if Z set
01:00000B1A 307C0100        	  1117:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B1E 0C1800FE        	  1118:             cmpi.b #$FE,(a0)+
01:00000B22 66FE            	  1119:             bne.s *               * branch if Z clear
01:00000B24 0C1800EF        	  1120:             cmpi.b #$EF,(a0)+
01:00000B28 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: 
                            	  1123: 
                            	  1124: *             EA = n(An,D.W)  - BYTE only
01:00000B2A 307C0100        	  1125:             move.l #$00000100,a0      * point to memory to address
01:00000B2E 93C9            	  1126:             move.l #$00000000,a1      * point to memory to address
01:00000B30 347C0001        	  1127:             move.l #$00000001,a2      * point to memory to address
01:00000B34 7000            	  1128:             moveq  #$00000000,d0      * point to memory to address
01:00000B36 7201            	  1129:             moveq  #$00000001,d1      * point to memory to address
01:00000B38 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
01:00000B3C 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
01:00000B40 307C0100        	  1132:             move.l #$00000100,a0      * point to memory to address
01:00000B44 08B000000000    	  1133:             bclr.b #0,0(a0,d0.w)
01:00000B4A 67FE            	  1134:             beq.s *               * branch if Z set
01:00000B4C 08B000011000    	  1135:             bclr.b #1,0(a0,d1.w)      *
01:00000B52 67FE            	  1136:             beq.s *               * branch if Z set
01:00000B54 08B000021001    	  1137:             bclr.b #2,1(a0,d1.w)      *
01:00000B5A 66FE            	  1138:             bne.s *               * branch if Z clear
                            	  1139: *             EA = n(An,D.L)  - BYTE only
01:00000B5C 08B000030800    	  1140:             bclr.b #3,0(a0,d0.l)
01:00000B62 67FE            	  1141:             beq.s *               * branch if Z set
01:00000B64 08B000041800    	  1142:             bclr.b #4,0(a0,d1.l)      *
01:00000B6A 67FE            	  1143:             beq.s *               * branch if Z set
01:00000B6C 08B000051801    	  1144:             bclr.b #5,1(a0,d1.l)      *
01:00000B72 66FE            	  1145:             bne.s *               * branch if Z clear
                            	  1146: *             EA = n(An,A.W)  - BYTE only
01:00000B74 08B000069000    	  1147:             bclr.b #6,0(a0,a1.w)
01:00000B7A 67FE            	  1148:             beq.s *               * branch if Z set
01:00000B7C 08B00001A000    	  1149:             bclr.b #1,0(a0,a2.w)      *
01:00000B82 66FE            	  1150:             bne.s *               * branch if Z clear
01:00000B84 08B00007A001    	  1151:             bclr.b #7,1(a0,a2.w)      *
01:00000B8A 67FE            	  1152:             beq.s *               * branch if Z set
                            	  1153: *             EA = n(An,A.L)  - BYTE only
01:00000B8C 08B000009800    	  1154:             bclr.b #0,0(a0,a1.l)
01:00000B92 66FE            	  1155:             bne.s *               * branch if Z clear
01:00000B94 08B00000A800    	  1156:             bclr.b #0,0(a0,a2.l)      *
01:00000B9A 67FE            	  1157:             beq.s *               * branch if Z set
01:00000B9C 08B00001A801    	  1158:             bclr.b #1,1(a0,a2.l)      *
01:00000BA2 66FE            	  1159:             bne.s *               * branch if Z clear
01:00000BA4 307C0100        	  1160:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BA8 0C1800B6        	  1161:             cmpi.b #$B6,(a0)+
01:00000BAC 66FE            	  1162:             bne.s *               * branch if Z clear
01:00000BAE 0C1800EC        	  1163:             cmpi.b #$EC,(a0)+
01:00000BB2 66FE            	  1164:             bne.s *               * branch if Z clear
01:00000BB4 0C180059        	  1165:             cmpi.b #$59,(a0)+
01:00000BB8 67FE            	  1166:             beq.s *               * branch if Z set
                            	  1167: 
                            	  1168: 
                            	  1169: *             EA = x.W  - BYTE only
01:00000BBA 307C0100        	  1170:             move.l #$00000100,a0      * point to memory to address
01:00000BBE 10FC00FF        	  1171:             move.b #$FF,(a0)+         * populate test data
01:00000BC2 08B800000100    	  1172:             bclr.b #0,$0100
01:00000BC8 67FE            	  1173:             beq.s *               * branch if Z set
01:00000BCA 08B800010100    	  1174:             bclr.b #1,$0100           *
01:00000BD0 67FE            	  1175:             beq.s *               * branch if Z set
01:00000BD2 307C0100        	  1176:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BD6 0C1800FC        	  1177:             cmpi.b #$FC,(a0)+
01:00000BDA 66FE            	  1178:             bne.s *               * branch if Z clear
                            	  1179: 
                            	  1180: 
                            	  1181: *             EA = x.L  - BYTE only
01:00000BDC 207C0000F100    	  1182:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BE2 10BC00FF        	  1183:             move.b #$FF,(a0)          * populate test data
01:00000BE6 08B900000000F100	  1184:             bclr.b #0,$F100
01:00000BEE 67FE            	  1185:             beq.s *               * branch if Z set
01:00000BF0 08B900010000F100	  1186:             bclr.b #1,$F100       *
01:00000BF8 67FE            	  1187:             beq.s *               * branch if Z set
01:00000BFA 08B900020000F100	  1188:             bclr.b #2,$F100       *
01:00000C02 67FE            	  1189:             beq.s *               * branch if Z set
01:00000C04 207C0000F100    	  1190:             move.l #$F100,a0      * point to memory to address 0x100
01:00000C0A 0C1800F8        	  1191:             cmpi.b #$F8,(a0)+
01:00000C0E 66FE            	  1192:             bne.s *               * branch if Z clear
                            	  1193: 
                            	  1194: 
                            	  1195: * Bit Number.s Dynamic
                            	  1196: 
                            	  1197: *             EA = Dn  - LONG only
01:00000C10 203CFF00FF00    	  1198:             move.l #$FF00FF00,d0      * populate test data
01:00000C16 7A00            	  1199:             move.l #0,d5              * populate bit.s number to test
01:00000C18 7C01            	  1200:             move.l #1,d6              * populate bit.s number to test
01:00000C1A 7E1F            	  1201:             move.l #31,d7              * populate bit.s number to test
                            	  1202: 
01:00000C1C 0B80            	  1203:             bclr.l d5,d0
01:00000C1E 66FE            	  1204:             bne.s *               * branch if Z clear
01:00000C20 0D80            	  1205:             bclr.l d6,d0              *
01:00000C22 66FE            	  1206:             bne.s *               * branch if Z clear
01:00000C24 0F80            	  1207:             bclr.l d7,d0             *
01:00000C26 67FE            	  1208:             beq.s *               * branch if Z set
01:00000C28 0C807F00FF00    	  1209:             cmpi.l #$7F00FF00,d0
01:00000C2E 66FE            	  1210:             bne.s *               * branch if Z clear
                            	  1211: 
                            	  1212: 
                            	  1213: *             EA = (An)  - BYTE only
01:00000C30 7A00            	  1214:             move.l #0,d5              * populate bit.s number to test
01:00000C32 7C01            	  1215:             move.l #1,d6              * populate bit.s number to test
01:00000C34 7E07            	  1216:             move.l #7,d7              * populate bit.s number to test
01:00000C36 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C3A 10BC0081        	  1218:             move.b #$81,(a0)          * populate test data
01:00000C3E 0B90            	  1219:             bclr.b d5,(a0)
01:00000C40 67FE            	  1220:             beq.s *               * branch if Z set
01:00000C42 0D90            	  1221:             bclr.b d6,(a0)            *
01:00000C44 66FE            	  1222:             bne.s *               * branch if Z clear
01:00000C46 0F90            	  1223:             bclr.b d7,(a0)            *
01:00000C48 67FE            	  1224:             beq.s *               * branch if Z set
01:00000C4A 4A10            	  1225:             cmpi.b #$00,(a0)
01:00000C4C 66FE            	  1226:             bne.s *               * branch if Z clear
                            	  1227: 
                            	  1228: 
                            	  1229: *             EA = (An)+  - BYTE only
01:00000C4E 307C0100        	  1230:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C52 10FC0001        	  1231:             move.b #$01,(a0)+         * populate test data
01:00000C56 10FC00FC        	  1232:             move.b #$FC,(a0)+         * populate test data
01:00000C5A 10FC0080        	  1233:             move.b #$80,(a0)+         * populate test data
01:00000C5E 307C0100        	  1234:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C62 0B98            	  1235:             bclr.b d5,(a0)+
01:00000C64 67FE            	  1236:             beq.s *               * branch if Z set
01:00000C66 0D98            	  1237:             bclr.b d6,(a0)+           *
01:00000C68 66FE            	  1238:             bne.s *               * branch if Z clear
01:00000C6A 0F98            	  1239:             bclr.b d7,(a0)+           *
01:00000C6C 67FE            	  1240:             beq.s *               * branch if Z set
01:00000C6E 307C0100        	  1241:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C72 4A18            	  1242:             cmpi.b #$00,(a0)+
01:00000C74 66FE            	  1243:             bne.s *               * branch if Z clear
01:00000C76 0C1800FC        	  1244:             cmpi.b #$FC,(a0)+
01:00000C7A 66FE            	  1245:             bne.s *               * branch if Z clear
01:00000C7C 4A18            	  1246:             cmpi.b #$00,(a0)+
01:00000C7E 66FE            	  1247:             bne.s *               * branch if Z clear
                            	  1248: 
                            	  1249: *             EA = -(An)  - BYTE only
01:00000C80 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
01:00000C84 10FC0080        	  1251:             move.b #$80,(a0)+         * populate test data
01:00000C88 10FC00FC        	  1252:             move.b #$FC,(a0)+         * populate test data
01:00000C8C 10FC0001        	  1253:             move.b #$01,(a0)+         * populate test data
01:00000C90 307C0103        	  1254:             move.l #$00000103,a0      * point to memory to address
01:00000C94 0BA0            	  1255:             bclr.b d5,-(a0)
01:00000C96 67FE            	  1256:             beq.s *               * branch if Z set
01:00000C98 0DA0            	  1257:             bclr.b d6,-(a0)           *
01:00000C9A 66FE            	  1258:             bne.s *               * branch if Z clear
01:00000C9C 0FA0            	  1259:             bclr.b d7,-(a0)           *
01:00000C9E 67FE            	  1260:             beq.s *               * branch if Z set
01:00000CA0 307C0103        	  1261:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000CA4 4A20            	  1262:             cmpi.b #$00,-(a0)
01:00000CA6 66FE            	  1263:             bne.s *               * branch if Z clear
01:00000CA8 0C2000FC        	  1264:             cmpi.b #$FC,-(a0)
01:00000CAC 66FE            	  1265:             bne.s *               * branch if Z clear
01:00000CAE 4A20            	  1266:             cmpi.b #$00,-(a0)
01:00000CB0 66FE            	  1267:             bne.s *               * branch if Z clear
                            	  1268: 
                            	  1269: *             EA = n(An)  - BYTE only
01:00000CB2 307C0100        	  1270:             move.l #$00000100,a0      * point to memory to address
01:00000CB6 10FC0001        	  1271:             move.b #$01,(a0)+         * populate test data
01:00000CBA 10FC00FC        	  1272:             move.b #$FC,(a0)+         * populate test data
01:00000CBE 10FC0080        	  1273:             move.b #$80,(a0)+         * populate test data
01:00000CC2 307C0100        	  1274:             move.l #$00000100,a0      * point to memory to address
01:00000CC6 0B90            	  1275:             bclr.b d5,0(a0)
01:00000CC8 67FE            	  1276:             beq.s *               * branch if Z set
01:00000CCA 0DA80001        	  1277:             bclr.b d6,1(a0)           *
01:00000CCE 66FE            	  1278:             bne.s *               * branch if Z clear
01:00000CD0 0FA80002        	  1279:             bclr.b d7,2(a0)           *
01:00000CD4 67FE            	  1280:             beq.s *               * branch if Z set
01:00000CD6 307C0100        	  1281:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CDA 4A18            	  1282:             cmpi.b #$00,(a0)+
01:00000CDC 66FE            	  1283:             bne.s *               * branch if Z clear
01:00000CDE 0C1800FC        	  1284:             cmpi.b #$FC,(a0)+
01:00000CE2 66FE            	  1285:             bne.s *               * branch if Z clear
01:00000CE4 4A18            	  1286:             cmpi.b #$00,(a0)+
01:00000CE6 66FE            	  1287:             bne.s *               * branch if Z clear
                            	  1288: 
                            	  1289: *             EA = n(An,R.W)  - BYTE only
01:00000CE8 307C0100        	  1290:             move.l #$00000100,a0      * point to memory to address
01:00000CEC 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
01:00000CF0 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000CF4 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
01:00000CF8 307C0103        	  1294:             move.l #$00000103,a0      * point to memory to address
01:00000CFC 307C0100        	  1295:             move.l #$00000100,a0      * point to memory to address
01:00000D00 93C9            	  1296:             move.l #$00000000,a1      * point to memory to address
01:00000D02 347C0001        	  1297:             move.l #$00000001,a2      * point to memory to address
01:00000D06 7000            	  1298:             moveq  #$00000000,d0      * point to memory to address
01:00000D08 7201            	  1299:             moveq  #$00000001,d1      * point to memory to address
01:00000D0A 0BB00000        	  1300:             bclr.b d5,0(a0,d0.w)
01:00000D0E 67FE            	  1301:             beq.s *               * branch if Z set
01:00000D10 0DB01000        	  1302:             bclr.b d6,0(a0,d1.w)      *
01:00000D14 67FE            	  1303:             beq.s *               * branch if Z set
01:00000D16 0FB01001        	  1304:             bclr.b d7,1(a0,d1.w)      *
01:00000D1A 67FE            	  1305:             beq.s *               * branch if Z set
                            	  1306: *             EA = n(An,R.L)  - BYTE only
01:00000D1C 0BB00800        	  1307:             bclr.b d5,0(a0,d0.l)
01:00000D20 66FE            	  1308:             bne.s *               * branch if Z clear
01:00000D22 0DB01800        	  1309:             bclr.b d6,0(a0,d1.l)      *
01:00000D26 66FE            	  1310:             bne.s *               * branch if Z clear
01:00000D28 0FB01801        	  1311:             bclr.b d7,1(a0,d1.l)      *
01:00000D2C 66FE            	  1312:             bne.s *               * branch if Z clear
                            	  1313: *             EA = n(An,A.W)  - BYTE only
01:00000D2E 0BB09000        	  1314:             bclr.b d5,0(a0,a1.w)
01:00000D32 66FE            	  1315:             bne.s *               * branch if Z clear
01:00000D34 0DB0A000        	  1316:             bclr.b d6,0(a0,a2.w)      *
01:00000D38 66FE            	  1317:             bne.s *               * branch if Z clear
01:00000D3A 0FB0A001        	  1318:             bclr.b d7,1(a0,a2.w)      *
01:00000D3E 66FE            	  1319:             bne.s *               * branch if Z clear
                            	  1320: *             EA = n(An,A.L)  - BYTE only
01:00000D40 0BB09800        	  1321:             bclr.b d5,0(a0,a1.l)
01:00000D44 66FE            	  1322:             bne.s *               * branch if Z clear
01:00000D46 0DB0A800        	  1323:             bclr.b d6,0(a0,a2.l)      *
01:00000D4A 66FE            	  1324:             bne.s *               * branch if Z clear
01:00000D4C 0FB0A801        	  1325:             bclr.b d7,1(a0,a2.l)      *
01:00000D50 66FE            	  1326:             bne.s *               * branch if Z clear
01:00000D52 307C0100        	  1327:             move.l #$00000100,a0      * point to memory to address
01:00000D56 0C1000FE        	  1328:             cmpi.b #$FE,(a0)
01:00000D5A 66FE            	  1329:             bne.s *               * branch if Z clear
                            	  1330: 
                            	  1331: *             EA = x.W  - BYTE only
01:00000D5C 307C0100        	  1332:             move.l #$00000100,a0      * point to memory to address
01:00000D60 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
01:00000D64 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000D68 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
01:00000D6C 0BB80100        	  1336:             bclr.b d5,$0100
01:00000D70 67FE            	  1337:             beq.s *               * branch if Z set
01:00000D72 0DB80101        	  1338:             bclr.b d6,$0101           *
01:00000D76 67FE            	  1339:             beq.s *               * branch if Z set
01:00000D78 0FB80102        	  1340:             bclr.b d7,$0102           *
01:00000D7C 67FE            	  1341:             beq.s *               * branch if Z set
01:00000D7E 307C0100        	  1342:             move.l #$00000100,a0      * point to memory to address
01:00000D82 0C1800FE        	  1343:             cmpi.b #$FE,(a0)+
01:00000D86 66FE            	  1344:             bne.s *               * branch if Z clear
                            	  1345: 
                            	  1346: *             EA = x.L  - BYTE only
01:00000D88 207C0000F100    	  1347:             move.l #$F100,a0      * point to memory to address 0x100
01:00000D8E 10FC0001        	  1348:             move.b #$01,(a0)+         * populate test data
01:00000D92 10FC00FC        	  1349:             move.b #$FC,(a0)+         * populate test data
01:00000D96 10FC0080        	  1350:             move.b #$80,(a0)+         * populate test data
01:00000D9A 0BB90000F100    	  1351:             bclr.b d5,$F100
01:00000DA0 67FE            	  1352:             beq.s *               * branch if Z set
01:00000DA2 0DB90000F101    	  1353:             bclr.b d6,$F101       *
01:00000DA8 66FE            	  1354:             bne.s *               * branch if Z clear
01:00000DAA 0FB90000F102    	  1355:             bclr.b d7,$F102       *
01:00000DB0 67FE            	  1356:             beq.s *               * branch if Z set
01:00000DB2 207C0000F101    	  1357:             move.l #$F101,a0      * point to memory to address 0x100
01:00000DB8 0C1000FC        	  1358:             cmpi.b #$FC,(a0)
01:00000DBC 66FE            	  1359:             bne.s *               * branch if Z clear
                            	  1360: 
                            	  1361: 
                            	  1362: 
01:00000DBE 4E75            	  1363:     rts
                            	  1364: 
                            	  1365: *-----------------------------------------------------------
                            	  1366: *-----------------------------------------------------------
                            	  1367: * OPCODE : BSET
                            	  1368: *-----------------------------------------------------------
                            	  1369: *-----------------------------------------------------------
                            	  1370: op_BSET:
                            	  1371: 
                            	  1372: 
                            	  1373: *  Bit Number.s Static
                            	  1374: 
                            	  1375: *             EA = Dn  - LONG only
01:00000DC0 7000            	  1376:             moveq  #$00000000,d0      * populate test data
01:00000DC2 08C00000        	  1377:             bset.l #0,d0
01:00000DC6 66FE            	  1378:             bne.s *               * branch if Z clear
01:00000DC8 08C00001        	  1379:             bset.l #1,d0              *
01:00000DCC 66FE            	  1380:             bne.s *               * branch if Z clear
01:00000DCE 08C0000F        	  1381:             bset.l #15,d0             *
01:00000DD2 66FE            	  1382:             bne.s *               * branch if Z clear
01:00000DD4 08C0001F        	  1383:             bset.l #31,d0             *
01:00000DD8 66FE            	  1384:             bne.s *               * branch if Z clear
01:00000DDA 0C8080008003    	  1385:             cmpi.l #$80008003,d0
01:00000DE0 66FE            	  1386:             bne.s *               * branch if Z clear
                            	  1387: 
                            	  1388: 
                            	  1389: *             EA = (An)  - BYTE only
01:00000DE2 307C0100        	  1390:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DE6 4210            	  1391:             move.b #$00,(a0)          * populate test data
01:00000DE8 08D00000        	  1392:             bset.b #0,(a0)
01:00000DEC 66FE            	  1393:             bne.s *               * branch if Z clear
01:00000DEE 08D00007        	  1394:             bset.b #7,(a0)            *
01:00000DF2 66FE            	  1395:             bne.s *               * branch if Z clear
01:00000DF4 0C100081        	  1396:             cmpi.b #$81,(a0)
01:00000DF8 66FE            	  1397:             bne.s *               * branch if Z clear
                            	  1398: 
                            	  1399: *             EA = (An)+  - BYTE only
01:00000DFA 307C0100        	  1400:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DFE 4218            	  1401:             move.b #$00,(a0)+         * populate test data
01:00000E00 4218            	  1402:             move.b #$00,(a0)+         * populate test data
01:00000E02 307C0100        	  1403:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E06 08D80000        	  1404:             bset.b #0,(a0)+
01:00000E0A 66FE            	  1405:             bne.s *               * branch if Z clear
01:00000E0C 08D80001        	  1406:             bset.b #1,(a0)+           *
01:00000E10 66FE            	  1407:             bne.s *               * branch if Z clear
01:00000E12 307C0100        	  1408:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E16 0C180001        	  1409:             cmpi.b #$01,(a0)+
01:00000E1A 66FE            	  1410:             bne.s *               * branch if Z clear
01:00000E1C 0C180002        	  1411:             cmpi.b #$02,(a0)+
01:00000E20 66FE            	  1412:             bne.s *               * branch if Z clear
                            	  1413: 
                            	  1414: 
                            	  1415: *             EA = -(An)  - BYTE only
01:00000E22 307C0100        	  1416:             move.l #$00000100,a0      * point to memory to address
01:00000E26 4218            	  1417:             move.b #$00,(a0)+         * populate test data
01:00000E28 4218            	  1418:             move.b #$00,(a0)+         * populate test data
01:00000E2A 08E00007        	  1419:             bset.b #7,-(a0)
01:00000E2E 66FE            	  1420:             bne.s *               * branch if Z clear
01:00000E30 08E00000        	  1421:             bset.b #0,-(a0)           *
01:00000E34 66FE            	  1422:             bne.s *               * branch if Z clear
01:00000E36 307C0102        	  1423:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000E3A 0C200080        	  1424:             cmpi.b #$80,-(a0)
01:00000E3E 66FE            	  1425:             bne.s *               * branch if Z clear
01:00000E40 0C200001        	  1426:             cmpi.b #$01,-(a0)
01:00000E44 66FE            	  1427:             bne.s *               * branch if Z clear
                            	  1428: 
                            	  1429: 
                            	  1430: *             EA = n(An)  - BYTE only
01:00000E46 307C0100        	  1431:             move.l #$00000100,a0      * point to memory to address
01:00000E4A 4218            	  1432:             move.b #$00,(a0)+         * populate test data
01:00000E4C 4218            	  1433:             move.b #$00,(a0)+         * populate test data
01:00000E4E 307C0100        	  1434:             move.l #$00000100,a0      * point to memory to address
01:00000E52 08D00000        	  1435:             bset.b #0,0(a0)
01:00000E56 66FE            	  1436:             bne.s *               * branch if Z clear
01:00000E58 08E800040001    	  1437:             bset.b #4,1(a0)           *
01:00000E5E 66FE            	  1438:             bne.s *               * branch if Z clear
01:00000E60 307C0100        	  1439:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E64 0C180001        	  1440:             cmpi.b #$01,(a0)+
01:00000E68 66FE            	  1441:             bne.s *               * branch if Z clear
01:00000E6A 0C180010        	  1442:             cmpi.b #$10,(a0)+
01:00000E6E 66FE            	  1443:             bne.s *               * branch if Z clear
                            	  1444: 
                            	  1445: 
                            	  1446: *             EA = n(An,D.W)  - BYTE only
01:00000E70 307C0100        	  1447:             move.l #$00000100,a0      * point to memory to address
01:00000E74 93C9            	  1448:             move.l #$00000000,a1      * point to memory to address
01:00000E76 347C0004        	  1449:             move.l #$00000004,a2      * point to memory to address
01:00000E7A 7000            	  1450:             moveq  #$00000000,d0      * point to memory to address
01:00000E7C 7201            	  1451:             moveq  #$00000001,d1      * point to memory to address
01:00000E7E 4218            	  1452:             move.b #$00,(a0)+         * populate test data
01:00000E80 4218            	  1453:             move.b #$00,(a0)+         * populate test data
01:00000E82 4218            	  1454:             move.b #$00,(a0)+         * populate test data
01:00000E84 4218            	  1455:             move.b #$00,(a0)+         * populate test data
01:00000E86 4218            	  1456:             move.b #$00,(a0)+         * populate test data
01:00000E88 4218            	  1457:             move.b #$00,(a0)+         * populate test data
01:00000E8A 4218            	  1458:             move.b #$00,(a0)+         * populate test data
01:00000E8C 4218            	  1459:             move.b #$00,(a0)+         * populate test data
01:00000E8E 4218            	  1460:             move.b #$00,(a0)+         * populate test data
01:00000E90 4218            	  1461:             move.b #$00,(a0)+         * populate test data
01:00000E92 307C0100        	  1462:             move.l #$00000100,a0      * point to memory to address
01:00000E96 08F000000000    	  1463:             bset.b #0,0(a0,d0.w)
01:00000E9C 66FE            	  1464:             bne.s *               * branch if Z clear
01:00000E9E 08F000011000    	  1465:             bset.b #1,0(a0,d1.w)      *
01:00000EA4 66FE            	  1466:             bne.s *               * branch if Z clear
01:00000EA6 08F000021001    	  1467:             bset.b #2,1(a0,d1.w)      *
01:00000EAC 66FE            	  1468:             bne.s *               * branch if Z clear
                            	  1469: *             EA = n(An,D.L)  - BYTE only
01:00000EAE 08F000030802    	  1470:             bset.b #3,2(a0,d0.l)
01:00000EB4 66FE            	  1471:             bne.s *               * branch if Z clear
01:00000EB6 08F000041800    	  1472:             bset.b #4,0(a0,d1.l)      *
01:00000EBC 66FE            	  1473:             bne.s *               * branch if Z clear
01:00000EBE 08F000051801    	  1474:             bset.b #5,1(a0,d1.l)      *
01:00000EC4 66FE            	  1475:             bne.s *               * branch if Z clear
                            	  1476: *             EA = n(An,A.W)  - BYTE only
01:00000EC6 08F000069000    	  1477:             bset.b #6,0(a0,a1.w)
01:00000ECC 66FE            	  1478:             bne.s *               * branch if Z clear
01:00000ECE 08F00001A000    	  1479:             bset.b #1,0(a0,a2.w)      *
01:00000ED4 66FE            	  1480:             bne.s *               * branch if Z clear
01:00000ED6 08F00007A001    	  1481:             bset.b #7,1(a0,a2.w)      *
01:00000EDC 66FE            	  1482:             bne.s *               * branch if Z clear
                            	  1483: *             EA = n(An,A.L)  - BYTE only
01:00000EDE 08F00000A802    	  1484:             bset.b #0,2(a0,a2.l)
01:00000EE4 66FE            	  1485:             bne.s *               * branch if Z clear
01:00000EE6 08F00000A803    	  1486:             bset.b #0,3(a0,a2.l)      *
01:00000EEC 66FE            	  1487:             bne.s *               * branch if Z clear
01:00000EEE 08F00001A804    	  1488:             bset.b #1,4(a0,a2.l)      *
01:00000EF4 66FE            	  1489:             bne.s *               * branch if Z clear
01:00000EF6 307C0100        	  1490:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000EFA 0C9841122C00    	  1491:             cmpi.l #$41122C00,(a0)+
01:00000F00 66FE            	  1492:             bne.s *               * branch if Z clear
01:00000F02 0C9802800101    	  1493:             cmpi.l #$02800101,(a0)+
01:00000F08 66FE            	  1494:             bne.s *
                            	  1495: 
                            	  1496: 
                            	  1497: 
                            	  1498: *             EA = x.W  - BYTE only
01:00000F0A 307C0100        	  1499:             move.l #$00000100,a0      * point to memory to address
01:00000F0E 4218            	  1500:             move.b #$00,(a0)+         * populate test data
01:00000F10 08F800000100    	  1501:             bset.b #0,$0100
01:00000F16 66FE            	  1502:             bne.s *               * branch if Z clear
01:00000F18 08F800010100    	  1503:             bset.b #1,$0100           *
01:00000F1E 66FE            	  1504:             bne.s *               * branch if Z clear
01:00000F20 307C0100        	  1505:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F24 0C180003        	  1506:             cmpi.b #$03,(a0)+
01:00000F28 66FE            	  1507:             bne.s *
                            	  1508: 
                            	  1509: 
                            	  1510: *             EA = x.L  - BYTE only
01:00000F2A 207C0000F100    	  1511:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F30 4210            	  1512:             move.b #$00,(a0)          * populate test data
01:00000F32 08F900000000F100	  1513:             bset.b #0,$F100
01:00000F3A 66FE            	  1514:             bne.s *               * branch if Z clear
01:00000F3C 08F900010000F100	  1515:             bset.b #1,$F100       *
01:00000F44 66FE            	  1516:             bne.s *               * branch if Z clear
01:00000F46 08F900020000F100	  1517:             bset.b #2,$F100       *
01:00000F4E 66FE            	  1518:             bne.s *               * branch if Z clear
01:00000F50 207C0000F100    	  1519:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F56 0C180007        	  1520:             cmpi.b #$07,(a0)+
01:00000F5A 66FE            	  1521:             bne.s *
                            	  1522: 
                            	  1523: 
                            	  1524: * Bit Number.s Dynamic
                            	  1525: 
                            	  1526: *             EA = Dn  - LONG only
01:00000F5C 7000            	  1527:             moveq  #$00000000,d0      * populate test data
01:00000F5E 7A00            	  1528:             move.l #0,d5              * populate bit.s number to test
01:00000F60 7C01            	  1529:             move.l #1,d6              * populate bit.s number to test
01:00000F62 7E1F            	  1530:             move.l #31,d7              * populate bit.s number to test
                            	  1531: 
01:00000F64 0BC0            	  1532:             bset.l d5,d0
01:00000F66 66FE            	  1533:             bne.s *               * branch if Z clear
01:00000F68 0DC0            	  1534:             bset.l d6,d0              *
01:00000F6A 66FE            	  1535:             bne.s *               * branch if Z clear
01:00000F6C 0FC0            	  1536:             bset.l d7,d0             *
01:00000F6E 66FE            	  1537:             bne.s *               * branch if Z clear
01:00000F70 0C8080000003    	  1538:             cmpi.l #$80000003,d0
01:00000F76 66FE            	  1539:             bne.s *               * branch if Z clear
                            	  1540: 
                            	  1541: 
                            	  1542: *             EA = (An)  - BYTE only
01:00000F78 7A00            	  1543:             move.l #0,d5              * populate bit.s number to test
01:00000F7A 7C01            	  1544:             move.l #1,d6              * populate bit.s number to test
01:00000F7C 7E07            	  1545:             move.l #7,d7              * populate bit.s number to test
01:00000F7E 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F82 4210            	  1547:             move.b #$00,(a0)          * populate test data
01:00000F84 0BD0            	  1548:             bset.b d5,(a0)
01:00000F86 66FE            	  1549:             bne.s *               * branch if Z clear
01:00000F88 0DD0            	  1550:             bset.b d6,(a0)            *
01:00000F8A 66FE            	  1551:             bne.s *               * branch if Z clear
01:00000F8C 0FD0            	  1552:             bset.b d7,(a0)            *
01:00000F8E 66FE            	  1553:             bne.s *               * branch if Z clear
01:00000F90 0C100083        	  1554:             cmpi.b #$83,(a0)
01:00000F94 66FE            	  1555:             bne.s *               * branch if Z clear
                            	  1556: 
                            	  1557: 
                            	  1558: *             EA = (An)+  - BYTE only
01:00000F96 307C0100        	  1559:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F9A 4218            	  1560:             move.b #$00,(a0)+         * populate test data
01:00000F9C 4218            	  1561:             move.b #$00,(a0)+         * populate test data
01:00000F9E 4218            	  1562:             move.b #$00,(a0)+         * populate test data
01:00000FA0 307C0100        	  1563:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FA4 0BD8            	  1564:             bset.b d5,(a0)+
01:00000FA6 66FE            	  1565:             bne.s *               * branch if Z clear
01:00000FA8 0DD8            	  1566:             bset.b d6,(a0)+           *
01:00000FAA 66FE            	  1567:             bne.s *               * branch if Z clear
01:00000FAC 0FD8            	  1568:             bset.b d7,(a0)+           *
01:00000FAE 66FE            	  1569:             bne.s *               * branch if Z clear
01:00000FB0 307C0100        	  1570:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FB4 0C180001        	  1571:             cmpi.b #$01,(a0)+
01:00000FB8 66FE            	  1572:             bne.s *               * branch if Z clear
01:00000FBA 0C180002        	  1573:             cmpi.b #$02,(a0)+
01:00000FBE 66FE            	  1574:             bne.s *               * branch if Z clear
01:00000FC0 0C180080        	  1575:             cmpi.b #$80,(a0)+
01:00000FC4 66FE            	  1576:             bne.s *               * branch if Z clear
                            	  1577: 
                            	  1578: *             EA = -(An)  - BYTE only
01:00000FC6 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
01:00000FCA 4218            	  1580:             move.b #$00,(a0)+         * populate test data
01:00000FCC 4218            	  1581:             move.b #$00,(a0)+         * populate test data
01:00000FCE 4218            	  1582:             move.b #$00,(a0)+         * populate test data
01:00000FD0 307C0103        	  1583:             move.l #$00000103,a0      * point to memory to address
01:00000FD4 0BE0            	  1584:             bset.b d5,-(a0)
01:00000FD6 66FE            	  1585:             bne.s *               * branch if Z clear
01:00000FD8 0DE0            	  1586:             bset.b d6,-(a0)           *
01:00000FDA 66FE            	  1587:             bne.s *               * branch if Z clear
01:00000FDC 0FE0            	  1588:             bset.b d7,-(a0)           *
01:00000FDE 66FE            	  1589:             bne.s *               * branch if Z clear
01:00000FE0 307C0103        	  1590:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000FE4 0C200001        	  1591:             cmpi.b #$01,-(a0)
01:00000FE8 66FE            	  1592:             bne.s *               * branch if Z clear
01:00000FEA 0C200002        	  1593:             cmpi.b #$02,-(a0)
01:00000FEE 66FE            	  1594:             bne.s *               * branch if Z clear
01:00000FF0 0C200080        	  1595:             cmpi.b #$80,-(a0)
01:00000FF4 66FE            	  1596:             bne.s *               * branch if Z clear
                            	  1597: 
                            	  1598: *             EA = n(An)  - BYTE only
01:00000FF6 307C0100        	  1599:             move.l #$00000100,a0      * point to memory to address
01:00000FFA 4218            	  1600:             move.b #$00,(a0)+         * populate test data
01:00000FFC 4218            	  1601:             move.b #$00,(a0)+         * populate test data
01:00000FFE 4218            	  1602:             move.b #$00,(a0)+         * populate test data
01:00001000 307C0100        	  1603:             move.l #$00000100,a0      * point to memory to address
01:00001004 0BD0            	  1604:             bset.b d5,0(a0)
01:00001006 66FE            	  1605:             bne.s *               * branch if Z clear
01:00001008 0DE80001        	  1606:             bset.b d6,1(a0)           *
01:0000100C 66FE            	  1607:             bne.s *               * branch if Z clear
01:0000100E 0FE80002        	  1608:             bset.b d7,2(a0)           *
01:00001012 66FE            	  1609:             bne.s *               * branch if Z clear
01:00001014 307C0100        	  1610:             move.l #$00000100,a0      * point to memory to address 0x100
01:00001018 0C180001        	  1611:             cmpi.b #$01,(a0)+
01:0000101C 66FE            	  1612:             bne.s *               * branch if Z clear
01:0000101E 0C180002        	  1613:             cmpi.b #$02,(a0)+
01:00001022 66FE            	  1614:             bne.s *               * branch if Z clear
01:00001024 0C180080        	  1615:             cmpi.b #$80,(a0)+
01:00001028 66FE            	  1616:             bne.s *               * branch if Z clear
                            	  1617: 
                            	  1618: *             EA = n(An,R.W)  - BYTE only
01:0000102A 307C0100        	  1619:             move.l #$00000100,a0      * point to memory to address
01:0000102E 4218            	  1620:             move.b #$00,(a0)+         * populate test data
01:00001030 4218            	  1621:             move.b #$00,(a0)+         * populate test data
01:00001032 4218            	  1622:             move.b #$00,(a0)+         * populate test data
01:00001034 4218            	  1623:             move.b #$00,(a0)+         * populate test data
01:00001036 4218            	  1624:             move.b #$00,(a0)+         * populate test data
01:00001038 4218            	  1625:             move.b #$00,(a0)+         * populate test data
01:0000103A 4218            	  1626:             move.b #$00,(a0)+         * populate test data
01:0000103C 4218            	  1627:             move.b #$00,(a0)+         * populate test data
01:0000103E 4218            	  1628:             move.b #$00,(a0)+         * populate test data
01:00001040 4218            	  1629:             move.b #$00,(a0)+         * populate test data
01:00001042 4218            	  1630:             move.b #$00,(a0)+         * populate test data
01:00001044 4218            	  1631:             move.b #$00,(a0)+         * populate test data
01:00001046 307C0100        	  1632:             move.l #$00000100,a0      * point to memory to address
01:0000104A 93C9            	  1633:             move.l #$00000000,a1      * point to memory to address
01:0000104C 347C0001        	  1634:             move.l #$00000001,a2      * point to memory to address
01:00001050 7000            	  1635:             moveq  #$00000000,d0      * point to memory to address
01:00001052 7201            	  1636:             moveq  #$00000001,d1      * point to memory to address
01:00001054 0BF00000        	  1637:             bset.b d5,0(a0,d0.w)
01:00001058 66FE            	  1638:             bne.s *               * branch if Z clear
01:0000105A 0DF01000        	  1639:             bset.b d6,0(a0,d1.w)      *
01:0000105E 66FE            	  1640:             bne.s *               * branch if Z clear
01:00001060 0FF01001        	  1641:             bset.b d7,1(a0,d1.w)      *
01:00001064 66FE            	  1642:             bne.s *               * branch if Z clear
                            	  1643: *             EA = n(An,R.L)  - BYTE only
01:00001066 0BF00802        	  1644:             bset.b d5,2(a0,d0.l)
01:0000106A 66FE            	  1645:             bne.s *               * branch if Z clear
01:0000106C 0DF01803        	  1646:             bset.b d6,3(a0,d1.l)      *
01:00001070 66FE            	  1647:             bne.s *               * branch if Z clear
01:00001072 0FF01804        	  1648:             bset.b d7,4(a0,d1.l)      *
01:00001076 66FE            	  1649:             bne.s *               * branch if Z clear
                            	  1650: *             EA = n(An,A.W)  - BYTE only
01:00001078 0BF09005        	  1651:             bset.b d5,5(a0,a1.w)
01:0000107C 66FE            	  1652:             bne.s *               * branch if Z clear
01:0000107E 0DF0A006        	  1653:             bset.b d6,6(a0,a2.w)      *
01:00001082 66FE            	  1654:             bne.s *               * branch if Z clear
01:00001084 0FF0A007        	  1655:             bset.b d7,7(a0,a2.w)      *
01:00001088 66FE            	  1656:             bne.s *               * branch if Z clear
                            	  1657: *             EA = n(An,A.L)  - BYTE only
01:0000108A 0BF09808        	  1658:             bset.b d5,8(a0,a1.l)
01:0000108E 66FE            	  1659:             bne.s *               * branch if Z clear
01:00001090 0DF0A809        	  1660:             bset.b d6,9(a0,a2.l)      *
01:00001094 66FE            	  1661:             bne.s *               * branch if Z clear
01:00001096 0FF0A80A        	  1662:             bset.b d7,10(a0,a2.l)      *
01:0000109A 66FE            	  1663:             bne.s *               * branch if Z clear
01:0000109C 307C0100        	  1664:             move.l #$00000100,a0      * point to memory to address 0x100
01:000010A0 0C9801028100    	  1665:             cmpi.l #$01028100,(a0)+
01:000010A6 66FE            	  1666:             bne.s *               * branch if Z clear
01:000010A8 0C9802810002    	  1667:             cmpi.l #$02810002,(a0)+
01:000010AE 66FE            	  1668:             bne.s *
                            	  1669: 
                            	  1670: 
                            	  1671: *             EA = x.W  - BYTE only
01:000010B0 307C0100        	  1672:             move.l #$00000100,a0      * point to memory to address
01:000010B4 4218            	  1673:             move.b #$00,(a0)+         * populate test data
01:000010B6 4218            	  1674:             move.b #$00,(a0)+         * populate test data
01:000010B8 4218            	  1675:             move.b #$00,(a0)+         * populate test data
01:000010BA 0BF80100        	  1676:             bset.b d5,$0100
01:000010BE 66FE            	  1677:             bne.s *               * branch if Z clear
01:000010C0 0DF80100        	  1678:             bset.b d6,$0100           *
01:000010C4 66FE            	  1679:             bne.s *               * branch if Z clear
01:000010C6 0FF80100        	  1680:             bset.b d7,$0100           *
01:000010CA 66FE            	  1681:             bne.s *               * branch if Z clear
01:000010CC 307C0100        	  1682:             move.l #$00000100,a0      * point to memory to address
01:000010D0 0C180083        	  1683:             cmpi.b #$83,(a0)+
01:000010D4 66FE            	  1684:             bne.s *               * branch if Z clear
                            	  1685: 
                            	  1686: *             EA = x.L  - BYTE only
01:000010D6 207C0000F100    	  1687:             move.l #$F100,a0      * point to memory to address 0x100
01:000010DC 4218            	  1688:             move.b #$00,(a0)+         * populate test data
01:000010DE 4218            	  1689:             move.b #$00,(a0)+         * populate test data
01:000010E0 4218            	  1690:             move.b #$00,(a0)+         * populate test data
01:000010E2 0BF90000F100    	  1691:             bset.b d5,$F100
01:000010E8 66FE            	  1692:             bne.s *               * branch if Z clear
01:000010EA 0DF90000F100    	  1693:             bset.b d6,$F100       *
01:000010F0 66FE            	  1694:             bne.s *               * branch if Z clear
01:000010F2 0FF90000F100    	  1695:             bset.b d7,$F100       *
01:000010F8 66FE            	  1696:             bne.s *               * branch if Z clear
01:000010FA 207C0000F100    	  1697:             move.l #$F100,a0      * point to memory to address 0x100
01:00001100 0C100083        	  1698:             cmpi.b #$83,(a0)
01:00001104 66FE            	  1699:             bne.s *               * branch if Z clear
                            	  1700: 
                            	  1701: 
01:00001106 4E75            	  1702:     rts
                            	  1703: 
                            	  1704: *-----------------------------------------------------------
                            	  1705: *-----------------------------------------------------------
                            	  1706: * OPCODE : MOVEP
                            	  1707: *-----------------------------------------------------------
                            	  1708: *-----------------------------------------------------------
                            	  1709: op_MOVEP:
                            	  1710: 
                            	  1711: * Dn --> x(An)
01:00001108 307C0100        	  1712:             move.l #$00000100,a0
01:0000110C 203C12345678    	  1713:             move.l #$12345678,d0
01:00001112 223CAABBCCDD    	  1714:             move.l #$AABBCCDD,d1
01:00001118 4290            	  1715:             move.l #0,(a0)
01:0000111A 42A80004        	  1716:             move.l #0,4(a0)
                            	  1717: 
01:0000111E 01880000        	  1718:             movep.w d0,0(a0)      * even offset
01:00001122 03880001        	  1719:             movep.w d1,1(a0)      * odd offset
                            	  1720: 
01:00001126 01C80004        	  1721:             movep.l d0,4(a0)      * even offset
01:0000112A 03C80005        	  1722:             movep.l d1,5(a0)      * odd offset
                            	  1723: 
01:0000112E 0C9056CC78DD    	  1724:             cmpi.l #$56CC78DD,(a0)
01:00001134 66FE            	  1725:             bne.s *
01:00001136 0CA812AA34BB0004	  1726:             cmpi.l #$12AA34BB,4(a0)
01:0000113E 66FE            	  1727:             bne.s *
01:00001140 0CA856CC78DD0008	  1728:             cmpi.l #$56CC78DD,8(a0)
01:00001148 66FE            	  1729:             bne.s *
                            	  1730: 
                            	  1731: 
                            	  1732: * x(An)--> Dn
01:0000114A 203C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d0
01:00001150 223C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d1
01:00001156 243C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d2
01:0000115C 263C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d3
                            	  1737: 
01:00001162 01080000        	  1738:             movep.w 0(a0),d0      * even offset
01:00001166 03080001        	  1739:             movep.w 1(a0),d1      * odd offset
                            	  1740: 
01:0000116A 05480004        	  1741:             movep.l 4(a0),d2      * even offset
01:0000116E 07480005        	  1742:             movep.l 5(a0),d3      * odd offset
                            	  1743: 
01:00001172 0C805A5A5678    	  1744:             cmpi.l #$5a5a5678,d0
01:00001178 66FE            	  1745:             bne.s *
01:0000117A 0C815A5ACCDD    	  1746:             cmpi.l #$5a5aCCDD,d1
01:00001180 66FE            	  1747:             bne.s *
01:00001182 0C8212345678    	  1748:             cmpi.l #$12345678,d2
01:00001188 66FE            	  1749:             bne.s *
01:0000118A 0C83AABBCCDD    	  1750:             cmpi.l #$AABBCCDD,d3
01:00001190 66FE            	  1751:             bne.s *
                            	  1752: 
01:00001192 4E75            	  1753:             rts
                            	  1754: 
                            	  1755: 
                            	  1756: 
                            	  1757: *-----------------------------------------------------------
                            	  1758: *-----------------------------------------------------------
                            	  1759: * OPCODE : BOOL_I
                            	  1760: *-----------------------------------------------------------
                            	  1761: *-----------------------------------------------------------
                            	  1762: op_BOOL_I:
                            	  1763: 
                            	  1764: *     Dn -- BYTE
01:00001194 203C12345678    	  1765:             move.l #$12345678,d0
01:0000119A 44FC000F        	  1766:             move.w #$000F,CCR          * pre-set Flags
01:0000119E 000000FF        	  1767:             ori.b  #$FF,d0
01:000011A2 0A00005A        	  1768:             eori.b #$5A,d0
01:000011A6 020000F0        	  1769:             andi.b #$F0,d0
01:000011AA 69FE            	  1770:             bvs.s *                       * Check V,C are cleared
01:000011AC 65FE            	  1771:             bcs.s *
01:000011AE 6AFE            	  1772:             bpl.s *                       * Verify if N flag is set
01:000011B0 4200            	  1773:             andi.b #$00,d0
01:000011B2 6BFE            	  1774:             bmi.s *                       * Verify if N flag is cleared
01:000011B4 66FE            	  1775:             bne.s *                       * Verify if Z flag is set
                            	  1776: 
                            	  1777: *     Dn -- WORD
01:000011B6 223C12345678    	  1778:             move.l #$12345678,d1
01:000011BC 44FC000F        	  1779:             move.w #$000F,CCR          * pre-set Flags
01:000011C0 0041FFFF        	  1780:             ori.w  #$FFFF,d1
01:000011C4 0A415A5A        	  1781:             eori.w #$5A5A,d1
01:000011C8 0241F0F0        	  1782:             andi.w #$F0F0,d1
01:000011CC 69FE            	  1783:             bvs.s *                       * Check V,C are cleared
01:000011CE 65FE            	  1784:             bcs.s *
01:000011D0 6AFE            	  1785:             bpl.s *                       * Verify if N flag is set
01:000011D2 4241            	  1786:             andi.w #$0000,d1
01:000011D4 6BFE            	  1787:             bmi.s *                       * Verify if N flag is cleared
01:000011D6 66FE            	  1788:             bne.s *                       * Verify if Z flag is set
                            	  1789: 
                            	  1790: *     Dn -- LONG
01:000011D8 243C12345678    	  1791:             move.l #$12345678,d2
01:000011DE 44FC000F        	  1792:             move.w #$000F,CCR          * pre-set Flags
01:000011E2 0082FFFFFFFF    	  1793:             ori.l  #$FFFFFFFF,d2
01:000011E8 0A825A5A5A5A    	  1794:             eori.l #$5A5A5A5A,d2
01:000011EE 0282F0F0F0F0    	  1795:             andi.l #$F0F0F0F0,d2
01:000011F4 69FE            	  1796:             bvs.s *                       * Check V,C are cleared
01:000011F6 65FE            	  1797:             bcs.s *
01:000011F8 6AFE            	  1798:             bpl.s *                       * Verify if N flag is set
01:000011FA 4282            	  1799:             andi.l #$00000000,d2
01:000011FC 6BFE            	  1800:             bmi.s *                       * Verify if N flag is cleared
01:000011FE 66FE            	  1801:             bne.s *                       * Verify if Z flag is set
                            	  1802: 
                            	  1803: 
                            	  1804: *     (An) -- BYTE
01:00001200 307C0100        	  1805:             move.l #$00000100,a0
01:00001204 20BC12345678    	  1806:             move.l #$12345678,(a0)
01:0000120A 44FC000F        	  1807:             move.w #$000F,CCR          * pre-set Flags
01:0000120E 001000FF        	  1808:             ori.b  #$FF,(a0)
01:00001212 0A10005A        	  1809:             eori.b #$5A,(a0)
01:00001216 021000F0        	  1810:             andi.b #$F0,(a0)
01:0000121A 69FE            	  1811:             bvs.s *                       * Check V,C are cleared
01:0000121C 65FE            	  1812:             bcs.s *
01:0000121E 6AFE            	  1813:             bpl.s *                       * Verify if N flag is set
01:00001220 4210            	  1814:             andi.b #$00,(a0)
01:00001222 6BFE            	  1815:             bmi.s *                       * Verify if N flag is cleared
01:00001224 66FE            	  1816:             bne.s *                       * Verify if Z flag is set
01:00001226 4A10            	  1817:             cmpi.b #$00,(a0)
01:00001228 66FE            	  1818:             bne.s *                       * Verify if Z flag is set
                            	  1819: 
                            	  1820: *     (An) -- WORD
01:0000122A 20BC12345678    	  1821:             move.l #$12345678,(a0)
01:00001230 44FC000F        	  1822:             move.w #$000F,CCR          * pre-set Flags
01:00001234 0050FFFF        	  1823:             ori.w  #$FFFF,(a0)
01:00001238 0A505A5A        	  1824:             eori.w #$5A5A,(a0)
01:0000123C 0250F0F0        	  1825:             andi.w #$F0F0,(a0)
01:00001240 69FE            	  1826:             bvs.s *                       * Check V,C are cleared
01:00001242 65FE            	  1827:             bcs.s *
01:00001244 6AFE            	  1828:             bpl.s *                       * Verify if N flag is set
01:00001246 4250            	  1829:             andi.w #$0000,(a0)
01:00001248 6BFE            	  1830:             bmi.s *                       * Verify if N flag is cleared
01:0000124A 66FE            	  1831:             bne.s *                       * Verify if Z flag is set
01:0000124C 4A50            	  1832:             cmpi.w #$00,(a0)
01:0000124E 66FE            	  1833:             bne.s *                       * Verify if Z flag is set
                            	  1834: 
                            	  1835: *     (An) -- LONG
01:00001250 20BC12345678    	  1836:             move.l #$12345678,(a0)
01:00001256 44FC000F        	  1837:             move.w #$000F,CCR          * pre-set Flags
01:0000125A 0090FFFFFFFF    	  1838:             ori.l  #$FFFFFFFF,(a0)
01:00001260 0A905A5A5A5A    	  1839:             eori.l #$5A5A5A5A,(a0)
01:00001266 0290F0F0F0F0    	  1840:             andi.l #$F0F0F0F0,(a0)
01:0000126C 69FE            	  1841:             bvs.s *                       * Check V,C are cleared
01:0000126E 65FE            	  1842:             bcs.s *
01:00001270 6AFE            	  1843:             bpl.s *                       * Verify if N flag is set
01:00001272 4290            	  1844:             andi.l #$00000000,(a0)
01:00001274 6BFE            	  1845:             bmi.s *                       * Verify if N flag is cleared
01:00001276 66FE            	  1846:             bne.s *                       * Verify if Z flag is set
01:00001278 4A90            	  1847:             cmpi.l #$00,(a0)
01:0000127A 66FE            	  1848:             bne.s *                       * Verify if Z flag is set
                            	  1849: 
                            	  1850: 
                            	  1851: 
                            	  1852: *     (An)+ -- BYTE
01:0000127C 307C0100        	  1853:             move.l #$00000100,a0
01:00001280 20BC00A5FF88    	  1854:             move.l #$00A5FF88,(a0)
01:00001286 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
01:0000128A 001800F5        	  1857:             ori.b  #$F5,(a0)+
01:0000128E 6AFE            	  1858:             bpl.s *                       * Verify if N flag is set
01:00001290 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
01:00001292 4618            	  1861:             eori.b #$FF,(a0)+
01:00001294 6BFE            	  1862:             bmi.s *                       * Verify if N flag is cleared
01:00001296 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
01:00001298 021800AA        	  1865:             andi.b #$AA,(a0)+
01:0000129C 6AFE            	  1866:             bpl.s *                       * Verify if N flag is set
01:0000129E 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
01:000012A0 307C0100        	  1869:             move.l #$00000100,a0
01:000012A4 0C90F55AAA88    	  1870:             cmpi.l #$F55AAA88,(a0)
01:000012AA 66FE            	  1871:             bne.s *                       * Verify if Z flag is set
                            	  1872: 
                            	  1873: 
                            	  1874: *     (An)+ -- WORD
01:000012AC 307C0100        	  1875:             move.l #$00000100,a0
01:000012B0 327C0104        	  1876:             move.l #$00000104,a1
01:000012B4 20BC00005A5A    	  1877:             move.l #$00005a5a,(a0)
01:000012BA 22BC12345678    	  1878:             move.l #$12345678,(a1)
01:000012C0 44FC000F        	  1879:             move.w #$000F,CCR          * pre-set Flags
                            	  1880: 
01:000012C4 00585678        	  1881:             ori.w  #$5678,(a0)+
01:000012C8 6BFE            	  1882:             bmi.s *                       * Verify if N flag is cleared
01:000012CA 67FE            	  1883:             beq.s *                       * Verify if Z flag is cleared
                            	  1884: 
01:000012CC 4658            	  1885:             eori.w #$FFFF,(a0)+
01:000012CE 6AFE            	  1886:             bpl.s *                       * Verify if N flag is set
01:000012D0 67FE            	  1887:             beq.s *                       * Verify if Z flag is cleared
                            	  1888: 
01:000012D2 0258A55A        	  1889:             andi.w #$A55A,(a0)+
01:000012D6 6BFE            	  1890:             bmi.s *                       * Verify if N flag is cleared
01:000012D8 67FE            	  1891:             beq.s *                       * Verify if Z flag is cleared
                            	  1892: 
01:000012DA 307C0100        	  1893:             move.l #$00000100,a0
01:000012DE 0C905678A5A5    	  1894:             cmpi.l #$5678a5a5,(a0)
01:000012E4 307C0104        	  1895:             move.l #$00000104,a0
01:000012E8 0C9000105678    	  1896:             cmpi.l #$00105678,(a0)
01:000012EE 66FE            	  1897:             bne.s *                       * Verify if Z flag is set
                            	  1898: 
                            	  1899: *     (An)+ -- LONG
01:000012F0 307C0100        	  1900:             move.l #$00000100,a0
01:000012F4 4298            	  1901:             move.l #$00000000,(a0)+
01:000012F6 20FC5A5A5A5A    	  1902:             move.l #$5a5a5a5a,(a0)+
01:000012FC 20FCFFFFFFFF    	  1903:             move.l #$FFFFFFFF,(a0)+
01:00001302 307C0100        	  1904:             move.l #$00000100,a0
01:00001306 44FC000F        	  1905:             move.w #$000F,CCR          * pre-set Flags
                            	  1906: 
01:0000130A 009812345678    	  1907:             ori.l  #$12345678,(a0)+
01:00001310 6BFE            	  1908:             bmi.s *                       * Verify if N flag is cleared
01:00001312 67FE            	  1909:             beq.s *                       * Verify if Z flag is cleared
                            	  1910: 
01:00001314 4698            	  1911:             eori.l #$FFFFFFFF,(a0)+
01:00001316 6AFE            	  1912:             bpl.s *                       * Verify if N flag is set
01:00001318 67FE            	  1913:             beq.s *                       * Verify if Z flag is cleared
                            	  1914: 
01:0000131A 0298A5A5A55A    	  1915:             andi.l #$A5A5A55A,(a0)+
01:00001320 6AFE            	  1916:             bpl.s *                       * Verify if N flag is set
01:00001322 67FE            	  1917:             beq.s *                       * Verify if Z flag is cleared
                            	  1918: 
01:00001324 307C0100        	  1919:             move.l #$00000100,a0
01:00001328 0C9812345678    	  1920:             cmpi.l #$12345678,(a0)+
01:0000132E 0C98A5A5A5A5    	  1921:             cmpi.l #$a5a5a5a5,(a0)+
01:00001334 0C98A5A5A55A    	  1922:             cmpi.l #$a5a5a55a,(a0)+
01:0000133A 66FE            	  1923:             bne.s *                       * Verify if Z flag is set
                            	  1924: 
01:0000133C 4E75            	  1925:             rts
                            	  1926: 
                            	  1927: 
                            	  1928: *-----------------------------------------------------------
                            	  1929: *-----------------------------------------------------------
                            	  1930: * OPCODE : BSR
                            	  1931: *-----------------------------------------------------------
                            	  1932: *-----------------------------------------------------------
                            	  1933: 
                            	  1934: 
01:0000133E 223C11111111    	  1935: BSR_CLOSE1:     move.l #$11111111,d1
01:00001344 4E75            	  1936:                 rts
                            	  1937: 
                            	  1938: 
                            	  1939: 
01:00001346 61F6            	  1940: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:00001348 612A            	  1941:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:0000134A 6100EF02        	  1942:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:0000134E 6100143E        	  1943:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1944: 
01:00001352 0C8111111111    	  1945:                 cmpi.l #$11111111,d1
01:00001358 66FE            	  1946:                 bne.s *
01:0000135A 0C8222222222    	  1947:                 cmpi.l #$22222222,d2
01:00001360 66FE            	  1948:                 bne.s *
01:00001362 0C8333333333    	  1949:                 cmpi.l #$33333333,d3
01:00001368 66FE            	  1950:                 bne.s *
01:0000136A 0C8444444444    	  1951:                 cmpi.l #$44444444,d4
01:00001370 66FE            	  1952:                 bne.s *
                            	  1953: 
01:00001372 4E75            	  1954:                 rts
                            	  1955: 
                            	  1956: 
01:00001374 243C22222222    	  1957: BSR_CLOSE2:     move.l #$22222222,d2
01:0000137A 4E75            	  1958:                 rts
                            	  1959: 
                            	  1960: *-----------------------------------------------------------
                            	  1961: *-----------------------------------------------------------
                            	  1962: * OPCODE : op_CMP_I
                            	  1963: *-----------------------------------------------------------
                            	  1964: *-----------------------------------------------------------
                            	  1965: op_CMP_I:
                            	  1966: 
01:0000137C 307C0100        	  1967:             move.l #$00000100,a0
01:00001380 20BC00000100    	  1968:             move.l #$00000100,(a0)
                            	  1969: 
                            	  1970: *     REGISTER - BYTE
01:00001386 7080            	  1971:             move.l #$FFFFFF80,d0
01:00001388 0C000080        	  1972:             cmpi.b #$80,d0
01:0000138C 66FE            	  1973:             bne.s *                       * Check Z Flag  beq/bne
01:0000138E 6BFE            	  1974:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001390 65FE            	  1975:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001392 69FE            	  1976:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1977: 
01:00001394 223CFFFFF000    	  1978:             move.l #$FFFFF000,d1
01:0000139A 4A01            	  1979:             cmpi.b #$00,d1
01:0000139C 66FE            	  1980:             bne.s *                       * Check Z Flag  beq/bne
01:0000139E 6BFE            	  1981:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013A0 65FE            	  1982:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013A2 69FE            	  1983:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1984: 
01:000013A4 7481D442        	  1985:             move.l #$FFFFFF02,d2
01:000013A8 0C0200FF        	  1986:             cmpi.b #$FF,d2
01:000013AC 67FE            	  1987:             beq.s *                       * Check Z Flag  beq/bne
01:000013AE 6BFE            	  1988:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013B0 64FE            	  1989:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013B2 69FE            	  1990:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1991: 
01:000013B4 263CFFFFFF7F    	  1992:             move.l #$FFFFFF7F,d3
01:000013BA 0C0300FF        	  1993:             cmpi.b #$FF,d3
01:000013BE 67FE            	  1994:             beq.s *                       * Check Z Flag  beq/bne
01:000013C0 6AFE            	  1995:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013C2 64FE            	  1996:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013C4 68FE            	  1997:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1998: 
                            	  1999: 
                            	  2000: *     REGISTER - WORD
01:000013C6 203CFFFF8000    	  2001:             move.l #$FFFF8000,d0
01:000013CC 0C408000        	  2002:             cmpi.w #$8000,d0
01:000013D0 66FE            	  2003:             bne.s *                       * Check Z Flag  beq/bne
01:000013D2 6BFE            	  2004:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013D4 65FE            	  2005:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013D6 69FE            	  2006:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2007: 
01:000013D8 223CFFF00000    	  2008:             move.l #$FFF00000,d1
01:000013DE 4A41            	  2009:             cmpi.w #$0000,d1
01:000013E0 66FE            	  2010:             bne.s *                       * Check Z Flag  beq/bne
01:000013E2 6BFE            	  2011:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013E4 65FE            	  2012:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013E6 69FE            	  2013:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2014: 
01:000013E8 243CFFFF0002    	  2015:             move.l #$FFFF0002,d2
01:000013EE 0C42FFFF        	  2016:             cmpi.w #$FFFF,d2
01:000013F2 67FE            	  2017:             beq.s *                       * Check Z Flag  beq/bne
01:000013F4 6BFE            	  2018:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013F6 64FE            	  2019:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013F8 69FE            	  2020:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2021: 
01:000013FA 263CFFFF7FFF    	  2022:             move.l #$FFFF7FFF,d3
01:00001400 0C43FFFF        	  2023:             cmpi.w #$FFFF,d3
01:00001404 67FE            	  2024:             beq.s *                       * Check Z Flag  beq/bne
01:00001406 6AFE            	  2025:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001408 64FE            	  2026:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000140A 68FE            	  2027:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2028: 
                            	  2029: *     REGISTER - LONG
01:0000140C 203C80000000    	  2030:             move.l #$80000000,d0
01:00001412 0C8080000000    	  2031:             cmpi.l #$80000000,d0
01:00001418 66FE            	  2032:             bne.s *                       * Check Z Flag  beq/bne
01:0000141A 6BFE            	  2033:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000141C 65FE            	  2034:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000141E 69FE            	  2035:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2036: 
01:00001420 7200            	  2037:             moveq  #$00000000,d1
01:00001422 4A81            	  2038:             cmpi.l #$00000000,d1
01:00001424 66FE            	  2039:             bne.s *                       * Check Z Flag  beq/bne
01:00001426 6BFE            	  2040:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001428 65FE            	  2041:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000142A 69FE            	  2042:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2043: 
01:0000142C 7402            	  2044:             moveq  #$00000002,d2
01:0000142E 0C82FFFFFFFF    	  2045:             cmpi.l #$FFFFFFFF,d2
01:00001434 67FE            	  2046:             beq.s *                       * Check Z Flag  beq/bne
01:00001436 6BFE            	  2047:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001438 64FE            	  2048:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000143A 69FE            	  2049:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2050: 
01:0000143C 263C7FFFFFFF    	  2051:             move.l #$7FFFFFFF,d3
01:00001442 0C83FFFFFFFF    	  2052:             cmpi.l #$FFFFFFFF,d3
01:00001448 67FE            	  2053:             beq.s *                       * Check Z Flag  beq/bne
01:0000144A 6AFE            	  2054:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000144C 64FE            	  2055:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000144E 68FE            	  2056:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: *     EA=x(An,Dn) - BYTE
01:00001450 307C0100        	  2062:             move.l #$00000100,a0
01:00001454 7E04            	  2063:             moveq  #$00000004,d7
                            	  2064: 
01:00001456 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
01:0000145E 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
01:00001466 0C300080700F    	  2067:             cmpi.b #$80,15(a0,d7)
01:0000146C 66FE            	  2068:             bne.s *                       * Check Z Flag  beq/bne
01:0000146E 6BFE            	  2069:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001470 65FE            	  2070:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001472 69FE            	  2071:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2072: 
01:00001474 21BCFFFFF000700C	  2073:             move.l #$FFFFF000,12(a0,d7)
01:0000147C 4A30700F        	  2074:             cmpi.b #$00,15(a0,d7)
01:00001480 66FE            	  2075:             bne.s *                       * Check Z Flag  beq/bne
01:00001482 6BFE            	  2076:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001484 65FE            	  2077:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001486 69FE            	  2078:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2079: 
01:00001488 21BCFFFFFF02700C	  2080:             move.l #$FFFFFF02,12(a0,d7)
01:00001490 0C3000FF700F    	  2081:             cmpi.b #$FF,15(a0,d7)
01:00001496 67FE            	  2082:             beq.s *                       * Check Z Flag  beq/bne
01:00001498 6BFE            	  2083:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000149A 64FE            	  2084:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000149C 69FE            	  2085:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2086: 
01:0000149E 21BCFFFFFF7F700C	  2087:             move.l #$FFFFFF7F,12(a0,d7)
01:000014A6 0C3000FF700F    	  2088:             cmpi.b #$FF,15(a0,d7)
01:000014AC 67FE            	  2089:             beq.s *                       * Check Z Flag  beq/bne
01:000014AE 6AFE            	  2090:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014B0 64FE            	  2091:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014B2 68FE            	  2092:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2093: 
                            	  2094: 
                            	  2095: *     EA=x(An,Dn) - WORD
01:000014B4 21BCFFFF8000700C	  2096:             move.l #$FFFF8000,12(a0,d7)
01:000014BC 0C708000700E    	  2097:             cmpi.w #$8000,14(a0,d7)
01:000014C2 66FE            	  2098:             bne.s *                       * Check Z Flag  beq/bne
01:000014C4 6BFE            	  2099:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014C6 65FE            	  2100:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014C8 69FE            	  2101:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2102: 
01:000014CA 21BCFFF00000700C	  2103:             move.l #$FFF00000,12(a0,d7)
01:000014D2 4A70700E        	  2104:             cmpi.w #$0000,14(a0,d7)
01:000014D6 66FE            	  2105:             bne.s *                       * Check Z Flag  beq/bne
01:000014D8 6BFE            	  2106:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014DA 65FE            	  2107:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014DC 69FE            	  2108:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2109: 
01:000014DE 21BCFFFF0002700C	  2110:             move.l #$FFFF0002,12(a0,d7)
01:000014E6 0C70FFFF700E    	  2111:             cmpi.w #$FFFF,14(a0,d7)
01:000014EC 67FE            	  2112:             beq.s *                       * Check Z Flag  beq/bne
01:000014EE 6BFE            	  2113:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014F0 64FE            	  2114:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014F2 69FE            	  2115:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2116: 
01:000014F4 21BCFFFF7FFF700C	  2117:             move.l #$FFFF7FFF,12(a0,d7)
01:000014FC 0C70FFFF700E    	  2118:             cmpi.w #$FFFF,14(a0,d7)
01:00001502 67FE            	  2119:             beq.s *                       * Check Z Flag  beq/bne
01:00001504 6AFE            	  2120:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001506 64FE            	  2121:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001508 68FE            	  2122:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2123: 
                            	  2124: *     EA=x(An,Dn) - LONG
01:0000150A 21BC80000000700C	  2125:             move.l #$80000000,12(a0,d7)
01:00001512 0CB080000000700C	  2126:             cmpi.l #$80000000,12(a0,d7)
01:0000151A 66FE            	  2127:             bne.s *                       * Check Z Flag  beq/bne
01:0000151C 6BFE            	  2128:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000151E 65FE            	  2129:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001520 69FE            	  2130:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2131: 
01:00001522 42B0700C        	  2132:             move.l #$00000000,12(a0,d7)
01:00001526 4AB0700C        	  2133:             cmpi.l #$00000000,12(a0,d7)
01:0000152A 66FE            	  2134:             bne.s *                       * Check Z Flag  beq/bne
01:0000152C 6BFE            	  2135:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000152E 65FE            	  2136:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001530 69FE            	  2137:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2138: 
01:00001532 21BC00000002700C	  2139:             move.l #$00000002,12(a0,d7)
01:0000153A 0CB0FFFFFFFF700C	  2140:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001542 67FE            	  2141:             beq.s *                       * Check Z Flag  beq/bne
01:00001544 6BFE            	  2142:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001546 64FE            	  2143:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001548 69FE            	  2144:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2145: 
01:0000154A 21BC7FFFFFFF700C	  2146:             move.l #$7FFFFFFF,12(a0,d7)
01:00001552 0CB0FFFFFFFF700C	  2147:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:0000155A 67FE            	  2148:             beq.s *                       * Check Z Flag  beq/bne
01:0000155C 6AFE            	  2149:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000155E 64FE            	  2150:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001560 68FE            	  2151:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2152: 
                            	  2153: 
                            	  2154: 
                            	  2155: 
01:00001562 4E75            	  2156:             rts
                            	  2157: 
                            	  2158: 
                            	  2159: 
                            	  2160: *-----------------------------------------------------------
                            	  2161: *-----------------------------------------------------------
                            	  2162: * OPCODE : ADD_I
                            	  2163: *-----------------------------------------------------------
                            	  2164: *-----------------------------------------------------------
                            	  2165: op_ADD_I:
                            	  2166: 
                            	  2167: *     EA = Dn  - Byte
01:00001564 203C12345678    	  2168:             move.l #$12345678,d0      * populate test data
01:0000156A 06000000        	  2169:             addi.b #0,d0
01:0000156E 67FE            	  2170:             beq.s *                       * Check Z Flag  beq/bne
01:00001570 6BFE            	  2171:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001572 65FE            	  2172:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001574 69FE            	  2173:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001576 06000010        	  2174:             addi.b #$10,d0
01:0000157A 67FE            	  2175:             beq.s *                       * Check Z Flag  beq/bne
01:0000157C 6AFE            	  2176:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000157E 65FE            	  2177:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001580 68FE            	  2178:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001582 060000A5        	  2179:             addi.b #$A5,d0
01:00001586 67FE            	  2180:             beq.s *                       * Check Z Flag  beq/bne
01:00001588 6BFE            	  2181:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000158A 64FE            	  2182:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000158C 68FE            	  2183:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000158E 0C00002D        	  2184:             cmpi.b #$2D,d0
01:00001592 66FE            	  2185:             bne.s *                       * Check Z Flag  beq/bne
                            	  2186: 
                            	  2187: *     EA = Dn  - WORD
01:00001594 203C12345678    	  2188:             move.l #$12345678,d0      * populate test data
01:0000159A 06400000        	  2189:             addi.w #0,d0
01:0000159E 67FE            	  2190:             beq.s *                       * Check Z Flag  beq/bne
01:000015A0 6BFE            	  2191:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015A2 65FE            	  2192:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015A4 69FE            	  2193:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015A6 06407000        	  2194:             addi.w #$7000,d0
01:000015AA 67FE            	  2195:             beq.s *                       * Check Z Flag  beq/bne
01:000015AC 6AFE            	  2196:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015AE 65FE            	  2197:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015B0 68FE            	  2198:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015B2 0640A55A        	  2199:             addi.w #$A55A,d0
01:000015B6 67FE            	  2200:             beq.s *                       * Check Z Flag  beq/bne
01:000015B8 6BFE            	  2201:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015BA 64FE            	  2202:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015BC 68FE            	  2203:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015BE 0C406BD2        	  2204:             cmpi.w #$6BD2,d0
01:000015C2 66FE            	  2205:             bne.s *                       * Check Z Flag  beq/bne
                            	  2206: 
                            	  2207: *     EA = Dn  - LONG
01:000015C4 203C12345678    	  2208:             move.l #$12345678,d0      * populate test data
01:000015CA 068000000000    	  2209:             addi.l #0,d0
01:000015D0 67FE            	  2210:             beq.s *                       * Check Z Flag  beq/bne
01:000015D2 6BFE            	  2211:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015D4 65FE            	  2212:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015D6 69FE            	  2213:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015D8 0680F0000000    	  2214:             addi.l #$F0000000,d0
01:000015DE 67FE            	  2215:             beq.s *                       * Check Z Flag  beq/bne
01:000015E0 6BFE            	  2216:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015E2 64FE            	  2217:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015E4 69FE            	  2218:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015E6 0680855AA55A    	  2219:             addi.l #$855AA55A,d0
01:000015EC 67FE            	  2220:             beq.s *                       * Check Z Flag  beq/bne
01:000015EE 6AFE            	  2221:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015F0 65FE            	  2222:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015F2 69FE            	  2223:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015F4 0680A0000000    	  2224:             addi.l #$A0000000,d0
01:000015FA 68FE            	  2225:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015FC 0C80278EFBD2    	  2226:             cmpi.l #$278EFBD2,d0
01:00001602 66FE            	  2227:             bne.s *                       * Check Z Flag  beq/bne
                            	  2228: 
                            	  2229: 
                            	  2230: 
                            	  2231: *     EA = x.L  - Byte
01:00001604 207C0000F100    	  2232:             move.l #$F100,a0      * populate test data
01:0000160A 20BC12345678    	  2233:             move.l #$12345678,(a0)     * populate test data
01:00001610 063900000000F103	  2234:             addi.b #0,$F103
01:00001618 67FE            	  2235:             beq.s *                       * Check Z Flag  beq/bne
01:0000161A 6BFE            	  2236:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000161C 65FE            	  2237:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000161E 69FE            	  2238:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001620 063900100000F103	  2239:             addi.b #$10,$F103
01:00001628 67FE            	  2240:             beq.s *                       * Check Z Flag  beq/bne
01:0000162A 6AFE            	  2241:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000162C 65FE            	  2242:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000162E 68FE            	  2243:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001630 063900A50000F103	  2244:             addi.b #$A5,$F103
01:00001638 67FE            	  2245:             beq.s *                       * Check Z Flag  beq/bne
01:0000163A 6BFE            	  2246:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000163C 64FE            	  2247:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000163E 68FE            	  2248:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001640 0C39002D0000F103	  2249:             cmpi.b #$2D,$F103
01:00001648 66FE            	  2250:             bne.s *                       * Check Z Flag  beq/bne
                            	  2251: 
                            	  2252: *     EA = x.L- WORD
01:0000164A 207C0000F100    	  2253:             move.l #$F100,a0      * populate test data
01:00001650 20BC12345678    	  2254:             move.l #$12345678,(a0)     * populate test data
01:00001656 067900000000F100	  2255:             addi.w #0,$F100
01:0000165E 67FE            	  2256:             beq.s *                       * Check Z Flag  beq/bne
01:00001660 6BFE            	  2257:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001662 65FE            	  2258:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001664 69FE            	  2259:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001666 067970000000F100	  2260:             addi.w #$7000,$F100
01:0000166E 67FE            	  2261:             beq.s *                       * Check Z Flag  beq/bne
01:00001670 6AFE            	  2262:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001672 65FE            	  2263:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001674 68FE            	  2264:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001676 0679A55A0000F100	  2265:             addi.w #$A55A,$F100
01:0000167E 67FE            	  2266:             beq.s *                       * Check Z Flag  beq/bne
01:00001680 6BFE            	  2267:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001682 64FE            	  2268:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001684 68FE            	  2269:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001686 0C79278E0000F100	  2270:             cmpi.w #$278E,$F100
01:0000168E 66FE            	  2271:             bne.s *                       * Check Z Flag  beq/bne
                            	  2272: 
                            	  2273: *     EA = x.L- LONG
01:00001690 23FC123456780000	  2274:             move.l #$12345678,$F100  * populate test data
01:00001698 F100
01:0000169A 06B9000000000000	  2275:             addi.l #0,$F100
01:000016A2 F100
01:000016A4 67FE            	  2276:             beq.s *                       * Check Z Flag  beq/bne
01:000016A6 6BFE            	  2277:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016A8 65FE            	  2278:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016AA 69FE            	  2279:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016AC 06B9F00000000000	  2280:             addi.l #$F0000000,$F100
01:000016B4 F100
01:000016B6 67FE            	  2281:             beq.s *                       * Check Z Flag  beq/bne
01:000016B8 6BFE            	  2282:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016BA 64FE            	  2283:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016BC 69FE            	  2284:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016BE 06B9855AA55A0000	  2285:             addi.l #$855AA55A,$F100
01:000016C6 F100
01:000016C8 67FE            	  2286:             beq.s *                       * Check Z Flag  beq/bne
01:000016CA 6AFE            	  2287:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016CC 65FE            	  2288:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016CE 69FE            	  2289:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016D0 06B9A00000000000	  2290:             addi.l #$A0000000,$F100
01:000016D8 F100
01:000016DA 68FE            	  2291:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016DC 0CB9278EFBD20000	  2292:             cmpi.l #$278EFBD2,$F100
01:000016E4 F100
01:000016E6 66FE            	  2293:             bne.s *                       * Check Z Flag  beq/bne
                            	  2294: 
01:000016E8 4E75            	  2295:             rts
                            	  2296: 
                            	  2297: 
                            	  2298: *-----------------------------------------------------------
                            	  2299: *-----------------------------------------------------------
                            	  2300: * OPCODE : SUB_I
                            	  2301: *-----------------------------------------------------------
                            	  2302: *-----------------------------------------------------------
                            	  2303: op_SUB_I:
                            	  2304: 
                            	  2305: *     EA = Dn  - Byte
01:000016EA 203C12345678    	  2306:             move.l #$12345678,d0      * populate test data
01:000016F0 04000000        	  2307:             subi.b #0,d0
01:000016F4 67FE            	  2308:             beq.s *                       * Check Z Flag  beq/bne
01:000016F6 6BFE            	  2309:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016F8 65FE            	  2310:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016FA 69FE            	  2311:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016FC 04000010        	  2312:             subi.b #$10,d0
01:00001700 67FE            	  2313:             beq.s *                       * Check Z Flag  beq/bne
01:00001702 6BFE            	  2314:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001704 65FE            	  2315:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001706 69FE            	  2316:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001708 040000A5        	  2317:             subi.b #$A5,d0
01:0000170C 67FE            	  2318:             beq.s *                       * Check Z Flag  beq/bne
01:0000170E 6AFE            	  2319:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001710 64FE            	  2320:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001712 68FE            	  2321:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001714 0C0000C3        	  2322:             cmpi.b #$C3,d0
01:00001718 66FE            	  2323:             bne.s *                       * Check Z Flag  beq/bne
                            	  2324: 
                            	  2325: *     EA = Dn  - WORD
01:0000171A 203C12345678    	  2326:             move.l #$12345678,d0      * populate test data
01:00001720 04400000        	  2327:             subi.w #0,d0
01:00001724 67FE            	  2328:             beq.s *                       * Check Z Flag  beq/bne
01:00001726 6BFE            	  2329:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001728 65FE            	  2330:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000172A 69FE            	  2331:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000172C 04407000        	  2332:             subi.w #$7000,d0
01:00001730 67FE            	  2333:             beq.s *                       * Check Z Flag  beq/bne
01:00001732 6AFE            	  2334:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001734 64FE            	  2335:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001736 69FE            	  2336:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001738 0440A55A        	  2337:             subi.w #$A55A,d0
01:0000173C 67FE            	  2338:             beq.s *                       * Check Z Flag  beq/bne
01:0000173E 6BFE            	  2339:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001740 65FE            	  2340:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001742 69FE            	  2341:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001744 0C40411E        	  2342:             cmpi.w #$411E,d0
01:00001748 66FE            	  2343:             bne.s *                       * Check Z Flag  beq/bne
                            	  2344: 
                            	  2345: *     EA = Dn  - LONG
01:0000174A 203C12345678    	  2346:             move.l #$12345678,d0      * populate test data
01:00001750 048000000000    	  2347:             subi.l #0,d0
01:00001756 67FE            	  2348:             beq.s *                       * Check Z Flag  beq/bne
01:00001758 6BFE            	  2349:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000175A 65FE            	  2350:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000175C 69FE            	  2351:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000175E 0480F0000000    	  2352:             subi.l #$F0000000,d0
01:00001764 67FE            	  2353:             beq.s *                       * Check Z Flag  beq/bne
01:00001766 6BFE            	  2354:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001768 64FE            	  2355:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000176A 69FE            	  2356:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000176C 0480855AA55A    	  2357:             subi.l #$855AA55A,d0
01:00001772 67FE            	  2358:             beq.s *                       * Check Z Flag  beq/bne
01:00001774 6AFE            	  2359:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001776 64FE            	  2360:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001778 68FE            	  2361:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000177A 0480A0000000    	  2362:             subi.l #$A0000000,d0
01:00001780 69FE            	  2363:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001782 0C80FCD9B11E    	  2364:             cmpi.l #$FCD9B11E,d0
01:00001788 66FE            	  2365:             bne.s *                       * Check Z Flag  beq/bne
                            	  2366: 
                            	  2367: 
                            	  2368: 
                            	  2369: *     EA = x.L  - Byte
01:0000178A 207C0000F100    	  2370:             move.l #$F100,a0      * populate test data
01:00001790 20BC12345678    	  2371:             move.l #$12345678,(a0)     * populate test data
01:00001796 043900000000F103	  2372:             subi.b #0,$F103
01:0000179E 67FE            	  2373:             beq.s *                       * Check Z Flag  beq/bne
01:000017A0 6BFE            	  2374:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017A2 65FE            	  2375:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017A4 69FE            	  2376:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017A6 043900100000F103	  2377:             subi.b #$10,$F103
01:000017AE 67FE            	  2378:             beq.s *                       * Check Z Flag  beq/bne
01:000017B0 6BFE            	  2379:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017B2 65FE            	  2380:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017B4 69FE            	  2381:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017B6 043900A50000F103	  2382:             subi.b #$A5,$F103
01:000017BE 67FE            	  2383:             beq.s *                       * Check Z Flag  beq/bne
01:000017C0 6AFE            	  2384:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017C2 64FE            	  2385:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017C4 68FE            	  2386:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017C6 0C3900C30000F103	  2387:             cmpi.b #$C3,$F103
01:000017CE 66FE            	  2388:             bne.s *                       * Check Z Flag  beq/bne
                            	  2389: 
                            	  2390: *     EA = x.L- WORD
01:000017D0 207C0000F100    	  2391:             move.l #$F100,a0      * populate test data
01:000017D6 20BC12345678    	  2392:             move.l #$12345678,(a0)     * populate test data
01:000017DC 047900000000F100	  2393:             subi.w #0,$F100
01:000017E4 67FE            	  2394:             beq.s *                       * Check Z Flag  beq/bne
01:000017E6 6BFE            	  2395:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017E8 65FE            	  2396:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017EA 69FE            	  2397:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017EC 047970000000F100	  2398:             subi.w #$7000,$F100
01:000017F4 67FE            	  2399:             beq.s *                       * Check Z Flag  beq/bne
01:000017F6 6AFE            	  2400:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017F8 64FE            	  2401:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017FA 69FE            	  2402:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017FC 0479A55A0000F100	  2403:             subi.w #$A55A,$F100
01:00001804 67FE            	  2404:             beq.s *                       * Check Z Flag  beq/bne
01:00001806 6AFE            	  2405:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001808 64FE            	  2406:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000180A 69FE            	  2407:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000180C 0C79FCDA0000F100	  2408:             cmpi.w #$FCDA,$F100
01:00001814 66FE            	  2409:             bne.s *                       * Check Z Flag  beq/bne
                            	  2410: 
                            	  2411: *     EA = x.L- LONG
01:00001816 23FC123456780000	  2412:             move.l #$12345678,$F100  * populate test data
01:0000181E F100
01:00001820 04B9000000000000	  2413:             subi.l #0,$F100
01:00001828 F100
01:0000182A 67FE            	  2414:             beq.s *                       * Check Z Flag  beq/bne
01:0000182C 6BFE            	  2415:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000182E 65FE            	  2416:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001830 69FE            	  2417:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001832 04B9F00000000000	  2418:             subi.l #$F0000000,$F100
01:0000183A F100
01:0000183C 67FE            	  2419:             beq.s *                       * Check Z Flag  beq/bne
01:0000183E 6BFE            	  2420:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001840 64FE            	  2421:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001842 69FE            	  2422:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001844 04B9855AA55A0000	  2423:             subi.l #$855AA55A,$F100
01:0000184C F100
01:0000184E 67FE            	  2424:             beq.s *                       * Check Z Flag  beq/bne
01:00001850 6AFE            	  2425:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001852 64FE            	  2426:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001854 68FE            	  2427:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001856 04B9A00000000000	  2428:             subi.l #$A0000000,$F100
01:0000185E F100
01:00001860 69FE            	  2429:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001862 0CB9FCD9B11E0000	  2430:             cmpi.l #$FCD9B11E,$F100
01:0000186A F100
01:0000186C 66FE            	  2431:             bne.s *                       * Check Z Flag  beq/bne
                            	  2432: 
01:0000186E 4E75            	  2433:             rts
                            	  2434: 
                            	  2435: 
                            	  2436: 
                            	  2437: *-----------------------------------------------------------
                            	  2438: *-----------------------------------------------------------
                            	  2439: * OPCODE : MOVE
                            	  2440: *-----------------------------------------------------------
                            	  2441: *-----------------------------------------------------------
                            	  2442: op_MOVE:
01:00001870 203C11223344    	  2443:             move.l #$11223344,d0
01:00001876 223C55667788    	  2444:             move.l #$55667788,d1
01:0000187C 243C8899AABB    	  2445:             move.l #$8899aabb,d2
01:00001882 263CCCDDEEFF    	  2446:             move.l #$ccddeeff,d3
01:00001888 7800            	  2447:             moveq  #$00000000,d4
01:0000188A 7A00            	  2448:             moveq  #$00000000,d5
01:0000188C 7C00            	  2449:             moveq  #$00000000,d6
01:0000188E 7E00            	  2450:             moveq  #$00000000,d7
01:00001890 207C44332211    	  2451:             move.l #$44332211,a0
01:00001896 227C88776655    	  2452:             move.l #$88776655,a1
01:0000189C 247CBBAA9988    	  2453:             move.l #$bbaa9988,a2
01:000018A2 267CFFEEDDCC    	  2454:             move.l #$ffeeddcc,a3
                            	  2455: 
01:000018A8 1800            	  2456:             move.b d0,d4              * BYTE - DATA REGISTER
01:000018AA 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
01:000018AC 6BFE            	  2458:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018AE 0C8400000044    	  2459:             cmpi.l #$00000044,d4
01:000018B4 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
01:000018B6 3A01            	  2462:             move.w d1,d5              * WORD - DATA REGISTER
01:000018B8 67FE            	  2463:             beq.s *                       * Check Z Flag  beq/bne
01:000018BA 6BFE            	  2464:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018BC 0C8500007788    	  2465:             cmpi.l #$00007788,d5
01:000018C2 66FE            	  2466:             bne.s *                       * Check Z Flag  beq/bne
                            	  2467: 
01:000018C4 2C02            	  2468:             move.l d2,d6              * LONG - DATA REGISTER
01:000018C6 67FE            	  2469:             beq.s *                       * Check Z Flag  beq/bne
01:000018C8 6AFE            	  2470:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018CA 0C868899AABB    	  2471:             cmpi.l #$8899aabb,d6
01:000018D0 66FE            	  2472:             bne.s *                       * Check Z Flag  beq/bne
                            	  2473: 
01:000018D2 3A09            	  2474:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:000018D4 67FE            	  2475:             beq.s *                       * Check Z Flag  beq/bne
01:000018D6 6BFE            	  2476:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018D8 0C8500006655    	  2477:             cmpi.l #$00006655,d5
01:000018DE 66FE            	  2478:             bne.s *                       * Check Z Flag  beq/bne
                            	  2479: 
01:000018E0 2C0A            	  2480:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:000018E2 67FE            	  2481:             beq.s *                       * Check Z Flag  beq/bne
01:000018E4 6AFE            	  2482:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018E6 0C86BBAA9988    	  2483:             cmpi.l #$bbaa9988,d6
01:000018EC 66FE            	  2484:             bne.s *                       * Check Z Flag  beq/bne
                            	  2485: 
                            	  2486: 
01:000018EE 3842            	  2487:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018F0 B9C2            	  2488:             cmpa.l d2,a4
01:000018F2 67FE            	  2489:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2490: 
01:000018F4 2A41            	  2491:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:000018F6 BBC1            	  2492:             cmpa.l d1,a5
01:000018F8 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: 
                            	  2496: 
                            	  2497: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2498: 
01:000018FA 203C11223344    	  2499:             move.l #$11223344,d0
01:00001900 223C00010100    	  2500:             move.l #$00010100,d1
01:00001906 243C8899AABB    	  2501:             move.l #$8899aabb,d2
01:0000190C 7601            	  2502:             moveq  #$00000001,d3
01:0000190E 7800            	  2503:             moveq  #$00000000,d4
01:00001910 7A00            	  2504:             moveq  #$00000000,d5
01:00001912 7C00            	  2505:             moveq  #$00000000,d6
01:00001914 7E00            	  2506:             moveq  #$00000000,d7
01:00001916 91C8            	  2507:             move.l #$00000000,a0
01:00001918 227C00010100    	  2508:             move.l #$00010100,a1
                            	  2509: 
                            	  2510: *     x(An,AL) --> x.L
01:0000191E 11BC005A9804    	  2511:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001924 47F09804        	  2512:             lea 4(a0,a1.l),a3
01:00001928 13F0980400010105	  2513:             move.b 4(a0,a1.l),$00010105
01:00001930 67FE            	  2514:             beq.s *                       * Check Z Flag  beq/bne
01:00001932 6BFE            	  2515:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001934 0C30005A9805    	  2516:             cmpi.b #$5A,5(a0,a1.l)
01:0000193A 66FE            	  2517:             bne.s *                       * Check Z Flag  beq/bne
                            	  2518: 
                            	  2519: *     x.L --> n(An,Dw)
01:0000193C 11B9000101051007	  2520: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:00001944 67FE            	  2521:             beq.s *                       * Check Z Flag  beq/bne
01:00001946 6BFE            	  2522:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001948 0C30005A1007    	  2523:             cmpi.b #$5A,7(a0,d1.w)
01:0000194E 66FE            	  2524:             bne.s *                       * Check Z Flag  beq/bne
                            	  2525: 
                            	  2526: *     x(PC,Ds) --> x.w
01:00001950 11FB30660100    	  2527:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:00001956 67FE            	  2528:             beq.s *                       * Check Z Flag  beq/bne
01:00001958 6AFE            	  2529:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000195A 0C3900B90000193D	  2530:             cmpi.b #$B9,1+MOVE2
01:00001962 66FE            	  2531:             bne.s *                       * Check Z Flag  beq/bne
                            	  2532: 
                            	  2533: *     #x -->    n(An,AL)
01:00001964 11BC00781007    	  2534:             move.b  #$78,7(a0,d1.w)    * BYTE
01:0000196A 67FE            	  2535:             beq.s *                       * Check Z Flag  beq/bne
01:0000196C 6BFE            	  2536:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000196E 0C3000781007    	  2537:             cmpi.b #$78,7(a0,d1.w)
01:00001974 66FE            	  2538:             bne.s *                       * Check Z Flag  beq/bne
                            	  2539: 
01:00001976 203C11223344    	  2540:             move.l #$11223344,d0
01:0000197C 223C00010100    	  2541:             move.l #$00010100,d1
01:00001982 243C8899AABB    	  2542:             move.l #$8899aabb,d2
01:00001988 7602            	  2543:             moveq  #$00000002,d3
01:0000198A 7800            	  2544:             moveq  #$00000000,d4
01:0000198C 7A00            	  2545:             moveq  #$00000000,d5
01:0000198E 7C00            	  2546:             moveq  #$00000000,d6
01:00001990 7E00            	  2547:             moveq  #$00000000,d7
01:00001992 91C8            	  2548:             move.l #$00000000,a0
01:00001994 227C00010100    	  2549:             move.l #$00010100,a1
                            	  2550: 
                            	  2551: *     x(An,AL) --> x.L
01:0000199A 31BC5A5A9804    	  2552:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:000019A0 49F09804        	  2553:             lea 4(a0,a1.l),a4
01:000019A4 33F0980400010104	  2554:             move.w 4(a0,a1.l),$00010104
01:000019AC 67FE            	  2555:             beq.s *                       * Check Z Flag  beq/bne
01:000019AE 6BFE            	  2556:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019B0 0C705A5A9804    	  2557:             cmpi.w #$5A5A,4(a0,a1.l)
01:000019B6 66FE            	  2558:             bne.s *                       * Check Z Flag  beq/bne
                            	  2559: 
                            	  2560: *     x.L --> n(An,Dw)
01:000019B8 31B9000101041006	  2561: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000019C0 67FE            	  2562:             beq.s *                       * Check Z Flag  beq/bne
01:000019C2 6BFE            	  2563:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019C4 0C705A5A1006    	  2564:             cmpi.w #$5A5A,6(a0,d1.w)
01:000019CA 66FE            	  2565:             bne.s *                       * Check Z Flag  beq/bne
                            	  2566: 
                            	  2567: *     x(PC,Ds) --> x.w
01:000019CC 31FB30EA0100    	  2568:             move.w  MOVE1(pc,d3),$0100 * WORD
01:000019D2 67FE            	  2569:             beq.s *                       * Check Z Flag  beq/bne
01:000019D4 6BFE            	  2570:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019D6 0C7967FE000019C0	  2571:             cmpi.w #$67FE,8+MOVE1
01:000019DE 66FE            	  2572:             bne.s *                       * Check Z Flag  beq/bne
                            	  2573: 
                            	  2574: *     #x -->    n(An,AL)
01:000019E0 31BC78781006    	  2575:             move.w  #$7878,6(a0,d1.w)    * WORD
01:000019E6 67FE            	  2576:             beq.s *                       * Check Z Flag  beq/bne
01:000019E8 6BFE            	  2577:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019EA 0C7078781006    	  2578:             cmpi.w #$7878,6(a0,d1.w)
01:000019F0 66FE            	  2579:             bne.s *                       * Check Z Flag  beq/bne
                            	  2580: 
                            	  2581: * ---
                            	  2582: 
01:000019F2 203C11223344    	  2583:             move.l #$11223344,d0
01:000019F8 223C00010100    	  2584:             move.l #$00010100,d1
01:000019FE 243C8899AABB    	  2585:             move.l #$8899aabb,d2
01:00001A04 7602            	  2586:             moveq  #$00000002,d3
01:00001A06 7800            	  2587:             moveq  #$00000000,d4
01:00001A08 7A00            	  2588:             moveq  #$00000000,d5
01:00001A0A 7C00            	  2589:             moveq  #$00000000,d6
01:00001A0C 7E00            	  2590:             moveq  #$00000000,d7
01:00001A0E 91C8            	  2591:             move.l #$00000000,a0
01:00001A10 227C00010100    	  2592:             move.l #$00010100,a1
                            	  2593: 
                            	  2594: *     x(An,AL) --> x.L
01:00001A16 21BC5A5A12349804	  2595:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:00001A1E 49F09804        	  2596:             lea 4(a0,a1.l),a4
01:00001A22 23F0980400010104	  2597:             move.l 4(a0,a1.l),$00010104
01:00001A2A 67FE            	  2598:             beq.s *                       * Check Z Flag  beq/bne
01:00001A2C 6BFE            	  2599:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A2E 0CB05A5A12349804	  2600:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001A36 66FE            	  2601:             bne.s *                       * Check Z Flag  beq/bne
                            	  2602: 
                            	  2603: *     x.L --> n(An,Dw)
01:00001A38 21B9000101041006	  2604: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:00001A40 67FE            	  2605:             beq.s *                       * Check Z Flag  beq/bne
01:00001A42 6BFE            	  2606:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A44 0CB05A5A12341006	  2607:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001A4C 66FE            	  2608:             bne.s *                       * Check Z Flag  beq/bne
                            	  2609: 
                            	  2610: *     x(PC,Ds) --> x.w
01:00001A4E 21FB30E80100    	  2611:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001A54 67FE            	  2612:             beq.s *                       * Check Z Flag  beq/bne
01:00001A56 6BFE            	  2613:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A58 0CB967FE6BFE0000	  2614:             cmpi.l #$67FE6BFE,8+MOVE3
01:00001A60 1A40
01:00001A62 66FE            	  2615:             bne.s *                       * Check Z Flag  beq/bne
                            	  2616: 
                            	  2617: *     #x -->    n(An,AL)
01:00001A64 21BC787823231006	  2618:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001A6C 67FE            	  2619:             beq.s *                       * Check Z Flag  beq/bne
01:00001A6E 6BFE            	  2620:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A70 0CB0787823231006	  2621:             cmpi.l #$78782323,6(a0,d1.w)
01:00001A78 66FE            	  2622:             bne.s *                       * Check Z Flag  beq/bne
                            	  2623: 
                            	  2624: 
01:00001A7A 4E75            	  2625:          rts
                            	  2626: 
                            	  2627: 
                            	  2628: *-----------------------------------------------------------
                            	  2629: *-----------------------------------------------------------
                            	  2630: * OPCODE : MOVE_xxx_FLAGS
                            	  2631: *-----------------------------------------------------------
                            	  2632: *-----------------------------------------------------------
                            	  2633: op_MOVE_xxx_FLAGS:
                            	  2634: 
                            	  2635: *     Move_To_SR
                            	  2636: 
                            	  2637: *     Dn
                            	  2638: 
01:00001A7C 303C2FFF        	  2639:             move.w #$2FFF,d0
01:00001A80 46C0            	  2640:             move.w d0,SR
01:00001A82 6AFE            	  2641:             bpl.s *           * branch if Z clear
01:00001A84 66FE            	  2642:             bne.s *           * branch if N clear
01:00001A86 68FE            	  2643:             bvc.s *           * branch if V clear
01:00001A88 64FE            	  2644:             bcc.s *           * branch if C clear
01:00001A8A 303C2F00        	  2645:             move.w #$2F00,d0
01:00001A8E 44C0            	  2646:             move d0,CCR
01:00001A90 67FE            	  2647:             beq.s *           * branch if Z set
01:00001A92 6BFE            	  2648:             bmi.s *           * branch if N set
01:00001A94 69FE            	  2649:             bvs.s *           * branch if V set
01:00001A96 65FE            	  2650:             bcs.s *           * branch if C set
                            	  2651: 
01:00001A98 303C2000        	  2652:             move.w #$2000,d0
01:00001A9C 46C0            	  2653:             move.w d0,SR
01:00001A9E 67FE            	  2654:             beq.s *           * branch if Z set
01:00001AA0 6BFE            	  2655:             bmi.s *           * branch if N set
01:00001AA2 69FE            	  2656:             bvs.s *           * branch if V set
01:00001AA4 65FE            	  2657:             bcs.s *           * branch if C set
                            	  2658: 
                            	  2659: *     (An)
01:00001AA6 307C0100        	  2660:             move.l #$00000100,a0
01:00001AAA 30BC2FFF        	  2661:             move.w #$2FFF,(a0)
01:00001AAE 46D0            	  2662:             move.w (a0),SR
01:00001AB0 6AFE            	  2663:             bpl.s *           * branch if Z clear
01:00001AB2 66FE            	  2664:             bne.s *           * branch if N clear
01:00001AB4 68FE            	  2665:             bvc.s *           * branch if V clear
01:00001AB6 64FE            	  2666:             bcc.s *           * branch if C clear
                            	  2667: 
01:00001AB8 30BC2000        	  2668:             move.w #$2000,(a0)
01:00001ABC 46D0            	  2669:             move.w (a0),SR
01:00001ABE 67FE            	  2670:             beq.s *           * branch if Z set
01:00001AC0 6BFE            	  2671:             bmi.s *           * branch if N set
01:00001AC2 69FE            	  2672:             bvs.s *           * branch if V set
01:00001AC4 65FE            	  2673:             bcs.s *           * branch if C set
                            	  2674: 
                            	  2675: *     (An)+
01:00001AC6 307C0100        	  2676:             move.l #$00000100,a0
01:00001ACA 30BC2FFF        	  2677:             move.w #$2FFF,(a0)
01:00001ACE 46D8            	  2678:             move.w (a0)+,SR
01:00001AD0 6AFE            	  2679:             bpl.s *           * branch if Z clear
01:00001AD2 66FE            	  2680:             bne.s *           * branch if N clear
01:00001AD4 68FE            	  2681:             bvc.s *           * branch if V clear
01:00001AD6 64FE            	  2682:             bcc.s *           * branch if C clear
                            	  2683: 
01:00001AD8 30BC2000        	  2684:             move.w #$2000,(a0)
01:00001ADC 46D8            	  2685:             move.w (a0)+,SR
01:00001ADE 67FE            	  2686:             beq.s *           * branch if Z set
01:00001AE0 6BFE            	  2687:             bmi.s *           * branch if N set
01:00001AE2 69FE            	  2688:             bvs.s *           * branch if V set
01:00001AE4 65FE            	  2689:             bcs.s *           * branch if C set
                            	  2690: 
                            	  2691: *     -(An)
01:00001AE6 307C0102        	  2692:             move.l #$00000102,a0
01:00001AEA 30BC2FFF        	  2693:             move.w #$2FFF,(a0)
01:00001AEE 46D8            	  2694:             move.w (a0)+,SR
01:00001AF0 6AFE            	  2695:             bpl.s *           * branch if Z clear
01:00001AF2 66FE            	  2696:             bne.s *           * branch if N clear
01:00001AF4 68FE            	  2697:             bvc.s *           * branch if V clear
01:00001AF6 64FE            	  2698:             bcc.s *           * branch if C clear
                            	  2699: 
01:00001AF8 30BC2000        	  2700:             move.w #$2000,(a0)
01:00001AFC 46D8            	  2701:             move.w (a0)+,SR
01:00001AFE 67FE            	  2702:             beq.s *           * branch if Z set
01:00001B00 6BFE            	  2703:             bmi.s *           * branch if N set
01:00001B02 69FE            	  2704:             bvs.s *           * branch if V set
01:00001B04 65FE            	  2705:             bcs.s *           * branch if C set
                            	  2706: 
                            	  2707: *     n(An)
01:00001B06 307C0102        	  2708:             move.l #$00000102,a0
01:00001B0A 317C2FFF0002    	  2709:             move.w #$2FFF,2(a0)
01:00001B10 46E80002        	  2710:             move.w 2(a0),SR
01:00001B14 6AFE            	  2711:             bpl.s *           * branch if Z clear
01:00001B16 66FE            	  2712:             bne.s *           * branch if N clear
01:00001B18 68FE            	  2713:             bvc.s *           * branch if V clear
01:00001B1A 64FE            	  2714:             bcc.s *           * branch if C clear
                            	  2715: 
01:00001B1C 317C20000002    	  2716:             move.w #$2000,2(a0)
01:00001B22 46E80002        	  2717:             move.w 2(a0),SR
01:00001B26 67FE            	  2718:             beq.s *           * branch if Z set
01:00001B28 6BFE            	  2719:             bmi.s *           * branch if N set
01:00001B2A 69FE            	  2720:             bvs.s *           * branch if V set
01:00001B2C 65FE            	  2721:             bcs.s *           * branch if C set
                            	  2722: 
                            	  2723: *     n(An,Rn.l)
01:00001B2E 307C0100        	  2724:             move.l #$00000100,a0
01:00001B32 7002            	  2725:             moveq  #$00000002,d0
01:00001B34 31BC2FFF0802    	  2726:             move.w #$2FFF,2(a0,d0.l)
01:00001B3A 46F00802        	  2727:             move.w 2(a0,d0.l),SR
01:00001B3E 6AFE            	  2728:             bpl.s *           * branch if Z clear
01:00001B40 66FE            	  2729:             bne.s *           * branch if N clear
01:00001B42 68FE            	  2730:             bvc.s *           * branch if V clear
01:00001B44 64FE            	  2731:             bcc.s *           * branch if C clear
                            	  2732: 
01:00001B46 31BC20000802    	  2733:             move.w #$2000,2(a0,d0.l)
01:00001B4C 46F00802        	  2734:             move.w 2(a0,d0.l),SR
01:00001B50 67FE            	  2735:             beq.s *           * branch if Z set
01:00001B52 6BFE            	  2736:             bmi.s *           * branch if N set
01:00001B54 69FE            	  2737:             bvs.s *           * branch if V set
01:00001B56 65FE            	  2738:             bcs.s *           * branch if C set
                            	  2739: 
                            	  2740: *     x.W
01:00001B58 31FC2FFF0100    	  2741:             move.w #$2FFF,$0100
01:00001B5E 46F80100        	  2742:             move.w $0100,SR
01:00001B62 6AFE            	  2743:             bpl.s *           * branch if Z clear
01:00001B64 66FE            	  2744:             bne.s *           * branch if N clear
01:00001B66 68FE            	  2745:             bvc.s *           * branch if V clear
01:00001B68 64FE            	  2746:             bcc.s *           * branch if C clear
                            	  2747: 
01:00001B6A 31FC20000100    	  2748:             move.w #$2000,$0100
01:00001B70 46F80100        	  2749:             move.w $0100,SR
01:00001B74 67FE            	  2750:             beq.s *           * branch if Z set
01:00001B76 6BFE            	  2751:             bmi.s *           * branch if N set
01:00001B78 69FE            	  2752:             bvs.s *           * branch if V set
01:00001B7A 65FE            	  2753:             bcs.s *           * branch if C set
                            	  2754: 
                            	  2755: *     x.L
01:00001B7C 33FC2FFF00010100	  2756:             move.w #$2FFF,$00010100
01:00001B84 46F900010100    	  2757:             move.w $00010100,SR
01:00001B8A 6AFE            	  2758:             bpl.s *           * branch if Z clear
01:00001B8C 66FE            	  2759:             bne.s *           * branch if N clear
01:00001B8E 68FE            	  2760:             bvc.s *           * branch if V clear
01:00001B90 64FE            	  2761:             bcc.s *           * branch if C clear
                            	  2762: 
01:00001B92 33FC200000010100	  2763: MOVE4:      move.w #$2000,$00010100
01:00001B9A 46F900010100    	  2764:             move.w $00010100,SR
01:00001BA0 67FE            	  2765:             beq.s *           * branch if Z set
01:00001BA2 6BFE            	  2766:             bmi.s *           * branch if N set
01:00001BA4 69FE            	  2767:             bvs.s *           * branch if V set
01:00001BA6 65FE            	  2768:             bcs.s *           * branch if C set
                            	  2769: 
                            	  2770: *     x(PC)
01:00001BA8 46FAFFEA        	  2771:             move.w MOVE4+2(pc),SR
01:00001BAC 67FE            	  2772:             beq.s *           * branch if Z set
01:00001BAE 6BFE            	  2773:             bmi.s *           * branch if N set
01:00001BB0 69FE            	  2774:             bvs.s *           * branch if V set
01:00001BB2 65FE            	  2775:             bcs.s *           * branch if C set
                            	  2776: 
                            	  2777: *     x(PC,d0.l)
01:00001BB4 7000            	  2778:             moveq  #$00000000,d0
01:00001BB6 46FB08DC        	  2779:             move.w MOVE4+2(pc,d0.l),SR
01:00001BBA 67FE            	  2780:             beq.s *           * branch if Z set
01:00001BBC 6BFE            	  2781:             bmi.s *           * branch if N set
01:00001BBE 69FE            	  2782:             bvs.s *           * branch if V set
01:00001BC0 65FE            	  2783:             bcs.s *           * branch if C set
01:00001BC2 44FB08D0        	  2784:             move MOVE4+2(pc,d0.l),CCR
01:00001BC6 67FE            	  2785:             beq.s *           * branch if Z set
01:00001BC8 6BFE            	  2786:             bmi.s *           * branch if N set
01:00001BCA 69FE            	  2787:             bvs.s *           * branch if V set
01:00001BCC 65FE            	  2788:             bcs.s *           * branch if C set
                            	  2789: 
                            	  2790: *     #x
01:00001BCE 46FC2FFF        	  2791:             move.w #$2FFF,SR
01:00001BD2 66FE            	  2792:             bne.s *           * branch if Z clear
01:00001BD4 6AFE            	  2793:             bpl.s *           * branch if N clear
01:00001BD6 68FE            	  2794:             bvc.s *           * branch if V clear
01:00001BD8 64FE            	  2795:             bcc.s *           * branch if C clear
                            	  2796: 
                            	  2797: 
                            	  2798: 
                            	  2799: *  MOVE_From_SR
                            	  2800: 
                            	  2801: 
                            	  2802: 
                            	  2803: *     Dn
01:00001BDA 46FC275A        	  2804:             move.w #$275A,SR          * Initial value
01:00001BDE 40C0            	  2805:             move.w SR,d0
01:00001BE0 0C40271A        	  2806:             cmpi.w #$271A,d0
                            	  2807: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2808: *            bne.s *                   * branch if Z set
                            	  2809: 
                            	  2810: *     (An)
01:00001BE4 307C0100        	  2811:             move.l #$00000100,a0
01:00001BE8 46FC275A        	  2812:             move.w #$275A,SR          * Initial value
01:00001BEC 40D0            	  2813:             move.w SR,(a0)
01:00001BEE 0C50275A        	  2814:             cmpi.w #$275A,(a0)
01:00001BF2 66FE            	  2815:             bne.s *                   * branch if Z set
                            	  2816: 
                            	  2817: *     (An)+
01:00001BF4 307C0100        	  2818:             move.l #$00000100,a0
01:00001BF8 46FC257A        	  2819:             move.w #$257A,SR          * Initial value
01:00001BFC 40D8            	  2820:             move.w SR,(a0)+
01:00001BFE 307C0100        	  2821:             move.l #$00000100,a0
01:00001C02 0C58257A        	  2822:             cmpi.w #$257A,(a0)+
01:00001C06 66FE            	  2823:             bne.s *                   * branch if Z set
                            	  2824: 
                            	  2825: *     -(An)
01:00001C08 307C0102        	  2826:             move.l #$00000102,a0
01:00001C0C 46FC2766        	  2827:             move.w #$2766,SR          * Initial value
01:00001C10 40E0            	  2828:             move.w SR,-(a0)
01:00001C12 307C0100        	  2829:             move.l #$00000100,a0
01:00001C16 0C502766        	  2830:             cmpi.w #$2766,(a0)
01:00001C1A 66FE            	  2831:             bne.s *                   * branch if Z set
                            	  2832: 
                            	  2833: *     x(An)
01:00001C1C 307C0102        	  2834:             move.l #$00000102,a0
01:00001C20 46FC2733        	  2835:             move.w #$2733,SR          * Initial value
01:00001C24 40E80004        	  2836:             move.w SR,4(a0)
01:00001C28 0C6827330004    	  2837:             cmpi.w #$2733,4(a0)
01:00001C2E 66FE            	  2838:             bne.s *                   * branch if Z set
                            	  2839: 
                            	  2840: *     x(An,rn)
01:00001C30 307C0102        	  2841:             move.l #$00000102,a0
01:00001C34 7004            	  2842:             moveq  #$00000004,d0
01:00001C36 46FC275A        	  2843:             move.w #$275a,SR          * Initial value
01:00001C3A 40F00804        	  2844:             move.w SR,4(a0,d0.l)
01:00001C3E 0C70275A0804    	  2845:             cmpi.w #$275a,4(a0,d0.l)
01:00001C44 66FE            	  2846:             bne.s *                   * branch if Z set
                            	  2847: 
                            	  2848: *     x.W
01:00001C46 46FC2777        	  2849:             move.w #$2777,SR          * Initial value
01:00001C4A 40F80102        	  2850:             move.w SR,$0102
01:00001C4E 0C7827770102    	  2851:             cmpi.w #$2777,$0102
01:00001C54 66FE            	  2852:             bne.s *                   * branch if Z set
                            	  2853: 
                            	  2854: *     x.L
01:00001C56 46FC2777        	  2855:             move.w #$2777,SR          * Initial value
01:00001C5A 40F900010102    	  2856:             move.w SR,$10102
01:00001C60 0C79277700010102	  2857:             cmpi.w #$2777,$10102
01:00001C68 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
                            	  2860: 
                            	  2861: 
01:00001C6A 46FC2700        	  2862:             move.w #$2700,SR          * Put flags back to initial value
                            	  2863: 
01:00001C6E 4E75            	  2864:             rts
                            	  2865: 
                            	  2866: 
                            	  2867: *-----------------------------------------------------------
                            	  2868: *-----------------------------------------------------------
                            	  2869: * OPCODE : EXT
                            	  2870: *-----------------------------------------------------------
                            	  2871: *-----------------------------------------------------------
                            	  2872: op_EXT:
                            	  2873: 
01:00001C70 707F            	  2874:             move.l #$0000007F,d0
01:00001C72 223C00008FFF    	  2875:             move.l #$00008FFF,d1
01:00001C78 7400            	  2876:             moveq  #$00000000,d2
                            	  2877: 
01:00001C7A 4880            	  2878:             ext.w d0
01:00001C7C 6BFE            	  2879:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C7E 67FE            	  2880:             beq.s *                   * Check Z Flag  beq/bne
01:00001C80 0C800000007F    	  2881:             cmpi.l #$0000007F,d0
01:00001C86 66FE            	  2882:             bne.s *                   * branch if Z set
                            	  2883: 
01:00001C88 48C1            	  2884:             ext.l d1
01:00001C8A 6AFE            	  2885:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C8C 67FE            	  2886:             beq.s *                   * Check Z Flag  beq/bne
01:00001C8E 0C81FFFF8FFF    	  2887:             cmpi.l #$FFFF8FFF,d1
01:00001C94 66FE            	  2888:             bne.s *                   * branch if Z set
                            	  2889: 
01:00001C96 48C2            	  2890:             ext.l d2
01:00001C98 66FE            	  2891:             bne.s *                   * Check Z Flag  beq/bne
                            	  2892: 
                            	  2893: 
                            	  2894: 
01:00001C9A 4E75            	  2895:             rts
                            	  2896: 
                            	  2897: 
                            	  2898: *-----------------------------------------------------------
                            	  2899: *-----------------------------------------------------------
                            	  2900: * OPCODE : SWAP
                            	  2901: *-----------------------------------------------------------
                            	  2902: *-----------------------------------------------------------
                            	  2903: op_SWAP:
                            	  2904: 
01:00001C9C 203C12345678    	  2905:             move.l #$12345678,d0
                            	  2906: 
01:00001CA2 4840            	  2907:             swap d0
01:00001CA4 6BFE            	  2908:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CA6 67FE            	  2909:             beq.s *                   * Check Z Flag  beq/bne
01:00001CA8 0C8056781234    	  2910:             cmpi.l #$56781234,d0
01:00001CAE 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912: 
                            	  2913: 
                            	  2914: 
01:00001CB0 4E75            	  2915:             rts
                            	  2916: 
                            	  2917: 
                            	  2918: *-----------------------------------------------------------
                            	  2919: *-----------------------------------------------------------
                            	  2920: * OPCODE : LEA_PEA
                            	  2921: *-----------------------------------------------------------
                            	  2922: *-----------------------------------------------------------
                            	  2923: op_LEAPEA:
                            	  2924: 
01:00001CB2 207C00345678    	  2925:             move.l #$00345678,a0
01:00001CB8 7800            	  2926:             moveq  #$00000000,d4
                            	  2927: 
                            	  2928: *     (An)
01:00001CBA 4DD0            	  2929:             lea (a0),a6
01:00001CBC 200E            	  2930:             move.l a6,d0
01:00001CBE 0C8000345678    	  2931:             cmpi.l #$00345678,d0
01:00001CC4 66FE            	  2932:             bne.s *                   * branch if Z set
01:00001CC6 4850            	  2933:             pea (a0)
01:00001CC8 0C9700345678    	  2934:             cmpi.l #$00345678,(a7)
01:00001CCE 66FE            	  2935:             bne.s *                   * branch if Z set
                            	  2936:             * This was without a specifier which the assembler defaulted to .w
01:00001CD0 588F            	  2937:             addq.l #4,a7            * Restore Stack Pointer
                            	  2938: 
                            	  2939: *     x(An)
01:00001CD2 4DE80004        	  2940:             lea 4(a0),a6
01:00001CD6 200E            	  2941:             move.l a6,d0
01:00001CD8 0C800034567C    	  2942:             cmpi.l #$0034567C,d0
01:00001CDE 66FE            	  2943:             bne.s *                   * branch if Z set
01:00001CE0 48680004        	  2944:             pea 4(a0)
01:00001CE4 0C970034567C    	  2945:             cmpi.l #$0034567C,(a7)
01:00001CEA 66FE            	  2946:             bne.s *                   * branch if Z set
                            	  2947:             * This was without a specifier which the assembler defaulted to .w
01:00001CEC 588F            	  2948:             addq.l #4,a7            * Restore Stack Pointer
                            	  2949: 
                            	  2950: *     x(An,Dn.l)
01:00001CEE 4DF04004        	  2951:             lea 4(a0,d4),a6
01:00001CF2 200E            	  2952:             move.l a6,d0
01:00001CF4 0C800034567C    	  2953:             cmpi.l #$0034567C,d0
01:00001CFA 66FE            	  2954:             bne.s *                   * branch if Z set
01:00001CFC 48704804        	  2955:             pea 4(a0,d4.l)
01:00001D00 0C970034567C    	  2956:             cmpi.l #$0034567C,(a7)
01:00001D06 66FE            	  2957:             bne.s *                   * branch if Z set
                            	  2958:             * This was without a specifier which the assembler defaulted to .w
01:00001D08 588F            	  2959:             addq.l #4,a7            * Restore Stack Pointer
                            	  2960: 
                            	  2961: *     x.W
01:00001D0A 4DF81234        	  2962:             lea $1234,a6
01:00001D0E 200E            	  2963:             move.l a6,d0
01:00001D10 0C401234        	  2964:             cmpi.w #$1234,d0
01:00001D14 66FE            	  2965:             bne.s *                   * branch if Z set
01:00001D16 48781234        	  2966:             pea $1234
01:00001D1A 0C9700001234    	  2967:             cmpi.l #$00001234,(a7)
01:00001D20 66FE            	  2968:             bne.s *                   * branch if Z set
                            	  2969:             * This was without a specifier which the assembler defaulted to .w
01:00001D22 588F            	  2970:             addq.l #4,a7            * Restore Stack Pointer
                            	  2971: 
                            	  2972: *     x.L
01:00001D24 4DF900345678    	  2973:             lea $00345678,a6
01:00001D2A 200E            	  2974:             move.l a6,d0
01:00001D2C B08E            	  2975:             cmp.l a6,d0
01:00001D2E 66FE            	  2976:             bne.s *                   * branch if Z set
01:00001D30 487900345678    	  2977:             pea $00345678
01:00001D36 0C9700345678    	  2978:             cmpi.l #$00345678,(a7)
01:00001D3C 66FE            	  2979:             bne.s *                   * branch if Z set
                            	  2980:             * This was without a specifier which the assembler defaulted to .w
01:00001D3E 588F            	  2981:             addq.l #4,a7            * Restore Stack Pointer
                            	  2982: 
                            	  2983: *     x(PC)
01:00001D40 4DFA0008        	  2984:             lea LEA1(pc),a6
01:00001D44 200E            	  2985:             move.l a6,d0
01:00001D46 B08E            	  2986:             cmp.l a6,d0
01:00001D48 66FE            	  2987:             bne.s *                   * branch if Z set
01:00001D4A 487AFFFE        	  2988: LEA1:       pea LEA1(pc)
01:00001D4E 0C970000241E    	  2989:             cmpi.l #$0000241E,(a7)
01:00001D54 67FE            	  2990:             beq.s *                   * branch if Z clear
                            	  2991:             * This was without a specifier which the assembler defaulted to .w
01:00001D56 588F            	  2992:             addq.l #4,a7              * Restore Stack Pointer
                            	  2993: 
                            	  2994: 
                            	  2995: 
                            	  2996: 
01:00001D58 46FC2700        	  2997:             move.w #$2700,sr          * Put flags back to initial value
                            	  2998: 
01:00001D5C 4E75            	  2999:             rts
                            	  3000:  	
                            	  3001: 
                            	  3002: 
                            	  3003: *-----------------------------------------------------------
                            	  3004: *-----------------------------------------------------------
                            	  3005: * OPCODE : LEA_TAS
                            	  3006: *-----------------------------------------------------------
                            	  3007: *-----------------------------------------------------------
                            	  3008: op_TAS:
                            	  3009: 
                            	  3010: *     Test just one addressing mode
                            	  3011: 
01:00001D5E 307C0100        	  3012:             move.l #$00000100,a0
                            	  3013: 
                            	  3014: *     (An)
01:00001D62 4210            	  3015:             move.b #$00,(a0)
01:00001D64 6BFE            	  3016:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D66 66FE            	  3017:             bne.s *                   * Check Z Flag  beq/bne
01:00001D68 4AD0            	  3018:             tas (a0)
01:00001D6A 0C100080        	  3019:             cmpi.b #$80,(a0)
01:00001D6E 66FE            	  3020:             bne.s *                   * branch if Z set
01:00001D70 10BC00F5        	  3021:             move.b #$F5,(a0)
01:00001D74 4AD0            	  3022:             tas (a0)
01:00001D76 6AFE            	  3023:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D78 67FE            	  3024:             beq.s *                   * Check Z Flag  beq/bne
01:00001D7A 4AD0            	  3025:             tas (a0)
01:00001D7C 0C1000F5        	  3026:             cmpi.b #$F5,(a0)
01:00001D80 66FE            	  3027:             bne.s *                   * branch if Z set
                            	  3028: 
01:00001D82 4E75            	  3029:             rts
                            	  3030: 
                            	  3031: 
                            	  3032: *-----------------------------------------------------------
                            	  3033: *-----------------------------------------------------------
                            	  3034: * OPCODE : LEA_TST
                            	  3035: *-----------------------------------------------------------
                            	  3036: *-----------------------------------------------------------
                            	  3037: op_TST:
                            	  3038: 
                            	  3039: *     Test just one addressing mode
                            	  3040: 
01:00001D84 307C0100        	  3041:             move.l #$00000100,a0
                            	  3042: 
                            	  3043: *     (An) - BYTE
01:00001D88 4210            	  3044:             move.b #$00,(a0)
01:00001D8A 4A10            	  3045:             tst.b (a0)
01:00001D8C 6BFE            	  3046:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D8E 66FE            	  3047:             bne.s *                   * Check Z Flag  beq/bne
01:00001D90 10BC00F5        	  3048:             move.b #$F5,(a0)
01:00001D94 4A10            	  3049:             tst.b (a0)
01:00001D96 6AFE            	  3050:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D98 67FE            	  3051:             beq.s *                   * Check Z Flag  beq/bne
                            	  3052: 
                            	  3053: *     (An) - WORD
01:00001D9A 4250            	  3054:             move.w #$0000,(a0)
01:00001D9C 4A50            	  3055:             tst.w (a0)
01:00001D9E 6BFE            	  3056:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DA0 66FE            	  3057:             bne.s *                   * Check Z Flag  beq/bne
01:00001DA2 30BCF567        	  3058:             move.w #$F567,(a0)
01:00001DA6 4A50            	  3059:             tst.w (a0)
01:00001DA8 6AFE            	  3060:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DAA 67FE            	  3061:             beq.s *                   * Check Z Flag  beq/bne
                            	  3062: 
                            	  3063: *     (An) - LONG
01:00001DAC 4290            	  3064:             move.l #$00000000,(a0)
01:00001DAE 4A90            	  3065:             tst.l (a0)
01:00001DB0 6BFE            	  3066:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DB2 66FE            	  3067:             bne.s *                   * Check Z Flag  beq/bne
01:00001DB4 20BCF56789AB    	  3068:             move.l #$F56789ab,(a0)
01:00001DBA 4A90            	  3069:             tst.l (a0)
01:00001DBC 6AFE            	  3070:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DBE 67FE            	  3071:             beq.s *                   * Check Z Flag  beq/bne
                            	  3072: 
                            	  3073: 
01:00001DC0 4E75            	  3074:             rts
                            	  3075: 
                            	  3076: 
                            	  3077: *-----------------------------------------------------------
                            	  3078: *-----------------------------------------------------------
                            	  3079: * OPCODE : LINKS
                            	  3080: *-----------------------------------------------------------
                            	  3081: *-----------------------------------------------------------
                            	  3082: op_LINKS:
                            	  3083: 
01:00001DC2 207C11223344    	  3084:             move.l #$11223344,a0
01:00001DC8 203C11223344    	  3085:             move.l #$11223344,d0
01:00001DCE 4E500000        	  3086:             link a0,#$0
01:00001DD2 0C9711223344    	  3087:             cmpi.l #$11223344,(a7)
                            	  3088: 
01:00001DD8 4E58            	  3089:             unlk a0
01:00001DDA B1C0            	  3090:             cmp.l d0,a0
01:00001DDC 66FE            	  3091:             bne.s *                   * branch if Z set
                            	  3092: 
01:00001DDE 4E75            	  3093:             rts
                            	  3094: 
                            	  3095: *-----------------------------------------------------------
                            	  3096: *-----------------------------------------------------------
                            	  3097: * OPCODE : MOVE_USP
                            	  3098: *-----------------------------------------------------------
                            	  3099: *-----------------------------------------------------------
                            	  3100: op_MOVE_USP:
                            	  3101: 
01:00001DE0 207C11223344    	  3102:             move.l #$11223344,a0
01:00001DE6 4E60            	  3103:             move a0,USP
01:00001DE8 4E69            	  3104:             move USP,a1
01:00001DEA B3C8            	  3105:             cmp.l a0,a1
01:00001DEC 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
01:00001DEE 4E75            	  3108:             rts
                            	  3109: 
                            	  3110: 
                            	  3111: *-----------------------------------------------------------
                            	  3112: *-----------------------------------------------------------
                            	  3113: * OPCODE : CHK
                            	  3114: *-----------------------------------------------------------
                            	  3115: *-----------------------------------------------------------
                            	  3116: op_CHK:
01:00001DF0 303C1122        	  3117:             move.w #$1122,d0
01:00001DF4 323C1122        	  3118:             move.w #$1122,d1
01:00001DF8 4380            	  3119:             chk d0,d1
                            	  3120: 
01:00001DFA 4E71            	  3121:             nop
01:00001DFC 4E71            	  3122:             nop
                            	  3123: 
01:00001DFE 323C1122        	  3124:             move.w #$1122,d1
01:00001E02 43BC1122        	  3125:             chk #$1122,d1
                            	  3126: 
01:00001E06 323C1122        	  3127:             move.w #$1122,d1
01:00001E0A 43BC007A        	  3128:             chk #00122,d1
01:00001E0E BCBCEEEE0006    	  3129:             cmp.l #$EEEE0006,d6
01:00001E14 66FE            	  3130:             bne.s *                   * branch if Z set
                            	  3131: 
01:00001E16 303C1122        	  3132:             move.w #$1122,d0
01:00001E1A 323C8000        	  3133:             move.w #$8000,d1
01:00001E1E 4380            	  3134:             chk d0,d1
01:00001E20 BCBCEEEE0006    	  3135:             cmp.l #$EEEE0006,d6
01:00001E26 66FE            	  3136:             bne.s *                   * branch if Z set
                            	  3137: 
01:00001E28 4E75            	  3138:             rts
                            	  3139: 
                            	  3140: 
                            	  3141: *-----------------------------------------------------------
                            	  3142: *-----------------------------------------------------------
                            	  3143: * OPCODE : NEGS
                            	  3144: *-----------------------------------------------------------
                            	  3145: *-----------------------------------------------------------
                            	  3146: op_NEGS:
                            	  3147: 
                            	  3148: *     NOT - BYTE
01:00001E2A 307C0100        	  3149:             move.l #$00000100,a0
01:00001E2E 7000            	  3150:             moveq  #$00000000,d0
01:00001E30 4600            	  3151:             not.b d0
01:00001E32 6AFE            	  3152:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E34 67FE            	  3153:             beq.s *                   * Check Z Flag  beq/bne
01:00001E36 4600            	  3154:             not.b d0
01:00001E38 6BFE            	  3155:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E3A 66FE            	  3156:             bne.s *                   * Check Z Flag  beq/bne
01:00001E3C 4A00            	  3157:             cmpi.b #$00,d0
01:00001E3E 66FE            	  3158:             bne.s *                   * Check Z Flag  beq/bne
01:00001E40 10BC0080        	  3159:             move.b #$80,(a0)
01:00001E44 4610            	  3160:             not.b (a0)
01:00001E46 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E48 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
01:00001E4A 4610            	  3163:             not.b (a0)
01:00001E4C 6AFE            	  3164:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E4E 67FE            	  3165:             beq.s *                   * Check Z Flag  beq/bne
01:00001E50 0C100080        	  3166:             cmpi.b #$80,(a0)
01:00001E54 66FE            	  3167:             bne.s *                   * Check Z Flag  beq/bne
                            	  3168: 
                            	  3169: *     NOT - WORD
01:00001E56 307C0100        	  3170:             move.l #$00000100,a0
01:00001E5A 7000            	  3171:             moveq  #$00000000,d0
01:00001E5C 4640            	  3172:             not.w d0
01:00001E5E 6AFE            	  3173:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E60 67FE            	  3174:             beq.s *                   * Check Z Flag  beq/bne
01:00001E62 4640            	  3175:             not.w d0
01:00001E64 6BFE            	  3176:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E66 66FE            	  3177:             bne.s *                   * Check Z Flag  beq/bne
01:00001E68 4A40            	  3178:             cmpi.w #$0000,d0
01:00001E6A 66FE            	  3179:             bne.s *                   * Check Z Flag  beq/bne
01:00001E6C 30BC5A5A        	  3180:             move.w #$5a5a,(a0)
01:00001E70 4650            	  3181:             not.w (a0)
01:00001E72 6AFE            	  3182:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E74 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
01:00001E76 4650            	  3184:             not.w (a0)
01:00001E78 6BFE            	  3185:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E7A 67FE            	  3186:             beq.s *                   * Check Z Flag  beq/bne
01:00001E7C 0C505A5A        	  3187:             cmpi.w #$5a5a,(a0)
01:00001E80 66FE            	  3188:             bne.s *                   * Check Z Flag  beq/bne
                            	  3189: 
                            	  3190: *     NOT - LONG
01:00001E82 307C0100        	  3191:             move.l #$00000100,a0
01:00001E86 7000            	  3192:             moveq  #$00000000,d0
01:00001E88 4680            	  3193:             not.l d0
01:00001E8A 6AFE            	  3194:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E8C 67FE            	  3195:             beq.s *                   * Check Z Flag  beq/bne
01:00001E8E 4680            	  3196:             not.l d0
01:00001E90 6BFE            	  3197:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E92 66FE            	  3198:             bne.s *                   * Check Z Flag  beq/bne
01:00001E94 4A80            	  3199:             cmpi.l #$00000000,d0
01:00001E96 66FE            	  3200:             bne.s *                   * Check Z Flag  beq/bne
01:00001E98 20BC5A5A1234    	  3201:             move.l #$5a5a1234,(a0)
01:00001E9E 4690            	  3202:             not.l (a0)
01:00001EA0 6AFE            	  3203:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001EA2 67FE            	  3204:             beq.s *                   * Check Z Flag  beq/bne
01:00001EA4 4690            	  3205:             not.l (a0)
01:00001EA6 6BFE            	  3206:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EA8 67FE            	  3207:             beq.s *                   * Check Z Flag  beq/bne
01:00001EAA 0C905A5A1234    	  3208:             cmpi.l #$5a5a1234,(a0)
01:00001EB0 66FE            	  3209:             bne.s *                   * Check Z Flag  beq/bne
                            	  3210: 
                            	  3211: * -----
                            	  3212: 
                            	  3213: *     NEG - BYTE
01:00001EB2 307C0100        	  3214:             move.l #$00000100,a0
01:00001EB6 7000            	  3215:             moveq  #$00000000,d0
01:00001EB8 7240D241        	  3216:             move.l #$00000080,d1
01:00001EBC 4400            	  3217:             neg.b d0
01:00001EBE 6BFE            	  3218:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EC0 66FE            	  3219:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001EC2 65FE            	  3220:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001EC4 69FE            	  3221:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EC6 4401            	  3222:             neg.b d1
01:00001EC8 6AFE            	  3223:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001ECA 67FE            	  3224:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001ECC 64FE            	  3225:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001ECE 68FE            	  3226:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001ED0 0C010080        	  3227:             cmpi.b #$80,d1
01:00001ED4 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne
01:00001ED6 10BC007F        	  3229:             move.b #$7F,(a0)
01:00001EDA 4410            	  3230:             neg.b (a0)
01:00001EDC 6AFE            	  3231:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EDE 67FE            	  3232:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EE0 64FE            	  3233:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EE2 69FE            	  3234:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EE4 10BC00F5        	  3235:             move.b #$F5,(a0)
01:00001EE8 4410            	  3236:             neg.b (a0)
01:00001EEA 6BFE            	  3237:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EEC 67FE            	  3238:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EEE 64FE            	  3239:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EF0 69FE            	  3240:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EF2 0C10000B        	  3241:             cmpi.b #$0B,(a0)
01:00001EF6 66FE            	  3242:             bne.s *                   * Check Z Flag  beq/bne
                            	  3243: 
                            	  3244: * -----
                            	  3245: 
                            	  3246: *     NEG - WORD
01:00001EF8 307C0100        	  3247:             move.l #$00000100,a0
01:00001EFC 7000            	  3248:             moveq  #$00000000,d0
01:00001EFE 223C00008000    	  3249:             move.l #$00008000,d1
01:00001F04 4440            	  3250:             neg.w d0
01:00001F06 6BFE            	  3251:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F08 66FE            	  3252:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F0A 65FE            	  3253:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F0C 69FE            	  3254:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F0E 4441            	  3255:             neg.w d1
01:00001F10 6AFE            	  3256:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F12 67FE            	  3257:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F14 64FE            	  3258:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F16 68FE            	  3259:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F18 0C418000        	  3260:             cmpi.w #$8000,d1
01:00001F1C 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne
01:00001F1E 30BC7FFF        	  3262:             move.w #$7FFF,(a0)
01:00001F22 4450            	  3263:             neg.w (a0)
01:00001F24 6AFE            	  3264:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F26 67FE            	  3265:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F28 64FE            	  3266:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F2A 69FE            	  3267:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F2C 30BCF578        	  3268:             move.w #$F578,(a0)
01:00001F30 4450            	  3269:             neg.w (a0)
01:00001F32 6BFE            	  3270:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F34 67FE            	  3271:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F36 64FE            	  3272:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F38 69FE            	  3273:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F3A 0C500A88        	  3274:             cmpi.w #$0A88,(a0)
01:00001F3E 66FE            	  3275:             bne.s *                   * Check Z Flag  beq/bne
                            	  3276: 
                            	  3277: * -----
                            	  3278: 
                            	  3279: *     NEG - LONG
01:00001F40 307C0100        	  3280:             move.l #$00000100,a0
01:00001F44 7000            	  3281:             moveq  #$00000000,d0
01:00001F46 223C80000000    	  3282:             move.l #$80000000,d1
01:00001F4C 4480            	  3283:             neg.l d0
01:00001F4E 6BFE            	  3284:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F50 66FE            	  3285:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F52 65FE            	  3286:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F54 69FE            	  3287:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F56 4481            	  3288:             neg.l d1
01:00001F58 6AFE            	  3289:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F5A 67FE            	  3290:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F5C 64FE            	  3291:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F5E 68FE            	  3292:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F60 0C8180000000    	  3293:             cmpi.l #$80000000,d1
01:00001F66 66FE            	  3294:             bne.s *                   * Check Z Flag  beq/bne
01:00001F68 20BC7FFFFFFF    	  3295:             move.l #$7FFFFFFF,(a0)
01:00001F6E 4490            	  3296:             neg.l (a0)
01:00001F70 6AFE            	  3297:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F72 67FE            	  3298:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F74 64FE            	  3299:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F76 69FE            	  3300:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F78 20BCF5781234    	  3301:             move.l #$F5781234,(a0)
01:00001F7E 4490            	  3302:             neg.l (a0)
01:00001F80 6BFE            	  3303:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F82 67FE            	  3304:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F84 64FE            	  3305:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F86 69FE            	  3306:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F88 0C900A87EDCC    	  3307:             cmpi.l #$0A87EDCC,(a0)
01:00001F8E 66FE            	  3308:             bne.s *                   * Check Z Flag  beq/bne
                            	  3309: 
                            	  3310: 
                            	  3311: * -----
                            	  3312: 
                            	  3313: *     NEGX - BYTE
01:00001F90 307C0100        	  3314:             move.l #$00000100,a0
01:00001F94 7000            	  3315:             moveq  #$00000000,d0
01:00001F96 7240D241        	  3316:             move.l #$00000080,d1
01:00001F9A 003C0010        	  3317:             ori.b #$10,CCR        * Set X Flag
01:00001F9E 4000            	  3318:             negx.b d0
01:00001FA0 6AFE            	  3319:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FA2 67FE            	  3320:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FA4 64FE            	  3321:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FA6 69FE            	  3322:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FA8 023C00EF        	  3323:             andi.b #$EF,CCR       * Clear X Flag
01:00001FAC 4000            	  3324:             negx.b d0
01:00001FAE 6BFE            	  3325:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FB0 67FE            	  3326:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FB2 64FE            	  3327:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FB4 69FE            	  3328:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FB6 003C0010        	  3329:             ori.b #$10,CCR        * Set X Flag
01:00001FBA 4001            	  3330:             negx.b d1
01:00001FBC 6BFE            	  3331:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FBE 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FC0 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FC2 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FC4 0C01007F        	  3335:             cmpi.b #$7F,d1
01:00001FC8 66FE            	  3336:             bne.s *                   * Check Z Flag  beq/bne
01:00001FCA 023C00EF        	  3337:             andi.b #$EF,CCR       * Clear X Flag
01:00001FCE 4001            	  3338:             negx.b d1
01:00001FD0 6AFE            	  3339:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FD2 67FE            	  3340:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FD4 64FE            	  3341:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FD6 69FE            	  3342:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FD8 0C010081        	  3343:             cmpi.b #$81,d1
01:00001FDC 66FE            	  3344:             bne.s *                   * Check Z Flag  beq/bne
01:00001FDE 10BC007F        	  3345:             move.b #$7F,(a0)
01:00001FE2 003C0010        	  3346:             ori.b #$10,CCR        * Set X Flag
01:00001FE6 4010            	  3347:             negx.b (a0)
01:00001FE8 6AFE            	  3348:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FEA 67FE            	  3349:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FEC 64FE            	  3350:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3351:             * I think overflow should happen here.
                            	  3352: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FEE 10BC007F        	  3353:             move.b #$7F,(a0)
01:00001FF2 023C00EF        	  3354:             andi.b #$EF,CCR       * Clear X Flag
01:00001FF6 4010            	  3355:             negx.b (a0)
01:00001FF8 6AFE            	  3356:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FFA 67FE            	  3357:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FFC 64FE            	  3358:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FFE 69FE            	  3359:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002000 10BC00F5        	  3360:             move.b #$F5,(a0)
01:00002004 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
01:00002008 4010            	  3362:             negx.b (a0)
01:0000200A 6BFE            	  3363:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000200C 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000200E 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002010 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002012 0C10000A        	  3367:             cmpi.b #$0A,(a0)
01:00002016 66FE            	  3368:             bne.s *                   * Check Z Flag  beq/bne
01:00002018 023C00EF        	  3369:             andi.b #$EF,CCR       * Clear X Flag
01:0000201C 4010            	  3370:             negx.b (a0)
01:0000201E 6AFE            	  3371:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002020 67FE            	  3372:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002022 64FE            	  3373:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002024 69FE            	  3374:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002026 0C1000F6        	  3375:             cmpi.b #$F6,(a0)
01:0000202A 66FE            	  3376:             bne.s *                   * Check Z Flag  beq/bne
                            	  3377: 
                            	  3378: 
                            	  3379: 
                            	  3380: * -----
                            	  3381: 
                            	  3382: *     NEGX - WORD
01:0000202C 307C0100        	  3383:             move.l #$00000100,a0
01:00002030 7000            	  3384:             moveq  #$00000000,d0
01:00002032 223C00008000    	  3385:             move.l #$00008000,d1
01:00002038 003C0010        	  3386:             ori.b #$10,CCR        * Set X Flag
01:0000203C 4040            	  3387:             negx.w d0
01:0000203E 6AFE            	  3388:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002040 67FE            	  3389:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002042 64FE            	  3390:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002044 69FE            	  3391:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002046 023C00EF        	  3392:             andi.b #$EF,CCR       * Clear X Flag
01:0000204A 4040            	  3393:             negx.w d0
01:0000204C 6BFE            	  3394:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000204E 67FE            	  3395:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002050 64FE            	  3396:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002052 69FE            	  3397:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002054 003C0010        	  3398:             ori.b #$10,CCR        * Set X Flag
01:00002058 4041            	  3399:             negx.w d1
01:0000205A 6BFE            	  3400:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000205C 67FE            	  3401:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000205E 64FE            	  3402:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002060 69FE            	  3403:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002062 0C417FFF        	  3404:             cmpi.w #$7FFF,d1
01:00002066 66FE            	  3405:             bne.s *                   * Check Z Flag  beq/bne
01:00002068 023C00EF        	  3406:             andi.b #$EF,CCR       * Clear X Flag
01:0000206C 4041            	  3407:             negx.w d1
01:0000206E 6AFE            	  3408:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002070 67FE            	  3409:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002072 64FE            	  3410:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002074 69FE            	  3411:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002076 0C418001        	  3412:             cmpi.w #$8001,d1
01:0000207A 66FE            	  3413:             bne.s *                   * Check Z Flag  beq/bne
01:0000207C 30BC7FFF        	  3414:             move.w #$7FFF,(a0)
01:00002080 003C0010        	  3415:             ori.b #$10,CCR        * Set X Flag
01:00002084 4050            	  3416:             negx.w (a0)
01:00002086 6AFE            	  3417:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002088 67FE            	  3418:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000208A 64FE            	  3419:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3420: ***            
                            	  3421: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000208C 30BCF567        	  3422:             move.w #$F567,(a0)
01:00002090 023C00EF        	  3423:             andi.b #$EF,CCR       * Clear X Flag
01:00002094 4050            	  3424:             negx.w (a0)
01:00002096 6BFE            	  3425:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00002098 67FE            	  3426:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000209A 64FE            	  3427:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000209C 69FE            	  3428:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000209E 30BCF567        	  3429:             move.w #$F567,(a0)
01:000020A2 003C0010        	  3430:             ori.b #$10,CCR        * Set X Flag
01:000020A6 4050            	  3431:             negx.w (a0)
01:000020A8 6BFE            	  3432:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020AA 67FE            	  3433:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020AC 64FE            	  3434:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020AE 69FE            	  3435:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020B0 0C500A98        	  3436:             cmpi.w #$0A98,(a0)
01:000020B4 66FE            	  3437:             bne.s *                   * Check Z Flag  beq/bne
01:000020B6 023C00EF        	  3438:             andi.b #$EF,CCR       * Clear X Flag
01:000020BA 4050            	  3439:             negx.w (a0)
01:000020BC 6AFE            	  3440:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020BE 67FE            	  3441:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020C0 64FE            	  3442:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020C2 69FE            	  3443:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020C4 0C50F568        	  3444:             cmpi.w #$F568,(a0)
01:000020C8 66FE            	  3445:             bne.s *                   * Check Z Flag  beq/bne
                            	  3446: 
                            	  3447: 
                            	  3448: * -----
                            	  3449: 
                            	  3450: *     NEGX - LONG
01:000020CA 307C0100        	  3451:             move.l #$00000100,a0
01:000020CE 7000            	  3452:             moveq  #$00000000,d0
01:000020D0 223C80000000    	  3453:             move.l #$80000000,d1
01:000020D6 003C0010        	  3454:             ori.b #$10,CCR        * Set X Flag
01:000020DA 4080            	  3455:             negx.l d0
01:000020DC 6AFE            	  3456:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020DE 67FE            	  3457:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020E0 64FE            	  3458:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020E2 69FE            	  3459:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020E4 023C00EF        	  3460:             andi.b #$EF,CCR       * Clear X Flag
01:000020E8 4080            	  3461:             negx.l d0
01:000020EA 6BFE            	  3462:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020EC 67FE            	  3463:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020EE 64FE            	  3464:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020F0 69FE            	  3465:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020F2 003C0010        	  3466:             ori.b #$10,CCR        * Set X Flag
01:000020F6 4081            	  3467:             negx.l d1
01:000020F8 6BFE            	  3468:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020FA 67FE            	  3469:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020FC 64FE            	  3470:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020FE 69FE            	  3471:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002100 0C817FFFFFFF    	  3472:             cmpi.l #$7FFFFFFF,d1
01:00002106 66FE            	  3473:             bne.s *                   * Check Z Flag  beq/bne
01:00002108 023C00EF        	  3474:             andi.b #$EF,CCR       * Clear X Flag
01:0000210C 4081            	  3475:             negx.l d1
01:0000210E 6AFE            	  3476:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002110 67FE            	  3477:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002112 64FE            	  3478:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3479: ****            
                            	  3480: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002114 0C8180000001    	  3481:             cmpi.l #$80000001,d1
01:0000211A 66FE            	  3482:             bne.s *                   * Check Z Flag  beq/bne
01:0000211C 20BC00007FFF    	  3483:             move.l #$7FFF,(a0)
01:00002122 003C0010        	  3484:             ori.b #$10,CCR        * Set X Flag
01:00002126 4090            	  3485:             negx.l (a0)
01:00002128 6AFE            	  3486:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000212A 67FE            	  3487:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000212C 64FE            	  3488:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3489: ****            
                            	  3490: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000212E 20BCF5671234    	  3491:             move.l #$F5671234,(a0)
01:00002134 023C00EF        	  3492:             andi.b #$EF,CCR       * Clear X Flag
01:00002138 4090            	  3493:             negx.l (a0)
01:0000213A 6BFE            	  3494:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000213C 67FE            	  3495:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000213E 64FE            	  3496:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002140 69FE            	  3497:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002142 20BCF5675678    	  3498:             move.l #$F5675678,(a0)
01:00002148 003C0010        	  3499:             ori.b #$10,CCR        * Set X Flag
01:0000214C 4090            	  3500:             negx.l (a0)
01:0000214E 6BFE            	  3501:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002150 67FE            	  3502:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002152 64FE            	  3503:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002154 69FE            	  3504:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002156 0C900A98A987    	  3505:             cmpi.l #$0A98A987,(a0)
01:0000215C 66FE            	  3506:             bne.s *                   * Check Z Flag  beq/bne
01:0000215E 023C00EF        	  3507:             andi.b #$EF,CCR       * Clear X Flag
01:00002162 4090            	  3508:             negx.l (a0)
01:00002164 6AFE            	  3509:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002166 67FE            	  3510:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002168 64FE            	  3511:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000216A 69FE            	  3512:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000216C 0C90F5675679    	  3513:             cmpi.l #$F5675679,(a0)
01:00002172 66FE            	  3514:             bne.s *                   * Check Z Flag  beq/bne
                            	  3515: 
                            	  3516: 
                            	  3517: * -----
                            	  3518: 
                            	  3519: *     CLR - BYTE
01:00002174 307C0100        	  3520:             move.l #$00000100,a0
01:00002178 203C12345678    	  3521:             move.l #$12345678,d0
01:0000217E 223C12345678    	  3522:             move.l #$12345678,d1
01:00002184 243C12345678    	  3523:             move.l #$12345678,d2
01:0000218A 283C12345600    	  3524:             move.l #$12345600,d4
01:00002190 2A3C12340000    	  3525:             move.l #$12340000,d5
01:00002196 7C00            	  3526:             moveq  #$00000000,d6
                            	  3527: 
01:00002198 4200            	  3528:             clr.b d0
01:0000219A 66FE            	  3529:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000219C 6BFE            	  3530:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000219E B880            	  3531:             cmp.l d0,d4
01:000021A0 66FE            	  3532:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3533: 
01:000021A2 4241            	  3534:             clr.w d1
01:000021A4 66FE            	  3535:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021A6 6BFE            	  3536:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021A8 BA81            	  3537:             cmp.l d1,d5
01:000021AA 66FE            	  3538:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3539: 
01:000021AC 7400            	  3540:             clr.l d2
01:000021AE 66FE            	  3541:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021B0 6BFE            	  3542:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021B2 BC82            	  3543:             cmp.l d2,d6
01:000021B4 66FE            	  3544:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3545: 
01:000021B6 4E75            	  3546:             rts
                            	  3547: 
                            	  3548: 
                            	  3549: 
                            	  3550: *-----------------------------------------------------------
                            	  3551: *-----------------------------------------------------------
                            	  3552: * OPCODE : MOVEM
                            	  3553: *-----------------------------------------------------------
                            	  3554: *-----------------------------------------------------------
                            	  3555: op_MOVEM:
                            	  3556: 
                            	  3557: *     WORD  Registers --> Memory
01:000021B8 203C0000D0D0    	  3558:             move.l #$0000d0d0,d0
01:000021BE 223C0000D1D1    	  3559:             move.l #$0000d1d1,d1
01:000021C4 243C0000D2D2    	  3560:             move.l #$0000d2d2,d2
01:000021CA 263C0000D3D3    	  3561:             move.l #$0000d3d3,d3
01:000021D0 283C0000D4D4    	  3562:             move.l #$0000d4d4,d4
01:000021D6 2A3C0000D5D5    	  3563:             move.l #$0000d5d5,d5
01:000021DC 2C3C0000D6D6    	  3564:             move.l #$0000d6d6,d6
01:000021E2 2E3C0000D7D7    	  3565:             move.l #$0000d7d7,d7
01:000021E8 307C0A0A        	  3566:             move.l #$00000a0a,a0
01:000021EC 327C1A1A        	  3567:             move.l #$00001a1a,a1
01:000021F0 347C2A2A        	  3568:             move.l #$00002a2a,a2
01:000021F4 367C3A3A        	  3569:             move.l #$00003a3a,a3
01:000021F8 387C4A4A        	  3570:             move.l #$00004a4a,a4
01:000021FC 3A7C5A5A        	  3571:             move.l #$00005a5a,a5
01:00002200 3C7C6A6A        	  3572:             move.l #$00006a6a,a6
                            	  3573: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3574: 
01:00002204 48B8FFFF0100    	  3575:             movem.w D0-D7/A0-A7,$00000100
                            	  3576: 
01:0000220A 307C0100        	  3577:             move.l #$00000100,a0
                            	  3578: 
01:0000220E B058            	  3579:             cmp.w (a0)+,d0
01:00002210 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002212 B258            	  3581:             cmp.w (a0)+,d1
01:00002214 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002216 B458            	  3583:             cmp.w (a0)+,d2
01:00002218 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000221A B658            	  3585:             cmp.w (a0)+,d3
01:0000221C 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000221E B858            	  3587:             cmp.w (a0)+,d4
01:00002220 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002222 BA58            	  3589:             cmp.w (a0)+,d5
01:00002224 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002226 BC58            	  3591:             cmp.w (a0)+,d6
01:00002228 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000222A BE58            	  3593:             cmp.w (a0)+,d7
01:0000222C 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3595: 
01:0000222E 0C580A0A        	  3596:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002232 66FE            	  3597:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3598: 
01:00002234 B2D8            	  3599:             cmp.w (a0)+,a1
01:00002236 66FE            	  3600:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002238 B4D8            	  3601:             cmp.w (a0)+,a2
01:0000223A 66FE            	  3602:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000223C B6D8            	  3603:             cmp.w (a0)+,a3
01:0000223E 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002240 B8D8            	  3605:             cmp.w (a0)+,a4
01:00002242 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002244 BAD8            	  3607:             cmp.w (a0)+,a5
01:00002246 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002248 BCD8            	  3609:             cmp.w (a0)+,a6
01:0000224A 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: *     LONG  Registers --> Memory
01:0000224C 203CD0D0D0D0    	  3616:             move.l #$d0d0d0d0,d0
01:00002252 223CD1D1D1D1    	  3617:             move.l #$d1d1d1d1,d1
01:00002258 243CD2D2D2D2    	  3618:             move.l #$d2d2d2d2,d2
01:0000225E 263CD3D3D3D3    	  3619:             move.l #$d3d3d3d3,d3
01:00002264 283CD4D4D4D4    	  3620:             move.l #$d4d4d4d4,d4
01:0000226A 2A3CD5D5D5D5    	  3621:             move.l #$d5d5d5d5,d5
01:00002270 2C3CD6D6D6D6    	  3622:             move.l #$d6d6d6d6,d6
01:00002276 2E3CD7D7D7D7    	  3623:             move.l #$d7d7d7d7,d7
01:0000227C 207C0A0A0A0A    	  3624:             move.l #$0a0a0a0a,a0
01:00002282 227C1A1A1A1A    	  3625:             move.l #$1a1a1a1a,a1
01:00002288 247C2A2A2A2A    	  3626:             move.l #$2a2a2a2a,a2
01:0000228E 267C3A3A3A3A    	  3627:             move.l #$3a3a3a3a,a3
01:00002294 287C4A4A4A4A    	  3628:             move.l #$4a4a4a4a,a4
01:0000229A 2A7C5A5A5A5A    	  3629:             move.l #$5a5a5a5a,a5
01:000022A0 2C7C6A6A6A6A    	  3630:             move.l #$6a6a6a6a,a6
                            	  3631: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3632: 
                            	  3633: 
01:000022A6 48F8FFFF0120    	  3634:             movem.l D0-D7/A0-A7,$00000120
                            	  3635: 
01:000022AC 307C0120        	  3636:             move.l #$00000120,a0
                            	  3637: 
01:000022B0 B098            	  3638:             cmp.l (a0)+,d0
01:000022B2 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022B4 B298            	  3640:             cmp.l (a0)+,d1
01:000022B6 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022B8 B498            	  3642:             cmp.l (a0)+,d2
01:000022BA 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022BC B698            	  3644:             cmp.l (a0)+,d3
01:000022BE 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C0 B898            	  3646:             cmp.l (a0)+,d4
01:000022C2 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C4 BA98            	  3648:             cmp.l (a0)+,d5
01:000022C6 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C8 BC98            	  3650:             cmp.l (a0)+,d6
01:000022CA 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CC BE98            	  3652:             cmp.l (a0)+,d7
01:000022CE 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3654: 
01:000022D0 0C980A0A0A0A    	  3655:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:000022D6 66FE            	  3656:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3657: 
01:000022D8 B3D8            	  3658:             cmp.l (a0)+,a1
01:000022DA 66FE            	  3659:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022DC B5D8            	  3660:             cmp.l (a0)+,a2
01:000022DE 66FE            	  3661:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E0 B7D8            	  3662:             cmp.l (a0)+,a3
01:000022E2 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E4 B9D8            	  3664:             cmp.l (a0)+,a4
01:000022E6 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022E8 BBD8            	  3666:             cmp.l (a0)+,a5
01:000022EA 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022EC BDD8            	  3668:             cmp.l (a0)+,a6
01:000022EE 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3670: *      ----
                            	  3671: 
                            	  3672: 
                            	  3673: *     WORD  Registers --> Memory  -(An) EA Mode
01:000022F0 203C0000D0D0    	  3674:             move.l #$0000d0d0,d0
01:000022F6 223C0000D1D1    	  3675:             move.l #$0000d1d1,d1
01:000022FC 243C0000D2D2    	  3676:             move.l #$0000d2d2,d2
01:00002302 263C0000D3D3    	  3677:             move.l #$0000d3d3,d3
01:00002308 283C0000D4D4    	  3678:             move.l #$0000d4d4,d4
01:0000230E 2A3C0000D5D5    	  3679:             move.l #$0000d5d5,d5
01:00002314 2C3C0000D6D6    	  3680:             move.l #$0000d6d6,d6
01:0000231A 2E3C0000D7D7    	  3681:             move.l #$0000d7d7,d7
01:00002320 307C0A0A        	  3682:             move.l #$00000a0a,a0
01:00002324 327C1A1A        	  3683:             move.l #$00001a1a,a1
01:00002328 347C2A2A        	  3684:             move.l #$00002a2a,a2
01:0000232C 367C3A3A        	  3685:             move.l #$00003a3a,a3
01:00002330 387C4A4A        	  3686:             move.l #$00004a4a,a4
01:00002334 3A7C5A5A        	  3687:             move.l #$00005a5a,a5
01:00002338 3C7C6A6A        	  3688:             move.l #$00006a6a,a6
                            	  3689: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3690: 
01:0000233C 307C01A0        	  3691:             move.l #$000001A0,a0
01:00002340 48A0FFFF        	  3692:             movem.w D0-D7/A0-A7,-(a0)
                            	  3693: 
01:00002344 307C019E        	  3694:             move.l #$0000019E,a0
                            	  3695: 
01:00002348 BCE0            	  3696:             cmp.w -(a0),a6
01:0000234A 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000234C BAE0            	  3698:             cmp.w -(a0),a5
01:0000234E 66FE            	  3699:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002350 B8E0            	  3700:             cmp.w -(a0),a4
01:00002352 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002354 B6E0            	  3702:             cmp.w -(a0),a3
01:00002356 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002358 B4E0            	  3704:             cmp.w -(a0),a2
01:0000235A 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235C B2E0            	  3706:             cmp.w -(a0),a1
01:0000235E 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002360 B0E0            	  3708:             cmp.w -(a0),a0
                            	  3709: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002362 BE60            	  3710:             cmp.w -(a0),d7
01:00002364 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002366 BC60            	  3712:             cmp.w -(a0),d6
01:00002368 66FE            	  3713:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236A BA60            	  3714:             cmp.w -(a0),d5
01:0000236C 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236E B860            	  3716:             cmp.w -(a0),d4
01:00002370 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002372 B660            	  3718:             cmp.w -(a0),d3
01:00002374 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002376 B460            	  3720:             cmp.w -(a0),d2
01:00002378 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237A B260            	  3722:             cmp.w -(a0),d1
01:0000237C 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237E B060            	  3724:             cmp.w -(a0),d0
01:00002380 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: *     LONG  Registers --> Memory   -(An) EA Mode
01:00002382 203CD0D0D0D0    	  3731:             move.l #$d0d0d0d0,d0
01:00002388 223CD1D1D1D1    	  3732:             move.l #$d1d1d1d1,d1
01:0000238E 243CD2D2D2D2    	  3733:             move.l #$d2d2d2d2,d2
01:00002394 263CD3D3D3D3    	  3734:             move.l #$d3d3d3d3,d3
01:0000239A 283CD4D4D4D4    	  3735:             move.l #$d4d4d4d4,d4
01:000023A0 2A3CD5D5D5D5    	  3736:             move.l #$d5d5d5d5,d5
01:000023A6 2C3CD6D6D6D6    	  3737:             move.l #$d6d6d6d6,d6
01:000023AC 2E3CD7D7D7D7    	  3738:             move.l #$d7d7d7d7,d7
01:000023B2 207C0A0A0A0A    	  3739:             move.l #$0a0a0a0a,a0
01:000023B8 227C1A1A1A1A    	  3740:             move.l #$1a1a1a1a,a1
01:000023BE 247C2A2A2A2A    	  3741:             move.l #$2a2a2a2a,a2
01:000023C4 267C3A3A3A3A    	  3742:             move.l #$3a3a3a3a,a3
01:000023CA 287C4A4A4A4A    	  3743:             move.l #$4a4a4a4a,a4
01:000023D0 2A7C5A5A5A5A    	  3744:             move.l #$5a5a5a5a,a5
01:000023D6 2C7C6A6A6A6A    	  3745:             move.l #$6a6a6a6a,a6
                            	  3746: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3747: 
                            	  3748: 
01:000023DC 307C01A0        	  3749:             move.l #$000001A0,a0
01:000023E0 48E0FFFF        	  3750:             movem.l D0-D7/A0-A7,-(a0)
                            	  3751: 
01:000023E4 307C019C        	  3752:             move.l #$0000019C,a0
                            	  3753: 
01:000023E8 BDE0            	  3754:             cmp.l -(a0),a6
01:000023EA 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023EC BBE0            	  3756:             cmp.l -(a0),a5
01:000023EE 66FE            	  3757:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F0 B9E0            	  3758:             cmp.l -(a0),a4
01:000023F2 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F4 B7E0            	  3760:             cmp.l -(a0),a3
01:000023F6 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023F8 B5E0            	  3762:             cmp.l -(a0),a2
01:000023FA 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FC B3E0            	  3764:             cmp.l -(a0),a1
01:000023FE 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002400 B1E0            	  3766:             cmp.l -(a0),a0
                            	  3767: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002402 BEA0            	  3768:             cmp.l -(a0),d7
01:00002404 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002406 BCA0            	  3770:             cmp.l -(a0),d6
01:00002408 66FE            	  3771:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000240A BAA0            	  3772:             cmp.l -(a0),d5
01:0000240C 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000240E B8A0            	  3774:             cmp.l -(a0),d4
01:00002410 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002412 B6A0            	  3776:             cmp.l -(a0),d3
01:00002414 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002416 B4A0            	  3778:             cmp.l -(a0),d2
01:00002418 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000241A B2A0            	  3780:             cmp.l -(a0),d1
01:0000241C 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000241E B0A0            	  3782:             cmp.l -(a0),d0
01:00002420 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3784: 
                            	  3785: 
                            	  3786: 
                            	  3787: *     ----
                            	  3788: 
                            	  3789: *     WORD - Memory --> Registers
01:00002422 7000            	  3790:             moveq  #$00000000,d0
01:00002424 7200            	  3791:             moveq  #$00000000,d1
01:00002426 7400            	  3792:             moveq  #$00000000,d2
01:00002428 7600            	  3793:             moveq  #$00000000,d3
01:0000242A 7800            	  3794:             moveq  #$00000000,d4
01:0000242C 7A00            	  3795:             moveq  #$00000000,d5
01:0000242E 7C00            	  3796:             moveq  #$00000000,d6
01:00002430 7E00            	  3797:             moveq  #$00000000,d7
01:00002432 91C8            	  3798:             move.l #$00000000,a0
01:00002434 93C9            	  3799:             move.l #$00000000,a1
01:00002436 95CA            	  3800:             move.l #$00000000,a2
01:00002438 97CB            	  3801:             move.l #$00000000,a3
01:0000243A 99CC            	  3802:             move.l #$00000000,a4
01:0000243C 9BCD            	  3803:             move.l #$00000000,a5
01:0000243E 9DCE            	  3804:             move.l #$00000000,a6
                            	  3805: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3806: 
01:00002440 4CB82A550100    	  3807:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3808: 
01:00002446 B0BCFFFFD0D0    	  3809:             cmp.l #$FFFFD0D0,d0
01:0000244C 66FE            	  3810:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000244E B4BCFFFFD1D1    	  3811:             cmp.l #$FFFFD1D1,d2
01:00002454 66FE            	  3812:             bne.s *                  * Check Z Flag  beq/bne 0
01:00002456 B8BCFFFFD2D2    	  3813:             cmp.l #$FFFFD2D2,d4
01:0000245C 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000245E BCBCFFFFD3D3    	  3815:             cmp.l #$FFFFD3D3,d6
01:00002464 66FE            	  3816:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002466 B2FCD4D4        	  3817:             cmp.l #$FFFFD4D4,a1
01:0000246A 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000246C B6FCD5D5        	  3819:             cmp.l #$FFFFD5D5,a3
01:00002470 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002472 BAFCD6D6        	  3821:             cmp.l #$FFFFD6D6,a5
01:00002476 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3823: 
                            	  3824: 
                            	  3825: *     LONG - Memory --> Registers
01:00002478 7000            	  3826:             moveq  #$00000000,d0
01:0000247A 7200            	  3827:             moveq  #$00000000,d1
01:0000247C 7400            	  3828:             moveq  #$00000000,d2
01:0000247E 7600            	  3829:             moveq  #$00000000,d3
01:00002480 7800            	  3830:             moveq  #$00000000,d4
01:00002482 7A00            	  3831:             moveq  #$00000000,d5
01:00002484 7C00            	  3832:             moveq  #$00000000,d6
01:00002486 7E00            	  3833:             moveq  #$00000000,d7
01:00002488 91C8            	  3834:             move.l #$00000000,a0
01:0000248A 93C9            	  3835:             move.l #$00000000,a1
01:0000248C 95CA            	  3836:             move.l #$00000000,a2
01:0000248E 97CB            	  3837:             move.l #$00000000,a3
01:00002490 99CC            	  3838:             move.l #$00000000,a4
01:00002492 9BCD            	  3839:             move.l #$00000000,a5
01:00002494 9DCE            	  3840:             move.l #$00000000,a6
                            	  3841: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3842: 
01:00002496 4CF82A550120    	  3843:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3844: 
01:0000249C B0BCD0D0D0D0    	  3845:             cmp.l #$D0D0D0D0,d0
01:000024A2 66FE            	  3846:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024A4 B4BCD1D1D1D1    	  3847:             cmp.l #$D1D1D1D1,d2
01:000024AA 66FE            	  3848:             bne.s *                  * Check Z Flag  beq/bne 0
01:000024AC B8BCD2D2D2D2    	  3849:             cmp.l #$D2D2D2D2,d4
01:000024B2 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024B4 BCBCD3D3D3D3    	  3851:             cmp.l #$D3D3D3D3,d6
01:000024BA 66FE            	  3852:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024BC B3FCD4D4D4D4    	  3853:             cmp.l #$D4D4D4D4,a1
01:000024C2 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024C4 B7FCD5D5D5D5    	  3855:             cmp.l #$D5D5D5D5,a3
01:000024CA 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024CC BBFCD6D6D6D6    	  3857:             cmp.l #$D6D6D6D6,a5
01:000024D2 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3859: 
01:000024D4 4E75            	  3860:             rts
                            	  3861: 
                            	  3862: 
                            	  3863: *-----------------------------------------------------------
                            	  3864: *-----------------------------------------------------------
                            	  3865: * OPCODE : ABCD
                            	  3866: *-----------------------------------------------------------
                            	  3867: *-----------------------------------------------------------
                            	  3868: op_ABCD:
                            	  3869: 
                            	  3870: *     Test with X Flag CLEARED
01:000024D6 307C0110        	  3871:                 move.l #$00000110,a0 * Address pointer-X
01:000024DA 327C0120        	  3872:                 move.l #$00000120,a1 * Address pointer-Y
01:000024DE 7000            	  3873:                 moveq  #$00000000,d0 * BCD byte-X
01:000024E0 7200            	  3874:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024E2 7400            	  3875:                 moveq  #$00000000,d2
01:000024E4 7600            	  3876:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000024E6 7800            	  3877:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000024E8 7A00            	  3878:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000024EA 2C3C00000099    	  3879:                 move.l #$00000099,d6 * Inner loop counter
01:000024F0 2E3C00000099    	  3880:                 move.l #$00000099,d7 * Outer loop counter
                            	  3881: 
01:000024F6 2007            	  3882: ABCD_OUTER1:    move.l d7,d0
01:000024F8 2206            	  3883: ABCD_INNER1:    move.l d6,d1
01:000024FA 023C00EF        	  3884:                 andi.b #$EF,CCR     * Clear X Flag
01:000024FE 307C0110        	  3885:                 move.l #$00000110,a0 * Address pointer-X
01:00002502 327C0120        	  3886:                 move.l #$00000120,a1 * Address pointer-Y
01:00002506 1140FFFF        	  3887:                 move.b d0,-1(a0)
01:0000250A 1341FFFF        	  3888:                 move.b d1,-1(a1)
                            	  3889: 
01:0000250E C300            	  3890:                 abcd d0,d1
01:00002510 6402            	  3891:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002512 5284            	  3892:                 add.l #1,d4
01:00002514 DA81            	  3893: ABCD_NO_C1:     add.l d1,d5
                            	  3894: 
01:00002516 C308            	  3895:                 abcd -(a0),-(a1)
01:00002518 6402            	  3896:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:0000251A 5284            	  3897:                 add.l #1,d4
01:0000251C D611            	  3898: ABCD_NO_C2:     add.b (a1),d3
                            	  3899: 
                            	  3900: 
01:0000251E 51CEFFD8        	  3901:                 dbf d6,ABCD_INNER1
01:00002522 2C3C00000099    	  3902:                 move.l #$00000099,d6
01:00002528 51CFFFCC        	  3903:                 dbf d7,ABCD_OUTER1
01:0000252C 0C8400005AFC    	  3904:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:00002532 66FE            	  3905:                 bne.s *
01:00002534 0C85001C9A34    	  3906:                 cmpi.l #$001C9A34,d5
01:0000253A 66FE            	  3907:                 bne.s *
01:0000253C 0C8300000034    	  3908:                 cmpi.l #$00000034,d3
01:00002542 66FE            	  3909:                 bne.s *
                            	  3910: 
                            	  3911: *     Test with X Flag SET
01:00002544 307C0110        	  3912:                 move.l #$00000110,a0 * Address pointer-X
01:00002548 327C0120        	  3913:                 move.l #$00000120,a1 * Address pointer-Y
01:0000254C 7000            	  3914:                 moveq  #$00000000,d0 * BCD byte-X
01:0000254E 7200            	  3915:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002550 7400            	  3916:                 moveq  #$00000000,d2
01:00002552 7600            	  3917:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002554 7800            	  3918:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002556 7A00            	  3919:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002558 2C3C00000099    	  3920:                 move.l #$00000099,d6 * Inner loop counter
01:0000255E 2E3C00000099    	  3921:                 move.l #$00000099,d7 * Outer loop counter
                            	  3922: 
01:00002564 2007            	  3923: ABCD_OUTER2:    move.l d7,d0
01:00002566 2206            	  3924: ABCD_INNER2:    move.l d6,d1
01:00002568 003C0010        	  3925:                 ori.b #$10,CCR      * Set X Flag
01:0000256C 307C0110        	  3926:                 move.l #$00000110,a0 * Address pointer-X
01:00002570 327C0120        	  3927:                 move.l #$00000120,a1 * Address pointer-Y
01:00002574 1140FFFF        	  3928:                 move.b d0,-1(a0)
01:00002578 1341FFFF        	  3929:                 move.b d1,-1(a1)
                            	  3930: 
01:0000257C C300            	  3931:                 abcd d0,d1
01:0000257E 6402            	  3932:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002580 5284            	  3933:                 add.l #1,d4
01:00002582 DA81            	  3934: ABCD_NO_C3:     add.l d1,d5
                            	  3935: 
01:00002584 C308            	  3936:                 abcd -(a0),-(a1)
01:00002586 6402            	  3937:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002588 5284            	  3938:                 add.l #1,d4
01:0000258A D611            	  3939: ABCD_NO_C4:     add.b (a1),d3
                            	  3940: 
                            	  3941: 
01:0000258C 51CEFFD8        	  3942:                 dbf d6,ABCD_INNER2
01:00002590 2C3C00000099    	  3943:                 move.l #$00000099,d6
01:00002596 51CFFFCC        	  3944:                 dbf d7,ABCD_OUTER2
01:0000259A 0C8400005B60    	  3945:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:000025A0 66FE            	  3946:                 bne.s *
01:000025A2 0C85001CCFC8    	  3947:                 cmpi.l #$001CCFC8,d5
01:000025A8 66FE            	  3948:                 bne.s *
01:000025AA 0C8300000034    	  3949:                 cmpi.l #$00000034,d3
01:000025B0 66FE            	  3950:                 bne.s *
                            	  3951: 
                            	  3952: *             Quick check of Z Flag
01:000025B2 4200            	  3953:                 move.b #$00,d0
01:000025B4 4201            	  3954:                 move.b #$00,d1
01:000025B6 44FC0000        	  3955:                 move #$00,CCR              * Set Z flag to 0
01:000025BA C101            	  3956:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025BC 67FE            	  3957:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3958: 
01:000025BE 103C0001        	  3959:                 move.b #$01,d0
01:000025C2 4201            	  3960:                 move.b #$00,d1
01:000025C4 44FC0004        	  3961:                 move #$04,CCR              * Set Z flag to 0
01:000025C8 C101            	  3962:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025CA 67FE            	  3963:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3964: 
01:000025CC 4E75            	  3965:                 rts
                            	  3966: 
                            	  3967: *-----------------------------------------------------------
                            	  3968: *-----------------------------------------------------------
                            	  3969: * OPCODE : SBCD
                            	  3970: *-----------------------------------------------------------
                            	  3971: *-----------------------------------------------------------
                            	  3972: op_SBCD:
                            	  3973: 
                            	  3974: *     Test with X Flag CLEARED
01:000025CE 307C0110        	  3975:                 move.l #$00000110,a0 * Address pointer-X
01:000025D2 327C0120        	  3976:                 move.l #$00000120,a1 * Address pointer-Y
01:000025D6 7000            	  3977:                 moveq  #$00000000,d0 * BCD byte-X
01:000025D8 7200            	  3978:                 moveq  #$00000000,d1 * BCD byte-Y
01:000025DA 7400            	  3979:                 moveq  #$00000000,d2
01:000025DC 7600            	  3980:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000025DE 7800            	  3981:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025E0 7A00            	  3982:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000025E2 2C3C00000099    	  3983:                 move.l #$00000099,d6 * Inner loop counter
01:000025E8 2E3C00000099    	  3984:                 move.l #$00000099,d7 * Outer loop counter
                            	  3985: 
01:000025EE 2007            	  3986: SBCD_OUTER1:    move.l d7,d0
01:000025F0 2206            	  3987: SBCD_INNER1:    move.l d6,d1
01:000025F2 023C00EF        	  3988:                 andi.b #$EF,CCR     * Clear X Flag
01:000025F6 307C0110        	  3989:                 move.l #$00000110,a0 * Address pointer-X
01:000025FA 327C0120        	  3990:                 move.l #$00000120,a1 * Address pointer-Y
01:000025FE 1140FFFF        	  3991:                 move.b d0,-1(a0)
01:00002602 1341FFFF        	  3992:                 move.b d1,-1(a1)
                            	  3993: 
01:00002606 8300            	  3994:                 sbcd d0,d1
01:00002608 6402            	  3995:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:0000260A 5284            	  3996:                 add.l #1,d4
01:0000260C DA81            	  3997: SBCD_NO_C1:     add.l d1,d5
                            	  3998: 
01:0000260E 8308            	  3999:                 sbcd -(a0),-(a1)
01:00002610 6402            	  4000:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002612 5284            	  4001:                 add.l #1,d4
01:00002614 D611            	  4002: SBCD_NO_C2:     add.b (a1),d3
                            	  4003: 
                            	  4004: 
01:00002616 51CEFFD8        	  4005:                 dbf d6,SBCD_INNER1
01:0000261A 2C3C00000099    	  4006:                 move.l #$00000099,d6
01:00002620 51CFFFCC        	  4007:                 dbf d7,SBCD_OUTER1
01:00002624 0C8400005C0A    	  4008:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:0000262A 66FE            	  4009:                 bne.s *
01:0000262C 0C85001C459E    	  4010:                 cmpi.l #$001C459E,d5
01:00002632 66FE            	  4011:                 bne.s *
01:00002634 0C830000009E    	  4012:                 cmpi.l #$0000009E,d3
01:0000263A 66FE            	  4013:                 bne.s *
                            	  4014: 
                            	  4015: *     Test with X Flag SET
01:0000263C 307C0110        	  4016:                 move.l #$00000110,a0 * Address pointer-X
01:00002640 327C0120        	  4017:                 move.l #$00000120,a1 * Address pointer-Y
01:00002644 7000            	  4018:                 moveq  #$00000000,d0 * BCD byte-X
01:00002646 7200            	  4019:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002648 7400            	  4020:                 moveq  #$00000000,d2
01:0000264A 7600            	  4021:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:0000264C 7800            	  4022:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000264E 7A00            	  4023:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002650 2C3C00000099    	  4024:                 move.l #$00000099,d6 * Inner loop counter
01:00002656 2E3C00000099    	  4025:                 move.l #$00000099,d7 * Outer loop counter
                            	  4026: 
01:0000265C 2007            	  4027: SBCD_OUTER2:    move.l d7,d0
01:0000265E 2206            	  4028: SBCD_INNER2:    move.l d6,d1
01:00002660 003C0010        	  4029:                 ori.b #$10,CCR      * Set X Flag
01:00002664 307C0110        	  4030:                 move.l #$00000110,a0 * Address pointer-X
01:00002668 327C0120        	  4031:                 move.l #$00000120,a1 * Address pointer-Y
01:0000266C 1140FFFF        	  4032:                 move.b d0,-1(a0)
01:00002670 1341FFFF        	  4033:                 move.b d1,-1(a1)
                            	  4034: 
01:00002674 8300            	  4035:                 sbcd d0,d1
01:00002676 6402            	  4036:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002678 5284            	  4037:                 add.l #1,d4
01:0000267A DA81            	  4038: SBCD_NO_C3:     add.l d1,d5
                            	  4039: 
01:0000267C 8308            	  4040:                 sbcd -(a0),-(a1)
01:0000267E 6402            	  4041:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002680 5284            	  4042:                 add.l #1,d4
01:00002682 D611            	  4043: SBCD_NO_C4:     add.b (a1),d3
                            	  4044: 
01:00002684 51CEFFD8        	  4045:                 dbf d6,SBCD_INNER2
01:00002688 2C3C00000099    	  4046:                 move.l #$00000099,d6
01:0000268E 51CFFFCC        	  4047:                 dbf d7,SBCD_OUTER2
01:00002692 0C8400005CA4    	  4048:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:00002698 66FE            	  4049:                 bne.s *
01:0000269A 0C85001C5C66    	  4050:                 cmpi.l #$001C5C66,d5
01:000026A0 66FE            	  4051:                 bne.s *
01:000026A2 0C830000009E    	  4052:                 cmpi.l #$0000009E,d3
01:000026A8 66FE            	  4053:                 bne.s *
                            	  4054: 
                            	  4055: 
                            	  4056: *             Quick check of Z Flag
01:000026AA 4200            	  4057:                 move.b #$00,d0
01:000026AC 4201            	  4058:                 move.b #$00,d1
01:000026AE 44FC0000        	  4059:                 move #$00,CCR              * Set Z flag to 0
01:000026B2 8101            	  4060:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026B4 67FE            	  4061:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4062: 
01:000026B6 103C0001        	  4063:                 move.b #$01,d0
01:000026BA 4201            	  4064:                 move.b #$00,d1
01:000026BC 44FC0004        	  4065:                 move #$04,CCR              * Set Z flag to 0
01:000026C0 8101            	  4066:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026C2 67FE            	  4067:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4068: 
01:000026C4 4E75            	  4069:                 rts
                            	  4070: 
                            	  4071: *-----------------------------------------------------------
                            	  4072: *-----------------------------------------------------------
                            	  4073: * OPCODE : NBCD
                            	  4074: *-----------------------------------------------------------
                            	  4075: *-----------------------------------------------------------
                            	  4076: op_NBCD:
                            	  4077: 
                            	  4078: *        NBCD to a  Register
                            	  4079: 
01:000026C6 7000            	  4080:                 moveq  #$00000000,d0 * BCD byte
01:000026C8 7200            	  4081:                 moveq  #$00000000,d1
01:000026CA 7400            	  4082:                 moveq  #$00000000,d2
01:000026CC 7600            	  4083:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000026CE 7800            	  4084:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026D0 7A00            	  4085:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026D2 2C3C00000099    	  4086:                 move.l #$00000099,d6
01:000026D8 2E3C00000099    	  4087:                 move.l #$00000099,d7 * Loop counter
                            	  4088: 
01:000026DE 2007            	  4089: NBCD_LOOP:      move.l d7,d0
01:000026E0 44FC0004        	  4090:                 move #$04,CCR        * Set Z flag to 0
                            	  4091: 
01:000026E4 4800            	  4092:                 nbcd d0
                            	  4093: 
01:000026E6 6402            	  4094:                 bcc.s NBCD_NO_C         * Check C Flag
01:000026E8 5284            	  4095:                 add.l #1,d4
01:000026EA 6602            	  4096: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:000026EC 5283            	  4097:                 add.l #1,d3
01:000026EE DA80            	  4098: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4099: 
01:000026F0 51CFFFEC        	  4100:                 dbf d7,NBCD_LOOP
                            	  4101: 
01:000026F4 0C8300000001    	  4102:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:000026FA 66FE            	  4103:                 bne.s *
01:000026FC 0C8400000099    	  4104:                 cmpi.l #$00000099,d4
01:00002702 66FE            	  4105:                 bne.s *
01:00002704 0C8500002E3B    	  4106:                 cmpi.l #$00002E3B,d5
01:0000270A 66FE            	  4107:                 bne.s *
                            	  4108: 
                            	  4109: 
                            	  4110: *        NBCD to a memory location
                            	  4111: 
01:0000270C 7000            	  4112:                 moveq  #$00000000,d0 * BCD byte
01:0000270E 7200            	  4113:                 moveq  #$00000000,d1
01:00002710 7400            	  4114:                 moveq  #$00000000,d2
01:00002712 7600            	  4115:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:00002714 7800            	  4116:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002716 7A00            	  4117:                 moveq  #$00000000,d5 * Cumulative BCD results
01:00002718 2C3C00000099    	  4118:                 move.l #$00000099,d6
01:0000271E 2E3C00000099    	  4119:                 move.l #$00000099,d7 * Loop counter
                            	  4120: 
01:00002724 11C70100        	  4121: NBCD_LOOP1:     move.b d7,$00000100
01:00002728 44FC0004        	  4122:                 move #$04,CCR        * Set Z flag to 0
                            	  4123: 
01:0000272C 48380100        	  4124:                 nbcd $00000100
01:00002730 10380100        	  4125:                 move.b $00000100,d0
                            	  4126: 
01:00002734 6402            	  4127:                 bcc.s NBCD_NO_C1        * Check C Flag
01:00002736 5284            	  4128:                 add.l #1,d4
01:00002738 6602            	  4129: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:0000273A 5283            	  4130:                 add.l #1,d3
01:0000273C DA80            	  4131: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4132: 
01:0000273E 51CFFFE4        	  4133:                 dbf d7,NBCD_LOOP1
                            	  4134: 
01:00002742 0C8300000001    	  4135:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002748 66FE            	  4136:                 bne.s *
01:0000274A 4A84            	  4137:                 cmpi.l #$00000000,d4
01:0000274C 66FE            	  4138:                 bne.s *
01:0000274E 0C8500002E3B    	  4139:                 cmpi.l #$00002E3B,d5
01:00002754 66FE            	  4140:                 bne.s *
                            	  4141: 
                            	  4142: 
01:00002756 4E75            	  4143:                 rts
                            	  4144: 
                            	  4145: 
                            	  4146: 
                            	  4147: *-----------------------------------------------------------
                            	  4148: *-----------------------------------------------------------
                            	  4149: * OPCODE : TRAPV
                            	  4150: *-----------------------------------------------------------
                            	  4151: *-----------------------------------------------------------
                            	  4152: op_TRAPV:
                            	  4153: 
                            	  4154: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4155: 
01:00002758 7000            	  4156:                 moveq  #$00000000,d0 * Clear d0
                            	  4157: 
01:0000275A 44FC0000        	  4158:                 move #$00,CCR        * Clear V flag
01:0000275E 4E76            	  4159:                 trapv
01:00002760 4A80            	  4160:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:00002762 66FE            	  4161:                 bne.s *
                            	  4162: 
01:00002764 44FC0002        	  4163:                 move #$02,CCR        * Set V flag
01:00002768 4E76            	  4164:                 trapv
01:0000276A 0C8012345678    	  4165:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:00002770 66FE            	  4166:                 bne.s *
                            	  4167: 
                            	  4168: 
01:00002772 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: 
                            	  4173: *-----------------------------------------------------------
                            	  4174: *-----------------------------------------------------------
                            	  4175: * OPCODE : RTR
                            	  4176: *-----------------------------------------------------------
                            	  4177: *-----------------------------------------------------------
                            	  4178: 
                            	  4179: op_RTR:
                            	  4180: 
                            	  4181: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4182: 
01:00002774 41FA000A        	  4183:                 lea 		RTR_DONE,a0
01:00002778 2F08            	  4184:                 move.l 	a0,-(a7)     * push destination PC to the stack
01:0000277A 3F3CFF15        	  4185:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
01:0000277E 4E77            	  4186:                 rtr
                            	  4187: 
01:00002780 40C0            	  4188: RTR_DONE:       move.w SR,d0
01:00002782 0240001F        	  4189:                 andi.w #$1F,d0
01:00002786 0C400015        	  4190:                 cmpi.w #$15,d0
01:0000278A 66FE            	  4191:                 bne.s *
                            	  4192: 
01:0000278C 4E75            	  4193:                 rts
                            	  4194: 
                            	  4195: 
01:0000278E 283C44444444    	  4196: BSR_FAR2:       move.l #$44444444,d4
01:00002794 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
                            	  4200: *-----------------------------------------------------------
                            	  4201: *-----------------------------------------------------------
                            	  4202: * OPCODE : BCC
                            	  4203: *-----------------------------------------------------------
                            	  4204: *-----------------------------------------------------------
                            	  4205: 
01:00002796 44FC0000        	  4206: op_BCC:         move #$00,CCR
01:0000279A 6202            	  4207:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:0000279C 60FE            	  4208:                 bra.s *
                            	  4209: 
01:0000279E 44FC0001        	  4210: BCC1:           move #$01,CCR
01:000027A2 63000004        	  4211:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:000027A6 60FE            	  4212:                 bra.s *
                            	  4213: 
01:000027A8 44FC0000        	  4214: BCC2:           move #$00,CCR
01:000027AC 6402            	  4215:                 bcc.s BCC3            * Carry Clear         C=0
01:000027AE 60FE            	  4216:                 bra.s *
                            	  4217: 
01:000027B0 44FC0001        	  4218: BCC3:           move #$01,CCR
01:000027B4 65000004        	  4219:                 bcs.w BCC4            * Carry Set           C=1
01:000027B8 60FE            	  4220:                 bra.s *
                            	  4221: 
01:000027BA 44FC0000        	  4222: BCC4:           move #$00,CCR
01:000027BE 6602            	  4223:                 bne.s BCC5            * Not Equal           Z=0
01:000027C0 60FE            	  4224:                 bra.s *
                            	  4225: 
01:000027C2 44FC0004        	  4226: BCC5:           move #$04,CCR
01:000027C6 67000004        	  4227:                 beq.w BCC6            * Equal               Z=1
01:000027CA 60FE            	  4228:                 bra.s *
                            	  4229: 
01:000027CC 44FC0000        	  4230: BCC6:           move #$00,CCR
01:000027D0 6802            	  4231:                 bvc.s BCC7            * V Clear             V=0
01:000027D2 60FE            	  4232:                 bra.s *
                            	  4233: 
01:000027D4 44FC0002        	  4234: BCC7:           move #$02,CCR
01:000027D8 69000004        	  4235:                 bvs.w BCC8            * V Set               V=1
01:000027DC 60FE            	  4236:                 bra.s *
                            	  4237: 
01:000027DE 44FC0000        	  4238: BCC8:           move #$00,CCR
01:000027E2 6A02            	  4239:                 bpl.s BCC9            * Plus                N=0
01:000027E4 60FE            	  4240:                 bra.s *
                            	  4241: 
01:000027E6 44FC0008        	  4242: BCC9:           move #$08,CCR
01:000027EA 6B000004        	  4243:                 bmi.w BCC10           * Minus               N=1
01:000027EE 60FE            	  4244:                 bra.s *
                            	  4245: 
01:000027F0 44FC0000        	  4246: BCC10:          move #$00,CCR
01:000027F4 6C02            	  4247:                 bge.s BCC11           * Greater or Equal    N=V
01:000027F6 60FE            	  4248:                 bra.s *
                            	  4249: 
01:000027F8 44FC0002        	  4250: BCC11:          move #$02,CCR
01:000027FC 6D000004        	  4251:                 blt.w BCC12           * Less Than           N!=V
01:00002800 60FE            	  4252:                 bra.s *
                            	  4253: 
01:00002802 44FC000A        	  4254: BCC12:          move #$0A,CCR
01:00002806 6E02            	  4255:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:00002808 60FE            	  4256:                 bra.s *
                            	  4257: 
01:0000280A 44FC0006        	  4258: BCC13:          move #$06,CCR
01:0000280E 6F000004        	  4259:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:00002812 60FE            	  4260:                 bra.s *
                            	  4261: 
                            	  4262: 
01:00002814 4E75            	  4263: BCC14:          rts
                            	  4264: 
                            	  4265: 
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: * OPCODE : DBCC
                            	  4269: *-----------------------------------------------------------
                            	  4270: *-----------------------------------------------------------
                            	  4271: 
01:00002816 7003            	  4272: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:00002818 7200            	  4273:                 moveq  #$00000000,d1    * Accumulator
01:0000281A 44FC0000        	  4274:                 move #$00,CCR
                            	  4275: 
01:0000281E 5201            	  4276: DBCC_LOOP1:     addi.b #$1,d1
01:00002820 51C8FFFC        	  4277:                 dbf d0,DBCC_LOOP1
                            	  4278: 
01:00002824 0C8100000004    	  4279:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:0000282A 66FE            	  4280:                 bne.s *
                            	  4281: 
01:0000282C 5201            	  4282: DBCC_LOOP2:     addi.b #$1,d1
01:0000282E 54C8FFFC        	  4283:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4284: 
01:00002832 0C8100000005    	  4285:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:00002838 66FE            	  4286:                 bne.s *
                            	  4287: 
01:0000283A 4E75            	  4288:                 rts
                            	  4289: 
                            	  4290: 
                            	  4291: *-----------------------------------------------------------
                            	  4292: *-----------------------------------------------------------
                            	  4293: * OPCODE : SCC
                            	  4294: *-----------------------------------------------------------
                            	  4295: *-----------------------------------------------------------
                            	  4296: 
01:0000283C 44FC0001        	  4297: op_SCC:         move #$01,CCR
01:00002840 54F900010000    	  4298:                 scc $00010000                   * Clear the EA byte
01:00002846 4A3900010000    	  4299:                 cmpi.b #$00,$00010000
01:0000284C 66FE            	  4300:                 bne.s *
                            	  4301: 
01:0000284E 44FC0000        	  4302:                 move #$00,CCR
01:00002852 54F900010000    	  4303:                 scc $00010000                   * Set the EA byte to 0xFF
01:00002858 0C3900FF00010000	  4304:                 cmpi.b #$FF,$00010000
01:00002860 66FE            	  4305:                 bne.s *
                            	  4306: 
01:00002862 4E75            	  4307:                 rts
                            	  4308: 
                            	  4309: 
                            	  4310: 
                            	  4311: *-----------------------------------------------------------
                            	  4312: *-----------------------------------------------------------
                            	  4313: * OPCODE : ADDQ
                            	  4314: *-----------------------------------------------------------
                            	  4315: *-----------------------------------------------------------
                            	  4316: 
                            	  4317: op_ADDQ:
                            	  4318: 
                            	  4319: *     BYTE
01:00002864 203C000000FF    	  4320:                 move.l #$000000FF,d0    * Loop counter
01:0000286A 7200            	  4321:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000286C 7400            	  4322:                 moveq  #$00000000,d2    * Data results accumulator
01:0000286E 7600            	  4323:                 moveq  #$00000000,d3
01:00002870 7800            	  4324:                 moveq  #$00000000,d4
01:00002872 7A00            	  4325:                 moveq  #$00000000,d5
01:00002874 7C00            	  4326:                 moveq  #$00000000,d6
01:00002876 7E00            	  4327:                 moveq  #$00000000,d7
                            	  4328: 
01:00002878 5605            	  4329: ADDQ_LOOP1:     addq.b #3,d5
01:0000287A 40C6            	  4330:                 move.w SR,d6
01:0000287C 02860000001F    	  4331:                 andi.l #$1F,d6        * Isolate flags
01:00002882 D286            	  4332:                 add.l d6,d1           * Copy flag results into accumulator
01:00002884 D485            	  4333:                 add.l d5,d2           * Copy data results into data accumulator
01:00002886 51C8FFF0        	  4334:                 dbf d0,ADDQ_LOOP1
                            	  4335: 
01:0000288A 0C810000043D    	  4336:                 cmpi.l #$0000043D,d1
01:00002890 66FE            	  4337:                 bne.s *
01:00002892 0C8200007F80    	  4338:                 cmpi.l #$00007F80,d2
01:00002898 66FE            	  4339:                 bne.s *
                            	  4340: 
                            	  4341: 
                            	  4342: *     WORD
01:0000289A 203C000000FF    	  4343:                 move.l #$000000FF,d0    * Loop counter
01:000028A0 7200            	  4344:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028A2 7400            	  4345:                 moveq  #$00000000,d2    * Data results accumulator
01:000028A4 7600            	  4346:                 moveq  #$00000000,d3
01:000028A6 7800            	  4347:                 moveq  #$00000000,d4
01:000028A8 2A3C0000FFF0    	  4348:                 move.l #$0000FFF0,d5
01:000028AE 7C00            	  4349:                 moveq  #$00000000,d6
01:000028B0 7E00            	  4350:                 moveq  #$00000000,d7
01:000028B2 307C0100        	  4351:                 move.l #$00000100,a0
                            	  4352: 
01:000028B6 5A45            	  4353: ADDQ_LOOP2:     addq.w #5,d5
01:000028B8 40C6            	  4354:                 move.w SR,d6
01:000028BA 02860000001F    	  4355:                 andi.l #$1F,d6        * Isolate flags
01:000028C0 D286            	  4356:                 add.l d6,d1           * Copy flag results into accumulator
01:000028C2 D485            	  4357:                 add.l d5,d2           * Copy data results into data accumulator
01:000028C4 51C8FFF0        	  4358:                 dbf d0,ADDQ_LOOP2
                            	  4359: 
01:000028C8 0C8100000029    	  4360:                 cmpi.l #$00000029,d1
01:000028CE 66FE            	  4361:                 bne.s *
01:000028D0 0C8200057280    	  4362:                 cmpi.l #$00057280,d2
01:000028D6 66FE            	  4363:                 bne.s *
                            	  4364: 
                            	  4365: 
                            	  4366: *     LONG
01:000028D8 203C000000FF    	  4367:                 move.l #$000000FF,d0    * Loop counter
01:000028DE 7200            	  4368:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028E0 7400            	  4369:                 moveq  #$00000000,d2    * Data results accumulator
01:000028E2 7600            	  4370:                 moveq  #$00000000,d3
01:000028E4 7800            	  4371:                 moveq  #$00000000,d4
01:000028E6 7AF0            	  4372:                 move.l #$FFFFFFF0,d5
01:000028E8 7C00            	  4373:                 moveq  #$00000000,d6
01:000028EA 7E00            	  4374:                 moveq  #$00000000,d7
                            	  4375: 
01:000028EC 5285            	  4376: ADDQ_LOOP3:     addq.l #1,d5
01:000028EE 40C6            	  4377:                 move.w SR,d6
01:000028F0 02860000001F    	  4378:                 andi.l #$1F,d6        * Isolate flags
01:000028F6 D286            	  4379:                 add.l d6,d1           * Copy flag results into accumulator
01:000028F8 D485            	  4380:                 add.l d5,d2           * Copy data results into data accumulator
01:000028FA 51C8FFF0        	  4381:                 dbf d0,ADDQ_LOOP3
                            	  4382: 
01:000028FE 0C810000008D    	  4383:                 cmpi.l #$0000008D,d1
01:00002904 66FE            	  4384:                 bne.s *
01:00002906 0C8200007080    	  4385:                 cmpi.l #$00007080,d2
01:0000290C 66FE            	  4386:                 bne.s *
                            	  4387: 
                            	  4388: *     Check that Flags are not updated for Address registers
01:0000290E 207C0000FFFF    	  4389:                 move.l #$0000FFFF,a0
01:00002914 44FC0000        	  4390:                 move #$00,CCR         * Clear flags
01:00002918 5E48            	  4391:                 addq.w #$7,a0
01:0000291A 65FE            	  4392:                 bcs.s *
                            	  4393: 
01:0000291C 4E75            	  4394:                 rts
                            	  4395: 
                            	  4396: 
                            	  4397: 
                            	  4398: *-----------------------------------------------------------
                            	  4399: *-----------------------------------------------------------
                            	  4400: * OPCODE : SUBQ
                            	  4401: *-----------------------------------------------------------
                            	  4402: *-----------------------------------------------------------
                            	  4403: 
                            	  4404: op_SUBQ:
                            	  4405: 
                            	  4406: *     BYTE
01:0000291E 203C000000FF    	  4407:                 move.l #$000000FF,d0    * Loop counter
01:00002924 7200            	  4408:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002926 243C00001234    	  4409:                 move.l #$00001234,d2    * Data results accumulator
01:0000292C 7600            	  4410:                 moveq  #$00000000,d3
01:0000292E 7800            	  4411:                 moveq  #$00000000,d4
01:00002930 7A12            	  4412:                 moveq  #$00000012,d5
01:00002932 7C00            	  4413:                 moveq  #$00000000,d6
01:00002934 7E00            	  4414:                 moveq  #$00000000,d7
                            	  4415: 
01:00002936 5305            	  4416: SUBQ_LOOP1:     subq.b #1,d5
01:00002938 40C6            	  4417:                 move.w SR,d6
01:0000293A 02860000001F    	  4418:                 andi.l #$1F,d6        * Isolate flags
01:00002940 D286            	  4419:                 add.l d6,d1           * Copy flag results into accumulator
01:00002942 D485            	  4420:                 add.l d5,d2           * Copy data results into data accumulator
01:00002944 51C8FFF0        	  4421:                 dbf d0,SUBQ_LOOP1
                            	  4422: 
01:00002948 0C8100000417    	  4423:                 cmpi.l #$00000417,d1
01:0000294E 66FE            	  4424:                 bne.s *
01:00002950 0C82000091B4    	  4425:                 cmpi.l #$000091B4,d2
01:00002956 66FE            	  4426:                 bne.s *
                            	  4427: 
                            	  4428: 
                            	  4429: *     WORD
01:00002958 203C000000FF    	  4430:                 move.l #$000000FF,d0    * Loop counter
01:0000295E 7200            	  4431:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002960 7400            	  4432:                 moveq  #$00000000,d2    * Data results accumulator
01:00002962 7600            	  4433:                 moveq  #$00000000,d3
01:00002964 7800            	  4434:                 moveq  #$00000000,d4
01:00002966 7A02            	  4435:                 moveq  #$00000002,d5
01:00002968 7C00            	  4436:                 moveq  #$00000000,d6
01:0000296A 7E00            	  4437:                 moveq  #$00000000,d7
01:0000296C 307C0100        	  4438:                 move.l #$00000100,a0
                            	  4439: 
01:00002970 5B45            	  4440: SUBQ_LOOP2:     subq.w #5,d5
01:00002972 40C6            	  4441:                 move.w SR,d6
01:00002974 02860000001F    	  4442:                 andi.l #$1F,d6        * Isolate flags
01:0000297A D286            	  4443:                 add.l d6,d1           * Copy flag results into accumulator
01:0000297C D485            	  4444:                 add.l d5,d2           * Copy data results into data accumulator
01:0000297E 51C8FFF0        	  4445:                 dbf d0,SUBQ_LOOP2
                            	  4446: 
01:00002982 0C8100000811    	  4447:                 cmpi.l #$00000811,d1
01:00002988 66FE            	  4448:                 bne.s *
01:0000298A 0C8200FD7F80    	  4449:                 cmpi.l #$00FD7F80,d2
01:00002990 66FE            	  4450:                 bne.s *
                            	  4451: 
                            	  4452: 
                            	  4453: *     LONG
01:00002992 203C000000FF    	  4454:                 move.l #$000000FF,d0    * Loop counter
01:00002998 7200            	  4455:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000299A 7400            	  4456:                 moveq  #$00000000,d2    * Data results accumulator
01:0000299C 7600            	  4457:                 moveq  #$00000000,d3
01:0000299E 7800            	  4458:                 moveq  #$00000000,d4
01:000029A0 7A07            	  4459:                 moveq  #$00000007,d5
01:000029A2 7C00            	  4460:                 moveq  #$00000000,d6
01:000029A4 7E00            	  4461:                 moveq  #$00000000,d7
                            	  4462: 
01:000029A6 5385            	  4463: SUBQ_LOOP3:     subq.l #1,d5
01:000029A8 40C6            	  4464:                 move.w SR,d6
01:000029AA 02860000001F    	  4465:                 andi.l #$1F,d6        * Isolate flags
01:000029B0 D286            	  4466:                 add.l d6,d1           * Copy flag results into accumulator
01:000029B2 D485            	  4467:                 add.l d5,d2           * Copy data results into data accumulator
01:000029B4 51C8FFF0        	  4468:                 dbf d0,SUBQ_LOOP3
                            	  4469: 
01:000029B8 0C81000007DD    	  4470:                 cmpi.l #$000007DD,d1
01:000029BE 66FE            	  4471:                 bne.s *
01:000029C0 0C82FFFF8680    	  4472:                 cmpi.l #$FFFF8680,d2
01:000029C6 66FE            	  4473:                 bne.s *
                            	  4474: 
                            	  4475: *     Check that Flags are not updated for Address registers
01:000029C8 207C0001FFFF    	  4476:                 move.l #$0001FFFF,a0
01:000029CE 44FC0000        	  4477:                 move #$00,CCR         * Clear flags
01:000029D2 5F48            	  4478:                 subq.w #$7,a0
01:000029D4 65FE            	  4479:                 bcs.s *
                            	  4480: 
01:000029D6 4E75            	  4481:                 rts
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: *-----------------------------------------------------------
                            	  4487: *-----------------------------------------------------------
                            	  4488: * OPCODE : MOVEQ
                            	  4489: *-----------------------------------------------------------
                            	  4490: *-----------------------------------------------------------
                            	  4491: 
                            	  4492: op_MOVEQ:
01:000029D8 7000            	  4493:                 moveq  #$00000000,d0
01:000029DA 7000            	  4494:                 moveq #$0,d0
01:000029DC 66FE            	  4495:                 bne.s *
01:000029DE 4A80            	  4496:                 cmpi.l #$00000000,d0
01:000029E0 66FE            	  4497:                 bne.s *
                            	  4498: 
01:000029E2 7000            	  4499:                 moveq  #$00000000,d0
01:000029E4 7080            	  4500:                 moveq #-128,d0
01:000029E6 67FE            	  4501:                 beq.s *
01:000029E8 6AFE            	  4502:                 bpl.s *
01:000029EA 0C80FFFFFF80    	  4503:                 cmpi.l #$FFFFFF80,d0
01:000029F0 66FE            	  4504:                 bne.s *
                            	  4505: 
                            	  4506: 
01:000029F2 4E75            	  4507:                 rts
                            	  4508: 
                            	  4509: 
                            	  4510: *-----------------------------------------------------------
                            	  4511: *-----------------------------------------------------------
                            	  4512: * OPCODE : DIVU
                            	  4513: *-----------------------------------------------------------
                            	  4514: *-----------------------------------------------------------
                            	  4515: 
                            	  4516: op_DIVU:
                            	  4517: 
01:000029F4 203CA5A5A5A5    	  4518:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:000029FA 223C00005A5A    	  4519:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A00 243CA5A5A5A5    	  4520:                 move.l #$a5a5a5a5,d2
01:00002A06 7600            	  4521:                 moveq  #$00000000,d3
01:00002A08 7800            	  4522:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A0A 7A00            	  4523:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A0C 7C0E            	  4524:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A0E 7E1E            	  4525:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4526: 
                            	  4527: 
01:00002A10 80C1            	  4528: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:00002A12 40C3            	  4529:                 move.w SR,d3
01:00002A14 02830000000C    	  4530:                 andi.l #$0C,d3            * Isolate flags
01:00002A1A DA83            	  4531:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A1C D880            	  4532:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A1E E289            	  4533:                 lsr.l #$1,d1
                            	  4534: 
01:00002A20 51CEFFEE        	  4535:                 dbf d6,DIVU_OUTER1
01:00002A24 E28A            	  4536:                 lsr.l #$1,d2
01:00002A26 2002            	  4537:                 move.l d2,d0
01:00002A28 223C00005A5A    	  4538:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A2E 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A30 51CFFFDE        	  4540:                 dbf d7,DIVU_OUTER1
                            	  4541: 
01:00002A34 0C8492FEDB89    	  4542:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002A3A 66FE            	  4543:                 bne.s *
                            	  4544: 
01:00002A3C 0C8500000110    	  4545:                 cmpi.l #$00000110,d5      * Check the Flag results
01:00002A42 66FE            	  4546:                 bne.s *
                            	  4547: 
                            	  4548: 
01:00002A44 4E75            	  4549:                 rts
                            	  4550: 
                            	  4551: 
                            	  4552: 
                            	  4553: *-----------------------------------------------------------
                            	  4554: *-----------------------------------------------------------
                            	  4555: * OPCODE : DIVS
                            	  4556: *-----------------------------------------------------------
                            	  4557: *-----------------------------------------------------------
                            	  4558: 
                            	  4559: op_DIVS:
                            	  4560: 
01:00002A46 203CA5A5A5A5    	  4561:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A4C 223C00005A5A    	  4562:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A52 243CA5A5A5A5    	  4563:                 move.l #$a5a5a5a5,d2
01:00002A58 7600            	  4564:                 moveq  #$00000000,d3
01:00002A5A 7800            	  4565:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A5C 7A00            	  4566:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A5E 7C0E            	  4567:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A60 7E1E            	  4568:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4569: 
                            	  4570: 
01:00002A62 81C1            	  4571: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:00002A64 40C3            	  4572:                 move.w SR,d3
01:00002A66 02830000000C    	  4573:                 andi.l #$0C,d3            * Isolate flags
01:00002A6C DA83            	  4574:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A6E D880            	  4575:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A70 E289            	  4576:                 lsr.l #$1,d1
                            	  4577: 
01:00002A72 51CEFFEE        	  4578:                 dbf d6,DIVS_OUTER1
01:00002A76 E28A            	  4579:                 lsr.l #$1,d2
01:00002A78 2002            	  4580:                 move.l d2,d0
01:00002A7A 223C00005A5A    	  4581:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A80 7C0E            	  4582:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A82 51CFFFDE        	  4583:                 dbf d7,DIVS_OUTER1
                            	  4584: 
01:00002A86 0C844EC5D057    	  4585:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002A8C 66FE            	  4586:                 bne.s *
                            	  4587: 
01:00002A8E 0C8500000038    	  4588:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002A94 66FE            	  4589:                 bne.s *
                            	  4590: 
                            	  4591: 
01:00002A96 4E75            	  4592:                 rts
                            	  4593: 
                            	  4594: 
                            	  4595: 
                            	  4596: *-----------------------------------------------------------
                            	  4597: *-----------------------------------------------------------
                            	  4598: * OPCODE : OR
                            	  4599: *-----------------------------------------------------------
                            	  4600: *-----------------------------------------------------------
                            	  4601: 
                            	  4602: op_OR:
                            	  4603: 
                            	  4604: *  * <EA> to Register
                            	  4605: 
01:00002A98 203CA5A5A5A5    	  4606:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002A9E 223C8167E123    	  4607:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002AA4 243CA5A5A5A5    	  4608:                 move.l #$a5a5a5a5,d2
01:00002AAA 7600            	  4609:                 moveq  #$00000000,d3
01:00002AAC 7800            	  4610:                 moveq  #$00000000,d4       * Cumulative data results
01:00002AAE 7A00            	  4611:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AB0 7C1E            	  4612:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AB2 7E1E            	  4613:                 move.l #$0000001E,d7       * Outer loop counter
01:00002AB4 307C0100        	  4614:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4615: 
                            	  4616: 
                            	  4617: OR_OUTER1:
                            	  4618: 
                            	  4619: *     BYTE
01:00002AB8 2081            	  4620:                 move.l d1,(a0)
01:00002ABA 8010            	  4621:                 or.b (a0),d0
01:00002ABC 40C3            	  4622:                 move.w SR,d3
01:00002ABE 02830000000C    	  4623:                 andi.l #$0C,d3            * Isolate flags
01:00002AC4 DA83            	  4624:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AC6 D880            	  4625:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4626: 
                            	  4627: *     WORD
01:00002AC8 2081            	  4628:                 move.l d1,(a0)
01:00002ACA 8050            	  4629:                 or.w (a0),d0
01:00002ACC 40C3            	  4630:                 move.w SR,d3
01:00002ACE 02830000000C    	  4631:                 andi.l #$0C,d3            * Isolate flags
01:00002AD4 DA83            	  4632:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AD6 D880            	  4633:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4634: 
                            	  4635: *     LONG
01:00002AD8 2081            	  4636:                 move.l d1,(a0)
01:00002ADA 8090            	  4637:                 or.l (a0),d0
01:00002ADC 40C3            	  4638:                 move.w SR,d3
01:00002ADE 02830000000F    	  4639:                 andi.l #$0F,d3            * Isolate flags
01:00002AE4 DA83            	  4640:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AE6 D880            	  4641:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4642: 
                            	  4643: 
01:00002AE8 E289            	  4644:                 lsr.l #$1,d1
01:00002AEA 51CEFFCC        	  4645:                 dbf d6,OR_OUTER1
01:00002AEE E28A            	  4646:                 lsr.l #$1,d2
01:00002AF0 223C8167E123    	  4647:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002AF6 7C1E            	  4648:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AF8 51CFFFBE        	  4649:                 dbf d7,OR_OUTER1
                            	  4650: 
01:00002AFC 0C8476EAC803    	  4651:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002B02 66FE            	  4652:                 bne.s *
01:00002B04 0C8500005A18    	  4653:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002B0A 66FE            	  4654:                 bne.s *
                            	  4655: 
                            	  4656: 
                            	  4657: *  * Register to <EA>
                            	  4658: 
01:00002B0C 203C86738374    	  4659:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B12 223CFC55F2FE    	  4660:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B18 243C86738374    	  4661:                 move.l #$86738374,d2
01:00002B1E 7600            	  4662:                 moveq  #$00000000,d3
01:00002B20 7800            	  4663:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B22 7A00            	  4664:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B24 7C1E            	  4665:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B26 7E1D            	  4666:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B28 307C0100        	  4667:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4668: 
                            	  4669: 
                            	  4670: OR_OUTER2:
                            	  4671: 
                            	  4672: *     BYTE
01:00002B2C 2080            	  4673:                 move.l d0,(a0)
01:00002B2E 8310            	  4674:                 or.b d1,(a0)
01:00002B30 40C3            	  4675:                 move.w SR,d3
01:00002B32 02830000000C    	  4676:                 andi.l #$0C,d3            * Isolate flags
01:00002B38 DA83            	  4677:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B3A D890            	  4678:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4679: 
                            	  4680: *     WORD
01:00002B3C 2080            	  4681:                 move.l d0,(a0)
01:00002B3E 8350            	  4682:                 or.w d1,(a0)
01:00002B40 40C3            	  4683:                 move.w SR,d3
01:00002B42 02830000000C    	  4684:                 andi.l #$0C,d3            * Isolate flags
01:00002B48 DA83            	  4685:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B4A D890            	  4686:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4687: 
                            	  4688: *     LONG
01:00002B4C 2080            	  4689:                 move.l d0,(a0)
01:00002B4E 8390            	  4690:                 or.l d1,(a0)
01:00002B50 40C3            	  4691:                 move.w SR,d3
01:00002B52 02830000000F    	  4692:                 andi.l #$0F,d3            * Isolate flags
01:00002B58 DA83            	  4693:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B5A D890            	  4694:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4695: 
                            	  4696: 
01:00002B5C E289            	  4697:                 lsr.l #$1,d1
01:00002B5E 51CEFFCC        	  4698:                 dbf d6,OR_OUTER2
01:00002B62 E28A            	  4699:                 lsr.l #$1,d2
01:00002B64 223C8167E123    	  4700:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B6A 7C1E            	  4701:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B6C 51CFFFBE        	  4702:                 dbf d7,OR_OUTER2
                            	  4703: 
01:00002B70 0C84FA82B9E4    	  4704:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002B76 66FE            	  4705:                 bne.s *
01:00002B78 0C8500005730    	  4706:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002B7E 66FE            	  4707:                 bne.s *
                            	  4708: 
                            	  4709: 
01:00002B80 4E75            	  4710:                 rts
                            	  4711: 
                            	  4712: 
                            	  4713: 
                            	  4714: *-----------------------------------------------------------
                            	  4715: *-----------------------------------------------------------
                            	  4716: * OPCODE : AND
                            	  4717: *-----------------------------------------------------------
                            	  4718: *-----------------------------------------------------------
                            	  4719: 
                            	  4720: op_AND:
                            	  4721: 
                            	  4722: *  * <EA> to Register
                            	  4723: 
01:00002B82 203CA5A5A5A5    	  4724:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002B88 223C8167E123    	  4725:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002B8E 243CA5A5A5A5    	  4726:                 move.l #$a5a5a5a5,d2
01:00002B94 7600            	  4727:                 moveq  #$00000000,d3
01:00002B96 7800            	  4728:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B98 7A00            	  4729:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B9A 7C1E            	  4730:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B9C 7E1E            	  4731:                 move.l #$0000001E,d7       * Outer loop counter
01:00002B9E 307C0100        	  4732:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4733: 
                            	  4734: 
                            	  4735: AND_OUTER1:
                            	  4736: 
                            	  4737: *     BYTE
01:00002BA2 2081            	  4738:                 move.l d1,(a0)
01:00002BA4 C010            	  4739:                 and.b (a0),d0
01:00002BA6 40C3            	  4740:                 move.w sr,d3
01:00002BA8 02830000000C    	  4741:                 andi.l #$0C,d3            * Isolate flags
01:00002BAE DA83            	  4742:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BB0 D880            	  4743:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4744: 
                            	  4745: *     WORD
01:00002BB2 2081            	  4746:                 move.l d1,(a0)
01:00002BB4 C050            	  4747:                 and.w (a0),d0
01:00002BB6 40C3            	  4748:                 move.w sr,d3
01:00002BB8 02830000000C    	  4749:                 andi.l #$0C,d3            * Isolate flags
01:00002BBE DA83            	  4750:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BC0 D880            	  4751:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4752: 
                            	  4753: *     LONG
01:00002BC2 2081            	  4754:                 move.l d1,(a0)
01:00002BC4 C090            	  4755:                 and.l (a0),d0
01:00002BC6 40C3            	  4756:                 move.w sr,d3
01:00002BC8 02830000000F    	  4757:                 andi.l #$0F,d3            * Isolate flags
01:00002BCE DA83            	  4758:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BD0 D880            	  4759:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4760: 
                            	  4761: 
01:00002BD2 E289            	  4762:                 lsr.l #$1,d1
01:00002BD4 51CEFFCC        	  4763:                 dbf d6,AND_OUTER1
01:00002BD8 E28A            	  4764:                 lsr.l #$1,d2
01:00002BDA 223C8167E123    	  4765:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BE0 7C1E            	  4766:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BE2 51CFFFBE        	  4767:                 dbf d7,AND_OUTER1
                            	  4768: 
01:00002BE6 0C84CF212883    	  4769:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002BEC 66FE            	  4770:                 bne.s *
01:00002BEE 0C8500002D10    	  4771:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002BF4 66FE            	  4772:                 bne.s *
                            	  4773: 
                            	  4774: 
                            	  4775: *  * Register to <EA>
                            	  4776: 
01:00002BF6 203C86738374    	  4777:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002BFC 223CFC55F2FE    	  4778:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C02 243C86738374    	  4779:                 move.l #$86738374,d2
01:00002C08 7600            	  4780:                 moveq  #$00000000,d3
01:00002C0A 7800            	  4781:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C0C 7A00            	  4782:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C0E 7C1E            	  4783:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C10 7E1D            	  4784:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C12 307C0100        	  4785:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4786: 
                            	  4787: 
                            	  4788: AND_OUTER2:
                            	  4789: 
                            	  4790: *     BYTE
01:00002C16 2080            	  4791:                 move.l d0,(a0)
01:00002C18 C310            	  4792:                 and.b d1,(a0)
01:00002C1A 40C3            	  4793:                 move.w sr,d3
01:00002C1C 02830000000C    	  4794:                 andi.l #$0C,d3            * Isolate flags
01:00002C22 DA83            	  4795:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C24 D890            	  4796:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4797: 
                            	  4798: *     WORD
01:00002C26 2080            	  4799:                 move.l d0,(a0)
01:00002C28 C350            	  4800:                 and.w d1,(a0)
01:00002C2A 40C3            	  4801:                 move.w sr,d3
01:00002C2C 02830000000C    	  4802:                 andi.l #$0C,d3            * Isolate flags
01:00002C32 DA83            	  4803:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C34 D890            	  4804:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4805: 
                            	  4806: *     LONG
01:00002C36 2080            	  4807:                 move.l d0,(a0)
01:00002C38 C390            	  4808:                 and.l d1,(a0)
01:00002C3A 40C3            	  4809:                 move.w sr,d3
01:00002C3C 02830000000F    	  4810:                 andi.l #$0F,d3            * Isolate flags
01:00002C42 DA83            	  4811:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C44 D890            	  4812:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4813: 
                            	  4814: 
01:00002C46 E289            	  4815:                 lsr.l #$1,d1
01:00002C48 51CEFFCC        	  4816:                 dbf d6,AND_OUTER2
01:00002C4C E28A            	  4817:                 lsr.l #$1,d2
01:00002C4E 223C8167E123    	  4818:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C54 7C1E            	  4819:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C56 51CFFFBE        	  4820:                 dbf d7,AND_OUTER2
                            	  4821: 
01:00002C5A 0C844A3DE544    	  4822:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002C60 66FE            	  4823:                 bne.s *
01:00002C62 0C85000018E8    	  4824:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002C68 66FE            	  4825:                 bne.s *
                            	  4826: 
                            	  4827: 
01:00002C6A 4E75            	  4828:                 rts
                            	  4829: 
                            	  4830: 
                            	  4831: 
                            	  4832: *-----------------------------------------------------------
                            	  4833: *-----------------------------------------------------------
                            	  4834: * OPCODE : EOR
                            	  4835: *-----------------------------------------------------------
                            	  4836: *-----------------------------------------------------------
                            	  4837: 
                            	  4838: op_EOR:
                            	  4839: 
                            	  4840: *  * Register to <EA>
                            	  4841: 
01:00002C6C 203C86738374    	  4842:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C72 223CFC55F2FE    	  4843:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C78 243C86738374    	  4844:                 move.l #$86738374,d2
01:00002C7E 7600            	  4845:                 moveq  #$00000000,d3
01:00002C80 7800            	  4846:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C82 7A00            	  4847:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C84 7C1E            	  4848:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C86 7E1D            	  4849:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C88 307C0100        	  4850:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4851: 
                            	  4852: 
                            	  4853: EOR_OUTER2:
                            	  4854: 
                            	  4855: *     BYTE
01:00002C8C 2080            	  4856:                 move.l d0,(a0)
01:00002C8E B310            	  4857:                 eor.b d1,(a0)
01:00002C90 40C3            	  4858:                 move.w sr,d3
01:00002C92 02830000000C    	  4859:                 andi.l #$0C,d3            * Isolate flags
01:00002C98 DA83            	  4860:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C9A D890            	  4861:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4862: 
                            	  4863: *     WORD
01:00002C9C 2080            	  4864:                 move.l d0,(a0)
01:00002C9E B350            	  4865:                 eor.w d1,(a0)
01:00002CA0 40C3            	  4866:                 move.w sr,d3
01:00002CA2 02830000000C    	  4867:                 andi.l #$0C,d3            * Isolate flags
01:00002CA8 DA83            	  4868:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CAA D890            	  4869:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4870: 
                            	  4871: *     LONG
01:00002CAC 2080            	  4872:                 move.l d0,(a0)
01:00002CAE B390            	  4873:                 eor.l d1,(a0)
01:00002CB0 40C3            	  4874:                 move.w sr,d3
01:00002CB2 02830000000F    	  4875:                 andi.l #$0F,d3            * Isolate flags
01:00002CB8 DA83            	  4876:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CBA D890            	  4877:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4878: 
                            	  4879: 
01:00002CBC E289            	  4880:                 lsr.l #$1,d1
01:00002CBE 51CEFFCC        	  4881:                 dbf d6,EOR_OUTER2
01:00002CC2 E28A            	  4882:                 lsr.l #$1,d2
01:00002CC4 223C8167E123    	  4883:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CCA 7C1E            	  4884:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CCC 51CFFFBE        	  4885:                 dbf d7,EOR_OUTER2
                            	  4886: 
01:00002CD0 0C8455C5EB70    	  4887:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002CD6 66FE            	  4888:                 bne.s *
01:00002CD8 0C8500004430    	  4889:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002CDE 66FE            	  4890:                 bne.s *
                            	  4891: 
                            	  4892: 
01:00002CE0 4E75            	  4893:                 rts
                            	  4894: 
                            	  4895: 
                            	  4896: *-----------------------------------------------------------
                            	  4897: *-----------------------------------------------------------
                            	  4898: * OPCODE : CMP
                            	  4899: *-----------------------------------------------------------
                            	  4900: *-----------------------------------------------------------
                            	  4901: 
                            	  4902: op_CMP:
                            	  4903: 
                            	  4904: 
                            	  4905: *  * <EA> to Register
                            	  4906: 
01:00002CE2 203CA5A5A5A5    	  4907:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002CE8 223C8167E123    	  4908:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002CEE 243CA5A5A5A5    	  4909:                 move.l #$a5a5a5a5,d2
01:00002CF4 7600            	  4910:                 moveq  #$00000000,d3
01:00002CF6 7800            	  4911:                 moveq  #$00000000,d4       * Cumulative data results
01:00002CF8 7A00            	  4912:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002CFA 7C1E            	  4913:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CFC 7E1E            	  4914:                 move.l #$0000001E,d7       * Outer loop counter
01:00002CFE 307C0100        	  4915:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4916: 
                            	  4917: 
                            	  4918: CMP_OUTER1:
                            	  4919: 
                            	  4920: *     BYTE
01:00002D02 2081            	  4921:                 move.l d1,(a0)
01:00002D04 B010            	  4922:                 cmp.b (a0),d0
01:00002D06 40C3            	  4923:                 move.w sr,d3
01:00002D08 02830000000F    	  4924:                 andi.l #$0F,d3            * Isolate flags
01:00002D0E DA83            	  4925:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D10 D880            	  4926:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4927: 
                            	  4928: *     WORD
01:00002D12 2081            	  4929:                 move.l d1,(a0)
01:00002D14 B050            	  4930:                 cmp.w (a0),d0
01:00002D16 40C3            	  4931:                 move.w sr,d3
01:00002D18 02830000000F    	  4932:                 andi.l #$0F,d3            * Isolate flags
01:00002D1E DA83            	  4933:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D20 D880            	  4934:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4935: 
                            	  4936: *     LONG
01:00002D22 2081            	  4937:                 move.l d1,(a0)
01:00002D24 B090            	  4938:                 cmp.l (a0),d0
01:00002D26 40C3            	  4939:                 move.w sr,d3
01:00002D28 02830000000F    	  4940:                 andi.l #$0F,d3            * Isolate flags
01:00002D2E DA83            	  4941:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D30 D880            	  4942:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4943: 
                            	  4944: 
01:00002D32 E289            	  4945:                 lsr.l #$1,d1
01:00002D34 51CEFFCC        	  4946:                 dbf d6,CMP_OUTER1
01:00002D38 E28A            	  4947:                 lsr.l #$1,d2
01:00002D3A 223C8167E123    	  4948:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D40 7C1E            	  4949:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D42 51CFFFBE        	  4950:                 dbf d7,CMP_OUTER1
                            	  4951: 
01:00002D46 0C847878712F    	  4952:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002D4C 66FE            	  4953:                 bne.s *
01:00002D4E 0C8500005502    	  4954:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002D54 66FE            	  4955:                 bne.s *
                            	  4956: 
                            	  4957: 
                            	  4958: 
01:00002D56 4E75            	  4959:                 rts
                            	  4960: 
                            	  4961: 
                            	  4962: *-----------------------------------------------------------
                            	  4963: *-----------------------------------------------------------
                            	  4964: * OPCODE : CMPA
                            	  4965: *-----------------------------------------------------------
                            	  4966: *-----------------------------------------------------------
                            	  4967: 
                            	  4968: op_CMPA:
                            	  4969: 
                            	  4970: 
                            	  4971: *  * <EA> to Register
                            	  4972: 
01:00002D58 207CA5A5A5A5    	  4973:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002D5E 223C8167E123    	  4974:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D64 243CA5A5A5A5    	  4975:                 move.l #$a5a5a5a5,d2
01:00002D6A 7600            	  4976:                 moveq  #$00000000,d3
01:00002D6C 7800            	  4977:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D6E 7A00            	  4978:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D70 7C1E            	  4979:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D72 7E1E            	  4980:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D74 327C0100        	  4981:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4982: 
                            	  4983: 
                            	  4984: CMPA_OUTER1:
                            	  4985: 
                            	  4986: 
                            	  4987: *     WORD
01:00002D78 2281            	  4988:                 move.l d1,(a1)
01:00002D7A B0D1            	  4989:                 cmpa.w (a1),a0
01:00002D7C 40C3            	  4990:                 move.w sr,d3
01:00002D7E 02830000000F    	  4991:                 andi.l #$0F,d3            * Isolate flags
01:00002D84 DA83            	  4992:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D86 D888            	  4993:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4994: 
                            	  4995: *     LONG
01:00002D88 2281            	  4996:                 move.l d1,(a1)
01:00002D8A B1D1            	  4997:                 cmpa.l (a1),a0
01:00002D8C 40C3            	  4998:                 move.w sr,d3
01:00002D8E 02830000000F    	  4999:                 andi.l #$0F,d3            * Isolate flags
01:00002D94 DA83            	  5000:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D96 D888            	  5001:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5002: 
                            	  5003: 
01:00002D98 E289            	  5004:                 lsr.l #$1,d1
01:00002D9A 51CEFFDC        	  5005:                 dbf d6,CMPA_OUTER1
01:00002D9E E28A            	  5006:                 lsr.l #$1,d2
01:00002DA0 223C8167E123    	  5007:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002DA6 7C1E            	  5008:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DA8 51CFFFCE        	  5009:                 dbf d7,CMPA_OUTER1
                            	  5010: 
01:00002DAC 0C84A5A5A0CA    	  5011:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002DB2 66FE            	  5012:                 bne.s *
01:00002DB4 0C8500003A7D    	  5013:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002DBA 66FE            	  5014:                 bne.s *
                            	  5015: 
                            	  5016: 
01:00002DBC 4E75            	  5017:                 rts
                            	  5018: 
                            	  5019: 
                            	  5020: 
                            	  5021: *-----------------------------------------------------------
                            	  5022: *-----------------------------------------------------------
                            	  5023: * OPCODE : CMPM
                            	  5024: *-----------------------------------------------------------
                            	  5025: *-----------------------------------------------------------
                            	  5026: 
                            	  5027: op_CMPM:
                            	  5028: 
01:00002DBE 307C0100        	  5029:                 move.l #$00000100,a0       * Address for Data-X
01:00002DC2 327C0200        	  5030:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DC6 7000            	  5031:                 moveq  #$00000000,d0
01:00002DC8 7200            	  5032:                 moveq  #$00000000,d1
01:00002DCA 7400            	  5033:                 moveq  #$00000000,d2
                            	  5034: 
01:00002DCC 20FC11FF5580    	  5035:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002DD2 20FC1111FFFF    	  5036:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002DD8 20FC33333333    	  5037:                 move.l #$33333333,(a0)+   * Populate test data
01:00002DDE 20FC44444444    	  5038:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5039: 
01:00002DE4 22FC80FF337F    	  5040:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002DEA 22FCFFFF1111    	  5041:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002DF0 22FC33333333    	  5042:                 move.l #$33333333,(a1)+   * Populate test data
01:00002DF6 22FC44444444    	  5043:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5044: 
01:00002DFC 307C0100        	  5045:                 move.l #$00000100,a0       * Address for Data-X
01:00002E00 327C0200        	  5046:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E04 7C0F            	  5047:                 move.l #$0000000F,d6       * Loop counter
                            	  5048: 
01:00002E06 B308            	  5049: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002E08 40C3            	  5050:                 move.w sr,d3
01:00002E0A 02830000000F    	  5051:                 andi.l #$0F,d3            * Isolate flags
01:00002E10 D083            	  5052:                 add.l d3,d0               * Copy flag results into accumulator
01:00002E12 51CEFFF2        	  5053:                 dbf d6,CMPM_LOOP1
                            	  5054: 
                            	  5055: 
01:00002E16 307C0100        	  5056:                 move.l #$00000100,a0       * Address for Data-X
01:00002E1A 327C0200        	  5057:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E1E 7C07            	  5058:                 moveq  #$00000007,d6       * Loop counter
                            	  5059: 
01:00002E20 B348            	  5060: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002E22 40C3            	  5061:                 move.w sr,d3
01:00002E24 02830000000F    	  5062:                 andi.l #$0F,d3            * Isolate flags
01:00002E2A D283            	  5063:                 add.l d3,d1               * Copy flag results into accumulator
01:00002E2C 51CEFFF2        	  5064:                 dbf d6,CMPM_LOOP2
                            	  5065: 
                            	  5066: 
01:00002E30 307C0100        	  5067:                 move.l #$00000100,a0       * Address for Data-X
01:00002E34 327C0200        	  5068:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E38 7C03            	  5069:                 moveq  #$00000003,d6       * Loop counter
                            	  5070: 
01:00002E3A B388            	  5071: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002E3C 40C3            	  5072:                 move.w sr,d3
01:00002E3E 02830000000F    	  5073:                 andi.l #$0F,d3            * Isolate flags
01:00002E44 D483            	  5074:                 add.l d3,d2               * Copy flag results into accumulator
01:00002E46 51CEFFF2        	  5075:                 dbf d6,CMPM_LOOP3
                            	  5076: 
                            	  5077: 
01:00002E4A 0C800000004C    	  5078:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002E50 66FE            	  5079:                 bne.s *
01:00002E52 0C8100000024    	  5080:                 cmpi.l #$00000024,d1
01:00002E58 66FE            	  5081:                 bne.s *
01:00002E5A 0C8200000012    	  5082:                 cmpi.l #$00000012,d2
01:00002E60 66FE            	  5083:                 bne.s *
                            	  5084: 
01:00002E62 4E75            	  5085:                 rts
                            	  5086: 
                            	  5087: 
                            	  5088: *-----------------------------------------------------------
                            	  5089: *-----------------------------------------------------------
                            	  5090: * OPCODE : ADD
                            	  5091: *-----------------------------------------------------------
                            	  5092: *-----------------------------------------------------------
                            	  5093: 
                            	  5094: op_ADD:
                            	  5095: 
                            	  5096: 
                            	  5097: *  * <EA> to Register
01:00002E64 203CA5A5A5A5    	  5098:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002E6A 223C8167E123    	  5099:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002E70 243CA5A5A5A5    	  5100:                 move.l #$a5a5a5a5,d2
01:00002E76 7600            	  5101:                 moveq  #$00000000,d3
01:00002E78 7800            	  5102:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E7A 7A00            	  5103:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E7C 7C1E            	  5104:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E7E 7E1E            	  5105:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E80 307C0100        	  5106:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5107: 
                            	  5108: 
                            	  5109: ADD_OUTER1:
                            	  5110: 
                            	  5111: *     BYTE
01:00002E84 2081            	  5112:                 move.l d1,(a0)
01:00002E86 D010            	  5113:                 add.b (a0),d0
01:00002E88 40C3            	  5114:                 move.w sr,d3
01:00002E8A 02830000001F    	  5115:                 andi.l #$1F,d3            * Isolate flags
01:00002E90 DA83            	  5116:                 add.l d3,d5               * Copy flag results into accumulator
01:00002E92 D880            	  5117:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5118: 
                            	  5119: *     WORD
01:00002E94 2081            	  5120:                 move.l d1,(a0)
01:00002E96 D050            	  5121:                 add.w (a0),d0
01:00002E98 40C3            	  5122:                 move.w sr,d3
01:00002E9A 02830000000C    	  5123:                 andi.l #$0C,d3            * Isolate flags
01:00002EA0 DA83            	  5124:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EA2 D880            	  5125:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5126: 
                            	  5127: *     LONG
01:00002EA4 2081            	  5128:                 move.l d1,(a0)
01:00002EA6 D090            	  5129:                 add.l (a0),d0
01:00002EA8 40C3            	  5130:                 move.w sr,d3
01:00002EAA 02830000000F    	  5131:                 andi.l #$0F,d3            * Isolate flags
01:00002EB0 DA83            	  5132:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EB2 D880            	  5133:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5134: 
                            	  5135: 
01:00002EB4 E299            	  5136:                 ror.l #$1,d1
01:00002EB6 51CEFFCC        	  5137:                 dbf d6,ADD_OUTER1
01:00002EBA E29A            	  5138:                 ror.l #$1,d2
01:00002EBC 223C8167E123    	  5139:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002EC2 7C1E            	  5140:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EC4 51CFFFBE        	  5141:                 dbf d7,ADD_OUTER1
                            	  5142: 
01:00002EC8 0C8423ED428F    	  5143:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002ECE 66FE            	  5144:                 bne.s *
01:00002ED0 0C8500004C96    	  5145:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002ED6 66FE            	  5146:                 bne.s *
                            	  5147: 
                            	  5148: 
                            	  5149: *  * Register to <EA>
01:00002ED8 203C86738374    	  5150:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002EDE 223CFC55F2FE    	  5151:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002EE4 243C86738374    	  5152:                 move.l #$86738374,d2
01:00002EEA 7600            	  5153:                 moveq  #$00000000,d3
01:00002EEC 7800            	  5154:                 moveq  #$00000000,d4       * Cumulative data results
01:00002EEE 7A00            	  5155:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002EF0 7C1E            	  5156:                 move.l #$0000001E,d6       * Inner loop counter
01:00002EF2 7E1D            	  5157:                 move.l #$0000001D,d7       * Outer loop counter
01:00002EF4 307C0100        	  5158:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5159: 
                            	  5160: 
                            	  5161: ADD_OUTER2:
                            	  5162: 
                            	  5163: *     BYTE
01:00002EF8 2080            	  5164:                 move.l d0,(a0)
01:00002EFA D310            	  5165:                 add.b d1,(a0)
01:00002EFC 40C3            	  5166:                 move.w sr,d3
01:00002EFE 02830000000C    	  5167:                 andi.l #$0C,d3            * Isolate flags
01:00002F04 DA83            	  5168:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F06 D890            	  5169:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5170: 
                            	  5171: *     WORD
01:00002F08 2080            	  5172:                 move.l d0,(a0)
01:00002F0A D350            	  5173:                 add.w d1,(a0)
01:00002F0C 40C3            	  5174:                 move.w sr,d3
01:00002F0E 02830000001F    	  5175:                 andi.l #$1F,d3            * Isolate flags
01:00002F14 DA83            	  5176:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F16 D890            	  5177:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5178: 
                            	  5179: *     LONG
01:00002F18 2080            	  5180:                 move.l d0,(a0)
01:00002F1A D390            	  5181:                 add.l d1,(a0)
01:00002F1C 40C3            	  5182:                 move.w sr,d3
01:00002F1E 02830000000F    	  5183:                 andi.l #$0F,d3            * Isolate flags
01:00002F24 DA83            	  5184:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F26 D890            	  5185:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5186: 
                            	  5187: 
01:00002F28 E299            	  5188:                 ror.l #$1,d1
01:00002F2A 51CEFFCC        	  5189:                 dbf d6,ADD_OUTER2
01:00002F2E E29A            	  5190:                 ror.l #$1,d2
01:00002F30 223C8167E123    	  5191:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F36 7C1E            	  5192:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F38 51CFFFBE        	  5193:                 dbf d7,ADD_OUTER2
                            	  5194: 
01:00002F3C 0C846701B884    	  5195:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002F42 66FE            	  5196:                 bne.s *
01:00002F44 0C8500005467    	  5197:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002F4A 66FE            	  5198:                 bne.s *
                            	  5199: 
01:00002F4C 4E75            	  5200:                 rts
                            	  5201: 
                            	  5202: *-----------------------------------------------------------
                            	  5203: *-----------------------------------------------------------
                            	  5204: * OPCODE : SUB
                            	  5205: *-----------------------------------------------------------
                            	  5206: *-----------------------------------------------------------
                            	  5207: 
                            	  5208: op_SUB:
                            	  5209: 
                            	  5210: *  * <EA> to Register
01:00002F4E 203CA5A5A5A5    	  5211:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002F54 223C8167E123    	  5212:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002F5A 243CA5A5A5A5    	  5213:                 move.l #$a5a5a5a5,d2
01:00002F60 7600            	  5214:                 moveq  #$00000000,d3
01:00002F62 7800            	  5215:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F64 7A00            	  5216:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F66 7C1E            	  5217:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F68 7E1E            	  5218:                 move.l #$0000001E,d7       * Outer loop counter
01:00002F6A 307C0100        	  5219:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5220: 
                            	  5221: 
                            	  5222: SUB_OUTER1:
                            	  5223: 
                            	  5224: *     BYTE
01:00002F6E 2081            	  5225:                 move.l d1,(a0)
01:00002F70 9010            	  5226:                 sub.b (a0),d0
01:00002F72 40C3            	  5227:                 move.w sr,d3
01:00002F74 02830000001F    	  5228:                 andi.l #$1F,d3            * Isolate flags
01:00002F7A DA83            	  5229:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F7C D880            	  5230:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5231: 
                            	  5232: *     WORD
01:00002F7E 2081            	  5233:                 move.l d1,(a0)
01:00002F80 9050            	  5234:                 sub.w (a0),d0
01:00002F82 40C3            	  5235:                 move.w sr,d3
01:00002F84 02830000000C    	  5236:                 andi.l #$0C,d3            * Isolate flags
01:00002F8A DA83            	  5237:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F8C D880            	  5238:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5239: 
                            	  5240: *     LONG
01:00002F8E 2081            	  5241:                 move.l d1,(a0)
01:00002F90 9090            	  5242:                 sub.l (a0),d0
01:00002F92 40C3            	  5243:                 move.w sr,d3
01:00002F94 02830000000F    	  5244:                 andi.l #$0F,d3            * Isolate flags
01:00002F9A DA83            	  5245:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F9C D880            	  5246:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5247: 
                            	  5248: 
01:00002F9E E299            	  5249:                 ror.l #$1,d1
01:00002FA0 51CEFFCC        	  5250:                 dbf d6,SUB_OUTER1
01:00002FA4 E29A            	  5251:                 ror.l #$1,d2
01:00002FA6 223C8167E123    	  5252:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FAC 7C1E            	  5253:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FAE 51CFFFBE        	  5254:                 dbf d7,SUB_OUTER1
                            	  5255: 
01:00002FB2 0C841A8D14CF    	  5256:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002FB8 66FE            	  5257:                 bne.s *
01:00002FBA 0C8500004FC4    	  5258:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002FC0 66FE            	  5259:                 bne.s *
                            	  5260: 
                            	  5261: 
                            	  5262: *  * Register to <EA>
01:00002FC2 203C86738374    	  5263:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002FC8 223CFC55F2FE    	  5264:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002FCE 243C86738374    	  5265:                 move.l #$86738374,d2
01:00002FD4 7600            	  5266:                 moveq  #$00000000,d3
01:00002FD6 7800            	  5267:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FD8 7A00            	  5268:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FDA 7C1E            	  5269:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FDC 7E1D            	  5270:                 move.l #$0000001D,d7       * Outer loop counter
01:00002FDE 307C0100        	  5271:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5272: 
                            	  5273: 
                            	  5274: SUB_OUTER2:
                            	  5275: 
                            	  5276: *     BYTE
01:00002FE2 2080            	  5277:                 move.l d0,(a0)
01:00002FE4 9310            	  5278:                 sub.b d1,(a0)
01:00002FE6 40C3            	  5279:                 move.w sr,d3
01:00002FE8 02830000000C    	  5280:                 andi.l #$0C,d3            * Isolate flags
01:00002FEE DA83            	  5281:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FF0 D890            	  5282:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5283: 
                            	  5284: *     WORD
01:00002FF2 2080            	  5285:                 move.l d0,(a0)
01:00002FF4 9350            	  5286:                 sub.w d1,(a0)
01:00002FF6 40C3            	  5287:                 move.w sr,d3
01:00002FF8 02830000001F    	  5288:                 andi.l #$1F,d3            * Isolate flags
01:00002FFE DA83            	  5289:                 add.l d3,d5               * Copy flag results into accumulator
01:00003000 D890            	  5290:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5291: 
                            	  5292: *     LONG
01:00003002 2080            	  5293:                 move.l d0,(a0)
01:00003004 9390            	  5294:                 sub.l d1,(a0)
01:00003006 40C3            	  5295:                 move.w sr,d3
01:00003008 02830000000F    	  5296:                 andi.l #$0F,d3            * Isolate flags
01:0000300E DA83            	  5297:                 add.l d3,d5               * Copy flag results into accumulator
01:00003010 D890            	  5298:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5299: 
                            	  5300: 
01:00003012 E299            	  5301:                 ror.l #$1,d1
01:00003014 51CEFFCC        	  5302:                 dbf d6,SUB_OUTER2
01:00003018 E29A            	  5303:                 ror.l #$1,d2
01:0000301A 223C8167E123    	  5304:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003020 7C1E            	  5305:                 move.l #$0000001E,d6       * Inner loop counter
01:00003022 51CFFFBE        	  5306:                 dbf d7,SUB_OUTER2
                            	  5307: 
01:00003026 0C8436D38BEC    	  5308:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:0000302C 66FE            	  5309:                 bne.s *
01:0000302E 0C85000045A5    	  5310:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00003034 66FE            	  5311:                 bne.s *
                            	  5312: 
                            	  5313: 
                            	  5314: 
                            	  5315: 
01:00003036 4E75            	  5316:                 rts
                            	  5317: 
                            	  5318: 
                            	  5319: 
                            	  5320: *-----------------------------------------------------------
                            	  5321: *-----------------------------------------------------------
                            	  5322: * OPCODE : ADDA
                            	  5323: *-----------------------------------------------------------
                            	  5324: *-----------------------------------------------------------
                            	  5325: 
                            	  5326: op_ADDA:
                            	  5327: 
                            	  5328: *  * <EA> to Register
01:00003038 203CA5A5A5A5    	  5329:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000303E 223C8167E123    	  5330:                 move.l #$8167E123,d1
01:00003044 243CA5A5A5A5    	  5331:                 move.l #$a5a5a5a5,d2
01:0000304A 7600            	  5332:                 moveq  #$00000000,d3
01:0000304C 7800            	  5333:                 moveq  #$00000000,d4       * Cumulative data results
01:0000304E 7A00            	  5334:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003050 7C1E            	  5335:                 move.l #$0000001E,d6       * Inner loop counter
01:00003052 7E1E            	  5336:                 move.l #$0000001E,d7       * Outer loop counter
01:00003054 307C0100        	  5337:                 move.l #$00000100,a0       * Address for memory EA operations
01:00003058 227C8167E123    	  5338:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5339: 
                            	  5340: ADDA_OUTER1:
                            	  5341: 
                            	  5342: *     WORD
                            	  5343: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5344: *                adda.w (a0),a1
                            	  5345: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5346: 
                            	  5347: *     LONG
01:0000305E 2081            	  5348:                 move.l d1,(a0)
01:00003060 D3D0            	  5349:                 adda.l (a0),a1
01:00003062 D889            	  5350:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5351: 
01:00003064 E299            	  5352:                 ror.l #$1,d1
01:00003066 51CEFFF6        	  5353:                 dbf d6,ADDA_OUTER1
01:0000306A E299            	  5354:                 ror.l #$1,d1
01:0000306C 2241            	  5355:                 move.l d1,a1
01:0000306E 223C8167E123    	  5356:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003074 7C1E            	  5357:                 move.l #$0000001E,d6       * Inner loop counter
01:00003076 51CFFFE6        	  5358:                 dbf d7,ADDA_OUTER1
                            	  5359: 
01:0000307A 0C84AC04DB4C    	  5360:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:00003080 66FE            	  5361:                 bne.s *
                            	  5362: 
                            	  5363: 
01:00003082 4E75            	  5364:                 rts
                            	  5365: 
                            	  5366: 
                            	  5367: *-----------------------------------------------------------
                            	  5368: *-----------------------------------------------------------
                            	  5369: * OPCODE : SUBA
                            	  5370: *-----------------------------------------------------------
                            	  5371: *-----------------------------------------------------------
                            	  5372: 
                            	  5373: op_SUBA:
                            	  5374: 
                            	  5375: *  * <EA> to Register
01:00003084 203CA5A5A5A5    	  5376:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000308A 223C8167E123    	  5377:                 move.l #$8167E123,d1
01:00003090 243CA5A5A5A5    	  5378:                 move.l #$a5a5a5a5,d2
01:00003096 7600            	  5379:                 moveq  #$00000000,d3
01:00003098 7800            	  5380:                 moveq  #$00000000,d4       * Cumulative data results
01:0000309A 7A00            	  5381:                 moveq  #$00000000,d5       * Cumulative flag results
01:0000309C 7C1E            	  5382:                 move.l #$0000001E,d6       * Inner loop counter
01:0000309E 7E1E            	  5383:                 move.l #$0000001E,d7       * Outer loop counter
01:000030A0 307C0100        	  5384:                 move.l #$00000100,a0       * Address for memory EA operations
01:000030A4 227C8167E123    	  5385:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5386: 
                            	  5387: SUBA_OUTER1:
                            	  5388: 
                            	  5389: *     WORD
                            	  5390: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5391: *                suba.w (a0),a1
                            	  5392: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5393: 
                            	  5394: *     LONG
01:000030AA 2081            	  5395:                 move.l d1,(a0)
01:000030AC 93D0            	  5396:                 suba.l (a0),a1
01:000030AE D889            	  5397:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5398: 
01:000030B0 E299            	  5399:                 ror.l #$1,d1
01:000030B2 51CEFFF6        	  5400:                 dbf d6,SUBA_OUTER1
01:000030B6 E299            	  5401:                 ror.l #$1,d1
01:000030B8 2241            	  5402:                 move.l d1,a1
01:000030BA 223C8167E123    	  5403:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030C0 7C1E            	  5404:                 move.l #$0000001E,d6       * Inner loop counter
01:000030C2 51CFFFE6        	  5405:                 dbf d7,SUBA_OUTER1
                            	  5406: 
01:000030C6 0C84E1E36D7A    	  5407:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:000030CC 66FE            	  5408:                 bne.s *
                            	  5409: 
                            	  5410: 
01:000030CE 4E75            	  5411:                 rts
                            	  5412: 
                            	  5413: 
                            	  5414: 
                            	  5415: *-----------------------------------------------------------
                            	  5416: *-----------------------------------------------------------
                            	  5417: * OPCODE : ADDX
                            	  5418: *-----------------------------------------------------------
                            	  5419: *-----------------------------------------------------------
                            	  5420: 
                            	  5421: op_ADDX:
                            	  5422: 
                            	  5423: 
                            	  5424: *  * Register to Register
01:000030D0 203CA5A5A5A5    	  5425:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000030D6 223C8167E123    	  5426:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000030DC 243CA5A5A5A5    	  5427:                 move.l #$a5a5a5a5,d2
01:000030E2 7600            	  5428:                 moveq  #$00000000,d3
01:000030E4 7800            	  5429:                 moveq  #$00000000,d4       * Cumulative data results
01:000030E6 7A00            	  5430:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030E8 7C1E            	  5431:                 move.l #$0000001E,d6       * Inner loop counter
01:000030EA 7E1E            	  5432:                 move.l #$0000001E,d7       * Outer loop counter
01:000030EC 307C0100        	  5433:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5434: 
                            	  5435: 
                            	  5436: ADDX_OUTER1:
                            	  5437: 
                            	  5438: *     BYTE
01:000030F0 2002            	  5439:                 move.l d2,d0
01:000030F2 D101            	  5440:                 addx.b d1,d0
01:000030F4 40C3            	  5441:                 move.w sr,d3
01:000030F6 02830000001F    	  5442:                 andi.l #$1F,d3            * Isolate flags
01:000030FC DA83            	  5443:                 add.l d3,d5               * Copy flag results into accumulator
01:000030FE D880            	  5444:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5445: 
                            	  5446: *     WORD
01:00003100 2002            	  5447:                 move.l d2,d0
01:00003102 D141            	  5448:                 addx.w d1,d0
01:00003104 40C3            	  5449:                 move.w sr,d3
01:00003106 02830000001F    	  5450:                 andi.l #$1F,d3            * Isolate flags
01:0000310C DA83            	  5451:                 add.l d3,d5               * Copy flag results into accumulator
01:0000310E D880            	  5452:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5453: 
                            	  5454: *     LONG
01:00003110 2002            	  5455:                 move.l d2,d0
01:00003112 D181            	  5456:                 addx.l d1,d0
01:00003114 40C3            	  5457:                 move.w sr,d3
01:00003116 02830000001F    	  5458:                 andi.l #$1F,d3            * Isolate flags
01:0000311C DA83            	  5459:                 add.l d3,d5               * Copy flag results into accumulator
01:0000311E D880            	  5460:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5461: 
01:00003120 E299            	  5462:                 ror.l #$1,d1
01:00003122 51CEFFCC        	  5463:                 dbf d6,ADDX_OUTER1
01:00003126 E29A            	  5464:                 ror.l #$1,d2
01:00003128 223C8167E123    	  5465:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000312E 7C1E            	  5466:                 move.l #$0000001E,d6       * Inner loop counter
01:00003130 51CFFFBE        	  5467:                 dbf d7,ADDX_OUTER1
                            	  5468: 
01:00003134 0C844E96A4D9    	  5469:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:0000313A 66FE            	  5470:                 bne.s *
01:0000313C 0C85000085CD    	  5471:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:00003142 66FE            	  5472:                 bne.s *
                            	  5473: 
                            	  5474: 
                            	  5475: 
                            	  5476: *     -(An),-(An)
                            	  5477: 
01:00003144 7000            	  5478:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003146 7200            	  5479:                 moveq  #$00000000,d1
01:00003148 7400            	  5480:                 moveq  #$00000000,d2
01:0000314A 307C0100        	  5481:                 move.l #$00000100,a0       * Address for Data-X
01:0000314E 327C0200        	  5482:                 move.l #$00000200,a1       * Address for Data-Y
01:00003152 20FC11FF5580    	  5483:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003158 20FC1111FFFF    	  5484:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:0000315E 20FC33333333    	  5485:                 move.l #$33333333,(a0)+   * Populate test data
01:00003164 20FC44444444    	  5486:                 move.l #$44444444,(a0)+   * Populate test data
01:0000316A 22FC80FF337F    	  5487:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003170 22FCFFFF1111    	  5488:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00003176 22FC33333333    	  5489:                 move.l #$33333333,(a1)+   * Populate test data
01:0000317C 22FC44444444    	  5490:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5491: 
                            	  5492: 
01:00003182 7C0F            	  5493:                 move.l #$0000000F,d6       * Loop counter
                            	  5494: 
01:00003184 D308            	  5495: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:00003186 40C3            	  5496:                 move.w sr,d3
01:00003188 02830000000F    	  5497:                 andi.l #$0F,d3            * Isolate flags
01:0000318E D083            	  5498:                 add.l d3,d0               * Copy flag results into accumulator
01:00003190 D211            	  5499:                 add.b (a1),d1
01:00003192 51CEFFF0        	  5500:                 dbf d6,ADDX_LOOP3
                            	  5501: 
                            	  5502: 
01:00003196 307C0110        	  5503:                 move.l #$00000110,a0       * Address for Data-X
01:0000319A 327C0210        	  5504:                 move.l #$00000210,a1       * Address for Data-Y
01:0000319E 7C07            	  5505:                 moveq  #$00000007,d6       * Loop counter
                            	  5506: 
01:000031A0 D348            	  5507: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:000031A2 40C3            	  5508:                 move.w sr,d3
01:000031A4 02830000000F    	  5509:                 andi.l #$0F,d3            * Isolate flags
01:000031AA D083            	  5510:                 add.l d3,d0               * Copy flag results into accumulator
01:000031AC D251            	  5511:                 add.w (a1),d1
01:000031AE 51CEFFF0        	  5512:                 dbf d6,ADDX_LOOP4
                            	  5513: 
                            	  5514: 
01:000031B2 307C0110        	  5515:                 move.l #$00000110,a0       * Address for Data-X
01:000031B6 327C0210        	  5516:                 move.l #$00000210,a1       * Address for Data-Y
01:000031BA 7C03            	  5517:                 moveq  #$00000003,d6       * Loop counter
                            	  5518: 
01:000031BC D388            	  5519: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:000031BE 40C3            	  5520:                 move.w sr,d3
01:000031C0 02830000000F    	  5521:                 andi.l #$0F,d3            * Isolate flags
01:000031C6 D083            	  5522:                 add.l d3,d0               * Copy flag results into accumulator
01:000031C8 D291            	  5523:                 add.l (a1),d1
01:000031CA 51CEFFF0        	  5524:                 dbf d6,ADDX_LOOP5
                            	  5525: 
                            	  5526: 
01:000031CE 0C8000000095    	  5527:                 cmpi.l #$00000095,d0      * Check the flag results
01:000031D4 66FE            	  5528:                 bne.s *
01:000031D6 0C81C812A682    	  5529:                 cmpi.l #$C812A682,d1      * Check the data results
01:000031DC 66FE            	  5530:                 bne.s *
                            	  5531: 
01:000031DE 4E75            	  5532:                 rts
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: *-----------------------------------------------------------
                            	  5538: *-----------------------------------------------------------
                            	  5539: * OPCODE : SUBX
                            	  5540: *-----------------------------------------------------------
                            	  5541: *-----------------------------------------------------------
                            	  5542: 
                            	  5543: op_SUBX:
                            	  5544: 
                            	  5545: 
                            	  5546: *  * Register to Register
01:000031E0 203CA5A5A5A5    	  5547:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000031E6 223C8167E123    	  5548:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000031EC 243CA5A5A5A5    	  5549:                 move.l #$a5a5a5a5,d2
01:000031F2 7600            	  5550:                 moveq  #$00000000,d3
01:000031F4 7800            	  5551:                 moveq  #$00000000,d4       * Cumulative data results
01:000031F6 7A00            	  5552:                 moveq  #$00000000,d5       * Cumulative flag results
01:000031F8 7C1E            	  5553:                 move.l #$0000001E,d6       * Inner loop counter
01:000031FA 7E1E            	  5554:                 move.l #$0000001E,d7       * Outer loop counter
01:000031FC 307C0100        	  5555:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5556: 
                            	  5557: 
                            	  5558: SUBX_OUTER1:
                            	  5559: 
                            	  5560: *     BYTE
01:00003200 2002            	  5561:                 move.l d2,d0
01:00003202 9101            	  5562:                 subx.b d1,d0
01:00003204 40C3            	  5563:                 move.w sr,d3
01:00003206 02830000001F    	  5564:                 andi.l #$1F,d3            * Isolate flags
01:0000320C DA83            	  5565:                 add.l d3,d5               * Copy flag results into accumulator
01:0000320E D880            	  5566:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5567: 
                            	  5568: *     WORD
01:00003210 2002            	  5569:                 move.l d2,d0
01:00003212 9141            	  5570:                 subx.w d1,d0
01:00003214 40C3            	  5571:                 move.w sr,d3
01:00003216 02830000001F    	  5572:                 andi.l #$1F,d3            * Isolate flags
01:0000321C DA83            	  5573:                 add.l d3,d5               * Copy flag results into accumulator
01:0000321E D880            	  5574:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5575: 
                            	  5576: *     LONG
01:00003220 2002            	  5577:                 move.l d2,d0
01:00003222 9181            	  5578:                 subx.l d1,d0
01:00003224 40C3            	  5579:                 move.w sr,d3
01:00003226 02830000001F    	  5580:                 andi.l #$1F,d3            * Isolate flags
01:0000322C DA83            	  5581:                 add.l d3,d5               * Copy flag results into accumulator
01:0000322E D880            	  5582:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5583: 
01:00003230 E299            	  5584:                 ror.l #$1,d1
01:00003232 51CEFFCC        	  5585:                 dbf d6,SUBX_OUTER1
01:00003236 E29A            	  5586:                 ror.l #$1,d2
01:00003238 223C8167E123    	  5587:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000323E 7C1E            	  5588:                 move.l #$0000001E,d6       * Inner loop counter
01:00003240 51CFFFBE        	  5589:                 dbf d7,SUBX_OUTER1
                            	  5590: 
01:00003244 0C84FCAA913E    	  5591:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:0000324A 66FE            	  5592:                 bne.s *
01:0000324C 0C8500007E89    	  5593:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:00003252 66FE            	  5594:                 bne.s *
                            	  5595: 
                            	  5596: 
                            	  5597: 
                            	  5598: *     -(An),-(An)
                            	  5599: 
01:00003254 7000            	  5600:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003256 7200            	  5601:                 moveq  #$00000000,d1
01:00003258 7400            	  5602:                 moveq  #$00000000,d2
01:0000325A 307C0100        	  5603:                 move.l #$00000100,a0       * Address for Data-X
01:0000325E 327C0200        	  5604:                 move.l #$00000200,a1       * Address for Data-Y
01:00003262 20FC11FF5580    	  5605:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003268 20FC1111FFFF    	  5606:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:0000326E 20FC80FF337F    	  5607:                 move.l #$80FF337F,(a0)+   * Populate test data
01:00003274 20FC44444444    	  5608:                 move.l #$44444444,(a0)+   * Populate test data
01:0000327A 22FC80FF337F    	  5609:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003280 22FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:00003286 22FC33333333    	  5611:                 move.l #$33333333,(a1)+   * Populate test data
01:0000328C 22FC5580EECC    	  5612:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5613: 
                            	  5614: 
01:00003292 7C0F            	  5615:                 move.l #$0000000F,d6       * Loop counter
                            	  5616: 
01:00003294 9308            	  5617: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:00003296 40C3            	  5618:                 move.w sr,d3
01:00003298 02830000000F    	  5619:                 andi.l #$0F,d3            * Isolate flags
01:0000329E D083            	  5620:                 add.l d3,d0               * Copy flag results into accumulator
01:000032A0 D211            	  5621:                 add.b (a1),d1
01:000032A2 51CEFFF0        	  5622:                 dbf d6,SUBX_LOOP3
                            	  5623: 
                            	  5624: 
01:000032A6 307C0110        	  5625:                 move.l #$00000110,a0       * Address for Data-X
01:000032AA 327C0210        	  5626:                 move.l #$00000210,a1       * Address for Data-Y
01:000032AE 7C07            	  5627:                 moveq  #$00000007,d6       * Loop counter
                            	  5628: 
01:000032B0 9348            	  5629: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:000032B2 40C3            	  5630:                 move.w sr,d3
01:000032B4 02830000000F    	  5631:                 andi.l #$0F,d3            * Isolate flags
01:000032BA D083            	  5632:                 add.l d3,d0               * Copy flag results into accumulator
01:000032BC D251            	  5633:                 add.w (a1),d1
01:000032BE 51CEFFF0        	  5634:                 dbf d6,SUBX_LOOP4
                            	  5635: 
                            	  5636: 
01:000032C2 307C0110        	  5637:                 move.l #$00000110,a0       * Address for Data-X
01:000032C6 327C0210        	  5638:                 move.l #$00000210,a1       * Address for Data-Y
01:000032CA 7C03            	  5639:                 moveq  #$00000003,d6       * Loop counter
                            	  5640: 
01:000032CC 9388            	  5641: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:000032CE 40C3            	  5642:                 move.w sr,d3
01:000032D0 02830000000F    	  5643:                 andi.l #$0F,d3            * Isolate flags
01:000032D6 D083            	  5644:                 add.l d3,d0               * Copy flag results into accumulator
01:000032D8 D291            	  5645:                 add.l (a1),d1
01:000032DA 51CEFFF0        	  5646:                 dbf d6,SUBX_LOOP5
                            	  5647: 
                            	  5648: 
01:000032DE 0C80000000B1    	  5649:                 cmpi.l #$000000B1,d0      * Check the flag results
01:000032E4 66FE            	  5650:                 bne.s *
01:000032E6 0C8162C6F417    	  5651:                 cmpi.l #$62C6F417,d1      * Check the data results
01:000032EC 66FE            	  5652:                 bne.s *
                            	  5653: 
01:000032EE 4E75            	  5654:                 rts
                            	  5655: 
                            	  5656: 
                            	  5657: *-----------------------------------------------------------
                            	  5658: *-----------------------------------------------------------
                            	  5659: * OPCODE : MULU
                            	  5660: *-----------------------------------------------------------
                            	  5661: *-----------------------------------------------------------
                            	  5662: 
                            	  5663: op_MULU:
                            	  5664: 
01:000032F0 203CFE805501    	  5665:                 move.l #$FE805501,d0        * Initial
01:000032F6 223C5697EDB6    	  5666:                 move.l #$5697EDB6,d1        * Initial Y
01:000032FC 243CFE805501    	  5667:                 move.l #$FE805501,d2
01:00003302 7600            	  5668:                 moveq  #$00000000,d3
01:00003304 7800            	  5669:                 moveq  #$00000000,d4        * Cumulative data results
01:00003306 7A00            	  5670:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003308 7C0E            	  5671:                 move.l #$0000000E,d6       * Inner loop counter
01:0000330A 7E0E            	  5672:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5673: 
                            	  5674: 
01:0000330C C0C1            	  5675: MULU_OUTER1:    mulu d1,d0
01:0000330E 40C3            	  5676:                 move.w sr,d3
01:00003310 02830000000C    	  5677:                 andi.l #$0C,d3            * Isolate flags
01:00003316 DA83            	  5678:                 add.l d3,d5               * Copy flag results into accumulator
01:00003318 D880            	  5679:                 add.l d0,d4               * Copy data results into data accumulator
01:0000331A E299            	  5680:                 ror.l #$1,d1
                            	  5681: 
01:0000331C 51CEFFEE        	  5682:                 dbf d6,MULU_OUTER1
01:00003320 E29A            	  5683:                 ror.l #$1,d2
01:00003322 2002            	  5684:                 move.l d2,d0
01:00003324 7C0E            	  5685:                 move.l #$0000000E,d6       * Inner loop counter
01:00003326 51CFFFE4        	  5686:                 dbf d7,MULU_OUTER1
                            	  5687: 
01:0000332A 0C8476FB988C    	  5688:                 cmpi.l #$76FB988C,d4      * Check the data results
01:00003330 66FE            	  5689:                 bne.s *
                            	  5690: 
01:00003332 0C8500000170    	  5691:                 cmpi.l #$00000170,d5      * Check the Flag results
01:00003338 66FE            	  5692:                 bne.s *
                            	  5693: 
                            	  5694: 
01:0000333A 4E75            	  5695:                 rts
                            	  5696: 
                            	  5697: 
                            	  5698: *-----------------------------------------------------------
                            	  5699: *-----------------------------------------------------------
                            	  5700: * OPCODE : MULS
                            	  5701: *-----------------------------------------------------------
                            	  5702: *-----------------------------------------------------------
                            	  5703: 
                            	  5704: op_MULS:
                            	  5705: 
01:0000333C 203CFE805501    	  5706:                 move.l #$FE805501,d0        * Initial
01:00003342 223C5697EDB6    	  5707:                 move.l #$5697EDB6,d1        * Initial Y
01:00003348 243CFE805501    	  5708:                 move.l #$FE805501,d2
01:0000334E 7600            	  5709:                 moveq  #$00000000,d3
01:00003350 7800            	  5710:                 moveq  #$00000000,d4        * Cumulative data results
01:00003352 7A00            	  5711:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003354 7C0E            	  5712:                 move.l #$0000000E,d6       * Inner loop counter
01:00003356 7E0E            	  5713:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5714: 
                            	  5715: 
01:00003358 C1C1            	  5716: MULS_OUTER1:    muls d1,d0
01:0000335A 40C3            	  5717:                 move.w sr,d3
01:0000335C 02830000000C    	  5718:                 andi.l #$0C,d3            * Isolate flags
01:00003362 DA83            	  5719:                 add.l d3,d5               * Copy flag results into accumulator
01:00003364 D880            	  5720:                 add.l d0,d4               * Copy data results into data accumulator
01:00003366 E299            	  5721:                 ror.l #$1,d1
                            	  5722: 
01:00003368 51CEFFEE        	  5723:                 dbf d6,MULS_OUTER1
01:0000336C E29A            	  5724:                 ror.l #$1,d2
01:0000336E 2002            	  5725:                 move.l d2,d0
01:00003370 7C0E            	  5726:                 move.l #$0000000E,d6       * Inner loop counter
01:00003372 51CFFFE4        	  5727:                 dbf d7,MULS_OUTER1
                            	  5728: 
01:00003376 0C84D4E2988C    	  5729:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:0000337C 66FE            	  5730:                 bne.s *
                            	  5731: 
01:0000337E 0C85000003E0    	  5732:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:00003384 66FE            	  5733:                 bne.s *
                            	  5734: 
                            	  5735: 
01:00003386 4E75            	  5736:                 rts
                            	  5737: 
                            	  5738: 
                            	  5739: 
                            	  5740: *-----------------------------------------------------------
                            	  5741: *-----------------------------------------------------------
                            	  5742: * OPCODE : EXG
                            	  5743: *-----------------------------------------------------------
                            	  5744: *-----------------------------------------------------------
                            	  5745: 
                            	  5746: op_EXG:
01:00003388 223CD1D1D1D1    	  5747:                 move.l #$d1d1d1d1,d1
01:0000338E 243CD2D2D2D2    	  5748:                 move.l #$d2d2d2d2,d2
01:00003394 263CD3D3D3D3    	  5749:                 move.l #$d3d3d3d3,d3
01:0000339A 227CA1A1A1A1    	  5750:                 move.l #$a1a1a1a1,a1
01:000033A0 247CA2A2A2A2    	  5751:                 move.l #$a2a2a2a2,a2
01:000033A6 267CA3A3A3A3    	  5752:                 move.l #$a3a3a3a3,a3
                            	  5753: 
01:000033AC C342            	  5754:                 exg d1,d2
01:000033AE C34A            	  5755:                 exg a1,a2
01:000033B0 C78B            	  5756:                 exg d3,a3
                            	  5757: 
01:000033B2 0C81D2D2D2D2    	  5758:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:000033B8 66FE            	  5759:                 bne.s *
01:000033BA 0C82D1D1D1D1    	  5760:                 cmpi.l #$d1d1d1d1,d2
01:000033C0 66FE            	  5761:                 bne.s *
01:000033C2 0C83A3A3A3A3    	  5762:                 cmpi.l #$a3a3a3a3,d3
01:000033C8 66FE            	  5763:                 bne.s *
                            	  5764: 
01:000033CA 2209            	  5765:                 move.l a1,d1
01:000033CC 240A            	  5766:                 move.l a2,d2
01:000033CE 260B            	  5767:                 move.l a3,d3
                            	  5768: 
01:000033D0 0C81A2A2A2A2    	  5769:                 cmpi.l #$a2a2a2a2,d1
01:000033D6 66FE            	  5770:                 bne.s *
01:000033D8 0C82A1A1A1A1    	  5771:                 cmpi.l #$a1a1a1a1,d2
01:000033DE 66FE            	  5772:                 bne.s *
01:000033E0 0C83D3D3D3D3    	  5773:                 cmpi.l #$d3d3d3d3,d3
01:000033E6 66FE            	  5774:                 bne.s *
                            	  5775: 
01:000033E8 4E75            	  5776:                 rts
                            	  5777: 
                            	  5778: 
                            	  5779: *-----------------------------------------------------------
                            	  5780: *-----------------------------------------------------------
                            	  5781: * OPCODE : ROx
                            	  5782: *-----------------------------------------------------------
                            	  5783: *-----------------------------------------------------------
                            	  5784: 
                            	  5785: *     Subroutine to check and accumulate the flags
01:000033EA 40C3            	  5786: ROx_FLAGS:      move.w sr,d3
01:000033EC 02830000000F    	  5787:                 andi.l #$0F,d3            * Isolate flags
01:000033F2 DA83            	  5788:                 add.l d3,d5               * Copy flag results into accumulator
01:000033F4 4E75            	  5789:                 rts
                            	  5790: 
                            	  5791: op_ROx:
                            	  5792: 
                            	  5793: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5794: 
                            	  5795: *        BYTE LEFT
01:000033F6 203C80018FF1    	  5796:                 move.l #$80018FF1,d0
01:000033FC 7A00            	  5797:                 moveq  #$00000000,d5
01:000033FE 7C11            	  5798:                 moveq  #$00000011,d6
                            	  5799: ROx_LOOP1:
01:00003400 ED38            	  5800:                 rol.b d6,d0
01:00003402 61E6            	  5801:                 bsr ROx_FLAGS
01:00003404 51CEFFFA        	  5802:                 dbf d6,ROx_LOOP1
01:00003408 0C8080018FE3    	  5803:                 cmpi.l #$80018FE3,d0
01:0000340E 66FE            	  5804:                 bne.s *
01:00003410 0C850000006B    	  5805:                 cmpi.l #$0000006B,d5
01:00003416 66FE            	  5806:                 bne.s *
                            	  5807: 
                            	  5808: *        BYTE RIGHT
01:00003418 203C80018FF1    	  5809:                 move.l #$80018FF1,d0
01:0000341E 7C12            	  5810:                 moveq  #$00000012,d6
                            	  5811: ROx_LOOP2:
01:00003420 EC38            	  5812:                 ror.b d6,d0
01:00003422 61C6            	  5813:                 bsr ROx_FLAGS
01:00003424 51CEFFFA        	  5814:                 dbf d6,ROx_LOOP2
01:00003428 0C8080018F3E    	  5815:                 cmpi.l #$80018F3E,d0
01:0000342E 66FE            	  5816:                 bne.s *
01:00003430 0C85000000C5    	  5817:                 cmpi.l #$000000C5,d5
01:00003436 66FE            	  5818:                 bne.s *
                            	  5819: 
                            	  5820: 
                            	  5821: *        WORD LEFT
01:00003438 203C80018FF1    	  5822:                 move.l #$80018FF1,d0
01:0000343E 7C13            	  5823:                 moveq  #$00000013,d6
                            	  5824: ROx_LOOP3:
01:00003440 ED78            	  5825:                 rol.w d6,d0
01:00003442 61A6            	  5826:                 bsr ROx_FLAGS
01:00003444 51CEFFFA        	  5827:                 dbf d6,ROx_LOOP3
01:00003448 0C80800163FC    	  5828:                 cmpi.l #$800163FC,d0
01:0000344E 66FE            	  5829:                 bne.s *
01:00003450 0C8500000131    	  5830:                 cmpi.l #$00000131,d5
01:00003456 66FE            	  5831:                 bne.s *
                            	  5832: 
                            	  5833: *        WORD RIGHT
01:00003458 203C80018FF1    	  5834:                 move.l #$80018FF1,d0
01:0000345E 7C1E            	  5835:                 move.l #$0000001E,d6
                            	  5836: ROx_LOOP4:
01:00003460 EC78            	  5837:                 ror.w d6,d0
01:00003462 6186            	  5838:                 bsr ROx_FLAGS
01:00003464 51CEFFFA        	  5839:                 dbf d6,ROx_LOOP4
01:00003468 0C808001C7F8    	  5840:                 cmpi.l #$8001C7F8,d0
01:0000346E 66FE            	  5841:                 bne.s *
01:00003470 0C85000001DB    	  5842:                 cmpi.l #$000001DB,d5
01:00003476 66FE            	  5843:                 bne.s *
                            	  5844: 
                            	  5845: 
                            	  5846: *        LONG LEFT
01:00003478 203C80018FF1    	  5847:                 move.l #$80018FF1,d0
01:0000347E 7C15            	  5848:                 moveq  #$00000015,d6
                            	  5849: ROx_LOOP5:
01:00003480 EDB8            	  5850:                 rol.l d6,d0
01:00003482 6100FF66        	  5851:                 bsr ROx_FLAGS
01:00003486 51CEFFF8        	  5852:                 dbf d6,ROx_LOOP5
01:0000348A 0C8000C7F8C0    	  5853:                 cmpi.l #$00C7F8C0,d0
01:00003490 66FE            	  5854:                 bne.s *
01:00003492 0C850000021A    	  5855:                 cmpi.l #$0000021A,d5
01:00003498 66FE            	  5856:                 bne.s *
                            	  5857: 
                            	  5858: *        LONG RIGHT
01:0000349A 203C80018FF1    	  5859:                 move.l #$80018FF1,d0
01:000034A0 7C16            	  5860:                 moveq  #$00000016,d6
                            	  5861: ROx_LOOP6:
01:000034A2 ECB8            	  5862:                 ror.l d6,d0
01:000034A4 6100FF44        	  5863:                 bsr ROx_FLAGS
01:000034A8 51CEFFF8        	  5864:                 dbf d6,ROx_LOOP6
01:000034AC 0C80000C7F8C    	  5865:                 cmpi.l #$000C7F8C,d0
01:000034B2 66FE            	  5866:                 bne.s *
01:000034B4 0C8500000250    	  5867:                 cmpi.l #$00000250,d5
01:000034BA 66FE            	  5868:                 bne.s *
                            	  5869: 
                            	  5870: 
                            	  5871: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5872: 
01:000034BC 203C80018FF1    	  5873:                 move.l #$80018FF1,d0
01:000034C2 7A00            	  5874:                 moveq  #$00000000,d5
                            	  5875: 
                            	  5876: *        BYTE LEFT
01:000034C4 E318            	  5877:                 rol.b #1,d0
01:000034C6 6100FF22        	  5878:                 bsr ROx_FLAGS
01:000034CA EB18            	  5879:                 rol.b #5,d0
01:000034CC 6100FF1C        	  5880:                 bsr ROx_FLAGS
01:000034D0 EF18            	  5881:                 rol.b #7,d0
01:000034D2 6100FF16        	  5882:                 bsr ROx_FLAGS
01:000034D6 E118            	  5883:                 rol.b #8,d0
01:000034D8 6100FF10        	  5884:                 bsr ROx_FLAGS
01:000034DC 0C8080018F3E    	  5885:                 cmpi.l #$80018F3E,d0
01:000034E2 66FE            	  5886:                 bne.s *
01:000034E4 0C8500000009    	  5887:                 cmpi.l #$00000009,d5
01:000034EA 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        BYTE RIGHT
01:000034EC E218            	  5891:                 ror.b #1,d0
01:000034EE 6100FEFA        	  5892:                 bsr ROx_FLAGS
01:000034F2 EA18            	  5893:                 ror.b #5,d0
01:000034F4 6100FEF4        	  5894:                 bsr ROx_FLAGS
01:000034F8 EE18            	  5895:                 ror.b #7,d0
01:000034FA 6100FEEE        	  5896:                 bsr ROx_FLAGS
01:000034FE E018            	  5897:                 ror.b #8,d0
01:00003500 6100FEE8        	  5898:                 bsr ROx_FLAGS
01:00003504 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
01:0000350A 66FE            	  5900:                 bne.s *
01:0000350C 0C8500000024    	  5901:                 cmpi.l #$00000024,d5
01:00003512 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        WORD LEFT
01:00003514 E358            	  5905:                 rol.w #1,d0
01:00003516 6100FED2        	  5906:                 bsr ROx_FLAGS
01:0000351A EB58            	  5907:                 rol.w #5,d0
01:0000351C 6100FECC        	  5908:                 bsr ROx_FLAGS
01:00003520 EF58            	  5909:                 rol.w #7,d0
01:00003522 6100FEC6        	  5910:                 bsr ROx_FLAGS
01:00003526 E158            	  5911:                 rol.w #8,d0
01:00003528 6100FEC0        	  5912:                 bsr ROx_FLAGS
01:0000352C 0C808001FE31    	  5913:                 cmpi.l #$8001FE31,d0
01:00003532 66FE            	  5914:                 bne.s *
01:00003534 0C8500000037    	  5915:                 cmpi.l #$00000037,d5
01:0000353A 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        WORD RIGHT
01:0000353C E258            	  5919:                 ror.w #1,d0
01:0000353E 6100FEAA        	  5920:                 bsr ROx_FLAGS
01:00003542 EA58            	  5921:                 ror.w #5,d0
01:00003544 6100FEA4        	  5922:                 bsr ROx_FLAGS
01:00003548 EE58            	  5923:                 ror.w #7,d0
01:0000354A 6100FE9E        	  5924:                 bsr ROx_FLAGS
01:0000354E E058            	  5925:                 ror.w #8,d0
01:00003550 6100FE98        	  5926:                 bsr ROx_FLAGS
01:00003554 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
01:0000355A 66FE            	  5928:                 bne.s *
01:0000355C 0C850000005B    	  5929:                 cmpi.l #$0000005B,d5
01:00003562 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: *        LONG LEFT
01:00003564 E398            	  5933:                 rol.l #1,d0
01:00003566 6100FE82        	  5934:                 bsr ROx_FLAGS
01:0000356A EB98            	  5935:                 rol.l #5,d0
01:0000356C 6100FE7C        	  5936:                 bsr ROx_FLAGS
01:00003570 EF98            	  5937:                 rol.l #7,d0
01:00003572 6100FE76        	  5938:                 bsr ROx_FLAGS
01:00003576 E198            	  5939:                 rol.l #8,d0
01:00003578 6100FE70        	  5940:                 bsr ROx_FLAGS
01:0000357C 0C80FE300031    	  5941:                 cmpi.l #$FE300031,d0
01:00003582 66FE            	  5942:                 bne.s *
01:00003584 0C8500000065    	  5943:                 cmpi.l #$00000065,d5
01:0000358A 66FE            	  5944:                 bne.s *
                            	  5945: 
                            	  5946: *        LONG RIGHT
01:0000358C E298            	  5947:                 ror.l #1,d0
01:0000358E 6100FE5A        	  5948:                 bsr ROx_FLAGS
01:00003592 EA98            	  5949:                 ror.l #5,d0
01:00003594 6100FE54        	  5950:                 bsr ROx_FLAGS
01:00003598 EE98            	  5951:                 ror.l #7,d0
01:0000359A 6100FE4E        	  5952:                 bsr ROx_FLAGS
01:0000359E E098            	  5953:                 ror.l #8,d0
01:000035A0 6100FE48        	  5954:                 bsr ROx_FLAGS
01:000035A4 0C8080018FF1    	  5955:                 cmpi.l #$80018FF1,d0
01:000035AA 66FE            	  5956:                 bne.s *
01:000035AC 0C8500000080    	  5957:                 cmpi.l #$00000080,d5
01:000035B2 66FE            	  5958:                 bne.s *
                            	  5959: 
                            	  5960: 
                            	  5961: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5962: 
01:000035B4 7A00            	  5963:                 moveq  #$00000000,d5
01:000035B6 307C0100        	  5964:                 move.l #$00000100,a0
01:000035BA 30BC8FF1        	  5965:                 move.w #$8FF1,(a0)
                            	  5966: 
                            	  5967: *        WORD LEFT
01:000035BE E7D0            	  5968:                 rol (a0)
01:000035C0 6100FE28        	  5969:                 bsr ROx_FLAGS
01:000035C4 E7D0            	  5970:                 rol (a0)
01:000035C6 6100FE22        	  5971:                 bsr ROx_FLAGS
01:000035CA E7D0            	  5972:                 rol (a0)
01:000035CC 6100FE1C        	  5973:                 bsr ROx_FLAGS
01:000035D0 E7D0            	  5974:                 rol (a0)
01:000035D2 6100FE16        	  5975:                 bsr ROx_FLAGS
01:000035D6 3010            	  5976:                 move.w (a0),d0
01:000035D8 0C808001FF18    	  5977:                 cmpi.l #$8001FF18,d0
01:000035DE 66FE            	  5978:                 bne.s *
01:000035E0 0C8500000009    	  5979:                 cmpi.l #$00000009,d5
01:000035E6 66FE            	  5980:                 bne.s *
                            	  5981: 
                            	  5982: *        WORD RIGHT
01:000035E8 E6D0            	  5983:                 ror (a0)
01:000035EA 6100FDFE        	  5984:                 bsr ROx_FLAGS
01:000035EE E6D0            	  5985:                 ror (a0)
01:000035F0 6100FDF8        	  5986:                 bsr ROx_FLAGS
01:000035F4 E6D0            	  5987:                 ror (a0)
01:000035F6 6100FDF2        	  5988:                 bsr ROx_FLAGS
01:000035FA E6D0            	  5989:                 ror (a0)
01:000035FC 6100FDEC        	  5990:                 bsr ROx_FLAGS
01:00003600 E6D0            	  5991:                 ror (a0)
01:00003602 6100FDE6        	  5992:                 bsr ROx_FLAGS
01:00003606 E6D0            	  5993:                 ror (a0)
01:00003608 6100FDE0        	  5994:                 bsr ROx_FLAGS
01:0000360C 3010            	  5995:                 move.w (a0),d0
01:0000360E 0C80800163FC    	  5996:                 cmpi.l #$800163FC,d0
01:00003614 66FE            	  5997:                 bne.s *
01:00003616 0C850000001B    	  5998:                 cmpi.l #$0000001B,d5
01:0000361C 66FE            	  5999:                 bne.s *
                            	  6000: 
01:0000361E 4E75            	  6001:                 rts
                            	  6002: 
                            	  6003: 
                            	  6004: 
                            	  6005: *-----------------------------------------------------------
                            	  6006: *-----------------------------------------------------------
                            	  6007: * OPCODE : ROXx
                            	  6008: *-----------------------------------------------------------
                            	  6009: *-----------------------------------------------------------
                            	  6010: 
                            	  6011: *     Subroutine to check and accumulate the flags
01:00003620 40C3            	  6012: ROXx_FLAGS:     move.w sr,d3
01:00003622 02830000000F    	  6013:                 andi.l #$0F,d3            * Isolate flags
01:00003628 DA83            	  6014:                 add.l d3,d5               * Copy flag results into accumulator
01:0000362A 4E75            	  6015:                 rts
                            	  6016: 
                            	  6017: op_ROXx:
                            	  6018: 
                            	  6019: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6020: 
                            	  6021: *        BYTE LEFT
01:0000362C 203C80018FF1    	  6022:                 move.l #$80018FF1,d0
01:00003632 7A00            	  6023:                 moveq  #$00000000,d5
01:00003634 7C11            	  6024:                 moveq  #$00000011,d6
                            	  6025: ROXx_LOOP1:
01:00003636 ED30            	  6026:                 roxl.b d6,d0
01:00003638 61E6            	  6027:                 bsr ROXx_FLAGS
01:0000363A 51CEFFFA        	  6028:                 dbf d6,ROXx_LOOP1
01:0000363E 0C8080018FD0    	  6029:                 cmpi.l #$80018FD0,d0
01:00003644 66FE            	  6030:                 bne.s *
01:00003646 0C8500000042    	  6031:                 cmpi.l #$00000042,d5
01:0000364C 66FE            	  6032:                 bne.s *
                            	  6033: 
                            	  6034: *        BYTE RIGHT
01:0000364E 203C80018FF1    	  6035:                 move.l #$80018FF1,d0
01:00003654 7C12            	  6036:                 moveq  #$00000012,d6
                            	  6037: ROXx_LOOP2:
01:00003656 EC30            	  6038:                 roxr.b d6,d0
01:00003658 61C6            	  6039:                 bsr ROXx_FLAGS
01:0000365A 51CEFFFA        	  6040:                 dbf d6,ROXx_LOOP2
01:0000365E 0C8080018F51    	  6041:                 cmpi.l #$80018F51,d0
01:00003664 66FE            	  6042:                 bne.s *
01:00003666 0C850000009C    	  6043:                 cmpi.l #$0000009C,d5
01:0000366C 66FE            	  6044:                 bne.s *
                            	  6045: 
                            	  6046: 
                            	  6047: *        WORD LEFT
01:0000366E 203C80018FF1    	  6048:                 move.l #$80018FF1,d0
01:00003674 7C13            	  6049:                 moveq  #$00000013,d6
                            	  6050: ROXx_LOOP3:
01:00003676 ED70            	  6051:                 roxl.w d6,d0
01:00003678 61A6            	  6052:                 bsr ROXx_FLAGS
01:0000367A 51CEFFFA        	  6053:                 dbf d6,ROXx_LOOP3
01:0000367E 0C8080013980    	  6054:                 cmpi.l #$80013980,d0
01:00003684 66FE            	  6055:                 bne.s *
01:00003686 0C85000000C9    	  6056:                 cmpi.l #$000000C9,d5
01:0000368C 66FE            	  6057:                 bne.s *
                            	  6058: 
                            	  6059: *        WORD RIGHT
01:0000368E 203C80018FF1    	  6060:                 move.l #$80018FF1,d0
01:00003694 7C1E            	  6061:                 move.l #$0000001E,d6
                            	  6062: ROXx_LOOP4:
01:00003696 EC70            	  6063:                 roxr.w d6,d0
01:00003698 6186            	  6064:                 bsr ROXx_FLAGS
01:0000369A 51CEFFFA        	  6065:                 dbf d6,ROXx_LOOP4
01:0000369E 0C8080010A1D    	  6066:                 cmpi.l #$80010A1D,d0
01:000036A4 66FE            	  6067:                 bne.s *
01:000036A6 0C850000014D    	  6068:                 cmpi.l #$0000014D,d5
01:000036AC 66FE            	  6069:                 bne.s *
                            	  6070: 
                            	  6071: 
                            	  6072: *        LONG LEFT
01:000036AE 203C80018FF1    	  6073:                 move.l #$80018FF1,d0
01:000036B4 7C15            	  6074:                 moveq  #$00000015,d6
                            	  6075: ROXx_LOOP5:
01:000036B6 EDB0            	  6076:                 roxl.l d6,d0
01:000036B8 6100FF66        	  6077:                 bsr ROXx_FLAGS
01:000036BC 51CEFFF8        	  6078:                 dbf d6,ROXx_LOOP5
01:000036C0 0C80800185D0    	  6079:                 cmpi.l #$800185D0,d0
01:000036C6 66FE            	  6080:                 bne.s *
01:000036C8 0C85000001A1    	  6081:                 cmpi.l #$000001A1,d5
01:000036CE 66FE            	  6082:                 bne.s *
                            	  6083: 
                            	  6084: *        LONG RIGHT
01:000036D0 203C80018FF1    	  6085:                 move.l #$80018FF1,d0
01:000036D6 7C16            	  6086:                 moveq  #$00000016,d6
                            	  6087: ROXx_LOOP6:
01:000036D8 ECB0            	  6088:                 roxr.l d6,d0
01:000036DA 6100FF44        	  6089:                 bsr ROXx_FLAGS
01:000036DE 51CEFFF8        	  6090:                 dbf d6,ROXx_LOOP6
01:000036E2 0C80082D8200    	  6091:                 cmpi.l #$082D8200,d0
01:000036E8 66FE            	  6092:                 bne.s *
01:000036EA 0C85000001DE    	  6093:                 cmpi.l #$000001DE,d5
01:000036F0 66FE            	  6094:                 bne.s *
                            	  6095: 
                            	  6096: 
                            	  6097: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6098: 
01:000036F2 203C80018FF1    	  6099:                 move.l #$80018FF1,d0
01:000036F8 7A00            	  6100:                 moveq  #$00000000,d5
                            	  6101: 
                            	  6102: *        BYTE LEFT
01:000036FA E310            	  6103:                 roxl.b #1,d0
01:000036FC 6100FF22        	  6104:                 bsr ROXx_FLAGS
01:00003700 EB10            	  6105:                 roxl.b #5,d0
01:00003702 6100FF1C        	  6106:                 bsr ROXx_FLAGS
01:00003706 EF10            	  6107:                 roxl.b #7,d0
01:00003708 6100FF16        	  6108:                 bsr ROXx_FLAGS
01:0000370C E110            	  6109:                 roxl.b #8,d0
01:0000370E 6100FF10        	  6110:                 bsr ROXx_FLAGS
01:00003712 0C8080018F09    	  6111:                 cmpi.l #$80018F09,d0
01:00003718 66FE            	  6112:                 bne.s *
01:0000371A 0C850000000B    	  6113:                 cmpi.l #$0000000B,d5
01:00003720 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        BYTE RIGHT
01:00003722 E210            	  6117:                 roxr.b #1,d0
01:00003724 6100FEFA        	  6118:                 bsr ROXx_FLAGS
01:00003728 EA10            	  6119:                 roxr.b #5,d0
01:0000372A 6100FEF4        	  6120:                 bsr ROXx_FLAGS
01:0000372E EE10            	  6121:                 roxr.b #7,d0
01:00003730 6100FEEE        	  6122:                 bsr ROXx_FLAGS
01:00003734 E010            	  6123:                 roxr.b #8,d0
01:00003736 6100FEE8        	  6124:                 bsr ROXx_FLAGS
01:0000373A 0C8080018F00    	  6125:                 cmpi.l #$80018F00,d0
01:00003740 66FE            	  6126:                 bne.s *
01:00003742 0C8500000015    	  6127:                 cmpi.l #$00000015,d5
01:00003748 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        WORD LEFT
01:0000374A E350            	  6131:                 roxl.w #1,d0
01:0000374C 6100FED2        	  6132:                 bsr ROXx_FLAGS
01:00003750 EB50            	  6133:                 roxl.w #5,d0
01:00003752 6100FECC        	  6134:                 bsr ROXx_FLAGS
01:00003756 EF50            	  6135:                 roxl.w #7,d0
01:00003758 6100FEC6        	  6136:                 bsr ROXx_FLAGS
01:0000375C E150            	  6137:                 roxl.w #8,d0
01:0000375E 6100FEC0        	  6138:                 bsr ROXx_FLAGS
01:00003762 0C808001B000    	  6139:                 cmpi.l #$8001B000,d0
01:00003768 66FE            	  6140:                 bne.s *
01:0000376A 0C8500000027    	  6141:                 cmpi.l #$00000027,d5
01:00003770 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        WORD RIGHT
01:00003772 E250            	  6145:                 roxr.w #1,d0
01:00003774 6100FEAA        	  6146:                 bsr ROXx_FLAGS
01:00003778 EA50            	  6147:                 roxr.w #5,d0
01:0000377A 6100FEA4        	  6148:                 bsr ROXx_FLAGS
01:0000377E EE50            	  6149:                 roxr.w #7,d0
01:00003780 6100FE9E        	  6150:                 bsr ROXx_FLAGS
01:00003784 E050            	  6151:                 roxr.w #8,d0
01:00003786 6100FE98        	  6152:                 bsr ROXx_FLAGS
01:0000378A 0C8080010A00    	  6153:                 cmpi.l #$80010A00,d0
01:00003790 66FE            	  6154:                 bne.s *
01:00003792 0C8500000028    	  6155:                 cmpi.l #$00000028,d5
01:00003798 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: *        LONG LEFT
01:0000379A E390            	  6159:                 roxl.l #1,d0
01:0000379C 6100FE82        	  6160:                 bsr ROXx_FLAGS
01:000037A0 EB90            	  6161:                 roxl.l #5,d0
01:000037A2 6100FE7C        	  6162:                 bsr ROXx_FLAGS
01:000037A6 EF90            	  6163:                 roxl.l #7,d0
01:000037A8 6100FE76        	  6164:                 bsr ROXx_FLAGS
01:000037AC E190            	  6165:                 roxl.l #8,d0
01:000037AE 6100FE70        	  6166:                 bsr ROXx_FLAGS
01:000037B2 0C8040000010    	  6167:                 cmpi.l #$40000010,d0
01:000037B8 66FE            	  6168:                 bne.s *
01:000037BA 0C850000002A    	  6169:                 cmpi.l #$0000002A,d5
01:000037C0 66FE            	  6170:                 bne.s *
                            	  6171: 
                            	  6172: *        LONG RIGHT
01:000037C2 E290            	  6173:                 roxr.l #1,d0
01:000037C4 6100FE5A        	  6174:                 bsr ROXx_FLAGS
01:000037C8 EA90            	  6175:                 roxr.l #5,d0
01:000037CA 6100FE54        	  6176:                 bsr ROXx_FLAGS
01:000037CE EE90            	  6177:                 roxr.l #7,d0
01:000037D0 6100FE4E        	  6178:                 bsr ROXx_FLAGS
01:000037D4 E090            	  6179:                 roxr.l #8,d0
01:000037D6 6100FE48        	  6180:                 bsr ROXx_FLAGS
01:000037DA 0C8000010200    	  6181:                 cmpi.l #$00010200,d0
01:000037E0 66FE            	  6182:                 bne.s *
01:000037E2 0C8500000032    	  6183:                 cmpi.l #$00000032,d5
01:000037E8 66FE            	  6184:                 bne.s *
                            	  6185: 
                            	  6186: 
                            	  6187: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6188: 
01:000037EA 7A00            	  6189:                 moveq  #$00000000,d5
01:000037EC 307C0100        	  6190:                 move.l #$00000100,a0
01:000037F0 30BC8FF1        	  6191:                 move.w #$8FF1,(a0)
                            	  6192: 
                            	  6193: *        WORD LEFT
01:000037F4 E5D0            	  6194:                 roxl (a0)
01:000037F6 6100FE28        	  6195:                 bsr ROXx_FLAGS
01:000037FA E5D0            	  6196:                 roxl (a0)
01:000037FC 6100FE22        	  6197:                 bsr ROXx_FLAGS
01:00003800 E5D0            	  6198:                 roxl (a0)
01:00003802 6100FE1C        	  6199:                 bsr ROXx_FLAGS
01:00003806 E5D0            	  6200:                 roxl (a0)
01:00003808 6100FE16        	  6201:                 bsr ROXx_FLAGS
01:0000380C 3010            	  6202:                 move.w (a0),d0
01:0000380E 0C800001FF10    	  6203:                 cmpi.l #$0001FF10,d0
01:00003814 66FE            	  6204:                 bne.s *
01:00003816 0C8500000009    	  6205:                 cmpi.l #$00000009,d5
01:0000381C 66FE            	  6206:                 bne.s *
                            	  6207: 
                            	  6208: *        WORD RIGHT
01:0000381E E4D0            	  6209:                 roxr (a0)
01:00003820 6100FDFE        	  6210:                 bsr ROXx_FLAGS
01:00003824 E4D0            	  6211:                 roxr (a0)
01:00003826 6100FDF8        	  6212:                 bsr ROXx_FLAGS
01:0000382A E4D0            	  6213:                 roxr (a0)
01:0000382C 6100FDF2        	  6214:                 bsr ROXx_FLAGS
01:00003830 E4D0            	  6215:                 roxr (a0)
01:00003832 6100FDEC        	  6216:                 bsr ROXx_FLAGS
01:00003836 E4D0            	  6217:                 roxr (a0)
01:00003838 6100FDE6        	  6218:                 bsr ROXx_FLAGS
01:0000383C E4D0            	  6219:                 roxr (a0)
01:0000383E 6100FDE0        	  6220:                 bsr ROXx_FLAGS
01:00003842 3010            	  6221:                 move.w (a0),d0
01:00003844 0C80000103FC    	  6222:                 cmpi.l #$000103FC,d0
01:0000384A 66FE            	  6223:                 bne.s *
01:0000384C 0C850000000A    	  6224:                 cmpi.l #$0000000A,d5
01:00003852 66FE            	  6225:                 bne.s *
                            	  6226: 
01:00003854 4E75            	  6227:                 rts
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: *-----------------------------------------------------------
                            	  6233: *-----------------------------------------------------------
                            	  6234: * OPCODE : SHIFTS
                            	  6235: *-----------------------------------------------------------
                            	  6236: *-----------------------------------------------------------
                            	  6237: 
                            	  6238: *     Subroutine to check and accumulate the flags
01:00003856 40C3            	  6239: SHIFTS_FLAGS:   move.w sr,d3
01:00003858 02830000000F    	  6240:                 andi.l #$0F,d3            * Isolate flags
01:0000385E DA83            	  6241:                 add.l d3,d5               * Copy flag results into accumulator
01:00003860 4E75            	  6242:                 rts
                            	  6243: 
                            	  6244: op_SHIFTS:
                            	  6245: 
                            	  6246: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6247: 
                            	  6248: *        BYTE LEFT
01:00003862 203C80018F81    	  6249:                 move.l #$80018F81,d0
01:00003868 7A00            	  6250:                 moveq  #$00000000,d5
01:0000386A 7C02            	  6251:                 moveq  #$00000002,d6
                            	  6252: SHIFTS_LOOP1:
01:0000386C ED20            	  6253:                 asl.b d6,d0
01:0000386E 61E6            	  6254:                 bsr SHIFTS_FLAGS
01:00003870 51CEFFFA        	  6255:                 dbf d6,SHIFTS_LOOP1
01:00003874 0C8080018F08    	  6256:                 cmpi.l #$80018F08,d0
01:0000387A 66FE            	  6257:                 bne.s *
01:0000387C 0C8500000002    	  6258:                 cmpi.l #$00000002,d5
01:00003882 66FE            	  6259:                 bne.s *
                            	  6260: 
                            	  6261: *        BYTE RIGHT
01:00003884 203C80018F81    	  6262:                 move.l #$80018F81,d0
01:0000388A 7C02            	  6263:                 moveq  #$00000002,d6
                            	  6264: SHIFTS_LOOP2:
01:0000388C EC20            	  6265:                 asr.b d6,d0
01:0000388E 61C6            	  6266:                 bsr SHIFTS_FLAGS
01:00003890 51CEFFFA        	  6267:                 dbf d6,SHIFTS_LOOP2
01:00003894 0C8080018FF0    	  6268:                 cmpi.l #$80018FF0,d0
01:0000389A 66FE            	  6269:                 bne.s *
01:0000389C 0C850000001A    	  6270:                 cmpi.l #$0000001A,d5
01:000038A2 66FE            	  6271:                 bne.s *
                            	  6272: 
                            	  6273: 
                            	  6274: *        WORD LEFT
01:000038A4 203C80018FF1    	  6275:                 move.l #$80018FF1,d0
01:000038AA 7C02            	  6276:                 moveq  #$00000002,d6
                            	  6277: SHIFTS_LOOP3:
01:000038AC ED60            	  6278:                 asl.w d6,d0
01:000038AE 61A6            	  6279:                 bsr SHIFTS_FLAGS
01:000038B0 51CEFFFA        	  6280:                 dbf d6,SHIFTS_LOOP3
01:000038B4 0C8080017F88    	  6281:                 cmpi.l #$80017F88,d0
01:000038BA 66FE            	  6282:                 bne.s *
01:000038BC 0C850000001C    	  6283:                 cmpi.l #$0000001C,d5
01:000038C2 66FE            	  6284:                 bne.s *
                            	  6285: 
                            	  6286: *        WORD RIGHT
01:000038C4 203C80018FF1    	  6287:                 move.l #$80018FF1,d0
01:000038CA 7C02            	  6288:                 moveq  #$00000002,d6
                            	  6289: SHIFTS_LOOP4:
01:000038CC EC60            	  6290:                 asr.w d6,d0
01:000038CE 6186            	  6291:                 bsr SHIFTS_FLAGS
01:000038D0 51CEFFFA        	  6292:                 dbf d6,SHIFTS_LOOP4
01:000038D4 0C808001F1FE    	  6293:                 cmpi.l #$8001F1FE,d0
01:000038DA 66FE            	  6294:                 bne.s *
01:000038DC 0C8500000034    	  6295:                 cmpi.l #$00000034,d5
01:000038E2 66FE            	  6296:                 bne.s *
                            	  6297: 
                            	  6298: 
                            	  6299: *        LONG LEFT
01:000038E4 203C80018FF1    	  6300:                 move.l #$80018FF1,d0
01:000038EA 7C02            	  6301:                 moveq  #$00000002,d6
                            	  6302: SHIFTS_LOOP5:
01:000038EC EDA0            	  6303:                 asl.l d6,d0
01:000038EE 6100FF66        	  6304:                 bsr SHIFTS_FLAGS
01:000038F2 51CEFFF8        	  6305:                 dbf d6,SHIFTS_LOOP5
01:000038F6 0C80000C7F88    	  6306:                 cmpi.l #$000C7F88,d0
01:000038FC 66FE            	  6307:                 bne.s *
01:000038FE 0C8500000036    	  6308:                 cmpi.l #$00000036,d5
01:00003904 66FE            	  6309:                 bne.s *
                            	  6310: 
                            	  6311: *        LONG RIGHT
01:00003906 203C80018FF1    	  6312:                 move.l #$80018FF1,d0
01:0000390C 7C02            	  6313:                 moveq  #$00000002,d6
                            	  6314: SHIFTS_LOOP6:
01:0000390E ECA0            	  6315:                 asr.l d6,d0
01:00003910 6100FF44        	  6316:                 bsr SHIFTS_FLAGS
01:00003914 51CEFFF8        	  6317:                 dbf d6,SHIFTS_LOOP6
01:00003918 0C80F00031FE    	  6318:                 cmpi.l #$F00031FE,d0
01:0000391E 66FE            	  6319:                 bne.s *
01:00003920 0C850000004E    	  6320:                 cmpi.l #$0000004E,d5
01:00003926 66FE            	  6321:                 bne.s *
                            	  6322: 
                            	  6323: 
                            	  6324: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6325: 
01:00003928 203C80018FF1    	  6326:                 move.l #$80018FF1,d0
01:0000392E 7A00            	  6327:                 moveq  #$00000000,d5
                            	  6328: 
                            	  6329: *        BYTE LEFT
01:00003930 D000            	  6330:                 asl.b #1,d0
01:00003932 6100FF22        	  6331:                 bsr SHIFTS_FLAGS
01:00003936 E500            	  6332:                 asl.b #2,d0
01:00003938 6100FF1C        	  6333:                 bsr SHIFTS_FLAGS
01:0000393C D000            	  6334:                 asl.b #1,d0
01:0000393E 6100FF16        	  6335:                 bsr SHIFTS_FLAGS
01:00003942 E700            	  6336:                 asl.b #3,d0
01:00003944 6100FF10        	  6337:                 bsr SHIFTS_FLAGS
01:00003948 0C8080018F80    	  6338:                 cmpi.l #$80018F80,d0
01:0000394E 66FE            	  6339:                 bne.s *
01:00003950 0C850000001F    	  6340:                 cmpi.l #$0000001F,d5
01:00003956 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        BYTE RIGHT
01:00003958 E200            	  6344:                 asr.b #1,d0
01:0000395A 6100FEFA        	  6345:                 bsr SHIFTS_FLAGS
01:0000395E E400            	  6346:                 asr.b #2,d0
01:00003960 6100FEF4        	  6347:                 bsr SHIFTS_FLAGS
01:00003964 E600            	  6348:                 asr.b #3,d0
01:00003966 6100FEEE        	  6349:                 bsr SHIFTS_FLAGS
01:0000396A E200            	  6350:                 asr.b #1,d0
01:0000396C 6100FEE8        	  6351:                 bsr SHIFTS_FLAGS
01:00003970 0C8080018FFF    	  6352:                 cmpi.l #$80018FFF,d0
01:00003976 66FE            	  6353:                 bne.s *
01:00003978 0C850000003F    	  6354:                 cmpi.l #$0000003F,d5
01:0000397E 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        WORD LEFT
01:00003980 D040            	  6358:                 asl.w #1,d0
01:00003982 6100FED2        	  6359:                 bsr SHIFTS_FLAGS
01:00003986 E540            	  6360:                 asl.w #2,d0
01:00003988 6100FECC        	  6361:                 bsr SHIFTS_FLAGS
01:0000398C E740            	  6362:                 asl.w #3,d0
01:0000398E 6100FEC6        	  6363:                 bsr SHIFTS_FLAGS
01:00003992 EB40            	  6364:                 asl.w #5,d0
01:00003994 6100FEC0        	  6365:                 bsr SHIFTS_FLAGS
01:00003998 0C808001F800    	  6366:                 cmpi.l #$8001F800,d0
01:0000399E 66FE            	  6367:                 bne.s *
01:000039A0 0C8500000056    	  6368:                 cmpi.l #$00000056,d5
01:000039A6 66FE            	  6369:                 bne.s *
                            	  6370: 
                            	  6371: *        WORD RIGHT
01:000039A8 EA40            	  6372:                 asr.w #5,d0
01:000039AA 6100FEAA        	  6373:                 bsr SHIFTS_FLAGS
01:000039AE E240            	  6374:                 asr.w #1,d0
01:000039B0 6100FEA4        	  6375:                 bsr SHIFTS_FLAGS
01:000039B4 E440            	  6376:                 asr.w #2,d0
01:000039B6 6100FE9E        	  6377:                 bsr SHIFTS_FLAGS
01:000039BA E840            	  6378:                 asr.w #4,d0
01:000039BC 6100FE98        	  6379:                 bsr SHIFTS_FLAGS
01:000039C0 0C808001FFFF    	  6380:                 cmpi.l #$8001FFFF,d0
01:000039C6 66FE            	  6381:                 bne.s *
01:000039C8 0C8500000077    	  6382:                 cmpi.l #$00000077,d5
01:000039CE 66FE            	  6383:                 bne.s *
                            	  6384: 
                            	  6385: *        LONG LEFT
01:000039D0 203C80018FF1    	  6386:                 move.l #$80018FF1,d0
01:000039D6 D080            	  6387:                 asl.l #1,d0
01:000039D8 6100FE7C        	  6388:                 bsr SHIFTS_FLAGS
01:000039DC E580            	  6389:                 asl.l #2,d0
01:000039DE 6100FE76        	  6390:                 bsr SHIFTS_FLAGS
01:000039E2 EF80            	  6391:                 asl.l #7,d0
01:000039E4 6100FE70        	  6392:                 bsr SHIFTS_FLAGS
01:000039E8 E980            	  6393:                 asl.l #4,d0
01:000039EA 6100FE6A        	  6394:                 bsr SHIFTS_FLAGS
01:000039EE 0C8063FC4000    	  6395:                 cmpi.l #$63FC4000,d0
01:000039F4 66FE            	  6396:                 bne.s *
01:000039F6 0C850000007A    	  6397:                 cmpi.l #$0000007A,d5
01:000039FC 66FE            	  6398:                 bne.s *
                            	  6399: 
                            	  6400: *        LONG RIGHT
01:000039FE 203C80018FF1    	  6401:                 move.l #$80018FF1,d0
01:00003A04 E280            	  6402:                 asr.l #1,d0
01:00003A06 6100FE4E        	  6403:                 bsr SHIFTS_FLAGS
01:00003A0A EA80            	  6404:                 asr.l #5,d0
01:00003A0C 6100FE48        	  6405:                 bsr SHIFTS_FLAGS
01:00003A10 EE80            	  6406:                 asr.l #7,d0
01:00003A12 6100FE42        	  6407:                 bsr SHIFTS_FLAGS
01:00003A16 E080            	  6408:                 asr.l #8,d0
01:00003A18 6100FE3C        	  6409:                 bsr SHIFTS_FLAGS
01:00003A1C 0C80FFFFFC00    	  6410:                 cmpi.l #$FFFFFC00,d0
01:00003A22 66FE            	  6411:                 bne.s *
01:00003A24 0C850000009C    	  6412:                 cmpi.l #$0000009C,d5
01:00003A2A 66FE            	  6413:                 bne.s *
                            	  6414: 
                            	  6415: 
                            	  6416: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6417: 
01:00003A2C 7A00            	  6418:                 moveq  #$00000000,d5
01:00003A2E 307C0100        	  6419:                 move.l #$00000100,a0
01:00003A32 30BC8FF1        	  6420:                 move.w #$8FF1,(a0)
                            	  6421: 
                            	  6422: *        WORD LEFT
01:00003A36 E1D0            	  6423:                 asl  (a0)
01:00003A38 6100FE1C        	  6424:                 bsr SHIFTS_FLAGS
01:00003A3C E1D0            	  6425:                 asl  (a0)
01:00003A3E 6100FE16        	  6426:                 bsr SHIFTS_FLAGS
01:00003A42 E1D0            	  6427:                 asl  (a0)
01:00003A44 6100FE10        	  6428:                 bsr SHIFTS_FLAGS
01:00003A48 E1D0            	  6429:                 asl  (a0)
01:00003A4A 6100FE0A        	  6430:                 bsr SHIFTS_FLAGS
01:00003A4E 3010            	  6431:                 move.w (a0),d0
01:00003A50 0C80FFFFFF10    	  6432:                 cmpi.l #$FFFFFF10,d0
01:00003A56 66FE            	  6433:                 bne.s *
01:00003A58 0C850000000D    	  6434:                 cmpi.l #$0000000D,d5
01:00003A5E 66FE            	  6435:                 bne.s *
                            	  6436: 
                            	  6437: *        WORD RIGHT
01:00003A60 E0D0            	  6438:                 asr (a0)
01:00003A62 6100FDF2        	  6439:                 bsr SHIFTS_FLAGS
01:00003A66 E0D0            	  6440:                 asr (a0)
01:00003A68 6100FDEC        	  6441:                 bsr SHIFTS_FLAGS
01:00003A6C E0D0            	  6442:                 asr (a0)
01:00003A6E 6100FDE6        	  6443:                 bsr SHIFTS_FLAGS
01:00003A72 E0D0            	  6444:                 asr (a0)
01:00003A74 6100FDE0        	  6445:                 bsr SHIFTS_FLAGS
01:00003A78 E0D0            	  6446:                 asr (a0)
01:00003A7A 6100FDDA        	  6447:                 bsr SHIFTS_FLAGS
01:00003A7E E0D0            	  6448:                 asr (a0)
01:00003A80 6100FDD4        	  6449:                 bsr SHIFTS_FLAGS
01:00003A84 3010            	  6450:                 move.w (a0),d0
01:00003A86 0C80FFFFFFFC    	  6451:                 cmpi.l #$FFFFFFFC,d0
01:00003A8C 66FE            	  6452:                 bne.s *
01:00003A8E 0C850000003E    	  6453:                 cmpi.l #$0000003E,d5
01:00003A94 66FE            	  6454:                 bne.s *
                            	  6455: 
01:00003A96 4E75            	  6456:                 rts
                            	  6457: 
                            	  6458: 
                            	  6459: 
                            	  6460: *-----------------------------------------------------------
                            	  6461: *-----------------------------------------------------------
                            	  6462: * OPCODE : SHIFTS2
                            	  6463: *-----------------------------------------------------------
                            	  6464: *-----------------------------------------------------------
                            	  6465: 
                            	  6466: *     Subroutine to check and accumulate the flags
01:00003A98 40C3            	  6467: SHIFTS2_FLAGS:  move.w sr,d3
01:00003A9A 02830000000F    	  6468:                 andi.l #$0F,d3            * Isolate flags
01:00003AA0 DA83            	  6469:                 add.l d3,d5               * Copy flag results into accumulator
01:00003AA2 4E75            	  6470:                 rts
                            	  6471: 
                            	  6472: op_SHIFTS2:
                            	  6473: 
                            	  6474: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6475: 
                            	  6476: *        BYTE LEFT
01:00003AA4 203C80018F81    	  6477:                 move.l #$80018F81,d0
01:00003AAA 7A00            	  6478:                 moveq  #$00000000,d5
01:00003AAC 7C02            	  6479:                 moveq  #$00000002,d6
                            	  6480: SHIFTS2_LOOP1:
01:00003AAE ED28            	  6481:                 lsl.b d6,d0
01:00003AB0 61E6            	  6482:                 bsr SHIFTS2_FLAGS
01:00003AB2 51CEFFFA        	  6483:                 dbf d6,SHIFTS2_LOOP1
01:00003AB6 0C8080018F08    	  6484:                 cmpi.l #$80018F08,d0
01:00003ABC 66FE            	  6485:                 bne.s *
01:00003ABE 4A85            	  6486:                 cmpi.l #$00000000,d5
01:00003AC0 66FE            	  6487:                 bne.s *
                            	  6488: 
                            	  6489: *        BYTE RIGHT
01:00003AC2 203C80018F81    	  6490:                 move.l #$80018F81,d0
01:00003AC8 7C02            	  6491:                 moveq  #$00000002,d6
                            	  6492: SHIFTS2_LOOP2:
01:00003ACA EC28            	  6493:                 lsr.b d6,d0
01:00003ACC 61CA            	  6494:                 bsr SHIFTS2_FLAGS
01:00003ACE 51CEFFFA        	  6495:                 dbf d6,SHIFTS2_LOOP2
01:00003AD2 0C8080018F10    	  6496:                 cmpi.l #$80018F10,d0
01:00003AD8 66FE            	  6497:                 bne.s *
01:00003ADA 4A85            	  6498:                 cmpi.l #$00000000,d5
01:00003ADC 66FE            	  6499:                 bne.s *
                            	  6500: 
                            	  6501: 
                            	  6502: *        WORD LEFT
01:00003ADE 203C80018FF1    	  6503:                 move.l #$80018FF1,d0
01:00003AE4 7C02            	  6504:                 moveq  #$00000002,d6
                            	  6505: SHIFTS2_LOOP3:
01:00003AE6 ED68            	  6506:                 lsl.w d6,d0
01:00003AE8 61AE            	  6507:                 bsr SHIFTS2_FLAGS
01:00003AEA 51CEFFFA        	  6508:                 dbf d6,SHIFTS2_LOOP3
01:00003AEE 0C8080017F88    	  6509:                 cmpi.l #$80017F88,d0
01:00003AF4 66FE            	  6510:                 bne.s *
01:00003AF6 4A85            	  6511:                 cmpi.l #$00000000,d5
01:00003AF8 66FE            	  6512:                 bne.s *
                            	  6513: 
                            	  6514: *        WORD RIGHT
01:00003AFA 203C80018FF1    	  6515:                 move.l #$80018FF1,d0
01:00003B00 7C02            	  6516:                 moveq  #$00000002,d6
                            	  6517: SHIFTS2_LOOP4:
01:00003B02 EC68            	  6518:                 lsr.w d6,d0
01:00003B04 6192            	  6519:                 bsr SHIFTS2_FLAGS
01:00003B06 51CEFFFA        	  6520:                 dbf d6,SHIFTS2_LOOP4
01:00003B0A 0C80800111FE    	  6521:                 cmpi.l #$800111FE,d0
01:00003B10 66FE            	  6522:                 bne.s *
01:00003B12 4A85            	  6523:                 cmpi.l #$00000000,d5
01:00003B14 66FE            	  6524:                 bne.s *
                            	  6525: 
                            	  6526: 
                            	  6527: *        LONG LEFT
01:00003B16 203C80018FF1    	  6528:                 move.l #$80018FF1,d0
01:00003B1C 7C02            	  6529:                 moveq  #$00000002,d6
                            	  6530: SHIFTS2_LOOP5:
01:00003B1E EDA8            	  6531:                 lsl.l d6,d0
01:00003B20 6100FF76        	  6532:                 bsr SHIFTS2_FLAGS
01:00003B24 51CEFFF8        	  6533:                 dbf d6,SHIFTS2_LOOP5
01:00003B28 0C80000C7F88    	  6534:                 cmpi.l #$000C7F88,d0
01:00003B2E 66FE            	  6535:                 bne.s *
01:00003B30 4A85            	  6536:                 cmpi.l #$00000000,d5
01:00003B32 66FE            	  6537:                 bne.s *
                            	  6538: 
                            	  6539: *        LONG RIGHT
01:00003B34 203C80018FF1    	  6540:                 move.l #$80018FF1,d0
01:00003B3A 7C02            	  6541:                 moveq  #$00000002,d6
                            	  6542: SHIFTS2_LOOP6:
01:00003B3C ECA8            	  6543:                 lsr.l d6,d0
01:00003B3E 6100FF58        	  6544:                 bsr SHIFTS2_FLAGS
01:00003B42 51CEFFF8        	  6545:                 dbf d6,SHIFTS2_LOOP6
01:00003B46 0C80100031FE    	  6546:                 cmpi.l #$100031FE,d0
01:00003B4C 66FE            	  6547:                 bne.s *
01:00003B4E 4A85            	  6548:                 cmpi.l #$00000000,d5
01:00003B50 66FE            	  6549:                 bne.s *
                            	  6550: 
                            	  6551: 
                            	  6552: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6553: 
01:00003B52 203C80018FF1    	  6554:                 move.l #$80018FF1,d0
01:00003B58 7A00            	  6555:                 moveq  #$00000000,d5
                            	  6556: 
                            	  6557: *        BYTE LEFT
01:00003B5A E308            	  6558:                 lsl.b #1,d0
01:00003B5C 6100FF3A        	  6559:                 bsr SHIFTS2_FLAGS
01:00003B60 E508            	  6560:                 lsl.b #2,d0
01:00003B62 6100FF34        	  6561:                 bsr SHIFTS2_FLAGS
01:00003B66 E308            	  6562:                 lsl.b #1,d0
01:00003B68 6100FF2E        	  6563:                 bsr SHIFTS2_FLAGS
01:00003B6C E708            	  6564:                 lsl.b #3,d0
01:00003B6E 6100FF28        	  6565:                 bsr SHIFTS2_FLAGS
01:00003B72 0C8080018F80    	  6566:                 cmpi.l #$80018F80,d0
01:00003B78 66FE            	  6567:                 bne.s *
01:00003B7A 0C850000001B    	  6568:                 cmpi.l #$0000001B,d5
01:00003B80 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        BYTE RIGHT
01:00003B82 E208            	  6572:                 lsr.b #1,d0
01:00003B84 6100FF12        	  6573:                 bsr SHIFTS2_FLAGS
01:00003B88 E408            	  6574:                 lsr.b #2,d0
01:00003B8A 6100FF0C        	  6575:                 bsr SHIFTS2_FLAGS
01:00003B8E E608            	  6576:                 lsr.b #3,d0
01:00003B90 6100FF06        	  6577:                 bsr SHIFTS2_FLAGS
01:00003B94 E208            	  6578:                 lsr.b #1,d0
01:00003B96 6100FF00        	  6579:                 bsr SHIFTS2_FLAGS
01:00003B9A 0C8080018F01    	  6580:                 cmpi.l #$80018F01,d0
01:00003BA0 66FE            	  6581:                 bne.s *
01:00003BA2 0C850000001B    	  6582:                 cmpi.l #$0000001B,d5
01:00003BA8 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        WORD LEFT
01:00003BAA E348            	  6586:                 lsl.w #1,d0
01:00003BAC 6100FEEA        	  6587:                 bsr SHIFTS2_FLAGS
01:00003BB0 E548            	  6588:                 lsl.w #2,d0
01:00003BB2 6100FEE4        	  6589:                 bsr SHIFTS2_FLAGS
01:00003BB6 E748            	  6590:                 lsl.w #3,d0
01:00003BB8 6100FEDE        	  6591:                 bsr SHIFTS2_FLAGS
01:00003BBC EB48            	  6592:                 lsl.w #5,d0
01:00003BBE 6100FED8        	  6593:                 bsr SHIFTS2_FLAGS
01:00003BC2 0C8080010800    	  6594:                 cmpi.l #$80010800,d0
01:00003BC8 66FE            	  6595:                 bne.s *
01:00003BCA 0C8500000025    	  6596:                 cmpi.l #$00000025,d5
01:00003BD0 66FE            	  6597:                 bne.s *
                            	  6598: 
                            	  6599: *        WORD RIGHT
01:00003BD2 EA48            	  6600:                 lsr.w #5,d0
01:00003BD4 6100FEC2        	  6601:                 bsr SHIFTS2_FLAGS
01:00003BD8 E248            	  6602:                 lsr.w #1,d0
01:00003BDA 6100FEBC        	  6603:                 bsr SHIFTS2_FLAGS
01:00003BDE E448            	  6604:                 lsr.w #2,d0
01:00003BE0 6100FEB6        	  6605:                 bsr SHIFTS2_FLAGS
01:00003BE4 E848            	  6606:                 lsr.w #4,d0
01:00003BE6 6100FEB0        	  6607:                 bsr SHIFTS2_FLAGS
01:00003BEA 0C8080010000    	  6608:                 cmpi.l #$80010000,d0
01:00003BF0 66FE            	  6609:                 bne.s *
01:00003BF2 0C850000002A    	  6610:                 cmpi.l #$0000002A,d5
01:00003BF8 66FE            	  6611:                 bne.s *
                            	  6612: 
                            	  6613: *        LONG LEFT
01:00003BFA 203C80018FF1    	  6614:                 move.l #$80018FF1,d0
01:00003C00 E388            	  6615:                 lsl.l #1,d0
01:00003C02 6100FE94        	  6616:                 bsr SHIFTS2_FLAGS
01:00003C06 E588            	  6617:                 lsl.l #2,d0
01:00003C08 6100FE8E        	  6618:                 bsr SHIFTS2_FLAGS
01:00003C0C EF88            	  6619:                 lsl.l #7,d0
01:00003C0E 6100FE88        	  6620:                 bsr SHIFTS2_FLAGS
01:00003C12 E988            	  6621:                 lsl.l #4,d0
01:00003C14 6100FE82        	  6622:                 bsr SHIFTS2_FLAGS
01:00003C18 0C8063FC4000    	  6623:                 cmpi.l #$63FC4000,d0
01:00003C1E 66FE            	  6624:                 bne.s *
01:00003C20 0C850000002B    	  6625:                 cmpi.l #$0000002B,d5
01:00003C26 66FE            	  6626:                 bne.s *
                            	  6627: 
                            	  6628: *        LONG RIGHT
01:00003C28 203C80018FF1    	  6629:                 move.l #$80018FF1,d0
01:00003C2E E288            	  6630:                 lsr.l #1,d0
01:00003C30 6100FE66        	  6631:                 bsr SHIFTS2_FLAGS
01:00003C34 EA88            	  6632:                 lsr.l #5,d0
01:00003C36 6100FE60        	  6633:                 bsr SHIFTS2_FLAGS
01:00003C3A EE88            	  6634:                 lsr.l #7,d0
01:00003C3C 6100FE5A        	  6635:                 bsr SHIFTS2_FLAGS
01:00003C40 E088            	  6636:                 lsr.l #8,d0
01:00003C42 6100FE54        	  6637:                 bsr SHIFTS2_FLAGS
01:00003C46 0C8000000400    	  6638:                 cmpi.l #$00000400,d0
01:00003C4C 66FE            	  6639:                 bne.s *
01:00003C4E 0C850000002D    	  6640:                 cmpi.l #$0000002D,d5
01:00003C54 66FE            	  6641:                 bne.s *
                            	  6642: 
                            	  6643: 
                            	  6644: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6645: 
01:00003C56 7A00            	  6646:                 moveq  #$00000000,d5
01:00003C58 307C0100        	  6647:                 move.l #$00000100,a0
01:00003C5C 30BC8FF1        	  6648:                 move.w #$8FF1,(a0)
                            	  6649: 
                            	  6650: *        WORD LEFT
01:00003C60 E3D0            	  6651:                 lsl  (a0)
01:00003C62 6100FE34        	  6652:                 bsr SHIFTS2_FLAGS
01:00003C66 E3D0            	  6653:                 lsl  (a0)
01:00003C68 6100FE2E        	  6654:                 bsr SHIFTS2_FLAGS
01:00003C6C E3D0            	  6655:                 lsl  (a0)
01:00003C6E 6100FE28        	  6656:                 bsr SHIFTS2_FLAGS
01:00003C72 E3D0            	  6657:                 lsl  (a0)
01:00003C74 6100FE22        	  6658:                 bsr SHIFTS2_FLAGS
01:00003C78 3010            	  6659:                 move.w (a0),d0
01:00003C7A 0C800000FF10    	  6660:                 cmpi.l #$0000FF10,d0
01:00003C80 66FE            	  6661:                 bne.s *
01:00003C82 0C8500000009    	  6662:                 cmpi.l #$00000009,d5
01:00003C88 66FE            	  6663:                 bne.s *
                            	  6664: 
                            	  6665: *        WORD RIGHT
01:00003C8A E2D0            	  6666:                 lsr (a0)
01:00003C8C 6100FE0A        	  6667:                 bsr SHIFTS2_FLAGS
01:00003C90 E2D0            	  6668:                 lsr (a0)
01:00003C92 6100FE04        	  6669:                 bsr SHIFTS2_FLAGS
01:00003C96 E2D0            	  6670:                 lsr (a0)
01:00003C98 6100FDFE        	  6671:                 bsr SHIFTS2_FLAGS
01:00003C9C E2D0            	  6672:                 lsr (a0)
01:00003C9E 6100FDF8        	  6673:                 bsr SHIFTS2_FLAGS
01:00003CA2 E2D0            	  6674:                 lsr (a0)
01:00003CA4 6100FDF2        	  6675:                 bsr SHIFTS2_FLAGS
01:00003CA8 E2D0            	  6676:                 lsr (a0)
01:00003CAA 6100FDEC        	  6677:                 bsr SHIFTS2_FLAGS
01:00003CAE 3010            	  6678:                 move.w (a0),d0
01:00003CB0 0C80000003FC    	  6679:                 cmpi.l #$000003FC,d0
01:00003CB6 66FE            	  6680:                 bne.s *
01:00003CB8 0C850000000A    	  6681:                 cmpi.l #$0000000A,d5
01:00003CBE 66FE            	  6682:                 bne.s *
                            	  6683: 
01:00003CC0 4E75            	  6684:                 rts
                            	  6685: 
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ; OPCODE : BSR / RTS
                            	  6689: ;-----------------------------------------------------------
                            	  6690: ;-----------------------------------------------------------
                            	  6691: 
                            	  6692: ;t3_bsr:
                            	  6693: ;	moveq	#3,d3
                            	  6694: ;	rts
                            	  6695: 
                            	  6696: ;t1_bsr:
                            	  6697: ;	moveq	#1,d1
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;op_bsr:
                            	  6701: ;	bsr			t1_bsr
                            	  6702: ;	bsr			t2_bsr
                            	  6703: ;	bsr.w		t3_bsr
                            	  6704: ;	bsr.w		t4_bsr
                            	  6705: ;	cmpi.l	#1,d1
                            	  6706: ;	bne			*
                            	  6707: ;	cmpi.l	#2,d2
                            	  6708: ;	bne			*
                            	  6709: ;	cmpi.l	#3,d3
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#4,d4
                            	  6712: ;	bne			*
                            	  6713: ;	rts
                            	  6714: 
                            	  6715: ;t2_bsr:
                            	  6716: ;	moveq	#2,d2
                            	  6717: ;	rts
                            	  6718: 	
                            	  6719: ;t4_bsr:
                            	  6720: ;	moveq	#4,d4
                            	  6721: ;	rts
                            	  6722: 

Source: "boot.asm"
                            	   398: 
                            	   399: ; -----------------------------------------------------------------------------
                            	   400: ; Gets the screen color in d0 and d1.
                            	   401: ; -----------------------------------------------------------------------------
                            	   402: 
                            	   403: get_screen_color:
01:00003CC2 203900040084    	   404: 	move.l	fgColor,d0			; get foreground color
01:00003CC8 EB80            	   405: 	asl.l		#5,d0						; shift into position
01:00003CCA 008040000000    	   406: 	ori.l		#$40000000,d0		; set priority
01:00003CD0 223900040088    	   407: 	move.l	bkColor,d1
01:00003CD6 E089            	   408: 	lsr.l		#8,d1
01:00003CD8 E089            	   409: 	lsr.l		#8,d1
01:00003CDA 02810000001F    	   410: 	andi.l	#31,d1					; mask off extra bits
01:00003CE0 8081            	   411: 	or.l		d1,d0						; set background color bits in upper long word
01:00003CE2 223900040088    	   412: 	move.l	bkColor,d1			; get background color
01:00003CE8 E181            	   413: 	asl.l		#8,d1						; shift into position for display ram
01:00003CEA E181            	   414: 	asl.l		#8,d1
01:00003CEC 4E75            	   415: 	rts
                            	   416: 
                            	   417: ; -----------------------------------------------------------------------------
                            	   418: ; -----------------------------------------------------------------------------
                            	   419: 
                            	   420: get_screen_address:
01:00003CEE 207900040004    	   421: 	move.l	TextScr,a0
01:00003CF4 4E75            	   422: 	rts
                            	   423: 	
                            	   424: ; -----------------------------------------------------------------------------
                            	   425: ; -----------------------------------------------------------------------------
                            	   426: 
                            	   427: clear_screen:
01:00003CF6 48E7E080        	   428: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003CFA 61F2            	   429: 	bsr			get_screen_address	; a0 = pointer to screen area
01:00003CFC 10390004008C    	   430: 	move.b	TextRows,d0					; d0 = rows
01:00003D02 14390004008D    	   431: 	move.b	TextCols,d2					; d2 = cols
01:00003D08 4880            	   432: 	ext.w		d0									; convert to word
01:00003D0A 4882            	   433: 	ext.w		d2									; convert to word
01:00003D0C C4C0            	   434: 	mulu		d0,d2								; d2 = number of character cells to clear
01:00003D0E 61B2            	   435: 	bsr			get_screen_color		; get the color bits
01:00003D10 00410020        	   436: 	ori.w		#32,d1							; load space character
01:00003D14 E159            	   437: 	rol.w		#8,d1								; swap endian, text controller expects little endian
01:00003D16 4841            	   438: 	swap		d1
01:00003D18 E159            	   439: 	rol.w		#8,d1
01:00003D1A E158            	   440: 	rol.w		#8,d0								; swap endian
01:00003D1C 4840            	   441: 	swap		d0
01:00003D1E E158            	   442: 	rol.w		#8,d0
                            	   443: loop3:
01:00003D20 20C1            	   444: 	move.l	d1,(a0)+						; copy char plus bkcolor to cell
01:00003D22 4E71            	   445: 	nop	
01:00003D24 4E71            	   446: 	nop
01:00003D26 4E71            	   447: 	nop	
01:00003D28 4E71            	   448: 	nop
01:00003D2A 20C0            	   449: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003D2C 4E71            	   450: 	nop
01:00003D2E 4E71            	   451: 	nop
01:00003D30 4E71            	   452: 	nop	
01:00003D32 4E71            	   453: 	nop
01:00003D34 51CAFFEA        	   454: 	dbra		d2,loop3
01:00003D38 4CDF0107        	   455: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003D3C 4E75            	   456: 	rts
                            	   457: 
                            	   458: CRLF:
01:00003D3E 2F01            	   459: 	move.l	d1,-(a7)
01:00003D40 123C000D        	   460: 	move.b	#13,d1
01:00003D44 6142            	   461: 	bsr			DisplayChar
01:00003D46 123C000A        	   462: 	move.b	#10,d1
01:00003D4A 613C            	   463: 	bsr			DisplayChar
01:00003D4C 221F            	   464: 	move.l	(a7)+,d1
01:00003D4E 4E75            	   465: 	rts
                            	   466: 
                            	   467: ;------------------------------------------------------------------------------
                            	   468: ;------------------------------------------------------------------------------
                            	   469: 
                            	   470: UpdateTextPos:
01:00003D50 103900040000    	   471: 	move.b	CursorRow,d0		; compute screen location
01:00003D56 0240007F        	   472: 	andi.w	#$7f,d0
01:00003D5A 14390004008D    	   473: 	move.b	TextCols,d2
01:00003D60 4882            	   474: 	ext.w		d2
01:00003D62 C0C2            	   475: 	mulu.w	d2,d0
01:00003D64 2600            	   476: 	move.l	d0,d3
01:00003D66 143900040001    	   477: 	move.b	CursorCol,d2
01:00003D6C 024200FF        	   478: 	andi.w	#$ff,d2
01:00003D70 D042            	   479: 	add.w		d2,d0
01:00003D72 33C000040002    	   480: 	move.w	d0,TextPos			; save cursor pos
01:00003D78 4E75            	   481: 	rts
                            	   482: 
                            	   483: ;------------------------------------------------------------------------------
                            	   484: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   485: ; Destroys d0,d2,a0
                            	   486: ;------------------------------------------------------------------------------
                            	   487: 
                            	   488: CalcScreenLoc:
01:00003D7A 61D4            	   489: 	bsr			UpdateTextPos
01:00003D7C 48C0            	   490: 	ext.l		d0								; make it into a long
01:00003D7E E780            	   491: 	asl.l		#3,d0							; 8 bytes per char
01:00003D80 6100FF6C        	   492: 	bsr			get_screen_address
01:00003D84 D1C0            	   493: 	add.l		d0,a0							; a0 = screen location
01:00003D86 4E75            	   494: 	rts
                            	   495: 
                            	   496: ;------------------------------------------------------------------------------
                            	   497: ; Display a character on the screen
                            	   498: ; d1.b = char to display
                            	   499: ;------------------------------------------------------------------------------
                            	   500: 
                            	   501: DisplayChar:
01:00003D88 48E77000        	   502: 	movem.l	d1/d2/d3,-(a7)
01:00003D8C 4E7A2FE0        	   503: 	movec		coreno,d2
01:00003D90 0C020002        	   504: 	cmpi.b	#2,d2
01:00003D94 6604            	   505: 	bne.s		.0001
01:00003D96 61001140        	   506: 	bsr			SerialPutChar
                            	   507: .0001:
01:00003D9A 0281000000FF    	   508: 	andi.l	#$ff,d1				; zero out upper bytes of d1
01:00003DA0 0C01000D        	   509: 	cmpi.b	#13,d1				; carriage return ?
01:00003DA4 6610            	   510: 	bne.s		dccr
01:00003DA6 423900040001    	   511: 	clr.b		CursorCol			; just set cursor column to zero on a CR
                            	   512: dcx14:
01:00003DAC 61000280        	   513: 	bsr			SyncCursor		; set position in text controller
                            	   514: dcx7:
01:00003DB0 4CDF000E        	   515: 	movem.l	(a7)+,d1/d2/d3
01:00003DB4 4E75            	   516: 	rts
                            	   517: dccr:
01:00003DB6 0C010091        	   518: 	cmpi.b	#$91,d1			; cursor right ?
01:00003DBA 6618            	   519: 	bne.s   dcx6
01:00003DBC 14390004008D    	   520: 	move.b	TextCols,d2
01:00003DC2 5302            	   521: 	sub.b		#1,d2
01:00003DC4 943900040001    	   522: 	sub.b		CursorCol,d2
01:00003DCA 67E4            	   523: 	beq.s		dcx7
01:00003DCC 523900040001    	   524: 	addi.b	#1,CursorCol
01:00003DD2 60D8            	   525: 	bra.s		dcx14
                            	   526: dcx6:
01:00003DD4 0C010090        	   527: 	cmpi.b	#$90,d1			; cursor up ?
01:00003DD8 6610            	   528: 	bne.s		dcx8
01:00003DDA 4A3900040000    	   529: 	cmpi.b	#0,CursorRow
01:00003DE0 67CE            	   530: 	beq.s		dcx7
01:00003DE2 533900040000    	   531: 	subi.b	#1,CursorRow
01:00003DE8 60C2            	   532: 	bra.s		dcx14
                            	   533: dcx8:
01:00003DEA 0C010093        	   534: 	cmpi.b	#$93,d1			; cursor left?
01:00003DEE 6610            	   535: 	bne.s		dcx9
01:00003DF0 4A3900040001    	   536: 	cmpi.b	#0,CursorCol
01:00003DF6 67B8            	   537: 	beq.s		dcx7
01:00003DF8 533900040001    	   538: 	subi.b	#1,CursorCol
01:00003DFE 60AC            	   539: 	bra.s		dcx14
                            	   540: dcx9:
01:00003E00 0C010092        	   541: 	cmpi.b	#$92,d1			; cursor down ?
01:00003E04 6618            	   542: 	bne.s		dcx10
01:00003E06 14390004008C    	   543: 	move.b	TextRows,d2
01:00003E0C 5302            	   544: 	sub.b		#1,d2
01:00003E0E B43900040000    	   545: 	cmp.b		CursorRow,d2
01:00003E14 679A            	   546: 	beq.s		dcx7
01:00003E16 523900040000    	   547: 	addi.b	#1,CursorRow
01:00003E1C 608E            	   548: 	bra.s		dcx14
                            	   549: dcx10:
01:00003E1E 0C010094        	   550: 	cmpi.b	#$94,d1			; cursor home ?
01:00003E22 661C            	   551: 	bne.s		dcx11
01:00003E24 4A3900040001    	   552: 	cmpi.b	#0,CursorCol
01:00003E2A 670A            	   553: 	beq.s		dcx12
01:00003E2C 423900040001    	   554: 	clr.b		CursorCol
01:00003E32 6000FF78        	   555: 	bra			dcx14
                            	   556: dcx12:
01:00003E36 423900040000    	   557: 	clr.b		CursorRow
01:00003E3C 6000FF6E        	   558: 	bra			dcx14
                            	   559: dcx11:
01:00003E40 48E7E080        	   560: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003E44 0C010099        	   561: 	cmpi.b	#$99,d1			; delete ?
01:00003E48 675C            	   562: 	beq.s		doDelete
01:00003E4A 0C010008        	   563: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003E4E 6748            	   564: 	beq.s   doBackspace
01:00003E50 0C010018        	   565: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003E54 6700008C        	   566: 	beq			doCtrlX
01:00003E58 0C01000A        	   567: 	cmpi.b	#10,d1		; linefeed ?
01:00003E5C 6728            	   568: 	beq.s		dclf
                            	   569: 
                            	   570: 	; regular char
01:00003E5E 6100FF1A        	   571: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003E62 2401            	   572: 	move.l	d1,d2					; d2 = char
01:00003E64 6100FE5C        	   573: 	bsr			get_screen_color	; d0,d1 = color
01:00003E68 8282            	   574: 	or.l		d2,d1					; d1 = char + color
01:00003E6A E159            	   575: 	rol.w		#8,d1					; text controller expects little endian data
01:00003E6C 4841            	   576: 	swap		d1
01:00003E6E E159            	   577: 	rol.w		#8,d1
01:00003E70 2081            	   578: 	move.l	d1,(a0)
01:00003E72 E158            	   579: 	rol.w		#8,d0					; swap bytes
01:00003E74 4840            	   580: 	swap		d0						; swap halfs
01:00003E76 E158            	   581: 	rol.w		#8,d0					; swap remaining bytes
01:00003E78 21400004        	   582: 	move.l	d0,4(a0)
01:00003E7C 61000088        	   583: 	bsr			IncCursorPos
01:00003E80 610001AC        	   584: 	bsr			SyncCursor
01:00003E84 6008            	   585: 	bra			dcx4
                            	   586: dclf:
01:00003E86 6100009E        	   587: 	bsr			IncCursorRow
                            	   588: dcx16:
01:00003E8A 610001A2        	   589: 	bsr			SyncCursor
                            	   590: dcx4:
01:00003E8E 4CDF0107        	   591: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003E92 4CDF000E        	   592: 	movem.l	(a7)+,d1/d2/d3
01:00003E96 4E75            	   593: 	rts
                            	   594: 
                            	   595: 	;---------------------------
                            	   596: 	; CTRL-H: backspace
                            	   597: 	;---------------------------
                            	   598: doBackspace:
01:00003E98 4A3900040001    	   599: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003E9E 67EE            	   600: 	beq.s   dcx4						; nothing to do
01:00003EA0 533900040001    	   601: 	subi.b	#1,CursorCol		; decrement column
                            	   602: 
                            	   603: 	;---------------------------
                            	   604: 	; Delete key
                            	   605: 	;---------------------------
                            	   606: doDelete:
01:00003EA6 48E7C080        	   607: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003EAA 6100FECE        	   608: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003EAE 103900040001    	   609: 	move.b	CursorCol,d0
                            	   610: .0001:
01:00003EB4 20A80008        	   611: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003EB8 2168000C0004    	   612: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003EBE 5088            	   613: 	lea			8(a0),a0
01:00003EC0 5200            	   614: 	addi.b	#1,d0
01:00003EC2 B0390004008D    	   615: 	cmp.b		TextCols,d0
01:00003EC8 65EA            	   616: 	blo.s		.0001
01:00003ECA 6100FDF6        	   617: 	bsr			get_screen_color
01:00003ECE 323C0020        	   618: 	move.w	#' ',d1				; terminate line with a space
01:00003ED2 E159            	   619: 	rol.w		#8,d1
01:00003ED4 4841            	   620: 	swap		d1
01:00003ED6 E159            	   621: 	rol.w		#8,d1
01:00003ED8 2141FFF8        	   622: 	move.l	d1,-8(a0)
01:00003EDC 4CDF0103        	   623: 	movem.l	(a7)+,d0/d1/a0
01:00003EE0 60A8            	   624: 	bra.s		dcx16				; finished
                            	   625: 
                            	   626: 	;---------------------------
                            	   627: 	; CTRL-X: erase line
                            	   628: 	;---------------------------
                            	   629: doCtrlX:
01:00003EE2 423900040001    	   630: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003EE8 10390004008D    	   631: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003EEE 4880            	   632: 	ext.w		d0
01:00003EF0 48C0            	   633: 	ext.l		d0
01:00003EF2 123C0020        	   634: 	move.b	#' ',d1				; d1 = space char
                            	   635: .0001:
                            	   636: 	; DisplayChar is called recursively here
                            	   637: 	; It's safe to do because we know it won't recurse again due to the
                            	   638: 	; fact we know the character being displayed is a space char
01:00003EF6 6100FE90        	   639: 	bsr		DisplayChar			
01:00003EFA 5340            	   640: 	subq	#1,d0
01:00003EFC 66F8            	   641: 	bne.s	.0001
01:00003EFE 423900040001    	   642: 	clr.b	CursorCol			; now really go back to start of line
01:00003F04 6084            	   643: 	bra.s	dcx16				; we're done
                            	   644: 
                            	   645: ;------------------------------------------------------------------------------
                            	   646: ; Increment the cursor position, scroll the screen if needed.
                            	   647: ;------------------------------------------------------------------------------
                            	   648: 
                            	   649: IncCursorPos:
01:00003F06 527900040002    	   650: 	addi.w	#1,TextCurpos
01:00003F0C 523900040001    	   651: 	addi.b	#1,CursorCol
01:00003F12 10390004008D    	   652: 	move.b	TextCols,d0
01:00003F18 B03900040001    	   653: 	cmp.b		CursorCol,d0
01:00003F1E 6438            	   654: 	bhs.s		icc1
01:00003F20 423900040001    	   655: 	clr.b		CursorCol
                            	   656: IncCursorRow:
01:00003F26 523900040000    	   657: 	addi.b	#1,CursorRow
01:00003F2C 10390004008C    	   658: 	move.b	TextRows,d0
01:00003F32 B03900040000    	   659: 	cmp.b		CursorRow,d0
01:00003F38 621E            	   660: 	bhi.s		icc1
01:00003F3A 10390004008C    	   661: 	move.b	TextRows,d0
01:00003F40 13C000040000    	   662: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003F46 533900040000    	   663: 	subi.b	#1,CursorRow
01:00003F4C 4880            	   664: 	ext.w		d0
01:00003F4E D040            	   665: 	asl.w		#1,d0
01:00003F50 917900040002    	   666: 	sub.w		d0,TextCurpos
01:00003F56 6102            	   667: 	bsr			ScrollUp
                            	   668: icc1:
01:00003F58 4E75            	   669: 	rts
                            	   670: 
                            	   671: ;------------------------------------------------------------------------------
                            	   672: ; Scroll screen up.
                            	   673: ;------------------------------------------------------------------------------
                            	   674: 
                            	   675: ScrollUp:
01:00003F5A 48E7C084        	   676: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
01:00003F5E 6100FD8E        	   677: 	bsr			get_screen_address
01:00003F62 2A48            	   678: 	move.l	a0,a5								; a5 = pointer to text screen
                            	   679: .0003:								
01:00003F64 10390004008D    	   680: 	move.b	TextCols,d0					; d0 = columns
01:00003F6A 12390004008C    	   681: 	move.b	TextRows,d1					; d1 = rows
01:00003F70 4880            	   682: 	ext.w		d0									; make cols into a word value
01:00003F72 4881            	   683: 	ext.w		d1									; make rows into a word value
01:00003F74 E740            	   684: 	asl.w		#3,d0								; make into cell index
01:00003F76 41F50000        	   685: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
01:00003F7A E648            	   686: 	lsr.w		#3,d0								; get back d0
01:00003F7C 5341            	   687: 	subq		#1,d1								; number of rows-1
01:00003F7E C0C1            	   688: 	mulu		d1,d0								; d0 = count of characters to move
                            	   689: .0001:
01:00003F80 2AD8            	   690: 	move.l	(a0)+,(a5)+					; each char is 64 bits
01:00003F82 2AD8            	   691: 	move.l	(a0)+,(a5)+	
01:00003F84 51C8FFFA        	   692: 	dbra		d0,.0001
01:00003F88 4CDF2103        	   693: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   694: 	; Fall through into blanking out last line
                            	   695: 
                            	   696: ;------------------------------------------------------------------------------
                            	   697: ; Blank out the last line on the screen.
                            	   698: ;------------------------------------------------------------------------------
                            	   699: 
                            	   700: BlankLastLine:
01:00003F8C 48E7E080        	   701: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003F90 6100FD5C        	   702: 	bsr			get_screen_address
01:00003F94 10390004008C    	   703: 	move.b	TextRows,d0					; d0 = columns
01:00003F9A 12390004008D    	   704: 	move.b	TextCols,d1					; d1 = rows
01:00003FA0 4880            	   705: 	ext.w		d0
01:00003FA2 4881            	   706: 	ext.w		d1
01:00003FA4 5341            	   707: 	subq		#1,d1								; last row = #rows-1
01:00003FA6 C0C1            	   708: 	mulu		d1,d0								; d0 = index of last line
01:00003FA8 E740            	   709: 	asl.w		#3,d0								; *8 bytes per char
01:00003FAA 41F00000        	   710: 	lea			(a0,d0.w),a0				; point a0 to last row
01:00003FAE 14390004008D    	   711: 	move.b	TextCols,d2					; number of text cells to clear
01:00003FB4 4882            	   712: 	ext.w		d2
01:00003FB6 5342            	   713: 	subi.w	#1,d2								; count must be one less than desired
01:00003FB8 6100FD08        	   714: 	bsr			get_screen_color		; d0,d1 = screen color
01:00003FBC 323C0020        	   715: 	move.w	#32,d1							; set the character for display in low 16 bits
01:00003FC0 E159            	   716: 	rol.w		#8,d1								; reverse the byte order
01:00003FC2 4841            	   717: 	swap		d1
01:00003FC4 E159            	   718: 	rol.w		#8,d1
01:00003FC6 E158            	   719: 	rol.w		#8,d0
01:00003FC8 4840            	   720: 	swap		d0
01:00003FCA E158            	   721: 	rol.w		#8,d0
                            	   722: .0001:
01:00003FCC 20C0            	   723: 	move.l	d0,(a0)+
01:00003FCE 20C1            	   724: 	move.l	d1,(a0)+
01:00003FD0 51CAFFFA        	   725: 	dbra		d2,.0001
01:00003FD4 4CDF0107        	   726: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003FD8 4E75            	   727: 	rts
                            	   728: 
                            	   729: ;------------------------------------------------------------------------------
                            	   730: ; Display a string on the screen.
                            	   731: ;------------------------------------------------------------------------------
                            	   732: 
                            	   733: DisplayString:
01:00003FDA 48E7C040        	   734: 	movem.l	d0/d1/a1,-(a7)
                            	   735: dspj1:
01:00003FDE 7200            	   736: 	clr.l		d1						; clear upper bits of d1
01:00003FE0 1219            	   737: 	move.b	(a1)+,d1			; move string char into d1
01:00003FE2 6706            	   738: 	beq.s		dsret					; is it end of string ?
01:00003FE4 6100FDA2        	   739: 	bsr			DisplayChar		; display character
01:00003FE8 60F4            	   740: 	bra.s		dspj1					; go back for next character
                            	   741: dsret:
01:00003FEA 4CDF0203        	   742: 	movem.l	(a7)+,d0/d1/a1
01:00003FEE 4E75            	   743: 	rts
                            	   744: 
                            	   745: ;------------------------------------------------------------------------------
                            	   746: ; Display a string on the screen followed by carriage return / linefeed.
                            	   747: ;------------------------------------------------------------------------------
                            	   748: 
                            	   749: DisplayStringCRLF:
01:00003FF0 61E8            	   750: 	bsr		DisplayString
01:00003FF2 6000FD4A        	   751: 	bra		CRLF
                            	   752: 
                            	   753: ;------------------------------------------------------------------------------
                            	   754: ; Display a string on the screen limited to 255 chars max.
                            	   755: ;------------------------------------------------------------------------------
                            	   756: 
                            	   757: DisplayStringLimited:
01:00003FF6 48E7E040        	   758: 	movem.l	d0/d1/d2/a1,-(a7)
01:00003FFA 3401            	   759: 	move.w	d1,d2					; d2 = max count
01:00003FFC 024200FF        	   760: 	andi.w	#$00FF,d2			; limit to 255 chars
01:00004000 600A            	   761: 	bra.s		.0003					; enter loop at bottom
                            	   762: .0001:
01:00004002 7200            	   763: 	clr.l		d1						; clear upper bits of d1
01:00004004 1219            	   764: 	move.b	(a1)+,d1			; move string char into d1
01:00004006 6708            	   765: 	beq.s		.0002					; is it end of string ?
01:00004008 6100FD7E        	   766: 	bsr			DisplayChar		; display character
                            	   767: .0003:
01:0000400C 51CAFFF4        	   768: 	dbra		d2,.0001			; go back for next character
                            	   769: .0002:
01:00004010 4CDF0207        	   770: 	movem.l	(a7)+,d0/d1/d2/a1
01:00004014 4E75            	   771: 	rts
                            	   772: 
                            	   773: DisplayStringLimitedCRLF:
01:00004016 61DE            	   774: 	bsr		DisplayStringLimited
01:00004018 6000FD24        	   775: 	bra		CRLF
                            	   776: 	
                            	   777: ;------------------------------------------------------------------------------
                            	   778: ; Set cursor position to top left of screen.
                            	   779: ;
                            	   780: ; Parameters:
                            	   781: ;		<none>
                            	   782: ; Returns:
                            	   783: ;		<none>
                            	   784: ; Registers Affected:
                            	   785: ;		<none>
                            	   786: ;------------------------------------------------------------------------------
                            	   787: 
                            	   788: HomeCursor:
01:0000401C 423900040000    	   789: 	clr.b		CursorRow
01:00004022 423900040001    	   790: 	clr.b		CursorCol
01:00004028 427900040002    	   791: 	clr.w		TextPos
                            	   792: 	; fall through
                            	   793: 
                            	   794: ;------------------------------------------------------------------------------
                            	   795: ; SyncCursor:
                            	   796: ;
                            	   797: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   798: ; the core with the IO focus.
                            	   799: ;
                            	   800: ; Parameters:
                            	   801: ;		<none>
                            	   802: ; Returns:
                            	   803: ;		<none>
                            	   804: ; Registers Affected:
                            	   805: ;		<none>
                            	   806: ;------------------------------------------------------------------------------
                            	   807: 
                            	   808: SyncCursor:
01:0000402E 48E7A000        	   809: 	movem.l	d0/d2,-(a7)
01:00004032 6100FD1C        	   810: 	bsr			UpdateTextPos
01:00004036 4E7A2FE0        	   811: 	movec		coreno,d2
01:0000403A B43900100000    	   812: 	cmp.b		IOFocus,d2
01:00004040 6608            	   813: 	bne.s		.0001
01:00004042 E158            	   814: 	rol.w		#8,d0						; swap byte order
01:00004044 33C0FD03FF24    	   815: 	move.w	d0,TEXTREG+$24
                            	   816: .0001:	
01:0000404A 4CDF0005        	   817: 	movem.l	(a7)+,d0/d2
01:0000404E 4E75            	   818: 	rts
                            	   819: 
                            	   820: ;==============================================================================
                            	   821: ; TRAP #15 handler
                            	   822: ;
                            	   823: ; Parameters:
                            	   824: ;		d0.w = function number to perform
                            	   825: ;==============================================================================
                            	   826: 
                            	   827: TRAP15:
01:00004050 48E78080        	   828: 	movem.l	d0/a0,-(a7)
01:00004054 41FA0012        	   829: 	lea			T15DispatchTable,a0
01:00004058 E580            	   830: 	asl.l		#2,d0
01:0000405A 20700000        	   831: 	move.l	(a0,d0.w),a0
01:0000405E 4E90            	   832: 	jsr			(a0)
01:00004060 4CDF0101        	   833: 	movem.l	(a7)+,d0/a0
01:00004064 4E73            	   834: 	rte
                            	   835: 
                            	   836: 		align	2
                            	   837: T15DispatchTable:
01:00004068 00004016        	   838: 	dc.l	DisplayStringLimitedCRLF
01:0000406C 00003FF6        	   839: 	dc.l	DisplayStringLimited
01:00004070 0000413E        	   840: 	dc.l	StubRout
01:00004074 0000413E        	   841: 	dc.l	StubRout
01:00004078 0000413E        	   842: 	dc.l	StubRout
01:0000407C 00004210        	   843: 	dc.l	GetKey
01:00004080 00003D88        	   844: 	dc.l	DisplayChar
01:00004084 00004204        	   845: 	dc.l	CheckForKey
01:00004088 0000413E        	   846: 	dc.l	StubRout
01:0000408C 0000413E        	   847: 	dc.l	StubRout
                            	   848: 	; 10
01:00004090 0000413E        	   849: 	dc.l	StubRout
01:00004094 00004108        	   850: 	dc.l	Cursor1
01:00004098 000041FC        	   851: 	dc.l	SetKeyboardEcho
01:0000409C 00003FF0        	   852: 	dc.l	DisplayStringCRLF
01:000040A0 00003FDA        	   853: 	dc.l	DisplayString
01:000040A4 0000413E        	   854: 	dc.l	StubRout
01:000040A8 0000413E        	   855: 	dc.l	StubRout
01:000040AC 0000413E        	   856: 	dc.l	StubRout
01:000040B0 0000413E        	   857: 	dc.l	StubRout
01:000040B4 0000413E        	   858: 	dc.l	StubRout
                            	   859: 	; 20
01:000040B8 0000413E        	   860: 	dc.l	StubRout
01:000040BC 0000413E        	   861: 	dc.l	StubRout
01:000040C0 0000413E        	   862: 	dc.l	StubRout
01:000040C4 0000413E        	   863: 	dc.l	StubRout
01:000040C8 0000413E        	   864: 	dc.l	StubRout
01:000040CC 0000413E        	   865: 	dc.l	StubRout
01:000040D0 0000413E        	   866: 	dc.l	StubRout
01:000040D4 0000413E        	   867: 	dc.l	StubRout
01:000040D8 0000413E        	   868: 	dc.l	StubRout
01:000040DC 0000413E        	   869: 	dc.l	StubRout
                            	   870: 	; 30
01:000040E0 0000413E        	   871: 	dc.l	StubRout
01:000040E4 0000413E        	   872: 	dc.l	StubRout
01:000040E8 00004140        	   873: 	dc.l	rotate_iofocus
01:000040EC 00004EB4        	   874: 	dc.l	SerialPeekCharDirect
01:000040F0 00004ED8        	   875: 	dc.l	SerialPutChar
01:000040F4 0000413E        	   876: 	dc.l	StubRout
01:000040F8 0000413E        	   877: 	dc.l	StubRout
01:000040FC 0000413E        	   878: 	dc.l	StubRout
01:00004100 0000413E        	   879: 	dc.l	StubRout
01:00004104 0000413E        	   880: 	dc.l	StubRout
                            	   881: 
                            	   882: ;------------------------------------------------------------------------------
                            	   883: ; Cursor positioning / Clear screen
                            	   884: ; - out of range settings are ignored
                            	   885: ;
                            	   886: ; Parameters:
                            	   887: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	   888: ;	Returns:
                            	   889: ;		none
                            	   890: ;------------------------------------------------------------------------------
                            	   891: 
                            	   892: Cursor1:
01:00004108 2F01            	   893: 	move.l		d1,-(a7)
01:0000410A 0C41FF00        	   894: 	cmpi.w		#$FF00,d1
01:0000410E 6608            	   895: 	bne.s			.0002
01:00004110 6100FBE4        	   896: 	bsr				clear_screen
01:00004114 6000FF06        	   897: 	bra				HomeCursor
                            	   898: .0002:
01:00004118 B2390004008C    	   899: 	cmp.b			TextRows,d1		; if cursor pos out of range, ignore setting
01:0000411E 6406            	   900: 	bhs.s			.0003
01:00004120 13C100040000    	   901: 	move.b		d1,CursorRow
                            	   902: .0003:
01:00004126 E059            	   903: 	ror.w			#8,d1
01:00004128 B2390004008D    	   904: 	cmp.b			TextCols,d1
01:0000412E 6406            	   905: 	bhs.s			.0001
01:00004130 13C100040001    	   906: 	move.b		d1,CursorCol
                            	   907: .0001:
01:00004136 6100FEF6        	   908: 	bsr				SyncCursor		; update hardware cursor
01:0000413A 221F            	   909: 	move.l		(a7)+,d1
01:0000413C 4E75            	   910: 	rts
                            	   911: 
                            	   912: ;------------------------------------------------------------------------------
                            	   913: ; Stub routine for unimplemented functionality.
                            	   914: ;------------------------------------------------------------------------------
                            	   915: 
                            	   916: StubRout:
01:0000413E 4E75            	   917: 	rts
                            	   918: 
                            	   919: ;------------------------------------------------------------------------------
                            	   920: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	   921: ;
                            	   922: ; Modifies:
                            	   923: ;		d0, IOFocus BIOS variable
                            	   924: ;------------------------------------------------------------------------------
                            	   925: 
                            	   926: rotate_iofocus:
01:00004140 103900100000    	   927: 	move.b	IOFocus,d0				; d0 = focus, we can trash d0
01:00004146 5200            	   928: 	add.b		#1,d0							; increment the focus
01:00004148 B03C0009        	   929: 	cmp.b		#9,d0							; limit to 2 to 9
01:0000414C 6304            	   930: 	bls.s		.0001
01:0000414E 103C0002        	   931: 	move.b	#2,d0
                            	   932: .0001:
01:00004152 13C000100000    	   933: 	move.b	d0,IOFocus				; set IO focus
01:00004158 5500            	   934: 	subi.b	#2,d0							; screen is 0 to 7, focus is 2 to 9
01:0000415A 4880            	   935: 	ext.w		d0								; make into long value
01:0000415C C0FC0800        	   936: 	mulu		#2048,d0					; * 2048	cells per screen
01:00004160 E158            	   937: 	rol.w		#8,d0							; swap byte order
01:00004162 33C0FD03FF28    	   938: 	move.w	d0,TEXTREG+$28		; update screen address in text controller
01:00004168 6000FEC4        	   939: 	bra			SyncCursor				; set cursor position
                            	   940: 
                            	   941: ;==============================================================================
                            	   942: ; PLIC - platform level interrupt controller
                            	   943: ;
                            	   944: ; Register layout:
                            	   945: ;   bits 0 to 7  = cause code to issue
                            	   946: ;   bits 8 to 11 = irq level to issue
                            	   947: ;   bit 16 = irq enable
                            	   948: ;   bit 17 = edge sensitivity
                            	   949: ;		bit 24 to 29 target core
                            	   950: ;
                            	   951: ; Note byte order must be reversed for PLIC.
                            	   952: ;==============================================================================
                            	   953: 
                            	   954: init_plic:
01:0000416C 41F9FD090000    	   955: 	lea		PLIC,a0						; a0 points to PLIC
01:00004172 41E800F4        	   956: 	lea		$80+4*29(a0),a0		; point to timer registers (29)
01:00004176 20BC00060302    	   957: 	move.l	#$00060302,(a0)	; initialize, core=2,edge sensitive,enabled,irq6
01:0000417C 5888            	   958: 	lea			4(a0),a0				; point to keyboard registers (30)
01:0000417E 20BC00060102    	   959: 	move.l	#$00060102,(a0)	; initialize, core=2,level sensitive,enabled,irq6
01:00004184 5888            	   960: 	lea			4(a0),a0				; point to nmi button register (31)
01:00004186 20BC00070302    	   961: 	move.l	#$00070302,(a0)	; initialize, core=2,edge sensitive,enabled,irq7
01:0000418C 4E75            	   962: 	rts
                            	   963: 
                            	   964: ;==============================================================================
                            	   965: ; Keyboard stuff
                            	   966: ;
                            	   967: ; KeyState2_
                            	   968: ; 876543210
                            	   969: ; ||||||||+ = shift
                            	   970: ; |||||||+- = alt
                            	   971: ; ||||||+-- = control
                            	   972: ; |||||+--- = numlock
                            	   973: ; ||||+---- = capslock
                            	   974: ; |||+----- = scrolllock
                            	   975: ; ||+------ =
                            	   976: ; |+------- = 
                            	   977: ; +-------- = extended
                            	   978: ;
                            	   979: ;==============================================================================
                            	   980: 
                            	   981: _KeybdInit:
01:0000418E 42390010000F    	   982: 	clr.b	_KeyState1
01:00004194 423900100010    	   983: 	clr.b	_KeyState2
01:0000419A 4E75            	   984: 	rts
                            	   985: 
                            	   986: _KeybdGetStatus:
01:0000419C 7200            	   987: 	moveq		#0,d1
01:0000419E 1239FD0FFE01    	   988: 	move.b	KEYBD+1,d1
01:000041A4 4E75            	   989: 	rts
                            	   990: 
                            	   991: ; Get the scancode from the keyboard port
                            	   992: 
                            	   993: _KeybdGetScancode:
01:000041A6 7200            	   994: 	moveq		#0,d1
01:000041A8 1239FD0FFE00    	   995: 	move.b	KEYBD,d1				* get the scan code
01:000041AE 4239FD0FFE01    	   996: 	move.b	#0,KEYBD+1			* clear receive register
01:000041B4 4E75            	   997: 	rts
                            	   998: 
                            	   999: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	  1000: ; keyboard in order to wait for a response.
                            	  1001: ;
                            	  1002: KeybdRecvByte:
01:000041B6 2F03            	  1003: 	move.l	d3,-(a7)
01:000041B8 363C0064        	  1004: 	move.w	#100,d3		; wait up to 1s
                            	  1005: .0003:
01:000041BC 61DE            	  1006: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:000041BE 4A01            	  1007: 	tst.b	d1
01:000041C0 6B0E            	  1008: 	bmi		.0004		; is input buffer full ? yes, branch
01:000041C2 6100031C        	  1009: 	bsr		Wait10ms		; wait a bit
01:000041C6 51CBFFF4        	  1010: 	dbra	d3,.0003	; go back and try again
01:000041CA 261F            	  1011: 	move.l	(a7)+,d3
01:000041CC 72FF            	  1012: 	moveq	#-1,d1			; return -1
01:000041CE 4E75            	  1013: 	rts
                            	  1014: .0004:
01:000041D0 61D4            	  1015: 	bsr		_KeybdGetScancode
01:000041D2 261F            	  1016: 	move.l	(a7)+,d3
01:000041D4 4E75            	  1017: 	rts
                            	  1018: 
                            	  1019: 
                            	  1020: ; Wait until the keyboard transmit is complete
                            	  1021: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	  1022: ;
                            	  1023: KeybdWaitTx:
01:000041D6 48E73000        	  1024: 	movem.l	d2/d3,-(a7)
01:000041DA 7664            	  1025: 	moveq	#100,d3		; wait a max of 1s
                            	  1026: .0001:
01:000041DC 61BE            	  1027: 	bsr		_KeybdGetStatus
01:000041DE 08010006        	  1028: 	btst	#6,d1		; check for transmit complete bit
01:000041E2 6610            	  1029: 	bne	    .0002		; branch if bit set
01:000041E4 610002FA        	  1030: 	bsr		Wait10ms		; delay a little bit
01:000041E8 51CBFFF2        	  1031: 	dbra	d3,.0001	; go back and try again
01:000041EC 4CDF000C        	  1032: 	movem.l	(a7)+,d2/d3
01:000041F0 72FF            	  1033: 	moveq	#-1,d1		; return -1
01:000041F2 4E75            	  1034: 	rts
                            	  1035: .0002:
01:000041F4 4CDF000C        	  1036: 	movem.l	(a7)+,d2/d3
01:000041F8 7200            	  1037: 	moveq	#0,d1		; return 0
01:000041FA 4E75            	  1038: 	rts
                            	  1039: 
                            	  1040: ;------------------------------------------------------------------------------
                            	  1041: ; d1.b 0=echo off, non-zero = echo on
                            	  1042: ;------------------------------------------------------------------------------
                            	  1043: 
                            	  1044: SetKeyboardEcho:
01:000041FC 13C10004000C    	  1045: 	move.b	d1,KeybdEcho
01:00004202 4E75            	  1046: 	rts
                            	  1047: 
                            	  1048: ;------------------------------------------------------------------------------
                            	  1049: ; Get key pending status into d1.b
                            	  1050: ;
                            	  1051: ; Returns:
                            	  1052: ;		d1.b = 1 if a key is available, otherwise zero.
                            	  1053: ;------------------------------------------------------------------------------
                            	  1054: 
                            	  1055: CheckForKey:
01:00004204 7200            	  1056: 	moveq.l	#0,d1					; clear high order bits
                            	  1057: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	  1058: ;	smi.b		d1						; set true/false
                            	  1059: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
01:00004206 4A3900100013    	  1060: 	tst.b		_KeybdCnt
01:0000420C 56C1            	  1061: 	sne.b		d1
01:0000420E 4E75            	  1062: 	rts
                            	  1063: 
                            	  1064: ;------------------------------------------------------------------------------
                            	  1065: ; GetKey
                            	  1066: ; 	Get a character from the keyboard. 
                            	  1067: ;
                            	  1068: ; Modifies:
                            	  1069: ;		d1
                            	  1070: ; Returns:
                            	  1071: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	  1072: ;------------------------------------------------------------------------------
                            	  1073: 
                            	  1074: GetKey:
01:00004210 2F00            	  1075: 	move.l	d0,-(a7)					; push d0
01:00004212 123900100000    	  1076: 	move.b	IOFocus,d1				; Check if the core has the IO focus
01:00004218 4E7A0FE0        	  1077: 	movec.l	coreno,d0
01:0000421C B200            	  1078: 	cmp.b		d0,d1
01:0000421E 6624            	  1079: 	bne.s		.0004							; go return no key available, if not in focus
01:00004220 6138            	  1080: 	bsr			KeybdGetCharNoWait	; get a character
01:00004222 0C0100FF        	  1081: 	cmpi.b	#-1,d1						; was a key available?
01:00004226 671C            	  1082: 	beq.s		.0004
01:00004228 4A390004000C    	  1083: 	tst.b		KeybdEcho					; is keyboard echo on ?
01:0000422E 6710            	  1084: 	beq.s		.0003							; no echo, just return the key
01:00004230 0C01000D        	  1085: 	cmpi.b	#CR,d1						; convert CR keystroke into CRLF
01:00004234 6606            	  1086: 	bne.s		.0005
01:00004236 6100FB06        	  1087: 	bsr			CRLF
01:0000423A 6004            	  1088: 	bra.s		.0003
                            	  1089: .0005:
01:0000423C 6100FB4A        	  1090: 	bsr			DisplayChar
                            	  1091: .0003:
01:00004240 201F            	  1092: 	move.l	(a7)+,d0					; pop d0
01:00004242 4E75            	  1093: 	rts												; return key
                            	  1094: ; Return -1 indicating no char was available
                            	  1095: .0004:
01:00004244 201F            	  1096: 	move.l	(a7)+,d0					; pop d0
01:00004246 72FF            	  1097: 	moveq		#-1,d1						; return no key available
01:00004248 4E75            	  1098: 	rts
                            	  1099: 
                            	  1100: CheckForCtrlC:
01:0000424A 61B8            	  1101: 	bsr			CheckForKey
01:0000424C 670A            	  1102: 	beq.s		.0001
01:0000424E 611A            	  1103: 	bsr			KeybdGetChar
01:00004250 B23C0003        	  1104: 	cmp.b		#CTRLC,d1
01:00004254 670005B0        	  1105: 	beq			Monitor
                            	  1106: .0001:
01:00004258 4E75            	  1107: 	rts
                            	  1108: 
                            	  1109: ;------------------------------------------------------------------------------
                            	  1110: ;------------------------------------------------------------------------------
                            	  1111: 
                            	  1112: KeybdGetCharNoWait:
01:0000425A 42390004000D    	  1113: 	clr.b	KeybdWaitFlag
01:00004260 6008            	  1114: 	bra		KeybdGetChar
                            	  1115: 
                            	  1116: KeybdGetCharWait:
01:00004262 13FC00FF0004000D	  1117: 	move.b	#-1,KeybdWaitFlag
                            	  1118: 
                            	  1119: KeybdGetChar:
01:0000426A 48E73080        	  1120: 	movem.l	d2/d3/a0,-(a7)
                            	  1121: .0003:
01:0000426E 7201            	  1122: 	moveq		#1,d1
                            	  1123: ;	bsr			LockSemaphore
01:00004270 143900100013    	  1124: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
01:00004276 6738            	  1125: 	beq.s		.0015						;
01:00004278 143900100011    	  1126: 	move.b	_KeybdHead,d2		; d2 = buffer head
01:0000427E 4882            	  1127: 	ext.w		d2
01:00004280 41F900100020    	  1128: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
01:00004286 7200            	  1129: 	clr.l		d1
01:00004288 12302000        	  1130: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
01:0000428C 5202            	  1131: 	addi.b	#1,d2						; increment keyboard head index
01:0000428E 0202001F        	  1132: 	andi.b	#31,d2					; and wrap around at buffer size
01:00004292 13C200100011    	  1133: 	move.b	d2,_KeybdHead
01:00004298 533900100013    	  1134: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
01:0000429E C342            	  1135: 	exg			d1,d2						; save scancode value in d2
01:000042A0 7201            	  1136: 	moveq		#1,d1
01:000042A2 6100BE92        	  1137: 	bsr			UnlockSemaphore
01:000042A6 C541            	  1138: 	exg			d2,d1						; restore scancode value
01:000042A8 6020            	  1139: 	bra			.0001						; go process scan code
                            	  1140: .0014:
01:000042AA 6100FEF0        	  1141: 	bsr		_KeybdGetStatus		; check keyboard status for key available
01:000042AE 6B16            	  1142: 	bmi		.0006							; yes, go process
                            	  1143: .0015:
01:000042B0 7201            	  1144: 	moveq	#1,d1
01:000042B2 6100BE82        	  1145: 	bsr		UnlockSemaphore
01:000042B6 4A390004000D    	  1146: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:000042BC 6BB0            	  1147: 	bmi		.0003							; yes, branch back
01:000042BE 4CDF010C        	  1148: 	movem.l	(a7)+,d2/d3/a0
01:000042C2 72FF            	  1149: 	moveq	#-1,d1						; flag no char available
01:000042C4 4E75            	  1150: 	rts
                            	  1151: .0006:
01:000042C6 6100FEDE        	  1152: 	bsr		_KeybdGetScancode
                            	  1153: .0001:
01:000042CA 33FC0001FD0FFF00	  1154: 	move.w	#1,leds
01:000042D2 B23C00F0        	  1155: 	cmp.b	#SC_KEYUP,d1
01:000042D6 670000C0        	  1156: 	beq		.doKeyup
01:000042DA B23C00E0        	  1157: 	cmp.b	#SC_EXTEND,d1
01:000042DE 670000C4        	  1158: 	beq		.doExtend
01:000042E2 B23C0014        	  1159: 	cmp.b	#SC_CTRL,d1
01:000042E6 670000C8        	  1160: 	beq		.doCtrl
01:000042EA B23C0012        	  1161: 	cmp.b	#SC_LSHIFT,d1
01:000042EE 6700012A        	  1162: 	beq		.doShift
01:000042F2 B23C0059        	  1163: 	cmp.b	#SC_RSHIFT,d1
01:000042F6 67000122        	  1164: 	beq		.doShift
01:000042FA B23C0077        	  1165: 	cmp.b	#SC_NUMLOCK,d1
01:000042FE 67000142        	  1166: 	beq		.doNumLock
01:00004302 B23C0058        	  1167: 	cmp.b	#SC_CAPSLOCK,d1
01:00004306 67000148        	  1168: 	beq		.doCapsLock
01:0000430A B23C007E        	  1169: 	cmp.b	#SC_SCROLLLOCK,d1
01:0000430E 6700014E        	  1170: 	beq		.doScrollLock
01:00004312 B23C0011        	  1171: 	cmp.b   #SC_ALT,d1
01:00004316 670000C0        	  1172: 	beq     .doAlt
01:0000431A 14390010000F    	  1173: 	move.b	_KeyState1,d2			; check key up/down
01:00004320 42390010000F    	  1174: 	move.b	#0,_KeyState1			; clear keyup status
01:00004326 4A02            	  1175: 	tst.b	d2
01:00004328 6600FF44        	  1176: 	bne	    .0003					; ignore key up
01:0000432C B23C000D        	  1177: 	cmp.b   #SC_TAB,d1
01:00004330 670000CE        	  1178: 	beq     .doTab
                            	  1179: .0013:
01:00004334 143900100010    	  1180: 	move.b	_KeyState2,d2
01:0000433A 6A1A            	  1181: 	bpl		.0010					; is it extended code ?
01:0000433C C43C007F        	  1182: 	and.b	#$7F,d2					; clear extended bit
01:00004340 13C200100010    	  1183: 	move.b	d2,_KeyState2
01:00004346 42390010000F    	  1184: 	move.b	#0,_KeyState1			; clear keyup
01:0000434C 41FA0422        	  1185: 	lea		_keybdExtendedCodes,a0
01:00004350 12301000        	  1186: 	move.b	(a0,d1.w),d1
01:00004354 6034            	  1187: 	bra		.0008
                            	  1188: .0010:
01:00004356 08020002        	  1189: 	btst	#2,d2					; is it CTRL code ?
01:0000435A 670E            	  1190: 	beq		.0009
01:0000435C C27C007F        	  1191: 	and.w	#$7F,d1
01:00004360 41FA038E        	  1192: 	lea		_keybdControlCodes,a0
01:00004364 12301000        	  1193: 	move.b	(a0,d1.w),d1
01:00004368 6020            	  1194: 	bra		.0008
                            	  1195: .0009:
01:0000436A 08020000        	  1196: 	btst	#0,d2					; is it shift down ?
01:0000436E 670A            	  1197: 	beq  	.0007
01:00004370 41FA027E        	  1198: 	lea		_shiftedScanCodes,a0
01:00004374 12301000        	  1199: 	move.b	(a0,d1.w),d1
01:00004378 6010            	  1200: 	bra		.0008
                            	  1201: .0007:
01:0000437A 41FA0174        	  1202: 	lea		_unshiftedScanCodes,a0
01:0000437E 12301000        	  1203: 	move.b	(a0,d1.w),d1
01:00004382 33FC0202FD0FFF00	  1204: 	move.w	#$0202,leds
                            	  1205: .0008:
01:0000438A 33FC0303FD0FFF00	  1206: 	move.w	#$0303,leds
01:00004392 4CDF010C        	  1207: 	movem.l	(a7)+,d2/d3/a0
01:00004396 4E75            	  1208: 	rts
                            	  1209: .doKeyup:
01:00004398 13FC00FF0010000F	  1210: 	move.b	#-1,_KeyState1
01:000043A0 6000FECC        	  1211: 	bra		.0003
                            	  1212: .doExtend:
01:000043A4 0039008000100010	  1213: 	or.b	#$80,_KeyState2
01:000043AC 6000FEC0        	  1214: 	bra		.0003
                            	  1215: .doCtrl:
01:000043B0 12390010000F    	  1216: 	move.b	_KeyState1,d1
01:000043B6 42390010000F    	  1217: 	clr.b	_KeyState1
01:000043BC 4A01            	  1218: 	tst.b	d1
01:000043BE 6A0C            	  1219: 	bpl.s	.0004
01:000043C0 08B9000200100010	  1220: 	bclr	#2,_KeyState2
01:000043C8 6000FEA4        	  1221: 	bra		.0003
                            	  1222: .0004:
01:000043CC 08F9000200100010	  1223: 	bset	#2,_KeyState2
01:000043D4 6000FE98        	  1224: 	bra		.0003
                            	  1225: .doAlt:
01:000043D8 12390010000F    	  1226: 	move.b	_KeyState1,d1
01:000043DE 42390010000F    	  1227: 	clr.b	_KeyState1
01:000043E4 4A01            	  1228: 	tst.b	d1
01:000043E6 6A0C            	  1229: 	bpl		.0011
01:000043E8 08B9000100100010	  1230: 	bclr	#1,_KeyState2
01:000043F0 6000FE7C        	  1231: 	bra		.0003
                            	  1232: .0011:
01:000043F4 08F9000100100010	  1233: 	bset	#1,_KeyState2
01:000043FC 6000FE70        	  1234: 	bra		.0003
                            	  1235: .doTab:
01:00004400 2F01            	  1236: 	move.l	d1,-(a7)
01:00004402 123900100010    	  1237:   move.b  _KeyState2,d1
01:00004408 08010001        	  1238:   btst	#1,d1                 ; is ALT down ?
01:0000440C 6706            	  1239:   beq     .0012
                            	  1240: ;    	inc     _iof_switch
01:0000440E 221F            	  1241:   move.l	(a7)+,d1
01:00004410 6000FE5C        	  1242:   bra     .0003
                            	  1243: .0012:
01:00004414 221F            	  1244:   move.l	(a7)+,d1
01:00004416 6000FF1C        	  1245:   bra     .0013
                            	  1246: .doShift:
01:0000441A 12390010000F    	  1247: 	move.b	_KeyState1,d1
01:00004420 42390010000F    	  1248: 	clr.b	_KeyState1
01:00004426 4A01            	  1249: 	tst.b	d1
01:00004428 6A0C            	  1250: 	bpl.s	.0005
01:0000442A 08B9000000100010	  1251: 	bclr	#0,_KeyState2
01:00004432 6000FE3A        	  1252: 	bra		.0003
                            	  1253: .0005:
01:00004436 08F9000000100010	  1254: 	bset	#0,_KeyState2
01:0000443E 6000FE2E        	  1255: 	bra		.0003
                            	  1256: .doNumLock:
01:00004442 0879000400100010	  1257: 	bchg	#4,_KeyState2
01:0000444A 6120            	  1258: 	bsr		KeybdSetLEDStatus
01:0000444C 6000FE20        	  1259: 	bra		.0003
                            	  1260: .doCapsLock:
01:00004450 0879000500100010	  1261: 	bchg	#5,_KeyState2
01:00004458 6112            	  1262: 	bsr		KeybdSetLEDStatus
01:0000445A 6000FE12        	  1263: 	bra		.0003
                            	  1264: .doScrollLock:
01:0000445E 0879000600100010	  1265: 	bchg	#6,_KeyState2
01:00004466 6104            	  1266: 	bsr		KeybdSetLEDStatus
01:00004468 6000FE04        	  1267: 	bra		.0003
                            	  1268: 
                            	  1269: KeybdSetLEDStatus:
01:0000446C 48E73000        	  1270: 	movem.l	d2/d3,-(a7)
01:00004470 42390010000E    	  1271: 	clr.b	KeybdLEDs
01:00004476 0839000400100010	  1272: 	btst	#4,_KeyState2
01:0000447E 6708            	  1273: 	beq.s	.0002
01:00004480 13FC00020010000E	  1274: 	move.b	#2,KeybdLEDs
                            	  1275: .0002:
01:00004488 0839000500100010	  1276: 	btst	#5,_KeyState2
01:00004490 6708            	  1277: 	beq.s	.0003
01:00004492 08F900020010000E	  1278: 	bset	#2,KeybdLEDs
                            	  1279: .0003:
01:0000449A 0839000600100010	  1280: 	btst	#6,_KeyState2
01:000044A2 6708            	  1281: 	beq.s	.0004
01:000044A4 08F900000010000E	  1282: 	bset	#0,KeybdLEDs
                            	  1283: .0004:
01:000044AC 123C00ED        	  1284: 	move.b	#$ED,d1
01:000044B0 6126            	  1285: 	bsr		KeybdSendByte
01:000044B2 6100FD22        	  1286: 	bsr		KeybdWaitTx
01:000044B6 6100FCFE        	  1287: 	bsr		KeybdRecvByte
01:000044BA 4A01            	  1288: 	tst.b	d1
01:000044BC 6B14            	  1289: 	bmi		.0001
01:000044BE B27C00FA        	  1290: 	cmp		#$FA,d1
01:000044C2 12390010000E    	  1291: 	move.b	KeybdLEDs,d1
01:000044C8 610E            	  1292: 	bsr		KeybdSendByte
01:000044CA 6100FD0A        	  1293: 	bsr		KeybdWaitTx
01:000044CE 6100FCE6        	  1294: 	bsr		KeybdRecvByte
                            	  1295: .0001:
01:000044D2 4CDF000C        	  1296: 	movem.l	(a7)+,d2/d3
01:000044D6 4E75            	  1297: 	rts
                            	  1298: 
                            	  1299: KeybdSendByte:
01:000044D8 13C1FD0FFE00    	  1300: 	move.b	d1,KEYBD
01:000044DE 4E75            	  1301: 	rts
                            	  1302: 	
                            	  1303: Wait10ms:
01:000044E0 2F03            	  1304: 	move.l	d3,-(a7)
01:000044E2 263C000003E8    	  1305: 	move.l	#1000,d3
                            	  1306: .0001:
01:000044E8 51CBFFFE        	  1307: 	dbra	d3,.0001
01:000044EC 261F            	  1308: 	move.l	(a7)+,d3
01:000044EE 4E75            	  1309: 	rts
                            	  1310: 
                            	  1311: 
                            	  1312: ;--------------------------------------------------------------------------
                            	  1313: ; PS2 scan codes to ascii conversion tables.
                            	  1314: ;--------------------------------------------------------------------------
                            	  1315: ;
                            	  1316: _unshiftedScanCodes:
01:000044F0 2E              	  1317: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:000044F1 A9
01:000044F2 2E
01:000044F3 A5
01:000044F4 A3
01:000044F5 A1
01:000044F6 A2
01:000044F7 AC
01:000044F8 2E              	  1318: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:000044F9 AA
01:000044FA A8
01:000044FB A6
01:000044FC A4
01:000044FD 09
01:000044FE 60
01:000044FF 2E
01:00004500 2E              	  1319: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:00004501 2E
01:00004502 2E
01:00004503 2E
01:00004504 2E
01:00004505 71
01:00004506 31
01:00004507 2E
01:00004508 2E              	  1320: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:00004509 2E
01:0000450A 7A
01:0000450B 73
01:0000450C 61
01:0000450D 77
01:0000450E 32
01:0000450F 2E
01:00004510 2E              	  1321: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:00004511 63
01:00004512 78
01:00004513 64
01:00004514 65
01:00004515 34
01:00004516 33
01:00004517 2E
01:00004518 2E              	  1322: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:00004519 20
01:0000451A 76
01:0000451B 66
01:0000451C 74
01:0000451D 72
01:0000451E 35
01:0000451F 2E
01:00004520 2E              	  1323: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:00004521 6E
01:00004522 62
01:00004523 68
01:00004524 67
01:00004525 79
01:00004526 36
01:00004527 2E
01:00004528 2E              	  1324: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:00004529 2E
01:0000452A 6D
01:0000452B 6A
01:0000452C 75
01:0000452D 37
01:0000452E 38
01:0000452F 2E
01:00004530 2E              	  1325: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:00004531 2C
01:00004532 6B
01:00004533 69
01:00004534 6F
01:00004535 30
01:00004536 39
01:00004537 2E
01:00004538 2E              	  1326: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:00004539 2E
01:0000453A 2F
01:0000453B 6C
01:0000453C 3B
01:0000453D 70
01:0000453E 2D
01:0000453F 2E
01:00004540 2E              	  1327: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:00004541 2E
01:00004542 27
01:00004543 2E
01:00004544 5B
01:00004545 3D
01:00004546 2E
01:00004547 2E
01:00004548 AD              	  1328: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:00004549 2E
01:0000454A 0D
01:0000454B 5D
01:0000454C 2E
01:0000454D 5C
01:0000454E 2E
01:0000454F 2E
01:00004550 2E              	  1329: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004551 2E
01:00004552 2E
01:00004553 2E
01:00004554 2E
01:00004555 2E
01:00004556 08
01:00004557 2E
01:00004558 2E              	  1330: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:00004559 95
01:0000455A 2E
01:0000455B 93
01:0000455C 94
01:0000455D 2E
01:0000455E 2E
01:0000455F 2E
01:00004560 98              	  1331: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:00004561 7F
01:00004562 92
01:00004563 2E
01:00004564 91
01:00004565 90
01:00004566 1B
01:00004567 AF
01:00004568 AB              	  1332: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:00004569 2E
01:0000456A 97
01:0000456B 2E
01:0000456C 2E
01:0000456D 96
01:0000456E AE
01:0000456F 2E
                            	  1333: 
01:00004570 2E              	  1334: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:00004571 2E
01:00004572 2E
01:00004573 A7
01:00004574 2E
01:00004575 2E
01:00004576 2E
01:00004577 2E
01:00004578 2E              	  1335: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004579 2E
01:0000457A 2E
01:0000457B 2E
01:0000457C 2E
01:0000457D 2E
01:0000457E 2E
01:0000457F 2E
01:00004580 2E              	  1336: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004581 2E
01:00004582 2E
01:00004583 2E
01:00004584 2E
01:00004585 2E
01:00004586 2E
01:00004587 2E
01:00004588 2E              	  1337: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004589 2E
01:0000458A 2E
01:0000458B 2E
01:0000458C 2E
01:0000458D 2E
01:0000458E 2E
01:0000458F 2E
01:00004590 2E              	  1338: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004591 2E
01:00004592 2E
01:00004593 2E
01:00004594 2E
01:00004595 2E
01:00004596 2E
01:00004597 2E
01:00004598 2E              	  1339: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004599 2E
01:0000459A 2E
01:0000459B 2E
01:0000459C 2E
01:0000459D 2E
01:0000459E 2E
01:0000459F 2E
01:000045A0 2E              	  1340: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045A1 2E
01:000045A2 2E
01:000045A3 2E
01:000045A4 2E
01:000045A5 2E
01:000045A6 2E
01:000045A7 2E
01:000045A8 2E              	  1341: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045A9 2E
01:000045AA 2E
01:000045AB 2E
01:000045AC 2E
01:000045AD 2E
01:000045AE 2E
01:000045AF 2E
01:000045B0 2E              	  1342: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B1 2E
01:000045B2 2E
01:000045B3 2E
01:000045B4 2E
01:000045B5 2E
01:000045B6 2E
01:000045B7 2E
01:000045B8 2E              	  1343: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045B9 2E
01:000045BA 2E
01:000045BB 2E
01:000045BC 2E
01:000045BD 2E
01:000045BE 2E
01:000045BF 2E
01:000045C0 2E              	  1344: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C1 2E
01:000045C2 2E
01:000045C3 2E
01:000045C4 2E
01:000045C5 2E
01:000045C6 2E
01:000045C7 2E
01:000045C8 2E              	  1345: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C9 2E
01:000045CA 2E
01:000045CB 2E
01:000045CC 2E
01:000045CD 2E
01:000045CE 2E
01:000045CF 2E
01:000045D0 2E              	  1346: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D1 2E
01:000045D2 2E
01:000045D3 2E
01:000045D4 2E
01:000045D5 2E
01:000045D6 2E
01:000045D7 2E
01:000045D8 2E              	  1347: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D9 2E
01:000045DA 2E
01:000045DB 2E
01:000045DC 2E
01:000045DD 2E
01:000045DE 2E
01:000045DF 2E
01:000045E0 2E              	  1348: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E1 2E
01:000045E2 2E
01:000045E3 2E
01:000045E4 2E
01:000045E5 2E
01:000045E6 2E
01:000045E7 2E
01:000045E8 2E              	  1349: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:000045E9 2E
01:000045EA FA
01:000045EB 2E
01:000045EC 2E
01:000045ED 2E
01:000045EE 2E
01:000045EF 2E
                            	  1350: 
                            	  1351: _shiftedScanCodes:
01:000045F0 2E              	  1352: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F1 2E
01:000045F2 2E
01:000045F3 2E
01:000045F4 2E
01:000045F5 2E
01:000045F6 2E
01:000045F7 2E
01:000045F8 2E              	  1353: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:000045F9 2E
01:000045FA 2E
01:000045FB 2E
01:000045FC 2E
01:000045FD 09
01:000045FE 7E
01:000045FF 2E
01:00004600 2E              	  1354: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:00004601 2E
01:00004602 2E
01:00004603 2E
01:00004604 2E
01:00004605 51
01:00004606 21
01:00004607 2E
01:00004608 2E              	  1355: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:00004609 2E
01:0000460A 5A
01:0000460B 53
01:0000460C 41
01:0000460D 57
01:0000460E 40
01:0000460F 2E
01:00004610 2E              	  1356: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:00004611 43
01:00004612 58
01:00004613 44
01:00004614 45
01:00004615 24
01:00004616 23
01:00004617 2E
01:00004618 2E              	  1357: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:00004619 20
01:0000461A 56
01:0000461B 46
01:0000461C 54
01:0000461D 52
01:0000461E 25
01:0000461F 2E
01:00004620 2E              	  1358: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:00004621 4E
01:00004622 42
01:00004623 48
01:00004624 47
01:00004625 59
01:00004626 5E
01:00004627 2E
01:00004628 2E              	  1359: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:00004629 2E
01:0000462A 4D
01:0000462B 4A
01:0000462C 55
01:0000462D 26
01:0000462E 2A
01:0000462F 2E
01:00004630 2E              	  1360: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:00004631 3C
01:00004632 4B
01:00004633 49
01:00004634 4F
01:00004635 29
01:00004636 28
01:00004637 2E
01:00004638 2E              	  1361: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:00004639 3E
01:0000463A 3F
01:0000463B 4C
01:0000463C 3A
01:0000463D 50
01:0000463E 5F
01:0000463F 2E
01:00004640 2E              	  1362: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004641 2E
01:00004642 22
01:00004643 2E
01:00004644 7B
01:00004645 2B
01:00004646 2E
01:00004647 2E
01:00004648 2E              	  1363: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004649 2E
01:0000464A 0D
01:0000464B 7D
01:0000464C 2E
01:0000464D 7C
01:0000464E 2E
01:0000464F 2E
01:00004650 2E              	  1364: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004651 2E
01:00004652 2E
01:00004653 2E
01:00004654 2E
01:00004655 2E
01:00004656 08
01:00004657 2E
01:00004658 2E              	  1365: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004659 2E
01:0000465A 2E
01:0000465B 2E
01:0000465C 2E
01:0000465D 2E
01:0000465E 2E
01:0000465F 2E
01:00004660 2E              	  1366: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:00004661 7F
01:00004662 2E
01:00004663 2E
01:00004664 2E
01:00004665 2E
01:00004666 1B
01:00004667 2E
01:00004668 2E              	  1367: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004669 2E
01:0000466A 2E
01:0000466B 2E
01:0000466C 2E
01:0000466D 2E
01:0000466E 2E
01:0000466F 2E
                            	  1368: 
01:00004670 2E              	  1369: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004671 2E
01:00004672 2E
01:00004673 2E
01:00004674 2E
01:00004675 2E
01:00004676 2E
01:00004677 2E
01:00004678 2E              	  1370: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004679 2E
01:0000467A 2E
01:0000467B 2E
01:0000467C 2E
01:0000467D 2E
01:0000467E 2E
01:0000467F 2E
01:00004680 2E              	  1371: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004681 2E
01:00004682 2E
01:00004683 2E
01:00004684 2E
01:00004685 2E
01:00004686 2E
01:00004687 2E
01:00004688 2E              	  1372: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004689 2E
01:0000468A 2E
01:0000468B 2E
01:0000468C 2E
01:0000468D 2E
01:0000468E 2E
01:0000468F 2E
01:00004690 2E              	  1373: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004691 2E
01:00004692 2E
01:00004693 2E
01:00004694 2E
01:00004695 2E
01:00004696 2E
01:00004697 2E
01:00004698 2E              	  1374: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004699 2E
01:0000469A 2E
01:0000469B 2E
01:0000469C 2E
01:0000469D 2E
01:0000469E 2E
01:0000469F 2E
01:000046A0 2E              	  1375: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046A1 2E
01:000046A2 2E
01:000046A3 2E
01:000046A4 2E
01:000046A5 2E
01:000046A6 2E
01:000046A7 2E
01:000046A8 2E              	  1376: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046A9 2E
01:000046AA 2E
01:000046AB 2E
01:000046AC 2E
01:000046AD 2E
01:000046AE 2E
01:000046AF 2E
01:000046B0 2E              	  1377: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B1 2E
01:000046B2 2E
01:000046B3 2E
01:000046B4 2E
01:000046B5 2E
01:000046B6 2E
01:000046B7 2E
01:000046B8 2E              	  1378: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B9 2E
01:000046BA 2E
01:000046BB 2E
01:000046BC 2E
01:000046BD 2E
01:000046BE 2E
01:000046BF 2E
01:000046C0 2E              	  1379: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C1 2E
01:000046C2 2E
01:000046C3 2E
01:000046C4 2E
01:000046C5 2E
01:000046C6 2E
01:000046C7 2E
01:000046C8 2E              	  1380: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C9 2E
01:000046CA 2E
01:000046CB 2E
01:000046CC 2E
01:000046CD 2E
01:000046CE 2E
01:000046CF 2E
01:000046D0 2E              	  1381: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D1 2E
01:000046D2 2E
01:000046D3 2E
01:000046D4 2E
01:000046D5 2E
01:000046D6 2E
01:000046D7 2E
01:000046D8 2E              	  1382: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D9 2E
01:000046DA 2E
01:000046DB 2E
01:000046DC 2E
01:000046DD 2E
01:000046DE 2E
01:000046DF 2E
01:000046E0 2E              	  1383: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E1 2E
01:000046E2 2E
01:000046E3 2E
01:000046E4 2E
01:000046E5 2E
01:000046E6 2E
01:000046E7 2E
01:000046E8 2E              	  1384: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E9 2E
01:000046EA 2E
01:000046EB 2E
01:000046EC 2E
01:000046ED 2E
01:000046EE 2E
01:000046EF 2E
                            	  1385: 
                            	  1386: ; control
                            	  1387: _keybdControlCodes:
01:000046F0 2E              	  1388: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046F1 2E
01:000046F2 2E
01:000046F3 2E
01:000046F4 2E
01:000046F5 2E
01:000046F6 2E
01:000046F7 2E
01:000046F8 2E              	  1389: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:000046F9 2E
01:000046FA 2E
01:000046FB 2E
01:000046FC 2E
01:000046FD 09
01:000046FE 7E
01:000046FF 2E
01:00004700 2E              	  1390: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:00004701 2E
01:00004702 2E
01:00004703 2E
01:00004704 2E
01:00004705 11
01:00004706 21
01:00004707 2E
01:00004708 2E              	  1391: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:00004709 2E
01:0000470A 1A
01:0000470B 13
01:0000470C 01
01:0000470D 17
01:0000470E 40
01:0000470F 2E
01:00004710 2E              	  1392: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:00004711 03
01:00004712 18
01:00004713 04
01:00004714 05
01:00004715 24
01:00004716 23
01:00004717 2E
01:00004718 2E              	  1393: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:00004719 20
01:0000471A 16
01:0000471B 06
01:0000471C 14
01:0000471D 12
01:0000471E 25
01:0000471F 2E
01:00004720 2E              	  1394: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:00004721 0E
01:00004722 02
01:00004723 08
01:00004724 07
01:00004725 19
01:00004726 5E
01:00004727 2E
01:00004728 2E              	  1395: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:00004729 2E
01:0000472A 0D
01:0000472B 0A
01:0000472C 15
01:0000472D 26
01:0000472E 2A
01:0000472F 2E
01:00004730 2E              	  1396: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:00004731 3C
01:00004732 0B
01:00004733 09
01:00004734 0F
01:00004735 29
01:00004736 28
01:00004737 2E
01:00004738 2E              	  1397: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:00004739 3E
01:0000473A 3F
01:0000473B 0C
01:0000473C 3A
01:0000473D 10
01:0000473E 5F
01:0000473F 2E
01:00004740 2E              	  1398: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004741 2E
01:00004742 22
01:00004743 2E
01:00004744 7B
01:00004745 2B
01:00004746 2E
01:00004747 2E
01:00004748 2E              	  1399: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:00004749 2E
01:0000474A 0D
01:0000474B 7D
01:0000474C 2E
01:0000474D 7C
01:0000474E 2E
01:0000474F 2E
01:00004750 2E              	  1400: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004751 2E
01:00004752 2E
01:00004753 2E
01:00004754 2E
01:00004755 2E
01:00004756 08
01:00004757 2E
01:00004758 2E              	  1401: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004759 2E
01:0000475A 2E
01:0000475B 2E
01:0000475C 2E
01:0000475D 2E
01:0000475E 2E
01:0000475F 2E
01:00004760 2E              	  1402: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:00004761 7F
01:00004762 2E
01:00004763 2E
01:00004764 2E
01:00004765 2E
01:00004766 1B
01:00004767 2E
01:00004768 2E              	  1403: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004769 2E
01:0000476A 2E
01:0000476B 2E
01:0000476C 2E
01:0000476D 2E
01:0000476E 2E
01:0000476F 2E
                            	  1404: 
                            	  1405: _keybdExtendedCodes:
01:00004770 2E              	  1406: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:00004771 2E
01:00004772 2E
01:00004773 2E
01:00004774 A3
01:00004775 A1
01:00004776 A2
01:00004777 2E
01:00004778 2E              	  1407: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004779 2E
01:0000477A 2E
01:0000477B 2E
01:0000477C 2E
01:0000477D 2E
01:0000477E 2E
01:0000477F 2E
01:00004780 2E              	  1408: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004781 2E
01:00004782 2E
01:00004783 2E
01:00004784 2E
01:00004785 2E
01:00004786 2E
01:00004787 2E
01:00004788 2E              	  1409: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004789 2E
01:0000478A 2E
01:0000478B 2E
01:0000478C 2E
01:0000478D 2E
01:0000478E 2E
01:0000478F 2E
01:00004790 2E              	  1410: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004791 2E
01:00004792 2E
01:00004793 2E
01:00004794 2E
01:00004795 2E
01:00004796 2E
01:00004797 2E
01:00004798 2E              	  1411: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004799 2E
01:0000479A 2E
01:0000479B 2E
01:0000479C 2E
01:0000479D 2E
01:0000479E 2E
01:0000479F 2E
01:000047A0 2E              	  1412: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047A1 2E
01:000047A2 2E
01:000047A3 2E
01:000047A4 2E
01:000047A5 2E
01:000047A6 2E
01:000047A7 2E
01:000047A8 2E              	  1413: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047A9 2E
01:000047AA 2E
01:000047AB 2E
01:000047AC 2E
01:000047AD 2E
01:000047AE 2E
01:000047AF 2E
01:000047B0 2E              	  1414: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047B1 2E
01:000047B2 2E
01:000047B3 2E
01:000047B4 2E
01:000047B5 2E
01:000047B6 2E
01:000047B7 2E
01:000047B8 2E              	  1415: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047B9 2E
01:000047BA 2E
01:000047BB 2E
01:000047BC 2E
01:000047BD 2E
01:000047BE 2E
01:000047BF 2E
01:000047C0 2E              	  1416: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047C1 2E
01:000047C2 2E
01:000047C3 2E
01:000047C4 2E
01:000047C5 2E
01:000047C6 2E
01:000047C7 2E
01:000047C8 2E              	  1417: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047C9 2E
01:000047CA 2E
01:000047CB 2E
01:000047CC 2E
01:000047CD 2E
01:000047CE 2E
01:000047CF 2E
01:000047D0 2E              	  1418: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047D1 2E
01:000047D2 2E
01:000047D3 2E
01:000047D4 2E
01:000047D5 2E
01:000047D6 2E
01:000047D7 2E
01:000047D8 2E              	  1419: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:000047D9 95
01:000047DA 2E
01:000047DB 93
01:000047DC 94
01:000047DD 2E
01:000047DE 2E
01:000047DF 2E
01:000047E0 98              	  1420: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:000047E1 99
01:000047E2 92
01:000047E3 2E
01:000047E4 91
01:000047E5 90
01:000047E6 2E
01:000047E7 2E
01:000047E8 2E              	  1421: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:000047E9 2E
01:000047EA 97
01:000047EB 2E
01:000047EC 2E
01:000047ED 96
01:000047EE 2E
01:000047EF 2E
                            	  1422: 
                            	  1423: ;==============================================================================
                            	  1424: ;==============================================================================
                            	  1425: ; Monitor
                            	  1426: ;==============================================================================
                            	  1427: ;==============================================================================
                            	  1428: ;
                            	  1429: ; Get a word from screen memory and swap byte order
                            	  1430: 
                            	  1431: FromScreen:
01:000047F0 2210            	  1432: 	move.l	(a0),d1
01:000047F2 E159            	  1433: 	rol.w		#8,d1
01:000047F4 4841            	  1434: 	swap		d1
01:000047F6 E159            	  1435: 	rol.w		#8,d1
01:000047F8 5088            	  1436: 	lea			8(a0),a0	; increment screen pointer
01:000047FA 4E75            	  1437: 	rts
                            	  1438: 
                            	  1439: StartMon:
01:000047FC 427900040202    	  1440: 	clr.w		NumSetBreakpoints
01:00004802 6100088C        	  1441: 	bsr			ClearBreakpointList
                            	  1442: Monitor:
                            	  1443: 	; Reset the stack pointer on each entry into the monitor
01:00004806 2E7C00040FFC    	  1444: 	move.l	#$40FFC,sp	; reset core's stack
01:0000480C 46FC2500        	  1445: 	move.w	#$2500,sr		; enable level 6 and higher interrupts
01:00004810 7201            	  1446: 	moveq		#1,d1
01:00004812 6100B922        	  1447: 	bsr			UnlockSemaphore
01:00004816 42390004000C    	  1448: 	clr.b		KeybdEcho		; turn off keyboard echo
                            	  1449: PromptLn:
01:0000481C 6100F520        	  1450: 	bsr			CRLF
01:00004820 123C0024        	  1451: 	move.b	#'$',d1
01:00004824 6100F562        	  1452: 	bsr			DisplayChar
                            	  1453: 
                            	  1454: ; Get characters until a CR is keyed
                            	  1455: ;
                            	  1456: Prompt3:
01:00004828 6100F9E6        	  1457: 	bsr			GetKey
01:0000482C 0C0100FF        	  1458: 	cmpi.b	#-1,d1
01:00004830 67F6            	  1459: 	beq.s		Prompt3
01:00004832 0C01000D        	  1460: 	cmpi.b	#CR,d1
01:00004836 6706            	  1461: 	beq.s		Prompt1
01:00004838 6100F54E        	  1462: 	bsr			DisplayChar
01:0000483C 60EA            	  1463: 	bra.s		Prompt3
                            	  1464: 
                            	  1465: ; Process the screen line that the CR was keyed on
                            	  1466: ;
                            	  1467: Prompt1:
01:0000483E 423900040001    	  1468: 	clr.b		CursorCol			; go back to the start of the line
01:00004844 6100F534        	  1469: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1470: .0001:
01:00004848 61A6            	  1471: 	bsr			FromScreen		; grab character off screen
01:0000484A 0C010024        	  1472: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:0000484E 67F8            	  1473: 	beq.s		.0001
                            	  1474: 	
                            	  1475: ; Dispatch based on command character
                            	  1476: ;
                            	  1477: Prompt2:
01:00004850 0C010061        	  1478: 	cmpi.b	#'a',d1
01:00004854 67000652        	  1479: 	beq			AudioInputTest
01:00004858 0C010062        	  1480: 	cmpi.b	#'b',d1
01:0000485C 6700064C        	  1481: 	beq			BouncingBalls
01:00004860 0C010067        	  1482: 	cmpi.b	#'g',d1
01:00004864 67000646        	  1483: 	beq			GraphicsDemo
01:00004868 0C01003A        	  1484: 	cmpi.b	#':',d1			; $: - edit memory
01:0000486C 67000284        	  1485: 	beq			EditMem
01:00004870 0C010044        	  1486: 	cmpi.b	#'D',d1			; $D - dump memory
01:00004874 6612            	  1487: 	bne.s		.0003
01:00004876 6100FF78        	  1488: 	bsr			FromScreen
01:0000487A 0C010052        	  1489: 	cmpi.b	#'R',d1			; $DR - dump registers
01:0000487E 67000356        	  1490: 	beq			DumpRegs
01:00004882 5188            	  1491: 	lea			-8(a0),a0
01:00004884 600002C6        	  1492: 	bra			DumpMem
                            	  1493: .0003:
01:00004888 0C010046        	  1494: 	cmpi.b	#'F',d1
01:0000488C 6700020C        	  1495: 	beq			FillMem
01:00004890 0C010042        	  1496: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:00004894 6634            	  1497: 	bne.s	.0001
01:00004896 6100FF58        	  1498: 	bsr			FromScreen
01:0000489A 0C010052        	  1499: 	cmpi.b	#'R',d1
01:0000489E 6624            	  1500: 	bne.s		.0004
01:000048A0 6100023E        	  1501: 	bsr			ignBlanks
01:000048A4 6100FF4A        	  1502: 	bsr			FromScreen
01:000048A8 0C01002B        	  1503: 	cmpi.b	#'+',d1
01:000048AC 670006F2        	  1504: 	beq			ArmBreakpoint
01:000048B0 0C01002D        	  1505: 	cmpi.b	#'-',d1
01:000048B4 67000766        	  1506: 	beq			DisarmBreakpoint
01:000048B8 0C01004C        	  1507: 	cmpi.b	#'L',d1
01:000048BC 670007B2        	  1508: 	beq			ListBreakpoints
01:000048C0 6000FF44        	  1509: 	bra			Monitor
                            	  1510: .0004:
01:000048C4 4EF9FFFCC000    	  1511: 	jmp			$FFFCC000
                            	  1512: .0001:
01:000048CA 0C01004A        	  1513: 	cmpi.b	#'J',d1			; $J - execute code
01:000048CE 6700026E        	  1514: 	beq			ExecuteCode
01:000048D2 0C01004C        	  1515: 	cmpi.b	#'L',d1			; $L - load S19 file
01:000048D6 67000454        	  1516: 	beq			LoadS19
01:000048DA 0C01003F        	  1517: 	cmpi.b	#'?',d1			; $? - display help
01:000048DE 6744            	  1518: 	beq			DisplayHelp
01:000048E0 0C010043        	  1519: 	cmpi.b	#'C',d1			; $C - clear screen
01:000048E4 6716            	  1520: 	beq			TestCLS
01:000048E6 0C010054        	  1521: 	cmpi.b	#'T',d1			; $T - run cpu test program
01:000048EA 660C            	  1522: 	bne.s		.0002
01:000048EC 6100B88C        	  1523: 	bsr			cpu_test
01:000048F0 43FA08EF        	  1524: 	lea			msg_test_done,a1
01:000048F4 6100F6FA        	  1525: 	bsr			DisplayStringCRLF
                            	  1526: .0002:
01:000048F8 6000FF0C        	  1527: 	bra			Monitor
                            	  1528: 
                            	  1529: TestCLS:
01:000048FC 6100FEF2        	  1530: 	bsr			FromScreen
01:00004900 5242            	  1531: 	addq		#1,d2
01:00004902 0C01004C        	  1532: 	cmpi.b	#'L',d1
01:00004906 6600FEFE        	  1533: 	bne			Monitor
01:0000490A 6100FEE4        	  1534: 	bsr			FromScreen
01:0000490E 5242            	  1535: 	addq		#1,d2
01:00004910 0C010053        	  1536: 	cmpi.b	#'S',d1
01:00004914 6600FEF0        	  1537: 	bne			Monitor
01:00004918 61000594        	  1538: 	bsr			ClearScreen
01:0000491C 6100F6FE        	  1539: 	bsr			HomeCursor
01:00004920 6000FEE4        	  1540: 	bra			Monitor
                            	  1541: 	
                            	  1542: DisplayHelp:
01:00004924 43FA000A        	  1543: 	lea			HelpMsg,a1
01:00004928 6100F6B0        	  1544: 	bsr			DisplayString
01:0000492C 6000FED8        	  1545: 	bra			Monitor
                            	  1546: 
                            	  1547: HelpMsg:
01:00004930 3F203D2044697370	  1548: 	dc.b	"? = Display help",CR,LF
01:00004938 6C61792068656C70
01:00004940 0D
01:00004941 0A
01:00004942 434C53203D20636C	  1549: 	dc.b	"CLS = clear screen",CR,LF
01:0000494A 6561722073637265
01:00004952 656E
01:00004954 0D
01:00004955 0A
01:00004956 3A203D2045646974	  1550: 	dc.b	": = Edit memory bytes",CR,LF
01:0000495E 206D656D6F727920
01:00004966 6279746573
01:0000496B 0D
01:0000496C 0A
01:0000496D 46203D2046696C6C	  1551: 	dc.b	"F = Fill memory",CR,LF
01:00004975 206D656D6F7279
01:0000497C 0D
01:0000497D 0A
01:0000497E 4C203D204C6F6164	  1552: 	dc.b	"L = Load S19 file",CR,LF
01:00004986 205331392066696C
01:0000498E 65
01:0000498F 0D
01:00004990 0A
01:00004991 44203D2044756D70	  1553: 	dc.b	"D = Dump memory",CR,LF
01:00004999 206D656D6F7279
01:000049A0 0D
01:000049A1 0A
01:000049A2 42203D2073746172	  1554: 	dc.b	"B = start tiny basic",CR,LF
01:000049AA 742074696E792062
01:000049B2 61736963
01:000049B6 0D
01:000049B7 0A
01:000049B8 4252203D20736574	  1555: 	dc.b  "BR = set breakpoint",CR,LF
01:000049C0 20627265616B706F
01:000049C8 696E74
01:000049CB 0D
01:000049CC 0A
01:000049CD 4A203D204A756D70	  1556: 	dc.b	"J = Jump to code",CR,LF
01:000049D5 20746F20636F6465
01:000049DD 0D
01:000049DE 0A
01:000049DF 54203D2063707520	  1557: 	dc.b	"T = cpu test program",CR,LF,0
01:000049E7 746573742070726F
01:000049EF 6772616D
01:000049F3 0D
01:000049F4 0A
01:000049F5 00
                            	  1558: 	even
                            	  1559: 
                            	  1560: ;------------------------------------------------------------------------------
                            	  1561: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1562: ; Used to fetch a command line. (Not currently used).
                            	  1563: ;
                            	  1564: ; d0.b	- command prompt
                            	  1565: ;------------------------------------------------------------------------------
                            	  1566: 
                            	  1567: GetCmdLine:
01:000049F6 6100F390        	  1568: 		bsr		DisplayChar		; display prompt
01:000049FA 103C0020        	  1569: 		move.b	#' ',d0
01:000049FE 6100F388        	  1570: 		bsr		DisplayChar
01:00004A02 41F900040040    	  1571: 		lea		CmdBuf,a0
                            	  1572: .0001:
01:00004A08 6100F806        	  1573: 		bsr		GetKey
01:00004A0C B03C0008        	  1574: 		cmp.b	#CTRLH,d0
01:00004A10 6728            	  1575: 		beq.s	.0003
01:00004A12 B03C0018        	  1576: 		cmp.b	#CTRLX,d0
01:00004A16 6746            	  1577: 		beq.s	.0004
01:00004A18 B03C000D        	  1578: 		cmp.b	#CR,d0
01:00004A1C 6706            	  1579: 		beq.s	.0002
01:00004A1E B03C0020        	  1580: 		cmp.b	#' ',d0
01:00004A22 65E4            	  1581: 		bcs.s	.0001
                            	  1582: .0002:
01:00004A24 1080            	  1583: 		move.b	d0,(a0)
01:00004A26 5088            	  1584: 		lea			8(a0),a0
01:00004A28 6100F35E        	  1585: 		bsr		DisplayChar
01:00004A2C B03C000D        	  1586: 		cmp.b	#CR,d0
01:00004A30 675E            	  1587: 		beq		.0007
01:00004A32 B1FC0004007F    	  1588: 		cmp.l	#CmdBufEnd-1,a0
01:00004A38 65CE            	  1589: 		bcs.s	.0001
                            	  1590: .0003:
01:00004A3A 103C0008        	  1591: 		move.b	#CTRLH,d0
01:00004A3E 6100F348        	  1592: 		bsr		DisplayChar
01:00004A42 103C0020        	  1593: 		move.b	#' ',d0
01:00004A46 6100F340        	  1594: 		bsr		DisplayChar
01:00004A4A B1FC00040040    	  1595: 		cmp.l	#CmdBuf,a0
01:00004A50 63B6            	  1596: 		bls.s	.0001
01:00004A52 103C0008        	  1597: 		move.b	#CTRLH,d0
01:00004A56 6100F330        	  1598: 		bsr		DisplayChar
01:00004A5A 5388            	  1599: 		subq.l	#1,a0
01:00004A5C 60AA            	  1600: 		bra.s	.0001
                            	  1601: .0004:
01:00004A5E 2208            	  1602: 		move.l	a0,d1
01:00004A60 92BC00040040    	  1603: 		sub.l	#CmdBuf,d1
01:00004A66 671E            	  1604: 		beq.s	.0006
01:00004A68 5341            	  1605: 		subq	#1,d1
                            	  1606: .0005:
01:00004A6A 103C0008        	  1607: 		move.b	#CTRLH,d0
01:00004A6E 6100F318        	  1608: 		bsr		DisplayChar
01:00004A72 103C0020        	  1609: 		move.b	#' ',d0
01:00004A76 6100F310        	  1610: 		bsr		DisplayChar
01:00004A7A 103C0008        	  1611: 		move.b	#CTRLH,d0
01:00004A7E 6100F308        	  1612: 		bsr		DisplayChar
01:00004A82 51C9FFE6        	  1613: 		dbra	d1,.0005
                            	  1614: .0006:
01:00004A86 41F900040040    	  1615: 		lea		CmdBuf,a0
01:00004A8C 6000FF7A        	  1616: 		bra		.0001
                            	  1617: .0007:
01:00004A90 103C000A        	  1618: 		move.b	#LF,d0
01:00004A94 6100F2F2        	  1619: 		bsr		DisplayChar
01:00004A98 4E75            	  1620: 		rts
                            	  1621: 
                            	  1622: 		
                            	  1623: ;------------------------------------------------------------------------------
                            	  1624: ; Fill memory
                            	  1625: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1626: ; FW = fill words
                            	  1627: ; FL = fill longs
                            	  1628: ; F = fill bytes
                            	  1629: ;------------------------------------------------------------------------------
                            	  1630: ;
                            	  1631: FillMem:
01:00004A9A 6100FD54        	  1632: 	bsr			FromScreen
                            	  1633: 	;bsr		ScreenToAscii
01:00004A9E 1801            	  1634: 	move.b	d1,d4			; d4 = fill size
01:00004AA0 613E            	  1635: 	bsr			ignBlanks
01:00004AA2 610001DC        	  1636: 	bsr			GetHexNumber
01:00004AA6 2241            	  1637: 	move.l	d1,a1			; a1 = start
01:00004AA8 6136            	  1638: 	bsr			ignBlanks
01:00004AAA 610001D4        	  1639: 	bsr			GetHexNumber
01:00004AAE 2601            	  1640: 	move.l	d1,d3			; d3 = count
01:00004AB0 612E            	  1641: 	bsr			ignBlanks
01:00004AB2 610001CC        	  1642: 	bsr			GetHexNumber	; fill value
01:00004AB6 0C04004C        	  1643: 	cmpi.b	#'L',d4
01:00004ABA 660A            	  1644: 	bne			fmem1
                            	  1645: fmemL:
01:00004ABC 22C1            	  1646: 	move.l	d1,(a1)+
01:00004ABE 5383            	  1647: 	sub.l	#1,d3
01:00004AC0 66FA            	  1648: 	bne.s	fmemL
01:00004AC2 6000FD42        	  1649: 	bra		Monitor
                            	  1650: fmem1
01:00004AC6 0C040057        	  1651: 	cmpi.b	#'W',d4
01:00004ACA 660A            	  1652: 	bne		fmemB
                            	  1653: fmemW:
01:00004ACC 32C1            	  1654: 	move.w	d1,(a1)+
01:00004ACE 5383            	  1655: 	sub.l	#1,d3
01:00004AD0 66FA            	  1656: 	bne.s	fmemW
01:00004AD2 6000FD32        	  1657: 	bra		Monitor
                            	  1658: fmemB:
01:00004AD6 12C1            	  1659: 	move.b	d1,(a1)+
01:00004AD8 5383            	  1660: 	sub.l	#1,d3
01:00004ADA 66FA            	  1661: 	bne.s	fmemB
01:00004ADC 6000FD28        	  1662: 	bra		Monitor
                            	  1663: 
                            	  1664: ;------------------------------------------------------------------------------
                            	  1665: ; Modifies:
                            	  1666: ;	a0	- text pointer
                            	  1667: ;------------------------------------------------------------------------------
                            	  1668: ;
                            	  1669: ignBlanks:
01:00004AE0 2F01            	  1670: 	move.l	d1,-(a7)
                            	  1671: .0001:
01:00004AE2 6100FD0C        	  1672: 	bsr			FromScreen
01:00004AE6 0C010020        	  1673: 	cmpi.b	#' ',d1
01:00004AEA 67F6            	  1674: 	beq.s		.0001
01:00004AEC 5188            	  1675: 	lea			-8(a0),a0
01:00004AEE 221F            	  1676: 	move.l	(a7)+,d1
01:00004AF0 4E75            	  1677: 	rts
                            	  1678: 
                            	  1679: ;------------------------------------------------------------------------------
                            	  1680: ; Edit memory byte.
                            	  1681: ;------------------------------------------------------------------------------
                            	  1682: ;
                            	  1683: EditMem:
01:00004AF2 61EC            	  1684: 	bsr		ignBlanks
01:00004AF4 6100018A        	  1685: 	bsr		GetHexNumber
01:00004AF8 2241            	  1686: 	move.l	d1,a1
                            	  1687: edtmem1:
01:00004AFA 61E4            	  1688: 	bsr		ignBlanks
01:00004AFC 61000182        	  1689: 	bsr		GetHexNumber
01:00004B00 12C1            	  1690: 	move.b	d1,(a1)+
01:00004B02 61DC            	  1691: 	bsr		ignBlanks
01:00004B04 6100017A        	  1692: 	bsr		GetHexNumber
01:00004B08 12C1            	  1693: 	move.b	d1,(a1)+
01:00004B0A 61D4            	  1694: 	bsr		ignBlanks
01:00004B0C 61000172        	  1695: 	bsr		GetHexNumber
01:00004B10 12C1            	  1696: 	move.b	d1,(a1)+
01:00004B12 61CC            	  1697: 	bsr		ignBlanks
01:00004B14 6100016A        	  1698: 	bsr		GetHexNumber
01:00004B18 12C1            	  1699: 	move.b	d1,(a1)+
01:00004B1A 61C4            	  1700: 	bsr		ignBlanks
01:00004B1C 61000162        	  1701: 	bsr		GetHexNumber
01:00004B20 12C1            	  1702: 	move.b	d1,(a1)+
01:00004B22 61BC            	  1703: 	bsr		ignBlanks
01:00004B24 6100015A        	  1704: 	bsr		GetHexNumber
01:00004B28 12C1            	  1705: 	move.b	d1,(a1)+
01:00004B2A 61B4            	  1706: 	bsr		ignBlanks
01:00004B2C 61000152        	  1707: 	bsr		GetHexNumber
01:00004B30 12C1            	  1708: 	move.b	d1,(a1)+
01:00004B32 61AC            	  1709: 	bsr		ignBlanks
01:00004B34 6100014A        	  1710: 	bsr		GetHexNumber
01:00004B38 12C1            	  1711: 	move.b	d1,(a1)+
01:00004B3A 6000FCCA        	  1712: 	bra		Monitor
                            	  1713: 
                            	  1714: ;------------------------------------------------------------------------------
                            	  1715: ; Execute code at the specified address.
                            	  1716: ;------------------------------------------------------------------------------
                            	  1717: 
                            	  1718: ExecuteCode:
01:00004B3E 61A0            	  1719: 	bsr			ignBlanks
01:00004B40 6100013E        	  1720: 	bsr			GetHexNumber
01:00004B44 2041            	  1721: 	move.l	d1,a0
01:00004B46 4E90            	  1722: 	jsr			(a0)
01:00004B48 6000FCBC        	  1723: 	bra     Monitor
                            	  1724: 
                            	  1725: ;------------------------------------------------------------------------------
                            	  1726: ; Do a memory dump of the requested location.
                            	  1727: ; D 0800 0850
                            	  1728: ;------------------------------------------------------------------------------
                            	  1729: 
                            	  1730: DumpMem:
01:00004B4C 6192            	  1731: 	bsr			ignBlanks
01:00004B4E 61000130        	  1732: 	bsr			GetHexNumber
01:00004B52 6700FCB2        	  1733: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
01:00004B56 2601            	  1734: 	move.l	d1,d3				; save off start of range
01:00004B58 6186            	  1735: 	bsr			ignBlanks
01:00004B5A 61000124        	  1736: 	bsr			GetHexNumber
01:00004B5E 6608            	  1737: 	bne.s		DumpMem1
01:00004B60 2203            	  1738: 	move.l	d3,d1
01:00004B62 068100000040    	  1739: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1740: DumpMem1:
01:00004B68 2043            	  1741: 	move.l	d3,a0
01:00004B6A 2241            	  1742: 	move.l	d1,a1
01:00004B6C 6100F1D0        	  1743: 	bsr			CRLF
                            	  1744: .0001:
01:00004B70 B3C8            	  1745: 	cmpa.l	a0,a1
01:00004B72 6300FC92        	  1746: 	bls			Monitor
01:00004B76 6102            	  1747: 	bsr			DisplayMem
01:00004B78 60F6            	  1748: 	bra.s		.0001
                            	  1749: 
                            	  1750: ;------------------------------------------------------------------------------
                            	  1751: ; Display memory dump in a format suitable for edit.
                            	  1752: ;
                            	  1753: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  1754: ;
                            	  1755: ; Modifies:
                            	  1756: ;		d1,d2,a0
                            	  1757: ;------------------------------------------------------------------------------
                            	  1758: 
                            	  1759: DisplayMem:
01:00004B7A 123C003A        	  1760: 	move.b	#':',d1
01:00004B7E 6100F208        	  1761: 	bsr			DisplayChar
01:00004B82 2208            	  1762: 	move.l	a0,d1
01:00004B84 6100017A        	  1763: 	bsr			DisplayTetra
01:00004B88 7407            	  1764: 	moveq		#7,d2
                            	  1765: dspmem1:
01:00004B8A 123C0020        	  1766: 	move.b	#' ',d1
01:00004B8E 6100F1F8        	  1767: 	bsr			DisplayChar
01:00004B92 1218            	  1768: 	move.b	(a0)+,d1
01:00004B94 61000176        	  1769: 	bsr			DisplayByte
01:00004B98 51CAFFF0        	  1770: 	dbra		d2,dspmem1
01:00004B9C 61000148        	  1771: 	bsr			DisplayTwoSpaces
01:00004BA0 123C0022        	  1772: 	move.b	#34,d1
01:00004BA4 6100F1E2        	  1773: 	bsr			DisplayChar
01:00004BA8 5188            	  1774: 	lea			-8(a0),a0
01:00004BAA 7407            	  1775: 	moveq		#7,d2
                            	  1776: .0002:	
01:00004BAC 1218            	  1777: 	move.b	(a0)+,d1
01:00004BAE B23C0020        	  1778: 	cmp.b		#' ',d1
01:00004BB2 6506            	  1779: 	blo.s		.0003
01:00004BB4 B23C007F        	  1780: 	cmp.b		#127,d1
01:00004BB8 6304            	  1781: 	bls.s		.0001
                            	  1782: .0003:
01:00004BBA 123C002E        	  1783: 	move.b	#'.',d1
                            	  1784: .0001:
01:00004BBE 6100F1C8        	  1785: 	bsr			DisplayChar
01:00004BC2 51CAFFE8        	  1786: 	dbra		d2,.0002
01:00004BC6 123C0022        	  1787: 	move.b	#34,d1
01:00004BCA 6100F1BC        	  1788: 	bsr			DisplayChar
01:00004BCE 6100F67A        	  1789: 	bsr			CheckForCtrlC
01:00004BD2 6000F16A        	  1790: 	bra			CRLF
                            	  1791: 
                            	  1792: ;------------------------------------------------------------------------------
                            	  1793: ; Dump Registers
                            	  1794: ;    The dump is in a format that allows the register value to be edited.
                            	  1795: ;
                            	  1796: ; RegD0 12345678
                            	  1797: ; RegD1 77777777
                            	  1798: ;	... etc
                            	  1799: ;------------------------------------------------------------------------------
                            	  1800: 
                            	  1801: DumpRegs:
01:00004BD6 6100F166        	  1802: 	bsr			CRLF
01:00004BDA 303C000F        	  1803: 	move.w	#15,d0					; number of registers-1
01:00004BDE 41FA007A        	  1804: 	lea			msg_reglist,a0	;
01:00004BE2 43FA0072        	  1805: 	lea			msg_regs,a1
01:00004BE6 45F900040100    	  1806: 	lea			Regsave,a2			; a2 points to register save area
                            	  1807: .0001:
01:00004BEC 6100F3EC        	  1808: 	bsr			DisplayString
01:00004BF0 1218            	  1809: 	move.b	(a0)+,d1
01:00004BF2 6100F194        	  1810: 	bsr			DisplayChar
01:00004BF6 1218            	  1811: 	move.b	(a0)+,d1
01:00004BF8 6100F18E        	  1812: 	bsr			DisplayChar
01:00004BFC 610000FA        	  1813: 	bsr			DisplaySpace
01:00004C00 221A            	  1814: 	move.l	(a2)+,d1
01:00004C02 610000FC        	  1815: 	bsr			DisplayTetra
01:00004C06 6100F136        	  1816: 	bsr			CRLF
01:00004C0A 51C8FFE0        	  1817: 	dbra		d0,.0001
01:00004C0E 6100F3CA        	  1818: 	bsr			DisplayString
01:00004C12 1218            	  1819: 	move.b	(a0)+,d1
01:00004C14 6100F172        	  1820: 	bsr			DisplayChar
01:00004C18 1218            	  1821: 	move.b	(a0)+,d1
01:00004C1A 6100F16C        	  1822: 	bsr			DisplayChar
01:00004C1E 610000D8        	  1823: 	bsr			DisplaySpace
01:00004C22 223900040144    	  1824: 	move.l	Regsave+$44,d1
01:00004C28 610000D6        	  1825: 	bsr			DisplayTetra
01:00004C2C 6100F110        	  1826: 	bsr			CRLF
01:00004C30 6100F3A8        	  1827: 	bsr			DisplayString
01:00004C34 1218            	  1828: 	move.b	(a0)+,d1
01:00004C36 6100F150        	  1829: 	bsr			DisplayChar
01:00004C3A 1218            	  1830: 	move.b	(a0)+,d1
01:00004C3C 6100F14A        	  1831: 	bsr			DisplayChar
01:00004C40 610000B6        	  1832: 	bsr			DisplaySpace
01:00004C44 323900040140    	  1833: 	move.w	Regsave+$40,d1
01:00004C4A 610000BA        	  1834: 	bsr			DisplayWyde
01:00004C4E 6100F0EE        	  1835: 	bsr			CRLF
01:00004C52 6000FBB2        	  1836: 	bra			Monitor
                            	  1837: 
                            	  1838: msg_regs:
01:00004C56 526567          	  1839: 	dc.b	"Reg",0
01:00004C59 00
                            	  1840: msg_reglist:
01:00004C5A 4430443144324433	  1841: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
01:00004C62 4434443544364437
01:00004C6A 4130413141324133
01:00004C72 4134413541364137
01:00004C7A 50435352
01:00004C7E 00
                            	  1842: 
                            	  1843: 	align	1
                            	  1844: 
                            	  1845: ;------------------------------------------------------------------------------
                            	  1846: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1847: ;
                            	  1848: ; Returns:
                            	  1849: ;		d0 = number of digits
                            	  1850: ;		d1 = value of number
                            	  1851: ;		zf = number of digits == 0
                            	  1852: ;------------------------------------------------------------------------------
                            	  1853: 
                            	  1854: GetHexNumber:
01:00004C80 2F02            	  1855: 	move.l	d2,-(a7)
01:00004C82 7400            	  1856: 	clr.l		d2
01:00004C84 7000            	  1857: 	moveq		#0,d0
                            	  1858: .0002:
01:00004C86 6100FB68        	  1859: 	bsr			FromScreen
01:00004C8A 6120            	  1860: 	bsr			AsciiToHexNybble
01:00004C8C B23C00FF        	  1861: 	cmp.b		#$ff,d1
01:00004C90 6712            	  1862: 	beq.s		.0001
01:00004C92 E98A            	  1863: 	lsl.l		#4,d2
01:00004C94 02810000000F    	  1864: 	andi.l	#$0f,d1
01:00004C9A 8481            	  1865: 	or.l		d1,d2
01:00004C9C 5240            	  1866: 	addq		#1,d0
01:00004C9E 0C000008        	  1867: 	cmpi.b	#8,d0
01:00004CA2 65E2            	  1868: 	blo.s		.0002
                            	  1869: .0001:
01:00004CA4 2202            	  1870: 	move.l	d2,d1
01:00004CA6 241F            	  1871: 	move.l	(a7)+,d2
01:00004CA8 4A00            	  1872: 	tst.b		d0
01:00004CAA 4E75            	  1873: 	rts	
                            	  1874: 
                            	  1875: ;------------------------------------------------------------------------------
                            	  1876: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  1877: ; to a hex nybble.
                            	  1878: ;------------------------------------------------------------------------------
                            	  1879: 
                            	  1880: AsciiToHexNybble:
01:00004CAC 0C010030        	  1881: 	cmpi.b	#'0',d1
01:00004CB0 6530            	  1882: 	blo.s		gthx3
01:00004CB2 0C010039        	  1883: 	cmpi.b	#'9',d1
01:00004CB6 6206            	  1884: 	bhi.s		gthx5
01:00004CB8 04010030        	  1885: 	subi.b	#'0',d1
01:00004CBC 4E75            	  1886: 	rts
                            	  1887: gthx5:
01:00004CBE 0C010041        	  1888: 	cmpi.b	#'A',d1
01:00004CC2 651E            	  1889: 	blo.s		gthx3
01:00004CC4 0C010046        	  1890: 	cmpi.b	#'F',d1
01:00004CC8 6206            	  1891: 	bhi.s		gthx6
01:00004CCA 060100C9        	  1892: 	addi.b	#10-'A',d1
01:00004CCE 4E75            	  1893: 	rts
                            	  1894: gthx6:
01:00004CD0 0C010061        	  1895: 	cmpi.b	#'a',d1
01:00004CD4 650C            	  1896: 	blo.s		gthx3
01:00004CD6 0C010066        	  1897: 	cmpi.b	#'f',d1
01:00004CDA 6206            	  1898: 	bhi.s		gthx3
01:00004CDC 060100A9        	  1899: 	addi.b	#10-'a',d1
01:00004CE0 4E75            	  1900: 	rts
                            	  1901: gthx3:
01:00004CE2 72FF            	  1902: 	moveq	#-1,d1		; not a hex number
01:00004CE4 4E75            	  1903: 	rts
                            	  1904: 
                            	  1905: ;------------------------------------------------------------------------------
                            	  1906: ;------------------------------------------------------------------------------
                            	  1907: 
                            	  1908: DisplayTwoSpaces:
01:00004CE6 2F01            	  1909: 	move.l	d1,-(a7)
01:00004CE8 123C0020        	  1910: 	move.b	#' ',d1
01:00004CEC 6100F09A        	  1911: 	bsr			DisplayChar
                            	  1912: dspspc1:
01:00004CF0 6100F096        	  1913: 	bsr			DisplayChar
01:00004CF4 221F            	  1914: 	move.l	(a7)+,d1
01:00004CF6 4E75            	  1915: 	rts
                            	  1916: 
                            	  1917: DisplaySpace:
01:00004CF8 2F01            	  1918: 	move.l	d1,-(a7)
01:00004CFA 123C0020        	  1919: 	move.b	#' ',d1
01:00004CFE 60F0            	  1920: 	bra			dspspc1
                            	  1921: 
                            	  1922: ;------------------------------------------------------------------------------
                            	  1923: ; Display the 32 bit word in D1.L
                            	  1924: ;------------------------------------------------------------------------------
                            	  1925: 
                            	  1926: DisplayTetra:
01:00004D00 4841            	  1927: 	swap	d1
01:00004D02 6102            	  1928: 	bsr		DisplayWyde
01:00004D04 4841            	  1929: 	swap	d1
                            	  1930: 
                            	  1931: ;------------------------------------------------------------------------------
                            	  1932: ; Display the byte in D1.W
                            	  1933: ;------------------------------------------------------------------------------
                            	  1934: 
                            	  1935: DisplayWyde:
01:00004D06 E059            	  1936: 	ror.w		#8,d1
01:00004D08 6102            	  1937: 	bsr			DisplayByte
01:00004D0A E159            	  1938: 	rol.w		#8,d1
                            	  1939: 
                            	  1940: ;------------------------------------------------------------------------------
                            	  1941: ; Display the byte in D1.B
                            	  1942: ;------------------------------------------------------------------------------
                            	  1943: 
                            	  1944: DisplayByte:
01:00004D0C E819            	  1945: 	ror.b		#4,d1
01:00004D0E 6102            	  1946: 	bsr			DisplayNybble
01:00004D10 E919            	  1947: 	rol.b		#4,d1
                            	  1948: 
                            	  1949: ;------------------------------------------------------------------------------
                            	  1950: ; Display nybble in D1.B
                            	  1951: ;------------------------------------------------------------------------------
                            	  1952: 
                            	  1953: DisplayNybble:
01:00004D12 2F01            	  1954: 	move.l	d1,-(a7)
01:00004D14 0201000F        	  1955: 	andi.b	#$F,d1
01:00004D18 06010030        	  1956: 	addi.b	#'0',d1
01:00004D1C 0C010039        	  1957: 	cmpi.b	#'9',d1
01:00004D20 6302            	  1958: 	bls.s		.0001
01:00004D22 5E01            	  1959: 	addi.b	#7,d1
                            	  1960: .0001:
01:00004D24 6100F062        	  1961: 	bsr			DisplayChar
01:00004D28 221F            	  1962: 	move.l	(a7)+,d1
01:00004D2A 4E75            	  1963: 	rts
                            	  1964: 
                            	  1965: ;------------------------------------------------------------------------------
                            	  1966: ;------------------------------------------------------------------------------
                            	  1967: ;
                            	  1968: ;DisplayHexNumber:
                            	  1969: ;	move.w	#$A6A6,leds		; diagnostics
                            	  1970: ;	move.l	#VDGREG,a6
                            	  1971: ;	move.w	#7,d2		; number-1 of digits to display
                            	  1972: ;disphnum1:
                            	  1973: ;	move.b	d1,d0		; get digit into d0.b
                            	  1974: ;	andi.w	#$0f,d0
                            	  1975: ;	cmpi.w	#$09,d0
                            	  1976: ;	bls.s	disphnum2
                            	  1977: ;	addi.w	#7,d0
                            	  1978: ;disphnum2:
                            	  1979: ;	addi.w	#$30,d0	; convert to display char
                            	  1980: ;	move.w	d2,d3		; char count into d3
                            	  1981: ;	asl.w	#3,d3		; scale * 8
                            	  1982: ;disphnum3:
                            	  1983: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  1984: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  1985: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  1986: ;	ext.w	d0						; zero out high order bits
                            	  1987: ;	move.w	d0,$420(a6)			; set char code
                            	  1988: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  1989: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  1990: ;	move.w	d3,$426(a6)			; set x pos
                            	  1991: ;	move.w	#8,$428(a6)			; set y pos
                            	  1992: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  1993: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  1994: ;	ror.l	#4,d1					; rot to next digit
                            	  1995: ;	dbeq	d2,disphnum1
                            	  1996: ;	jmp		(a5)
                            	  1997: 
                            	  1998: ;==============================================================================
                            	  1999: ; Load an S19 format file
                            	  2000: ;==============================================================================
                            	  2001: ;
                            	  2002: LoadS19:
01:00004D2C 600A            	  2003: 	bra			ProcessRec
                            	  2004: NextRec:
01:00004D2E 6100015A        	  2005: 	bsr			sGetChar
01:00004D32 0C00000A        	  2006: 	cmpi.b	#LF,d0
01:00004D36 66F6            	  2007: 	bne			NextRec
                            	  2008: ProcessRec
01:00004D38 61000150        	  2009: 	bsr			sGetChar
01:00004D3C 1800            	  2010: 	move.b	d0,d4
01:00004D3E 0C04001A        	  2011: 	cmpi.b	#26,d4		; CTRL-Z ?
01:00004D42 6700FAC2        	  2012: 	beq			Monitor
01:00004D46 0C040053        	  2013: 	cmpi.b	#'S',d4
01:00004D4A 66E2            	  2014: 	bne			NextRec
01:00004D4C 6100013C        	  2015: 	bsr			sGetChar
01:00004D50 1800            	  2016: 	move.b	d0,d4
01:00004D52 0C040030        	  2017: 	cmpi.b	#'0',d4
01:00004D56 65D6            	  2018: 	blo			NextRec
01:00004D58 0C040039        	  2019: 	cmpi.b	#'9',d4		; d4 = record type
01:00004D5C 62D0            	  2020: 	bhi			NextRec
01:00004D5E 6100012A        	  2021: 	bsr			sGetChar
01:00004D62 6100FF48        	  2022: 	bsr			AsciiToHexNybble
01:00004D66 1401            	  2023: 	move.b	d1,d2
01:00004D68 61000120        	  2024: 	bsr		sGetChar
01:00004D6C 6100FF3E        	  2025: 	bsr		AsciiToHexNybble
01:00004D70 E90A            	  2026: 	lsl.b	#4,d2
01:00004D72 8202            	  2027: 	or.b	d2,d1		; d1 = byte count
01:00004D74 1601            	  2028: 	move.b	d1,d3		; d3 = byte count
01:00004D76 0C040030        	  2029: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
01:00004D7A 67B2            	  2030: 	beq		NextRec
01:00004D7C 0C040031        	  2031: 	cmpi.b	#'1',d4
01:00004D80 676A            	  2032: 	beq		ProcessS1
01:00004D82 0C040032        	  2033: 	cmpi.b	#'2',d4
01:00004D86 6768            	  2034: 	beq		ProcessS2
01:00004D88 0C040033        	  2035: 	cmpi.b	#'3',d4
01:00004D8C 6766            	  2036: 	beq		ProcessS3
01:00004D8E 0C040035        	  2037: 	cmpi.b	#'5',d4		; record count record, ignore
01:00004D92 679A            	  2038: 	beq		NextRec
01:00004D94 0C040037        	  2039: 	cmpi.b	#'7',d4
01:00004D98 675E            	  2040: 	beq		ProcessS7
01:00004D9A 0C040038        	  2041: 	cmpi.b	#'8',d4
01:00004D9E 6764            	  2042: 	beq		ProcessS8
01:00004DA0 0C040039        	  2043: 	cmpi.b	#'9',d4
01:00004DA4 676A            	  2044: 	beq		ProcessS9
01:00004DA6 6086            	  2045: 	bra		NextRec
                            	  2046: 
                            	  2047: pcssxa
01:00004DA8 024300FF        	  2048: 	andi.w	#$ff,d3
01:00004DAC 5343            	  2049: 	subi.w	#1,d3			; one less for dbra
                            	  2050: .0001
01:00004DAE 7400            	  2051: 	clr.l		d2
01:00004DB0 610000D8        	  2052: 	bsr			sGetChar
01:00004DB4 6100FEF6        	  2053: 	bsr			AsciiToHexNybble
01:00004DB8 E98A            	  2054: 	lsl.l		#4,d2
01:00004DBA 8401            	  2055: 	or.b		d1,d2
01:00004DBC 610000CC        	  2056: 	bsr			sGetChar
01:00004DC0 6100FEEA        	  2057: 	bsr			AsciiToHexNybble
01:00004DC4 E98A            	  2058: 	lsl.l		#4,d2
01:00004DC6 8401            	  2059: 	or.b		d1,d2
01:00004DC8 12C2            	  2060: 	move.b	d2,(a1)+
01:00004DCA 51CBFFE2        	  2061: 	dbra		d3,.0001
                            	  2062: ; Get the checksum byte
01:00004DCE 7400            	  2063: 	clr.l		d2
01:00004DD0 610000B8        	  2064: 	bsr			sGetChar
01:00004DD4 6100FED6        	  2065: 	bsr			AsciiToHexNybble
01:00004DD8 E98A            	  2066: 	lsl.l		#4,d2
01:00004DDA 8401            	  2067: 	or.b		d1,d2
01:00004DDC 610000AC        	  2068: 	bsr			sGetChar
01:00004DE0 6100FECA        	  2069: 	bsr			AsciiToHexNybble
01:00004DE4 E98A            	  2070: 	lsl.l		#4,d2
01:00004DE6 8401            	  2071: 	or.b		d1,d2
01:00004DE8 6000FF44        	  2072: 	bra			NextRec
                            	  2073: 
                            	  2074: ProcessS1:
01:00004DEC 612E            	  2075: 	bsr			S19Get16BitAddress
01:00004DEE 60B8            	  2076: 	bra			pcssxa
                            	  2077: ProcessS2:
01:00004DF0 6136            	  2078: 	bsr			S19Get24BitAddress
01:00004DF2 60B4            	  2079: 	bra			pcssxa
                            	  2080: ProcessS3:
01:00004DF4 613E            	  2081: 	bsr			S19Get32BitAddress
01:00004DF6 60B0            	  2082: 	bra			pcssxa
                            	  2083: ProcessS7:
01:00004DF8 613A            	  2084: 	bsr			S19Get32BitAddress
01:00004DFA 23C900040008    	  2085: 	move.l	a1,S19StartAddress
01:00004E00 6000FA04        	  2086: 	bra			Monitor
                            	  2087: ProcessS8:
01:00004E04 6122            	  2088: 	bsr			S19Get24BitAddress
01:00004E06 23C900040008    	  2089: 	move.l	a1,S19StartAddress
01:00004E0C 6000F9F8        	  2090: 	bra			Monitor
                            	  2091: ProcessS9:
01:00004E10 610A            	  2092: 	bsr			S19Get16BitAddress
01:00004E12 23C900040008    	  2093: 	move.l	a1,S19StartAddress
01:00004E18 6000F9EC        	  2094: 	bra			Monitor
                            	  2095: 
                            	  2096: S19Get16BitAddress:
01:00004E1C 7400            	  2097: 	clr.l		d2
01:00004E1E 616A            	  2098: 	bsr			sGetChar
01:00004E20 6100FE8A        	  2099: 	bsr			AsciiToHexNybble
01:00004E24 1401            	  2100: 	move.b	d1,d2
01:00004E26 603E            	  2101: 	bra			S1932b
                            	  2102: 
                            	  2103: S19Get24BitAddress:
01:00004E28 7400            	  2104: 	clr.l	d2
01:00004E2A 615E            	  2105: 	bsr		sGetChar
01:00004E2C 6100FE7E        	  2106: 	bsr		AsciiToHexNybble
01:00004E30 1401            	  2107: 	move.b	d1,d2
01:00004E32 601E            	  2108: 	bra		S1932a
                            	  2109: 
                            	  2110: S19Get32BitAddress:
01:00004E34 7400            	  2111: 	clr.l	d2
01:00004E36 6152            	  2112: 	bsr			sGetChar
01:00004E38 6100FE72        	  2113: 	bsr			AsciiToHexNybble
01:00004E3C 1401            	  2114: 	move.b	d1,d2
01:00004E3E 614A            	  2115: 	bsr			sGetChar
01:00004E40 6100FE6A        	  2116: 	bsr			AsciiToHexNybble
01:00004E44 E98A            	  2117: 	lsl.l		#4,d2
01:00004E46 8401            	  2118: 	or.b		d1,d2
01:00004E48 6140            	  2119: 	bsr			sGetChar
01:00004E4A 6100FE60        	  2120: 	bsr			AsciiToHexNybble
01:00004E4E E98A            	  2121: 	lsl.l		#4,d2
01:00004E50 8401            	  2122: 	or.b		d1,d2
                            	  2123: S1932a:
01:00004E52 6136            	  2124: 	bsr			sGetChar
01:00004E54 6100FE56        	  2125: 	bsr			AsciiToHexNybble
01:00004E58 E98A            	  2126: 	lsl.l		#4,d2
01:00004E5A 8401            	  2127: 	or.b		d1,d2
01:00004E5C 612C            	  2128: 	bsr			sGetChar
01:00004E5E 6100FE4C        	  2129: 	bsr			AsciiToHexNybble
01:00004E62 E98A            	  2130: 	lsl.l		#4,d2
01:00004E64 8401            	  2131: 	or.b		d1,d2
                            	  2132: S1932b:
01:00004E66 6122            	  2133: 	bsr			sGetChar
01:00004E68 6100FE42        	  2134: 	bsr			AsciiToHexNybble
01:00004E6C E98A            	  2135: 	lsl.l		#4,d2
01:00004E6E 8401            	  2136: 	or.b		d1,d2
01:00004E70 6118            	  2137: 	bsr			sGetChar
01:00004E72 6100FE38        	  2138: 	bsr			AsciiToHexNybble
01:00004E76 E98A            	  2139: 	lsl.l		#4,d2
01:00004E78 8401            	  2140: 	or.b		d1,d2
01:00004E7A 610E            	  2141: 	bsr			sGetChar
01:00004E7C 6100FE2E        	  2142: 	bsr			AsciiToHexNybble
01:00004E80 E98A            	  2143: 	lsl.l		#4,d2
01:00004E82 8401            	  2144: 	or.b		d1,d2
01:00004E84 7800            	  2145: 	clr.l		d4
01:00004E86 2242            	  2146: 	move.l	d2,a1
01:00004E88 4E75            	  2147: 	rts
                            	  2148: 
                            	  2149: ;------------------------------------------------------------------------------
                            	  2150: ; Get a character from auxillary input, checking the keyboard status for a
                            	  2151: ; CTRL-C
                            	  2152: ;------------------------------------------------------------------------------
                            	  2153: ;
                            	  2154: sGetChar:
01:00004E8A 6100F378        	  2155: 	bsr			CheckForKey
01:00004E8E 670C            	  2156: 	beq			.0001
01:00004E90 7005            	  2157: 	moveq		#5,d0					; GetKey
01:00004E92 4E4F            	  2158: 	trap		#15
01:00004E94 0C010003        	  2159: 	cmpi.b	#CTRLC,d1
01:00004E98 6700F96C        	  2160: 	beq			Monitor
                            	  2161: .0001:
01:00004E9C 7021            	  2162: 	moveq		#33,d0				; serial peek character direct
01:00004E9E 4E4F            	  2163: 	trap		#15
01:00004EA0 4A80            	  2164: 	tst.l		d0
01:00004EA2 6BE6            	  2165: 	bmi			sGetChar
01:00004EA4 1200            	  2166: 	move.b	d0,d1
01:00004EA6 4E75            	  2167: 	rts
                            	  2168: 
                            	  2169: AudioInputTest:
01:00004EA8 4E75            	  2170: 	rts
                            	  2171: BouncingBalls:
01:00004EAA 4E75            	  2172: 	rts
                            	  2173: GraphicsDemo:
01:00004EAC 4E75            	  2174: 	rts
                            	  2175: ClearScreen:
01:00004EAE 6000EE46        	  2176: 	bra		clear_screen
01:00004EB2 4E75            	  2177: 	rts
                            	  2178: 
                            	  2179: AUXIN:
                            	  2180: 
                            	  2181: ;------------------------------------------------------------------------------
                            	  2182: ; SerialPeekChar
                            	  2183: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2184: ; buffer.
                            	  2185: ;
                            	  2186: ; Stack Space:
                            	  2187: ;		0 words
                            	  2188: ; Parameters:
                            	  2189: ;		none
                            	  2190: ; Modifies:
                            	  2191: ;		d
                            	  2192: ; Returns:
                            	  2193: ;		d0 = character or -1
                            	  2194: ;------------------------------------------------------------------------------
                            	  2195: 
                            	  2196: SerialPeekCharDirect:
01:00004EB4 2039FD060004    	  2197: 	move.l	ACIA+ACIA_STAT,d0	; get serial status
01:00004EBA E158            	  2198: 	rol.w		#8,d0							; swap byte order
01:00004EBC 4840            	  2199: 	swap		d0
01:00004EBE E158            	  2200: 	rol.w		#8,d0
01:00004EC0 08000003        	  2201: 	btst		#3,d0							; look for Rx not empty
01:00004EC4 670A            	  2202: 	beq.s		.0001
01:00004EC6 7000            	  2203: 	moveq.l	#0,d0							; clear upper bits of return value
01:00004EC8 1039FD060000    	  2204: 	move.b	ACIA+ACIA_RX,d0		; get data from ACIA
01:00004ECE 4E75            	  2205: 	rts												; restore SR and return
                            	  2206: .0001:
01:00004ED0 70FF            	  2207: 	moveq		#-1,d0
01:00004ED2 4E75            	  2208: 	rts
                            	  2209: 
                            	  2210: bus_err:
                            	  2211: .0001:
01:00004ED4 4E71            	  2212: 	nop
01:00004ED6 60FC            	  2213: 	bra			.0001
                            	  2214: 
                            	  2215: ;------------------------------------------------------------------------------
                            	  2216: ; SerialPutChar
                            	  2217: ;    Put a character to the serial transmitter. This routine blocks until the
                            	  2218: ; transmitter is empty. 
                            	  2219: ;
                            	  2220: ; Stack Space
                            	  2221: ;		0 words
                            	  2222: ; Parameters:
                            	  2223: ;		d1.b = character to put
                            	  2224: ; Modifies:
                            	  2225: ;		none
                            	  2226: ;------------------------------------------------------------------------------
                            	  2227: 
                            	  2228: SerialPutChar:
01:00004ED8 48E7C000        	  2229: 	movem.l	d0/d1,-(a7)				; push d0,d1
                            	  2230: .0001:
01:00004EDC 2039FD060004    	  2231: 	move.l	ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
01:00004EE2 E158            	  2232: 	rol.w		#8,d0
01:00004EE4 4840            	  2233: 	swap		d0
01:00004EE6 E158            	  2234: 	rol.w		#8,d0
01:00004EE8 08000004        	  2235: 	btst		#4,d0							; bit #4 of the status reg
01:00004EEC 67EE            	  2236: 	beq.s		.0001			    		; branch if transmitter is not empty
01:00004EEE E159            	  2237: 	rol.w		#8,d1
01:00004EF0 4841            	  2238: 	swap		d1
01:00004EF2 E159            	  2239: 	rol.w		#8,d1
01:00004EF4 23C1FD060000    	  2240: 	move.l	d1,ACIA+ACIA_TX		; send the byte
01:00004EFA 4CDF0003        	  2241: 	movem.l	(a7)+,d0/d1				; pop d0,d1
01:00004EFE 4E75            	  2242: 	rts
                            	  2243: ;------------------------------------------------------------------------------
                            	  2244: ;------------------------------------------------------------------------------
                            	  2245: 
                            	  2246: trap3:
                            	  2247: 	; First save all registers
01:00004F00 48F9FFFF00040100	  2248: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
01:00004F08 33DF00040140    	  2249: 	move.w		(a7)+,Regsave+$40
01:00004F0E 23DF00040144    	  2250: 	move.l		(a7)+,Regsave+$44
01:00004F14 2E7C00040FFC    	  2251: 	move.l		#$40FFC,a7			; reset stack pointer
01:00004F1A 46FC2500        	  2252: 	move.w		#$2500,sr				; enable interrupts
01:00004F1E 303900040202    	  2253: 	move.w		NumSetBreakpoints,d0
01:00004F24 5340            	  2254: 	subi.w		#1,d0
01:00004F26 41F900040220    	  2255: 	lea				Breakpoints,a0
01:00004F2C 223900040144    	  2256: 	move.l		Regsave+$44,d1
                            	  2257: .0001:
01:00004F32 B298            	  2258: 	cmp.l			(a0)+,d1
01:00004F34 6708            	  2259: 	beq.s			ProcessBreakpoint
01:00004F36 51C8FFFA        	  2260: 	dbra			d0,.0001
01:00004F3A 6000F8CA        	  2261: 	bra				Monitor					; not a breakpoint
                            	  2262: ProcessBreakpoint:
01:00004F3E 6104            	  2263: 	bsr				DisarmAllBreakpoints
01:00004F40 6000FC94        	  2264: 	bra				DumpRegs
                            	  2265: 
                            	  2266: ;------------------------------------------------------------------------------
                            	  2267: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  2268: ;------------------------------------------------------------------------------
                            	  2269: 
                            	  2270: DisarmAllBreakpoints:
01:00004F44 48E780E0        	  2271: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
01:00004F48 303900040202    	  2272: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
01:00004F4E 0C400008        	  2273: 	cmpi.w	#numBreakpoints,d0		; check for valid number
01:00004F52 641A            	  2274: 	bhs.s		.0001
01:00004F54 45F900040220    	  2275: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
01:00004F5A 41F900040280    	  2276: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
01:00004F60 6004            	  2277: 	bra.s		.0003									; enter loop at bottom
                            	  2278: .0002:
01:00004F62 225A            	  2279: 	move.l	(a2)+,a1							; a1 = address of breakpoint
01:00004F64 3298            	  2280: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  2281: .0003:
01:00004F66 51C8FFFA        	  2282: 	dbra		d0,.0002
01:00004F6A 4CDF0701        	  2283: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  2284: .0001:
01:00004F6E 4E75            	  2285: 	rts	
                            	  2286: 
                            	  2287: ;------------------------------------------------------------------------------
                            	  2288: ; ArmAllBreakpoints, used when entering the monitor.
                            	  2289: ;------------------------------------------------------------------------------
                            	  2290: 
                            	  2291: ArmAllBreakpoints:
01:00004F70 48E780E0        	  2292: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
01:00004F74 303900040202    	  2293: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:00004F7A 0C400008        	  2294: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
01:00004F7E 641E            	  2295: 	bhs.s			.0001
01:00004F80 45F900040220    	  2296: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
01:00004F86 41F900040280    	  2297: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
01:00004F8C 6008            	  2298: 	bra.s			.0003									; enter loop at bottom
                            	  2299: .0002:
01:00004F8E 225A            	  2300: 	move.l		(a2)+,a1							; a1 = address of breakpoint
01:00004F90 3091            	  2301: 	move.w		(a1),(a0)							; copy instruction word to table
01:00004F92 30FC4E43        	  2302: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  2303: .0003:
01:00004F96 51C8FFF6        	  2304: 	dbra			d0,.0002
01:00004F9A 4CDF0701        	  2305: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  2306: .0001:
01:00004F9E 4E75            	  2307: 	rts	
                            	  2308: 
                            	  2309: ;------------------------------------------------------------------------------
                            	  2310: ;------------------------------------------------------------------------------
                            	  2311: 
                            	  2312: ArmBreakpoint:
01:00004FA0 48E7E0E0        	  2313: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
01:00004FA4 303900040202    	  2314: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:00004FAA 0C400008        	  2315: 	cmpi.w		#numBreakpoints,d0		; check if too many
01:00004FAE 6458            	  2316: 	bhs.s			.0001
01:00004FB0 527900040202    	  2317: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
01:00004FB6 2400            	  2318: 	move.l		d0,d2
01:00004FB8 6100FB26        	  2319: 	bsr				ignBlanks
01:00004FBC 6100FCC2        	  2320: 	bsr				GetHexNumber
01:00004FC0 6746            	  2321: 	beq.s			.0001									; was there an address?
01:00004FC2 08010000        	  2322: 	btst			#0,d1									; address value must be even
01:00004FC6 6640            	  2323: 	bne.s			.0001
                            	  2324: 	; See if the breakpoint is in the table already
01:00004FC8 43F900040220    	  2325: 	lea				Breakpoints,a1				; a1 points to breakpoint table
01:00004FCE 5342            	  2326: 	subi.w		#1,d2
                            	  2327: .0002:
01:00004FD0 B299            	  2328: 	cmp.l			(a1)+,d1
01:00004FD2 673A            	  2329: 	beq.s			.0003									; breakpoint is in table already
01:00004FD4 51CAFFFA        	  2330: 	dbra			d2,.0002
                            	  2331: 	; Add breakpoint to table
                            	  2332: 	; Search for empty entry
01:00004FD8 43F900040220    	  2333: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
01:00004FDE 4242            	  2334: 	clr.w			d2										; d2 = count
                            	  2335: .0006:
01:00004FE0 4A91            	  2336: 	tst.l			(a1)									; is the entry empty?
01:00004FE2 670C            	  2337: 	beq.s			.0005									; branch if found empty entry
01:00004FE4 5889            	  2338: 	lea				4(a1),a1							; point to next entry
01:00004FE6 5242            	  2339: 	addi.w		#1,d2									; increment count
01:00004FE8 0C420008        	  2340: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
01:00004FEC 65F2            	  2341: 	blo.s			.0006
01:00004FEE 6018            	  2342: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  2343: .0005:
01:00004FF0 E542            	  2344: 	asl.w			#2,d2									; d2 = long word index
01:00004FF2 23812000        	  2345: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
01:00004FF6 2441            	  2346: 	move.l		d1,a2
01:00004FF8 E24A            	  2347: 	lsr.w			#1,d2									; d2 = word index
                            	  2348: .0004:
01:00004FFA 43F900040280    	  2349: 	lea				BreakpointWords,a1
01:00005000 33922000        	  2350: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
01:00005004 34BC4E43        	  2351: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  2352: .0001:
01:00005008 4CDF0707        	  2353: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
01:0000500C 4E75            	  2354: 	rts
                            	  2355: .0003:
01:0000500E 2469FFFC        	  2356: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
01:00005012 0C524E43        	  2357: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
01:00005016 67F0            	  2358: 	beq.s			.0001
01:00005018 D482            	  2359: 	asl.l			#1,d2									; d2 = word index
01:0000501A 60DE            	  2360: 	bra.s			.0004
                            	  2361: 
                            	  2362: 
                            	  2363: ;------------------------------------------------------------------------------
                            	  2364: ;------------------------------------------------------------------------------
                            	  2365: 
                            	  2366: DisarmBreakpoint:
01:0000501C 48E7E0E0        	  2367: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
01:00005020 303900040202    	  2368: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:00005026 0C400008        	  2369: 	cmpi.w		#numBreakpoints,d0		; check if too many
01:0000502A 623E            	  2370: 	bhi.s			.0001
01:0000502C 2400            	  2371: 	move.l		d0,d2
01:0000502E 6100FAB0        	  2372: 	bsr				ignBlanks
01:00005032 6100FC4C        	  2373: 	bsr				GetHexNumber
01:00005036 6732            	  2374: 	beq.s			.0001									; was there an address?
01:00005038 08010000        	  2375: 	btst			#0,d1									; address value must be even
01:0000503C 662C            	  2376: 	bne.s			.0001
                            	  2377: 	; See if the breakpoint is in the table already
01:0000503E 43F900040220    	  2378: 	lea				Breakpoints,a1				; a1 points to breakpoint table
01:00005044 5342            	  2379: 	subi.w		#1,d2
                            	  2380: .0002:
01:00005046 B299            	  2381: 	cmp.l			(a1)+,d1
01:00005048 6706            	  2382: 	beq.s			.0003									; breakpoint is in table already
01:0000504A 51CAFFFA        	  2383: 	dbra			d2,.0002
01:0000504E 601A            	  2384: 	bra				.0001									; breakpoint was not in table
                            	  2385: .0003:
                            	  2386: 	; Remove breakpoint from table
01:00005050 537900040202    	  2387: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
01:00005056 2469FFFC        	  2388: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
01:0000505A 42A9FFFC        	  2389: 	clr.l			-4(a1)								; empty out breakpoint
01:0000505E 43F900040280    	  2390: 	lea				BreakpointWords,a1
01:00005064 D482            	  2391: 	asl.l			#1,d2									; d2 = word index
01:00005066 34B12000        	  2392: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  2393: .0001:
01:0000506A 4CDF0707        	  2394: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
01:0000506E 4E75            	  2395: 	rts
                            	  2396: 
                            	  2397: ;------------------------------------------------------------------------------
                            	  2398: ;------------------------------------------------------------------------------
                            	  2399: 
                            	  2400: ListBreakpoints:
01:00005070 6100ECCC        	  2401: 	bsr			CRLF
01:00005074 343C0008        	  2402: 	move.w	#numBreakpoints,d2
01:00005078 43F900040220    	  2403: 	lea			Breakpoints,a1
                            	  2404: .0001:
01:0000507E 2219            	  2405: 	move.l	(a1)+,d1
01:00005080 6100FC7E        	  2406: 	bsr			DisplayTetra
01:00005084 6100ECB8        	  2407: 	bsr			CRLF
01:00005088 51CAFFF4        	  2408: 	dbra		d2,.0001
01:0000508C 6000F778        	  2409: 	bra			Monitor
                            	  2410: 
                            	  2411: ;------------------------------------------------------------------------------
                            	  2412: ;------------------------------------------------------------------------------
                            	  2413: 
                            	  2414: ClearBreakpointList:
01:00005090 343C0008        	  2415: 	move.w	#numBreakpoints,d2
01:00005094 43F900040220    	  2416: 	lea			Breakpoints,a1
                            	  2417: .0001:
01:0000509A 4299            	  2418: 	clr.l		(a1)+
01:0000509C 51CAFFFC        	  2419: 	dbra		d2,.0001
01:000050A0 4E75            	  2420: 	rts
                            	  2421: 
                            	  2422: ;------------------------------------------------------------------------------
                            	  2423: ;------------------------------------------------------------------------------
                            	  2424: 
                            	  2425: irq_rout:
01:000050A2 48E7C080        	  2426: 	movem.l	d0/d1/a0,-(a7)
01:000050A6 7201            	  2427: 	moveq		#1,d1
                            	  2428: ;	bsr			LockSemaphore
01:000050A8 6100F0F2        	  2429: 	bsr			_KeybdGetStatus		; check if timer or keyboard
01:000050AC 6A66            	  2430: 	bpl.s		.0001							; branch if not keyboard
01:000050AE 0839000100100010	  2431: 	btst		#1,_KeyState2			; Is Alt down?
01:000050B6 6728            	  2432: 	beq.s		.0003
01:000050B8 1039FD0FFE00    	  2433: 	move.b	KEYBD,d0					; get scan code
01:000050BE 0C00000D        	  2434: 	cmpi.b	#SC_TAB,d0				; is Alt-Tab?
01:000050C2 661C            	  2435: 	bne.s		.0003
01:000050C4 6100F0E0        	  2436: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
01:000050C8 6100F076        	  2437: 	bsr			rotate_iofocus
01:000050CC 423900100011    	  2438: 	clr.b		_KeybdHead				; clear keyboard buffer
01:000050D2 423900100012    	  2439: 	clr.b		_KeybdTail
01:000050D8 423900100013    	  2440: 	clr.b		_KeybdCnt
01:000050DE 6048            	  2441: 	bra			.0002							; do not store Alt-Tab
                            	  2442: .0003:
                            	  2443: 	; Insert keyboard scan code into raw keyboard buffer
01:000050E0 6100F0C4        	  2444: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
01:000050E4 0C39002000100013	  2445: 	cmpi.b	#32,_KeybdCnt			; see if keyboard buffer full
01:000050EC 643A            	  2446: 	bhs.s		.0002
01:000050EE 103900100012    	  2447: 	move.b	_KeybdTail,d0			; keyboard buffer not full, add to tail
01:000050F4 4880            	  2448: 	ext.w		d0
01:000050F6 41F900100020    	  2449: 	lea			_KeybdBuf,a0			; a0 = pointer to buffer
01:000050FC 11810000        	  2450: 	move.b	d1,(a0,d0.w)			; put scancode in buffer
01:00005100 5200            	  2451: 	addi.b	#1,d0							; increment tail index
01:00005102 0200001F        	  2452: 	andi.b	#31,d0						; wrap at buffer limit
01:00005106 13C000100012    	  2453: 	move.b	d0,_KeybdTail			; update tail index
01:0000510C 523900100013    	  2454: 	addi.b	#1,_KeybdCnt			; increment buffer count
01:00005112 6014            	  2455: 	bra			.0002
                            	  2456: .0001:
01:00005114 23FC1D000000FD09	  2457: 	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
01:0000511C 0014
01:0000511E 207900040004    	  2458: 	move.l	TextScr,a0				; a0 = screen address
01:00005124 52A80028        	  2459: 	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  2460: .0002:	
01:00005128 7201            	  2461: 	moveq		#1,d1
01:0000512A 6100B00A        	  2462: 	bsr			UnlockSemaphore
01:0000512E 4CDF0103        	  2463: 	movem.l	(a7)+,d0/d1/a0		; return
01:00005132 4E73            	  2464: 	rte
                            	  2465: 
                            	  2466: nmi_rout:
01:00005134 48E7C080        	  2467: 	movem.l	d0/d1/a0,-(a7)
01:00005138 123C004E        	  2468: 	move.b	#'N',d1
01:0000513C 6100EC4A        	  2469: 	bsr			DisplayChar
01:00005140 4CDF0103        	  2470: 	movem.l	(a7)+,d0/d1/a0		; return
01:00005144 4E73            	  2471: 	rte
                            	  2472: 
                            	  2473: brdisp_trap:
01:00005146 48F9FFFF00040100	  2474: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
01:0000514E 33DF00040140    	  2475: 	move.w	(a7)+,Regsave+$40
01:00005154 23DF00040144    	  2476: 	move.l	(a7)+,Regsave+$44
01:0000515A 2E7C00040FFC    	  2477: 	move.l	#$40FFC,a7			; reset stack pointer
01:00005160 46FC2500        	  2478: 	move.w	#$2500,sr				; enable interrupts
01:00005164 43FA0069        	  2479: 	lea			msg_bad_branch_disp,a1
01:00005168 6100EE70        	  2480: 	bsr			DisplayString
01:0000516C 6100FB8A        	  2481: 	bsr			DisplaySpace
01:00005170 223900040144    	  2482: 	move.l	Regsave+$44,d1	; exception address
01:00005176 6100FB88        	  2483: 	bsr			DisplayTetra		; and display it
                            	  2484: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
01:0000517A 6000FA5A        	  2485: 	bra			DumpRegs
                            	  2486: 
                            	  2487: illegal_trap:
01:0000517E 544F            	  2488: 	addq		#2,sp						; get rid of sr
01:00005180 221F            	  2489: 	move.l	(sp)+,d1				; pop exception address
01:00005182 6100FB7C        	  2490: 	bsr			DisplayTetra		; and display it
01:00005186 43FA0035        	  2491: 	lea			msg_illegal,a1	; followed by message
01:0000518A 6100EE4E        	  2492: 	bsr			DisplayString
                            	  2493: .0001:
01:0000518E 60FE            	  2494: 	bra			.0001
01:00005190 6000F674        	  2495: 	bra			Monitor
                            	  2496: 	
                            	  2497: ; -----------------------------------------------------------------------------
                            	  2498: ; -----------------------------------------------------------------------------
                            	  2499: 
                            	  2500: msg_start:
01:00005194 726636386B205379	  2501: 	dc.b	"rf68k System Starting",CR,LF,0
01:0000519C 7374656D20537461
01:000051A4 7274696E67
01:000051A9 0D
01:000051AA 0A
01:000051AB 00
                            	  2502: msg_core_start:
01:000051AC 20636F7265207374	  2503: 	dc.b	" core starting",CR,LF,0
01:000051B4 617274696E67
01:000051BA 0D
01:000051BB 0A
01:000051BC 00
                            	  2504: msg_illegal:
01:000051BD 20696C6C6567616C	  2505: 	dc.b	" illegal opcode",CR,LF,0
01:000051C5 206F70636F6465
01:000051CC 0D
01:000051CD 0A
01:000051CE 00
                            	  2506: msg_bad_branch_disp:
01:000051CF 206272616E636820	  2507: 	dc.b	" branch selfref: ",0
01:000051D7 73656C667265663A
01:000051DF 20
01:000051E0 00
                            	  2508: msg_test_done:
01:000051E1 2043505520746573	  2509: 	dc.b	" CPU test done.",0
01:000051E9 7420646F6E652E
01:000051F0 00
                            	  2510: 
                            	  2511: 
                            	  2512: 
                            	  2513: 


Symbols by name:
ABCD_INNER1                     01:000024F8
ABCD_INNER2                     01:00002566
ABCD_NO_C1                      01:00002514
ABCD_NO_C2                      01:0000251C
ABCD_NO_C3                      01:00002582
ABCD_NO_C4                      01:0000258A
ABCD_OUTER1                     01:000024F6
ABCD_OUTER2                     01:00002564
ACIA                             E:FD060000
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     01:0000305E
ADDQ_LOOP1                      01:00002878
ADDQ_LOOP2                      01:000028B6
ADDQ_LOOP3                      01:000028EC
ADDX_LOOP3                      01:00003184
ADDX_LOOP4                      01:000031A0
ADDX_LOOP5                      01:000031BC
ADDX_OUTER1                     01:000030F0
ADD_OUTER1                      01:00002E84
ADD_OUTER2                      01:00002EF8
ALL_DONE                        01:0000024C
AND_OUTER1                      01:00002BA2
AND_OUTER2                      01:00002C16
AUXIN                           01:00004EB4
ArmAllBreakpoints               01:00004F70
ArmBreakpoint                   01:00004FA0
AsciiToHexNybble                01:00004CAC
AudioInputTest                  01:00004EA8
BCC1                            01:0000279E
BCC10                           01:000027F0
BCC11                           01:000027F8
BCC12                           01:00002802
BCC13                           01:0000280A
BCC14                           01:00002814
BCC2                            01:000027A8
BCC3                            01:000027B0
BCC4                            01:000027BA
BCC5                            01:000027C2
BCC6                            01:000027CC
BCC7                            01:000027D4
BCC8                            01:000027DE
BCC9                            01:000027E6
BSR_CLOSE1                      01:0000133E
BSR_CLOSE2                      01:00001374
BSR_FAR1                        01:0000024E
BSR_FAR2                        01:0000278E
BlankLastLine                   01:00003F8C
BouncingBalls                   01:00004EAA
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
CMPA_OUTER1                     01:00002D78
CMPM_LOOP1                      01:00002E06
CMPM_LOOP2                      01:00002E20
CMPM_LOOP3                      01:00002E3A
CMP_OUTER1                      01:00002D02
CR                               E:0000000D
CRLF                            01:00003D3E
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003D7A
CheckForCtrlC                   01:0000424A
CheckForKey                     01:00004204
ClearBreakpointList             01:00005090
ClearScreen                     01:00004EAE
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
Cursor1                         01:00004108
CursorCol                        E:00040001
CursorRow                        E:00040000
DBCC_LOOP1                      01:0000281E
DBCC_LOOP2                      01:0000282C
DIVS_OUTER1                     01:00002A62
DIVU_OUTER1                     01:00002A10
DecrementSemaphore              01:00000116
Delay3s                         01:00000156
DisarmAllBreakpoints            01:00004F44
DisarmBreakpoint                01:0000501C
DisplayByte                     01:00004D0C
DisplayChar                     01:00003D88
DisplayHelp                     01:00004924
DisplayMem                      01:00004B7A
DisplayNybble                   01:00004D12
DisplaySpace                    01:00004CF8
DisplayString                   01:00003FDA
DisplayStringCRLF               01:00003FF0
DisplayStringLimited            01:00003FF6
DisplayStringLimitedCRLF        01:00004016
DisplayTetra                    01:00004D00
DisplayTwoSpaces                01:00004CE6
DisplayWyde                     01:00004D06
DumpMem                         01:00004B4C
DumpMem1                        01:00004B68
DumpRegs                        01:00004BD6
EOR_OUTER2                      01:00002C8C
EXCEPTION_6                     01:00000260
EXCEPTION_7                     01:00000270
EditMem                         01:00004AF2
ExecuteCode                     01:00004B3E
FillMem                         01:00004A9A
FromScreen                      01:000047F0
GetCmdLine                      01:000049F6
GetHexNumber                    01:00004C80
GetKey                          01:00004210
GraphicsDemo                    01:00004EAC
HelpMsg                         01:00004930
HomeCursor                      01:0000401C
IOFocus                          E:00100000
IncCursorPos                    01:00003F06
IncCursorRow                    01:00003F26
IncrementSemaphore              01:000000FE
InitSemaphores                  01:000000BC
KEYBD                            E:FD0FFE00
KeybdEcho                        E:0004000C
KeybdGetChar                    01:0000426A
KeybdGetCharNoWait              01:0000425A
KeybdGetCharWait                01:00004262
KeybdLEDs                        E:0010000E
KeybdRecvByte                   01:000041B6
KeybdSendByte                   01:000044D8
KeybdSetLEDStatus               01:0000446C
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     01:000041D6
LEA1                            01:00001D4A
LF                               E:0000000A
ListBreakpoints                 01:00005070
LoadS19                         01:00004D2C
LockSemaphore                   01:00000130
MOVE1                           01:000019B8
MOVE2                           01:0000193C
MOVE3                           01:00001A38
MOVE4                           01:00001B92
MULS_OUTER1                     01:00003358
MULU_OUTER1                     01:0000330C
Monitor                         01:00004806
NBCD_LOOP                       01:000026DE
NBCD_LOOP1                      01:00002724
NBCD_NO_C                       01:000026EA
NBCD_NO_C1                      01:00002738
NBCD_NO_Z                       01:000026EE
NBCD_NO_Z1                      01:0000273C
NextRec                         01:00004D2E
NumSetBreakpoints                E:00040202
OR_OUTER1                       01:00002AB8
OR_OUTER2                       01:00002B2C
PLIC                             E:FD090000
ProcessBreakpoint               01:00004F3E
ProcessRec                      01:00004D38
ProcessS1                       01:00004DEC
ProcessS2                       01:00004DF0
ProcessS3                       01:00004DF4
ProcessS7                       01:00004DF8
ProcessS8                       01:00004E04
ProcessS9                       01:00004E10
Prompt1                         01:0000483E
Prompt2                         01:00004850
Prompt3                         01:00004828
PromptLn                        01:0000481C
ROXx_FLAGS                      01:00003620
ROXx_LOOP1                      01:00003636
ROXx_LOOP2                      01:00003656
ROXx_LOOP3                      01:00003676
ROXx_LOOP4                      01:00003696
ROXx_LOOP5                      01:000036B6
ROXx_LOOP6                      01:000036D8
ROx_FLAGS                       01:000033EA
ROx_LOOP1                       01:00003400
ROx_LOOP2                       01:00003420
ROx_LOOP3                       01:00003440
ROx_LOOP4                       01:00003460
ROx_LOOP5                       01:00003480
ROx_LOOP6                       01:000034A2
RTR_DONE                        01:00002780
Regsave                          E:00040100
S1932a                          01:00004E52
S1932b                          01:00004E66
S19Get16BitAddress              01:00004E1C
S19Get24BitAddress              01:00004E28
S19Get32BitAddress              01:00004E34
S19StartAddress                  E:00040008
SBCD_INNER1                     01:000025F0
SBCD_INNER2                     01:0000265E
SBCD_NO_C1                      01:0000260C
SBCD_NO_C2                      01:00002614
SBCD_NO_C3                      01:0000267A
SBCD_NO_C4                      01:00002682
SBCD_OUTER1                     01:000025EE
SBCD_OUTER2                     01:0000265C
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003A98
SHIFTS2_LOOP1                   01:00003AAE
SHIFTS2_LOOP2                   01:00003ACA
SHIFTS2_LOOP3                   01:00003AE6
SHIFTS2_LOOP4                   01:00003B02
SHIFTS2_LOOP5                   01:00003B1E
SHIFTS2_LOOP6                   01:00003B3C
SHIFTS_FLAGS                    01:00003856
SHIFTS_LOOP1                    01:0000386C
SHIFTS_LOOP2                    01:0000388C
SHIFTS_LOOP3                    01:000038AC
SHIFTS_LOOP4                    01:000038CC
SHIFTS_LOOP5                    01:000038EC
SHIFTS_LOOP6                    01:0000390E
SUBA_OUTER1                     01:000030AA
SUBQ_LOOP1                      01:00002936
SUBQ_LOOP2                      01:00002970
SUBQ_LOOP3                      01:000029A6
SUBX_LOOP3                      01:00003294
SUBX_LOOP4                      01:000032B0
SUBX_LOOP5                      01:000032CC
SUBX_OUTER1                     01:00003200
SUB_OUTER1                      01:00002F6E
SUB_OUTER2                      01:00002FE2
ScrollUp                        01:00003F5A
SerialPeekCharDirect            01:00004EB4
SerialPutChar                   01:00004ED8
SetKeyboardEcho                 01:000041FC
StartMon                        01:000047FC
StubRout                        01:0000413E
SyncCursor                      01:0000402E
T15DispatchTable                01:00004068
TEXTREG                          E:FD03FF00
TRAP15                          01:00004050
TestCLS                         01:000048FC
TestSemaphore                   01:000000E2
TextCols                         E:0004008D
TextCurpos                       E:00040002
TextPos                          E:00040002
TextRows                         E:0004008C
TextScr                          E:00040004
UnlockSemaphore                 01:00000136
UpdateTextPos                   01:00003D50
Wait10ms                        01:000044E0
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdCnt                        E:00100013
_KeybdGetScancode               01:000041A6
_KeybdGetStatus                 01:0000419C
_KeybdHead                       E:00100011
_KeybdInit                      01:0000418E
_KeybdTail                       E:00100012
_keybdControlCodes              01:000046F0
_keybdExtendedCodes             01:00004770
_shiftedScanCodes               01:000045F0
_unshiftedScanCodes             01:000044F0
bkColor                          E:00040088
brdisp_trap                     01:00005146
bus_err                         01:00004ED4
clear_screen                    01:00003CF6
cpu_test                        01:0000017A
dccr                            01:00003DB6
dclf                            01:00003E86
dcx10                           01:00003E1E
dcx11                           01:00003E40
dcx12                           01:00003E36
dcx14                           01:00003DAC
dcx16                           01:00003E8A
dcx4                            01:00003E8E
dcx6                            01:00003DD4
dcx7                            01:00003DB0
dcx8                            01:00003DEA
dcx9                            01:00003E00
dly3s1                          01:00000166
dly3s2                          01:00000164
doBackspace                     01:00003E98
doCtrlX                         01:00003EE2
doDelete                        01:00003EA6
do_nothing                      01:000000B6
dspj1                           01:00003FDE
dspmem1                         01:00004B8A
dspspc1                         01:00004CF0
dsret                           01:00003FEA
edtmem1                         01:00004AFA
fgColor                          E:00040084
fmem1                           01:00004AC6
fmemB                           01:00004AD6
fmemL                           01:00004ABC
fmemW                           01:00004ACC
get_screen_address              01:00003CEE
get_screen_color                01:00003CC2
gthx3                           01:00004CE2
gthx5                           01:00004CBE
gthx6                           01:00004CD0
icc1                            01:00003F58
ignBlanks                       01:00004AE0
illegal_trap                    01:0000517E
init_plic                       01:0000416C
irq_rout                        01:000050A2
leds                             E:FD0FFF00
loop1                           01:00000090
loop2                           01:0000008E
loop3                           01:00003D20
msg_bad_branch_disp             01:000051CF
msg_core_start                  01:000051AC
msg_illegal                     01:000051BD
msg_reglist                     01:00004C5A
msg_regs                        01:00004C56
msg_start                       01:00005194
msg_test_done                   01:000051E1
nmi_rout                        01:00005134
numBreakpoints                   E:00000008
op_ABCD                         01:000024D6
op_ADD                          01:00002E64
op_ADDA                         01:00003038
op_ADDQ                         01:00002864
op_ADDX                         01:000030D0
op_ADD_I                        01:00001564
op_AND                          01:00002B82
op_ANDI_TO_CCR                  01:00000310
op_ANDI_TO_SR                   01:00000336
op_BCC                          01:00002796
op_BCHG                         01:0000070A
op_BCLR                         01:00000A72
op_BOOL_I                       01:00001194
op_BSET                         01:00000DC0
op_BSR                          01:00001346
op_BTST                         01:00000360
op_BTST0                        01:000004EA
op_BTST1                        01:000004F6
op_BTST10                       01:0000053E
op_BTST11                       01:00000546
op_BTST12                       01:0000054C
op_BTST2                        01:000004FE
op_BTST20                       01:000006A4
op_BTST21                       01:000006AE
op_BTST22                       01:000006B4
op_BTST23                       01:000006BA
op_BTST24                       01:000006C0
op_BTST25                       01:000006C6
op_BTST26                       01:000006CC
op_BTST27                       01:000006D2
op_BTST28                       01:000006D8
op_BTST29                       01:000006DE
op_BTST3                        01:00000506
op_BTST30                       01:000006E4
op_BTST31                       01:000006EA
op_BTST32                       01:000006EE
op_BTST4                        01:0000050E
op_BTST5                        01:00000516
op_BTST6                        01:0000051E
op_BTST7                        01:00000526
op_BTST8                        01:0000052E
op_BTST9                        01:00000536
op_CHK                          01:00001DF0
op_CMP                          01:00002CE2
op_CMPA                         01:00002D58
op_CMPM                         01:00002DBE
op_CMP_I                        01:0000137C
op_DBCC                         01:00002816
op_DIVS                         01:00002A46
op_DIVU                         01:000029F4
op_EOR                          01:00002C6C
op_EORI_TO_CCR                  01:000002C0
op_EORI_TO_SR                   01:000002E6
op_EXG                          01:00003388
op_EXT                          01:00001C70
op_LEAPEA                       01:00001CB2
op_LINKS                        01:00001DC2
op_MOVE                         01:00001870
op_MOVEM                        01:000021B8
op_MOVEP                        01:00001108
op_MOVEQ                        01:000029D8
op_MOVE_USP                     01:00001DE0
op_MOVE_xxx_FLAGS               01:00001A7C
op_MULS                         01:0000333C
op_MULU                         01:000032F0
op_NBCD                         01:000026C6
op_NEGS                         01:00001E2A
op_OR                           01:00002A98
op_ORI_TO_CCR                   01:00000278
op_ORI_TO_SR                    01:0000029A
op_ROXx                         01:0000362C
op_ROx                          01:000033F6
op_RTR                          01:00002774
op_SBCD                         01:000025CE
op_SCC                          01:0000283C
op_SHIFTS                       01:00003862
op_SHIFTS2                      01:00003AA4
op_SUB                          01:00002F4E
op_SUBA                         01:00003084
op_SUBQ                         01:0000291E
op_SUBX                         01:000031E0
op_SUB_I                        01:000016EA
op_SWAP                         01:00001C9C
op_TAS                          01:00001D5E
op_TRAPV                        01:00002758
op_TST                          01:00001D84
pcssxa                          01:00004DA8
rotate_iofocus                  01:00004140
sGetChar                        01:00004E8A
semamem                          E:FD050000
start                           01:00000000
start_other                     01:000000A2
trap3                           01:00004F00

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD090000 PLIC
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 ACIA_TX
00000000 ACIA_RX
00000000 start
00000003 CTRLC
00000004 ACIA_STAT
00000008 CTRLH
00000008 numBreakpoints
0000000A LF
0000000D SC_TAB
0000000D CR
00000011 SC_ALT
00000012 SC_LSHIFT
00000014 SC_CTRL
00000018 CTRLX
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
0000008E loop2
00000090 loop1
000000A2 start_other
000000B6 do_nothing
000000BC InitSemaphores
000000E0 SC_EXTEND
000000E2 TestSemaphore
000000F0 SC_KEYUP
000000FE IncrementSemaphore
00000116 DecrementSemaphore
00000130 LockSemaphore
00000136 UnlockSemaphore
00000156 Delay3s
00000164 dly3s2
00000166 dly3s1
0000017A cpu_test
0000024C ALL_DONE
0000024E BSR_FAR1
00000260 EXCEPTION_6
00000270 EXCEPTION_7
00000278 op_ORI_TO_CCR
0000029A op_ORI_TO_SR
000002C0 op_EORI_TO_CCR
000002E6 op_EORI_TO_SR
00000310 op_ANDI_TO_CCR
00000336 op_ANDI_TO_SR
00000360 op_BTST
000004EA op_BTST0
000004F6 op_BTST1
000004FE op_BTST2
00000506 op_BTST3
0000050E op_BTST4
00000516 op_BTST5
0000051E op_BTST6
00000526 op_BTST7
0000052E op_BTST8
00000536 op_BTST9
0000053E op_BTST10
00000546 op_BTST11
0000054C op_BTST12
000006A4 op_BTST20
000006AE op_BTST21
000006B4 op_BTST22
000006BA op_BTST23
000006C0 op_BTST24
000006C6 op_BTST25
000006CC op_BTST26
000006D2 op_BTST27
000006D8 op_BTST28
000006DE op_BTST29
000006E4 op_BTST30
000006EA op_BTST31
000006EE op_BTST32
0000070A op_BCHG
00000A72 op_BCLR
00000DC0 op_BSET
00001108 op_MOVEP
00001194 op_BOOL_I
0000133E BSR_CLOSE1
00001346 op_BSR
00001374 BSR_CLOSE2
0000137C op_CMP_I
00001564 op_ADD_I
000016EA op_SUB_I
00001870 op_MOVE
0000193C MOVE2
000019B8 MOVE1
00001A38 MOVE3
00001A7C op_MOVE_xxx_FLAGS
00001B92 MOVE4
00001C70 op_EXT
00001C9C op_SWAP
00001CB2 op_LEAPEA
00001D4A LEA1
00001D5E op_TAS
00001D84 op_TST
00001DC2 op_LINKS
00001DE0 op_MOVE_USP
00001DF0 op_CHK
00001E2A op_NEGS
000021B8 op_MOVEM
000024D6 op_ABCD
000024F6 ABCD_OUTER1
000024F8 ABCD_INNER1
00002514 ABCD_NO_C1
0000251C ABCD_NO_C2
00002564 ABCD_OUTER2
00002566 ABCD_INNER2
00002582 ABCD_NO_C3
0000258A ABCD_NO_C4
000025CE op_SBCD
000025EE SBCD_OUTER1
000025F0 SBCD_INNER1
0000260C SBCD_NO_C1
00002614 SBCD_NO_C2
0000265C SBCD_OUTER2
0000265E SBCD_INNER2
0000267A SBCD_NO_C3
00002682 SBCD_NO_C4
000026C6 op_NBCD
000026DE NBCD_LOOP
000026EA NBCD_NO_C
000026EE NBCD_NO_Z
00002724 NBCD_LOOP1
00002738 NBCD_NO_C1
0000273C NBCD_NO_Z1
00002758 op_TRAPV
00002774 op_RTR
00002780 RTR_DONE
0000278E BSR_FAR2
00002796 op_BCC
0000279E BCC1
000027A8 BCC2
000027B0 BCC3
000027BA BCC4
000027C2 BCC5
000027CC BCC6
000027D4 BCC7
000027DE BCC8
000027E6 BCC9
000027F0 BCC10
000027F8 BCC11
00002802 BCC12
0000280A BCC13
00002814 BCC14
00002816 op_DBCC
0000281E DBCC_LOOP1
0000282C DBCC_LOOP2
0000283C op_SCC
00002864 op_ADDQ
00002878 ADDQ_LOOP1
000028B6 ADDQ_LOOP2
000028EC ADDQ_LOOP3
0000291E op_SUBQ
00002936 SUBQ_LOOP1
00002970 SUBQ_LOOP2
000029A6 SUBQ_LOOP3
000029D8 op_MOVEQ
000029F4 op_DIVU
00002A10 DIVU_OUTER1
00002A46 op_DIVS
00002A62 DIVS_OUTER1
00002A98 op_OR
00002AB8 OR_OUTER1
00002B2C OR_OUTER2
00002B82 op_AND
00002BA2 AND_OUTER1
00002C16 AND_OUTER2
00002C6C op_EOR
00002C8C EOR_OUTER2
00002CE2 op_CMP
00002D02 CMP_OUTER1
00002D58 op_CMPA
00002D78 CMPA_OUTER1
00002DBE op_CMPM
00002E06 CMPM_LOOP1
00002E20 CMPM_LOOP2
00002E3A CMPM_LOOP3
00002E64 op_ADD
00002E84 ADD_OUTER1
00002EF8 ADD_OUTER2
00002F4E op_SUB
00002F6E SUB_OUTER1
00002FE2 SUB_OUTER2
00003038 op_ADDA
0000305E ADDA_OUTER1
00003084 op_SUBA
000030AA SUBA_OUTER1
000030D0 op_ADDX
000030F0 ADDX_OUTER1
00003184 ADDX_LOOP3
000031A0 ADDX_LOOP4
000031BC ADDX_LOOP5
000031E0 op_SUBX
00003200 SUBX_OUTER1
00003294 SUBX_LOOP3
000032B0 SUBX_LOOP4
000032CC SUBX_LOOP5
000032F0 op_MULU
0000330C MULU_OUTER1
0000333C op_MULS
00003358 MULS_OUTER1
00003388 op_EXG
000033EA ROx_FLAGS
000033F6 op_ROx
00003400 ROx_LOOP1
00003420 ROx_LOOP2
00003440 ROx_LOOP3
00003460 ROx_LOOP4
00003480 ROx_LOOP5
000034A2 ROx_LOOP6
00003620 ROXx_FLAGS
0000362C op_ROXx
00003636 ROXx_LOOP1
00003656 ROXx_LOOP2
00003676 ROXx_LOOP3
00003696 ROXx_LOOP4
000036B6 ROXx_LOOP5
000036D8 ROXx_LOOP6
00003856 SHIFTS_FLAGS
00003862 op_SHIFTS
0000386C SHIFTS_LOOP1
0000388C SHIFTS_LOOP2
000038AC SHIFTS_LOOP3
000038CC SHIFTS_LOOP4
000038EC SHIFTS_LOOP5
0000390E SHIFTS_LOOP6
00003A98 SHIFTS2_FLAGS
00003AA4 op_SHIFTS2
00003AAE SHIFTS2_LOOP1
00003ACA SHIFTS2_LOOP2
00003AE6 SHIFTS2_LOOP3
00003B02 SHIFTS2_LOOP4
00003B1E SHIFTS2_LOOP5
00003B3C SHIFTS2_LOOP6
00003CC2 get_screen_color
00003CEE get_screen_address
00003CF6 clear_screen
00003D20 loop3
00003D3E CRLF
00003D50 UpdateTextPos
00003D7A CalcScreenLoc
00003D88 DisplayChar
00003DAC dcx14
00003DB0 dcx7
00003DB6 dccr
00003DD4 dcx6
00003DEA dcx8
00003E00 dcx9
00003E1E dcx10
00003E36 dcx12
00003E40 dcx11
00003E86 dclf
00003E8A dcx16
00003E8E dcx4
00003E98 doBackspace
00003EA6 doDelete
00003EE2 doCtrlX
00003F06 IncCursorPos
00003F26 IncCursorRow
00003F58 icc1
00003F5A ScrollUp
00003F8C BlankLastLine
00003FDA DisplayString
00003FDE dspj1
00003FEA dsret
00003FF0 DisplayStringCRLF
00003FF6 DisplayStringLimited
00004016 DisplayStringLimitedCRLF
0000401C HomeCursor
0000402E SyncCursor
00004050 TRAP15
00004068 T15DispatchTable
00004108 Cursor1
0000413E StubRout
00004140 rotate_iofocus
0000416C init_plic
0000418E _KeybdInit
0000419C _KeybdGetStatus
000041A6 _KeybdGetScancode
000041B6 KeybdRecvByte
000041D6 KeybdWaitTx
000041FC SetKeyboardEcho
00004204 CheckForKey
00004210 GetKey
0000424A CheckForCtrlC
0000425A KeybdGetCharNoWait
00004262 KeybdGetCharWait
0000426A KeybdGetChar
0000446C KeybdSetLEDStatus
000044D8 KeybdSendByte
000044E0 Wait10ms
000044F0 _unshiftedScanCodes
000045F0 _shiftedScanCodes
000046F0 _keybdControlCodes
00004770 _keybdExtendedCodes
000047F0 FromScreen
000047FC StartMon
00004806 Monitor
0000481C PromptLn
00004828 Prompt3
0000483E Prompt1
00004850 Prompt2
000048FC TestCLS
00004924 DisplayHelp
00004930 HelpMsg
000049F6 GetCmdLine
00004A9A FillMem
00004ABC fmemL
00004AC6 fmem1
00004ACC fmemW
00004AD6 fmemB
00004AE0 ignBlanks
00004AF2 EditMem
00004AFA edtmem1
00004B3E ExecuteCode
00004B4C DumpMem
00004B68 DumpMem1
00004B7A DisplayMem
00004B8A dspmem1
00004BD6 DumpRegs
00004C56 msg_regs
00004C5A msg_reglist
00004C80 GetHexNumber
00004CAC AsciiToHexNybble
00004CBE gthx5
00004CD0 gthx6
00004CE2 gthx3
00004CE6 DisplayTwoSpaces
00004CF0 dspspc1
00004CF8 DisplaySpace
00004D00 DisplayTetra
00004D06 DisplayWyde
00004D0C DisplayByte
00004D12 DisplayNybble
00004D2C LoadS19
00004D2E NextRec
00004D38 ProcessRec
00004DA8 pcssxa
00004DEC ProcessS1
00004DF0 ProcessS2
00004DF4 ProcessS3
00004DF8 ProcessS7
00004E04 ProcessS8
00004E10 ProcessS9
00004E1C S19Get16BitAddress
00004E28 S19Get24BitAddress
00004E34 S19Get32BitAddress
00004E52 S1932a
00004E66 S1932b
00004E8A sGetChar
00004EA8 AudioInputTest
00004EAA BouncingBalls
00004EAC GraphicsDemo
00004EAE ClearScreen
00004EB4 SerialPeekCharDirect
00004EB4 AUXIN
00004ED4 bus_err
00004ED8 SerialPutChar
00004F00 trap3
00004F3E ProcessBreakpoint
00004F44 DisarmAllBreakpoints
00004F70 ArmAllBreakpoints
00004FA0 ArmBreakpoint
0000501C DisarmBreakpoint
00005070 ListBreakpoints
00005090 ClearBreakpointList
000050A2 irq_rout
00005134 nmi_rout
00005146 brdisp_trap
0000517E illegal_trap
00005194 msg_start
000051AC msg_core_start
000051BD msg_illegal
000051CF msg_bad_branch_disp
000051E1 msg_test_done
00040000 CursorRow
00040001 CursorCol
00040002 TextPos
00040002 TextCurpos
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
00100000 IOFocus
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100020 _KeybdBuf
