Sections:
00: "CODE" (0-CE37)
01: "DATA" (0-700)


Source: "boot.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: ;-------------------------------------------------------------------------------
                            	    37: ;
                            	    38: ; system memory map
                            	    39: ;
                            	    40: ;
                            	    41: ; 00000000 +----------------+      <+
                            	    42: ;          | startup sp,pc  | 8 B   |
                            	    43: ; 00000008 +----------------+       |
                            	    44: ;					 |    vectors     | pair shared+
                            	    45: ; 00000400 +----------------+       |
                            	    46: ;					 |   bios mem     |       |
                            	    47: ; 00001000 +----------------+       |
                            	    48: ;					 |   bios code    |       |
                            	    49: ; 00020000 +----------------+      <+
                            	    50: ;					 |    unused      |
                            	    51: ; 00040000 +----------------+
                            	    52: ;					 |   local ram    |
                            	    53: ; 00048000 +----------------+
                            	    54: ;					 |    unused      |
                            	    55: ; 00100000 +----------------+
                            	    56: ;					 |   global ram   |
                            	    57: ; 00101000 +----------------+
                            	    58: ;					 | serial rcvbuf  |
                            	    59: ; 00102000 +----------------+
                            	    60: ;          | serial xmitbuf |
                            	    61: ; 00103000 +----------------+
                            	    62: ;					 |    unused      |
                            	    63: ; 40000000 +----------------+
                            	    64: ;          |                |
                            	    65: ;          |                |
                            	    66: ;          |                |
                            	    67: ;          :  dram memory   : 1GB MB
                            	    68: ;          |                |
                            	    69: ;          |                |
                            	    70: ;          |                |
                            	    71: ; 80000000 +----------------+
                            	    72: ;          |                |
                            	    73: ;          |                |
                            	    74: ;          |                |
                            	    75: ;          :  dram memory   : 1GB MB
                            	    76: ;          |     mirror     |
                            	    77: ;          |                |
                            	    78: ;          |                |
                            	    79: ; C0000000 +----------------+
                            	    80: ;          |                |
                            	    81: ;          :     unused     :
                            	    82: ;          |                |
                            	    83: ; FD000000 +----------------+
                            	    84: ;          |                |
                            	    85: ;          :    I/O area    : 1.0 M
                            	    86: ;          |                |
                            	    87: ; FFE00000 +----------------+
                            	    88: ;          |                |
                            	    89: ;          :     unused     :
                            	    90: ;          |                |
                            	    91: ; FFFFFFFF +----------------+
                            	    92: ;
                            	    93: ;-------------------------------------------------------------------------------
                            	    94: ;
                            	    95: HAS_MMU equ 0
                            	    96: NCORES equ 4
                            	    97: TEXTCOL equ 64
                            	    98: TEXTROW	equ	32
                            	    99: 
                            	   100: CTRLC	EQU		$03
                            	   101: CTRLH	EQU		$08
                            	   102: CTRLS	EQU		$13
                            	   103: CTRLX	EQU		$18
                            	   104: CTRLZ	EQU		$1A
                            	   105: LF		EQU		$0A
                            	   106: CR		EQU		$0D
                            	   107: XON		EQU		$11
                            	   108: XOFF	EQU		$13
                            	   109: EOT		EQU		$04
                            	   110: BLANK EQU		$20
                            	   111: 
                            	   112: SC_F12  EQU    $07
                            	   113: SC_C    EQU    $21
                            	   114: SC_T    EQU    $2C
                            	   115: SC_Z    EQU    $1A
                            	   116: SC_KEYUP	EQU		$F0
                            	   117: SC_EXTEND   EQU		$E0
                            	   118: SC_CTRL		EQU		$14
                            	   119: SC_RSHIFT	EQU		$59
                            	   120: SC_NUMLOCK	EQU		$77
                            	   121: SC_SCROLLLOCK	EQU	$7E
                            	   122: SC_CAPSLOCK		EQU	$58
                            	   123: SC_ALT		EQU		$11
                            	   124: SC_LSHIFT	EQU		$12
                            	   125: SC_DEL		EQU		$71		; extend
                            	   126: SC_LCTRL	EQU		$58
                            	   127: SC_TAB      EQU		$0D
                            	   128: 
                            	   129: 	include "..\Femtiki\device.x68"

Source: "..\Femtiki\device.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2020-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: DEV_INIT equ 0
                            	    38: DEV_STAT equ 1
                            	    39: DEV_PUTCHAR equ 2
                            	    40: DEV_PUTBUF equ 3
                            	    41: DEV_GETCHAR equ 4
                            	    42: DEV_GETBUF equ 5
                            	    43: DEV_SET_INPOS equ 6
                            	    44: DEV_SET_OUTPOS equ 7
                            	    45: DEV_GETCHAR_DIRECT equ 8
                            	    46: DEV_PEEKCHAR equ 9
                            	    47: DEV_PEEKCHAR_DIRECT equ 10
                            	    48: DEV_PUTCHAR_DIRECT equ 11
                            	    49: DEV_CLEAR equ 12
                            	    50: DEV_SWAPBUF equ 13
                            	    51: DEV_SETBUF1 equ 14
                            	    52: DEV_SETBUF2 equ 15
                            	    53: DEV_GETBUF1 equ 16
                            	    54: DEV_GETBUF2 equ 17
                            	    55: DEV_WRITEAT equ 18
                            	    56: DEV_SETUNIT equ 19
                            	    57: DEV_GET_DIMEN equ 20
                            	    58: DEV_GET_COLOR equ 21
                            	    59: DEV_GET_INPOS equ 22
                            	    60: DEV_GET_OUTPOS equ 23
                            	    61: DEV_GET_OUTPTR equ 24
                            	    62: DEV_SET_COLOR equ 25
                            	    63: DEV_SET_COLOR123 equ 26
                            	    64: 
                            	    65: DCB_MAGIC equ	0			; 'DCB'
                            	    66: DCB_NAME	equ 4			; 15 chars+NULL
                            	    67: DCB_CMDPROC	equ 24	; 8 byte pointer to command processor
                            	    68: DCB_OUTPOSX equ 32
                            	    69: DCB_OUTPOSY equ 36
                            	    70: DCB_OUTPOSZ equ 40
                            	    71: DCB_INPOSX equ 44
                            	    72: DCB_INPOSY equ 48
                            	    73: DCB_INPOSZ equ 52
                            	    74: DCB_INBUFPTR equ 56
                            	    75: DCB_OUTBUFPTR equ 60
                            	    76: DCB_INBUFSIZE equ 64
                            	    77: DCB_OUTBUFSIZE equ 68
                            	    78: DCB_INDIMX equ 72
                            	    79: DCB_INDIMY equ 76
                            	    80: DCB_INDIMZ equ 80
                            	    81: DCB_OUTDIMX equ 84
                            	    82: DCB_OUTDIMY equ 88
                            	    83: DCB_OUTDIMZ equ 92
                            	    84: DCB_BKCOLOR equ 96
                            	    85: DCB_FGCOLOR equ 100
                            	    86: DCB_OPCODE equ 104
                            	    87: DCB_LASTERC equ 108
                            	    88: DCB_INBUFPTR2 equ 112
                            	    89: DCB_OUTBUFPTR2 equ 116
                            	    90: DCB_INBUFSIZE2 equ 120
                            	    91: DCB_OUTBUFSIZE2 equ 124
                            	    92: DCB_UNIT equ 128
                            	    93: DCB_SIZE equ 132
                            	    94: 
                            	    95: ;Standard Devices are:
                            	    96: 
                            	    97: ;#		Device					Standard name
                            	    98: 
                            	    99: ;0		NULL device 			NUL		(OS built-in)
                            	   100: ;1		Keyboard (sequential)	KBD		(OS built-in, ReadOnly)
                            	   101: ;2		Video (sequential)		VID		(OS built-in, WriteOnly)
                            	   102: ;3		Printer (parallel 1)	LPT		(OS built-in)
                            	   103: ;4		Printer (parallel 2)	LPT2	(OS built-in)
                            	   104: ;5		RS-232 1				COM1	(OS built-in)
                            	   105: ;6		RS-232 2				COM2	(OS built-in)
                            	   106: ;7		RS-232 3				COM3	(OS built-in)
                            	   107: ;8		RS-232 4				COM4	(OS built-in)
                            	   108: ;9
                            	   109: ;10		Floppy					FD0 	(OS built-in)
                            	   110: ;11		Floppy					FD1 	(OS built-in)
                            	   111: ;12		Hard disk				HD0 	(OS built-in)
                            	   112: ;13		Hard disk				HD1 	(OS built-in)
                            	   113: ;14
                            	   114: ;15
                            	   115: ;16
                            	   116: ;17
                            	   117: ;18
                            	   118: ;19
                            	   119: ;20
                            	   120: ;21
                            	   121: ;22
                            	   122: ;23
                            	   123: 

Source: "boot.x68"
                            	   130: 	include "..\Femtiki\FemtikiTop.x68"

Source: "..\Femtiki\FemtikiTop.x68"
                            	     1: 	include "..\Femtiki\const.x68"

Source: "..\Femtiki\const.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2020-2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: TS_NONE			EQU		0
                            	    38: TS_READY		EQU		1
                            	    39: TS_DEAD			EQU		2
                            	    40: TS_MSGRDY		EQU		4
                            	    41: TS_WAITMSG	EQU		8
                            	    42: TS_TIMEOUT	EQU		16
                            	    43: TS_PREEMPT	EQU		32
                            	    44: TS_RUNNING	EQU		128
                            	    45: 
                            	    46: ; error codes
                            	    47: E_Ok		EQU		$00
                            	    48: E_Arg		EQU		$01
                            	    49: E_Func  EQU    $02
                            	    50: E_BadMbx	EQU		$04
                            	    51: E_QueFull	EQU		$05
                            	    52: E_NoThread	EQU		$06
                            	    53: E_NotAlloc	EQU		$09
                            	    54: E_NotSupported EQU $0A
                            	    55: E_NoMsg		EQU		$0b
                            	    56: E_Timeout	EQU		$10
                            	    57: E_BadAlarm	EQU		$11
                            	    58: E_NotOwner	EQU		$12
                            	    59: E_QueStrategy EQU		$13
                            	    60: E_DCBInUse	EQU		$19
                            	    61: ; Device driver errors
                            	    62: E_BadDevNum	EQU		$20
                            	    63: E_NoDev		EQU		$21
                            	    64: E_BadDevOp	EQU		$22
                            	    65: E_ReadError	EQU		$23
                            	    66: E_WriteError EQU		$24
                            	    67: E_BadBlockNum	EQU	$25
                            	    68: E_TooManyBlocks	EQU	$26
                            	    69: 
                            	    70: ; resource errors
                            	    71: E_NoMoreMbx	EQU		$40
                            	    72: E_NoMoreMsgBlks	EQU	$41
                            	    73: E_NoMoreAlarmBlks	EQU $44
                            	    74: E_NoMoreTCBs	EQU	$45
                            	    75: E_NoMem		EQU 12
                            	    76: 
                            	    77: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     2: 	include "..\Femtiki\config.x68"

Source: "..\Femtiki\config.x68"
                            	     1: MAX_TID		EQU		4095
                            	     2: NR_TCB		EQU		4096
                            	     3: NTASK     EQU   4096    ; number of threads allowed
                            	     4: LOG_TCBSZ	EQU		8
                            	     5: LOG_PGSZ	EQU		10
                            	     6: LOG_ACBSZ EQU   12
                            	     7: OSPAGES		EQU		16			; pages of memory dedicated to OS
                            	     8: PAGESZ    EQU   16384  	; size of a page of memory
                            	     9: MEMSZ     EQU   32768   ; pages
                            	    10: MBX_BLOCKPTR_BUFSZ  EQU   8 ; number of block pointer entries
                            	    11: NR_MSG		EQU		21842		; number of messages available
                            	    12: NR_MBX		EQU		9792
                            	    13: 
                            	    14: 
                            	    15: 
                            	    16: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     3: 	include "..\Femtiki\types.x68"

Source: "..\Femtiki\types.x68"
                            	     1: ; Thread Control Block
                            	     2: TCBMagic    EQU		$0000
                            	     3: TCBRegs  		EQU   $0004		; register set storage area
                            	     4: TCBUSP			EQU		$0044
                            	     5: TCBSSP			EQU		$0048
                            	     6: TCBSR				EQU		$004C
                            	     7: TCBPC				EQU		$0050
                            	     8: TCBStatus		EQU		$0054
                            	     9: TCBPriority	EQU		$0055
                            	    10: TCBWaitMbx	EQU		$0056
                            	    11: TCBHasFocus EQU   $005A
                            	    12: TCBStackBot	EQU		$005C
                            	    13: TCBMsgD1		EQU		$0060
                            	    14: TCBMsgD2		EQU		$0064
                            	    15: TCBMsgD3		EQU		$0068
                            	    16: TCBStartTick	EQU	$006C
                            	    17: TCBEndTick	EQU		$0070
                            	    18: TCBTicks		EQU		$0074
                            	    19: TCBException	EQU	$0078
                            	    20: TCBNext			EQU		$007C
                            	    21: TCBPrev			EQU		$0080
                            	    22: TCBAffinityBase	EQU	$0082
                            	    23: TCBAffinity	EQU		$0084
                            	    24: TCBTimeout	EQU		$0088
                            	    25: TCBtid      EQU   $008C
                            	    26: TCBmid      EQU   $0090
                            	    27: TCBappid    EQU   $0094
                            	    28: TCBOpMode   EQU   $0098
                            	    29: TCBMbxNext  EQU   $009C
                            	    30: TCBMbxPrev  EQU   $00A0
                            	    31: TCBThreadNum  EQU   $00A4
                            	    32: TCBAcbNext	EQU		$00A8
                            	    33: TCBAcbPrev	EQU		$00AC
                            	    34: TCBhMailboxes	EQU		$00B0
                            	    35: TCBName			EQU		$00C0
                            	    36: TCB_SIZE		EQU		$0100
                            	    37: 
                            	    38: MBX_MAGIC		equ		0
                            	    39: MBX_OWNER		equ		4		; tid of owning task
                            	    40: MBX_LINK    equ   8
                            	    41: MBX_TQHEAD  equ   12   ; link field for free list shared with task queue head
                            	    42: MBX_TQTAIL  equ   16
                            	    43: MBX_MQHEAD	equ		20
                            	    44: MBX_MQTAIL	equ		24
                            	    45: MBX_SIZE		equ		32
                            	    46: 
                            	    47: MSG_MAGIC   equ   0
                            	    48: MSG_LINK	  equ		4
                            	    49: MSG_RETADR  equ   8
                            	    50: MSG_TGTADR  equ   12
                            	    51: MSG_TYPE    equ   16
                            	    52: MSG_D1		  equ		20
                            	    53: MSG_D2		  equ		24
                            	    54: MSG_D3		  equ		28
                            	    55: MSG_SIZE	  equ		32
                            	    56: 
                            	    57: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     4: 
                            	     5: 	include "..\Femtiki\source\kernel\Femtiki_vars.x68"

Source: "..\Femtiki\source\kernel\Femtiki_vars.x68"
                            	     1: 
                            	     2: PAMShareCounts	EQU	$20000000	; one byte for each physical page of memory
                            	     3: tcbs						EQU	$20010000	; 4095*256 = 1MB
                            	     4: tcbs_end				EQU	$20020000
                            	     5: messages				EQU	$20020000	; 32*8192 (680*16=21760 messages)
                            	     6: messages_end		EQU	$20060000
                            	     7: mailboxes				EQU	$20060000
                            	     8: mailboxes_end		EQU	$20078000	;	12*8192 (816*12=9792 mailboxes)
                            	     9: acbs						EQU	$20080000	; 32*2*8192 =512kB
                            	    10: acbs_end				EQU	$20100000
                            	    11: 
                            	    12: 
                            	    13: sys_stacks			EQU	$DF0000
                            	    14: 
                            	    15: FemtikiVars			EQU	$00100200
                            	    16: PAMLastAllocate2	EQU		$00100218
                            	    17: RunningAID		EQU		$00100220
                            	    18: RunningTCB			EQU		$00100224
                            	    19: ACBPtrs				EQU		$00100228
                            	    20: MidStackBottoms	EQU		$00100264
                            	    21: FemtikiInited	EQU		$00100284
                            	    22: missed_ticks	EQU		$00100288
                            	    23: IOFocusList		EQU		$0010028C
                            	    24: IOFocusID			EQU		$001002AC
                            	    25: iof_switch		EQU		$001002AD
                            	    26: nMessage			EQU		$001002AE
                            	    27: nMailbox			EQU		$001002B0
                            	    28: hKeybdMbx			EQU		$001002BA
                            	    29: hFocusSwitchMbx		EQU		$001002BC
                            	    30: BIOS_RespMbx	EQU		$001002BE
                            	    31: hasUltraHighPriorityTasks	EQU		$001002C0
                            	    32: im_save				EQU		$001002C2
                            	    33: sp_tmp				EQU		$001002C4
                            	    34: startQNdx			EQU		$001002C6
                            	    35: NPAGES				EQU		$001002D8
                            	    36: syspages			EQU		$001002DA
                            	    37: mmu_FreeMaps	EQU		$001002E0
                            	    38: mmu_entries		EQU		$00100300
                            	    39: freelist			EQU		$00100302
                            	    40: hSearchMap		EQU		$00100304
                            	    41: OSActive			EQU		$00100305
                            	    42: FreeACB				EQU		$00100308
                            	    43: FreeTCB				EQU		$0010030C
                            	    44: FreeMSG				EQU		$00100310
                            	    45: FreeMBX				EQU		$00100314
                            	    46: TimeoutList		EQU		$00100318
                            	    47: QueueCycle    EQU   $0010031C
                            	    48: readyQ				EQU		$00100320		; 32 bytes per queue per core, 2 cores for now
                            	    49: readyQEnd			EQU		$00100360
                            	    50: FemtikiVars_end	EQU	$00100400
                            	    51: 
                            	    52: ;gc_stack		rmb		512
                            	    53: ;gc_pc				fcdw		0
                            	    54: ;gc_omapno		fcw			0
                            	    55: ;gc_mapno		fcw			0
                            	    56: ;gc_dl				fcw			0
                            	    57: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     6: 	code
                            	     7: 	even
                            	     8: 	include "..\Femtiki\source\kernel\tcb.x68"

Source: "..\Femtiki\source\kernel\tcb.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ; Initialize variables related to TCBs.
                            	    39: ;------------------------------------------------------------------------------
                            	    40: 
                            	    41: TCBInit:
00:00000000 41F920010000    	    42: 	lea tcbs,a0
00:00000006 4E7B8013        	    43: 	movec a0,tcba
00:0000000A 700F            	    44: 	moveq #2*8-1,d0		; 2 cores, 32 bytes (8 lwords) per queue
00:0000000C 72FF            	    45: 	moveq #-1,d1			; value to set
00:0000000E 41F900100320    	    46: 	lea readyQ,a0			; clear out ready queue
                            	    47: .0001
00:00000014 20C1            	    48: 	move.l d1,(a0)+
00:00000016 51C8FFFC        	    49: 	dbra d0,.0001
00:0000001A 203C0003FFFF    	    50: 	move.l #TCB_SIZE*NR_TCB/4-1,d0
                            	    51: .clearTCBs
00:00000020 4298            	    52: 	clr.l (a0)+
00:00000022 51C8FFFC        	    53: 	dbra d0,.clearTCBs
00:00000026 4E75            	    54: 	rts
                            	    55: 
                            	    56: ;------------------------------------------------------------------------------
                            	    57: ; Convert a TCB handle into a pointer.
                            	    58: ;
                            	    59: ; Parameters:
                            	    60: ;		d0 = TCB handle
                            	    61: ; Returns:
                            	    62: ;		a0 = pointer to TCB
                            	    63: ;------------------------------------------------------------------------------
                            	    64: 
                            	    65: TCBHandleToPointer:
00:00000028 2F01            	    66: 	move.l d1,-(a7)
00:0000002A 028000000FFF    	    67: 	andi.l #MAX_TID,d0		; limit to # threads
00:00000030 4E7A1013        	    68: 	movec tcba,d1
00:00000034 E188            	    69: 	lsl.l #8,d0
00:00000036 D280            	    70: 	add.l d0,d1
00:00000038 2041            	    71: 	move.l d1,a0
00:0000003A E088            	    72: 	lsr.l #8,d0						; restore d0
00:0000003C 221F            	    73: 	move.l (a7)+,d1
00:0000003E 4E75            	    74: 	rts
                            	    75: 
                            	    76: ;------------------------------------------------------------------------------
                            	    77: ; Convert a TCB pointer into a handle.
                            	    78: ;
                            	    79: ; Parameters:
                            	    80: ;		a0 = TCB pointer
                            	    81: ; Returns:
                            	    82: ;		d0 = TCB handle
                            	    83: ;------------------------------------------------------------------------------
                            	    84: 
                            	    85: TCBPointerToHandle:
00:00000040 2F01            	    86: 	move.l d1,-(a7)				; save d1
00:00000042 4E7A1013        	    87: 	movec tcba,d1
00:00000046 91C1            	    88: 	sub.l d1,a0
00:00000048 2008            	    89: 	move.l a0,d0
00:0000004A E088            	    90: 	lsr.l #8,d0
00:0000004C 221F            	    91: 	move.l (a7)+,d1				; restore d1
00:0000004E 4E75            	    92: 	rts
                            	    93: 
                            	    94: ;------------------------------------------------------------------------------
                            	    95: ; Internal TCB allocation function.
                            	    96: ;
                            	    97: ; Parameters:
                            	    98: ;		none
                            	    99: ; Returns:
                            	   100: ;		d0 = handle for allocated TCB, NULL if none available
                            	   101: ;------------------------------------------------------------------------------
                            	   102: 
                            	   103: TCBIAlloc:
00:00000050 30390010030C    	   104: 	move.w FreeTCB,d0				; d1 = Free handle
00:00000056 6714            	   105: 	beq .0001
00:00000058 2F08            	   106: 	move.l a0,-(sp)
00:0000005A 61CC            	   107: 	bsr TCBHandleToPointer	; convert to pointer
00:0000005C 3228007C        	   108: 	move.w TCBNext(a0),d1		; d1 = next on free list
00:00000060 33C10010030C    	   109: 	move.w d1,FreeTCB				; update head of free list
00:00000066 61D8            	   110: 	bsr TCBPointerToHandle	; convert pointer to handle
00:00000068 205F            	   111: 	move.l (sp)+,a0
00:0000006A 4E75            	   112: 	rts
                            	   113: 	; Here there was no free TCB available. Return a NULL
                            	   114: .0001
00:0000006C 4E75            	   115: 	rts
                            	   116: 	
                            	   117: ;------------------------------------------------------------------------------
                            	   118: ; TCB allocation function. Locks the system semaphore during allocation.
                            	   119: ;
                            	   120: ; Parameters:
                            	   121: ;		none
                            	   122: ; Returns:
                            	   123: ;		d0 = handle for allocated TCB, NULL if none available
                            	   124: ;		d1 = E_Ok
                            	   125: ;------------------------------------------------------------------------------
                            	   126: 
                            	   127: TCBAlloc:
00:0000006E 61000326        	   128: 	bsr LockSysSemaphore
00:00000072 61DC            	   129: 	bsr	TCBIAlloc
00:00000074 61000330        	   130: 	bsr UnlockSysSemaphore
00:00000078 7200            	   131: 	moveq #E_Ok,d1
00:0000007A 4E75            	   132: 	rts
                            	   133: 	
                            	   134: ;------------------------------------------------------------------------------
                            	   135: ; Internal TCB free function.
                            	   136: ;
                            	   137: ; Modifies:
                            	   138: ;		none
                            	   139: ; Parameters:
                            	   140: ;		d0 = handle to TCB
                            	   141: ; Returns:
                            	   142: ;		d0 = handle to TCB
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: TCBIFree:
00:0000007C 2F08            	   146: 	move.l a0,-(sp)
00:0000007E 61A8            	   147: 	bsr TCBHandleToPointer
00:00000080 31790010030C007C	   148: 	move.w FreeTCB,TCBNext(a0)
00:00000088 33C00010030C    	   149: 	move.w d0,FreeTCB
00:0000008E 205F            	   150: 	move.l (sp)+,a0
00:00000090 4E75            	   151: 	rts
                            	   152: 
                            	   153: ;------------------------------------------------------------------------------
                            	   154: ; TCB free function. Locks the system sempaphore while freeing.
                            	   155: ;
                            	   156: ; Modifies:
                            	   157: ;		none
                            	   158: ; Parameters:
                            	   159: ;		d0 = handle to TCB
                            	   160: ; Returns:
                            	   161: ;		d0 = handle to TCB
                            	   162: ;		d1 = E_Ok
                            	   163: ;------------------------------------------------------------------------------
                            	   164: 
                            	   165: TCBFree:
00:00000092 61000302        	   166: 	bsr LockSysSemaphore
00:00000096 61E4            	   167: 	bsr TCBIFree
00:00000098 6100030C        	   168: 	bsr UnlockSysSemaphore
00:0000009C 7200            	   169: 	moveq #E_Ok,d1
00:0000009E 4E75            	   170: 	rts
                            	   171: 
                            	   172: ;------------------------------------------------------------------------------
                            	   173: ; Given an affinity, chose the core number to run on.
                            	   174: ;
                            	   175: ; Parameters:
                            	   176: ;		a0 = pointer to TCB
                            	   177: ;	Returns:
                            	   178: ;		d0 = core number to run on
                            	   179: ;------------------------------------------------------------------------------
                            	   180: 
                            	   181: TCBAffineChose:
00:000000A0 48E75000        	   182: 	movem.l d1/d3,-(sp)
00:000000A4 363C001F        	   183: 	move.w #31,d3										; limit number of bit selects to 32
00:000000A8 12280082        	   184: 	move.b TCBAffinityBase(a0),d1		; d1 = starting bit
00:000000AC 20280084        	   185: 	move.l TCBAffinity(a0),d0				; d0 = affinity mask
                            	   186: .0002
00:000000B0 0300            	   187: 	btst.l d1,d0										; is bit d1 set?
00:000000B2 6610            	   188: 	bne .0001												; if set, exit loop
00:000000B4 5241            	   189: 	addq #1,d1
00:000000B6 51CBFFF8        	   190: 	dbra d3,.0002
                            	   191: 	; no bits set? How?
00:000000BA 117C00020082    	   192: 	move.b #2,TCBAffinityBase(a0)
00:000000C0 7000            	   193: 	moveq #0,d0											; just return core #2 (0)
00:000000C2 4E75            	   194: 	rts
                            	   195: .0001
00:000000C4 1001            	   196: 	move.b d1,d0
00:000000C6 5500            	   197: 	subi.b #2,d0										; cores start at #2
00:000000C8 4880            	   198: 	ext.w d0
00:000000CA 48C0            	   199: 	ext.l d0
00:000000CC 5241            	   200: 	addq #1,d1											; increment bit selection for next time
00:000000CE 11410082        	   201: 	move.b d1,TCBAffinityBase(a0)		; and store in TCB
00:000000D2 4CDF000A        	   202: 	movem.l (sp)+,d1/d3
00:000000D6 4E75            	   203: 	rts
                            	   204: 
                            	   205: ;------------------------------------------------------------------------------
                            	   206: ; Insert thread into ready queue. The thread is added at the tail of the 
                            	   207: ; queue. The queue is a doubly linked list.
                            	   208: ;
                            	   209: ; Stack Space:
                            	   210: ;		8 lwords
                            	   211: ; Modifies:
                            	   212: ;		none
                            	   213: ; Parameters:
                            	   214: ;		d0 = thread id to insert
                            	   215: ; Returns:
                            	   216: ;		d0 = TCB handle
                            	   217: ; ----------------------------------------------------------------------------
                            	   218: 
                            	   219: TCBInsertIntoReadyQueue:
00:000000D8 48E770F0        	   220: 	movem.l d1-d3/a0-a3,-(sp)
00:000000DC 2400            	   221: 	move.l d0,d2											; d2 = thread to insert
00:000000DE 6100FF48        	   222: 	bsr TCBHandleToPointer
00:000000E2 2648            	   223: 	move.l a0,a3											; a3 = TCB pointer of thread to insert
00:000000E4 610002B0        	   224: 	bsr LockSysSemaphore
00:000000E8 002800800054    	   225: 	ori.b #TS_RUNNING,TCBStatus(a0)
00:000000EE 61B0            	   226: 	bsr TCBAffineChose								; Chose which cores queue to use
00:000000F0 EB88            	   227: 	lsl.l #5,d0												; 32 bytes per readyQ head/tail per core
00:000000F2 7200            	   228: 	clr.l d1
00:000000F4 12280055        	   229: 	move.b TCBPriority(a0),d1					; d1 = priority
00:000000F8 028100000007    	   230: 	andi.l #7,d1
00:000000FE E589            	   231: 	lsl.l #2,d1												; 4 bytes per priority level
00:00000100 D280            	   232: 	add.l d0,d1												; add in base queue
00:00000102 D2BC00100320    	   233: 	add.l #readyQ,d1									; add in start of ready queues
00:00000108 2241            	   234: 	move.l d1,a1
00:0000010A 30290004        	   235: 	move.w 4(a1),d0										; d0 = tail entry
00:0000010E 3600            	   236: 	move.w d0,d3											; d3 = tail entry
00:00000110 4A40            	   237: 	tst.w d0
00:00000112 6D20            	   238: 	blt .qempty
00:00000114 6100FF12        	   239: 	bsr TCBHandleToPointer						; a0 = pointer to tail
00:00000118 2448            	   240: 	move.l a0,a2
00:0000011A 2038007C        	   241: 	move.l TCBNext,d0
00:0000011E 6100FF08        	   242: 	bsr TCBHandleToPointer						; a0 = tail->next
00:00000122 21420080        	   243: 	move.l d2,TCBPrev(a0)							; tail->next->prev = new entry
00:00000126 2542007C        	   244: 	move.l d2,TCBNext(a2)							; tail->next = new entry
00:0000012A 2740007C        	   245: 	move.l d0,TCBNext(a3)							; new entry->next = tail->next
00:0000012E 27430080        	   246: 	move.l d3,TCBPrev(a3)							; new entry->prev = tail
00:00000132 6012            	   247: 	bra .0002
                            	   248: .qempty
00:00000134 4A51            	   249: 	tst.w (a1)												; check if there is a list head
00:00000136 6C0E            	   250: 	bge .0002													; head with no tail -> list corrupt
00:00000138 33420004        	   251: 	move.w d2,4(a1)										; head and tail equal new entry
00:0000013C 3282            	   252: 	move.w d2,(a1)
00:0000013E 3742007C        	   253: 	move.w d2,TCBNext(a3)							; next and prev of new entry point to self
00:00000142 37420080        	   254: 	move.w d2,TCBPrev(a3)
                            	   255: 	; Head but no tail, list corrupt?
                            	   256: .0002
00:00000146 6100025E        	   257: 	bsr UnlockSysSemaphore
00:0000014A 4CDF0F0E        	   258: 	movem.l (sp)+,d1-d3/a0-a3
00:0000014E 4E75            	   259: 	rts
                            	   260: 
                            	   261: ;------------------------------------------------------------------------------
                            	   262: ; Remove a thread from the ready queue. Actual removal is not done here, it
                            	   263: ; is done the next time the thread is selected to run. Just mark the thread as
                            	   264: ; not running.
                            	   265: ;
                            	   266: ; Parameters:
                            	   267: ;		d0 = thread id to remove
                            	   268: ; Returns:
                            	   269: ;		none
                            	   270: ; -----------------------------------------------------------------------------
                            	   271: 
                            	   272: TCBRemoveFromReadyQueue:
00:00000150 4A40            	   273: 	cmpi.w #0,d0
00:00000152 6D1C            	   274: 	blt .0001
00:00000154 028000000FFF    	   275: 	andi.l #MAX_TID,d0									; limit to # of threads
00:0000015A 2F08            	   276: 	move.l a0,-(sp)
00:0000015C 6100FECA        	   277: 	bsr	TCBHandleToPointer
00:00000160 61000234        	   278: 	bsr LockSysSemaphore
00:00000164 0228007F0054    	   279: 	andi.b #TS_RUNNING^$FF,TCBStatus(a0)
00:0000016A 6100023A        	   280: 	bsr UnlockSysSemaphore
00:0000016E 205F            	   281: 	move.l (sp)+,a0
                            	   282: .0001
00:00000170 4E75            	   283: 	rts
                            	   284: 	
                            	   285: ; ----------------------------------------------------------------------------
                            	   286: ; Register Usage
                            	   287: ;		d0 = temporary
                            	   288: ;		d1 = index into list of queues
                            	   289: ;		d2 = index to queue set
                            	   290: ;		d4 = queue counter, goes from 7 down to 0
                            	   291: ;		d5 = temporary
                            	   292: ;		d6 = next on list
                            	   293: ;		a0 = temporary pointer to TCB
                            	   294: ;		a1 = pointer to queue
                            	   295: ;		a2 = pointer to old head of list
                            	   296: ;		a3 = pointer to TCB at head of queue
                            	   297: ; Modifies:
                            	   298: ;		none
                            	   299: ; Parameters:
                            	   300: ;		none
                            	   301: ; Returns:
                            	   302: ;		a0 = pointer to TCB, NULL if none on list
                            	   303: ;		d0 = TCB handle
                            	   304: ; ----------------------------------------------------------------------------
                            	   305: 
                            	   306: StartQ
00:00000172 01              	   307: 	dc.b 1,2,3,4,1,5,6,7
00:00000173 02
00:00000174 03
00:00000175 04
00:00000176 01
00:00000177 05
00:00000178 06
00:00000179 07
                            	   308: 
                            	   309: 	even
                            	   310: TCBPopReadyQueue:
00:0000017A 48E77E70        	   311: 	movem.l	d1-d6/a1-a3,-(a7)
00:0000017E 4E7A2FE0        	   312: 	movec coreno,d2					; select the queue set based on the core number
00:00000182 5502            	   313: 	subi.b #2,d2						; cores start at #2
00:00000184 EB8A            	   314: 	lsl.l #5,d2							; d2 = index to queue set, 32 bytes per queue set
00:00000186 7807            	   315: 	moveq #7,d4							; d4 = queue count
00:00000188 6100020C        	   316: 	bsr LockSysSemaphore
                            	   317: 	; One in four tries pick a different priority to start searching from. 
00:0000018C 12390010031C    	   318: 	move.b QueueCycle,d1		; increment Queue cycle counter
00:00000192 5201            	   319: 	addi.b #1,d1
00:00000194 02010007        	   320: 	andi.b #7,d1
00:00000198 13C10010031C    	   321: 	move.b d1,QueueCycle
00:0000019E 6612            	   322: 	bne	.0001
00:000001A0 43FAFFD0        	   323: 	lea StartQ,a1
00:000001A4 4881            	   324: 	ext.w d1
00:000001A6 12311000        	   325: 	move.b (a1,d1.w),d1
00:000001AA 02410007        	   326: 	andi.w #7,d1						; limit to number of queues
00:000001AE E549            	   327: 	lsl.w #2,d1							; make into lword index
00:000001B0 6002            	   328: 	bra .0002
                            	   329: .0001
00:000001B2 7200            	   330: 	moveq #0,d1							; start at Queue #0
                            	   331: .0002
00:000001B4 43F900100320    	   332: 	lea readyQ,a1						; a1 = pointer to list of ready queues
00:000001BA D3C2            	   333: 	add.l d2,a1							; a1 = pointer to queue set
00:000001BC 36311000        	   334: 	move.w (a1,d1.w),d3			; d3 = old head of list
00:000001C0 6D4E            	   335: 	blt .nextQ							; anything on list?, if not go next queue
00:000001C2 3003            	   336: 	move.w d3,d0						; d0 = old head of list
00:000001C4 6100FE62        	   337: 	bsr TCBHandleToPointer
00:000001C8 2448            	   338: 	move.l a0,a2						; a2 = pointer to old head of list
00:000001CA 3A2A007C        	   339: 	move.w TCBNext(a2),d5		; remove head of list from list
00:000001CE BA80            	   340: 	cmp.l d0,d5							; removing last TCB?
00:000001D0 6736            	   341: 	beq .removeLast
00:000001D2 3C05            	   342: 	move.w d5,d6						; d6 = next on list
00:000001D4 3005            	   343: 	move.w d5,d0						; d0 = next on list
00:000001D6 6100FE50        	   344: 	bsr TCBHandleToPointer	; a0 = pointer to next TCB on list
00:000001DA 3A2A0080        	   345: 	move.w TCBPrev(a2),d5		; d5 = previous TCB from head
00:000001DE 31450080        	   346: 	move.w d5,TCBPrev(a0)		; next->prev = head->prev
00:000001E2 3005            	   347: 	move.w d5,d0
00:000001E4 6100FE42        	   348: 	bsr TCBHandleToPointer	; a0 = pointer to previous TCB from head
00:000001E8 3146007C        	   349: 	move.w d6,TCBNext(a0)		; head->prev->next = next
                            	   350: .0003
00:000001EC 33861000        	   351: 	move.w d6,(a1,d1.w)			; reset head of list to next
00:000001F0 3543007C        	   352: 	move.w d3,TCBNext(a2)		; point links back to self
00:000001F4 35430080        	   353: 	move.w d3,TCBPrev(a2)
00:000001F8 3003            	   354: 	move.w d3,d0						; return handle in d0
00:000001FA 48C0            	   355: 	ext.l d0
00:000001FC 204A            	   356: 	move.l a2,a0						; return pointer in a0
                            	   357: .0004
00:000001FE 610001A6        	   358: 	bsr UnlockSysSemaphore
00:00000202 4CDF0E7E        	   359: 	movem.l	(a7)+,d1-d6/a1-a3
00:00000206 4E75            	   360: 	rts
                            	   361: .removeLast
00:00000208 7CFF            	   362: 	moveq #-1,d6						; set head to negative when removing last
00:0000020A 33861002        	   363: 	move.w d6,2(a1,d1.w)		; tail = negative
00:0000020E 60DC            	   364: 	bra .0003
                            	   365: .nextQ
00:00000210 5841            	   366: 	addi.w #4,d1						; increment queue number by lword
00:00000212 0241001C        	   367: 	andi.w #$1C,d1					; limit to number of queues
00:00000216 51CCFF9C        	   368: 	dbra d4,.0002						; go back and check the next queue
00:0000021A 70FF            	   369: 	moveq #-1,d0						; return handle < 0 if nothing in any queue
00:0000021C 91C8            	   370: 	suba.l a0,a0						; and NULL pointer
00:0000021E 60DE            	   371: 	bra	.0004								; return NULL pointer if nothing in any queue
                            	   372: 
                            	   373: ;------------------------------------------------------------------------------
                            	   374: ; Remove a thread from the timeout list.
                            	   375: ; Called when a mailbox is freed and a thread is waiting at the
                            	   376: ; mailbox.
                            	   377: ;
                            	   378: ; Parameters:
                            	   379: ;		B = task id to remove
                            	   380: ; Modifies:
                            	   381: ;		none
                            	   382: ; Returns:
                            	   383: ;		none
                            	   384: ;------------------------------------------------------------------------------
                            	   385: 	if 0
                            	   386: RemoveFromTimeoutList:
                            	   387: 	pshs	d,w,x,y,u
                            	   388: 	cmpb	TimeoutList			; head of list?
                            	   389: 	beq		0001f
                            	   390: 	lbsr	TCBHandleToPointer
                            	   391: 	tfr		d,x
                            	   392: 	ldb		TCBNext,x
                            	   393: 	clra
                            	   394: 	tfr		d,u
                            	   395: 	ldf		TCBPrev,x
                            	   396: 	lbsr	TCBHandleToPointer
                            	   397: 	tfr		d,y
                            	   398: 	stf		TCBPrev,y
                            	   399: 	tfr		f,b
                            	   400: 	clra
                            	   401: 	lbsr	TCBHandleToPointer
                            	   402: 	tfr		d,y
                            	   403: 	tfr		u,d
                            	   404: 	stb		TCBNext,y
                            	   405: 	bra		0002f
                            	   406: 	; Removing from head of timeout list
                            	   407: 0001:
                            	   408: 	lbsr	TCBHandleToPointer
                            	   409: 	tfr		d,x
                            	   410: 	ldb		TCBNext,x
                            	   411: 	stb		TimeoutList		; set new head of list
                            	   412: 	clra
                            	   413: 	lbsr	TCBHandleToPointer
                            	   414: 	tfr		d,y
                            	   415: 	clrb
                            	   416: 	stb		TCBPrev,y			; next->prev = NULL
                            	   417: 0002:
                            	   418: 	clrd
                            	   419: 	std		TCBNext,x			; next = NULL
                            	   420: 	std		TCBPrev,x			; prev = NULL
                            	   421: 	puls	d,w,x,y,u,pc
                            	   422: 	
                            	   423: ;// ----------------------------------------------------------------------------
                            	   424: ;// Pop the top entry from the timeout list.
                            	   425: ;// ----------------------------------------------------------------------------
                            	   426: ;
                            	   427: ;hTCB PopTimeoutList()
                            	   428: ;{
                            	   429: ;    TCB *p;
                            	   430: ;    hTCB h;
                            	   431: ;
                            	   432: ;    h = TimeoutList;
                            	   433: ;    if (TimeoutList > 0 && TimeoutList < NR_TCB) {
                            	   434: ;        TimeoutList = tcbs[TimeoutList].next;
                            	   435: ;        if (TimeoutList >= 0 && TimeoutList < NR_TCB) {
                            	   436: ;            tcbs[TimeoutList].prev = h->prev;
                            	   437: ;            h->prev->next = TimeoutList;
                            	   438: ;        }
                            	   439: ;    }
                            	   440: ;    return h;
                            	   441: ;}
                            	   442: ;
                            	   443: ; Returns:
                            	   444: ;		B = task at top of list
                            	   445: ;
                            	   446: 
                            	   447: PopTimeoutList:
                            	   448: 	pshs	w,x,y
                            	   449: 	ldb		TimeoutList
                            	   450: 	pshs	b
                            	   451: 	beq		0001f
                            	   452: 	cmpb	#NR_TCB
                            	   453: 	bhs		0001f
                            	   454: 	bsr		TCBHandleToPointer
                            	   455: 	tfr		d,x
                            	   456: 	ldb		TCBNext,x
                            	   457: 	tfr		b,f
                            	   458: 	lde		TCBPrev,x
                            	   459: 	stb		TimeoutList
                            	   460: 	beq		0001f
                            	   461: 	cmpb	#NR_TCB
                            	   462: 	bhs		0001f
                            	   463: 	bsr		TCBHandleToPointer
                            	   464: 	tfr		d,y
                            	   465: 	ste		TCBPrev,y
                            	   466: 	tfr		e,b
                            	   467: 	bsr		TCBHandleToPointer
                            	   468: 	tfr		d,y
                            	   469: 	stf		TCBNext,y
                            	   470: 	clr		TCBPrev,x
                            	   471: 	clr		TCBNext,x
                            	   472: 0001:
                            	   473: 	puls	b
                            	   474: 	puls	x,y,w,pc
                            	   475: 
                            	   476: ; ----------------------------------------------------------------------------
                            	   477: ; ----------------------------------------------------------------------------
                            	   478: DispTwoSpace:
                            	   479: 	bsr	DispSpace
                            	   480: DispSpace:
                            	   481: 	ldb		#' '
                            	   482: 	swi
                            	   483: 	fcb		MF_OUTCH
                            	   484: 	rts
                            	   485: 
                            	   486: DumpTCBs:
                            	   487: 	swi
                            	   488: 	fcb		MF_CRLF
                            	   489: 	ldb		#1
                            	   490: 0002:
                            	   491: 	lbsr	TCBHandleToPointer
                            	   492: 	tfr		d,x
                            	   493: 	ldb		TCBtid,x
                            	   494: 	swi
                            	   495: 	fcb		MF_DisplayByteAsHex
                            	   496: 	bsr		DispSpace
                            	   497: 	ldb		TCBStatus,x
                            	   498: 	swi
                            	   499: 	fcb		MF_DisplayByteAsHex
                            	   500: 	bsr		DispTwoSpace
                            	   501: 	swi
                            	   502: 	fcb		MF_CRLF
                            	   503: 	ldb		TCBNext,x
                            	   504: 	beq		0001f
                            	   505: 	bra		0002b
                            	   506: 0001:
                            	   507: 	rts
                            	   508: 	
                            	   509: fcb	"TID Stat"
                            	   510: 	endif
                            	   511: 
                            	   512: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     9: 	include "..\Femtiki\source\kernel\Femtiki.x68"

Source: "..\Femtiki\source\kernel\Femtiki.x68"
                            	     1: 	code
                            	     2: 	even
                            	     3: ;------------------------------------------------------------------------------
                            	     4: ; Initialize the Femtiki OS.
                            	     5: ;------------------------------------------------------------------------------
                            	     6: 
                            	     7: FemtikiInit:
00:00000220 7000            	     8: 	moveq #0,d0
00:00000222 4E7B0012        	     9: 	movec d0,tr
00:00000226 6100FDD8        	    10: 	bsr TCBInit
00:0000022A 42390010031C    	    11: 	clr.b QueueCycle
                            	    12: FemtikiInitIRQ:
00:00000230 43FA00DC        	    13: 	lea FemtikiTimerIRQ,a1						; Set timer IRQ vector to Femtiki
00:00000234 4E7A8801        	    14: 	movec vbr,a0
00:00000238 21490078        	    15: 	move.l a1,30*4(a0)								; vector #30
00:0000023C 4E75            	    16: 	rts
                            	    17: 
                            	    18: ;------------------------------------------------------------------------------
                            	    19: ; Operating system call dispatcher.
                            	    20: ; On entry, the task state has been saved including the system stack pointer,
                            	    21: ; in the task control block.
                            	    22: ;------------------------------------------------------------------------------
                            	    23: 
                            	    24: OSCallTable
00:0000023E 0000            	    25: 	dc.w		0
                            	    26: 
                            	    27: 	even
                            	    28: CallOS:
00:00000240 2F08            	    29: 	move.l	a0,-(a7)
00:00000242 207900100224    	    30: 	move.l	RunningTCB,a0
00:00000248 48E8FFFF0004    	    31: 	movem.l d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,TCBRegs(a0)
00:0000024E 225F            	    32: 	move.l	(a7)+,a1
00:00000250 21490020        	    33: 	move.l	a1,32(a0)
00:00000254 4E7A9800        	    34: 	movec		usp,a1
00:00000258 21490044        	    35: 	move.l	a1,TCBUSP(a0)
00:0000025C 301F            	    36: 	move.w	(a7)+,d0					; pop the status register
00:0000025E 3140004C        	    37: 	move.w	d0,TCBSR(a0)			; save in TCB
00:00000262 225F            	    38: 	move.l	(a7)+,a1					; pop the program counter
00:00000264 5489            	    39: 	lea	2(a1),a1							; increment past inline callno argument
00:00000266 21490050        	    40: 	move.l	a1,TCBPC(a0)			; save PC in TCB
00:0000026A 214F0048        	    41: 	move.l	a7,TCBSSP(a0)			; finally save SSP
00:0000026E 3029FFFE        	    42: 	move.w	-2(a1),d0					; d0 = call number
00:00000272 E548            	    43: 	lsl.w		#2,d0							; make into table index
00:00000274 43FAFFC8        	    44: 	lea			OSCallTable,a1
00:00000278 22710000        	    45: 	move.l	(a1,d0.w),a1
00:0000027C 4E91            	    46: 	jsr			(a1)							; call the OS function
                            	    47: 	; Restore the thread context and return
00:0000027E 207900100224    	    48: 	move.l	RunningTCB,a0
00:00000284 2E780048        	    49: 	move.l	TCBSSP,a7
00:00000288 2F280050        	    50: 	move.l	TCBPC(a0),-(a7)		; setup the PC and the SR on the stack
00:0000028C 3F28004C        	    51: 	move.w	TCBSR(a0),-(a7)		; prep for RTE
00:00000290 20380044        	    52: 	move.l	TCBUSP,d0					; restore user stack pointer
00:00000294 4E7B0800        	    53: 	movec		d0,usp
00:00000298 4CE800FF0004    	    54: 	movem.l	TCBRegs(a0),d0/d1/d2/d3/d4/d5/d6/d7
00:0000029E 4CE87E00002C    	    55: 	movem.l TCBRegs+40(a0),a1/a2/a3/a4/a5/a6
00:000002A4 20680024        	    56: 	move.l	TCBRegs+32(a0),a0
00:000002A8 4E73            	    57: 	rte
                            	    58: 
                            	    59: ;------------------------------------------------------------------------------
                            	    60: ; Get a pointer to the currently running TCB.
                            	    61: ;
                            	    62: ; Returns:
                            	    63: ;		a0 = pointer to running TCB
                            	    64: ;------------------------------------------------------------------------------
                            	    65: 
                            	    66: GetRunningTCBPointer:
00:000002AA 48E7C000        	    67: 	movem.l d0/d1,-(a7)
00:000002AE 4E7A0012        	    68: 	movec tr,d0
00:000002B2 6100FD74        	    69: 	bsr TCBHandleToPointer
00:000002B6 028000000FFF    	    70: 	andi.l #MAX_TID,d0		; limit to # threads
00:000002BC 4CDF0003        	    71: 	movem.l (a7)+,d0/d1
00:000002C0 4E75            	    72: 	rts
                            	    73: 
                            	    74: ; ----------------------------------------------------------------------------
                            	    75: ; Select a thread to run. Relatively easy. All that needs to be done is to
                            	    76: ; keep popping the queue until a valid running task is found. There should
                            	    77: ; always be at least one thread in the queue.
                            	    78: ;
                            	    79: ; Modifies:
                            	    80: ;		none
                            	    81: ; Returns:
                            	    82: ;		d0 = handle of the next thread to run
                            	    83: ; ----------------------------------------------------------------------------
                            	    84: 
                            	    85: SelectThreadToRun:
                            	    86: .0001										; keep popping tasks from the readyQ until a valid one
00:000002C2 6100FEB6        	    87: 	bsr	TCBPopReadyQueue	; is found.
00:000002C6 4A40            	    88: 	tst.w d0
00:000002C8 6B0C            	    89: 	bmi	.0002
00:000002CA 0C2800800054    	    90: 	cmpi.b #TS_RUNNING,TCBStatus(a0)	; ensure the thread is to be running
00:000002D0 66F0            	    91: 	bne	.0001													; if not, go get the next thread
00:000002D2 6000FE04        	    92: 	bra	TCBInsertIntoReadyQueue				; insert thread back into queue
                            	    93: 	; Nothing in queues? There is supposed to be. Add the OS task to the queue.
                            	    94: .0002
00:000002D6 4E7A8013        	    95: 	movec tcba,a0
00:000002DA 117C00800054    	    96: 	move.b #TS_RUNNING,TCBStatus(a0)	; flag as RUNNING
00:000002E0 117C00040055    	    97: 	move.b #4,TCBPriority(a0)					; OS has normal priority
00:000002E6 7000            	    98: 	moveq #0,d0												; fast pointer to handle
00:000002E8 6000FDEE        	    99: 	bra TCBInsertIntoReadyQueue
                            	   100: 
                            	   101: ; ----------------------------------------------------------------------------
                            	   102: ; Update the IRQ live indicator on screen.
                            	   103: ; ----------------------------------------------------------------------------
                            	   104: 
                            	   105: UpdateIRQLive:
00:000002EC 227900040004    	   106: 	move.l TextScr,a1					; a1 = screen address
00:000002F2 2411            	   107: 	move.l (a1),d2
00:000002F4 E15A            	   108: 	rol.w	#8,d2								; reverse byte order of d2
00:000002F6 4842            	   109: 	swap d2
00:000002F8 E15A            	   110: 	rol.w	#8,d2
00:000002FA 06010030        	   111: 	addi.b #'0',d1						; binary to ascii core number
00:000002FE D202            	   112: 	add.b	d2,d1
00:00000300 E159            	   113: 	rol.w	#8,d1								; put bytes back in order
00:00000302 4841            	   114: 	swap d1
00:00000304 E159            	   115: 	rol.w	#8,d1
00:00000306 23410004        	   116: 	move.l d1,4(a1)						; update onscreen IRQ flag
00:0000030A 5291            	   117: 	addi.l #1,(a1)						; flashy colors
00:0000030C 4E75            	   118: 	rts
                            	   119: 
                            	   120: ; ----------------------------------------------------------------------------
                            	   121: ; Femtiki IRQ service routine. This is where a thread switch can occur so,
                            	   122: ; the thread context is saved and restored.
                            	   123: ; ----------------------------------------------------------------------------
                            	   124: 
                            	   125: FemtikiTimerIRQ:
00:0000030E 46FC2600        	   126: 	move.w #$2600,sr							; disable lower level IRQs
00:00000312 2F00            	   127: 	move.l d0,-(a7)
00:00000314 2F08            	   128: 	move.l a0,-(a7)
00:00000316 6192            	   129: 	bsr GetRunningTCBPointer			; a0 = pointer to running TCB
00:00000318 48E8FFFF0004    	   130: 	movem.l #$FFFF,TCBRegs(a0)		; save all registers
00:0000031E 201F            	   131: 	move.l (a7)+,d0
00:00000320 21400020        	   132: 	move.l d0,32(a0)							; save original a0 value
00:00000324 201F            	   133: 	move.l (a7)+,d0
00:00000326 2080            	   134: 	move.l d0,(a0)								; save original d0 value
00:00000328 4E7A0800        	   135: 	movec usp,d0									; save user stack pointer
00:0000032C 21400044        	   136: 	move.l d0,TCBUSP(a0)
00:00000330 2E7C00041BFC    	   137: 	move.l #TimerStack,a7					; reset stack pointer
00:00000336 4E7A1FE0        	   138: 	movec	coreno,d1								; d1 = core number
00:0000033A 0C010002        	   139: 	cmpi.b #2,d1
00:0000033E 6612            	   140: 	bne.s	.0002
00:00000340 23FC1D000000FD09	   141: 	move.l #$1D000000,PLIC+$14		; reset edge sense circuit
00:00000348 0014
00:0000034A 13FC0001000400A0	   142: 	move.b #1,IRQFlag							; set IRQ flag for TinyBasic shell
                            	   143: .0002
00:00000352 6198            	   144: 	bsr UpdateIRQLive							; Update IRQ live indicator
                            	   145: ;	bsr ReceiveMsg								; Check for RPC
00:00000354 4E7A0FF0        	   146: 	movec tick,d0									; Update time accounting
00:00000358 21400070        	   147: 	move.l d0,TCBEndTick(a0)			; compute number of ticks thread was running
00:0000035C 90A8006C        	   148: 	sub.l	TCBStartTick(a0),d0
00:00000360 D1A80074        	   149: 	add.l	d0,TCBTicks(a0)					; add to cumulative ticks
00:00000364 117C00200054    	   150: 	move.b #TS_PREEMPT,TCBStatus(a0)	; set thread status to PREEMPT
00:0000036A 6100FF56        	   151: 	bsr	SelectThreadToRun					; d0 = TCB handle
00:0000036E 4E7B0012        	   152: 	movec d0,tr										; set running thread number in tr
00:00000372 6100FF36        	   153: 	bsr GetRunningTCBPointer			; a0 = pointer to TCB
00:00000376 117C00800054    	   154: 	move.b #TS_RUNNING,TCBStatus(a0)	; set thread status to RUNNING
00:0000037C 4E7A0FF0        	   155: 	movec	tick,d0
00:00000380 2140006C        	   156: 	move.l d0,TCBStartTick(a0)		; record starting tick
00:00000384 20280044        	   157: 	move.l TCBUSP(a0),d0					; restore user stack pointer
00:00000388 4E7B0800        	   158: 	movec d0,usp
00:0000038C 4CE8FFFF0004    	   159: 	movem.l TCBRegs(a0),#$FFFF		; restore all registers
00:00000392 504F            	   160: 	addq #8,sp										; "pop" d0/a0, saved stack pointer is off by 8
00:00000394 4E73            	   161: 	rte														; and return
                            	   162: 
                            	   163: 	include "..\Femtiki\source\kernel\Semaphore.x68"

Source: "..\Femtiki\source\kernel\Semaphore.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;-------------------------------------------------------------------------------
                            	    38: ; Lock the system semaphore. Call the BIOS.
                            	    39: ;
                            	    40: ; Parameters:
                            	    41: ;		none
                            	    42: ; Returns:
                            	    43: ;		none
                            	    44: ;-------------------------------------------------------------------------------
                            	    45: 
                            	    46: LockSysSemaphore:
00:00000396 48E7C000        	    47: 	movem.l d0/d1,-(sp)
00:0000039A 7025            	    48: 	moveq #37,d0				; lock semaphore
00:0000039C 7208            	    49: 	moveq #FMTK_SEMA,d1
00:0000039E 4E4F            	    50: 	trap #15
00:000003A0 4CDF0003        	    51: 	movem.l (sp)+,d0/d1
00:000003A4 4E75            	    52: 	rts
                            	    53: 
                            	    54: 
                            	    55: ;-------------------------------------------------------------------------------
                            	    56: ; Unlock the system semaphore.
                            	    57: ;
                            	    58: ; Parameters:
                            	    59: ;		none
                            	    60: ; Returns:
                            	    61: ;		none
                            	    62: ;-------------------------------------------------------------------------------
                            	    63: 
                            	    64: UnlockSysSemaphore:
00:000003A6 48E7C000        	    65: 	movem.l d0/d1,-(sp)
00:000003AA 7026            	    66: 	moveq #38,d0				; unlock semaphore
00:000003AC 7208            	    67: 	moveq #FMTK_SEMA,d1
00:000003AE 4E4F            	    68: 	trap #15
00:000003B0 4CDF0003        	    69: 	movem.l (sp)+,d0/d1
00:000003B4 4E75            	    70: 	rts
                            	    71: 
                            	    72: 

Source: "..\Femtiki\source\kernel\Femtiki.x68"
                            	   164: 
                            	   165: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	    10: 

Source: "boot.x68"
                            	   131: 
                            	   132: DDATA EQU $FFFFFFF0     ; DS.L    3
                            	   133: HISPC EQU $FFFFFFFC     ; DS.L    1
                            	   134: SCREEN_FORMAT = 1
                            	   135: 
                            	   136: 	if HAS_MMU
                            	   137: TEXTREG		EQU	$1E3FF00	; virtual addresses
                            	   138: txtscreen	EQU	$1E00000
                            	   139: semamem		EQU	$1E50000
                            	   140: ACIA			EQU	$1E60000
                            	   141: ACIA_RX		EQU	0
                            	   142: ACIA_TX		EQU	0
                            	   143: ACIA_STAT	EQU	4
                            	   144: ACIA_CMD	EQU	8
                            	   145: ACIA_CTRL	EQU	12
                            	   146: I2C2 			equ $01E69000
                            	   147: I2C_PREL 	equ 0
                            	   148: I2C_PREH 	equ 1
                            	   149: I2C_CTRL 	equ 2
                            	   150: I2C_RXR 	equ 3
                            	   151: I2C_TXR 	equ 3
                            	   152: I2C_CMD 	equ 4
                            	   153: I2C_STAT 	equ 4
                            	   154: PLIC			EQU	$1E90000
                            	   155: MMU				EQU $FDC00000	; physical address
                            	   156: leds			EQU	$1EFFF00	; virtual addresses
                            	   157: keybd			EQU	$1EFFE00
                            	   158: KEYBD			EQU	$1EFFE00
                            	   159: RAND			EQU	$1EFFD00
                            	   160: RAND_NUM	EQU	$1EFFD00
                            	   161: RAND_STRM	EQU	$1EFFD04
                            	   162: RAND_MZ		EQU $1EFFD08
                            	   163: RAND_MW		EQU	$1EFFD0C
                            	   164: RST_REG		EQU	$1EFFC00
                            	   165: IO_BITMAP	EQU $1F00000
                            	   166: 	else
                            	   167: TEXTREG		EQU	$FD080000
                            	   168: txtscreen	EQU	$FD000000
                            	   169: semamem		EQU	$FD050000
                            	   170: ACIA			EQU	$FD060000
                            	   171: ACIA_RX		EQU	0
                            	   172: ACIA_TX		EQU	0
                            	   173: ACIA_STAT	EQU	4
                            	   174: ACIA_CMD	EQU	8
                            	   175: ACIA_CTRL	EQU	12
                            	   176: I2C2 			equ $FD069000
                            	   177: I2C_PREL 	equ 0
                            	   178: I2C_PREH 	equ 1
                            	   179: I2C_CTRL 	equ 2
                            	   180: I2C_RXR 	equ 3
                            	   181: I2C_TXR 	equ 3
                            	   182: I2C_CMD 	equ 4
                            	   183: I2C_STAT 	equ 4
                            	   184: PLIC			EQU	$FD090000
                            	   185: MMU				EQU $FDC00000	; physical address
                            	   186: leds			EQU	$FD0FFF00	; virtual addresses
                            	   187: keybd			EQU	$FD0FFE00
                            	   188: KEYBD			EQU	$FD0FFE00
                            	   189: RAND			EQU	$FD0FFD00
                            	   190: RAND_NUM	EQU	$FD0FFD00
                            	   191: RAND_STRM	EQU	$FD0FFD04
                            	   192: RAND_MZ		EQU $FD0FFD08
                            	   193: RAND_MW		EQU	$FD0FFD0C
                            	   194: RST_REG		EQU	$FD0FFC00
                            	   195: IO_BITMAP	EQU $FD100000
                            	   196: FRAMEBUF	EQU	$FD200000
                            	   197: GFXACCEL	EQU	$FD300000
                            	   198: 	endif
                            	   199: 
                            	   200: SERIAL_SEMA	EQU	2
                            	   201: KEYBD_SEMA	EQU	3
                            	   202: RAND_SEMA		EQU	4
                            	   203: SCREEN_SEMA	EQU	5
                            	   204: MEMORY_SEMA EQU 6
                            	   205: TCB_SEMA 		EQU	7
                            	   206: FMTK_SEMA		EQU	8
                            	   207: 
                            	   208: macIRQ_proc	macro arg1
                            	   209: 	dc.l IRQ_proc\1
                            	   210: endm
                            	   211: 
                            	   212: macIRQ_proc_label	macro arg1
                            	   213: IRQ_proc\1:
                            	   214: endm
                            	   215: 
                            	   216: 	data
                            	   217: 	; 0
01:00000000 00040FFC        	   218: 	dc.l		$00040FFC
01:00000004 000003B8        	   219: 	dc.l		start
01:00000008 00008C5A        	   220: 	dc.l		bus_err
01:0000000C 00009036        	   221: 	dc.l		addr_err
01:00000010 00009084        	   222: 	dc.l		illegal_trap		* ILLEGAL instruction
01:00000014 00000000        	   223: 	dc.l		0
01:00000018 0000201C        	   224: 	dc.l		chk_exception		; CHK
01:0000001C 00002160        	   225: 	dc.l		EXCEPTION_7			* TRAPV
01:00000020 00000000        	   226: 	dc.l		0
01:00000024 00000000        	   227: 	dc.l		0
                            	   228: 	
                            	   229: 	; 10
01:00000028 00000000        	   230: 	dc.l		0
01:0000002C 00000000        	   231: 	dc.l		0
01:00000030 00000000        	   232: 	dc.l		0
01:00000034 00000000        	   233: 	dc.l		0
01:00000038 00000000        	   234: 	dc.l		0
01:0000003C 00000000        	   235: 	dc.l		0
01:00000040 00000000        	   236: 	dc.l		0
01:00000044 00000000        	   237: 	dc.l		0
01:00000048 00000000        	   238: 	dc.l		0
01:0000004C 00000000        	   239: 	dc.l		0
                            	   240: 	
                            	   241: 	; 20
01:00000050 00000000        	   242: 	dc.l		0
01:00000054 00000000        	   243: 	dc.l		0
01:00000058 00000000        	   244: 	dc.l		0
01:0000005C 00000000        	   245: 	dc.l		0
01:00000060 00009022        	   246: 	dc.l		SpuriousIRQ
01:00000064 00000000        	   247: 	dc.l		0
01:00000068 00000000        	   248: 	dc.l		0
01:0000006C 00008FF0        	   249: 	dc.l		irq3_rout
01:00000070 00000000        	   250: 	dc.l		0
01:00000074 00000000        	   251: 	dc.l		0
                            	   252: 	
                            	   253: 	; 30
01:00000078 00008FAE        	   254: 	dc.l		TickIRQ						; IRQ 30 - timer / keyboard
01:0000007C 00009024        	   255: 	dc.l		nmi_rout
01:00000080 00008F14        	   256: 	dc.l		io_trap						; TRAP zero
01:00000084 00000000        	   257: 	dc.l		0
01:00000088 00000000        	   258: 	dc.l		0
01:0000008C 00008C74        	   259: 	dc.l		trap3							; breakpoint
01:00000090 00000000        	   260: 	dc.l		0
01:00000094 00000000        	   261: 	dc.l		0
01:00000098 00000000        	   262: 	dc.l		0
01:0000009C 00000000        	   263: 	dc.l		0
                            	   264: 
                            	   265: 	; 40
01:000000A0 00000000        	   266: 	dc.l		0
01:000000A4 00000000        	   267: 	dc.l		0
01:000000A8 00000000        	   268: 	dc.l		0
01:000000AC 00000000        	   269: 	dc.l		0
01:000000B0 00000000        	   270: 	dc.l		0
01:000000B4 00000000        	   271: 	dc.l		0
01:000000B8 00000000        	   272: 	dc.l		0
01:000000BC 00007266        	   273: 	dc.l		TRAP15
01:000000C0 00000000        	   274: 	dc.l		0
01:000000C4 00000000        	   275: 	dc.l		0
                            	   276: 
                            	   277: 	; 50	
01:000000C8 00000000        	   278: 	dc.l		0
01:000000CC 00000000        	   279: 	dc.l		0
01:000000D0 00000000        	   280: 	dc.l		0
01:000000D4 00000000        	   281: 	dc.l		0
01:000000D8 00000000        	   282: 	dc.l		0
01:000000DC 00000000        	   283: 	dc.l		0
01:000000E0 00000000        	   284: 	dc.l		0
01:000000E4 00000000        	   285: 	dc.l		0
01:000000E8 00000000        	   286: 	dc.l		0
01:000000EC 0000909A        	   287: 	dc.l		io_irq
                            	   288: 
                            	   289: 	; 60
01:000000F0 00000B0E        	   290: 	dc.l		KeybdIRQ
01:000000F4 00001742        	   291: 	dc.l		SerialIRQ
01:000000F8 00000000        	   292: 	dc.l		0
01:000000FC 0000904C        	   293: 	dc.l		brdisp_trap
                            	   294: 	
                            	   295: 	; 64
                            	   296: 
                            	   297: IRQ_trampolines:
                            	   298: ;	rept 192
                            	   299: ;	macIRQ_proc REPTN
                            	   300: ;	endr
                            	   301: 
                            	   302: 	org			$400
                            	   303: 
                            	   304: irq_list_tbl:
                            	   305: 	rept 192
                            	   306: 	dc.l 0
                            	   307: 	dc.l 0
                            	   308: 	endr
01:00000400 00000000        	     1R 	dc.l 0
01:00000404 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000408 00000000        	     1R 	dc.l 0
01:0000040C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000410 00000000        	     1R 	dc.l 0
01:00000414 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000418 00000000        	     1R 	dc.l 0
01:0000041C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000420 00000000        	     1R 	dc.l 0
01:00000424 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000428 00000000        	     1R 	dc.l 0
01:0000042C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000430 00000000        	     1R 	dc.l 0
01:00000434 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000438 00000000        	     1R 	dc.l 0
01:0000043C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000440 00000000        	     1R 	dc.l 0
01:00000444 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000448 00000000        	     1R 	dc.l 0
01:0000044C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000450 00000000        	     1R 	dc.l 0
01:00000454 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000458 00000000        	     1R 	dc.l 0
01:0000045C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000460 00000000        	     1R 	dc.l 0
01:00000464 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000468 00000000        	     1R 	dc.l 0
01:0000046C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000470 00000000        	     1R 	dc.l 0
01:00000474 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000478 00000000        	     1R 	dc.l 0
01:0000047C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000480 00000000        	     1R 	dc.l 0
01:00000484 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000488 00000000        	     1R 	dc.l 0
01:0000048C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000490 00000000        	     1R 	dc.l 0
01:00000494 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000498 00000000        	     1R 	dc.l 0
01:0000049C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004A0 00000000        	     1R 	dc.l 0
01:000004A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004A8 00000000        	     1R 	dc.l 0
01:000004AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004B0 00000000        	     1R 	dc.l 0
01:000004B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004B8 00000000        	     1R 	dc.l 0
01:000004BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004C0 00000000        	     1R 	dc.l 0
01:000004C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004C8 00000000        	     1R 	dc.l 0
01:000004CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004D0 00000000        	     1R 	dc.l 0
01:000004D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004D8 00000000        	     1R 	dc.l 0
01:000004DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004E0 00000000        	     1R 	dc.l 0
01:000004E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004E8 00000000        	     1R 	dc.l 0
01:000004EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004F0 00000000        	     1R 	dc.l 0
01:000004F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004F8 00000000        	     1R 	dc.l 0
01:000004FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000500 00000000        	     1R 	dc.l 0
01:00000504 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000508 00000000        	     1R 	dc.l 0
01:0000050C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000510 00000000        	     1R 	dc.l 0
01:00000514 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000518 00000000        	     1R 	dc.l 0
01:0000051C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000520 00000000        	     1R 	dc.l 0
01:00000524 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000528 00000000        	     1R 	dc.l 0
01:0000052C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000530 00000000        	     1R 	dc.l 0
01:00000534 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000538 00000000        	     1R 	dc.l 0
01:0000053C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000540 00000000        	     1R 	dc.l 0
01:00000544 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000548 00000000        	     1R 	dc.l 0
01:0000054C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000550 00000000        	     1R 	dc.l 0
01:00000554 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000558 00000000        	     1R 	dc.l 0
01:0000055C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000560 00000000        	     1R 	dc.l 0
01:00000564 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000568 00000000        	     1R 	dc.l 0
01:0000056C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000570 00000000        	     1R 	dc.l 0
01:00000574 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000578 00000000        	     1R 	dc.l 0
01:0000057C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000580 00000000        	     1R 	dc.l 0
01:00000584 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000588 00000000        	     1R 	dc.l 0
01:0000058C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000590 00000000        	     1R 	dc.l 0
01:00000594 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000598 00000000        	     1R 	dc.l 0
01:0000059C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005A0 00000000        	     1R 	dc.l 0
01:000005A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005A8 00000000        	     1R 	dc.l 0
01:000005AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005B0 00000000        	     1R 	dc.l 0
01:000005B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005B8 00000000        	     1R 	dc.l 0
01:000005BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005C0 00000000        	     1R 	dc.l 0
01:000005C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005C8 00000000        	     1R 	dc.l 0
01:000005CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005D0 00000000        	     1R 	dc.l 0
01:000005D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005D8 00000000        	     1R 	dc.l 0
01:000005DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005E0 00000000        	     1R 	dc.l 0
01:000005E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005E8 00000000        	     1R 	dc.l 0
01:000005EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005F0 00000000        	     1R 	dc.l 0
01:000005F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005F8 00000000        	     1R 	dc.l 0
01:000005FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000600 00000000        	     1R 	dc.l 0
01:00000604 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000608 00000000        	     1R 	dc.l 0
01:0000060C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000610 00000000        	     1R 	dc.l 0
01:00000614 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000618 00000000        	     1R 	dc.l 0
01:0000061C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000620 00000000        	     1R 	dc.l 0
01:00000624 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000628 00000000        	     1R 	dc.l 0
01:0000062C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000630 00000000        	     1R 	dc.l 0
01:00000634 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000638 00000000        	     1R 	dc.l 0
01:0000063C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000640 00000000        	     1R 	dc.l 0
01:00000644 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000648 00000000        	     1R 	dc.l 0
01:0000064C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000650 00000000        	     1R 	dc.l 0
01:00000654 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000658 00000000        	     1R 	dc.l 0
01:0000065C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000660 00000000        	     1R 	dc.l 0
01:00000664 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000668 00000000        	     1R 	dc.l 0
01:0000066C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000670 00000000        	     1R 	dc.l 0
01:00000674 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000678 00000000        	     1R 	dc.l 0
01:0000067C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000680 00000000        	     1R 	dc.l 0
01:00000684 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000688 00000000        	     1R 	dc.l 0
01:0000068C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000690 00000000        	     1R 	dc.l 0
01:00000694 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000698 00000000        	     1R 	dc.l 0
01:0000069C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006A0 00000000        	     1R 	dc.l 0
01:000006A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006A8 00000000        	     1R 	dc.l 0
01:000006AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006B0 00000000        	     1R 	dc.l 0
01:000006B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006B8 00000000        	     1R 	dc.l 0
01:000006BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006C0 00000000        	     1R 	dc.l 0
01:000006C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006C8 00000000        	     1R 	dc.l 0
01:000006CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006D0 00000000        	     1R 	dc.l 0
01:000006D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006D8 00000000        	     1R 	dc.l 0
01:000006DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006E0 00000000        	     1R 	dc.l 0
01:000006E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006E8 00000000        	     1R 	dc.l 0
01:000006EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006F0 00000000        	     1R 	dc.l 0
01:000006F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006F8 00000000        	     1R 	dc.l 0
01:000006FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000700 00000000        	     1R 	dc.l 0
01:00000704 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000708 00000000        	     1R 	dc.l 0
01:0000070C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000710 00000000        	     1R 	dc.l 0
01:00000714 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000718 00000000        	     1R 	dc.l 0
01:0000071C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000720 00000000        	     1R 	dc.l 0
01:00000724 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000728 00000000        	     1R 	dc.l 0
01:0000072C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000730 00000000        	     1R 	dc.l 0
01:00000734 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000738 00000000        	     1R 	dc.l 0
01:0000073C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000740 00000000        	     1R 	dc.l 0
01:00000744 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000748 00000000        	     1R 	dc.l 0
01:0000074C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000750 00000000        	     1R 	dc.l 0
01:00000754 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000758 00000000        	     1R 	dc.l 0
01:0000075C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000760 00000000        	     1R 	dc.l 0
01:00000764 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000768 00000000        	     1R 	dc.l 0
01:0000076C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000770 00000000        	     1R 	dc.l 0
01:00000774 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000778 00000000        	     1R 	dc.l 0
01:0000077C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000780 00000000        	     1R 	dc.l 0
01:00000784 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000788 00000000        	     1R 	dc.l 0
01:0000078C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000790 00000000        	     1R 	dc.l 0
01:00000794 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000798 00000000        	     1R 	dc.l 0
01:0000079C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007A0 00000000        	     1R 	dc.l 0
01:000007A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007A8 00000000        	     1R 	dc.l 0
01:000007AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007B0 00000000        	     1R 	dc.l 0
01:000007B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007B8 00000000        	     1R 	dc.l 0
01:000007BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007C0 00000000        	     1R 	dc.l 0
01:000007C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007C8 00000000        	     1R 	dc.l 0
01:000007CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007D0 00000000        	     1R 	dc.l 0
01:000007D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007D8 00000000        	     1R 	dc.l 0
01:000007DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007E0 00000000        	     1R 	dc.l 0
01:000007E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007E8 00000000        	     1R 	dc.l 0
01:000007EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007F0 00000000        	     1R 	dc.l 0
01:000007F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007F8 00000000        	     1R 	dc.l 0
01:000007FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000800 00000000        	     1R 	dc.l 0
01:00000804 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000808 00000000        	     1R 	dc.l 0
01:0000080C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000810 00000000        	     1R 	dc.l 0
01:00000814 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000818 00000000        	     1R 	dc.l 0
01:0000081C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000820 00000000        	     1R 	dc.l 0
01:00000824 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000828 00000000        	     1R 	dc.l 0
01:0000082C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000830 00000000        	     1R 	dc.l 0
01:00000834 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000838 00000000        	     1R 	dc.l 0
01:0000083C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000840 00000000        	     1R 	dc.l 0
01:00000844 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000848 00000000        	     1R 	dc.l 0
01:0000084C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000850 00000000        	     1R 	dc.l 0
01:00000854 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000858 00000000        	     1R 	dc.l 0
01:0000085C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000860 00000000        	     1R 	dc.l 0
01:00000864 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000868 00000000        	     1R 	dc.l 0
01:0000086C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000870 00000000        	     1R 	dc.l 0
01:00000874 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000878 00000000        	     1R 	dc.l 0
01:0000087C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000880 00000000        	     1R 	dc.l 0
01:00000884 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000888 00000000        	     1R 	dc.l 0
01:0000088C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000890 00000000        	     1R 	dc.l 0
01:00000894 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000898 00000000        	     1R 	dc.l 0
01:0000089C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008A0 00000000        	     1R 	dc.l 0
01:000008A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008A8 00000000        	     1R 	dc.l 0
01:000008AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008B0 00000000        	     1R 	dc.l 0
01:000008B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008B8 00000000        	     1R 	dc.l 0
01:000008BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008C0 00000000        	     1R 	dc.l 0
01:000008C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008C8 00000000        	     1R 	dc.l 0
01:000008CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008D0 00000000        	     1R 	dc.l 0
01:000008D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008D8 00000000        	     1R 	dc.l 0
01:000008DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008E0 00000000        	     1R 	dc.l 0
01:000008E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008E8 00000000        	     1R 	dc.l 0
01:000008EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008F0 00000000        	     1R 	dc.l 0
01:000008F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008F8 00000000        	     1R 	dc.l 0
01:000008FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000900 00000000        	     1R 	dc.l 0
01:00000904 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000908 00000000        	     1R 	dc.l 0
01:0000090C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000910 00000000        	     1R 	dc.l 0
01:00000914 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000918 00000000        	     1R 	dc.l 0
01:0000091C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000920 00000000        	     1R 	dc.l 0
01:00000924 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000928 00000000        	     1R 	dc.l 0
01:0000092C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000930 00000000        	     1R 	dc.l 0
01:00000934 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000938 00000000        	     1R 	dc.l 0
01:0000093C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000940 00000000        	     1R 	dc.l 0
01:00000944 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000948 00000000        	     1R 	dc.l 0
01:0000094C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000950 00000000        	     1R 	dc.l 0
01:00000954 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000958 00000000        	     1R 	dc.l 0
01:0000095C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000960 00000000        	     1R 	dc.l 0
01:00000964 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000968 00000000        	     1R 	dc.l 0
01:0000096C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000970 00000000        	     1R 	dc.l 0
01:00000974 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000978 00000000        	     1R 	dc.l 0
01:0000097C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000980 00000000        	     1R 	dc.l 0
01:00000984 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000988 00000000        	     1R 	dc.l 0
01:0000098C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000990 00000000        	     1R 	dc.l 0
01:00000994 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000998 00000000        	     1R 	dc.l 0
01:0000099C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009A0 00000000        	     1R 	dc.l 0
01:000009A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009A8 00000000        	     1R 	dc.l 0
01:000009AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009B0 00000000        	     1R 	dc.l 0
01:000009B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009B8 00000000        	     1R 	dc.l 0
01:000009BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009C0 00000000        	     1R 	dc.l 0
01:000009C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009C8 00000000        	     1R 	dc.l 0
01:000009CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009D0 00000000        	     1R 	dc.l 0
01:000009D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009D8 00000000        	     1R 	dc.l 0
01:000009DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009E0 00000000        	     1R 	dc.l 0
01:000009E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009E8 00000000        	     1R 	dc.l 0
01:000009EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009F0 00000000        	     1R 	dc.l 0
01:000009F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009F8 00000000        	     1R 	dc.l 0
01:000009FC 00000000        	     2R 	dc.l 0
                            	     3R 	
                            	   309: 
                            	   310: 	org			$A00
                            	   311: 
                            	   312: ;-------------------------------------------------------------------------------
                            	   313: ;-------------------------------------------------------------------------------
                            	   314: 
                            	   315: ; BIOS variables which must be local (not shared) to each core
                            	   316: 
                            	   317: CursorRow	equ		$40000
                            	   318: CursorCol	equ		$40001
                            	   319: TextPos		equ		$40002
                            	   320: TextCurpos	equ	$40002
                            	   321: TextScr			equ	$40004
                            	   322: S19StartAddress	equ	$40008
                            	   323: KeybdEcho		equ	$4000C
                            	   324: KeybdWaitFlag	equ	$4000D
                            	   325: CmdBuf			equ $40040
                            	   326: CmdBufEnd		equ	$40080
                            	   327: fgColor			equ	$40084
                            	   328: bkColor			equ	$40088
                            	   329: TextRows		equ	$4008C
                            	   330: TextCols		equ	$4008D
                            	   331: _fpTextIncr	equ $40094
                            	   332: _canary			equ $40098
                            	   333: tickcnt			equ $4009C
                            	   334: IRQFlag			equ $400A0
                            	   335: InputDevice	equ $400A4
                            	   336: OutputDevice	equ $400A8
                            	   337: Regsave			equ	$40100
                            	   338: numBreakpoints	equ		8
                            	   339: BreakpointFlag	equ		$40200
                            	   340: NumSetBreakpoints	equ	$40202	; to $40203
                            	   341: Breakpoints			equ		$40220	; to $40240
                            	   342: BreakpointWords	equ		$40280	; to $402A0
                            	   343: fpBuf       equ $402C0
                            	   344: ;RunningTCB  equ $40300
                            	   345: _exp equ $40500
                            	   346: _digit equ $40504
                            	   347: _width equ $40508
                            	   348: _E equ $4050C
                            	   349: _digits_before_decpt equ $40510
                            	   350: _precision equ $40514
                            	   351: _fpBuf equ $40520	; to $40560
                            	   352: _fpWork equ $40600
                            	   353: _dasmbuf	equ	$40800
                            	   354: OFFSET equ $40880
                            	   355: pen_color equ $40890
                            	   356: gr_x equ $40894
                            	   357: gr_y equ $40898
                            	   358: gr_width equ $4089C
                            	   359: gr_height equ $408A0
                            	   360: gr_bitmap_screen equ $408A4
                            	   361: gr_raster_op equ $408A8
                            	   362: gr_double_buffer equ $408AC
                            	   363: gr_bitmap_buffer equ $408B0
                            	   364: sys_switches equ $408B8
                            	   365: EightPixels equ $40100000	; to $40200020
                            	   366: 
                            	   367: null_dcb equ $0040A00		; 0
                            	   368: keybd_dcb equ null_dcb+DCB_SIZE	; 1
                            	   369: textvid_dcb equ keybd_dcb+DCB_SIZE	; 2
                            	   370: err_dcb equ textvid_dcb+DCB_SIZE		; 3
                            	   371: serial_dcb equ err_dcb+DCB_SIZE*2		; 5
                            	   372: framebuf_dcb equ serial_dcb+DCB_SIZE	; 6
                            	   373: gfxaccel_dcb equ framebuf_dcb+DCB_SIZE	; 7
                            	   374: 
                            	   375: TimerStack	equ	$41BFC
                            	   376: 
                            	   377: ; Keyboard buffer is in shared memory
                            	   378: IOFocus			EQU	$00100000
                            	   379: memend			equ $00100004
                            	   380: KeybdLEDs		equ	$0010000E
                            	   381: _KeyState1	equ	$0010000F
                            	   382: _KeyState2	equ	$00100010
                            	   383: _KeybdHead	equ	$00100011
                            	   384: _KeybdTail	equ	$00100012
                            	   385: _KeybdCnt		equ	$00100013
                            	   386: KeybdID			equ	$00100018
                            	   387: _Keybd_tick	equ $0001001C
                            	   388: _KeybdBuf		equ	$00100020
                            	   389: _KeybdOBuf	equ	$00100080
                            	   390: S19Checksum	equ	$00100150
                            	   391: SerTailRcv	equ	$00100160
                            	   392: SerHeadRcv	equ	$00100162
                            	   393: SerRcvXon		equ	$00100164
                            	   394: SerRcvXoff	equ	$00100165
                            	   395: SerTailXmit	equ	$00100166
                            	   396: SerHeadXmit	equ	$00100168
                            	   397: SerXmitXoff	equ	$0010016A
                            	   398: SerRcvBuf		equ	$00101000
                            	   399: SerXmitBuf	equ	$00102000
                            	   400: RTCBuf			equ $00100200	; to $0010023F
                            	   401: 
                            	   402: 	code
                            	   403: 	align		2
                            	   404: start:
                            	   405: ;	fadd (a0)+,fp2
00:000003B8 46FC2700        	   406: 	move.w #$2700,sr					; enable level 6 and higher interrupts
00:000003BC 7000            	   407: 	moveq #0,d0								; set address space zero
00:000003BE 4E7B0003        	   408: 	movec d0,asid
                            	   409: 	; Setup circuit select signals
00:000003C2 203CFDC00000    	   410: 	move.l #MMU,d0
00:000003C8 4E7B0014        	   411: 	movec d0,mmus
                            	   412: 	if HAS_MMU
                            	   413: 		move.l #$01F00000,d0			; set virtual address for iop bitmap
                            	   414: 		movec d0,iops
                            	   415: 		move.l #$01E00000,d0			; set virtual address for io block
                            	   416: 		movec d0,ios
                            	   417: 	else
00:000003CC 203CFD100000    	   418: 		move.l #$FD100000,d0			; set virtual address for iop bitmap
00:000003D2 4E7B0016        	   419: 		movec d0,iops
00:000003D6 203CFD000000    	   420: 		move.l #$FD000000,d0			; set virtual address for io block
00:000003DC 4E7B0015        	   421: 		movec d0,ios
                            	   422: 	endif
                            	   423: ;	move.l $4000000C,d0
00:000003E0 4E7A0FE0        	   424: 	movec coreno,d0							; set initial value of thread register
00:000003E4 4840            	   425: 	swap d0											; coreno in high eight bits
00:000003E6 E188            	   426: 	lsl.l #8,d0
00:000003E8 4E7B0012        	   427: 	movec d0,tr
                            	   428: 	; Prepare local variable storage
00:000003EC 303C03FF        	   429: 	move.w #1023,d0						; 1024 longs to clear
00:000003F0 41F900040000    	   430: 	lea	$40000,a0							; non shared local memory address
                            	   431: .0111:
00:000003F6 4298            	   432: 	clr.l	(a0)+								; clear the memory area
00:000003F8 51C8FFFC        	   433: 	dbra d0,.0111
00:000003FC 610000E0        	   434: 	bsr setup_null
00:00000400 6100010E        	   435: 	bsr setup_keybd
00:00000404 61000B46        	   436: 	bsr setup_textvid
00:00000408 610010D6        	   437: 	bsr setup_serial
00:0000040C 13FC0001000400A4	   438: 	move.b #1,InputDevice			; select keyboard input
00:00000414 13FC0002000400A8	   439: 	move.b #2,OutputDevice		; select text screen output
00:0000041C 4E7A0FE0        	   440: 	movec.l	coreno,d0					; get core number
00:00000420 0C000002        	   441: 	cmpi.b #2,d0
00:00000424 6600008C        	   442: 	bne	start_other
00:00000428 610013F6        	   443: 	bsr setup_framebuf
00:0000042C 42B9000408B8    	   444: 	clr.l sys_switches
00:00000432 4E7A0FE0        	   445: 	movec.l	coreno,d0					; get core number
00:00000436 13C000100000    	   446: 	move.b d0,IOFocus					; Set the IO focus in global memory
                            	   447: 	if HAS_MMU
                            	   448: 		bsr InitMMU							; Can't access anything till this is done'
                            	   449: 	endif
00:0000043C 61001A44        	   450: 	bsr	InitIOPBitmap					; not going to get far without this
00:00000440 61001B32        	   451: 	bsr	InitSemaphores
00:00000444 61001A88        	   452: 	bsr	InitRand
00:00000448 61001AC4        	   453: 	bsr RandGetNum
00:0000044C 0281FFFFFF00    	   454: 	andi.l #$FFFFFF00,d1
00:00000452 23C100040098    	   455: 	move.l d1,_canary
00:00000458 4E7B1020        	   456: 	movec d1,canary
00:0000045C 61001BD2        	   457: 	bsr	Delay3s						; give devices time to reset
00:00000460 7E02            	   458: 	moveq #2,d7					; device 2
00:00000462 7C0C            	   459: 	moveq #DEV_CLEAR,d6	; clear
00:00000464 4E40            	   460: 	trap #0
                            	   461: ;	bsr	textvid_clear
                            	   462: 
00:00000466 610001E0        	   463: 	bsr	_KeybdInit
                            	   464: ;	bsr	InitIRQ
00:0000046A 61001122        	   465: 	bsr	SerialInit
                            	   466: ;	bsr init_i2c
                            	   467: ;	bsr rtc_read
                            	   468: 
                            	   469: 	; Write startup message to screen
                            	   470: 
00:0000046E 43F9000090AE    	   471: 	lea	msg_start,a1
00:00000474 61006DB2        	   472: 	bsr	DisplayString
                            	   473: ;	bsr	FemtikiInit
00:00000478 4E7A0FE0        	   474: 	movec	coreno,d0
00:0000047C 4840            	   475: 	swap d0
00:0000047E 7201            	   476: 	moveq	#1,d1
00:00000480 61001B54        	   477: 	bsr	UnlockSemaphore	; allow another cpu access
00:00000484 7200            	   478: 	moveq	#0,d1
00:00000486 61001B4E        	   479: 	bsr	UnlockSemaphore	; allow other cpus to proceed
00:0000048A 33FCA4A4FD0FFF00	   480: 	move.w #$A4A4,leds			; diagnostics
00:00000492 6100728C        	   481: 	bsr	init_plic				; initialize platform level interrupt controller
00:00000496 60007376        	   482: 	bra	StartMon
00:0000049A 61001BD4        	   483: 	bsr	cpu_test
                            	   484: ;	lea	brdisp_trap,a0	; set brdisp trap vector
                            	   485: ;	move.l	a0,64*4
                            	   486: 
                            	   487: loop2:
00:0000049E 70FF            	   488: 	move.l	#-1,d0
                            	   489: loop1:
00:000004A0 2200            	   490: 	move.l	d0,d1
00:000004A2 E089            	   491: 	lsr.l		#8,d1
00:000004A4 E089            	   492: 	lsr.l		#8,d1
00:000004A6 13C1FD0FFF00    	   493: 	move.b	d1,leds
00:000004AC 51C8FFF2        	   494: 	dbra		d0,loop1
00:000004B0 60EC            	   495: 	bra			loop2
                            	   496: 
                            	   497: start_other:
00:000004B2 61001BA0        	   498: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:000004B6 61001B9C        	   499: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:000004BA 61001B98        	   500: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:000004BE 7E02            	   501: 	move.l #2,d7
00:000004C0 7C0C            	   502: 	move.l #DEV_CLEAR,d6
00:000004C2 4E40            	   503: 	trap #0
00:000004C4 4E7A1FE0        	   504: 	movec		coreno,d1
00:000004C8 4EB900008780    	   505: 	bsr			DisplayByte
00:000004CE 43F9000090D5    	   506: 	lea			msg_core_start,a1
00:000004D4 61006D52        	   507: 	bsr			DisplayString
                            	   508: ;	bsr			FemtikiInitIRQ
                            	   509: do_nothing:	
00:000004D8 60007334        	   510: 	bra			StartMon
00:000004DC 60FA            	   511: 	bra			do_nothing
                            	   512: 
                            	   513: ;------------------------------------------------------------------------------
                            	   514: ; Initialize the MMU to allow thread #0 access to IO
                            	   515: ;------------------------------------------------------------------------------
                            	   516: 	if HAS_MMU
                            	   517: 	align 2
                            	   518: mmu_adrtbl:	; virtual address[24:16], physical address[31:16] bytes reversed!
                            	   519: 	dc.l	$0010,$10000300	; global scratch pad
                            	   520: 	dc.l	$01E0,$00FD0300	
                            	   521: 	dc.l	$01E1,$01FD0300
                            	   522: 	dc.l	$01E2,$02FD0300
                            	   523: 	dc.l  $01E3,$03FD0300
                            	   524: 	dc.l	$01E5,$05FD0300
                            	   525: 	dc.l	$01E6,$06FD0300
                            	   526: 	dc.l	$01E9,$09FD0300
                            	   527: 	dc.l	$01EF,$0FFD0300
                            	   528: 	dc.l	$01F0,$10FD0300
                            	   529: 	dc.l  $01FF,$FFFF0300	; all ones output for IRQ ack needed
                            	   530: 
                            	   531: 	even
                            	   532: InitMMU:
                            	   533: 	lea MMU+8,a0				; first 128kB is local RAM
                            	   534: 	move.l #$32000,d2		; map all pages to DRAM
                            	   535: 	move.l #510,d0			; then override for IO later
                            	   536: .0002
                            	   537: 	move.l d2,d1
                            	   538: 	bsr rbo
                            	   539: 	move.l d1,(a0)+
                            	   540: 	addi.w #1,d2				; increment DRAM page number
                            	   541: 	dbra d0,.0002
                            	   542: 	lea MMU,a0					; now program IO access
                            	   543: 	lea mmu_adrtbl,a1
                            	   544: 	moveq #10,d0
                            	   545: .0001
                            	   546: 	move.l (a1)+,d2
                            	   547: 	lsl.l #2,d2
                            	   548: 	move.l (a1)+,(a0,d2.w)
                            	   549: 	dbra d0,.0001
                            	   550: 	rts	
                            	   551: 	endif
                            	   552: 
                            	   553: ;------------------------------------------------------------------------------
                            	   554: ; Device drivers
                            	   555: ;------------------------------------------------------------------------------
                            	   556: 
                            	   557: 	include "null.x68"

Source: "null.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Setup the NULL device
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 
                            	    43: setup_null:
                            	    44: null_init:
00:000004DE 7020            	    45: 	moveq #32,d0
00:000004E0 41F900040A00    	    46: 	lea.l null_dcb,a0
                            	    47: .0001:
00:000004E6 4298            	    48: 	clr.l (a0)+
00:000004E8 51C8FFFC        	    49: 	dbra d0,.0001
00:000004EC 23FC204243440004	    50: 	move.l #$20424344,null_dcb+DCB_MAGIC				; 'DCB'
00:000004F4 0A00
00:000004F6 23FC4C4C554E0004	    51: 	move.l #$4C4C554E,null_dcb+DCB_NAME					; 'NULL'
00:000004FE 0A04
00:00000500 23FC0000050C0004	    52: 	move.l #null_cmdproc,null_dcb+DCB_CMDPROC
00:00000508 0A18
                            	    53: null_ret:
00:0000050A 4E75            	    54: 	rts
                            	    55: 
                            	    56: null_cmdproc:
00:0000050C 7000            	    57: 	moveq #E_Ok,d0
00:0000050E 4E75            	    58: 	rts
                            	    59: 
                            	    60: 

Source: "boot.x68"
                            	   558: 	include "keybd.x68"

Source: "keybd.x68"
                            	     1: ;==============================================================================
                            	     2: ; Keyboard stuff
                            	     3: ;
                            	     4: ; KeyState2_
                            	     5: ; 876543210
                            	     6: ; ||||||||+ = shift
                            	     7: ; |||||||+- = alt
                            	     8: ; ||||||+-- = control
                            	     9: ; |||||+--- = numlock
                            	    10: ; ||||+---- = capslock
                            	    11: ; |||+----- = scrolllock
                            	    12: ; ||+------ =
                            	    13: ; |+------- = 
                            	    14: ; +-------- = extended
                            	    15: ;
                            	    16: ;==============================================================================
                            	    17: 
                            	    18: ;------------------------------------------------------------------------------
                            	    19: ; Setup the Keyboard device
                            	    20: ;------------------------------------------------------------------------------
                            	    21: setup_keybd:
                            	    22: keybd_init:
00:00000510 7020            	    23: 	moveq #32,d0
00:00000512 41F900040A84    	    24: 	lea.l keybd_dcb,a0
                            	    25: .0001:
00:00000518 4298            	    26: 	clr.l (a0)+
00:0000051A 51C8FFFC        	    27: 	dbra d0,.0001
00:0000051E 23FC204243440004	    28: 	move.l #$20424344,keybd_dcb+DCB_MAGIC				; 'DCB'
00:00000526 0A84
00:00000528 23FC2044424B0004	    29: 	move.l #$2044424B,keybd_dcb+DCB_NAME				; 'KBD'
00:00000530 0A88
00:00000532 23FC000005A00004	    30: 	move.l #keybd_cmdproc,textvid_dcb+DCB_CMDPROC
00:0000053A 0B20
00:0000053C 23FC001000200004	    31: 	move.l #_KeybdBuf,keybd_dcb+DCB_INBUFPTR
00:00000544 0ABC
00:00000546 23FC001000800004	    32: 	move.l #_KeybdOBuf,keybd_dcb+DCB_OUTBUFPTR
00:0000054E 0AC0
00:00000550 23FC000000200004	    33: 	move.l #32,keybd_dcb+DCB_INBUFSIZE
00:00000558 0AC4
00:0000055A 23FC000000200004	    34: 	move.l #32,keybd_dcb+DCB_OUTBUFSIZE
00:00000562 0AC8
00:00000564 423900040AD8    	    35: 	clr.b keybd_dcb+DCB_OUTDIMX	; set rows and columns
00:0000056A 423900040ADC    	    36: 	clr.b keybd_dcb+DCB_OUTDIMY
00:00000570 423900040ACC    	    37: 	clr.b keybd_dcb+DCB_INDIMX		; set rows and columns
00:00000576 423900040AD0    	    38: 	clr.b keybd_dcb+DCB_INDIMY
                            	    39: ;	bsr KeybdInit
00:0000057C 4E75            	    40: 	rts
                            	    41: 
                            	    42: 	align 2
                            	    43: KBD_CMDTBL:
00:00000580 00000510        	    44: 	dc.l keybd_init				; 0
00:00000584 000005C2        	    45: 	dc.l keybd_stat
00:00000588 000005CA        	    46: 	dc.l keybd_putchar
00:0000058C 000005DA        	    47: 	dc.l keybd_putbuf
00:00000590 000005D2        	    48: 	dc.l keybd_getchar
00:00000594 000005DA        	    49: 	dc.l keybd_getbuf
00:00000598 000005DA        	    50: 	dc.l keybd_set_inpos
00:0000059C 000005DA        	    51: 	dc.l keybd_set_outpos
                            	    52: 
                            	    53: keybd_cmdproc:
00:000005A0 0C060008        	    54: 	cmpi.b #8,d6
00:000005A4 6418            	    55: 	bhs.s .0001
00:000005A6 48E70280        	    56: 	movem.l d6/a0,-(a7)
00:000005AA E506            	    57: 	asl.b #2,d6
00:000005AC 4886            	    58: 	ext.w d6
00:000005AE 41FAFFD0        	    59: 	lea KBD_CMDTBL,a0
00:000005B2 20706000        	    60: 	move.l (a0,d6.w),a0
00:000005B6 4E90            	    61: 	jsr (a0)
00:000005B8 4CDF0140        	    62: 	movem.l (a7)+,d6/a0
00:000005BC 4E75            	    63: 	rts
                            	    64: .0001:
00:000005BE 7002            	    65: 	moveq #E_Func,d0
00:000005C0 4E75            	    66: 	rts
                            	    67: 
                            	    68: keybd_stat:
00:000005C2 61000196        	    69: 	bsr _KeybdGetStatus
00:000005C6 7000            	    70: 	moveq #E_Ok,d0
00:000005C8 4E75            	    71: 	rts
                            	    72: 
                            	    73: keybd_putchar:
00:000005CA 61000502        	    74: 	bsr KeybdSendByte
00:000005CE 7000            	    75: 	moveq #E_Ok,d0
00:000005D0 4E75            	    76: 	rts
                            	    77: 
                            	    78: keybd_getchar:
00:000005D2 61000234        	    79: 	bsr GetKey
00:000005D6 7000            	    80: 	moveq #E_Ok,d0
00:000005D8 4E75            	    81: 	rts
                            	    82: 
                            	    83: keybd_putbuf:
                            	    84: keybd_getbuf:
                            	    85: keybd_set_inpos:
                            	    86: keybd_set_outpos:
00:000005DA 700A            	    87: 	moveq #E_NotSupported,d0
00:000005DC 4E75            	    88: 	rts
                            	    89: 
                            	    90: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	    91: ; Get ID - get the keyboards identifier code.
                            	    92: ;
                            	    93: ; Parameters: none
                            	    94: ; Returns: d = $AB83, $00 on fail
                            	    95: ; Modifies: d, KeybdID updated
                            	    96: ; Stack Space: 2 words
                            	    97: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	    98: 
                            	    99: KeybdGetID:
00:000005DE 323C00F2        	   100: 	move.w	#$F2,d1
00:000005E2 610004EA        	   101: 	bsr			KeybdSendByte
00:000005E6 610001E6        	   102: 	bsr			KeybdWaitTx
00:000005EA 610001C0        	   103: 	bsr			KeybdRecvByte
00:000005EE 08010007        	   104: 	btst		#7,d1
00:000005F2 6624            	   105: 	bne			kgnotKbd
00:000005F4 0C0100AB        	   106: 	cmpi.b	#$AB,d1
00:000005F8 661E            	   107: 	bne			kgnotKbd
00:000005FA 610001B0        	   108: 	bsr			KeybdRecvByte
00:000005FE 08010007        	   109: 	btst		#7,d1
00:00000602 6614            	   110: 	bne			kgnotKbd
00:00000604 0C010083        	   111: 	cmpi.b	#$83,d1
00:00000608 660E            	   112: 	bne			kgnotKbd
00:0000060A 223C0000AB83    	   113: 	move.l	#$AB83,d1
                            	   114: kgid1:
00:00000610 33C100100018    	   115: 	move.w	d1,KeybdID
00:00000616 4E75            	   116: 	rts
                            	   117: kgnotKbd:
00:00000618 7200            	   118: 	moveq		#0,d1
00:0000061A 60F4            	   119: 	bra			kgid1
                            	   120: 
                            	   121: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   122: ; Set the LEDs on the keyboard.
                            	   123: ;
                            	   124: ; Parameters:
                            	   125: ;		d1.b = LED state
                            	   126: ;	Modifies:
                            	   127: ;		none
                            	   128: ; Returns:
                            	   129: ;		none
                            	   130: ; Stack Space:
                            	   131: ;		1 long word
                            	   132: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   133: 
                            	   134: KeybdSetLED:
00:0000061C 2F01            	   135: 	move.l	d1,-(a7)
00:0000061E 123C00ED        	   136: 	move.b	#$ED,d1
00:00000622 610004AA        	   137: 	bsr			KeybdSendByte
00:00000626 610001A6        	   138: 	bsr			KeybdWaitTx
00:0000062A 61000180        	   139: 	bsr			KeybdRecvByte
00:0000062E 4A01            	   140: 	tst.b		d1
00:00000630 6B12            	   141: 	bmi			.0001
00:00000632 0C0100FA        	   142: 	cmpi.b	#$FA,d1
00:00000636 2217            	   143: 	move.l	(a7),d1
00:00000638 61000494        	   144: 	bsr			KeybdSendByte
00:0000063C 61000190        	   145: 	bsr			KeybdWaitTx
00:00000640 6100016A        	   146: 	bsr			KeybdRecvByte
                            	   147: .0001:
00:00000644 221F            	   148: 	move.l	(a7)+,d1
00:00000646 4E75            	   149: 	rts
                            	   150: 
                            	   151: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   152: ; Initialize the keyboard.
                            	   153: ;
                            	   154: ; Parameters:
                            	   155: ;		none
                            	   156: ;	Modifies:
                            	   157: ;		none
                            	   158: ; Returns:
                            	   159: ;		none
                            	   160: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   161: 
                            	   162: _KeybdInit:
                            	   163: KeybdInit:
                            	   164: ;	movem.l	d0/d1/d3/a1,-(a7)
00:00000648 42390010000F    	   165: 	clr.b	_KeyState1		; records key up/down state
00:0000064E 423900100010    	   166: 	clr.b	_KeyState2		; records shift,ctrl,alt state
00:00000654 4E75            	   167: 	rts
                            	   168: 
00:00000656 6100049A        	   169: 	bsr			Wait300ms
00:0000065A 610000FE        	   170: 	bsr			_KeybdGetStatus	; wait for response from keyboard
00:0000065E 4A01            	   171: 	tst.b		d1
00:00000660 6A10            	   172: 	bpl			.0001					; is input buffer full ? no, branch
00:00000662 61000114        	   173: 	bsr	_KeybdGetScancode
00:00000666 6100012E        	   174: 	bsr _KeybdClearIRQ
00:0000066A 0C0100AA        	   175: 	cmpi.b	#$AA,d1				; keyboard Okay
00:0000066E 67000098        	   176: 	beq			kbdi0005
                            	   177: .0001:
00:00000672 760A            	   178: 	moveq		#10,d3
                            	   179: kbdi0002:
00:00000674 61000460        	   180: 	bsr			Wait10ms
00:00000678 4239FD0FFE01    	   181: 	clr.b		KEYBD+1				; clear receive register (write $00 to status reg)
00:0000067E 610017FE        	   182: 	bsr net_delay
00:00000682 72FF            	   183: 	moveq		#-1,d1				; send reset code to keyboard
00:00000684 13C1FD0FFE01    	   184: 	move.b	d1,KEYBD+1		; write $FF to status reg to clear TX state
00:0000068A 610017F2        	   185: 	bsr net_delay
00:0000068E 6100043E        	   186: 	bsr			KeybdSendByte	; now write ($FF) to transmit register for reset
00:00000692 6100013A        	   187: 	bsr			KeybdWaitTx		; wait until no longer busy
00:00000696 4A81            	   188: 	tst.l		d1
00:00000698 6B000088        	   189: 	bmi			kbdiXmitBusy
00:0000069C 6100010E        	   190: 	bsr			KeybdRecvByte	; look for an ACK ($FA)
00:000006A0 0C0100FA        	   191: 	cmpi.b	#$FA,d1
00:000006A4 6604            	   192: 	bne			.0001
00:000006A6 61000104        	   193: 	bsr			KeybdRecvByte	; look for BAT completion code ($AA)
                            	   194: .0001:
00:000006AA 0C0100FC        	   195: 	cmpi.b	#$FC,d1				; reset error ?
00:000006AE 672E            	   196: 	beq			kbdiTryAgain
00:000006B0 0C0100AA        	   197: 	cmpi.b	#$AA,d1				; reset complete okay ?
00:000006B4 6628            	   198: 	bne			kbdiTryAgain
                            	   199: 
                            	   200: 	; After a reset, scan code set #2 should be active
                            	   201: .config:
00:000006B6 323C00F0        	   202: 	move.w	#$F0,d1			; send scan code select
00:000006BA 13C1FD0FFF00    	   203: 	move.b	d1,leds
00:000006C0 610017BC        	   204: 	bsr net_delay
00:000006C4 61000408        	   205: 	bsr			KeybdSendByte
00:000006C8 61000104        	   206: 	bsr			KeybdWaitTx
00:000006CC 4A81            	   207: 	tst.l		d1
00:000006CE 6B52            	   208: 	bmi			kbdiXmitBusy
00:000006D0 610000DA        	   209: 	bsr			KeybdRecvByte	; wait for response from keyboard
00:000006D4 4A41            	   210: 	tst.w		d1
00:000006D6 6B06            	   211: 	bmi			kbdiTryAgain
00:000006D8 0C0100FA        	   212: 	cmpi.b	#$FA,d1				; ACK
00:000006DC 670E            	   213: 	beq			kbdi0004
                            	   214: kbdiTryAgain:
00:000006DE 51CBFF94        	   215: 	dbra		d3,kbdi0002
                            	   216: .keybdErr:
00:000006E2 43FA004C        	   217: 	lea			msgBadKeybd,a1
00:000006E6 61006B56        	   218: 	bsr			DisplayStringCRLF
00:000006EA 6020            	   219: 	bra			ledxit
                            	   220: kbdi0004:
00:000006EC 7202            	   221: 	moveq		#2,d1			; select scan code set #2
00:000006EE 610003DE        	   222: 	bsr			KeybdSendByte
00:000006F2 610000DA        	   223: 	bsr			KeybdWaitTx
00:000006F6 4A81            	   224: 	tst.l		d1
00:000006F8 6B28            	   225: 	bmi			kbdiXmitBusy
00:000006FA 610000B0        	   226: 	bsr			KeybdRecvByte	; wait for response from keyboard
00:000006FE 4A41            	   227: 	tst.w		d1
00:00000700 6BDC            	   228: 	bmi			kbdiTryAgain
00:00000702 0C0100FA        	   229: 	cmpi.b	#$FA,d1
00:00000706 66D6            	   230: 	bne			kbdiTryAgain
                            	   231: kbdi0005:
00:00000708 6100FED4        	   232: 	bsr			KeybdGetID
                            	   233: ledxit:
00:0000070C 7207            	   234: 	moveq		#$07,d1
00:0000070E 6100FF0C        	   235: 	bsr			KeybdSetLED
00:00000712 610003DE        	   236: 	bsr			Wait300ms
00:00000716 7200            	   237: 	moveq		#$00,d1
00:00000718 6100FF02        	   238: 	bsr			KeybdSetLED
00:0000071C 4CDF020B        	   239: 	movem.l	(a7)+,d0/d1/d3/a1
00:00000720 4E75            	   240: 	rts
                            	   241: kbdiXmitBusy:
00:00000722 43FA001B        	   242: 	lea			msgXmitBusy,a1
00:00000726 61006B16        	   243: 	bsr			DisplayStringCRLF
00:0000072A 4CDF020B        	   244: 	movem.l	(a7)+,d0/d1/d3/a1
00:0000072E 4E75            	   245: 	rts
                            	   246: 	
                            	   247: msgBadKeybd:
00:00000730 4B6579626F617264	   248: 	dc.b		"Keyboard error",0
00:00000738 206572726F72
00:0000073E 00
                            	   249: msgXmitBusy:
00:0000073F 4B6579626F617264	   250: 	dc.b		"Keyboard transmitter stuck",0
00:00000747 207472616E736D69
00:0000074F 7474657220737475
00:00000757 636B
00:00000759 00
                            	   251: 
                            	   252: 	even
                            	   253: _KeybdGetStatus:
00:0000075A 4E7A1FE0        	   254: 	movec coreno,d1
00:0000075E 0C010002        	   255: 	cmpi.b #2,d1
00:00000762 660A            	   256: 	bne .0001
00:00000764 7200            	   257: 	moveq	#0,d1
00:00000766 1239FD0FFE01    	   258: 	move.b KEYBD+1,d1
00:0000076C 4E75            	   259: 	rts
                            	   260: .0001:
00:0000076E 7200            	   261: 	moveq #0,d1
00:00000770 1239FD0FFE03    	   262: 	move.b KEYBD+3,d1
00:00000776 4E75            	   263: 	rts
                            	   264: 
                            	   265: ; Get the scancode from the keyboard port
                            	   266: 
                            	   267: _KeybdGetScancode:
00:00000778 4E7A1FE0        	   268: 	movec coreno,d1
00:0000077C 0C010002        	   269: 	cmpi.b #2,d1
00:00000780 660A            	   270: 	bne .0001
00:00000782 7200            	   271: 	moveq		#0,d1
00:00000784 1239FD0FFE00    	   272: 	move.b	KEYBD,d1				; get the scan code
00:0000078A 4E75            	   273: 	rts
                            	   274: .0001:
00:0000078C 7200            	   275: 	moveq #0,d1
00:0000078E 1239FD0FFE02    	   276: 	move.b KEYBD+2,d1
00:00000794 4E75            	   277: 	rts
                            	   278: 
                            	   279: _KeybdClearIRQ:
00:00000796 2F01            	   280: 	move.l d1,-(a7)
00:00000798 4E7A1FE0        	   281: 	movec coreno,d1
00:0000079C 0C010002        	   282: 	cmpi.b #2,d1
00:000007A0 6606            	   283: 	bne .0001
00:000007A2 4239FD0FFE01    	   284: 	move.b	#0,KEYBD+1			; clear receive register
                            	   285: .0001:
00:000007A8 221F            	   286: 	move.l (a7)+,d1
00:000007AA 4E75            	   287: 	rts
                            	   288: 
                            	   289: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   290: ; keyboard in order to wait for a response.
                            	   291: ;
                            	   292: KeybdRecvByte:
00:000007AC 2F03            	   293: 	move.l	d3,-(a7)
00:000007AE 363C0064        	   294: 	move.w	#100,d3		; wait up to 1s
                            	   295: .0003:
00:000007B2 61A6            	   296: 	bsr			_KeybdGetStatus	; wait for response from keyboard
00:000007B4 4A01            	   297: 	tst.b		d1
00:000007B6 6B0E            	   298: 	bmi			.0004			; is input buffer full ? yes, branch
00:000007B8 6100031C        	   299: 	bsr			Wait10ms	; wait a bit
00:000007BC 51CBFFF4        	   300: 	dbra		d3,.0003	; go back and try again
00:000007C0 261F            	   301: 	move.l	(a7)+,d3
00:000007C2 72FF            	   302: 	moveq		#-1,d1		; return -1
00:000007C4 4E75            	   303: 	rts
                            	   304: .0004:
00:000007C6 61B0            	   305: 	bsr	_KeybdGetScancode
00:000007C8 61CC            	   306: 	bsr _KeybdClearIRQ
00:000007CA 261F            	   307: 	move.l	(a7)+,d3
00:000007CC 4E75            	   308: 	rts
                            	   309: 
                            	   310: 
                            	   311: ; Wait until the keyboard transmit is complete
                            	   312: ; Returns -1 if timedout, 0 if transmit completed
                            	   313: ;
                            	   314: KeybdWaitTx:
00:000007CE 48E73000        	   315: 	movem.l	d2/d3,-(a7)
00:000007D2 7664            	   316: 	moveq		#100,d3		; wait a max of 1s
                            	   317: .0001:
00:000007D4 6184            	   318: 	bsr	_KeybdGetStatus
00:000007D6 08010006        	   319: 	btst #6,d1				; check for transmit complete bit
00:000007DA 6610            	   320: 	bne	.0002					; branch if bit set
00:000007DC 610002F8        	   321: 	bsr	Wait10ms			; delay a little bit
00:000007E0 51CBFFF2        	   322: 	dbra d3,.0001			; go back and try again
00:000007E4 4CDF000C        	   323: 	movem.l	(a7)+,d2/d3
00:000007E8 72FF            	   324: 	moveq	#-1,d1			; return -1
00:000007EA 4E75            	   325: 	rts
                            	   326: .0002:
00:000007EC 4CDF000C        	   327: 	movem.l	(a7)+,d2/d3
00:000007F0 7200            	   328: 	moveq	#0,d1		; return 0
00:000007F2 4E75            	   329: 	rts
                            	   330: 
                            	   331: ;------------------------------------------------------------------------------
                            	   332: ; d1.b 0=echo off, non-zero = echo on
                            	   333: ;------------------------------------------------------------------------------
                            	   334: 
                            	   335: SetKeyboardEcho:
00:000007F4 13C10004000C    	   336: 	move.b	d1,KeybdEcho
00:000007FA 4E75            	   337: 	rts
                            	   338: 
                            	   339: ;------------------------------------------------------------------------------
                            	   340: ; Get key pending status into d1.b
                            	   341: ;
                            	   342: ; Returns:
                            	   343: ;		d1.b = 1 if a key is available, otherwise zero.
                            	   344: ;------------------------------------------------------------------------------
                            	   345: 
                            	   346: CheckForKey:
00:000007FC 7200            	   347: 	moveq.l	#0,d1					; clear high order bits
                            	   348: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	   349: ;	smi.b		d1						; set true/false
                            	   350: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
00:000007FE 4A3900100013    	   351: 	tst.b	_KeybdCnt
00:00000804 56C1            	   352: 	sne.b	d1
00:00000806 4E75            	   353: 	rts
                            	   354: 
                            	   355: ;------------------------------------------------------------------------------
                            	   356: ; GetKey
                            	   357: ; 	Get a character from the keyboard. 
                            	   358: ;
                            	   359: ; Modifies:
                            	   360: ;		d1
                            	   361: ; Returns:
                            	   362: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	   363: ;------------------------------------------------------------------------------
                            	   364: 
                            	   365: GetKey:
00:00000808 2F00            	   366: 	move.l	d0,-(a7)					; push d0
00:0000080A 123900100000    	   367: 	move.b	IOFocus,d1				; Check if the core has the IO focus
00:00000810 4E7A0FE0        	   368: 	movec.l	coreno,d0
00:00000814 B200            	   369: 	cmp.b	d0,d1
00:00000816 6624            	   370: 	bne.s	.0004								; go return no key available, if not in focus
00:00000818 6138            	   371: 	bsr	KeybdGetCharNoWait		; get a character
00:0000081A 4A81            	   372: 	tst.l	d1									; was a key available?
00:0000081C 6B1E            	   373: 	bmi.s	.0004
00:0000081E 4A390004000C    	   374: 	tst.b	KeybdEcho						; is keyboard echo on ?
00:00000824 6712            	   375: 	beq.s	.0003								; no echo, just return the key
00:00000826 0C01000D        	   376: 	cmpi.b #CR,d1							; convert CR keystroke into CRLF
00:0000082A 6606            	   377: 	bne.s	.0005
00:0000082C 610069E0        	   378: 	bsr	CRLF
00:00000830 6006            	   379: 	bra.s	.0003
                            	   380: .0005:
00:00000832 4EB900008F3A    	   381: 	bsr	OutputChar
                            	   382: .0003:
00:00000838 201F            	   383: 	move.l (a7)+,d0						; pop d0
00:0000083A 4E75            	   384: 	rts												; return key
                            	   385: ; Return -1 indicating no char was available
                            	   386: .0004:
00:0000083C 201F            	   387: 	move.l (a7)+,d0						; pop d0
00:0000083E 72FF            	   388: 	moveq	#-1,d1							; return no key available
00:00000840 4E75            	   389: 	rts
                            	   390: 
                            	   391: ;------------------------------------------------------------------------------
                            	   392: ; Check for the cntrl-C keyboard sequence. Abort running routine and drop
                            	   393: ; back into the monitor.
                            	   394: ;------------------------------------------------------------------------------
                            	   395: 
                            	   396: CheckForCtrlC:
00:00000842 2F01            	   397: 	move.l d1,-(a7)
00:00000844 610C            	   398: 	bsr	KeybdGetCharNoWait
00:00000846 0C010003        	   399: 	cmpi.b #CTRLC,d1
00:0000084A 67006FCC        	   400: 	beq	Monitor
00:0000084E 221F            	   401: 	move.l (a7)+,d1
00:00000850 4E75            	   402: 	rts
                            	   403: 
                            	   404: ;------------------------------------------------------------------------------
                            	   405: ;------------------------------------------------------------------------------
                            	   406: 
                            	   407: KeybdGetCharNoWait:
00:00000852 42390004000D    	   408: 	clr.b	KeybdWaitFlag
00:00000858 6008            	   409: 	bra	KeybdGetChar
                            	   410: 
                            	   411: KeybdGetCharWait:
00:0000085A 13FC00FF0004000D	   412: 	move.b #-1,KeybdWaitFlag
                            	   413: 
                            	   414: KeybdGetChar:
00:00000862 48E7B080        	   415: 	movem.l	d0/d2/d3/a0,-(a7)
                            	   416: .0003:
00:00000866 4E7A0FE0        	   417: 	movec	coreno,d0
00:0000086A 4840            	   418: 	swap d0
00:0000086C 7203            	   419: 	moveq	#KEYBD_SEMA,d1
00:0000086E 6100172A        	   420: 	bsr	LockSemaphore
00:00000872 143900100013    	   421: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
00:00000878 673E            	   422: 	beq.s		.0015						;
00:0000087A 143900100011    	   423: 	move.b	_KeybdHead,d2		; d2 = buffer head
00:00000880 4882            	   424: 	ext.w		d2
00:00000882 41F900100020    	   425: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
00:00000888 7200            	   426: 	clr.l		d1
00:0000088A 12302000        	   427: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
00:0000088E 5202            	   428: 	addi.b	#1,d2						; increment keyboard head index
00:00000890 0202001F        	   429: 	andi.b	#31,d2					; and wrap around at buffer size
00:00000894 13C200100011    	   430: 	move.b	d2,_KeybdHead
00:0000089A 533900100013    	   431: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
00:000008A0 C342            	   432: 	exg			d1,d2						; save scancode value in d2
00:000008A2 4E7A0FE0        	   433: 	movec		coreno,d0
00:000008A6 4840            	   434: 	swap		d0
00:000008A8 7203            	   435: 	moveq		#KEYBD_SEMA,d1
00:000008AA 6100172A        	   436: 	bsr			UnlockSemaphore
00:000008AE C541            	   437: 	exg			d2,d1						; restore scancode value
00:000008B0 602A            	   438: 	bra			.0001						; go process scan code
                            	   439: .0014:
00:000008B2 6100FEA6        	   440: 	bsr		_KeybdGetStatus		; check keyboard status for key available
00:000008B6 6B1C            	   441: 	bmi		.0006							; yes, go process
                            	   442: .0015:
00:000008B8 4E7A0FE0        	   443: 	movec		coreno,d0
00:000008BC 4840            	   444: 	swap		d0
00:000008BE 7203            	   445: 	moveq		#KEYBD_SEMA,d1
00:000008C0 61001714        	   446: 	bsr			UnlockSemaphore
00:000008C4 4A390004000D    	   447: 	tst.b		KeybdWaitFlag			; are we willing to wait for a key ?
00:000008CA 6B9A            	   448: 	bmi			.0003							; yes, branch back
00:000008CC 4CDF010D        	   449: 	movem.l	(a7)+,d0/d2/d3/a0
00:000008D0 72FF            	   450: 	moveq		#-1,d1						; flag no char available
00:000008D2 4E75            	   451: 	rts
                            	   452: .0006:
00:000008D4 6100FEA2        	   453: 	bsr	_KeybdGetScancode
00:000008D8 6100FEBC        	   454: 	bsr _KeybdClearIRQ
                            	   455: .0001:
00:000008DC 33FC0001FD0FFF00	   456: 	move.w	#1,leds
00:000008E4 B23C00F0        	   457: 	cmp.b	#SC_KEYUP,d1
00:000008E8 670000C0        	   458: 	beq		.doKeyup
00:000008EC B23C00E0        	   459: 	cmp.b	#SC_EXTEND,d1
00:000008F0 670000C4        	   460: 	beq		.doExtend
00:000008F4 B23C0014        	   461: 	cmp.b	#SC_CTRL,d1
00:000008F8 670000C8        	   462: 	beq		.doCtrl
00:000008FC B23C0012        	   463: 	cmp.b	#SC_LSHIFT,d1
00:00000900 6700012A        	   464: 	beq		.doShift
00:00000904 B23C0059        	   465: 	cmp.b	#SC_RSHIFT,d1
00:00000908 67000122        	   466: 	beq		.doShift
00:0000090C B23C0077        	   467: 	cmp.b	#SC_NUMLOCK,d1
00:00000910 67000142        	   468: 	beq		.doNumLock
00:00000914 B23C0058        	   469: 	cmp.b	#SC_CAPSLOCK,d1
00:00000918 67000148        	   470: 	beq		.doCapsLock
00:0000091C B23C007E        	   471: 	cmp.b	#SC_SCROLLLOCK,d1
00:00000920 6700014E        	   472: 	beq		.doScrollLock
00:00000924 B23C0011        	   473: 	cmp.b   #SC_ALT,d1
00:00000928 670000C0        	   474: 	beq     .doAlt
00:0000092C 14390010000F    	   475: 	move.b	_KeyState1,d2			; check key up/down
00:00000932 42390010000F    	   476: 	move.b	#0,_KeyState1			; clear keyup status
00:00000938 4A02            	   477: 	tst.b	d2
00:0000093A 6600FF2A        	   478: 	bne	    .0003					; ignore key up
00:0000093E B23C000D        	   479: 	cmp.b   #SC_TAB,d1
00:00000942 670000CE        	   480: 	beq     .doTab
                            	   481: .0013:
00:00000946 143900100010    	   482: 	move.b	_KeyState2,d2
00:0000094C 6A1A            	   483: 	bpl		.0010					; is it extended code ?
00:0000094E C43C007F        	   484: 	and.b	#$7F,d2					; clear extended bit
00:00000952 13C200100010    	   485: 	move.b	d2,_KeyState2
00:00000958 42390010000F    	   486: 	move.b	#0,_KeyState1			; clear keyup
00:0000095E 41FA04E4        	   487: 	lea		_keybdExtendedCodes,a0
00:00000962 12301000        	   488: 	move.b	(a0,d1.w),d1
00:00000966 6034            	   489: 	bra		.0008
                            	   490: .0010:
00:00000968 08020002        	   491: 	btst	#2,d2					; is it CTRL code ?
00:0000096C 670E            	   492: 	beq		.0009
00:0000096E C27C007F        	   493: 	and.w	#$7F,d1
00:00000972 41FA0450        	   494: 	lea		_keybdControlCodes,a0
00:00000976 12301000        	   495: 	move.b	(a0,d1.w),d1
00:0000097A 6020            	   496: 	bra		.0008
                            	   497: .0009:
00:0000097C 08020000        	   498: 	btst	#0,d2					; is it shift down ?
00:00000980 670A            	   499: 	beq  	.0007
00:00000982 41FA0340        	   500: 	lea		_shiftedScanCodes,a0
00:00000986 12301000        	   501: 	move.b	(a0,d1.w),d1
00:0000098A 6010            	   502: 	bra		.0008
                            	   503: .0007:
00:0000098C 41FA0236        	   504: 	lea		_unshiftedScanCodes,a0
00:00000990 12301000        	   505: 	move.b	(a0,d1.w),d1
00:00000994 33FC0202FD0FFF00	   506: 	move.w	#$0202,leds
                            	   507: .0008:
00:0000099C 33FC0303FD0FFF00	   508: 	move.w	#$0303,leds
00:000009A4 4CDF010D        	   509: 	movem.l	(a7)+,d0/d2/d3/a0
00:000009A8 4E75            	   510: 	rts
                            	   511: .doKeyup:
00:000009AA 13FC00FF0010000F	   512: 	move.b	#-1,_KeyState1
00:000009B2 6000FEB2        	   513: 	bra		.0003
                            	   514: .doExtend:
00:000009B6 0039008000100010	   515: 	or.b	#$80,_KeyState2
00:000009BE 6000FEA6        	   516: 	bra		.0003
                            	   517: .doCtrl:
00:000009C2 12390010000F    	   518: 	move.b	_KeyState1,d1
00:000009C8 42390010000F    	   519: 	clr.b	_KeyState1
00:000009CE 4A01            	   520: 	tst.b	d1
00:000009D0 6A0C            	   521: 	bpl.s	.0004
00:000009D2 08B9000200100010	   522: 	bclr	#2,_KeyState2
00:000009DA 6000FE8A        	   523: 	bra		.0003
                            	   524: .0004:
00:000009DE 08F9000200100010	   525: 	bset	#2,_KeyState2
00:000009E6 6000FE7E        	   526: 	bra		.0003
                            	   527: .doAlt:
00:000009EA 12390010000F    	   528: 	move.b	_KeyState1,d1
00:000009F0 42390010000F    	   529: 	clr.b	_KeyState1
00:000009F6 4A01            	   530: 	tst.b	d1
00:000009F8 6A0C            	   531: 	bpl		.0011
00:000009FA 08B9000100100010	   532: 	bclr	#1,_KeyState2
00:00000A02 6000FE62        	   533: 	bra		.0003
                            	   534: .0011:
00:00000A06 08F9000100100010	   535: 	bset	#1,_KeyState2
00:00000A0E 6000FE56        	   536: 	bra		.0003
                            	   537: .doTab:
00:00000A12 2F01            	   538: 	move.l	d1,-(a7)
00:00000A14 123900100010    	   539:   move.b  _KeyState2,d1
00:00000A1A 08010001        	   540:   btst	#1,d1                 ; is ALT down ?
00:00000A1E 6706            	   541:   beq     .0012
                            	   542: ;    	inc     _iof_switch
00:00000A20 221F            	   543:   move.l	(a7)+,d1
00:00000A22 6000FE42        	   544:   bra     .0003
                            	   545: .0012:
00:00000A26 221F            	   546:   move.l	(a7)+,d1
00:00000A28 6000FF1C        	   547:   bra     .0013
                            	   548: .doShift:
00:00000A2C 12390010000F    	   549: 	move.b	_KeyState1,d1
00:00000A32 42390010000F    	   550: 	clr.b	_KeyState1
00:00000A38 4A01            	   551: 	tst.b	d1
00:00000A3A 6A0C            	   552: 	bpl.s	.0005
00:00000A3C 08B9000000100010	   553: 	bclr	#0,_KeyState2
00:00000A44 6000FE20        	   554: 	bra		.0003
                            	   555: .0005:
00:00000A48 08F9000000100010	   556: 	bset	#0,_KeyState2
00:00000A50 6000FE14        	   557: 	bra		.0003
                            	   558: .doNumLock:
00:00000A54 0879000400100010	   559: 	bchg	#4,_KeyState2
00:00000A5C 6120            	   560: 	bsr		KeybdSetLEDStatus
00:00000A5E 6000FE06        	   561: 	bra		.0003
                            	   562: .doCapsLock:
00:00000A62 0879000500100010	   563: 	bchg	#5,_KeyState2
00:00000A6A 6112            	   564: 	bsr		KeybdSetLEDStatus
00:00000A6C 6000FDF8        	   565: 	bra		.0003
                            	   566: .doScrollLock:
00:00000A70 0879000600100010	   567: 	bchg	#6,_KeyState2
00:00000A78 6104            	   568: 	bsr		KeybdSetLEDStatus
00:00000A7A 6000FDEA        	   569: 	bra		.0003
                            	   570: 
                            	   571: KeybdSetLEDStatus:
00:00000A7E 48E73000        	   572: 	movem.l	d2/d3,-(a7)
00:00000A82 42390010000E    	   573: 	clr.b		KeybdLEDs
00:00000A88 0839000400100010	   574: 	btst		#4,_KeyState2
00:00000A90 6708            	   575: 	beq.s		.0002
00:00000A92 13FC00020010000E	   576: 	move.b	#2,KeybdLEDs
                            	   577: .0002:
00:00000A9A 0839000500100010	   578: 	btst		#5,_KeyState2
00:00000AA2 6708            	   579: 	beq.s		.0003
00:00000AA4 08F900020010000E	   580: 	bset		#2,KeybdLEDs
                            	   581: .0003:
00:00000AAC 0839000600100010	   582: 	btst		#6,_KeyState2
00:00000AB4 6708            	   583: 	beq.s		.0004
00:00000AB6 08F900000010000E	   584: 	bset		#0,KeybdLEDs
                            	   585: .0004:
00:00000ABE 12390010000E    	   586: 	move.b	KeybdLEDs,d1
00:00000AC4 6100FB56        	   587: 	bsr			KeybdSetLED
00:00000AC8 4CDF000C        	   588: 	movem.l	(a7)+,d2/d3
00:00000ACC 4E75            	   589: 	rts
                            	   590: 
                            	   591: KeybdSendByte:
00:00000ACE 13C1FD0FFE00    	   592: 	move.b d1,KEYBD
00:00000AD4 4E75            	   593: 	rts
                            	   594: 	
                            	   595: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   596: ; Wait for 10 ms
                            	   597: ;
                            	   598: ; Parameters: none
                            	   599: ; Returns: none
                            	   600: ; Modifies: none
                            	   601: ; Stack Space: 2 long words
                            	   602: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   603: 
                            	   604: Wait10ms:
00:00000AD6 48E7C000        	   605: 	movem.l	d0/d1,-(a7)
00:00000ADA 4E7A0FF0        	   606: 	movec	tick,d0
00:00000ADE 068000061A80    	   607: 	addi.l #400000,d0			; 400,000 cycles at 40MHz
                            	   608: .0001:
00:00000AE4 4E7A1FF0        	   609: 	movec	tick,d1
00:00000AE8 B081            	   610: 	cmp.l	d1,d0
00:00000AEA 62F8            	   611: 	bhi	.0001
00:00000AEC 4CDF0003        	   612: 	movem.l	(a7)+,d0/d1
00:00000AF0 4E75            	   613: 	rts
                            	   614: 
                            	   615: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   616: ; Wait for 300 ms
                            	   617: ;
                            	   618: ; Parameters: none
                            	   619: ; Returns: none
                            	   620: ; Modifies: none
                            	   621: ; Stack Space: 2 long words
                            	   622: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   623: 
                            	   624: Wait300ms:
00:00000AF2 48E7C000        	   625: 	movem.l	d0/d1,-(a7)
00:00000AF6 4E7A0FF0        	   626: 	movec		tick,d0
00:00000AFA 068000B71B00    	   627: 	addi.l	#12000000,d0			; 12,000,000 cycles at 40MHz
                            	   628: .0001:
00:00000B00 4E7A1FF0        	   629: 	movec		tick,d1
00:00000B04 B081            	   630: 	cmp.l		d1,d0
00:00000B06 62F8            	   631: 	bhi			.0001
00:00000B08 4CDF0003        	   632: 	movem.l	(a7)+,d0/d1
00:00000B0C 4E75            	   633: 	rts
                            	   634: 
                            	   635: ;--------------------------------------------------------------------------
                            	   636: ; Keyboard IRQ routine.
                            	   637: ; - only core 2 processes keyboard interrupts.
                            	   638: ; - the keyboard buffer is in shared global scratchpad space.
                            	   639: ;
                            	   640: ; Returns:
                            	   641: ; 	d1 = -1 if keyboard routine handled interrupt, otherwise positive.
                            	   642: ;--------------------------------------------------------------------------
                            	   643: 
                            	   644: KeybdIRQ:
00:00000B0E 46FC2600        	   645: 	move.w #$2600,sr					; disable lower interrupts
00:00000B12 48E7C080        	   646: 	movem.l	d0/d1/a0,-(a7)
00:00000B16 46B9FD000000    	   647: 	eori.l #-1,$FD000000
00:00000B1C 7200            	   648: 	moveq	#0,d1								; check if keyboard IRQ
00:00000B1E 1239FD0FFE01    	   649: 	move.b KEYBD+1,d1					; get status reg
00:00000B24 4A01            	   650: 	tst.b	d1
00:00000B26 6A000096        	   651: 	bpl	.0001									; branch if not keyboard
00:00000B2A 4E7A0FE0        	   652: 	movec	coreno,d0
00:00000B2E 4840            	   653: 	swap d0
00:00000B30 7203            	   654: 	moveq	#KEYBD_SEMA,d1
00:00000B32 61001466        	   655: 	bsr LockSemaphore
00:00000B36 1239FD0FFE00    	   656: 	move.b KEYBD,d1						; get scan code
00:00000B3C 4239FD0FFE01    	   657: 	clr.b KEYBD+1							; clear status register (clears IRQ AND scancode)
00:00000B42 0839000100100010	   658: 	btst #1,_KeyState2				; Is Alt down?
00:00000B4A 6738            	   659: 	beq.s	.0003
00:00000B4C 0C01000D        	   660: 	cmpi.b #SC_TAB,d1					; is Alt-Tab?
00:00000B50 6632            	   661: 	bne.s	.0003
00:00000B52 4E7A0FF0        	   662: 	movec tick,d0
00:00000B56 90B90001001C    	   663: 	sub.l _Keybd_tick,d0
00:00000B5C B0BC0000000A    	   664: 	cmp.l #10,d0							; has it been 10 or more ticks?
                            	   665: ;	blo.s .0002
00:00000B62 4E7A0FF0        	   666: 	movec tick,d0							; update tick of last ALT-Tab
00:00000B66 23C00001001C    	   667: 	move.l d0,_Keybd_tick
00:00000B6C 61006B82        	   668: 	bsr	rotate_iofocus
00:00000B70 423900100011    	   669: 	clr.b	_KeybdHead					; clear keyboard buffer
00:00000B76 423900100012    	   670: 	clr.b	_KeybdTail
00:00000B7C 423900100013    	   671: 	clr.b	_KeybdCnt
00:00000B82 602E            	   672: 	bra	.0002									; do not store Alt-Tab
                            	   673: .0003:
                            	   674: 	; Insert keyboard scan code into raw keyboard buffer
00:00000B84 0C39002000100013	   675: 	cmpi.b #32,_KeybdCnt			; see if keyboard buffer full
00:00000B8C 6424            	   676: 	bhs.s	.0002
00:00000B8E 103900100012    	   677: 	move.b _KeybdTail,d0			; keyboard buffer not full, add to tail
00:00000B94 4880            	   678: 	ext.w	d0
00:00000B96 41F900100020    	   679: 	lea	_KeybdBuf,a0					; a0 = pointer to buffer
00:00000B9C 11810000        	   680: 	move.b d1,(a0,d0.w)				; put scancode in buffer
00:00000BA0 5200            	   681: 	addi.b #1,d0							; increment tail index
00:00000BA2 0200001F        	   682: 	andi.b #31,d0							; wrap at buffer limit
00:00000BA6 13C000100012    	   683: 	move.b d0,_KeybdTail			; update tail index
00:00000BAC 523900100013    	   684: 	addi.b #1,_KeybdCnt				; increment buffer count
                            	   685: .0002:
00:00000BB2 4E7A0FE0        	   686: 	movec	coreno,d0
00:00000BB6 4840            	   687: 	swap d0
00:00000BB8 7203            	   688: 	moveq	#KEYBD_SEMA,d1
00:00000BBA 6100141A        	   689: 	bsr	UnlockSemaphore
                            	   690: .0001:
00:00000BBE 4CDF0103        	   691: 	movem.l	(a7)+,d0/d1/a0		; return
00:00000BC2 4E73            	   692: 	rte
                            	   693: 
                            	   694: ;--------------------------------------------------------------------------
                            	   695: ; PS2 scan codes to ascii conversion tables.
                            	   696: ;--------------------------------------------------------------------------
                            	   697: ;
                            	   698: _unshiftedScanCodes:
00:00000BC4 2E              	   699: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
00:00000BC5 A9
00:00000BC6 2E
00:00000BC7 A5
00:00000BC8 A3
00:00000BC9 A1
00:00000BCA A2
00:00000BCB AC
00:00000BCC 2E              	   700: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
00:00000BCD AA
00:00000BCE A8
00:00000BCF A6
00:00000BD0 A4
00:00000BD1 09
00:00000BD2 60
00:00000BD3 2E
00:00000BD4 2E              	   701: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
00:00000BD5 2E
00:00000BD6 2E
00:00000BD7 2E
00:00000BD8 2E
00:00000BD9 71
00:00000BDA 31
00:00000BDB 2E
00:00000BDC 2E              	   702: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
00:00000BDD 2E
00:00000BDE 7A
00:00000BDF 73
00:00000BE0 61
00:00000BE1 77
00:00000BE2 32
00:00000BE3 2E
00:00000BE4 2E              	   703: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
00:00000BE5 63
00:00000BE6 78
00:00000BE7 64
00:00000BE8 65
00:00000BE9 34
00:00000BEA 33
00:00000BEB 2E
00:00000BEC 2E              	   704: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
00:00000BED 20
00:00000BEE 76
00:00000BEF 66
00:00000BF0 74
00:00000BF1 72
00:00000BF2 35
00:00000BF3 2E
00:00000BF4 2E              	   705: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
00:00000BF5 6E
00:00000BF6 62
00:00000BF7 68
00:00000BF8 67
00:00000BF9 79
00:00000BFA 36
00:00000BFB 2E
00:00000BFC 2E              	   706: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
00:00000BFD 2E
00:00000BFE 6D
00:00000BFF 6A
00:00000C00 75
00:00000C01 37
00:00000C02 38
00:00000C03 2E
00:00000C04 2E              	   707: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
00:00000C05 2C
00:00000C06 6B
00:00000C07 69
00:00000C08 6F
00:00000C09 30
00:00000C0A 39
00:00000C0B 2E
00:00000C0C 2E              	   708: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
00:00000C0D 2E
00:00000C0E 2F
00:00000C0F 6C
00:00000C10 3B
00:00000C11 70
00:00000C12 2D
00:00000C13 2E
00:00000C14 2E              	   709: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
00:00000C15 2E
00:00000C16 27
00:00000C17 2E
00:00000C18 5B
00:00000C19 3D
00:00000C1A 2E
00:00000C1B 2E
00:00000C1C AD              	   710: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
00:00000C1D 2E
00:00000C1E 0D
00:00000C1F 5D
00:00000C20 2E
00:00000C21 5C
00:00000C22 2E
00:00000C23 2E
00:00000C24 2E              	   711: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000C25 2E
00:00000C26 2E
00:00000C27 2E
00:00000C28 2E
00:00000C29 2E
00:00000C2A 08
00:00000C2B 2E
00:00000C2C 2E              	   712: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
00:00000C2D 95
00:00000C2E 2E
00:00000C2F 93
00:00000C30 94
00:00000C31 2E
00:00000C32 2E
00:00000C33 2E
00:00000C34 98              	   713: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
00:00000C35 7F
00:00000C36 92
00:00000C37 2E
00:00000C38 91
00:00000C39 90
00:00000C3A 1B
00:00000C3B AF
00:00000C3C AB              	   714: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
00:00000C3D 2E
00:00000C3E 97
00:00000C3F 2E
00:00000C40 2E
00:00000C41 96
00:00000C42 AE
00:00000C43 2E
                            	   715: 
00:00000C44 2E              	   716: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
00:00000C45 2E
00:00000C46 2E
00:00000C47 A7
00:00000C48 2E
00:00000C49 2E
00:00000C4A 2E
00:00000C4B 2E
00:00000C4C 2E              	   717: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C4D 2E
00:00000C4E 2E
00:00000C4F 2E
00:00000C50 2E
00:00000C51 2E
00:00000C52 2E
00:00000C53 2E
00:00000C54 2E              	   718: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C55 2E
00:00000C56 2E
00:00000C57 2E
00:00000C58 2E
00:00000C59 2E
00:00000C5A 2E
00:00000C5B 2E
00:00000C5C 2E              	   719: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C5D 2E
00:00000C5E 2E
00:00000C5F 2E
00:00000C60 2E
00:00000C61 2E
00:00000C62 2E
00:00000C63 2E
00:00000C64 2E              	   720: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C65 2E
00:00000C66 2E
00:00000C67 2E
00:00000C68 2E
00:00000C69 2E
00:00000C6A 2E
00:00000C6B 2E
00:00000C6C 2E              	   721: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C6D 2E
00:00000C6E 2E
00:00000C6F 2E
00:00000C70 2E
00:00000C71 2E
00:00000C72 2E
00:00000C73 2E
00:00000C74 2E              	   722: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C75 2E
00:00000C76 2E
00:00000C77 2E
00:00000C78 2E
00:00000C79 2E
00:00000C7A 2E
00:00000C7B 2E
00:00000C7C 2E              	   723: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C7D 2E
00:00000C7E 2E
00:00000C7F 2E
00:00000C80 2E
00:00000C81 2E
00:00000C82 2E
00:00000C83 2E
00:00000C84 2E              	   724: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C85 2E
00:00000C86 2E
00:00000C87 2E
00:00000C88 2E
00:00000C89 2E
00:00000C8A 2E
00:00000C8B 2E
00:00000C8C 2E              	   725: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C8D 2E
00:00000C8E 2E
00:00000C8F 2E
00:00000C90 2E
00:00000C91 2E
00:00000C92 2E
00:00000C93 2E
00:00000C94 2E              	   726: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C95 2E
00:00000C96 2E
00:00000C97 2E
00:00000C98 2E
00:00000C99 2E
00:00000C9A 2E
00:00000C9B 2E
00:00000C9C 2E              	   727: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C9D 2E
00:00000C9E 2E
00:00000C9F 2E
00:00000CA0 2E
00:00000CA1 2E
00:00000CA2 2E
00:00000CA3 2E
00:00000CA4 2E              	   728: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CA5 2E
00:00000CA6 2E
00:00000CA7 2E
00:00000CA8 2E
00:00000CA9 2E
00:00000CAA 2E
00:00000CAB 2E
00:00000CAC 2E              	   729: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CAD 2E
00:00000CAE 2E
00:00000CAF 2E
00:00000CB0 2E
00:00000CB1 2E
00:00000CB2 2E
00:00000CB3 2E
00:00000CB4 2E              	   730: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CB5 2E
00:00000CB6 2E
00:00000CB7 2E
00:00000CB8 2E
00:00000CB9 2E
00:00000CBA 2E
00:00000CBB 2E
00:00000CBC 2E              	   731: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
00:00000CBD 2E
00:00000CBE FA
00:00000CBF 2E
00:00000CC0 2E
00:00000CC1 2E
00:00000CC2 2E
00:00000CC3 2E
                            	   732: 
                            	   733: _shiftedScanCodes:
00:00000CC4 2E              	   734: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CC5 2E
00:00000CC6 2E
00:00000CC7 2E
00:00000CC8 2E
00:00000CC9 2E
00:00000CCA 2E
00:00000CCB 2E
00:00000CCC 2E              	   735: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
00:00000CCD 2E
00:00000CCE 2E
00:00000CCF 2E
00:00000CD0 2E
00:00000CD1 09
00:00000CD2 7E
00:00000CD3 2E
00:00000CD4 2E              	   736: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
00:00000CD5 2E
00:00000CD6 2E
00:00000CD7 2E
00:00000CD8 2E
00:00000CD9 51
00:00000CDA 21
00:00000CDB 2E
00:00000CDC 2E              	   737: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
00:00000CDD 2E
00:00000CDE 5A
00:00000CDF 53
00:00000CE0 41
00:00000CE1 57
00:00000CE2 40
00:00000CE3 2E
00:00000CE4 2E              	   738: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
00:00000CE5 43
00:00000CE6 58
00:00000CE7 44
00:00000CE8 45
00:00000CE9 24
00:00000CEA 23
00:00000CEB 2E
00:00000CEC 2E              	   739: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
00:00000CED 20
00:00000CEE 56
00:00000CEF 46
00:00000CF0 54
00:00000CF1 52
00:00000CF2 25
00:00000CF3 2E
00:00000CF4 2E              	   740: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
00:00000CF5 4E
00:00000CF6 42
00:00000CF7 48
00:00000CF8 47
00:00000CF9 59
00:00000CFA 5E
00:00000CFB 2E
00:00000CFC 2E              	   741: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
00:00000CFD 2E
00:00000CFE 4D
00:00000CFF 4A
00:00000D00 55
00:00000D01 26
00:00000D02 2A
00:00000D03 2E
00:00000D04 2E              	   742: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
00:00000D05 3C
00:00000D06 4B
00:00000D07 49
00:00000D08 4F
00:00000D09 29
00:00000D0A 28
00:00000D0B 2E
00:00000D0C 2E              	   743: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
00:00000D0D 3E
00:00000D0E 3F
00:00000D0F 4C
00:00000D10 3A
00:00000D11 50
00:00000D12 5F
00:00000D13 2E
00:00000D14 2E              	   744: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
00:00000D15 2E
00:00000D16 22
00:00000D17 2E
00:00000D18 7B
00:00000D19 2B
00:00000D1A 2E
00:00000D1B 2E
00:00000D1C 2E              	   745: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
00:00000D1D 2E
00:00000D1E 0D
00:00000D1F 7D
00:00000D20 2E
00:00000D21 7C
00:00000D22 2E
00:00000D23 2E
00:00000D24 2E              	   746: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000D25 2E
00:00000D26 2E
00:00000D27 2E
00:00000D28 2E
00:00000D29 2E
00:00000D2A 08
00:00000D2B 2E
00:00000D2C 2E              	   747: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D2D 2E
00:00000D2E 2E
00:00000D2F 2E
00:00000D30 2E
00:00000D31 2E
00:00000D32 2E
00:00000D33 2E
00:00000D34 2E              	   748: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
00:00000D35 7F
00:00000D36 2E
00:00000D37 2E
00:00000D38 2E
00:00000D39 2E
00:00000D3A 1B
00:00000D3B 2E
00:00000D3C 2E              	   749: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D3D 2E
00:00000D3E 2E
00:00000D3F 2E
00:00000D40 2E
00:00000D41 2E
00:00000D42 2E
00:00000D43 2E
                            	   750: 
00:00000D44 2E              	   751: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D45 2E
00:00000D46 2E
00:00000D47 2E
00:00000D48 2E
00:00000D49 2E
00:00000D4A 2E
00:00000D4B 2E
00:00000D4C 2E              	   752: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D4D 2E
00:00000D4E 2E
00:00000D4F 2E
00:00000D50 2E
00:00000D51 2E
00:00000D52 2E
00:00000D53 2E
00:00000D54 2E              	   753: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D55 2E
00:00000D56 2E
00:00000D57 2E
00:00000D58 2E
00:00000D59 2E
00:00000D5A 2E
00:00000D5B 2E
00:00000D5C 2E              	   754: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D5D 2E
00:00000D5E 2E
00:00000D5F 2E
00:00000D60 2E
00:00000D61 2E
00:00000D62 2E
00:00000D63 2E
00:00000D64 2E              	   755: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D65 2E
00:00000D66 2E
00:00000D67 2E
00:00000D68 2E
00:00000D69 2E
00:00000D6A 2E
00:00000D6B 2E
00:00000D6C 2E              	   756: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D6D 2E
00:00000D6E 2E
00:00000D6F 2E
00:00000D70 2E
00:00000D71 2E
00:00000D72 2E
00:00000D73 2E
00:00000D74 2E              	   757: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D75 2E
00:00000D76 2E
00:00000D77 2E
00:00000D78 2E
00:00000D79 2E
00:00000D7A 2E
00:00000D7B 2E
00:00000D7C 2E              	   758: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D7D 2E
00:00000D7E 2E
00:00000D7F 2E
00:00000D80 2E
00:00000D81 2E
00:00000D82 2E
00:00000D83 2E
00:00000D84 2E              	   759: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D85 2E
00:00000D86 2E
00:00000D87 2E
00:00000D88 2E
00:00000D89 2E
00:00000D8A 2E
00:00000D8B 2E
00:00000D8C 2E              	   760: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D8D 2E
00:00000D8E 2E
00:00000D8F 2E
00:00000D90 2E
00:00000D91 2E
00:00000D92 2E
00:00000D93 2E
00:00000D94 2E              	   761: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D95 2E
00:00000D96 2E
00:00000D97 2E
00:00000D98 2E
00:00000D99 2E
00:00000D9A 2E
00:00000D9B 2E
00:00000D9C 2E              	   762: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D9D 2E
00:00000D9E 2E
00:00000D9F 2E
00:00000DA0 2E
00:00000DA1 2E
00:00000DA2 2E
00:00000DA3 2E
00:00000DA4 2E              	   763: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DA5 2E
00:00000DA6 2E
00:00000DA7 2E
00:00000DA8 2E
00:00000DA9 2E
00:00000DAA 2E
00:00000DAB 2E
00:00000DAC 2E              	   764: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DAD 2E
00:00000DAE 2E
00:00000DAF 2E
00:00000DB0 2E
00:00000DB1 2E
00:00000DB2 2E
00:00000DB3 2E
00:00000DB4 2E              	   765: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DB5 2E
00:00000DB6 2E
00:00000DB7 2E
00:00000DB8 2E
00:00000DB9 2E
00:00000DBA 2E
00:00000DBB 2E
00:00000DBC 2E              	   766: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DBD 2E
00:00000DBE 2E
00:00000DBF 2E
00:00000DC0 2E
00:00000DC1 2E
00:00000DC2 2E
00:00000DC3 2E
                            	   767: 
                            	   768: ; control
                            	   769: _keybdControlCodes:
00:00000DC4 2E              	   770: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DC5 2E
00:00000DC6 2E
00:00000DC7 2E
00:00000DC8 2E
00:00000DC9 2E
00:00000DCA 2E
00:00000DCB 2E
00:00000DCC 2E              	   771: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
00:00000DCD 2E
00:00000DCE 2E
00:00000DCF 2E
00:00000DD0 2E
00:00000DD1 09
00:00000DD2 7E
00:00000DD3 2E
00:00000DD4 2E              	   772: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
00:00000DD5 2E
00:00000DD6 2E
00:00000DD7 2E
00:00000DD8 2E
00:00000DD9 11
00:00000DDA 21
00:00000DDB 2E
00:00000DDC 2E              	   773: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
00:00000DDD 2E
00:00000DDE 1A
00:00000DDF 13
00:00000DE0 01
00:00000DE1 17
00:00000DE2 40
00:00000DE3 2E
00:00000DE4 2E              	   774: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
00:00000DE5 03
00:00000DE6 18
00:00000DE7 04
00:00000DE8 05
00:00000DE9 24
00:00000DEA 23
00:00000DEB 2E
00:00000DEC 2E              	   775: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
00:00000DED 20
00:00000DEE 16
00:00000DEF 06
00:00000DF0 14
00:00000DF1 12
00:00000DF2 25
00:00000DF3 2E
00:00000DF4 2E              	   776: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
00:00000DF5 0E
00:00000DF6 02
00:00000DF7 08
00:00000DF8 07
00:00000DF9 19
00:00000DFA 5E
00:00000DFB 2E
00:00000DFC 2E              	   777: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
00:00000DFD 2E
00:00000DFE 0D
00:00000DFF 0A
00:00000E00 15
00:00000E01 26
00:00000E02 2A
00:00000E03 2E
00:00000E04 2E              	   778: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
00:00000E05 3C
00:00000E06 0B
00:00000E07 09
00:00000E08 0F
00:00000E09 29
00:00000E0A 28
00:00000E0B 2E
00:00000E0C 2E              	   779: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
00:00000E0D 3E
00:00000E0E 3F
00:00000E0F 0C
00:00000E10 3A
00:00000E11 10
00:00000E12 5F
00:00000E13 2E
00:00000E14 2E              	   780: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
00:00000E15 2E
00:00000E16 22
00:00000E17 2E
00:00000E18 7B
00:00000E19 2B
00:00000E1A 2E
00:00000E1B 2E
00:00000E1C 2E              	   781: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
00:00000E1D 2E
00:00000E1E 0D
00:00000E1F 7D
00:00000E20 2E
00:00000E21 7C
00:00000E22 2E
00:00000E23 2E
00:00000E24 2E              	   782: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000E25 2E
00:00000E26 2E
00:00000E27 2E
00:00000E28 2E
00:00000E29 2E
00:00000E2A 08
00:00000E2B 2E
00:00000E2C 2E              	   783: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E2D 2E
00:00000E2E 2E
00:00000E2F 2E
00:00000E30 2E
00:00000E31 2E
00:00000E32 2E
00:00000E33 2E
00:00000E34 2E              	   784: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
00:00000E35 7F
00:00000E36 2E
00:00000E37 2E
00:00000E38 2E
00:00000E39 2E
00:00000E3A 1B
00:00000E3B 2E
00:00000E3C 2E              	   785: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E3D 2E
00:00000E3E 2E
00:00000E3F 2E
00:00000E40 2E
00:00000E41 2E
00:00000E42 2E
00:00000E43 2E
                            	   786: 
                            	   787: _keybdExtendedCodes:
00:00000E44 2E              	   788: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
00:00000E45 2E
00:00000E46 2E
00:00000E47 2E
00:00000E48 A3
00:00000E49 A1
00:00000E4A A2
00:00000E4B 2E
00:00000E4C 2E              	   789: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E4D 2E
00:00000E4E 2E
00:00000E4F 2E
00:00000E50 2E
00:00000E51 2E
00:00000E52 2E
00:00000E53 2E
00:00000E54 2E              	   790: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E55 2E
00:00000E56 2E
00:00000E57 2E
00:00000E58 2E
00:00000E59 2E
00:00000E5A 2E
00:00000E5B 2E
00:00000E5C 2E              	   791: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E5D 2E
00:00000E5E 2E
00:00000E5F 2E
00:00000E60 2E
00:00000E61 2E
00:00000E62 2E
00:00000E63 2E
00:00000E64 2E              	   792: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E65 2E
00:00000E66 2E
00:00000E67 2E
00:00000E68 2E
00:00000E69 2E
00:00000E6A 2E
00:00000E6B 2E
00:00000E6C 2E              	   793: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E6D 2E
00:00000E6E 2E
00:00000E6F 2E
00:00000E70 2E
00:00000E71 2E
00:00000E72 2E
00:00000E73 2E
00:00000E74 2E              	   794: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E75 2E
00:00000E76 2E
00:00000E77 2E
00:00000E78 2E
00:00000E79 2E
00:00000E7A 2E
00:00000E7B 2E
00:00000E7C 2E              	   795: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E7D 2E
00:00000E7E 2E
00:00000E7F 2E
00:00000E80 2E
00:00000E81 2E
00:00000E82 2E
00:00000E83 2E
00:00000E84 2E              	   796: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E85 2E
00:00000E86 2E
00:00000E87 2E
00:00000E88 2E
00:00000E89 2E
00:00000E8A 2E
00:00000E8B 2E
00:00000E8C 2E              	   797: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E8D 2E
00:00000E8E 2E
00:00000E8F 2E
00:00000E90 2E
00:00000E91 2E
00:00000E92 2E
00:00000E93 2E
00:00000E94 2E              	   798: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E95 2E
00:00000E96 2E
00:00000E97 2E
00:00000E98 2E
00:00000E99 2E
00:00000E9A 2E
00:00000E9B 2E
00:00000E9C 2E              	   799: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E9D 2E
00:00000E9E 2E
00:00000E9F 2E
00:00000EA0 2E
00:00000EA1 2E
00:00000EA2 2E
00:00000EA3 2E
00:00000EA4 2E              	   800: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EA5 2E
00:00000EA6 2E
00:00000EA7 2E
00:00000EA8 2E
00:00000EA9 2E
00:00000EAA 2E
00:00000EAB 2E
00:00000EAC 2E              	   801: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
00:00000EAD 95
00:00000EAE 2E
00:00000EAF 93
00:00000EB0 94
00:00000EB1 2E
00:00000EB2 2E
00:00000EB3 2E
00:00000EB4 98              	   802: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
00:00000EB5 99
00:00000EB6 92
00:00000EB7 2E
00:00000EB8 91
00:00000EB9 90
00:00000EBA 2E
00:00000EBB 2E
00:00000EBC 2E              	   803: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
00:00000EBD 2E
00:00000EBE 97
00:00000EBF 2E
00:00000EC0 2E
00:00000EC1 96
00:00000EC2 2E
00:00000EC3 2E
                            	   804: 
                            	   805: 

Source: "boot.x68"
                            	   559: 	include "textvid.x68"

Source: "textvid.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Setup the text video device
                            	    40: ; stdout = text screen controller
                            	    41: ;------------------------------------------------------------------------------
                            	    42: ;------------------------------------------------------------------------------
                            	    43: 
                            	    44: TBLE macro arg1
                            	    45: 	dc.l (\1)
                            	    46: endm
                            	    47: 
                            	    48: 	code
                            	    49: 	even
                            	    50: 
                            	    51: 	align 2
                            	    52: TEXTVID_CMDTBL:
                            	    53: 	TBLE textvid_init					; 0
00:00000EC4 00000F8A        	     1M 	dc.l (textvid_init)
                            	    54: 	TBLE textvid_stat
00:00000EC8 00001032        	     1M 	dc.l (textvid_stat)
                            	    55: 	TBLE textvid_putchar
00:00000ECC 000011CE        	     1M 	dc.l (textvid_putchar)
                            	    56: 	TBLE textvid_putbuf
00:00000ED0 0000103E        	     1M 	dc.l (textvid_putbuf)
                            	    57: 	TBLE textvid_getchar
00:00000ED4 00001036        	     1M 	dc.l (textvid_getchar)
                            	    58: 	TBLE textvid_getbuf
00:00000ED8 0000103E        	     1M 	dc.l (textvid_getbuf)
                            	    59: 	TBLE textvid_set_inpos
00:00000EDC 00001058        	     1M 	dc.l (textvid_set_inpos)
                            	    60: 	TBLE textvid_set_outpos
00:00000EE0 0000106E        	     1M 	dc.l (textvid_set_outpos)
                            	    61: 	TBLE textvid_stub
00:00000EE4 0000103E        	     1M 	dc.l (textvid_stub)
                            	    62: 	TBLE textvid_stub
00:00000EE8 0000103E        	     1M 	dc.l (textvid_stub)
                            	    63: 	TBLE textvid_stub				; 10
00:00000EEC 0000103E        	     1M 	dc.l (textvid_stub)
                            	    64: 	TBLE textvid_stub
00:00000EF0 0000103E        	     1M 	dc.l (textvid_stub)
                            	    65: 	TBLE textvid_clear
00:00000EF4 0000111A        	     1M 	dc.l (textvid_clear)
                            	    66: 	TBLE textvid_stub
00:00000EF8 0000103E        	     1M 	dc.l (textvid_stub)
                            	    67: 	TBLE textvid_stub
00:00000EFC 0000103E        	     1M 	dc.l (textvid_stub)
                            	    68: 	TBLE textvid_stub
00:00000F00 0000103E        	     1M 	dc.l (textvid_stub)
                            	    69: 	TBLE textvid_getbuf1
00:00000F04 000010D0        	     1M 	dc.l (textvid_getbuf1)
                            	    70: 	TBLE textvid_stub
00:00000F08 0000103E        	     1M 	dc.l (textvid_stub)
                            	    71: 	TBLE textvid_stub
00:00000F0C 0000103E        	     1M 	dc.l (textvid_stub)
                            	    72: 	TBLE textvid_set_unit
00:00000F10 000010E0        	     1M 	dc.l (textvid_set_unit)
                            	    73: 	TBLE textvid_get_dimen	; 20
00:00000F14 000010EA        	     1M 	dc.l (textvid_get_dimen)
                            	    74: 	TBLE textvid_get_color
00:00000F18 000010C0        	     1M 	dc.l (textvid_get_color)
                            	    75: 	TBLE textvid_get_inpos
00:00000F1C 00001042        	     1M 	dc.l (textvid_get_inpos)
                            	    76: 	TBLE textvid_get_outpos
00:00000F20 00001084        	     1M 	dc.l (textvid_get_outpos)
                            	    77: 	TBLE textvid_get_outptr
00:00000F24 0000109A        	     1M 	dc.l (textvid_get_outptr)
                            	    78: 
                            	    79: 	code
                            	    80: 	even
                            	    81: textvid_cmdproc:
00:00000F28 0C060019        	    82: 	cmpi.b #25,d6
00:00000F2C 641A            	    83: 	bhs.s .0001
00:00000F2E 48E70280        	    84: 	movem.l d6/a0,-(a7)
00:00000F32 4886            	    85: 	ext.w d6
00:00000F34 48C6            	    86: 	ext.l d6
00:00000F36 E34E            	    87: 	lsl.w #1,d6
00:00000F38 41FAFF8A        	    88: 	lea TEXTVID_CMDTBL,a0
00:00000F3C 20706000        	    89: 	move.l (a0,d6.w),a0
00:00000F40 4E90            	    90: 	jsr (a0)
00:00000F42 4CDF0140        	    91: 	movem.l (a7)+,d6/a0
00:00000F46 4E75            	    92: 	rts
                            	    93: .0001:
00:00000F48 7002            	    94: 	moveq #E_Func,d0
00:00000F4A 4E75            	    95: 	rts
                            	    96: 
                            	    97: setup_textvid:
00:00000F4C 48E78080        	    98: 	movem.l d0/a0,-(a7)
00:00000F50 7020            	    99: 	moveq #32,d0
00:00000F52 41F900040B08    	   100: 	lea.l textvid_dcb,a0
                            	   101: .0001:
00:00000F58 4298            	   102: 	clr.l (a0)+
00:00000F5A 51C8FFFC        	   103: 	dbra d0,.0001
00:00000F5E 23FC204243440004	   104: 	move.l #$20424344,textvid_dcb+DCB_MAGIC				; 'DCB'
00:00000F66 0B08
00:00000F68 23FC545845540004	   105: 	move.l #$54584554,textvid_dcb+DCB_NAME				; 'TEXTVID'
00:00000F70 0B0C
00:00000F72 23FC004449560004	   106: 	move.l #$00444956,textvid_dcb+DCB_NAME+4			;
00:00000F7A 0B10
00:00000F7C 23FC00000F280004	   107: 	move.l #textvid_cmdproc,textvid_dcb+DCB_CMDPROC
00:00000F84 0B20
00:00000F86 4CDF0101        	   108: 	movem.l (a7)+,d0/a0
                            	   109: 
                            	   110: textvid_init:
00:00000F8A 2F00            	   111: 	move.l d0,-(a7)
                            	   112: 	if (SCREEN_FORMAT==1)
00:00000F8C 23FC000000FF0004	   113: 		move.l #$0000ff,fgColor		; set foreground / background color (white)
00:00000F94 0084
00:00000F96 23FC000000020004	   114: 		move.l #$000002,bkColor		; medium blue
00:00000F9E 0088
00:00000FA0 23FC000000FF0004	   115: 		move.l #$0000ff,textvid_dcb+DCB_FGCOLOR
00:00000FA8 0B6C
00:00000FAA 23FC000000020004	   116: 		move.l #$000002,textvid_dcb+DCB_BKCOLOR		; medium blue
00:00000FB2 0B68
                            	   117: 	else
                            	   118: 		move.l #$1fffff,fgColor		; set foreground / background color (white)
                            	   119: 		move.l #$00003f,bkColor		; medium blue
                            	   120: 		move.l #$1fffff,textvid_dcb+DCB_FGCOLOR		; set foreground / background color (white)
                            	   121: 		move.l #$00003f,textvid_dcb+DCB_BKCOLOR		; medium blue
                            	   122: 	endif
00:00000FB4 4E7A0FE0        	   123: 	movec.l	coreno,d0					; get core number (2 to 9)
00:00000FB8 5500            	   124: 	subi.b #2,d0							; adjust (0 to 7)
                            	   125: 	if (SCREEN_FORMAT==1)
00:00000FBA C0FC2000        	   126: 		mulu #8192,d0						; compute screen location
                            	   127: 	else
                            	   128: 		mulu #16384,d0						; compute screen location
                            	   129: 	endif
                            	   130: 	if HAS_MMU
                            	   131: 		addi.l #$01E00000,d0
                            	   132: 	else
00:00000FBE 0680FD000000    	   133: 		addi.l #$FD000000,d0
                            	   134: 	endif
00:00000FC4 23C000040B40    	   135: 	move.l d0,textvid_dcb+DCB_INBUFPTR
00:00000FCA 23C000040B44    	   136: 	move.l d0,textvid_dcb+DCB_OUTBUFPTR
00:00000FD0 23C000040004    	   137: 	move.l d0,TextScr
                            	   138: 	if (SCREEN_FORMAT==1)
00:00000FD6 23FC000020000004	   139: 		move.l #8192,textvid_dcb+DCB_INBUFSIZE
00:00000FDE 0B48
00:00000FE0 23FC000020000004	   140: 		move.l #8192,textvid_dcb+DCB_OUTBUFSIZE
00:00000FE8 0B4C
                            	   141: 	else
                            	   142: 		move.l #16384,textvid_dcb+DCB_INBUFSIZE
                            	   143: 		move.l #16384,textvid_dcb+DCB_OUTBUFSIZE
                            	   144: 	endif
00:00000FEA 23FC000000400004	   145: 	move.l #TEXTCOL,textvid_dcb+DCB_OUTDIMX	; set rows and columns
00:00000FF2 0B5C
00:00000FF4 23FC000000200004	   146: 	move.l #TEXTROW,textvid_dcb+DCB_OUTDIMY
00:00000FFC 0B60
00:00000FFE 23FC000000400004	   147: 	move.l #TEXTCOL,textvid_dcb+DCB_INDIMX		; set rows and columns
00:00001006 0B50
00:00001008 23FC000000200004	   148: 	move.l #TEXTROW,textvid_dcb+DCB_INDIMY
00:00001010 0B54
00:00001012 13FC00400004008D	   149: 	move.b #TEXTCOL,TextCols				; set rows and columns
00:0000101A 13FC00200004008C	   150: 	move.b #TEXTROW,TextRows
00:00001022 42B900040B28    	   151: 	clr.l textvid_dcb+DCB_OUTPOSX
00:00001028 42B900040B2C    	   152: 	clr.l textvid_dcb+DCB_OUTPOSY
00:0000102E 201F            	   153: 	move.l (a7)+,d0
00:00001030 4E75            	   154: 	rts
                            	   155: 
                            	   156: textvid_stat:
00:00001032 7000            	   157: 	moveq #E_Ok,d0
00:00001034 4E75            	   158: 	rts
                            	   159: 
                            	   160: textvid_getchar:
00:00001036 610067CC        	   161: 	bsr FromScreen
00:0000103A 7000            	   162: 	moveq #E_Ok,d0
00:0000103C 4E75            	   163: 	rts
                            	   164: 
                            	   165: textvid_putbuf:
                            	   166: textvid_getbuf:
                            	   167: textvid_stub:
00:0000103E 700A            	   168: 	moveq #E_NotSupported,d0
00:00001040 4E75            	   169: 	rts
                            	   170: 
                            	   171: textvid_get_inpos:
00:00001042 223900040B34    	   172: 	move.l textvid_dcb+DCB_INPOSX,d1
00:00001048 243900040B38    	   173: 	move.l textvid_dcb+DCB_INPOSY,d2
00:0000104E 263900040B3C    	   174: 	move.l textvid_dcb+DCB_INPOSZ,d3
00:00001054 7000            	   175: 	move.l #E_Ok,d0
00:00001056 4E75            	   176: 	rts
                            	   177: 
                            	   178: textvid_set_inpos:
00:00001058 23C100040B34    	   179: 	move.l d1,textvid_dcb+DCB_INPOSX
00:0000105E 23C200040B38    	   180: 	move.l d2,textvid_dcb+DCB_INPOSY
00:00001064 23C300040B3C    	   181: 	move.l d3,textvid_dcb+DCB_INPOSZ
00:0000106A 7000            	   182: 	move.l #E_Ok,d0
00:0000106C 4E75            	   183: 	rts
                            	   184: 
                            	   185: textvid_set_outpos:
00:0000106E 23C100040B28    	   186: 	move.l d1,textvid_dcb+DCB_OUTPOSX
00:00001074 23C200040B2C    	   187: 	move.l d2,textvid_dcb+DCB_OUTPOSY
00:0000107A 23C300040B30    	   188: 	move.l d3,textvid_dcb+DCB_OUTPOSZ
00:00001080 7000            	   189: 	move.l #E_Ok,d0
00:00001082 4E75            	   190: 	rts
                            	   191: 
                            	   192: textvid_get_outpos:
00:00001084 223900040B28    	   193: 	move.l textvid_dcb+DCB_OUTPOSX,d1
00:0000108A 243900040B2C    	   194: 	move.l textvid_dcb+DCB_OUTPOSY,d2
00:00001090 263900040B30    	   195: 	move.l textvid_dcb+DCB_OUTPOSZ,d3
00:00001096 7000            	   196: 	move.l #E_Ok,d0
00:00001098 4E75            	   197: 	rts
                            	   198: 
                            	   199: textvid_get_outptr:
00:0000109A 2F02            	   200: 	move.l d2,-(a7)
00:0000109C 223900040B28    	   201: 	move.l textvid_dcb+DCB_OUTPOSX,d1
00:000010A2 203900040B2C    	   202: 	move.l textvid_dcb+DCB_OUTPOSY,d0
00:000010A8 243900040B5C    	   203: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:000010AE C0C2            	   204: 	mulu d2,d0
00:000010B0 D280            	   205: 	add.l d0,d1
                            	   206: 	if (SCREEN_FORMAT==1)
00:000010B2 E589            	   207: 		lsl.l #2,d1
                            	   208: 	else
                            	   209: 		lsl.l #3,d1
                            	   210: 	endif
00:000010B4 D2B900040B44    	   211: 	add.l textvid_dcb+DCB_OUTBUFPTR,d1
00:000010BA 241F            	   212: 	move.l (a7)+,d2
00:000010BC 7000            	   213: 	move.l #E_Ok,d0
00:000010BE 4E75            	   214: 	rts
                            	   215: 
                            	   216: textvid_get_color:
00:000010C0 223900040B6C    	   217: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:000010C6 243900040B68    	   218: 	move.l textvid_dcb+DCB_BKCOLOR,d2
00:000010CC 7000            	   219: 	move.l #E_Ok,d0
00:000010CE 4E75            	   220: 	rts
                            	   221: 
                            	   222: textvid_getbuf1:
00:000010D0 223900040B44    	   223: 	move.l textvid_dcb+DCB_OUTBUFPTR,d1
00:000010D6 243900040B4C    	   224: 	move.l textvid_dcb+DCB_OUTBUFSIZE,d2
00:000010DC 7000            	   225: 	move.l #E_Ok,d0
00:000010DE 4E75            	   226: 	rts
                            	   227: 
                            	   228: textvid_set_unit:
00:000010E0 23C100040B88    	   229: 	move.l d1,textvid_dcb+DCB_UNIT
00:000010E6 7000            	   230: 	move.l #E_Ok,d0
00:000010E8 4E75            	   231: 	rts
                            	   232: 
                            	   233: textvid_get_dimen:
00:000010EA 4A00            	   234: 	cmpi.b #0,d0
00:000010EC 6616            	   235: 	bne.s .0001
00:000010EE 223900040B5C    	   236: 	move.l textvid_dcb+DCB_OUTDIMX,d1
00:000010F4 243900040B60    	   237: 	move.l textvid_dcb+DCB_OUTDIMY,d2
00:000010FA 263900040B64    	   238: 	move.l textvid_dcb+DCB_OUTDIMZ,d3
00:00001100 7000            	   239: 	move.l #E_Ok,d0
00:00001102 4E75            	   240: 	rts
                            	   241: .0001:
00:00001104 223900040B50    	   242: 	move.l textvid_dcb+DCB_INDIMX,d1
00:0000110A 243900040B54    	   243: 	move.l textvid_dcb+DCB_INDIMY,d2
00:00001110 263900040B58    	   244: 	move.l textvid_dcb+DCB_INDIMZ,d3
00:00001116 7000            	   245: 	move.l #E_Ok,d0
00:00001118 4E75            	   246: 	rts
                            	   247: 
                            	   248: ; -----------------------------------------------------------------------------
                            	   249: ; -----------------------------------------------------------------------------
                            	   250: 
                            	   251: textvid_clear:
00:0000111A 23FCFFFFFFFFFD0F	   252: 	move.l #$FFFFFFFF,leds
00:00001122 FF00
00:00001124 48E77880        	   253: 	movem.l	d1/d2/d3/d4/a0,-(a7)
00:00001128 4E7A0FE0        	   254: 	movec	coreno,d0
00:0000112C 4840            	   255: 	swap d0	
                            	   256: ;	moveq		#SCREEN_SEMA,d1
                            	   257: ;	bsr			LockSemaphore
00:0000112E 7E02            	   258: 	moveq #2,d7									; device 2
00:00001130 7C10            	   259: 	moveq #DEV_GETBUF1,d6
00:00001132 4E40            	   260: 	trap #0
00:00001134 23FCFEFEFEFEFD0F	   261: 	move.l #$FEFEFEFE,leds
00:0000113C FF00
00:0000113E 2041            	   262: 	move.l d1,a0								; a0 = pointer to screen area
00:00001140 2802            	   263: 	move.l d2,d4
                            	   264: 	if (SCREEN_FORMAT==1)
00:00001142 E48C            	   265: 		lsr.l #2,d4									; number of cells to clear
                            	   266: 	else
                            	   267: 		lsr.l #3,d4									; number of cells to clear
                            	   268: 	endif
00:00001144 7C15            	   269: 	move.l #DEV_GET_COLOR,d6
00:00001146 4E40            	   270: 	trap #0
00:00001148 23FCFDFDFDFDFD0F	   271: 	move.l #$FDFDFDFD,leds
00:00001150 FF00
                            	   272: ;	bsr	get_screen_color				; get the color bits
                            	   273: 	if (SCREEN_FORMAT==1)
00:00001152 48C1            	   274: 		ext.l d1
00:00001154 E189            	   275: 		lsl.l #8,d1
00:00001156 48C2            	   276: 		ext.l d2									; clear high order bits
00:00001158 8481            	   277: 		or.l d1,d2								; forground color in bits 24 to 31
00:0000115A 4842            	   278: 		swap d2										; color in bits 16 to 23
00:0000115C 00420020        	   279: 		ori.w #32,d2							; insert character to display (space)
00:00001160 E15A            	   280: 		rol.w #8,d2								; reverse byte order
00:00001162 4842            	   281: 		swap d2
00:00001164 E15A            	   282: 		rol.w #8,d2
                            	   283: loop3:
00:00001166 20C2            	   284: 		move.l d2,(a0)+						; copy to cell
                            	   285: 	else
                            	   286: 		lsl.l #5,d1								; high order background color bits go in bits 0 to 4
                            	   287: 		move.l d2,d3
                            	   288: 		swap d3
                            	   289: 		andi.l #$1f,d3
                            	   290: 		or.l d3,d1
                            	   291: 		; we want bkcolor in bits 16 to 32
                            	   292: 		; char in bits 0 to 15
                            	   293: 		swap d2										; color in bits 16 to 32
                            	   294: 		move.w #32,d2							; load space character
                            	   295: 		rol.w	#8,d2								; swap endian, text controller expects little endian
                            	   296: 		swap d2
                            	   297: 		rol.w	#8,d2
                            	   298: 		rol.w	#8,d0								; swap endian
                            	   299: 		swap d0
                            	   300: 		rol.w	#8,d0
                            	   301: loop3:
                            	   302: 		move.l d2,(a0)+						; copy char plus bkcolor to cell
                            	   303: 		move.l d1,(a0)+						; copy fgcolor to cell
                            	   304: 	endif
00:00001168 51CCFFFC        	   305: 	dbra d4,loop3
00:0000116C 4E7A0FE0        	   306: 	movec coreno,d0
00:00001170 4840            	   307: 	swap d0	
                            	   308: ;	moveq #SCREEN_SEMA,d1
                            	   309: ;	bsr UnlockSemaphore
00:00001172 23FCFCFCFCFCFD0F	   310: 	move.l #$FCFCFCFC,leds
00:0000117A FF00
00:0000117C 4CDF011E        	   311: 	movem.l (a7)+,d1/d2/d3/d4/a0
00:00001180 7000            	   312: 	move.l #E_Ok,d0
00:00001182 4E75            	   313: 	rts
                            	   314: 
                            	   315: ; -----------------------------------------------------------------------------
                            	   316: ; Gets the screen color in d0 and d1. Setup already to be able to insert
                            	   317: ; character code.
                            	   318: ; -----------------------------------------------------------------------------
                            	   319: 
                            	   320: get_screen_color:
00:00001184 2F02            	   321: 	move.l d2,-(a7)
00:00001186 223900040B6C    	   322: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:0000118C 243900040B68    	   323: 	move.l textvid_dcb+DCB_BKCOLOR,d2
                            	   324: 	if (SCREEN_FORMAT==1)
00:00001192 E189            	   325: 		lsl.l #8,d1							; foreground color in bits 8 to 15
00:00001194 024200FF        	   326: 		andi.w #$ff,d2
00:00001198 8242            	   327: 		or.w d2,d1							; background color in bits 0 to 7
00:0000119A 4841            	   328: 		swap d1									; foreground color in bits 24 to 31, bk in 16 to 23
00:0000119C 4241            	   329: 		move.w #0,d1						; clear character
00:0000119E 2001            	   330: 		move.l d1,d0
                            	   331: 	else
                            	   332: 		asl.l	#5,d1							; shift into position
                            	   333: 		ori.l	#$40000000,d1			; set priority
                            	   334: 		move.l d2,d0
                            	   335: 		lsr.l	#8,d2
                            	   336: 		lsr.l	#8,d2
                            	   337: 		andi.l #31,d2						; mask off extra bits
                            	   338: 		or.l d2,d1							; set background color bits in upper long word
                            	   339: 		asl.l	#8,d0							; shift into position for display ram
                            	   340: 		asl.l	#8,d0
                            	   341: 	endif
00:000011A0 241F            	   342: 	move.l (a7)+,d2
00:000011A2 4E75            	   343: 	rts
                            	   344: 
                            	   345: ;------------------------------------------------------------------------------
                            	   346: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   347: ; Destroys d0,d2,a0
                            	   348: ;------------------------------------------------------------------------------
                            	   349: 
                            	   350: CalcScreenLoc:
00:000011A4 48E7C400        	   351: 	movem.l d0/d1/d5,-(a7)
00:000011A8 203900040B28    	   352: 	move.l textvid_dcb+DCB_OUTPOSX,d0
00:000011AE 2A3900040B2C    	   353: 	move.l textvid_dcb+DCB_OUTPOSY,d5
00:000011B4 223900040B5C    	   354: 	move.l textvid_dcb+DCB_OUTDIMX,d1
00:000011BA CAC1            	   355: 	mulu d1,d5							; y * num cols
00:000011BC D085            	   356: 	add.l d5,d0							; plus x
                            	   357: 	if (SCREEN_FORMAT==1)
00:000011BE E580            	   358: 		asl.l #2,d0							; 4 bytes per char
                            	   359: 	else
                            	   360: 		asl.l	#3,d0							; 8 bytes per char
                            	   361: 	endif
00:000011C0 207900040B44    	   362: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:000011C6 D1C0            	   363: 	add.l	d0,a0								; a0 = screen location
00:000011C8 4CDF0023        	   364: 	movem.l (a7)+,d0/d1/d5
00:000011CC 4E75            	   365: 	rts
                            	   366: 
                            	   367: ;------------------------------------------------------------------------------
                            	   368: ; Display a character on the screen
                            	   369: ; Parameters:
                            	   370: ; 	d1.b = char to display
                            	   371: ;------------------------------------------------------------------------------
                            	   372: 
                            	   373: textvid_putchar:
00:000011CE 48E77000        	   374: 	movem.l	d1/d2/d3,-(a7)
00:000011D2 4E7A2FE0        	   375: 	movec	coreno,d2
00:000011D6 0C020002        	   376: 	cmpi.b #2,d2
                            	   377: ;	bne.s		.0001
                            	   378: ;	bsr			SerialPutChar
                            	   379: .0001:
00:000011DA 0281000000FF    	   380: 	andi.l #$ff,d1				; zero out upper bytes of d1
00:000011E0 0C01000D        	   381: 	cmpi.b #13,d1				; carriage return ?
00:000011E4 6612            	   382: 	bne.s	dccr
00:000011E6 42B900040B28    	   383: 	clr.l	textvid_dcb+DCB_OUTPOSX	; just set cursor column to zero on a CR
                            	   384: dcx14:
00:000011EC 6100024E        	   385: 	bsr	SyncCursor				; set position in text controller
                            	   386: dcx7:
00:000011F0 4CDF000E        	   387: 	movem.l	(a7)+,d1/d2/d3
00:000011F4 7000            	   388: 	moveq #E_Ok,d0
00:000011F6 4E75            	   389: 	rts
                            	   390: dccr:
00:000011F8 0C010091        	   391: 	cmpi.b #$91,d1			; cursor right ?
00:000011FC 6618            	   392: 	bne.s dcx6
00:000011FE 243900040B5C    	   393: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:00001204 5382            	   394: 	subq.l #1,d2
00:00001206 94B900040B28    	   395: 	sub.l	textvid_dcb+DCB_OUTPOSX,d2
00:0000120C 67E2            	   396: 	beq.s	dcx7
00:0000120E 52B900040B28    	   397: 	addq.l #1,textvid_dcb+DCB_OUTPOSX
00:00001214 60D6            	   398: 	bra.s dcx14
                            	   399: dcx6:
00:00001216 0C010090        	   400: 	cmpi.b #$90,d1			; cursor up ?
00:0000121A 6610            	   401: 	bne.s	dcx8
00:0000121C 4AB900040B2C    	   402: 	tst.l textvid_dcb+DCB_OUTPOSY
00:00001222 67CC            	   403: 	beq.s	dcx7
00:00001224 53B900040B2C    	   404: 	subq.l #1,textvid_dcb+DCB_OUTPOSY
00:0000122A 60C0            	   405: 	bra.s	dcx14
                            	   406: dcx8:
00:0000122C 0C010093        	   407: 	cmpi.b #$93,d1			; cursor left?
00:00001230 6610            	   408: 	bne.s	dcx9
00:00001232 4AB900040B28    	   409: 	tst.l textvid_dcb+DCB_OUTPOSX
00:00001238 67B6            	   410: 	beq.s	dcx7
00:0000123A 53B900040B28    	   411: 	subq.l #1,textvid_dcb+DCB_OUTPOSX
00:00001240 60AA            	   412: 	bra.s	dcx14
                            	   413: dcx9:
00:00001242 0C010092        	   414: 	cmpi.b #$92,d1			; cursor down ?
00:00001246 6618            	   415: 	bne.s	dcx10
00:00001248 243900040B60    	   416: 	move.l textvid_dcb+DCB_OUTDIMY,d2
00:0000124E 5382            	   417: 	subq.l #1,d2
00:00001250 B4B900040B2C    	   418: 	cmp.l	textvid_dcb+DCB_OUTPOSY,d2
00:00001256 6798            	   419: 	beq.s	dcx7
00:00001258 52B900040B2C    	   420: 	addq.l #1,textvid_dcb+DCB_OUTPOSY
00:0000125E 608C            	   421: 	bra.s	dcx14
                            	   422: dcx10:
00:00001260 0C010094        	   423: 	cmpi.b #$94,d1			; cursor home ?
00:00001264 661C            	   424: 	bne.s	dcx11
00:00001266 4AB900040B28    	   425: 	tst.l	textvid_dcb+DCB_OUTPOSX
00:0000126C 670A            	   426: 	beq.s	dcx12
00:0000126E 42B900040B28    	   427: 	clr.l	textvid_dcb+DCB_OUTPOSX
00:00001274 6000FF76        	   428: 	bra	dcx14
                            	   429: dcx12:
00:00001278 42B900040B2C    	   430: 	clr.l	textvid_dcb+DCB_OUTPOSY
00:0000127E 6000FF6C        	   431: 	bra	dcx14
                            	   432: dcx11:
00:00001282 48E70080        	   433: 	movem.l	a0,-(a7)
00:00001286 0C010099        	   434: 	cmpi.b #$99,d1				; delete ?
00:0000128A 6760            	   435: 	beq.s	doDelete
00:0000128C 0C010008        	   436: 	cmpi.b #CTRLH,d1			; backspace ?
00:00001290 674C            	   437: 	beq.s doBackspace
00:00001292 0C010018        	   438: 	cmpi.b #CTRLX,d1			; delete line ?
00:00001296 6700008A        	   439: 	beq	doCtrlX
00:0000129A 0C01000A        	   440: 	cmpi.b #10,d1					; linefeed ?
00:0000129E 672C            	   441: 	beq.s dclf
                            	   442: 
                            	   443: 	; regular char
00:000012A0 23FCFFFFFFFFFD0F	   444: 	move.l #$FFFFFFFF,leds
00:000012A8 FF00
00:000012AA 6100FEF8        	   445: 	bsr	CalcScreenLoc			; a0 = screen location
00:000012AE 23FCFFFFFFFEFD0F	   446: 	move.l #$FFFFFFFE,leds
00:000012B6 FF00
00:000012B8 2401            	   447: 	move.l d1,d2					; d2 = char
00:000012BA 6100FEC8        	   448: 	bsr get_screen_color	; d0,d1 = color
00:000012BE 8082            	   449: 	or.l d2,d0						; d0 = char + color
00:000012C0 E158            	   450: 	rol.w	#8,d0						; swap bytes - text controller expects little endian data
00:000012C2 4840            	   451: 	swap d0								; swap halfs
00:000012C4 E158            	   452: 	rol.w	#8,d0						; swap remaining bytes
                            	   453: 	if (SCREEN_FORMAT==1)
00:000012C6 20C0            	   454: 		move.l d0,(a0)+
                            	   455: 	else
                            	   456: 		move.l d0,(a0)+
                            	   457: 		rol.w	#8,d1					; swap bytes
                            	   458: 		swap d1							; swap halfs
                            	   459: 		rol.w	#8,d1					; swap remaining bytes
                            	   460: 		move.l d1,(a0)
                            	   461: 	endif
00:000012C8 617C            	   462: 	bsr	IncCursorPos
00:000012CA 6004            	   463: 	bra	dcx16
                            	   464: dclf:
00:000012CC 61000092        	   465: 	bsr IncCursorRow
                            	   466: dcx16:
00:000012D0 6100016A        	   467: 	bsr	SyncCursor
                            	   468: dcx4:
00:000012D4 205F            	   469: 	movem.l	(a7)+,a0			; get back a0
00:000012D6 4CDF000E        	   470: 	movem.l	(a7)+,d1/d2/d3
00:000012DA 7000            	   471: 	moveq #E_Ok,d0
00:000012DC 4E75            	   472: 	rts
                            	   473: 
                            	   474: 	;---------------------------
                            	   475: 	; CTRL-H: backspace
                            	   476: 	;---------------------------
                            	   477: doBackspace:
00:000012DE 4AB900040B28    	   478: 	tst.l	textvid_dcb+DCB_OUTPOSX		; if already at start of line
00:000012E4 67EE            	   479: 	beq.s dcx4						; nothing to do
00:000012E6 53B900040B28    	   480: 	subq.l #1,textvid_dcb+DCB_OUTPOSX		; decrement column
                            	   481: 
                            	   482: 	;---------------------------
                            	   483: 	; Delete key
                            	   484: 	;---------------------------
                            	   485: doDelete:
00:000012EC 48E7C080        	   486: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
00:000012F0 6100FEB2        	   487: 	bsr	CalcScreenLoc				; a0 = screen location
00:000012F4 203900040B28    	   488: 	move.l textvid_dcb+DCB_OUTPOSX,d0
                            	   489: .0001:
                            	   490: 	if (SCREEN_FORMAT==1)
00:000012FA 20A80004        	   491: 		move.l 4(a0),(a0)				; pull remaining characters on line over 1
00:000012FE 5888            	   492: 		adda.l #4,a0
                            	   493: 	else
                            	   494: 		move.l 8(a0),(a0)				; pull remaining characters on line over 1
                            	   495: 		move.l 12(a0),4(a0)
                            	   496: 		adda.l #8,a0
                            	   497: 	endif
00:00001300 5280            	   498: 	addq.l #1,d0
00:00001302 B0B900040B5C    	   499: 	cmp.l	textvid_dcb+DCB_OUTDIMX,d0
00:00001308 65F0            	   500: 	blo.s	.0001
00:0000130A 6100FE78        	   501: 	bsr	get_screen_color
                            	   502: 	if (SCREEN_FORMAT==1)
00:0000130E 303C0020        	   503: 		move.w #' ',d0
00:00001312 E158            	   504: 		rol.w	#8,d0
00:00001314 4840            	   505: 		swap d0
00:00001316 E158            	   506: 		rol.w	#8,d0
00:00001318 2140FFFC        	   507: 		move.l d0,-4(a0)
                            	   508: 	else
                            	   509: 		move.w #' ',d0					; terminate line with a space
                            	   510: 		rol.w	#8,d0
                            	   511: 		swap d0
                            	   512: 		rol.w	#8,d0
                            	   513: 		move.l d0,-8(a0)
                            	   514: 	endif
00:0000131C 4CDF0103        	   515: 	movem.l	(a7)+,d0/d1/a0
00:00001320 60AE            	   516: 	bra.s		dcx16				; finished
                            	   517: 
                            	   518: 	;---------------------------
                            	   519: 	; CTRL-X: erase line
                            	   520: 	;---------------------------
                            	   521: doCtrlX:
00:00001322 42B900040B28    	   522: 	clr.l	textvid_dcb+DCB_OUTPOSX			; Reset cursor to start of line
00:00001328 203900040B5C    	   523: 	move.l textvid_dcb+DCB_OUTDIMX,d0	; and display TextCols number of spaces
00:0000132E 4880            	   524: 	ext.w	d0
00:00001330 48C0            	   525: 	ext.l	d0
00:00001332 123C0020        	   526: 	move.b #' ',d1			; d1 = space char
                            	   527: .0001:
                            	   528: 	; textvid_putchar is called recursively here
                            	   529: 	; It's safe to do because we know it won't recurse again due to the
                            	   530: 	; fact we know the character being displayed is a space char
00:00001336 6100FE96        	   531: 	bsr	textvid_putchar
00:0000133A 5340            	   532: 	subq #1,d0
00:0000133C 66F8            	   533: 	bne.s	.0001
00:0000133E 42B900040B28    	   534: 	clr.l	textvid_dcb+DCB_OUTPOSX			; now really go back to start of line
00:00001344 608A            	   535: 	bra	dcx16						; we're done
                            	   536: 
                            	   537: ;------------------------------------------------------------------------------
                            	   538: ; Increment the cursor position, scroll the screen if needed.
                            	   539: ;------------------------------------------------------------------------------
                            	   540: 
                            	   541: IncCursorPos:
00:00001346 52B900040B28    	   542: 	addq.l #1,textvid_dcb+DCB_OUTPOSX
00:0000134C 203900040B5C    	   543: 	move.l textvid_dcb+DCB_OUTDIMX,d0
00:00001352 B0B900040B28    	   544: 	cmp.l	textvid_dcb+DCB_OUTPOSX,d0
00:00001358 642E            	   545: 	bhs.s	icc1
00:0000135A 42B900040B28    	   546: 	clr.l textvid_dcb+DCB_OUTPOSX
                            	   547: IncCursorRow:
00:00001360 52B900040B2C    	   548: 	addq.l #1,textvid_dcb+DCB_OUTPOSY
00:00001366 203900040B60    	   549: 	move.l textvid_dcb+DCB_OUTDIMY,d0
00:0000136C B0B900040B2C    	   550: 	cmp.l textvid_dcb+DCB_OUTPOSY,d0
00:00001372 6214            	   551: 	bhi.s	icc1
00:00001374 203900040B60    	   552: 	move.l textvid_dcb+DCB_OUTDIMY,d0
00:0000137A 23C000040B2C    	   553: 	move.l d0,textvid_dcb+DCB_OUTPOSY		; in case CursorRow is way over
00:00001380 53B900040B2C    	   554: 	subq.l #1,textvid_dcb+DCB_OUTPOSY
00:00001386 6102            	   555: 	bsr	ScrollUp
                            	   556: icc1:
00:00001388 4E75            	   557: 	rts
                            	   558: 
                            	   559: ;------------------------------------------------------------------------------
                            	   560: ; Scroll screen up.
                            	   561: ;------------------------------------------------------------------------------
                            	   562: 
                            	   563: ScrollUp:
00:0000138A 48E7C084        	   564: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
00:0000138E 4E7A0FE0        	   565: 	movec	coreno,d0
00:00001392 4840            	   566: 	swap d0	
00:00001394 7205            	   567: 	moveq	#SCREEN_SEMA,d1
00:00001396 61000C02        	   568: 	bsr	LockSemaphore
00:0000139A 207900040B44    	   569: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:000013A0 2A48            	   570: 	move.l a0,a5								; a5 = pointer to text screen
                            	   571: .0003:								
00:000013A2 203900040B5C    	   572: 	move.l textvid_dcb+DCB_OUTDIMX,d0					; d0 = columns
00:000013A8 223900040B60    	   573: 	move.l textvid_dcb+DCB_OUTDIMY,d1					; d1 = rows
                            	   574: 	if (SCREEN_FORMAT==1)
00:000013AE E580            	   575: 		asl.l	#2,d0								; make into cell index
                            	   576: 	else
                            	   577: 		asl.l	#3,d0								; make into cell index
                            	   578: 	endif
00:000013B0 41F50800        	   579: 	lea	0(a5,d0.l),a0						; a0 = pointer to second row of text screen
                            	   580: 	if (SCREEN_FORMAT==1)
00:000013B4 E488            	   581: 		lsr.l	#2,d0								; get back d0
                            	   582: 	else
                            	   583: 		lsr.l	#3,d0								; get back d0
                            	   584: 	endif
00:000013B6 5381            	   585: 	subq.l #1,d1									; number of rows-1
00:000013B8 C0C1            	   586: 	mulu d1,d0									; d0 = count of characters to move
                            	   587: 	if (SCREEN_FORMAT==1)
                            	   588: 	else
                            	   589: 		add.l d0,d0									; d0*2 2 longs per char
                            	   590: 	endif
                            	   591: .0001:
00:000013BA 2AD8            	   592: 	move.l (a0)+,(a5)+
00:000013BC 51C8FFFC        	   593: 	dbra d0,.0001
00:000013C0 4E7A0FE0        	   594: 	movec coreno,d0
00:000013C4 4840            	   595: 	swap d0	
00:000013C6 7205            	   596: 	moveq #SCREEN_SEMA,d1
00:000013C8 61000C0C        	   597: 	bsr UnlockSemaphore
00:000013CC 4CDF2103        	   598: 	movem.l (a7)+,d0/d1/a0/a5
                            	   599: 	; Fall through into blanking out last line
                            	   600: 
                            	   601: ;------------------------------------------------------------------------------
                            	   602: ; Blank out the last line on the screen.
                            	   603: ;------------------------------------------------------------------------------
                            	   604: 
                            	   605: BlankLastLine:
00:000013D0 48E7E080        	   606: 	movem.l	d0/d1/d2/a0,-(a7)
00:000013D4 4E7A0FE0        	   607: 	movec	coreno,d0
00:000013D8 4840            	   608: 	swap d0	
00:000013DA 7205            	   609: 	moveq	#SCREEN_SEMA,d1
00:000013DC 61000BBC        	   610: 	bsr	LockSemaphore
00:000013E0 207900040B44    	   611: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:000013E6 203900040B5C    	   612: 	move.l textvid_dcb+DCB_OUTDIMX,d0					; d0 = columns
00:000013EC 223900040B60    	   613: 	move.l textvid_dcb+DCB_OUTDIMY,d1					; d1 = rows
00:000013F2 5341            	   614: 	subq #1,d1									; last row = #rows-1
00:000013F4 C0C1            	   615: 	mulu d1,d0									; d0 = index of last line
                            	   616: 	if (SCREEN_FORMAT==1)
00:000013F6 E588            	   617: 		lsl.l	#2,d0								; *4 bytes per char
                            	   618: 	else
                            	   619: 		lsl.l	#3,d0								; *8 bytes per char
                            	   620: 	endif
00:000013F8 41F00800        	   621: 	lea	(a0,d0.l),a0						; point a0 to last row
00:000013FC 243900040B5C    	   622: 	move.l textvid_dcb+DCB_OUTDIMX,d2					; number of text cells to clear
00:00001402 5382            	   623: 	subq.l #1,d2								; count must be one less than desired
00:00001404 6100FD7E        	   624: 	bsr	get_screen_color				; d0,d1 = screen color
                            	   625: 	if (SCREEN_FORMAT==1)
00:00001408 303C0020        	   626: 		move.w #32,d0
                            	   627: 	else
                            	   628: 		move.w #32,d0								; set the character for display in low 16 bits
                            	   629: 	endif
00:0000140C E158            	   630: 	rol.w	#8,d0
00:0000140E 4840            	   631: 	swap d0
00:00001410 E158            	   632: 	rol.w	#8,d0
                            	   633: .0001:
                            	   634: 	if (SCREEN_FORMAT==1)
00:00001412 20C0            	   635: 		move.l d0,(a0)+
                            	   636: 	else
                            	   637: 		move.l d0,(a0)+
                            	   638: 		bsr rbo
                            	   639: 		move.l d1,(a0)+
                            	   640: 	endif
00:00001414 51CAFFFC        	   641: 	dbra d2,.0001
00:00001418 4E7A0FE0        	   642: 	movec	coreno,d0
00:0000141C 4840            	   643: 	swap d0	
00:0000141E 7205            	   644: 	moveq #SCREEN_SEMA,d1
00:00001420 61000BB4        	   645: 	bsr UnlockSemaphore
00:00001424 4CDF0107        	   646: 	movem.l	(a7)+,d0/d1/d2/a0
00:00001428 4E75            	   647: 	rts
                            	   648: 
                            	   649: ;------------------------------------------------------------------------------
                            	   650: ; Set cursor position to top left of screen.
                            	   651: ;
                            	   652: ; Parameters:
                            	   653: ;		<none>
                            	   654: ; Returns:
                            	   655: ;		<none>
                            	   656: ; Registers Affected:
                            	   657: ;		<none>
                            	   658: ;------------------------------------------------------------------------------
                            	   659: 
                            	   660: HomeCursor:
00:0000142A 42B900040B28    	   661: 	clr.l textvid_dcb+DCB_OUTPOSX
00:00001430 42B900040B2C    	   662: 	clr.l textvid_dcb+DCB_OUTPOSY
00:00001436 42B900040B30    	   663: 	clr.l textvid_dcb+DCB_OUTPOSZ
                            	   664: 	; fall through
                            	   665: 
                            	   666: ;------------------------------------------------------------------------------
                            	   667: ; SyncCursor:
                            	   668: ;
                            	   669: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   670: ; the core with the IO focus.
                            	   671: ;
                            	   672: ; Parameters:
                            	   673: ;		<none>
                            	   674: ; Returns:
                            	   675: ;		<none>
                            	   676: ; Registers Affected:
                            	   677: ;		<none>
                            	   678: ;------------------------------------------------------------------------------
                            	   679: 
                            	   680: SyncCursor:
00:0000143C 23FCFFFFFFFDFD0F	   681: 	move.l #$FFFFFFFD,leds
00:00001444 FF00
00:00001446 48E7E000        	   682: 	movem.l	d0/d1/d2,-(a7)
00:0000144A 4E7A0FE0        	   683: 	movec	coreno,d0
00:0000144E B03900100000    	   684: 	cmp.b	IOFocus,d0
00:00001454 6622            	   685: 	bne.s .0001
00:00001456 203900040B28    	   686: 	move.l textvid_dcb+DCB_OUTPOSX,d0
00:0000145C 223900040B2C    	   687: 	move.l textvid_dcb+DCB_OUTPOSY,d1
00:00001462 243900040B5C    	   688: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:00001468 C4C1            	   689: 	mulu d1,d2
00:0000146A D480            	   690: 	add.l d0,d2
00:0000146C E15A            	   691: 	rol.w	#8,d2					; swap byte order
00:0000146E 4842            	   692: 	swap d2
00:00001470 E15A            	   693: 	rol.w #8,d2
00:00001472 23C2FD080024    	   694: 	move.l d2,TEXTREG+$24
                            	   695: .0001:	
00:00001478 4CDF0007        	   696: 	movem.l	(a7)+,d0/d1/d2
00:0000147C 4E75            	   697: 	rts
                            	   698: 
                            	   699: 

Source: "boot.x68"
                            	   560: 	include "err.x68"

Source: "err.x68"
                            	     1: ;------------------------------------------------------------------------------
                            	     2: ;------------------------------------------------------------------------------
                            	     3: ; Setup the err device
                            	     4: ;------------------------------------------------------------------------------
                            	     5: ;------------------------------------------------------------------------------
                            	     6: 
                            	     7: setup_err:
                            	     8: err_init:
00:0000147E 7020            	     9: 	moveq #32,d0
00:00001480 41F900040B8C    	    10: 	lea.l err_dcb,a0
                            	    11: .0001:
00:00001486 4298            	    12: 	clr.l (a0)+
00:00001488 51C8FFFC        	    13: 	dbra d0,.0001
00:0000148C 23FC204243440004	    14: 	move.l #$20424344,err_dcb+DCB_MAGIC				; 'DCB'
00:00001494 0B8C
00:00001496 23FC4C4C554E0004	    15: 	move.l #$4C4C554E,err_dcb+DCB_NAME					; 'err'
00:0000149E 0B90
00:000014A0 23FC000014AC0004	    16: 	move.l #err_cmdproc,err_dcb+DCB_CMDPROC
00:000014A8 0BA4
                            	    17: err_ret:
00:000014AA 4E75            	    18: 	rts
                            	    19: 
                            	    20: err_cmdproc:
00:000014AC 7000            	    21: 	moveq #E_Ok,d0
00:000014AE 4E75            	    22: 	rts
                            	    23: 
                            	    24: 

Source: "boot.x68"
                            	   561: 	include "serial.x68"

Source: "serial.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;==============================================================================
                            	    38: ; Serial I/O routines
                            	    39: ;==============================================================================
                            	    40: 
                            	    41: 	code
                            	    42: 	align 2
                            	    43: COM_CMDTBL:
00:000014B0 000014E0        	    44: 	dc.l serial_init
00:000014B4 00001558        	    45: 	dc.l serial_stat
00:000014B8 0000155C        	    46: 	dc.l serial_putchar
00:000014BC 0000158A        	    47: 	dc.l serial_putbuf
00:000014C0 00001564        	    48: 	dc.l serial_getchar
00:000014C4 0000158A        	    49: 	dc.l serial_getbuf
00:000014C8 0000158A        	    50: 	dc.l serial_set_inpos
00:000014CC 0000158A        	    51: 	dc.l serial_set_outpos
00:000014D0 0000156A        	    52: 	dc.l serial_getchar_direct
00:000014D4 00001572        	    53: 	dc.l serial_peek_char
00:000014D8 0000157A        	    54: 	dc.l serial_peek_char_direct
00:000014DC 00001582        	    55: 	dc.l serial_putchar_direct
                            	    56: 
                            	    57: ;------------------------------------------------------------------------------
                            	    58: ; Setup the console device
                            	    59: ; stdout = text screen controller
                            	    60: ;------------------------------------------------------------------------------
                            	    61: 	even
                            	    62: 
                            	    63: serial_init:
                            	    64: setup_serial:
00:000014E0 48E78080        	    65: 	movem.l d0/a0,-(a7)
00:000014E4 701F            	    66: 	moveq #31,d0
00:000014E6 41F900040C94    	    67: 	lea.l serial_dcb,a0
                            	    68: .0001:
00:000014EC 4298            	    69: 	clr.l (a0)+
00:000014EE 51C8FFFC        	    70: 	dbra d0,.0001
00:000014F2 23FC204243440004	    71: 	move.l #$20424344,serial_dcb+DCB_MAGIC				; 'DCB'
00:000014FA 0C94
00:000014FC 23FC204F4F430004	    72: 	move.l #$204F4F43,serial_dcb+DCB_NAME				; 'COM'
00:00001504 0C98
00:00001506 23FC000015360004	    73: 	move.l #serial_cmdproc,serial_dcb+DCB_CMDPROC
00:0000150E 0CAC
00:00001510 23FC001010000004	    74: 	move.l #SerRcvBuf,serial_dcb+DCB_INBUFPTR
00:00001518 0CCC
00:0000151A 23FC001020000004	    75: 	move.l #SerXmitBuf,serial_dcb+DCB_OUTBUFPTR
00:00001522 0CD0
00:00001524 23FC000010000004	    76: 	move.l #4096,serial_dcb+DCB_INBUFSIZE
00:0000152C 0CD4
00:0000152E 615E            	    77: 	bsr SerialInit
00:00001530 4CDF0101        	    78: 	movem.l (a7)+,d0/a0
00:00001534 4E75            	    79: 	rts
                            	    80: 
                            	    81: serial_cmdproc:
00:00001536 0C06000C        	    82: 	cmpi.b #12,d6
00:0000153A 6418            	    83: 	bhs.s .0001
00:0000153C 48E70280        	    84: 	movem.l d6/a0,-(a7)
00:00001540 4886            	    85: 	ext.w d6
00:00001542 E54E            	    86: 	lsl.w #2,d6
00:00001544 41FAFF6A        	    87: 	lea COM_CMDTBL,a0
00:00001548 20706000        	    88: 	move.l (a0,d6.w),a0
00:0000154C 4E90            	    89: 	jsr (a0)
00:0000154E 4CDF0140        	    90: 	movem.l (a7)+,d6/a0
00:00001552 4E75            	    91: 	rts
                            	    92: .0001:
00:00001554 7002            	    93: 	moveq #E_Func,d0
00:00001556 4E75            	    94: 	rts
                            	    95: 
                            	    96: serial_stat:
00:00001558 7000            	    97: 	moveq #E_Ok,d0
00:0000155A 4E75            	    98: 	rts
                            	    99: 
                            	   100: serial_putchar:
00:0000155C 6100013C        	   101: 	bsr SerialPutChar
00:00001560 7000            	   102: 	moveq #E_Ok,d0
00:00001562 4E75            	   103: 	rts
                            	   104: 
                            	   105: serial_getchar:
00:00001564 6166            	   106: 	bsr SerialGetChar
00:00001566 7000            	   107: 	moveq #E_Ok,d0
00:00001568 4E75            	   108: 	rts
                            	   109: 
                            	   110: serial_getchar_direct:
00:0000156A 61000114        	   111: 	bsr SerialPeekCharDirect
00:0000156E 7000            	   112: 	moveq #E_Ok,d0
00:00001570 4E75            	   113: 	rts
                            	   114: 
                            	   115: serial_peek_char:
00:00001572 610000D0        	   116: 	bsr SerialPeekChar
00:00001576 7000            	   117: 	moveq #E_Ok,d0
00:00001578 4E75            	   118: 	rts
                            	   119: 
                            	   120: serial_peek_char_direct:
00:0000157A 61000104        	   121: 	bsr SerialPeekCharDirect
00:0000157E 7000            	   122: 	moveq #E_Ok,d0
00:00001580 4E75            	   123: 	rts
                            	   124: 
                            	   125: serial_putchar_direct:
00:00001582 6100017A        	   126: 	bsr SerialPutCharDirect
00:00001586 7000            	   127: 	moveq #E_Ok,d0
00:00001588 4E75            	   128: 	rts
                            	   129: 
                            	   130: serial_putbuf:
                            	   131: serial_getbuf:
                            	   132: serial_set_inpos:
                            	   133: serial_set_outpos:
00:0000158A 700A            	   134: 	moveq #E_NotSupported,d0
00:0000158C 4E75            	   135: 	rts
                            	   136: 
                            	   137: ;------------------------------------------------------------------------------
                            	   138: ; Initialize the serial port an enhanced 6551 circuit.
                            	   139: ;
                            	   140: ; Select internal baud rate clock divider for 9600 baud
                            	   141: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	   142: ; Note that the byte order is swapped.
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: SerialInit:
00:0000158E 427900100162    	   146: 	clr.w		SerHeadRcv					; clear receive buffer indexes
00:00001594 427900100160    	   147: 	clr.w		SerTailRcv
00:0000159A 427900100168    	   148: 	clr.w		SerHeadXmit					; clear transmit buffer indexes
00:000015A0 427900100166    	   149: 	clr.w		SerTailXmit
00:000015A6 423900100164    	   150: 	clr.b		SerRcvXon						; and Xon,Xoff flags
00:000015AC 423900100165    	   151: 	clr.b		SerRcvXoff
00:000015B2 203C09000000    	   152: 	move.l	#$09000000,d0				; dtr,rts active, rxint enabled, no parity
00:000015B8 23C0FD060008    	   153: 	move.l	d0,ACIA+ACIA_CMD
                            	   154: ;	move.l	#$1E00F700,d0				; fifos enabled
00:000015BE 203C1E000000    	   155: 	move.l	#$1E000000,d0				; fifos disabled
00:000015C4 23C0FD06000C    	   156: 	move.l	d0,ACIA+ACIA_CTRL
00:000015CA 4E75            	   157: 	rts
                            	   158: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	   159: ;	move.l	d0,ACIA+ACIA_CMD
                            	   160: ;	move.l	#300000,d2					; wait 100 ms
                            	   161: ;	bra			.0001
                            	   162: ;.0003:
                            	   163: ;	swap		d2
                            	   164: ;.0001:
                            	   165: ;	nop
                            	   166: ;	dbra		d2,.0001
                            	   167: ;.0002:
                            	   168: ;	swap		d2
                            	   169: ;	dbra		d2,.0003
                            	   170: ;	move.l	#$07000000,d0				; clear break
                            	   171: ;	move.l	d0,ACIA+ACIA_CMD
                            	   172: ;	rts
                            	   173: 	
                            	   174: ;------------------------------------------------------------------------------
                            	   175: ; SerialGetChar
                            	   176: ;
                            	   177: ; Check the serial port buffer to see if there's a char available. If there's
                            	   178: ; a char available then return it. If the buffer is almost empty then send an
                            	   179: ; XON.
                            	   180: ;
                            	   181: ; Stack Space:
                            	   182: ;		2 long words
                            	   183: ; Parameters:
                            	   184: ;		none
                            	   185: ; Modifies:
                            	   186: ;		d0,a0
                            	   187: ; Returns:
                            	   188: ;		d1 = character or -1
                            	   189: ;------------------------------------------------------------------------------
                            	   190: 
                            	   191: SerialGetChar:
00:000015CC 2F02            	   192: 	move.l		d2,-(a7)
00:000015CE 4E7A0FE0        	   193: 	movec			coreno,d0
00:000015D2 4840            	   194: 	swap			d0
00:000015D4 7202            	   195: 	moveq			#SERIAL_SEMA,d1
00:000015D6 610009C2        	   196: 	bsr				LockSemaphore
00:000015DA 61000146        	   197: 	bsr				SerialRcvCount			; check number of chars in receive buffer
00:000015DE 0C400008        	   198: 	cmpi.w		#8,d0								; less than 8?
00:000015E2 621C            	   199: 	bhi				.sgc2
00:000015E4 4A3900100164    	   200: 	tst.b			SerRcvXon						; skip sending XON if already sent
00:000015EA 6614            	   201: 	bne	  		.sgc2            		; XON already sent?
00:000015EC 123C0011        	   202: 	move.b		#XON,d1							; if <8 send an XON
00:000015F0 423900100165    	   203: 	clr.b			SerRcvXoff					; clear XOFF status
00:000015F6 13C100100164    	   204: 	move.b		d1,SerRcvXon				; flag so we don't send it multiple times
00:000015FC 6100009C        	   205: 	bsr				SerialPutChar				; send it
                            	   206: .sgc2:
00:00001600 323900100162    	   207: 	move.w		SerHeadRcv,d1				; check if anything is in buffer
00:00001606 B27900100160    	   208: 	cmp.w			SerTailRcv,d1
00:0000160C 6720            	   209: 	beq				.NoChars						; no?
00:0000160E 41F900101000    	   210: 	lea				SerRcvBuf,a0
00:00001614 12301000        	   211: 	move.b		(a0,d1.w),d1				; get byte from buffer
00:00001618 527900100162    	   212: 	addi.w		#1,SerHeadRcv
00:0000161E 02790FFF00100162	   213: 	andi.w		#$FFF,SerHeadRcv		; 4k wrap around
00:00001626 0281000000FF    	   214: 	andi.l		#$FF,d1
00:0000162C 6002            	   215: 	bra				.Xit
                            	   216: .NoChars:
00:0000162E 72FF            	   217: 	moveq			#-1,d1
                            	   218: .Xit:
00:00001630 C342            	   219: 	exg				d1,d2
00:00001632 4E7A0FE0        	   220: 	movec			coreno,d0
00:00001636 4840            	   221: 	swap			d0
00:00001638 7202            	   222: 	moveq			#SERIAL_SEMA,d1
00:0000163A 6100099A        	   223: 	bsr				UnlockSemaphore
00:0000163E C541            	   224: 	exg				d2,d1
00:00001640 241F            	   225: 	move.l		(a7)+,d2
00:00001642 4E75            	   226: 	rts
                            	   227: 
                            	   228: ;------------------------------------------------------------------------------
                            	   229: ; SerialPeekChar
                            	   230: ;
                            	   231: ; Check the serial port buffer to see if there's a char available. If there's
                            	   232: ; a char available then return it. But don't update the buffer indexes. No need
                            	   233: ; to send an XON here.
                            	   234: ;
                            	   235: ; Stack Space:
                            	   236: ;		1 long word
                            	   237: ; Parameters:
                            	   238: ;		none
                            	   239: ; Modifies:
                            	   240: ;		d0,a0
                            	   241: ; Returns:
                            	   242: ;		d1 = character or -1
                            	   243: ;------------------------------------------------------------------------------
                            	   244: 
                            	   245: SerialPeekChar:
00:00001644 2F02            	   246: 	move.l d2,-(a7)
00:00001646 4E7A0FE0        	   247: 	movec	coreno,d0
00:0000164A 4840            	   248: 	swap d0
00:0000164C 7202            	   249: 	moveq	#SERIAL_SEMA,d1
00:0000164E 6100094A        	   250: 	bsr	LockSemaphore
00:00001652 343900100162    	   251: 	move.w SerHeadRcv,d2		; check if anything is in buffer
00:00001658 B47900100160    	   252: 	cmp.w	SerTailRcv,d2
00:0000165E 670C            	   253: 	beq	.NoChars				; no?
00:00001660 41F900101000    	   254: 	lea	SerRcvBuf,a0
00:00001666 14302000        	   255: 	move.b (a0,d2.w),d2		; get byte from buffer
00:0000166A 6002            	   256: 	bra	.Xit
                            	   257: .NoChars:
00:0000166C 74FF            	   258: 	moveq	#-1,d2
                            	   259: .Xit:
00:0000166E 4E7A0FE0        	   260: 	movec	coreno,d0
00:00001672 4840            	   261: 	swap d0
00:00001674 7202            	   262: 	moveq	#SERIAL_SEMA,d1
00:00001676 6100095E        	   263: 	bsr	UnlockSemaphore
00:0000167A 2202            	   264: 	move.l	d2,d1
00:0000167C 241F            	   265: 	move.l (a7)+,d2
00:0000167E 4E75            	   266: 	rts
                            	   267: 
                            	   268: ;------------------------------------------------------------------------------
                            	   269: ; SerialPeekChar
                            	   270: ;		Get a character directly from the I/O port. This bypasses the input
                            	   271: ; buffer.
                            	   272: ;
                            	   273: ; Stack Space:
                            	   274: ;		0 words
                            	   275: ; Parameters:
                            	   276: ;		none
                            	   277: ; Modifies:
                            	   278: ;		d
                            	   279: ; Returns:
                            	   280: ;		d1 = character or -1
                            	   281: ;------------------------------------------------------------------------------
                            	   282: 
                            	   283: SerialPeekCharDirect:
00:00001680 1239FD060004    	   284: 	move.b	ACIA+ACIA_STAT,d1	; get serial status
00:00001686 08010003        	   285: 	btst		#3,d1							; look for Rx not empty
00:0000168A 670A            	   286: 	beq.s		.0001
00:0000168C 7200            	   287: 	moveq.l	#0,d1							; clear upper bits of return value
00:0000168E 1239FD060000    	   288: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
00:00001694 4E75            	   289: 	rts												; return
                            	   290: .0001:
00:00001696 72FF            	   291: 	moveq		#-1,d1
00:00001698 4E75            	   292: 	rts
                            	   293: 
                            	   294: ;------------------------------------------------------------------------------
                            	   295: ; SerialPutChar
                            	   296: ;		If there is a transmit buffer, adds the character to the transmit buffer
                            	   297: ; if it can, otherwise will wait for a byte to be freed up in the transmit
                            	   298: ; buffer (blocks).
                            	   299: ;		If there is no transmit buffer, put a character to the directly to the
                            	   300: ; serial transmitter. This routine blocks until the transmitter is empty. 
                            	   301: ;
                            	   302: ; Stack Space
                            	   303: ;		4 long words
                            	   304: ; Parameters:
                            	   305: ;		d1.b = character to put
                            	   306: ; Modifies:
                            	   307: ;		none
                            	   308: ;------------------------------------------------------------------------------
                            	   309: 
                            	   310: SerialPutChar:
                            	   311: .0004:
00:0000169A 4A7900040CD8    	   312: 	tst.w serial_dcb+DCB_OUTBUFSIZE	; buffered output?
00:000016A0 675C            	   313: 	beq.s SerialPutCharDirect
00:000016A2 48E7E080        	   314: 	movem.l d0/d1/d2/a0,-(a7)
00:000016A6 4E7A0FE0        	   315: 	movec	coreno,d0
00:000016AA 4840            	   316: 	swap d0
00:000016AC 7202            	   317: 	moveq	#SERIAL_SEMA,d1
00:000016AE 610008EA        	   318: 	bsr	LockSemaphore
00:000016B2 303900100166    	   319: 	move.w SerTailXmit,d0
00:000016B8 3400            	   320: 	move.w d0,d2
00:000016BA 5240            	   321: 	addi.w #1,d0
00:000016BC B07900040CD8    	   322: 	cmp.w serial_dcb+DCB_OUTBUFSIZE,d0
00:000016C2 6502            	   323: 	blo.s .0002
00:000016C4 4240            	   324: 	clr.w d0
                            	   325: .0002:
00:000016C6 B07900100168    	   326: 	cmp.w SerHeadXmit,d0			; Is Xmit buffer full?
00:000016CC 660E            	   327: 	bne.s .0003
00:000016CE 4E7A0FE0        	   328: 	movec	coreno,d0						; buffer full, unlock semaphore and wait
00:000016D2 4840            	   329: 	swap d0
00:000016D4 7202            	   330: 	moveq	#SERIAL_SEMA,d1
00:000016D6 610008FE        	   331: 	bsr	UnlockSemaphore
00:000016DA 60BE            	   332: 	bra.s .0004
                            	   333: .0003:
00:000016DC 33C000100166    	   334: 	move.w d0,SerTailXmit			; update tail pointer
00:000016E2 41F900102000    	   335: 	lea SerXmitBuf,a0
00:000016E8 11812000        	   336: 	move.b d1,(a0,d2.w)				; store byte in Xmit buffer
00:000016EC 4E7A0FE0        	   337: 	movec	coreno,d0						; unlock semaphore
00:000016F0 4840            	   338: 	swap d0
00:000016F2 7202            	   339: 	moveq	#SERIAL_SEMA,d1
00:000016F4 610008E0        	   340: 	bsr	UnlockSemaphore
00:000016F8 4CDF0107        	   341: 	movem.l (a7)+,d0/d1/d2/a0
00:000016FC 4E75            	   342: 	rts
                            	   343: 
                            	   344: SerialPutCharDirect:
00:000016FE 48E7C000        	   345: 	movem.l	d0/d1,-(a7)							; push d0,d1
                            	   346: .0001:
00:00001702 1039FD060004    	   347: 	move.b ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
00:00001708 08000004        	   348: 	btst #4,d0								; bit #4 of the status reg
00:0000170C 67F4            	   349: 	beq.s	.0001			    			; branch if transmitter is not empty
00:0000170E 13C1FD060000    	   350: 	move.b d1,ACIA+ACIA_TX		; send the byte
00:00001714 4CDF0003        	   351: 	movem.l	(a7)+,d0/d1				; pop d0,d1
00:00001718 4E75            	   352: 	rts
                            	   353: 	
                            	   354: ;------------------------------------------------------------------------------
                            	   355: ; Reverse the order of bytes in d1.
                            	   356: ;------------------------------------------------------------------------------
                            	   357: 
                            	   358: SerialRbo:
00:0000171A E159            	   359: 	rol.w		#8,d1
00:0000171C 4841            	   360: 	swap		d1
00:0000171E E159            	   361: 	rol.w		#8,d1
00:00001720 4E75            	   362: 	rts
                            	   363: 
                            	   364: ;------------------------------------------------------------------------------
                            	   365: ; Calculate number of character in input buffer
                            	   366: ;
                            	   367: ; Returns:
                            	   368: ;		d0 = number of bytes in buffer.
                            	   369: ;------------------------------------------------------------------------------
                            	   370: 
                            	   371: SerialRcvCount:
00:00001722 303900100160    	   372: 	move.w	SerTailRcv,d0
00:00001728 907900100162    	   373: 	sub.w		SerHeadRcv,d0
00:0000172E 6C10            	   374: 	bge			.0001
00:00001730 303C1000        	   375: 	move.w	#$1000,d0
00:00001734 907900100162    	   376: 	sub.w		SerHeadRcv,d0
00:0000173A D07900100160    	   377: 	add.w		SerTailRcv,d0
                            	   378: .0001:
00:00001740 4E75            	   379: 	rts
                            	   380: 
                            	   381: ;------------------------------------------------------------------------------
                            	   382: ; Serial IRQ routine
                            	   383: ;
                            	   384: ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                            	   385: ; Received characters are buffered. If the buffer becomes full, new characters
                            	   386: ; will be lost.
                            	   387: ;
                            	   388: ; Parameters:
                            	   389: ;		none
                            	   390: ; Modifies:
                            	   391: ;		none
                            	   392: ; Returns:
                            	   393: ;		d1 = -1 if IRQ handled, otherwise zero
                            	   394: ;------------------------------------------------------------------------------
                            	   395: 
                            	   396: SerialIRQ:
00:00001742 46FC2300        	   397: 	move.w	#$2300,sr						; disable lower level IRQs
00:00001746 48E7E080        	   398: 	movem.l	d0/d1/d2/a0,-(a7)
00:0000174A 4E7A0FE0        	   399: 	movec	coreno,d0
00:0000174E 4840            	   400: 	swap d0
00:00001750 7202            	   401: 	moveq	#SERIAL_SEMA,d1
00:00001752 61000846        	   402: 	bsr	LockSemaphore
                            	   403: sirqNxtByte:
00:00001756 1239FD060004    	   404: 	move.b ACIA+ACIA_STAT,d1		; check the status
00:0000175C 08010003        	   405: 	btst #3,d1									; bit 3 = rx full
00:00001760 6756            	   406: 	beq	notRxInt
00:00001762 1239FD060000    	   407: 	move.b ACIA+ACIA_RX,d1
                            	   408: sirq0001:
00:00001768 303900100160    	   409: 	move.w SerTailRcv,d0				; check if recieve buffer full
00:0000176E 5240            	   410: 	addi.w #1,d0
00:00001770 02400FFF        	   411: 	andi.w #$FFF,d0
00:00001774 B07900100162    	   412: 	cmp.w	SerHeadRcv,d0
00:0000177A 673C            	   413: 	beq	sirqRxFull
00:0000177C 33C000100160    	   414: 	move.w d0,SerTailRcv				; update tail pointer
00:00001782 5340            	   415: 	subi.w #1,d0								; backup
00:00001784 02400FFF        	   416: 	andi.w #$FFF,d0
00:00001788 41F900101000    	   417: 	lea	SerRcvBuf,a0						; a0 = buffer address
00:0000178E 11810000        	   418: 	move.b d1,(a0,d0.w)					; store recieved byte in buffer
00:00001792 4A3900100165    	   419: 	tst.b	SerRcvXoff						; check if xoff already sent
00:00001798 66BC            	   420: 	bne	sirqNxtByte
00:0000179A 6186            	   421: 	bsr	SerialRcvCount					; if more than 4080 chars in buffer
00:0000179C 0C400FF0        	   422: 	cmpi.w #4080,d0
00:000017A0 65B4            	   423: 	blo	sirqNxtByte
00:000017A2 123C0013        	   424: 	move.b #XOFF,d1							; send an XOFF
00:000017A6 423900100164    	   425: 	clr.b	SerRcvXon							; clear XON status
00:000017AC 13C100100165    	   426: 	move.b d1,SerRcvXoff				; set XOFF status
00:000017B2 6100FEE6        	   427: 	bsr	SerialPutChar						; send XOFF
00:000017B6 609E            	   428: 	bra	sirqNxtByte     				; check the status for another byte
                            	   429: sirqRxFull:
                            	   430: notRxInt:
00:000017B8 08010004        	   431: 	btst #4,d1									; TX empty?
00:000017BC 6748            	   432: 	beq.s notTxInt
00:000017BE 4A390010016A    	   433: 	tst.b SerXmitXoff						; and allowed to send?
00:000017C4 6640            	   434: 	bne.s sirqXmitOff
00:000017C6 4AB900040CD8    	   435: 	tst.l serial_dcb+DCB_OUTBUFSIZE	; Is there a buffer being transmitted?
00:000017CC 6738            	   436: 	beq.s notTxInt
00:000017CE 303900100168    	   437: 	move.w SerHeadXmit,d0
00:000017D4 B07900100166    	   438: 	cmp.w SerTailXmit,d0
00:000017DA 672A            	   439: 	beq.s sirqTxEmpty
00:000017DC 41F900102000    	   440: 	lea SerXmitBuf,a0
00:000017E2 12300000        	   441: 	move.b (a0,d0.w),d1
00:000017E6 13C1FD060000    	   442: 	move.b d1,ACIA+ACIA_TX			; transmit character
00:000017EC 527900100168    	   443: 	addi.w #1,SerHeadXmit				; advance head index
00:000017F2 303900040CD8    	   444: 	move.w serial_dcb+DCB_OUTBUFSIZE,d0
00:000017F8 B07900100168    	   445: 	cmp.w SerHeadXmit,d0
00:000017FE 6206            	   446: 	bhi.s sirq0002
00:00001800 427900100168    	   447: 	clr.w SerHeadXmit						; wrap around
                            	   448: sirq0002:
                            	   449: sirqXmitOff:
                            	   450: sirqTxEmpty:
                            	   451: notTxInt:
00:00001806 4E7A0FE0        	   452: 	movec	coreno,d0
00:0000180A 4840            	   453: 	swap d0
00:0000180C 7202            	   454: 	moveq	#SERIAL_SEMA,d1
00:0000180E 610007C6        	   455: 	bsr	UnlockSemaphore
00:00001812 4CDF0107        	   456: 	movem.l	(a7)+,d0/d1/d2/a0
00:00001816 4E73            	   457: 	rte
                            	   458: 
                            	   459: nmeSerial:
00:00001818 53657269616C    	   460: 	dc.b		"Serial",0
00:0000181E 00
                            	   461: 
                            	   462: 

Source: "boot.x68"
                            	   562: 	include "framebuf.x68"

Source: "framebuf.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Video frame buffer
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 	code
                            	    43: 	even
                            	    44: setup_framebuf:
00:00001820 48E78080        	    45: 	movem.l d0/a0,-(a7)
00:00001824 7020            	    46: 	moveq #32,d0
00:00001826 41F900040D18    	    47: 	lea.l framebuf_dcb,a0
                            	    48: .0001:
00:0000182C 4298            	    49: 	clr.l (a0)+
00:0000182E 51C8FFFC        	    50: 	dbra d0,.0001
00:00001832 23FC204243440004	    51: 	move.l #$20424344,framebuf_dcb+DCB_MAGIC			; 'DCB'
00:0000183A 0D18
00:0000183C 23FC4D4152460004	    52: 	move.l #$4D415246,framebuf_dcb+DCB_NAME				; 'FRAMEBUF'
00:00001844 0D1C
00:00001846 23FC004655420004	    53: 	move.l #$00465542,framebuf_dcb+DCB_NAME+4
00:0000184E 0D20
00:00001850 23FC0000198C0004	    54: 	move.l #framebuf_cmdproc,framebuf_dcb+DCB_CMDPROC
00:00001858 0D30
00:0000185A 203C40000000    	    55: 	move.l #$40000000,d0
00:00001860 23C000040D50    	    56: 	move.l d0,framebuf_dcb+DCB_INBUFPTR
00:00001866 23C000040D54    	    57: 	move.l d0,framebuf_dcb+DCB_OUTBUFPTR
00:0000186C 23FC004000000004	    58: 	move.l #$00400000,framebuf_dcb+DCB_INBUFSIZE
00:00001874 0D58
00:00001876 23FC004000000004	    59: 	move.l #$00400000,framebuf_dcb+DCB_OUTBUFSIZE
00:0000187E 0D5C
00:00001880 4CDF0101        	    60: 	movem.l (a7)+,d0/a0
                            	    61: 	; fall through
                            	    62: 
                            	    63: framebuf_init:
00:00001884 13FC0001FD200000	    64: 	move.b #1,FRAMEBUF+0		; turn on frame buffer
00:0000188C 13FC0001FD200001	    65: 	move.b #1,FRAMEBUF+1		; color depth 16 BPP
00:00001894 13FC0011FD200002	    66: 	move.b #$11,FRAMEBUF+2	; hres 1:1 vres 1:1
00:0000189C 13FC003BFD200004	    67: 	move.b #59,FRAMEBUF+4		; burst length
00:000018A4 23FC0000FF3F0004	    68: 	move.l #$ff3f,framebuf_dcb+DCB_FGCOLOR	; white
00:000018AC 0D7C
00:000018AE 23FC0000000F0004	    69: 	move.l #$000f,framebuf_dcb+DCB_BKCOLOR	; medium blue
00:000018B6 0D78
00:000018B8 42B900040D38    	    70: 	clr.l framebuf_dcb+DCB_OUTPOSX
00:000018BE 42B900040D3C    	    71: 	clr.l framebuf_dcb+DCB_OUTPOSY
00:000018C4 42B900040D44    	    72: 	clr.l framebuf_dcb+DCB_INPOSX
00:000018CA 42B900040D48    	    73: 	clr.l framebuf_dcb+DCB_INPOSY
00:000018D0 13FC000100040D80	    74: 	move.b #1,framebuf_dcb+DCB_OPCODE	; raster op = copy
00:000018D8 33FC078000040D6C	    75: 	move.w #1920,framebuf_dcb+DCB_OUTDIMX		; set rows and columns
00:000018E0 33FC043800040D70	    76: 	move.w #1080,framebuf_dcb+DCB_OUTDIMY
00:000018E8 33FC078000040D60	    77: 	move.w #1920,framebuf_dcb+DCB_INDIMX			; set rows and columns
00:000018F0 33FC043800040D64	    78: 	move.w #1080,framebuf_dcb+DCB_INDIMY
00:000018F8 23FC400000000004	    79: 	move.l #$40000000,framebuf_dcb+DCB_INBUFPTR
00:00001900 0D50
00:00001902 23FC404000000004	    80: 	move.l #$40400000,framebuf_dcb+DCB_INBUFPTR2
00:0000190A 0D88
00:0000190C 23FC400000000004	    81: 	move.l #$40000000,framebuf_dcb+DCB_OUTBUFPTR
00:00001914 0D54
00:00001916 23FC404000000004	    82: 	move.l #$40400000,framebuf_dcb+DCB_OUTBUFPTR2
00:0000191E 0D8C
00:00001920 42B9FD200010    	    83: 	move.l #$00000000,FRAMEBUF+16	; base addr 1
00:00001926 23FC00004000FD20	    84: 	move.l #$00004000,FRAMEBUF+24	; base addr 2
00:0000192E 0018
00:00001930 4E75            	    85: 	rts
                            	    86: 
                            	    87: 	align 2
                            	    88: FRAMEBUF_CMDTBL:
00:00001934 00001884        	    89: 	dc.l framebuf_init				; 0
00:00001938 000019AE        	    90: 	dc.l framebuf_stat
00:0000193C 000019AE        	    91: 	dc.l framebuf_putchar
00:00001940 00001A5A        	    92: 	dc.l framebuf_putbuf
00:00001944 000019AE        	    93: 	dc.l framebuf_getchar
00:00001948 00001A5A        	    94: 	dc.l framebuf_getbuf
00:0000194C 000019B0        	    95: 	dc.l framebuf_set_inpos
00:00001950 000019BE        	    96: 	dc.l framebuf_set_outpos
00:00001954 00001A5A        	    97: 	dc.l framebuf_stub
00:00001958 00001A5A        	    98: 	dc.l framebuf_stub
00:0000195C 00001A5A        	    99: 	dc.l framebuf_stub				; 10
00:00001960 00001A5A        	   100: 	dc.l framebuf_stub
00:00001964 00001B98        	   101: 	dc.l framebuf_clear
00:00001968 000019F8        	   102: 	dc.l framebuf_swapbuf
00:0000196C 000019DC        	   103: 	dc.l framebuf_setbuf1
00:00001970 000019EA        	   104: 	dc.l framebuf_setbuf2
00:00001974 000019CC        	   105: 	dc.l framebuf_getbuf1
00:00001978 000019D4        	   106: 	dc.l framebuf_getbuf2
00:0000197C 00001A9E        	   107: 	dc.l framebuf_writeat
00:00001980 00001A50        	   108: 	dc.l framebuf_set_unit
00:00001984 00001A6E        	   109: 	dc.l framebuf_get_dimen	; 20
00:00001988 00001A5E        	   110: 	dc.l framebuf_get_color
                            	   111: 
                            	   112: framebuf_cmdproc:
00:0000198C 0C060016        	   113: 	cmpi.b #22,d6
00:00001990 6418            	   114: 	bhs.s .0001
00:00001992 48E70280        	   115: 	movem.l d6/a0,-(a7)
00:00001996 4886            	   116: 	ext.w d6
00:00001998 E546            	   117: 	asl.w #2,d6
00:0000199A 41FAFF98        	   118: 	lea FRAMEBUF_CMDTBL,a0
00:0000199E 20706000        	   119: 	move.l (a0,d6.w),a0
00:000019A2 4E90            	   120: 	jsr (a0)
00:000019A4 4CDF0140        	   121: 	movem.l (a7)+,d6/a0
00:000019A8 4E75            	   122: 	rts
                            	   123: .0001:
00:000019AA 7002            	   124: 	moveq #E_Func,d0
00:000019AC 4E75            	   125: 	rts
                            	   126: 
                            	   127: framebuf_stat:
                            	   128: framebuf_putchar:
                            	   129: framebuf_getchar:
00:000019AE 4E75            	   130: 	rts
                            	   131: 
                            	   132: framebuf_set_inpos:
00:000019B0 23C100040D44    	   133: 	move.l d1,framebuf_dcb+DCB_INPOSX
00:000019B6 23C200040D48    	   134: 	move.l d2,framebuf_dcb+DCB_INPOSY
00:000019BC 4E75            	   135: 	rts
                            	   136: framebuf_set_outpos:
00:000019BE 23C100040D38    	   137: 	move.l d1,framebuf_dcb+DCB_OUTPOSX
00:000019C4 23C200040D3C    	   138: 	move.l d2,framebuf_dcb+DCB_OUTPOSY
00:000019CA 4E75            	   139: 	rts
                            	   140: 
                            	   141: framebuf_getbuf1:
00:000019CC 223900040D54    	   142: 	move.l framebuf_dcb+DCB_OUTBUFPTR,d1
00:000019D2 4E75            	   143: 	rts
                            	   144: framebuf_getbuf2:
00:000019D4 223900040D8C    	   145: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,d1
00:000019DA 4E75            	   146: 	rts
                            	   147: framebuf_setbuf1:
00:000019DC 23C100040D54    	   148: 	move.l d1,framebuf_dcb+DCB_OUTBUFPTR
00:000019E2 23C200040D5C    	   149: 	move.l d2,framebuf_dcb+DCB_OUTBUFSIZE
00:000019E8 4E75            	   150: 	rts
                            	   151: framebuf_setbuf2:
00:000019EA 23C100040D8C    	   152: 	move.l d1,framebuf_dcb+DCB_OUTBUFPTR2
00:000019F0 23C200040D94    	   153: 	move.l d2,framebuf_dcb+DCB_OUTBUFSIZE2
00:000019F6 4E75            	   154: 	rts
                            	   155: 
                            	   156: framebuf_swapbuf:
00:000019F8 48E76000        	   157: 	movem.l d1/d2,-(a7)
00:000019FC 1239FD200003    	   158: 	move.b FRAMEBUF+3,d1
00:00001A02 0A010001        	   159: 	eor.b #1,d1
00:00001A06 13C1FD200003    	   160: 	move.b d1,FRAMEBUF+3					; page flip
00:00001A0C 243900040D54    	   161: 	move.l framebuf_dcb+DCB_OUTBUFPTR,d2
00:00001A12 203900040D8C    	   162: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,d0
00:00001A18 23C200040D8C    	   163: 	move.l d2,framebuf_dcb+DCB_OUTBUFPTR2
00:00001A1E 23C000040D54    	   164: 	move.l d0,framebuf_dcb+DCB_OUTBUFPTR
00:00001A24 90BC40000000    	   165: 	sub.l #$40000000,d0
00:00001A2A 23C0FD300010    	   166: 	move.l d0,GFXACCEL+16
00:00001A30 243900040D50    	   167: 	move.l framebuf_dcb+DCB_INBUFPTR,d2
00:00001A36 203900040D88    	   168: 	move.l framebuf_dcb+DCB_INBUFPTR2,d0
00:00001A3C 23C200040D88    	   169: 	move.l d2,framebuf_dcb+DCB_INBUFPTR2
00:00001A42 23C000040D50    	   170: 	move.l d0,framebuf_dcb+DCB_INBUFPTR
00:00001A48 4CDF0006        	   171: 	movem.l (a7)+,d1/d2
00:00001A4C 7000            	   172: 	move.l #E_Ok,d0
00:00001A4E 4E75            	   173: 	rts
                            	   174: 
                            	   175: framebuf_set_unit:
00:00001A50 23C100040D98    	   176: 	move.l d1,framebuf_dcb+DCB_UNIT
00:00001A56 7000            	   177: 	move.l #E_Ok,d0
00:00001A58 4E75            	   178: 	rts
                            	   179: 
                            	   180: framebuf_getbuf:
                            	   181: framebuf_putbuf:
                            	   182: framebuf_stub:
00:00001A5A 700A            	   183: 	moveq #E_NotSupported,d0
00:00001A5C 4E75            	   184: 	rts
                            	   185: 
                            	   186: framebuf_get_color:
00:00001A5E 223900040D7C    	   187: 	move.l framebuf_dcb+DCB_FGCOLOR,d1
00:00001A64 243900040D78    	   188: 	move.l framebuf_dcb+DCB_BKCOLOR,d2
00:00001A6A 7000            	   189: 	move.l #E_Ok,d0
00:00001A6C 4E75            	   190: 	rts
                            	   191: 
                            	   192: framebuf_get_dimen:
00:00001A6E 4A00            	   193: 	cmpi.b #0,d0
00:00001A70 6616            	   194: 	bne.s .0001
00:00001A72 223900040D6C    	   195: 	move.l framebuf_dcb+DCB_OUTDIMX,d1
00:00001A78 243900040D70    	   196: 	move.l framebuf_dcb+DCB_OUTDIMY,d2
00:00001A7E 263900040D74    	   197: 	move.l framebuf_dcb+DCB_OUTDIMZ,d3
00:00001A84 7000            	   198: 	move.l #E_Ok,d0
00:00001A86 4E75            	   199: 	rts
                            	   200: .0001:
00:00001A88 223900040D60    	   201: 	move.l framebuf_dcb+DCB_INDIMX,d1
00:00001A8E 243900040D64    	   202: 	move.l framebuf_dcb+DCB_INDIMY,d2
00:00001A94 263900040D68    	   203: 	move.l framebuf_dcb+DCB_INDIMZ,d3
00:00001A9A 7000            	   204: 	move.l #E_Ok,d0
00:00001A9C 4E75            	   205: 	rts
                            	   206: 
                            	   207: ;---------------------------------------------------------------------
                            	   208: ; The following uses point plot hardware built into the frame buffer.
                            	   209: ; It is assumed that previous commands have finished already.
                            	   210: ; It may take a few dozen clocks for a command to complete. As long
                            	   211: ; as this routine is not called to fast in succession it should be
                            	   212: ; okay.
                            	   213: ;---------------------------------------------------------------------
                            	   214: 
                            	   215: framebuf_writeat:
                            	   216: plot:
00:00001A9E 6070            	   217: 	bra plot_sw
00:00001AA0 48E76080        	   218: 	movem.l d1/d2/a0,-(a7)
00:00001AA4 207CFD200000    	   219: 	move.l #FRAMEBUF,a0
                            	   220: .0001:
                            	   221: ;	tst.b 40(a0)				; wait for any previous command to finish
                            	   222: ;	bne.s .0001										; Then set:
00:00001AAA E159            	   223: 	rol.w #8,d1										; reverse byte order
00:00001AAC 31410020        	   224: 	move.w d1,32(a0)							; pixel x co-ord
00:00001AB0 E15A            	   225: 	rol.w #8,d2										; reverse byte order
00:00001AB2 31420022        	   226: 	move.w d2,34(a0)							; pixel y co-ord
00:00001AB6 317900040D7C002C	   227: 	move.w framebuf_dcb+DCB_FGCOLOR,44(a0)	; pixel color
00:00001ABE 117900040D800029	   228: 	move.b framebuf_dcb+DCB_OPCODE,41(a0)	; set raster operation
00:00001AC6 117C00020028    	   229: 	move.b #2,40(a0)							; point plot command
00:00001ACC 4CDF0106        	   230: 	movem.l (a7)+,d1/d2/a0
00:00001AD0 4E75            	   231: 	rts
                            	   232: 
                            	   233: ;-------------------------------------------
                            	   234: ; In case of lacking hardware plot
                            	   235: ;-------------------------------------------
                            	   236: 	align 2
                            	   237: plottbl:
00:00001AD4 00001B82        	   238: 	dc.l plot_black
00:00001AD8 00001B74        	   239: 	dc.l plot_copy
00:00001ADC 00001B74        	   240: 	dc.l plot_copy
00:00001AE0 00001B60        	   241: 	dc.l plot_and
00:00001AE4 00001B36        	   242: 	dc.l plot_or
00:00001AE8 00001B4A        	   243: 	dc.l plot_xor
00:00001AEC 00001B74        	   244: 	dc.l plot_copy
00:00001AF0 00001B74        	   245: 	dc.l plot_copy
00:00001AF4 00001B74        	   246: 	dc.l plot_copy
00:00001AF8 00001B74        	   247: 	dc.l plot_copy
00:00001AFC 00001B74        	   248: 	dc.l plot_copy
00:00001B00 00001B74        	   249: 	dc.l plot_copy
00:00001B04 00001B74        	   250: 	dc.l plot_copy
00:00001B08 00001B74        	   251: 	dc.l plot_copy
00:00001B0C 00001B8C        	   252: 	dc.l plot_white
                            	   253: 
                            	   254: plot_sw:
00:00001B10 48E778C0        	   255: 	movem.l d1/d2/d3/d4/a0/a1,-(a7)
00:00001B14 C4F900040D6C    	   256: 	mulu framebuf_dcb+DCB_OUTDIMX,d2	; multiply y by screen width
                            	   257: ;	move.l d1,d3
                            	   258: ;	andi.l #30,d3
                            	   259: ;	moveq #30,d4
                            	   260: ;	sub.l d4,d3
                            	   261: ;	andi.l #$FFFFFFE0,d1
                            	   262: ;	or.l d3,d1
00:00001B1A 48C1            	   263: 	ext.l d1											; clear high-order word of x
00:00001B1C D481            	   264: 	add.l d1,d2										; add in x co-ord
00:00001B1E D482            	   265: 	add.l d2,d2										; *2 for 16 BPP
00:00001B20 207900040D8C    	   266: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,a0		; where the draw occurs
00:00001B26 163900040D80    	   267: 	move.b framebuf_dcb+DCB_OPCODE,d3				; raster operation
00:00001B2C 4883            	   268: 	ext.w d3
00:00001B2E E54B            	   269: 	lsl.w #2,d3
00:00001B30 227B30A2        	   270: 	move.l plottbl(pc,d3.w),a1
00:00001B34 4ED1            	   271: 	jmp (a1)
                            	   272: plot_or:
00:00001B36 38302800        	   273: 	move.w (a0,d2.l),d4	
00:00001B3A 887900040D7C    	   274: 	or.w framebuf_dcb+DCB_FGCOLOR,d4
00:00001B40 31842800        	   275: 	move.w d4,(a0,d2.l)
00:00001B44 4CDF031E        	   276: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B48 4E75            	   277: 	rts
                            	   278: plot_xor:
00:00001B4A 38302800        	   279: 	move.w (a0,d2.l),d4
00:00001B4E 363900040D7C    	   280: 	move.w framebuf_dcb+DCB_FGCOLOR,d3	
00:00001B54 B744            	   281: 	eor.w d3,d4
00:00001B56 31842800        	   282: 	move.w d4,(a0,d2.l)
00:00001B5A 4CDF031E        	   283: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B5E 4E75            	   284: 	rts
                            	   285: plot_and:
00:00001B60 38302800        	   286: 	move.w (a0,d2.l),d4	
00:00001B64 C87900040D7C    	   287: 	and.w framebuf_dcb+DCB_FGCOLOR,d4
00:00001B6A 31842800        	   288: 	move.w d4,(a0,d2.l)
00:00001B6E 4CDF031E        	   289: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B72 4E75            	   290: 	rts
                            	   291: plot_copy:
00:00001B74 31B900040D7C2800	   292: 	move.w framebuf_dcb+DCB_FGCOLOR,(a0,d2.l)
00:00001B7C 4CDF031E        	   293: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B80 4E75            	   294: 	rts
                            	   295: plot_black:
00:00001B82 42702800        	   296: 	clr.w (a0,d2.l)
00:00001B86 4CDF031E        	   297: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B8A 4E75            	   298: 	rts
                            	   299: plot_white:
00:00001B8C 31BCFF7F2800    	   300: 	move.w #$FF7F,(a0,d2.l)
00:00001B92 4CDF031E        	   301: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B96 4E75            	   302: 	rts
                            	   303: 
                            	   304: 
                            	   305: framebuf_clear:
00:00001B98 48E76880        	   306: 	movem.l d1/d2/d4/a0,-(a7)
00:00001B9C 243900040D78    	   307: 	move.l framebuf_dcb+DCB_BKCOLOR,d2
00:00001BA2 2202            	   308: 	move.l d2,d1
00:00001BA4 E15A            	   309: 	rol.w #8,d2							; d2 = background color
00:00001BA6 4842            	   310: 	swap d2									; high bits = background color
00:00001BA8 3401            	   311: 	move.w d1,d2						; low bits = background color
00:00001BAA E15A            	   312: 	rol.w #8,d2
00:00001BAC 2802            	   313: 	move.l d2,d4						; save for later
00:00001BAE 207900040D8C    	   314: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,a0		; where the draw occurs
00:00001BB4 42B97FFFFFF8    	   315: 	move.l #0,$7FFFFFF8			; set burst length zero
00:00001BBA 223900040D6C    	   316: 	move.l framebuf_dcb+DCB_OUTDIMX,d1
00:00001BC0 243900040D70    	   317: 	move.l framebuf_dcb+DCB_OUTDIMY,d2
00:00001BC6 C2C2            	   318: 	mulu d2,d1							; X dimen * Y dimen
00:00001BC8 E888            	   319: 	lsr.l #4,d0							; moving 16 pixels per iteration
00:00001BCA 6002            	   320: 	bra.s .loop
                            	   321: .loop2:
00:00001BCC 4840            	   322: 	swap d0
                            	   323: .loop:
00:00001BCE 2208            	   324: 	move.l a0,d1
00:00001BD0 61006F02        	   325: 	bsr rbo
00:00001BD4 23C17FFFFFF4    	   326: 	move.l d1,$7FFFFFF4			; set destination address
00:00001BDA 23C47FFFFFFC    	   327: 	move.l d4,$7FFFFFFC			; write value (color) to use and trigger write op
00:00001BE0 41E80020        	   328: 	add.l #32,a0						; advance pointer
00:00001BE4 51C8FFE8        	   329: 	dbra d0,.loop
00:00001BE8 4840            	   330: 	swap d0
00:00001BEA 51C8FFE0        	   331: 	dbra d0,.loop2
00:00001BEE 4CDF0116        	   332: 	movem.l (a7)+,d1/d2/d4/a0
00:00001BF2 7000            	   333: 	move.l #E_Ok,d0
00:00001BF4 4E75            	   334: 	rts
                            	   335: 
                            	   336: ; The following code using bursts of 1k pixels did not work (hardware).
                            	   337: ;
                            	   338: ;clear_bitmap_screen2:
                            	   339: ;	move.l gr_bitmap_screen,a0
                            	   340: ;clear_bitmap_screen3:
                            	   341: ;	movem.l d0/d2/a0,-(a7)
                            	   342: ;	move.l #$3F3F3F3F,$BFFFFFF4	; 32x64 byte burst
                            	   343: ;	move.w pen_color,d0
                            	   344: ;	swap d0
                            	   345: ;	move.w pen_color,d0
                            	   346: ;	move.w gr_width,d2		; calc. number of pixels on screen
                            	   347: ;	mulu gr_height,d2
                            	   348: ;	add.l #1023,d2				; rounding up
                            	   349: ;	lsr.l #8,d2						; divide by 1024 pixel update
                            	   350: ;	lsr.l #2,d2
                            	   351: ;.0001:
                            	   352: ;	move.l a0,$BFFFFFF8		; write update address
                            	   353: ;	add.l #2048,a0				; update pointer
                            	   354: ;	move.l d0,$BFFFFFFC		; trigger burst write of 2048 bytes
                            	   355: ;	dbra d2,.0001
                            	   356: ;	movem.l (a7)+,d0/d2/a0
                            	   357: ;	rts
                            	   358: 
                            	   359: ; More conventional but slow way of clearing the screen.
                            	   360: ;
                            	   361: ;clear_bitmap_screen:
                            	   362: ;	move.l gr_bitmap_screen,a0
                            	   363: ;clear_bitmap_screen1:
                            	   364: ;	movem.l d0/d2/a0,-(a7)
                            	   365: ;	move.w pen_color,d0
                            	   366: ;	swap d0
                            	   367: ;	move.w pen_color,d0
                            	   368: ;	move.w gr_width,d2		; calc. number of pixels on screen
                            	   369: ;	mulu gr_height,d2			; 800x600 = 480000
                            	   370: ;	bra.s .0001
                            	   371: ;.0002:
                            	   372: ;	swap d2
                            	   373: ;.0001:
                            	   374: ;	move.l d0,(a0)+
                            	   375: ;	dbra d2,.0001
                            	   376: ;	swap d2
                            	   377: ;	dbra d2,.0002
                            	   378: ;	movem.l (a7)+,d0/d2/a0
                            	   379: ;	rts
                            	   380: 
                            	   381: 

Source: "boot.x68"
                            	   563: 	include "gfxaccel.x68"

Source: "gfxaccel.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Graphics accelerator
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 	align 2
                            	    43: GFXACCEL_CMDTBL:
00:00001BF8 00001C74        	    44: 	dc.l gfxaccel_init				; 0
00:00001BFC 00001CCE        	    45: 	dc.l gfxaccel_stat
00:00001C00 00001CDC        	    46: 	dc.l gfxaccel_putchar
00:00001C04 00001CDC        	    47: 	dc.l gfxaccel_putbuf
00:00001C08 00001CDC        	    48: 	dc.l gfxaccel_getchar
00:00001C0C 00001CDC        	    49: 	dc.l gfxaccel_getbuf
00:00001C10 00001CDC        	    50: 	dc.l gfxaccel_set_inpos
00:00001C14 00001CDC        	    51: 	dc.l gfxaccel_set_outpos
00:00001C18 00001CDC        	    52: 	dc.l gfxaccel_stub
00:00001C1C 00001CDC        	    53: 	dc.l gfxaccel_stub
00:00001C20 00001CDC        	    54: 	dc.l gfxaccel_stub				; 10
00:00001C24 00001CDC        	    55: 	dc.l gfxaccel_stub
00:00001C28 00001CD8        	    56: 	dc.l gfxaccel_clear
00:00001C2C 00001CDC        	    57: 	dc.l gfxaccel_swapbuf
00:00001C30 00001CDC        	    58: 	dc.l gfxaccel_setbuf1
00:00001C34 00001CDC        	    59: 	dc.l gfxaccel_setbuf2
00:00001C38 00001CDC        	    60: 	dc.l gfxaccel_getbuf1
00:00001C3C 00001CDC        	    61: 	dc.l gfxaccel_getbuf2
00:00001C40 00001CDC        	    62: 	dc.l gfxaccel_writeat
00:00001C44 00001CDC        	    63: 	dc.l gfxaccel_set_unit
00:00001C48 00001CDC        	    64: 	dc.l gfxaccel_get_dimen	; 20
00:00001C4C 00001CE0        	    65: 	dc.l gfxaccel_get_color
00:00001C50 00001CDC        	    66: 	dc.l gfxaccel_get_inpos
00:00001C54 00001CDC        	    67: 	dc.l gfxaccel_get_outpos
00:00001C58 00001CDC        	    68: 	dc.l gfxaccel_get_outptr
00:00001C5C 00001CEA        	    69: 	dc.l gfxaccel_set_color
00:00001C60 00001D08        	    70: 	dc.l gfxaccel_set_color123
00:00001C64 00001CDC        	    71: 	dc.l gfxaccel_plot_point
00:00001C68 00001CDC        	    72: 	dc.l gfxaccel_draw_line
00:00001C6C 00001DA2        	    73: 	dc.l gfxaccel_draw_triangle
00:00001C70 00001D32        	    74: 	dc.l gfxaccel_draw_rectangle
                            	    75: 
                            	    76: 	code
                            	    77: 	even
                            	    78: setup_gfxaccel:
                            	    79: gfxaccel_init:
00:00001C74 23FC00000001FD30	    80: 	move.l #1,GFXACCEL							; select 16bpp color
00:00001C7C 0000
00:00001C7E 7200            	    81: 	move.l #$00000000,d1
00:00001C80 61006E52        	    82: 	bsr rbo
00:00001C84 23C1FD300010    	    83: 	move.l d1,GFXACCEL+$10	; base draw address
00:00001C8A 223C00007F80    	    84: 	move.l #32640,d1
00:00001C90 61006E42        	    85: 	bsr rbo
00:00001C94 23C1FD300014    	    86: 	move.l d1,GFXACCEL+$14				; render target x dimension
00:00001C9A 223C00004000    	    87: 	move.l #16384,d1
00:00001CA0 61006E32        	    88: 	bsr rbo
00:00001CA4 23C1FD300018    	    89: 	move.l d1,GFXACCEL+$18				; render target y dimension
00:00001CAA 4E75            	    90: 	rts
                            	    91: 
                            	    92: gfxaccel_cmdproc:
00:00001CAC 0C06001B        	    93: 	cmpi.b #27,d6
00:00001CB0 6418            	    94: 	bhs.s .0001
00:00001CB2 48E70280        	    95: 	movem.l d6/a0,-(a7)
00:00001CB6 4886            	    96: 	ext.w d6
00:00001CB8 E54E            	    97: 	lsl.w #2,d6
00:00001CBA 41FAFF3C        	    98: 	lea GFXACCEL_CMDTBL,a0
00:00001CBE 20706000        	    99: 	move.l (a0,d6.w),a0
00:00001CC2 4E90            	   100: 	jsr (a0)
00:00001CC4 4CDF0140        	   101: 	movem.l (a7)+,d6/a0
00:00001CC8 4E75            	   102: 	rts
                            	   103: .0001:
00:00001CCA 7002            	   104: 	moveq #E_Func,d0
00:00001CCC 4E75            	   105: 	rts
                            	   106: 
                            	   107: gfxaccel_stat:
00:00001CCE 2239FD300004    	   108: 	move.l GFXACCEL+4,d1
00:00001CD4 7000            	   109: 	moveq #E_Ok,d0
00:00001CD6 4E75            	   110: 	rts
                            	   111: 	
                            	   112: gfxaccel_clear:
00:00001CD8 7000            	   113: 	moveq #E_Ok,d0
00:00001CDA 4E75            	   114: 	rts
                            	   115: 
                            	   116: gfxaccel_putchar:
                            	   117: gfxaccel_getchar:
                            	   118: gfxaccel_putbuf:
                            	   119: gfxaccel_getbuf:
                            	   120: gfxaccel_set_inpos:
                            	   121: gfxaccel_set_outpos:
                            	   122: gfxaccel_stub:
                            	   123: gfxaccel_swapbuf:
                            	   124: gfxaccel_setbuf1:
                            	   125: gfxaccel_setbuf2:
                            	   126: gfxaccel_getbuf1:
                            	   127: gfxaccel_getbuf2:
                            	   128: gfxaccel_writeat:
                            	   129: gfxaccel_set_unit:
                            	   130: gfxaccel_get_dimen:
                            	   131: gfxaccel_get_inpos:
                            	   132: gfxaccel_get_outpos:
                            	   133: gfxaccel_get_outptr:
                            	   134: gfxaccel_plot_point:
                            	   135: gfxaccel_draw_line:
00:00001CDC 700A            	   136: 	move.l #E_NotSupported,d0
00:00001CDE 4E75            	   137: 	rts
                            	   138: 
                            	   139: gfxaccel_get_color:
00:00001CE0 2239FD300084    	   140: 	move.l GFXACCEL+$84,d1
00:00001CE6 7000            	   141: 	moveq #E_Ok,d0
00:00001CE8 4E75            	   142: 	rts
                            	   143: 
                            	   144: gfxaccel_set_color:
00:00001CEA 48E75000        	   145: 	movem.l d1/d3,-(a7)
00:00001CEE 61006DE4        	   146: 	bsr rbo
00:00001CF2 2601            	   147: 	move.l d1,d3
00:00001CF4 7201            	   148: 	move.l #1,d1
00:00001CF6 6100014E        	   149: 	bsr gfxaccel_wait
00:00001CFA 23C3FD300084    	   150: 	move.l d3,GFXACCEL+$84
00:00001D00 4CDF000A        	   151: 	movem.l (a7)+,d1/d3
00:00001D04 7000            	   152: 	moveq #E_Ok,d0
00:00001D06 4E75            	   153: 	rts
                            	   154: 
                            	   155: gfxaccel_set_color123:
00:00001D08 48E74800        	   156: 	movem.l d1/d4,-(a7)
00:00001D0C 61006DC6        	   157: 	bsr rbo
00:00001D10 2801            	   158: 	move.l d1,d4
00:00001D12 7203            	   159: 	move.l #3,d1
00:00001D14 61000130        	   160: 	bsr gfxaccel_wait
00:00001D18 23C4FD300084    	   161: 	move.l d4,GFXACCEL+$84
00:00001D1E 23C2FD300088    	   162: 	move.l d2,GFXACCEL+$88
00:00001D24 23C3FD30008C    	   163: 	move.l d3,GFXACCEL+$8C
00:00001D2A 4CDF0012        	   164: 	movem.l (a7)+,d1/d4
00:00001D2E 7000            	   165: 	moveq #E_Ok,d0
00:00001D30 4E75            	   166: 	rts
                            	   167: 
                            	   168: ; Draw a rectangle in the currently selected color
                            	   169: ;
                            	   170: ; Parameters:
                            	   171: ;		d1 	- x0 pos
                            	   172: ;		d2	- y0 pos
                            	   173: ;		d3	- x1 pos
                            	   174: ;		d4	- y1 pos
                            	   175: 
                            	   176: gfxaccel_draw_rectangle:
00:00001D32 48E76000        	   177: 	movem.l d1/d2,-(a7)
00:00001D36 7207            	   178: 	moveq #7,d1
00:00001D38 6100010C        	   179: 	bsr gfxaccel_wait
00:00001D3C 4CDF0006        	   180: 	movem.l (a7)+,d1/d2
00:00001D40 61006D92        	   181: 	bsr rbo
00:00001D44 23C1FD300038    	   182: 	move.l d1,GFXACCEL+$38					; p0 x
00:00001D4A 2202            	   183: 	move.l d2,d1
00:00001D4C 61006D86        	   184: 	bsr rbo
00:00001D50 23C1FD30003C    	   185: 	move.l d1,GFXACCEL+$3C					; p0 y
00:00001D56 223C00040001    	   186: 	move.l #$00040001,d1						; set active point 0
00:00001D5C 61006D76        	   187: 	bsr rbo
00:00001D60 23C1FD300000    	   188: 	move.l d1,GFXACCEL
00:00001D66 2203            	   189: 	move.l d3,d1
00:00001D68 61006D6A        	   190: 	bsr rbo
00:00001D6C 23C1FD300038    	   191: 	move.l d1,GFXACCEL+$38
00:00001D72 2204            	   192: 	move.l d4,d1
00:00001D74 61006D5E        	   193: 	bsr rbo
00:00001D78 23C1FD30003C    	   194: 	move.l d1,GFXACCEL+$3C
00:00001D7E 223C00050001    	   195: 	move.l #$00050001,d1						; set active point 1
00:00001D84 61006D4E        	   196: 	bsr rbo
00:00001D88 23C1FD300000    	   197: 	move.l d1,GFXACCEL
00:00001D8E 223C00000101    	   198: 	move.l #$00000101,d1
00:00001D94 61006D3E        	   199: 	bsr rbo
00:00001D98 23C1FD300000    	   200: 	move.l d1,GFXACCEL
00:00001D9E 7000            	   201: 	moveq #E_Ok,d0
00:00001DA0 4E75            	   202: 	rts
                            	   203: 
                            	   204: ; Draw a triangle in the currently selected color
                            	   205: ;
                            	   206: ; Parameters:
                            	   207: ;		d1 	- x0 pos
                            	   208: ;		d2	- y0 pos
                            	   209: ;		d3	- x1 pos
                            	   210: ;		d4	- y1 pos
                            	   211: ;	  d5	- x2 pos
                            	   212: ;		d6	- y2 pos
                            	   213: 
                            	   214: gfxaccel_draw_triangle:
00:00001DA2 48E76000        	   215: 	movem.l d1/d2,-(a7)
00:00001DA6 720D            	   216: 	moveq #13,d1
00:00001DA8 6100009C        	   217: 	bsr gfxaccel_wait
00:00001DAC 4CDF0006        	   218: 	movem.l (a7)+,d1/d2
00:00001DB0 61006D22        	   219: 	bsr rbo
00:00001DB4 23C1FD300038    	   220: 	move.l d1,GFXACCEL+$38					; p0 x
00:00001DBA 2202            	   221: 	move.l d2,d1
00:00001DBC 61006D16        	   222: 	bsr rbo
00:00001DC0 23C1FD30003C    	   223: 	move.l d1,GFXACCEL+$3C					; p0 y
00:00001DC6 223C00040001    	   224: 	move.l #$00040001,d1						; set active point 0
00:00001DCC 61006D06        	   225: 	bsr rbo
00:00001DD0 23C1FD300000    	   226: 	move.l d1,GFXACCEL
00:00001DD6 2203            	   227: 	move.l d3,d1
00:00001DD8 61006CFA        	   228: 	bsr rbo
00:00001DDC 23C1FD300038    	   229: 	move.l d1,GFXACCEL+$38
00:00001DE2 2204            	   230: 	move.l d4,d1
00:00001DE4 61006CEE        	   231: 	bsr rbo
00:00001DE8 23C1FD30003C    	   232: 	move.l d1,GFXACCEL+$3C
00:00001DEE 223C00050001    	   233: 	move.l #$00050001,d1						; set active point 1
00:00001DF4 61006CDE        	   234: 	bsr rbo
00:00001DF8 23C1FD300000    	   235: 	move.l d1,GFXACCEL
00:00001DFE 223C00000101    	   236: 	move.l #$00000101,d1
00:00001E04 23C1FD300000    	   237: 	move.l d1,GFXACCEL
00:00001E0A 2205            	   238: 	move.l d5,d1
00:00001E0C 61006CC6        	   239: 	bsr rbo
00:00001E10 23C5FD300038    	   240: 	move.l d5,GFXACCEL+$38
00:00001E16 2206            	   241: 	move.l d6,d1
00:00001E18 61006CBA        	   242: 	bsr rbo
00:00001E1C 23C6FD30003C    	   243: 	move.l d6,GFXACCEL+$3C
00:00001E22 223C00060001    	   244: 	move.l #$00060001,d1						; set active point 2
00:00001E28 61006CAA        	   245: 	bsr rbo
00:00001E2C 23C1FD300000    	   246: 	move.l d1,GFXACCEL
00:00001E32 223C00000401    	   247: 	move.l #$00000401,d1						; write triangle
00:00001E38 61006C9A        	   248: 	bsr rbo
00:00001E3C 23C1FD300000    	   249: 	move.l d1,GFXACCEL
00:00001E42 7000            	   250: 	moveq #E_Ok,d0
00:00001E44 4E75            	   251: 	rts
                            	   252: 
                            	   253: ; Waits until the specified number of queue slots are available.
                            	   254: ;
                            	   255: ; Parameters:
                            	   256: ;		d1 = number of queue slots required
                            	   257: 
                            	   258: gfxaccel_wait:
00:00001E46 48E77000        	   259: 	movem.l d1/d2/d3,-(a7)
00:00001E4A 2401            	   260: 	move.l d1,d2
00:00001E4C 2601            	   261: 	move.l d1,d3
                            	   262: .0001:
00:00001E4E 2239FD300004    	   263: 	move.l GFXACCEL+$04,d1
00:00001E54 61006C7E        	   264: 	bsr rbo
00:00001E58 08010000        	   265: 	btst.l #0,d1			; first check busy bit
00:00001E5C 66F0            	   266: 	bne.s .0001
00:00001E5E 4841            	   267: 	swap d1
00:00001E60 48C1            	   268: 	ext.l d1
00:00001E62 2403            	   269: 	move.l d3,d2
00:00001E64 D481            	   270: 	add.l d1,d2
00:00001E66 0C82000003FC    	   271: 	cmpi.l #1020,d2
00:00001E6C 62E0            	   272: 	bhi.s .0001
00:00001E6E 4CDF000E        	   273: 	movem.l (a7)+,d1/d2/d3
00:00001E72 4E75            	   274: 	rts
                            	   275: 

Source: "boot.x68"
                            	   564: 
                            	   565: ;------------------------------------------------------------------------------
                            	   566: ;------------------------------------------------------------------------------
                            	   567: ;------------------------------------------------------------------------------
                            	   568: 
                            	   569: GlobalReadLong:
00:00001E74 2210            	   570: 		move.l (a0),d1
00:00001E76 4E75            	   571: 		rts
00:00001E78 6004            	   572: 		bra nd1
                            	   573: GlobalWriteLong:
00:00001E7A 2081            	   574: 		move.l d1,(a0)
00:00001E7C 4E75            	   575: 		rts
                            	   576: net_delay:
                            	   577: 		bra nd1
                            	   578: nd1	bra nd2
                            	   579: nd2 bra nd3
                            	   580: nd3 bra nd4
00:00001E7E 4E71            	   581: nd4	nop
00:00001E80 4E75            	   582: 		rts
                            	   583: 	
                            	   584: 
                            	   585: ;------------------------------------------------------------------------------
                            	   586: ; The IO bitmap needs to be initialized to allow access to IO.
                            	   587: ;------------------------------------------------------------------------------
                            	   588: 
                            	   589: InitIOPBitmap:
00:00001E82 7600            	   590: 	moveq #0,d3				; d3 = asid value
00:00001E84 303C003F        	   591: 	move.w #63,d0			; 64 bitmaps to setup
00:00001E88 4E7A8016        	   592: 	movec iops,a0			; a0 = IOP bitmap address
00:00001E8C 2248            	   593: 	movea.l a0,a1			; a1 = table address
                            	   594: .0004
00:00001E8E 4A03            	   595: 	tst.b d3
00:00001E90 57C1            	   596: 	seq d1						; set entire bitmap for asid 0, otherwise clear entire bitmap
00:00001E92 4881            	   597: 	ext.w	d1					; make into a long value
00:00001E94 48C1            	   598: 	ext.l d1
00:00001E96 383C007F        	   599: 	move.w #127,d4
                            	   600: .0001
00:00001E9A 22C1            	   601: 	move.l d1,(a1)+		; set or clear entire table
00:00001E9C 51CCFFFC        	   602: 	dbra d4,.0001
00:00001EA0 72FF            	   603: 	moveq #-1,d1
00:00001EA2 214100A0        	   604: 	move.l d1,160(a0)	; all io address spaces have access to semaphores
00:00001EA6 214100A4        	   605: 	move.l d1,164(a0)
00:00001EAA 214100A8        	   606: 	move.l d1,168(a0)
00:00001EAE 214100AC        	   607: 	move.l d1,172(a0)
00:00001EB2 214101FC        	   608: 	move.l d1,508(a0)	; all io address spaces access random # generator
00:00001EB6 4840            	   609: 	swap d0
00:00001EB8 303C001F        	   610: 	move.w #31,d0			; 32 long words for the screen area per bitmap
                            	   611: .0003
00:00001EBC 20C1            	   612: 	move.l d1,(a0)+		; all cores have access to a screen
00:00001EBE 51C8FFFC        	   613: 	dbra d0,.0003
00:00001EC2 4840            	   614: 	swap d0
00:00001EC4 5203            	   615: 	addi.b #1,d3			; do next address space
00:00001EC6 2049            	   616: 	movea.l a1,a0			; a0 points to area for next address space
00:00001EC8 51C8FFC4        	   617: 	dbra d0,.0004
00:00001ECC 4E75            	   618: 	rts	
                            	   619: 	
                            	   620: ;------------------------------------------------------------------------------
                            	   621: ; RandInit
                            	   622: ; 	Initialize random number generator.
                            	   623: ;
                            	   624: ; Modifies:
                            	   625: ;		none
                            	   626: ; Parameters:
                            	   627: ;		none
                            	   628: ;	Returns:
                            	   629: ;		none
                            	   630: ;------------------------------------------------------------------------------
                            	   631: 
                            	   632: InitRand:
                            	   633: RandInit:
00:00001ECE 48E7C000        	   634: 	movem.l	d0/d1,-(a7)
00:00001ED2 7025            	   635: 	moveq #37,d0								; lock semaphore
00:00001ED4 7204            	   636: 	moveq	#RAND_SEMA,d1
00:00001ED6 4E4F            	   637: 	trap #15
00:00001ED8 4E7A0FE0        	   638: 	movec coreno,d0							; d0 = core number
00:00001EDC ED88            	   639: 	lsl.l	#6,d0									; allow 64 streams per core
00:00001EDE 23C0FD0FFD04    	   640: 	move.l d0,RAND_STRM					; select the stream
00:00001EE4 23FC12345678FD0F	   641: 	move.l #$12345678,RAND_MZ		; initialize to some value
00:00001EEC FD08
00:00001EEE 23FC98765432FD0F	   642: 	move.l #$98765432,RAND_MW
00:00001EF6 FD0C
00:00001EF8 23FC2E5BF271FD0F	   643: 	move.l #777777777,RAND_NUM	; generate first number
00:00001F00 FD00
00:00001F02 7026            	   644: 	moveq #38,d0								; unlock semaphore
00:00001F04 7204            	   645: 	moveq	#RAND_SEMA,d1
00:00001F06 4E4F            	   646: 	trap #15
00:00001F08 4CDF0003        	   647: 	movem.l	(a7)+,d0/d1
00:00001F0C 4E75            	   648: 	rts
                            	   649: 
                            	   650: ;------------------------------------------------------------------------------
                            	   651: ; Returns
                            	   652: ;		d1 = random integer
                            	   653: ;------------------------------------------------------------------------------
                            	   654: 
                            	   655: RandGetNum:
00:00001F0E 48E7A000        	   656: 	movem.l	d0/d2,-(a7)
00:00001F12 7204            	   657: 	moveq #RAND_SEMA,d1
00:00001F14 610000DC        	   658: 	bsr T15LockSemaphore
00:00001F18 4E7A0FE0        	   659: 	movec	coreno,d0
00:00001F1C ED88            	   660: 	lsl.l	#6,d0
00:00001F1E 23C0FD0FFD04    	   661: 	move.l d0,RAND_STRM					; select the stream
00:00001F24 2439FD0FFD00    	   662: 	move.l RAND_NUM,d2					; d2 = random number
00:00001F2A 42B9FD0FFD00    	   663: 	clr.l	RAND_NUM							; generate next number
00:00001F30 610000C6        	   664: 	bsr T15UnlockSemaphore
00:00001F34 2202            	   665: 	move.l d2,d1
00:00001F36 4CDF0005        	   666: 	movem.l	(a7)+,d0/d2
00:00001F3A 4E75            	   667: 	rts
                            	   668: 
                            	   669: ;------------------------------------------------------------------------------
                            	   670: ; Modifies:
                            	   671: ;		none
                            	   672: ; Returns
                            	   673: ;		fp0 = random float between 0 and 1.
                            	   674: ;------------------------------------------------------------------------------
                            	   675: 
                            	   676: _GetRand:
00:00001F3C 2F01            	   677: 	move.l d1,-(sp)
00:00001F3E F2276880        	   678: 	fmove.x fp1,-(sp)
00:00001F42 61CA            	   679: 	bsr RandGetNum
00:00001F44 E289            	   680: 	lsr.l #1,d1									; make number between 0 and 2^31
00:00001F46 F2014000        	   681: 	fmove.l d1,fp0
00:00001F4A F23C40807FFFFFFF	   682: 	fmove.l #$7FFFFFFF,fp1			; divide by 2^31
00:00001F52 F2000420        	   683: 	fdiv fp1,fp0
00:00001F56 F21F4880        	   684: 	fmove.x (sp)+,fp1
00:00001F5A 221F            	   685: 	move.l (sp)+,d1
00:00001F5C 4E75            	   686: 	rts
                            	   687: 
                            	   688: ;------------------------------------------------------------------------------
                            	   689: ; RandWait
                            	   690: ;    Wait some random number of clock cycles before returning.
                            	   691: ;------------------------------------------------------------------------------
                            	   692: 
                            	   693: RandWait:
00:00001F5E 48E7C000        	   694: 	movem.l	d0/d1,-(a7)
00:00001F62 61AA            	   695: 	bsr			RandGetNum
00:00001F64 0241000F        	   696: 	andi.w	#15,d1
                            	   697: .0001:
00:00001F68 4E71            	   698: 	nop
00:00001F6A 51C9FFFC        	   699: 	dbra		d1,.0001
00:00001F6E 4CDF0003        	   700: 	movem.l	(a7)+,d0/d1
00:00001F72 4E75            	   701: 	rts
                            	   702: 
                            	   703: ;------------------------------------------------------------------------------
                            	   704: ; Initialize semaphores
                            	   705: ; - all semaphores are set to unlocked except the first one, which is locked
                            	   706: ; for core #2.
                            	   707: ;
                            	   708: ; Parameters:
                            	   709: ;		<none>
                            	   710: ; Modifies:
                            	   711: ;		<none>
                            	   712: ; Returns:
                            	   713: ;		<none>
                            	   714: ;------------------------------------------------------------------------------
                            	   715: 
                            	   716: InitSemaphores:
00:00001F74 48E74080        	   717: 	movem.l	d1/a0,-(a7)
00:00001F78 41F9FD050000    	   718: 	lea			semamem,a0
00:00001F7E 217C000200002000	   719: 	move.l	#$20000,$2000(a0)	; lock the first semaphore for core #2, thread #0
00:00001F86 323C00FE        	   720: 	move.w	#254,d1
                            	   721: .0001:
00:00001F8A 5888            	   722: 	lea			4(a0),a0
00:00001F8C 42A82000        	   723: 	clr.l		$2000(a0)					; write zeros to unlock
00:00001F90 51C9FFF8        	   724: 	dbra		d1,.0001
00:00001F94 4CDF0102        	   725: 	movem.l	(a7)+,d1/a0
00:00001F98 4E75            	   726: 	rts
                            	   727: 
                            	   728: ; -----------------------------------------------------------------------------
                            	   729: ; Parameters:
                            	   730: ;		d1 semaphore number
                            	   731: ;
                            	   732: ; Side Effects:
                            	   733: ;		increments semaphore, saturates at 255
                            	   734: ;
                            	   735: ; Returns:	
                            	   736: ; 	z flag set if semaphore was zero
                            	   737: ; -----------------------------------------------------------------------------
                            	   738: 
                            	   739: ;IncrementSemaphore:
                            	   740: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   741: ;	lea			semamem,a0			; point to semaphore memory
                            	   742: ;	ext.w		d1							; make d1 word value
                            	   743: ;	asl.w		#4,d1						; align to memory
                            	   744: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   745: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   746: ;	rts
                            	   747: 	
                            	   748: ; -----------------------------------------------------------------------------
                            	   749: ; Parameters:
                            	   750: ;		d1 semaphore number
                            	   751: ;
                            	   752: ; Side Effects:
                            	   753: ;		decrements semaphore, saturates at zero
                            	   754: ;
                            	   755: ; Returns:	
                            	   756: ; 	z flag set if semaphore was zero
                            	   757: ; -----------------------------------------------------------------------------
                            	   758: 
                            	   759: ;DecrementSemaphore:
                            	   760: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   761: ;	lea			semamem,a0			; point to semaphore memory
                            	   762: ;	andi.w	#255,d1					; make d1 word value
                            	   763: ;	asl.w		#4,d1						; align to memory
                            	   764: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   765: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   766: ;	rts
                            	   767: 
                            	   768: ; -----------------------------------------------------------------------------
                            	   769: ; Lock a semaphore
                            	   770: ;
                            	   771: ; Parameters:
                            	   772: ;		d0 = key
                            	   773: ;		d1 = semaphore number
                            	   774: ; -----------------------------------------------------------------------------
                            	   775: 
                            	   776: LockSemaphore:
00:00001F9A 4E75            	   777: 	rts
00:00001F9C 48E74080        	   778: 	movem.l	d1/a0,-(a7)			; save registers
00:00001FA0 41F9FD050000    	   779: 	lea			semamem,a0			; point to semaphore memory lock area
00:00001FA6 024100FF        	   780: 	andi.w	#255,d1					; make d1 word value
00:00001FAA E549            	   781: 	lsl.w		#2,d1						; align to memory
                            	   782: .0001
00:00001FAC 21801000        	   783: 	move.l	d0,(a0,d1.w)		; try and write the semaphore
00:00001FB0 B0B01000        	   784: 	cmp.l		(a0,d1.w),d0		; did it lock?
00:00001FB4 66F6            	   785: 	bne.s		.0001						; no, try again
00:00001FB6 4CDF0102        	   786: 	movem.l	(a7)+,a0/d1			; restore regs
00:00001FBA 4E75            	   787: 	rts
                            	   788: 	
                            	   789: ; -----------------------------------------------------------------------------
                            	   790: ; Unlocks a semaphore even if not the owner.
                            	   791: ;
                            	   792: ; Parameters:
                            	   793: ;		d1 semaphore number
                            	   794: ; -----------------------------------------------------------------------------
                            	   795: 
                            	   796: ForceUnlockSemaphore:
00:00001FBC 48E74080        	   797: 	movem.l	d1/a0,-(a7)				; save registers
00:00001FC0 41F9FD053000    	   798: 	lea			semamem+$3000,a0	; point to semaphore memory read/write area
00:00001FC6 024100FF        	   799: 	andi.w	#255,d1						; make d1 word value
00:00001FCA E549            	   800: 	lsl.w		#2,d1							; align to memory
00:00001FCC 42B01000        	   801: 	clr.l		(a0,d1.w)					; write zero to unlock
00:00001FD0 4CDF0102        	   802: 	movem.l	(a7)+,a0/d1				; restore regs
00:00001FD4 4E75            	   803: 	rts
                            	   804: 
                            	   805: ; -----------------------------------------------------------------------------
                            	   806: ; Unlocks a semaphore. Must be the owner to have effect.
                            	   807: ; Three cases:
                            	   808: ;	1) the owner, the semaphore will be reset to zero
                            	   809: ;	2) not the owner, the write will be ignored
                            	   810: ; 3) already unlocked, the write will be ignored
                            	   811: ;
                            	   812: ; Parameters:
                            	   813: ;		d0 = key
                            	   814: ;		d1 = semaphore number
                            	   815: ; -----------------------------------------------------------------------------
                            	   816: 
                            	   817: UnlockSemaphore:
00:00001FD6 60E4            	   818: 	bra ForceUnlockSemaphore
00:00001FD8 48E74080        	   819: 	movem.l	d1/a0,-(a7)				; save registers
00:00001FDC 41F9FD051000    	   820: 	lea			semamem+$1000,a0	; point to semaphore memory unlock area
00:00001FE2 024100FF        	   821: 	andi.w	#255,d1						; make d1 word value
00:00001FE6 E549            	   822: 	lsl.w		#2,d1							; align to memory
00:00001FE8 21801000        	   823: 	move.l	d0,(a0,d1.w)			; write matching value to unlock
00:00001FEC 4CDF0102        	   824: 	movem.l	(a7)+,a0/d1				; restore regs
00:00001FF0 4E75            	   825: 	rts
                            	   826: 
                            	   827: ; -----------------------------------------------------------------------------
                            	   828: ; Parameters:
                            	   829: ;		d1 = semaphore to lock / unlock
                            	   830: ; -----------------------------------------------------------------------------
                            	   831: 
                            	   832: T15LockSemaphore:	
00:00001FF2 4E7A0012        	   833: 	movec tr,d0
00:00001FF6 60A2            	   834: 	bra LockSemaphore
                            	   835: 
                            	   836: T15UnlockSemaphore:
00:00001FF8 4E7A0012        	   837: 	movec tr,d0
00:00001FFC 60D8            	   838: 	bra UnlockSemaphore
                            	   839: 
                            	   840: T15GetFloat:
00:00001FFE 2049            	   841: 	move.l a1,a0
00:00002000 2001            	   842: 	move.l d1,d0
00:00002002 610066A4        	   843: 	bsr _GetFloat
00:00002006 2248            	   844: 	move.l a0,a1
00:00002008 2200            	   845: 	move.l d0,d1
00:0000200A 4E75            	   846: 	rts
                            	   847: 
                            	   848: T15Abort:
00:0000200C 61006772        	   849: 	bsr DisplayByte
00:00002010 43FA713E        	   850: 	lea msgStackCanary,a1
00:00002014 61005228        	   851: 	bsr DisplayStringCRLF
00:00002018 600057FE        	   852: 	bra Monitor
                            	   853: 
                            	   854: chk_exception:
00:0000201C 222F0002        	   855: 	move.l 2(sp),d1
00:00002020 61006752        	   856: 	bsr DisplayTetra
00:00002024 43FA711C        	   857: 	lea msgChk,a1
00:00002028 61005214        	   858: 	bsr DisplayStringCRLF
00:0000202C 600057EA        	   859: 	bra Monitor
                            	   860: 
                            	   861: ; -----------------------------------------------------------------------------
                            	   862: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   863: ; -----------------------------------------------------------------------------
                            	   864: 
                            	   865: Delay3s:
00:00002030 203C002DC6C0    	   866: 	move.l	#3000000,d0		; this should take a few seconds to loop
00:00002036 41F9FD0FFF00    	   867: 	lea			leds,a0				; a0 = address of LED output register
00:0000203C 6002            	   868: 	bra			dly3s1				; branch to the loop
                            	   869: dly3s2:	
00:0000203E 4840            	   870: 	swap		d0						; loop is larger than 16-bits
                            	   871: dly3s1:
00:00002040 2200            	   872: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
00:00002042 E199            	   873: 	rol.l		#8,d1					; could use swap here, but lets test rol
00:00002044 E199            	   874: 	rol.l		#8,d1
00:00002046 1081            	   875: 	move.b	d1,(a0)				; set the LEDs
00:00002048 51C8FFF6        	   876: 	dbra		d0,dly3s1			; decrement and branch back
00:0000204C 4840            	   877: 	swap		d0
00:0000204E 51C8FFEE        	   878: 	dbra		d0,dly3s2
00:00002052 4E75            	   879: 	rts
                            	   880: 
                            	   881: Delay3s2:
00:00002054 4E7A0FE0        	   882: 	movec		coreno,d0			; vary delay by core to stagger startup
00:00002058 E188            	   883: 	lsl.l		#8,d0
00:0000205A 0680002DC6C0    	   884: 	addi.l	#3000000,d0		; this should take a few seconds to loop
00:00002060 6002            	   885: 	bra			.0001					; branch to the loop
                            	   886: .0002	
00:00002062 4840            	   887: 	swap		d0						; loop is larger than 16-bits
                            	   888: .0001
00:00002064 51C8FFFE        	   889: 	dbra		d0,.0001			; decrement and branch back
00:00002068 4840            	   890: 	swap		d0
00:0000206A 51C8FFF6        	   891: 	dbra		d0,.0002
00:0000206E 4E75            	   892: 	rts
                            	   893: 
                            	   894: 	include "cputest.x68"

Source: "cputest.x68"
                            	     1: ;; @name cputest.s Tests 68000 cpu
                            	     2: ;
                            	     3: ; Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: ;
                            	     5: ; Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: ; - comment lines must start in first column
                            	     7: ; - replaced org instructions by suitable rept
                            	     8: ; - copy vectors to low memory at startup
                            	     9: ; - replaced jsr/jmp by bsr/bra for position independence
                            	    10: ; - replaced move.l by moveq whenever possible
                            	    11: ; - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: ; - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: ; The last three modifications are required to make the test work;
                            	    14: ; apparently the original assembler was somewhat smarter then
                            	    15: ; the Microware OS-9 assembler and did this automatically.
                            	    16: ;
                            	    17: ; In some cases the opcodes of the test are used as test data!
                            	    18: ;
                            	    19: ; Original file header follows.
                            	    20: ;
                            	    21: ;  File Name   :  MCL68 Opcode Tests
                            	    22: ;  Used on     :
                            	    23: ;  Author      :  Ted Fried, MicroCore Labs
                            	    24: ;  Creation    :  7/14/2020
                            	    25: ;
                            	    26: ;   Description:
                            	    27: ;   ============
                            	    28: ;
                            	    29: ;  Program to test all of the Motorola 68000's opcodes.
                            	    30: ;
                            	    31: ;  If failures are detected, the code will immediately loop on itself.
                            	    32: ;  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: ;
                            	    34: ;  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: ;
                            	    36: ;------------------------------------------------------------------------
                            	    37: ;
                            	    38: ; Modification History:
                            	    39: ; =====================
                            	    40: ;
                            	    41: ; Revision 1 7/14/2020
                            	    42: ; Initial revision
                            	    43: ;
                            	    44: ;
                            	    45: ;------------------------------------------------------------------------
                            	    46: ;
                            	    47: ; Copyright (c) 2020 Ted Fried
                            	    48: ;
                            	    49: ; Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: ; of this software and associated documentation files (the "Software"), to deal
                            	    51: ; in the Software without restriction, including without limitation the rights
                            	    52: ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: ; copies of the Software, and to permit persons to whom the Software is
                            	    54: ; furnished to do so, subject to the following conditions:
                            	    55: ;
                            	    56: ; The above copyright notice and this permission notice shall be included in all
                            	    57: ; copies or substantial portions of the Software.
                            	    58: ;
                            	    59: ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: ; SOFTWARE.
                            	    66: 
                            	    67: ; Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: ;	data
                            	    70: ;	dc.l		$0001FFFC						; top of local ram area
                            	    71: ;	dc.l		start
                            	    72: 
                            	    73: ;    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: ;	move.l	$FFFFFFE0,d0		; get core number
                            	    76: ;	cmpi.b	#2,d0
                            	    77: ;	bne			do_nothing
                            	    78: 
                            	    79: ;	lea			EXCEPTION_6,a0	; check exception vector
                            	    80: ;	move.l	a0,6*4
                            	    81: ;	lea			EXCEPTION_7,a0	; TRAPV exception vector
                            	    82: ;	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
00:00002070 610000F6        	    85: 	bsr	op_ORI_TO_CCR
00:00002074 61000114        	    86: 	bsr	op_ORI_TO_SR
00:00002078 61000132        	    87: 	bsr	op_EORI_TO_CCR
00:0000207C 61000154        	    88: 	bsr	op_EORI_TO_SR
00:00002080 61000176        	    89: 	bsr	op_ANDI_TO_CCR
00:00002084 61000198        	    90: 	bsr	op_ANDI_TO_SR
00:00002088 610001BA        	    91: 	bsr	op_BTST
00:0000208C 61000560        	    92: 	bsr	op_BCHG
00:00002090 610008C4        	    93: 	bsr	op_BCLR
00:00002094 61000C0E        	    94: 	bsr	op_BSET
00:00002098 61000F52        	    95: 	bsr op_MOVEP
00:0000209C 61000FDA        	    96: 	bsr op_BOOL_I
00:000020A0 610011BE        	    97: 	bsr op_CMP_I
00:000020A4 610013A2        	    98: 	bsr op_ADD_I
00:000020A8 61001524        	    99: 	bsr op_SUB_I
00:000020AC 610016A6        	   100: 	bsr op_MOVE
00:000020B0 610018AE        	   101: 	bsr op_MOVE_xxx_FLAGS
00:000020B4 61001A9E        	   102: 	bsr op_EXT
00:000020B8 61001AC6        	   103: 	bsr op_SWAP
00:000020BC 61001AD8        	   104: 	bsr op_LEAPEA
00:000020C0 61001B80        	   105: 	bsr op_TAS
00:000020C4 61001BA2        	   106: 	bsr op_TST
00:000020C8 61001BDC        	   107: 	bsr op_LINKS
00:000020CC 61001BF6        	   108: 	bsr op_MOVE_USP
00:000020D0 61001C02        	   109: 	bsr op_CHK
00:000020D4 61001C48        	   110: 	bsr op_NEGS
00:000020D8 61001FD2        	   111: 	bsr op_MOVEM
                            	   112: ;	bsr op_ABCD
                            	   113: ;	bsr op_SBCD
                            	   114: ;	bsr op_NBCD
00:000020DC 6100256E        	   115: 	bsr op_TRAPV
00:000020E0 61002586        	   116: 	bsr op_RTR
00:000020E4 61001144        	   117: 	bsr op_BSR
00:000020E8 610025A0        	   118: 	bsr op_BCC
00:000020EC 6100261C        	   119: 	bsr op_DBCC
00:000020F0 6100263E        	   120: 	bsr op_SCC
00:000020F4 6100266A        	   121: 	bsr op_ADDQ
00:000020F8 61002720        	   122: 	bsr op_SUBQ
00:000020FC 610027D6        	   123: 	bsr op_MOVEQ
                            	   124: ;	bsr op_DIVU
                            	   125: ;	bsr op_DIVS
00:00002100 61002892        	   126: 	bsr op_OR
00:00002104 61002978        	   127: 	bsr op_AND
00:00002108 61002A5E        	   128: 	bsr op_EOR
00:0000210C 61002AD0        	   129: 	bsr op_CMP
00:00002110 61002B42        	   130: 	bsr op_CMPA
00:00002114 61002BA4        	   131: 	bsr op_CMPM
00:00002118 61002C46        	   132: 	bsr op_ADD
00:0000211C 61002D2C        	   133: 	bsr op_SUB
00:00002120 61002E12        	   134: 	bsr op_ADDA
00:00002124 61002E5A        	   135: 	bsr op_SUBA
00:00002128 61002EA2        	   136: 	bsr op_ADDX	
00:0000212C 61002FAE        	   137: 	bsr op_SUBX
00:00002130 610030BA        	   138: 	bsr op_MULU
00:00002134 61003102        	   139: 	bsr op_MULS
00:00002138 6100314A        	   140: 	bsr op_EXG
00:0000213C 610031B4        	   141: 	bsr op_ROx
00:00002140 610033E6        	   142: 	bsr op_ROXx
00:00002144 61003618        	   143: 	bsr op_SHIFTS
00:00002148 61003856        	   144: 	bsr op_SHIFTS2
                            	   145: 
00:0000214C 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
00:0000214E 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
00:00002150 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
00:00002156 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: ;' Exception Vector = 6   CHK Instruction
                            	   164: ;
                            	   165: ;	align	4
                            	   166: EXCEPTION_6:
00:00002158 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:0000215E 4E73            	   168: 	rte
                            	   169: 
                            	   170: ; Exception Vector = 7   TRAPV Instruction
                            	   171: ;
                            	   172: ;	align	4
                            	   173: EXCEPTION_7:
00:00002160 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:00002166 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
00:00002168 003C00FF        	   184:     ori.b #$FF,CCR
00:0000216C 6AFE            	   185:     bpl.s *                   ; branch if Z clear
00:0000216E 66FE            	   186:     bne.s *                   ; branch if N clear
00:00002170 68FE            	   187:     bvc.s *                   ; branch if V clear
00:00002172 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
00:00002174 44FC0000        	   190:     move #$00,CCR
00:00002178 003C0000        	   191:     ori.b #$00,CCR
00:0000217C 67FE            	   192:     beq.s *                   ; branch if Z set
00:0000217E 6BFE            	   193:     bmi.s *                   ; branch if N set
00:00002180 69FE            	   194:     bvs.s *                   ; branch if V set
00:00002182 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
00:00002184 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
00:00002188 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
00:0000218A 007C2FFF        	   209:     ori.w #$2FFF,SR
00:0000218E 6AFE            	   210:     bpl.s *                   * branch if Z clear
00:00002190 66FE            	   211:     bne.s *                   * branch if N clear
00:00002192 68FE            	   212:     bvc.s *                   * branch if V clear
00:00002194 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
00:00002196 46FC2000        	   215:     move.w #$2000,SR
00:0000219A 007C0000        	   216:     ori.w #$0000,SR
00:0000219E 67FE            	   217:     beq.s *                   * branch if Z set
00:000021A0 6BFE            	   218:     bmi.s *                   * branch if N set
00:000021A2 69FE            	   219:     bvs.s *                   * branch if V set
00:000021A4 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
00:000021A6 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
00:000021AA 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
00:000021AC 44FC0000        	   233:     move #$00,CCR
00:000021B0 0A3C00FF        	   234:     eori.b #$FF,CCR
00:000021B4 6AFE            	   235:     bpl.s *                   ; branch if Z clear
00:000021B6 66FE            	   236:     bne.s *                   ; branch if N clear
00:000021B8 68FE            	   237:     bvc.s *                   ; branch if V clear
00:000021BA 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
00:000021BC 44FC0000        	   240:     move #$00,CCR
00:000021C0 0A3C0000        	   241:     eori.b #$00,CCR
00:000021C4 67FE            	   242:     beq.s *                   ; branch if Z set
00:000021C6 6BFE            	   243:     bmi.s *                   ; branch if N set
00:000021C8 69FE            	   244:     bvs.s *                   ; branch if V set
00:000021CA 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
00:000021CC 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
00:000021D0 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
00:000021D2 46FC2000        	   260:     move.w #$2000,SR
00:000021D6 0A7C0FFF        	   261:     eori.w #$0FFF,SR
00:000021DA 6AFE            	   262:     bpl.s *                   * branch if Z clear
00:000021DC 66FE            	   263:     bne.s *                   * branch if N clear
00:000021DE 68FE            	   264:     bvc.s *                   * branch if V clear
00:000021E0 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
00:000021E2 46FC2000        	   267:     move.w #$2000,SR
00:000021E6 0A7C0000        	   268:     eori.w #$0000,SR
00:000021EA 67FE            	   269:     beq.s *                   * branch if Z set
00:000021EC 6BFE            	   270:     bmi.s *                   * branch if N set
00:000021EE 69FE            	   271:     bvs.s *                   * branch if V set
00:000021F0 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
00:000021F2 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
00:000021F6 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
00:000021F8 44FC00FF        	   287:     move #$FF,CCR
00:000021FC 023C00FF        	   288:     andi.b #$FF,CCR
00:00002200 6AFE            	   289:     bpl.s *                   * branch if Z clear
00:00002202 66FE            	   290:     bne.s *                   * branch if N clear
00:00002204 68FE            	   291:     bvc.s *                   * branch if V clear
00:00002206 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
00:00002208 44FC00FF        	   294:     move #$FF,CCR
00:0000220C 023C0000        	   295:     andi.b #$00,CCR
00:00002210 67FE            	   296:     beq.s *                   * branch if Z set
00:00002212 6BFE            	   297:     bmi.s *                   * branch if N set
00:00002214 69FE            	   298:     bvs.s *                   * branch if V set
00:00002216 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
00:00002218 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
00:0000221C 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
00:0000221E 46FC20FF        	   313:     move.w #$20FF,SR
00:00002222 027CFFFF        	   314:     andi.w #$FFFF,SR
00:00002226 6AFE            	   315:     bpl.s *                   * branch if Z clear
00:00002228 66FE            	   316:     bne.s *                   * branch if N clear
00:0000222A 68FE            	   317:     bvc.s *                   * branch if V clear
00:0000222C 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
00:0000222E 46FC20FF        	   320:     move.w #$20FF,SR
00:00002232 027CFF00        	   321:     andi.w #$FF00,SR
00:00002236 67FE            	   322:     beq.s *                   * branch if Z set
00:00002238 6BFE            	   323:     bmi.s *                   * branch if N set
00:0000223A 69FE            	   324:     bvs.s *                   * branch if V set
00:0000223C 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
00:0000223E 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
00:00002242 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
00:00002244 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
00:0000224A 08000000        	   343:             btst.l #0,d0
00:0000224E 67FE            	   344:             beq.s *               * branch if Z set
00:00002250 08000001        	   345:             btst.l #1,d0              *
00:00002254 66FE            	   346:             bne.s *               * branch if Z clear
00:00002256 0800001F        	   347:             btst.l #31,d0             *
00:0000225A 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
00:0000225C 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002260 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
00:00002264 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002266 08100000        	   355:             btst.b #0,(a0)
00:0000226A 67FE            	   356:             beq.s *               * branch if Z set
00:0000226C 08100001        	   357:             btst.b #1,(a0)            *
00:00002270 66FE            	   358:             bne.s *               * branch if Z clear
00:00002272 08100007        	   359:             btst.b #7,(a0)            *
00:00002276 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
00:00002278 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000227C 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
00:00002280 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
00:00002284 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
00:00002288 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000228C 08180000        	   369:             btst.b #0,(a0)+
00:00002290 67FE            	   370:             beq.s *               * branch if Z set
00:00002292 08180001        	   371:             btst.b #1,(a0)+           *
00:00002296 66FE            	   372:             bne.s *               * branch if Z clear
00:00002298 08180007        	   373:             btst.b #7,(a0)+           *
00:0000229C 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
00:0000229E 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
00:000022A2 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
00:000022A6 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
00:000022AA 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
00:000022AE 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
00:000022B2 08200000        	   383:             btst.b #0,-(a0)
00:000022B6 67FE            	   384:             beq.s *               * branch if Z set
00:000022B8 08200001        	   385:             btst.b #1,-(a0)           *
00:000022BC 66FE            	   386:             bne.s *               * branch if Z clear
00:000022BE 08200007        	   387:             btst.b #7,-(a0)           *
00:000022C2 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
00:000022C4 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
00:000022C8 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
00:000022CC 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
00:000022D0 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
00:000022D4 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
00:000022D8 08100000        	   397:             btst.b #0,0(a0)
00:000022DC 67FE            	   398:             beq.s *               * branch if Z set
00:000022DE 082800010001    	   399:             btst.b #1,1(a0)           *
00:000022E4 66FE            	   400:             bne.s *               * branch if Z clear
00:000022E6 082800070002    	   401:             btst.b #7,2(a0)           *
00:000022EC 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
00:000022EE 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
00:000022F2 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
00:000022F4 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
00:000022F8 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
00:000022FA 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
00:000022FC 083000000000    	   411:             btst.b #0,0(a0,d0.w)
00:00002302 67FE            	   412:             beq.s *               * branch if Z set
00:00002304 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
00:0000230A 66FE            	   414:             bne.s *               * branch if Z clear
00:0000230C 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
00:00002312 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
00:00002314 083000000800    	   418:             btst.b #0,0(a0,d0.l)
00:0000231A 67FE            	   419:             beq.s *               * branch if Z set
00:0000231C 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
00:00002322 66FE            	   421:             bne.s *               * branch if Z clear
00:00002324 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
00:0000232A 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
00:0000232C 083000009000    	   425:             btst.b #0,0(a0,a1.w)
00:00002332 67FE            	   426:             beq.s *               * branch if Z set
00:00002334 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
00:0000233A 66FE            	   428:             bne.s *               * branch if Z clear
00:0000233C 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
00:00002342 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
00:00002344 083000009800    	   432:             btst.b #0,0(a0,a1.l)
00:0000234A 67FE            	   433:             beq.s *               * branch if Z set
00:0000234C 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
00:00002352 66FE            	   435:             bne.s *               * branch if Z clear
00:00002354 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
00:0000235A 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
00:0000235C 083800000100    	   441:             btst.b #0,$0100
00:00002362 67FE            	   442:             beq.s *               * branch if Z set
00:00002364 083800010101    	   443:             btst.b #1,$0101           *
00:0000236A 66FE            	   444:             bne.s *               * branch if Z clear
00:0000236C 083800070102    	   445:             btst.b #7,$0102           *
00:00002372 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
00:00002374 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
00:0000237A 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
00:0000237E 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
00:00002382 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
00:00002386 083900000000F100	   454:             btst.b #0,$F100
00:0000238E 67FE            	   455:             beq.s *               * branch if Z set
00:00002390 083900010000F101	   456:             btst.b #1,$F101       *
00:00002398 66FE            	   457:             bne.s *               * branch if Z clear
00:0000239A 083900070000F102	   458:             btst.b #7,$F102       *
00:000023A2 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
00:000023A4 4BFAFE9E        	   463:             lea op_BTST(pc),a5
00:000023A8 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
00:000023AE 66FE            	   465:             bne.s *               * branch if Z clear
00:000023B0 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
00:000023B6 67FE            	   467:             beq.s *               * branch if Z set
00:000023B8 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
00:000023BE 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
00:000023C0 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
00:000023C4 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
00:000023C6 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
00:000023CA 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
00:000023CC 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
00:000023CE 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:000023D4 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
00:000023D6 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
00:000023DA 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:000023E0 67FE            	   484:             beq.s *               * branch if Z set
00:000023E2 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:000023E8 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
00:000023EA 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:000023F0 66FE            	   489:             bne.s *               * branch if Z clear
00:000023F2 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:000023F8 67FE            	   491:             beq.s *               * branch if Z set
00:000023FA 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:00002400 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
00:00002402 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:00002408 66FE            	   496:             bne.s *               * branch if Z clear
00:0000240A 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:00002410 67FE            	   498:             beq.s *               * branch if Z set
00:00002412 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:00002418 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
00:0000241A 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:00002420 66FE            	   503:             bne.s *               * branch if Z clear
00:00002422 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:00002428 67FE            	   505:             beq.s *               * branch if Z set
00:0000242A 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:00002430 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
00:00002432 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
00:00002438 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
00:0000243A 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
00:0000243C 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
00:0000243E 0B00            	   519:             btst.l d5,d0
00:00002440 67FE            	   520:             beq.s *               * branch if Z set
00:00002442 0D00            	   521:             btst.l d6,d0              *
00:00002444 66FE            	   522:             bne.s *               * branch if Z clear
00:00002446 0F00            	   523:             btst.l d7,d0             *
00:00002448 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
00:0000244A 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
00:0000244C 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
00:0000244E 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
00:00002450 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002454 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
00:00002458 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:0000245A 0B10            	   534:             btst.b d5,(a0)
00:0000245C 67FE            	   535:             beq.s *               * branch if Z set
00:0000245E 0D10            	   536:             btst.b d6,(a0)            *
00:00002460 66FE            	   537:             bne.s *               * branch if Z clear
00:00002462 0F10            	   538:             btst.b d7,(a0)            *
00:00002464 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
00:00002466 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000246A 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
00:0000246E 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
00:00002472 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
00:00002476 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000247A 0B18            	   550:             btst.b d5,(a0)+
00:0000247C 67FE            	   551:             beq.s *               * branch if Z set
00:0000247E 0D18            	   552:             btst.b d6,(a0)+           *
00:00002480 66FE            	   553:             bne.s *               * branch if Z clear
00:00002482 0F18            	   554:             btst.b d7,(a0)+           *
00:00002484 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
00:00002486 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
00:0000248A 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
00:0000248E 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
00:00002492 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
00:00002496 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
00:0000249A 0B20            	   564:             btst.b d5,-(a0)
00:0000249C 67FE            	   565:             beq.s *               * branch if Z set
00:0000249E 0D20            	   566:             btst.b d6,-(a0)           *
00:000024A0 66FE            	   567:             bne.s *               * branch if Z clear
00:000024A2 0F20            	   568:             btst.b d7,-(a0)           *
00:000024A4 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
00:000024A6 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
00:000024AA 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
00:000024AE 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
00:000024B2 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
00:000024B6 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
00:000024BA 0B10            	   578:             btst.b d5,0(a0)
00:000024BC 67FE            	   579:             beq.s *               * branch if Z set
00:000024BE 0D280001        	   580:             btst.b d6,1(a0)           *
00:000024C2 66FE            	   581:             bne.s *               * branch if Z clear
00:000024C4 0F280002        	   582:             btst.b d7,2(a0)           *
00:000024C8 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
00:000024CA 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
00:000024CE 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
00:000024D0 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
00:000024D4 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
00:000024D6 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
00:000024D8 0B300000        	   592:             btst.b d5,0(a0,d0.w)
00:000024DC 67FE            	   593:             beq.s *               * branch if Z set
00:000024DE 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
00:000024E2 66FE            	   595:             bne.s *               * branch if Z clear
00:000024E4 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
00:000024E8 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
00:000024EA 0B300800        	   599:             btst.b d5,0(a0,d0.l)
00:000024EE 67FE            	   600:             beq.s *               * branch if Z set
00:000024F0 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
00:000024F4 66FE            	   602:             bne.s *               * branch if Z clear
00:000024F6 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
00:000024FA 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
00:000024FC 0B309000        	   606:             btst.b d5,0(a0,a1.w)
00:00002500 67FE            	   607:             beq.s *               * branch if Z set
00:00002502 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
00:00002506 66FE            	   609:             bne.s *               * branch if Z clear
00:00002508 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
00:0000250C 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
00:0000250E 0B309800        	   613:             btst.b d5,0(a0,a1.l)
00:00002512 67FE            	   614:             beq.s *               * branch if Z set
00:00002514 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
00:00002518 66FE            	   616:             bne.s *               * branch if Z clear
00:0000251A 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
00:0000251E 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
00:00002520 0B380100        	   622:             btst.b d5,$0100
00:00002524 67FE            	   623:             beq.s *               * branch if Z set
00:00002526 0D380101        	   624:             btst.b d6,$0101           *
00:0000252A 66FE            	   625:             bne.s *               * branch if Z clear
00:0000252C 0F380102        	   626:             btst.b d7,$0102           *
00:00002530 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
00:00002532 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
00:00002538 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
00:0000253C 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
00:00002540 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
00:00002544 0B390000F100    	   635:             btst.b d5,$F100
00:0000254A 67FE            	   636:             beq.s *               * branch if Z set
00:0000254C 0D390000F101    	   637:             btst.b d6,$F101       *
00:00002552 66FE            	   638:             bne.s *               * branch if Z clear
00:00002554 0F390000F102    	   639:             btst.b d7,$F102       *
00:0000255A 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
00:0000255C 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
00:0000255E 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
00:00002560 4BFAFCE2        	   646:             lea op_BTST(pc),a5
00:00002564 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
00:00002568 66FE            	   648:             bne.s *               * branch if Z clear
00:0000256A 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
00:0000256E 67FE            	   650:             beq.s *               * branch if Z set
00:00002570 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
00:00002574 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
00:00002576 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
00:0000257A 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
00:0000257C 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
00:00002580 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
00:00002582 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
00:00002584 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
00:00002586 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
00:00002588 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:0000258C 67FE            	   665:             beq.s *               * branch if Z set
00:0000258E 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
00:00002592 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:00002596 67FE            	   668:             beq.s *               * branch if Z set
00:00002598 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:0000259C 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
00:0000259E 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:000025A2 67FE            	   673:             beq.s *               * branch if Z set
00:000025A4 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:000025A8 67FE            	   675:             beq.s *               * branch if Z set
00:000025AA 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:000025AE 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
00:000025B0 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:000025B4 67FE            	   680:             beq.s *               * branch if Z set
00:000025B6 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:000025BA 67FE            	   682:             beq.s *               * branch if Z set
00:000025BC 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:000025C0 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
00:000025C2 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:000025C6 67FE            	   687:             beq.s *               * branch if Z set
00:000025C8 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:000025CC 67FE            	   689:             beq.s *               * branch if Z set
00:000025CE 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:000025D2 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
00:000025D4 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
00:000025D6 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
00:000025D8 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
00:000025DA 0B3C0088        	   699:             btst.b d5,#$88
00:000025DE 66FE            	   700:             bne.s *               * branch if Z clear
00:000025E0 0D3C0088        	   701:             btst.b d6,#$88
00:000025E4 67FE            	   702:             beq.s *               * branch if Z set
00:000025E6 0F3C0088        	   703:             btst.b d7,#$88
00:000025EA 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
00:000025EC 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
00:000025EE 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
00:000025F4 08400000        	   721:             bchg.l #0,d0
00:000025F8 67FE            	   722:             beq.s *               * branch if Z set
00:000025FA 08400001        	   723:             bchg.l #1,d0              *
00:000025FE 66FE            	   724:             bne.s *               * branch if Z clear
00:00002600 0840001F        	   725:             bchg.l #31,d0             *
00:00002604 67FE            	   726:             beq.s *               * branch if Z set
00:00002606 0C8000000002    	   727:             cmpi.l #$00000002,d0
00:0000260C 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
00:0000260E 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002612 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
00:00002616 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002618 08500000        	   735:             bchg.b #0,(a0)
00:0000261C 67FE            	   736:             beq.s *               * branch if Z set
00:0000261E 08500001        	   737:             bchg.b #1,(a0)            *
00:00002622 66FE            	   738:             bne.s *               * branch if Z clear
00:00002624 08500007        	   739:             bchg.b #7,(a0)            *
00:00002628 67FE            	   740:             beq.s *               * branch if Z set
00:0000262A 0C100002        	   741:             cmpi.b #$02,(a0)
00:0000262E 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
00:00002630 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002634 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
00:00002638 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
00:0000263C 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
00:00002640 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002644 08580000        	   750:             bchg.b #0,(a0)+
00:00002648 67FE            	   751:             beq.s *               * branch if Z set
00:0000264A 08580001        	   752:             bchg.b #1,(a0)+           *
00:0000264E 66FE            	   753:             bne.s *               * branch if Z clear
00:00002650 08580007        	   754:             bchg.b #7,(a0)+           *
00:00002654 67FE            	   755:             beq.s *               * branch if Z set
00:00002656 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000265A 4A18            	   757:             cmpi.b #$00,(a0)+
00:0000265C 66FE            	   758:             bne.s *               * branch if Z clear
00:0000265E 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
00:00002662 66FE            	   760:             bne.s *               * branch if Z clear
00:00002664 4A18            	   761:             cmpi.b #$00,(a0)+
00:00002666 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
00:00002668 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
00:0000266C 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
00:00002670 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
00:00002674 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
00:00002678 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
00:0000267C 08600000        	   770:             bchg.b #0,-(a0)
00:00002680 67FE            	   771:             beq.s *               * branch if Z set
00:00002682 08600001        	   772:             bchg.b #1,-(a0)           *
00:00002686 66FE            	   773:             bne.s *               * branch if Z clear
00:00002688 08600007        	   774:             bchg.b #7,-(a0)           *
00:0000268C 67FE            	   775:             beq.s *               * branch if Z set
00:0000268E 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002692 4A20            	   777:             cmpi.b #$00,-(a0)
00:00002694 66FE            	   778:             bne.s *               * branch if Z clear
00:00002696 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
00:0000269A 66FE            	   780:             bne.s *               * branch if Z clear
00:0000269C 4A20            	   781:             cmpi.b #$00,-(a0)
00:0000269E 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
00:000026A0 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
00:000026A4 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
00:000026A8 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
00:000026AC 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
00:000026B0 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
00:000026B4 08500000        	   791:             bchg.b #0,0(a0)
00:000026B8 67FE            	   792:             beq.s *               * branch if Z set
00:000026BA 086800010001    	   793:             bchg.b #1,1(a0)           *
00:000026C0 66FE            	   794:             bne.s *               * branch if Z clear
00:000026C2 086800070002    	   795:             bchg.b #7,2(a0)           *
00:000026C8 67FE            	   796:             beq.s *               * branch if Z set
00:000026CA 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
00:000026CE 4A18            	   798:             cmpi.b #$00,(a0)+
00:000026D0 66FE            	   799:             bne.s *               * branch if Z clear
00:000026D2 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
00:000026D6 66FE            	   801:             bne.s *               * branch if Z clear
00:000026D8 4A18            	   802:             cmpi.b #$00,(a0)+
00:000026DA 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
00:000026DC 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
00:000026E0 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
00:000026E2 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
00:000026E6 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
00:000026E8 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
00:000026EA 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
00:000026F0 66FE            	   813:             bne.s *               * branch if Z clear
00:000026F2 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
00:000026F8 67FE            	   815:             beq.s *               * branch if Z set
00:000026FA 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
00:00002700 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
00:00002702 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
00:00002708 67FE            	   820:             beq.s *               * branch if Z set
00:0000270A 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
00:00002710 66FE            	   822:             bne.s *               * branch if Z clear
00:00002712 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
00:00002718 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
00:0000271A 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
00:00002720 66FE            	   827:             bne.s *               * branch if Z clear
00:00002722 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
00:00002728 67FE            	   829:             beq.s *               * branch if Z set
00:0000272A 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
00:00002730 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
00:00002732 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
00:00002738 67FE            	   834:             beq.s *               * branch if Z set
00:0000273A 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
00:00002740 66FE            	   836:             bne.s *               * branch if Z clear
00:00002742 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
00:00002748 67FE            	   838:             beq.s *               * branch if Z set
00:0000274A 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000274E 4A18            	   840:             cmpi.b #$00,(a0)+
00:00002750 66FE            	   841:             bne.s *               * branch if Z clear
00:00002752 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
00:00002756 66FE            	   843:             bne.s *               * branch if Z clear
00:00002758 4A18            	   844:             cmpi.b #$00,(a0)+
00:0000275A 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
00:0000275C 087800000100    	   849:             bchg.b #0,$0100
00:00002762 66FE            	   850:             bne.s *               * branch if Z clear
00:00002764 087800010101    	   851:             bchg.b #1,$0101           *
00:0000276A 67FE            	   852:             beq.s *               * branch if Z set
00:0000276C 087800070102    	   853:             bchg.b #7,$0102           *
00:00002772 66FE            	   854:             bne.s *               * branch if Z clear
00:00002774 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002778 0C180001        	   856:             cmpi.b #$01,(a0)+
00:0000277C 66FE            	   857:             bne.s *               * branch if Z clear
00:0000277E 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
00:00002782 66FE            	   859:             bne.s *               * branch if Z clear
00:00002784 0C180080        	   860:             cmpi.b #$80,(a0)+
00:00002788 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
00:0000278A 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
00:00002790 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
00:00002794 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
00:00002798 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
00:0000279C 087900000000F100	   868:             bchg.b #0,$F100
00:000027A4 67FE            	   869:             beq.s *               * branch if Z set
00:000027A6 087900010000F101	   870:             bchg.b #1,$F101       *
00:000027AE 66FE            	   871:             bne.s *               * branch if Z clear
00:000027B0 087900070000F102	   872:             bchg.b #7,$F102       *
00:000027B8 67FE            	   873:             beq.s *               * branch if Z set
00:000027BA 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
00:000027BE 0C180001        	   875:             cmpi.b #$01,(a0)+
00:000027C2 66FE            	   876:             bne.s *               * branch if Z clear
00:000027C4 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
00:000027C8 66FE            	   878:             bne.s *               * branch if Z clear
00:000027CA 0C180080        	   879:             cmpi.b #$80,(a0)+
00:000027CE 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
00:000027D0 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
00:000027D6 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
00:000027D8 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
00:000027DA 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
00:000027DC 0B40            	   891:             bchg.l d5,d0
00:000027DE 67FE            	   892:             beq.s *               * branch if Z set
00:000027E0 0D40            	   893:             bchg.l d6,d0              *
00:000027E2 66FE            	   894:             bne.s *               * branch if Z clear
00:000027E4 0F40            	   895:             bchg.l d7,d0             *
00:000027E6 67FE            	   896:             beq.s *               * branch if Z set
00:000027E8 0C8000000002    	   897:             cmpi.l #$00000002,d0
00:000027EE 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
00:000027F0 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
00:000027F2 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
00:000027F4 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
00:000027F6 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
00:000027FA 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
00:000027FE 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002800 0B50            	   908:             bchg.b d5,(a0)
00:00002802 67FE            	   909:             beq.s *               * branch if Z set
00:00002804 0D50            	   910:             bchg.b d6,(a0)            *
00:00002806 66FE            	   911:             bne.s *               * branch if Z clear
00:00002808 0F50            	   912:             bchg.b d7,(a0)            *
00:0000280A 67FE            	   913:             beq.s *               * branch if Z set
00:0000280C 0C100002        	   914:             cmpi.b #$02,(a0)
00:00002810 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
00:00002812 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002816 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
00:0000281A 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
00:0000281E 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
00:00002822 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002826 0B58            	   924:             bchg.b d5,(a0)+
00:00002828 67FE            	   925:             beq.s *               * branch if Z set
00:0000282A 0D58            	   926:             bchg.b d6,(a0)+           *
00:0000282C 66FE            	   927:             bne.s *               * branch if Z clear
00:0000282E 0F58            	   928:             bchg.b d7,(a0)+           *
00:00002830 67FE            	   929:             beq.s *               * branch if Z set
00:00002832 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002836 4A18            	   931:             cmpi.b #$00,(a0)+
00:00002838 66FE            	   932:             bne.s *               * branch if Z clear
00:0000283A 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
00:0000283E 66FE            	   934:             bne.s *               * branch if Z clear
00:00002840 4A18            	   935:             cmpi.b #$00,(a0)+
00:00002842 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
00:00002844 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
00:00002848 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
00:0000284C 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
00:00002850 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
00:00002854 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
00:00002858 0B60            	   944:             bchg.b d5,-(a0)
00:0000285A 67FE            	   945:             beq.s *               * branch if Z set
00:0000285C 0D60            	   946:             bchg.b d6,-(a0)           *
00:0000285E 66FE            	   947:             bne.s *               * branch if Z clear
00:00002860 0F60            	   948:             bchg.b d7,-(a0)           *
00:00002862 67FE            	   949:             beq.s *               * branch if Z set
00:00002864 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002868 4A20            	   951:             cmpi.b #$00,-(a0)
00:0000286A 66FE            	   952:             bne.s *               * branch if Z clear
00:0000286C 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
00:00002870 66FE            	   954:             bne.s *               * branch if Z clear
00:00002872 4A20            	   955:             cmpi.b #$00,-(a0)
00:00002874 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
00:00002876 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
00:0000287A 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
00:0000287E 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
00:00002882 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
00:00002886 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
00:0000288A 0B50            	   964:             bchg.b d5,0(a0)
00:0000288C 67FE            	   965:             beq.s *               * branch if Z set
00:0000288E 0D680001        	   966:             bchg.b d6,1(a0)           *
00:00002892 66FE            	   967:             bne.s *               * branch if Z clear
00:00002894 0F680002        	   968:             bchg.b d7,2(a0)           *
00:00002898 67FE            	   969:             beq.s *               * branch if Z set
00:0000289A 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000289E 4A18            	   971:             cmpi.b #$00,(a0)+
00:000028A0 66FE            	   972:             bne.s *               * branch if Z clear
00:000028A2 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
00:000028A6 66FE            	   974:             bne.s *               * branch if Z clear
00:000028A8 4A18            	   975:             cmpi.b #$00,(a0)+
00:000028AA 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
00:000028AC 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
00:000028B0 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
00:000028B2 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
00:000028B6 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
00:000028B8 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
00:000028BA 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
00:000028BE 66FE            	   985:             bne.s *               * branch if Z clear
00:000028C0 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
00:000028C4 67FE            	   987:             beq.s *               * branch if Z set
00:000028C6 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
00:000028CA 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
00:000028CC 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
00:000028D0 67FE            	   992:             beq.s *               * branch if Z set
00:000028D2 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
00:000028D6 66FE            	   994:             bne.s *               * branch if Z clear
00:000028D8 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
00:000028DC 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
00:000028DE 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
00:000028E2 66FE            	   999:             bne.s *               * branch if Z clear
00:000028E4 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
00:000028E8 67FE            	  1001:             beq.s *               * branch if Z set
00:000028EA 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
00:000028EE 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
00:000028F0 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
00:000028F4 67FE            	  1006:             beq.s *               * branch if Z set
00:000028F6 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
00:000028FA 66FE            	  1008:             bne.s *               * branch if Z clear
00:000028FC 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
00:00002900 67FE            	  1010:             beq.s *               * branch if Z set
00:00002902 4A18            	  1011:             cmpi.b #$00,(a0)+
00:00002904 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
00:00002906 0B780100        	  1015:             bchg.b d5,$0100
00:0000290A 66FE            	  1016:             bne.s *               * branch if Z clear
00:0000290C 0D780101        	  1017:             bchg.b d6,$0101           *
00:00002910 67FE            	  1018:             beq.s *               * branch if Z set
00:00002912 0F780102        	  1019:             bchg.b d7,$0102           *
00:00002916 66FE            	  1020:             bne.s *               * branch if Z clear
00:00002918 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
00:0000291C 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
00:0000291E 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
00:00002924 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
00:00002928 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
00:0000292C 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
00:00002930 0B790000F100    	  1029:             bchg.b d5,$F100
00:00002936 67FE            	  1030:             beq.s *               * branch if Z set
00:00002938 0D790000F101    	  1031:             bchg.b d6,$F101       *
00:0000293E 66FE            	  1032:             bne.s *               * branch if Z clear
00:00002940 0F790000F102    	  1033:             bchg.b d7,$F102       *
00:00002946 67FE            	  1034:             beq.s *               * branch if Z set
00:00002948 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
00:0000294E 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
00:00002952 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
00:00002954 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
00:00002956 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
00:0000295C 08800000        	  1054:             bclr.l #0,d0
00:00002960 67FE            	  1055:             beq.s *               * branch if Z set
00:00002962 08800001        	  1056:             bclr.l #1,d0              *
00:00002966 67FE            	  1057:             beq.s *               * branch if Z set
00:00002968 0880000F        	  1058:             bclr.l #15,d0             *
00:0000296C 66FE            	  1059:             bne.s *               * branch if Z clear
00:0000296E 0880001F        	  1060:             bclr.l #31,d0             *
00:00002972 67FE            	  1061:             beq.s *               * branch if Z set
00:00002974 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
00:0000297A 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
00:0000297C 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002980 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
00:00002984 08900000        	  1069:             bclr.b #0,(a0)
00:00002988 67FE            	  1070:             beq.s *               * branch if Z set
00:0000298A 08900007        	  1071:             bclr.b #7,(a0)            *
00:0000298E 66FE            	  1072:             bne.s *               * branch if Z clear
00:00002990 0C10000E        	  1073:             cmpi.b #$0E,(a0)
00:00002994 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
00:00002996 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000299A 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
00:0000299E 4218            	  1079:             move.b #$00,(a0)+         * populate test data
00:000029A0 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
00:000029A4 08980000        	  1081:             bclr.b #0,(a0)+
00:000029A8 67FE            	  1082:             beq.s *               * branch if Z set
00:000029AA 08980001        	  1083:             bclr.b #1,(a0)+           *
00:000029AE 66FE            	  1084:             bne.s *               * branch if Z clear
00:000029B0 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
00:000029B4 4A18            	  1086:             cmpi.b #$00,(a0)+
00:000029B6 66FE            	  1087:             bne.s *               * branch if Z clear
00:000029B8 4A18            	  1088:             cmpi.b #$00,(a0)+
00:000029BA 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
00:000029BC 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
00:000029C0 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
00:000029C4 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
00:000029C8 08A00007        	  1096:             bclr.b #7,-(a0)
00:000029CC 67FE            	  1097:             beq.s *               * branch if Z set
00:000029CE 08A00000        	  1098:             bclr.b #0,-(a0)           *
00:000029D2 67FE            	  1099:             beq.s *               * branch if Z set
00:000029D4 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
00:000029D8 4A20            	  1101:             cmpi.b #$00,-(a0)
00:000029DA 66FE            	  1102:             bne.s *               * branch if Z clear
00:000029DC 4A20            	  1103:             cmpi.b #$00,-(a0)
00:000029DE 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
00:000029E0 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
00:000029E4 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
00:000029E8 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
00:000029EC 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
00:000029F0 08900000        	  1112:             bclr.b #0,0(a0)
00:000029F4 67FE            	  1113:             beq.s *               * branch if Z set
00:000029F6 08A800040001    	  1114:             bclr.b #4,1(a0)           *
00:000029FC 67FE            	  1115:             beq.s *               * branch if Z set
00:000029FE 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A02 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
00:00002A06 66FE            	  1118:             bne.s *               * branch if Z clear
00:00002A08 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
00:00002A0C 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
00:00002A0E 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
00:00002A12 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
00:00002A14 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
00:00002A18 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
00:00002A1A 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
00:00002A1C 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
00:00002A20 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
00:00002A24 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
00:00002A28 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
00:00002A2E 67FE            	  1133:             beq.s *               * branch if Z set
00:00002A30 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
00:00002A36 67FE            	  1135:             beq.s *               * branch if Z set
00:00002A38 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
00:00002A3E 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
00:00002A40 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
00:00002A46 67FE            	  1140:             beq.s *               * branch if Z set
00:00002A48 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
00:00002A4E 67FE            	  1142:             beq.s *               * branch if Z set
00:00002A50 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
00:00002A56 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
00:00002A58 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
00:00002A5E 67FE            	  1147:             beq.s *               * branch if Z set
00:00002A60 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
00:00002A66 66FE            	  1149:             bne.s *               * branch if Z clear
00:00002A68 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
00:00002A6E 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
00:00002A70 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
00:00002A76 66FE            	  1154:             bne.s *               * branch if Z clear
00:00002A78 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
00:00002A7E 67FE            	  1156:             beq.s *               * branch if Z set
00:00002A80 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
00:00002A86 66FE            	  1158:             bne.s *               * branch if Z clear
00:00002A88 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A8C 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
00:00002A90 66FE            	  1161:             bne.s *               * branch if Z clear
00:00002A92 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
00:00002A96 66FE            	  1163:             bne.s *               * branch if Z clear
00:00002A98 0C180059        	  1164:             cmpi.b #$59,(a0)+
00:00002A9C 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
00:00002A9E 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
00:00002AA2 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
00:00002AA6 08B800000100    	  1171:             bclr.b #0,$0100
00:00002AAC 67FE            	  1172:             beq.s *               * branch if Z set
00:00002AAE 08B800010100    	  1173:             bclr.b #1,$0100           *
00:00002AB4 67FE            	  1174:             beq.s *               * branch if Z set
00:00002AB6 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002ABA 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
00:00002ABE 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
00:00002AC0 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
00:00002AC6 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
00:00002ACA 08B900000000F100	  1183:             bclr.b #0,$F100
00:00002AD2 67FE            	  1184:             beq.s *               * branch if Z set
00:00002AD4 08B900010000F100	  1185:             bclr.b #1,$F100       *
00:00002ADC 67FE            	  1186:             beq.s *               * branch if Z set
00:00002ADE 08B900020000F100	  1187:             bclr.b #2,$F100       *
00:00002AE6 67FE            	  1188:             beq.s *               * branch if Z set
00:00002AE8 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
00:00002AEE 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
00:00002AF2 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
00:00002AF4 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
00:00002AFA 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
00:00002AFC 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
00:00002AFE 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
00:00002B00 0B80            	  1202:             bclr.l d5,d0
00:00002B02 66FE            	  1203:             bne.s *               * branch if Z clear
00:00002B04 0D80            	  1204:             bclr.l d6,d0              *
00:00002B06 66FE            	  1205:             bne.s *               * branch if Z clear
00:00002B08 0F80            	  1206:             bclr.l d7,d0             *
00:00002B0A 67FE            	  1207:             beq.s *               * branch if Z set
00:00002B0C 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
00:00002B12 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
00:00002B14 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
00:00002B16 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
00:00002B18 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
00:00002B1A 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002B1E 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
00:00002B22 0B90            	  1218:             bclr.b d5,(a0)
00:00002B24 67FE            	  1219:             beq.s *               * branch if Z set
00:00002B26 0D90            	  1220:             bclr.b d6,(a0)            *
00:00002B28 66FE            	  1221:             bne.s *               * branch if Z clear
00:00002B2A 0F90            	  1222:             bclr.b d7,(a0)            *
00:00002B2C 67FE            	  1223:             beq.s *               * branch if Z set
00:00002B2E 4A10            	  1224:             cmpi.b #$00,(a0)
00:00002B30 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
00:00002B32 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002B36 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
00:00002B3A 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
00:00002B3E 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
00:00002B42 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002B46 0B98            	  1234:             bclr.b d5,(a0)+
00:00002B48 67FE            	  1235:             beq.s *               * branch if Z set
00:00002B4A 0D98            	  1236:             bclr.b d6,(a0)+           *
00:00002B4C 66FE            	  1237:             bne.s *               * branch if Z clear
00:00002B4E 0F98            	  1238:             bclr.b d7,(a0)+           *
00:00002B50 67FE            	  1239:             beq.s *               * branch if Z set
00:00002B52 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002B56 4A18            	  1241:             cmpi.b #$00,(a0)+
00:00002B58 66FE            	  1242:             bne.s *               * branch if Z clear
00:00002B5A 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
00:00002B5E 66FE            	  1244:             bne.s *               * branch if Z clear
00:00002B60 4A18            	  1245:             cmpi.b #$00,(a0)+
00:00002B62 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
00:00002B64 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
00:00002B68 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
00:00002B6C 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
00:00002B70 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
00:00002B74 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
00:00002B78 0BA0            	  1254:             bclr.b d5,-(a0)
00:00002B7A 67FE            	  1255:             beq.s *               * branch if Z set
00:00002B7C 0DA0            	  1256:             bclr.b d6,-(a0)           *
00:00002B7E 66FE            	  1257:             bne.s *               * branch if Z clear
00:00002B80 0FA0            	  1258:             bclr.b d7,-(a0)           *
00:00002B82 67FE            	  1259:             beq.s *               * branch if Z set
00:00002B84 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002B88 4A20            	  1261:             cmpi.b #$00,-(a0)
00:00002B8A 66FE            	  1262:             bne.s *               * branch if Z clear
00:00002B8C 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
00:00002B90 66FE            	  1264:             bne.s *               * branch if Z clear
00:00002B92 4A20            	  1265:             cmpi.b #$00,-(a0)
00:00002B94 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
00:00002B96 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
00:00002B9A 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
00:00002B9E 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
00:00002BA2 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
00:00002BA6 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
00:00002BAA 0B90            	  1274:             bclr.b d5,0(a0)
00:00002BAC 67FE            	  1275:             beq.s *               * branch if Z set
00:00002BAE 0DA80001        	  1276:             bclr.b d6,1(a0)           *
00:00002BB2 66FE            	  1277:             bne.s *               * branch if Z clear
00:00002BB4 0FA80002        	  1278:             bclr.b d7,2(a0)           *
00:00002BB8 67FE            	  1279:             beq.s *               * branch if Z set
00:00002BBA 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002BBE 4A18            	  1281:             cmpi.b #$00,(a0)+
00:00002BC0 66FE            	  1282:             bne.s *               * branch if Z clear
00:00002BC2 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
00:00002BC6 66FE            	  1284:             bne.s *               * branch if Z clear
00:00002BC8 4A18            	  1285:             cmpi.b #$00,(a0)+
00:00002BCA 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
00:00002BCC 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
00:00002BD0 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
00:00002BD4 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
00:00002BD8 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:00002BDC 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
00:00002BE0 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
00:00002BE4 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
00:00002BE6 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
00:00002BEA 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
00:00002BEC 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
00:00002BEE 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
00:00002BF2 67FE            	  1300:             beq.s *               * branch if Z set
00:00002BF4 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
00:00002BF8 67FE            	  1302:             beq.s *               * branch if Z set
00:00002BFA 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
00:00002BFE 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
00:00002C00 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
00:00002C04 66FE            	  1307:             bne.s *               * branch if Z clear
00:00002C06 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
00:00002C0A 66FE            	  1309:             bne.s *               * branch if Z clear
00:00002C0C 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
00:00002C10 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
00:00002C12 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
00:00002C16 66FE            	  1314:             bne.s *               * branch if Z clear
00:00002C18 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
00:00002C1C 66FE            	  1316:             bne.s *               * branch if Z clear
00:00002C1E 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
00:00002C22 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
00:00002C24 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
00:00002C28 66FE            	  1321:             bne.s *               * branch if Z clear
00:00002C2A 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
00:00002C2E 66FE            	  1323:             bne.s *               * branch if Z clear
00:00002C30 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
00:00002C34 66FE            	  1325:             bne.s *               * branch if Z clear
00:00002C36 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
00:00002C3A 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
00:00002C3E 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
00:00002C40 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
00:00002C44 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
00:00002C48 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
00:00002C4C 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:00002C50 0BB80100        	  1335:             bclr.b d5,$0100
00:00002C54 67FE            	  1336:             beq.s *               * branch if Z set
00:00002C56 0DB80101        	  1337:             bclr.b d6,$0101           *
00:00002C5A 67FE            	  1338:             beq.s *               * branch if Z set
00:00002C5C 0FB80102        	  1339:             bclr.b d7,$0102           *
00:00002C60 67FE            	  1340:             beq.s *               * branch if Z set
00:00002C62 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
00:00002C66 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
00:00002C6A 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
00:00002C6C 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
00:00002C72 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
00:00002C76 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
00:00002C7A 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
00:00002C7E 0BB90000F100    	  1350:             bclr.b d5,$F100
00:00002C84 67FE            	  1351:             beq.s *               * branch if Z set
00:00002C86 0DB90000F101    	  1352:             bclr.b d6,$F101       *
00:00002C8C 66FE            	  1353:             bne.s *               * branch if Z clear
00:00002C8E 0FB90000F102    	  1354:             bclr.b d7,$F102       *
00:00002C94 67FE            	  1355:             beq.s *               * branch if Z set
00:00002C96 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
00:00002C9C 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
00:00002CA0 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
00:00002CA2 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
00:00002CA4 7000            	  1375:             moveq  #$00000000,d0      * populate test data
00:00002CA6 08C00000        	  1376:             bset.l #0,d0
00:00002CAA 66FE            	  1377:             bne.s *               * branch if Z clear
00:00002CAC 08C00001        	  1378:             bset.l #1,d0              *
00:00002CB0 66FE            	  1379:             bne.s *               * branch if Z clear
00:00002CB2 08C0000F        	  1380:             bset.l #15,d0             *
00:00002CB6 66FE            	  1381:             bne.s *               * branch if Z clear
00:00002CB8 08C0001F        	  1382:             bset.l #31,d0             *
00:00002CBC 66FE            	  1383:             bne.s *               * branch if Z clear
00:00002CBE 0C8080008003    	  1384:             cmpi.l #$80008003,d0
00:00002CC4 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
00:00002CC6 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002CCA 4210            	  1390:             move.b #$00,(a0)          * populate test data
00:00002CCC 08D00000        	  1391:             bset.b #0,(a0)
00:00002CD0 66FE            	  1392:             bne.s *               * branch if Z clear
00:00002CD2 08D00007        	  1393:             bset.b #7,(a0)            *
00:00002CD6 66FE            	  1394:             bne.s *               * branch if Z clear
00:00002CD8 0C100081        	  1395:             cmpi.b #$81,(a0)
00:00002CDC 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
00:00002CDE 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002CE2 4218            	  1400:             move.b #$00,(a0)+         * populate test data
00:00002CE4 4218            	  1401:             move.b #$00,(a0)+         * populate test data
00:00002CE6 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002CEA 08D80000        	  1403:             bset.b #0,(a0)+
00:00002CEE 66FE            	  1404:             bne.s *               * branch if Z clear
00:00002CF0 08D80001        	  1405:             bset.b #1,(a0)+           *
00:00002CF4 66FE            	  1406:             bne.s *               * branch if Z clear
00:00002CF6 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002CFA 0C180001        	  1408:             cmpi.b #$01,(a0)+
00:00002CFE 66FE            	  1409:             bne.s *               * branch if Z clear
00:00002D00 0C180002        	  1410:             cmpi.b #$02,(a0)+
00:00002D04 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
00:00002D06 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
00:00002D0A 4218            	  1416:             move.b #$00,(a0)+         * populate test data
00:00002D0C 4218            	  1417:             move.b #$00,(a0)+         * populate test data
00:00002D0E 08E00007        	  1418:             bset.b #7,-(a0)
00:00002D12 66FE            	  1419:             bne.s *               * branch if Z clear
00:00002D14 08E00000        	  1420:             bset.b #0,-(a0)           *
00:00002D18 66FE            	  1421:             bne.s *               * branch if Z clear
00:00002D1A 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
00:00002D1E 0C200080        	  1423:             cmpi.b #$80,-(a0)
00:00002D22 66FE            	  1424:             bne.s *               * branch if Z clear
00:00002D24 0C200001        	  1425:             cmpi.b #$01,-(a0)
00:00002D28 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
00:00002D2A 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
00:00002D2E 4218            	  1431:             move.b #$00,(a0)+         * populate test data
00:00002D30 4218            	  1432:             move.b #$00,(a0)+         * populate test data
00:00002D32 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
00:00002D36 08D00000        	  1434:             bset.b #0,0(a0)
00:00002D3A 66FE            	  1435:             bne.s *               * branch if Z clear
00:00002D3C 08E800040001    	  1436:             bset.b #4,1(a0)           *
00:00002D42 66FE            	  1437:             bne.s *               * branch if Z clear
00:00002D44 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D48 0C180001        	  1439:             cmpi.b #$01,(a0)+
00:00002D4C 66FE            	  1440:             bne.s *               * branch if Z clear
00:00002D4E 0C180010        	  1441:             cmpi.b #$10,(a0)+
00:00002D52 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
00:00002D54 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
00:00002D58 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
00:00002D5A 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
00:00002D5E 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
00:00002D60 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
00:00002D62 4218            	  1451:             move.b #$00,(a0)+         * populate test data
00:00002D64 4218            	  1452:             move.b #$00,(a0)+         * populate test data
00:00002D66 4218            	  1453:             move.b #$00,(a0)+         * populate test data
00:00002D68 4218            	  1454:             move.b #$00,(a0)+         * populate test data
00:00002D6A 4218            	  1455:             move.b #$00,(a0)+         * populate test data
00:00002D6C 4218            	  1456:             move.b #$00,(a0)+         * populate test data
00:00002D6E 4218            	  1457:             move.b #$00,(a0)+         * populate test data
00:00002D70 4218            	  1458:             move.b #$00,(a0)+         * populate test data
00:00002D72 4218            	  1459:             move.b #$00,(a0)+         * populate test data
00:00002D74 4218            	  1460:             move.b #$00,(a0)+         * populate test data
00:00002D76 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
00:00002D7A 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
00:00002D80 66FE            	  1463:             bne.s *               * branch if Z clear
00:00002D82 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
00:00002D88 66FE            	  1465:             bne.s *               * branch if Z clear
00:00002D8A 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
00:00002D90 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
00:00002D92 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
00:00002D98 66FE            	  1470:             bne.s *               * branch if Z clear
00:00002D9A 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
00:00002DA0 66FE            	  1472:             bne.s *               * branch if Z clear
00:00002DA2 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
00:00002DA8 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
00:00002DAA 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
00:00002DB0 66FE            	  1477:             bne.s *               * branch if Z clear
00:00002DB2 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
00:00002DB8 66FE            	  1479:             bne.s *               * branch if Z clear
00:00002DBA 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
00:00002DC0 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
00:00002DC2 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
00:00002DC8 66FE            	  1484:             bne.s *               * branch if Z clear
00:00002DCA 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
00:00002DD0 66FE            	  1486:             bne.s *               * branch if Z clear
00:00002DD2 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
00:00002DD8 66FE            	  1488:             bne.s *               * branch if Z clear
00:00002DDA 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002DDE 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
00:00002DE4 66FE            	  1491:             bne.s *               * branch if Z clear
00:00002DE6 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
00:00002DEC 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
00:00002DEE 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
00:00002DF2 4218            	  1499:             move.b #$00,(a0)+         * populate test data
00:00002DF4 08F800000100    	  1500:             bset.b #0,$0100
00:00002DFA 66FE            	  1501:             bne.s *               * branch if Z clear
00:00002DFC 08F800010100    	  1502:             bset.b #1,$0100           *
00:00002E02 66FE            	  1503:             bne.s *               * branch if Z clear
00:00002E04 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E08 0C180003        	  1505:             cmpi.b #$03,(a0)+
00:00002E0C 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
00:00002E0E 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
00:00002E14 4210            	  1511:             move.b #$00,(a0)          * populate test data
00:00002E16 08F900000000F100	  1512:             bset.b #0,$F100
00:00002E1E 66FE            	  1513:             bne.s *               * branch if Z clear
00:00002E20 08F900010000F100	  1514:             bset.b #1,$F100       *
00:00002E28 66FE            	  1515:             bne.s *               * branch if Z clear
00:00002E2A 08F900020000F100	  1516:             bset.b #2,$F100       *
00:00002E32 66FE            	  1517:             bne.s *               * branch if Z clear
00:00002E34 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
00:00002E3A 0C180007        	  1519:             cmpi.b #$07,(a0)+
00:00002E3E 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
00:00002E40 7000            	  1526:             moveq  #$00000000,d0      * populate test data
00:00002E42 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
00:00002E44 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
00:00002E46 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
00:00002E48 0BC0            	  1531:             bset.l d5,d0
00:00002E4A 66FE            	  1532:             bne.s *               * branch if Z clear
00:00002E4C 0DC0            	  1533:             bset.l d6,d0              *
00:00002E4E 66FE            	  1534:             bne.s *               * branch if Z clear
00:00002E50 0FC0            	  1535:             bset.l d7,d0             *
00:00002E52 66FE            	  1536:             bne.s *               * branch if Z clear
00:00002E54 0C8080000003    	  1537:             cmpi.l #$80000003,d0
00:00002E5A 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
00:00002E5C 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
00:00002E5E 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
00:00002E60 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
00:00002E62 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E66 4210            	  1546:             move.b #$00,(a0)          * populate test data
00:00002E68 0BD0            	  1547:             bset.b d5,(a0)
00:00002E6A 66FE            	  1548:             bne.s *               * branch if Z clear
00:00002E6C 0DD0            	  1549:             bset.b d6,(a0)            *
00:00002E6E 66FE            	  1550:             bne.s *               * branch if Z clear
00:00002E70 0FD0            	  1551:             bset.b d7,(a0)            *
00:00002E72 66FE            	  1552:             bne.s *               * branch if Z clear
00:00002E74 0C100083        	  1553:             cmpi.b #$83,(a0)
00:00002E78 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
00:00002E7A 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E7E 4218            	  1559:             move.b #$00,(a0)+         * populate test data
00:00002E80 4218            	  1560:             move.b #$00,(a0)+         * populate test data
00:00002E82 4218            	  1561:             move.b #$00,(a0)+         * populate test data
00:00002E84 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E88 0BD8            	  1563:             bset.b d5,(a0)+
00:00002E8A 66FE            	  1564:             bne.s *               * branch if Z clear
00:00002E8C 0DD8            	  1565:             bset.b d6,(a0)+           *
00:00002E8E 66FE            	  1566:             bne.s *               * branch if Z clear
00:00002E90 0FD8            	  1567:             bset.b d7,(a0)+           *
00:00002E92 66FE            	  1568:             bne.s *               * branch if Z clear
00:00002E94 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E98 0C180001        	  1570:             cmpi.b #$01,(a0)+
00:00002E9C 66FE            	  1571:             bne.s *               * branch if Z clear
00:00002E9E 0C180002        	  1572:             cmpi.b #$02,(a0)+
00:00002EA2 66FE            	  1573:             bne.s *               * branch if Z clear
00:00002EA4 0C180080        	  1574:             cmpi.b #$80,(a0)+
00:00002EA8 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
00:00002EAA 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
00:00002EAE 4218            	  1579:             move.b #$00,(a0)+         * populate test data
00:00002EB0 4218            	  1580:             move.b #$00,(a0)+         * populate test data
00:00002EB2 4218            	  1581:             move.b #$00,(a0)+         * populate test data
00:00002EB4 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
00:00002EB8 0BE0            	  1583:             bset.b d5,-(a0)
00:00002EBA 66FE            	  1584:             bne.s *               * branch if Z clear
00:00002EBC 0DE0            	  1585:             bset.b d6,-(a0)           *
00:00002EBE 66FE            	  1586:             bne.s *               * branch if Z clear
00:00002EC0 0FE0            	  1587:             bset.b d7,-(a0)           *
00:00002EC2 66FE            	  1588:             bne.s *               * branch if Z clear
00:00002EC4 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002EC8 0C200001        	  1590:             cmpi.b #$01,-(a0)
00:00002ECC 66FE            	  1591:             bne.s *               * branch if Z clear
00:00002ECE 0C200002        	  1592:             cmpi.b #$02,-(a0)
00:00002ED2 66FE            	  1593:             bne.s *               * branch if Z clear
00:00002ED4 0C200080        	  1594:             cmpi.b #$80,-(a0)
00:00002ED8 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
00:00002EDA 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
00:00002EDE 4218            	  1599:             move.b #$00,(a0)+         * populate test data
00:00002EE0 4218            	  1600:             move.b #$00,(a0)+         * populate test data
00:00002EE2 4218            	  1601:             move.b #$00,(a0)+         * populate test data
00:00002EE4 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
00:00002EE8 0BD0            	  1603:             bset.b d5,0(a0)
00:00002EEA 66FE            	  1604:             bne.s *               * branch if Z clear
00:00002EEC 0DE80001        	  1605:             bset.b d6,1(a0)           *
00:00002EF0 66FE            	  1606:             bne.s *               * branch if Z clear
00:00002EF2 0FE80002        	  1607:             bset.b d7,2(a0)           *
00:00002EF6 66FE            	  1608:             bne.s *               * branch if Z clear
00:00002EF8 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002EFC 0C180001        	  1610:             cmpi.b #$01,(a0)+
00:00002F00 66FE            	  1611:             bne.s *               * branch if Z clear
00:00002F02 0C180002        	  1612:             cmpi.b #$02,(a0)+
00:00002F06 66FE            	  1613:             bne.s *               * branch if Z clear
00:00002F08 0C180080        	  1614:             cmpi.b #$80,(a0)+
00:00002F0C 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
00:00002F0E 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
00:00002F12 4218            	  1619:             move.b #$00,(a0)+         * populate test data
00:00002F14 4218            	  1620:             move.b #$00,(a0)+         * populate test data
00:00002F16 4218            	  1621:             move.b #$00,(a0)+         * populate test data
00:00002F18 4218            	  1622:             move.b #$00,(a0)+         * populate test data
00:00002F1A 4218            	  1623:             move.b #$00,(a0)+         * populate test data
00:00002F1C 4218            	  1624:             move.b #$00,(a0)+         * populate test data
00:00002F1E 4218            	  1625:             move.b #$00,(a0)+         * populate test data
00:00002F20 4218            	  1626:             move.b #$00,(a0)+         * populate test data
00:00002F22 4218            	  1627:             move.b #$00,(a0)+         * populate test data
00:00002F24 4218            	  1628:             move.b #$00,(a0)+         * populate test data
00:00002F26 4218            	  1629:             move.b #$00,(a0)+         * populate test data
00:00002F28 4218            	  1630:             move.b #$00,(a0)+         * populate test data
00:00002F2A 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
00:00002F2E 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
00:00002F30 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
00:00002F34 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
00:00002F36 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
00:00002F38 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
00:00002F3C 66FE            	  1637:             bne.s *               * branch if Z clear
00:00002F3E 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
00:00002F42 66FE            	  1639:             bne.s *               * branch if Z clear
00:00002F44 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
00:00002F48 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
00:00002F4A 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
00:00002F4E 66FE            	  1644:             bne.s *               * branch if Z clear
00:00002F50 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
00:00002F54 66FE            	  1646:             bne.s *               * branch if Z clear
00:00002F56 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
00:00002F5A 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
00:00002F5C 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
00:00002F60 66FE            	  1651:             bne.s *               * branch if Z clear
00:00002F62 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
00:00002F66 66FE            	  1653:             bne.s *               * branch if Z clear
00:00002F68 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
00:00002F6C 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
00:00002F6E 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
00:00002F72 66FE            	  1658:             bne.s *               * branch if Z clear
00:00002F74 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
00:00002F78 66FE            	  1660:             bne.s *               * branch if Z clear
00:00002F7A 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
00:00002F7E 66FE            	  1662:             bne.s *               * branch if Z clear
00:00002F80 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002F84 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
00:00002F8A 66FE            	  1665:             bne.s *               * branch if Z clear
00:00002F8C 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
00:00002F92 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
00:00002F94 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
00:00002F98 4218            	  1672:             move.b #$00,(a0)+         * populate test data
00:00002F9A 4218            	  1673:             move.b #$00,(a0)+         * populate test data
00:00002F9C 4218            	  1674:             move.b #$00,(a0)+         * populate test data
00:00002F9E 0BF80100        	  1675:             bset.b d5,$0100
00:00002FA2 66FE            	  1676:             bne.s *               * branch if Z clear
00:00002FA4 0DF80100        	  1677:             bset.b d6,$0100           *
00:00002FA8 66FE            	  1678:             bne.s *               * branch if Z clear
00:00002FAA 0FF80100        	  1679:             bset.b d7,$0100           *
00:00002FAE 66FE            	  1680:             bne.s *               * branch if Z clear
00:00002FB0 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
00:00002FB4 0C180083        	  1682:             cmpi.b #$83,(a0)+
00:00002FB8 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
00:00002FBA 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
00:00002FC0 4218            	  1687:             move.b #$00,(a0)+         * populate test data
00:00002FC2 4218            	  1688:             move.b #$00,(a0)+         * populate test data
00:00002FC4 4218            	  1689:             move.b #$00,(a0)+         * populate test data
00:00002FC6 0BF90000F100    	  1690:             bset.b d5,$F100
00:00002FCC 66FE            	  1691:             bne.s *               * branch if Z clear
00:00002FCE 0DF90000F100    	  1692:             bset.b d6,$F100       *
00:00002FD4 66FE            	  1693:             bne.s *               * branch if Z clear
00:00002FD6 0FF90000F100    	  1694:             bset.b d7,$F100       *
00:00002FDC 66FE            	  1695:             bne.s *               * branch if Z clear
00:00002FDE 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
00:00002FE4 0C100083        	  1697:             cmpi.b #$83,(a0)
00:00002FE8 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
00:00002FEA 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
00:00002FEC 307C0100        	  1711:             move.l #$00000100,a0
00:00002FF0 203C12345678    	  1712:             move.l #$12345678,d0
00:00002FF6 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
00:00002FFC 4290            	  1714:             move.l #0,(a0)
00:00002FFE 42A80004        	  1715:             move.l #0,4(a0)
                            	  1716: 
00:00003002 01880000        	  1717:             movep.w d0,0(a0)      * even offset
00:00003006 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
00:0000300A 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
00:0000300E 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
00:00003012 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
00:00003018 66FE            	  1724:             bne.s *
00:0000301A 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
00:00003022 66FE            	  1726:             bne.s *
00:00003024 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
00:0000302C 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
00:0000302E 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
00:00003034 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
00:0000303A 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
00:00003040 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
00:00003046 01080000        	  1737:             movep.w 0(a0),d0      * even offset
00:0000304A 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
00:0000304E 05480004        	  1740:             movep.l 4(a0),d2      * even offset
00:00003052 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
00:00003056 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
00:0000305C 66FE            	  1744:             bne.s *
00:0000305E 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
00:00003064 66FE            	  1746:             bne.s *
00:00003066 0C8212345678    	  1747:             cmpi.l #$12345678,d2
00:0000306C 66FE            	  1748:             bne.s *
00:0000306E 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
00:00003074 66FE            	  1750:             bne.s *
                            	  1751: 
00:00003076 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
00:00003078 203C12345678    	  1764:             move.l #$12345678,d0
00:0000307E 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
00:00003082 000000FF        	  1766:             ori.b  #$FF,d0
00:00003086 0A00005A        	  1767:             eori.b #$5A,d0
00:0000308A 020000F0        	  1768:             andi.b #$F0,d0
00:0000308E 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
00:00003090 65FE            	  1770:             bcs.s *
00:00003092 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
00:00003094 4200            	  1772:             andi.b #$00,d0
00:00003096 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
00:00003098 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
00:0000309A 223C12345678    	  1777:             move.l #$12345678,d1
00:000030A0 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
00:000030A4 0041FFFF        	  1779:             ori.w  #$FFFF,d1
00:000030A8 0A415A5A        	  1780:             eori.w #$5A5A,d1
00:000030AC 0241F0F0        	  1781:             andi.w #$F0F0,d1
00:000030B0 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
00:000030B2 65FE            	  1783:             bcs.s *
00:000030B4 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
00:000030B6 4241            	  1785:             andi.w #$0000,d1
00:000030B8 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
00:000030BA 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
00:000030BC 243C12345678    	  1790:             move.l #$12345678,d2
00:000030C2 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
00:000030C6 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
00:000030CC 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
00:000030D2 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
00:000030D8 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
00:000030DA 65FE            	  1796:             bcs.s *
00:000030DC 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
00:000030DE 4282            	  1798:             andi.l #$00000000,d2
00:000030E0 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
00:000030E2 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
00:000030E4 307C0100        	  1804:             move.l #$00000100,a0
00:000030E8 20BC12345678    	  1805:             move.l #$12345678,(a0)
00:000030EE 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
00:000030F2 001000FF        	  1807:             ori.b  #$FF,(a0)
00:000030F6 0A10005A        	  1808:             eori.b #$5A,(a0)
00:000030FA 021000F0        	  1809:             andi.b #$F0,(a0)
00:000030FE 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
00:00003100 65FE            	  1811:             bcs.s *
00:00003102 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
00:00003104 4210            	  1813:             andi.b #$00,(a0)
00:00003106 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
00:00003108 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
00:0000310A 4A10            	  1816:             cmpi.b #$00,(a0)
00:0000310C 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
00:0000310E 20BC12345678    	  1820:             move.l #$12345678,(a0)
00:00003114 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
00:00003118 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
00:0000311C 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
00:00003120 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
00:00003124 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
00:00003126 65FE            	  1826:             bcs.s *
00:00003128 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
00:0000312A 4250            	  1828:             andi.w #$0000,(a0)
00:0000312C 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
00:0000312E 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
00:00003130 4A50            	  1831:             cmpi.w #$00,(a0)
00:00003132 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
00:00003134 20BC12345678    	  1835:             move.l #$12345678,(a0)
00:0000313A 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
00:0000313E 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
00:00003144 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
00:0000314A 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
00:00003150 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
00:00003152 65FE            	  1841:             bcs.s *
00:00003154 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
00:00003156 4290            	  1843:             andi.l #$00000000,(a0)
00:00003158 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
00:0000315A 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
00:0000315C 4A90            	  1846:             cmpi.l #$00,(a0)
00:0000315E 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
00:00003160 307C0100        	  1852:             move.l #$00000100,a0
00:00003164 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
00:0000316A 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
00:0000316E 001800F5        	  1856:             ori.b  #$F5,(a0)+
00:00003172 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
00:00003174 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
00:00003176 4618            	  1860:             eori.b #$FF,(a0)+
00:00003178 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
00:0000317A 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
00:0000317C 021800AA        	  1864:             andi.b #$AA,(a0)+
00:00003180 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
00:00003182 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
00:00003184 307C0100        	  1868:             move.l #$00000100,a0
00:00003188 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
00:0000318E 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
00:00003190 307C0100        	  1874:             move.l #$00000100,a0
00:00003194 327C0104        	  1875:             move.l #$00000104,a1
00:00003198 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
00:0000319E 22BC12345678    	  1877:             move.l #$12345678,(a1)
00:000031A4 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
00:000031A8 00585678        	  1880:             ori.w  #$5678,(a0)+
00:000031AC 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
00:000031AE 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
00:000031B0 4658            	  1884:             eori.w #$FFFF,(a0)+
00:000031B2 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
00:000031B4 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
00:000031B6 0258A55A        	  1888:             andi.w #$A55A,(a0)+
00:000031BA 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
00:000031BC 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
00:000031BE 307C0100        	  1892:             move.l #$00000100,a0
00:000031C2 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
00:000031C8 307C0104        	  1894:             move.l #$00000104,a0
00:000031CC 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
00:000031D2 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
00:000031D4 307C0100        	  1899:             move.l #$00000100,a0
00:000031D8 4298            	  1900:             move.l #$00000000,(a0)+
00:000031DA 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
00:000031E0 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
00:000031E6 307C0100        	  1903:             move.l #$00000100,a0
00:000031EA 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
00:000031EE 009812345678    	  1906:             ori.l  #$12345678,(a0)+
00:000031F4 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
00:000031F6 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
00:000031F8 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
00:000031FA 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
00:000031FC 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
00:000031FE 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
00:00003204 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
00:00003206 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
00:00003208 307C0100        	  1918:             move.l #$00000100,a0
00:0000320C 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
00:00003212 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
00:00003218 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
00:0000321E 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
00:00003220 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
00:00003222 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
00:00003228 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
00:0000322A 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:0000322C 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:0000322E 6100EF20        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:00003232 6100144E        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
00:00003236 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
00:0000323C 66FE            	  1945:                 bne.s *
00:0000323E 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
00:00003244 66FE            	  1947:                 bne.s *
00:00003246 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
00:0000324C 66FE            	  1949:                 bne.s *
00:0000324E 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
00:00003254 66FE            	  1951:                 bne.s *
                            	  1952: 
00:00003256 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
00:00003258 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
00:0000325E 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
00:00003260 307C0100        	  1966:             move.l #$00000100,a0
00:00003264 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
00:0000326A 7080            	  1970:             move.l #$FFFFFF80,d0
00:0000326C 0C000080        	  1971:             cmpi.b #$80,d0
00:00003270 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
00:00003272 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003274 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003276 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
00:00003278 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
00:0000327E 4A01            	  1978:             cmpi.b #$00,d1
00:00003280 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
00:00003282 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003284 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003286 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
00:00003288 7481D442        	  1984:             move.l #$FFFFFF02,d2
00:0000328C 0C0200FF        	  1985:             cmpi.b #$FF,d2
00:00003290 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
00:00003292 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003294 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003296 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
00:00003298 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
00:0000329E 0C0300FF        	  1992:             cmpi.b #$FF,d3
00:000032A2 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
00:000032A4 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
00:000032A6 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
00:000032A8 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
00:000032AA 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
00:000032B0 0C408000        	  2001:             cmpi.w #$8000,d0
00:000032B4 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
00:000032B6 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
00:000032B8 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
00:000032BA 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
00:000032BC 223CFFF00000    	  2007:             move.l #$FFF00000,d1
00:000032C2 4A41            	  2008:             cmpi.w #$0000,d1
00:000032C4 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
00:000032C6 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
00:000032C8 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
00:000032CA 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
00:000032CC 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
00:000032D2 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
00:000032D6 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
00:000032D8 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
00:000032DA 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
00:000032DC 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
00:000032DE 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
00:000032E4 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
00:000032E8 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
00:000032EA 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
00:000032EC 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
00:000032EE 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
00:000032F0 203C80000000    	  2029:             move.l #$80000000,d0
00:000032F6 0C8080000000    	  2030:             cmpi.l #$80000000,d0
00:000032FC 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
00:000032FE 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003300 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003302 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
00:00003304 7200            	  2036:             moveq  #$00000000,d1
00:00003306 4A81            	  2037:             cmpi.l #$00000000,d1
00:00003308 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
00:0000330A 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000330C 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000330E 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
00:00003310 7402            	  2043:             moveq  #$00000002,d2
00:00003312 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
00:00003318 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
00:0000331A 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000331C 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000331E 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
00:00003320 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
00:00003326 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
00:0000332C 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
00:0000332E 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003330 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003332 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
00:00003334 307C0100        	  2061:             move.l #$00000100,a0
00:00003338 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
00:0000333A 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
00:00003342 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
00:0000334A 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
00:00003350 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
00:00003352 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003354 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003356 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
00:00003358 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
00:00003360 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
00:00003364 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
00:00003366 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003368 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000336A 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
00:0000336C 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
00:00003374 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
00:0000337A 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
00:0000337C 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000337E 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003380 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
00:00003382 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
00:0000338A 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
00:00003390 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
00:00003392 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003394 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003396 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
00:00003398 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
00:000033A0 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
00:000033A6 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
00:000033A8 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
00:000033AA 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
00:000033AC 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
00:000033AE 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
00:000033B6 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
00:000033BA 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
00:000033BC 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
00:000033BE 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
00:000033C0 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
00:000033C2 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
00:000033CA 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
00:000033D0 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
00:000033D2 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
00:000033D4 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
00:000033D6 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
00:000033D8 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
00:000033E0 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
00:000033E6 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
00:000033E8 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
00:000033EA 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
00:000033EC 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
00:000033EE 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
00:000033F6 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
00:000033FE 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
00:00003400 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003402 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003404 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
00:00003406 42B0700C        	  2131:             move.l #$00000000,12(a0,d7)
00:0000340A 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
00:0000340E 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
00:00003410 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003412 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003414 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
00:00003416 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
00:0000341E 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00003426 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
00:00003428 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000342A 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000342C 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
00:0000342E 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
00:00003436 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:0000343E 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
00:00003440 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003442 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003444 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
00:00003446 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
00:00003448 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
00:0000344E 06000000        	  2168:             addi.b #0,d0
00:00003452 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
00:00003454 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003456 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003458 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000345A 06000010        	  2173:             addi.b #$10,d0
00:0000345E 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
00:00003460 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003462 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003464 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003466 060000A5        	  2178:             addi.b #$A5,d0
00:0000346A 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
00:0000346C 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000346E 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003470 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003472 0C00002D        	  2183:             cmpi.b #$2D,d0
00:00003476 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
00:00003478 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
00:0000347E 06400000        	  2188:             addi.w #0,d0
00:00003482 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
00:00003484 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003486 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003488 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000348A 06407000        	  2193:             addi.w #$7000,d0
00:0000348E 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
00:00003490 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003492 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003494 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003496 0640A55A        	  2198:             addi.w #$A55A,d0
00:0000349A 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
00:0000349C 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000349E 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
00:000034A0 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
00:000034A2 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
00:000034A6 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
00:000034A8 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
00:000034AE 068000000000    	  2208:             addi.l #0,d0
00:000034B4 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
00:000034B6 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
00:000034B8 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
00:000034BA 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
00:000034BC 0680F0000000    	  2213:             addi.l #$F0000000,d0
00:000034C2 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
00:000034C4 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
00:000034C6 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
00:000034C8 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
00:000034CA 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
00:000034D0 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
00:000034D2 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
00:000034D4 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
00:000034D6 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
00:000034D8 0680A0000000    	  2223:             addi.l #$A0000000,d0
00:000034DE 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
00:000034E0 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
00:000034E6 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
00:000034E8 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
00:000034EE 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
00:000034F4 063900000000F103	  2233:             addi.b #0,$F103
00:000034FC 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
00:000034FE 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003500 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003502 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003504 063900100000F103	  2238:             addi.b #$10,$F103
00:0000350C 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
00:0000350E 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003510 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003512 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003514 063900A50000F103	  2243:             addi.b #$A5,$F103
00:0000351C 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
00:0000351E 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003520 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003522 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003524 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
00:0000352C 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
00:0000352E 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
00:00003534 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
00:0000353A 067900000000F100	  2254:             addi.w #0,$F100
00:00003542 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
00:00003544 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003546 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003548 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000354A 067970000000F100	  2259:             addi.w #$7000,$F100
00:00003552 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
00:00003554 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003556 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003558 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000355A 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
00:00003562 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
00:00003564 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003566 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003568 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000356A 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
00:00003572 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
00:00003574 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
00:0000357C F100
00:0000357E 06B9000000000000	  2274:             addi.l #0,$F100
00:00003586 F100
00:00003588 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
00:0000358A 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000358C 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000358E 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003590 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
00:00003598 F100
00:0000359A 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
00:0000359C 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000359E 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
00:000035A0 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
00:000035A2 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
00:000035AA F100
00:000035AC 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
00:000035AE 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
00:000035B0 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
00:000035B2 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
00:000035B4 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
00:000035BC F100
00:000035BE 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
00:000035C0 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
00:000035C8 F100
00:000035CA 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
00:000035CC 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
00:000035CE 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
00:000035D4 04000000        	  2306:             subi.b #0,d0
00:000035D8 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
00:000035DA 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
00:000035DC 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
00:000035DE 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
00:000035E0 04000010        	  2311:             subi.b #$10,d0
00:000035E4 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
00:000035E6 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
00:000035E8 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
00:000035EA 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
00:000035EC 040000A5        	  2316:             subi.b #$A5,d0
00:000035F0 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
00:000035F2 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
00:000035F4 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
00:000035F6 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
00:000035F8 0C0000C3        	  2321:             cmpi.b #$C3,d0
00:000035FC 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
00:000035FE 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
00:00003604 04400000        	  2326:             subi.w #0,d0
00:00003608 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
00:0000360A 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000360C 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000360E 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003610 04407000        	  2331:             subi.w #$7000,d0
00:00003614 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
00:00003616 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003618 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000361A 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000361C 0440A55A        	  2336:             subi.w #$A55A,d0
00:00003620 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
00:00003622 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003624 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003626 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003628 0C40411E        	  2341:             cmpi.w #$411E,d0
00:0000362C 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
00:0000362E 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
00:00003634 048000000000    	  2346:             subi.l #0,d0
00:0000363A 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
00:0000363C 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000363E 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003640 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003642 0480F0000000    	  2351:             subi.l #$F0000000,d0
00:00003648 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
00:0000364A 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000364C 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000364E 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003650 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
00:00003656 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
00:00003658 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000365A 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000365C 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000365E 0480A0000000    	  2361:             subi.l #$A0000000,d0
00:00003664 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003666 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
00:0000366C 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
00:0000366E 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
00:00003674 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
00:0000367A 043900000000F103	  2371:             subi.b #0,$F103
00:00003682 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
00:00003684 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003686 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003688 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000368A 043900100000F103	  2376:             subi.b #$10,$F103
00:00003692 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
00:00003694 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003696 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003698 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000369A 043900A50000F103	  2381:             subi.b #$A5,$F103
00:000036A2 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
00:000036A4 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
00:000036A6 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
00:000036A8 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
00:000036AA 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
00:000036B2 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
00:000036B4 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
00:000036BA 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
00:000036C0 047900000000F100	  2392:             subi.w #0,$F100
00:000036C8 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
00:000036CA 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
00:000036CC 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
00:000036CE 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036D0 047970000000F100	  2397:             subi.w #$7000,$F100
00:000036D8 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
00:000036DA 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
00:000036DC 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
00:000036DE 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036E0 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
00:000036E8 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
00:000036EA 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
00:000036EC 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
00:000036EE 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036F0 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
00:000036F8 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
00:000036FA 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
00:00003702 F100
00:00003704 04B9000000000000	  2412:             subi.l #0,$F100
00:0000370C F100
00:0000370E 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
00:00003710 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003712 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003714 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003716 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
00:0000371E F100
00:00003720 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
00:00003722 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003724 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003726 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003728 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
00:00003730 F100
00:00003732 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
00:00003734 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003736 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003738 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000373A 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
00:00003742 F100
00:00003744 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003746 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
00:0000374E F100
00:00003750 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
00:00003752 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
00:00003754 203C11223344    	  2442:             move.l #$11223344,d0
00:0000375A 223C55667788    	  2443:             move.l #$55667788,d1
00:00003760 243C8899AABB    	  2444:             move.l #$8899aabb,d2
00:00003766 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
00:0000376C 7800            	  2446:             moveq  #$00000000,d4
00:0000376E 7A00            	  2447:             moveq  #$00000000,d5
00:00003770 7C00            	  2448:             moveq  #$00000000,d6
00:00003772 7E00            	  2449:             moveq  #$00000000,d7
00:00003774 207C44332211    	  2450:             move.l #$44332211,a0
00:0000377A 227C88776655    	  2451:             move.l #$88776655,a1
00:00003780 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
00:00003786 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
00:0000378C 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
00:0000378E 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
00:00003790 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003792 0C8400000044    	  2458:             cmpi.l #$00000044,d4
00:00003798 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
00:0000379A 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
00:0000379C 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
00:0000379E 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
00:000037A0 0C8500007788    	  2464:             cmpi.l #$00007788,d5
00:000037A6 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
00:000037A8 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
00:000037AA 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
00:000037AC 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
00:000037AE 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
00:000037B4 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
00:000037B6 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:000037B8 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
00:000037BA 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
00:000037BC 0C8500006655    	  2476:             cmpi.l #$00006655,d5
00:000037C2 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
00:000037C4 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:000037C6 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
00:000037C8 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
00:000037CA 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
00:000037D0 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
00:000037D2 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:000037D4 B9C2            	  2487:             cmpa.l d2,a4
00:000037D6 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
00:000037D8 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:000037DA BBC1            	  2491:             cmpa.l d1,a5
00:000037DC 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
00:000037DE 203C11223344    	  2498:             move.l #$11223344,d0
00:000037E4 223C00010100    	  2499:             move.l #$00010100,d1
00:000037EA 243C8899AABB    	  2500:             move.l #$8899aabb,d2
00:000037F0 7601            	  2501:             moveq  #$00000001,d3
00:000037F2 7800            	  2502:             moveq  #$00000000,d4
00:000037F4 7A00            	  2503:             moveq  #$00000000,d5
00:000037F6 7C00            	  2504:             moveq  #$00000000,d6
00:000037F8 7E00            	  2505:             moveq  #$00000000,d7
00:000037FA 91C8            	  2506:             move.l #$00000000,a0
00:000037FC 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
00:00003802 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
00:00003808 47F09804        	  2511:             lea 4(a0,a1.l),a3
00:0000380C 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
00:00003814 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
00:00003816 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003818 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
00:0000381E 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
00:00003820 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:00003828 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
00:0000382A 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000382C 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
00:00003832 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
00:00003834 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:0000383A 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
00:0000383C 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000383E 0C3900B900003821	  2529:             cmpi.b #$B9,1+MOVE2
00:00003846 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
00:00003848 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
00:0000384E 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
00:00003850 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003852 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
00:00003858 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
00:0000385A 203C11223344    	  2539:             move.l #$11223344,d0
00:00003860 223C00010100    	  2540:             move.l #$00010100,d1
00:00003866 243C8899AABB    	  2541:             move.l #$8899aabb,d2
00:0000386C 7602            	  2542:             moveq  #$00000002,d3
00:0000386E 7800            	  2543:             moveq  #$00000000,d4
00:00003870 7A00            	  2544:             moveq  #$00000000,d5
00:00003872 7C00            	  2545:             moveq  #$00000000,d6
00:00003874 7E00            	  2546:             moveq  #$00000000,d7
00:00003876 91C8            	  2547:             move.l #$00000000,a0
00:00003878 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
00:0000387E 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:00003884 49F09804        	  2552:             lea 4(a0,a1.l),a4
00:00003888 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
00:00003890 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
00:00003892 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003894 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
00:0000389A 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
00:0000389C 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:000038A4 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
00:000038A6 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038A8 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
00:000038AE 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
00:000038B0 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
00:000038B6 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
00:000038B8 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038BA 0C7967FE000038A4	  2570:             cmpi.w #$67FE,8+MOVE1
00:000038C2 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
00:000038C4 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
00:000038CA 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
00:000038CC 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038CE 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
00:000038D4 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
00:000038D6 203C11223344    	  2582:             move.l #$11223344,d0
00:000038DC 223C00010100    	  2583:             move.l #$00010100,d1
00:000038E2 243C8899AABB    	  2584:             move.l #$8899aabb,d2
00:000038E8 7602            	  2585:             moveq  #$00000002,d3
00:000038EA 7800            	  2586:             moveq  #$00000000,d4
00:000038EC 7A00            	  2587:             moveq  #$00000000,d5
00:000038EE 7C00            	  2588:             moveq  #$00000000,d6
00:000038F0 7E00            	  2589:             moveq  #$00000000,d7
00:000038F2 91C8            	  2590:             move.l #$00000000,a0
00:000038F4 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
00:000038FA 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:00003902 49F09804        	  2595:             lea 4(a0,a1.l),a4
00:00003906 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
00:0000390E 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
00:00003910 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003912 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:0000391A 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
00:0000391C 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00003924 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
00:00003926 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003928 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:00003930 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
00:00003932 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
00:00003938 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
00:0000393A 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000393C 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
00:00003944 3924
00:00003946 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
00:00003948 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:00003950 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
00:00003952 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003954 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
00:0000395C 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
00:0000395E 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
00:00003960 303C2FFF        	  2638:             move.w #$2FFF,d0
00:00003964 46C0            	  2639:             move.w d0,SR
00:00003966 6AFE            	  2640:             bpl.s *           * branch if Z clear
00:00003968 66FE            	  2641:             bne.s *           * branch if N clear
00:0000396A 68FE            	  2642:             bvc.s *           * branch if V clear
00:0000396C 64FE            	  2643:             bcc.s *           * branch if C clear
00:0000396E 303C2F00        	  2644:             move.w #$2F00,d0
00:00003972 44C0            	  2645:             move d0,CCR
00:00003974 67FE            	  2646:             beq.s *           * branch if Z set
00:00003976 6BFE            	  2647:             bmi.s *           * branch if N set
00:00003978 69FE            	  2648:             bvs.s *           * branch if V set
00:0000397A 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
00:0000397C 303C2000        	  2651:             move.w #$2000,d0
00:00003980 46C0            	  2652:             move.w d0,SR
00:00003982 67FE            	  2653:             beq.s *           * branch if Z set
00:00003984 6BFE            	  2654:             bmi.s *           * branch if N set
00:00003986 69FE            	  2655:             bvs.s *           * branch if V set
00:00003988 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
00:0000398A 307C0100        	  2659:             move.l #$00000100,a0
00:0000398E 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
00:00003992 46D0            	  2661:             move.w (a0),SR
00:00003994 6AFE            	  2662:             bpl.s *           * branch if Z clear
00:00003996 66FE            	  2663:             bne.s *           * branch if N clear
00:00003998 68FE            	  2664:             bvc.s *           * branch if V clear
00:0000399A 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
00:0000399C 30BC2000        	  2667:             move.w #$2000,(a0)
00:000039A0 46D0            	  2668:             move.w (a0),SR
00:000039A2 67FE            	  2669:             beq.s *           * branch if Z set
00:000039A4 6BFE            	  2670:             bmi.s *           * branch if N set
00:000039A6 69FE            	  2671:             bvs.s *           * branch if V set
00:000039A8 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
00:000039AA 307C0100        	  2675:             move.l #$00000100,a0
00:000039AE 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
00:000039B2 46D8            	  2677:             move.w (a0)+,SR
00:000039B4 6AFE            	  2678:             bpl.s *           * branch if Z clear
00:000039B6 66FE            	  2679:             bne.s *           * branch if N clear
00:000039B8 68FE            	  2680:             bvc.s *           * branch if V clear
00:000039BA 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
00:000039BC 30BC2000        	  2683:             move.w #$2000,(a0)
00:000039C0 46D8            	  2684:             move.w (a0)+,SR
00:000039C2 67FE            	  2685:             beq.s *           * branch if Z set
00:000039C4 6BFE            	  2686:             bmi.s *           * branch if N set
00:000039C6 69FE            	  2687:             bvs.s *           * branch if V set
00:000039C8 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
00:000039CA 307C0102        	  2691:             move.l #$00000102,a0
00:000039CE 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
00:000039D2 46D8            	  2693:             move.w (a0)+,SR
00:000039D4 6AFE            	  2694:             bpl.s *           * branch if Z clear
00:000039D6 66FE            	  2695:             bne.s *           * branch if N clear
00:000039D8 68FE            	  2696:             bvc.s *           * branch if V clear
00:000039DA 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
00:000039DC 30BC2000        	  2699:             move.w #$2000,(a0)
00:000039E0 46D8            	  2700:             move.w (a0)+,SR
00:000039E2 67FE            	  2701:             beq.s *           * branch if Z set
00:000039E4 6BFE            	  2702:             bmi.s *           * branch if N set
00:000039E6 69FE            	  2703:             bvs.s *           * branch if V set
00:000039E8 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
00:000039EA 307C0102        	  2707:             move.l #$00000102,a0
00:000039EE 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
00:000039F4 46E80002        	  2709:             move.w 2(a0),SR
00:000039F8 6AFE            	  2710:             bpl.s *           * branch if Z clear
00:000039FA 66FE            	  2711:             bne.s *           * branch if N clear
00:000039FC 68FE            	  2712:             bvc.s *           * branch if V clear
00:000039FE 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
00:00003A00 317C20000002    	  2715:             move.w #$2000,2(a0)
00:00003A06 46E80002        	  2716:             move.w 2(a0),SR
00:00003A0A 67FE            	  2717:             beq.s *           * branch if Z set
00:00003A0C 6BFE            	  2718:             bmi.s *           * branch if N set
00:00003A0E 69FE            	  2719:             bvs.s *           * branch if V set
00:00003A10 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
00:00003A12 307C0100        	  2723:             move.l #$00000100,a0
00:00003A16 7002            	  2724:             moveq  #$00000002,d0
00:00003A18 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
00:00003A1E 46F00802        	  2726:             move.w 2(a0,d0.l),SR
00:00003A22 6AFE            	  2727:             bpl.s *           * branch if Z clear
00:00003A24 66FE            	  2728:             bne.s *           * branch if N clear
00:00003A26 68FE            	  2729:             bvc.s *           * branch if V clear
00:00003A28 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
00:00003A2A 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
00:00003A30 46F00802        	  2733:             move.w 2(a0,d0.l),SR
00:00003A34 67FE            	  2734:             beq.s *           * branch if Z set
00:00003A36 6BFE            	  2735:             bmi.s *           * branch if N set
00:00003A38 69FE            	  2736:             bvs.s *           * branch if V set
00:00003A3A 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
00:00003A3C 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
00:00003A42 46F80100        	  2741:             move.w $0100,SR
00:00003A46 6AFE            	  2742:             bpl.s *           * branch if Z clear
00:00003A48 66FE            	  2743:             bne.s *           * branch if N clear
00:00003A4A 68FE            	  2744:             bvc.s *           * branch if V clear
00:00003A4C 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
00:00003A4E 31FC20000100    	  2747:             move.w #$2000,$0100
00:00003A54 46F80100        	  2748:             move.w $0100,SR
00:00003A58 67FE            	  2749:             beq.s *           * branch if Z set
00:00003A5A 6BFE            	  2750:             bmi.s *           * branch if N set
00:00003A5C 69FE            	  2751:             bvs.s *           * branch if V set
00:00003A5E 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
00:00003A60 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
00:00003A68 46F900010100    	  2756:             move.w $00010100,SR
00:00003A6E 6AFE            	  2757:             bpl.s *           * branch if Z clear
00:00003A70 66FE            	  2758:             bne.s *           * branch if N clear
00:00003A72 68FE            	  2759:             bvc.s *           * branch if V clear
00:00003A74 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
00:00003A76 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
00:00003A7E 46F900010100    	  2763:             move.w $00010100,SR
00:00003A84 67FE            	  2764:             beq.s *           * branch if Z set
00:00003A86 6BFE            	  2765:             bmi.s *           * branch if N set
00:00003A88 69FE            	  2766:             bvs.s *           * branch if V set
00:00003A8A 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
00:00003A8C 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
00:00003A90 67FE            	  2771:             beq.s *           * branch if Z set
00:00003A92 6BFE            	  2772:             bmi.s *           * branch if N set
00:00003A94 69FE            	  2773:             bvs.s *           * branch if V set
00:00003A96 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
00:00003A98 7000            	  2777:             moveq  #$00000000,d0
00:00003A9A 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
00:00003A9E 67FE            	  2779:             beq.s *           * branch if Z set
00:00003AA0 6BFE            	  2780:             bmi.s *           * branch if N set
00:00003AA2 69FE            	  2781:             bvs.s *           * branch if V set
00:00003AA4 65FE            	  2782:             bcs.s *           * branch if C set
00:00003AA6 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
00:00003AAA 67FE            	  2784:             beq.s *           * branch if Z set
00:00003AAC 6BFE            	  2785:             bmi.s *           * branch if N set
00:00003AAE 69FE            	  2786:             bvs.s *           * branch if V set
00:00003AB0 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
00:00003AB2 46FC2FFF        	  2790:             move.w #$2FFF,SR
00:00003AB6 66FE            	  2791:             bne.s *           * branch if Z clear
00:00003AB8 6AFE            	  2792:             bpl.s *           * branch if N clear
00:00003ABA 68FE            	  2793:             bvc.s *           * branch if V clear
00:00003ABC 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
00:00003ABE 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
00:00003AC2 40C0            	  2804:             move.w SR,d0
00:00003AC4 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
00:00003AC8 307C0100        	  2810:             move.l #$00000100,a0
00:00003ACC 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
00:00003AD0 40D0            	  2812:             move.w SR,(a0)
00:00003AD2 0C50275A        	  2813:             cmpi.w #$275A,(a0)
00:00003AD6 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
00:00003AD8 307C0100        	  2817:             move.l #$00000100,a0
00:00003ADC 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
00:00003AE0 40D8            	  2819:             move.w SR,(a0)+
00:00003AE2 307C0100        	  2820:             move.l #$00000100,a0
00:00003AE6 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
00:00003AEA 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
00:00003AEC 307C0102        	  2825:             move.l #$00000102,a0
00:00003AF0 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
00:00003AF4 40E0            	  2827:             move.w SR,-(a0)
00:00003AF6 307C0100        	  2828:             move.l #$00000100,a0
00:00003AFA 0C502766        	  2829:             cmpi.w #$2766,(a0)
00:00003AFE 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
00:00003B00 307C0102        	  2833:             move.l #$00000102,a0
00:00003B04 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
00:00003B08 40E80004        	  2835:             move.w SR,4(a0)
00:00003B0C 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
00:00003B12 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
00:00003B14 307C0102        	  2840:             move.l #$00000102,a0
00:00003B18 7004            	  2841:             moveq  #$00000004,d0
00:00003B1A 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
00:00003B1E 40F00804        	  2843:             move.w SR,4(a0,d0.l)
00:00003B22 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
00:00003B28 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
00:00003B2A 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
00:00003B2E 40F80102        	  2849:             move.w SR,$0102
00:00003B32 0C7827770102    	  2850:             cmpi.w #$2777,$0102
00:00003B38 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
00:00003B3A 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
00:00003B3E 40F900010102    	  2855:             move.w SR,$10102
00:00003B44 0C79277700010102	  2856:             cmpi.w #$2777,$10102
00:00003B4C 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
00:00003B4E 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
00:00003B52 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
00:00003B54 707F            	  2873:             move.l #$0000007F,d0
00:00003B56 223C00008FFF    	  2874:             move.l #$00008FFF,d1
00:00003B5C 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
00:00003B5E 4880            	  2877:             ext.w d0
00:00003B60 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003B62 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
00:00003B64 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
00:00003B6A 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
00:00003B6C 48C1            	  2883:             ext.l d1
00:00003B6E 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003B70 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
00:00003B72 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
00:00003B78 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
00:00003B7A 48C2            	  2889:             ext.l d2
00:00003B7C 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
00:00003B7E 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
00:00003B80 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
00:00003B86 4840            	  2906:             swap d0
00:00003B88 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003B8A 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
00:00003B8C 0C8056781234    	  2909:             cmpi.l #$56781234,d0
00:00003B92 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
00:00003B94 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
00:00003B96 207C00345678    	  2924:             move.l #$00345678,a0
00:00003B9C 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
00:00003B9E 4DD0            	  2928:             lea (a0),a6
00:00003BA0 200E            	  2929:             move.l a6,d0
00:00003BA2 0C8000345678    	  2930:             cmpi.l #$00345678,d0
00:00003BA8 66FE            	  2931:             bne.s *                   * branch if Z set
00:00003BAA 4850            	  2932:             pea (a0)
00:00003BAC 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
00:00003BB2 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
00:00003BB4 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
00:00003BB6 4DE80004        	  2939:             lea 4(a0),a6
00:00003BBA 200E            	  2940:             move.l a6,d0
00:00003BBC 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
00:00003BC2 66FE            	  2942:             bne.s *                   * branch if Z set
00:00003BC4 48680004        	  2943:             pea 4(a0)
00:00003BC8 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
00:00003BCE 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
00:00003BD0 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
00:00003BD2 4DF04004        	  2950:             lea 4(a0,d4),a6
00:00003BD6 200E            	  2951:             move.l a6,d0
00:00003BD8 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
00:00003BDE 66FE            	  2953:             bne.s *                   * branch if Z set
00:00003BE0 48704804        	  2954:             pea 4(a0,d4.l)
00:00003BE4 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
00:00003BEA 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
00:00003BEC 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
00:00003BEE 4DF81234        	  2961:             lea $1234,a6
00:00003BF2 200E            	  2962:             move.l a6,d0
00:00003BF4 0C401234        	  2963:             cmpi.w #$1234,d0
00:00003BF8 66FE            	  2964:             bne.s *                   * branch if Z set
00:00003BFA 48781234        	  2965:             pea $1234
00:00003BFE 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
00:00003C04 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
00:00003C06 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
00:00003C08 4DF900345678    	  2972:             lea $00345678,a6
00:00003C0E 200E            	  2973:             move.l a6,d0
00:00003C10 B08E            	  2974:             cmp.l a6,d0
00:00003C12 66FE            	  2975:             bne.s *                   * branch if Z set
00:00003C14 487900345678    	  2976:             pea $00345678
00:00003C1A 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
00:00003C20 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
00:00003C22 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
00:00003C24 4DFA0008        	  2983:             lea LEA1(pc),a6
00:00003C28 200E            	  2984:             move.l a6,d0
00:00003C2A B08E            	  2985:             cmp.l a6,d0
00:00003C2C 66FE            	  2986:             bne.s *                   * branch if Z set
00:00003C2E 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
00:00003C32 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
00:00003C38 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
00:00003C3A 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
00:00003C3C 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
00:00003C40 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
00:00003C42 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
00:00003C46 4210            	  3014:             move.b #$00,(a0)
00:00003C48 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003C4A 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
00:00003C4C 4AD0            	  3017:             tas (a0)
00:00003C4E 0C100080        	  3018:             cmpi.b #$80,(a0)
00:00003C52 66FE            	  3019:             bne.s *                   * branch if Z set
00:00003C54 10BC00F5        	  3020:             move.b #$F5,(a0)
00:00003C58 4AD0            	  3021:             tas (a0)
00:00003C5A 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003C5C 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
00:00003C5E 4AD0            	  3024:             tas (a0)
00:00003C60 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
00:00003C64 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
00:00003C66 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
00:00003C68 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
00:00003C6C 4210            	  3043:             move.b #$00,(a0)
00:00003C6E 4A10            	  3044:             tst.b (a0)
00:00003C70 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003C72 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
00:00003C74 10BC00F5        	  3047:             move.b #$F5,(a0)
00:00003C78 4A10            	  3048:             tst.b (a0)
00:00003C7A 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003C7C 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
00:00003C7E 4250            	  3053:             move.w #$0000,(a0)
00:00003C80 4A50            	  3054:             tst.w (a0)
00:00003C82 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003C84 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
00:00003C86 30BCF567        	  3057:             move.w #$F567,(a0)
00:00003C8A 4A50            	  3058:             tst.w (a0)
00:00003C8C 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003C8E 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
00:00003C90 4290            	  3063:             move.l #$00000000,(a0)
00:00003C92 4A90            	  3064:             tst.l (a0)
00:00003C94 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003C96 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
00:00003C98 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
00:00003C9E 4A90            	  3068:             tst.l (a0)
00:00003CA0 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003CA2 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
00:00003CA4 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
00:00003CA6 207C11223344    	  3083:             move.l #$11223344,a0
00:00003CAC 203C11223344    	  3084:             move.l #$11223344,d0
00:00003CB2 4E500000        	  3085:             link a0,#$0
00:00003CB6 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
00:00003CBC 4E58            	  3088:             unlk a0
00:00003CBE B1C0            	  3089:             cmp.l d0,a0
00:00003CC0 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
00:00003CC2 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
00:00003CC4 207C11223344    	  3101:             move.l #$11223344,a0
00:00003CCA 4E60            	  3102:             move a0,USP
00:00003CCC 4E69            	  3103:             move USP,a1
00:00003CCE B3C8            	  3104:             cmp.l a0,a1
00:00003CD0 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
00:00003CD2 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: 
                            	  3116: op_CHK:
                            	  3117: 
00:00003CD4 20780018        	  3118: 	move.l 6*4,a0							; get check vector
00:00003CD8 21FC000021580018	  3119: 	move.l #EXCEPTION_6,6*4		; set vector
00:00003CE0 303C1122        	  3120: 	move.w #$1122,d0
00:00003CE4 323C1122        	  3121: 	move.w #$1122,d1
00:00003CE8 4380            	  3122: 	chk d0,d1
                            	  3123: 
00:00003CEA 4E71            	  3124: 	nop
00:00003CEC 4E71            	  3125: 	nop
                            	  3126: 
00:00003CEE 323C1122        	  3127: 	move.w #$1122,d1
00:00003CF2 43BC1122        	  3128: 	chk #$1122,d1
                            	  3129: 
00:00003CF6 323C1122        	  3130: 	move.w #$1122,d1
00:00003CFA 43BC007A        	  3131: 	chk #00122,d1
00:00003CFE BCBCEEEE0006    	  3132: 	cmp.l #$EEEE0006,d6
00:00003D04 66FE            	  3133: 	bne.s *                   ; branch if Z set
                            	  3134: 
00:00003D06 303C1122        	  3135: 	move.w #$1122,d0
00:00003D0A 323C8000        	  3136: 	move.w #$8000,d1
00:00003D0E 4380            	  3137: 	chk d0,d1
00:00003D10 BCBCEEEE0006    	  3138: 	cmp.l #$EEEE0006,d6
00:00003D16 66FE            	  3139: 	bne.s *                   ; branch if Z set
                            	  3140: 
00:00003D18 21C80018        	  3141: 	move.l a0,6*4							; restore old vector
00:00003D1C 4E75            	  3142: 	rts
                            	  3143: 
                            	  3144: 
                            	  3145: *-----------------------------------------------------------
                            	  3146: *-----------------------------------------------------------
                            	  3147: * OPCODE : NEGS
                            	  3148: *-----------------------------------------------------------
                            	  3149: *-----------------------------------------------------------
                            	  3150: op_NEGS:
                            	  3151: 
                            	  3152: *     NOT - BYTE
00:00003D1E 307C0100        	  3153:             move.l #$00000100,a0
00:00003D22 7000            	  3154:             moveq  #$00000000,d0
00:00003D24 4600            	  3155:             not.b d0
00:00003D26 6AFE            	  3156:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D28 67FE            	  3157:             beq.s *                   * Check Z Flag  beq/bne
00:00003D2A 4600            	  3158:             not.b d0
00:00003D2C 6BFE            	  3159:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D2E 66FE            	  3160:             bne.s *                   * Check Z Flag  beq/bne
00:00003D30 4A00            	  3161:             cmpi.b #$00,d0
00:00003D32 66FE            	  3162:             bne.s *                   * Check Z Flag  beq/bne
00:00003D34 10BC0080        	  3163:             move.b #$80,(a0)
00:00003D38 4610            	  3164:             not.b (a0)
00:00003D3A 6BFE            	  3165:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D3C 67FE            	  3166:             beq.s *                   * Check Z Flag  beq/bne
00:00003D3E 4610            	  3167:             not.b (a0)
00:00003D40 6AFE            	  3168:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D42 67FE            	  3169:             beq.s *                   * Check Z Flag  beq/bne
00:00003D44 0C100080        	  3170:             cmpi.b #$80,(a0)
00:00003D48 66FE            	  3171:             bne.s *                   * Check Z Flag  beq/bne
                            	  3172: 
                            	  3173: *     NOT - WORD
00:00003D4A 307C0100        	  3174:             move.l #$00000100,a0
00:00003D4E 7000            	  3175:             moveq  #$00000000,d0
00:00003D50 4640            	  3176:             not.w d0
00:00003D52 6AFE            	  3177:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D54 67FE            	  3178:             beq.s *                   * Check Z Flag  beq/bne
00:00003D56 4640            	  3179:             not.w d0
00:00003D58 6BFE            	  3180:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D5A 66FE            	  3181:             bne.s *                   * Check Z Flag  beq/bne
00:00003D5C 4A40            	  3182:             cmpi.w #$0000,d0
00:00003D5E 66FE            	  3183:             bne.s *                   * Check Z Flag  beq/bne
00:00003D60 30BC5A5A        	  3184:             move.w #$5a5a,(a0)
00:00003D64 4650            	  3185:             not.w (a0)
00:00003D66 6AFE            	  3186:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D68 67FE            	  3187:             beq.s *                   * Check Z Flag  beq/bne
00:00003D6A 4650            	  3188:             not.w (a0)
00:00003D6C 6BFE            	  3189:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D6E 67FE            	  3190:             beq.s *                   * Check Z Flag  beq/bne
00:00003D70 0C505A5A        	  3191:             cmpi.w #$5a5a,(a0)
00:00003D74 66FE            	  3192:             bne.s *                   * Check Z Flag  beq/bne
                            	  3193: 
                            	  3194: *     NOT - LONG
00:00003D76 307C0100        	  3195:             move.l #$00000100,a0
00:00003D7A 7000            	  3196:             moveq  #$00000000,d0
00:00003D7C 4680            	  3197:             not.l d0
00:00003D7E 6AFE            	  3198:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D80 67FE            	  3199:             beq.s *                   * Check Z Flag  beq/bne
00:00003D82 4680            	  3200:             not.l d0
00:00003D84 6BFE            	  3201:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D86 66FE            	  3202:             bne.s *                   * Check Z Flag  beq/bne
00:00003D88 4A80            	  3203:             cmpi.l #$00000000,d0
00:00003D8A 66FE            	  3204:             bne.s *                   * Check Z Flag  beq/bne
00:00003D8C 20BC5A5A1234    	  3205:             move.l #$5a5a1234,(a0)
00:00003D92 4690            	  3206:             not.l (a0)
00:00003D94 6AFE            	  3207:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D96 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne
00:00003D98 4690            	  3209:             not.l (a0)
00:00003D9A 6BFE            	  3210:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D9C 67FE            	  3211:             beq.s *                   * Check Z Flag  beq/bne
00:00003D9E 0C905A5A1234    	  3212:             cmpi.l #$5a5a1234,(a0)
00:00003DA4 66FE            	  3213:             bne.s *                   * Check Z Flag  beq/bne
                            	  3214: 
                            	  3215: * -----
                            	  3216: 
                            	  3217: *     NEG - BYTE
00:00003DA6 307C0100        	  3218:             move.l #$00000100,a0
00:00003DAA 7000            	  3219:             moveq  #$00000000,d0
00:00003DAC 7240D241        	  3220:             move.l #$00000080,d1
00:00003DB0 4400            	  3221:             neg.b d0
00:00003DB2 6BFE            	  3222:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003DB4 66FE            	  3223:             bne.s *                   * Check Z Flag  beq/bne 1
00:00003DB6 65FE            	  3224:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00003DB8 69FE            	  3225:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003DBA 4401            	  3226:             neg.b d1
00:00003DBC 6AFE            	  3227:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003DBE 67FE            	  3228:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003DC0 64FE            	  3229:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003DC2 68FE            	  3230:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00003DC4 0C010080        	  3231:             cmpi.b #$80,d1
00:00003DC8 66FE            	  3232:             bne.s *                   * Check Z Flag  beq/bne
00:00003DCA 10BC007F        	  3233:             move.b #$7F,(a0)
00:00003DCE 4410            	  3234:             neg.b (a0)
00:00003DD0 6AFE            	  3235:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003DD2 67FE            	  3236:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003DD4 64FE            	  3237:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003DD6 69FE            	  3238:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003DD8 10BC00F5        	  3239:             move.b #$F5,(a0)
00:00003DDC 4410            	  3240:             neg.b (a0)
00:00003DDE 6BFE            	  3241:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003DE0 67FE            	  3242:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003DE2 64FE            	  3243:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003DE4 69FE            	  3244:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003DE6 0C10000B        	  3245:             cmpi.b #$0B,(a0)
00:00003DEA 66FE            	  3246:             bne.s *                   * Check Z Flag  beq/bne
                            	  3247: 
                            	  3248: * -----
                            	  3249: 
                            	  3250: *     NEG - WORD
00:00003DEC 307C0100        	  3251:             move.l #$00000100,a0
00:00003DF0 7000            	  3252:             moveq  #$00000000,d0
00:00003DF2 223C00008000    	  3253:             move.l #$00008000,d1
00:00003DF8 4440            	  3254:             neg.w d0
00:00003DFA 6BFE            	  3255:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003DFC 66FE            	  3256:             bne.s *                   * Check Z Flag  beq/bne 1
00:00003DFE 65FE            	  3257:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00003E00 69FE            	  3258:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E02 4441            	  3259:             neg.w d1
00:00003E04 6AFE            	  3260:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E06 67FE            	  3261:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E08 64FE            	  3262:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E0A 68FE            	  3263:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00003E0C 0C418000        	  3264:             cmpi.w #$8000,d1
00:00003E10 66FE            	  3265:             bne.s *                   * Check Z Flag  beq/bne
00:00003E12 30BC7FFF        	  3266:             move.w #$7FFF,(a0)
00:00003E16 4450            	  3267:             neg.w (a0)
00:00003E18 6AFE            	  3268:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E1A 67FE            	  3269:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E1C 64FE            	  3270:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E1E 69FE            	  3271:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E20 30BCF578        	  3272:             move.w #$F578,(a0)
00:00003E24 4450            	  3273:             neg.w (a0)
00:00003E26 6BFE            	  3274:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E28 67FE            	  3275:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E2A 64FE            	  3276:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E2C 69FE            	  3277:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E2E 0C500A88        	  3278:             cmpi.w #$0A88,(a0)
00:00003E32 66FE            	  3279:             bne.s *                   * Check Z Flag  beq/bne
                            	  3280: 
                            	  3281: * -----
                            	  3282: 
                            	  3283: *     NEG - LONG
00:00003E34 307C0100        	  3284:             move.l #$00000100,a0
00:00003E38 7000            	  3285:             moveq  #$00000000,d0
00:00003E3A 223C80000000    	  3286:             move.l #$80000000,d1
00:00003E40 4480            	  3287:             neg.l d0
00:00003E42 6BFE            	  3288:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E44 66FE            	  3289:             bne.s *                   * Check Z Flag  beq/bne 1
00:00003E46 65FE            	  3290:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00003E48 69FE            	  3291:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E4A 4481            	  3292:             neg.l d1
00:00003E4C 6AFE            	  3293:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E4E 67FE            	  3294:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E50 64FE            	  3295:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E52 68FE            	  3296:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00003E54 0C8180000000    	  3297:             cmpi.l #$80000000,d1
00:00003E5A 66FE            	  3298:             bne.s *                   * Check Z Flag  beq/bne
00:00003E5C 20BC7FFFFFFF    	  3299:             move.l #$7FFFFFFF,(a0)
00:00003E62 4490            	  3300:             neg.l (a0)
00:00003E64 6AFE            	  3301:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E66 67FE            	  3302:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E68 64FE            	  3303:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E6A 69FE            	  3304:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E6C 20BCF5781234    	  3305:             move.l #$F5781234,(a0)
00:00003E72 4490            	  3306:             neg.l (a0)
00:00003E74 6BFE            	  3307:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E76 67FE            	  3308:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E78 64FE            	  3309:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E7A 69FE            	  3310:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E7C 0C900A87EDCC    	  3311:             cmpi.l #$0A87EDCC,(a0)
00:00003E82 66FE            	  3312:             bne.s *                   * Check Z Flag  beq/bne
                            	  3313: 
                            	  3314: 
                            	  3315: * -----
                            	  3316: 
                            	  3317: *     NEGX - BYTE
00:00003E84 307C0100        	  3318:             move.l #$00000100,a0
00:00003E88 7000            	  3319:             moveq  #$00000000,d0
00:00003E8A 7240D241        	  3320:             move.l #$00000080,d1
00:00003E8E 003C0010        	  3321:             ori.b #$10,CCR        * Set X Flag
00:00003E92 4000            	  3322:             negx.b d0
00:00003E94 6AFE            	  3323:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003E96 67FE            	  3324:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003E98 64FE            	  3325:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003E9A 69FE            	  3326:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E9C 023C00EF        	  3327:             andi.b #$EF,CCR       * Clear X Flag
00:00003EA0 4000            	  3328:             negx.b d0
00:00003EA2 6BFE            	  3329:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003EA4 67FE            	  3330:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003EA6 64FE            	  3331:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003EA8 69FE            	  3332:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003EAA 003C0010        	  3333:             ori.b #$10,CCR        * Set X Flag
00:00003EAE 4001            	  3334:             negx.b d1
00:00003EB0 6BFE            	  3335:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003EB2 67FE            	  3336:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003EB4 64FE            	  3337:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003EB6 69FE            	  3338:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003EB8 0C01007F        	  3339:             cmpi.b #$7F,d1
00:00003EBC 66FE            	  3340:             bne.s *                   * Check Z Flag  beq/bne
00:00003EBE 023C00EF        	  3341:             andi.b #$EF,CCR       * Clear X Flag
00:00003EC2 4001            	  3342:             negx.b d1
00:00003EC4 6AFE            	  3343:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003EC6 67FE            	  3344:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003EC8 64FE            	  3345:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003ECA 69FE            	  3346:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003ECC 0C010081        	  3347:             cmpi.b #$81,d1
00:00003ED0 66FE            	  3348:             bne.s *                   * Check Z Flag  beq/bne
00:00003ED2 10BC007F        	  3349:             move.b #$7F,(a0)
00:00003ED6 003C0010        	  3350:             ori.b #$10,CCR        * Set X Flag
00:00003EDA 4010            	  3351:             negx.b (a0)
00:00003EDC 6AFE            	  3352:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003EDE 67FE            	  3353:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003EE0 64FE            	  3354:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3355:             * I think overflow should happen here.
                            	  3356: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003EE2 10BC007F        	  3357:             move.b #$7F,(a0)
00:00003EE6 023C00EF        	  3358:             andi.b #$EF,CCR       * Clear X Flag
00:00003EEA 4010            	  3359:             negx.b (a0)
00:00003EEC 6AFE            	  3360:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003EEE 67FE            	  3361:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003EF0 64FE            	  3362:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003EF2 69FE            	  3363:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003EF4 10BC00F5        	  3364:             move.b #$F5,(a0)
00:00003EF8 003C0010        	  3365:             ori.b #$10,CCR        * Set X Flag
00:00003EFC 4010            	  3366:             negx.b (a0)
00:00003EFE 6BFE            	  3367:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003F00 67FE            	  3368:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F02 64FE            	  3369:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F04 69FE            	  3370:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F06 0C10000A        	  3371:             cmpi.b #$0A,(a0)
00:00003F0A 66FE            	  3372:             bne.s *                   * Check Z Flag  beq/bne
00:00003F0C 023C00EF        	  3373:             andi.b #$EF,CCR       * Clear X Flag
00:00003F10 4010            	  3374:             negx.b (a0)
00:00003F12 6AFE            	  3375:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003F14 67FE            	  3376:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F16 64FE            	  3377:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F18 69FE            	  3378:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F1A 0C1000F6        	  3379:             cmpi.b #$F6,(a0)
00:00003F1E 66FE            	  3380:             bne.s *                   * Check Z Flag  beq/bne
                            	  3381: 
                            	  3382: 
                            	  3383: 
                            	  3384: * -----
                            	  3385: 
                            	  3386: *     NEGX - WORD
00:00003F20 307C0100        	  3387:             move.l #$00000100,a0
00:00003F24 7000            	  3388:             moveq  #$00000000,d0
00:00003F26 223C00008000    	  3389:             move.l #$00008000,d1
00:00003F2C 003C0010        	  3390:             ori.b #$10,CCR        * Set X Flag
00:00003F30 4040            	  3391:             negx.w d0
00:00003F32 6AFE            	  3392:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003F34 67FE            	  3393:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003F36 64FE            	  3394:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003F38 69FE            	  3395:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F3A 023C00EF        	  3396:             andi.b #$EF,CCR       * Clear X Flag
00:00003F3E 4040            	  3397:             negx.w d0
00:00003F40 6BFE            	  3398:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003F42 67FE            	  3399:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003F44 64FE            	  3400:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003F46 69FE            	  3401:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F48 003C0010        	  3402:             ori.b #$10,CCR        * Set X Flag
00:00003F4C 4041            	  3403:             negx.w d1
00:00003F4E 6BFE            	  3404:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003F50 67FE            	  3405:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F52 64FE            	  3406:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F54 69FE            	  3407:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003F56 0C417FFF        	  3408:             cmpi.w #$7FFF,d1
00:00003F5A 66FE            	  3409:             bne.s *                   * Check Z Flag  beq/bne
00:00003F5C 023C00EF        	  3410:             andi.b #$EF,CCR       * Clear X Flag
00:00003F60 4041            	  3411:             negx.w d1
00:00003F62 6AFE            	  3412:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003F64 67FE            	  3413:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F66 64FE            	  3414:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F68 69FE            	  3415:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003F6A 0C418001        	  3416:             cmpi.w #$8001,d1
00:00003F6E 66FE            	  3417:             bne.s *                   * Check Z Flag  beq/bne
00:00003F70 30BC7FFF        	  3418:             move.w #$7FFF,(a0)
00:00003F74 003C0010        	  3419:             ori.b #$10,CCR        * Set X Flag
00:00003F78 4050            	  3420:             negx.w (a0)
00:00003F7A 6AFE            	  3421:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003F7C 67FE            	  3422:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F7E 64FE            	  3423:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3424: ***            
                            	  3425: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F80 30BCF567        	  3426:             move.w #$F567,(a0)
00:00003F84 023C00EF        	  3427:             andi.b #$EF,CCR       * Clear X Flag
00:00003F88 4050            	  3428:             negx.w (a0)
00:00003F8A 6BFE            	  3429:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003F8C 67FE            	  3430:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F8E 64FE            	  3431:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F90 69FE            	  3432:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F92 30BCF567        	  3433:             move.w #$F567,(a0)
00:00003F96 003C0010        	  3434:             ori.b #$10,CCR        * Set X Flag
00:00003F9A 4050            	  3435:             negx.w (a0)
00:00003F9C 6BFE            	  3436:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003F9E 67FE            	  3437:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FA0 64FE            	  3438:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003FA2 69FE            	  3439:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FA4 0C500A98        	  3440:             cmpi.w #$0A98,(a0)
00:00003FA8 66FE            	  3441:             bne.s *                   * Check Z Flag  beq/bne
00:00003FAA 023C00EF        	  3442:             andi.b #$EF,CCR       * Clear X Flag
00:00003FAE 4050            	  3443:             negx.w (a0)
00:00003FB0 6AFE            	  3444:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003FB2 67FE            	  3445:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FB4 64FE            	  3446:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003FB6 69FE            	  3447:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FB8 0C50F568        	  3448:             cmpi.w #$F568,(a0)
00:00003FBC 66FE            	  3449:             bne.s *                   * Check Z Flag  beq/bne
                            	  3450: 
                            	  3451: 
                            	  3452: * -----
                            	  3453: 
                            	  3454: *     NEGX - LONG
00:00003FBE 307C0100        	  3455:             move.l #$00000100,a0
00:00003FC2 7000            	  3456:             moveq  #$00000000,d0
00:00003FC4 223C80000000    	  3457:             move.l #$80000000,d1
00:00003FCA 003C0010        	  3458:             ori.b #$10,CCR        * Set X Flag
00:00003FCE 4080            	  3459:             negx.l d0
00:00003FD0 6AFE            	  3460:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003FD2 67FE            	  3461:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003FD4 64FE            	  3462:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003FD6 69FE            	  3463:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FD8 023C00EF        	  3464:             andi.b #$EF,CCR       * Clear X Flag
00:00003FDC 4080            	  3465:             negx.l d0
00:00003FDE 6BFE            	  3466:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003FE0 67FE            	  3467:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003FE2 64FE            	  3468:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003FE4 69FE            	  3469:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FE6 003C0010        	  3470:             ori.b #$10,CCR        * Set X Flag
00:00003FEA 4081            	  3471:             negx.l d1
00:00003FEC 6BFE            	  3472:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003FEE 67FE            	  3473:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FF0 64FE            	  3474:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003FF2 69FE            	  3475:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003FF4 0C817FFFFFFF    	  3476:             cmpi.l #$7FFFFFFF,d1
00:00003FFA 66FE            	  3477:             bne.s *                   * Check Z Flag  beq/bne
00:00003FFC 023C00EF        	  3478:             andi.b #$EF,CCR       * Clear X Flag
00:00004000 4081            	  3479:             negx.l d1
00:00004002 6AFE            	  3480:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004004 67FE            	  3481:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004006 64FE            	  3482:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3483: ****            
                            	  3484: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004008 0C8180000001    	  3485:             cmpi.l #$80000001,d1
00:0000400E 66FE            	  3486:             bne.s *                   * Check Z Flag  beq/bne
00:00004010 20BC00007FFF    	  3487:             move.l #$7FFF,(a0)
00:00004016 003C0010        	  3488:             ori.b #$10,CCR        * Set X Flag
00:0000401A 4090            	  3489:             negx.l (a0)
00:0000401C 6AFE            	  3490:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000401E 67FE            	  3491:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004020 64FE            	  3492:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3493: ****            
                            	  3494: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004022 20BCF5671234    	  3495:             move.l #$F5671234,(a0)
00:00004028 023C00EF        	  3496:             andi.b #$EF,CCR       * Clear X Flag
00:0000402C 4090            	  3497:             negx.l (a0)
00:0000402E 6BFE            	  3498:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00004030 67FE            	  3499:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004032 64FE            	  3500:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004034 69FE            	  3501:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004036 20BCF5675678    	  3502:             move.l #$F5675678,(a0)
00:0000403C 003C0010        	  3503:             ori.b #$10,CCR        * Set X Flag
00:00004040 4090            	  3504:             negx.l (a0)
00:00004042 6BFE            	  3505:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004044 67FE            	  3506:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004046 64FE            	  3507:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004048 69FE            	  3508:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:0000404A 0C900A98A987    	  3509:             cmpi.l #$0A98A987,(a0)
00:00004050 66FE            	  3510:             bne.s *                   * Check Z Flag  beq/bne
00:00004052 023C00EF        	  3511:             andi.b #$EF,CCR       * Clear X Flag
00:00004056 4090            	  3512:             negx.l (a0)
00:00004058 6AFE            	  3513:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:0000405A 67FE            	  3514:             beq.s *                   * Check Z Flag  beq/bne 0
00:0000405C 64FE            	  3515:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:0000405E 69FE            	  3516:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004060 0C90F5675679    	  3517:             cmpi.l #$F5675679,(a0)
00:00004066 66FE            	  3518:             bne.s *                   * Check Z Flag  beq/bne
                            	  3519: 
                            	  3520: 
                            	  3521: * -----
                            	  3522: 
                            	  3523: *     CLR - BYTE
00:00004068 307C0100        	  3524:             move.l #$00000100,a0
00:0000406C 203C12345678    	  3525:             move.l #$12345678,d0
00:00004072 223C12345678    	  3526:             move.l #$12345678,d1
00:00004078 243C12345678    	  3527:             move.l #$12345678,d2
00:0000407E 283C12345600    	  3528:             move.l #$12345600,d4
00:00004084 2A3C12340000    	  3529:             move.l #$12340000,d5
00:0000408A 7C00            	  3530:             moveq  #$00000000,d6
                            	  3531: 
00:0000408C 4200            	  3532:             clr.b d0
00:0000408E 66FE            	  3533:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004090 6BFE            	  3534:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004092 B880            	  3535:             cmp.l d0,d4
00:00004094 66FE            	  3536:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3537: 
00:00004096 4241            	  3538:             clr.w d1
00:00004098 66FE            	  3539:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000409A 6BFE            	  3540:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000409C BA81            	  3541:             cmp.l d1,d5
00:0000409E 66FE            	  3542:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3543: 
00:000040A0 7400            	  3544:             clr.l d2
00:000040A2 66FE            	  3545:             bne.s *                   * Check Z Flag  beq/bne 0
00:000040A4 6BFE            	  3546:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000040A6 BC82            	  3547:             cmp.l d2,d6
00:000040A8 66FE            	  3548:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3549: 
00:000040AA 4E75            	  3550:             rts
                            	  3551: 
                            	  3552: 
                            	  3553: 
                            	  3554: *-----------------------------------------------------------
                            	  3555: *-----------------------------------------------------------
                            	  3556: * OPCODE : MOVEM
                            	  3557: *-----------------------------------------------------------
                            	  3558: *-----------------------------------------------------------
                            	  3559: op_MOVEM:
                            	  3560: 
                            	  3561: *     WORD  Registers --> Memory
00:000040AC 203C0000D0D0    	  3562:             move.l #$0000d0d0,d0
00:000040B2 223C0000D1D1    	  3563:             move.l #$0000d1d1,d1
00:000040B8 243C0000D2D2    	  3564:             move.l #$0000d2d2,d2
00:000040BE 263C0000D3D3    	  3565:             move.l #$0000d3d3,d3
00:000040C4 283C0000D4D4    	  3566:             move.l #$0000d4d4,d4
00:000040CA 2A3C0000D5D5    	  3567:             move.l #$0000d5d5,d5
00:000040D0 2C3C0000D6D6    	  3568:             move.l #$0000d6d6,d6
00:000040D6 2E3C0000D7D7    	  3569:             move.l #$0000d7d7,d7
00:000040DC 307C0A0A        	  3570:             move.l #$00000a0a,a0
00:000040E0 327C1A1A        	  3571:             move.l #$00001a1a,a1
00:000040E4 347C2A2A        	  3572:             move.l #$00002a2a,a2
00:000040E8 367C3A3A        	  3573:             move.l #$00003a3a,a3
00:000040EC 387C4A4A        	  3574:             move.l #$00004a4a,a4
00:000040F0 3A7C5A5A        	  3575:             move.l #$00005a5a,a5
00:000040F4 3C7C6A6A        	  3576:             move.l #$00006a6a,a6
                            	  3577: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3578: 
00:000040F8 48B8FFFF0100    	  3579:             movem.w D0-D7/A0-A7,$00000100
                            	  3580: 
00:000040FE 307C0100        	  3581:             move.l #$00000100,a0
                            	  3582: 
00:00004102 B058            	  3583:             cmp.w (a0)+,d0
00:00004104 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004106 B258            	  3585:             cmp.w (a0)+,d1
00:00004108 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000410A B458            	  3587:             cmp.w (a0)+,d2
00:0000410C 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000410E B658            	  3589:             cmp.w (a0)+,d3
00:00004110 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004112 B858            	  3591:             cmp.w (a0)+,d4
00:00004114 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004116 BA58            	  3593:             cmp.w (a0)+,d5
00:00004118 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000411A BC58            	  3595:             cmp.w (a0)+,d6
00:0000411C 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000411E BE58            	  3597:             cmp.w (a0)+,d7
00:00004120 66FE            	  3598:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3599: 
00:00004122 0C580A0A        	  3600:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:00004126 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3602: 
00:00004128 B2D8            	  3603:             cmp.w (a0)+,a1
00:0000412A 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000412C B4D8            	  3605:             cmp.w (a0)+,a2
00:0000412E 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004130 B6D8            	  3607:             cmp.w (a0)+,a3
00:00004132 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004134 B8D8            	  3609:             cmp.w (a0)+,a4
00:00004136 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004138 BAD8            	  3611:             cmp.w (a0)+,a5
00:0000413A 66FE            	  3612:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000413C BCD8            	  3613:             cmp.w (a0)+,a6
00:0000413E 66FE            	  3614:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3615: 
                            	  3616: 
                            	  3617: 
                            	  3618: 
                            	  3619: *     LONG  Registers --> Memory
00:00004140 203CD0D0D0D0    	  3620:             move.l #$d0d0d0d0,d0
00:00004146 223CD1D1D1D1    	  3621:             move.l #$d1d1d1d1,d1
00:0000414C 243CD2D2D2D2    	  3622:             move.l #$d2d2d2d2,d2
00:00004152 263CD3D3D3D3    	  3623:             move.l #$d3d3d3d3,d3
00:00004158 283CD4D4D4D4    	  3624:             move.l #$d4d4d4d4,d4
00:0000415E 2A3CD5D5D5D5    	  3625:             move.l #$d5d5d5d5,d5
00:00004164 2C3CD6D6D6D6    	  3626:             move.l #$d6d6d6d6,d6
00:0000416A 2E3CD7D7D7D7    	  3627:             move.l #$d7d7d7d7,d7
00:00004170 207C0A0A0A0A    	  3628:             move.l #$0a0a0a0a,a0
00:00004176 227C1A1A1A1A    	  3629:             move.l #$1a1a1a1a,a1
00:0000417C 247C2A2A2A2A    	  3630:             move.l #$2a2a2a2a,a2
00:00004182 267C3A3A3A3A    	  3631:             move.l #$3a3a3a3a,a3
00:00004188 287C4A4A4A4A    	  3632:             move.l #$4a4a4a4a,a4
00:0000418E 2A7C5A5A5A5A    	  3633:             move.l #$5a5a5a5a,a5
00:00004194 2C7C6A6A6A6A    	  3634:             move.l #$6a6a6a6a,a6
                            	  3635: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3636: 
                            	  3637: 
00:0000419A 48F8FFFF0120    	  3638:             movem.l D0-D7/A0-A7,$00000120
                            	  3639: 
00:000041A0 307C0120        	  3640:             move.l #$00000120,a0
                            	  3641: 
00:000041A4 B098            	  3642:             cmp.l (a0)+,d0
00:000041A6 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041A8 B298            	  3644:             cmp.l (a0)+,d1
00:000041AA 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041AC B498            	  3646:             cmp.l (a0)+,d2
00:000041AE 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041B0 B698            	  3648:             cmp.l (a0)+,d3
00:000041B2 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041B4 B898            	  3650:             cmp.l (a0)+,d4
00:000041B6 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041B8 BA98            	  3652:             cmp.l (a0)+,d5
00:000041BA 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041BC BC98            	  3654:             cmp.l (a0)+,d6
00:000041BE 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041C0 BE98            	  3656:             cmp.l (a0)+,d7
00:000041C2 66FE            	  3657:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3658: 
00:000041C4 0C980A0A0A0A    	  3659:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:000041CA 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3661: 
00:000041CC B3D8            	  3662:             cmp.l (a0)+,a1
00:000041CE 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041D0 B5D8            	  3664:             cmp.l (a0)+,a2
00:000041D2 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041D4 B7D8            	  3666:             cmp.l (a0)+,a3
00:000041D6 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041D8 B9D8            	  3668:             cmp.l (a0)+,a4
00:000041DA 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041DC BBD8            	  3670:             cmp.l (a0)+,a5
00:000041DE 66FE            	  3671:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041E0 BDD8            	  3672:             cmp.l (a0)+,a6
00:000041E2 66FE            	  3673:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3674: *      ----
                            	  3675: 
                            	  3676: 
                            	  3677: *     WORD  Registers --> Memory  -(An) EA Mode
00:000041E4 203C0000D0D0    	  3678:             move.l #$0000d0d0,d0
00:000041EA 223C0000D1D1    	  3679:             move.l #$0000d1d1,d1
00:000041F0 243C0000D2D2    	  3680:             move.l #$0000d2d2,d2
00:000041F6 263C0000D3D3    	  3681:             move.l #$0000d3d3,d3
00:000041FC 283C0000D4D4    	  3682:             move.l #$0000d4d4,d4
00:00004202 2A3C0000D5D5    	  3683:             move.l #$0000d5d5,d5
00:00004208 2C3C0000D6D6    	  3684:             move.l #$0000d6d6,d6
00:0000420E 2E3C0000D7D7    	  3685:             move.l #$0000d7d7,d7
00:00004214 307C0A0A        	  3686:             move.l #$00000a0a,a0
00:00004218 327C1A1A        	  3687:             move.l #$00001a1a,a1
00:0000421C 347C2A2A        	  3688:             move.l #$00002a2a,a2
00:00004220 367C3A3A        	  3689:             move.l #$00003a3a,a3
00:00004224 387C4A4A        	  3690:             move.l #$00004a4a,a4
00:00004228 3A7C5A5A        	  3691:             move.l #$00005a5a,a5
00:0000422C 3C7C6A6A        	  3692:             move.l #$00006a6a,a6
                            	  3693: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3694: 
00:00004230 307C01A0        	  3695:             move.l #$000001A0,a0
00:00004234 48A0FFFF        	  3696:             movem.w D0-D7/A0-A7,-(a0)
                            	  3697: 
00:00004238 307C019E        	  3698:             move.l #$0000019E,a0
                            	  3699: 
00:0000423C BCE0            	  3700:             cmp.w -(a0),a6
00:0000423E 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004240 BAE0            	  3702:             cmp.w -(a0),a5
00:00004242 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004244 B8E0            	  3704:             cmp.w -(a0),a4
00:00004246 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004248 B6E0            	  3706:             cmp.w -(a0),a3
00:0000424A 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000424C B4E0            	  3708:             cmp.w -(a0),a2
00:0000424E 66FE            	  3709:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004250 B2E0            	  3710:             cmp.w -(a0),a1
00:00004252 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004254 B0E0            	  3712:             cmp.w -(a0),a0
                            	  3713: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00004256 BE60            	  3714:             cmp.w -(a0),d7
00:00004258 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000425A BC60            	  3716:             cmp.w -(a0),d6
00:0000425C 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000425E BA60            	  3718:             cmp.w -(a0),d5
00:00004260 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004262 B860            	  3720:             cmp.w -(a0),d4
00:00004264 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004266 B660            	  3722:             cmp.w -(a0),d3
00:00004268 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000426A B460            	  3724:             cmp.w -(a0),d2
00:0000426C 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000426E B260            	  3726:             cmp.w -(a0),d1
00:00004270 66FE            	  3727:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004272 B060            	  3728:             cmp.w -(a0),d0
00:00004274 66FE            	  3729:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3730: 
                            	  3731: 
                            	  3732: 
                            	  3733: 
                            	  3734: *     LONG  Registers --> Memory   -(An) EA Mode
00:00004276 203CD0D0D0D0    	  3735:             move.l #$d0d0d0d0,d0
00:0000427C 223CD1D1D1D1    	  3736:             move.l #$d1d1d1d1,d1
00:00004282 243CD2D2D2D2    	  3737:             move.l #$d2d2d2d2,d2
00:00004288 263CD3D3D3D3    	  3738:             move.l #$d3d3d3d3,d3
00:0000428E 283CD4D4D4D4    	  3739:             move.l #$d4d4d4d4,d4
00:00004294 2A3CD5D5D5D5    	  3740:             move.l #$d5d5d5d5,d5
00:0000429A 2C3CD6D6D6D6    	  3741:             move.l #$d6d6d6d6,d6
00:000042A0 2E3CD7D7D7D7    	  3742:             move.l #$d7d7d7d7,d7
00:000042A6 207C0A0A0A0A    	  3743:             move.l #$0a0a0a0a,a0
00:000042AC 227C1A1A1A1A    	  3744:             move.l #$1a1a1a1a,a1
00:000042B2 247C2A2A2A2A    	  3745:             move.l #$2a2a2a2a,a2
00:000042B8 267C3A3A3A3A    	  3746:             move.l #$3a3a3a3a,a3
00:000042BE 287C4A4A4A4A    	  3747:             move.l #$4a4a4a4a,a4
00:000042C4 2A7C5A5A5A5A    	  3748:             move.l #$5a5a5a5a,a5
00:000042CA 2C7C6A6A6A6A    	  3749:             move.l #$6a6a6a6a,a6
                            	  3750: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3751: 
                            	  3752: 
00:000042D0 307C01A0        	  3753:             move.l #$000001A0,a0
00:000042D4 48E0FFFF        	  3754:             movem.l D0-D7/A0-A7,-(a0)
                            	  3755: 
00:000042D8 307C019C        	  3756:             move.l #$0000019C,a0
                            	  3757: 
00:000042DC BDE0            	  3758:             cmp.l -(a0),a6
00:000042DE 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042E0 BBE0            	  3760:             cmp.l -(a0),a5
00:000042E2 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042E4 B9E0            	  3762:             cmp.l -(a0),a4
00:000042E6 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042E8 B7E0            	  3764:             cmp.l -(a0),a3
00:000042EA 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042EC B5E0            	  3766:             cmp.l -(a0),a2
00:000042EE 66FE            	  3767:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042F0 B3E0            	  3768:             cmp.l -(a0),a1
00:000042F2 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042F4 B1E0            	  3770:             cmp.l -(a0),a0
                            	  3771: *            bne.s *                   * Check Z Flag  beq/bne 0
00:000042F6 BEA0            	  3772:             cmp.l -(a0),d7
00:000042F8 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042FA BCA0            	  3774:             cmp.l -(a0),d6
00:000042FC 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042FE BAA0            	  3776:             cmp.l -(a0),d5
00:00004300 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004302 B8A0            	  3778:             cmp.l -(a0),d4
00:00004304 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004306 B6A0            	  3780:             cmp.l -(a0),d3
00:00004308 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000430A B4A0            	  3782:             cmp.l -(a0),d2
00:0000430C 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000430E B2A0            	  3784:             cmp.l -(a0),d1
00:00004310 66FE            	  3785:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004312 B0A0            	  3786:             cmp.l -(a0),d0
00:00004314 66FE            	  3787:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3788: 
                            	  3789: 
                            	  3790: 
                            	  3791: *     ----
                            	  3792: 
                            	  3793: *     WORD - Memory --> Registers
00:00004316 7000            	  3794:             moveq  #$00000000,d0
00:00004318 7200            	  3795:             moveq  #$00000000,d1
00:0000431A 7400            	  3796:             moveq  #$00000000,d2
00:0000431C 7600            	  3797:             moveq  #$00000000,d3
00:0000431E 7800            	  3798:             moveq  #$00000000,d4
00:00004320 7A00            	  3799:             moveq  #$00000000,d5
00:00004322 7C00            	  3800:             moveq  #$00000000,d6
00:00004324 7E00            	  3801:             moveq  #$00000000,d7
00:00004326 91C8            	  3802:             move.l #$00000000,a0
00:00004328 93C9            	  3803:             move.l #$00000000,a1
00:0000432A 95CA            	  3804:             move.l #$00000000,a2
00:0000432C 97CB            	  3805:             move.l #$00000000,a3
00:0000432E 99CC            	  3806:             move.l #$00000000,a4
00:00004330 9BCD            	  3807:             move.l #$00000000,a5
00:00004332 9DCE            	  3808:             move.l #$00000000,a6
                            	  3809: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3810: 
00:00004334 4CB82A550100    	  3811:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3812: 
00:0000433A B0BCFFFFD0D0    	  3813:             cmp.l #$FFFFD0D0,d0
00:00004340 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004342 B4BCFFFFD1D1    	  3815:             cmp.l #$FFFFD1D1,d2
00:00004348 66FE            	  3816:             bne.s *                  * Check Z Flag  beq/bne 0
00:0000434A B8BCFFFFD2D2    	  3817:             cmp.l #$FFFFD2D2,d4
00:00004350 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004352 BCBCFFFFD3D3    	  3819:             cmp.l #$FFFFD3D3,d6
00:00004358 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000435A B2FCD4D4        	  3821:             cmp.l #$FFFFD4D4,a1
00:0000435E 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004360 B6FCD5D5        	  3823:             cmp.l #$FFFFD5D5,a3
00:00004364 66FE            	  3824:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004366 BAFCD6D6        	  3825:             cmp.l #$FFFFD6D6,a5
00:0000436A 66FE            	  3826:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3827: 
                            	  3828: 
                            	  3829: *     LONG - Memory --> Registers
00:0000436C 7000            	  3830:             moveq  #$00000000,d0
00:0000436E 7200            	  3831:             moveq  #$00000000,d1
00:00004370 7400            	  3832:             moveq  #$00000000,d2
00:00004372 7600            	  3833:             moveq  #$00000000,d3
00:00004374 7800            	  3834:             moveq  #$00000000,d4
00:00004376 7A00            	  3835:             moveq  #$00000000,d5
00:00004378 7C00            	  3836:             moveq  #$00000000,d6
00:0000437A 7E00            	  3837:             moveq  #$00000000,d7
00:0000437C 91C8            	  3838:             move.l #$00000000,a0
00:0000437E 93C9            	  3839:             move.l #$00000000,a1
00:00004380 95CA            	  3840:             move.l #$00000000,a2
00:00004382 97CB            	  3841:             move.l #$00000000,a3
00:00004384 99CC            	  3842:             move.l #$00000000,a4
00:00004386 9BCD            	  3843:             move.l #$00000000,a5
00:00004388 9DCE            	  3844:             move.l #$00000000,a6
                            	  3845: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3846: 
00:0000438A 4CF82A550120    	  3847:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3848: 
00:00004390 B0BCD0D0D0D0    	  3849:             cmp.l #$D0D0D0D0,d0
00:00004396 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004398 B4BCD1D1D1D1    	  3851:             cmp.l #$D1D1D1D1,d2
00:0000439E 66FE            	  3852:             bne.s *                  * Check Z Flag  beq/bne 0
00:000043A0 B8BCD2D2D2D2    	  3853:             cmp.l #$D2D2D2D2,d4
00:000043A6 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043A8 BCBCD3D3D3D3    	  3855:             cmp.l #$D3D3D3D3,d6
00:000043AE 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043B0 B3FCD4D4D4D4    	  3857:             cmp.l #$D4D4D4D4,a1
00:000043B6 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043B8 B7FCD5D5D5D5    	  3859:             cmp.l #$D5D5D5D5,a3
00:000043BE 66FE            	  3860:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043C0 BBFCD6D6D6D6    	  3861:             cmp.l #$D6D6D6D6,a5
00:000043C6 66FE            	  3862:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3863: 
00:000043C8 4E75            	  3864:             rts
                            	  3865: 
                            	  3866: 
                            	  3867: *-----------------------------------------------------------
                            	  3868: *-----------------------------------------------------------
                            	  3869: * OPCODE : ABCD
                            	  3870: *-----------------------------------------------------------
                            	  3871: *-----------------------------------------------------------
                            	  3872: op_ABCD:
                            	  3873: 
                            	  3874: *     Test with X Flag CLEARED
00:000043CA 307C0110        	  3875:                 move.l #$00000110,a0 * Address pointer-X
00:000043CE 327C0120        	  3876:                 move.l #$00000120,a1 * Address pointer-Y
00:000043D2 7000            	  3877:                 moveq  #$00000000,d0 * BCD byte-X
00:000043D4 7200            	  3878:                 moveq  #$00000000,d1 * BCD byte-Y
00:000043D6 7400            	  3879:                 moveq  #$00000000,d2
00:000043D8 7600            	  3880:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000043DA 7800            	  3881:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000043DC 7A00            	  3882:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000043DE 2C3C00000099    	  3883:                 move.l #$00000099,d6 * Inner loop counter
00:000043E4 2E3C00000099    	  3884:                 move.l #$00000099,d7 * Outer loop counter
                            	  3885: 
00:000043EA 2007            	  3886: ABCD_OUTER1:    move.l d7,d0
00:000043EC 2206            	  3887: ABCD_INNER1:    move.l d6,d1
00:000043EE 023C00EF        	  3888:                 andi.b #$EF,CCR     * Clear X Flag
00:000043F2 307C0110        	  3889:                 move.l #$00000110,a0 * Address pointer-X
00:000043F6 327C0120        	  3890:                 move.l #$00000120,a1 * Address pointer-Y
00:000043FA 1140FFFF        	  3891:                 move.b d0,-1(a0)
00:000043FE 1341FFFF        	  3892:                 move.b d1,-1(a1)
                            	  3893: 
00:00004402 C300            	  3894:                 abcd d0,d1
00:00004404 6402            	  3895:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00004406 5284            	  3896:                 add.l #1,d4
00:00004408 DA81            	  3897: ABCD_NO_C1:     add.l d1,d5
                            	  3898: 
00:0000440A C308            	  3899:                 abcd -(a0),-(a1)
00:0000440C 6402            	  3900:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:0000440E 5284            	  3901:                 add.l #1,d4
00:00004410 D611            	  3902: ABCD_NO_C2:     add.b (a1),d3
                            	  3903: 
                            	  3904: 
00:00004412 51CEFFD8        	  3905:                 dbf d6,ABCD_INNER1
00:00004416 2C3C00000099    	  3906:                 move.l #$00000099,d6
00:0000441C 51CFFFCC        	  3907:                 dbf d7,ABCD_OUTER1
00:00004420 0C8400005AFC    	  3908:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:00004426 66FE            	  3909:                 bne.s *
00:00004428 0C85001C9A34    	  3910:                 cmpi.l #$001C9A34,d5
00:0000442E 66FE            	  3911:                 bne.s *
00:00004430 0C8300000034    	  3912:                 cmpi.l #$00000034,d3
00:00004436 66FE            	  3913:                 bne.s *
                            	  3914: 
                            	  3915: *     Test with X Flag SET
00:00004438 307C0110        	  3916:                 move.l #$00000110,a0 * Address pointer-X
00:0000443C 327C0120        	  3917:                 move.l #$00000120,a1 * Address pointer-Y
00:00004440 7000            	  3918:                 moveq  #$00000000,d0 * BCD byte-X
00:00004442 7200            	  3919:                 moveq  #$00000000,d1 * BCD byte-Y
00:00004444 7400            	  3920:                 moveq  #$00000000,d2
00:00004446 7600            	  3921:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00004448 7800            	  3922:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000444A 7A00            	  3923:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000444C 2C3C00000099    	  3924:                 move.l #$00000099,d6 * Inner loop counter
00:00004452 2E3C00000099    	  3925:                 move.l #$00000099,d7 * Outer loop counter
                            	  3926: 
00:00004458 2007            	  3927: ABCD_OUTER2:    move.l d7,d0
00:0000445A 2206            	  3928: ABCD_INNER2:    move.l d6,d1
00:0000445C 003C0010        	  3929:                 ori.b #$10,CCR      * Set X Flag
00:00004460 307C0110        	  3930:                 move.l #$00000110,a0 * Address pointer-X
00:00004464 327C0120        	  3931:                 move.l #$00000120,a1 * Address pointer-Y
00:00004468 1140FFFF        	  3932:                 move.b d0,-1(a0)
00:0000446C 1341FFFF        	  3933:                 move.b d1,-1(a1)
                            	  3934: 
00:00004470 C300            	  3935:                 abcd d0,d1
00:00004472 6402            	  3936:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:00004474 5284            	  3937:                 add.l #1,d4
00:00004476 DA81            	  3938: ABCD_NO_C3:     add.l d1,d5
                            	  3939: 
00:00004478 C308            	  3940:                 abcd -(a0),-(a1)
00:0000447A 6402            	  3941:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:0000447C 5284            	  3942:                 add.l #1,d4
00:0000447E D611            	  3943: ABCD_NO_C4:     add.b (a1),d3
                            	  3944: 
                            	  3945: 
00:00004480 51CEFFD8        	  3946:                 dbf d6,ABCD_INNER2
00:00004484 2C3C00000099    	  3947:                 move.l #$00000099,d6
00:0000448A 51CFFFCC        	  3948:                 dbf d7,ABCD_OUTER2
00:0000448E 0C8400005B60    	  3949:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:00004494 66FE            	  3950:                 bne.s *
00:00004496 0C85001CCFC8    	  3951:                 cmpi.l #$001CCFC8,d5
00:0000449C 66FE            	  3952:                 bne.s *
00:0000449E 0C8300000034    	  3953:                 cmpi.l #$00000034,d3
00:000044A4 66FE            	  3954:                 bne.s *
                            	  3955: 
                            	  3956: *             Quick check of Z Flag
00:000044A6 4200            	  3957:                 move.b #$00,d0
00:000044A8 4201            	  3958:                 move.b #$00,d1
00:000044AA 44FC0000        	  3959:                 move #$00,CCR              * Set Z flag to 0
00:000044AE C101            	  3960:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000044B0 67FE            	  3961:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3962: 
00:000044B2 103C0001        	  3963:                 move.b #$01,d0
00:000044B6 4201            	  3964:                 move.b #$00,d1
00:000044B8 44FC0004        	  3965:                 move #$04,CCR              * Set Z flag to 0
00:000044BC C101            	  3966:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:000044BE 67FE            	  3967:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3968: 
00:000044C0 4E75            	  3969:                 rts
                            	  3970: 
                            	  3971: *-----------------------------------------------------------
                            	  3972: *-----------------------------------------------------------
                            	  3973: * OPCODE : SBCD
                            	  3974: *-----------------------------------------------------------
                            	  3975: *-----------------------------------------------------------
                            	  3976: op_SBCD:
                            	  3977: 
                            	  3978: *     Test with X Flag CLEARED
00:000044C2 307C0110        	  3979:                 move.l #$00000110,a0 * Address pointer-X
00:000044C6 327C0120        	  3980:                 move.l #$00000120,a1 * Address pointer-Y
00:000044CA 7000            	  3981:                 moveq  #$00000000,d0 * BCD byte-X
00:000044CC 7200            	  3982:                 moveq  #$00000000,d1 * BCD byte-Y
00:000044CE 7400            	  3983:                 moveq  #$00000000,d2
00:000044D0 7600            	  3984:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000044D2 7800            	  3985:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000044D4 7A00            	  3986:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000044D6 2C3C00000099    	  3987:                 move.l #$00000099,d6 * Inner loop counter
00:000044DC 2E3C00000099    	  3988:                 move.l #$00000099,d7 * Outer loop counter
                            	  3989: 
00:000044E2 2007            	  3990: SBCD_OUTER1:    move.l d7,d0
00:000044E4 2206            	  3991: SBCD_INNER1:    move.l d6,d1
00:000044E6 023C00EF        	  3992:                 andi.b #$EF,CCR     * Clear X Flag
00:000044EA 307C0110        	  3993:                 move.l #$00000110,a0 * Address pointer-X
00:000044EE 327C0120        	  3994:                 move.l #$00000120,a1 * Address pointer-Y
00:000044F2 1140FFFF        	  3995:                 move.b d0,-1(a0)
00:000044F6 1341FFFF        	  3996:                 move.b d1,-1(a1)
                            	  3997: 
00:000044FA 8300            	  3998:                 sbcd d0,d1
00:000044FC 6402            	  3999:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:000044FE 5284            	  4000:                 add.l #1,d4
00:00004500 DA81            	  4001: SBCD_NO_C1:     add.l d1,d5
                            	  4002: 
00:00004502 8308            	  4003:                 sbcd -(a0),-(a1)
00:00004504 6402            	  4004:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00004506 5284            	  4005:                 add.l #1,d4
00:00004508 D611            	  4006: SBCD_NO_C2:     add.b (a1),d3
                            	  4007: 
                            	  4008: 
00:0000450A 51CEFFD8        	  4009:                 dbf d6,SBCD_INNER1
00:0000450E 2C3C00000099    	  4010:                 move.l #$00000099,d6
00:00004514 51CFFFCC        	  4011:                 dbf d7,SBCD_OUTER1
00:00004518 0C8400005C0A    	  4012:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:0000451E 66FE            	  4013:                 bne.s *
00:00004520 0C85001C459E    	  4014:                 cmpi.l #$001C459E,d5
00:00004526 66FE            	  4015:                 bne.s *
00:00004528 0C830000009E    	  4016:                 cmpi.l #$0000009E,d3
00:0000452E 66FE            	  4017:                 bne.s *
                            	  4018: 
                            	  4019: *     Test with X Flag SET
00:00004530 307C0110        	  4020:                 move.l #$00000110,a0 * Address pointer-X
00:00004534 327C0120        	  4021:                 move.l #$00000120,a1 * Address pointer-Y
00:00004538 7000            	  4022:                 moveq  #$00000000,d0 * BCD byte-X
00:0000453A 7200            	  4023:                 moveq  #$00000000,d1 * BCD byte-Y
00:0000453C 7400            	  4024:                 moveq  #$00000000,d2
00:0000453E 7600            	  4025:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00004540 7800            	  4026:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004542 7A00            	  4027:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00004544 2C3C00000099    	  4028:                 move.l #$00000099,d6 * Inner loop counter
00:0000454A 2E3C00000099    	  4029:                 move.l #$00000099,d7 * Outer loop counter
                            	  4030: 
00:00004550 2007            	  4031: SBCD_OUTER2:    move.l d7,d0
00:00004552 2206            	  4032: SBCD_INNER2:    move.l d6,d1
00:00004554 003C0010        	  4033:                 ori.b #$10,CCR      * Set X Flag
00:00004558 307C0110        	  4034:                 move.l #$00000110,a0 * Address pointer-X
00:0000455C 327C0120        	  4035:                 move.l #$00000120,a1 * Address pointer-Y
00:00004560 1140FFFF        	  4036:                 move.b d0,-1(a0)
00:00004564 1341FFFF        	  4037:                 move.b d1,-1(a1)
                            	  4038: 
00:00004568 8300            	  4039:                 sbcd d0,d1
00:0000456A 6402            	  4040:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:0000456C 5284            	  4041:                 add.l #1,d4
00:0000456E DA81            	  4042: SBCD_NO_C3:     add.l d1,d5
                            	  4043: 
00:00004570 8308            	  4044:                 sbcd -(a0),-(a1)
00:00004572 6402            	  4045:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:00004574 5284            	  4046:                 add.l #1,d4
00:00004576 D611            	  4047: SBCD_NO_C4:     add.b (a1),d3
                            	  4048: 
00:00004578 51CEFFD8        	  4049:                 dbf d6,SBCD_INNER2
00:0000457C 2C3C00000099    	  4050:                 move.l #$00000099,d6
00:00004582 51CFFFCC        	  4051:                 dbf d7,SBCD_OUTER2
00:00004586 0C8400005CA4    	  4052:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:0000458C 66FE            	  4053:                 bne.s *
00:0000458E 0C85001C5C66    	  4054:                 cmpi.l #$001C5C66,d5
00:00004594 66FE            	  4055:                 bne.s *
00:00004596 0C830000009E    	  4056:                 cmpi.l #$0000009E,d3
00:0000459C 66FE            	  4057:                 bne.s *
                            	  4058: 
                            	  4059: 
                            	  4060: *             Quick check of Z Flag
00:0000459E 4200            	  4061:                 move.b #$00,d0
00:000045A0 4201            	  4062:                 move.b #$00,d1
00:000045A2 44FC0000        	  4063:                 move #$00,CCR              * Set Z flag to 0
00:000045A6 8101            	  4064:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000045A8 67FE            	  4065:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4066: 
00:000045AA 103C0001        	  4067:                 move.b #$01,d0
00:000045AE 4201            	  4068:                 move.b #$00,d1
00:000045B0 44FC0004        	  4069:                 move #$04,CCR              * Set Z flag to 0
00:000045B4 8101            	  4070:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:000045B6 67FE            	  4071:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4072: 
00:000045B8 4E75            	  4073:                 rts
                            	  4074: 
                            	  4075: *-----------------------------------------------------------
                            	  4076: *-----------------------------------------------------------
                            	  4077: * OPCODE : NBCD
                            	  4078: *-----------------------------------------------------------
                            	  4079: *-----------------------------------------------------------
                            	  4080: op_NBCD:
                            	  4081: 
                            	  4082: *        NBCD to a  Register
                            	  4083: 
00:000045BA 7000            	  4084:                 moveq  #$00000000,d0 * BCD byte
00:000045BC 7200            	  4085:                 moveq  #$00000000,d1
00:000045BE 7400            	  4086:                 moveq  #$00000000,d2
00:000045C0 7600            	  4087:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:000045C2 7800            	  4088:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000045C4 7A00            	  4089:                 moveq  #$00000000,d5 * Cumulative BCD results
00:000045C6 2C3C00000099    	  4090:                 move.l #$00000099,d6
00:000045CC 2E3C00000099    	  4091:                 move.l #$00000099,d7 * Loop counter
                            	  4092: 
00:000045D2 2007            	  4093: NBCD_LOOP:      move.l d7,d0
00:000045D4 44FC0004        	  4094:                 move #$04,CCR        * Set Z flag to 0
                            	  4095: 
00:000045D8 4800            	  4096:                 nbcd d0
                            	  4097: 
00:000045DA 6402            	  4098:                 bcc.s NBCD_NO_C         * Check C Flag
00:000045DC 5284            	  4099:                 add.l #1,d4
00:000045DE 6602            	  4100: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:000045E0 5283            	  4101:                 add.l #1,d3
00:000045E2 DA80            	  4102: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4103: 
00:000045E4 51CFFFEC        	  4104:                 dbf d7,NBCD_LOOP
                            	  4105: 
00:000045E8 0C8300000001    	  4106:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:000045EE 66FE            	  4107:                 bne.s *
00:000045F0 0C8400000099    	  4108:                 cmpi.l #$00000099,d4
00:000045F6 66FE            	  4109:                 bne.s *
00:000045F8 0C8500002E3B    	  4110:                 cmpi.l #$00002E3B,d5
00:000045FE 66FE            	  4111:                 bne.s *
                            	  4112: 
                            	  4113: 
                            	  4114: *        NBCD to a memory location
                            	  4115: 
00:00004600 7000            	  4116:                 moveq  #$00000000,d0 * BCD byte
00:00004602 7200            	  4117:                 moveq  #$00000000,d1
00:00004604 7400            	  4118:                 moveq  #$00000000,d2
00:00004606 7600            	  4119:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00004608 7800            	  4120:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000460A 7A00            	  4121:                 moveq  #$00000000,d5 * Cumulative BCD results
00:0000460C 2C3C00000099    	  4122:                 move.l #$00000099,d6
00:00004612 2E3C00000099    	  4123:                 move.l #$00000099,d7 * Loop counter
                            	  4124: 
00:00004618 11C70100        	  4125: NBCD_LOOP1:     move.b d7,$00000100
00:0000461C 44FC0004        	  4126:                 move #$04,CCR        * Set Z flag to 0
                            	  4127: 
00:00004620 48380100        	  4128:                 nbcd $00000100
00:00004624 10380100        	  4129:                 move.b $00000100,d0
                            	  4130: 
00:00004628 6402            	  4131:                 bcc.s NBCD_NO_C1        * Check C Flag
00:0000462A 5284            	  4132:                 add.l #1,d4
00:0000462C 6602            	  4133: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:0000462E 5283            	  4134:                 add.l #1,d3
00:00004630 DA80            	  4135: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4136: 
00:00004632 51CFFFE4        	  4137:                 dbf d7,NBCD_LOOP1
                            	  4138: 
00:00004636 0C8300000001    	  4139:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:0000463C 66FE            	  4140:                 bne.s *
00:0000463E 4A84            	  4141:                 cmpi.l #$00000000,d4
00:00004640 66FE            	  4142:                 bne.s *
00:00004642 0C8500002E3B    	  4143:                 cmpi.l #$00002E3B,d5
00:00004648 66FE            	  4144:                 bne.s *
                            	  4145: 
                            	  4146: 
00:0000464A 4E75            	  4147:                 rts
                            	  4148: 
                            	  4149: 
                            	  4150: 
                            	  4151: *-----------------------------------------------------------
                            	  4152: *-----------------------------------------------------------
                            	  4153: * OPCODE : TRAPV
                            	  4154: *-----------------------------------------------------------
                            	  4155: *-----------------------------------------------------------
                            	  4156: op_TRAPV:
                            	  4157: 
                            	  4158: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4159: 
00:0000464C 7000            	  4160:                 moveq  #$00000000,d0 * Clear d0
                            	  4161: 
00:0000464E 44FC0000        	  4162:                 move #$00,CCR        * Clear V flag
00:00004652 4E76            	  4163:                 trapv
00:00004654 4A80            	  4164:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:00004656 66FE            	  4165:                 bne.s *
                            	  4166: 
00:00004658 44FC0002        	  4167:                 move #$02,CCR        * Set V flag
00:0000465C 4E76            	  4168:                 trapv
00:0000465E 0C8012345678    	  4169:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:00004664 66FE            	  4170:                 bne.s *
                            	  4171: 
                            	  4172: 
00:00004666 4E75            	  4173:                 rts
                            	  4174: 
                            	  4175: 
                            	  4176: 
                            	  4177: *-----------------------------------------------------------
                            	  4178: *-----------------------------------------------------------
                            	  4179: * OPCODE : RTR
                            	  4180: *-----------------------------------------------------------
                            	  4181: *-----------------------------------------------------------
                            	  4182: 
                            	  4183: op_RTR:
                            	  4184: 
                            	  4185: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4186: 
00:00004668 41FA000A        	  4187:                 lea 		RTR_DONE,a0
00:0000466C 2F08            	  4188:                 move.l 	a0,-(a7)     * push destination PC to the stack
00:0000466E 3F3CFF15        	  4189:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
00:00004672 4E77            	  4190:                 rtr
                            	  4191: 
00:00004674 40C0            	  4192: RTR_DONE:       move.w SR,d0
00:00004676 0240001F        	  4193:                 andi.w #$1F,d0
00:0000467A 0C400015        	  4194:                 cmpi.w #$15,d0
00:0000467E 66FE            	  4195:                 bne.s *
                            	  4196: 
00:00004680 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
00:00004682 283C44444444    	  4200: BSR_FAR2:       move.l #$44444444,d4
00:00004688 4E75            	  4201:                 rts
                            	  4202: 
                            	  4203: 
                            	  4204: *-----------------------------------------------------------
                            	  4205: *-----------------------------------------------------------
                            	  4206: * OPCODE : BCC
                            	  4207: *-----------------------------------------------------------
                            	  4208: *-----------------------------------------------------------
                            	  4209: 
00:0000468A 44FC0000        	  4210: op_BCC:         move #$00,CCR
00:0000468E 6202            	  4211:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:00004690 60FE            	  4212:                 bra.s *
                            	  4213: 
00:00004692 44FC0001        	  4214: BCC1:           move #$01,CCR
00:00004696 63000004        	  4215:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:0000469A 60FE            	  4216:                 bra.s *
                            	  4217: 
00:0000469C 44FC0000        	  4218: BCC2:           move #$00,CCR
00:000046A0 6402            	  4219:                 bcc.s BCC3            * Carry Clear         C=0
00:000046A2 60FE            	  4220:                 bra.s *
                            	  4221: 
00:000046A4 44FC0001        	  4222: BCC3:           move #$01,CCR
00:000046A8 65000004        	  4223:                 bcs.w BCC4            * Carry Set           C=1
00:000046AC 60FE            	  4224:                 bra.s *
                            	  4225: 
00:000046AE 44FC0000        	  4226: BCC4:           move #$00,CCR
00:000046B2 6602            	  4227:                 bne.s BCC5            * Not Equal           Z=0
00:000046B4 60FE            	  4228:                 bra.s *
                            	  4229: 
00:000046B6 44FC0004        	  4230: BCC5:           move #$04,CCR
00:000046BA 67000004        	  4231:                 beq.w BCC6            * Equal               Z=1
00:000046BE 60FE            	  4232:                 bra.s *
                            	  4233: 
00:000046C0 44FC0000        	  4234: BCC6:           move #$00,CCR
00:000046C4 6802            	  4235:                 bvc.s BCC7            * V Clear             V=0
00:000046C6 60FE            	  4236:                 bra.s *
                            	  4237: 
00:000046C8 44FC0002        	  4238: BCC7:           move #$02,CCR
00:000046CC 69000004        	  4239:                 bvs.w BCC8            * V Set               V=1
00:000046D0 60FE            	  4240:                 bra.s *
                            	  4241: 
00:000046D2 44FC0000        	  4242: BCC8:           move #$00,CCR
00:000046D6 6A02            	  4243:                 bpl.s BCC9            * Plus                N=0
00:000046D8 60FE            	  4244:                 bra.s *
                            	  4245: 
00:000046DA 44FC0008        	  4246: BCC9:           move #$08,CCR
00:000046DE 6B000004        	  4247:                 bmi.w BCC10           * Minus               N=1
00:000046E2 60FE            	  4248:                 bra.s *
                            	  4249: 
00:000046E4 44FC0000        	  4250: BCC10:          move #$00,CCR
00:000046E8 6C02            	  4251:                 bge.s BCC11           * Greater or Equal    N=V
00:000046EA 60FE            	  4252:                 bra.s *
                            	  4253: 
00:000046EC 44FC0002        	  4254: BCC11:          move #$02,CCR
00:000046F0 6D000004        	  4255:                 blt.w BCC12           * Less Than           N!=V
00:000046F4 60FE            	  4256:                 bra.s *
                            	  4257: 
00:000046F6 44FC000A        	  4258: BCC12:          move #$0A,CCR
00:000046FA 6E02            	  4259:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:000046FC 60FE            	  4260:                 bra.s *
                            	  4261: 
00:000046FE 44FC0006        	  4262: BCC13:          move #$06,CCR
00:00004702 6F000004        	  4263:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:00004706 60FE            	  4264:                 bra.s *
                            	  4265: 
                            	  4266: 
00:00004708 4E75            	  4267: BCC14:          rts
                            	  4268: 
                            	  4269: 
                            	  4270: *-----------------------------------------------------------
                            	  4271: *-----------------------------------------------------------
                            	  4272: * OPCODE : DBCC
                            	  4273: *-----------------------------------------------------------
                            	  4274: *-----------------------------------------------------------
                            	  4275: 
00:0000470A 7003            	  4276: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:0000470C 7200            	  4277:                 moveq  #$00000000,d1    * Accumulator
00:0000470E 44FC0000        	  4278:                 move #$00,CCR
                            	  4279: 
00:00004712 5201            	  4280: DBCC_LOOP1:     addi.b #$1,d1
00:00004714 51C8FFFC        	  4281:                 dbf d0,DBCC_LOOP1
                            	  4282: 
00:00004718 0C8100000004    	  4283:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:0000471E 66FE            	  4284:                 bne.s *
                            	  4285: 
00:00004720 5201            	  4286: DBCC_LOOP2:     addi.b #$1,d1
00:00004722 54C8FFFC        	  4287:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4288: 
00:00004726 0C8100000005    	  4289:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:0000472C 66FE            	  4290:                 bne.s *
                            	  4291: 
00:0000472E 4E75            	  4292:                 rts
                            	  4293: 
                            	  4294: 
                            	  4295: *-----------------------------------------------------------
                            	  4296: *-----------------------------------------------------------
                            	  4297: * OPCODE : SCC
                            	  4298: *-----------------------------------------------------------
                            	  4299: *-----------------------------------------------------------
                            	  4300: 
00:00004730 44FC0001        	  4301: op_SCC:         move #$01,CCR
00:00004734 54F900010000    	  4302:                 scc $00010000                   * Clear the EA byte
00:0000473A 4A3900010000    	  4303:                 cmpi.b #$00,$00010000
00:00004740 66FE            	  4304:                 bne.s *
                            	  4305: 
00:00004742 44FC0000        	  4306:                 move #$00,CCR
00:00004746 54F900010000    	  4307:                 scc $00010000                   * Set the EA byte to 0xFF
00:0000474C 0C3900FF00010000	  4308:                 cmpi.b #$FF,$00010000
00:00004754 66FE            	  4309:                 bne.s *
                            	  4310: 
00:00004756 54C0            	  4311: 								scc d0													* Test setting a data register
00:00004758 0C0000FF        	  4312: 								cmpi.b #$FF,d0
00:0000475C 66FE            	  4313: 								bne.s *
00:0000475E 4E75            	  4314:                 rts
                            	  4315: 
                            	  4316: 
                            	  4317: 
                            	  4318: *-----------------------------------------------------------
                            	  4319: *-----------------------------------------------------------
                            	  4320: * OPCODE : ADDQ
                            	  4321: *-----------------------------------------------------------
                            	  4322: *-----------------------------------------------------------
                            	  4323: 
                            	  4324: op_ADDQ:
                            	  4325: 
                            	  4326: *     BYTE
00:00004760 203C000000FF    	  4327:                 move.l #$000000FF,d0    * Loop counter
00:00004766 7200            	  4328:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004768 7400            	  4329:                 moveq  #$00000000,d2    * Data results accumulator
00:0000476A 7600            	  4330:                 moveq  #$00000000,d3
00:0000476C 7800            	  4331:                 moveq  #$00000000,d4
00:0000476E 7A00            	  4332:                 moveq  #$00000000,d5
00:00004770 7C00            	  4333:                 moveq  #$00000000,d6
00:00004772 7E00            	  4334:                 moveq  #$00000000,d7
                            	  4335: 
00:00004774 5605            	  4336: ADDQ_LOOP1:     addq.b #3,d5
00:00004776 40C6            	  4337:                 move.w SR,d6
00:00004778 02860000001F    	  4338:                 andi.l #$1F,d6        * Isolate flags
00:0000477E D286            	  4339:                 add.l d6,d1           * Copy flag results into accumulator
00:00004780 D485            	  4340:                 add.l d5,d2           * Copy data results into data accumulator
00:00004782 51C8FFF0        	  4341:                 dbf d0,ADDQ_LOOP1
                            	  4342: 
00:00004786 0C810000043D    	  4343:                 cmpi.l #$0000043D,d1
00:0000478C 66FE            	  4344:                 bne.s *
00:0000478E 0C8200007F80    	  4345:                 cmpi.l #$00007F80,d2
00:00004794 66FE            	  4346:                 bne.s *
                            	  4347: 
                            	  4348: 
                            	  4349: *     WORD
00:00004796 203C000000FF    	  4350:                 move.l #$000000FF,d0    * Loop counter
00:0000479C 7200            	  4351:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000479E 7400            	  4352:                 moveq  #$00000000,d2    * Data results accumulator
00:000047A0 7600            	  4353:                 moveq  #$00000000,d3
00:000047A2 7800            	  4354:                 moveq  #$00000000,d4
00:000047A4 2A3C0000FFF0    	  4355:                 move.l #$0000FFF0,d5
00:000047AA 7C00            	  4356:                 moveq  #$00000000,d6
00:000047AC 7E00            	  4357:                 moveq  #$00000000,d7
00:000047AE 307C0100        	  4358:                 move.l #$00000100,a0
                            	  4359: 
00:000047B2 5A45            	  4360: ADDQ_LOOP2:     addq.w #5,d5
00:000047B4 40C6            	  4361:                 move.w SR,d6
00:000047B6 02860000001F    	  4362:                 andi.l #$1F,d6        * Isolate flags
00:000047BC D286            	  4363:                 add.l d6,d1           * Copy flag results into accumulator
00:000047BE D485            	  4364:                 add.l d5,d2           * Copy data results into data accumulator
00:000047C0 51C8FFF0        	  4365:                 dbf d0,ADDQ_LOOP2
                            	  4366: 
00:000047C4 0C8100000029    	  4367:                 cmpi.l #$00000029,d1
00:000047CA 66FE            	  4368:                 bne.s *
00:000047CC 0C8200057280    	  4369:                 cmpi.l #$00057280,d2
00:000047D2 66FE            	  4370:                 bne.s *
                            	  4371: 
                            	  4372: 
                            	  4373: *     LONG
00:000047D4 203C000000FF    	  4374:                 move.l #$000000FF,d0    * Loop counter
00:000047DA 7200            	  4375:                 moveq  #$00000000,d1    * Flag results accumulator
00:000047DC 7400            	  4376:                 moveq  #$00000000,d2    * Data results accumulator
00:000047DE 7600            	  4377:                 moveq  #$00000000,d3
00:000047E0 7800            	  4378:                 moveq  #$00000000,d4
00:000047E2 7AF0            	  4379:                 move.l #$FFFFFFF0,d5
00:000047E4 7C00            	  4380:                 moveq  #$00000000,d6
00:000047E6 7E00            	  4381:                 moveq  #$00000000,d7
                            	  4382: 
00:000047E8 5285            	  4383: ADDQ_LOOP3:     addq.l #1,d5
00:000047EA 40C6            	  4384:                 move.w SR,d6
00:000047EC 02860000001F    	  4385:                 andi.l #$1F,d6        * Isolate flags
00:000047F2 D286            	  4386:                 add.l d6,d1           * Copy flag results into accumulator
00:000047F4 D485            	  4387:                 add.l d5,d2           * Copy data results into data accumulator
00:000047F6 51C8FFF0        	  4388:                 dbf d0,ADDQ_LOOP3
                            	  4389: 
00:000047FA 0C810000008D    	  4390:                 cmpi.l #$0000008D,d1
00:00004800 66FE            	  4391:                 bne.s *
00:00004802 0C8200007080    	  4392:                 cmpi.l #$00007080,d2
00:00004808 66FE            	  4393:                 bne.s *
                            	  4394: 
                            	  4395: *     Check that Flags are not updated for Address registers
00:0000480A 207C0000FFFF    	  4396:                 move.l #$0000FFFF,a0
00:00004810 44FC0000        	  4397:                 move #$00,CCR         * Clear flags
00:00004814 5E48            	  4398:                 addq.w #$7,a0
00:00004816 65FE            	  4399:                 bcs.s *
                            	  4400: 
00:00004818 4E75            	  4401:                 rts
                            	  4402: 
                            	  4403: 
                            	  4404: 
                            	  4405: *-----------------------------------------------------------
                            	  4406: *-----------------------------------------------------------
                            	  4407: * OPCODE : SUBQ
                            	  4408: *-----------------------------------------------------------
                            	  4409: *-----------------------------------------------------------
                            	  4410: 
                            	  4411: op_SUBQ:
                            	  4412: 
                            	  4413: *     BYTE
00:0000481A 203C000000FF    	  4414:                 move.l #$000000FF,d0    * Loop counter
00:00004820 7200            	  4415:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004822 243C00001234    	  4416:                 move.l #$00001234,d2    * Data results accumulator
00:00004828 7600            	  4417:                 moveq  #$00000000,d3
00:0000482A 7800            	  4418:                 moveq  #$00000000,d4
00:0000482C 7A12            	  4419:                 moveq  #$00000012,d5
00:0000482E 7C00            	  4420:                 moveq  #$00000000,d6
00:00004830 7E00            	  4421:                 moveq  #$00000000,d7
                            	  4422: 
00:00004832 5305            	  4423: SUBQ_LOOP1:     subq.b #1,d5
00:00004834 40C6            	  4424:                 move.w SR,d6
00:00004836 02860000001F    	  4425:                 andi.l #$1F,d6        * Isolate flags
00:0000483C D286            	  4426:                 add.l d6,d1           * Copy flag results into accumulator
00:0000483E D485            	  4427:                 add.l d5,d2           * Copy data results into data accumulator
00:00004840 51C8FFF0        	  4428:                 dbf d0,SUBQ_LOOP1
                            	  4429: 
00:00004844 0C8100000417    	  4430:                 cmpi.l #$00000417,d1
00:0000484A 66FE            	  4431:                 bne.s *
00:0000484C 0C82000091B4    	  4432:                 cmpi.l #$000091B4,d2
00:00004852 66FE            	  4433:                 bne.s *
                            	  4434: 
                            	  4435: 
                            	  4436: *     WORD
00:00004854 203C000000FF    	  4437:                 move.l #$000000FF,d0    * Loop counter
00:0000485A 7200            	  4438:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000485C 7400            	  4439:                 moveq  #$00000000,d2    * Data results accumulator
00:0000485E 7600            	  4440:                 moveq  #$00000000,d3
00:00004860 7800            	  4441:                 moveq  #$00000000,d4
00:00004862 7A02            	  4442:                 moveq  #$00000002,d5
00:00004864 7C00            	  4443:                 moveq  #$00000000,d6
00:00004866 7E00            	  4444:                 moveq  #$00000000,d7
00:00004868 307C0100        	  4445:                 move.l #$00000100,a0
                            	  4446: 
00:0000486C 5B45            	  4447: SUBQ_LOOP2:     subq.w #5,d5
00:0000486E 40C6            	  4448:                 move.w SR,d6
00:00004870 02860000001F    	  4449:                 andi.l #$1F,d6        * Isolate flags
00:00004876 D286            	  4450:                 add.l d6,d1           * Copy flag results into accumulator
00:00004878 D485            	  4451:                 add.l d5,d2           * Copy data results into data accumulator
00:0000487A 51C8FFF0        	  4452:                 dbf d0,SUBQ_LOOP2
                            	  4453: 
00:0000487E 0C8100000811    	  4454:                 cmpi.l #$00000811,d1
00:00004884 66FE            	  4455:                 bne.s *
00:00004886 0C8200FD7F80    	  4456:                 cmpi.l #$00FD7F80,d2
00:0000488C 66FE            	  4457:                 bne.s *
                            	  4458: 
                            	  4459: 
                            	  4460: *     LONG
00:0000488E 203C000000FF    	  4461:                 move.l #$000000FF,d0    * Loop counter
00:00004894 7200            	  4462:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004896 7400            	  4463:                 moveq  #$00000000,d2    * Data results accumulator
00:00004898 7600            	  4464:                 moveq  #$00000000,d3
00:0000489A 7800            	  4465:                 moveq  #$00000000,d4
00:0000489C 7A07            	  4466:                 moveq  #$00000007,d5
00:0000489E 7C00            	  4467:                 moveq  #$00000000,d6
00:000048A0 7E00            	  4468:                 moveq  #$00000000,d7
                            	  4469: 
00:000048A2 5385            	  4470: SUBQ_LOOP3:     subq.l #1,d5
00:000048A4 40C6            	  4471:                 move.w SR,d6
00:000048A6 02860000001F    	  4472:                 andi.l #$1F,d6        * Isolate flags
00:000048AC D286            	  4473:                 add.l d6,d1           * Copy flag results into accumulator
00:000048AE D485            	  4474:                 add.l d5,d2           * Copy data results into data accumulator
00:000048B0 51C8FFF0        	  4475:                 dbf d0,SUBQ_LOOP3
                            	  4476: 
00:000048B4 0C81000007DD    	  4477:                 cmpi.l #$000007DD,d1
00:000048BA 66FE            	  4478:                 bne.s *
00:000048BC 0C82FFFF8680    	  4479:                 cmpi.l #$FFFF8680,d2
00:000048C2 66FE            	  4480:                 bne.s *
                            	  4481: 
                            	  4482: *     Check that Flags are not updated for Address registers
00:000048C4 207C0001FFFF    	  4483:                 move.l #$0001FFFF,a0
00:000048CA 44FC0000        	  4484:                 move #$00,CCR         * Clear flags
00:000048CE 5F48            	  4485:                 subq.w #$7,a0
00:000048D0 65FE            	  4486:                 bcs.s *
                            	  4487: 
00:000048D2 4E75            	  4488:                 rts
                            	  4489: 
                            	  4490: 
                            	  4491: 
                            	  4492: 
                            	  4493: *-----------------------------------------------------------
                            	  4494: *-----------------------------------------------------------
                            	  4495: * OPCODE : MOVEQ
                            	  4496: *-----------------------------------------------------------
                            	  4497: *-----------------------------------------------------------
                            	  4498: 
                            	  4499: op_MOVEQ:
00:000048D4 7000            	  4500:                 moveq  #$00000000,d0
00:000048D6 7000            	  4501:                 moveq #$0,d0
00:000048D8 66FE            	  4502:                 bne.s *
00:000048DA 4A80            	  4503:                 cmpi.l #$00000000,d0
00:000048DC 66FE            	  4504:                 bne.s *
                            	  4505: 
00:000048DE 7000            	  4506:                 moveq  #$00000000,d0
00:000048E0 7080            	  4507:                 moveq #-128,d0
00:000048E2 67FE            	  4508:                 beq.s *
00:000048E4 6AFE            	  4509:                 bpl.s *
00:000048E6 0C80FFFFFF80    	  4510:                 cmpi.l #$FFFFFF80,d0
00:000048EC 66FE            	  4511:                 bne.s *
                            	  4512: 
                            	  4513: 
00:000048EE 4E75            	  4514:                 rts
                            	  4515: 
                            	  4516: 
                            	  4517: *-----------------------------------------------------------
                            	  4518: *-----------------------------------------------------------
                            	  4519: * OPCODE : DIVU
                            	  4520: *-----------------------------------------------------------
                            	  4521: *-----------------------------------------------------------
                            	  4522: 
                            	  4523: op_DIVU:
                            	  4524: 
00:000048F0 203CA5A5A5A5    	  4525:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:000048F6 223C00005A5A    	  4526:                 move.l #$00005a5a,d1        * Initial Divisor
00:000048FC 243CA5A5A5A5    	  4527:                 move.l #$a5a5a5a5,d2
00:00004902 7600            	  4528:                 moveq  #$00000000,d3
00:00004904 7800            	  4529:                 moveq  #$00000000,d4        * Cumulative data results
00:00004906 7A00            	  4530:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004908 7C0E            	  4531:                 move.l #$0000000E,d6       * Inner loop counter
00:0000490A 7E1E            	  4532:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4533: 
                            	  4534: 
00:0000490C 80C1            	  4535: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:0000490E 40C3            	  4536:                 move.w SR,d3
00:00004910 02830000000C    	  4537:                 andi.l #$0C,d3            * Isolate flags
00:00004916 DA83            	  4538:                 add.l d3,d5               * Copy flag results into accumulator
00:00004918 D880            	  4539:                 add.l d0,d4               * Copy data results into data accumulator
00:0000491A E289            	  4540:                 lsr.l #$1,d1
                            	  4541: 
00:0000491C 51CEFFEE        	  4542:                 dbf d6,DIVU_OUTER1
00:00004920 E28A            	  4543:                 lsr.l #$1,d2
00:00004922 2002            	  4544:                 move.l d2,d0
00:00004924 223C00005A5A    	  4545:                 move.l #$00005a5a,d1       * Initial Divisor
00:0000492A 7C0E            	  4546:                 move.l #$0000000E,d6       * Inner loop counter
00:0000492C 51CFFFDE        	  4547:                 dbf d7,DIVU_OUTER1
                            	  4548: 
00:00004930 0C8492FEDB89    	  4549:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:00004936 66FE            	  4550:                 bne.s *
                            	  4551: 
00:00004938 0C8500000110    	  4552:                 cmpi.l #$00000110,d5      * Check the Flag results
00:0000493E 66FE            	  4553:                 bne.s *
                            	  4554: 
                            	  4555: 
00:00004940 4E75            	  4556:                 rts
                            	  4557: 
                            	  4558: 
                            	  4559: 
                            	  4560: *-----------------------------------------------------------
                            	  4561: *-----------------------------------------------------------
                            	  4562: * OPCODE : DIVS
                            	  4563: *-----------------------------------------------------------
                            	  4564: *-----------------------------------------------------------
                            	  4565: 
                            	  4566: op_DIVS:
                            	  4567: 
00:00004942 203CA5A5A5A5    	  4568: 	move.l #$a5a5a5a5,d0        * Initial Numerator
00:00004948 223C00005A5A    	  4569: 	move.l #$00005a5a,d1        * Initial Divisor
00:0000494E 243CA5A5A5A5    	  4570: 	move.l #$a5a5a5a5,d2
00:00004954 7600            	  4571: 	moveq  #$00000000,d3
00:00004956 7800            	  4572: 	moveq  #$00000000,d4        * Cumulative data results
00:00004958 7A00            	  4573: 	moveq  #$00000000,d5       * Cumulative flag results
00:0000495A 7C0E            	  4574: 	move.l #$0000000E,d6       * Inner loop counter
00:0000495C 7E1E            	  4575: 	move.l #$0000001E,d7       * Outer loop counter
                            	  4576: 
                            	  4577: DIVS_OUTER1:
00:0000495E 81C1            	  4578: 	divs d1,d0               * !! Easy68K C not always cleared
00:00004960 40C3            	  4579: 	move.w SR,d3
00:00004962 02830000000C    	  4580: 	andi.l #$0C,d3            * Isolate flags
00:00004968 DA83            	  4581: 	add.l d3,d5               * Copy flag results into accumulator
00:0000496A D880            	  4582: 	add.l d0,d4               * Copy data results into data accumulator
00:0000496C E289            	  4583: 	lsr.l #$1,d1
                            	  4584: 
00:0000496E 51CEFFEE        	  4585: 	dbf d6,DIVS_OUTER1
00:00004972 E28A            	  4586: 	lsr.l #$1,d2
00:00004974 2002            	  4587: 	move.l d2,d0
00:00004976 223C00005A5A    	  4588: 	move.l #$00005a5a,d1       * Initial Divisor
00:0000497C 7C0E            	  4589: 	move.l #$0000000E,d6       * Inner loop counter
00:0000497E 51CFFFDE        	  4590: 	dbf d7,DIVS_OUTER1
                            	  4591: 
00:00004982 0C844EC5D057    	  4592: 	cmpi.l #$4EC5D057,d4      * Check the data results
00:00004988 66FE            	  4593: 	bne.s *
                            	  4594: 
00:0000498A 0C8500000038    	  4595: 	cmpi.l #$00000038,d5      * Check the Flag results
00:00004990 66FE            	  4596: 	bne.s *
00:00004992 4E75            	  4597: 	rts
                            	  4598: 
                            	  4599: 
                            	  4600: *-----------------------------------------------------------
                            	  4601: *-----------------------------------------------------------
                            	  4602: * OPCODE : OR
                            	  4603: *-----------------------------------------------------------
                            	  4604: *-----------------------------------------------------------
                            	  4605: 
                            	  4606: op_OR:
                            	  4607: 
                            	  4608: *  * <EA> to Register
                            	  4609: 
00:00004994 203CA5A5A5A5    	  4610:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:0000499A 223C8167E123    	  4611:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000049A0 243CA5A5A5A5    	  4612:                 move.l #$a5a5a5a5,d2
00:000049A6 7600            	  4613:                 moveq  #$00000000,d3
00:000049A8 7800            	  4614:                 moveq  #$00000000,d4       * Cumulative data results
00:000049AA 7A00            	  4615:                 moveq  #$00000000,d5       * Cumulative flag results
00:000049AC 7C1E            	  4616:                 move.l #$0000001E,d6       * Inner loop counter
00:000049AE 7E1E            	  4617:                 move.l #$0000001E,d7       * Outer loop counter
00:000049B0 307C0100        	  4618:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4619: 
                            	  4620: 
                            	  4621: OR_OUTER1:
                            	  4622: 
                            	  4623: *     BYTE
00:000049B4 2081            	  4624:                 move.l d1,(a0)
00:000049B6 8010            	  4625:                 or.b (a0),d0
00:000049B8 40C3            	  4626:                 move.w SR,d3
00:000049BA 02830000000C    	  4627:                 andi.l #$0C,d3            * Isolate flags
00:000049C0 DA83            	  4628:                 add.l d3,d5               * Copy flag results into accumulator
00:000049C2 D880            	  4629:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4630: 
                            	  4631: *     WORD
00:000049C4 2081            	  4632:                 move.l d1,(a0)
00:000049C6 8050            	  4633:                 or.w (a0),d0
00:000049C8 40C3            	  4634:                 move.w SR,d3
00:000049CA 02830000000C    	  4635:                 andi.l #$0C,d3            * Isolate flags
00:000049D0 DA83            	  4636:                 add.l d3,d5               * Copy flag results into accumulator
00:000049D2 D880            	  4637:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4638: 
                            	  4639: *     LONG
00:000049D4 2081            	  4640:                 move.l d1,(a0)
00:000049D6 8090            	  4641:                 or.l (a0),d0
00:000049D8 40C3            	  4642:                 move.w SR,d3
00:000049DA 02830000000F    	  4643:                 andi.l #$0F,d3            * Isolate flags
00:000049E0 DA83            	  4644:                 add.l d3,d5               * Copy flag results into accumulator
00:000049E2 D880            	  4645:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4646: 
                            	  4647: 
00:000049E4 E289            	  4648:                 lsr.l #$1,d1
00:000049E6 51CEFFCC        	  4649:                 dbf d6,OR_OUTER1
00:000049EA E28A            	  4650:                 lsr.l #$1,d2
00:000049EC 223C8167E123    	  4651:                 move.l #$8167E123,d1       * Initial Data-Y
00:000049F2 7C1E            	  4652:                 move.l #$0000001E,d6       * Inner loop counter
00:000049F4 51CFFFBE        	  4653:                 dbf d7,OR_OUTER1
                            	  4654: 
00:000049F8 0C8476EAC803    	  4655:                 cmpi.l #$76EAC803,d4      * Check the data results
00:000049FE 66FE            	  4656:                 bne.s *
00:00004A00 0C8500005A18    	  4657:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00004A06 66FE            	  4658:                 bne.s *
                            	  4659: 
                            	  4660: 
                            	  4661: *  * Register to <EA>
                            	  4662: 
00:00004A08 203C86738374    	  4663:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004A0E 223CFC55F2FE    	  4664:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004A14 243C86738374    	  4665:                 move.l #$86738374,d2
00:00004A1A 7600            	  4666:                 moveq  #$00000000,d3
00:00004A1C 7800            	  4667:                 moveq  #$00000000,d4       * Cumulative data results
00:00004A1E 7A00            	  4668:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004A20 7C1E            	  4669:                 move.l #$0000001E,d6       * Inner loop counter
00:00004A22 7E1D            	  4670:                 move.l #$0000001D,d7       * Outer loop counter
00:00004A24 307C0100        	  4671:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4672: 
                            	  4673: 
                            	  4674: OR_OUTER2:
                            	  4675: 
                            	  4676: *     BYTE
00:00004A28 2080            	  4677:                 move.l d0,(a0)
00:00004A2A 8310            	  4678:                 or.b d1,(a0)
00:00004A2C 40C3            	  4679:                 move.w SR,d3
00:00004A2E 02830000000C    	  4680:                 andi.l #$0C,d3            * Isolate flags
00:00004A34 DA83            	  4681:                 add.l d3,d5               * Copy flag results into accumulator
00:00004A36 D890            	  4682:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4683: 
                            	  4684: *     WORD
00:00004A38 2080            	  4685:                 move.l d0,(a0)
00:00004A3A 8350            	  4686:                 or.w d1,(a0)
00:00004A3C 40C3            	  4687:                 move.w SR,d3
00:00004A3E 02830000000C    	  4688:                 andi.l #$0C,d3            * Isolate flags
00:00004A44 DA83            	  4689:                 add.l d3,d5               * Copy flag results into accumulator
00:00004A46 D890            	  4690:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4691: 
                            	  4692: *     LONG
00:00004A48 2080            	  4693:                 move.l d0,(a0)
00:00004A4A 8390            	  4694:                 or.l d1,(a0)
00:00004A4C 40C3            	  4695:                 move.w SR,d3
00:00004A4E 02830000000F    	  4696:                 andi.l #$0F,d3            * Isolate flags
00:00004A54 DA83            	  4697:                 add.l d3,d5               * Copy flag results into accumulator
00:00004A56 D890            	  4698:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4699: 
                            	  4700: 
00:00004A58 E289            	  4701:                 lsr.l #$1,d1
00:00004A5A 51CEFFCC        	  4702:                 dbf d6,OR_OUTER2
00:00004A5E E28A            	  4703:                 lsr.l #$1,d2
00:00004A60 223C8167E123    	  4704:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004A66 7C1E            	  4705:                 move.l #$0000001E,d6       * Inner loop counter
00:00004A68 51CFFFBE        	  4706:                 dbf d7,OR_OUTER2
                            	  4707: 
00:00004A6C 0C84FA82B9E4    	  4708:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00004A72 66FE            	  4709:                 bne.s *
00:00004A74 0C8500005730    	  4710:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00004A7A 66FE            	  4711:                 bne.s *
                            	  4712: 
                            	  4713: 
00:00004A7C 4E75            	  4714:                 rts
                            	  4715: 
                            	  4716: 
                            	  4717: 
                            	  4718: *-----------------------------------------------------------
                            	  4719: *-----------------------------------------------------------
                            	  4720: * OPCODE : AND
                            	  4721: *-----------------------------------------------------------
                            	  4722: *-----------------------------------------------------------
                            	  4723: 
                            	  4724: op_AND:
                            	  4725: 
                            	  4726: *  * <EA> to Register
                            	  4727: 
00:00004A7E 203CA5A5A5A5    	  4728:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004A84 223C8167E123    	  4729:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004A8A 243CA5A5A5A5    	  4730:                 move.l #$a5a5a5a5,d2
00:00004A90 7600            	  4731:                 moveq  #$00000000,d3
00:00004A92 7800            	  4732:                 moveq  #$00000000,d4       * Cumulative data results
00:00004A94 7A00            	  4733:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004A96 7C1E            	  4734:                 move.l #$0000001E,d6       * Inner loop counter
00:00004A98 7E1E            	  4735:                 move.l #$0000001E,d7       * Outer loop counter
00:00004A9A 307C0100        	  4736:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4737: 
                            	  4738: 
                            	  4739: AND_OUTER1:
                            	  4740: 
                            	  4741: *     BYTE
00:00004A9E 2081            	  4742:                 move.l d1,(a0)
00:00004AA0 C010            	  4743:                 and.b (a0),d0
00:00004AA2 40C3            	  4744:                 move.w sr,d3
00:00004AA4 02830000000C    	  4745:                 andi.l #$0C,d3            * Isolate flags
00:00004AAA DA83            	  4746:                 add.l d3,d5               * Copy flag results into accumulator
00:00004AAC D880            	  4747:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4748: 
                            	  4749: *     WORD
00:00004AAE 2081            	  4750:                 move.l d1,(a0)
00:00004AB0 C050            	  4751:                 and.w (a0),d0
00:00004AB2 40C3            	  4752:                 move.w sr,d3
00:00004AB4 02830000000C    	  4753:                 andi.l #$0C,d3            * Isolate flags
00:00004ABA DA83            	  4754:                 add.l d3,d5               * Copy flag results into accumulator
00:00004ABC D880            	  4755:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4756: 
                            	  4757: *     LONG
00:00004ABE 2081            	  4758:                 move.l d1,(a0)
00:00004AC0 C090            	  4759:                 and.l (a0),d0
00:00004AC2 40C3            	  4760:                 move.w sr,d3
00:00004AC4 02830000000F    	  4761:                 andi.l #$0F,d3            * Isolate flags
00:00004ACA DA83            	  4762:                 add.l d3,d5               * Copy flag results into accumulator
00:00004ACC D880            	  4763:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4764: 
                            	  4765: 
00:00004ACE E289            	  4766:                 lsr.l #$1,d1
00:00004AD0 51CEFFCC        	  4767:                 dbf d6,AND_OUTER1
00:00004AD4 E28A            	  4768:                 lsr.l #$1,d2
00:00004AD6 223C8167E123    	  4769:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004ADC 7C1E            	  4770:                 move.l #$0000001E,d6       * Inner loop counter
00:00004ADE 51CFFFBE        	  4771:                 dbf d7,AND_OUTER1
                            	  4772: 
00:00004AE2 0C84CF212883    	  4773:                 cmpi.l #$CF212883,d4      * Check the data results
00:00004AE8 66FE            	  4774:                 bne.s *
00:00004AEA 0C8500002D10    	  4775:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:00004AF0 66FE            	  4776:                 bne.s *
                            	  4777: 
                            	  4778: 
                            	  4779: *  * Register to <EA>
                            	  4780: 
00:00004AF2 203C86738374    	  4781:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004AF8 223CFC55F2FE    	  4782:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004AFE 243C86738374    	  4783:                 move.l #$86738374,d2
00:00004B04 7600            	  4784:                 moveq  #$00000000,d3
00:00004B06 7800            	  4785:                 moveq  #$00000000,d4       * Cumulative data results
00:00004B08 7A00            	  4786:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004B0A 7C1E            	  4787:                 move.l #$0000001E,d6       * Inner loop counter
00:00004B0C 7E1D            	  4788:                 move.l #$0000001D,d7       * Outer loop counter
00:00004B0E 307C0100        	  4789:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4790: 
                            	  4791: 
                            	  4792: AND_OUTER2:
                            	  4793: 
                            	  4794: *     BYTE
00:00004B12 2080            	  4795:                 move.l d0,(a0)
00:00004B14 C310            	  4796:                 and.b d1,(a0)
00:00004B16 40C3            	  4797:                 move.w sr,d3
00:00004B18 02830000000C    	  4798:                 andi.l #$0C,d3            * Isolate flags
00:00004B1E DA83            	  4799:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B20 D890            	  4800:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4801: 
                            	  4802: *     WORD
00:00004B22 2080            	  4803:                 move.l d0,(a0)
00:00004B24 C350            	  4804:                 and.w d1,(a0)
00:00004B26 40C3            	  4805:                 move.w sr,d3
00:00004B28 02830000000C    	  4806:                 andi.l #$0C,d3            * Isolate flags
00:00004B2E DA83            	  4807:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B30 D890            	  4808:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4809: 
                            	  4810: *     LONG
00:00004B32 2080            	  4811:                 move.l d0,(a0)
00:00004B34 C390            	  4812:                 and.l d1,(a0)
00:00004B36 40C3            	  4813:                 move.w sr,d3
00:00004B38 02830000000F    	  4814:                 andi.l #$0F,d3            * Isolate flags
00:00004B3E DA83            	  4815:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B40 D890            	  4816:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4817: 
                            	  4818: 
00:00004B42 E289            	  4819:                 lsr.l #$1,d1
00:00004B44 51CEFFCC        	  4820:                 dbf d6,AND_OUTER2
00:00004B48 E28A            	  4821:                 lsr.l #$1,d2
00:00004B4A 223C8167E123    	  4822:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004B50 7C1E            	  4823:                 move.l #$0000001E,d6       * Inner loop counter
00:00004B52 51CFFFBE        	  4824:                 dbf d7,AND_OUTER2
                            	  4825: 
00:00004B56 0C844A3DE544    	  4826:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:00004B5C 66FE            	  4827:                 bne.s *
00:00004B5E 0C85000018E8    	  4828:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00004B64 66FE            	  4829:                 bne.s *
                            	  4830: 
                            	  4831: 
00:00004B66 4E75            	  4832:                 rts
                            	  4833: 
                            	  4834: 
                            	  4835: 
                            	  4836: *-----------------------------------------------------------
                            	  4837: *-----------------------------------------------------------
                            	  4838: * OPCODE : EOR
                            	  4839: *-----------------------------------------------------------
                            	  4840: *-----------------------------------------------------------
                            	  4841: 
                            	  4842: op_EOR:
                            	  4843: 
                            	  4844: *  * Register to <EA>
                            	  4845: 
00:00004B68 203C86738374    	  4846:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004B6E 223CFC55F2FE    	  4847:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004B74 243C86738374    	  4848:                 move.l #$86738374,d2
00:00004B7A 7600            	  4849:                 moveq  #$00000000,d3
00:00004B7C 7800            	  4850:                 moveq  #$00000000,d4       * Cumulative data results
00:00004B7E 7A00            	  4851:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004B80 7C1E            	  4852:                 move.l #$0000001E,d6       * Inner loop counter
00:00004B82 7E1D            	  4853:                 move.l #$0000001D,d7       * Outer loop counter
00:00004B84 307C0100        	  4854:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4855: 
                            	  4856: 
                            	  4857: EOR_OUTER2:
                            	  4858: 
                            	  4859: *     BYTE
00:00004B88 2080            	  4860:                 move.l d0,(a0)
00:00004B8A B310            	  4861:                 eor.b d1,(a0)
00:00004B8C 40C3            	  4862:                 move.w sr,d3
00:00004B8E 02830000000C    	  4863:                 andi.l #$0C,d3            * Isolate flags
00:00004B94 DA83            	  4864:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B96 D890            	  4865:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4866: 
                            	  4867: *     WORD
00:00004B98 2080            	  4868:                 move.l d0,(a0)
00:00004B9A B350            	  4869:                 eor.w d1,(a0)
00:00004B9C 40C3            	  4870:                 move.w sr,d3
00:00004B9E 02830000000C    	  4871:                 andi.l #$0C,d3            * Isolate flags
00:00004BA4 DA83            	  4872:                 add.l d3,d5               * Copy flag results into accumulator
00:00004BA6 D890            	  4873:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4874: 
                            	  4875: *     LONG
00:00004BA8 2080            	  4876:                 move.l d0,(a0)
00:00004BAA B390            	  4877:                 eor.l d1,(a0)
00:00004BAC 40C3            	  4878:                 move.w sr,d3
00:00004BAE 02830000000F    	  4879:                 andi.l #$0F,d3            * Isolate flags
00:00004BB4 DA83            	  4880:                 add.l d3,d5               * Copy flag results into accumulator
00:00004BB6 D890            	  4881:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4882: 
                            	  4883: 
00:00004BB8 E289            	  4884:                 lsr.l #$1,d1
00:00004BBA 51CEFFCC        	  4885:                 dbf d6,EOR_OUTER2
00:00004BBE E28A            	  4886:                 lsr.l #$1,d2
00:00004BC0 223C8167E123    	  4887:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004BC6 7C1E            	  4888:                 move.l #$0000001E,d6       * Inner loop counter
00:00004BC8 51CFFFBE        	  4889:                 dbf d7,EOR_OUTER2
                            	  4890: 
00:00004BCC 0C8455C5EB70    	  4891:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:00004BD2 66FE            	  4892:                 bne.s *
00:00004BD4 0C8500004430    	  4893:                 cmpi.l #$00004430,d5      * Check the Flag results
00:00004BDA 66FE            	  4894:                 bne.s *
                            	  4895: 
                            	  4896: 
00:00004BDC 4E75            	  4897:                 rts
                            	  4898: 
                            	  4899: 
                            	  4900: *-----------------------------------------------------------
                            	  4901: *-----------------------------------------------------------
                            	  4902: * OPCODE : CMP
                            	  4903: *-----------------------------------------------------------
                            	  4904: *-----------------------------------------------------------
                            	  4905: 
                            	  4906: op_CMP:
                            	  4907: 
                            	  4908: 
                            	  4909: *  * <EA> to Register
                            	  4910: 
00:00004BDE 203CA5A5A5A5    	  4911:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004BE4 223C8167E123    	  4912:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004BEA 243CA5A5A5A5    	  4913:                 move.l #$a5a5a5a5,d2
00:00004BF0 7600            	  4914:                 moveq  #$00000000,d3
00:00004BF2 7800            	  4915:                 moveq  #$00000000,d4       * Cumulative data results
00:00004BF4 7A00            	  4916:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004BF6 7C1E            	  4917:                 move.l #$0000001E,d6       * Inner loop counter
00:00004BF8 7E1E            	  4918:                 move.l #$0000001E,d7       * Outer loop counter
00:00004BFA 307C0100        	  4919:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4920: 
                            	  4921: 
                            	  4922: CMP_OUTER1:
                            	  4923: 
                            	  4924: *     BYTE
00:00004BFE 2081            	  4925:                 move.l d1,(a0)
00:00004C00 B010            	  4926:                 cmp.b (a0),d0
00:00004C02 40C3            	  4927:                 move.w sr,d3
00:00004C04 02830000000F    	  4928:                 andi.l #$0F,d3            * Isolate flags
00:00004C0A DA83            	  4929:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C0C D880            	  4930:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4931: 
                            	  4932: *     WORD
00:00004C0E 2081            	  4933:                 move.l d1,(a0)
00:00004C10 B050            	  4934:                 cmp.w (a0),d0
00:00004C12 40C3            	  4935:                 move.w sr,d3
00:00004C14 02830000000F    	  4936:                 andi.l #$0F,d3            * Isolate flags
00:00004C1A DA83            	  4937:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C1C D880            	  4938:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4939: 
                            	  4940: *     LONG
00:00004C1E 2081            	  4941:                 move.l d1,(a0)
00:00004C20 B090            	  4942:                 cmp.l (a0),d0
00:00004C22 40C3            	  4943:                 move.w sr,d3
00:00004C24 02830000000F    	  4944:                 andi.l #$0F,d3            * Isolate flags
00:00004C2A DA83            	  4945:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C2C D880            	  4946:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4947: 
                            	  4948: 
00:00004C2E E289            	  4949:                 lsr.l #$1,d1
00:00004C30 51CEFFCC        	  4950:                 dbf d6,CMP_OUTER1
00:00004C34 E28A            	  4951:                 lsr.l #$1,d2
00:00004C36 223C8167E123    	  4952:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004C3C 7C1E            	  4953:                 move.l #$0000001E,d6       * Inner loop counter
00:00004C3E 51CFFFBE        	  4954:                 dbf d7,CMP_OUTER1
                            	  4955: 
00:00004C42 0C847878712F    	  4956:                 cmpi.l #$7878712F,d4      * Check the data results
00:00004C48 66FE            	  4957:                 bne.s *
00:00004C4A 0C8500005502    	  4958:                 cmpi.l #$00005502,d5      * Check the Flag results
00:00004C50 66FE            	  4959:                 bne.s *
                            	  4960: 
                            	  4961: 
                            	  4962: 
00:00004C52 4E75            	  4963:                 rts
                            	  4964: 
                            	  4965: 
                            	  4966: *-----------------------------------------------------------
                            	  4967: *-----------------------------------------------------------
                            	  4968: * OPCODE : CMPA
                            	  4969: *-----------------------------------------------------------
                            	  4970: *-----------------------------------------------------------
                            	  4971: 
                            	  4972: op_CMPA:
                            	  4973: 
                            	  4974: 
                            	  4975: *  * <EA> to Register
                            	  4976: 
00:00004C54 207CA5A5A5A5    	  4977:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00004C5A 223C8167E123    	  4978:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004C60 243CA5A5A5A5    	  4979:                 move.l #$a5a5a5a5,d2
00:00004C66 7600            	  4980:                 moveq  #$00000000,d3
00:00004C68 7800            	  4981:                 moveq  #$00000000,d4       * Cumulative data results
00:00004C6A 7A00            	  4982:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004C6C 7C1E            	  4983:                 move.l #$0000001E,d6       * Inner loop counter
00:00004C6E 7E1E            	  4984:                 move.l #$0000001E,d7       * Outer loop counter
00:00004C70 327C0100        	  4985:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4986: 
                            	  4987: 
                            	  4988: CMPA_OUTER1:
                            	  4989: 
                            	  4990: 
                            	  4991: *     WORD
00:00004C74 2281            	  4992:                 move.l d1,(a1)
00:00004C76 B0D1            	  4993:                 cmpa.w (a1),a0
00:00004C78 40C3            	  4994:                 move.w sr,d3
00:00004C7A 02830000000F    	  4995:                 andi.l #$0F,d3            * Isolate flags
00:00004C80 DA83            	  4996:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C82 D888            	  4997:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4998: 
                            	  4999: *     LONG
00:00004C84 2281            	  5000:                 move.l d1,(a1)
00:00004C86 B1D1            	  5001:                 cmpa.l (a1),a0
00:00004C88 40C3            	  5002:                 move.w sr,d3
00:00004C8A 02830000000F    	  5003:                 andi.l #$0F,d3            * Isolate flags
00:00004C90 DA83            	  5004:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C92 D888            	  5005:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5006: 
                            	  5007: 
00:00004C94 E289            	  5008:                 lsr.l #$1,d1
00:00004C96 51CEFFDC        	  5009:                 dbf d6,CMPA_OUTER1
00:00004C9A E28A            	  5010:                 lsr.l #$1,d2
00:00004C9C 223C8167E123    	  5011:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004CA2 7C1E            	  5012:                 move.l #$0000001E,d6       * Inner loop counter
00:00004CA4 51CFFFCE        	  5013:                 dbf d7,CMPA_OUTER1
                            	  5014: 
00:00004CA8 0C84A5A5A0CA    	  5015:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:00004CAE 66FE            	  5016:                 bne.s *
00:00004CB0 0C8500003A7D    	  5017:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:00004CB6 66FE            	  5018:                 bne.s *
                            	  5019: 
                            	  5020: 
00:00004CB8 4E75            	  5021:                 rts
                            	  5022: 
                            	  5023: 
                            	  5024: 
                            	  5025: *-----------------------------------------------------------
                            	  5026: *-----------------------------------------------------------
                            	  5027: * OPCODE : CMPM
                            	  5028: *-----------------------------------------------------------
                            	  5029: *-----------------------------------------------------------
                            	  5030: 
                            	  5031: op_CMPM:
                            	  5032: 
00:00004CBA 307C0100        	  5033:                 move.l #$00000100,a0       * Address for Data-X
00:00004CBE 327C0200        	  5034:                 move.l #$00000200,a1       * Address for Data-Y
00:00004CC2 7000            	  5035:                 moveq  #$00000000,d0
00:00004CC4 7200            	  5036:                 moveq  #$00000000,d1
00:00004CC6 7400            	  5037:                 moveq  #$00000000,d2
                            	  5038: 
00:00004CC8 20FC11FF5580    	  5039:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00004CCE 20FC1111FFFF    	  5040:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00004CD4 20FC33333333    	  5041:                 move.l #$33333333,(a0)+   * Populate test data
00:00004CDA 20FC44444444    	  5042:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5043: 
00:00004CE0 22FC80FF337F    	  5044:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00004CE6 22FCFFFF1111    	  5045:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00004CEC 22FC33333333    	  5046:                 move.l #$33333333,(a1)+   * Populate test data
00:00004CF2 22FC44444444    	  5047:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5048: 
00:00004CF8 307C0100        	  5049:                 move.l #$00000100,a0       * Address for Data-X
00:00004CFC 327C0200        	  5050:                 move.l #$00000200,a1       * Address for Data-Y
00:00004D00 7C0F            	  5051:                 move.l #$0000000F,d6       * Loop counter
                            	  5052: 
00:00004D02 B308            	  5053: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00004D04 40C3            	  5054:                 move.w sr,d3
00:00004D06 02830000000F    	  5055:                 andi.l #$0F,d3            * Isolate flags
00:00004D0C D083            	  5056:                 add.l d3,d0               * Copy flag results into accumulator
00:00004D0E 51CEFFF2        	  5057:                 dbf d6,CMPM_LOOP1
                            	  5058: 
                            	  5059: 
00:00004D12 307C0100        	  5060:                 move.l #$00000100,a0       * Address for Data-X
00:00004D16 327C0200        	  5061:                 move.l #$00000200,a1       * Address for Data-Y
00:00004D1A 7C07            	  5062:                 moveq  #$00000007,d6       * Loop counter
                            	  5063: 
00:00004D1C B348            	  5064: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:00004D1E 40C3            	  5065:                 move.w sr,d3
00:00004D20 02830000000F    	  5066:                 andi.l #$0F,d3            * Isolate flags
00:00004D26 D283            	  5067:                 add.l d3,d1               * Copy flag results into accumulator
00:00004D28 51CEFFF2        	  5068:                 dbf d6,CMPM_LOOP2
                            	  5069: 
                            	  5070: 
00:00004D2C 307C0100        	  5071:                 move.l #$00000100,a0       * Address for Data-X
00:00004D30 327C0200        	  5072:                 move.l #$00000200,a1       * Address for Data-Y
00:00004D34 7C03            	  5073:                 moveq  #$00000003,d6       * Loop counter
                            	  5074: 
00:00004D36 B388            	  5075: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00004D38 40C3            	  5076:                 move.w sr,d3
00:00004D3A 02830000000F    	  5077:                 andi.l #$0F,d3            * Isolate flags
00:00004D40 D483            	  5078:                 add.l d3,d2               * Copy flag results into accumulator
00:00004D42 51CEFFF2        	  5079:                 dbf d6,CMPM_LOOP3
                            	  5080: 
                            	  5081: 
00:00004D46 0C800000004C    	  5082:                 cmpi.l #$0000004C,d0      * Check the data results
00:00004D4C 66FE            	  5083:                 bne.s *
00:00004D4E 0C8100000024    	  5084:                 cmpi.l #$00000024,d1
00:00004D54 66FE            	  5085:                 bne.s *
00:00004D56 0C8200000012    	  5086:                 cmpi.l #$00000012,d2
00:00004D5C 66FE            	  5087:                 bne.s *
                            	  5088: 
00:00004D5E 4E75            	  5089:                 rts
                            	  5090: 
                            	  5091: 
                            	  5092: *-----------------------------------------------------------
                            	  5093: *-----------------------------------------------------------
                            	  5094: * OPCODE : ADD
                            	  5095: *-----------------------------------------------------------
                            	  5096: *-----------------------------------------------------------
                            	  5097: 
                            	  5098: op_ADD:
                            	  5099: 
                            	  5100: 
                            	  5101: *  * <EA> to Register
00:00004D60 203CA5A5A5A5    	  5102:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004D66 223C8167E123    	  5103:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004D6C 243CA5A5A5A5    	  5104:                 move.l #$a5a5a5a5,d2
00:00004D72 7600            	  5105:                 moveq  #$00000000,d3
00:00004D74 7800            	  5106:                 moveq  #$00000000,d4       * Cumulative data results
00:00004D76 7A00            	  5107:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004D78 7C1E            	  5108:                 move.l #$0000001E,d6       * Inner loop counter
00:00004D7A 7E1E            	  5109:                 move.l #$0000001E,d7       * Outer loop counter
00:00004D7C 307C0100        	  5110:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5111: 
                            	  5112: 
                            	  5113: ADD_OUTER1:
                            	  5114: 
                            	  5115: *     BYTE
00:00004D80 2081            	  5116:                 move.l d1,(a0)
00:00004D82 D010            	  5117:                 add.b (a0),d0
00:00004D84 40C3            	  5118:                 move.w sr,d3
00:00004D86 02830000001F    	  5119:                 andi.l #$1F,d3            * Isolate flags
00:00004D8C DA83            	  5120:                 add.l d3,d5               * Copy flag results into accumulator
00:00004D8E D880            	  5121:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5122: 
                            	  5123: *     WORD
00:00004D90 2081            	  5124:                 move.l d1,(a0)
00:00004D92 D050            	  5125:                 add.w (a0),d0
00:00004D94 40C3            	  5126:                 move.w sr,d3
00:00004D96 02830000000C    	  5127:                 andi.l #$0C,d3            * Isolate flags
00:00004D9C DA83            	  5128:                 add.l d3,d5               * Copy flag results into accumulator
00:00004D9E D880            	  5129:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5130: 
                            	  5131: *     LONG
00:00004DA0 2081            	  5132:                 move.l d1,(a0)
00:00004DA2 D090            	  5133:                 add.l (a0),d0
00:00004DA4 40C3            	  5134:                 move.w sr,d3
00:00004DA6 02830000000F    	  5135:                 andi.l #$0F,d3            * Isolate flags
00:00004DAC DA83            	  5136:                 add.l d3,d5               * Copy flag results into accumulator
00:00004DAE D880            	  5137:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5138: 
                            	  5139: 
00:00004DB0 E299            	  5140:                 ror.l #$1,d1
00:00004DB2 51CEFFCC        	  5141:                 dbf d6,ADD_OUTER1
00:00004DB6 E29A            	  5142:                 ror.l #$1,d2
00:00004DB8 223C8167E123    	  5143:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004DBE 7C1E            	  5144:                 move.l #$0000001E,d6       * Inner loop counter
00:00004DC0 51CFFFBE        	  5145:                 dbf d7,ADD_OUTER1
                            	  5146: 
00:00004DC4 0C8423ED428F    	  5147:                 cmpi.l #$23ED428F,d4      * Check the data results
00:00004DCA 66FE            	  5148:                 bne.s *
00:00004DCC 0C8500004C96    	  5149:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:00004DD2 66FE            	  5150:                 bne.s *
                            	  5151: 
                            	  5152: 
                            	  5153: *  * Register to <EA>
00:00004DD4 203C86738374    	  5154:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004DDA 223CFC55F2FE    	  5155:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004DE0 243C86738374    	  5156:                 move.l #$86738374,d2
00:00004DE6 7600            	  5157:                 moveq  #$00000000,d3
00:00004DE8 7800            	  5158:                 moveq  #$00000000,d4       * Cumulative data results
00:00004DEA 7A00            	  5159:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004DEC 7C1E            	  5160:                 move.l #$0000001E,d6       * Inner loop counter
00:00004DEE 7E1D            	  5161:                 move.l #$0000001D,d7       * Outer loop counter
00:00004DF0 307C0100        	  5162:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5163: 
                            	  5164: 
                            	  5165: ADD_OUTER2:
                            	  5166: 
                            	  5167: *     BYTE
00:00004DF4 2080            	  5168:                 move.l d0,(a0)
00:00004DF6 D310            	  5169:                 add.b d1,(a0)
00:00004DF8 40C3            	  5170:                 move.w sr,d3
00:00004DFA 02830000000C    	  5171:                 andi.l #$0C,d3            * Isolate flags
00:00004E00 DA83            	  5172:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E02 D890            	  5173:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5174: 
                            	  5175: *     WORD
00:00004E04 2080            	  5176:                 move.l d0,(a0)
00:00004E06 D350            	  5177:                 add.w d1,(a0)
00:00004E08 40C3            	  5178:                 move.w sr,d3
00:00004E0A 02830000001F    	  5179:                 andi.l #$1F,d3            * Isolate flags
00:00004E10 DA83            	  5180:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E12 D890            	  5181:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5182: 
                            	  5183: *     LONG
00:00004E14 2080            	  5184:                 move.l d0,(a0)
00:00004E16 D390            	  5185:                 add.l d1,(a0)
00:00004E18 40C3            	  5186:                 move.w sr,d3
00:00004E1A 02830000000F    	  5187:                 andi.l #$0F,d3            * Isolate flags
00:00004E20 DA83            	  5188:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E22 D890            	  5189:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5190: 
                            	  5191: 
00:00004E24 E299            	  5192:                 ror.l #$1,d1
00:00004E26 51CEFFCC        	  5193:                 dbf d6,ADD_OUTER2
00:00004E2A E29A            	  5194:                 ror.l #$1,d2
00:00004E2C 223C8167E123    	  5195:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004E32 7C1E            	  5196:                 move.l #$0000001E,d6       * Inner loop counter
00:00004E34 51CFFFBE        	  5197:                 dbf d7,ADD_OUTER2
                            	  5198: 
00:00004E38 0C846701B884    	  5199:                 cmpi.l #$6701B884,d4      * Check the data results
00:00004E3E 66FE            	  5200:                 bne.s *
00:00004E40 0C8500005467    	  5201:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00004E46 66FE            	  5202:                 bne.s *
                            	  5203: 
00:00004E48 4E75            	  5204:                 rts
                            	  5205: 
                            	  5206: *-----------------------------------------------------------
                            	  5207: *-----------------------------------------------------------
                            	  5208: * OPCODE : SUB
                            	  5209: *-----------------------------------------------------------
                            	  5210: *-----------------------------------------------------------
                            	  5211: 
                            	  5212: op_SUB:
                            	  5213: 
                            	  5214: *  * <EA> to Register
00:00004E4A 203CA5A5A5A5    	  5215:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004E50 223C8167E123    	  5216:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004E56 243CA5A5A5A5    	  5217:                 move.l #$a5a5a5a5,d2
00:00004E5C 7600            	  5218:                 moveq  #$00000000,d3
00:00004E5E 7800            	  5219:                 moveq  #$00000000,d4       * Cumulative data results
00:00004E60 7A00            	  5220:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004E62 7C1E            	  5221:                 move.l #$0000001E,d6       * Inner loop counter
00:00004E64 7E1E            	  5222:                 move.l #$0000001E,d7       * Outer loop counter
00:00004E66 307C0100        	  5223:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5224: 
                            	  5225: 
                            	  5226: SUB_OUTER1:
                            	  5227: 
                            	  5228: *     BYTE
00:00004E6A 2081            	  5229:                 move.l d1,(a0)
00:00004E6C 9010            	  5230:                 sub.b (a0),d0
00:00004E6E 40C3            	  5231:                 move.w sr,d3
00:00004E70 02830000001F    	  5232:                 andi.l #$1F,d3            * Isolate flags
00:00004E76 DA83            	  5233:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E78 D880            	  5234:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5235: 
                            	  5236: *     WORD
00:00004E7A 2081            	  5237:                 move.l d1,(a0)
00:00004E7C 9050            	  5238:                 sub.w (a0),d0
00:00004E7E 40C3            	  5239:                 move.w sr,d3
00:00004E80 02830000000C    	  5240:                 andi.l #$0C,d3            * Isolate flags
00:00004E86 DA83            	  5241:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E88 D880            	  5242:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5243: 
                            	  5244: *     LONG
00:00004E8A 2081            	  5245:                 move.l d1,(a0)
00:00004E8C 9090            	  5246:                 sub.l (a0),d0
00:00004E8E 40C3            	  5247:                 move.w sr,d3
00:00004E90 02830000000F    	  5248:                 andi.l #$0F,d3            * Isolate flags
00:00004E96 DA83            	  5249:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E98 D880            	  5250:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5251: 
                            	  5252: 
00:00004E9A E299            	  5253:                 ror.l #$1,d1
00:00004E9C 51CEFFCC        	  5254:                 dbf d6,SUB_OUTER1
00:00004EA0 E29A            	  5255:                 ror.l #$1,d2
00:00004EA2 223C8167E123    	  5256:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004EA8 7C1E            	  5257:                 move.l #$0000001E,d6       * Inner loop counter
00:00004EAA 51CFFFBE        	  5258:                 dbf d7,SUB_OUTER1
                            	  5259: 
00:00004EAE 0C841A8D14CF    	  5260:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:00004EB4 66FE            	  5261:                 bne.s *
00:00004EB6 0C8500004FC4    	  5262:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:00004EBC 66FE            	  5263:                 bne.s *
                            	  5264: 
                            	  5265: 
                            	  5266: *  * Register to <EA>
00:00004EBE 203C86738374    	  5267:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004EC4 223CFC55F2FE    	  5268:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004ECA 243C86738374    	  5269:                 move.l #$86738374,d2
00:00004ED0 7600            	  5270:                 moveq  #$00000000,d3
00:00004ED2 7800            	  5271:                 moveq  #$00000000,d4       * Cumulative data results
00:00004ED4 7A00            	  5272:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004ED6 7C1E            	  5273:                 move.l #$0000001E,d6       * Inner loop counter
00:00004ED8 7E1D            	  5274:                 move.l #$0000001D,d7       * Outer loop counter
00:00004EDA 307C0100        	  5275:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5276: 
                            	  5277: 
                            	  5278: SUB_OUTER2:
                            	  5279: 
                            	  5280: *     BYTE
00:00004EDE 2080            	  5281:                 move.l d0,(a0)
00:00004EE0 9310            	  5282:                 sub.b d1,(a0)
00:00004EE2 40C3            	  5283:                 move.w sr,d3
00:00004EE4 02830000000C    	  5284:                 andi.l #$0C,d3            * Isolate flags
00:00004EEA DA83            	  5285:                 add.l d3,d5               * Copy flag results into accumulator
00:00004EEC D890            	  5286:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5287: 
                            	  5288: *     WORD
00:00004EEE 2080            	  5289:                 move.l d0,(a0)
00:00004EF0 9350            	  5290:                 sub.w d1,(a0)
00:00004EF2 40C3            	  5291:                 move.w sr,d3
00:00004EF4 02830000001F    	  5292:                 andi.l #$1F,d3            * Isolate flags
00:00004EFA DA83            	  5293:                 add.l d3,d5               * Copy flag results into accumulator
00:00004EFC D890            	  5294:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5295: 
                            	  5296: *     LONG
00:00004EFE 2080            	  5297:                 move.l d0,(a0)
00:00004F00 9390            	  5298:                 sub.l d1,(a0)
00:00004F02 40C3            	  5299:                 move.w sr,d3
00:00004F04 02830000000F    	  5300:                 andi.l #$0F,d3            * Isolate flags
00:00004F0A DA83            	  5301:                 add.l d3,d5               * Copy flag results into accumulator
00:00004F0C D890            	  5302:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5303: 
                            	  5304: 
00:00004F0E E299            	  5305:                 ror.l #$1,d1
00:00004F10 51CEFFCC        	  5306:                 dbf d6,SUB_OUTER2
00:00004F14 E29A            	  5307:                 ror.l #$1,d2
00:00004F16 223C8167E123    	  5308:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004F1C 7C1E            	  5309:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F1E 51CFFFBE        	  5310:                 dbf d7,SUB_OUTER2
                            	  5311: 
00:00004F22 0C8436D38BEC    	  5312:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00004F28 66FE            	  5313:                 bne.s *
00:00004F2A 0C85000045A5    	  5314:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:00004F30 66FE            	  5315:                 bne.s *
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: 
00:00004F32 4E75            	  5320:                 rts
                            	  5321: 
                            	  5322: 
                            	  5323: 
                            	  5324: *-----------------------------------------------------------
                            	  5325: *-----------------------------------------------------------
                            	  5326: * OPCODE : ADDA
                            	  5327: *-----------------------------------------------------------
                            	  5328: *-----------------------------------------------------------
                            	  5329: 
                            	  5330: op_ADDA:
                            	  5331: 
                            	  5332: *  * <EA> to Register
00:00004F34 203CA5A5A5A5    	  5333:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004F3A 223C8167E123    	  5334:                 move.l #$8167E123,d1
00:00004F40 243CA5A5A5A5    	  5335:                 move.l #$a5a5a5a5,d2
00:00004F46 7600            	  5336:                 moveq  #$00000000,d3
00:00004F48 7800            	  5337:                 moveq  #$00000000,d4       * Cumulative data results
00:00004F4A 7A00            	  5338:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004F4C 7C1E            	  5339:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F4E 7E1E            	  5340:                 move.l #$0000001E,d7       * Outer loop counter
00:00004F50 307C0100        	  5341:                 move.l #$00000100,a0       * Address for memory EA operations
00:00004F54 227C8167E123    	  5342:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5343: 
                            	  5344: ADDA_OUTER1:
                            	  5345: 
                            	  5346: *     WORD
                            	  5347: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5348: *                adda.w (a0),a1
                            	  5349: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
                            	  5351: *     LONG
00:00004F5A 2081            	  5352:                 move.l d1,(a0)
00:00004F5C D3D0            	  5353:                 adda.l (a0),a1
00:00004F5E D889            	  5354:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5355: 
00:00004F60 E299            	  5356:                 ror.l #$1,d1
00:00004F62 51CEFFF6        	  5357:                 dbf d6,ADDA_OUTER1
00:00004F66 E299            	  5358:                 ror.l #$1,d1
00:00004F68 2241            	  5359:                 move.l d1,a1
00:00004F6A 223C8167E123    	  5360:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004F70 7C1E            	  5361:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F72 51CFFFE6        	  5362:                 dbf d7,ADDA_OUTER1
                            	  5363: 
00:00004F76 0C84AC04DB4C    	  5364:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:00004F7C 66FE            	  5365:                 bne.s *
                            	  5366: 
                            	  5367: 
00:00004F7E 4E75            	  5368:                 rts
                            	  5369: 
                            	  5370: 
                            	  5371: *-----------------------------------------------------------
                            	  5372: *-----------------------------------------------------------
                            	  5373: * OPCODE : SUBA
                            	  5374: *-----------------------------------------------------------
                            	  5375: *-----------------------------------------------------------
                            	  5376: 
                            	  5377: op_SUBA:
                            	  5378: 
                            	  5379: *  * <EA> to Register
00:00004F80 203CA5A5A5A5    	  5380:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004F86 223C8167E123    	  5381:                 move.l #$8167E123,d1
00:00004F8C 243CA5A5A5A5    	  5382:                 move.l #$a5a5a5a5,d2
00:00004F92 7600            	  5383:                 moveq  #$00000000,d3
00:00004F94 7800            	  5384:                 moveq  #$00000000,d4       * Cumulative data results
00:00004F96 7A00            	  5385:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004F98 7C1E            	  5386:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F9A 7E1E            	  5387:                 move.l #$0000001E,d7       * Outer loop counter
00:00004F9C 307C0100        	  5388:                 move.l #$00000100,a0       * Address for memory EA operations
00:00004FA0 227C8167E123    	  5389:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5390: 
                            	  5391: SUBA_OUTER1:
                            	  5392: 
                            	  5393: *     WORD
                            	  5394: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5395: *                suba.w (a0),a1
                            	  5396: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
                            	  5398: *     LONG
00:00004FA6 2081            	  5399:                 move.l d1,(a0)
00:00004FA8 93D0            	  5400:                 suba.l (a0),a1
00:00004FAA D889            	  5401:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5402: 
00:00004FAC E299            	  5403:                 ror.l #$1,d1
00:00004FAE 51CEFFF6        	  5404:                 dbf d6,SUBA_OUTER1
00:00004FB2 E299            	  5405:                 ror.l #$1,d1
00:00004FB4 2241            	  5406:                 move.l d1,a1
00:00004FB6 223C8167E123    	  5407:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004FBC 7C1E            	  5408:                 move.l #$0000001E,d6       * Inner loop counter
00:00004FBE 51CFFFE6        	  5409:                 dbf d7,SUBA_OUTER1
                            	  5410: 
00:00004FC2 0C84E1E36D7A    	  5411:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:00004FC8 66FE            	  5412:                 bne.s *
                            	  5413: 
                            	  5414: 
00:00004FCA 4E75            	  5415:                 rts
                            	  5416: 
                            	  5417: 
                            	  5418: 
                            	  5419: *-----------------------------------------------------------
                            	  5420: *-----------------------------------------------------------
                            	  5421: * OPCODE : ADDX
                            	  5422: *-----------------------------------------------------------
                            	  5423: *-----------------------------------------------------------
                            	  5424: 
                            	  5425: op_ADDX:
                            	  5426: 
                            	  5427: 
                            	  5428: *  * Register to Register
00:00004FCC 203CA5A5A5A5    	  5429:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004FD2 223C8167E123    	  5430:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004FD8 243CA5A5A5A5    	  5431:                 move.l #$a5a5a5a5,d2
00:00004FDE 7600            	  5432:                 moveq  #$00000000,d3
00:00004FE0 7800            	  5433:                 moveq  #$00000000,d4       * Cumulative data results
00:00004FE2 7A00            	  5434:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004FE4 7C1E            	  5435:                 move.l #$0000001E,d6       * Inner loop counter
00:00004FE6 7E1E            	  5436:                 move.l #$0000001E,d7       * Outer loop counter
00:00004FE8 307C0100        	  5437:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5438: 
                            	  5439: 
                            	  5440: ADDX_OUTER1:
                            	  5441: 
                            	  5442: *     BYTE
00:00004FEC 2002            	  5443:                 move.l d2,d0
00:00004FEE D101            	  5444:                 addx.b d1,d0
00:00004FF0 40C3            	  5445:                 move.w sr,d3
00:00004FF2 02830000001F    	  5446:                 andi.l #$1F,d3            * Isolate flags
00:00004FF8 DA83            	  5447:                 add.l d3,d5               * Copy flag results into accumulator
00:00004FFA D880            	  5448:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5449: 
                            	  5450: *     WORD
00:00004FFC 2002            	  5451:                 move.l d2,d0
00:00004FFE D141            	  5452:                 addx.w d1,d0
00:00005000 40C3            	  5453:                 move.w sr,d3
00:00005002 02830000001F    	  5454:                 andi.l #$1F,d3            * Isolate flags
00:00005008 DA83            	  5455:                 add.l d3,d5               * Copy flag results into accumulator
00:0000500A D880            	  5456:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5457: 
                            	  5458: *     LONG
00:0000500C 2002            	  5459:                 move.l d2,d0
00:0000500E D181            	  5460:                 addx.l d1,d0
00:00005010 40C3            	  5461:                 move.w sr,d3
00:00005012 02830000001F    	  5462:                 andi.l #$1F,d3            * Isolate flags
00:00005018 DA83            	  5463:                 add.l d3,d5               * Copy flag results into accumulator
00:0000501A D880            	  5464:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5465: 
00:0000501C E299            	  5466:                 ror.l #$1,d1
00:0000501E 51CEFFCC        	  5467:                 dbf d6,ADDX_OUTER1
00:00005022 E29A            	  5468:                 ror.l #$1,d2
00:00005024 223C8167E123    	  5469:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000502A 7C1E            	  5470:                 move.l #$0000001E,d6       * Inner loop counter
00:0000502C 51CFFFBE        	  5471:                 dbf d7,ADDX_OUTER1
                            	  5472: 
00:00005030 0C844E96A4D9    	  5473:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:00005036 66FE            	  5474:                 bne.s *
00:00005038 0C85000085CD    	  5475:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:0000503E 66FE            	  5476:                 bne.s *
                            	  5477: 
                            	  5478: 
                            	  5479: 
                            	  5480: *     -(An),-(An)
                            	  5481: 
00:00005040 7000            	  5482:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00005042 7200            	  5483:                 moveq  #$00000000,d1
00:00005044 7400            	  5484:                 moveq  #$00000000,d2
00:00005046 307C0100        	  5485:                 move.l #$00000100,a0       * Address for Data-X
00:0000504A 327C0200        	  5486:                 move.l #$00000200,a1       * Address for Data-Y
00:0000504E 20FC11FF5580    	  5487:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00005054 20FC1111FFFF    	  5488:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:0000505A 20FC33333333    	  5489:                 move.l #$33333333,(a0)+   * Populate test data
00:00005060 20FC44444444    	  5490:                 move.l #$44444444,(a0)+   * Populate test data
00:00005066 22FC80FF337F    	  5491:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000506C 22FCFFFF1111    	  5492:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00005072 22FC33333333    	  5493:                 move.l #$33333333,(a1)+   * Populate test data
00:00005078 22FC44444444    	  5494:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5495: 
                            	  5496: 
00:0000507E 7C0F            	  5497:                 move.l #$0000000F,d6       * Loop counter
                            	  5498: 
00:00005080 D308            	  5499: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:00005082 40C3            	  5500:                 move.w sr,d3
00:00005084 02830000000F    	  5501:                 andi.l #$0F,d3            * Isolate flags
00:0000508A D083            	  5502:                 add.l d3,d0               * Copy flag results into accumulator
00:0000508C D211            	  5503:                 add.b (a1),d1
00:0000508E 51CEFFF0        	  5504:                 dbf d6,ADDX_LOOP3
                            	  5505: 
                            	  5506: 
00:00005092 307C0110        	  5507:                 move.l #$00000110,a0       * Address for Data-X
00:00005096 327C0210        	  5508:                 move.l #$00000210,a1       * Address for Data-Y
00:0000509A 7C07            	  5509:                 moveq  #$00000007,d6       * Loop counter
                            	  5510: 
00:0000509C D348            	  5511: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:0000509E 40C3            	  5512:                 move.w sr,d3
00:000050A0 02830000000F    	  5513:                 andi.l #$0F,d3            * Isolate flags
00:000050A6 D083            	  5514:                 add.l d3,d0               * Copy flag results into accumulator
00:000050A8 D251            	  5515:                 add.w (a1),d1
00:000050AA 51CEFFF0        	  5516:                 dbf d6,ADDX_LOOP4
                            	  5517: 
                            	  5518: 
00:000050AE 307C0110        	  5519:                 move.l #$00000110,a0       * Address for Data-X
00:000050B2 327C0210        	  5520:                 move.l #$00000210,a1       * Address for Data-Y
00:000050B6 7C03            	  5521:                 moveq  #$00000003,d6       * Loop counter
                            	  5522: 
00:000050B8 D388            	  5523: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:000050BA 40C3            	  5524:                 move.w sr,d3
00:000050BC 02830000000F    	  5525:                 andi.l #$0F,d3            * Isolate flags
00:000050C2 D083            	  5526:                 add.l d3,d0               * Copy flag results into accumulator
00:000050C4 D291            	  5527:                 add.l (a1),d1
00:000050C6 51CEFFF0        	  5528:                 dbf d6,ADDX_LOOP5
                            	  5529: 
                            	  5530: 
00:000050CA 0C8000000095    	  5531:                 cmpi.l #$00000095,d0      * Check the flag results
00:000050D0 66FE            	  5532:                 bne.s *
00:000050D2 0C81C812A682    	  5533:                 cmpi.l #$C812A682,d1      * Check the data results
00:000050D8 66FE            	  5534:                 bne.s *
                            	  5535: 
00:000050DA 4E75            	  5536:                 rts
                            	  5537: 
                            	  5538: 
                            	  5539: 
                            	  5540: 
                            	  5541: *-----------------------------------------------------------
                            	  5542: *-----------------------------------------------------------
                            	  5543: * OPCODE : SUBX
                            	  5544: *-----------------------------------------------------------
                            	  5545: *-----------------------------------------------------------
                            	  5546: 
                            	  5547: op_SUBX:
                            	  5548: 
                            	  5549: 
                            	  5550: *  * Register to Register
00:000050DC 203CA5A5A5A5    	  5551:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:000050E2 223C8167E123    	  5552:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:000050E8 243CA5A5A5A5    	  5553:                 move.l #$a5a5a5a5,d2
00:000050EE 7600            	  5554:                 moveq  #$00000000,d3
00:000050F0 7800            	  5555:                 moveq  #$00000000,d4       * Cumulative data results
00:000050F2 7A00            	  5556:                 moveq  #$00000000,d5       * Cumulative flag results
00:000050F4 7C1E            	  5557:                 move.l #$0000001E,d6       * Inner loop counter
00:000050F6 7E1E            	  5558:                 move.l #$0000001E,d7       * Outer loop counter
00:000050F8 307C0100        	  5559:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5560: 
                            	  5561: 
                            	  5562: SUBX_OUTER1:
                            	  5563: 
                            	  5564: *     BYTE
00:000050FC 2002            	  5565:                 move.l d2,d0
00:000050FE 9101            	  5566:                 subx.b d1,d0
00:00005100 40C3            	  5567:                 move.w sr,d3
00:00005102 02830000001F    	  5568:                 andi.l #$1F,d3            * Isolate flags
00:00005108 DA83            	  5569:                 add.l d3,d5               * Copy flag results into accumulator
00:0000510A D880            	  5570:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5571: 
                            	  5572: *     WORD
00:0000510C 2002            	  5573:                 move.l d2,d0
00:0000510E 9141            	  5574:                 subx.w d1,d0
00:00005110 40C3            	  5575:                 move.w sr,d3
00:00005112 02830000001F    	  5576:                 andi.l #$1F,d3            * Isolate flags
00:00005118 DA83            	  5577:                 add.l d3,d5               * Copy flag results into accumulator
00:0000511A D880            	  5578:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5579: 
                            	  5580: *     LONG
00:0000511C 2002            	  5581:                 move.l d2,d0
00:0000511E 9181            	  5582:                 subx.l d1,d0
00:00005120 40C3            	  5583:                 move.w sr,d3
00:00005122 02830000001F    	  5584:                 andi.l #$1F,d3            * Isolate flags
00:00005128 DA83            	  5585:                 add.l d3,d5               * Copy flag results into accumulator
00:0000512A D880            	  5586:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5587: 
00:0000512C E299            	  5588:                 ror.l #$1,d1
00:0000512E 51CEFFCC        	  5589:                 dbf d6,SUBX_OUTER1
00:00005132 E29A            	  5590:                 ror.l #$1,d2
00:00005134 223C8167E123    	  5591:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000513A 7C1E            	  5592:                 move.l #$0000001E,d6       * Inner loop counter
00:0000513C 51CFFFBE        	  5593:                 dbf d7,SUBX_OUTER1
                            	  5594: 
00:00005140 0C84FCAA913E    	  5595:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:00005146 66FE            	  5596:                 bne.s *
00:00005148 0C8500007E89    	  5597:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:0000514E 66FE            	  5598:                 bne.s *
                            	  5599: 
                            	  5600: 
                            	  5601: 
                            	  5602: *     -(An),-(An)
                            	  5603: 
00:00005150 7000            	  5604:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:00005152 7200            	  5605:                 moveq  #$00000000,d1
00:00005154 7400            	  5606:                 moveq  #$00000000,d2
00:00005156 307C0100        	  5607:                 move.l #$00000100,a0       * Address for Data-X
00:0000515A 327C0200        	  5608:                 move.l #$00000200,a1       * Address for Data-Y
00:0000515E 20FC11FF5580    	  5609:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00005164 20FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:0000516A 20FC80FF337F    	  5611:                 move.l #$80FF337F,(a0)+   * Populate test data
00:00005170 20FC44444444    	  5612:                 move.l #$44444444,(a0)+   * Populate test data
00:00005176 22FC80FF337F    	  5613:                 move.l #$80FF337F,(a1)+   * Populate test data
00:0000517C 22FC1111FFFF    	  5614:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:00005182 22FC33333333    	  5615:                 move.l #$33333333,(a1)+   * Populate test data
00:00005188 22FC5580EECC    	  5616:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5617: 
                            	  5618: 
00:0000518E 7C0F            	  5619:                 move.l #$0000000F,d6       * Loop counter
                            	  5620: 
00:00005190 9308            	  5621: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:00005192 40C3            	  5622:                 move.w sr,d3
00:00005194 02830000000F    	  5623:                 andi.l #$0F,d3            * Isolate flags
00:0000519A D083            	  5624:                 add.l d3,d0               * Copy flag results into accumulator
00:0000519C D211            	  5625:                 add.b (a1),d1
00:0000519E 51CEFFF0        	  5626:                 dbf d6,SUBX_LOOP3
                            	  5627: 
                            	  5628: 
00:000051A2 307C0110        	  5629:                 move.l #$00000110,a0       * Address for Data-X
00:000051A6 327C0210        	  5630:                 move.l #$00000210,a1       * Address for Data-Y
00:000051AA 7C07            	  5631:                 moveq  #$00000007,d6       * Loop counter
                            	  5632: 
00:000051AC 9348            	  5633: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:000051AE 40C3            	  5634:                 move.w sr,d3
00:000051B0 02830000000F    	  5635:                 andi.l #$0F,d3            * Isolate flags
00:000051B6 D083            	  5636:                 add.l d3,d0               * Copy flag results into accumulator
00:000051B8 D251            	  5637:                 add.w (a1),d1
00:000051BA 51CEFFF0        	  5638:                 dbf d6,SUBX_LOOP4
                            	  5639: 
                            	  5640: 
00:000051BE 307C0110        	  5641:                 move.l #$00000110,a0       * Address for Data-X
00:000051C2 327C0210        	  5642:                 move.l #$00000210,a1       * Address for Data-Y
00:000051C6 7C03            	  5643:                 moveq  #$00000003,d6       * Loop counter
                            	  5644: 
00:000051C8 9388            	  5645: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:000051CA 40C3            	  5646:                 move.w sr,d3
00:000051CC 02830000000F    	  5647:                 andi.l #$0F,d3            * Isolate flags
00:000051D2 D083            	  5648:                 add.l d3,d0               * Copy flag results into accumulator
00:000051D4 D291            	  5649:                 add.l (a1),d1
00:000051D6 51CEFFF0        	  5650:                 dbf d6,SUBX_LOOP5
                            	  5651: 
                            	  5652: 
00:000051DA 0C80000000B1    	  5653:                 cmpi.l #$000000B1,d0      * Check the flag results
00:000051E0 66FE            	  5654:                 bne.s *
00:000051E2 0C8162C6F417    	  5655:                 cmpi.l #$62C6F417,d1      * Check the data results
00:000051E8 66FE            	  5656:                 bne.s *
                            	  5657: 
00:000051EA 4E75            	  5658:                 rts
                            	  5659: 
                            	  5660: 
                            	  5661: *-----------------------------------------------------------
                            	  5662: *-----------------------------------------------------------
                            	  5663: * OPCODE : MULU
                            	  5664: *-----------------------------------------------------------
                            	  5665: *-----------------------------------------------------------
                            	  5666: 
                            	  5667: op_MULU:
                            	  5668: 
00:000051EC 203CFE805501    	  5669:                 move.l #$FE805501,d0        * Initial
00:000051F2 223C5697EDB6    	  5670:                 move.l #$5697EDB6,d1        * Initial Y
00:000051F8 243CFE805501    	  5671:                 move.l #$FE805501,d2
00:000051FE 7600            	  5672:                 moveq  #$00000000,d3
00:00005200 7800            	  5673:                 moveq  #$00000000,d4        * Cumulative data results
00:00005202 7A00            	  5674:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005204 7C0E            	  5675:                 move.l #$0000000E,d6       * Inner loop counter
00:00005206 7E0E            	  5676:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5677: 
                            	  5678: 
00:00005208 C0C1            	  5679: MULU_OUTER1:    mulu d1,d0
00:0000520A 40C3            	  5680:                 move.w sr,d3
00:0000520C 02830000000C    	  5681:                 andi.l #$0C,d3            * Isolate flags
00:00005212 DA83            	  5682:                 add.l d3,d5               * Copy flag results into accumulator
00:00005214 D880            	  5683:                 add.l d0,d4               * Copy data results into data accumulator
00:00005216 E299            	  5684:                 ror.l #$1,d1
                            	  5685: 
00:00005218 51CEFFEE        	  5686:                 dbf d6,MULU_OUTER1
00:0000521C E29A            	  5687:                 ror.l #$1,d2
00:0000521E 2002            	  5688:                 move.l d2,d0
00:00005220 7C0E            	  5689:                 move.l #$0000000E,d6       * Inner loop counter
00:00005222 51CFFFE4        	  5690:                 dbf d7,MULU_OUTER1
                            	  5691: 
00:00005226 0C8476FB988C    	  5692:                 cmpi.l #$76FB988C,d4      * Check the data results
00:0000522C 66FE            	  5693:                 bne.s *
                            	  5694: 
00:0000522E 0C8500000170    	  5695:                 cmpi.l #$00000170,d5      * Check the Flag results
00:00005234 66FE            	  5696:                 bne.s *
                            	  5697: 
                            	  5698: 
00:00005236 4E75            	  5699:                 rts
                            	  5700: 
                            	  5701: 
                            	  5702: *-----------------------------------------------------------
                            	  5703: *-----------------------------------------------------------
                            	  5704: * OPCODE : MULS
                            	  5705: *-----------------------------------------------------------
                            	  5706: *-----------------------------------------------------------
                            	  5707: 
                            	  5708: op_MULS:
                            	  5709: 
00:00005238 203CFE805501    	  5710:                 move.l #$FE805501,d0        * Initial
00:0000523E 223C5697EDB6    	  5711:                 move.l #$5697EDB6,d1        * Initial Y
00:00005244 243CFE805501    	  5712:                 move.l #$FE805501,d2
00:0000524A 7600            	  5713:                 moveq  #$00000000,d3
00:0000524C 7800            	  5714:                 moveq  #$00000000,d4        * Cumulative data results
00:0000524E 7A00            	  5715:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005250 7C0E            	  5716:                 move.l #$0000000E,d6       * Inner loop counter
00:00005252 7E0E            	  5717:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5718: 
                            	  5719: 
00:00005254 C1C1            	  5720: MULS_OUTER1:    muls d1,d0
00:00005256 40C3            	  5721:                 move.w sr,d3
00:00005258 02830000000C    	  5722:                 andi.l #$0C,d3            * Isolate flags
00:0000525E DA83            	  5723:                 add.l d3,d5               * Copy flag results into accumulator
00:00005260 D880            	  5724:                 add.l d0,d4               * Copy data results into data accumulator
00:00005262 E299            	  5725:                 ror.l #$1,d1
                            	  5726: 
00:00005264 51CEFFEE        	  5727:                 dbf d6,MULS_OUTER1
00:00005268 E29A            	  5728:                 ror.l #$1,d2
00:0000526A 2002            	  5729:                 move.l d2,d0
00:0000526C 7C0E            	  5730:                 move.l #$0000000E,d6       * Inner loop counter
00:0000526E 51CFFFE4        	  5731:                 dbf d7,MULS_OUTER1
                            	  5732: 
00:00005272 0C84D4E2988C    	  5733:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:00005278 66FE            	  5734:                 bne.s *
                            	  5735: 
00:0000527A 0C85000003E0    	  5736:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:00005280 66FE            	  5737:                 bne.s *
                            	  5738: 
                            	  5739: 
00:00005282 4E75            	  5740:                 rts
                            	  5741: 
                            	  5742: 
                            	  5743: 
                            	  5744: *-----------------------------------------------------------
                            	  5745: *-----------------------------------------------------------
                            	  5746: * OPCODE : EXG
                            	  5747: *-----------------------------------------------------------
                            	  5748: *-----------------------------------------------------------
                            	  5749: 
                            	  5750: op_EXG:
00:00005284 223CD1D1D1D1    	  5751:                 move.l #$d1d1d1d1,d1
00:0000528A 243CD2D2D2D2    	  5752:                 move.l #$d2d2d2d2,d2
00:00005290 263CD3D3D3D3    	  5753:                 move.l #$d3d3d3d3,d3
00:00005296 227CA1A1A1A1    	  5754:                 move.l #$a1a1a1a1,a1
00:0000529C 247CA2A2A2A2    	  5755:                 move.l #$a2a2a2a2,a2
00:000052A2 267CA3A3A3A3    	  5756:                 move.l #$a3a3a3a3,a3
                            	  5757: 
00:000052A8 C342            	  5758:                 exg d1,d2
00:000052AA C34A            	  5759:                 exg a1,a2
00:000052AC C78B            	  5760:                 exg d3,a3
                            	  5761: 
00:000052AE 0C81D2D2D2D2    	  5762:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:000052B4 66FE            	  5763:                 bne.s *
00:000052B6 0C82D1D1D1D1    	  5764:                 cmpi.l #$d1d1d1d1,d2
00:000052BC 66FE            	  5765:                 bne.s *
00:000052BE 0C83A3A3A3A3    	  5766:                 cmpi.l #$a3a3a3a3,d3
00:000052C4 66FE            	  5767:                 bne.s *
                            	  5768: 
00:000052C6 2209            	  5769:                 move.l a1,d1
00:000052C8 240A            	  5770:                 move.l a2,d2
00:000052CA 260B            	  5771:                 move.l a3,d3
                            	  5772: 
00:000052CC 0C81A2A2A2A2    	  5773:                 cmpi.l #$a2a2a2a2,d1
00:000052D2 66FE            	  5774:                 bne.s *
00:000052D4 0C82A1A1A1A1    	  5775:                 cmpi.l #$a1a1a1a1,d2
00:000052DA 66FE            	  5776:                 bne.s *
00:000052DC 0C83D3D3D3D3    	  5777:                 cmpi.l #$d3d3d3d3,d3
00:000052E2 66FE            	  5778:                 bne.s *
                            	  5779: 
00:000052E4 4E75            	  5780:                 rts
                            	  5781: 
                            	  5782: 
                            	  5783: *-----------------------------------------------------------
                            	  5784: *-----------------------------------------------------------
                            	  5785: * OPCODE : ROx
                            	  5786: *-----------------------------------------------------------
                            	  5787: *-----------------------------------------------------------
                            	  5788: 
                            	  5789: *     Subroutine to check and accumulate the flags
00:000052E6 40C3            	  5790: ROx_FLAGS:      move.w sr,d3
00:000052E8 02830000000F    	  5791:                 andi.l #$0F,d3            * Isolate flags
00:000052EE DA83            	  5792:                 add.l d3,d5               * Copy flag results into accumulator
00:000052F0 4E75            	  5793:                 rts
                            	  5794: 
                            	  5795: op_ROx:
                            	  5796: 
                            	  5797: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5798: 
                            	  5799: *        BYTE LEFT
00:000052F2 203C80018FF1    	  5800:                 move.l #$80018FF1,d0
00:000052F8 7A00            	  5801:                 moveq  #$00000000,d5
00:000052FA 7C11            	  5802:                 moveq  #$00000011,d6
                            	  5803: ROx_LOOP1:
00:000052FC ED38            	  5804:                 rol.b d6,d0
00:000052FE 61E6            	  5805:                 bsr ROx_FLAGS
00:00005300 51CEFFFA        	  5806:                 dbf d6,ROx_LOOP1
00:00005304 0C8080018FE3    	  5807:                 cmpi.l #$80018FE3,d0
00:0000530A 66FE            	  5808:                 bne.s *
00:0000530C 0C850000006B    	  5809:                 cmpi.l #$0000006B,d5
00:00005312 66FE            	  5810:                 bne.s *
                            	  5811: 
                            	  5812: *        BYTE RIGHT
00:00005314 203C80018FF1    	  5813:                 move.l #$80018FF1,d0
00:0000531A 7C12            	  5814:                 moveq  #$00000012,d6
                            	  5815: ROx_LOOP2:
00:0000531C EC38            	  5816:                 ror.b d6,d0
00:0000531E 61C6            	  5817:                 bsr ROx_FLAGS
00:00005320 51CEFFFA        	  5818:                 dbf d6,ROx_LOOP2
00:00005324 0C8080018F3E    	  5819:                 cmpi.l #$80018F3E,d0
00:0000532A 66FE            	  5820:                 bne.s *
00:0000532C 0C85000000C5    	  5821:                 cmpi.l #$000000C5,d5
00:00005332 66FE            	  5822:                 bne.s *
                            	  5823: 
                            	  5824: 
                            	  5825: *        WORD LEFT
00:00005334 203C80018FF1    	  5826:                 move.l #$80018FF1,d0
00:0000533A 7C13            	  5827:                 moveq  #$00000013,d6
                            	  5828: ROx_LOOP3:
00:0000533C ED78            	  5829:                 rol.w d6,d0
00:0000533E 61A6            	  5830:                 bsr ROx_FLAGS
00:00005340 51CEFFFA        	  5831:                 dbf d6,ROx_LOOP3
00:00005344 0C80800163FC    	  5832:                 cmpi.l #$800163FC,d0
00:0000534A 66FE            	  5833:                 bne.s *
00:0000534C 0C8500000131    	  5834:                 cmpi.l #$00000131,d5
00:00005352 66FE            	  5835:                 bne.s *
                            	  5836: 
                            	  5837: *        WORD RIGHT
00:00005354 203C80018FF1    	  5838:                 move.l #$80018FF1,d0
00:0000535A 7C1E            	  5839:                 move.l #$0000001E,d6
                            	  5840: ROx_LOOP4:
00:0000535C EC78            	  5841:                 ror.w d6,d0
00:0000535E 6186            	  5842:                 bsr ROx_FLAGS
00:00005360 51CEFFFA        	  5843:                 dbf d6,ROx_LOOP4
00:00005364 0C808001C7F8    	  5844:                 cmpi.l #$8001C7F8,d0
00:0000536A 66FE            	  5845:                 bne.s *
00:0000536C 0C85000001DB    	  5846:                 cmpi.l #$000001DB,d5
00:00005372 66FE            	  5847:                 bne.s *
                            	  5848: 
                            	  5849: 
                            	  5850: *        LONG LEFT
00:00005374 203C80018FF1    	  5851:                 move.l #$80018FF1,d0
00:0000537A 7C15            	  5852:                 moveq  #$00000015,d6
                            	  5853: ROx_LOOP5:
00:0000537C EDB8            	  5854:                 rol.l d6,d0
00:0000537E 6100FF66        	  5855:                 bsr ROx_FLAGS
00:00005382 51CEFFF8        	  5856:                 dbf d6,ROx_LOOP5
00:00005386 0C8000C7F8C0    	  5857:                 cmpi.l #$00C7F8C0,d0
00:0000538C 66FE            	  5858:                 bne.s *
00:0000538E 0C850000021A    	  5859:                 cmpi.l #$0000021A,d5
00:00005394 66FE            	  5860:                 bne.s *
                            	  5861: 
                            	  5862: *        LONG RIGHT
00:00005396 203C80018FF1    	  5863:                 move.l #$80018FF1,d0
00:0000539C 7C16            	  5864:                 moveq  #$00000016,d6
                            	  5865: ROx_LOOP6:
00:0000539E ECB8            	  5866:                 ror.l d6,d0
00:000053A0 6100FF44        	  5867:                 bsr ROx_FLAGS
00:000053A4 51CEFFF8        	  5868:                 dbf d6,ROx_LOOP6
00:000053A8 0C80000C7F8C    	  5869:                 cmpi.l #$000C7F8C,d0
00:000053AE 66FE            	  5870:                 bne.s *
00:000053B0 0C8500000250    	  5871:                 cmpi.l #$00000250,d5
00:000053B6 66FE            	  5872:                 bne.s *
                            	  5873: 
                            	  5874: 
                            	  5875: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5876: 
00:000053B8 203C80018FF1    	  5877:                 move.l #$80018FF1,d0
00:000053BE 7A00            	  5878:                 moveq  #$00000000,d5
                            	  5879: 
                            	  5880: *        BYTE LEFT
00:000053C0 E318            	  5881:                 rol.b #1,d0
00:000053C2 6100FF22        	  5882:                 bsr ROx_FLAGS
00:000053C6 EB18            	  5883:                 rol.b #5,d0
00:000053C8 6100FF1C        	  5884:                 bsr ROx_FLAGS
00:000053CC EF18            	  5885:                 rol.b #7,d0
00:000053CE 6100FF16        	  5886:                 bsr ROx_FLAGS
00:000053D2 E118            	  5887:                 rol.b #8,d0
00:000053D4 6100FF10        	  5888:                 bsr ROx_FLAGS
00:000053D8 0C8080018F3E    	  5889:                 cmpi.l #$80018F3E,d0
00:000053DE 66FE            	  5890:                 bne.s *
00:000053E0 0C8500000009    	  5891:                 cmpi.l #$00000009,d5
00:000053E6 66FE            	  5892:                 bne.s *
                            	  5893: 
                            	  5894: *        BYTE RIGHT
00:000053E8 E218            	  5895:                 ror.b #1,d0
00:000053EA 6100FEFA        	  5896:                 bsr ROx_FLAGS
00:000053EE EA18            	  5897:                 ror.b #5,d0
00:000053F0 6100FEF4        	  5898:                 bsr ROx_FLAGS
00:000053F4 EE18            	  5899:                 ror.b #7,d0
00:000053F6 6100FEEE        	  5900:                 bsr ROx_FLAGS
00:000053FA E018            	  5901:                 ror.b #8,d0
00:000053FC 6100FEE8        	  5902:                 bsr ROx_FLAGS
00:00005400 0C8080018FF1    	  5903:                 cmpi.l #$80018FF1,d0
00:00005406 66FE            	  5904:                 bne.s *
00:00005408 0C8500000024    	  5905:                 cmpi.l #$00000024,d5
00:0000540E 66FE            	  5906:                 bne.s *
                            	  5907: 
                            	  5908: *        WORD LEFT
00:00005410 E358            	  5909:                 rol.w #1,d0
00:00005412 6100FED2        	  5910:                 bsr ROx_FLAGS
00:00005416 EB58            	  5911:                 rol.w #5,d0
00:00005418 6100FECC        	  5912:                 bsr ROx_FLAGS
00:0000541C EF58            	  5913:                 rol.w #7,d0
00:0000541E 6100FEC6        	  5914:                 bsr ROx_FLAGS
00:00005422 E158            	  5915:                 rol.w #8,d0
00:00005424 6100FEC0        	  5916:                 bsr ROx_FLAGS
00:00005428 0C808001FE31    	  5917:                 cmpi.l #$8001FE31,d0
00:0000542E 66FE            	  5918:                 bne.s *
00:00005430 0C8500000037    	  5919:                 cmpi.l #$00000037,d5
00:00005436 66FE            	  5920:                 bne.s *
                            	  5921: 
                            	  5922: *        WORD RIGHT
00:00005438 E258            	  5923:                 ror.w #1,d0
00:0000543A 6100FEAA        	  5924:                 bsr ROx_FLAGS
00:0000543E EA58            	  5925:                 ror.w #5,d0
00:00005440 6100FEA4        	  5926:                 bsr ROx_FLAGS
00:00005444 EE58            	  5927:                 ror.w #7,d0
00:00005446 6100FE9E        	  5928:                 bsr ROx_FLAGS
00:0000544A E058            	  5929:                 ror.w #8,d0
00:0000544C 6100FE98        	  5930:                 bsr ROx_FLAGS
00:00005450 0C8080018FF1    	  5931:                 cmpi.l #$80018FF1,d0
00:00005456 66FE            	  5932:                 bne.s *
00:00005458 0C850000005B    	  5933:                 cmpi.l #$0000005B,d5
00:0000545E 66FE            	  5934:                 bne.s *
                            	  5935: 
                            	  5936: *        LONG LEFT
00:00005460 E398            	  5937:                 rol.l #1,d0
00:00005462 6100FE82        	  5938:                 bsr ROx_FLAGS
00:00005466 EB98            	  5939:                 rol.l #5,d0
00:00005468 6100FE7C        	  5940:                 bsr ROx_FLAGS
00:0000546C EF98            	  5941:                 rol.l #7,d0
00:0000546E 6100FE76        	  5942:                 bsr ROx_FLAGS
00:00005472 E198            	  5943:                 rol.l #8,d0
00:00005474 6100FE70        	  5944:                 bsr ROx_FLAGS
00:00005478 0C80FE300031    	  5945:                 cmpi.l #$FE300031,d0
00:0000547E 66FE            	  5946:                 bne.s *
00:00005480 0C8500000065    	  5947:                 cmpi.l #$00000065,d5
00:00005486 66FE            	  5948:                 bne.s *
                            	  5949: 
                            	  5950: *        LONG RIGHT
00:00005488 E298            	  5951:                 ror.l #1,d0
00:0000548A 6100FE5A        	  5952:                 bsr ROx_FLAGS
00:0000548E EA98            	  5953:                 ror.l #5,d0
00:00005490 6100FE54        	  5954:                 bsr ROx_FLAGS
00:00005494 EE98            	  5955:                 ror.l #7,d0
00:00005496 6100FE4E        	  5956:                 bsr ROx_FLAGS
00:0000549A E098            	  5957:                 ror.l #8,d0
00:0000549C 6100FE48        	  5958:                 bsr ROx_FLAGS
00:000054A0 0C8080018FF1    	  5959:                 cmpi.l #$80018FF1,d0
00:000054A6 66FE            	  5960:                 bne.s *
00:000054A8 0C8500000080    	  5961:                 cmpi.l #$00000080,d5
00:000054AE 66FE            	  5962:                 bne.s *
                            	  5963: 
                            	  5964: 
                            	  5965: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5966: 
00:000054B0 7A00            	  5967:                 moveq  #$00000000,d5
00:000054B2 307C0100        	  5968:                 move.l #$00000100,a0
00:000054B6 30BC8FF1        	  5969:                 move.w #$8FF1,(a0)
                            	  5970: 
                            	  5971: *        WORD LEFT
00:000054BA E7D0            	  5972:                 rol (a0)
00:000054BC 6100FE28        	  5973:                 bsr ROx_FLAGS
00:000054C0 E7D0            	  5974:                 rol (a0)
00:000054C2 6100FE22        	  5975:                 bsr ROx_FLAGS
00:000054C6 E7D0            	  5976:                 rol (a0)
00:000054C8 6100FE1C        	  5977:                 bsr ROx_FLAGS
00:000054CC E7D0            	  5978:                 rol (a0)
00:000054CE 6100FE16        	  5979:                 bsr ROx_FLAGS
00:000054D2 3010            	  5980:                 move.w (a0),d0
00:000054D4 0C808001FF18    	  5981:                 cmpi.l #$8001FF18,d0
00:000054DA 66FE            	  5982:                 bne.s *
00:000054DC 0C8500000009    	  5983:                 cmpi.l #$00000009,d5
00:000054E2 66FE            	  5984:                 bne.s *
                            	  5985: 
                            	  5986: *        WORD RIGHT
00:000054E4 E6D0            	  5987:                 ror (a0)
00:000054E6 6100FDFE        	  5988:                 bsr ROx_FLAGS
00:000054EA E6D0            	  5989:                 ror (a0)
00:000054EC 6100FDF8        	  5990:                 bsr ROx_FLAGS
00:000054F0 E6D0            	  5991:                 ror (a0)
00:000054F2 6100FDF2        	  5992:                 bsr ROx_FLAGS
00:000054F6 E6D0            	  5993:                 ror (a0)
00:000054F8 6100FDEC        	  5994:                 bsr ROx_FLAGS
00:000054FC E6D0            	  5995:                 ror (a0)
00:000054FE 6100FDE6        	  5996:                 bsr ROx_FLAGS
00:00005502 E6D0            	  5997:                 ror (a0)
00:00005504 6100FDE0        	  5998:                 bsr ROx_FLAGS
00:00005508 3010            	  5999:                 move.w (a0),d0
00:0000550A 0C80800163FC    	  6000:                 cmpi.l #$800163FC,d0
00:00005510 66FE            	  6001:                 bne.s *
00:00005512 0C850000001B    	  6002:                 cmpi.l #$0000001B,d5
00:00005518 66FE            	  6003:                 bne.s *
                            	  6004: 
00:0000551A 4E75            	  6005:                 rts
                            	  6006: 
                            	  6007: 
                            	  6008: 
                            	  6009: *-----------------------------------------------------------
                            	  6010: *-----------------------------------------------------------
                            	  6011: * OPCODE : ROXx
                            	  6012: *-----------------------------------------------------------
                            	  6013: *-----------------------------------------------------------
                            	  6014: 
                            	  6015: *     Subroutine to check and accumulate the flags
00:0000551C 40C3            	  6016: ROXx_FLAGS:     move.w sr,d3
00:0000551E 02830000000F    	  6017:                 andi.l #$0F,d3            * Isolate flags
00:00005524 DA83            	  6018:                 add.l d3,d5               * Copy flag results into accumulator
00:00005526 4E75            	  6019:                 rts
                            	  6020: 
                            	  6021: op_ROXx:
                            	  6022: 
                            	  6023: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6024: 
                            	  6025: *        BYTE LEFT
00:00005528 203C80018FF1    	  6026:                 move.l #$80018FF1,d0
00:0000552E 7A00            	  6027:                 moveq  #$00000000,d5
00:00005530 7C11            	  6028:                 moveq  #$00000011,d6
                            	  6029: ROXx_LOOP1:
00:00005532 ED30            	  6030:                 roxl.b d6,d0
00:00005534 61E6            	  6031:                 bsr ROXx_FLAGS
00:00005536 51CEFFFA        	  6032:                 dbf d6,ROXx_LOOP1
00:0000553A 0C8080018FD0    	  6033:                 cmpi.l #$80018FD0,d0
00:00005540 66FE            	  6034:                 bne.s *
00:00005542 0C8500000042    	  6035:                 cmpi.l #$00000042,d5
00:00005548 66FE            	  6036:                 bne.s *
                            	  6037: 
                            	  6038: *        BYTE RIGHT
00:0000554A 203C80018FF1    	  6039:                 move.l #$80018FF1,d0
00:00005550 7C12            	  6040:                 moveq  #$00000012,d6
                            	  6041: ROXx_LOOP2:
00:00005552 EC30            	  6042:                 roxr.b d6,d0
00:00005554 61C6            	  6043:                 bsr ROXx_FLAGS
00:00005556 51CEFFFA        	  6044:                 dbf d6,ROXx_LOOP2
00:0000555A 0C8080018F51    	  6045:                 cmpi.l #$80018F51,d0
00:00005560 66FE            	  6046:                 bne.s *
00:00005562 0C850000009C    	  6047:                 cmpi.l #$0000009C,d5
00:00005568 66FE            	  6048:                 bne.s *
                            	  6049: 
                            	  6050: 
                            	  6051: *        WORD LEFT
00:0000556A 203C80018FF1    	  6052:                 move.l #$80018FF1,d0
00:00005570 7C13            	  6053:                 moveq  #$00000013,d6
                            	  6054: ROXx_LOOP3:
00:00005572 ED70            	  6055:                 roxl.w d6,d0
00:00005574 61A6            	  6056:                 bsr ROXx_FLAGS
00:00005576 51CEFFFA        	  6057:                 dbf d6,ROXx_LOOP3
00:0000557A 0C8080013980    	  6058:                 cmpi.l #$80013980,d0
00:00005580 66FE            	  6059:                 bne.s *
00:00005582 0C85000000C9    	  6060:                 cmpi.l #$000000C9,d5
00:00005588 66FE            	  6061:                 bne.s *
                            	  6062: 
                            	  6063: *        WORD RIGHT
00:0000558A 203C80018FF1    	  6064:                 move.l #$80018FF1,d0
00:00005590 7C1E            	  6065:                 move.l #$0000001E,d6
                            	  6066: ROXx_LOOP4:
00:00005592 EC70            	  6067:                 roxr.w d6,d0
00:00005594 6186            	  6068:                 bsr ROXx_FLAGS
00:00005596 51CEFFFA        	  6069:                 dbf d6,ROXx_LOOP4
00:0000559A 0C8080010A1D    	  6070:                 cmpi.l #$80010A1D,d0
00:000055A0 66FE            	  6071:                 bne.s *
00:000055A2 0C850000014D    	  6072:                 cmpi.l #$0000014D,d5
00:000055A8 66FE            	  6073:                 bne.s *
                            	  6074: 
                            	  6075: 
                            	  6076: *        LONG LEFT
00:000055AA 203C80018FF1    	  6077:                 move.l #$80018FF1,d0
00:000055B0 7C15            	  6078:                 moveq  #$00000015,d6
                            	  6079: ROXx_LOOP5:
00:000055B2 EDB0            	  6080:                 roxl.l d6,d0
00:000055B4 6100FF66        	  6081:                 bsr ROXx_FLAGS
00:000055B8 51CEFFF8        	  6082:                 dbf d6,ROXx_LOOP5
00:000055BC 0C80800185D0    	  6083:                 cmpi.l #$800185D0,d0
00:000055C2 66FE            	  6084:                 bne.s *
00:000055C4 0C85000001A1    	  6085:                 cmpi.l #$000001A1,d5
00:000055CA 66FE            	  6086:                 bne.s *
                            	  6087: 
                            	  6088: *        LONG RIGHT
00:000055CC 203C80018FF1    	  6089:                 move.l #$80018FF1,d0
00:000055D2 7C16            	  6090:                 moveq  #$00000016,d6
                            	  6091: ROXx_LOOP6:
00:000055D4 ECB0            	  6092:                 roxr.l d6,d0
00:000055D6 6100FF44        	  6093:                 bsr ROXx_FLAGS
00:000055DA 51CEFFF8        	  6094:                 dbf d6,ROXx_LOOP6
00:000055DE 0C80082D8200    	  6095:                 cmpi.l #$082D8200,d0
00:000055E4 66FE            	  6096:                 bne.s *
00:000055E6 0C85000001DE    	  6097:                 cmpi.l #$000001DE,d5
00:000055EC 66FE            	  6098:                 bne.s *
                            	  6099: 
                            	  6100: 
                            	  6101: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6102: 
00:000055EE 203C80018FF1    	  6103:                 move.l #$80018FF1,d0
00:000055F4 7A00            	  6104:                 moveq  #$00000000,d5
                            	  6105: 
                            	  6106: *        BYTE LEFT
00:000055F6 E310            	  6107:                 roxl.b #1,d0
00:000055F8 6100FF22        	  6108:                 bsr ROXx_FLAGS
00:000055FC EB10            	  6109:                 roxl.b #5,d0
00:000055FE 6100FF1C        	  6110:                 bsr ROXx_FLAGS
00:00005602 EF10            	  6111:                 roxl.b #7,d0
00:00005604 6100FF16        	  6112:                 bsr ROXx_FLAGS
00:00005608 E110            	  6113:                 roxl.b #8,d0
00:0000560A 6100FF10        	  6114:                 bsr ROXx_FLAGS
00:0000560E 0C8080018F09    	  6115:                 cmpi.l #$80018F09,d0
00:00005614 66FE            	  6116:                 bne.s *
00:00005616 0C850000000B    	  6117:                 cmpi.l #$0000000B,d5
00:0000561C 66FE            	  6118:                 bne.s *
                            	  6119: 
                            	  6120: *        BYTE RIGHT
00:0000561E E210            	  6121:                 roxr.b #1,d0
00:00005620 6100FEFA        	  6122:                 bsr ROXx_FLAGS
00:00005624 EA10            	  6123:                 roxr.b #5,d0
00:00005626 6100FEF4        	  6124:                 bsr ROXx_FLAGS
00:0000562A EE10            	  6125:                 roxr.b #7,d0
00:0000562C 6100FEEE        	  6126:                 bsr ROXx_FLAGS
00:00005630 E010            	  6127:                 roxr.b #8,d0
00:00005632 6100FEE8        	  6128:                 bsr ROXx_FLAGS
00:00005636 0C8080018F00    	  6129:                 cmpi.l #$80018F00,d0
00:0000563C 66FE            	  6130:                 bne.s *
00:0000563E 0C8500000015    	  6131:                 cmpi.l #$00000015,d5
00:00005644 66FE            	  6132:                 bne.s *
                            	  6133: 
                            	  6134: *        WORD LEFT
00:00005646 E350            	  6135:                 roxl.w #1,d0
00:00005648 6100FED2        	  6136:                 bsr ROXx_FLAGS
00:0000564C EB50            	  6137:                 roxl.w #5,d0
00:0000564E 6100FECC        	  6138:                 bsr ROXx_FLAGS
00:00005652 EF50            	  6139:                 roxl.w #7,d0
00:00005654 6100FEC6        	  6140:                 bsr ROXx_FLAGS
00:00005658 E150            	  6141:                 roxl.w #8,d0
00:0000565A 6100FEC0        	  6142:                 bsr ROXx_FLAGS
00:0000565E 0C808001B000    	  6143:                 cmpi.l #$8001B000,d0
00:00005664 66FE            	  6144:                 bne.s *
00:00005666 0C8500000027    	  6145:                 cmpi.l #$00000027,d5
00:0000566C 66FE            	  6146:                 bne.s *
                            	  6147: 
                            	  6148: *        WORD RIGHT
00:0000566E E250            	  6149:                 roxr.w #1,d0
00:00005670 6100FEAA        	  6150:                 bsr ROXx_FLAGS
00:00005674 EA50            	  6151:                 roxr.w #5,d0
00:00005676 6100FEA4        	  6152:                 bsr ROXx_FLAGS
00:0000567A EE50            	  6153:                 roxr.w #7,d0
00:0000567C 6100FE9E        	  6154:                 bsr ROXx_FLAGS
00:00005680 E050            	  6155:                 roxr.w #8,d0
00:00005682 6100FE98        	  6156:                 bsr ROXx_FLAGS
00:00005686 0C8080010A00    	  6157:                 cmpi.l #$80010A00,d0
00:0000568C 66FE            	  6158:                 bne.s *
00:0000568E 0C8500000028    	  6159:                 cmpi.l #$00000028,d5
00:00005694 66FE            	  6160:                 bne.s *
                            	  6161: 
                            	  6162: *        LONG LEFT
00:00005696 E390            	  6163:                 roxl.l #1,d0
00:00005698 6100FE82        	  6164:                 bsr ROXx_FLAGS
00:0000569C EB90            	  6165:                 roxl.l #5,d0
00:0000569E 6100FE7C        	  6166:                 bsr ROXx_FLAGS
00:000056A2 EF90            	  6167:                 roxl.l #7,d0
00:000056A4 6100FE76        	  6168:                 bsr ROXx_FLAGS
00:000056A8 E190            	  6169:                 roxl.l #8,d0
00:000056AA 6100FE70        	  6170:                 bsr ROXx_FLAGS
00:000056AE 0C8040000010    	  6171:                 cmpi.l #$40000010,d0
00:000056B4 66FE            	  6172:                 bne.s *
00:000056B6 0C850000002A    	  6173:                 cmpi.l #$0000002A,d5
00:000056BC 66FE            	  6174:                 bne.s *
                            	  6175: 
                            	  6176: *        LONG RIGHT
00:000056BE E290            	  6177:                 roxr.l #1,d0
00:000056C0 6100FE5A        	  6178:                 bsr ROXx_FLAGS
00:000056C4 EA90            	  6179:                 roxr.l #5,d0
00:000056C6 6100FE54        	  6180:                 bsr ROXx_FLAGS
00:000056CA EE90            	  6181:                 roxr.l #7,d0
00:000056CC 6100FE4E        	  6182:                 bsr ROXx_FLAGS
00:000056D0 E090            	  6183:                 roxr.l #8,d0
00:000056D2 6100FE48        	  6184:                 bsr ROXx_FLAGS
00:000056D6 0C8000010200    	  6185:                 cmpi.l #$00010200,d0
00:000056DC 66FE            	  6186:                 bne.s *
00:000056DE 0C8500000032    	  6187:                 cmpi.l #$00000032,d5
00:000056E4 66FE            	  6188:                 bne.s *
                            	  6189: 
                            	  6190: 
                            	  6191: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6192: 
00:000056E6 7A00            	  6193:                 moveq  #$00000000,d5
00:000056E8 307C0100        	  6194:                 move.l #$00000100,a0
00:000056EC 30BC8FF1        	  6195:                 move.w #$8FF1,(a0)
                            	  6196: 
                            	  6197: *        WORD LEFT
00:000056F0 E5D0            	  6198:                 roxl (a0)
00:000056F2 6100FE28        	  6199:                 bsr ROXx_FLAGS
00:000056F6 E5D0            	  6200:                 roxl (a0)
00:000056F8 6100FE22        	  6201:                 bsr ROXx_FLAGS
00:000056FC E5D0            	  6202:                 roxl (a0)
00:000056FE 6100FE1C        	  6203:                 bsr ROXx_FLAGS
00:00005702 E5D0            	  6204:                 roxl (a0)
00:00005704 6100FE16        	  6205:                 bsr ROXx_FLAGS
00:00005708 3010            	  6206:                 move.w (a0),d0
00:0000570A 0C800001FF10    	  6207:                 cmpi.l #$0001FF10,d0
00:00005710 66FE            	  6208:                 bne.s *
00:00005712 0C8500000009    	  6209:                 cmpi.l #$00000009,d5
00:00005718 66FE            	  6210:                 bne.s *
                            	  6211: 
                            	  6212: *        WORD RIGHT
00:0000571A E4D0            	  6213:                 roxr (a0)
00:0000571C 6100FDFE        	  6214:                 bsr ROXx_FLAGS
00:00005720 E4D0            	  6215:                 roxr (a0)
00:00005722 6100FDF8        	  6216:                 bsr ROXx_FLAGS
00:00005726 E4D0            	  6217:                 roxr (a0)
00:00005728 6100FDF2        	  6218:                 bsr ROXx_FLAGS
00:0000572C E4D0            	  6219:                 roxr (a0)
00:0000572E 6100FDEC        	  6220:                 bsr ROXx_FLAGS
00:00005732 E4D0            	  6221:                 roxr (a0)
00:00005734 6100FDE6        	  6222:                 bsr ROXx_FLAGS
00:00005738 E4D0            	  6223:                 roxr (a0)
00:0000573A 6100FDE0        	  6224:                 bsr ROXx_FLAGS
00:0000573E 3010            	  6225:                 move.w (a0),d0
00:00005740 0C80000103FC    	  6226:                 cmpi.l #$000103FC,d0
00:00005746 66FE            	  6227:                 bne.s *
00:00005748 0C850000000A    	  6228:                 cmpi.l #$0000000A,d5
00:0000574E 66FE            	  6229:                 bne.s *
                            	  6230: 
00:00005750 4E75            	  6231:                 rts
                            	  6232: 
                            	  6233: 
                            	  6234: 
                            	  6235: 
                            	  6236: *-----------------------------------------------------------
                            	  6237: *-----------------------------------------------------------
                            	  6238: * OPCODE : SHIFTS
                            	  6239: *-----------------------------------------------------------
                            	  6240: *-----------------------------------------------------------
                            	  6241: 
                            	  6242: *     Subroutine to check and accumulate the flags
00:00005752 40C3            	  6243: SHIFTS_FLAGS:   move.w sr,d3
00:00005754 02830000000F    	  6244:                 andi.l #$0F,d3            * Isolate flags
00:0000575A DA83            	  6245:                 add.l d3,d5               * Copy flag results into accumulator
00:0000575C 4E75            	  6246:                 rts
                            	  6247: 
                            	  6248: op_SHIFTS:
                            	  6249: 
                            	  6250: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6251: 
                            	  6252: *        BYTE LEFT
00:0000575E 203C80018F81    	  6253:                 move.l #$80018F81,d0
00:00005764 7A00            	  6254:                 moveq  #$00000000,d5
00:00005766 7C02            	  6255:                 moveq  #$00000002,d6
                            	  6256: SHIFTS_LOOP1:
00:00005768 ED20            	  6257:                 asl.b d6,d0
00:0000576A 61E6            	  6258:                 bsr SHIFTS_FLAGS
00:0000576C 51CEFFFA        	  6259:                 dbf d6,SHIFTS_LOOP1
00:00005770 0C8080018F08    	  6260:                 cmpi.l #$80018F08,d0
00:00005776 66FE            	  6261:                 bne.s *
00:00005778 0C8500000002    	  6262:                 cmpi.l #$00000002,d5
00:0000577E 66FE            	  6263:                 bne.s *
                            	  6264: 
                            	  6265: *        BYTE RIGHT
00:00005780 203C80018F81    	  6266:                 move.l #$80018F81,d0
00:00005786 7C02            	  6267:                 moveq  #$00000002,d6
                            	  6268: SHIFTS_LOOP2:
00:00005788 EC20            	  6269:                 asr.b d6,d0
00:0000578A 61C6            	  6270:                 bsr SHIFTS_FLAGS
00:0000578C 51CEFFFA        	  6271:                 dbf d6,SHIFTS_LOOP2
00:00005790 0C8080018FF0    	  6272:                 cmpi.l #$80018FF0,d0
00:00005796 66FE            	  6273:                 bne.s *
00:00005798 0C850000001A    	  6274:                 cmpi.l #$0000001A,d5
00:0000579E 66FE            	  6275:                 bne.s *
                            	  6276: 
                            	  6277: 
                            	  6278: *        WORD LEFT
00:000057A0 203C80018FF1    	  6279:                 move.l #$80018FF1,d0
00:000057A6 7C02            	  6280:                 moveq  #$00000002,d6
                            	  6281: SHIFTS_LOOP3:
00:000057A8 ED60            	  6282:                 asl.w d6,d0
00:000057AA 61A6            	  6283:                 bsr SHIFTS_FLAGS
00:000057AC 51CEFFFA        	  6284:                 dbf d6,SHIFTS_LOOP3
00:000057B0 0C8080017F88    	  6285:                 cmpi.l #$80017F88,d0
00:000057B6 66FE            	  6286:                 bne.s *
00:000057B8 0C850000001C    	  6287:                 cmpi.l #$0000001C,d5
00:000057BE 66FE            	  6288:                 bne.s *
                            	  6289: 
                            	  6290: *        WORD RIGHT
00:000057C0 203C80018FF1    	  6291:                 move.l #$80018FF1,d0
00:000057C6 7C02            	  6292:                 moveq  #$00000002,d6
                            	  6293: SHIFTS_LOOP4:
00:000057C8 EC60            	  6294:                 asr.w d6,d0
00:000057CA 6186            	  6295:                 bsr SHIFTS_FLAGS
00:000057CC 51CEFFFA        	  6296:                 dbf d6,SHIFTS_LOOP4
00:000057D0 0C808001F1FE    	  6297:                 cmpi.l #$8001F1FE,d0
00:000057D6 66FE            	  6298:                 bne.s *
00:000057D8 0C8500000034    	  6299:                 cmpi.l #$00000034,d5
00:000057DE 66FE            	  6300:                 bne.s *
                            	  6301: 
                            	  6302: 
                            	  6303: *        LONG LEFT
00:000057E0 203C80018FF1    	  6304:                 move.l #$80018FF1,d0
00:000057E6 7C02            	  6305:                 moveq  #$00000002,d6
                            	  6306: SHIFTS_LOOP5:
00:000057E8 EDA0            	  6307:                 asl.l d6,d0
00:000057EA 6100FF66        	  6308:                 bsr SHIFTS_FLAGS
00:000057EE 51CEFFF8        	  6309:                 dbf d6,SHIFTS_LOOP5
00:000057F2 0C80000C7F88    	  6310:                 cmpi.l #$000C7F88,d0
00:000057F8 66FE            	  6311:                 bne.s *
00:000057FA 0C8500000036    	  6312:                 cmpi.l #$00000036,d5
00:00005800 66FE            	  6313:                 bne.s *
                            	  6314: 
                            	  6315: *        LONG RIGHT
00:00005802 203C80018FF1    	  6316:                 move.l #$80018FF1,d0
00:00005808 7C02            	  6317:                 moveq  #$00000002,d6
                            	  6318: SHIFTS_LOOP6:
00:0000580A ECA0            	  6319:                 asr.l d6,d0
00:0000580C 6100FF44        	  6320:                 bsr SHIFTS_FLAGS
00:00005810 51CEFFF8        	  6321:                 dbf d6,SHIFTS_LOOP6
00:00005814 0C80F00031FE    	  6322:                 cmpi.l #$F00031FE,d0
00:0000581A 66FE            	  6323:                 bne.s *
00:0000581C 0C850000004E    	  6324:                 cmpi.l #$0000004E,d5
00:00005822 66FE            	  6325:                 bne.s *
                            	  6326: 
                            	  6327: 
                            	  6328: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6329: 
00:00005824 203C80018FF1    	  6330:                 move.l #$80018FF1,d0
00:0000582A 7A00            	  6331:                 moveq  #$00000000,d5
                            	  6332: 
                            	  6333: *        BYTE LEFT
00:0000582C D000            	  6334:                 asl.b #1,d0
00:0000582E 6100FF22        	  6335:                 bsr SHIFTS_FLAGS
00:00005832 E500            	  6336:                 asl.b #2,d0
00:00005834 6100FF1C        	  6337:                 bsr SHIFTS_FLAGS
00:00005838 D000            	  6338:                 asl.b #1,d0
00:0000583A 6100FF16        	  6339:                 bsr SHIFTS_FLAGS
00:0000583E E700            	  6340:                 asl.b #3,d0
00:00005840 6100FF10        	  6341:                 bsr SHIFTS_FLAGS
00:00005844 0C8080018F80    	  6342:                 cmpi.l #$80018F80,d0
00:0000584A 66FE            	  6343:                 bne.s *
00:0000584C 0C850000001F    	  6344:                 cmpi.l #$0000001F,d5
00:00005852 66FE            	  6345:                 bne.s *
                            	  6346: 
                            	  6347: *        BYTE RIGHT
00:00005854 E200            	  6348:                 asr.b #1,d0
00:00005856 6100FEFA        	  6349:                 bsr SHIFTS_FLAGS
00:0000585A E400            	  6350:                 asr.b #2,d0
00:0000585C 6100FEF4        	  6351:                 bsr SHIFTS_FLAGS
00:00005860 E600            	  6352:                 asr.b #3,d0
00:00005862 6100FEEE        	  6353:                 bsr SHIFTS_FLAGS
00:00005866 E200            	  6354:                 asr.b #1,d0
00:00005868 6100FEE8        	  6355:                 bsr SHIFTS_FLAGS
00:0000586C 0C8080018FFF    	  6356:                 cmpi.l #$80018FFF,d0
00:00005872 66FE            	  6357:                 bne.s *
00:00005874 0C850000003F    	  6358:                 cmpi.l #$0000003F,d5
00:0000587A 66FE            	  6359:                 bne.s *
                            	  6360: 
                            	  6361: *        WORD LEFT
00:0000587C D040            	  6362:                 asl.w #1,d0
00:0000587E 6100FED2        	  6363:                 bsr SHIFTS_FLAGS
00:00005882 E540            	  6364:                 asl.w #2,d0
00:00005884 6100FECC        	  6365:                 bsr SHIFTS_FLAGS
00:00005888 E740            	  6366:                 asl.w #3,d0
00:0000588A 6100FEC6        	  6367:                 bsr SHIFTS_FLAGS
00:0000588E EB40            	  6368:                 asl.w #5,d0
00:00005890 6100FEC0        	  6369:                 bsr SHIFTS_FLAGS
00:00005894 0C808001F800    	  6370:                 cmpi.l #$8001F800,d0
00:0000589A 66FE            	  6371:                 bne.s *
00:0000589C 0C8500000056    	  6372:                 cmpi.l #$00000056,d5
00:000058A2 66FE            	  6373:                 bne.s *
                            	  6374: 
                            	  6375: *        WORD RIGHT
00:000058A4 EA40            	  6376:                 asr.w #5,d0
00:000058A6 6100FEAA        	  6377:                 bsr SHIFTS_FLAGS
00:000058AA E240            	  6378:                 asr.w #1,d0
00:000058AC 6100FEA4        	  6379:                 bsr SHIFTS_FLAGS
00:000058B0 E440            	  6380:                 asr.w #2,d0
00:000058B2 6100FE9E        	  6381:                 bsr SHIFTS_FLAGS
00:000058B6 E840            	  6382:                 asr.w #4,d0
00:000058B8 6100FE98        	  6383:                 bsr SHIFTS_FLAGS
00:000058BC 0C808001FFFF    	  6384:                 cmpi.l #$8001FFFF,d0
00:000058C2 66FE            	  6385:                 bne.s *
00:000058C4 0C8500000077    	  6386:                 cmpi.l #$00000077,d5
00:000058CA 66FE            	  6387:                 bne.s *
                            	  6388: 
                            	  6389: *        LONG LEFT
00:000058CC 203C80018FF1    	  6390:                 move.l #$80018FF1,d0
00:000058D2 D080            	  6391:                 asl.l #1,d0
00:000058D4 6100FE7C        	  6392:                 bsr SHIFTS_FLAGS
00:000058D8 E580            	  6393:                 asl.l #2,d0
00:000058DA 6100FE76        	  6394:                 bsr SHIFTS_FLAGS
00:000058DE EF80            	  6395:                 asl.l #7,d0
00:000058E0 6100FE70        	  6396:                 bsr SHIFTS_FLAGS
00:000058E4 E980            	  6397:                 asl.l #4,d0
00:000058E6 6100FE6A        	  6398:                 bsr SHIFTS_FLAGS
00:000058EA 0C8063FC4000    	  6399:                 cmpi.l #$63FC4000,d0
00:000058F0 66FE            	  6400:                 bne.s *
00:000058F2 0C850000007A    	  6401:                 cmpi.l #$0000007A,d5
00:000058F8 66FE            	  6402:                 bne.s *
                            	  6403: 
                            	  6404: *        LONG RIGHT
00:000058FA 203C80018FF1    	  6405:                 move.l #$80018FF1,d0
00:00005900 E280            	  6406:                 asr.l #1,d0
00:00005902 6100FE4E        	  6407:                 bsr SHIFTS_FLAGS
00:00005906 EA80            	  6408:                 asr.l #5,d0
00:00005908 6100FE48        	  6409:                 bsr SHIFTS_FLAGS
00:0000590C EE80            	  6410:                 asr.l #7,d0
00:0000590E 6100FE42        	  6411:                 bsr SHIFTS_FLAGS
00:00005912 E080            	  6412:                 asr.l #8,d0
00:00005914 6100FE3C        	  6413:                 bsr SHIFTS_FLAGS
00:00005918 0C80FFFFFC00    	  6414:                 cmpi.l #$FFFFFC00,d0
00:0000591E 66FE            	  6415:                 bne.s *
00:00005920 0C850000009C    	  6416:                 cmpi.l #$0000009C,d5
00:00005926 66FE            	  6417:                 bne.s *
                            	  6418: 
                            	  6419: 
                            	  6420: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6421: 
00:00005928 7A00            	  6422:                 moveq  #$00000000,d5
00:0000592A 307C0100        	  6423:                 move.l #$00000100,a0
00:0000592E 30BC8FF1        	  6424:                 move.w #$8FF1,(a0)
                            	  6425: 
                            	  6426: *        WORD LEFT
00:00005932 E1D0            	  6427:                 asl  (a0)
00:00005934 6100FE1C        	  6428:                 bsr SHIFTS_FLAGS
00:00005938 E1D0            	  6429:                 asl  (a0)
00:0000593A 6100FE16        	  6430:                 bsr SHIFTS_FLAGS
00:0000593E E1D0            	  6431:                 asl  (a0)
00:00005940 6100FE10        	  6432:                 bsr SHIFTS_FLAGS
00:00005944 E1D0            	  6433:                 asl  (a0)
00:00005946 6100FE0A        	  6434:                 bsr SHIFTS_FLAGS
00:0000594A 3010            	  6435:                 move.w (a0),d0
00:0000594C 0C80FFFFFF10    	  6436:                 cmpi.l #$FFFFFF10,d0
00:00005952 66FE            	  6437:                 bne.s *
00:00005954 0C850000000D    	  6438:                 cmpi.l #$0000000D,d5
00:0000595A 66FE            	  6439:                 bne.s *
                            	  6440: 
                            	  6441: *        WORD RIGHT
00:0000595C E0D0            	  6442:                 asr (a0)
00:0000595E 6100FDF2        	  6443:                 bsr SHIFTS_FLAGS
00:00005962 E0D0            	  6444:                 asr (a0)
00:00005964 6100FDEC        	  6445:                 bsr SHIFTS_FLAGS
00:00005968 E0D0            	  6446:                 asr (a0)
00:0000596A 6100FDE6        	  6447:                 bsr SHIFTS_FLAGS
00:0000596E E0D0            	  6448:                 asr (a0)
00:00005970 6100FDE0        	  6449:                 bsr SHIFTS_FLAGS
00:00005974 E0D0            	  6450:                 asr (a0)
00:00005976 6100FDDA        	  6451:                 bsr SHIFTS_FLAGS
00:0000597A E0D0            	  6452:                 asr (a0)
00:0000597C 6100FDD4        	  6453:                 bsr SHIFTS_FLAGS
00:00005980 3010            	  6454:                 move.w (a0),d0
00:00005982 0C80FFFFFFFC    	  6455:                 cmpi.l #$FFFFFFFC,d0
00:00005988 66FE            	  6456:                 bne.s *
00:0000598A 0C850000003E    	  6457:                 cmpi.l #$0000003E,d5
00:00005990 66FE            	  6458:                 bne.s *
                            	  6459: 
00:00005992 4E75            	  6460:                 rts
                            	  6461: 
                            	  6462: 
                            	  6463: 
                            	  6464: *-----------------------------------------------------------
                            	  6465: *-----------------------------------------------------------
                            	  6466: * OPCODE : SHIFTS2
                            	  6467: *-----------------------------------------------------------
                            	  6468: *-----------------------------------------------------------
                            	  6469: 
                            	  6470: *     Subroutine to check and accumulate the flags
00:00005994 40C3            	  6471: SHIFTS2_FLAGS:  move.w sr,d3
00:00005996 02830000000F    	  6472:                 andi.l #$0F,d3            * Isolate flags
00:0000599C DA83            	  6473:                 add.l d3,d5               * Copy flag results into accumulator
00:0000599E 4E75            	  6474:                 rts
                            	  6475: 
                            	  6476: op_SHIFTS2:
                            	  6477: 
                            	  6478: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6479: 
                            	  6480: *        BYTE LEFT
00:000059A0 203C80018F81    	  6481:                 move.l #$80018F81,d0
00:000059A6 7A00            	  6482:                 moveq  #$00000000,d5
00:000059A8 7C02            	  6483:                 moveq  #$00000002,d6
                            	  6484: SHIFTS2_LOOP1:
00:000059AA ED28            	  6485:                 lsl.b d6,d0
00:000059AC 61E6            	  6486:                 bsr SHIFTS2_FLAGS
00:000059AE 51CEFFFA        	  6487:                 dbf d6,SHIFTS2_LOOP1
00:000059B2 0C8080018F08    	  6488:                 cmpi.l #$80018F08,d0
00:000059B8 66FE            	  6489:                 bne.s *
00:000059BA 4A85            	  6490:                 cmpi.l #$00000000,d5
00:000059BC 66FE            	  6491:                 bne.s *
                            	  6492: 
                            	  6493: *        BYTE RIGHT
00:000059BE 203C80018F81    	  6494:                 move.l #$80018F81,d0
00:000059C4 7C02            	  6495:                 moveq  #$00000002,d6
                            	  6496: SHIFTS2_LOOP2:
00:000059C6 EC28            	  6497:                 lsr.b d6,d0
00:000059C8 61CA            	  6498:                 bsr SHIFTS2_FLAGS
00:000059CA 51CEFFFA        	  6499:                 dbf d6,SHIFTS2_LOOP2
00:000059CE 0C8080018F10    	  6500:                 cmpi.l #$80018F10,d0
00:000059D4 66FE            	  6501:                 bne.s *
00:000059D6 4A85            	  6502:                 cmpi.l #$00000000,d5
00:000059D8 66FE            	  6503:                 bne.s *
                            	  6504: 
                            	  6505: 
                            	  6506: *        WORD LEFT
00:000059DA 203C80018FF1    	  6507:                 move.l #$80018FF1,d0
00:000059E0 7C02            	  6508:                 moveq  #$00000002,d6
                            	  6509: SHIFTS2_LOOP3:
00:000059E2 ED68            	  6510:                 lsl.w d6,d0
00:000059E4 61AE            	  6511:                 bsr SHIFTS2_FLAGS
00:000059E6 51CEFFFA        	  6512:                 dbf d6,SHIFTS2_LOOP3
00:000059EA 0C8080017F88    	  6513:                 cmpi.l #$80017F88,d0
00:000059F0 66FE            	  6514:                 bne.s *
00:000059F2 4A85            	  6515:                 cmpi.l #$00000000,d5
00:000059F4 66FE            	  6516:                 bne.s *
                            	  6517: 
                            	  6518: *        WORD RIGHT
00:000059F6 203C80018FF1    	  6519:                 move.l #$80018FF1,d0
00:000059FC 7C02            	  6520:                 moveq  #$00000002,d6
                            	  6521: SHIFTS2_LOOP4:
00:000059FE EC68            	  6522:                 lsr.w d6,d0
00:00005A00 6192            	  6523:                 bsr SHIFTS2_FLAGS
00:00005A02 51CEFFFA        	  6524:                 dbf d6,SHIFTS2_LOOP4
00:00005A06 0C80800111FE    	  6525:                 cmpi.l #$800111FE,d0
00:00005A0C 66FE            	  6526:                 bne.s *
00:00005A0E 4A85            	  6527:                 cmpi.l #$00000000,d5
00:00005A10 66FE            	  6528:                 bne.s *
                            	  6529: 
                            	  6530: 
                            	  6531: *        LONG LEFT
00:00005A12 203C80018FF1    	  6532:                 move.l #$80018FF1,d0
00:00005A18 7C02            	  6533:                 moveq  #$00000002,d6
                            	  6534: SHIFTS2_LOOP5:
00:00005A1A EDA8            	  6535:                 lsl.l d6,d0
00:00005A1C 6100FF76        	  6536:                 bsr SHIFTS2_FLAGS
00:00005A20 51CEFFF8        	  6537:                 dbf d6,SHIFTS2_LOOP5
00:00005A24 0C80000C7F88    	  6538:                 cmpi.l #$000C7F88,d0
00:00005A2A 66FE            	  6539:                 bne.s *
00:00005A2C 4A85            	  6540:                 cmpi.l #$00000000,d5
00:00005A2E 66FE            	  6541:                 bne.s *
                            	  6542: 
                            	  6543: *        LONG RIGHT
00:00005A30 203C80018FF1    	  6544:                 move.l #$80018FF1,d0
00:00005A36 7C02            	  6545:                 moveq  #$00000002,d6
                            	  6546: SHIFTS2_LOOP6:
00:00005A38 ECA8            	  6547:                 lsr.l d6,d0
00:00005A3A 6100FF58        	  6548:                 bsr SHIFTS2_FLAGS
00:00005A3E 51CEFFF8        	  6549:                 dbf d6,SHIFTS2_LOOP6
00:00005A42 0C80100031FE    	  6550:                 cmpi.l #$100031FE,d0
00:00005A48 66FE            	  6551:                 bne.s *
00:00005A4A 4A85            	  6552:                 cmpi.l #$00000000,d5
00:00005A4C 66FE            	  6553:                 bne.s *
                            	  6554: 
                            	  6555: 
                            	  6556: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6557: 
00:00005A4E 203C80018FF1    	  6558:                 move.l #$80018FF1,d0
00:00005A54 7A00            	  6559:                 moveq  #$00000000,d5
                            	  6560: 
                            	  6561: *        BYTE LEFT
00:00005A56 E308            	  6562:                 lsl.b #1,d0
00:00005A58 6100FF3A        	  6563:                 bsr SHIFTS2_FLAGS
00:00005A5C E508            	  6564:                 lsl.b #2,d0
00:00005A5E 6100FF34        	  6565:                 bsr SHIFTS2_FLAGS
00:00005A62 E308            	  6566:                 lsl.b #1,d0
00:00005A64 6100FF2E        	  6567:                 bsr SHIFTS2_FLAGS
00:00005A68 E708            	  6568:                 lsl.b #3,d0
00:00005A6A 6100FF28        	  6569:                 bsr SHIFTS2_FLAGS
00:00005A6E 0C8080018F80    	  6570:                 cmpi.l #$80018F80,d0
00:00005A74 66FE            	  6571:                 bne.s *
00:00005A76 0C850000001B    	  6572:                 cmpi.l #$0000001B,d5
00:00005A7C 66FE            	  6573:                 bne.s *
                            	  6574: 
                            	  6575: *        BYTE RIGHT
00:00005A7E E208            	  6576:                 lsr.b #1,d0
00:00005A80 6100FF12        	  6577:                 bsr SHIFTS2_FLAGS
00:00005A84 E408            	  6578:                 lsr.b #2,d0
00:00005A86 6100FF0C        	  6579:                 bsr SHIFTS2_FLAGS
00:00005A8A E608            	  6580:                 lsr.b #3,d0
00:00005A8C 6100FF06        	  6581:                 bsr SHIFTS2_FLAGS
00:00005A90 E208            	  6582:                 lsr.b #1,d0
00:00005A92 6100FF00        	  6583:                 bsr SHIFTS2_FLAGS
00:00005A96 0C8080018F01    	  6584:                 cmpi.l #$80018F01,d0
00:00005A9C 66FE            	  6585:                 bne.s *
00:00005A9E 0C850000001B    	  6586:                 cmpi.l #$0000001B,d5
00:00005AA4 66FE            	  6587:                 bne.s *
                            	  6588: 
                            	  6589: *        WORD LEFT
00:00005AA6 E348            	  6590:                 lsl.w #1,d0
00:00005AA8 6100FEEA        	  6591:                 bsr SHIFTS2_FLAGS
00:00005AAC E548            	  6592:                 lsl.w #2,d0
00:00005AAE 6100FEE4        	  6593:                 bsr SHIFTS2_FLAGS
00:00005AB2 E748            	  6594:                 lsl.w #3,d0
00:00005AB4 6100FEDE        	  6595:                 bsr SHIFTS2_FLAGS
00:00005AB8 EB48            	  6596:                 lsl.w #5,d0
00:00005ABA 6100FED8        	  6597:                 bsr SHIFTS2_FLAGS
00:00005ABE 0C8080010800    	  6598:                 cmpi.l #$80010800,d0
00:00005AC4 66FE            	  6599:                 bne.s *
00:00005AC6 0C8500000025    	  6600:                 cmpi.l #$00000025,d5
00:00005ACC 66FE            	  6601:                 bne.s *
                            	  6602: 
                            	  6603: *        WORD RIGHT
00:00005ACE EA48            	  6604:                 lsr.w #5,d0
00:00005AD0 6100FEC2        	  6605:                 bsr SHIFTS2_FLAGS
00:00005AD4 E248            	  6606:                 lsr.w #1,d0
00:00005AD6 6100FEBC        	  6607:                 bsr SHIFTS2_FLAGS
00:00005ADA E448            	  6608:                 lsr.w #2,d0
00:00005ADC 6100FEB6        	  6609:                 bsr SHIFTS2_FLAGS
00:00005AE0 E848            	  6610:                 lsr.w #4,d0
00:00005AE2 6100FEB0        	  6611:                 bsr SHIFTS2_FLAGS
00:00005AE6 0C8080010000    	  6612:                 cmpi.l #$80010000,d0
00:00005AEC 66FE            	  6613:                 bne.s *
00:00005AEE 0C850000002A    	  6614:                 cmpi.l #$0000002A,d5
00:00005AF4 66FE            	  6615:                 bne.s *
                            	  6616: 
                            	  6617: *        LONG LEFT
00:00005AF6 203C80018FF1    	  6618:                 move.l #$80018FF1,d0
00:00005AFC E388            	  6619:                 lsl.l #1,d0
00:00005AFE 6100FE94        	  6620:                 bsr SHIFTS2_FLAGS
00:00005B02 E588            	  6621:                 lsl.l #2,d0
00:00005B04 6100FE8E        	  6622:                 bsr SHIFTS2_FLAGS
00:00005B08 EF88            	  6623:                 lsl.l #7,d0
00:00005B0A 6100FE88        	  6624:                 bsr SHIFTS2_FLAGS
00:00005B0E E988            	  6625:                 lsl.l #4,d0
00:00005B10 6100FE82        	  6626:                 bsr SHIFTS2_FLAGS
00:00005B14 0C8063FC4000    	  6627:                 cmpi.l #$63FC4000,d0
00:00005B1A 66FE            	  6628:                 bne.s *
00:00005B1C 0C850000002B    	  6629:                 cmpi.l #$0000002B,d5
00:00005B22 66FE            	  6630:                 bne.s *
                            	  6631: 
                            	  6632: *        LONG RIGHT
00:00005B24 203C80018FF1    	  6633:                 move.l #$80018FF1,d0
00:00005B2A E288            	  6634:                 lsr.l #1,d0
00:00005B2C 6100FE66        	  6635:                 bsr SHIFTS2_FLAGS
00:00005B30 EA88            	  6636:                 lsr.l #5,d0
00:00005B32 6100FE60        	  6637:                 bsr SHIFTS2_FLAGS
00:00005B36 EE88            	  6638:                 lsr.l #7,d0
00:00005B38 6100FE5A        	  6639:                 bsr SHIFTS2_FLAGS
00:00005B3C E088            	  6640:                 lsr.l #8,d0
00:00005B3E 6100FE54        	  6641:                 bsr SHIFTS2_FLAGS
00:00005B42 0C8000000400    	  6642:                 cmpi.l #$00000400,d0
00:00005B48 66FE            	  6643:                 bne.s *
00:00005B4A 0C850000002D    	  6644:                 cmpi.l #$0000002D,d5
00:00005B50 66FE            	  6645:                 bne.s *
                            	  6646: 
                            	  6647: 
                            	  6648: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6649: 
00:00005B52 7A00            	  6650:                 moveq  #$00000000,d5
00:00005B54 307C0100        	  6651:                 move.l #$00000100,a0
00:00005B58 30BC8FF1        	  6652:                 move.w #$8FF1,(a0)
                            	  6653: 
                            	  6654: *        WORD LEFT
00:00005B5C E3D0            	  6655:                 lsl  (a0)
00:00005B5E 6100FE34        	  6656:                 bsr SHIFTS2_FLAGS
00:00005B62 E3D0            	  6657:                 lsl  (a0)
00:00005B64 6100FE2E        	  6658:                 bsr SHIFTS2_FLAGS
00:00005B68 E3D0            	  6659:                 lsl  (a0)
00:00005B6A 6100FE28        	  6660:                 bsr SHIFTS2_FLAGS
00:00005B6E E3D0            	  6661:                 lsl  (a0)
00:00005B70 6100FE22        	  6662:                 bsr SHIFTS2_FLAGS
00:00005B74 3010            	  6663:                 move.w (a0),d0
00:00005B76 0C800000FF10    	  6664:                 cmpi.l #$0000FF10,d0
00:00005B7C 66FE            	  6665:                 bne.s *
00:00005B7E 0C8500000009    	  6666:                 cmpi.l #$00000009,d5
00:00005B84 66FE            	  6667:                 bne.s *
                            	  6668: 
                            	  6669: *        WORD RIGHT
00:00005B86 E2D0            	  6670:                 lsr (a0)
00:00005B88 6100FE0A        	  6671:                 bsr SHIFTS2_FLAGS
00:00005B8C E2D0            	  6672:                 lsr (a0)
00:00005B8E 6100FE04        	  6673:                 bsr SHIFTS2_FLAGS
00:00005B92 E2D0            	  6674:                 lsr (a0)
00:00005B94 6100FDFE        	  6675:                 bsr SHIFTS2_FLAGS
00:00005B98 E2D0            	  6676:                 lsr (a0)
00:00005B9A 6100FDF8        	  6677:                 bsr SHIFTS2_FLAGS
00:00005B9E E2D0            	  6678:                 lsr (a0)
00:00005BA0 6100FDF2        	  6679:                 bsr SHIFTS2_FLAGS
00:00005BA4 E2D0            	  6680:                 lsr (a0)
00:00005BA6 6100FDEC        	  6681:                 bsr SHIFTS2_FLAGS
00:00005BAA 3010            	  6682:                 move.w (a0),d0
00:00005BAC 0C80000003FC    	  6683:                 cmpi.l #$000003FC,d0
00:00005BB2 66FE            	  6684:                 bne.s *
00:00005BB4 0C850000000A    	  6685:                 cmpi.l #$0000000A,d5
00:00005BBA 66FE            	  6686:                 bne.s *
                            	  6687: 
00:00005BBC 4E75            	  6688:                 rts
                            	  6689: 
                            	  6690: ;-----------------------------------------------------------
                            	  6691: ;-----------------------------------------------------------
                            	  6692: ; OPCODE : BSR / RTS
                            	  6693: ;-----------------------------------------------------------
                            	  6694: ;-----------------------------------------------------------
                            	  6695: 
                            	  6696: ;t3_bsr:
                            	  6697: ;	moveq	#3,d3
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;t1_bsr:
                            	  6701: ;	moveq	#1,d1
                            	  6702: ;	rts
                            	  6703: 
                            	  6704: ;op_bsr:
                            	  6705: ;	bsr			t1_bsr
                            	  6706: ;	bsr			t2_bsr
                            	  6707: ;	bsr.w		t3_bsr
                            	  6708: ;	bsr.w		t4_bsr
                            	  6709: ;	cmpi.l	#1,d1
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#2,d2
                            	  6712: ;	bne			*
                            	  6713: ;	cmpi.l	#3,d3
                            	  6714: ;	bne			*
                            	  6715: ;	cmpi.l	#4,d4
                            	  6716: ;	bne			*
                            	  6717: ;	rts
                            	  6718: 
                            	  6719: ;t2_bsr:
                            	  6720: ;	moveq	#2,d2
                            	  6721: ;	rts
                            	  6722: 	
                            	  6723: ;t4_bsr:
                            	  6724: ;	moveq	#4,d4
                            	  6725: ;	rts
                            	  6726: *    END
                            	  6727:     
                            	  6728: 

Source: "boot.x68"
                            	   895: 	include "TinyBasicFlt.x68"

Source: "TinyBasicFlt.x68"
                            	     1: ******************************************************************
                            	     2: *								 *
                            	     3: *		Tiny Float BASIC for the Motorola MC68000		 *
                            	     4: *								 *
                            	     5: * Derived from Palo Alto Tiny BASIC as published in the May 1976 *
                            	     6: * issue of Dr. Dobb's Journal.  Adapted to the 68000 by:         *
                            	     7: *	Gordon Brandly						 *
                            	     8: *								 *
                            	     9: ******************************************************************
                            	    10: *    Copyright (C) 1984 by Gordon Brandly. This program may be	 *
                            	    11: *    freely distributed for personal use only. All commercial	 *
                            	    12: *		       rights are reserved.			 *
                            	    13: ******************************************************************
                            	    14: * Modified (c) 2022 for the rf68000. Robert Finch
                            	    15: * Numerics changed to floating-point
                            	    16: * added string handling
                            	    17: ******************************************************************
                            	    18: 
                            	    19: * Vers. 1.0  1984/7/17	- Original version by Gordon Brandly
                            	    20: *	1.1  1984/12/9	- Addition of '$' print term by Marvin Lipford
                            	    21: *	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                            	    22: 
                            	    23: *	OPT	FRS,BRS 	forward ref.'s & branches default to short
                            	    24: 
                            	    25: ;CR	EQU	$0D		ASCII equates
                            	    26: ;LF	EQU	$0A
                            	    27: ;TAB	EQU	$09
                            	    28: ;CTRLC	EQU	$03
                            	    29: ;CTRLH	EQU	$08
                            	    30: ;CTRLS	EQU	$13
                            	    31: ;CTRLX	EQU	$18
                            	    32: 
                            	    33: DT_NONE equ 0
                            	    34: DT_NUMERIC equ 1
                            	    35: DT_STRING equ 2		; string descriptor
                            	    36: DT_TEXTPTR equ 3	; pointer into program text
                            	    37: 
                            	    38: BUFLEN	EQU	80		length of keyboard input buffer
                            	    39: STRAREASIZE	EQU	2048	; size of string area
                            	    40: 	CODE
                            	    41: *	ORG	$10000		first free address using Tutor
                            	    42: *
                            	    43: * Standard jump table. You can change these addresses if you are
                            	    44: * customizing this interpreter for a different environment.
                            	    45: *
00:00005BBE 6020            	    46: START	BRA	CSTART		Cold Start entry point
00:00005BC0 60000088        	    47: GOWARM	BRA	WSTART		Warm Start entry point
00:00005BC4 6000145E        	    48: GOOUT	BRA OUTC		Jump to character-out routine
00:00005BC8 6000146A        	    49: GOIN	BRA INC		Jump to character-in routine
00:00005BCC 60001486        	    50: GOAUXO	BRA	AUXOUT		Jump to auxiliary-out routine
00:00005BD0 60001496        	    51: GOAUXI	BRA	AUXIN		Jump to auxiliary-in routine
00:00005BD4 600014B2        	    52: GOBYE	BRA	BYEBYE		Jump to monitor, DOS, etc.
                            	    53: *
                            	    54: * Modifiable system constants:
                            	    55: *
00:00005BD8 00041000        	    56: TXTBGN	DC.L	$41000		beginning of program memory
00:00005BDC 00047FF0        	    57: ENDMEM	DC.L	$47FF0		end of available memory
                            	    58: *
                            	    59: * The main interpreter starts here:
                            	    60: *
                            	    61: CSTART
00:00005BE0 2E7AFFFA        	    62: 	MOVE.L ENDMEM,SP	initialize stack pointer
00:00005BE4 23FC000070400000	    63: 	move.l #INC1,INPPTR
00:00005BEC 70F8
00:00005BEE 4239000400A4    	    64: 	move.b #0,InputDevice
00:00005BF4 13FC0001000400A8	    65: 	move.b #1,OutputDevice
00:00005BFC 23FC000000010004	    66: 	move.l #1,_fpTextIncr
00:00005C04 0094
00:00005C06 4DFA148E        	    67: 	LEA	INITMSG,A6	tell who we are
00:00005C0A 61001400        	    68: 	BSR	PRMESG
00:00005C0E 23FAFFC800007148	    69: 	MOVE.L TXTBGN,TXTUNF	init. end-of-program pointer
00:00005C16 203AFFC4        	    70: 	MOVE.L ENDMEM,D0	get address of end of memory
00:00005C1A 23FAFFC000007104	    71: 	move.l ENDMEM,STKFP
00:00005C22 90BC00001000    	    72: 	SUB.L	#4096,D0	reserve 4K for the stack
00:00005C28 23C000007138    	    73: 	MOVE.L D0,STRSTK
00:00005C2E D0BC00000020    	    74: 	ADD.L #32,D0
00:00005C34 23C000007150    	    75: 	MOVE.L D0,STKLMT
00:00005C3A 90BC00000200    	    76: 	SUB.L	#512,D0 	reserve variable area (32 16 byte floats)
00:00005C40 23C00000714C    	    77: 	MOVE.L D0,VARBGN
00:00005C46 610000C2        	    78: 	bsr ClearStringArea
                            	    79: WSTART
00:00005C4A 7000            	    80: 	CLR.L	D0		initialize internal variables
00:00005C4C 23FC000000010004	    81: 	move.l #1,_fpTextIncr
00:00005C54 0094
00:00005C56 42B900007134    	    82: 	clr.l IRQROUT
00:00005C5C 23C000007110    	    83: 	MOVE.L	D0,LOPVAR
00:00005C62 23C000007108    	    84: 	MOVE.L	D0,STKGOS
00:00005C68 23C000007100    	    85: 	MOVE.L	D0,CURRNT	; current line number pointer = 0
00:00005C6E 2E7AFF6C        	    86: 	MOVE.L ENDMEM,SP	; init S.P. again, just in case
00:00005C72 610000B6        	    87: 	bsr ClearStringStack
00:00005C76 4DFA1442        	    88: 	LEA	OKMSG,A6			; display "OK"
00:00005C7A 61001390        	    89: 	bsr	PRMESG
                            	    90: ST3
00:00005C7E 103C003E        	    91: 	MOVE.B	#'>',D0         Prompt with a '>' and
00:00005C82 610010CC        	    92: 	bsr	GETLN		read a line.
00:00005C86 61001328        	    93: 	bsr	TOUPBUF 	convert to upper case
00:00005C8A 2848            	    94: 	MOVE.L	A0,A4		save pointer to end of line
00:00005C8C 41FA14CA        	    95: 	LEA	BUFFER,A0	point to the beginning of line
00:00005C90 610012C8        	    96: 	bsr	TSTNUM		is there a number there?
00:00005C94 61001310        	    97: 	bsr	IGNBLK		skip trailing blanks
00:00005C98 F2016080        	    98: 	FMOVE.L FP1,D1
00:00005C9C 4A82            	    99: 	TST.L D2			; does line no. exist? (or nonzero?)
00:00005C9E 67000244        	   100: 	BEQ	DIRECT		; if not, it's a direct statement
00:00005CA2 B2BC0000FFFF    	   101: 	CMP.L	#$FFFF,D1	see if line no. is <= 16 bits
00:00005CA8 64001098        	   102: 	BCC	QHOW		if not, we've overflowed
00:00005CAC 1101            	   103: 	MOVE.B	D1,-(A0)	store the binary line no.
00:00005CAE E059            	   104: 	ROR	#8,D1		(Kludge to store a word on a
00:00005CB0 1101            	   105: 	MOVE.B	D1,-(A0)	possible byte boundary)
00:00005CB2 E159            	   106: 	ROL	#8,D1
00:00005CB4 61001138        	   107: 	bsr	FNDLN		find this line in save area
00:00005CB8 2A49            	   108: 	MOVE.L	A1,A5		save possible line pointer
00:00005CBA 6614            	   109: 	BNE	ST4		if not found, insert
00:00005CBC 61001156        	   110: 	bsr	FNDNXT		find the next line (into A1)
00:00005CC0 244D            	   111: 	MOVE.L	A5,A2		pointer to line to be deleted
00:00005CC2 267A1484        	   112: 	MOVE.L	TXTUNF,A3	points to top of save area
00:00005CC6 6100115C        	   113: 	bsr	MVUP		move up to delete
00:00005CCA 23CA00007148    	   114: 	MOVE.L	A2,TXTUNF	update the end pointer
                            	   115: ST4
00:00005CD0 200C            	   116: 	MOVE.L	A4,D0		calculate the length of new line
00:00005CD2 9088            	   117: 	SUB.L	A0,D0
00:00005CD4 B0BC00000003    	   118: 	CMP.L	#3,D0		is it just a line no. & CR?
00:00005CDA 6FA2            	   119: 	BLE	ST3		if so, it was just a delete
00:00005CDC 267A146A        	   120: 	MOVE.L TXTUNF,A3	compute new end
00:00005CE0 2C4B            	   121: 	MOVE.L A3,A6
00:00005CE2 D7C0            	   122: 	ADD.L	D0,A3
00:00005CE4 203A145A        	   123: 	MOVE.L StrArea,D0	see if there's enough room
00:00005CE8 B08B            	   124: 	CMP.L	A3,D0
00:00005CEA 6300104E        	   125: 	BLS	QSORRY		if not, say so
00:00005CEE 23CB00007148    	   126: 	MOVE.L	A3,TXTUNF	if so, store new end position
00:00005CF4 224E            	   127: 	MOVE.L	A6,A1		points to old unfilled area
00:00005CF6 244D            	   128: 	MOVE.L	A5,A2		points to beginning of move area
00:00005CF8 6100113E        	   129: 	bsr	MVDOWN		move things out of the way
00:00005CFC 2248            	   130: 	MOVE.L	A0,A1		set up to do the insertion
00:00005CFE 244D            	   131: 	MOVE.L	A5,A2
00:00005D00 264C            	   132: 	MOVE.L	A4,A3
00:00005D02 61001120        	   133: 	bsr	MVUP		do it
00:00005D06 6000FF76        	   134: 	BRA	ST3		go back and get another line
                            	   135: 
                            	   136: ClearStringArea:
00:00005D0A 203A1440        	   137: 	move.l VARBGN,d0
00:00005D0E 90BC00000800    	   138: 	SUB.L #STRAREASIZE,D0
00:00005D14 23C000007140    	   139: 	MOVE.L D0,StrArea
00:00005D1A 23C000007144    	   140: 	MOVE.L D0,LastStr
00:00005D20 207A141E        	   141: 	move.l StrArea,a0
00:00005D24 4298            	   142: 	clr.l (a0)+
00:00005D26 4298            	   143: 	clr.l (a0)+
00:00005D28 4E75            	   144: 	rts
                            	   145: 
                            	   146: ClearStringStack:
00:00005D2A 7007            	   147: 	moveq #7,d0
00:00005D2C 227A140A        	   148: 	move.l STRSTK,a1
                            	   149: .0001
00:00005D30 4299            	   150: 	clr.l (a1)+				; clear the string stack
00:00005D32 51C8FFFC        	   151: 	dbra d0,.0001
00:00005D36 23C90000713C    	   152: 	move.l a1,StrSp		; set string stack stack pointer
00:00005D3C 4E75            	   153: 	rts
                            	   154: 
                            	   155: 	even
                            	   156: 
                            	   157: *******************************************************************
                            	   158: *
                            	   159: * *** Tables *** DIRECT *** EXEC ***
                            	   160: *
                            	   161: * This section of the code tests a string against a table. When
                            	   162: * a match is found, control is transferred to the section of
                            	   163: * code according to the table.
                            	   164: *
                            	   165: * At 'EXEC', A0 should point to the string, A1 should point to
                            	   166: * the character table, and A2 should point to the execution
                            	   167: * table. At 'DIRECT', A0 should point to the string, A1 and
                            	   168: * A2 will be set up to point to TAB1 and TAB1_1, which are
                            	   169: * the tables of all direct and statement commands.
                            	   170: *
                            	   171: * A '.' in the string will terminate the test and the partial
                            	   172: * match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                            	   173: * 'PRIN.', or 'PRINT' will all match 'PRINT'.
                            	   174: *
                            	   175: * There are two tables: the character table and the execution
                            	   176: * table. The character table consists of any number of text items.
                            	   177: * Each item is a string of characters with the last character's
                            	   178: * high bit set to one. The execution table holds a 16-bit
                            	   179: * execution addresses that correspond to each entry in the
                            	   180: * character table.
                            	   181: *
                            	   182: * The end of the character table is a 0 byte which corresponds
                            	   183: * to the default routine in the execution table, which is
                            	   184: * executed if none of the other table items are matched.
                            	   185: *
                            	   186: * Character-matching tables:
                            	   187: TAB1
00:00005D3E 3C434F          	   188: 	DC.B	'<CO',('M'+$80)
00:00005D41 CD
00:00005D42 3C434F          	   189: 	DC.B	'<CO',('N'+$80)
00:00005D45 CE
00:00005D46 3E434F          	   190: 	DC.B	'>CO',('M'+$80)
00:00005D49 CD
00:00005D4A 3E434F          	   191: 	DC.B	'>CO',('N'+$80)
00:00005D4D CE
00:00005D4E 3C3E434F        	   192: 	DC.B	'<>CO',('M'+$80)
00:00005D52 CD
00:00005D53 3C3E434F        	   193: 	DC.B	'<>CO',('N'+$80)
00:00005D57 CE
00:00005D58 4C4953          	   194: 	DC.B	'LIS',('T'+$80)         Direct commands
00:00005D5B D4
00:00005D5C 4C4F41          	   195: 	DC.B	'LOA',('D'+$80)
00:00005D5F C4
00:00005D60 4E45            	   196: 	DC.B	'NE',('W'+$80)
00:00005D62 D7
00:00005D63 5255            	   197: 	DC.B	'RU',('N'+$80)
00:00005D65 CE
00:00005D66 534156          	   198: 	DC.B	'SAV',('E'+$80)
00:00005D69 C5
00:00005D6A 434C            	   199: 	DC.B 	'CL',('S'+$80)
00:00005D6C D3
                            	   200: TAB2
00:00005D6D 4E4558          	   201: 	DC.B	'NEX',('T'+$80)         Direct / statement
00:00005D70 D4
00:00005D71 4C45            	   202: 	DC.B	'LE',('T'+$80)
00:00005D73 D4
00:00005D74 49              	   203: 	DC.B	'I',('F'+$80)
00:00005D75 C6
00:00005D76 474F54          	   204: 	DC.B	'GOT',('O'+$80)
00:00005D79 CF
00:00005D7A 474F5355        	   205: 	DC.B	'GOSU',('B'+$80)
00:00005D7E C2
00:00005D7F 5245545552      	   206: 	DC.B	'RETUR',('N'+$80)
00:00005D84 CE
00:00005D85 5245            	   207: 	DC.B	'RE',('M'+$80)
00:00005D87 CD
00:00005D88 464F            	   208: 	DC.B	'FO',('R'+$80)
00:00005D8A D2
00:00005D8B 494E5055        	   209: 	DC.B	'INPU',('T'+$80)
00:00005D8F D4
00:00005D90 5052494E        	   210: 	DC.B	'PRIN',('T'+$80)
00:00005D94 D4
00:00005D95 504F4B          	   211: 	DC.B	'POK',('E'+$80)
00:00005D98 C5
00:00005D99 53544F          	   212: 	DC.B	'STO',('P'+$80)
00:00005D9C D0
00:00005D9D 4259            	   213: 	DC.B	'BY',('E'+$80)
00:00005D9F C5
00:00005DA0 43414C          	   214: 	DC.B	'CAL',('L'+$80)
00:00005DA3 CC
00:00005DA4 4F4E4952        	   215: 	DC.B	'ONIR',('Q'+$80)
00:00005DA8 D1
00:00005DA9 00              	   216: 	DC.B	0
                            	   217: TAB4
00:00005DAA 504545          	   218: 	DC.B	'PEE',('K'+$80)         Functions
00:00005DAD CB
00:00005DAE 524E            	   219: 	DC.B	'RN',('D'+$80)
00:00005DB0 C4
00:00005DB1 4142            	   220: 	DC.B	'AB',('S'+$80)
00:00005DB3 D3
00:00005DB4 53495A          	   221: 	DC.B	'SIZ',('E'+$80)
00:00005DB7 C5
00:00005DB8 544943          	   222: 	DC.B	'TIC',('K'+$80)
00:00005DBB CB
00:00005DBC 434F52454E      	   223: 	DC.B	'COREN',('O'+$80)
00:00005DC1 CF
00:00005DC2 4C454654        	   224: 	DC.B	'LEFT',('$'+$80)
00:00005DC6 A4
00:00005DC7 5249474854      	   225: 	DC.B	'RIGHT',('$'+$80)
00:00005DCC A4
00:00005DCD 4D4944          	   226: 	DC.B	'MID',('$'+$80)
00:00005DD0 A4
00:00005DD1 4C45            	   227: 	DC.B	'LE',('N'+$80)
00:00005DD3 CE
00:00005DD4 494E            	   228: 	DC.B	'IN',('T'+$80)
00:00005DD6 D4
00:00005DD7 434852          	   229: 	DC.B	'CHR',('$'+$80)
00:00005DDA A4
00:00005DDB 00              	   230: 	DC.B	0
                            	   231: TAB5
00:00005DDC 54              	   232: 	DC.B	'T',('O'+$80)           "TO" in "FOR"
00:00005DDD CF
00:00005DDE 00              	   233: 	DC.B	0
                            	   234: TAB6
00:00005DDF 535445          	   235: 	DC.B	'STE',('P'+$80)         "STEP" in "FOR"
00:00005DE2 D0
00:00005DE3 00              	   236: 	DC.B	0
                            	   237: TAB8
00:00005DE4 3E              	   238: 	DC.B	'>',('='+$80)           Relational operators
00:00005DE5 BD
00:00005DE6 3C              	   239: 	DC.B	'<',('>'+$80)
00:00005DE7 BE
00:00005DE8 BE              	   240: 	DC.B	('>'+$80)
00:00005DE9 BD              	   241: 	DC.B	('='+$80)
00:00005DEA 3C              	   242: 	DC.B	'<',('='+$80)
00:00005DEB BD
00:00005DEC BC              	   243: 	DC.B	('<'+$80)
00:00005DED 00              	   244: 	DC.B	0
00:00005DEE 00              	   245: 	DC.B	0	<- for aligning on a word boundary
                            	   246: TAB9
00:00005DEF 414E            	   247: 	DC.B	'AN',('D'+$80)
00:00005DF1 C4
00:00005DF2 00              	   248: 	DC.B	0
                            	   249: TAB10
00:00005DF3 4F              	   250: 	DC.B	'O',('R'+$80)
00:00005DF4 D2
00:00005DF5 00              	   251: 	DC.B	0
                            	   252: TAB11
00:00005DF6 4D4F            	   253: 	DC.B	'MO',('D'+$80)
00:00005DF8 C4
00:00005DF9 00              	   254: 	DC.B	0
00:00005DFA 00              	   255: 	DC.B	0
                            	   256: 
                            	   257: ; Execution address tables:
                            	   258: 	align 2
                            	   259: TAB1_1	
00:00005DFC 00005F3C        	   260: 	DC.L	INCOM
00:00005E00 00005F2E        	   261: 	DC.L	INCON
00:00005E04 00005F54        	   262: 	DC.L	OUTCOM
00:00005E08 00005F6A        	   263: 	DC.L	OUTCON
00:00005E0C 00005F4A        	   264: 	DC.L	IOCOM
00:00005E10 00005F60        	   265: 	DC.L	IOCON
00:00005E14 00006054        	   266: 	DC.L	LIST			Direct commands
00:00005E18 00006332        	   267: 	DC.L	LOAD
00:00005E1C 00005F76        	   268: 	DC.L	NEW
00:00005E20 00005F92        	   269: 	DC.L	RUN
00:00005E24 00006392        	   270: 	DC.L	SAVE
00:00005E28 00007018        	   271: 	DC.L	CLS
                            	   272: TAB2_1
00:00005E2C 000061F0        	   273: 	DC.L	NEXT			Direct / statement
00:00005E30 00006322        	   274: 	DC.L	LET
00:00005E34 0000625C        	   275: 	DC.L	IF
00:00005E38 0000600C        	   276: 	DC.L	GOTO
00:00005E3C 0000610A        	   277: 	DC.L	GOSUB
00:00005E40 00006144        	   278: 	DC.L	RETURN
00:00005E44 0000625A        	   279: 	DC.L	REM
00:00005E48 00006170        	   280: 	DC.L	FOR
00:00005E4C 00006284        	   281: 	DC.L	INPUT
00:00005E50 00006080        	   282: 	DC.L	PRINT
00:00005E54 00006410        	   283: 	DC.L	POKE
00:00005E58 00005F8A        	   284: 	DC.L	STOP
00:00005E5C 00005BD4        	   285: 	DC.L	GOBYE
00:00005E60 0000648A        	   286: 	DC.L	CALL
00:00005E64 00006020        	   287: 	DC.L	ONIRQ
00:00005E68 0000631A        	   288: 	DC.L	DEFLT
                            	   289: TAB4_1
00:00005E6C 00006A3A        	   290: 	DC.L	PEEK			; Functions
00:00005E70 00006AA2        	   291: 	DC.L	RND
00:00005E74 00006ACC        	   292: 	DC.L	ABS
00:00005E78 00006AD8        	   293: 	DC.L	SIZE
00:00005E7C 00006AE8        	   294: 	DC.L	TICK
00:00005E80 00006AF4        	   295: 	DC.L	CORENO
00:00005E84 00006C06        	   296: 	DC.L	LEFT
00:00005E88 00006C12        	   297: 	DC.L	RIGHT
00:00005E8C 00006B3C        	   298: 	DC.L	MID
00:00005E90 00006C3A        	   299: 	DC.L	LEN
00:00005E94 00006C60        	   300: 	DC.L	INT
00:00005E98 00006C76        	   301: 	DC.L  CHR
00:00005E9C 00006744        	   302: 	DC.L	XP40
                            	   303: TAB5_1
00:00005EA0 0000618A        	   304: 	DC.L	FR1			; "TO" in "FOR"
00:00005EA4 00006CFA        	   305: 	DC.L	QWHAT
                            	   306: TAB6_1
00:00005EA8 000061A2        	   307: 	DC.L	FR2			; "STEP" in "FOR"
00:00005EAC 000061A8        	   308: 	DC.L	FR3
                            	   309: TAB8_1
00:00005EB0 0000657A        	   310: 	DC.L	XP11	>=		Relational operators
00:00005EB4 00006586        	   311: 	DC.L	XP12	<>
00:00005EB8 00006592        	   312: 	DC.L	XP13	>
00:00005EBC 000065AA        	   313: 	DC.L	XP15	=
00:00005EC0 0000659E        	   314: 	DC.L	XP14	<=
00:00005EC4 000065B8        	   315: 	DC.L	XP16	<
00:00005EC8 000065D6        	   316: 	DC.L	XP17
                            	   317: TAB9_1
00:00005ECC 00006538        	   318: 	DC.L	XP_AND
00:00005ED0 0000654E        	   319: 	DC.L	XP_ANDX
                            	   320: TAB10_1
00:00005ED4 00006510        	   321: 	DC.L	XP_OR
00:00005ED8 0000654E        	   322: 	DC.L	XP_ORX
                            	   323: TAB11_1
00:00005EDC 00006716        	   324: 	DC.L	XP_MOD
00:00005EE0 000066E0        	   325: 	DC.L	XP31
                            	   326: 	even
                            	   327: 	
                            	   328: DIRECT
00:00005EE4 33FC000100007154	   329: 	move.w #1,DIRFLG
00:00005EEC 43FAFE50        	   330: 	LEA	TAB1,A1
00:00005EF0 45FAFF0A        	   331: 	LEA	TAB1_1,A2
                            	   332: EXEC
00:00005EF4 610010B0        	   333: 	bsr	IGNBLK				; ignore leading blanks
00:00005EF8 2648            	   334: 	MOVE.L A0,A3			; save the pointer
00:00005EFA 4202            	   335: 	CLR.B	D2					; clear match flag
                            	   336: EXLP
00:00005EFC 1018            	   337: 	MOVE.B (A0)+,D0	 	; get the program character
00:00005EFE 1211            	   338: 	MOVE.B (A1),D1 		; get the table character
00:00005F00 6604            	   339: 	BNE	EXNGO					; If end of table,
00:00005F02 204B            	   340: 	MOVE.L A3,A0			; restore the text pointer and...
00:00005F04 6024            	   341: 	BRA	EXGO					; execute the default.
                            	   342: EXNGO
00:00005F06 1600            	   343: 	MOVE.B D0,D3		 	; Else check for period...
00:00005F08 C602            	   344: 	AND.B	D2,D3				; and a match.
00:00005F0A B63C002E        	   345: 	CMP.B	#'.',D3
00:00005F0E 671A            	   346: 	BEQ	EXGO					; if so, execute
00:00005F10 C23C007F        	   347: 	AND.B	#$7F,D1 		; ignore the table's high bit
00:00005F14 B200            	   348: 	CMP.B	D0,D1				; is there a match?
00:00005F16 670C            	   349: 	BEQ	EXMAT
00:00005F18 588A            	   350: 	ADDQ.L #4,A2			; if not, try the next entry
00:00005F1A 204B            	   351: 	MOVE.L A3,A0			; reset the program pointer
00:00005F1C 4202            	   352: 	CLR.B	D2					; sorry, no match
                            	   353: EX1
00:00005F1E 4A19            	   354: 	TST.B	(A1)+				; get to the end of the entry
00:00005F20 6AFC            	   355: 	BPL	EX1
00:00005F22 60D8            	   356: 	BRA	EXLP					; back for more matching
                            	   357: EXMAT
00:00005F24 74FF            	   358: 	MOVEQ	#-1,D2			; we've got a match so far
00:00005F26 4A19            	   359: 	TST.B	(A1)+				; end of table entry?
00:00005F28 6AD2            	   360: 	BPL	EXLP					; if not, go back for more
                            	   361: EXGO
00:00005F2A 2652            	   362: 	MOVE.L (A2),A3		; execute the appropriate routine
00:00005F2C 4ED3            	   363: 	JMP	(A3)
                            	   364: 
                            	   365: *******************************************************************
                            	   366: * Console redirection
                            	   367: * <COM will redirect input to the COM port
                            	   368: * >COM will redirect output to the COM port
                            	   369: * <CON will redirect input to the console
                            	   370: * >CON will redirect output to the console
                            	   371: * <>COM will redirect input and output to the COM port
                            	   372: * <>CON will redirect input and output to the console
                            	   373: *******************************************************************
                            	   374: INCON
00:00005F2E 23FC000070400000	   375: 	move.l	#INC1,INPPTR
00:00005F36 70F8
00:00005F38 600001C8        	   376: 	bra			FINISH
                            	   377: INCOM
00:00005F3C 23FC000070680000	   378: 	move.l	#AUXIN,INPPTR
00:00005F44 70F8
00:00005F46 600001BA        	   379: 	bra			FINISH
                            	   380: IOCOM
00:00005F4A 23FC000070680000	   381: 	move.l	#AUXIN,INPPTR
00:00005F52 70F8
                            	   382: OUTCOM
00:00005F54 13FC0002000400A8	   383: 	move.b #2,OutputDevice
00:00005F5C 600001A4        	   384: 	bra	FINISH
                            	   385: IOCON
00:00005F60 23FC000070400000	   386: 	move.l	#INC1,INPPTR
00:00005F68 70F8
                            	   387: OUTCON
00:00005F6A 13FC0001000400A8	   388: 	move.b #1,OutputDevice
00:00005F72 6000018E        	   389: 	bra	FINISH
                            	   390: 
                            	   391: *******************************************************************
                            	   392: *
                            	   393: * What follows is the code to execute direct and statement
                            	   394: * commands. Control is transferred to these points via the command
                            	   395: * table lookup code of 'DIRECT' and 'EXEC' in the last section.
                            	   396: * After the command is executed, control is transferred to other
                            	   397: * sections as follows:
                            	   398: *
                            	   399: * For 'LIST', 'NEW', and 'STOP': go back to the warm start point.
                            	   400: * For 'RUN': go execute the first stored line if any; else go
                            	   401: * back to the warm start point.
                            	   402: * For 'GOTO' and 'GOSUB': go execute the target line.
                            	   403: * For 'RETURN' and 'NEXT'; go back to saved return line.
                            	   404: * For all others: if 'CURRNT' is 0, go to warm start; else go
                            	   405: * execute next command. (This is done in 'FINISH'.)
                            	   406: *
                            	   407: *******************************************************************
                            	   408: *
                            	   409: * *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                            	   410: *
                            	   411: * 'NEW<CR>' sets TXTUNF to point to TXTBGN
                            	   412: *
                            	   413: * 'STOP<CR>' goes back to WSTART
                            	   414: *
                            	   415: * 'RUN<CR>' finds the first stored line, stores its address
                            	   416: * in CURRNT, and starts executing it. Note that only those
                            	   417: * commands in TAB2 are legal for a stored program.
                            	   418: *
                            	   419: * There are 3 more entries in 'RUN':
                            	   420: * 'RUNNXL' finds next line, stores it's address and executes it.
                            	   421: * 'RUNTSL' stores the address of this line and executes it.
                            	   422: * 'RUNSML' continues the execution on same line.
                            	   423: *
                            	   424: * 'GOTO expr<CR>' evaluates the expression, finds the target
                            	   425: * line, and jumps to 'RUNTSL' to do it.
                            	   426: *
                            	   427: NEW
00:00005F76 61000D70        	   428: 	bsr	ENDCHK
00:00005F7A 23FAFC5C00007148	   429: 	MOVE.L TXTBGN,TXTUNF	set the end pointer
00:00005F82 6100FD86        	   430: 	bsr ClearStringArea
00:00005F86 6100FDA2        	   431: 	bsr ClearStringStack
                            	   432: 
                            	   433: STOP
00:00005F8A 61000D5C        	   434: 	bsr	ENDCHK
00:00005F8E 6000FCBA        	   435: 	BRA	WSTART
                            	   436: 
                            	   437: RUN
00:00005F92 427900007154    	   438: 	clr.w DIRFLG
00:00005F98 61000D4E        	   439: 	bsr	ENDCHK
00:00005F9C 207AFC3A        	   440: 	MOVE.L	TXTBGN,A0	set pointer to beginning
00:00005FA0 23C800007100    	   441: 	MOVE.L	A0,CURRNT
                            	   442: 
                            	   443: RUNNXL
00:00005FA6 4AB900007100    	   444: 	TST.L	CURRNT		; executing a program?
00:00005FAC 6700FC9C        	   445: 	beq	WSTART			; if not, we've finished a direct stat.
00:00005FB0 4AB900007134    	   446: 	tst.l	IRQROUT		; are we handling IRQ's ?
00:00005FB6 672E            	   447: 	beq	RUN1
00:00005FB8 4A39000400A0    	   448: 	tst.b IRQFlag		; was there an IRQ ?
00:00005FBE 6726            	   449: 	beq	RUN1
00:00005FC0 4239000400A0    	   450: 	clr.b IRQFlag
                            	   451: 
                            	   452: 	; same code as GOSUB	
                            	   453: ;	sub.l #128,sp		; allocate storage for local variables
                            	   454: ;	move.l STKFP,-(sp)
                            	   455: ;	move.l sp,STKFP
00:00005FC6 61000EB4        	   456: 	bsr	PUSHA				; save the current 'FOR' parameters
00:00005FCA 2F08            	   457: 	MOVE.L A0,-(SP)	; save text pointer
00:00005FCC 2F3A1132        	   458: 	MOVE.L CURRNT,-(SP)	found it, save old 'CURRNT'...
00:00005FD0 2F3A1136        	   459: 	MOVE.L STKGOS,-(SP)	and 'STKGOS'
00:00005FD4 42B900007110    	   460: 	CLR.L	LOPVAR		; load new values
00:00005FDA 23CF00007108    	   461: 	MOVE.L SP,STKGOS
                            	   462: 
00:00005FE0 227A1152        	   463: 	move.l IRQROUT,a1
00:00005FE4 600C            	   464: 	bra	RUNTSL
                            	   465: RUN1
00:00005FE6 7200            	   466: 	CLR.L	D1			; else find the next line number
00:00005FE8 2248            	   467: 	MOVE.L A0,A1
00:00005FEA 61000E10        	   468: 	bsr	FNDLNP
00:00005FEE 6500FC5A        	   469: 	BCS	WSTART		; if we've fallen off the end, stop
                            	   470: 
                            	   471: RUNTSL
00:00005FF2 23C900007100    	   472: 	MOVE.L	A1,CURRNT	set CURRNT to point to the line no.
00:00005FF8 2049            	   473: 	MOVE.L	A1,A0		set the text pointer to
00:00005FFA 5488            	   474: 	ADDQ.L	#2,A0		the start of the line text
                            	   475: 
                            	   476: RUNSML
00:00005FFC 61000FFC        	   477: 	bsr	CHKIO		see if a control-C was pressed
00:00006000 43FAFD6B        	   478: 	LEA	TAB2,A1 	find command in TAB2
00:00006004 45FAFE26        	   479: 	LEA	TAB2_1,A2
00:00006008 6000FEEA        	   480: 	BRA	EXEC		and execute it
                            	   481: 
                            	   482: GOTO	
00:0000600C 610004E0        	   483: 	bsr	INT_EXPR	; evaluate the following expression
00:00006010 61000CD6        	   484: 	bsr	ENDCHK		; must find end of line
00:00006014 2200            	   485: 	move.l d0,d1
00:00006016 61000DD6        	   486: 	bsr	FNDLN			; find the target line
00:0000601A 66000D26        	   487: 	bne	QHOW			; no such line no.
00:0000601E 60D2            	   488: 	bra	RUNTSL		; go do it
                            	   489: 
                            	   490: ;******************************************************************
                            	   491: ; ONIRQ <line number>
                            	   492: ; ONIRQ sets up an interrupt handler which acts like a specialized
                            	   493: ; subroutine call. ONIRQ is coded like a GOTO that never executes.
                            	   494: ;******************************************************************
                            	   495: 
                            	   496: ONIRQ:
00:00006020 610004CC        	   497: 	bsr	INT_EXPR		; evaluate the following expression
00:00006024 61000CC2        	   498: 	bsr ENDCHK			; must find end of line
00:00006028 2200            	   499: 	move.l d0,d1
00:0000602A 61000DC2        	   500: 	bsr FNDLN				; find the target line
00:0000602E 660A            	   501: 	bne	ONIRQ1
00:00006030 42B900007134    	   502: 	clr.l IRQROUT
00:00006036 600000CA        	   503: 	bra	FINISH
                            	   504: ONIRQ1:
00:0000603A 23C900007134    	   505: 	move.l a1,IRQROUT
00:00006040 600000C0        	   506: 	jmp	FINISH
                            	   507: 
                            	   508: 
                            	   509: WAITIRQ:
00:00006044 61000FB4        	   510: 	jsr	CHKIO				; see if a control-C was pressed
00:00006048 4A39000400A0    	   511: 	tst.b IRQFlag
00:0000604E 67F4            	   512: 	beq	WAITIRQ
00:00006050 600000B0        	   513: 	jmp	FINISH
                            	   514: 
                            	   515: *******************************************************************
                            	   516: *
                            	   517: * *** LIST *** PRINT ***
                            	   518: *
                            	   519: * LIST has two forms:
                            	   520: * 'LIST<CR>' lists all saved lines
                            	   521: * 'LIST #<CR>' starts listing at the line #
                            	   522: * Control-S pauses the listing, control-C stops it.
                            	   523: *
                            	   524: * PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                            	   525: * where '....' is a list of expressions, formats, back-arrows,
                            	   526: * and strings.	These items a separated by commas.
                            	   527: *
                            	   528: * A format is a pound sign followed by a number.  It controls
                            	   529: * the number of spaces the value of an expression is going to
                            	   530: * be printed in.  It stays effective for the rest of the print
                            	   531: * command unless changed by another format.  If no format is
                            	   532: * specified, 11 positions will be used.
                            	   533: *
                            	   534: * A string is quoted in a pair of single- or double-quotes.
                            	   535: *
                            	   536: * An underline (back-arrow) means generate a <CR> without a <LF>
                            	   537: *
                            	   538: * A <CR LF> is generated after the entire list has been printed
                            	   539: * or if the list is empty.  If the list ends with a semicolon,
                            	   540: * however, no <CR LF> is generated.
                            	   541: *
                            	   542: 
                            	   543: LIST	
00:00006054 61000F04        	   544: 	bsr	TSTNUM		see if there's a line no.
00:00006058 61000C8E        	   545: 	bsr	ENDCHK		if not, we get a zero
00:0000605C 61000D90        	   546: 	bsr	FNDLN		find this or next line
                            	   547: LS1
00:00006060 650000A0        	   548: 	BCS	FINISH		warm start if we passed the end
00:00006064 61000EBE        	   549: 	bsr	PRTLN		print the line
00:00006068 61000F90        	   550: 	bsr	CHKIO		check for listing halt request
00:0000606C 670C            	   551: 	BEQ	LS3
00:0000606E B03C0013        	   552: 	CMP.B	#CTRLS,D0	pause the listing?
00:00006072 6606            	   553: 	BNE	LS3
                            	   554: LS2
00:00006074 61000F84        	   555: 	bsr	CHKIO		if so, wait for another keypress
00:00006078 67FA            	   556: 	BEQ	LS2
                            	   557: LS3
00:0000607A 61000D80        	   558: 	bsr	FNDLNP		find the next line
00:0000607E 60E0            	   559: 	BRA	LS1
                            	   560: 
                            	   561: PRINT	
00:00006080 780B            	   562: 	MOVE.L #11,D4		D4 = number of print spaces
00:00006082 61000EBE        	   563: 	bsr	TSTC		if null list and ":"
00:00006086 3A              	   564: 	DC.B	':',PR2-*
00:00006087 09
00:00006088 61001184        	   565: 	bsr	CRLF		give CR-LF and continue
00:0000608C 6000FF6E        	   566: 	BRA	RUNSML		execution on the same line
                            	   567: PR2	
00:00006090 61000EB0        	   568: 	bsr	TSTC		if null list and <CR>
00:00006094 0D              	   569: 	DC.B	CR,PR0-*
00:00006095 09
00:00006096 61001176        	   570: 	bsr	CRLF		also give CR-LF and
00:0000609A 6000FF0A        	   571: 	BRA	RUNNXL		execute the next line
                            	   572: PR0
00:0000609E 61000EA2        	   573: 	bsr	TSTC				; else is it a format?
00:000060A2 23              	   574: 	dc.b '#',PR1-*
00:000060A3 09
00:000060A4 61000448        	   575: 	bsr	INT_EXPR		; yes, evaluate expression
00:000060A8 2800            	   576: 	move.l d0,d4		; and save it as print width
00:000060AA 600E            	   577: 	bra	PR3					; look for more to print
                            	   578: PR1
00:000060AC 61000E94        	   579: 	bsr	TSTC				; is character expression? (MRL)
00:000060B0 24              	   580: 	dc.b '$',PR8-*
00:000060B1 1B
00:000060B2 6100043A        	   581: 	bsr	INT_EXPR		; yep. Evaluate expression (MRL)
00:000060B6 6100FB0C        	   582: 	bsr	GOOUT				; print low byte (MRL)
                            	   583: 	bra	PR3					; look for more. (MRL)
                            	   584: PR3
00:000060BA 61000E86        	   585: 	bsr	TSTC						; if ",", go find next
00:000060BE 2C              	   586: 	dc.b ',',PR6-*
00:000060BF 07
00:000060C0 61000C0C        	   587: 	bsr	FIN							; in the list.
00:000060C4 60D8            	   588: 	BRA	PR0
                            	   589: PR6
00:000060C6 61001146        	   590: 	bsr	CRLF						; list ends here
00:000060CA 6036            	   591: 	BRA	FINISH
                            	   592: PR8
00:000060CC 2F04            	   593: 	move.l d4,-(SP)			; save the width value
00:000060CE 61000430        	   594: 	bsr	EXPR						; evaluate the expression
00:000060D2 281F            	   595: 	move.l (sp)+,d4			; restore the width
00:000060D4 0C8000000002    	   596: 	cmpi.l #DT_STRING,d0	; is it a string?
00:000060DA 670C            	   597: 	beq PR9
00:000060DC F2000080        	   598: 	fmove fp0,fp1
00:000060E0 7823            	   599: 	move.l #35,d4
00:000060E2 61000DF6        	   600: 	bsr	PRTNUM					; print its value
00:000060E6 60D2            	   601: 	bra	PR3							; more to print?
                            	   602: 	; Print a string
                            	   603: PR9
00:000060E8 F239680000040600	   604: 	fmove.x fp0,_fpWork
00:000060F0 323900040600    	   605: 	move.w _fpWork,d1
00:000060F6 227900040604    	   606: 	move.l _fpWork+4,a1
00:000060FC 61000DD6        	   607: 	bsr PRTSTR2
00:00006100 60B8            	   608: 	bra PR3
                            	   609: 
                            	   610: FINISH
00:00006102 61000BCA        	   611: 	bsr	FIN			; Check end of command
00:00006106 60000BF2        	   612: 	BRA	QWHAT		; print "What?" if wrong
                            	   613: 
                            	   614: ;******************************************************************
                            	   615: ;
                            	   616: ; *** GOSUB *** & RETURN ***
                            	   617: ;
                            	   618: ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                            	   619: ; except that the current text pointer, stack pointer, etc. are
                            	   620: ; saved so that execution can be continued after the subroutine
                            	   621: ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                            	   622: ; recursive), the save area must be stacked.  The stack pointer
                            	   623: ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                            	   624: ; If we are in the main routine, 'STKGOS' is zero (this was done
                            	   625: ; in the initialization section of the interpreter), but we still
                            	   626: ; save it as a flag for no further 'RETURN's.
                            	   627: ;
                            	   628: ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                            	   629: ; returns the execution to the command after the most recent
                            	   630: ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                            	   631: ; a 'GOSUB' and is thus an error.
                            	   632: 
                            	   633: GOSUB:
00:0000610A 4FEFFF80        	   634: 	sub.l #128,sp		; allocate storage for local variables
00:0000610E 2F3A0FF4        	   635: 	move.l STKFP,-(sp)
00:00006112 23CF00007104    	   636: 	move.l sp,STKFP
00:00006118 61000D62        	   637: 	bsr	PUSHA				; save the current 'FOR' parameters
00:0000611C 610003D0        	   638: 	bsr	INT_EXPR		; get line number
00:00006120 2F08            	   639: 	MOVE.L	A0,-(SP)	save text pointer
00:00006122 2200            	   640: 	move.l	d0,d1
00:00006124 61000CC8        	   641: 	bsr	FNDLN		find the target line
00:00006128 66000C1A        	   642: 	BNE	AHOW		if not there, say "How?"
00:0000612C 2F3A0FD2        	   643: 	MOVE.L	CURRNT,-(SP)	found it, save old 'CURRNT'...
00:00006130 2F3A0FD6        	   644: 	MOVE.L	STKGOS,-(SP)	and 'STKGOS'
00:00006134 42B900007110    	   645: 	CLR.L	LOPVAR		load new values
00:0000613A 23CF00007108    	   646: 	MOVE.L	SP,STKGOS
00:00006140 6000FEB0        	   647: 	BRA	RUNTSL
                            	   648: 
                            	   649: RETURN:
00:00006144 61000BA2        	   650: 	bsr	ENDCHK					; there should be just a <CR>
00:00006148 223A0FBE        	   651: 	MOVE.L	STKGOS,D1		; get old stack pointer
00:0000614C 67000BAC        	   652: 	BEQ	QWHAT						; if zero, it doesn't exist
00:00006150 2E41            	   653: 	MOVE.L	D1,SP				; else restore it
00:00006152 23DF00007108    	   654: 	MOVE.L	(SP)+,STKGOS	; and the old 'STKGOS'
00:00006158 23DF00007100    	   655: 	MOVE.L	(SP)+,CURRNT	; and the old 'CURRNT'
00:0000615E 205F            	   656: 	MOVE.L	(SP)+,A0		; and the old text pointer
00:00006160 61000CDE        	   657: 	bsr	POPA						; and the old 'FOR' parameters
                            	   658: ;	move.l STKFP,sp
00:00006164 23DF00007104    	   659: 	move.l (sp)+,STKFP
00:0000616A 4FEF0080        	   660: 	add.l #128,sp				; remove local variable storage
00:0000616E 6092            	   661: 	BRA	FINISH					; and we are back home
                            	   662: 
                            	   663: *******************************************************************
                            	   664: *
                            	   665: * *** FOR *** & NEXT ***
                            	   666: *
                            	   667: * 'FOR' has two forms:
                            	   668: * 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                            	   669: * The second form means the same thing as the first form with a
                            	   670: * STEP of positive 1.  The interpreter will find the variable 'var'
                            	   671: * and set its value to the current value of 'exp1'.  It also
                            	   672: * evaluates 'exp2' and 'exp1' and saves all these together with
                            	   673: * the text pointer, etc. in the 'FOR' save area, which consisits of
                            	   674: * 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                            	   675: * already something in the save area (indicated by a non-zero
                            	   676: * 'LOPVAR'), then the old save area is saved on the stack before
                            	   677: * the new values are stored.  The interpreter will then dig in the
                            	   678: * stack and find out if this same variable was used in another
                            	   679: * currently active 'FOR' loop.  If that is the case, then the old
                            	   680: * 'FOR' loop is deactivated. (i.e. purged from the stack)
                            	   681: *
                            	   682: * 'NEXT var' serves as the logical (not necessarily physical) end
                            	   683: * of the 'FOR' loop.  The control variable 'var' is checked with
                            	   684: * the 'LOPVAR'.  If they are not the same, the interpreter digs in
                            	   685: * the stack to find the right one and purges all those that didn't
                            	   686: * match.  Either way, it then adds the 'STEP' to that variable and
                            	   687: * checks the result with against the limit value.  If it is within
                            	   688: * the limit, control loops back to the command following the
                            	   689: * 'FOR'.  If it's outside the limit, the save area is purged and
                            	   690: * execution continues.
                            	   691: 
                            	   692: FOR
00:00006170 61000D0A        	   693: 	bsr	PUSHA			; save the old 'FOR' save area
00:00006174 61000B38        	   694: 	bsr	SETVAL		; set the control variable
00:00006178 23CE00007110    	   695: 	move.l a6,LOPVAR		; save its address
00:0000617E 43FAFC5C        	   696: 	LEA	TAB5,A1 	; use 'EXEC' to test for 'TO'
00:00006182 45FAFD1C        	   697: 	LEA	TAB5_1,A2
00:00006186 6000FD6C        	   698: 	BRA	EXEC
                            	   699: FR1	
00:0000618A 61000354        	   700: 	bsr	NUM_EXPR		; evaluate the limit
00:0000618E F239680000007120	   701: 	FMOVE.X	FP0,LOPLMT	; save that
00:00006196 43FAFC47        	   702: 	LEA	TAB6,A1 		; use 'EXEC' to look for the
00:0000619A 45FAFD0C        	   703: 	LEA	TAB6_1,A2		; word 'STEP'
00:0000619E 6000FD54        	   704: 	BRA	EXEC
                            	   705: FR2
00:000061A2 6100033C        	   706: 	bsr	NUM_EXPR		found it, get the step value
00:000061A6 6006            	   707: 	BRA	FR4
                            	   708: FR3
00:000061A8 F23C58000001    	   709: 	FMOVE.B #1,FP0	; not found, step defaults to 1
                            	   710: FR4
00:000061AE F239680000007114	   711: 	FMOVE.X	FP0,LOPINC	save that too
                            	   712: FR5	
00:000061B6 23FA0F480000712C	   713: 	MOVE.L	CURRNT,LOPLN	save address of current line number
00:000061BE 23C800007130    	   714: 	MOVE.L	A0,LOPPT	and text pointer
00:000061C4 2C4F            	   715: 	MOVE.L	SP,A6		dig into the stack to find 'LOPVAR'
00:000061C6 600C            	   716: 	BRA	FR7
                            	   717: FR6
00:000061C8 4DEE0024        	   718: 	lea 36(a6),a6			; look at next stack frame
00:000061CC BDFAFA0E        	   719: 	cmp.l ENDMEM,a6		; safety check
00:000061D0 64000B28        	   720: 	bhs QWHAT
                            	   721: FR7
00:000061D4 2016            	   722: 	MOVE.L	(A6),D0 	; is it zero?
00:000061D6 6714            	   723: 	BEQ	FR8						; if so, we're done
00:000061D8 B0BA0F36        	   724: 	CMP.L	LOPVAR,D0		; same as current LOPVAR?
00:000061DC 66EA            	   725: 	BNE	FR6						; nope, look some more
00:000061DE 244F            	   726: 	MOVE.L	SP,A2			; Else remove 9 long words from...
00:000061E0 224E            	   727: 	MOVE.L	A6,A1			; inside the stack.
00:000061E2 47E90024        	   728: 	lea	36(a1),a3
00:000061E6 61000C50        	   729: 	bsr	MVDOWN
00:000061EA 2E4B            	   730: 	MOVE.L	A3,SP		set the SP 9 long words up
                            	   731: FR8
00:000061EC 6000FF14        	   732: 	BRA	FINISH		and continue execution
                            	   733: 
                            	   734: NEXT	
00:000061F0 6100078A        	   735: 	bsr	TSTV						; get address of variable
00:000061F4 65000B04        	   736: 	bcs	QWHAT						; if no variable, say "What?"
00:000061F8 2240            	   737: 	move.l d0,a1				; save variable's address
                            	   738: NX0
00:000061FA 203A0F14        	   739: 	move.l LOPVAR,D0		; If 'LOPVAR' is zero, we never...
00:000061FE 67000AFA        	   740: 	beq	QWHAT						; had a FOR loop, so say "What?"
00:00006202 B3C0            	   741: 	cmp.l	d0,a1					; else we check them
00:00006204 6706            	   742: 	beq	NX3							; OK, they agree
00:00006206 61000C38        	   743: 	bsr	POPA						; nope, let's see the next frame
00:0000620A 60EE            	   744: 	bra	NX0
                            	   745: NX3	
00:0000620C F22948000004    	   746: 	fmove.x	4(a1),fp0		; get control variable's value
00:00006212 F23A48220EFE    	   747: 	fadd.x LOPINC,fp0		; add in loop increment
                            	   748: ;	BVS	QHOW		say "How?" for 32-bit overflow
00:00006218 F22968000004    	   749: 	fmove.x	fp0,4(a1)		; save control variable's new value
00:0000621E F23A48800EFE    	   750: 	fmove.x	LOPLMT,fp1	; get loop's limit value
00:00006224 F23A503A0EEC    	   751: 	ftst LOPINC
00:0000622A F293000E        	   752: 	FBGE NX1				; branch if loop increment is positive
00:0000622E F2276800        	   753: 	FMOVE.X FP0,-(a7)	; exchange FP0,FP1
00:00006232 F2000400        	   754: 	FMOVE.X FP1,FP0
00:00006236 F21F4880        	   755: 	FMOVE.X (a7)+,FP1
                            	   756: NX1	
00:0000623A F20000B8        	   757: 	FCMP FP0,FP1		;	test against limit
00:0000623E F2940012        	   758: 	FBLT NX2				; branch if outside limit
00:00006242 23FA0EE800007100	   759: 	MOVE.L LOPLN,CURRNT	Within limit, go back to the...
00:0000624A 207A0EE4        	   760: 	MOVE.L LOPPT,A0	saved 'CURRNT' and text pointer.
00:0000624E 6000FEB2        	   761: 	BRA	FINISH
                            	   762: NX2
00:00006252 61000BEC        	   763: 	bsr	POPA		purge this loop
00:00006256 6000FEAA        	   764: 	BRA	FINISH
                            	   765: 
                            	   766: *******************************************************************
                            	   767: *
                            	   768: * *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                            	   769: *
                            	   770: * 'REM' can be followed by anything and is ignored by the
                            	   771: * interpreter.
                            	   772: *
                            	   773: * 'IF' is followed by an expression, as a condition and one or
                            	   774: * more commands (including other 'IF's) separated by colons.
                            	   775: * Note that the word 'THEN' is not used.  The interpreter evaluates
                            	   776: * the expression.  If it is non-zero, execution continues.  If it
                            	   777: * is zero, the commands that follow are ignored and execution
                            	   778: * continues on the next line.
                            	   779: *
                            	   780: * 'INPUT' is like the 'PRINT' command, and is followed by a list
                            	   781: * of items.  If the item is a string in single or double quotes,
                            	   782: * or is an underline (back arrow), it has the same effect as in
                            	   783: * 'PRINT'.  If an item is a variable, this variable name is
                            	   784: * printed out followed by a colon, then the interpreter waits for
                            	   785: * an expression to be typed in.  The variable is then set to the
                            	   786: * value of this expression.  If the variable is preceeded by a
                            	   787: * string (again in single or double quotes), the string will be
                            	   788: * displayed followed by a colon.  The interpreter the waits for an
                            	   789: * expression to be entered and sets the variable equal to the
                            	   790: * expression's value.  If the input expression is invalid, the
                            	   791: * interpreter will print "What?", "How?", or "Sorry" and reprint
                            	   792: * the prompt and redo the input.  The execution will not terminate
                            	   793: * unless you press control-C.  This is handled in 'INPERR'.
                            	   794: *
                            	   795: * 'LET' is followed by a list of items separated by commas.
                            	   796: * Each item consists of a variable, an equals sign, and an
                            	   797: * expression.  The interpreter evaluates the expression and sets
                            	   798: * the variable to that value.  The interpreter will also handle
                            	   799: * 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                            	   800: 
                            	   801: REM
00:0000625A 600A            	   802: 	BRA	IF2		skip the rest of the line
                            	   803: 
                            	   804: IF
00:0000625C 61000290        	   805: 	bsr	INT_EXPR		evaluate the expression
                            	   806: IF1
00:00006260 4A80            	   807: 	TST.L	d0		is it zero?
00:00006262 6600FD98        	   808: 	BNE	RUNSML		if not, continue
                            	   809: IF2
00:00006266 2248            	   810: 	MOVE.L	A0,A1
00:00006268 7200            	   811: 	CLR.L	D1
00:0000626A 61000BAA        	   812: 	bsr	FNDSKP		if so, skip the rest of the line
00:0000626E 6400FD82        	   813: 	BCC	RUNTSL		and run the next line
00:00006272 6000F9D6        	   814: 	BRA	WSTART		if no next line, do a warm start
                            	   815: 
00:00006276 2E7A0E94        	   816: INPERR	MOVE.L	STKINP,SP	restore the old stack pointer
00:0000627A 23DF00007100    	   817: 	MOVE.L	(SP)+,CURRNT	and old 'CURRNT'
00:00006280 588F            	   818: 	ADDQ.L	#4,SP
00:00006282 205F            	   819: 	MOVE.L	(SP)+,A0	and old text pointer
                            	   820: 
                            	   821: INPUT	
00:00006284 2F08            	   822: 	MOVE.L	A0,-(SP)	save in case of error
00:00006286 61000278        	   823: 	bsr EXPR
00:0000628A 0C000002        	   824: 	cmpi.b #DT_STRING,d0
00:0000628E 6622            	   825: 	bne IP6
00:00006290 F239680000040600	   826: 	fmove.x fp0,_fpWork
00:00006298 323900040600    	   827: 	move.w _fpWork,d1
00:0000629E 227900040604    	   828: 	move.l _fpWork+4,a1
00:000062A4 61000C2E        	   829: 	bsr PRTSTR2
                            	   830: ;	bsr	QTSTG		is next item a string?
                            	   831: ;	BRA.S	IP2		nope
                            	   832: IP7
00:000062A8 610006D2        	   833: 	bsr	TSTV		yes, but is it followed by a variable?
00:000062AC 655C            	   834: 	BCS	IP4		if not, branch
00:000062AE 2440            	   835: 	MOVE.L	D0,A2		put away the variable's address
00:000062B0 601E            	   836: 	BRA	IP3		if so, input to variable
                            	   837: IP6
00:000062B2 2057            	   838: 	move.l (sp),a0	; restore text pointer
00:000062B4 60F2            	   839: 	bra IP7
                            	   840: IP2
00:000062B6 2F08            	   841: 	MOVE.L	A0,-(SP)	save for 'PRTSTG'
00:000062B8 610006C2        	   842: 	bsr	TSTV		must be a variable now
00:000062BC 65000A3C        	   843: 	BCS	QWHAT		"What?" it isn't?
00:000062C0 2440            	   844: 	MOVE.L	D0,A2		put away the variable's address
00:000062C2 1410            	   845: 	MOVE.B	(A0),D2 	get ready for 'PRTSTG'
00:000062C4 4200            	   846: 	CLR.B	D0
00:000062C6 1080            	   847: 	MOVE.B	D0,(A0)
00:000062C8 225F            	   848: 	MOVE.L	(SP)+,A1
00:000062CA 61000BE6        	   849: 	bsr	PRTSTG		print string as prompt
00:000062CE 1082            	   850: 	MOVE.B	D2,(A0) 	restore text
                            	   851: IP3
00:000062D0 2F08            	   852: 	MOVE.L	A0,-(SP)	save in case of error
00:000062D2 2F3A0E2C        	   853: 	MOVE.L	CURRNT,-(SP)	also save 'CURRNT'
00:000062D6 23FCFFFFFFFF0000	   854: 	MOVE.L	#-1,CURRNT	flag that we are in INPUT
00:000062DE 7100
00:000062E0 23CF0000710C    	   855: 	MOVE.L	SP,STKINP	save the stack pointer too
00:000062E6 2F0A            	   856: 	MOVE.L	A2,-(SP)	save the variable address
00:000062E8 103C003A        	   857: 	MOVE.B	#':',D0         print a colon first
00:000062EC 61000A62        	   858: 	bsr	GETLN		then get an input line
00:000062F0 41FA0E66        	   859: 	LEA	BUFFER,A0	point to the buffer
00:000062F4 6100020A        	   860: 	bsr	EXPR		evaluate the input
00:000062F8 245F            	   861: 	MOVE.L	(SP)+,A2	restore the variable address
00:000062FA 2480            	   862: 	move.l d0,(a2)			; save data type
00:000062FC F22A68000004    	   863: 	FMOVE.X	FP0,4(A2) 	; save value in variable
00:00006302 23DF00007100    	   864: 	MOVE.L	(SP)+,CURRNT	restore old 'CURRNT'
00:00006308 205F            	   865: 	MOVE.L	(SP)+,A0	and the old text pointer
                            	   866: IP4
00:0000630A 588F            	   867: 	ADDQ.L	#4,SP		clean up the stack
00:0000630C 61000C34        	   868: 	bsr	TSTC		is the next thing a comma?
00:00006310 2C              	   869: 	DC.B	',',IP5-*
00:00006311 05
00:00006312 6000FF70        	   870: 	BRA	INPUT		yes, more items
                            	   871: IP5
00:00006316 6000FDEA        	   872: 	BRA	FINISH
                            	   873: 
                            	   874: DEFLT
00:0000631A 0C10000D        	   875: 	CMP.B	#CR,(A0)	; empty line is OK
00:0000631E 6700FDE2        	   876: 	BEQ	FINISH			; else it is 'LET'
                            	   877: 
                            	   878: LET
00:00006322 6100098A        	   879: 	bsr	SETVAL		 	; do the assignment
00:00006326 61000C1A        	   880: 	bsr	TSTC				; check for more 'LET' items
00:0000632A 2C              	   881: 	DC.B	',',LT1-*
00:0000632B 03
00:0000632C 60F4            	   882: 	BRA	LET
                            	   883: LT1
00:0000632E 6000FDD2        	   884: 	BRA	FINISH			; until we are finished.
                            	   885: 
                            	   886: 
                            	   887: *******************************************************************
                            	   888: *
                            	   889: * *** LOAD *** & SAVE ***
                            	   890: *
                            	   891: * These two commands transfer a program to/from an auxiliary
                            	   892: * device such as a cassette, another computer, etc.  The program
                            	   893: * is converted to an easily-stored format: each line starts with
                            	   894: * a colon, the line no. as 4 hex digits, and the rest of the line.
                            	   895: * At the end, a line starting with an '@' sign is sent.  This
                            	   896: * format can be read back with a minimum of processing time by
                            	   897: * the 68000.
                            	   898: *
                            	   899: LOAD	
00:00006332 207AF8A4        	   900: 	MOVE.L TXTBGN,A0	set pointer to start of prog. area
00:00006336 103C000D        	   901: 	MOVE.B #CR,D0		For a CP/M host, tell it we're ready...
00:0000633A 6100F890        	   902: 	BSR	GOAUXO		by sending a CR to finish PIP command.
                            	   903: LOD1	
00:0000633E 6100F890        	   904: 	BSR	GOAUXI		look for start of line
00:00006342 67FA            	   905: 	BEQ	LOD1
00:00006344 B03C0040        	   906: 	CMP.B	#'@',D0         end of program?
00:00006348 671E            	   907: 	BEQ	LODEND
00:0000634A B03C003A        	   908: 	CMP.B	#':',D0         if not, is it start of line?
00:0000634E 66EE            	   909: 	BNE	LOD1		if not, wait for it
00:00006350 6120            	   910: 	BSR	GBYTE		get first byte of line no.
00:00006352 10C1            	   911: 	MOVE.B	D1,(A0)+	store it
00:00006354 611C            	   912: 	BSR	GBYTE		get 2nd bye of line no.
00:00006356 10C1            	   913: 	MOVE.B	D1,(A0)+	store that, too
                            	   914: LOD2
00:00006358 6100F876        	   915: 	BSR	GOAUXI		get another text char.
00:0000635C 67FA            	   916: 	BEQ	LOD2
00:0000635E 10C0            	   917: 	MOVE.B	D0,(A0)+	store it
00:00006360 B03C000D        	   918: 	CMP.B	#CR,D0		is it the end of the line?
00:00006364 66F2            	   919: 	BNE	LOD2		if not, go back for more
00:00006366 60D6            	   920: 	BRA	LOD1		if so, start a new line
                            	   921: LODEND
00:00006368 23C800007148    	   922: 	MOVE.L	A0,TXTUNF	set end-of program pointer
00:0000636E 6000F8DA        	   923: 	BRA	WSTART		back to direct mode
                            	   924: 
                            	   925: GBYTE
00:00006372 7401            	   926: 	MOVEQ	#1,D2		get two hex characters from auxiliary
00:00006374 7200            	   927: 	CLR.L	D1		and store them as a byte in D1
                            	   928: GBYTE1	
00:00006376 6100F858        	   929: 	BSR	GOAUXI		get a char.
00:0000637A 67FA            	   930: 	BEQ	GBYTE1
00:0000637C B03C0041        	   931: 	CMP.B	#'A',D0
00:00006380 6502            	   932: 	BCS	GBYTE2
00:00006382 5F00            	   933: 	SUBQ.B	#7,D0		if greater than 9, adjust
                            	   934: GBYTE2
00:00006384 C03C000F        	   935: 	AND.B	#$F,D0		strip ASCII
00:00006388 E909            	   936: 	LSL.B	#4,D1		put nybble into the result
00:0000638A 8200            	   937: 	OR.B	D0,D1
00:0000638C 51CAFFE8        	   938: 	DBRA	D2,GBYTE1	get another char.
00:00006390 4E75            	   939: 	RTS
                            	   940: 
                            	   941: SAVE
00:00006392 207AF844        	   942: 	MOVE.L	TXTBGN,A0	set pointer to start of prog. area
00:00006396 227A0DB0        	   943: 	MOVE.L	TXTUNF,A1	set pointer to end of prog. area
                            	   944: SAVE1	
00:0000639A 103C000D        	   945: 	MOVE.B	#CR,D0		send out a CR & LF (CP/M likes this)
00:0000639E 6100F82C        	   946: 	BSR	GOAUXO
00:000063A2 103C000A        	   947: 	MOVE.B	#LF,D0
00:000063A6 6100F824        	   948: 	BSR	GOAUXO
00:000063AA B3C8            	   949: 	CMP.L	A0,A1		are we finished?
00:000063AC 631E            	   950: 	BLS	SAVEND
00:000063AE 103C003A        	   951: 	MOVE.B	#':',D0         if not, start a line
00:000063B2 6100F818        	   952: 	BSR	GOAUXO
00:000063B6 1218            	   953: 	MOVE.B	(A0)+,D1	send first half of line no.
00:000063B8 6136            	   954: 	BSR	PBYTE
00:000063BA 1218            	   955: 	MOVE.B	(A0)+,D1	and send 2nd half
00:000063BC 6132            	   956: 	BSR	PBYTE
                            	   957: SAVE2
00:000063BE 1018            	   958: 	MOVE.B	(A0)+,D0	get a text char.
00:000063C0 B03C000D        	   959: 	CMP.B	#CR,D0		is it the end of the line?
00:000063C4 67D4            	   960: 	BEQ	SAVE1		if so, send CR & LF and start new line
00:000063C6 6100F804        	   961: 	BSR	GOAUXO		send it out
00:000063CA 60F2            	   962: 	BRA	SAVE2		go back for more text
                            	   963: SAVEND
00:000063CC 103C0040        	   964: 	MOVE.B	#'@',D0         send end-of-program indicator
00:000063D0 6100F7FA        	   965: 	BSR	GOAUXO
00:000063D4 103C000D        	   966: 	MOVE.B	#CR,D0		followed by a CR & LF
00:000063D8 6100F7F2        	   967: 	BSR	GOAUXO
00:000063DC 103C000A        	   968: 	MOVE.B	#LF,D0
00:000063E0 6100F7EA        	   969: 	BSR	GOAUXO
00:000063E4 103C001A        	   970: 	MOVE.B	#$1A,D0 	and a control-Z to end the CP/M file
00:000063E8 6100F7E2        	   971: 	BSR	GOAUXO
00:000063EC 6000F85C        	   972: 	BRA	WSTART		then go do a warm start
                            	   973: 
00:000063F0 7401            	   974: PBYTE	MOVEQ	#1,D2		send two hex characters from D1's low byte
00:000063F2 E919            	   975: PBYTE1	ROL.B	#4,D1		get the next nybble
00:000063F4 1001            	   976: 	MOVE.B	D1,D0
00:000063F6 C03C000F        	   977: 	AND.B	#$F,D0		strip off garbage
00:000063FA D03C0030        	   978: 	ADD.B	#'0',D0         make it into ASCII
00:000063FE B03C0039        	   979: 	CMP.B	#'9',D0
00:00006402 6302            	   980: 	BLS	PBYTE2
00:00006404 5E00            	   981: 	ADDQ.B	#7,D0		adjust if greater than 9
00:00006406 6100F7C4        	   982: PBYTE2	BSR	GOAUXO		send it out
00:0000640A 51CAFFE6        	   983: 	DBRA	D2,PBYTE1	then send the next nybble
00:0000640E 4E75            	   984: 	RTS
                            	   985: 
                            	   986: *******************************************************************
                            	   987: *
                            	   988: * *** POKE *** & CALL ***
                            	   989: *
                            	   990: * 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                            	   991: * address specified by 'expr1'.
                            	   992: *
                            	   993: * 'CALL expr' jumps to the machine language subroutine whose
                            	   994: * starting address is specified by 'expr'.  The subroutine can use
                            	   995: * all registers but must leave the stack the way it found it.
                            	   996: * The subroutine returns to the interpreter by executing an RTS.
                            	   997: *
                            	   998: POKE
00:00006410 1E3C0042        	   999: 	move.b #'B',d7
00:00006414 1210            	  1000: 	move.b (a0),d1
00:00006416 0C01002E        	  1001: 	cmpi.b #'.',d1
00:0000641A 6620            	  1002: 	bne .0001
00:0000641C 5248            	  1003: 	addq #1,a0
00:0000641E 1210            	  1004: 	move.b (a0),d1
00:00006420 0C010042        	  1005: 	cmpi.b #'B',d1
00:00006424 6712            	  1006: 	beq .0002
00:00006426 0C010057        	  1007: 	cmpi.b #'W',d1
00:0000642A 670C            	  1008: 	beq .0002
00:0000642C 0C01004C        	  1009: 	cmpi.b #'L',d1
00:00006430 6706            	  1010: 	beq .0002
00:00006432 0C010046        	  1011: 	cmpi.b #'F',d1
00:00006436 664E            	  1012: 	bne	PKER
                            	  1013: .0002
00:00006438 5248            	  1014: 	addq #1,a0
00:0000643A 1E01            	  1015: 	move.b d1,d7
                            	  1016: .0001
00:0000643C 610000B0        	  1017: 	BSR	INT_EXPR		get the memory address
00:00006440 61000B00        	  1018: 	bsr	TSTC		it must be followed by a comma
00:00006444 2C              	  1019: 	DC.B	',',PKER-*
00:00006445 41
00:00006446 2F00            	  1020: 	move.l d0,-(sp)		; save the address
00:00006448 61000096        	  1021: 	BSR	NUM_EXPR			; get the value to be POKE'd
00:0000644C 225F            	  1022: 	move.l	(sp)+,a1	; get the address back
00:0000644E 0C070042        	  1023: 	CMPI.B #'B',D7
00:00006452 6608            	  1024: 	BNE .0003
00:00006454 F2117800        	  1025: 	FMOVE.B	FP0,(A1) 	store the byte in memory
00:00006458 6000FCA8        	  1026: 	BRA	FINISH
                            	  1027: .0003
00:0000645C 0C070057        	  1028: 	CMPI.B #'W',d7
00:00006460 6608            	  1029: 	BNE .0004
00:00006462 F2117000        	  1030: 	FMOVE.W FP0,(A1)
00:00006466 6000FC9A        	  1031: 	BRA FINISH
                            	  1032: .0004
00:0000646A 0C07004C        	  1033: 	CMPI.B #'L',D7
00:0000646E 6608            	  1034: 	BNE .0005
00:00006470 F2116000        	  1035: 	FMOVE.L FP0,(A1)
00:00006474 6000FC8C        	  1036: 	BRA FINISH
                            	  1037: .0005
00:00006478 0C070046        	  1038: 	CMPI.B #'F',D7
00:0000647C 6608            	  1039: 	BNE .0006
00:0000647E F2116800        	  1040: 	FMOVE.X FP0,(A1)
00:00006482 6000FC7E        	  1041: 	BRA FINISH
                            	  1042: .0006
                            	  1043: PKER
00:00006486 60000872        	  1044: 	BRA	QWHAT		if no comma, say "What?"
                            	  1045: 
                            	  1046: CALL	
00:0000648A 6162            	  1047: 	BSR	INT_EXPR		; get the subroutine's address
00:0000648C 4A80            	  1048: 	TST.l d0				; make sure we got a valid address
00:0000648E 670008B2        	  1049: 	BEQ QHOW				; if not, say "How?"
00:00006492 2F08            	  1050: 	MOVE.L A0,-(SP)	; save the text pointer
00:00006494 2240            	  1051: 	MOVE.L D0,A1
00:00006496 4E91            	  1052: 	JSR	(A1)				; jump to the subroutine
00:00006498 205F            	  1053: 	MOVE.L (SP)+,A0	; restore the text pointer
00:0000649A 6000FC66        	  1054: 	BRA	FINISH
                            	  1055: 
                            	  1056: ;******************************************************************
                            	  1057: ;
                            	  1058: ; *** EXPR ***
                            	  1059: ;
                            	  1060: ; 'EXPR' evaluates arithmetical or logical expressions.
                            	  1061: ; <EXPR>::=<EXPR2>
                            	  1062: ;	   <EXPR2><rel.op.><EXPR2>
                            	  1063: ; where <rel.op.> is one of the operators in TAB8 and the result
                            	  1064: ; of these operations is 1 if true and 0 if false.
                            	  1065: ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                            	  1066: ; where () are optional and (... are optional repeats.
                            	  1067: ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                            	  1068: ; <EXPR4>::=<variable>
                            	  1069: ;	    <function>
                            	  1070: ;	    (<EXPR>)
                            	  1071: ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                            	  1072: ; as an index, functions can have an <EXPR> as arguments, and
                            	  1073: ; <EXPR4> can be an <EXPR> in parenthesis.
                            	  1074: 
                            	  1075: ;-------------------------------------------------------------------------------
                            	  1076: ; Push a value on the stack.
                            	  1077: ;-------------------------------------------------------------------------------
                            	  1078: 
                            	  1079: XP_PUSH:
00:0000649E 225F            	  1080: 	move.l (sp)+,a1				; a1 = return address
00:000064A0 2F3900040098    	  1081: 	move.l _canary,-(sp)	; push the canary
00:000064A6 4FEFFFF0        	  1082: 	sub.l #16,sp					; allocate for value
00:000064AA 2E80            	  1083: 	move.l d0,(sp)				; push data type
00:000064AC F22F68000004    	  1084: 	fmove.x fp0,4(sp)			; and value
00:000064B2 4ED1            	  1085: 	jmp (a1)
                            	  1086: 
                            	  1087: ;-------------------------------------------------------------------------------
                            	  1088: ; Pop value from stack into first operand.
                            	  1089: ;-------------------------------------------------------------------------------
                            	  1090: 	
                            	  1091: XP_POP:
00:000064B4 225F            	  1092: 	move.l (sp)+,a1			; get return address
00:000064B6 2017            	  1093: 	move.l (sp),d0			; pop data type
00:000064B8 F22F48000004    	  1094: 	fmove.x 4(sp),fp0		; and data element
00:000064BE 4FEF0010        	  1095: 	add.l #16,sp
00:000064C2 A2970003        	  1096: 	cchk (sp)						; check the canary
00:000064C6 588F            	  1097: 	add.l #4,sp					; pop canary	
00:000064C8 4ED1            	  1098: 	jmp (a1)
                            	  1099: 
                            	  1100: ;-------------------------------------------------------------------------------
                            	  1101: ; Pop value from stack into second operand.
                            	  1102: ;-------------------------------------------------------------------------------
                            	  1103: 
                            	  1104: XP_POP1:
00:000064CA 225F            	  1105: 	move.l (sp)+,a1			; get return address
00:000064CC 2217            	  1106: 	move.l (sp),d1			; pop data type
00:000064CE F22F48800004    	  1107: 	fmove.x 4(sp),fp1		; and data element
00:000064D4 4FEF0010        	  1108: 	add.l #16,sp
00:000064D8 A2970003        	  1109: 	cchk (sp)						; check the canary
00:000064DC 588F            	  1110: 	add.l #4,sp					; pop canary
00:000064DE 4ED1            	  1111: 	jmp (a1)
                            	  1112: 
                            	  1113: ;-------------------------------------------------------------------------------
                            	  1114: ; Get and expression and make sure it is numeric.
                            	  1115: ;-------------------------------------------------------------------------------
                            	  1116: 
                            	  1117: NUM_EXPR:
00:000064E0 611E            	  1118: 	bsr EXPR
00:000064E2 0C8000000001    	  1119: 	cmpi.l #DT_NUMERIC,d0
00:000064E8 66000860        	  1120: 	bne ETYPE
00:000064EC 4E75            	  1121: 	rts
                            	  1122: 
                            	  1123: ;-------------------------------------------------------------------------------
                            	  1124: ; Get and expression and make sure it is numeric. Convert to integer.
                            	  1125: ;-------------------------------------------------------------------------------
                            	  1126: 
                            	  1127: INT_EXPR:
00:000064EE 6110            	  1128: 	bsr EXPR
00:000064F0 0C8000000001    	  1129: 	cmpi.l #DT_NUMERIC,d0
00:000064F6 66000852        	  1130: 	bne ETYPE
00:000064FA F2006000        	  1131: 	fmove.l fp0,d0
00:000064FE 4E75            	  1132: 	rts
                            	  1133: 
                            	  1134: ;-------------------------------------------------------------------------------
                            	  1135: ; The top level of the expression parser.
                            	  1136: ; Get an expression, string or numeric.
                            	  1137: ;
                            	  1138: ; EXEC will smash a lot of regs, so push the current expression value before
                            	  1139: ; doing EXEC
                            	  1140: ;-------------------------------------------------------------------------------
                            	  1141: 
                            	  1142: EXPR:
                            	  1143: EXPR_OR:
00:00006500 6124            	  1144: 	BSR EXPR_AND
00:00006502 619A            	  1145: 	BSR XP_PUSH
00:00006504 43FAF8ED        	  1146: 	LEA TAB10,A1
00:00006508 45FAF9CA        	  1147: 	LEA TAB10_1,A2
00:0000650C 6000F9E6        	  1148: 	BRA EXEC
                            	  1149: 	
                            	  1150: ;-------------------------------------------------------------------------------
                            	  1151: ; Boolean 'Or' level
                            	  1152: ;-------------------------------------------------------------------------------
                            	  1153: 
                            	  1154: XP_OR:
00:00006510 6114            	  1155: 	BSR EXPR_AND
00:00006512 61B6            	  1156: 	bsr XP_POP1
00:00006514 613E            	  1157: 	bsr CheckNumeric
00:00006516 F2016080        	  1158: 	FMOVE.L FP1,D1
00:0000651A F2006000        	  1159: 	FMOVE.L FP0,D0
00:0000651E 8081            	  1160: 	OR.L D1,D0
00:00006520 F2004000        	  1161: 	FMOVE.L D0,FP0
00:00006524 4E75            	  1162: 	rts
                            	  1163: 	
                            	  1164: ;-------------------------------------------------------------------------------
                            	  1165: ; Boolean 'And' level
                            	  1166: ;-------------------------------------------------------------------------------
                            	  1167: 
                            	  1168: EXPR_AND:
00:00006526 613E            	  1169: 	bsr EXPR_REL
00:00006528 6100FF74        	  1170: 	bsr XP_PUSH
00:0000652C 43FAF8C1        	  1171: 	LEA TAB9,A1
00:00006530 45FAF99A        	  1172: 	LEA TAB9_1,A2
00:00006534 6000F9BE        	  1173: 	BRA EXEC
                            	  1174: 
                            	  1175: XP_AND:
00:00006538 612C            	  1176: 	BSR EXPR_REL
00:0000653A 618E            	  1177: 	bsr XP_POP1
00:0000653C 6116            	  1178: 	bsr CheckNumeric
00:0000653E F2016080        	  1179: 	FMOVE.L FP1,D1
00:00006542 F2006000        	  1180: 	FMOVE.L FP0,D0
00:00006546 C081            	  1181: 	AND.L D1,D0
00:00006548 F2004000        	  1182: 	FMOVE.L D0,FP0
00:0000654C 4E75            	  1183: 	RTS
                            	  1184: 	
                            	  1185: XP_ANDX:
                            	  1186: XP_ORX
00:0000654E 6100FF64        	  1187: 	bsr XP_POP
00:00006552 4E75            	  1188: 	rts
                            	  1189: 
                            	  1190: ;-------------------------------------------------------------------------------
                            	  1191: ; Check that two numeric values are being used.
                            	  1192: ;-------------------------------------------------------------------------------
                            	  1193: 
                            	  1194: CheckNumeric:
00:00006554 0C010001        	  1195: 	CMPI.B #DT_NUMERIC,D1
00:00006558 660007F0        	  1196: 	BNE ETYPE
00:0000655C 0C000001        	  1197: 	CMPI.B #DT_NUMERIC,D0
00:00006560 660007E8        	  1198: 	BNE ETYPE
00:00006564 4E75            	  1199: 	RTS
                            	  1200: 
                            	  1201: ;-------------------------------------------------------------------------------
                            	  1202: ; Relational operator level, <,<=,>=,>,=,<>
                            	  1203: ;-------------------------------------------------------------------------------
                            	  1204: 
                            	  1205: EXPR_REL:
00:00006566 61000088        	  1206: 	bsr	EXPR2
00:0000656A 6100FF32        	  1207: 	bsr XP_PUSH
00:0000656E 43FAF874        	  1208: 	LEA	TAB8,A1 				; look up a relational operator
00:00006572 45FAF93C        	  1209: 	LEA	TAB8_1,A2
00:00006576 6000F97C        	  1210: 	bra	EXEC		go do it
                            	  1211: 
                            	  1212: XP11:
00:0000657A 6100FF38        	  1213: 	bsr XP_POP
00:0000657E 615C            	  1214: 	BSR	XP18		is it ">="?
00:00006580 F2940044        	  1215: 	FBLT XPRT0		no, return D0=0
00:00006584 6048            	  1216: 	BRA	XPRT1		else return D0=1
                            	  1217: 
                            	  1218: XP12:
00:00006586 6100FF2C        	  1219: 	bsr XP_POP
00:0000658A 6150            	  1220: 	BSR	XP18		is it "<>"?
00:0000658C F2810038        	  1221: 	FBEQ XPRT0		no, return D0=0
00:00006590 603C            	  1222: 	BRA	XPRT1		else return D0=1
                            	  1223: 
                            	  1224: XP13:
00:00006592 6100FF20        	  1225: 	bsr XP_POP
00:00006596 6144            	  1226: 	BSR	XP18		is it ">"?
00:00006598 F295002C        	  1227: 	FBLE XPRT0		no, return D0=0
00:0000659C 6030            	  1228: 	BRA	XPRT1		else return D0=1
                            	  1229: 
                            	  1230: XP14:
00:0000659E 6100FF14        	  1231: 	bsr XP_POP
00:000065A2 6138            	  1232: 	BSR	XP18		;is it "<="?
00:000065A4 F2920020        	  1233: 	FBGT XPRT0	;	no, return D0=0
00:000065A8 6024            	  1234: 	BRA	XPRT1		;else return D0=1
                            	  1235: 
                            	  1236: XP15:
00:000065AA 6100FF08        	  1237: 	bsr XP_POP
00:000065AE 612C            	  1238: 	BSR	XP18		; is it "="?
00:000065B0 F28E0014        	  1239: 	FBNE XPRT0	;	if not, return D0=0
00:000065B4 6018            	  1240: 	BRA	XPRT1		;else return D0=1
                            	  1241: XP15RT
00:000065B6 4E75            	  1242: 	RTS
                            	  1243: 
                            	  1244: XP16:
00:000065B8 6100FEFA        	  1245: 	bsr XP_POP
00:000065BC 611E            	  1246: 	BSR	XP18		; is it "<"?
00:000065BE F2930006        	  1247: 	FBGE XPRT0	;	if not, return D0=0
00:000065C2 600A            	  1248: 	BRA	XPRT1		; else return D0=1
00:000065C4 4E75            	  1249: 	RTS
                            	  1250: 
                            	  1251: XPRT0:
00:000065C6 F23C58000000    	  1252: 	FMOVE.B #0,FP0	; return fp0 = 0 (false)
00:000065CC 4E75            	  1253: 	RTS
                            	  1254: 
                            	  1255: XPRT1:
00:000065CE F23C58000001    	  1256: 	FMOVE.B #1,FP0	; return fp0 = 1 (true)
00:000065D4 4E75            	  1257: 	RTS
                            	  1258: 
                            	  1259: XP17:								; it's not a rel. operator
00:000065D6 6100FEDC        	  1260: 	bsr XP_POP				;	return FP0=<EXPR2>
00:000065DA 4E75            	  1261: 	rts
                            	  1262: 
                            	  1263: XP18:
00:000065DC 6100FEC0        	  1264: 	bsr XP_PUSH
00:000065E0 610E            	  1265: 	bsr	EXPR2					; do second <EXPR2>
00:000065E2 6100FEE6        	  1266: 	bsr XP_POP1
00:000065E6 6100FF6C        	  1267: 	bsr CheckNumeric
00:000065EA F20000B8        	  1268: 	fcmp fp0,fp1			; compare with the first result
00:000065EE 4E75            	  1269: 	rts								; return the result
                            	  1270: 
                            	  1271: ;-------------------------------------------------------------------------------
                            	  1272: ; Add/Subtract operator level, +,-
                            	  1273: ;-------------------------------------------------------------------------------
                            	  1274: 
                            	  1275: EXPR2
00:000065F0 61000950        	  1276: 	bsr	TSTC		; negative sign?
00:000065F4 2D              	  1277: 	DC.B	'-',XP21-*
00:000065F5 09
00:000065F6 F23C58000000    	  1278: 	FMOVE.B #0,FP0
00:000065FC 604C            	  1279: 	BRA	XP26
                            	  1280: XP21	
00:000065FE 61000942        	  1281: 	bsr	TSTC		; positive sign? ignore it
00:00006602 2B              	  1282: 	DC.B	'+',XP22-*
00:00006603 01
                            	  1283: XP22
00:00006604 610000C8        	  1284: 	BSR	EXPR3		; first <EXPR3>
                            	  1285: XP23
00:00006608 61000938        	  1286: 	bsr	TSTC		; add?
00:0000660C 2B              	  1287: 	DC.B	'+',XP25-*
00:0000660D 37
00:0000660E 6100FE8E        	  1288: 	bsr XP_PUSH
00:00006612 610000BA        	  1289: 	BSR	EXPR3					; get the second <EXPR3>
                            	  1290: XP24
00:00006616 6100FEB2        	  1291: 	bsr XP_POP1
00:0000661A B03C0001        	  1292: 	CMP.B #DT_NUMERIC,d0
00:0000661E 660C            	  1293: 	BNE .notNum
00:00006620 B23C0001        	  1294: 	CMP.B #DT_NUMERIC,d1
00:00006624 6606            	  1295: 	BNE .notNum
00:00006626 F2000422        	  1296: 	FADD FP1,FP0			; add it to the first <EXPR3>
                            	  1297: ;	FBVS	QHOW		branch if there's an overflow
00:0000662A 60DC            	  1298: 	BRA	XP23		else go back for more operations
                            	  1299: .notNum
00:0000662C B0BC00000002    	  1300: 	cmp.l #DT_STRING,d0
00:00006632 66000716        	  1301: 	bne ETYPE
00:00006636 B2BC00000002    	  1302: 	cmp.l #DT_STRING,d1
00:0000663C 6600070C        	  1303: 	bne ETYPE
00:00006640 611E            	  1304: 	bsr ConcatString
00:00006642 4E75            	  1305: 	rts
                            	  1306: 
                            	  1307: XP25
00:00006644 610008FC        	  1308: 	bsr	TSTC							; subtract?
00:00006648 2D              	  1309: 	dc.b	'-',XP27-*
00:00006649 15
                            	  1310: XP26
00:0000664A 6100FE52        	  1311: 	bsr XP_PUSH
00:0000664E 617E            	  1312: 	BSR	EXPR3					; get second <EXPR3>
00:00006650 0C000001        	  1313: 	cmpi.b #DT_NUMERIC,d0
00:00006654 660006F4        	  1314: 	bne ETYPE
00:00006658 F200001A        	  1315: 	FNEG FP0					; change its sign
00:0000665C 60B8            	  1316: 	JMP	XP24					; and do an addition
                            	  1317: 
                            	  1318: XP27
00:0000665E 4E75            	  1319: 	rts
                            	  1320: 
                            	  1321: ;-------------------------------------------------------------------------------
                            	  1322: ; Concatonate strings, for the '+' operator.
                            	  1323: ;
                            	  1324: ; Parameters:
                            	  1325: ;		fp0 = holds string descriptor for second string
                            	  1326: ;		fp1 = holds string descriptor for first string
                            	  1327: ;	Returns:
                            	  1328: ;		fp0 = string descriptor for combined strings
                            	  1329: ;-------------------------------------------------------------------------------
                            	  1330: 
                            	  1331: ConcatString:
00:00006660 F239688000040600	  1332: 	fmove.x fp1,_fpWork		; save first string descriptor to memory
00:00006668 F239680000040610	  1333: 	fmove.x fp0,_fpWork+16; save second string descriptor to memory
00:00006670 343900040600    	  1334: 	move.w _fpWork,d2			; d2 = length of first string
00:00006676 D47900040610    	  1335: 	add.w	_fpWork+16,d2		; add length of second string
00:0000667C 48C2            	  1336: 	ext.l d2							; make d2 a long word
00:0000667E 61000164        	  1337: 	bsr AllocateString		; allocate
00:00006682 2849            	  1338: 	move.l a1,a4					; a4 = allocated string, saved for later
00:00006684 2449            	  1339: 	move.l a1,a2					; a2 = allocated string
00:00006686 3542FFFE        	  1340: 	move.w d2,-2(a2)			; save length of new string (a2)
00:0000668A 227900040604    	  1341: 	move.l _fpWork+4,a1		; a1 = pointer to string text of first string
00:00006690 2649            	  1342: 	move.l a1,a3					; compute pointer to end of first string
00:00006692 363900040600    	  1343: 	move.w _fpWork,d3			; d3 = length of first string
00:00006698 48C3            	  1344: 	ext.l d3
00:0000669A D7C3            	  1345: 	add.l d3,a3						; add length of first string
00:0000669C 61000786        	  1346: 	bsr MVUP							; move from A1 to A2 until A1=A3
00:000066A0 227900040614    	  1347: 	move.l _fpWork+20,a1	; a1 = pointer to second string text
00:000066A6 2649            	  1348: 	move.l a1,a3
00:000066A8 363900040610    	  1349: 	move.w _fpWork+16,d3	; d3 = length of second string
00:000066AE 48C3            	  1350: 	ext.l d3
00:000066B0 D7C3            	  1351: 	add.l d3,a3						; a3 points to end of second string
00:000066B2 61000770        	  1352: 	bsr MVUP							; concatonate on second string
00:000066B6 33C200040600    	  1353: 	move.w d2,_fpWork			; save total string length in fp work
00:000066BC 23CC00040604    	  1354: 	move.l a4,_fpWork+4		; save pointer in fp work area
00:000066C2 7002            	  1355: 	moveq #DT_STRING,d0		; set return data type = string
00:000066C4 F239480000040600	  1356: 	fmove.x _fpWork,fp0		; fp0 = string descriptor
00:000066CC 4E75            	  1357: 	rts
                            	  1358: 
                            	  1359: ;-------------------------------------------------------------------------------
                            	  1360: ; Multiply / Divide operator level, *,/,mod
                            	  1361: ;-------------------------------------------------------------------------------
                            	  1362: 
                            	  1363: EXPR3
00:000066CE 6168            	  1364: 	bsr	EXPR4					; get first <EXPR4>
                            	  1365: XP36
00:000066D0 6100FDCC        	  1366: 	bsr XP_PUSH
                            	  1367: XP30
00:000066D4 43FAF720        	  1368: 	lea TAB11,a1
00:000066D8 45FAF802        	  1369: 	lea TAB11_1,a2
00:000066DC 6000F816        	  1370: 	bra EXEC
                            	  1371: XP31
00:000066E0 61000860        	  1372: 	bsr	TSTC					; multiply?
00:000066E4 2A              	  1373: 	dc.b	'*',XP34-*
00:000066E5 11
00:000066E6 6150            	  1374: 	bsr	EXPR4					; get second <EXPR4>
00:000066E8 6100FDE0        	  1375: 	bsr XP_POP1
00:000066EC 6100FE66        	  1376: 	bsr CheckNumeric
00:000066F0 F2000423        	  1377: 	fmul fp1,fp0			; multiply the two
00:000066F4 60DA            	  1378: 	bra	XP36					; then look for more terms
                            	  1379: XP34
00:000066F6 6100084A        	  1380: 	bsr	TSTC					; divide?
00:000066FA 2F              	  1381: 	dc.b	'/',XP35-*
00:000066FB 15
00:000066FC 613A            	  1382: 	bsr	EXPR4					; get second <EXPR4>
00:000066FE 6100FDCA        	  1383: 	bsr XP_POP1
00:00006702 6100FE50        	  1384: 	bsr CheckNumeric
00:00006706 F20000A0        	  1385: 	fdiv fp0,fp1			; do the division
00:0000670A F2000400        	  1386: 	fmove fp1,fp0
00:0000670E 60C0            	  1387: 	bra	XP36					; go back for any more terms
                            	  1388: XP35
00:00006710 6100FDA2        	  1389: 	bsr XP_POP
00:00006714 4E75            	  1390: 	rts
                            	  1391: XP_MOD:
00:00006716 6120            	  1392: 	bsr EXPR4
00:00006718 6100FDB0        	  1393: 	bsr XP_POP1
00:0000671C F20000A0        	  1394: 	fdiv fp0,fp1			; divide
00:00006720 F2006080        	  1395: 	fmove.l fp1,d0		; convert to integer
00:00006724 F2004180        	  1396: 	fmove.l d0,fp3		; convert back to float
00:00006728 F20001A3        	  1397: 	fmul fp0,fp3			; multiply quotient times divisor
00:0000672C F2000CA8        	  1398: 	fsub fp3,fp1			; subtract from original number
00:00006730 F2000400        	  1399: 	fmove.x fp1,fp0		; return difference in fp0
00:00006734 7001            	  1400: 	moveq #DT_NUMERIC,d0
00:00006736 6098            	  1401: 	bra XP36					; go back and check for more multiply ops
                            	  1402: 	
                            	  1403: ;-------------------------------------------------------------------------------
                            	  1404: ; Lowest Level of expression evaluation.
                            	  1405: ;	Check for
                            	  1406: ;		a function or
                            	  1407: ;		a variable or
                            	  1408: ;		a number or
                            	  1409: ;		a string or
                            	  1410: ;		( expr )
                            	  1411: ;-------------------------------------------------------------------------------
                            	  1412: 
                            	  1413: EXPR4
00:00006738 43FAF670        	  1414: 	LEA	TAB4,A1 			; find possible function
00:0000673C 45FAF72E        	  1415: 	LEA	TAB4_1,A2
00:00006740 6000F7B2        	  1416: 	BRA	EXEC
                            	  1417: XP40
00:00006744 61000236        	  1418: 	bsr	TSTV					; nope, not a function
00:00006748 650C            	  1419: 	bcs	XP41					; nor a variable
00:0000674A 2240            	  1420: 	move.l d0,a1			; a1 = variable address
00:0000674C 2011            	  1421: 	move.l (a1),d0		; return type in d0
00:0000674E F22948000004    	  1422: 	fmove.x 4(a1),fp0	; if a variable, return its value in fp0
                            	  1423: EXP4RT
00:00006754 4E75            	  1424: 	rts
                            	  1425: XP41
00:00006756 61000802        	  1426: 	bsr	TSTNUM				; or is it a number?
00:0000675A F2000400        	  1427: 	fmove fp1,fp0
00:0000675E 0C8000000001    	  1428: 	cmpi.l #DT_NUMERIC,d0
00:00006764 67EE            	  1429: 	beq	EXP4RT				; if so, return it in FP0
                            	  1430: XPSTNG
00:00006766 610007DA        	  1431: 	bsr TSTC					; is it a string constant?
00:0000676A 22              	  1432: 	dc.b '"',XP44-*
00:0000676B 57
00:0000676C 163C0022        	  1433: 	move.b #'"',d3
                            	  1434: XP45
00:00006770 2248            	  1435: 	move.l a0,a1			; record start of string in a1
00:00006772 243C000001FF    	  1436: 	move.l #511,d2		; max 512 characters
                            	  1437: .0003	
00:00006778 1018            	  1438: 	move.b (a0)+,d0		; get a character
00:0000677A 670E            	  1439: 	beq .0001					; should not be a NULL
00:0000677C 0C00000D        	  1440: 	cmpi.b #CR,d0			; CR means the end of line was hit without a close quote
00:00006780 6708            	  1441: 	beq .0001
00:00006782 B003            	  1442: 	cmp.b d3,d0				; close quote?
00:00006784 6708            	  1443: 	beq .0002
00:00006786 51CAFFF0        	  1444: 	dbra d2,.0003			; no close quote, go back for next char
                            	  1445: .0001
00:0000678A 600005B6        	  1446: 	bra QHOW
                            	  1447: .0002
00:0000678E 2008            	  1448: 	move.l a0,d0				; d0 = end of string pointer
00:00006790 9089            	  1449: 	sub.l a1,d0					; compute string length + 1
00:00006792 5340            	  1450: 	subq #1,d0					; subtract out closing quote
00:00006794 2400            	  1451: 	move.l d0,d2				; d2 = string length
00:00006796 2649            	  1452: 	move.l a1,a3				; a3 = pointer to string text
00:00006798 614A            	  1453: 	bsr AllocateString
00:0000679A 2449            	  1454: 	move.l a1,a2				; a2 points to new text area
00:0000679C 2849            	  1455: 	move.l a1,a4				; save a1 for later
00:0000679E 224B            	  1456: 	move.l a3,a1				; a1 = pointer to string in program
00:000067A0 3542FFFE        	  1457: 	move.w d2,-2(a2)		; copy length into place
00:000067A4 D7C2            	  1458: 	add.l d2,a3					; a3 points to end of string
00:000067A6 6100067C        	  1459: 	bsr MVUP						; move from A1 to A2 until A1=A3
00:000067AA 33C200040600    	  1460: 	move.w d2,_fpWork		; copy length into place
00:000067B0 23CC00040604    	  1461: 	move.l a4,_fpWork+4	; copy pointer to text into place
00:000067B6 F239480000040600	  1462: 	fmove.x _fpWork,fp0	; put string descriptor into fp0
00:000067BE 7002            	  1463: 	moveq #DT_STRING,d0	; return string data type
00:000067C0 4E75            	  1464: 	rts
                            	  1465: XP44
00:000067C2 6100077E        	  1466: 	bsr TSTC					; alternate string constant?
00:000067C6 27              	  1467: 	dc.b '''',PARN-*
00:000067C7 07
00:000067C8 163C0027        	  1468: 	move.b #'''',d3
00:000067CC 60A2            	  1469: 	bra XP45
                            	  1470: PARN
00:000067CE 61000772        	  1471: 	bsr	TSTC					; else look for ( EXPR )
00:000067D2 28              	  1472: 	dc.b '(',XP43-*
00:000067D3 0D
00:000067D4 6100FD2A        	  1473: 	bsr	EXPR
00:000067D8 61000768        	  1474: 	bsr	TSTC
00:000067DC 29              	  1475: 	dc.b ')',XP43-*
00:000067DD 03
                            	  1476: XP42	
00:000067DE 4E75            	  1477: 	rts
                            	  1478: XP43
00:000067E0 60000518        	  1479: 	bra	QWHAT					; else say "What?"
                            	  1480: 
                            	  1481: ;-------------------------------------------------------------------------------	
                            	  1482: ; Allocate storage for a string variable.
                            	  1483: ;
                            	  1484: ; Parameters:
                            	  1485: ;		d2 = number of bytes needed
                            	  1486: ; Returns:
                            	  1487: ;		a1 = pointer to string text area
                            	  1488: ;-------------------------------------------------------------------------------	
                            	  1489: 
                            	  1490: AllocateString:
00:000067E4 48E7383C        	  1491: 	movem.l d2-d4/a2-a5,-(sp)
00:000067E8 283A0962        	  1492: 	move.l VARBGN,d4
00:000067EC 227A0956        	  1493: 	move.l LastStr,a1			; a1 = last string
00:000067F0 3611            	  1494: 	move.w (a1),d3				; d3 = length of last string (0)
00:000067F2 48C3            	  1495: 	ext.l d3
00:000067F4 9883            	  1496: 	sub.l d3,d4						; subtract off length
00:000067F6 5784            	  1497: 	subq.l #3,d4					; size of length field+1 for rounding
00:000067F8 9889            	  1498: 	sub.l a1,d4						; and start position
00:000067FA B484            	  1499: 	cmp.l d4,d2						; is there enough room?
00:000067FC 6224            	  1500: 	bhi .needMoreRoom
                            	  1501: .0001
00:000067FE 227A0944        	  1502: 	move.l LastStr,a1
00:00006802 2649            	  1503: 	move.l a1,a3
00:00006804 5489            	  1504: 	addq.l #2,a1					; point a1 to text part of string
00:00006806 3682            	  1505: 	move.w d2,(a3)				; save the length
00:00006808 D7C2            	  1506: 	add.l d2,a3
00:0000680A 568B            	  1507: 	addq.l #3,a3					; 2 for length field, 1 for rounding
00:0000680C 260B            	  1508: 	move.l a3,d3
00:0000680E 0283FFFFFFFE    	  1509: 	andi.l #$FFFFFFFE,d3	; make pointer even wyde
00:00006814 23CB00007144    	  1510: 	move.l a3,LastStr			; set new last str position
00:0000681A 4253            	  1511: 	clr.w (a3)						; set zero length
00:0000681C 4CDF3C1C        	  1512: 	movem.l (sp)+,d2-d4/a2-a5
00:00006820 4E75            	  1513: 	rts
                            	  1514: .needMoreRoom
00:00006822 611E            	  1515: 	bsr GarbageCollectStrings
00:00006824 283A0926        	  1516: 	move.l VARBGN,d4			; d4 = start of variables
00:00006828 227A091A        	  1517: 	move.l LastStr,a1			; a1 = pointer to last string
00:0000682C 3611            	  1518: 	move.w (a1),d3				; d3 = length of last string (likely 0)
00:0000682E 48C3            	  1519: 	ext.l d3
00:00006830 D689            	  1520: 	add.l a1,d3						; d3 = pointer past end of last string
00:00006832 5683            	  1521: 	addq.l #3,d3					; 2 for length, 1 for rounding
00:00006834 9883            	  1522: 	sub.l d3,d4						; free = VARBGN - LastStr+length of (LastStr)
00:00006836 B484            	  1523: 	cmp.l d4,d2						; request < free?
00:00006838 65C4            	  1524: 	blo .0001
00:0000683A 4DFA089C        	  1525: 	lea NOSTRING,a6
00:0000683E 600004C0        	  1526: 	bra ERROR
                            	  1527: 		
                            	  1528: ;-------------------------------------------------------------------------------	
                            	  1529: ; Garbage collect strings. This copies all strings in use to the lower end of
                            	  1530: ; the string area and adjusts the string pointers in variables and on the
                            	  1531: ; stack to point to the new location.
                            	  1532: ;
                            	  1533: ; Modifies:
                            	  1534: ;		none
                            	  1535: ;-------------------------------------------------------------------------------	
                            	  1536: 
                            	  1537: GarbageCollectStrings:
00:00006842 48E70074        	  1538: 	movem.l a1/a2/a3/a5,-(sp)
00:00006846 227A08F8        	  1539: 	move.l StrArea,a1			; source area pointer
00:0000684A 247A08F4        	  1540: 	move.l StrArea,a2			; target area pointer
00:0000684E 2A7A08F4        	  1541: 	move.l LastStr,a5
                            	  1542: .0001
00:00006852 6140            	  1543: 	bsr StringInVar				; check if the string is used by a variable
00:00006854 6506            	  1544: 	bcs .moveString
00:00006856 610000A6        	  1545: 	bsr StringOnStack			; check if string is on string expression stack
00:0000685A 641C            	  1546: 	bcc .nextString				; if not on stack or in a var then move to next string
                            	  1547: 	
                            	  1548: 	; The string is in use, copy to active string area
                            	  1549: .moveString:
00:0000685C 610000D0        	  1550: 	bsr UpdateStringPointers	; update pointer to string on stack or in variable
00:00006860 611C            	  1551: 	bsr NextString				; a3 = pointer to next string
00:00006862 610005CA        	  1552: 	bsr MVUPW							; will copy the length and string text
                            	  1553: .0005
00:00006866 B3CD            	  1554: 	cmp.l a5,a1						; is it the last string?
00:00006868 63E8            	  1555: 	bls .0001
00:0000686A 23CA00007144    	  1556: 	move.l a2,LastStr			; update last string pointer
00:00006870 4252            	  1557: 	clr.w (a2)						; set zero length
00:00006872 4CDF2E00        	  1558: 	movem.l (sp)+,a1/a2/a3/a5
00:00006876 4E75            	  1559: 	rts
                            	  1560: .nextString:
00:00006878 6104            	  1561: 	bsr NextString
00:0000687A 224B            	  1562: 	move.l a3,a1
00:0000687C 60E8            	  1563: 	bra .0005
                            	  1564: 
                            	  1565: ;-------------------------------------------------------------------------------	
                            	  1566: ; Parameters:
                            	  1567: ;		a1 - pointer to current string
                            	  1568: ; Returns:
                            	  1569: ;		a3 - pointer to next string
                            	  1570: ;-------------------------------------------------------------------------------	
                            	  1571: 
                            	  1572: NextString:
00:0000687E 2F04            	  1573: 	move.l d4,-(sp)
00:00006880 3811            	  1574: 	move.w (a1),d4				; d4 = string length
00:00006882 48C4            	  1575: 	ext.l d4							; make d4 long
00:00006884 5684            	  1576: 	addq.l #3,d4					; plus 2 for length field, 1 for rounding
00:00006886 D889            	  1577: 	add.l a1,d4
00:00006888 0284FFFFFFFE    	  1578: 	andi.l #$FFFFFFFE,d4	; make even wyde address
00:0000688E 2644            	  1579: 	move.l d4,a3
00:00006890 281F            	  1580: 	move.l (sp)+,d4
00:00006892 4E75            	  1581: 	rts
                            	  1582: 
                            	  1583: ;-------------------------------------------------------------------------------	
                            	  1584: ; Check if a variable is using a string
                            	  1585: ;
                            	  1586: ; Modifies:
                            	  1587: ;		d2,d3,a4
                            	  1588: ; Parameters:
                            	  1589: ;		a1 = pointer to string descriptor
                            	  1590: ; Returns:
                            	  1591: ;		cf = 1 if string in use, 0 otherwise
                            	  1592: ;-------------------------------------------------------------------------------	
                            	  1593: 
                            	  1594: StringInVar:
                            	  1595: 	; check global vars
00:00006894 287A08B6        	  1596: 	move.l VARBGN,a4
00:00006898 761F            	  1597: 	moveq #31,d3			; 32 vars
00:0000689A 6116            	  1598: 	bsr SIV1
                            	  1599: 	; now check local vars
00:0000689C 287A0866        	  1600: 	move.l STKFP,a4
                            	  1601: .0001
00:000068A0 588C            	  1602: 	addq.l #4,a4			; point to variable area
00:000068A2 7607            	  1603: 	moveq #7,d3
00:000068A4 610C            	  1604: 	bsr SIV1					; check variable area
00:000068A6 286CFFFC        	  1605: 	move.l -4(a4),a4	; get previous frame pointer
00:000068AA B9FAF330        	  1606: 	cmp.l ENDMEM,a4
00:000068AE 65F0            	  1607: 	blo .0001
00:000068B0 4E75            	  1608: 	rts
                            	  1609: 
                            	  1610: ;-------------------------------------------------------------------------------	
                            	  1611: ; SIV1 - string in variable helper. This routine does a two-up return if the
                            	  1612: ; string is found in a variable. No need to keep searching.
                            	  1613: ;
                            	  1614: ; Modifies:
                            	  1615: ;		d2,d3,a4
                            	  1616: ; Parameters:
                            	  1617: ;		d3 = number of variables-1 to check
                            	  1618: ;		a4 = string space
                            	  1619: ;		a1 = pointer to string descriptor
                            	  1620: ; Returns:
                            	  1621: ;		cf = 1 if string in use, 0 otherwise
                            	  1622: ;-------------------------------------------------------------------------------	
                            	  1623: 
                            	  1624: SIV1:
                            	  1625: .0003
00:000068B2 0C9400000002    	  1626: 	cmp.l #DT_STRING,(a4)
00:000068B8 6612            	  1627: 	bne .0004
00:000068BA 242C0008        	  1628: 	move.l 8(a4),d2
00:000068BE 5582            	  1629: 	subq.l #2,d2
00:000068C0 B3C2            	  1630: 	cmp.l d2,a1
00:000068C2 6608            	  1631: 	bne .0004
00:000068C4 588F            	  1632: 	addq.l #4,sp			; pop return address
00:000068C6 003C0001        	  1633: 	ori #1,ccr
00:000068CA 4E75            	  1634: 	rts								; do two up return
                            	  1635: .0004
00:000068CC 508C            	  1636: 	addq.l #8,a4			;  increment pointer by 16
00:000068CE 508C            	  1637: 	addq.l #8,a4
00:000068D0 51CBFFE0        	  1638: 	dbra d3,.0003
00:000068D4 023C00FE        	  1639: 	andi #$FE,ccr
00:000068D8 4E75            	  1640: 	rts
                            	  1641: 
                            	  1642: ;-------------------------------------------------------------------------------	
                            	  1643: ; Check if a value could be a pointer into the string area.
                            	  1644: ; Even if the data type indicated a string, it may not be. It could just be a
                            	  1645: ; coincidence. So check that the pointer portion is pointing into string
                            	  1646: ; memory. It is extremely unlikely to have a data type and a valid pointer
                            	  1647: ; match and it not be a string.
                            	  1648: ;
                            	  1649: ; Returns
                            	  1650: ;		d3 = pointer to string
                            	  1651: ;		cf=1 if points into string area, 0 otherwise
                            	  1652: ;-------------------------------------------------------------------------------	
                            	  1653: 
                            	  1654: PointsIntoStringArea:
00:000068DA 0C9400000002    	  1655: 	cmp.l #DT_STRING,(a4)		; is it a string data type?
00:000068E0 6616            	  1656: 	bne .0001
00:000068E2 262C0008        	  1657: 	move.l 8(a4),d3					; likely a string if
00:000068E6 B6BA0858        	  1658: 	cmp.l StrArea,d3				; flagged as a string, and pointer is into string area
00:000068EA 650C            	  1659: 	blo .0001
00:000068EC B6BA085E        	  1660: 	cmp.l VARBGN,d3
00:000068F0 6406            	  1661: 	bhs .0001
00:000068F2 003C0001        	  1662: 	ori #1,ccr
00:000068F6 4E75            	  1663: 	rts
                            	  1664: .0001
00:000068F8 023C00FE        	  1665: 	andi #$FE,ccr
00:000068FC 4E75            	  1666: 	rts
                            	  1667: 
                            	  1668: ;-------------------------------------------------------------------------------	
                            	  1669: ; Check if the string is a temporary on stack
                            	  1670: ;
                            	  1671: ; Parameters:
                            	  1672: ;		a3 = pointer to old string text area
                            	  1673: ; Returns:
                            	  1674: ;		cf = 1 if string in use, 0 otherwise
                            	  1675: ;-------------------------------------------------------------------------------	
                            	  1676: 
                            	  1677: StringOnStack:
00:000068FE 48E72028        	  1678: 	movem.l d2/a2/a4,-(sp)
00:00006902 7607            	  1679: 	moveq #7,d3
00:00006904 284F            	  1680: 	move.l sp,a4
                            	  1681: .0002
00:00006906 61D2            	  1682: 	bsr PointsIntoStringArea
00:00006908 6408            	  1683: 	bcc .0003
00:0000690A 242C0008        	  1684: 	move.l 8(a4),d2			; d2 = string text pointer
00:0000690E B7C2            	  1685: 	cmp.l d2,a3					; compare string pointers
00:00006910 6712            	  1686: 	beq .0001						; same pointer?
                            	  1687: .0003
00:00006912 588C            	  1688: 	addq.l #4,a4				; bump pointer into stack
00:00006914 B9FAF2C6        	  1689: 	cmp.l ENDMEM,a4			; have we hit end of stack yet?
00:00006918 65EC            	  1690: 	blo .0002
00:0000691A 4CDF1404        	  1691: 	movem.l (sp)+,d2/a2/a4
00:0000691E 023C00FE        	  1692: 	andi #$FE,ccr
00:00006922 4E75            	  1693: 	rts
                            	  1694: .0001
00:00006924 4CDF1404        	  1695: 	movem.l (sp)+,d2/a2/a4
00:00006928 003C0001        	  1696: 	ori #1,ccr
00:0000692C 4E75            	  1697: 	rts
                            	  1698: 	
                            	  1699: ;-------------------------------------------------------------------------------	
                            	  1700: ; Update pointers to string to point to new area. All string areas must be
                            	  1701: ; completely checked because there may be more than one pointer to the string.
                            	  1702: ;
                            	  1703: ; Modifies:
                            	  1704: ;		d2,d3,d4,a4
                            	  1705: ; Parameters:
                            	  1706: ;		a1 = old pointer to string
                            	  1707: ;		a2 = new pointer to string
                            	  1708: ;-------------------------------------------------------------------------------	
                            	  1709: 
                            	  1710: UpdateStringPointers:
00:0000692E 2F0B            	  1711: 	move.l a3,-(sp)
00:00006930 47E90002        	  1712: 	lea 2(a1),a3						; a3 points to old string text area
                            	  1713: 	; check global variable space
00:00006934 287A0816        	  1714: 	move.l VARBGN,a4
00:00006938 761F            	  1715: 	moveq #31,d3						; 32 vars to check
00:0000693A 611E            	  1716: 	bsr USP1
                            	  1717: 	; check stack for strings
00:0000693C 284F            	  1718: 	move.l sp,a4						; start at stack bottom and work towards top
                            	  1719: .0002
00:0000693E 619A            	  1720: 	bsr PointsIntoStringArea
00:00006940 640C            	  1721: 	bcc .0001
                            	  1722: 	; Here we probably have a string, one last check
00:00006942 B68A            	  1723: 	cmp.l a2,d3							; should be >= a2 as we are packing the space
00:00006944 6508            	  1724: 	blo .0001
00:00006946 294A0008        	  1725: 	move.l a2,8(a4)					; update pointer on stack with new address
00:0000694A 546C0008        	  1726: 	addi.w #2,8(a4)					; bump up to text part of string
                            	  1727: .0001
00:0000694E 588C            	  1728: 	addq.l #4,a4
00:00006950 B9FAF28A        	  1729: 	cmp.l ENDMEM,a4
00:00006954 65E8            	  1730: 	blo .0002
00:00006956 265F            	  1731: 	move.l (sp)+,a3
00:00006958 4E75            	  1732: 	rts
                            	  1733: 
                            	  1734: ;-------------------------------------------------------------------------------	
                            	  1735: ; Both global and local variable spaces are updated in the same manner.
                            	  1736: ;
                            	  1737: ; Parameters:
                            	  1738: ;		a1 = old pointer to string
                            	  1739: ;		a2 = new pointer to string
                            	  1740: ;		a4 = start of string space
                            	  1741: ;		d3 = number of string variables
                            	  1742: ;-------------------------------------------------------------------------------	
                            	  1743: 
                            	  1744: USP1:
                            	  1745: .0002
00:0000695A 0C9400000002    	  1746: 	cmp.l #DT_STRING,(a4)		; check the data type
00:00006960 6610            	  1747: 	bne .0001								; not a string, go to next
00:00006962 242C0008        	  1748: 	move.l 8(a4),d2					; d2 = pointer to string text
00:00006966 B7C2            	  1749: 	cmp.l d2,a3							; does pointer match old pointer?
00:00006968 6608            	  1750: 	bne .0001
00:0000696A 294A0008        	  1751: 	move.l a2,8(a4)					; copy in new pointer
00:0000696E 54AC0008        	  1752: 	addi.l #2,8(a4)					; point to string text
                            	  1753: .0001
00:00006972 508C            	  1754: 	addq.l #8,a4						; increment pointer by 16
00:00006974 508C            	  1755: 	addq.l #8,a4
00:00006976 51CBFFE2        	  1756: 	dbra d3,.0002
00:0000697A 4E75            	  1757: 	rts
                            	  1758: 
                            	  1759: ;-------------------------------------------------------------------------------	
                            	  1760: ; ===== Test for a valid variable name.  Returns Carry=1 if not
                            	  1761: ;	found, else returns Carry=0 and the address of the
                            	  1762: ;	variable in D0.
                            	  1763: 
                            	  1764: TSTV:
00:0000697C 61000628        	  1765: 	bsr	IGNBLK
00:00006980 7000            	  1766: 	CLR.L	D0
00:00006982 1010            	  1767: 	MOVE.B (A0),D0 	 	; look at the program text
00:00006984 903C0040        	  1768: 	SUB.B	#'@',D0
00:00006988 6572            	  1769: 	BCS	TSTVRT				; C=1: not a variable
00:0000698A 6638            	  1770: 	BNE	TV1						; branch if not "@" array
00:0000698C 5248            	  1771: 	ADDQ #1,A0				; If it is, it should be
00:0000698E 6100FE3E        	  1772: 	BSR	PARN					; followed by (EXPR) as its index.
00:00006992 D080            	  1773: 	ADD.L	D0,D0
00:00006994 650003AC        	  1774: 	BCS	QHOW					; say "How?" if index is too big
00:00006998 D080            	  1775: 	ADD.L	D0,D0
00:0000699A 650003A6        	  1776: 	BCS	QHOW
00:0000699E D080            	  1777: 	ADD.L	D0,D0
00:000069A0 650003A0        	  1778: 	BCS	QHOW
00:000069A4 D080            	  1779: 	ADD.L	D0,D0
00:000069A6 6500039A        	  1780: 	BCS	QHOW
00:000069AA 2F00            	  1781: 	move.l d0,-(sp)		; save the index
00:000069AC 6100012A        	  1782: 	bsr	SIZE					; get amount of free memory
00:000069B0 221F            	  1783: 	move.l (sp)+,d1		; get back the index
00:000069B2 F2006000        	  1784: 	fmove.l fp0,d0		; convert to integer
00:000069B6 B081            	  1785: 	cmp.l	d1,d0				; see if there's enough memory
00:000069B8 63000380        	  1786: 	bls	QSORRY				; if not, say "Sorry"
00:000069BC 203A078E        	  1787: 	move.l VARBGN,d0	; put address of array element...
00:000069C0 9081            	  1788: 	sub.l	d1,d0				; into D0
00:000069C2 4E75            	  1789: 	rts
                            	  1790: TV1
00:000069C4 B03C001B        	  1791: 	CMP.B	#27,D0			; if not @, is it A through Z?
00:000069C8 0A3C0001        	  1792: 	EOR	#1,CCR
00:000069CC 652E            	  1793: 	BCS	TSTVRT				; if not, set Carry and return
00:000069CE 5248            	  1794: 	ADDQ #1,A0				; else bump the text pointer
00:000069D0 0C00004C        	  1795: 	cmpi.b #'L',d0		; is it a local? L0 to L7
00:000069D4 661E            	  1796: 	bne TV2
00:000069D6 1010            	  1797: 	move.b (a0),d0
00:000069D8 0C000030        	  1798: 	cmpi.b #'0',d0
00:000069DC 6516            	  1799: 	blo TV2
00:000069DE 0C000037        	  1800: 	cmpi.b #'7',d0
00:000069E2 6210            	  1801: 	bhi TV2
00:000069E4 903C0030        	  1802: 	sub.b #'0',d0
00:000069E8 5248            	  1803: 	addq #1,a0			; bump text pointer
00:000069EA E988            	  1804: 	lsl.l #4,d0			; *16 bytes per var
00:000069EC D0BA0716        	  1805: 	add.l STKFP,d0
00:000069F0 5880            	  1806: 	add.l #4,d0
00:000069F2 4E75            	  1807: 	rts
                            	  1808: TV2
00:000069F4 E988            	  1809: 	LSL.L #4,D0			; compute the variable's address
00:000069F6 223A0754        	  1810: 	MOVE.L VARBGN,D1
00:000069FA D081            	  1811: 	ADD.L	D1,D0			; and return it in D0 with Carry=0
                            	  1812: TSTVRT
00:000069FC 4E75            	  1813: 	RTS
                            	  1814: 
                            	  1815: 
                            	  1816: * ===== Divide the 32 bit value in D0 by the 32 bit value in D1.
                            	  1817: *	Returns the 32 bit quotient in D0, remainder in D1.
                            	  1818: *
                            	  1819: DIV32
00:000069FE 4A81            	  1820: 	TST.L	D1		check for divide-by-zero
00:00006A00 67000340        	  1821: 	BEQ	QHOW		if so, say "How?"
00:00006A04 2401            	  1822: 	MOVE.L	D1,D2
00:00006A06 2801            	  1823: 	MOVE.L	D1,D4
00:00006A08 B184            	  1824: 	EOR.L	D0,D4		see if the signs are the same
00:00006A0A 4A80            	  1825: 	TST.L	D0		take absolute value of D0
00:00006A0C 6A02            	  1826: 	BPL	DIV1
00:00006A0E 4480            	  1827: 	NEG.L	D0
00:00006A10 4A81            	  1828: DIV1	TST.L	D1		take absolute value of D1
00:00006A12 6A02            	  1829: 	BPL	DIV2
00:00006A14 4481            	  1830: 	NEG.L	D1
00:00006A16 761F            	  1831: DIV2	MOVEQ	#31,D3		iteration count for 32 bits
00:00006A18 2200            	  1832: 	MOVE.L	D0,D1
00:00006A1A 7000            	  1833: 	CLR.L	D0
00:00006A1C D281            	  1834: DIV3	ADD.L	D1,D1		(This algorithm was translated from
00:00006A1E D180            	  1835: 	ADDX.L	D0,D0		; the divide routine in Ron Cain's
00:00006A20 6708            	  1836: 	BEQ	DIV4		Small-C run time library.)
00:00006A22 B082            	  1837: 	CMP.L	D2,D0
00:00006A24 6B04            	  1838: 	BMI	DIV4
00:00006A26 5281            	  1839: 	ADDQ.L	#1,D1
00:00006A28 9082            	  1840: 	SUB.L	D2,D0
00:00006A2A 51CBFFF0        	  1841: DIV4	DBRA	D3,DIV3
00:00006A2E C141            	  1842: 	EXG	D0,D1		put rem. & quot. in proper registers
00:00006A30 4A84            	  1843: 	TST.L	D4		were the signs the same?
00:00006A32 6A04            	  1844: 	BPL	DIVRT
00:00006A34 4480            	  1845: 	NEG.L	D0		if not, results are negative
00:00006A36 4481            	  1846: 	NEG.L	D1
00:00006A38 4E75            	  1847: DIVRT	RTS
                            	  1848: 
                            	  1849: 
                            	  1850: ; ===== The PEEK function returns the byte stored at the address
                            	  1851: ;	contained in the following expression.
                            	  1852: 
                            	  1853: PEEK
00:00006A3A 1E3C0042        	  1854: 	MOVE.B #'B',d7
00:00006A3E 1210            	  1855: 	MOVE.B (a0),d1
00:00006A40 0C01002E        	  1856: 	CMPI.B #'.',d1
00:00006A44 6604            	  1857: 	BNE .0001
00:00006A46 5248            	  1858: 	ADDQ #1,a0
00:00006A48 1E18            	  1859: 	move.b (a0)+,d7
                            	  1860: .0001
00:00006A4A 6100FD82        	  1861: 	BSR	PARN		get the memory address
00:00006A4E 0C8000000001    	  1862: 	cmpi.l #DT_NUMERIC,d0
00:00006A54 660002F4        	  1863: 	bne ETYPE
00:00006A58 F2006000        	  1864: 	FMOVE.L FP0,D0
00:00006A5C 2240            	  1865: 	MOVE.L D0,A1
00:00006A5E 0C070042        	  1866: 	cmpi.b #'B',d7
00:00006A62 660C            	  1867: 	bne .0002
                            	  1868: .0005
00:00006A64 7000            	  1869: 	CLR.L	D0				; upper 3 bytes will be zero
00:00006A66 1011            	  1870: 	MOVE.B (A1),D0
00:00006A68 F2005800        	  1871: 	FMOVE.B	D0,FP0 	; get the addressed byte
00:00006A6C 7001            	  1872: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006A6E 4E75            	  1873: 	RTS							; and return it
                            	  1874: .0002
00:00006A70 0C070057        	  1875: 	cmpi.b #'W',d7
00:00006A74 660C            	  1876: 	bne .0003
00:00006A76 7000            	  1877: 	CLR.L d0
00:00006A78 3011            	  1878: 	MOVE.W (A1),D0
00:00006A7A F2005000        	  1879: 	FMOVE.W	D0,FP0	;	get the addressed word
00:00006A7E 7001            	  1880: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006A80 4E75            	  1881: 	RTS							; and return it
                            	  1882: .0003
00:00006A82 0C07004C        	  1883: 	cmpi.b #'L',d7
00:00006A86 660C            	  1884: 	bne .0004
00:00006A88 7000            	  1885: 	CLR.L d0
00:00006A8A 2011            	  1886: 	MOVE.L (A1),D0
00:00006A8C F2004000        	  1887: 	FMOVE.L	D0,FP0 	; get the lword
00:00006A90 7001            	  1888: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006A92 4E75            	  1889: 	RTS							; and return it
                            	  1890: .0004
00:00006A94 0C070046        	  1891: 	cmpi.b #'F',d7
00:00006A98 66CA            	  1892: 	bne .0005
00:00006A9A F2114800        	  1893: 	FMOVE.X	(A1),FP0 		; get the addressed float
00:00006A9E 7001            	  1894: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006AA0 4E75            	  1895: 	RTS			and return it
                            	  1896: 
                            	  1897: ;-------------------------------------------------------------------------------
                            	  1898: ; The RND function returns a random number from 0 to the value of the following
                            	  1899: ; expression in fp0.
                            	  1900: ;-------------------------------------------------------------------------------
                            	  1901: 
                            	  1902: RND:
00:00006AA2 6100FD2A        	  1903: 	bsr	PARN								; get the upper limit
00:00006AA6 0C8000000001    	  1904: 	cmpi.l #DT_NUMERIC,d0		; must be numeric
00:00006AAC 6600029C        	  1905: 	bne ETYPE
00:00006AB0 F200003A        	  1906: 	ftst.x fp0							; it must be positive and non-zero
00:00006AB4 F281028C        	  1907: 	fbeq QHOW
00:00006AB8 F2940288        	  1908: 	fblt QHOW
00:00006ABC F2000100        	  1909: 	fmove fp0,fp2
00:00006AC0 7028            	  1910: 	moveq #40,d0						; function #40 get random float
00:00006AC2 4E4F            	  1911: 	trap #15
00:00006AC4 F2000823        	  1912: 	fmul fp2,fp0
00:00006AC8 7001            	  1913: 	moveq #DT_NUMERIC,d0		; data type is a number
00:00006ACA 4E75            	  1914: 	rts
                            	  1915: 
                            	  1916: ; ===== The ABS function returns an absolute value in D0.
                            	  1917: 
                            	  1918: ABS:	
00:00006ACC 6100FD00        	  1919: 	bsr	PARN			; get the following expr.'s value
00:00006AD0 F2000018        	  1920: 	fabs.x fp0
00:00006AD4 7001            	  1921: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006AD6 4E75            	  1922: 	rts
                            	  1923: 
                            	  1924: ; ===== The SIZE function returns the size of free memory in D0.
                            	  1925: 
                            	  1926: SIZE:
00:00006AD8 203A0666        	  1927: 	move.l StrArea,d0		; get the number of free bytes...
00:00006ADC 90BA066A        	  1928: 	sub.l	 TXTUNF,d0		; between 'TXTUNF' and 'StrArea'
00:00006AE0 F2004000        	  1929: 	fmove.l d0,fp0
00:00006AE4 7001            	  1930: 	moveq #DT_NUMERIC,d0	; data type is a number
00:00006AE6 4E75            	  1931: 	rts										; return the number in fp0
                            	  1932: 	
                            	  1933: ; ===== The TICK function returns the processor tick register in D0.
                            	  1934: 
                            	  1935: TICK:
00:00006AE8 4E7A0FF0        	  1936: 	movec tick,d0
00:00006AEC F2004000        	  1937: 	fmove.l d0,fp0
00:00006AF0 7001            	  1938: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006AF2 4E75            	  1939: 	rts
                            	  1940: 
                            	  1941: ; ===== The CORENO function returns the core number in D0.
                            	  1942: 
                            	  1943: CORENO:
00:00006AF4 4E7A0FE0        	  1944: 	movec coreno,d0
00:00006AF8 F2004000        	  1945: 	fmove.l d0,fp0
00:00006AFC 7001            	  1946: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006AFE 4E75            	  1947: 	rts
                            	  1948: 
                            	  1949: ;-------------------------------------------------------------------------------
                            	  1950: ; Get a pair of argments for the LEFT$ and RIGHT$ functions.
                            	  1951: ; 	(STRING, NUM)
                            	  1952: ; Returns:
                            	  1953: ;		fp0 = number
                            	  1954: ;		fp1 = string
                            	  1955: ;-------------------------------------------------------------------------------
                            	  1956: 
                            	  1957: LorRArgs:
00:00006B00 61000440        	  1958: 	bsr	TSTC						; else look for ( STRING EXPR, NUM EXPR )
00:00006B04 28              	  1959: 	dc.b	'(',LorR1-*
00:00006B05 33
00:00006B06 6100F9F8        	  1960: 	bsr	EXPR
00:00006B0A 0C8000000002    	  1961: 	cmpi.l #DT_STRING,d0
00:00006B10 66000238        	  1962: 	bne ETYPE
00:00006B14 6100F988        	  1963: 	bsr XP_PUSH
00:00006B18 61000428        	  1964: 	bsr TSTC
00:00006B1C 2C              	  1965: 	dc.b ',',LorR1-*
00:00006B1D 1B
00:00006B1E 6100F9E0        	  1966: 	bsr EXPR
00:00006B22 0C8000000001    	  1967: 	cmpi.l #DT_NUMERIC,d0
00:00006B28 66000220        	  1968: 	bne ETYPE
00:00006B2C 61000414        	  1969: 	bsr	TSTC
00:00006B30 29              	  1970: 	dc.b	')',LorR1-*
00:00006B31 07
00:00006B32 6100F996        	  1971: 	bsr XP_POP1
00:00006B36 4E75            	  1972: 	rts
                            	  1973: LorR1
00:00006B38 60000208        	  1974: 	bra QHOW
                            	  1975: 	
                            	  1976: ;-------------------------------------------------------------------------------
                            	  1977: ; MID$ function gets a substring of characters from start position for
                            	  1978: ; requested length.
                            	  1979: ;-------------------------------------------------------------------------------
                            	  1980: 
                            	  1981: MID:
00:00006B3C 61000404        	  1982: 	bsr	TSTC						; look for ( STRING EXPR, NUM EXPR [, NUM_EXPR] )
00:00006B40 28              	  1983: 	dc.b	'(',MID1-*
00:00006B41 C1
00:00006B42 6100F9BC        	  1984: 	bsr	EXPR
00:00006B46 0C8000000002    	  1985: 	cmpi.l #DT_STRING,d0
00:00006B4C 660001FC        	  1986: 	bne ETYPE
00:00006B50 6100F94C        	  1987: 	bsr XP_PUSH
00:00006B54 610003EC        	  1988: 	bsr TSTC
00:00006B58 2C              	  1989: 	dc.b ',',MID1-*
00:00006B59 A9
00:00006B5A 6100F9A4        	  1990: 	bsr EXPR
00:00006B5E 0C8000000001    	  1991: 	cmpi.l #DT_NUMERIC,d0
00:00006B64 660001E4        	  1992: 	bne ETYPE
00:00006B68 6100F934        	  1993: 	bsr XP_PUSH
00:00006B6C 7A02            	  1994: 	moveq #2,d5
00:00006B6E 610003D2        	  1995: 	bsr	TSTC
00:00006B72 2C              	  1996: 	dc.b ',',MID2-*
00:00006B73 11
00:00006B74 6100F98A        	  1997: 	bsr EXPR
00:00006B78 0C8000000001    	  1998: 	cmpi.l #DT_NUMERIC,d0
00:00006B7E 660001CA        	  1999: 	bne ETYPE
00:00006B82 7A03            	  2000: 	moveq #3,d5					; d5 indicates 3 params
                            	  2001: MID2
00:00006B84 610003BC        	  2002: 	bsr TSTC
00:00006B88 29              	  2003: 	dc.b ')',MID1-*
00:00006B89 79
00:00006B8A 6100F93E        	  2004: 	bsr XP_POP1
00:00006B8E 0C050003        	  2005: 	cmpi.b #3,d5				; did we have 3 arguments?
00:00006B92 6708            	  2006: 	beq MID5						; branch if did
00:00006B94 F23C40000000FFFF	  2007: 	fmove.l #$FFFF,fp0	; set length = max
                            	  2008: MID5
00:00006B9C F2000500        	  2009: 	fmove.x fp1,fp2			; fp2 = start pos
00:00006BA0 6100F928        	  2010: 	bsr XP_POP1					; fp1 = string descriptor
                            	  2011: ;-------------------------------------------------------------------------------
                            	  2012: ; Perform MID$ function
                            	  2013: ; 	fp1 = string descriptor
                            	  2014: ; 	fp2 = starting position
                            	  2015: ; 	fp0 = length
                            	  2016: ;-------------------------------------------------------------------------------
                            	  2017: DOMID
00:00006BA4 F239688000040600	  2018: 	fmove.x fp1,_fpWork	; _fpWork = string descriptor
00:00006BAC F2036100        	  2019: 	fmove.l fp2,d3			; d3 = start pos
00:00006BB0 B67900040600    	  2020: 	cmp.w _fpWork,d3		; is start pos < length
00:00006BB6 6400018A        	  2021: 	bhs QHOW
00:00006BBA F2026000        	  2022: 	fmove.l fp0,d2			; d2=length
00:00006BBE D682            	  2023: 	add.l d2,d3					; start pos + length < string length?
00:00006BC0 B47900040600    	  2024: 	cmp.w _fpWork,d2
00:00006BC6 6308            	  2025: 	bls MID4
00:00006BC8 343900040600    	  2026: 	move.w _fpWork,d2		; move string length to d2
00:00006BCE 48C2            	  2027: 	ext.l d2
                            	  2028: MID4
00:00006BD0 6100FC12        	  2029: 	bsr AllocateString	; a1 = pointer to new string
00:00006BD4 2449            	  2030: 	move.l a1,a2				; a2 = pointer to new string
00:00006BD6 227900040604    	  2031: 	move.l _fpWork+4,a1	; a1 = pointer to string
00:00006BDC F2036100        	  2032: 	fmove.l fp2,d3			; d3 = start pos
00:00006BE0 D3C3            	  2033: 	add.l d3,a1					; a1 = pointer to start pos
00:00006BE2 33C200040600    	  2034: 	move.w d2,_fpWork		; length
00:00006BE8 23CA00040604    	  2035: 	move.l a2,_fpWork+4	; prep to return target string
00:00006BEE 2649            	  2036: 	move.l a1,a3				; a3 = pointer to start pos
00:00006BF0 D7C2            	  2037: 	add.l d2,a3					; a3 = pointer to end pos
00:00006BF2 61000230        	  2038: 	bsr MVUP						; move A1 to A2 until A1 = A3
00:00006BF6 7002            	  2039: 	moveq #DT_STRING,d0	; data type is a string
00:00006BF8 F239480000040600	  2040: 	fmove.x _fpWork,fp0	; string descriptor in fp0
00:00006C00 4E75            	  2041: 	rts
                            	  2042: MID1
00:00006C02 6000013E        	  2043: 	bra QHOW
                            	  2044: 	
                            	  2045: ;-------------------------------------------------------------------------------
                            	  2046: ; LEFT$ function truncates the string after fp0 characters.
                            	  2047: ; Just like MID$ but with a zero starting postion.
                            	  2048: ;-------------------------------------------------------------------------------
                            	  2049: 	
                            	  2050: LEFT:
00:00006C06 6100FEF8        	  2051: 	bsr LorRArgs				; get arguments
00:00006C0A F23C59000000    	  2052: 	fmove.b #0,fp2			; start pos = 0
00:00006C10 6092            	  2053: 	bra DOMID
                            	  2054: 
                            	  2055: ;-------------------------------------------------------------------------------
                            	  2056: ; RIGHT$ function gets the rightmost characters.
                            	  2057: ; The start position must be calculated based on the number of characters
                            	  2058: ; requested and the string length.
                            	  2059: ;-------------------------------------------------------------------------------
                            	  2060: 
                            	  2061: RIGHT:
00:00006C12 6100FEEC        	  2062: 	bsr LorRArgs				; get arguments
00:00006C16 F2026000        	  2063: 	fmove.l fp0,d2			; d2 = required length
00:00006C1A F239688000040600	  2064: 	fmove.x fp1,_fpWork	; _fpWork = string descriptor
00:00006C22 363900040600    	  2065: 	move.w _fpWork,d3		; d3 = string length
00:00006C28 48C3            	  2066: 	ext.l d3						; make d3 a long
00:00006C2A B682            	  2067: 	cmp.l d2,d3					; is length > right
00:00006C2C 6202            	  2068: 	bhi .0001
00:00006C2E 7400            	  2069: 	moveq #0,d2					; we want all the characters if length <= right
                            	  2070: .0001
00:00006C30 9682            	  2071: 	sub.l d2,d3					; d3 = startpos = length - right
00:00006C32 F2034100        	  2072: 	fmove.l d3,fp2			; fp2 = start position
00:00006C36 6000FF6C        	  2073: 	bra DOMID
                            	  2074: 
                            	  2075: ;-------------------------------------------------------------------------------
                            	  2076: ; LEN( EXPR ) returns the length of a string expression.
                            	  2077: ;-------------------------------------------------------------------------------
                            	  2078: 
                            	  2079: LEN:
00:00006C3A 6100FB92        	  2080: 	bsr PARN
00:00006C3E 0C8000000002    	  2081: 	cmpi.l #DT_STRING,d0
00:00006C44 66000104        	  2082: 	bne ETYPE
00:00006C48 F239680000040600	  2083: 	fmove.x fp0,_fpWork
00:00006C50 303900040600    	  2084: 	move.w _fpWork,d0
00:00006C56 48C0            	  2085: 	ext.l d0
00:00006C58 F2005000        	  2086: 	fmove.w d0,fp0
00:00006C5C 7001            	  2087: 	moveq #DT_NUMERIC,d0
00:00006C5E 4E75            	  2088: 	rts
                            	  2089: 
                            	  2090: ;-------------------------------------------------------------------------------
                            	  2091: ; INT( EXPR ) returns the integer value of the expression.
                            	  2092: ; the expression must be in the range of a 32-bit integer.
                            	  2093: ;-------------------------------------------------------------------------------
                            	  2094: 
                            	  2095: INT:
00:00006C60 6100FB6C        	  2096: 	bsr PARN
00:00006C64 0C8000000001    	  2097: 	cmpi.l #DT_NUMERIC,d0
00:00006C6A 660000DE        	  2098: 	bne ETYPE
00:00006C6E F2000003        	  2099: 	fintrz fp0,fp0
                            	  2100: ;	fmove.l fp0,d0
                            	  2101: ;	fmove.l d0,fp0
00:00006C72 7001            	  2102: 	moveq #DT_NUMERIC,d0
00:00006C74 4E75            	  2103: 	rts
                            	  2104: 
                            	  2105: 
                            	  2106: ;-------------------------------------------------------------------------------
                            	  2107: ; CHR$( EXPR ) returns a one byte string containing the character.
                            	  2108: ;-------------------------------------------------------------------------------
                            	  2109: 
                            	  2110: CHR:
00:00006C76 6100FB56        	  2111: 	bsr PARN
00:00006C7A 0C8000000001    	  2112: 	cmpi.l #DT_NUMERIC,d0
00:00006C80 660000C8        	  2113: 	bne ETYPE
00:00006C84 F2006000        	  2114: 	fmove.l fp0,d0
00:00006C88 7401            	  2115: 	moveq #1,d2
00:00006C8A 6100FB58        	  2116: 	bsr AllocateString
00:00006C8E 1280            	  2117: 	move.b d0,(a1)
00:00006C90 42290001        	  2118: 	clr.b 1(a1)
00:00006C94 7002            	  2119: 	moveq #DT_STRING,d0
00:00006C96 23C900040604    	  2120: 	move.l a1,_fpWork+4
00:00006C9C 33FC000100040600	  2121: 	move.w #1,_fpWork
00:00006CA4 F239480000040600	  2122: 	fmove.x _fpWork,fp0
00:00006CAC 4E75            	  2123: 	rts
                            	  2124: 
                            	  2125: ********************************************************************
                            	  2126: *
                            	  2127: * *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                            	  2128: *
                            	  2129: * 'SETVAL' expects a variable, followed by an equal sign and then
                            	  2130: * an expression.  It evaluates the expression and sets the variable
                            	  2131: * to that value.
                            	  2132: *
                            	  2133: * 'FIN' checks the end of a command.  If it ended with ":",
                            	  2134: * execution continues.	If it ended with a CR, it finds the
                            	  2135: * the next line and continues from there.
                            	  2136: *
                            	  2137: * 'ENDCHK' checks if a command is ended with a CR. This is
                            	  2138: * required in certain commands, such as GOTO, RETURN, STOP, etc.
                            	  2139: *
                            	  2140: * 'ERROR' prints the string pointed to by A0. It then prints the
                            	  2141: * line pointed to by CURRNT with a "?" inserted at where the
                            	  2142: * old text pointer (should be on top of the stack) points to.
                            	  2143: * Execution of Tiny BASIC is stopped and a warm start is done.
                            	  2144: * If CURRNT is zero (indicating a direct command), the direct
                            	  2145: * command is not printed. If CURRNT is -1 (indicating
                            	  2146: * 'INPUT' command in progress), the input line is not printed
                            	  2147: * and execution is not terminated but continues at 'INPERR'.
                            	  2148: *
                            	  2149: * Related to 'ERROR' are the following:
                            	  2150: * 'QWHAT' saves text pointer on stack and gets "What?" message.
                            	  2151: * 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                            	  2152: * 'QSORRY' and 'ASORRY' do the same kind of thing.
                            	  2153: * 'QHOW' and 'AHOW' also do this for "How?".
                            	  2154: 
                            	  2155: ; SETVAL
                            	  2156: ; Returns:
                            	  2157: ;		a6 pointer to variable
                            	  2158: 
                            	  2159: SETVAL	
00:00006CAE 6100FCCC        	  2160: 	bsr	TSTV					; variable name?
00:00006CB2 6546            	  2161: 	bcs	QWHAT					; if not, say "What?"
00:00006CB4 2F00            	  2162: 	move.l d0,-(sp)		; save the variable's address
00:00006CB6 6100028A        	  2163: 	bsr	TSTC					; get past the "=" sign
00:00006CBA 3D              	  2164: 	dc.b	'=',SV1-*
00:00006CBB 11
00:00006CBC 6100F842        	  2165: 	bsr	EXPR					; evaluate the expression
00:00006CC0 2C5F            	  2166: 	move.l (sp)+,a6
00:00006CC2 2C80            	  2167: 	move.l d0,(a6)		; save type
00:00006CC4 F22E68000004    	  2168: 	fmove.x fp0,4(a6) ; and save its value in the variable
00:00006CCA 4E75            	  2169: 	rts
                            	  2170: SV1
00:00006CCC 602C            	  2171: 	bra	QWHAT					; if no "=" sign
                            	  2172: 
                            	  2173: FIN
00:00006CCE 61000272        	  2174: 	bsr	TSTC					; *** FIN ***
00:00006CD2 3A              	  2175: 	DC.B ':',FI1-*
00:00006CD3 07
00:00006CD4 588F            	  2176: 	ADDQ.L #4,SP			; if ":", discard return address
00:00006CD6 6000F324        	  2177: 	BRA	RUNSML				; continue on the same line
                            	  2178: FI1
00:00006CDA 61000266        	  2179: 	bsr	TSTC					; not ":", is it a CR?
00:00006CDE 0D              	  2180: 	DC.B	CR,FI2-*
00:00006CDF 07
00:00006CE0 588F            	  2181: 	ADDQ.L #4,SP			; yes, purge return address
00:00006CE2 6000F2C2        	  2182: 	BRA	RUNNXL				; execute the next line
                            	  2183: FI2
00:00006CE6 4E75            	  2184: 	RTS								; else return to the caller
                            	  2185: 
                            	  2186: ENDCHK
00:00006CE8 610002BC        	  2187: 	bsr	IGNBLK
00:00006CEC 0C10003A        	  2188: 	CMP.B #':',(a0)
00:00006CF0 6706            	  2189: 	BEQ ENDCHK1
00:00006CF2 0C10000D        	  2190: 	CMP.B	#CR,(A0)		; does it end with a CR?
00:00006CF6 6602            	  2191: 	BNE	QWHAT					; if not, say "WHAT?"
                            	  2192: ENDCHK1:
00:00006CF8 4E75            	  2193: 	RTS
                            	  2194: 
                            	  2195: QWHAT
00:00006CFA 2F08            	  2196: 	MOVE.L A0,-(SP)
                            	  2197: AWHAT
00:00006CFC 4DFA03CA        	  2198: 	LEA	WHTMSG,A6
                            	  2199: ERROR
00:00006D00 6100030A        	  2200: 	bsr	PRMESG		display the error message
00:00006D04 205F            	  2201: 	MOVE.L	(SP)+,A0	restore the text pointer
00:00006D06 203A03F8        	  2202: 	MOVE.L	CURRNT,D0	get the current line number
00:00006D0A 6700EF3E        	  2203: 	BEQ	WSTART		if zero, do a warm start
00:00006D0E B0BCFFFFFFFF    	  2204: 	CMP.L	#-1,D0		is the line no. pointer = -1?
00:00006D14 6700F560        	  2205: 	BEQ	INPERR		if so, redo input
00:00006D18 1F10            	  2206: 	MOVE.B	(A0),-(SP)	save the char. pointed to
00:00006D1A 4210            	  2207: 	CLR.B	(A0)		put a zero where the error is
00:00006D1C 227A03E2        	  2208: 	MOVE.L	CURRNT,A1	point to start of current line
00:00006D20 61000202        	  2209: 	bsr	PRTLN		display the line in error up to the 0
00:00006D24 109F            	  2210: 	MOVE.B	(SP)+,(A0)	restore the character
00:00006D26 103C003F        	  2211: 	MOVE.B	#'?',D0         display a "?"
00:00006D2A 6100EE98        	  2212: 	BSR	GOOUT
00:00006D2E 4240            	  2213: 	CLR	D0
00:00006D30 5389            	  2214: 	SUBQ.L	#1,A1		point back to the error char.
00:00006D32 6100017E        	  2215: 	bsr	PRTSTG		display the rest of the line
00:00006D36 6000EF12        	  2216: 	BRA	WSTART		and do a warm start
                            	  2217: QSORRY
00:00006D3A 2F08            	  2218: 	MOVE.L	A0,-(SP)
                            	  2219: ASORRY
00:00006D3C 4DFA03AC        	  2220: 	LEA	SRYMSG,A6
00:00006D40 60BE            	  2221: 	BRA	ERROR
                            	  2222: QHOW
00:00006D42 2F08            	  2223: 	MOVE.L	A0,-(SP)	Error: "How?"
                            	  2224: AHOW
00:00006D44 4DFA037B        	  2225: 	LEA	HOWMSG,A6
00:00006D48 60B6            	  2226: 	BRA	ERROR
                            	  2227: ETYPE
00:00006D4A 4DFA0384        	  2228: 	lea TYPMSG,a6
00:00006D4E 60B0            	  2229: 	bra ERROR
                            	  2230: 
                            	  2231: *******************************************************************
                            	  2232: *
                            	  2233: * *** GETLN *** FNDLN (& friends) ***
                            	  2234: *
                            	  2235: * 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                            	  2236: * the character in D0 (given by the caller), then it fills the
                            	  2237: * buffer and echos. It ignores LF's but still echos
                            	  2238: * them back. Control-H is used to delete the last character
                            	  2239: * entered (if there is one), and control-X is used to delete the
                            	  2240: * whole line and start over again. CR signals the end of a line,
                            	  2241: * and causes 'GETLN' to return.
                            	  2242: *
                            	  2243: * 'FNDLN' finds a line with a given line no. (in D1) in the
                            	  2244: * text save area.  A1 is used as the text pointer. If the line
                            	  2245: * is found, A1 will point to the beginning of that line
                            	  2246: * (i.e. the high byte of the line no.), and flags are NC & Z.
                            	  2247: * If that line is not there and a line with a higher line no.
                            	  2248: * is found, A1 points there and flags are NC & NZ. If we reached
                            	  2249: * the end of the text save area and cannot find the line, flags
                            	  2250: * are C & NZ.
                            	  2251: * 'FNDLN' will initialize A1 to the beginning of the text save
                            	  2252: * area to start the search. Some other entries of this routine
                            	  2253: * will not initialize A1 and do the search.
                            	  2254: * 'FNDLNP' will start with A1 and search for the line no.
                            	  2255: * 'FNDNXT' will bump A1 by 2, find a CR and then start search.
                            	  2256: * 'FNDSKP' uses A1 to find a CR, and then starts the search.
                            	  2257: 
                            	  2258: GETLN
00:00006D50 6100EE72        	  2259: 	BSR	GOOUT		display the prompt
00:00006D54 103C0020        	  2260: 	MOVE.B	#' ',D0         and a space
00:00006D58 6100EE6A        	  2261: 	BSR	GOOUT
00:00006D5C 41FA03FA        	  2262: 	LEA	BUFFER,A0	A0 is the buffer pointer
                            	  2263: GL1
00:00006D60 61000298        	  2264: 	bsr	CHKIO		check keyboard
00:00006D64 67FA            	  2265: 	BEQ	GL1		wait for a char. to come in
00:00006D66 B03C0008        	  2266: 	CMP.B	#CTRLH,D0	delete last character?
00:00006D6A 6726            	  2267: 	BEQ	GL3		if so
00:00006D6C B03C0018        	  2268: 	CMP.B	#CTRLX,D0	delete the whole line?
00:00006D70 6744            	  2269: 	BEQ	GL4		if so
00:00006D72 B03C000D        	  2270: 	CMP.B	#CR,D0		accept a CR
00:00006D76 6706            	  2271: 	BEQ	GL2
00:00006D78 B03C0020        	  2272: 	CMP.B	#' ',D0         if other control char., discard it
00:00006D7C 65E2            	  2273: 	BCS	GL1
                            	  2274: GL2
00:00006D7E 10C0            	  2275: 	MOVE.B	D0,(A0)+	save the char.
00:00006D80 6100EE42        	  2276: 	BSR	GOOUT		echo the char back out
00:00006D84 B03C000D        	  2277: 	CMP.B	#CR,D0		if it's a CR, end the line
00:00006D88 675C            	  2278: 	BEQ	GL7
00:00006D8A B1FC000071A7    	  2279: 	CMP.L	#(BUFFER+BUFLEN-1),A0	any more room?
00:00006D90 65CE            	  2280: 	BCS	GL1		yes: get some more, else delete last char.
                            	  2281: GL3
00:00006D92 103C0008        	  2282: 	MOVE.B	#CTRLH,D0	delete a char. if possible
00:00006D96 6100EE2C        	  2283: 	BSR	GOOUT
00:00006D9A 103C0020        	  2284: 	MOVE.B	#' ',D0
00:00006D9E 6100EE24        	  2285: 	BSR	GOOUT
00:00006DA2 B1FC00007158    	  2286: 	CMP.L	#BUFFER,A0	any char.'s left?
00:00006DA8 63B6            	  2287: 	BLS	GL1		if not
00:00006DAA 103C0008        	  2288: 	MOVE.B	#CTRLH,D0	if so, finish the BS-space-BS sequence
00:00006DAE 6100EE14        	  2289: 	BSR	GOOUT
00:00006DB2 5388            	  2290: 	SUBQ.L	#1,A0		decrement the text pointer
00:00006DB4 60AA            	  2291: 	BRA	GL1		back for more
                            	  2292: GL4
00:00006DB6 2208            	  2293: 	MOVE.L	A0,D1		delete the whole line
00:00006DB8 92BC00007158    	  2294: 	SUB.L	#BUFFER,D1	figure out how many backspaces we need
00:00006DBE 671E            	  2295: 	BEQ	GL6		if none needed, branch
00:00006DC0 5341            	  2296: 	SUBQ	#1,D1		adjust for DBRA
                            	  2297: GL5
00:00006DC2 103C0008        	  2298: 	MOVE.B	#CTRLH,D0	and display BS-space-BS sequences
00:00006DC6 6100EDFC        	  2299: 	BSR	GOOUT
00:00006DCA 103C0020        	  2300: 	MOVE.B	#' ',D0
00:00006DCE 6100EDF4        	  2301: 	BSR	GOOUT
00:00006DD2 103C0008        	  2302: 	MOVE.B	#CTRLH,D0
00:00006DD6 6100EDEC        	  2303: 	BSR	GOOUT
00:00006DDA 51C9FFE6        	  2304: 	DBRA	D1,GL5
                            	  2305: GL6
00:00006DDE 41FA0378        	  2306: 	LEA	BUFFER,A0	reinitialize the text pointer
00:00006DE2 6000FF7C        	  2307: 	BRA	GL1		and go back for more
                            	  2308: GL7
00:00006DE6 103C000A        	  2309: 	MOVE.B	#LF,D0		echo a LF for the CR
00:00006DEA 6000EDD8        	  2310: 	BRA	GOOUT
                            	  2311: 
                            	  2312: FNDLN
00:00006DEE B2BC0000FFFF    	  2313: 	CMP.L	#$FFFF,D1	line no. must be < 65535
00:00006DF4 6400FF4C        	  2314: 	BCC	QHOW
00:00006DF8 227AEDDE        	  2315: 	MOVE.L	TXTBGN,A1	init. the text save pointer
                            	  2316: 
                            	  2317: FNDLNP
00:00006DFC 247A034A        	  2318: 	MOVE.L	TXTUNF,A2	check if we passed the end
00:00006E00 538A            	  2319: 	SUBQ.L	#1,A2
00:00006E02 B5C9            	  2320: 	CMP.L	A1,A2
00:00006E04 650C            	  2321: 	BCS	FNDRET		if so, return with Z=0 & C=1
00:00006E06 1411            	  2322: 	MOVE.B	(A1),D2	if not, get a line no.
00:00006E08 E14A            	  2323: 	LSL	#8,D2
00:00006E0A 14290001        	  2324: 	MOVE.B	1(A1),D2
00:00006E0E B441            	  2325: 	CMP.W	D1,D2		is this the line we want?
00:00006E10 6502            	  2326: 	BCS	FNDNXT		no, not there yet
                            	  2327: FNDRET
00:00006E12 4E75            	  2328: 	RTS			return the cond. codes
                            	  2329: 
                            	  2330: FNDNXT
00:00006E14 5489            	  2331: 	ADDQ.L	#2,A1		find the next line
                            	  2332: 
                            	  2333: FNDSKP	
00:00006E16 0C19000D        	  2334: 	CMP.B	#CR,(A1)+	try to find a CR
00:00006E1A 67E0            	  2335: 	BEQ		FNDLNP
00:00006E1C B3FA032A        	  2336: 	CMP.L	TXTUNF,A1
00:00006E20 65F4            	  2337: 	BLO		FNDSKP
00:00006E22 60D8            	  2338: 	BRA		FNDLNP		check if end of text
                            	  2339: 
                            	  2340: ;******************************************************************
                            	  2341: ;
                            	  2342: ; *** MVUP *** MVDOWN *** POPA *** PUSHA ***
                            	  2343: ;
                            	  2344: ; 'MVUP' moves a block up from where A1 points to where A2 points
                            	  2345: ; until A1=A3
                            	  2346: ;
                            	  2347: ; 'MVDOWN' moves a block down from where A1 points to where A3
                            	  2348: ; points until A1=A2
                            	  2349: ;
                            	  2350: ; 'POPA' restores the 'FOR' loop variable save area from the stack
                            	  2351: ;
                            	  2352: ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                            	  2353: ;
                            	  2354: 
                            	  2355: MVUP
00:00006E24 B7C9            	  2356: 	CMP.L	A1,A3					; see the above description
00:00006E26 6304            	  2357: 	BLS	MVRET
00:00006E28 14D9            	  2358: 	MOVE.B	(A1)+,(A2)+
00:00006E2A 60F8            	  2359: 	BRA	MVUP
                            	  2360: MVRET
00:00006E2C 4E75            	  2361: 	RTS
                            	  2362: 
                            	  2363: ; For string movements only suitable in some circumstances
                            	  2364: 
                            	  2365: MVUPW
00:00006E2E B3CB            	  2366: 	cmp.l a3,a1
00:00006E30 6404            	  2367: 	bhs .0001
00:00006E32 34D9            	  2368: 	move.w (a1)+,(a2)+
00:00006E34 60F8            	  2369: 	bra MVUPW
                            	  2370: .0001
00:00006E36 4E75            	  2371: 	rts
                            	  2372: 
                            	  2373: MVDOWN
00:00006E38 B5C9            	  2374: 	CMP.L	A1,A2		see the above description
00:00006E3A 67F0            	  2375: 	BEQ	MVRET
00:00006E3C 1721            	  2376: 	MOVE.B	-(A1),-(A3)
00:00006E3E 60F8            	  2377: 	BRA	MVDOWN
                            	  2378: 
                            	  2379: POPA
00:00006E40 2C5F            	  2380: 	MOVE.L	(SP)+,A6			; A6 = return address
00:00006E42 23DF00007110    	  2381: 	MOVE.L	(SP)+,LOPVAR	restore LOPVAR, but zero means no more
00:00006E48 6730            	  2382: 	BEQ	.0001
00:00006E4A 23DF0000711C    	  2383: 	MOVE.L	(SP)+,LOPINC+8	if not zero, restore the rest
00:00006E50 23DF00007118    	  2384: 	MOVE.L	(SP)+,LOPINC+4
00:00006E56 23DF00007114    	  2385: 	MOVE.L	(SP)+,LOPINC
00:00006E5C 23DF00007128    	  2386: 	MOVE.L	(SP)+,LOPLMT+8
00:00006E62 23DF00007124    	  2387: 	MOVE.L	(SP)+,LOPLMT+4
00:00006E68 23DF00007120    	  2388: 	MOVE.L	(SP)+,LOPLMT
00:00006E6E 23DF0000712C    	  2389: 	MOVE.L	(SP)+,LOPLN
00:00006E74 23DF00007130    	  2390: 	MOVE.L	(SP)+,LOPPT
                            	  2391: .0001
00:00006E7A 4ED6            	  2392: 	JMP	(A6)		return
                            	  2393: 
                            	  2394: PUSHA
00:00006E7C 223A02D2        	  2395: 	MOVE.L	STKLMT,D1		; Are we running out of stack room?
00:00006E80 928F            	  2396: 	SUB.L	SP,D1
00:00006E82 6400FEB6        	  2397: 	BCC	QSORRY					; if so, say we're sorry
00:00006E86 2C5F            	  2398: 	MOVE.L	(SP)+,A6		; else get the return address
00:00006E88 223A0286        	  2399: 	MOVE.L	LOPVAR,D1		; save loop variables
00:00006E8C 6720            	  2400: 	BEQ	.0001						; if LOPVAR is zero, that's all
00:00006E8E 2F3A02A0        	  2401: 	MOVE.L	LOPPT,-(SP)	; else save all the others
00:00006E92 2F3A0298        	  2402: 	MOVE.L	LOPLN,-(SP)
00:00006E96 2F3A0288        	  2403: 	MOVE.L	LOPLMT,-(SP)
00:00006E9A 2F3A0288        	  2404: 	MOVE.L	LOPLMT+4,-(SP)
00:00006E9E 2F3A0288        	  2405: 	MOVE.L	LOPLMT+8,-(SP)
00:00006EA2 2F3A0270        	  2406: 	MOVE.L	LOPINC,-(SP)
00:00006EA6 2F3A0270        	  2407: 	MOVE.L	LOPINC+4,-(SP)
00:00006EAA 2F3A0270        	  2408: 	MOVE.L	LOPINC+8,-(SP)
                            	  2409: .0001
00:00006EAE 2F01            	  2410: 	MOVE.L	D1,-(SP)
00:00006EB0 4ED6            	  2411: 	JMP	(A6)		return
                            	  2412: 
                            	  2413: *******************************************************************
                            	  2414: *
                            	  2415: * *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                            	  2416: *
                            	  2417: * 'PRTSTG' prints a string pointed to by A1. It stops printing
                            	  2418: * and returns to the caller when either a CR is printed or when
                            	  2419: * the next byte is the same as what was passed in D0 by the
                            	  2420: * caller.
                            	  2421: *
                            	  2422: * 'QTSTG' looks for an underline (back-arrow on some systems),
                            	  2423: * single-quote, or double-quote.  If none of these are found, returns
                            	  2424: * to the caller.  If underline, outputs a CR without a LF.  If single
                            	  2425: * or double quote, prints the quoted string and demands a matching
                            	  2426: * end quote.  After the printing, the next 2 bytes of the caller are
                            	  2427: * skipped over (usually a short branch instruction).
                            	  2428: *
                            	  2429: * 'PRTNUM' prints the 32 bit number in D1, leading blanks are added if
                            	  2430: * needed to pad the number of spaces to the number in D4.
                            	  2431: * However, if the number of digits is larger than the no. in
                            	  2432: * D4, all digits are printed anyway. Negative sign is also
                            	  2433: * printed and counted in, positive sign is not.
                            	  2434: *
                            	  2435: * 'PRTLN' prints the saved text line pointed to by A1
                            	  2436: * with line no. and all.
                            	  2437: *
                            	  2438: PRTSTG:
00:00006EB2 1200            	  2439: 	MOVE.B	D0,D1		save the stop character
                            	  2440: PS1
00:00006EB4 1019            	  2441: 	MOVE.B	(A1)+,D0	get a text character
00:00006EB6 B200            	  2442: 	CMP.B	D0,D1		same as stop character?
00:00006EB8 6712            	  2443: 	BEQ	PRTRET		if so, return
00:00006EBA 6100ED08        	  2444: 	BSR	GOOUT		display the char.
00:00006EBE B03C000D        	  2445: 	CMP.B	#CR,D0		is it a C.R.?
00:00006EC2 66F0            	  2446: 	BNE	PS1		no, go back for more
00:00006EC4 103C000A        	  2447: 	MOVE.B	#LF,D0		yes, add a L.F.
00:00006EC8 6100ECFA        	  2448: 	BSR	GOOUT
                            	  2449: PRTRET
00:00006ECC 4E75            	  2450: 	RTS			then return
                            	  2451: 
                            	  2452: PRTSTR2a
00:00006ECE 1019            	  2453: 	move.b (a1)+,d0
00:00006ED0 6100ECF2        	  2454: 	bsr GOOUT
                            	  2455: PRTSTR2:
00:00006ED4 51C9FFF8        	  2456: 	dbra d1,PRTSTR2a
00:00006ED8 4E75            	  2457: 	rts
                            	  2458: 	
                            	  2459: 	if 0
                            	  2460: QTSTG
                            	  2461: 	bsr	TSTC		*** QTSTG ***
                            	  2462: 	DC.B	'"',QT3-*
                            	  2463: 	MOVE.B	#'"',D0         it is a "
                            	  2464: QT1
                            	  2465: 	MOVE.L	A0,A1
                            	  2466: 	BSR	PRTSTG		print until another
                            	  2467: 	MOVE.L	A1,A0
                            	  2468: 	MOVE.L	(SP)+,A1	pop return address
                            	  2469: 	CMP.B	#LF,D0		was last one a CR?
                            	  2470: 	BEQ	RUNNXL		if so, run next line
                            	  2471: QT2
                            	  2472: 	ADDQ.L	#2,A1		skip 2 bytes on return
                            	  2473: 	JMP	(A1)		return
                            	  2474: QT3
                            	  2475: 	bsr	TSTC		is it a single quote?
                            	  2476: 	DC.B	'''',QT4-*
                            	  2477: 	MOVE.B	#'''',D0        if so, do same as above
                            	  2478: 	BRA	QT1
                            	  2479: QT4
                            	  2480: 	bsr	TSTC		is it an underline?
                            	  2481: 	DC.B	'_',QT5-*
                            	  2482: 	MOVE.B	#CR,D0		if so, output a CR without LF
                            	  2483: 	bsr	GOOUT
                            	  2484: 	MOVE.L	(SP)+,A1	pop return address
                            	  2485: 	BRA	QT2
                            	  2486: QT5
                            	  2487: 	RTS			none of the above
                            	  2488: 	endif
                            	  2489: 
                            	  2490: PRTNUM:
00:00006EDA 4E52FFD0        	  2491: 	link a2,#-48
00:00006EDE 217900040098002C	  2492: 	move.l _canary,44(a0)
00:00006EE6 48D7020F        	  2493: 	movem.l d0/d1/d2/d3/a1,(sp)
00:00006EEA F22F68000014    	  2494: 	fmove.x fp0,20(sp)
00:00006EF0 F22F68800020    	  2495: 	fmove.x fp1,32(sp)
00:00006EF6 F2000400        	  2496: 	fmove.x fp1,fp0					; fp0 = number to print
00:00006EFA 43F900040520    	  2497: 	lea _fpBuf,a1						; a1 = pointer to buffer to use
00:00006F00 7027            	  2498: 	moveq #39,d0						; d0 = function #39 print float
00:00006F02 2204            	  2499: 	move.l d4,d1						; d1 = width
00:00006F04 2404            	  2500: 	move.l d4,d2						; d2 = precision max
00:00006F06 7665            	  2501: 	moveq #'e',d3
00:00006F08 4E4F            	  2502: 	trap #15
00:00006F0A 4CD7020F        	  2503: 	movem.l (sp),d0/d1/d2/d3/a1
00:00006F0E F22F48000014    	  2504: 	fmove.x 20(sp),fp0
00:00006F14 F22F48800020    	  2505: 	fmove.x 32(sp),fp1
00:00006F1A A2A80003002C    	  2506: 	cchk 44(a0)
00:00006F20 4E5A            	  2507: 	unlk a2
00:00006F22 4E75            	  2508: 	rts
                            	  2509: 
                            	  2510: ; Debugging
                            	  2511: 	if 0
                            	  2512: PRTFP0:
                            	  2513: 	link a2,#-48
                            	  2514: 	move.l _canary,44(a0)
                            	  2515: 	movem.l d0/d1/d2/d3/a1,(sp)
                            	  2516: 	fmove.x fp0,20(sp)
                            	  2517: 	lea _fpBuf,a1						; a1 = pointer to buffer to use
                            	  2518: 	moveq #39,d0						; d0 = function #39 print float
                            	  2519: 	moveq #30,d1						; d1 = width
                            	  2520: 	moveq #25,d2						; d2 = precision max
                            	  2521: 	moveq #'e',d3
                            	  2522: 	trap #15
                            	  2523: 	movem.l (sp),d0/d1/d2/d3/a1
                            	  2524: 	fmove.x 20(sp),fp0
                            	  2525: 	cchk 44(a0)
                            	  2526: 	unlk a2
                            	  2527: 	rts
                            	  2528: 	endif
                            	  2529: 
                            	  2530: PRTLN:
00:00006F24 7200            	  2531: 	CLR.L	D1
00:00006F26 1219            	  2532: 	MOVE.B (A1)+,D1	get the binary line number
00:00006F28 E149            	  2533: 	LSL	#8,D1
00:00006F2A 1219            	  2534: 	MOVE.B (A1)+,D1
00:00006F2C F2015080        	  2535: 	FMOVE.W D1,FP1
00:00006F30 7805            	  2536: 	MOVEQ	#5,D4			; display a 5 digit line no.
00:00006F32 61A6            	  2537: 	BSR	PRTNUM
00:00006F34 103C0020        	  2538: 	MOVE.B	#' ',D0         followed by a blank
00:00006F38 6100EC8A        	  2539: 	BSR	GOOUT
00:00006F3C 4240            	  2540: 	CLR	D0		stop char. is a zero
00:00006F3E 6000FF72        	  2541: 	BRA	PRTSTG		display the rest of the line
                            	  2542: 
                            	  2543: 
                            	  2544: ; ===== Test text byte following the call to this subroutine. If it
                            	  2545: ; equals the byte pointed to by A0, return to the code following
                            	  2546: ; the call. If they are not equal, branch to the point
                            	  2547: ;	indicated by the offset byte following the text byte.
                            	  2548: 
                            	  2549: TSTC:
00:00006F42 6162            	  2550: 	BSR	IGNBLK				; ignore leading blanks
00:00006F44 225F            	  2551: 	MOVE.L (SP)+,A1		; get the return address
00:00006F46 1219            	  2552: 	MOVE.B (A1)+,D1		; get the byte to compare
00:00006F48 B210            	  2553: 	CMP.B	(A0),D1 		;	is it = to what A0 points to?
00:00006F4A 6708            	  2554: 	BEQ	TC1						; if so
00:00006F4C 7200            	  2555: 	CLR.L	D1					; If not, add the second
00:00006F4E 1211            	  2556: 	MOVE.B (A1),D1 		; byte following the call to
00:00006F50 D3C1            	  2557: 	ADD.L	D1,A1				; the return address.
00:00006F52 4ED1            	  2558: 	JMP	(A1)					; jump to the routine
                            	  2559: TC1
00:00006F54 5288            	  2560: 	ADDQ.L #1,A0			; if equal, bump text pointer
00:00006F56 5289            	  2561: 	ADDQ.L #1,A1			; Skip the 2 bytes following
00:00006F58 4ED1            	  2562: 	JMP	(A1)					; the call and continue.
                            	  2563: 
                            	  2564: 
                            	  2565: ; ===== See if the text pointed to by A0 is a number. If so,
                            	  2566: ;	return the number in FP1 and the number of digits in D2,
                            	  2567: ;	else return zero in FP1 and D2.
                            	  2568: ; If text is not a number, then A0 is not updated, otherwise
                            	  2569: ; A0 is advanced past the number. Note A0 is always updated
                            	  2570: ; past leading spaces.
                            	  2571: 
                            	  2572: TSTNUM
00:00006F5A 4E52FFE0        	  2573: 	link a2,#-32
00:00006F5E 2F7900040098001C	  2574: 	move.l _canary,28(sp)
00:00006F66 48D70202        	  2575: 	movem.l d1/a1,(sp)
00:00006F6A F22F68000010    	  2576: 	fmove.x fp0,16(sp)
00:00006F70 7029            	  2577: 	moveq #41,d0						; function #41, get float
00:00006F72 7201            	  2578: 	moveq #1,d1							; d1 = input stride
00:00006F74 2248            	  2579: 	move.l a0,a1						; a1 = pointer to input buffer
00:00006F76 4E4F            	  2580: 	trap #15								; call BIOS get float function
00:00006F78 2049            	  2581: 	move.l a1,a0						; set text pointer
00:00006F7A 7001            	  2582: 	moveq #DT_NUMERIC,d0		; default data type = number
00:00006F7C F2000080        	  2583: 	fmove.x fp0,fp1					; return expected in fp1
00:00006F80 4A41            	  2584: 	tst.w d1								; check if a number (digits > 0?)
00:00006F82 6706            	  2585: 	beq .0002
00:00006F84 7400            	  2586: 	clr.l d2								; d2.l = 0
00:00006F86 3401            	  2587: 	move.w d1,d2						; d2 = number of digits
00:00006F88 6008            	  2588: 	bra .0001
                            	  2589: .0002											; not a number, return with orignal text pointer
00:00006F8A 7000            	  2590: 	moveq #0,d0							; data type = not a number
00:00006F8C 7400            	  2591: 	moveq #0,d2							; d2 = 0
00:00006F8E F2024080        	  2592: 	fmove.l d2,fp1					; return a zero
                            	  2593: .0001
00:00006F92 4CD70202        	  2594: 	movem.l (sp),d1/a1
00:00006F96 F22F48000010    	  2595: 	fmove.x 16(sp),fp0
00:00006F9C A2AF0003001C    	  2596: 	cchk 28(sp)
00:00006FA2 4E5A            	  2597: 	unlk a2
00:00006FA4 4E75            	  2598: 	rts
                            	  2599: 		
                            	  2600: ; ===== Skip over blanks in the text pointed to by A0.
                            	  2601: 
                            	  2602: IGNBLK
00:00006FA6 0C180020        	  2603: 	CMP.B	#' ',(A0)+		; see if it's a space
00:00006FAA 67FA            	  2604: 	BEQ	IGNBLK					; if so, swallow it
00:00006FAC 5388            	  2605: 	SUBQ.L #1,A0				; decrement the text pointer
00:00006FAE 4E75            	  2606: 	RTS
                            	  2607: 
                            	  2608: *
                            	  2609: * ===== Convert the line of text in the input buffer to upper
                            	  2610: *	case (except for stuff between quotes).
                            	  2611: *
00:00006FB0 41FA01A6        	  2612: TOUPBUF LEA	BUFFER,A0	set up text pointer
00:00006FB4 4201            	  2613: 	CLR.B	D1		clear quote flag
                            	  2614: TOUPB1	
00:00006FB6 1018            	  2615: 	MOVE.B	(A0)+,D0	get the next text char.
00:00006FB8 B03C000D        	  2616: 	CMP.B	#CR,D0		is it end of line?
00:00006FBC 6718            	  2617: 	BEQ	TOUPBRT 	if so, return
00:00006FBE B03C0022        	  2618: 	CMP.B	#'"',D0         a double quote?
00:00006FC2 6714            	  2619: 	BEQ	DOQUO
00:00006FC4 B03C0027        	  2620: 	CMP.B	#'''',D0        or a single quote?
00:00006FC8 670E            	  2621: 	BEQ	DOQUO
00:00006FCA 4A01            	  2622: 	TST.B	D1		inside quotes?
00:00006FCC 66E8            	  2623: 	BNE	TOUPB1		if so, do the next one
00:00006FCE 6118            	  2624: 	BSR	TOUPPER 	convert to upper case
00:00006FD0 1100            	  2625: 	MOVE.B	D0,-(A0)	store it
00:00006FD2 5288            	  2626: 	ADDQ.L	#1,A0
00:00006FD4 60E0            	  2627: 	BRA	TOUPB1		and go back for more
                            	  2628: TOUPBRT
00:00006FD6 4E75            	  2629: 	RTS
                            	  2630: 
00:00006FD8 4A01            	  2631: DOQUO	TST.B	D1		are we inside quotes?
00:00006FDA 6604            	  2632: 	BNE	DOQUO1
00:00006FDC 1200            	  2633: 	MOVE.B	D0,D1		if not, toggle inside-quotes flag
00:00006FDE 60D6            	  2634: 	BRA	TOUPB1
00:00006FE0 B200            	  2635: DOQUO1	CMP.B	D0,D1		make sure we're ending proper quote
00:00006FE2 66D2            	  2636: 	BNE	TOUPB1		if not, ignore it
00:00006FE4 4201            	  2637: 	CLR.B	D1		else clear quote flag
00:00006FE6 60CE            	  2638: 	BRA	TOUPB1
                            	  2639: 
                            	  2640: *
                            	  2641: * ===== Convert the character in D0 to upper case
                            	  2642: *
00:00006FE8 B03C0061        	  2643: TOUPPER CMP.B	#'a',D0         is it < 'a'?
00:00006FEC 650A            	  2644: 	BCS	TOUPRET
00:00006FEE B03C007A        	  2645: 	CMP.B	#'z',D0         or > 'z'?
00:00006FF2 6204            	  2646: 	BHI	TOUPRET
00:00006FF4 903C0020        	  2647: 	SUB.B	#32,D0		if not, make it upper case
00:00006FF8 4E75            	  2648: TOUPRET RTS
                            	  2649: 
                            	  2650: *
                            	  2651: * 'CHKIO' checks the input. If there's no input, it will return
                            	  2652: * to the caller with the Z flag set. If there is input, the Z
                            	  2653: * flag is cleared and the input byte is in D0. However, if a
                            	  2654: * control-C is read, 'CHKIO' will warm-start BASIC and will not
                            	  2655: * return to the caller.
                            	  2656: *
                            	  2657: CHKIO
00:00006FFA 6100EBCC        	  2658: 	bsr	GOIN		get input if possible
00:00006FFE 670A            	  2659: 	BEQ	CHKRET		if Zero, no input
00:00007000 B03C0003        	  2660: 	CMP.B	#CTRLC,D0	is it control-C?
00:00007004 6604            	  2661: 	BNE	CHKRET		if not
00:00007006 6000EC42        	  2662: 	BRA	WSTART		if so, do a warm start
                            	  2663: CHKRET
00:0000700A 4E75            	  2664: 	RTS
                            	  2665: 
                            	  2666: *
                            	  2667: * ===== Display a CR-LF sequence
                            	  2668: *
                            	  2669: ;CRLF	LEA	CLMSG,A6
                            	  2670: 
                            	  2671: 
                            	  2672: ; ===== Display a zero-ended string pointed to by register A6
                            	  2673: 
                            	  2674: PRMESG
00:0000700C 101E            	  2675: 	MOVE.B (A6)+,D0		; get the char.
00:0000700E 6706            	  2676: 	BEQ	PRMRET				; if it's zero, we're done
00:00007010 6100EBB2        	  2677: 	BSR	GOOUT					; else display it
00:00007014 60F6            	  2678: 	BRA	PRMESG
                            	  2679: PRMRET
00:00007016 4E75            	  2680: 	RTS
                            	  2681: 
                            	  2682: ******************************************************
                            	  2683: * The following routines are the only ones that need *
                            	  2684: * to be changed for a different I/O environment.     *
                            	  2685: ******************************************************
                            	  2686: 
                            	  2687: ; ===== Clear screen and home cursor
                            	  2688: 
                            	  2689: CLS:
00:00007018 700B            	  2690: 	moveq #11,d0			; set cursor position
00:0000701A 323CFF00        	  2691: 	move.w #$FF00,d1	; home cursor and clear screen
00:0000701E 4E4F            	  2692: 	trap #15
00:00007020 6000F0E0        	  2693: 	bra FINISH
                            	  2694: 
                            	  2695: ; ===== Output character to the console (Port 1) from register D0
                            	  2696: ;(Preserves all registers.)
                            	  2697: 
                            	  2698: OUTC:
00:00007024 48E7C000        	  2699: 	movem.l d0/d1,-(sp)
00:00007028 2200            	  2700: 	move.l d0,d1
00:0000702A 7006            	  2701: 	moveq #6,d0
00:0000702C 4E4F            	  2702: 	trap #15
00:0000702E 4CDF0003        	  2703: 	movem.l (sp)+,d0/d1
00:00007032 4E75            	  2704: 	rts
                            	  2705: 
                            	  2706: * ===== Input a character from the console into register D0 (or
                            	  2707: *	return Zero status if there's no character available).
                            	  2708: *
                            	  2709: INC
00:00007034 2F0E            	  2710: 	move.l	a6,-(a7)
00:00007036 2C7A00C0        	  2711: 	move.l	INPPTR,a6
00:0000703A 4E96            	  2712: 	jsr			(a6)
00:0000703C 2C5F            	  2713: 	move.l	(a7)+,a6
00:0000703E 4E75            	  2714: 	rts
                            	  2715: 
                            	  2716: INC1
00:00007040 2F01            	  2717: 	move.l	d1,-(a7)
00:00007042 7005            	  2718: 	moveq.l	#5,d0			* function 5 GetKey
00:00007044 4E4F            	  2719: 	trap		#15
00:00007046 2001            	  2720: 	move.l	d1,d0
00:00007048 221F            	  2721: 	move.l	(a7)+,d1
00:0000704A 0C0000FF        	  2722: 	cmpi.b	#-1,d0
00:0000704E 6602            	  2723: 	bne			.0001
00:00007050 4200            	  2724: 	clr.b		d0
                            	  2725: .0001:
00:00007052 4E75            	  2726: 	rts
                            	  2727: 
                            	  2728: *INC	BTST	#0,$10040	is character ready?
                            	  2729: *	BEQ	INCRET		if not, return Zero status
                            	  2730: *	MOVE.B	$10042,D0	else get the character
                            	  2731: *	AND.B	#$7F,D0 	zero out the high bit
                            	  2732: *INCRET	RTS
                            	  2733: 
                            	  2734: * ===== Output character to the host (Port 2) from register D0
                            	  2735: *	(Preserves all registers.)
                            	  2736: *
                            	  2737: AUXOUT:
00:00007054 13FC0002000400A8	  2738: 	move.b #2,OutputDevice
00:0000705C 61C6            	  2739: 	bsr OUTC
00:0000705E 13FC0001000400A8	  2740: 	move.b #1,OutputDevice
00:00007066 4E75            	  2741: 	rts
                            	  2742: 
                            	  2743: *AUXOUT	BTST	#1,$10041	is port 2 ready for a character?
                            	  2744: *	BEQ	AUXOUT		if not, wait for it
                            	  2745: *	MOVE.B	D0,$10043	out it goes.
                            	  2746: *	RTS
                            	  2747: 
                            	  2748: *
                            	  2749: * ===== Input a character from the host into register D0 (or
                            	  2750: *	return Zero status if there's no character available).
                            	  2751: *
                            	  2752: AUXIN:
00:00007068 2F01            	  2753: 	move.l	d1,-(a7)
00:0000706A 7024            	  2754: 	moveq		#36,d0				; serial get char from buffer
00:0000706C 4E4F            	  2755: 	trap		#15
00:0000706E 2001            	  2756: 	move.l	d1,d0
00:00007070 221F            	  2757: 	move.l	(a7)+,d1
00:00007072 0C40FFFF        	  2758: 	cmpi.w	#-1,d0
00:00007076 670A            	  2759: 	beq			.0001
00:00007078 0200007F        	  2760: 	andi.b	#$7F,d0				; clear high bit
00:0000707C 4880            	  2761: 	ext.w		d0						; return character in d0
00:0000707E 48C0            	  2762: 	ext.l		d0
00:00007080 4E75            	  2763: 	rts
                            	  2764: .0001:
00:00007082 7000            	  2765: 	moveq		#0,d0					; return zf=1 if no character available
00:00007084 4E75            	  2766: 	rts
                            	  2767: 
                            	  2768: ;AUXIN
                            	  2769: *AUXIN	BTST	#0,$10041	is character ready?
                            	  2770: *	BEQ	AXIRET		if not, return Zero status
                            	  2771: *	MOVE.B	$10043,D0	else get the character
                            	  2772: *	AND.B	#$7F,D0 	zero out the high bit
00:00007086 4E75            	  2773: AXIRET	RTS
                            	  2774: 
                            	  2775: ; ===== Return to the resident monitor, operating system, etc.
                            	  2776: ;
                            	  2777: BYEBYE	
00:00007088 23FC000000080004	  2778: 	move.l #8,_fpTextIncr
00:00007090 0094
00:00007092 60000784        	  2779: 	bra		Monitor
                            	  2780: ;	MOVE.B	#228,D7 	return to Tutor
                            	  2781: ;	TRAP	#14
                            	  2782: 
00:00007096 0D              	  2783: INITMSG DC.B	CR,LF,'MC68000 Tiny Float BASIC, v1.0',CR,LF,LF,0
00:00007097 0A
00:00007098 4D43363830303020
00:000070A0 54696E7920466C6F
00:000070A8 6174204241534943
00:000070B0 2C2076312E30
00:000070B6 0D
00:000070B7 0A
00:000070B8 0A
00:000070B9 00
00:000070BA 0D              	  2784: OKMSG	DC.B	CR,LF,'OK',CR,LF,0
00:000070BB 0A
00:000070BC 4F4B
00:000070BE 0D
00:000070BF 0A
00:000070C0 00
00:000070C1 486F773F        	  2785: HOWMSG	DC.B	'How?',CR,LF,0
00:000070C5 0D
00:000070C6 0A
00:000070C7 00
00:000070C8 576861743F      	  2786: WHTMSG	DC.B	'What?',CR,LF,0
00:000070CD 0D
00:000070CE 0A
00:000070CF 00
00:000070D0 547970653F      	  2787: TYPMSG	DC.B	'Type?',CR,LF,0
00:000070D5 0D
00:000070D6 0A
00:000070D7 00
00:000070D8 4E6F20737472696E	  2788: NOSTRING	DC.B 'No string space',CR,LF,0
00:000070E0 67207370616365
00:000070E7 0D
00:000070E8 0A
00:000070E9 00
00:000070EA 536F7272792E    	  2789: SRYMSG	DC.B	'Sorry.'
00:000070F0 0D              	  2790: CLMSG	DC.B	CR,LF,0
00:000070F1 0A
00:000070F2 00
00:000070F3 00              	  2791: 	DC.B	0	<- for aligning on a word boundary
                            	  2792: LSTROM	EQU	*		end of possible ROM area
                            	  2793: *
                            	  2794: * Internal variables follow:
                            	  2795: *
                            	  2796: 	align 2
00:000070F4 00005BBE        	  2797: RANPNT	DC.L	START		random number pointer
00:000070F8 00000000        	  2798: INPPTR	DS.L	1		input pointer
00:000070FC 00000000        	  2799: OUTPTR	DS.L	1 	output pointer
00:00007100 00000000        	  2800: CURRNT	DS.L	1		; Current line pointer
00:00007104 00000000        	  2801: STKFP		DS.L	1		; saves frame pointer
00:00007108 00000000        	  2802: STKGOS	DS.L	1		Saves stack pointer in 'GOSUB'
00:0000710C 00000000        	  2803: STKINP	DS.L	1		Saves stack pointer during 'INPUT'
00:00007110 00000000        	  2804: LOPVAR	DS.L	1		'FOR' loop save area
00:00007114 00000000        	  2805: LOPINC	DS.L	3		increment
00:00007118 *
00:00007120 00000000        	  2806: LOPLMT	DS.L	3		limit
00:00007124 *
00:0000712C 00000000        	  2807: LOPLN	DS.L	1		line number
00:00007130 00000000        	  2808: LOPPT	DS.L	1		text pointer
00:00007134 00000000        	  2809: IRQROUT	DS.L	1
00:00007138 00000000        	  2810: STRSTK	DS.L	1		; string pointer stack area, 8 entries
00:0000713C 00000000        	  2811: StrSp		DS.L	1		; string stack stack pointer
00:00007140 00000000        	  2812: StrArea	DS.L	1		; pointer to string area
00:00007144 00000000        	  2813: LastStr	DS.L	1		; pointer to last used string in area
00:00007148 00000000        	  2814: TXTUNF	DS.L	1		points to unfilled text area
00:0000714C 00000000        	  2815: VARBGN	DS.L	1		points to variable area
00:00007150 00000000        	  2816: STKLMT	DS.L	1		holds lower limit for stack growth
00:00007154 00000000        	  2817: DIRFLG	DS.L	1		; indicates 1=DIRECT mode
00:00007158 00              	  2818: BUFFER	DS.B	BUFLEN		Keyboard input buffer
00:00007159 *
                            	  2819: TXT	EQU	*		Beginning of program area
                            	  2820: ;	END
                            	  2821: 

Source: "boot.x68"
                            	   896: 
                            	   897: ; -----------------------------------------------------------------------------
                            	   898: ; -----------------------------------------------------------------------------
                            	   899: 
                            	   900: set_text_mode:
00:000071A8 7040            	   901: 	moveq #TEXTCOL,d0
00:000071AA 13C0FD080000    	   902: 	move.b d0,TEXTREG					; number of columns
00:000071B0 7020            	   903: 	moveq #TEXTROW,d0
00:000071B2 13C0FD080001    	   904: 	move.b d0,TEXTREG+1				; number of rows
00:000071B8 7000            	   905: 	moveq #0,d0
00:000071BA 13C0FD080003    	   906: 	move.b d0,TEXTREG+3				; text mode
00:000071C0 7011            	   907: 	moveq #17,d0
00:000071C2 13C0FD080008    	   908: 	move.b d0,TEXTREG+8				; max row scan
00:000071C8 700B            	   909: 	moveq #11,d0
00:000071CA 13C0FD08000A    	   910: 	move.b d0,TEXTREG+10			; max pix
00:000071D0 4E75            	   911: 	rts
                            	   912: 	
                            	   913: set_graphics_mode:
00:000071D2 7080            	   914: 	moveq #TEXTCOL*2,d0
00:000071D4 13C0FD080000    	   915: 	move.b d0,TEXTREG					; number of columns
00:000071DA 7040            	   916: 	moveq #TEXTROW*2,d0
00:000071DC 13C0FD080001    	   917: 	move.b d0,TEXTREG+1				; number of rows
00:000071E2 7001            	   918: 	moveq #1,d0
00:000071E4 13C0FD080003    	   919: 	move.b d0,TEXTREG+3				; graphics mode
00:000071EA 7007            	   920: 	moveq #7,d0
00:000071EC 13C0FD080008    	   921: 	move.b d0,TEXTREG+8				; max row scan
00:000071F2 7007            	   922: 	moveq #7,d0
00:000071F4 13C0FD08000A    	   923: 	move.b d0,TEXTREG+10			; max pix
00:000071FA 4E75            	   924: 	rts
                            	   925: 
                            	   926: ; -----------------------------------------------------------------------------
                            	   927: ; -----------------------------------------------------------------------------
                            	   928: 
                            	   929: get_screen_address:
00:000071FC 48E7E300        	   930: 	movem.l d0/d1/d2/d6/d7,-(a7)
00:00007200 7E02            	   931: 	moveq #2,d7
00:00007202 7C10            	   932: 	moveq #DEV_GETBUF1,d6
00:00007204 4E40            	   933: 	trap #0
00:00007206 2041            	   934: 	move.l d1,a0
00:00007208 4CDF00C7        	   935: 	movem.l (a7)+,d0/d1/d2/d6/d7
00:0000720C 4E75            	   936: 	rts
                            	   937: 	
                            	   938: 
                            	   939: CRLF:
00:0000720E 48E7C000        	   940: 	movem.l d0/d1,-(a7)
00:00007212 123C000D        	   941: 	move.b #13,d1
00:00007216 7006            	   942: 	moveq #6,d0						; output character function
00:00007218 4E4F            	   943: 	trap #15
00:0000721A 123C000A        	   944: 	move.b #10,d1
00:0000721E 7006            	   945: 	moveq #6,d0						; output character function
00:00007220 4E4F            	   946: 	trap #15
00:00007222 4CDF0003        	   947: 	movem.l (a7)+,d0/d1
00:00007226 4E75            	   948: 	rts
                            	   949: 
                            	   950: ;------------------------------------------------------------------------------
                            	   951: ; Display a string on standard output.
                            	   952: ;------------------------------------------------------------------------------
                            	   953: 
                            	   954: DisplayString:
00:00007228 48E7C040        	   955: 	movem.l	d0/d1/a1,-(a7)
                            	   956: dspj1:
00:0000722C 7200            	   957: 	clr.l d1							; clear upper bits of d1
00:0000722E 1219            	   958: 	move.b (a1)+,d1				; move string char into d1
00:00007230 6706            	   959: 	beq.s dsret						; is it end of string ?
00:00007232 7006            	   960: 	moveq #6,d0						; output character function
00:00007234 4E4F            	   961: 	trap #15
00:00007236 60F4            	   962: 	bra.s	dspj1						; go back for next character
                            	   963: dsret:
00:00007238 4CDF0203        	   964: 	movem.l	(a7)+,d0/d1/a1
00:0000723C 4E75            	   965: 	rts
                            	   966: 
                            	   967: ;------------------------------------------------------------------------------
                            	   968: ; Display a string on the screen followed by carriage return / linefeed.
                            	   969: ;------------------------------------------------------------------------------
                            	   970: 
                            	   971: DisplayStringCRLF:
00:0000723E 61E8            	   972: 	bsr		DisplayString
00:00007240 60CC            	   973: 	bra		CRLF
                            	   974: 
                            	   975: ;------------------------------------------------------------------------------
                            	   976: ; Display a string on the screen limited to 255 chars max.
                            	   977: ;------------------------------------------------------------------------------
                            	   978: 
                            	   979: DisplayStringLimited:
00:00007242 48E7E040        	   980: 	movem.l	d0/d1/d2/a1,-(a7)
00:00007246 3401            	   981: 	move.w	d1,d2					; d2 = max count
00:00007248 024200FF        	   982: 	andi.w	#$00FF,d2			; limit to 255 chars
00:0000724C 600A            	   983: 	bra.s		.0003					; enter loop at bottom
                            	   984: .0001:
00:0000724E 7200            	   985: 	clr.l d1							; clear upper bits of d1
00:00007250 1219            	   986: 	move.b (a1)+,d1				; move string char into d1
00:00007252 6708            	   987: 	beq.s .0002						; is it end of string ?
00:00007254 7006            	   988: 	moveq #6,d0						; output character function
00:00007256 4E4F            	   989: 	trap #15
                            	   990: .0003:
00:00007258 51CAFFF4        	   991: 	dbra		d2,.0001			; go back for next character
                            	   992: .0002:
00:0000725C 4CDF0207        	   993: 	movem.l	(a7)+,d0/d1/d2/a1
00:00007260 4E75            	   994: 	rts
                            	   995: 
                            	   996: DisplayStringLimitedCRLF:
00:00007262 61DE            	   997: 	bsr		DisplayStringLimited
00:00007264 60A8            	   998: 	bra		CRLF
                            	   999: 	
                            	  1000: 
                            	  1001: ;==============================================================================
                            	  1002: ; TRAP #15 handler
                            	  1003: ;
                            	  1004: ; Parameters:
                            	  1005: ;		d0.w = function number to perform
                            	  1006: ;==============================================================================
                            	  1007: 
                            	  1008: TRAP15:
00:00007266 48E78080        	  1009: 	movem.l	d0/a0,-(a7)
00:0000726A 41FA0010        	  1010: 	lea T15DispatchTable,a0
00:0000726E E580            	  1011: 	asl.l #2,d0
00:00007270 20700000        	  1012: 	move.l (a0,d0.w),a0
00:00007274 4E90            	  1013: 	jsr (a0)
00:00007276 4CDF0101        	  1014: 	movem.l (a7)+,d0/a0
00:0000727A 4E73            	  1015: 	rte
                            	  1016: 
                            	  1017: 		align	2
                            	  1018: T15DispatchTable:
00:0000727C 00007262        	  1019: 	dc.l	DisplayStringLimitedCRLF
00:00007280 00007242        	  1020: 	dc.l	DisplayStringLimited
00:00007284 000076DC        	  1021: 	dc.l	StubRout
00:00007288 000076DC        	  1022: 	dc.l	StubRout
00:0000728C 000076DC        	  1023: 	dc.l	StubRout
00:00007290 00000808        	  1024: 	dc.l	GetKey
00:00007294 00008F3A        	  1025: 	dc.l	OutputChar
00:00007298 000007FC        	  1026: 	dc.l	CheckForKey
00:0000729C 0000741C        	  1027: 	dc.l	GetTick
00:000072A0 000076DC        	  1028: 	dc.l	StubRout
                            	  1029: 	; 10
00:000072A4 000076DC        	  1030: 	dc.l	StubRout
00:000072A8 000076A4        	  1031: 	dc.l	Cursor1
00:000072AC 000007F4        	  1032: 	dc.l	SetKeyboardEcho
00:000072B0 0000723E        	  1033: 	dc.l	DisplayStringCRLF
00:000072B4 00007228        	  1034: 	dc.l	DisplayString
00:000072B8 000076DC        	  1035: 	dc.l	StubRout
00:000072BC 000076DC        	  1036: 	dc.l	StubRout
00:000072C0 000076DC        	  1037: 	dc.l	StubRout
00:000072C4 000076DC        	  1038: 	dc.l	StubRout
00:000072C8 000007FC        	  1039: 	dc.l	CheckForKey
                            	  1040: 	; 20
00:000072CC 000076DC        	  1041: 	dc.l	StubRout
00:000072D0 000076DC        	  1042: 	dc.l	StubRout
00:000072D4 000076DC        	  1043: 	dc.l	StubRout
00:000072D8 000076DC        	  1044: 	dc.l	StubRout
00:000072DC 000076DC        	  1045: 	dc.l	StubRout
00:000072E0 000076DC        	  1046: 	dc.l	StubRout
00:000072E4 000076DC        	  1047: 	dc.l	StubRout
00:000072E8 000076DC        	  1048: 	dc.l	StubRout
00:000072EC 000076DC        	  1049: 	dc.l	StubRout
00:000072F0 000076DC        	  1050: 	dc.l	StubRout
                            	  1051: 	; 30
00:000072F4 000076DC        	  1052: 	dc.l	StubRout
00:000072F8 000076DC        	  1053: 	dc.l	StubRout
00:000072FC 0000740C        	  1054: 	dc.l	SimHardware	;rotate_iofocus
00:00007300 00001680        	  1055: 	dc.l	SerialPeekCharDirect
00:00007304 0000169A        	  1056: 	dc.l	SerialPutChar
00:00007308 00001644        	  1057: 	dc.l	SerialPeekChar
00:0000730C 000015CC        	  1058: 	dc.l	SerialGetChar
00:00007310 00001FF2        	  1059: 	dc.l	T15LockSemaphore
00:00007314 00001FF8        	  1060: 	dc.l	T15UnlockSemaphore
00:00007318 00008E9A        	  1061: 	dc.l	prtflt
                            	  1062: 	; 40
00:0000731C 00001F3C        	  1063: 	dc.l  _GetRand
00:00007320 00001FFE        	  1064: 	dc.l	T15GetFloat
00:00007324 0000200C        	  1065: 	dc.l	T15Abort
00:00007328 00008EE0        	  1066: 	dc.l	T15FloatToString
00:0000732C 000076DC        	  1067: 	dc.l	StubRout
00:00007330 000076DC        	  1068: 	dc.l	StubRout
00:00007334 000076DC        	  1069: 	dc.l	StubRout
00:00007338 000076DC        	  1070: 	dc.l	StubRout
00:0000733C 000076DC        	  1071: 	dc.l	StubRout
00:00007340 000076DC        	  1072: 	dc.l	StubRout
                            	  1073: 	; 50
00:00007344 000076DC        	  1074: 	dc.l	StubRout
00:00007348 000076DC        	  1075: 	dc.l	StubRout
00:0000734C 000076DC        	  1076: 	dc.l	StubRout
00:00007350 000076DC        	  1077: 	dc.l	StubRout
00:00007354 000076DC        	  1078: 	dc.l	StubRout
00:00007358 000076DC        	  1079: 	dc.l	StubRout
00:0000735C 000076DC        	  1080: 	dc.l	StubRout
00:00007360 000076DC        	  1081: 	dc.l	StubRout
00:00007364 000076DC        	  1082: 	dc.l	StubRout
00:00007368 000076DC        	  1083: 	dc.l	StubRout
                            	  1084: 	; 60
00:0000736C 000076DC        	  1085: 	dc.l	StubRout
00:00007370 000076DC        	  1086: 	dc.l	StubRout
00:00007374 000076DC        	  1087: 	dc.l	StubRout
00:00007378 000076DC        	  1088: 	dc.l	StubRout
00:0000737C 000076DC        	  1089: 	dc.l	StubRout
00:00007380 000076DC        	  1090: 	dc.l	StubRout
00:00007384 000076DC        	  1091: 	dc.l	StubRout
00:00007388 000076DC        	  1092: 	dc.l	StubRout
00:0000738C 000076DC        	  1093: 	dc.l	StubRout
00:00007390 000076DC        	  1094: 	dc.l	StubRout
                            	  1095: 	; 70
00:00007394 000076DC        	  1096: 	dc.l	StubRout
00:00007398 000076DC        	  1097: 	dc.l	StubRout
00:0000739C 000076DC        	  1098: 	dc.l	StubRout
00:000073A0 000076DC        	  1099: 	dc.l	StubRout
00:000073A4 000076DC        	  1100: 	dc.l	StubRout
00:000073A8 000076DC        	  1101: 	dc.l	StubRout
00:000073AC 000076DC        	  1102: 	dc.l	StubRout
00:000073B0 000076DC        	  1103: 	dc.l	StubRout
00:000073B4 000076DC        	  1104: 	dc.l	StubRout
00:000073B8 000076DC        	  1105: 	dc.l	StubRout
                            	  1106: 	; 80
00:000073BC 00007446        	  1107: 	dc.l	SetPenColor
00:000073C0 000076DC        	  1108: 	dc.l	StubRout
00:000073C4 000076DC        	  1109: 	dc.l	StubRout
00:000073C8 000076DC        	  1110: 	dc.l	StubRout
00:000073CC 000076DC        	  1111: 	dc.l	StubRout
00:000073D0 000075C4        	  1112: 	dc.l	DrawToXY
00:000073D4 000075B6        	  1113: 	dc.l	MoveToXY
00:000073D8 000076DC        	  1114: 	dc.l	StubRout
00:000073DC 000076DC        	  1115: 	dc.l	StubRout
00:000073E0 000076DC        	  1116: 	dc.l	StubRout
                            	  1117: 	; 90
00:000073E4 000076DC        	  1118: 	dc.l	StubRout
00:000073E8 000076DC        	  1119: 	dc.l	StubRout
00:000073EC 00007424        	  1120: 	dc.l	SetDrawMode
00:000073F0 000076DC        	  1121: 	dc.l	StubRout
00:000073F4 0000744E        	  1122: 	dc.l	GRBufferToScreen
00:000073F8 000076DC        	  1123: 	dc.l	StubRout
00:000073FC 000076DC        	  1124: 	dc.l	StubRout
00:00007400 000076DC        	  1125: 	dc.l	StubRout
00:00007404 000076DC        	  1126: 	dc.l	StubRout
00:00007408 000076DC        	  1127: 	dc.l	StubRout
                            	  1128: 
                            	  1129: ;------------------------------------------------------------------------------
                            	  1130: 
                            	  1131: SimHardware:
00:0000740C 0C410003        	  1132: 	cmpi.w #3,d1
00:00007410 6608            	  1133: 	bne.s .0001
00:00007412 223C000408B8    	  1134: 	move.l #sys_switches,d1
00:00007418 4E75            	  1135: 	rts
                            	  1136: .0001:
00:0000741A 4E75            	  1137: 	rts
                            	  1138: 
                            	  1139: ;------------------------------------------------------------------------------
                            	  1140: ;
                            	  1141: GetTick:
00:0000741C 22390004009C    	  1142: 	move.l tickcnt,d1
00:00007422 4E75            	  1143: 	rts
                            	  1144: 
                            	  1145: ;------------------------------------------------------------------------------
                            	  1146: ;
                            	  1147: SetDrawMode:
00:00007424 0C41000A        	  1148: 	cmpi.w #10,d1
00:00007428 660A            	  1149: 	bne.s .0001
00:0000742A 13FC000500040D80	  1150: 	move.b #5,framebuf_dcb+DCB_OPCODE			; 'OR' operation
00:00007432 4E75            	  1151: 	rts
                            	  1152: .0001:
00:00007434 0C410011        	  1153: 	cmpi.w #17,d1
00:00007438 660A            	  1154: 	bne.s .0002
00:0000743A 33FC0001000408AC	  1155: 	move.w #1,gr_double_buffer
00:00007442 4E75            	  1156: 	rts
                            	  1157: .0002:
00:00007444 4E75            	  1158: 	rts
                            	  1159: 	
                            	  1160: SetPenColor:
00:00007446 33C100040D7C    	  1161: 	move.w d1,framebuf_dcb+DCB_FGCOLOR
00:0000744C 4E75            	  1162: 	rts
                            	  1163: 
                            	  1164: ;------------------------------------------------------------------------------
                            	  1165: ; Page flip between two buffers.
                            	  1166: ;------------------------------------------------------------------------------
                            	  1167: 
                            	  1168: GRBufferToScreen:
00:0000744E 7E06            	  1169: 	move.l #6,d7						; framebuffer device
00:00007450 7C0D            	  1170: 	move.l #DEV_SWAPBUF,d6	; swap buffers
00:00007452 4E40            	  1171: 	trap #0
00:00007454 4E75            	  1172: 	rts
                            	  1173: 
00:00007456 48E740C0        	  1174: 	movem.l d1/a0/a1,-(a7)
00:0000745A 1239FD200003    	  1175: 	move.b FRAMEBUF+3,d1
00:00007460 0A010001        	  1176: 	eor.b #1,d1
00:00007464 13C1FD200003    	  1177: 	move.b d1,FRAMEBUF+3					; page flip
00:0000746A 2279000408B0    	  1178: 	move.l gr_bitmap_buffer,a1
00:00007470 2079000408A4    	  1179: 	move.l gr_bitmap_screen,a0
00:00007476 23C8000408B0    	  1180: 	move.l a0,gr_bitmap_buffer
00:0000747C 23C9000408A4    	  1181: 	move.l a1,gr_bitmap_screen
00:00007482 4CDF0302        	  1182: 	movem.l (a7)+,d1/a0/a1
00:00007486 4E75            	  1183: 	rts
                            	  1184: 
                            	  1185: ; The following copies the buffer, why? Not needed if page flipping.
                            	  1186: ;	movem.l d0/a0/a1,-(a7)
                            	  1187: ;	move.l gr_bitmap_buffer,a1
                            	  1188: ;	move.l gr_bitmap_screen,a0
                            	  1189: ;	move.w gr_width,d0
                            	  1190: ;	mulu gr_height,d0
                            	  1191: ;	lsr.l #4,d0							; moving 16 pixels per iteration
                            	  1192: ;	move.l #0,$BFFFFFF8			; set burst length zero
                            	  1193: ;	bra.s .loop
                            	  1194: ;.loop2:
                            	  1195: ;	swap d0
                            	  1196: ;.loop:
                            	  1197: ;	move.l a1,$BFFFFFF0			; set source address
                            	  1198: ;	tst.l $BFFFFFFC					; do a read op, no value needed
                            	  1199: ;	move.l a0,$BFFFFFF4			; set destination address
                            	  1200: ;	move.l d0,$BFFFFFFC			; do a write operation (any value)
                            	  1201: ;	dbra d0,.loop
                            	  1202: ;	swap d0									; might go over 32/64 kB
                            	  1203: ;	dbra d0,.loop2
                            	  1204: ;	movem.l (a7)+,d0/a0/a1
                            	  1205: ;	rts
                            	  1206: 
                            	  1207: 
                            	  1208: TestBitmap:
                            	  1209: ;	move.w #$0700,pen_color		; dark blue
00:00007488 33FC070000040D78	  1210: 	move.w #$0700,framebuf_dcb+DCB_BKCOLOR
00:00007490 7E06            	  1211: 	move.l #6,d7
00:00007492 7C0C            	  1212: 	move.l #DEV_CLEAR,d6
00:00007494 4E40            	  1213: 	trap #0
                            	  1214: ;	bsr clear_bitmap_screen4
00:00007496 705E            	  1215: 	moveq #94,d0							; page flip (display blank screen)
00:00007498 4E4F            	  1216: 	trap #15
00:0000749A 33FC007C00040890	  1217: 	move.w #$007c,pen_color		; red pen
00:000074A2 7E06            	  1218: 	moveq #6,d7
00:000074A4 7C07            	  1219: 	moveq #DEV_SET_OUTPOS,d6
00:000074A6 7200            	  1220: 	moveq #0,d1
00:000074A8 7401            	  1221: 	moveq #1,d2
00:000074AA 4E40            	  1222: 	trap #0
00:000074AC 7C14            	  1223: 	moveq #DEV_GET_DIMEN,d6
00:000074AE 4E40            	  1224: 	trap #0
00:000074B0 5381            	  1225: 	subq.l #1,d1
00:000074B2 2601            	  1226: 	move.l d1,d3
00:000074B4 7801            	  1227: 	moveq #1,d4
00:000074B6 6100018A        	  1228: 	bsr DrawHorizTo
00:000074BA 42B900040894    	  1229: 	clr.l gr_x
00:000074C0 42B900040898    	  1230: 	clr.l gr_y
00:000074C6 7600            	  1231: 	move.l #0,d3
00:000074C8 2839000408A0    	  1232: 	move.l gr_height,d4
00:000074CE 5384            	  1233: 	subq.l #1,d4
00:000074D0 610001A2        	  1234: 	bsr DrawVertTo
00:000074D4 33FCE00100040890	  1235: 	move.w #$E001,pen_color		; green pen
00:000074DC 23FC000000020004	  1236: 	move.l #2,gr_x
00:000074E4 0894
00:000074E6 42B900040898    	  1237: 	clr.l gr_y
00:000074EC 7602            	  1238: 	move.l #2,d3
00:000074EE 2839000408A0    	  1239: 	move.l gr_height,d4
00:000074F4 5384            	  1240: 	subq.l #1,d4
00:000074F6 6100017C        	  1241: 	bsr DrawVertTo
00:000074FA 42B900040894    	  1242: 	clr.l gr_x
00:00007500 42B900040898    	  1243: 	clr.l gr_y
00:00007506 26390004089C    	  1244: 	move.l gr_width,d3
00:0000750C 5383            	  1245: 	subq.l #1,d3
00:0000750E 23C300040894    	  1246: 	move.l d3,gr_x
00:00007514 2839000408A0    	  1247: 	move.l gr_height,d4
00:0000751A 5384            	  1248: 	subq.l #1,d4
00:0000751C 610000A6        	  1249: 	bsr DrawToXY
00:00007520 705E            	  1250: 	moveq #94,d0							; page flip again
00:00007522 4E4F            	  1251: 	trap #15
00:00007524 600002F2        	  1252: 	bra Monitor
                            	  1253: 
                            	  1254: Diagonal1:
00:00007528 42B900040894    	  1255: 	clr.l gr_x
00:0000752E 42B900040898    	  1256: 	clr.l gr_y
00:00007534 26390004089C    	  1257: 	move.l gr_width,d3
00:0000753A 5383            	  1258: 	subq.l #1,d3
00:0000753C 2839000408A0    	  1259: 	move.l gr_height,d4
00:00007542 5384            	  1260: 	subq.l #1,d4
00:00007544 617E            	  1261: 	bsr DrawToXY
00:00007546 4E75            	  1262: 	rts
                            	  1263: 
                            	  1264: Diagonal2:
00:00007548 26390004089C    	  1265: 	move.l gr_width,d3
00:0000754E 5383            	  1266: 	subq.l #1,d3
00:00007550 23C300040894    	  1267: 	move.l d3,gr_x
00:00007556 42B900040898    	  1268: 	clr.l gr_y
00:0000755C 2639000408A0    	  1269: 	move.l gr_height,d3
00:00007562 5383            	  1270: 	subq.l #1,d3
00:00007564 7800            	  1271: 	moveq #0,d4
00:00007566 33FCE00100040890	  1272: 	move.w #$E001,pen_color
00:0000756E 6154            	  1273: 	bsr DrawToXY
00:00007570 4E75            	  1274: 	rts
                            	  1275: 
                            	  1276: Vertical1:
00:00007572 42B900040894    	  1277: 	clr.l gr_x
00:00007578 42B900040898    	  1278: 	clr.l gr_y
00:0000757E 7600            	  1279: 	move.l #0,d3
00:00007580 2839000408A0    	  1280: 	move.l gr_height,d4
00:00007586 5384            	  1281: 	subq.l #1,d4
00:00007588 610000EA        	  1282: 	bsr DrawVertTo
00:0000758C 4E75            	  1283: 	rts
                            	  1284: 
                            	  1285: Vertical2:
00:0000758E 33FCE00100040890	  1286: 	move.w #$E001,pen_color		; green pen
00:00007596 23FC000000020004	  1287: 	move.l #2,gr_x
00:0000759E 0894
00:000075A0 42B900040898    	  1288: 	clr.l gr_y
00:000075A6 7602            	  1289: 	move.l #2,d3
00:000075A8 2839000408A0    	  1290: 	move.l gr_height,d4
00:000075AE 5384            	  1291: 	subq.l #1,d4
00:000075B0 610000C2        	  1292: 	bsr DrawVertTo
00:000075B4 4E75            	  1293: 	rts
                            	  1294: 
                            	  1295: ;------------------------------------------------------------------------------
                            	  1296: ; Plot on bitmap screen using current pen color.
                            	  1297: ;
                            	  1298: ;	Parameters:
                            	  1299: ;		d1 = x co-ordinate
                            	  1300: ;		d2 = y co-ordinate
                            	  1301: ;------------------------------------------------------------------------------
                            	  1302: 	
                            	  1303: ;parameter OPBLACK = 4'd0;
                            	  1304: ;parameter OPCOPY = 4'd1;
                            	  1305: ;parameter OPINV = 4'd2;
                            	  1306: ;parameter OPAND = 4'd4;
                            	  1307: ;parameter OPOR = 4'd5;
                            	  1308: ;parameter OPXOR = 4'd6;
                            	  1309: ;parameter OPANDN = 4'd7;
                            	  1310: ;parameter OPNAND = 4'd8;
                            	  1311: ;parameter OPNOR = 4'd9;
                            	  1312: ;parameter OPXNOR = 4'd10;
                            	  1313: ;parameter OPORN = 4'd11;
                            	  1314: ;parameter OPWHITE = 4'd15;
                            	  1315: 
                            	  1316: ;------------------------------------------------------------------------------
                            	  1317: ; Set graphics cursor position.
                            	  1318: ;------------------------------------------------------------------------------
                            	  1319: 
                            	  1320: MoveToXY:
00:000075B6 23C300040894    	  1321: 	move.l d3,gr_x
00:000075BC 23C400040898    	  1322: 	move.l d4,gr_y
00:000075C2 4E75            	  1323: 	rts
                            	  1324: 
                            	  1325: ;------------------------------------------------------------------------------
                            	  1326: ; Draw a line from the current graphics position to x1,y1.
                            	  1327: ;
                            	  1328: ; Register Usage:
                            	  1329: ;		d1 = x0
                            	  1330: ;		d2 = y0
                            	  1331: ;		d3 = x1
                            	  1332: ;		d4 = y1
                            	  1333: ;		d5 = dx
                            	  1334: ;		d6 = dy
                            	  1335: ;		d7 = sx
                            	  1336: ;		d0 = sy
                            	  1337: ;		a0 = err
                            	  1338: ;		a1 = 2*err
                            	  1339: ;------------------------------------------------------------------------------
                            	  1340: 
                            	  1341: DrawToXY:
00:000075C4 48E7E7C0        	  1342: 	movem.l d0/d1/d2/d5/d6/d7/a0/a1,-(a7)
00:000075C8 223900040894    	  1343: 	move.l gr_x,d1
00:000075CE 243900040898    	  1344: 	move.l gr_y,d2
00:000075D4 2A03            	  1345: 	move.l d3,d5
00:000075D6 2C04            	  1346: 	move.l d4,d6
00:000075D8 9A81            	  1347: 	sub.l d1,d5			; d5 = x1-x0
00:000075DA 6608            	  1348: 	bne.s .notVert
00:000075DC 4CDF03E7        	  1349: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:000075E0 60000092        	  1350: 	bra DrawVertTo
                            	  1351: .notVert:
00:000075E4 6A02            	  1352: 	bpl.s .0001
00:000075E6 4485            	  1353: 	neg.l d5				
                            	  1354: .0001:						; d5 = dx = abs(x1-x0)
00:000075E8 9C82            	  1355: 	sub.l d2,d6			; d6 = y1-y0
00:000075EA 6606            	  1356: 	bne.s .notHoriz
00:000075EC 4CDF03E7        	  1357: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:000075F0 6050            	  1358: 	bra DrawHorizTo
                            	  1359: .notHoriz:
00:000075F2 6B02            	  1360: 	bmi.s .0002
00:000075F4 4486            	  1361: 	neg.l d6
                            	  1362: .0002:						; d6 = dy = -abs(y1-y0)
00:000075F6 7E01            	  1363: 	move.l #1,d7		; d7 = sx (x0 < x1 ? 1 : -1)
00:000075F8 B681            	  1364: 	cmp.l d1,d3
00:000075FA 6202            	  1365: 	bhi.s .0004
00:000075FC 4487            	  1366: 	neg.l d7
                            	  1367: .0004:
00:000075FE 7001            	  1368: 	move.l #1,d0		; d0 = sy (y0 < y1) ? 1 : -1)
00:00007600 B882            	  1369: 	cmp.l d2,d4
00:00007602 6202            	  1370: 	bhi.s .0006
00:00007604 4480            	  1371: 	neg.l d0
                            	  1372: .0006:
00:00007606 2045            	  1373: 	move.l d5,a0		; a0 = error = dx + dy
00:00007608 D1C6            	  1374: 	adda.l d6,a0
                            	  1375: .loop:
00:0000760A 61009236        	  1376: 	bsr CheckForCtrlC
00:0000760E 6100A48E        	  1377: 	bsr plot				; plot(x0,y0)
00:00007612 2248            	  1378: 	move.l a0,a1
00:00007614 D3C9            	  1379: 	adda.l a1,a1		; a1 = error *2
00:00007616 BC89            	  1380: 	cmp.l a1,d6			; e2 >= dy?
00:00007618 6E08            	  1381: 	bgt.s .0008
00:0000761A B681            	  1382: 	cmp.l d1,d3			; x0==x1?
00:0000761C 6712            	  1383: 	beq.s .brkloop
00:0000761E D1C6            	  1384: 	adda.l d6,a0		; err = err + dy
00:00007620 D287            	  1385: 	add.l d7,d1			; x0 = x0 + sx
                            	  1386: .0008:
00:00007622 BA89            	  1387: 	cmp.l a1,d5			; err2 <= dx?
00:00007624 6D08            	  1388: 	blt.s .0009
00:00007626 B882            	  1389: 	cmp.l d2,d4			; y0==y1?
00:00007628 6706            	  1390: 	beq.s .brkloop
00:0000762A D1C5            	  1391: 	adda.l d5,a0		; err = err + dx
00:0000762C D480            	  1392: 	add.l d0,d2			; y0 = y0 + sy
                            	  1393: .0009:
00:0000762E 60DA            	  1394: 	bra.s .loop
                            	  1395: .brkloop:
00:00007630 23C300040894    	  1396: 	move.l d3,gr_x
00:00007636 23C400040898    	  1397: 	move.l d4,gr_y
00:0000763C 4CDF03E7        	  1398: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:00007640 4E75            	  1399: 	rts
                            	  1400: 
                            	  1401: ; Parameters:
                            	  1402: ;		d3 = x1
                            	  1403: ;		d4 = y1
                            	  1404: 
                            	  1405: DrawHorizTo:
00:00007642 48E76400        	  1406: 	movem.l d1/d2/d5,-(a7)
00:00007646 7E06            	  1407: 	moveq #6,d7
00:00007648 7C17            	  1408: 	moveq #DEV_GET_OUTPOS,d6
00:0000764A 4E40            	  1409: 	trap #0
00:0000764C 7A01            	  1410: 	move.l #1,d5			; assume increment
00:0000764E B681            	  1411: 	cmp.l d1,d3
00:00007650 6202            	  1412: 	bhi.s .0001
00:00007652 4485            	  1413: 	neg.l d5					; switch to decrement
                            	  1414: .0001:
00:00007654 7E06            	  1415: 	moveq #6,d7
00:00007656 7C12            	  1416: 	moveq #DEV_WRITEAT,d6
00:00007658 4E40            	  1417: 	trap #0
00:0000765A B681            	  1418: 	cmp.l d1,d3
00:0000765C 670A            	  1419: 	beq.s .0002
00:0000765E D285            	  1420: 	add.l d5,d1
00:00007660 7E06            	  1421: 	moveq #6,d7
00:00007662 7C07            	  1422: 	moveq #DEV_SET_OUTPOS,d6
00:00007664 4E40            	  1423: 	trap #0
00:00007666 60EC            	  1424: 	bra.s .0001
                            	  1425: .0002:
00:00007668 7E06            	  1426: 	moveq #6,d7
00:0000766A 7C07            	  1427: 	moveq #DEV_SET_OUTPOS,d6	; update output position
00:0000766C 4E40            	  1428: 	trap #0
00:0000766E 4CDF0026        	  1429: 	movem.l (a7)+,d1/d2/d5
00:00007672 4E75            	  1430: 	rts
                            	  1431: 	
                            	  1432: 	
                            	  1433: ; Parameters:
                            	  1434: ;		d3 = x1
                            	  1435: ;		d4 = y1
                            	  1436: 
                            	  1437: DrawVertTo:
00:00007674 48E76400        	  1438: 	movem.l d1/d2/d5,-(a7)
00:00007678 223900040894    	  1439: 	move.l gr_x,d1
00:0000767E 243900040898    	  1440: 	move.l gr_y,d2
00:00007684 7A01            	  1441: 	move.l #1,d5			; assume increment
00:00007686 B882            	  1442: 	cmp.l d2,d4
00:00007688 6202            	  1443: 	bhi.s .0001
00:0000768A 4485            	  1444: 	neg.l d5					; switch to decrement
                            	  1445: .0001:
00:0000768C 6100A410        	  1446: 	bsr plot
00:00007690 B882            	  1447: 	cmp.l d2,d4
00:00007692 6704            	  1448: 	beq.s .0002
00:00007694 D485            	  1449: 	add.l d5,d2
00:00007696 60F4            	  1450: 	bra.s .0001
                            	  1451: .0002:
00:00007698 23C200040898    	  1452: 	move.l d2,gr_y
00:0000769E 4CDF0026        	  1453: 	movem.l (a7)+,d1/d2/d5
00:000076A2 4E75            	  1454: 	rts
                            	  1455: 	
                            	  1456: 	
                            	  1457: ;plotLine(x0, y0, x1, y1)
                            	  1458: ;    dx = abs(x1 - x0)
                            	  1459: ;    sx = x0 < x1 ? 1 : -1
                            	  1460: ;    dy = -abs(y1 - y0)
                            	  1461: ;    sy = y0 < y1 ? 1 : -1
                            	  1462: ;    error = dx + dy
                            	  1463: ;    
                            	  1464: ;    while true
                            	  1465: ;        plot(x0, y0)
                            	  1466: ;        e2 = 2 * error
                            	  1467: ;        if e2 >= dy
                            	  1468: ;            if x0 == x1 break
                            	  1469: ;            error = error + dy
                            	  1470: ;            x0 = x0 + sx
                            	  1471: ;        end if
                            	  1472: ;        if e2 <= dx
                            	  1473: ;            if y0 == y1 break
                            	  1474: ;            error = error + dx
                            	  1475: ;            y0 = y0 + sy
                            	  1476: ;        end if
                            	  1477: ;    end while
                            	  1478:     
                            	  1479: ;------------------------------------------------------------------------------
                            	  1480: ; Cursor positioning / Clear screen
                            	  1481: ; - out of range settings are ignored
                            	  1482: ;
                            	  1483: ; Parameters:
                            	  1484: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	  1485: ;	Returns:
                            	  1486: ;		none
                            	  1487: ;------------------------------------------------------------------------------
                            	  1488: 
                            	  1489: Cursor1:
00:000076A4 48E7F300        	  1490: 	movem.l d0/d1/d2/d3/d6/d7,-(a7)
00:000076A8 0C41FF00        	  1491: 	cmpi.w #$FF00,d1
00:000076AC 6616            	  1492: 	bne.s .0002
00:000076AE 7E02            	  1493: 	moveq #2,d7
00:000076B0 7C0C            	  1494: 	moveq #DEV_CLEAR,d6	; clear screen
00:000076B2 4E40            	  1495: 	trap #0
00:000076B4 7C07            	  1496: 	moveq #DEV_SET_OUTPOS,d6
00:000076B6 7200            	  1497: 	moveq #0,d1
00:000076B8 7400            	  1498: 	moveq #0,d2
00:000076BA 7600            	  1499: 	moveq #0,d3
00:000076BC 4E40            	  1500: 	trap #0
00:000076BE 4CDF00CF        	  1501: 	movem.l (a7)+,d0/d1/d2/d3/d6/d7
00:000076C2 4E75            	  1502: 	rts
                            	  1503: .0002:
00:000076C4 7E02            	  1504: 	moveq #2,d7
00:000076C6 7C07            	  1505: 	moveq #DEV_SET_OUTPOS,d6
00:000076C8 7400            	  1506: 	clr.l d2
00:000076CA 1401            	  1507: 	move.b d1,d2		; d2 = row (y pos)
00:000076CC E049            	  1508: 	lsr.w #8,d1			; d1 = col (x pos)
00:000076CE 4881            	  1509: 	ext.w d1
00:000076D0 48C1            	  1510: 	ext.l d1
00:000076D2 7600            	  1511: 	moveq #0,d3
00:000076D4 4E40            	  1512: 	trap #0
00:000076D6 4CDF00CF        	  1513: 	movem.l (a7)+,d0/d1/d2/d3/d6/d7
00:000076DA 4E75            	  1514: 	rts
                            	  1515: 
                            	  1516: ;------------------------------------------------------------------------------
                            	  1517: ; Stub routine for unimplemented functionality.
                            	  1518: ;------------------------------------------------------------------------------
                            	  1519: 
                            	  1520: StubRout:
00:000076DC 4E75            	  1521: 	rts
                            	  1522: 
                            	  1523: ;------------------------------------------------------------------------------
                            	  1524: ; Select a specific IO focus.
                            	  1525: ;------------------------------------------------------------------------------
                            	  1526: 
                            	  1527: select_iofocus:
00:000076DE 0C010002        	  1528: 	cmpi.b	#2,d1
00:000076E2 650A            	  1529: 	blo.s		.0001
00:000076E4 0C010005        	  1530: 	cmpi.b	#NCORES+1,d1
00:000076E8 6204            	  1531: 	bhi.s		.0001
00:000076EA 2001            	  1532: 	move.l	d1,d0
00:000076EC 6014            	  1533: 	bra.s		select_focus1
                            	  1534: .0001:
00:000076EE 4E75            	  1535: 	rts
                            	  1536: 
                            	  1537: ;------------------------------------------------------------------------------
                            	  1538: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	  1539: ;
                            	  1540: ; Modifies:
                            	  1541: ;		d0, IOFocus BIOS variable
                            	  1542: ;		updates the text screen pointer
                            	  1543: ;------------------------------------------------------------------------------
                            	  1544: 
                            	  1545: rotate_iofocus:
00:000076F0 103900100000    	  1546: 	move.b IOFocus,d0					; d0 = focus, we can trash d0
00:000076F6 5200            	  1547: 	add.b	#1,d0								; increment the focus
00:000076F8 B03C0005        	  1548: 	cmp.b	#NCORES+1,d0				; limit to 2 to 9
00:000076FC 6304            	  1549: 	bls.s	.0001
00:000076FE 103C0002        	  1550: 	move.b #2,d0
                            	  1551: .0001:
                            	  1552: select_focus1:
00:00007702 13C000100000    	  1553: 	move.b	d0,IOFocus				; set IO focus
                            	  1554: 	; reset keyboard processor to focus core
                            	  1555: ;	move.l #$3C060500,d0			; core=??,level sensitive,enabled,irq6,inta
                            	  1556: ;	or.b IOFocus,d0
                            	  1557: ;	move.l d0,PLIC+$80+4*30		; set register
                            	  1558: 	; Adjust text screen pointer
00:00007708 5500            	  1559: 	subi.b #2,d0							; screen is 0 to 7, focus is 2 to 9
00:0000770A 4880            	  1560: 	ext.w	d0									; make into word value
00:0000770C C0FC0800        	  1561: 	mulu #2048,d0							; * 2048	cells per screen
00:00007710 E158            	  1562: 	rol.w	#8,d0								; swap byte order
00:00007712 4840            	  1563: 	swap d0										; get bits 16-31
00:00007714 E158            	  1564: 	rol.w	#8,d0								; swap byte order
00:00007716 23C0FD080028    	  1565: 	move.l d0,TEXTREG+$28			; update screen address in text controller
00:0000771C 60009D1E        	  1566: 	bra	SyncCursor						; set cursor position
                            	  1567: 
                            	  1568: ;==============================================================================
                            	  1569: ; PLIC - platform level interrupt controller
                            	  1570: ;
                            	  1571: ; Register layout:
                            	  1572: ;   bits 0 to 7  = cause code to issue (vector number)
                            	  1573: ;   bits 8 to 11 = irq level to issue
                            	  1574: ;   bit 16 = irq enable
                            	  1575: ;   bit 17 = edge sensitivity
                            	  1576: ;   bit 18 = 0=vpa, 1=inta
                            	  1577: ;		bit 24 to 29 target core
                            	  1578: ;
                            	  1579: ; Note byte order must be reversed for PLIC.
                            	  1580: ;==============================================================================
                            	  1581: 
                            	  1582: init_plic:
00:00007720 41F9FD090000    	  1583: 	lea	PLIC,a0							; a0 points to PLIC
00:00007726 43E800F4        	  1584: 	lea	$80+4*29(a0),a1			; point to timer registers (29)
00:0000772A 22BC0006033F    	  1585: 	move.l #$0006033F,(a1)	; initialize, core=63,edge sensitive,enabled,irq6,vpa
00:00007730 5889            	  1586: 	lea	4(a1),a1						; point to keyboard registers (30)
00:00007732 22BC3C060502    	  1587: 	move.l #$3C060502,(a1)	; core=2,level sensitive,enabled,irq6,inta
00:00007738 5889            	  1588: 	lea	4(a1),a1						; point to nmi button register (31)
00:0000773A 22BC00070302    	  1589: 	move.l #$00070302,(a1)	; initialize, core=2,edge sensitive,enabled,irq7,vpa
00:00007740 43E800C0        	  1590: 	lea	$80+4*16(a0),a1			; a1 points to ACIA register
00:00007744 22BC3D030502    	  1591: 	move.l #$3D030502,(a1)	; core=2,level sensitive,enabled,irq3,inta	
00:0000774A 43E80090        	  1592: 	lea	$80+4*4(a0),a1			; a1 points to io_bitmap irq
00:0000774E 22BC3B060702    	  1593: 	move.l #$3B060702,(a1)	; core=2,edge sensitive,enabled,irq6,inta	
00:00007754 4E75            	  1594: 	rts
                            	  1595: 
                            	  1596: 
                            	  1597: ;==============================================================================
                            	  1598: ;==============================================================================
                            	  1599: ; Monitor
                            	  1600: ;==============================================================================
                            	  1601: ;==============================================================================
                            	  1602: 
                            	  1603: cmdString:
00:00007756 BF              	  1604: 	dc.b	'?'+$80						; ? display help
00:00007757 41              	  1605: 	dc.b	'A','S'+$80				; AS = asteroids
00:00007758 D3
00:00007759 CC              	  1606: 	dc.b	'L'+$80						; L load S19 file
00:0000775A 46              	  1607: 	dc.b	'F','B'+$80				; FB fill with byte
00:0000775B C2
00:0000775C 46              	  1608: 	dc.b	'F','W'+$80				; FW fill with wyde
00:0000775D D7
00:0000775E 46              	  1609: 	dc.b	'F','L'+$80				; FL fill with long wyde
00:0000775F CC
00:00007760 464D54          	  1610: 	dc.b	'FMT','K'+$80			; FMTK run Femtiki OS
00:00007763 CB
00:00007764 42              	  1611: 	dc.b	'B','A'+$80				; BA start Tiny Basic
00:00007765 C1
00:00007766 42              	  1612: 	dc.b	'B','R'+$80				; BR breakpoint
00:00007767 D2
00:00007768 44              	  1613: 	dc.b	'D','I'+$80				; DI disassemble
00:00007769 C9
00:0000776A 44              	  1614: 	dc.b	'D','R'+$80				; DR dump registers
00:0000776B D2
00:0000776C C4              	  1615: 	dc.b	'D'+$80						; D dump memory
00:0000776D CA              	  1616: 	dc.b	'J'+$80						; J jump to code
00:0000776E C5              	  1617: 	dc.b	'E'+$80						; : edit memory
00:0000776F 434C            	  1618: 	dc.b	"CL",'S'+$80			; CLS clear screen
00:00007771 D3
00:00007772 434F52          	  1619: 	dc.b	"COR",'E'+$80			; CORE <n> switch to core
00:00007775 C5
00:00007776 5446            	  1620: 	dc.b	"TF",'P'+$80			; TFP test fp
00:00007778 D0
00:00007779 5447            	  1621: 	dc.b  "TG",'F'+$80			; TGF test get float
00:0000777B C6
00:0000777C 545241          	  1622: 	dc.b  "TRA",'M'+$80			; TRAM test RAM
00:0000777F CD
00:00007780 54              	  1623: 	dc.b	'T','R'+$80				; TR test serial receive
00:00007781 D2
00:00007782 D4              	  1624: 	dc.b	'T'+$80						; T test CPU
00:00007783 D3              	  1625: 	dc.b	'S'+$80						; S send serial
00:00007784 52455345        	  1626: 	dc.b	"RESE",'T'+$80		; RESET <n>
00:00007788 D4
00:00007789 434C4F43        	  1627: 	dc.b	"CLOC",'K'+$80		; CLOCK <n>
00:0000778D CB
00:0000778E D2              	  1628: 	dc.b	'R'+$80						; R receive serial
00:0000778F D6              	  1629: 	dc.b	'V'+$80
00:00007790 47              	  1630: 	dc.b	'G','R'+$80				; graphics demo
00:00007791 D2
00:00007792 00              	  1631: 	dc.b	0,0
00:00007793 00
                            	  1632: 
                            	  1633: 	align	2
                            	  1634: cmdTable:
00:00007794 00007A9E        	  1635: 	dc.l	cmdHelp
00:00007798 00007920        	  1636: 	dc.l	cmdAsteroids
00:0000779C 000088B2        	  1637: 	dc.l	cmdLoadS19
00:000077A0 00007D5A        	  1638: 	dc.l	cmdFillB
00:000077A4 00007DAE        	  1639: 	dc.l	cmdFillW
00:000077A8 00007E02        	  1640: 	dc.l	cmdFillL
00:000077AC 0000796C        	  1641: 	dc.l	cmdFMTK
00:000077B0 00007928        	  1642: 	dc.l	cmdTinyBasic
00:000077B4 000078FC        	  1643: 	dc.l	cmdBreakpoint
00:000077B8 00007FA8        	  1644: 	dc.l	cmdDisassemble
00:000077BC 000080C2        	  1645: 	dc.l	cmdDumpRegs
00:000077C0 00007FF8        	  1646: 	dc.l	cmdDumpMemory
00:000077C4 00007F22        	  1647: 	dc.l	cmdJump
00:000077C8 00007EAE        	  1648: 	dc.l	cmdEditMemory
00:000077CC 0000793C        	  1649: 	dc.l	cmdClearScreen
00:000077D0 00007948        	  1650: 	dc.l	cmdCore
00:000077D4 00007974        	  1651: 	dc.l  cmdTestFP
00:000077D8 00007A00        	  1652: 	dc.l	cmdTestGF
00:000077DC 000087EA        	  1653: 	dc.l  cmdTestRAM
00:000077E0 0000816C        	  1654: 	dc.l	cmdTestSerialReceive
00:000077E4 0000792C        	  1655: 	dc.l	cmdTestCPU
00:000077E8 00007CF6        	  1656: 	dc.l	cmdSendSerial
00:000077EC 00007A4C        	  1657: 	dc.l	cmdReset
00:000077F0 00007A2E        	  1658: 	dc.l	cmdClock
00:000077F4 00007D26        	  1659: 	dc.l	cmdReceiveSerial	
00:000077F8 000078BA        	  1660: 	dc.l	cmdVideoMode
00:000077FC 00007F32        	  1661: 	dc.l	cmdGrDemo
00:00007800 00007818        	  1662: 	dc.l	cmdMonitor
                            	  1663: 
                            	  1664: ; Get a word from screen memory and swap byte order
                            	  1665: 
                            	  1666: FromScreen:
00:00007804 2210            	  1667: 	move.l (a0),d1
00:00007806 610012CC        	  1668: 	bsr	rbo
                            	  1669: 	if (SCREEN_FORMAT==1)
00:0000780A 5888            	  1670: 		lea	4(a0),a0	; increment screen pointer
                            	  1671: 	else
                            	  1672: 		lea	8(a0),a0	; increment screen pointer
                            	  1673: 	endif
00:0000780C 4E75            	  1674: 	rts
                            	  1675: 
                            	  1676: StartMon:
00:0000780E 427900040202    	  1677: 	clr.w	NumSetBreakpoints
00:00007814 610015F0        	  1678: 	bsr	ClearBreakpointList
                            	  1679: cmdMonitor:
                            	  1680: Monitor:
                            	  1681: 	; Reset the stack pointer on each entry into the monitor
00:00007818 2E7C00047FFC    	  1682: 	move.l #$47FFC,sp		; reset core's stack
00:0000781E 487AFFF8        	  1683: 	pea Monitor					; Cause any RTS to go here
00:00007822 46FC2200        	  1684: 	move.w #$2200,sr		; enable level 2 and higher interrupts
00:00007826 4E7A0FE0        	  1685: 	movec	coreno,d0
00:0000782A 4840            	  1686: 	swap d0
00:0000782C 7201            	  1687: 	moveq	#1,d1
00:0000782E 6100A7A6        	  1688: 	bsr	UnlockSemaphore
00:00007832 42390004000C    	  1689: 	clr.b KeybdEcho			; turn off keyboard echo
                            	  1690: PromptLn:
00:00007838 6100F9D4        	  1691: 	bsr	CRLF
00:0000783C 123C0024        	  1692: 	move.b #'$',d1
00:00007840 610016F8        	  1693: 	bsr OutputChar
                            	  1694: 
                            	  1695: ; Get characters until a CR is keyed
                            	  1696: ;
                            	  1697: Prompt3:
00:00007844 61008FC2        	  1698: 	bsr	GetKey
00:00007848 0C0100FF        	  1699: 	cmpi.b #-1,d1
00:0000784C 67F6            	  1700: 	beq.s	Prompt3
00:0000784E 0C01000D        	  1701: 	cmpi.b #CR,d1
00:00007852 6706            	  1702: 	beq.s	Prompt1
00:00007854 610016E4        	  1703: 	bsr	OutputChar
00:00007858 60EA            	  1704: 	bra.s	Prompt3
                            	  1705: 
                            	  1706: ; Process the screen line that the CR was keyed on
                            	  1707: 
                            	  1708: Prompt1:
00:0000785A 7E02            	  1709: 	moveq #2,d7
00:0000785C 7C17            	  1710: 	moveq #DEV_GET_OUTPOS,d6
00:0000785E 4E40            	  1711: 	trap #0
                            	  1712: ;	clr.b	CursorCol				; go back to the start of the line
00:00007860 7C07            	  1713: 	moveq #DEV_SET_OUTPOS,d6
00:00007862 7200            	  1714: 	moveq #0,d1						; go back to the start of the line
00:00007864 4E40            	  1715: 	trap #0
00:00007866 7C18            	  1716: 	moveq #DEV_GET_OUTPTR,d6
00:00007868 4E40            	  1717: 	trap #0
00:0000786A 2041            	  1718: 	move.l d1,a0					; a0 = pointer to buffer
                            	  1719: ;	bsr	CalcScreenLoc			; a0 = screen memory location
                            	  1720: .0001:
00:0000786C 6196            	  1721: 	bsr	FromScreen				; grab character off screen
00:0000786E 0C010024        	  1722: 	cmpi.b #'$',d1				; skip over '$' prompt character
00:00007872 67F8            	  1723: 	beq.s	.0001
                            	  1724: 
                            	  1725: ; Dispatch based on command string
                            	  1726: 
                            	  1727: cmdDispatch:
00:00007874 45FAFEE0        	  1728: 	lea	cmdString,a2
00:00007878 7800            	  1729: 	clr.l	d4							; command counter
                            	  1730: 	if (SCREEN_FORMAT==1)
00:0000787A 5988            	  1731: 		lea	-4(a0),a0				; backup a character
                            	  1732: 	else
                            	  1733: 		lea	-8(a0),a0				; backup a character
                            	  1734: 	endif
00:0000787C 2648            	  1735: 	move.l	a0,a3					; a3 = start of command on screen
                            	  1736: .checkNextCmd:
00:0000787E 6184            	  1737: 	bsr	FromScreen				; d1 = char from input screen
00:00007880 1A1A            	  1738: 	move.b (a2)+,d5
00:00007882 BB01            	  1739: 	eor.b	d5,d1						; does it match with command string?
00:00007884 67F8            	  1740: 	beq.s	.checkNextCmd		; If it does, keep matching for longest match
00:00007886 0C010080        	  1741: 	cmpi.b #$80,d1				; didn't match, was it the end of the command?
00:0000788A 6724            	  1742: 	beq.s	.foundCmd
00:0000788C 4A2AFFFF        	  1743: 	tst.b	-1(a2)					; was end of table hit?
00:00007890 6712            	  1744: 	beq.s	.endOfTable
00:00007892 5844            	  1745: 	addi.w #4,d4					; increment command counter
00:00007894 204B            	  1746: 	move.l a3,a0					; reset input pointer
00:00007896 4A2AFFFF        	  1747: 	tst.b	-1(a2)					; were we at the end of the command?
00:0000789A 6BE2            	  1748: 	bmi.s	.checkNextCmd		; if were at end continue, otherwise scan for end of cmd
                            	  1749: .scanToEndOfCmd
00:0000789C 4A1A            	  1750: 	tst.b	(a2)+						; scan to end of command
00:0000789E 6704            	  1751: 	beq.s	.endOfTable
00:000078A0 6AFA            	  1752: 	bpl.s	.scanToEndOfCmd
00:000078A2 6BDA            	  1753: 	bmi.s	.checkNextCmd
                            	  1754: .endOfTable
00:000078A4 43FA038A        	  1755: 	lea	msgUnknownCmd,a1
00:000078A8 6100F994        	  1756: 	bsr	DisplayStringCRLF
00:000078AC 6000FF6A        	  1757: 	bra	Monitor
                            	  1758: .foundCmd:
00:000078B0 43FAFEE2        	  1759: 	lea	cmdTable,a1				; a1 = pointer to command address table
00:000078B4 22714000        	  1760: 	move.l (a1,d4.w),a1		; fetch command routine address from table
00:000078B8 4ED1            	  1761: 	jmp	(a1)							; go execute command
                            	  1762: 
                            	  1763: cmdVideoMode:
00:000078BA 61000592        	  1764: 	bsr ignBlanks
00:000078BE 610008CC        	  1765: 	bsr GetHexNumber
00:000078C2 4A01            	  1766: 	cmpi.b #0,d1
00:000078C4 660E            	  1767: 	bne.s .0001
00:000078C6 6100F8E0        	  1768: 	bsr set_text_mode
00:000078CA 7E02            	  1769: 	move.l #2,d7
00:000078CC 7C0C            	  1770: 	move.l #DEV_CLEAR,d6
00:000078CE 4E40            	  1771: 	trap #0
00:000078D0 6000FF46        	  1772: 	bra Monitor
                            	  1773: .0001:
00:000078D4 6100F8FC        	  1774: 	bsr set_graphics_mode
00:000078D8 6100F922        	  1775: 	bsr get_screen_address
00:000078DC 42B9FD0FFD04    	  1776: 	move.l #0,RAND+4		; select stream 0
00:000078E2 343C1D4B        	  1777: 	move.w #7499,d2
                            	  1778: .0002:
00:000078E6 2239FD0FFD00    	  1779: 	move.l RAND,d1
00:000078EC 42B9FD0FFD00    	  1780: 	move.l #0,RAND			; cause new number generation
00:000078F2 20C1            	  1781: 	move.l d1,(a0)+			; random display
00:000078F4 51CAFFF0        	  1782: 	dbra d2,.0002
00:000078F8 6000FF1E        	  1783: 	bra Monitor
                            	  1784: 
                            	  1785: cmdBreakpoint:
00:000078FC 61000550        	  1786: 	bsr	ignBlanks
00:00007900 6100FF02        	  1787: 	bsr	FromScreen
00:00007904 0C01002B        	  1788: 	cmpi.b	#'+',d1
00:00007908 6700140A        	  1789: 	beq	ArmBreakpoint
00:0000790C 0C01002D        	  1790: 	cmpi.b	#'-',d1
00:00007910 67001480        	  1791: 	beq	DisarmBreakpoint
00:00007914 0C01004C        	  1792: 	cmpi.b	#'L',d1
00:00007918 670014CC        	  1793: 	beq	ListBreakpoints
00:0000791C 6000FEFA        	  1794: 	bra	Monitor
                            	  1795: 
                            	  1796: cmdAsteroids:
00:00007920 487AFEF6        	  1797: 	pea Monitor
00:00007924 600025B2        	  1798: 	jmp asteroids_start
                            	  1799: 
                            	  1800: cmdTinyBasic:
00:00007928 6000E2B6        	  1801: 	bra	CSTART
                            	  1802: 
                            	  1803: cmdTestCPU:
00:0000792C 6100A742        	  1804: 	bsr	cpu_test
00:00007930 43FA17E5        	  1805: 	lea	msg_test_done,a1
00:00007934 6100F908        	  1806: 	bsr	DisplayStringCRLF
00:00007938 6000FEDE        	  1807: 	bra	Monitor
                            	  1808: 
                            	  1809: cmdClearScreen:
00:0000793C 6100118E        	  1810: 	bsr	ClearScreen
00:00007940 61009AE8        	  1811: 	bsr	HomeCursor
00:00007944 6000FED2        	  1812: 	bra	Monitor
                            	  1813: 
                            	  1814: cmdCore:
00:00007948 61000504        	  1815: 	bsr			ignBlanks
00:0000794C 6100FEB6        	  1816: 	bsr			FromScreen
00:00007950 0C010032        	  1817: 	cmpi.b	#'2',d1					; check range
00:00007954 6500FEC2        	  1818: 	blo			Monitor
00:00007958 0C010035        	  1819: 	cmpi.b	#'0'+NCORES+1,d1
00:0000795C 6200FEBA        	  1820: 	bhi			Monitor
00:00007960 04010030        	  1821: 	subi.b	#'0',d1					; convert ascii to binary
00:00007964 6100FD78        	  1822: 	bsr			select_iofocus
00:00007968 6000FEAE        	  1823: 	bra			Monitor
                            	  1824: 
                            	  1825: cmdFMTK:
00:0000796C 610088B2        	  1826: 	bsr FemtikiInit
00:00007970 6000FEA6        	  1827: 	bra Monitor
                            	  1828: 
                            	  1829: cmdTestFP:
00:00007974 7029            	  1830: 	moveq #41,d0						; function #41, get float
00:00007976 7208            	  1831: 	moveq #8,d1							; d1 = input stride
00:00007978 2248            	  1832: 	move.l a0,a1						; a1 = pointer to input buffer
00:0000797A 4E4F            	  1833: 	trap #15
00:0000797C 2049            	  1834: 	move.l a1,a0
00:0000797E F2000200        	  1835: 	fmove.x fp0,fp4
00:00007982 610004CA        	  1836: 	bsr ignBlanks
00:00007986 6100FE7C        	  1837: 	bsr FromScreen
00:0000798A 1E01            	  1838: 	move.b d1,d7
00:0000798C 7029            	  1839: 	moveq #41,d0						; function #41, get float
00:0000798E 7208            	  1840: 	move.l #8,d1						; d1 = input stride
00:00007990 2248            	  1841: 	move.l a0,a1						; a1 = pointer to input buffer
00:00007992 4E4F            	  1842: 	trap #15
00:00007994 2049            	  1843: 	move.l a1,a0
00:00007996 F2000100        	  1844: 	fmove.x fp0,fp2
00:0000799A 6100F872        	  1845: 	bsr CRLF
                            	  1846: ;	moveq #39,d0
                            	  1847: ;	moveq #40,d1
                            	  1848: ;	moveq #30,d2
                            	  1849: ;	moveq #'e',d3
                            	  1850: ;	trap #15
                            	  1851: ;	bsr CRLF
00:0000799E F2396A00000402C0	  1852: 	fmove.x fp4,fpBuf
00:000079A6 F2396900000402D0	  1853: 	fmove.x fp2,fpBuf+16
00:000079AE 0C07002B        	  1854: 	cmpi.b #'+',d7
00:000079B2 6606            	  1855: 	bne .0001
00:000079B4 F2000A22        	  1856: 	fadd fp2,fp4
00:000079B8 6022            	  1857: 	bra .0002
                            	  1858: .0001
00:000079BA 0C07002D        	  1859: 	cmpi.b #'-',d7
00:000079BE 6606            	  1860: 	bne .0003
00:000079C0 F2000A28        	  1861: 	fsub fp2,fp4
00:000079C4 6016            	  1862: 	bra .0002
                            	  1863: .0003
00:000079C6 0C07002A        	  1864: 	cmpi.b #'*',d7
00:000079CA 6606            	  1865: 	bne .0004
00:000079CC F2000A23        	  1866: 	fmul fp2,fp4
00:000079D0 600A            	  1867: 	bra .0002
                            	  1868: .0004
00:000079D2 0C07002F        	  1869: 	cmpi.b #'/',d7
00:000079D6 6620            	  1870: 	bne .0005
00:000079D8 F2000A20        	  1871: 	fdiv fp2,fp4
                            	  1872: 	bra .0002
                            	  1873: .0002
00:000079DC F2396A00000402E0	  1874: 	fmove.x fp4,fpBuf+32
00:000079E4 F2001000        	  1875: 	fmove.x fp4,fp0
00:000079E8 43F900040520    	  1876: 	lea _fpBuf,a1						; a0 = pointer to buffer to use
00:000079EE 7027            	  1877: 	moveq #39,d0						; function #39 print float
00:000079F0 7228            	  1878: 	moveq #40,d1						; width
00:000079F2 741E            	  1879: 	moveq #30,d2						; precision
00:000079F4 7665            	  1880: 	moveq #'e',d3
00:000079F6 4E4F            	  1881: 	trap #15
                            	  1882: .0005
00:000079F8 6100F814        	  1883: 	bsr CRLF
00:000079FC 6000FE1A        	  1884: 	bra Monitor
                            	  1885: 
                            	  1886: cmdTestGF:
00:00007A00 6100F80C        	  1887: 	bsr CRLF
00:00007A04 7029            	  1888: 	moveq #41,d0						; function #41, get float
00:00007A06 7208            	  1889: 	move.l #8,d1						; d1 = input stride
00:00007A08 2248            	  1890: 	move.l a0,a1						; a1 = pointer to input buffer
00:00007A0A 4E4F            	  1891: 	trap #15
00:00007A0C F2396800000402E0	  1892: 	fmove.x fp0,fpBuf+32
00:00007A14 43F900040520    	  1893: 	lea _fpBuf,a1						; a0 = pointer to buffer to use
00:00007A1A 7027            	  1894: 	moveq #39,d0
00:00007A1C 7228            	  1895: 	moveq #40,d1
00:00007A1E 741E            	  1896: 	moveq #30,d2
00:00007A20 7665            	  1897: 	moveq #'e',d3
00:00007A22 4E4F            	  1898: 	trap #15
00:00007A24 2049            	  1899: 	move.l a1,a0
00:00007A26 6100F7E6        	  1900: 	bsr CRLF
00:00007A2A 6000FDEC        	  1901: 	bra Monitor
                            	  1902: 		
                            	  1903: ;-------------------------------------------------------------------------------
                            	  1904: ; CLOCK <n>
                            	  1905: ;    Set the clock register to n which will turn off or on clocks to the CPUs.
                            	  1906: ;-------------------------------------------------------------------------------
                            	  1907: 
                            	  1908: cmdClock:
00:00007A2E 6100041E        	  1909: 	bsr			ignBlanks
00:00007A32 61000758        	  1910: 	bsr			GetHexNumber
00:00007A36 4A00            	  1911: 	tst.b		d0							; was there a number?
00:00007A38 6700FDDE        	  1912: 	beq			Monitor
00:00007A3C 00400004        	  1913: 	ori.w		#4,d0						; primary core's clock cannot be turned off
00:00007A40 E159            	  1914: 	rol.w		#8,d1						; switch byte order
00:00007A42 33C1FD0FFC02    	  1915: 	move.w	d1,RST_REG+2
00:00007A48 6000FDCE        	  1916: 	bra			Monitor
                            	  1917: 
                            	  1918: ;-------------------------------------------------------------------------------
                            	  1919: ; RESET <n>
                            	  1920: ;    Reset the specified core. Resetting the core automatically turns on the 
                            	  1921: ; core's clock.
                            	  1922: ;-------------------------------------------------------------------------------
                            	  1923: 
                            	  1924: cmdReset:
00:00007A4C 61000400        	  1925: 	bsr			ignBlanks
00:00007A50 6100FDB2        	  1926: 	bsr			FromScreen
00:00007A54 0C010032        	  1927: 	cmpi.b	#'2',d1					; check range
00:00007A58 6500FDBE        	  1928: 	blo			Monitor
00:00007A5C 0C010039        	  1929: 	cmpi.b	#'9',d1
00:00007A60 6200FDB6        	  1930: 	bhi			Monitor
00:00007A64 04010030        	  1931: 	subi.b	#'0',d1					; convert ascii to binary
00:00007A68 E349            	  1932: 	lsl.w		#1,d1						; make into index
00:00007A6A 43FA0012        	  1933: 	lea			tblPow2,a1
00:00007A6E 32311000        	  1934: 	move.w	(a1,d1.w),d1
00:00007A72 E159            	  1935: 	rol.w		#8,d1						; reverse byte order
00:00007A74 33C1FD0FFC00    	  1936: 	move.w	d1,RST_REG
00:00007A7A 6000FD9C        	  1937: 	bra			Monitor
                            	  1938: 
                            	  1939: tblPow2:
00:00007A7E 0001            	  1940: 	dc.w		1
00:00007A80 0002            	  1941: 	dc.w		2
00:00007A82 0004            	  1942: 	dc.w		4
00:00007A84 0008            	  1943: 	dc.w		8
00:00007A86 0010            	  1944: 	dc.w		16
00:00007A88 0020            	  1945: 	dc.w		32
00:00007A8A 0040            	  1946: 	dc.w		64
00:00007A8C 0080            	  1947: 	dc.w		128
00:00007A8E 0100            	  1948: 	dc.w		256
00:00007A90 0200            	  1949: 	dc.w		512
00:00007A92 0400            	  1950: 	dc.w		1024
00:00007A94 0800            	  1951: 	dc.w		2048
00:00007A96 1000            	  1952: 	dc.w		4096
00:00007A98 2000            	  1953: 	dc.w		8192
00:00007A9A 4000            	  1954: 	dc.w		16384
00:00007A9C 8000            	  1955: 	dc.w		32768
                            	  1956: 	even
                            	  1957: 	
                            	  1958: cmdHelp:
                            	  1959: DisplayHelp:
00:00007A9E 43FA000A        	  1960: 	lea			HelpMsg,a1
00:00007AA2 6100F784        	  1961: 	bsr			DisplayString
00:00007AA6 6000FD70        	  1962: 	bra			Monitor
                            	  1963: 
                            	  1964: HelpMsg:
00:00007AAA 3F203D2044697370	  1965: 	dc.b	"? = Display help",LF,CR
00:00007AB2 6C61792068656C70
00:00007ABA 0A
00:00007ABB 0D
00:00007ABC 434F5245206E203D	  1966: 	dc.b  "CORE n = switch to core n, n = 2 to 9",LF,CR
00:00007AC4 2073776974636820
00:00007ACC 746F20636F726520
00:00007AD4 6E2C206E203D2032
00:00007ADC 20746F2039
00:00007AE1 0A
00:00007AE2 0D
00:00007AE3 5245534554206E20	  1967: 	dc.b  "RESET n = reset core n",LF,CR
00:00007AEB 3D20726573657420
00:00007AF3 636F7265206E
00:00007AF9 0A
00:00007AFA 0D
00:00007AFB 434C53203D20636C	  1968: 	dc.b	"CLS = clear screen",LF,CR
00:00007B03 6561722073637265
00:00007B0B 656E
00:00007B0D 0A
00:00007B0E 0D
00:00007B0F 4542203D20456469	  1969: 	dc.b	"EB = Edit memory bytes, EW, EL",LF,CR
00:00007B17 74206D656D6F7279
00:00007B1F 2062797465732C20
00:00007B27 45572C20454C
00:00007B2D 0A
00:00007B2E 0D
00:00007B2F 4642203D2046696C	  1970: 	dc.b	"FB = Fill memory bytes, FW, FL",LF,CR
00:00007B37 6C206D656D6F7279
00:00007B3F 2062797465732C20
00:00007B47 46572C20464C
00:00007B4D 0A
00:00007B4E 0D
00:00007B4F 464D544B203D2072	  1971: 	dc.b	"FMTK = run Femtiki OS",LF,CR
00:00007B57 756E2046656D7469
00:00007B5F 6B69204F53
00:00007B64 0A
00:00007B65 0D
00:00007B66 4C203D204C6F6164	  1972: 	dc.b	"L = Load S19 file",LF,CR
00:00007B6E 205331392066696C
00:00007B76 65
00:00007B77 0A
00:00007B78 0D
00:00007B79 44203D2044756D70	  1973: 	dc.b	"D = Dump memory, DR = dump registers",LF,CR
00:00007B81 206D656D6F72792C
00:00007B89 204452203D206475
00:00007B91 6D70207265676973
00:00007B99 74657273
00:00007B9D 0A
00:00007B9E 0D
00:00007B9F 4449203D20446973	  1974: 	dc.b	"DI = Disassemble",LF,CR
00:00007BA7 617373656D626C65
00:00007BAF 0A
00:00007BB0 0D
00:00007BB1 4241203D20737461	  1975: 	dc.b	"BA = start tiny basic",LF,CR
00:00007BB9 72742074696E7920
00:00007BC1 6261736963
00:00007BC6 0A
00:00007BC7 0D
00:00007BC8 4252203D20736574	  1976: 	dc.b  "BR = set breakpoint",LF,CR
00:00007BD0 20627265616B706F
00:00007BD8 696E74
00:00007BDB 0A
00:00007BDC 0D
00:00007BDD 4A203D204A756D70	  1977: 	dc.b	"J = Jump to code",LF,CR
00:00007BE5 20746F20636F6465
00:00007BED 0A
00:00007BEE 0D
00:00007BEF 53203D2073656E64	  1978: 	dc.b  "S = send to serial port",LF,CR
00:00007BF7 20746F2073657269
00:00007BFF 616C20706F7274
00:00007C06 0A
00:00007C07 0D
00:00007C08 54203D2063707520	  1979: 	dc.b	"T = cpu test program",LF,CR
00:00007C10 746573742070726F
00:00007C18 6772616D
00:00007C1C 0A
00:00007C1D 0D
00:00007C1E 5452414D203D2074	  1980: 	dc.b	"TRAM = test RAM",LF,CR,0
00:00007C26 6573742052414D
00:00007C2D 0A
00:00007C2E 0D
00:00007C2F 00
                            	  1981: 
                            	  1982: msgUnknownCmd:
00:00007C30 636F6D6D616E6420	  1983: 	dc.b	"command unknown",0
00:00007C38 756E6B6E6F776E
00:00007C3F 00
                            	  1984: 
                            	  1985: msgHello:
00:00007C40 0A              	  1986: 	dc.b	LF,CR,"Hello World!",LF,CR,0
00:00007C41 0D
00:00007C42 48656C6C6F20576F
00:00007C4A 726C6421
00:00007C4E 0A
00:00007C4F 0D
00:00007C50 00
                            	  1987: 	even
                            	  1988: 
                            	  1989: ;------------------------------------------------------------------------------
                            	  1990: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1991: ; Used to fetch a command line. (Not currently used).
                            	  1992: ;
                            	  1993: ; d0.b	- command prompt
                            	  1994: ;------------------------------------------------------------------------------
                            	  1995: 
                            	  1996: GetCmdLine:
00:00007C52 610012E6        	  1997: 		bsr		OutputChar		; display prompt
00:00007C56 103C0020        	  1998: 		move.b	#' ',d0
00:00007C5A 610012DE        	  1999: 		bsr		OutputChar
00:00007C5E 41F900040040    	  2000: 		lea		CmdBuf,a0
                            	  2001: .0001:
00:00007C64 61008BA2        	  2002: 		bsr		GetKey
00:00007C68 B03C0008        	  2003: 		cmp.b	#CTRLH,d0
00:00007C6C 6728            	  2004: 		beq.s	.0003
00:00007C6E B03C0018        	  2005: 		cmp.b	#CTRLX,d0
00:00007C72 6746            	  2006: 		beq.s	.0004
00:00007C74 B03C000D        	  2007: 		cmp.b	#CR,d0
00:00007C78 6706            	  2008: 		beq.s	.0002
00:00007C7A B03C0020        	  2009: 		cmp.b	#' ',d0
00:00007C7E 65E4            	  2010: 		bcs.s	.0001
                            	  2011: .0002:
00:00007C80 1080            	  2012: 		move.b	d0,(a0)
00:00007C82 5088            	  2013: 		lea			8(a0),a0
00:00007C84 610012B4        	  2014: 		bsr		OutputChar
00:00007C88 B03C000D        	  2015: 		cmp.b	#CR,d0
00:00007C8C 675E            	  2016: 		beq		.0007
00:00007C8E B1FC0004007F    	  2017: 		cmp.l	#CmdBufEnd-1,a0
00:00007C94 65CE            	  2018: 		bcs.s	.0001
                            	  2019: .0003:
00:00007C96 103C0008        	  2020: 		move.b	#CTRLH,d0
00:00007C9A 6100129E        	  2021: 		bsr		OutputChar
00:00007C9E 103C0020        	  2022: 		move.b	#' ',d0
00:00007CA2 61001296        	  2023: 		bsr		OutputChar
00:00007CA6 B1FC00040040    	  2024: 		cmp.l	#CmdBuf,a0
00:00007CAC 63B6            	  2025: 		bls.s	.0001
00:00007CAE 103C0008        	  2026: 		move.b	#CTRLH,d0
00:00007CB2 61001286        	  2027: 		bsr		OutputChar
00:00007CB6 5388            	  2028: 		subq.l	#1,a0
00:00007CB8 60AA            	  2029: 		bra.s	.0001
                            	  2030: .0004:
00:00007CBA 2208            	  2031: 		move.l	a0,d1
00:00007CBC 92BC00040040    	  2032: 		sub.l	#CmdBuf,d1
00:00007CC2 671E            	  2033: 		beq.s	.0006
00:00007CC4 5341            	  2034: 		subq	#1,d1
                            	  2035: .0005:
00:00007CC6 103C0008        	  2036: 		move.b	#CTRLH,d0
00:00007CCA 6100126E        	  2037: 		bsr		OutputChar
00:00007CCE 103C0020        	  2038: 		move.b	#' ',d0
00:00007CD2 61001266        	  2039: 		bsr		OutputChar
00:00007CD6 103C0008        	  2040: 		move.b	#CTRLH,d0
00:00007CDA 6100125E        	  2041: 		bsr		OutputChar
00:00007CDE 51C9FFE6        	  2042: 		dbra	d1,.0005
                            	  2043: .0006:
00:00007CE2 41F900040040    	  2044: 		lea		CmdBuf,a0
00:00007CE8 6000FF7A        	  2045: 		bra		.0001
                            	  2046: .0007:
00:00007CEC 103C000A        	  2047: 		move.b	#LF,d0
00:00007CF0 61001248        	  2048: 		bsr		OutputChar
00:00007CF4 4E75            	  2049: 		rts
                            	  2050: 
                            	  2051: ;------------------------------------------------------------------------------
                            	  2052: ; S <address> <length>
                            	  2053: ; Send data buffer to serial port
                            	  2054: ; S 40000 40
                            	  2055: ;------------------------------------------------------------------------------
                            	  2056: 
                            	  2057: cmdSendSerial:
00:00007CF6 61000156        	  2058: 	bsr			ignBlanks
00:00007CFA 61000490        	  2059: 	bsr			GetHexNumber
00:00007CFE 6700FB18        	  2060: 	beq			Monitor
00:00007D02 2C01            	  2061: 	move.l	d1,d6					; d6 points to buffer
00:00007D04 61000148        	  2062: 	bsr			ignBlanks
00:00007D08 61000482        	  2063: 	bsr			GetHexNumber
00:00007D0C 6602            	  2064: 	bne.s		.0003
00:00007D0E 7210            	  2065: 	moveq		#16,d1
                            	  2066: .0003:
00:00007D10 2246            	  2067: 	move.l	d6,a1					; a1 points to buffer
00:00007D12 2401            	  2068: 	move.l	d1,d2					; d2 = count of bytes to send
00:00007D14 6008            	  2069: 	bra.s		.0002					; enter loop at bottom
                            	  2070: .0001:
00:00007D16 1219            	  2071: 	move.b	(a1)+,d1
00:00007D18 303C0022        	  2072: 	move.w	#34,d0				; serial putchar
00:00007D1C 4E4F            	  2073: 	trap		#15
                            	  2074: .0002:
00:00007D1E 51CAFFF6        	  2075: 	dbra		d2,.0001
00:00007D22 6000FAF4        	  2076: 	bra			Monitor
                            	  2077: 		
                            	  2078: ;------------------------------------------------------------------------------
                            	  2079: ; R <address> <length>
                            	  2080: ; Send data buffer to serial port
                            	  2081: ; R 10000 40
                            	  2082: ;------------------------------------------------------------------------------
                            	  2083: 
                            	  2084: cmdReceiveSerial:
00:00007D26 61000126        	  2085: 	bsr			ignBlanks
00:00007D2A 61000460        	  2086: 	bsr			GetHexNumber
00:00007D2E 6700FAE8        	  2087: 	beq			Monitor
00:00007D32 2C01            	  2088: 	move.l	d1,d6					; d6 points to buffer
00:00007D34 61000118        	  2089: 	bsr			ignBlanks
00:00007D38 61000452        	  2090: 	bsr			GetHexNumber
00:00007D3C 6602            	  2091: 	bne.s		.0003
00:00007D3E 7210            	  2092: 	moveq		#16,d1
                            	  2093: .0003:
00:00007D40 2246            	  2094: 	move.l	d6,a1					; a1 points to buffer
00:00007D42 2401            	  2095: 	move.l	d1,d2					; d2 = count of bytes to send
00:00007D44 600C            	  2096: 	bra.s		.0002					; enter loop at bottom
                            	  2097: .0001:
00:00007D46 303C0024        	  2098: 	move.w	#36,d0				; serial peek char
00:00007D4A 4E4F            	  2099: 	trap		#15
00:00007D4C 4A81            	  2100: 	tst.l		d1
00:00007D4E 6BF6            	  2101: 	bmi.s		.0001
00:00007D50 12C1            	  2102: 	move.b	d1,(a1)+
                            	  2103: .0002:
00:00007D52 51CAFFF2        	  2104: 	dbra		d2,.0001
00:00007D56 6000FAC0        	  2105: 	bra			Monitor
                            	  2106: 		
                            	  2107: ;------------------------------------------------------------------------------
                            	  2108: ; Fill memory
                            	  2109: ;
                            	  2110: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  2111: ; FB = fill bytes		FB 00000010 100 R		; fill with random bytes
                            	  2112: ; FW = fill words
                            	  2113: ; FL = fill longs
                            	  2114: ; F = fill bytes
                            	  2115: ;------------------------------------------------------------------------------
                            	  2116: 
                            	  2117: cmdFillB:
00:00007D5A 610000F2        	  2118: 	bsr			ignBlanks
00:00007D5E 6100042C        	  2119: 	bsr			GetHexNumber
00:00007D62 2241            	  2120: 	move.l	d1,a1					; a1 = start
00:00007D64 610000E8        	  2121: 	bsr			ignBlanks
00:00007D68 61000422        	  2122: 	bsr			GetHexNumber
00:00007D6C 2601            	  2123: 	move.l	d1,d3					; d3 = count
00:00007D6E 6700FAA8        	  2124: 	beq			Monitor
00:00007D72 610000DA        	  2125: 	bsr			ignBlanks
00:00007D76 610000E8        	  2126: 	bsr PeekScreenChar
00:00007D7A 0C010052        	  2127: 	cmpi.b #'R',d1
00:00007D7E 660A            	  2128: 	bne.s .0002
00:00007D80 6100FA82        	  2129: 	bsr FromScreen
00:00007D84 1A3C0052        	  2130: 	move.b #'R',d5
00:00007D88 6006            	  2131: 	bra.s .fmem
                            	  2132: .0002:
00:00007D8A 61000400        	  2133: 	bsr	GetHexNumber		; fill value
00:00007D8E 1801            	  2134: 	move.b d1,d4
                            	  2135: .fmem:
00:00007D90 3409            	  2136: 	move.w a1,d2
00:00007D92 4A42            	  2137: 	tst.w d2
00:00007D94 6604            	  2138: 	bne.s .0001
00:00007D96 61008AAA        	  2139: 	bsr	CheckForCtrlC
                            	  2140: .0001:	
00:00007D9A 0C050052        	  2141: 	cmpi.b #'R',d5
00:00007D9E 6604            	  2142: 	bne.s .0003
00:00007DA0 6100A16C        	  2143: 	bsr RandGetNum
                            	  2144: .0003:
00:00007DA4 12C4            	  2145: 	move.b d4,(a1)+
00:00007DA6 5383            	  2146: 	sub.l	#1,d3
00:00007DA8 66E6            	  2147: 	bne.s	.fmem
00:00007DAA 6000FA6C        	  2148: 	bra	Monitor
                            	  2149: 	
                            	  2150: cmdFillW:
00:00007DAE 6100009E        	  2151: 	bsr			ignBlanks
00:00007DB2 610003D8        	  2152: 	bsr			GetHexNumber
00:00007DB6 2241            	  2153: 	move.l	d1,a1					; a1 = start
00:00007DB8 61000094        	  2154: 	bsr			ignBlanks
00:00007DBC 610003CE        	  2155: 	bsr			GetHexNumber
00:00007DC0 2601            	  2156: 	move.l	d1,d3					; d3 = count
00:00007DC2 6700FA54        	  2157: 	beq			Monitor
00:00007DC6 61000086        	  2158: 	bsr			ignBlanks
00:00007DCA 61000094        	  2159: 	bsr PeekScreenChar
00:00007DCE 0C010052        	  2160: 	cmpi.b #'R',d1
00:00007DD2 660A            	  2161: 	bne.s .0002
00:00007DD4 6100FA2E        	  2162: 	bsr FromScreen
00:00007DD8 1A3C0052        	  2163: 	move.b #'R',d5
00:00007DDC 6006            	  2164: 	bra.s .fmem
                            	  2165: .0002:
00:00007DDE 610003AC        	  2166: 	bsr	GetHexNumber			; fill value
00:00007DE2 3801            	  2167: 	move.w d1,d4
                            	  2168: .fmem:
00:00007DE4 3409            	  2169: 	move.w a1,d2
00:00007DE6 4A42            	  2170: 	tst.w d2
00:00007DE8 6604            	  2171: 	bne.s .0001
00:00007DEA 61008A56        	  2172: 	bsr	CheckForCtrlC
                            	  2173: .0001:	
00:00007DEE 0C050052        	  2174: 	cmpi.b #'R',d5
00:00007DF2 6604            	  2175: 	bne.s .0003
00:00007DF4 6100A118        	  2176: 	bsr RandGetNum
                            	  2177: .0003:
00:00007DF8 32C4            	  2178: 	move.w d4,(a1)+
00:00007DFA 5383            	  2179: 	sub.l	#1,d3
00:00007DFC 66E6            	  2180: 	bne.s	.fmem
00:00007DFE 6000FA18        	  2181: 	bra	Monitor
                            	  2182: 	
                            	  2183: cmdFillL:
00:00007E02 614A            	  2184: 	bsr			ignBlanks
00:00007E04 61000386        	  2185: 	bsr			GetHexNumber
00:00007E08 2241            	  2186: 	move.l	d1,a1					; a1 = start
00:00007E0A 6142            	  2187: 	bsr			ignBlanks
00:00007E0C 6100037E        	  2188: 	bsr			GetHexNumber
00:00007E10 2601            	  2189: 	move.l	d1,d3					; d3 = count
00:00007E12 6700FA04        	  2190: 	beq			Monitor
00:00007E16 6136            	  2191: 	bsr			ignBlanks
00:00007E18 6146            	  2192: 	bsr PeekScreenChar
00:00007E1A 0C010052        	  2193: 	cmpi.b #'R',d1
00:00007E1E 660A            	  2194: 	bne.s .0002
00:00007E20 6100F9E2        	  2195: 	bsr FromScreen
00:00007E24 1A3C0052        	  2196: 	move.b #'R',d5
00:00007E28 6006            	  2197: 	bra.s .fmem
                            	  2198: .0002:
00:00007E2A 61000360        	  2199: 	bsr			GetHexNumber	; fill value
00:00007E2E 2801            	  2200: 	move.l d1,d4
                            	  2201: .fmem:
00:00007E30 3409            	  2202: 	move.w a1,d2
00:00007E32 4A42            	  2203: 	tst.w d2
00:00007E34 6604            	  2204: 	bne.s .0001
00:00007E36 61008A0A        	  2205: 	bsr	CheckForCtrlC
                            	  2206: .0001:	
00:00007E3A 0C050052        	  2207: 	cmpi.b #'R',d5
00:00007E3E 6604            	  2208: 	bne.s .0003
00:00007E40 6100A0CC        	  2209: 	bsr RandGetNum
                            	  2210: .0003:
00:00007E44 22C4            	  2211: 	move.l d4,(a1)+
00:00007E46 5383            	  2212: 	sub.l	#1,d3
00:00007E48 66E6            	  2213: 	bne.s	.fmem
00:00007E4A 6000F9CC        	  2214: 	bra	Monitor
                            	  2215: 	
                            	  2216: ;------------------------------------------------------------------------------
                            	  2217: ; Modifies:
                            	  2218: ;	a0	- text pointer
                            	  2219: ;------------------------------------------------------------------------------
                            	  2220: 
                            	  2221: ignBlanks:
00:00007E4E 2F01            	  2222: 	move.l d1,-(a7)
                            	  2223: .0001:
00:00007E50 6100F9B2        	  2224: 	bsr	FromScreen
00:00007E54 0C010020        	  2225: 	cmpi.b #' ',d1
00:00007E58 67F6            	  2226: 	beq.s .0001
                            	  2227: 	if (SCREEN_FORMAT==1)
00:00007E5A 5988            	  2228: 		lea	-4(a0),a0
                            	  2229: 	else
                            	  2230: 		lea	-8(a0),a0
                            	  2231: 	endif
00:00007E5C 221F            	  2232: 	move.l (a7)+,d1
00:00007E5E 4E75            	  2233: 	rts
                            	  2234: 
                            	  2235: 
                            	  2236: ;------------------------------------------------------------------------------
                            	  2237: ;------------------------------------------------------------------------------
                            	  2238: 
                            	  2239: PeekScreenChar:
00:00007E60 2210            	  2240: 	move.l (a0),d1
00:00007E62 60000C70        	  2241: 	bra rbo
                            	  2242: 
                            	  2243: ;------------------------------------------------------------------------------
                            	  2244: ; Get the size character
                            	  2245: ; If the size is not recognized, assume a byte size
                            	  2246: ;
                            	  2247: ; Modifies:
                            	  2248: ;		a0	- text pointer
                            	  2249: ;		d1
                            	  2250: ; Returns:
                            	  2251: ;		d4 = size character 'B','W' or 'L'
                            	  2252: ;------------------------------------------------------------------------------
                            	  2253: 
                            	  2254: GetSzChar:
00:00007E66 61E6            	  2255: 	bsr	ignBlanks
00:00007E68 7842            	  2256: 	moveq #'B',d4		; assume byte
00:00007E6A 2210            	  2257: 	move.l (a0),d1
00:00007E6C 61000C66        	  2258: 	bsr	rbo
00:00007E70 0C010042        	  2259: 	cmpi.b #'B',d1
00:00007E74 670E            	  2260: 	beq.s .0002
00:00007E76 0C010057        	  2261: 	cmpi.b #'W',d1
00:00007E7A 6708            	  2262: 	beq.s .0002
00:00007E7C 0C01004C        	  2263: 	cmpi.b #'L',d1
00:00007E80 6702            	  2264: 	beq.s .0002
00:00007E82 4E75            	  2265: 	rts
                            	  2266: .0002:
00:00007E84 6100F97E        	  2267: 	bsr FromScreen
00:00007E88 1801            	  2268: 	move.b d1,d4
00:00007E8A 4E75            	  2269: 	rts
                            	  2270: 
                            	  2271: ;------------------------------------------------------------------------------
                            	  2272: ; Edit memory byte.
                            	  2273: ;    Bytes are built into long words in case the memory is only longword
                            	  2274: ; accessible.
                            	  2275: ;------------------------------------------------------------------------------
                            	  2276: 
                            	  2277: EditMemHelper:
00:00007E8C 61C0            	  2278: 	bsr ignBlanks
00:00007E8E 610002FC        	  2279: 	bsr GetHexNumber
00:00007E92 0C04004C        	  2280: 	cmpi.b #'L',d4
00:00007E96 6604            	  2281: 	bne.s .0001
00:00007E98 2401            	  2282: 	move.l d1,d2
00:00007E9A 4E75            	  2283: 	rts
                            	  2284: .0001:
00:00007E9C 0C040057        	  2285: 	cmpi.b #'W',d4
00:00007EA0 6606            	  2286: 	bne.s .0002
00:00007EA2 4842            	  2287: 	swap d2
00:00007EA4 3401            	  2288: 	move.w d1,d2
00:00007EA6 4E75            	  2289: 	rts
                            	  2290: .0002:
00:00007EA8 E18A            	  2291: 	lsl.l #8,d2
00:00007EAA 1401            	  2292: 	move.b d1,d2
00:00007EAC 4E75            	  2293: 	rts
                            	  2294: 	
                            	  2295: cmdEditMemory:
00:00007EAE 61B6            	  2296: 	bsr GetSzChar
00:00007EB0 619C            	  2297: 	bsr ignBlanks
00:00007EB2 610002D8        	  2298: 	bsr	GetHexNumber
00:00007EB6 2241            	  2299: 	move.l d1,a1
                            	  2300: edtmem1:
00:00007EB8 0C04004C        	  2301: 	cmpi.b #'L',d4
00:00007EBC 6610            	  2302: 	bne.s .0004
00:00007EBE 7400            	  2303: 	clr.l	d2
00:00007EC0 61CA            	  2304: 	bsr EditMemHelper
00:00007EC2 22C2            	  2305: 	move.l d2,(a1)+
00:00007EC4 7400            	  2306: 	clr.l	d2
00:00007EC6 61C4            	  2307: 	bsr EditMemHelper
00:00007EC8 22C2            	  2308: 	move.l d2,(a1)+
00:00007ECA 6000F94C        	  2309: 	bra Monitor
                            	  2310: .0004:
00:00007ECE 0C040057        	  2311: 	cmpi.b #'W',d4
00:00007ED2 6618            	  2312: 	bne.s .0005
00:00007ED4 7400            	  2313: 	clr.l	d2
00:00007ED6 61B4            	  2314: 	bsr EditMemHelper
00:00007ED8 61B2            	  2315: 	bsr EditMemHelper
00:00007EDA 4842            	  2316: 	swap d2
00:00007EDC 22C2            	  2317: 	move.l d2,(a1)+
00:00007EDE 7400            	  2318: 	clr.l	d2
00:00007EE0 61AA            	  2319: 	bsr EditMemHelper
00:00007EE2 61A8            	  2320: 	bsr EditMemHelper
00:00007EE4 4842            	  2321: 	swap d2
00:00007EE6 22C2            	  2322: 	move.l d2,(a1)+
00:00007EE8 6000F92E        	  2323: 	bra Monitor
                            	  2324: .0005:
00:00007EEC 7400            	  2325: 	clr.l	d2
00:00007EEE 619C            	  2326: 	bsr EditMemHelper
00:00007EF0 619A            	  2327: 	bsr EditMemHelper
00:00007EF2 6198            	  2328: 	bsr EditMemHelper
00:00007EF4 6196            	  2329: 	bsr EditMemHelper
00:00007EF6 C342            	  2330: 	exg d1,d2
00:00007EF8 61000BDA        	  2331: 	bsr rbo
00:00007EFC 22C1            	  2332: 	move.l d1,(a1)+
00:00007EFE 61000BD4        	  2333: 	bsr rbo
00:00007F02 C342            	  2334: 	exg d1,d2
00:00007F04 7400            	  2335: 	clr.l	d2
00:00007F06 6184            	  2336: 	bsr EditMemHelper
00:00007F08 6182            	  2337: 	bsr EditMemHelper
00:00007F0A 6180            	  2338: 	bsr EditMemHelper
00:00007F0C 6100FF7E        	  2339: 	bsr EditMemHelper
00:00007F10 C342            	  2340: 	exg d1,d2
00:00007F12 61000BC0        	  2341: 	bsr rbo
00:00007F16 22C1            	  2342: 	move.l d1,(a1)+
00:00007F18 61000BBA        	  2343: 	bsr rbo
00:00007F1C C342            	  2344: 	exg d1,d2
00:00007F1E 6000F8F8        	  2345: 	bra Monitor
                            	  2346: 
                            	  2347: ;------------------------------------------------------------------------------
                            	  2348: ; Execute code at the specified address.
                            	  2349: ;------------------------------------------------------------------------------
                            	  2350: 
                            	  2351: cmdJump:
                            	  2352: ExecuteCode:
00:00007F22 6100FF2A        	  2353: 	bsr	ignBlanks
00:00007F26 61000264        	  2354: 	bsr	GetHexNumber
00:00007F2A 2041            	  2355: 	move.l d1,a0
00:00007F2C 4E90            	  2356: 	jsr	(a0)
00:00007F2E 6000F8E8        	  2357: 	bra Monitor
                            	  2358: 
                            	  2359: cmdGrDemo:
00:00007F32 61009D40        	  2360: 	bsr setup_gfxaccel
00:00007F36 263C00000438    	  2361: 	move.l #1080,d3
00:00007F3C 287C40000000    	  2362: 	move.l #$40000000,a4
                            	  2363: .0002:
00:00007F42 243CFF7FFF7F    	  2364: 	move.l #$FF7FFF7F,d2	; white
00:00007F48 3882            	  2365: 	move.w d2,(a4)
00:00007F4A 49EC0F02        	  2366: 	add.l #3842,a4
00:00007F4E 51CBFFF2        	  2367: 	dbra d3,.0002
                            	  2368: ;	bra Monitor
00:00007F52 223C7F127F12    	  2369: 	move.l #$7F127F12,d1
00:00007F58 61000B7A        	  2370: 	bsr rbo
00:00007F5C 61009D8C        	  2371: 	bsr gfxaccel_set_color
                            	  2372: ;	move.l #800,d1
                            	  2373: ;	move.l #600,d2
                            	  2374: ;	move.l #1800,d3
                            	  2375: ;	move.l #900,d4
                            	  2376: ;	bsr gfxaccel_rectangle
00:00007F60 2A3C00002710    	  2377: 	move.l #10000,d5
                            	  2378: .0001:
00:00007F66 61009FA6        	  2379: 	bsr RandGetNum
00:00007F6A 61009D7E        	  2380: 	bsr gfxaccel_set_color
00:00007F6E 61009F9E        	  2381: 	bsr RandGetNum
00:00007F72 2801            	  2382: 	move.l d1,d4
00:00007F74 028400003FFF    	  2383: 	andi.l #$3fff,d4
00:00007F7A 61009F92        	  2384: 	bsr RandGetNum
00:00007F7E 2601            	  2385: 	move.l d1,d3
00:00007F80 028300007FFF    	  2386: 	andi.l #$7fff,d3
00:00007F86 61009F86        	  2387: 	bsr RandGetNum
00:00007F8A 2401            	  2388: 	move.l d1,d2
00:00007F8C 028200003FFF    	  2389: 	andi.l #$3fff,d2
00:00007F92 61009F7A        	  2390: 	bsr RandGetNum
00:00007F96 028100007FFF    	  2391: 	andi.l #$7fff,d1
00:00007F9C 61009D94        	  2392: 	bsr gfxaccel_draw_rectangle
00:00007FA0 51CDFFC4        	  2393: 	dbra d5,.0001
00:00007FA4 6000F872        	  2394: 	bra Monitor
                            	  2395: 
                            	  2396: ;------------------------------------------------------------------------------
                            	  2397: ; Disassemble code
                            	  2398: ; DI 1000
                            	  2399: ;------------------------------------------------------------------------------
                            	  2400: ;        CALLING SEQUENCE:
                            	  2401: ;   D0,D1,D2 = CODE TO BE DISASSEMBLED
                            	  2402: ;   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
                            	  2403: ;   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
                            	  2404: ;        JSR       DCODE68K
                            	  2405: ;
                            	  2406: ;        RETURN:
                            	  2407: ;   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
                            	  2408: ;   A5 = POINTER TO LINE AS DISASSEMBLED
                            	  2409: ;   A6 = POINTER TO END OF LINE
                            	  2410: 
                            	  2411: 
                            	  2412: cmdDisassemble:
00:00007FA8 6100FEA4        	  2413: 	bsr ignBlanks
00:00007FAC 610001DE        	  2414: 	bsr GetHexNumber
00:00007FB0 6700F866        	  2415: 	beq Monitor
00:00007FB4 363C0014        	  2416: 	move.w #20,d3			; number of lines to disassemble
                            	  2417: .0002:
00:00007FB8 2F03            	  2418: 	move.l d3,-(a7)
00:00007FBA 2041            	  2419: 	move.l d1,a0
00:00007FBC 2841            	  2420: 	move.l d1,a4			; a4 = PC of code
00:00007FBE 3018            	  2421: 	move.w (a0)+,d0		; d0 to d2 = bytes of instruction to decode
00:00007FC0 4840            	  2422: 	swap d0
00:00007FC2 3018            	  2423: 	move.w (a0)+,d0
00:00007FC4 3218            	  2424: 	move.w (a0)+,d1		; d0 to d2 = bytes of instruction to decode
00:00007FC6 4841            	  2425: 	swap d1
00:00007FC8 3218            	  2426: 	move.w (a0)+,d1
00:00007FCA 3418            	  2427: 	move.w (a0)+,d2		; d0 to d2 = bytes of instruction to decode
00:00007FCC 4842            	  2428: 	swap d2
00:00007FCE 3418            	  2429: 	move.w (a0)+,d2
00:00007FD0 4BF900040800    	  2430: 	lea _dasmbuf,a5		; a5 = pointer to disassembly buffer
00:00007FD6 61001A5A        	  2431: 	bsr DCODE68K	
00:00007FDA 383C003E        	  2432: 	move.w #62,d4
                            	  2433: .0001:
00:00007FDE 121D            	  2434: 	move.b (a5)+,d1
00:00007FE0 61000F58        	  2435: 	bsr OutputChar
00:00007FE4 51CCFFF8        	  2436: 	dbra d4,.0001
00:00007FE8 6100F224        	  2437: 	bsr CRLF
00:00007FEC 220C            	  2438: 	move.l a4,d1
00:00007FEE 261F            	  2439: 	move.l (a7)+,d3
00:00007FF0 51CBFFC6        	  2440: 	dbra d3,.0002
00:00007FF4 6000F822        	  2441: 	bra Monitor
                            	  2442: 	
                            	  2443: ;------------------------------------------------------------------------------
                            	  2444: ; Do a memory dump of the requested location.
                            	  2445: ; DB 0800 0850
                            	  2446: ;------------------------------------------------------------------------------
                            	  2447: 
                            	  2448: cmdDumpMemory:
00:00007FF8 6100FE6C        	  2449: 	bsr GetSzChar
00:00007FFC 6100FE50        	  2450: 	bsr ignBlanks
00:00008000 6100018A        	  2451: 	bsr	GetHexNumber
00:00008004 6700F812        	  2452: 	beq	Monitor					; was there a number ? no, other garbage, just ignore
00:00008008 2601            	  2453: 	move.l d1,d3				; save off start of range
00:0000800A 6100FE42        	  2454: 	bsr	ignBlanks
00:0000800E 6100017C        	  2455: 	bsr	GetHexNumber
00:00008012 6608            	  2456: 	bne.s	DumpMem1
00:00008014 2203            	  2457: 	move.l d3,d1
00:00008016 068100000040    	  2458: 	addi.l #64,d1				;	no end specified, just dump 64 bytes
                            	  2459: DumpMem1:
00:0000801C 2043            	  2460: 	move.l d3,a0
00:0000801E 2241            	  2461: 	move.l d1,a1
00:00008020 6100F1EC        	  2462: 	bsr	CRLF
                            	  2463: .0001:
00:00008024 B3C8            	  2464: 	cmpa.l a0,a1
00:00008026 6300F7F0        	  2465: 	bls	Monitor
00:0000802A 6102            	  2466: 	bsr	DisplayMem
00:0000802C 60F6            	  2467: 	bra.s	.0001
                            	  2468: 
                            	  2469: ;------------------------------------------------------------------------------
                            	  2470: ; Display memory dump in a format suitable for edit.
                            	  2471: ;
                            	  2472: ;	EB 12345678 00 11 22 33 44 55 66 77  "........"
                            	  2473: ;
                            	  2474: ; Modifies:
                            	  2475: ;		d1,d2,a0
                            	  2476: ;------------------------------------------------------------------------------
                            	  2477: 	
                            	  2478: DisplayMem:
00:0000802E 123C0045        	  2479: 	move.b #'E',d1
00:00008032 61000F06        	  2480: 	bsr	OutputChar
00:00008036 1204            	  2481: 	move.b d4,d1
00:00008038 61000F00        	  2482: 	bsr OutputChar
00:0000803C 6100072E        	  2483: 	bsr DisplaySpace
00:00008040 2208            	  2484: 	move.l a0,d1
00:00008042 61000730        	  2485: 	bsr	DisplayTetra
00:00008046 7407            	  2486: 	moveq #7,d2						; assume bytes
00:00008048 0C04004C        	  2487: 	cmpi.b #'L',d4
00:0000804C 6604            	  2488: 	bne.s .0004
00:0000804E 7401            	  2489: 	moveq	#1,d2
00:00008050 6008            	  2490: 	bra.s dspmem1
                            	  2491: .0004:
00:00008052 0C040057        	  2492: 	cmpi.b #'W',d4
00:00008056 6602            	  2493: 	bne.s dspmem1
00:00008058 7403            	  2494: 	moveq #3,d2
                            	  2495: dspmem1:
00:0000805A 123C0020        	  2496: 	move.b #' ',d1
00:0000805E 61000EDA        	  2497: 	bsr	OutputChar
00:00008062 0C04004C        	  2498: 	cmpi.b #'L',d4
00:00008066 6608            	  2499: 	bne.s .0005
00:00008068 2218            	  2500: 	move.l (a0)+,d1
00:0000806A 61000708        	  2501: 	bsr	DisplayTetra
00:0000806E 6014            	  2502: 	bra.s .0006
                            	  2503: .0005:
00:00008070 0C040057        	  2504: 	cmpi.b #'W',d4
00:00008074 6608            	  2505: 	bne.s .0007
00:00008076 3218            	  2506: 	move.w (a0)+,d1
00:00008078 61000700        	  2507: 	bsr	DisplayWyde
00:0000807C 6006            	  2508: 	bra.s .0006
                            	  2509: .0007:
00:0000807E 1218            	  2510: 	move.b (a0)+,d1
00:00008080 610006FE        	  2511: 	bsr DisplayByte
                            	  2512: .0006:
00:00008084 51CAFFD4        	  2513: 	dbra d2,dspmem1
00:00008088 610006D0        	  2514: 	bsr	DisplayTwoSpaces
00:0000808C 123C0022        	  2515: 	move.b #34,d1
00:00008090 61000EA8        	  2516: 	bsr	OutputChar
00:00008094 5188            	  2517: 	lea	-8(a0),a0
00:00008096 7407            	  2518: 	moveq	#7,d2
                            	  2519: .0002:
00:00008098 1218            	  2520: 	move.b (a0)+,d1
00:0000809A B23C0020        	  2521: 	cmp.b	#' ',d1
00:0000809E 6506            	  2522: 	blo.s	.0003
00:000080A0 B23C007F        	  2523: 	cmp.b	#127,d1
00:000080A4 6304            	  2524: 	bls.s	.0001
                            	  2525: .0003:
00:000080A6 123C002E        	  2526: 	move.b #'.',d1
                            	  2527: .0001:
00:000080AA 61000E8E        	  2528: 	bsr	OutputChar
00:000080AE 51CAFFE8        	  2529: 	dbra d2,.0002
00:000080B2 123C0022        	  2530: 	move.b #34,d1
00:000080B6 61000E82        	  2531: 	bsr	OutputChar
00:000080BA 61008786        	  2532: 	bsr	CheckForCtrlC
00:000080BE 6000F14E        	  2533: 	bra	CRLF
                            	  2534: 
                            	  2535: ;------------------------------------------------------------------------------
                            	  2536: ; Dump Registers
                            	  2537: ;    The dump is in a format that allows the register value to be edited.
                            	  2538: ;
                            	  2539: ; RegD0 12345678
                            	  2540: ; RegD1 77777777
                            	  2541: ;	... etc
                            	  2542: ;------------------------------------------------------------------------------
                            	  2543: 
                            	  2544: cmdDumpRegs:
00:000080C2 6100F14A        	  2545: 	bsr	CRLF
00:000080C6 363C000F        	  2546: 	move.w #15,d3						; number of registers-1
00:000080CA 41FA007A        	  2547: 	lea	msg_reglist,a0			;
00:000080CE 43FA0072        	  2548: 	lea	msg_regs,a1
00:000080D2 45F900040100    	  2549: 	lea	Regsave,a2					; a2 points to register save area
                            	  2550: .0001:
00:000080D8 6100F14E        	  2551: 	bsr			DisplayString
00:000080DC 1218            	  2552: 	move.b	(a0)+,d1
00:000080DE 61000E5A        	  2553: 	bsr			OutputChar
00:000080E2 1218            	  2554: 	move.b	(a0)+,d1
00:000080E4 61000E54        	  2555: 	bsr			OutputChar
00:000080E8 61000682        	  2556: 	bsr			DisplaySpace
00:000080EC 221A            	  2557: 	move.l	(a2)+,d1
00:000080EE 61000684        	  2558: 	bsr			DisplayTetra
00:000080F2 6100F11A        	  2559: 	bsr			CRLF
00:000080F6 51CBFFE0        	  2560: 	dbra		d3,.0001
00:000080FA 6100F12C        	  2561: 	bsr			DisplayString
00:000080FE 1218            	  2562: 	move.b	(a0)+,d1
00:00008100 61000E38        	  2563: 	bsr			OutputChar
00:00008104 1218            	  2564: 	move.b	(a0)+,d1
00:00008106 61000E32        	  2565: 	bsr			OutputChar
00:0000810A 61000660        	  2566: 	bsr			DisplaySpace
00:0000810E 223900040144    	  2567: 	move.l	Regsave+$44,d1
00:00008114 6100065E        	  2568: 	bsr			DisplayTetra
00:00008118 6100F0F4        	  2569: 	bsr			CRLF
00:0000811C 6100F10A        	  2570: 	bsr			DisplayString
00:00008120 1218            	  2571: 	move.b	(a0)+,d1
00:00008122 61000E16        	  2572: 	bsr			OutputChar
00:00008126 1218            	  2573: 	move.b	(a0)+,d1
00:00008128 61000E10        	  2574: 	bsr			OutputChar
00:0000812C 6100063E        	  2575: 	bsr			DisplaySpace
00:00008130 323900040140    	  2576: 	move.w	Regsave+$40,d1
00:00008136 61000642        	  2577: 	bsr			DisplayWyde
00:0000813A 6100F0D2        	  2578: 	bsr			CRLF
00:0000813E 6000F6D8        	  2579: 	bra			Monitor
                            	  2580: 
                            	  2581: msg_regs:
00:00008142 526567          	  2582: 	dc.b	"Reg",0
00:00008145 00
                            	  2583: msg_reglist:
00:00008146 4430443144324433	  2584: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
00:0000814E 4434443544364437
00:00008156 4130413141324133
00:0000815E 4134413541364137
00:00008166 50435352
00:0000816A 00
                            	  2585: 
                            	  2586: 	align	1
                            	  2587: 
                            	  2588: ;------------------------------------------------------------------------------
                            	  2589: ;------------------------------------------------------------------------------
                            	  2590: 
                            	  2591: cmdTestSerialReceive:
                            	  2592: .0002:
00:0000816C 7024            	  2593: 	moveq		#36,d0				; serial get char from buffer
00:0000816E 4E4F            	  2594: 	trap		#15
                            	  2595: ;	bsr			SerialPeekCharDirect
00:00008170 4A41            	  2596: 	tst.w		d1
00:00008172 6B0A            	  2597: 	bmi.s		.0001
00:00008174 0C01001A        	  2598: 	cmpi.b	#CTRLZ,d1
00:00008178 670A            	  2599: 	beq			.0003
00:0000817A 61000DBE        	  2600: 	bsr			OutputChar
                            	  2601: .0001:	
00:0000817E 610086C2        	  2602: 	bsr			CheckForCtrlC
00:00008182 60E8            	  2603: 	bra			.0002
                            	  2604: .0003:
00:00008184 610084C2        	  2605: 	bsr			_KeybdInit
00:00008188 6000F68E        	  2606: 	bra			Monitor
                            	  2607: 
                            	  2608: ;------------------------------------------------------------------------------
                            	  2609: ; Get a hexidecimal number. Maximum of eight digits.
                            	  2610: ;
                            	  2611: ; Returns:
                            	  2612: ;		d0 = number of digits
                            	  2613: ;		d1 = value of number
                            	  2614: ;		zf = number of digits == 0
                            	  2615: ;------------------------------------------------------------------------------
                            	  2616: 
                            	  2617: GetHexNumber:
00:0000818C 2F02            	  2618: 	move.l d2,-(a7)
00:0000818E 7400            	  2619: 	clr.l	d2
00:00008190 7000            	  2620: 	moveq	#0,d0
                            	  2621: .0002
00:00008192 6100F670        	  2622: 	bsr	FromScreen
00:00008196 61000588        	  2623: 	bsr	AsciiToHexNybble
00:0000819A 0C0100FF        	  2624: 	cmpi.b #$ff,d1
00:0000819E 6712            	  2625: 	beq.s	.0001
00:000081A0 E98A            	  2626: 	lsl.l	#4,d2
00:000081A2 02810000000F    	  2627: 	andi.l #$0f,d1
00:000081A8 8481            	  2628: 	or.l d1,d2
00:000081AA 5240            	  2629: 	addq #1,d0
00:000081AC 0C000008        	  2630: 	cmpi.b #8,d0
00:000081B0 65E0            	  2631: 	blo.s	.0002
                            	  2632: .0001
00:000081B2 2202            	  2633: 	move.l d2,d1
00:000081B4 241F            	  2634: 	move.l (a7)+,d2
00:000081B6 4A00            	  2635: 	tst.b	d0
00:000081B8 4E75            	  2636: 	rts	
                            	  2637: 
                            	  2638: GetDecNumber:
00:000081BA 48E73000        	  2639: 	movem.l d2/d3,-(a7)
00:000081BE 7400            	  2640: 	clr.l d2
00:000081C0 7000            	  2641: 	clr.l d0
                            	  2642: .0002
00:000081C2 6100F640        	  2643: 	bsr FromScreen					; grab a character off the screen
00:000081C6 61000558        	  2644: 	bsr	AsciiToHexNybble		; convert to an ascii nybble
00:000081CA 0C0100FF        	  2645: 	cmpi.b #$ff,d1
00:000081CE 6718            	  2646: 	beq.s	.0001
00:000081D0 02810000000F    	  2647: 	andi.l #$0F,d1					; d1 = 0 to 9
00:000081D6 2602            	  2648: 	move.l d2,d3						; d3 = current number
00:000081D8 D683            	  2649: 	add.l d3,d3							; d3*2
00:000081DA E78A            	  2650: 	lsl.l #3,d2							; current number * 8
00:000081DC D483            	  2651: 	add.l d3,d2							; current number * 10
00:000081DE D481            	  2652: 	add.l d1,d2							; add in new digit
00:000081E0 5240            	  2653: 	addq #1,d0							; increment number of digits
00:000081E2 0C000009        	  2654: 	cmpi.b #9,d0						; make sure 9 or fewer
00:000081E6 65DA            	  2655: 	blo .0002
                            	  2656: .0001
00:000081E8 2202            	  2657: 	move.l d2,d1						; return number in d1
00:000081EA 4CDF000C        	  2658: 	movem.l (a7)+,d2/d3
00:000081EE 4A00            	  2659: 	tst.b d0
00:000081F0 4E75            	  2660: 	rts
                            	  2661: 	
                            	  2662: 	include "FloatToString.x68"

Source: "FloatToString.x68"
                            	     1: 	code
                            	     2: ;==============================================================================
                            	     3: ; Decimal-Floating point to string conversion routine.
                            	     4: ;
                            	     5: ; Modifies
                            	     6: ;		_fpWork work area
                            	     7: ; Register Usage:
                            	     8: ; 	fp0 = input decimal-float to convert
                            	     9: ;		fp1 = constant holder, 1.0, 10.0
                            	    10: ;		fp2 = 1.0e<fp0 exponent> value for conversion
                            	    11: ;		fp3 = holds digit value during significand conversion
                            	    12: ; 	a0 = pointer to string buffer, updated to point to NULL at end of string
                            	    13: ;		a1 = pointer to "Nan" or "Inf" message string
                            	    14: ;		d0 = temporary
                            	    15: ;		d1 = digit value during exponent, significand conversion
                            	    16: ; 	d6 = exponent
                            	    17: ;==============================================================================
                            	    18: 	align 4
00:00008200 25FF0000        	    19: _dfOne	dc.l $25ff0000,$00000000,$00000000
00:00008204 00000000
00:00008208 00000000
00:0000820C 2600C000        	    20: _dfTen	dc.l $2600C000,$00000000,$00000000
00:00008210 00000000
00:00008214 00000000
00:00008218 2606DDFA        	    21: _dfMil  dc.l $2606DDFA,$1C000000,$00000000
00:0000821C 1C000000
00:00008220 00000000
                            	    22: 
00:00008224 4E614E          	    23: _msgNan	dc.b "NaN",0
00:00008227 00
00:00008228 496E66          	    24: _msgInf dc.b "Inf",0
00:0000822B 00
                            	    25: 	even
                            	    26: 
                            	    27: ;------------------------------------------------------------------------------
                            	    28: ; Check for the special Nan and infinity values. Output the appropriate string.
                            	    29: ;
                            	    30: ; Modifies
                            	    31: ;		_fpWork area
                            	    32: ;		a0
                            	    33: ; Parameters:
                            	    34: ;		fp0 = dbl
                            	    35: ;------------------------------------------------------------------------------
                            	    36: 
                            	    37: _CheckNan:
00:0000822C 4E52FFF4        	    38: 	link a2,#-12
00:00008230 48D70201        	    39: 	movem.l d0/a1,(sp)
00:00008234 2F79000400980008	    40: 	move.l _canary,8(sp)
00:0000823C F239680000040600	    41: 	fmove.x fp0,_fpWork
00:00008244 103900040600    	    42: 	move.b _fpWork,d0				; get sign+combo
00:0000824A 0200007C        	    43: 	andi.b #$7C,d0					; mask for combo bits
00:0000824E 0C00007C        	    44: 	cmpi.b #$7C,d0					; is it the Nan combo?
00:00008252 6606            	    45: 	bne .notNan
00:00008254 43FAFFCE        	    46: 	lea _msgNan,a1					; output "Nan"
00:00008258 600A            	    47: 	bra .outStr
                            	    48: .notNan
00:0000825A 0C000078        	    49: 	cmpi.b #$78,d0					; is it infinity combo?
00:0000825E 661E            	    50: 	bne .notInf
00:00008260 43FAFFC6        	    51: 	lea _msgInf,a1
                            	    52: .outStr
00:00008264 10D9            	    53: 	move.b (a1)+,(a0)+			; output "Inf"
00:00008266 10D9            	    54: 	move.b (a1)+,(a0)+
00:00008268 10D9            	    55: 	move.b (a1)+,(a0)+
00:0000826A 4210            	    56: 	clr.b (a0)
00:0000826C 4CD70201        	    57: 	movem.l (sp),d0/a1
00:00008270 A2AF00030008    	    58: 	cchk 8(sp)
00:00008276 4E5A            	    59: 	unlk a2
00:00008278 003C0001        	    60: 	ori #1,ccr							; set carry and return
00:0000827C 4E75            	    61: 	rts
                            	    62: .notInf
00:0000827E 4CD70201        	    63: 	movem.l (sp),d0/a1
00:00008282 A2AF00030008    	    64: 	cchk 8(sp)
00:00008288 4E5A            	    65: 	unlk a2
00:0000828A 023C00FE        	    66: 	andi #$FE,ccr						; clear carry and return
00:0000828E 4E75            	    67: 	rts
                            	    68: 
                            	    69: ;------------------------------------------------------------------------------
                            	    70: ; Check for a zero value. Output a single "0" if zero,
                            	    71: ;
                            	    72: ; Modifies:
                            	    73: ;		a0
                            	    74: ; Parameters:
                            	    75: ;		fp0 = dbl
                            	    76: ;------------------------------------------------------------------------------
                            	    77: 
                            	    78: _CheckZero:
00:00008290 F200003A        	    79: 	ftst fp0								; check if number is zero
00:00008294 F28E000E        	    80: 	fbne .0003
00:00008298 10FC0030        	    81: 	move.b #'0',(a0)+				; if zero output "0"
00:0000829C 4210            	    82: 	clr.b (a0)
00:0000829E 003C0004        	    83: 	ori #4,ccr							; set zf
00:000082A2 4E75            	    84: 	rts
                            	    85: .0003
00:000082A4 023C00FB        	    86: 	andi #$FB,ccr						; clear zf
00:000082A8 4E75            	    87: 	rts
                            	    88: 
                            	    89: ;------------------------------------------------------------------------------
                            	    90: ; Check for a negative number. This includes Nans and Infinities. Output a "-"
                            	    91: ; if negative.
                            	    92: ;
                            	    93: ;	Modifies
                            	    94: ;		a0
                            	    95: ; Parameters:
                            	    96: ;		fp0 = dbl
                            	    97: ;------------------------------------------------------------------------------
                            	    98: 
                            	    99: _CheckNegative:
00:000082AA F200003A        	   100: 	ftst fp0								; is number negative?
00:000082AE F293000A        	   101: 	fbge .0002
00:000082B2 10FC002D        	   102: 	move.b #'-',(a0)+				; yes, output '-'
00:000082B6 F200001A        	   103: 	fneg fp0								; make fp0 positive
                            	   104: .0002
00:000082BA 4E75            	   105: 	rts
                            	   106: 
                            	   107: ;------------------------------------------------------------------------------
                            	   108: ; Make the input value larger so that digits may appear before the decimal
                            	   109: ; point.
                            	   110: ;
                            	   111: ; Modifies:
                            	   112: ;		fp0,fp1,d6
                            	   113: ; Parameters:
                            	   114: ;		fp0 = dbl
                            	   115: ;------------------------------------------------------------------------------
                            	   116: 
                            	   117: ;	if (dbl < 1.0) {
                            	   118: ;		while (dbl < 1.0) {
                            	   119: ;			dbl *= 1000000.0;
                            	   120: ;			exp -= 6;  
                            	   121: ;		}
                            	   122: ;	}
                            	   123: 
                            	   124: _MakeBig:
00:000082BC F23C50800001    	   125: 	fmove.w #1,fp1
                            	   126: .0002
00:000082C2 F2000438        	   127: 	fcmp fp1,fp0						; is fp0 > 1?
00:000082C6 F293000E        	   128: 	fbge .0001							; yes, return
00:000082CA F23C402600000006	   129: 	fscale.l #6,fp0					; multiply fp0 by a million
00:000082D2 5D46            	   130: 	subi.w #6,d6						; decrement exponent by six
00:000082D4 60EC            	   131: 	bra .0002								; keep trying until number is > 1
                            	   132: .0001
00:000082D6 4E75            	   133: 	rts
                            	   134: 	
                            	   135: ;------------------------------------------------------------------------------
                            	   136: ;	Create a number dbl2 on the same order of magnitude as dbl, but
                            	   137: ;	less than dbl. The number will be 1.0e<dbl's exponent>
                            	   138: ;
                            	   139: ; Modifies:
                            	   140: ;		d6,fp2
                            	   141: ; Parameters:
                            	   142: ;		fp0 = dbl
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: ;	// The following is similar to using log10() and pow() functions.
                            	   146: ;	// Now dbl is >= 1.0
                            	   147: ;	// Create a number dbl2 on the same order of magnitude as dbl, but
                            	   148: ;	// less than dbl.
                            	   149: ;	dbl2 = 1.0;
                            	   150: ;	dbla = dbl2;
                            	   151: ;	if (dbl > dbl2) {	// dbl > 1.0 ?
                            	   152: ;		while (dbl2 <= dbl) {
                            	   153: ;			dbla = dbl2;
                            	   154: ;			dbl2 *= 10.0;	// increase power of 10
                            	   155: ;			exp++;
                            	   156: ;		}
                            	   157: ;		// The above loop goes one too far, we want the last value less
                            	   158: ;		// than dbl.
                            	   159: ;		dbl2 = dbla;
                            	   160: ;		exp--;
                            	   161: ;	}
                            	   162: 
                            	   163: _LessThanDbl:
00:000082D8 F23C51000001    	   164: 	fmove.w #1,fp2			; setup fp2 = 1
00:000082DE F2000838        	   165: 	fcmp fp2,fp0				; if (dbl > dbl2)
00:000082E2 F295001E        	   166: 	fble .0004
                            	   167: .0006
00:000082E6 F2000138        	   168: 	fcmp fp0,fp2				; while (dbl2 <= dbl)
00:000082EA F292000C        	   169: 	fbgt .0005
00:000082EE F23C51260001    	   170: 	fscale.w #1,fp2			; dbl2 *= 10 (increase exponent by one)
00:000082F4 5246            	   171: 	addi.w #1,d6				; exp++
00:000082F6 60EE            	   172: 	bra .0006
                            	   173: .0005
00:000082F8 F23C4126FFFFFFFF	   174: 	fscale.l #-1,fp2		; dbl2 /= 10 (decrease exponent by one)
00:00008300 5346            	   175: 	subi.w #1,d6				; exp--;
                            	   176: .0004	
                            	   177: ;	fmove.x fp0,_fpWork	; debugging
                            	   178: ;	fmove.x fp2,_fpWork+12
00:00008302 4E75            	   179: 	rts
                            	   180: 
                            	   181: ;------------------------------------------------------------------------------
                            	   182: ; Compute the number of digits before the decimal point.
                            	   183: ;
                            	   184: ; Modifies:
                            	   185: ;		d0,d6,_digits_before_decpt
                            	   186: ; Parameters:
                            	   187: ;		d6 = exponent
                            	   188: ;------------------------------------------------------------------------------
                            	   189: 
                            	   190: ; if (exp >= 0 && exp < 6) {
                            	   191: ;   digits_before_decpt = exp+1;
                            	   192: ;		exp = 0;
                            	   193: ;	}
                            	   194: ;	else if (exp >= -7)
                            	   195: ;		digits_before_decpt = 1;
                            	   196: ;	else
                            	   197: ;		digits_before_decpt = -1;
                            	   198: 
                            	   199: _ComputeDigitsBeforeDecpt:
00:00008304 2F00            	   200: 	move.l d0,-(a7)
00:00008306 4A46            	   201: 	tst.w d6
00:00008308 6B16            	   202: 	bmi .0007
00:0000830A 0C460006        	   203: 	cmpi.w #6,d6
00:0000830E 6C10            	   204: 	bge .0007
00:00008310 3006            	   205: 	move.w d6,d0
00:00008312 5240            	   206: 	addi.w #1,d0
00:00008314 33C000040510    	   207: 	move.w d0,_digits_before_decpt	
00:0000831A 4246            	   208: 	clr.w d6
00:0000831C 201F            	   209: 	move.l (a7)+,d0
00:0000831E 4E75            	   210: 	rts
                            	   211: .0007
00:00008320 0C46FFF9        	   212: 	cmpi.w #-7,d6
00:00008324 6D0C            	   213: 	blt .0009
00:00008326 33FC000100040510	   214: 	move.w #1,_digits_before_decpt
00:0000832E 201F            	   215: 	move.l (a7)+,d0
00:00008330 4E75            	   216: 	rts
                            	   217: .0009
00:00008332 33FCFFFF00040510	   218: 	move.w #-1,_digits_before_decpt
00:0000833A 201F            	   219: 	move.l (a7)+,d0
00:0000833C 4E75            	   220: 	rts
                            	   221: 
                            	   222: ;------------------------------------------------------------------------------
                            	   223: ;	Spit out a leading zero before the decimal point for a small number.
                            	   224: ;
                            	   225: ; Modifies:
                            	   226: ;		a0
                            	   227: ; Parameters:
                            	   228: ;		d6 = exponent
                            	   229: ;------------------------------------------------------------------------------
                            	   230: 
                            	   231: ;  if (exp < -7) {
                            	   232: ;		 buf[ndx] = '0';
                            	   233: ;		 ndx++;
                            	   234: ;    buf[ndx] = '.';
                            	   235: ;    ndx++;
                            	   236: ;  }
                            	   237: 
                            	   238: _LeadingZero:
00:0000833E 0C46FFF9        	   239: 	cmpi.w #-7,d6
00:00008342 6C08            	   240: 	bge .0010
00:00008344 10FC0030        	   241: 	move.b #'0',(a0)+
00:00008348 10FC002E        	   242: 	move.b #'.',(a0)+
                            	   243: .0010
00:0000834C 4E75            	   244: 	rts
                            	   245: 
                            	   246: ;------------------------------------------------------------------------------
                            	   247: ; Extract the digits of the significand.
                            	   248: ;
                            	   249: ; Modifies:
                            	   250: ;		_precision variable
                            	   251: ; Register Usage
                            	   252: ;		d0 = counter
                            	   253: ;		d1 = digit
                            	   254: ;		fp0 = dbl
                            	   255: ;		fp2 = dbl2
                            	   256: ;		fp3 = digit as decimal float
                            	   257: ;		fp7 = dbla
                            	   258: ; Parameters:
                            	   259: ;		fp0, fp2
                            	   260: ;------------------------------------------------------------------------------
                            	   261: 
                            	   262: ;	// Now loop processing one digit at a time.
                            	   263: ;  for (nn = 0; nn < 25 && precision > 0; nn++) {
                            	   264: ;    digit = 0;
                            	   265: ;		dbla = dbl;
                            	   266: ;		// dbl is on the same order of magnitude as dbl2 so
                            	   267: ;		// a repeated subtract can be used to find the digit.
                            	   268: ;    while (dbl >= dbl2) {
                            	   269: ;      dbl -= dbl2;
                            	   270: ;      digit++;
                            	   271: ;    }
                            	   272: ;    buf[ndx] = digit + '0';
                            	   273: ;		// Now go back and perform just a single subtract and
                            	   274: ;		// a multiply to find out how much to reduce dbl by.
                            	   275: ;		// This should improve the accuracy
                            	   276: ;		if (digit > 2)
                            	   277: ;			dbl = dbla - dbl2 * digit;
                            	   278: ;    ndx++;
                            	   279: ;    digits_before_decpt--;
                            	   280: ;    if (digits_before_decpt==0) {
                            	   281: ;			buf[ndx] = '.';
                            	   282: ;			ndx++;
                            	   283: ;    }
                            	   284: ;    else if (digits_before_decpt < 0)
                            	   285: ;      precision--;
                            	   286: ;		// Shift the next digit to be tested into position.
                            	   287: ;    dbl *= 10.0;
                            	   288: ;  }
                            	   289: 	
                            	   290: _SpitOutDigits:
00:0000834E 4E52FFE8        	   291: 	link a2,#-24
00:00008352 2F79000400980014	   292: 	move.l _canary,20(sp)
00:0000835A F2176B80        	   293: 	fmove.x fp7,(sp)
00:0000835E 48EF0003000C    	   294: 	movem.l d0/d1,12(sp)
00:00008364 303C0018        	   295: 	move.w #24,d0			; d0 = nn
                            	   296: .0017	
00:00008368 4AB900040514    	   297: 	tst.l _precision
00:0000836E 6F46            	   298: 	ble .0011
00:00008370 7200            	   299: 	moveq #0,d1				; digit = 0
00:00008372 F2000380        	   300: 	fmove fp0,fp7			; dbla = dbl
                            	   301: .0013
00:00008376 F2000838        	   302: 	fcmp fp2,fp0
00:0000837A F294000A        	   303: 	fblt .0012
00:0000837E F2000828        	   304: 	fsub fp2,fp0			; dbl -= dbl2
00:00008382 5201            	   305: 	addi.b #1,d1			; digit++
00:00008384 60F0            	   306: 	bra .0013
                            	   307: .0012
00:00008386 06010030        	   308: 	addi.b #'0',d1		; convert digit to ascii
00:0000838A 10C1            	   309: 	move.b d1,(a0)+		; and store
00:0000838C 04010030        	   310: 	subi.b #'0',d1		; d1 = binary digit again
                            	   311: ;	cmpi.b #2,d1
                            	   312: ;	ble .0014
                            	   313: 
                            	   314: ;	ext.w d1
                            	   315: ;	ext.l d1
                            	   316: ;	fmove.l d1,fp3		; fp3 = digit
                            	   317: ;	fmul fp2,fp3			; fp3 = dbl2 * digit
                            	   318: ;	fmove fp7,fp0
                            	   319: ;	fsub fp3,fp0			; dbl = dbla - dbl2 * digit
                            	   320: .0014
00:00008390 537900040510    	   321: 	subi.w #1,_digits_before_decpt
00:00008396 6604            	   322: 	bne .0015
00:00008398 10FC002E        	   323: 	move.b #'.',(a0)+
                            	   324: .0015
00:0000839C 4A7900040510    	   325: 	tst.w _digits_before_decpt
00:000083A2 6C06            	   326: 	bge .0016
00:000083A4 53B900040514    	   327: 	subi.l #1,_precision
                            	   328: .0016
00:000083AA F23C4126FFFFFFFF	   329: 	fscale.l #-1,fp2		; dbl *= 10.0
00:000083B2 51C8FFB4        	   330: 	dbra d0,.0017
                            	   331: .0011
00:000083B6 4CEF0003000C    	   332: 	movem.l 12(sp),d0/d1
00:000083BC F2174B80        	   333: 	fmove.x (sp),fp7
00:000083C0 A2AF00030014    	   334: 	cchk 20(sp)
00:000083C6 4E5A            	   335: 	unlk a2
00:000083C8 4E75            	   336: 	rts
                            	   337: 
                            	   338: ;------------------------------------------------------------------------------
                            	   339: ; If the number ends in a decimal point, trim off the point.
                            	   340: ;
                            	   341: ; Registers Modified:
                            	   342: ;		none
                            	   343: ; Parameters:
                            	   344: ;		a0 = pointer to end of number
                            	   345: ; Returns:
                            	   346: ;		a0 = updated to point just past last digit.
                            	   347: ;------------------------------------------------------------------------------
                            	   348: 
                            	   349: _TrimTrailingPoint:
00:000083CA 0C28002EFFFF    	   350: 	cmpi.b #'.',-1(a0)
00:000083D0 6604            	   351: 	bne .0001
00:000083D2 4220            	   352: 	clr.b -(a0)
00:000083D4 4E75            	   353: 	rts
                            	   354: .0001
00:000083D6 0C10002E        	   355: 	cmpi.b #'.',(a0)
00:000083DA 660A            	   356: 	bne .0002
00:000083DC 4A280001        	   357: 	cmpi.b #0,1(a0)
00:000083E0 6604            	   358: 	bne .0002
00:000083E2 4210            	   359: 	clr.b (a0)
00:000083E4 5348            	   360: 	subq #1,a0
                            	   361: .0002
00:000083E6 4E75            	   362: 	rts
                            	   363: 	
                            	   364: ;------------------------------------------------------------------------------
                            	   365: ; If the number ends in .0 get rid of the .0
                            	   366: ;
                            	   367: ; Registers Modified:
                            	   368: ;		none
                            	   369: ; Parameters:
                            	   370: ;		a0 = pointer to last digits of number
                            	   371: ; Returns:
                            	   372: ;		a0 = updated to point just past last digit.
                            	   373: ;------------------------------------------------------------------------------
                            	   374: 
                            	   375: _TrimDotZero:
00:000083E8 4A10            	   376: 	tst.b (a0)
00:000083EA 6616            	   377: 	bne .0004
00:000083EC 0C280030FFFF    	   378: 	cmpi.b #'0',-1(a0)
00:000083F2 660E            	   379: 	bne .0004
00:000083F4 0C28002EFFFE    	   380: 	cmpi.b #'.',-2(a0)
00:000083FA 6606            	   381: 	bne .0004
00:000083FC 4228FFFE        	   382: 	clr.b -2(a0)
00:00008400 5548            	   383: 	subq #2,a0
                            	   384: .0004
00:00008402 4E75            	   385: 	rts
                            	   386: 
                            	   387: ;------------------------------------------------------------------------------
                            	   388: ; Trim trailing zeros from the number. Generally there is no need to display
                            	   389: ; trailing zeros.
                            	   390: ; Turns a number like 652.000000000000000000000 into 650.0
                            	   391: ;
                            	   392: ; Registers Modified:
                            	   393: ;		none
                            	   394: ; Parameters:
                            	   395: ;		a0 = pointer to last digits of number
                            	   396: ; Returns:
                            	   397: ;		a0 = updated to point just past last digit.
                            	   398: ;------------------------------------------------------------------------------
                            	   399: 
                            	   400: ;	// Trim trailing zeros from the number
                            	   401: ;  do {
                            	   402: ;      ndx--;
                            	   403: ;  } while(buf[ndx]=='0');
                            	   404: ;  ndx++;
                            	   405: 
                            	   406: _TrimTrailingZeros:
                            	   407: .0018	
00:00008404 0C200030        	   408: 	cmpi.b #'0',-(a0)		; if the last digit was a zero, backup
00:00008408 67FA            	   409: 	beq .0018
00:0000840A 5248            	   410: 	addq #1,a0					; now advance by one
00:0000840C 4210            	   411: 	move.b #0,(a0)			; NULL terminate string
00:0000840E 4E75            	   412: 	rts
                            	   413: 
                            	   414: ;------------------------------------------------------------------------------
                            	   415: ; Output 'e+' or 'e-'
                            	   416: ;
                            	   417: ; Registers Modified:
                            	   418: ;		d6.w (if negative)
                            	   419: ; Parameters:
                            	   420: ;		a0 = pointer to last digits of number
                            	   421: ; Returns:
                            	   422: ;		a0 = updated to point just past '+' or '-'.
                            	   423: ;------------------------------------------------------------------------------
                            	   424: 
                            	   425: ;	// Spit out +/-E
                            	   426: ;  buf[ndx] = E;
                            	   427: ;  ndx++;
                            	   428: ;  if (exp < 0) {
                            	   429: ;    buf[ndx]='-';
                            	   430: ;    ndx++;
                            	   431: ;    exp = -exp;
                            	   432: ;  }
                            	   433: ;  else {
                            	   434: ;		buf[ndx]='+';
                            	   435: ;		ndx++;
                            	   436: ;  }
                            	   437: 
                            	   438: _SpitOutE:	
00:00008410 10F90004050C    	   439: 	move.b _E,(a0)+
00:00008416 4A46            	   440: 	tst.w d6
00:00008418 6C08            	   441: 	bge .0021
00:0000841A 10FC002D        	   442: 	move.b #'-',(a0)+
00:0000841E 4446            	   443: 	neg.w d6
00:00008420 6004            	   444: 	bra .0022
                            	   445: .0021
00:00008422 10FC002B        	   446: 	move.b #'+',(a0)+
                            	   447: .0022
00:00008426 4E75            	   448: 	rts
                            	   449: 
                            	   450: ;------------------------------------------------------------------------------
                            	   451: ; Extract a single digit of the exponent. Extract works from the leftmost digit
                            	   452: ; to the rightmost.
                            	   453: ;
                            	   454: ; Register Usage
                            	   455: ;		d2 = history of zeros
                            	   456: ;		d3 = digit
                            	   457: ; Modifies
                            	   458: ;		d2,d6,a0
                            	   459: ; Parameter
                            	   460: ; 	d1.w = power of ten
                            	   461: ;		d6.w = exponent
                            	   462: ;------------------------------------------------------------------------------
                            	   463: 
                            	   464: _ExtExpDigit:
00:00008428 2F03            	   465: 	move.l d3,-(a7)
00:0000842A 48C6            	   466: 	ext.l d6				; make d6 a long
00:0000842C 8CC1            	   467: 	divu d1,d6			; divide by power of ten
00:0000842E 1606            	   468: 	move.b d6,d3		; d3 = quotient (0 to 9)
00:00008430 4846            	   469: 	swap d6					; d6 = remainder, setup for next digit
00:00008432 8403            	   470: 	or.b d3,d2
00:00008434 4A03            	   471: 	tst.b d3
00:00008436 6604            	   472: 	bne .0003
00:00008438 4A02            	   473: 	tst.b d2	
00:0000843A 6706            	   474: 	beq .0004
                            	   475: .0003
00:0000843C 06030030        	   476: 	addi.b #'0',d3	; convert to ascii
00:00008440 10C3            	   477: 	move.b d3,(a0)+
                            	   478: .0004
00:00008442 261F            	   479: 	move.l (a7)+,d3
00:00008444 4E75            	   480: 	rts
                            	   481: 
                            	   482: ;------------------------------------------------------------------------------
                            	   483: ; Extract all the digits of the exponent.
                            	   484: ;
                            	   485: ; Register Usage
                            	   486: ;		d1 = power of 10
                            	   487: ;		d2 = history of zeros
                            	   488: ; Parameters
                            	   489: ;		a0 = pointer to string buffer
                            	   490: ;		d6 = exponent
                            	   491: ;------------------------------------------------------------------------------
                            	   492: 
                            	   493: ;	// If the number is times 10^0 don't output the exponent
                            	   494: ;  if (exp==0) {
                            	   495: ;    buf[ndx]='\0';
                            	   496: ;    goto prt;
                            	   497: ;  }
                            	   498: 
                            	   499: _ExtExpDigits:
00:00008446 2F01            	   500: 	move.l d1,-(a7)
00:00008448 4A46            	   501: 	tst.w d6							; is exponent zero?
00:0000844A 671C            	   502: 	beq .0002
00:0000844C 61C2            	   503: 	bsr _SpitOutE					; exponent is non-zero e+
00:0000844E 4202            	   504: 	clr.b d2							; d2 = history of zeros
00:00008450 323C03E8        	   505: 	move.w #1000,d1
00:00008454 61D2            	   506: 	bsr _ExtExpDigit
00:00008456 323C0064        	   507: 	move.w #100,d1
00:0000845A 61CC            	   508: 	bsr _ExtExpDigit
00:0000845C 323C000A        	   509: 	move.w #10,d1
00:00008460 61C6            	   510: 	bsr _ExtExpDigit
00:00008462 323C0001        	   511: 	move.w #1,d1
00:00008466 61C0            	   512: 	bsr _ExtExpDigit
                            	   513: .0002:
00:00008468 221F            	   514: 	move.l (a7)+,d1
00:0000846A 4210            	   515: 	move.b #0,(a0)				; NULL terminate string
00:0000846C 4E75            	   516: 	rts										; and return
                            	   517: 
                            	   518: ;------------------------------------------------------------------------------
                            	   519: ; Pad the left side of the output string.
                            	   520: ;
                            	   521: ; Modifies:
                            	   522: ;		d0,d1,d2,d3
                            	   523: ;------------------------------------------------------------------------------
                            	   524: 
                            	   525: ;  // pad left
                            	   526: ;  if (width > 0) {
                            	   527: ;    if (ndx < width) {
                            	   528: ;      for (nn = 39; nn >= width-ndx; nn--)
                            	   529: ;        buf[nn] = buf[nn-(width-ndx)];
                            	   530: ;      for (; nn >= 0; nn--)
                            	   531: ;        buf[nn] = ' ';
                            	   532: ;    }
                            	   533: ;  }
                            	   534: 	
                            	   535: _PadLeft:
00:0000846E 48E7F000        	   536: 	movem.l d0/d1/d2/d3,-(a7)
00:00008472 4A3900040508    	   537: 	tst.b _width
00:00008478 6F3E            	   538: 	ble .0041
00:0000847A 2008            	   539: 	move.l a0,d0
00:0000847C 90BC00040520    	   540: 	sub.l #_fpBuf,d0	; d0 = ndx
00:00008482 B03900040508    	   541: 	cmp.b _width,d0
00:00008488 6C2E            	   542: 	bge .0041
00:0000848A 323C0031        	   543: 	move.w #49,d1			; d1 = nn
                            	   544: .0040
00:0000848E 143900040508    	   545: 	move.b _width,d2
00:00008494 4882            	   546: 	ext.w d2
00:00008496 9440            	   547: 	sub.w d0,d2				; d2 = width-ndx
00:00008498 B242            	   548: 	cmp.w d2,d1
00:0000849A 6D0E            	   549: 	blt .0039
00:0000849C 3601            	   550: 	move.w d1,d3			; d3 = nn
00:0000849E 9642            	   551: 	sub.w d2,d3				; d3 = nn-(width-ndx)
00:000084A0 11B030001000    	   552: 	move.b (a0,d3.w),(a0,d1.w)
00:000084A6 5341            	   553: 	subi.w #1,d1
00:000084A8 60E4            	   554: 	bra .0040
                            	   555: .0039
00:000084AA 4A41            	   556: 	tst.w d1
00:000084AC 6B0A            	   557: 	bmi .0041
00:000084AE 11BC00201000    	   558: 	move.b #' ',(a0,d1.w)
00:000084B4 5341            	   559: 	subi.w #1,d1
00:000084B6 60F2            	   560: 	bra .0039
                            	   561: .0041
00:000084B8 4CDF000F        	   562: 	movem.l (a7)+,d0/d1/d2/d3
00:000084BC 4E75            	   563: 	rts
                            	   564: 
                            	   565: ;------------------------------------------------------------------------------
                            	   566: ; Pad the right side of the output string.
                            	   567: ;
                            	   568: ; Parameters:
                            	   569: ;		a0 = pointer to end of string
                            	   570: ; Modifies:
                            	   571: ;		none
                            	   572: ; Returns:
                            	   573: ;		none
                            	   574: ;------------------------------------------------------------------------------
                            	   575: 
                            	   576: ;  // pad right
                            	   577: ;  if (width < 0) {
                            	   578: ;    width = -width;
                            	   579: ;    while (ndx < width) {
                            	   580: ;      buf[ndx]=' ';
                            	   581: ;      ndx++;
                            	   582: ;    }
                            	   583: ;    buf[ndx]='\0';
                            	   584: ;  }
                            	   585: ;  return (ndx);
                            	   586: 
                            	   587: _PadRight:
00:000084BE 2F00            	   588: 	move.l d0,-(a7)
00:000084C0 4A3900040508    	   589: 	tst.b _width
00:000084C6 6A24            	   590: 	bpl .0042
00:000084C8 443900040508    	   591: 	neg.b _width
00:000084CE 2008            	   592: 	move.l a0,d0
00:000084D0 90BC00040520    	   593: 	sub.l #_fpBuf,d0	; d0 = ndx
                            	   594: .0044
00:000084D6 B03900040508    	   595: 	cmp.b _width,d0
00:000084DC 6C0A            	   596: 	bge .0043
00:000084DE 11BC00200000    	   597: 	move.b #' ',(a0,d0.w)
00:000084E4 5240            	   598: 	addi.w #1,d0
00:000084E6 60EE            	   599: 	bra .0044
                            	   600: .0043
00:000084E8 42300000        	   601: 	move.b #0,(a0,d0.w)
                            	   602: .0042
00:000084EC 201F            	   603: 	move.l (a7)+,d0
00:000084EE 4E75            	   604: 	rts
                            	   605: 
                            	   606: ;------------------------------------------------------------------------------
                            	   607: ; Output a string representation of a decimal floating point number to a 
                            	   608: ; buffer.
                            	   609: ;
                            	   610: ; Register Usage
                            	   611: ;		a0 = pointer to string buffer
                            	   612: ;		d6 = exponent
                            	   613: ; Modifies:
                            	   614: ;		a0 = points to end of string
                            	   615: ; Parameters:
                            	   616: ;		fp0 = number to convert
                            	   617: ; Returns:
                            	   618: ;		none
                            	   619: ;------------------------------------------------------------------------------
                            	   620: 
                            	   621: _FloatToString:
00:000084F0 2F06            	   622: 	move.l d6,-(a7)
00:000084F2 6100FDB6        	   623: 	bsr _CheckNegative			; is number negative?
00:000084F6 6100FD98        	   624: 	bsr _CheckZero					; check for zero
00:000084FA 6732            	   625: 	beq .0001								; branch since already output "0"
00:000084FC 6100FD2E        	   626: 	bsr _CheckNan						; check for Nan or infinity
00:00008500 652C            	   627: 	bcs .0001								; branch if nan/inf string output
                            	   628: 	; Now the fun begins
00:00008502 7C00            	   629: 	clr.l d6								; exponent = 0
00:00008504 6100FDB6        	   630: 	bsr _MakeBig
00:00008508 6100FDCE        	   631: 	bsr _LessThanDbl
00:0000850C 6100FDF6        	   632: 	bsr _ComputeDigitsBeforeDecpt
00:00008510 6100FE2C        	   633: 	bsr _LeadingZero
00:00008514 6100FE38        	   634: 	bsr _SpitOutDigits
00:00008518 6100FEEA        	   635: 	bsr _TrimTrailingZeros
00:0000851C 6100FEAC        	   636: 	bsr _TrimTrailingPoint
00:00008520 6100FEC6        	   637: 	bsr _TrimDotZero
00:00008524 6100FF20        	   638: 	bsr _ExtExpDigits				; extract exponent digits
00:00008528 6100FF44        	   639: 	bsr _PadLeft						; pad the number to the left or right
00:0000852C 6190            	   640: 	bsr _PadRight
                            	   641: .0001
00:0000852E 2C1F            	   642: 	move.l (a7)+,d6
00:00008530 4E75            	   643: 	rts
                            	   644: 
                            	   645: 

Source: "boot.x68"
                            	  2663: 	include "GetFloat.asm"

Source: "GetFloat.asm"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: ;
                            	    37: ; Get a floating point number
                            	    38: ;
                            	    39: _GetFloatGetChar:
00:00008532 1210            	    40: 	move.b (a0),d1
00:00008534 D1C0            	    41: 	add.l d0,a0
00:00008536 4E75            	    42: 	rts
                            	    43: _GetFloatIgnBlanks:
                            	    44: .0001
00:00008538 61F8            	    45: 	bsr _GetFloatGetChar
00:0000853A 0C010020        	    46: 	cmpi.b #' ',d1
00:0000853E 67F8            	    47: 	beq .0001
                            	    48: _GetFloatBackupChar:
00:00008540 91C0            	    49: 	sub.l d0,a0
00:00008542 4E75            	    50: 	rts
                            	    51: 
                            	    52: ;-------------------------------------------------------------------------------
                            	    53: ; Get fractional part of a number, 25 digits max, into a float register.
                            	    54: ;
                            	    55: ; Register Usage:
                            	    56: ;		d1 = digit from input screen
                            	    57: ;		d4 = digit count
                            	    58: ;		d6 = digit scaling factor
                            	    59: ;		fp1 = digit as float number
                            	    60: ; Returns:
                            	    61: ;		fp0 = fraction
                            	    62: ;-------------------------------------------------------------------------------
                            	    63: 
                            	    64: _GetFraction:
00:00008544 4E52FFE4        	    65: 	link a2,#-28
00:00008548 2F79000400980018	    66: 	move.l _canary,24(sp)
00:00008550 48D70052        	    67: 	movem.l d1/d4/d6,(sp)
00:00008554 F22F6880000C    	    68: 	fmove.x fp1,12(sp)
00:0000855A 7C00            	    69: 	clr.l d6							; d6 = scale factor
00:0000855C F23C50000000    	    70: 	fmove.w #0,fp0				; fract = 0.0
00:00008562 7818            	    71: 	moveq #24,d4
                            	    72: .0002
00:00008564 61CC            	    73: 	bsr _GetFloatGetChar
00:00008566 0C010030        	    74: 	cmpi.b #'0',d1
00:0000856A 6520            	    75: 	blo .0001
00:0000856C 0C010039        	    76: 	cmpi.b #'9',d1				; make sure between 0 and 9
00:00008570 621A            	    77: 	bhi .0001
00:00008572 04010030        	    78: 	subi.b #'0',d1
00:00008576 F23C50260001    	    79: 	fscale.w #1,fp0				; fract * 10.0
00:0000857C 5246            	    80: 	addq #1,d6						; record scaling
00:0000857E F2015880        	    81: 	fmove.b d1,fp1				; fp1 = digit
00:00008582 F2000422        	    82: 	fadd fp1,fp0					; fract += digit
00:00008586 5245            	    83: 	addq.w #1,d5					; increment number of digits in number
00:00008588 51CCFFDA        	    84: 	dbra d4,.0002
                            	    85: .0001
00:0000858C 61B2            	    86: 	bsr _GetFloatBackupChar
00:0000858E 4446            	    87: 	neg d6
00:00008590 F2064026        	    88: 	fscale.l d6,fp0				; fract /= scale
00:00008594 4CD70052        	    89: 	movem.l (sp),d1/d4/d6
00:00008598 F22F4880000C    	    90: 	fmove.x 12(sp),fp1
00:0000859E A2AF00030018    	    91: 	cchk 24(sp)
00:000085A4 4E5A            	    92: 	unlk a2
00:000085A6 4E75            	    93: 	rts
                            	    94: 
                            	    95: ;-------------------------------------------------------------------------------
                            	    96: ; Get exponent part of a number, 4 digits max, into a float register.
                            	    97: ;
                            	    98: ; Register Usage:
                            	    99: ;		d1 = digit from input screen
                            	   100: ;		d2 = exponent
                            	   101: ;		d3 = temp, number times 2
                            	   102: ;		d4 = digit counter
                            	   103: ; Parameters:
                            	   104: ;		fp0 = float number
                            	   105: ; Returns:
                            	   106: ;		fp0 = float number with exponent factored in
                            	   107: ;-------------------------------------------------------------------------------
                            	   108: 
                            	   109: _GetExponent:
00:000085A8 4E52FFE0        	   110: 	link a2,#-32
00:000085AC 2F7900040098001C	   111: 	move.l _canary,28(sp)
00:000085B4 48D7001E        	   112: 	movem.l d1/d2/d3/d4,(sp)
00:000085B8 F22F69000010    	   113: 	fmove.x fp2,16(sp)
00:000085BE 7400            	   114: 	clr.l d2							; d2 = number = 0
00:000085C0 F23C51000000    	   115: 	fmove.w #0,fp2				; fp2 = exp = 0.0
00:000085C6 7601            	   116: 	moveq #1,d3						; d3 = exscale = 1
00:000085C8 6100FF68        	   117: 	bsr _GetFloatGetChar
00:000085CC 0C01002D        	   118: 	cmpi.b #'-',d1
00:000085D0 6608            	   119: 	bne .0001
00:000085D2 4483            	   120: 	neg.l d3							; exscale = -1
                            	   121: .0006
00:000085D4 6100FF62        	   122: 	bsr _GetFloatIgnBlanks
00:000085D8 600A            	   123: 	bra .0002
                            	   124: .0001
00:000085DA 0C01002B        	   125: 	cmpi.b #'+',d1
00:000085DE 67F4            	   126: 	beq .0006
00:000085E0 6100FF5E        	   127: 	bsr _GetFloatBackupChar
                            	   128: .0002	
00:000085E4 7803            	   129: 	moveq #3,d4						; d4 = max 4 digits
                            	   130: .0004
00:000085E6 6100FF4A        	   131: 	bsr _GetFloatGetChar	; d1 = digit char
00:000085EA 0C010030        	   132: 	cmpi.b #'0',d1
00:000085EE 651E            	   133: 	blo .0003
00:000085F0 0C010039        	   134: 	cmpi.b #'9',d1				; ensure between 0 and 9
00:000085F4 6218            	   135: 	bhi .0003
00:000085F6 04010030        	   136: 	subi.b #'0',d1
00:000085FA D482            	   137: 	add.l d2,d2						; number *2
00:000085FC 2602            	   138: 	move.l d2,d3
00:000085FE E58A            	   139: 	lsl.l #2,d2						; number *8
00:00008600 D483            	   140: 	add.l d3,d2						; number *10	
00:00008602 4881            	   141: 	ext.w d1
00:00008604 48C1            	   142: 	ext.l d1
00:00008606 D481            	   143: 	add.l d1,d2						; number + digit
00:00008608 5245            	   144: 	addq.w #1,d5					; increment number of digits in number
00:0000860A 51CCFFDA        	   145: 	dbra d4,.0004
                            	   146: .0003
00:0000860E 6100FF30        	   147: 	bsr _GetFloatBackupChar	; backup a character
00:00008612 C4C3            	   148: 	mulu d3,d2						; *1 or *-1
00:00008614 48C2            	   149: 	ext.l d2
00:00008616 F2024126        	   150: 	fscale.l d2,fp2				; exp * exmul
00:0000861A F2000823        	   151: 	fmul fp2,fp0					; rval *= exp
00:0000861E 4CD7001E        	   152: 	movem.l (sp),d1/d2/d3/d4
00:00008622 F22F49000010    	   153: 	fmove.x 16(sp),fp2
00:00008628 A2AF0003001C    	   154: 	cchk 28(sp)
00:0000862E 4E5A            	   155: 	unlk a2
00:00008630 4E75            	   156: 	rts	
                            	   157: 
                            	   158: ;-------------------------------------------------------------------------------
                            	   159: ; Get an integer number, positive or negative, 25 digits max, into a float
                            	   160: ; register.
                            	   161: ;
                            	   162: ; Register Usage:
                            	   163: ;		d1 = digit from input screen
                            	   164: ;		d2 = digit down counter
                            	   165: ;		d3 = sign of number '+' or '-'
                            	   166: ;		fp1 = digit
                            	   167: ; Modifies:
                            	   168: ;		a0,fp0
                            	   169: ; Returns:
                            	   170: ;		a0 = updated buffer pointer
                            	   171: ;		fp0 = integer number
                            	   172: ;-------------------------------------------------------------------------------
                            	   173: 
                            	   174: _GetInteger:
00:00008632 4E52FFE4        	   175: 	link a2,#-28
00:00008636 2F79000400980018	   176: 	move.l _canary,24(sp)
00:0000863E 48D7000E        	   177: 	movem.l d1/d2/d3,(sp)
00:00008642 F22F6880000C    	   178: 	fmove.x fp1,12(sp)
00:00008648 F23C50000000    	   179: 	fmove.w #0,fp0
00:0000864E 7418            	   180: 	moveq #24,d2					; d2 = digit count (25 max)
00:00008650 6100FEE6        	   181: 	bsr _GetFloatIgnBlanks
00:00008654 6100FEDC        	   182: 	bsr _GetFloatGetChar	; get the sign of the number
00:00008658 0C01002B        	   183: 	cmpi.b #'+',d1
00:0000865C 670A            	   184: 	beq .0002
                            	   185: .0003
00:0000865E 0C01002D        	   186: 	cmpi.b #'-',d1
00:00008662 6608            	   187: 	bne .0004
00:00008664 1E3C002D        	   188: 	move.b #'-',d7
                            	   189: .0002
00:00008668 6100FEC8        	   190: 	bsr _GetFloatGetChar
                            	   191: .0004
00:0000866C 0C010030        	   192: 	cmpi.b #'0',d1				; only characters 0 to 9 valid
00:00008670 651E            	   193: 	blo .0001
00:00008672 0C010039        	   194: 	cmpi.b #'9',d1
00:00008676 6218            	   195: 	bhi .0001
00:00008678 04010030        	   196: 	subi.b #'0',d1
00:0000867C F23C50260001    	   197: 	fscale.w #1,fp0				; number *10
00:00008682 F2015880        	   198: 	fmove.b d1,fp1				; fp1 = digit
00:00008686 F2000422        	   199: 	fadd fp1,fp0
00:0000868A 5245            	   200: 	addq.w #1,d5
00:0000868C 51CAFFDA        	   201: 	dbra d2,.0002
                            	   202: .0001
00:00008690 6100FEAE        	   203: 	bsr _GetFloatBackupChar
00:00008694 4CD7000E        	   204: 	movem.l (sp),d1/d2/d3
00:00008698 F22F4880000C    	   205: 	fmove.x 12(sp),fp1
00:0000869E A2AF00030018    	   206: 	cchk 24(sp)
00:000086A4 4E5A            	   207: 	unlk a2
00:000086A6 4E75            	   208: 	rts
                            	   209: 		
                            	   210: ;-------------------------------------------------------------------------------
                            	   211: ; Get a floating point number off the input screen.
                            	   212: ;
                            	   213: ; Parameters:
                            	   214: ;		a0 = pointer to buffer containing string
                            	   215: ;		d0 = stride of buffer (increment / decrement amount)
                            	   216: ; Register Usage:
                            	   217: ;		d1 = character from input screen
                            	   218: ;		d5.lo = number of digits in number, d5.hi = number of characters fetched
                            	   219: ; Returns:
                            	   220: ;		fp0 = number
                            	   221: ;		a0 = updated buffer pointer
                            	   222: ;		d0 = length of number >0 if a number
                            	   223: ;-------------------------------------------------------------------------------
                            	   224: 
                            	   225: _GetFloat:
00:000086A8 4E52FFE0        	   226: 	link a2,#-32
00:000086AC 2F7900040098001C	   227: 	move.l _canary,28(sp)
00:000086B4 48D702A2        	   228: 	movem.l d1/d5/d7/a1,(sp)
00:000086B8 F22F69000010    	   229: 	fmove.x fp2,16(sp)
00:000086BE 7A00            	   230: 	clr.l d5
00:000086C0 1E3C002B        	   231: 	move.b #'+',d7				; assume a positive number
00:000086C4 2248            	   232: 	move.l a0,a1					; a1 = copy of pointer to buffer
00:000086C6 6100FF6A        	   233: 	bsr _GetInteger				; rval = integer
00:000086CA F2000100        	   234: 	fmove.x fp0,fp2
00:000086CE 6100FE62        	   235: 	bsr _GetFloatGetChar
00:000086D2 0C01002E        	   236: 	cmpi.b #'.',d1
00:000086D6 6706            	   237: 	beq .0004
                            	   238: .0005
00:000086D8 6100FE66        	   239: 	bsr _GetFloatBackupChar
00:000086DC 601C            	   240: 	bra .0002
                            	   241: .0004
00:000086DE 6100FE64        	   242: 	bsr _GetFraction
00:000086E2 F2000822        	   243: 	fadd fp2,fp0					; rval += fraction
00:000086E6 6100FE4A        	   244: 	bsr _GetFloatGetChar
00:000086EA 0C010065        	   245: 	cmpi.b #'e',d1				; accept either 'e' or 'E' indicating exponent
00:000086EE 6706            	   246: 	beq .0001
00:000086F0 0C010045        	   247: 	cmpi.b #'E',d1
00:000086F4 66E2            	   248: 	bne .0005
                            	   249: .0001
00:000086F6 6100FEB0        	   250: 	bsr _GetExponent			; factor exponent into fp0
                            	   251: .0002
00:000086FA 0C07002D        	   252: 	cmpi.b #'-',d7				; adjust number for sign
00:000086FE 6604            	   253: 	bne .0003
00:00008700 F200001A        	   254: 	fneg fp0
                            	   255: .0003
00:00008704 93C8            	   256: 	suba.l a0,a1					; compute number of characters fetched
00:00008706 3009            	   257: 	move.w a1,d0					; move it to d0.hi
00:00008708 4840            	   258: 	swap d0
00:0000870A 3005            	   259: 	move.w d5,d0					; return digit/character count in d0 (non zero for a number)
00:0000870C 4CD702A2        	   260: 	movem.l (sp),d1/d5/d7/a1
00:00008710 F22F49000010    	   261: 	fmove.x 16(sp),fp2
00:00008716 A2AF0003001C    	   262: 	cchk 28(sp)
00:0000871C 4E5A            	   263: 	unlk a2
00:0000871E 4E75            	   264: 	rts	
                            	   265: 
                            	   266: 		

Source: "boot.x68"
                            	  2664: 
                            	  2665: ;------------------------------------------------------------------------------
                            	  2666: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  2667: ; to a hex nybble.
                            	  2668: ;------------------------------------------------------------------------------
                            	  2669: 
                            	  2670: AsciiToHexNybble:
00:00008720 0C010030        	  2671: 	cmpi.b	#'0',d1
00:00008724 6530            	  2672: 	blo.s		gthx3
00:00008726 0C010039        	  2673: 	cmpi.b	#'9',d1
00:0000872A 6206            	  2674: 	bhi.s		gthx5
00:0000872C 04010030        	  2675: 	subi.b	#'0',d1
00:00008730 4E75            	  2676: 	rts
                            	  2677: gthx5:
00:00008732 0C010041        	  2678: 	cmpi.b	#'A',d1
00:00008736 651E            	  2679: 	blo.s		gthx3
00:00008738 0C010046        	  2680: 	cmpi.b	#'F',d1
00:0000873C 6206            	  2681: 	bhi.s		gthx6
00:0000873E 060100C9        	  2682: 	addi.b	#10-'A',d1
00:00008742 4E75            	  2683: 	rts
                            	  2684: gthx6:
00:00008744 0C010061        	  2685: 	cmpi.b	#'a',d1
00:00008748 650C            	  2686: 	blo.s		gthx3
00:0000874A 0C010066        	  2687: 	cmpi.b	#'f',d1
00:0000874E 6206            	  2688: 	bhi.s		gthx3
00:00008750 060100A9        	  2689: 	addi.b	#10-'a',d1
00:00008754 4E75            	  2690: 	rts
                            	  2691: gthx3:
00:00008756 72FF            	  2692: 	moveq	#-1,d1		; not a hex number
00:00008758 4E75            	  2693: 	rts
                            	  2694: 
                            	  2695: ;------------------------------------------------------------------------------
                            	  2696: ;------------------------------------------------------------------------------
                            	  2697: 
                            	  2698: DisplayTwoSpaces:
00:0000875A 2F01            	  2699: 	move.l	d1,-(a7)
00:0000875C 123C0020        	  2700: 	move.b	#' ',d1
00:00008760 610007D8        	  2701: 	bsr			OutputChar
                            	  2702: dspspc1:
00:00008764 610007D4        	  2703: 	bsr			OutputChar
00:00008768 221F            	  2704: 	move.l	(a7)+,d1
00:0000876A 4E75            	  2705: 	rts
                            	  2706: 
                            	  2707: DisplaySpace:
00:0000876C 2F01            	  2708: 	move.l	d1,-(a7)
00:0000876E 123C0020        	  2709: 	move.b	#' ',d1
00:00008772 60F0            	  2710: 	bra			dspspc1
                            	  2711: 
                            	  2712: ;------------------------------------------------------------------------------
                            	  2713: ; Display the 32 bit word in D1.L
                            	  2714: ;------------------------------------------------------------------------------
                            	  2715: 
                            	  2716: DisplayTetra:
00:00008774 4841            	  2717: 	swap	d1
00:00008776 6102            	  2718: 	bsr		DisplayWyde
00:00008778 4841            	  2719: 	swap	d1
                            	  2720: 
                            	  2721: ;------------------------------------------------------------------------------
                            	  2722: ; Display the byte in D1.W
                            	  2723: ;------------------------------------------------------------------------------
                            	  2724: 
                            	  2725: DisplayWyde:
00:0000877A E059            	  2726: 	ror.w		#8,d1
00:0000877C 6102            	  2727: 	bsr			DisplayByte
00:0000877E E159            	  2728: 	rol.w		#8,d1
                            	  2729: 
                            	  2730: ;------------------------------------------------------------------------------
                            	  2731: ; Display the byte in D1.B
                            	  2732: ;------------------------------------------------------------------------------
                            	  2733: 
                            	  2734: DisplayByte:
00:00008780 E819            	  2735: 	ror.b		#4,d1
00:00008782 6102            	  2736: 	bsr			DisplayNybble
00:00008784 E919            	  2737: 	rol.b		#4,d1
                            	  2738: 
                            	  2739: ;------------------------------------------------------------------------------
                            	  2740: ; Display nybble in D1.B
                            	  2741: ;------------------------------------------------------------------------------
                            	  2742: 
                            	  2743: DisplayNybble:
00:00008786 2F01            	  2744: 	move.l	d1,-(a7)
00:00008788 0201000F        	  2745: 	andi.b	#$F,d1
00:0000878C 06010030        	  2746: 	addi.b	#'0',d1
00:00008790 0C010039        	  2747: 	cmpi.b	#'9',d1
00:00008794 6302            	  2748: 	bls.s		.0001
00:00008796 5E01            	  2749: 	addi.b	#7,d1
                            	  2750: .0001:
00:00008798 610007A0        	  2751: 	bsr			OutputChar
00:0000879C 221F            	  2752: 	move.l	(a7)+,d1
00:0000879E 4E75            	  2753: 	rts
                            	  2754: 
                            	  2755: ;------------------------------------------------------------------------------
                            	  2756: ; Buffer tetra in d0 to buffer pointed to by a6
                            	  2757: ;------------------------------------------------------------------------------
                            	  2758: 
                            	  2759: BufTetra:
00:000087A0 4840            	  2760: 	swap d0
00:000087A2 6102            	  2761: 	bsr BufWyde
00:000087A4 4840            	  2762: 	swap d0
                            	  2763: 
                            	  2764: BufWyde:
00:000087A6 E058            	  2765: 	ror.w #8,d0
00:000087A8 6102            	  2766: 	bsr BufByte
00:000087AA E158            	  2767: 	rol.w #8,d0
                            	  2768: 	
                            	  2769: BufByte:
00:000087AC E818            	  2770: 	ror.b #4,d0
00:000087AE 6102            	  2771: 	bsr BufNybble
00:000087B0 E918            	  2772: 	rol.b #4,d0
                            	  2773: 
                            	  2774: BufNybble:
00:000087B2 2F00            	  2775: 	move.l d0,-(a7)
00:000087B4 0200000F        	  2776: 	andi.b #$F,d0
00:000087B8 06000030        	  2777: 	addi.b #'0',d0
00:000087BC 0C000039        	  2778: 	cmpi.b #'9',d0
00:000087C0 6302            	  2779: 	bls.s .0001
00:000087C2 5E00            	  2780: 	addi.b #7,d0
                            	  2781: .0001:
00:000087C4 1CC0            	  2782: 	move.b d0,(a6)+
00:000087C6 201F            	  2783: 	move.l (a7)+,d0
00:000087C8 4E75            	  2784: 	rts
                            	  2785: 
                            	  2786: ;------------------------------------------------------------------------------
                            	  2787: ;------------------------------------------------------------------------------
                            	  2788: ;
                            	  2789: ;DisplayHexNumber:
                            	  2790: ;	move.w	#$A6A6,leds		; diagnostics
                            	  2791: ;	move.l	#VDGREG,a6
                            	  2792: ;	move.w	#7,d2		; number-1 of digits to display
                            	  2793: ;disphnum1:
                            	  2794: ;	move.b	d1,d0		; get digit into d0.b
                            	  2795: ;	andi.w	#$0f,d0
                            	  2796: ;	cmpi.w	#$09,d0
                            	  2797: ;	bls.s	disphnum2
                            	  2798: ;	addi.w	#7,d0
                            	  2799: ;disphnum2:
                            	  2800: ;	addi.w	#$30,d0	; convert to display char
                            	  2801: ;	move.w	d2,d3		; char count into d3
                            	  2802: ;	asl.w	#3,d3		; scale * 8
                            	  2803: ;disphnum3:
                            	  2804: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  2805: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  2806: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  2807: ;	ext.w	d0						; zero out high order bits
                            	  2808: ;	move.w	d0,$420(a6)			; set char code
                            	  2809: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  2810: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  2811: ;	move.w	d3,$426(a6)			; set x pos
                            	  2812: ;	move.w	#8,$428(a6)			; set y pos
                            	  2813: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  2814: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  2815: ;	ror.l	#4,d1					; rot to next digit
                            	  2816: ;	dbeq	d2,disphnum1
                            	  2817: ;	jmp		(a5)
                            	  2818: 
                            	  2819: 	include "ramtest.x68"

Source: "ramtest.x68"
                            	     1: ;===============================================================================
                            	     2: ;    Perform ram test. (Uses checkerboard testing).
                            	     3: ; 
                            	     4: ;    Local ram, which does not get tested, is used for the stack.
                            	     5: ;===============================================================================
                            	     6: 	code
                            	     7: 	even
                            	     8: DisplayAddr:
00:000087CA 2208            	     9: 	move.l a0,d1
00:000087CC E089            	    10: 	lsr.l #8,d1
00:000087CE E089            	    11: 	lsr.l #8,d1
00:000087D0 E889            	    12: 	lsr.l #4,d1
00:000087D2 04410400        	    13: 	subi.w #1024,d1
00:000087D6 A2C10000        	    14: 	bin2bcd d1
00:000087DA 619E            	    15: 	bsr	DisplayWyde
00:000087DC 618E            	    16: 	bsr DisplaySpace
00:000087DE 123C000D        	    17: 	move.b #CR,d1
00:000087E2 61000756        	    18: 	bsr OutputChar
00:000087E6 08000083        	    19: 	btst #$83,d0
                            	    20: 	
                            	    21: cmdTestRAM:
                            	    22: ramtest:
00:000087EA 33FCA5A5FD0FFF00	    23: 	move.w	#$A5A5,leds		; diagnostics
00:000087F2 263CAAAAAAAA    	    24:   move.l #$aaaaaaaa,d3
00:000087F8 283C55555555    	    25:   move.l #$55555555,d4
00:000087FE 6134            	    26:   bsr ramtest0
                            	    27:   ; switch checkerboard pattern and repeat test.
00:00008800 C744            	    28:   exg d3,d4
00:00008802 6130            	    29:   bsr ramtest0
                            	    30: 	; Save last ram address in end of memory pointer.
                            	    31: rmtst5:
00:00008804 7025            	    32: 	moveq #37,d0					; lock semaphore
00:00008806 7206            	    33: 	moveq #MEMORY_SEMA,d1
                            	    34: ;	trap #15
00:00008808 207C7FFFFFF8    	    35:   movea.l #$7FFFFFF8,a0
00:0000880E 23C800100004    	    36:   move.l a0,memend
                            	    37: 	; Create very first memory block.
00:00008814 207C3FFFFFF4    	    38:   movea.l #$3FFFFFF4,a0
00:0000881A 23C840000004    	    39:   move.l a0,$40000004		; length of block
00:00008820 23FC465245454000	    40:   move.l #$46524545,$40000000
00:00008828 0000
00:0000882A 7026            	    41: 	moveq #38,d0					; unlock semaphore
00:0000882C 7206            	    42: 	moveq #MEMORY_SEMA,d1
00:0000882E 4E4F            	    43: 	trap #15
00:00008830 6000EFE6        	    44: 	bra Monitor
                            	    45: ;  rts
                            	    46: 
                            	    47: ramtest0:
00:00008834 2003            	    48: 	move.l d3,d0
00:00008836 207C40000000    	    49:   movea.l #$40000000,a0
                            	    50: ;-----------------------------------------------------------
                            	    51: ;   Write checkerboard pattern to ram then read it back to
                            	    52: ; find the highest usable ram address (maybe). This address
                            	    53: ; must be lower than the start of the rom (0xe00000).
                            	    54: ;-----------------------------------------------------------
                            	    55: ramtest1:
00:0000883C 20C3            	    56:   move.l d3,(a0)+
00:0000883E 20C4            	    57:   move.l d4,(a0)+
00:00008840 2208            	    58:   move.l a0,d1
00:00008842 4A41            	    59:   tst.w	d1
00:00008844 6608            	    60:   bne.s rmtst1
00:00008846 6182            	    61:   bsr DisplayAddr
00:00008848 4EB900000842    	    62:   bsr CheckForCtrlC
                            	    63: rmtst1:
00:0000884E B1FC7FFFFFF8    	    64:   cmpa.l #$7FFFFFF8,a0
00:00008854 65E6            	    65:   blo.s ramtest1
00:00008856 6100E9B6        	    66:   bsr	CRLF
                            	    67: ;------------------------------------------------------
                            	    68: ;   Save maximum useable address for later comparison.
                            	    69: ;------------------------------------------------------
                            	    70: ramtest6:
00:0000885A 33FCA7A7FD0FFF00	    71: 	move.w	#$A7A7,leds		; diagnostics
00:00008862 2448            	    72:   movea.l a0,a2
00:00008864 207C40000000    	    73:   movea.l #$40000000,a0
                            	    74: ;--------------------------------------------
                            	    75: ;   Read back checkerboard pattern from ram.
                            	    76: ;--------------------------------------------
                            	    77: ramtest2
00:0000886A 2A18            	    78:   move.l (a0)+,d5
00:0000886C 2C18            	    79:   move.l (a0)+,d6
00:0000886E B1CA            	    80:   cmpa.l a2,a0
00:00008870 643E            	    81:   bhs.s	ramtest3
00:00008872 2208            	    82:   move.l a0,d1
00:00008874 4A41            	    83:   tst.w	d1
00:00008876 660A            	    84:   bne.s	rmtst2
00:00008878 6100FF50        	    85:   bsr	DisplayAddr
00:0000887C 4EB900000842    	    86: 	bsr CheckForCtrlC
                            	    87: rmtst2
00:00008882 BA83            	    88:   cmp.l d3,d5
00:00008884 6604            	    89:   bne.s rmtst3
00:00008886 BC84            	    90:   cmp.l d4,d6
00:00008888 67E0            	    91:   beq.s ramtest2
                            	    92: ;----------------------------------
                            	    93: ; Report error in ram.
                            	    94: ;----------------------------------
                            	    95: rmtst3
00:0000888A 6100E982        	    96: 	bsr CRLF
00:0000888E 7245            	    97: 	moveq	#'E',d1
00:00008890 610006A8        	    98: 	bsr OutputChar
00:00008894 6100FED6        	    99: 	bsr DisplaySpace
00:00008898 2208            	   100: 	move.l a0,d1
00:0000889A 6100FED8        	   101: 	bsr DisplayTetra
00:0000889E 6100FECC        	   102: 	bsr DisplaySpace
00:000088A2 2205            	   103: 	move.l d5,d1
00:000088A4 6100FECE        	   104: 	bsr DisplayTetra
00:000088A8 4EB900000842    	   105: 	bsr CheckForCtrlC
00:000088AE 60BA            	   106: 	bra ramtest2
                            	   107: ramtest3
00:000088B0 4E75            	   108: 	rts
                            	   109: 

Source: "boot.x68"
                            	  2820: 	include "LoadS19.x68"

Source: "LoadS19.x68"
                            	     1: ;==============================================================================
                            	     2: ; Load an S19 format file
                            	     3: ;==============================================================================
                            	     4: 	code
                            	     5: 	even
                            	     6: cmdLoadS19:
00:000088B2 6100E95A        	     7: 	bsr			CRLF					; move display to next line
00:000088B6 6012            	     8: 	bra			ProcessRec
                            	     9: NextRec:
00:000088B8 610001E4        	    10: 	bsr			sGetChar			; get character from serial port routines
00:000088BC 0C01000A        	    11: 	cmpi.b	#LF,d1				; look for a line-feed
00:000088C0 66F6            	    12: 	bne			NextRec
00:000088C2 123C002E        	    13: 	move.b	#'.',d1				; progress display
00:000088C6 61000672        	    14: 	bsr			OutputChar
                            	    15: ProcessRec:
00:000088CA 4EB900000842    	    16: 	bsr			CheckForCtrlC	; check for CTRL-C once per record
00:000088D0 610001CC        	    17: 	bsr			sGetChar
00:000088D4 0C01000D        	    18: 	cmpi.b	#CR,d1
00:000088D8 67F0            	    19: 	beq.s		ProcessRec
00:000088DA 423900100150    	    20: 	clr.b		S19Checksum		; clear the checksum
00:000088E0 1801            	    21: 	move.b	d1,d4
00:000088E2 0C04001A        	    22: 	cmpi.b	#CTRLZ,d4			; CTRL-Z ?
00:000088E6 6700EF30        	    23: 	beq			Monitor
00:000088EA 0C040053        	    24: 	cmpi.b	#'S',d4				; All records must begin with an 'S'
00:000088EE 66C8            	    25: 	bne.s		NextRec
00:000088F0 610001AC        	    26: 	bsr			sGetChar
00:000088F4 1801            	    27: 	move.b	d1,d4
00:000088F6 0C040030        	    28: 	cmpi.b	#'0',d4				; Record type must be between '0' and '9'
00:000088FA 65BC            	    29: 	blo.s		NextRec
00:000088FC 0C040039        	    30: 	cmpi.b	#'9',d4				; d4 = record type
00:00008900 62B6            	    31: 	bhi.s		NextRec
00:00008902 6100019A        	    32: 	bsr			sGetChar			; get byte count for record
00:00008906 6100FE18        	    33: 	bsr			AsciiToHexNybble
00:0000890A 1401            	    34: 	move.b	d1,d2
00:0000890C 61000190        	    35: 	bsr			sGetChar
00:00008910 6100FE0E        	    36: 	bsr			AsciiToHexNybble
00:00008914 E90A            	    37: 	lsl.b		#4,d2
00:00008916 8202            	    38: 	or.b		d2,d1					; d1 = byte count
00:00008918 1601            	    39: 	move.b	d1,d3					; d3 = byte count
00:0000891A D73900100150    	    40: 	add.b		d3,S19Checksum
00:00008920 0C040030        	    41: 	cmpi.b	#'0',d4				; manufacturer ID record, ignore
00:00008924 6792            	    42: 	beq			NextRec
00:00008926 0C040031        	    43: 	cmpi.b	#'1',d4
00:0000892A 670000A2        	    44: 	beq			ProcessS1
00:0000892E 0C040032        	    45: 	cmpi.b	#'2',d4
00:00008932 6700009E        	    46: 	beq			ProcessS2
00:00008936 0C040033        	    47: 	cmpi.b	#'3',d4
00:0000893A 6700009A        	    48: 	beq			ProcessS3
00:0000893E 0C040035        	    49: 	cmpi.b	#'5',d4				; record count record, ignore
00:00008942 6700FF74        	    50: 	beq			NextRec
00:00008946 0C040037        	    51: 	cmpi.b	#'7',d4
00:0000894A 6700008E        	    52: 	beq			ProcessS7
00:0000894E 0C040038        	    53: 	cmpi.b	#'8',d4
00:00008952 67000098        	    54: 	beq			ProcessS8
00:00008956 0C040039        	    55: 	cmpi.b	#'9',d4
00:0000895A 670000A2        	    56: 	beq			ProcessS9
00:0000895E 6000FF58        	    57: 	bra			NextRec
                            	    58: 
                            	    59: pcssxa:
00:00008962 2209            	    60: 	move.l	a1,d1
00:00008964 6100FE0E        	    61: 	bsr			DisplayTetra
00:00008968 123C000D        	    62: 	move.b	#CR,d1
00:0000896C 610005CC        	    63: 	bsr			OutputChar
00:00008970 024300FF        	    64: 	andi.w	#$ff,d3
00:00008974 5343            	    65: 	subi.w	#1,d3			; one less for dbra
                            	    66: .0001:
00:00008976 7400            	    67: 	clr.l		d2
00:00008978 61000124        	    68: 	bsr			sGetChar
00:0000897C 6100FDA2        	    69: 	bsr			AsciiToHexNybble
00:00008980 E98A            	    70: 	lsl.l		#4,d2
00:00008982 8401            	    71: 	or.b		d1,d2
00:00008984 61000118        	    72: 	bsr			sGetChar
00:00008988 6100FD96        	    73: 	bsr			AsciiToHexNybble
00:0000898C E98A            	    74: 	lsl.l		#4,d2
00:0000898E 8401            	    75: 	or.b		d1,d2
00:00008990 D53900100150    	    76: 	add.b		d2,S19Checksum
00:00008996 12C2            	    77: 	move.b	d2,(a1)+			; move byte to memory
00:00008998 51CBFFDC        	    78: 	dbra		d3,.0001
                            	    79: 	; Get the checksum byte
00:0000899C 7400            	    80: 	clr.l		d2
00:0000899E 610000FE        	    81: 	bsr			sGetChar
00:000089A2 6100FD7C        	    82: 	bsr			AsciiToHexNybble
00:000089A6 E98A            	    83: 	lsl.l		#4,d2
00:000089A8 8401            	    84: 	or.b		d1,d2
00:000089AA 610000F2        	    85: 	bsr			sGetChar
00:000089AE 6100FD70        	    86: 	bsr			AsciiToHexNybble
00:000089B2 E98A            	    87: 	lsl.l		#4,d2
00:000089B4 8401            	    88: 	or.b		d1,d2
00:000089B6 4602            	    89: 	eor.b		#$FF,d2
00:000089B8 B43900100150    	    90: 	cmp.b		S19Checksum,d2
00:000089BE 6700FEF8        	    91: 	beq			NextRec
00:000089C2 123C0045        	    92: 	move.b	#'E',d1
00:000089C6 61000572        	    93: 	bsr			OutputChar
00:000089CA 6000FEEC        	    94: 	bra			NextRec
                            	    95: 
                            	    96: ProcessS1:
00:000089CE 6140            	    97: 	bsr			S19Get16BitAddress
00:000089D0 6090            	    98: 	bra			pcssxa
                            	    99: ProcessS2:
00:000089D2 614A            	   100: 	bsr			S19Get24BitAddress
00:000089D4 608C            	   101: 	bra			pcssxa
                            	   102: ProcessS3:
00:000089D6 6152            	   103: 	bsr			S19Get32BitAddress
00:000089D8 6088            	   104: 	bra			pcssxa
                            	   105: ProcessS7:
00:000089DA 614E            	   106: 	bsr			S19Get32BitAddress
00:000089DC 23C900040008    	   107: 	move.l	a1,S19StartAddress
00:000089E2 4EB900000648    	   108: 	bsr			_KeybdInit
00:000089E8 6000EE2E        	   109: 	bra			Monitor
                            	   110: ProcessS8:
00:000089EC 6130            	   111: 	bsr			S19Get24BitAddress
00:000089EE 23C900040008    	   112: 	move.l	a1,S19StartAddress
00:000089F4 4EB900000648    	   113: 	bsr			_KeybdInit
00:000089FA 6000EE1C        	   114: 	bra			Monitor
                            	   115: ProcessS9:
00:000089FE 6110            	   116: 	bsr			S19Get16BitAddress
00:00008A00 23C900040008    	   117: 	move.l	a1,S19StartAddress
00:00008A06 4EB900000648    	   118: 	bsr			_KeybdInit
00:00008A0C 6000EE0A        	   119: 	bra			Monitor
                            	   120: 
                            	   121: S19Get16BitAddress:
00:00008A10 7400            	   122: 	clr.l		d2
00:00008A12 6100008A        	   123: 	bsr			sGetChar
00:00008A16 6100FD08        	   124: 	bsr			AsciiToHexNybble
00:00008A1A 1401            	   125: 	move.b	d1,d2
00:00008A1C 603E            	   126: 	bra			S1932b
                            	   127: 
                            	   128: S19Get24BitAddress:
00:00008A1E 7400            	   129: 	clr.l		d2
00:00008A20 617C            	   130: 	bsr			sGetChar
00:00008A22 6100FCFC        	   131: 	bsr			AsciiToHexNybble
00:00008A26 1401            	   132: 	move.b	d1,d2
00:00008A28 601E            	   133: 	bra			S1932a
                            	   134: 
                            	   135: S19Get32BitAddress:
00:00008A2A 7400            	   136: 	clr.l		d2
00:00008A2C 6170            	   137: 	bsr			sGetChar
00:00008A2E 6100FCF0        	   138: 	bsr			AsciiToHexNybble
00:00008A32 1401            	   139: 	move.b	d1,d2
00:00008A34 6168            	   140: 	bsr			sGetChar
00:00008A36 6100FCE8        	   141: 	bsr			AsciiToHexNybble
00:00008A3A E98A            	   142: 	lsl.l		#4,d2
00:00008A3C 8401            	   143: 	or.b		d1,d2
00:00008A3E 615E            	   144: 	bsr			sGetChar
00:00008A40 6100FCDE        	   145: 	bsr			AsciiToHexNybble
00:00008A44 E98A            	   146: 	lsl.l		#4,d2
00:00008A46 8401            	   147: 	or.b		d1,d2
                            	   148: S1932a:
00:00008A48 6154            	   149: 	bsr			sGetChar
00:00008A4A 6100FCD4        	   150: 	bsr			AsciiToHexNybble
00:00008A4E E98A            	   151: 	lsl.l		#4,d2
00:00008A50 8401            	   152: 	or.b		d1,d2
00:00008A52 614A            	   153: 	bsr			sGetChar
00:00008A54 6100FCCA        	   154: 	bsr			AsciiToHexNybble
00:00008A58 E98A            	   155: 	lsl.l		#4,d2
00:00008A5A 8401            	   156: 	or.b		d1,d2
                            	   157: S1932b:
00:00008A5C 6140            	   158: 	bsr			sGetChar
00:00008A5E 6100FCC0        	   159: 	bsr			AsciiToHexNybble
00:00008A62 E98A            	   160: 	lsl.l		#4,d2
00:00008A64 8401            	   161: 	or.b		d1,d2
00:00008A66 6136            	   162: 	bsr			sGetChar
00:00008A68 6100FCB6        	   163: 	bsr			AsciiToHexNybble
00:00008A6C E98A            	   164: 	lsl.l		#4,d2
00:00008A6E 8401            	   165: 	or.b		d1,d2
00:00008A70 612C            	   166: 	bsr			sGetChar
00:00008A72 6100FCAC        	   167: 	bsr			AsciiToHexNybble
00:00008A76 E98A            	   168: 	lsl.l		#4,d2
00:00008A78 8401            	   169: 	or.b		d1,d2
00:00008A7A 7800            	   170: 	clr.l		d4
00:00008A7C 2242            	   171: 	move.l	d2,a1
                            	   172: 	; Add bytes from address value to checksum
00:00008A7E D53900100150    	   173: 	add.b		d2,S19Checksum
00:00008A84 E08A            	   174: 	lsr.l		#8,d2
00:00008A86 D53900100150    	   175: 	add.b		d2,S19Checksum
00:00008A8C E08A            	   176: 	lsr.l		#8,d2
00:00008A8E D53900100150    	   177: 	add.b		d2,S19Checksum
00:00008A94 E08A            	   178: 	lsr.l		#8,d2
00:00008A96 D53900100150    	   179: 	add.b		d2,S19Checksum
00:00008A9C 4E75            	   180: 	rts
                            	   181: 
                            	   182: ;------------------------------------------------------------------------------
                            	   183: ; Get a character from auxillary input. Waiting for a character is limited to
                            	   184: ; 32000 tries. If a character is not available within the limit, then a return
                            	   185: ; to the monitor is done.
                            	   186: ;
                            	   187: ;	Parameters:
                            	   188: ;		none
                            	   189: ; Returns:
                            	   190: ;		d1 = character from receive buffer or -1 if no char available
                            	   191: ;------------------------------------------------------------------------------
                            	   192: 
                            	   193: sGetChar:
00:00008A9E 48E7A000        	   194: 	movem.l	d0/d2,-(a7)
00:00008AA2 343C7D00        	   195: 	move.w	#32000,d2
                            	   196: .0001:
00:00008AA6 7024            	   197: 	moveq		#36,d0				; serial get char from buffer
00:00008AA8 4E4F            	   198: 	trap		#15
00:00008AAA 4A41            	   199: 	tst.w		d1						; was there a char available?
00:00008AAC 6A0C            	   200: 	bpl.s		.0002
00:00008AAE 51CAFFF6        	   201: 	dbra		d2,.0001			; no - try again
00:00008AB2 4CDF0005        	   202: 	movem.l	(a7)+,d0/d2
                            	   203: .0003:
                            	   204: ;	bsr			_KeybdInit
00:00008AB6 6000ED60        	   205: 	bra			Monitor				; ran out of tries
                            	   206: .0002:
00:00008ABA 4CDF0005        	   207: 	movem.l	(a7)+,d0/d2
00:00008ABE 0C01001A        	   208: 	cmpi.b	#CTRLZ,d1			; receive end of file?
00:00008AC2 67F2            	   209: 	beq			.0003
00:00008AC4 4E75            	   210: 	rts
                            	   211: 
                            	   212: 

Source: "boot.x68"
                            	  2821: 	
                            	  2822: AudioInputTest:
00:00008AC6 4E75            	  2823: 	rts
                            	  2824: BouncingBalls:
00:00008AC8 4E75            	  2825: 	rts
                            	  2826: GraphicsDemo:
00:00008ACA 4E75            	  2827: 	rts
                            	  2828: ClearScreen:
00:00008ACC 7E02            	  2829: 	move.l #2,d7
00:00008ACE 7C0C            	  2830: 	move.l #DEV_CLEAR,d6
00:00008AD0 4E40            	  2831: 	trap #0
00:00008AD2 4E75            	  2832: 	rts
                            	  2833: 
                            	  2834: ;------------------------------------------------------------------------------
                            	  2835: ; Reverse the order of bytes in d1.
                            	  2836: ;------------------------------------------------------------------------------
                            	  2837: 
                            	  2838: rbo:
00:00008AD4 E159            	  2839: 	rol.w	#8,d1
00:00008AD6 4841            	  2840: 	swap d1
00:00008AD8 E159            	  2841: 	rol.w	#8,d1
00:00008ADA 4E75            	  2842: 	rts
                            	  2843: 
                            	  2844: ;===============================================================================
                            	  2845: ; Generic I2C routines
                            	  2846: ;===============================================================================
                            	  2847: 
                            	  2848: 	even
                            	  2849: ; i2c
                            	  2850: i2c_setup:
                            	  2851: ;		lea		I2C,a6				
                            	  2852: ;		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
                            	  2853: ;		move.w	#0,I2C_PREH(a6)
                            	  2854: init_i2c:
00:00008ADC 4DF9FD069000    	  2855: 	lea	I2C2,a6				
00:00008AE2 1CBC0013        	  2856: 	move.b #19,I2C_PREL(a6)	; setup prescale for 400kHz clock, 40MHz master
00:00008AE6 422E0001        	  2857: 	move.b #0,I2C_PREH(a6)
00:00008AEA 4E75            	  2858: 	rts
                            	  2859: 
                            	  2860: ; Wait for I2C transfer to complete
                            	  2861: ;
                            	  2862: ; Parameters
                            	  2863: ; 	a6 - I2C controller base address
                            	  2864: 
                            	  2865: i2c_wait_tip:
00:00008AEC 2F00            	  2866: 	move.l d0,-(a7)
                            	  2867: .0001				
00:00008AEE 102E0004        	  2868: 	move.b I2C_STAT(a6),d0		; wait for tip to clear
00:00008AF2 08000001        	  2869: 	btst #1,d0
00:00008AF6 66F6            	  2870: 	bne.s	.0001
00:00008AF8 201F            	  2871: 	move.l (a7)+,d0
00:00008AFA 4E75            	  2872: 	rts
                            	  2873: 
                            	  2874: ; Parameters
                            	  2875: ;	d0.b - data to transmit
                            	  2876: ;	d1.b - command value
                            	  2877: ;	a6	 - I2C controller base address
                            	  2878: ;
                            	  2879: i2c_wr_cmd:
00:00008AFC 1D400003        	  2880: 	move.b d0,I2C_TXR(a6)
00:00008B00 1D410004        	  2881: 	move.b d1,I2C_CMD(a6)
00:00008B04 61E6            	  2882: 	bsr	i2c_wait_tip
00:00008B06 102E0004        	  2883: 	move.b I2C_STAT(a6),d0
00:00008B0A 4E75            	  2884: 	rts
                            	  2885: 
                            	  2886: i2c_xmit1:
00:00008B0C 2F00            	  2887: 	move.l d0,-(a7)
00:00008B0E 1D7C00010002    	  2888: 	move.b #1,I2C_CTRL(a6)		; enable the core
00:00008B14 7076            	  2889: 	moveq	#$76,d0				; set slave address = %0111011
00:00008B16 323C0090        	  2890: 	move.w #$90,d1				; set STA, WR
00:00008B1A 61E0            	  2891: 	bsr i2c_wr_cmd
00:00008B1C 610C            	  2892: 	bsr	i2c_wait_rx_nack
00:00008B1E 201F            	  2893: 	move.l (a7)+,d0
00:00008B20 323C0050        	  2894: 	move.w #$50,d1				; set STO, WR
00:00008B24 61D6            	  2895: 	bsr i2c_wr_cmd
00:00008B26 61000002        	  2896: 	bsr	i2c_wait_rx_nack
                            	  2897: 
                            	  2898: i2c_wait_rx_nack:
00:00008B2A 2F00            	  2899: 	move.l d0,-(a7)
                            	  2900: .0001						
00:00008B2C 102E0004        	  2901: 	move.b I2C_STAT(a6),d0		; wait for RXack = 0
00:00008B30 08000007        	  2902: 	btst #7,d0
00:00008B34 66F6            	  2903: 	bne.s	.0001
00:00008B36 201F            	  2904: 	move.l (a7)+,d0
00:00008B38 4E75            	  2905: 	rts
                            	  2906: 
                            	  2907: ;===============================================================================
                            	  2908: ; Realtime clock routines
                            	  2909: ;===============================================================================
                            	  2910: 
                            	  2911: rtc_read:
00:00008B3A 2C7CFD069000    	  2912: 	movea.l	#I2C2,a6
00:00008B40 4BF900100200    	  2913: 	lea	RTCBuf,a5
00:00008B46 1D7C00800002    	  2914: 	move.b	#$80,I2C_CTRL(a6)	; enable I2C
00:00008B4C 103C00DE        	  2915: 	move.b	#$DE,d0				; read address, write op
00:00008B50 123C0090        	  2916: 	move.b	#$90,d1				; STA + wr bit
00:00008B54 61A6            	  2917: 	bsr	i2c_wr_cmd
00:00008B56 4A00            	  2918: 	tst.b	d0
00:00008B58 6B66            	  2919: 	bmi	.rxerr
00:00008B5A 4200            	  2920: 	move.b #$00,d0				; address zero
00:00008B5C 123C0010        	  2921: 	move.b #$10,d1				; wr bit
00:00008B60 619A            	  2922: 	bsr	i2c_wr_cmd
00:00008B62 4A00            	  2923: 	tst.b	d0
00:00008B64 6B5A            	  2924: 	bmi	.rxerr
00:00008B66 103C00DF        	  2925: 	move.b #$DF,d0				; read address, read op
00:00008B6A 123C0090        	  2926: 	move.b #$90,d1				; STA + wr bit
00:00008B6E 618C            	  2927: 	bsr i2c_wr_cmd
00:00008B70 4A00            	  2928: 	tst.b	d0
00:00008B72 6B4C            	  2929: 	bmi	.rxerr
                            	  2930: 		
00:00008B74 343C0020        	  2931: 	move.w #$20,d2
                            	  2932: .0001
00:00008B78 1D7C00200004    	  2933: 	move.b #$20,I2C_CMD(a6)	; rd bit
00:00008B7E 6100FF6C        	  2934: 	bsr	i2c_wait_tip
00:00008B82 61A6            	  2935: 	bsr	i2c_wait_rx_nack
00:00008B84 102E0004        	  2936: 	move.b I2C_STAT(a6),d0
00:00008B88 4A00            	  2937: 	tst.b	d0
00:00008B8A 6B34            	  2938: 	bmi	.rxerr
00:00008B8C 102E0003        	  2939: 	move.b I2C_RXR(a6),d0
00:00008B90 1B802000        	  2940: 	move.b d0,(a5,d2.w)
00:00008B94 5242            	  2941: 	addi.w #1,d2
00:00008B96 0C42005F        	  2942: 	cmpi.w #$5F,d2
00:00008B9A 66DC            	  2943: 	bne	.0001
00:00008B9C 1D7C00680004    	  2944: 	move.b #$68,I2C_CMD(a6)	; STO, rd bit + nack
00:00008BA2 6100FF48        	  2945: 	bsr i2c_wait_tip
00:00008BA6 6182            	  2946: 	bsr i2c_wait_rx_nack
00:00008BA8 102E0004        	  2947: 	move.b I2C_STAT(a6),d0
00:00008BAC 4A00            	  2948: 	tst.b	d0
00:00008BAE 6B10            	  2949: 	bmi	.rxerr
00:00008BB0 102E0003        	  2950: 	move.b I2C_RXR(a6),d0
00:00008BB4 1B802000        	  2951: 	move.b d0,(a5,d2.w)
00:00008BB8 422E0002        	  2952: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return 0
00:00008BBC 7000            	  2953: 	moveq	#0,d0
00:00008BBE 4E75            	  2954: 	rts
                            	  2955: .rxerr
00:00008BC0 422E0002        	  2956: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return status
00:00008BC4 4E75            	  2957: 	rts
                            	  2958: 
                            	  2959: rtc_write:
00:00008BC6 2C7CFD069000    	  2960: 	movea.l	#I2C2,a6
00:00008BCC 4BF900100200    	  2961: 	lea	RTCBuf,a5
00:00008BD2 1D7C00800002    	  2962: 	move.b #$80,I2C_CTRL(a6)	; enable I2C
00:00008BD8 103C00DE        	  2963: 	move.b #$DE,d0				; read address, write op
00:00008BDC 123C0090        	  2964: 	move.b #$90,d1				; STA + wr bit
00:00008BE0 6100FF1A        	  2965: 	bsr	i2c_wr_cmd
00:00008BE4 4A00            	  2966: 	tst.b	d0
00:00008BE6 6B42            	  2967: 	bmi	.rxerr
00:00008BE8 4200            	  2968: 	move.b #$00,d0				; address zero
00:00008BEA 123C0010        	  2969: 	move.b #$10,d1				; wr bit
00:00008BEE 6100FF0C        	  2970: 	bsr	i2c_wr_cmd
00:00008BF2 4A00            	  2971: 	tst.b	d0
00:00008BF4 6B34            	  2972: 	bmi	.rxerr
00:00008BF6 343C0020        	  2973: 	move.w #$20,d2
                            	  2974: .0001
00:00008BFA 10352000        	  2975: 	move.b (a5,d2.w),d0
00:00008BFE 123C0010        	  2976: 	move.b #$10,d1
00:00008C02 6100FEF8        	  2977: 	bsr	i2c_wr_cmd
00:00008C06 4A00            	  2978: 	tst.b	d0
00:00008C08 6B20            	  2979: 	bmi	.rxerr
00:00008C0A 5242            	  2980: 	addi.w #1,d2
00:00008C0C 0C42005F        	  2981: 	cmpi.w #$5F,d2
00:00008C10 66E8            	  2982: 	bne.s	.0001
00:00008C12 10352000        	  2983: 	move.b (a5,d2.w),d0
00:00008C16 123C0050        	  2984: 	move.b #$50,d1				; STO, wr bit
00:00008C1A 6100FEE0        	  2985: 	bsr	i2c_wr_cmd
00:00008C1E 4A00            	  2986: 	tst.b	d0
00:00008C20 6B08            	  2987: 	bmi	.rxerr
00:00008C22 422E0002        	  2988: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return 0
00:00008C26 7000            	  2989: 	moveq	#0,d0
00:00008C28 4E75            	  2990: 	rts
                            	  2991: .rxerr:
00:00008C2A 422E0002        	  2992: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return status
00:00008C2E 4E75            	  2993: 	rts
                            	  2994: 
                            	  2995: msgRtcReadFail:
00:00008C30 5254432072656164	  2996: 	dc.b	"RTC read/write failed.",$0A,$0D,$00
00:00008C38 2F77726974652066
00:00008C40 61696C65642E
00:00008C46 0A
00:00008C47 0D
00:00008C48 00
                            	  2997: 
                            	  2998: msgBusErr:
00:00008C49 0A              	  2999: 	dc.b	$0A,$0D,"Bus error at: ",$00
00:00008C4A 0D
00:00008C4B 427573206572726F
00:00008C53 722061743A20
00:00008C59 00
                            	  3000: 	even
                            	  3001: 
                            	  3002: ;------------------------------------------------------------------------------
                            	  3003: ;------------------------------------------------------------------------------
                            	  3004: 	even
                            	  3005: 
                            	  3006: bus_err:
00:00008C5A 4E71            	  3007: 	nop
00:00008C5C 43FAFFEB        	  3008: 	lea.l msgBusErr,a1
00:00008C60 6100E5C6        	  3009: 	bsr DisplayString
00:00008C64 222F0002        	  3010: 	move.l 2(a7),d1
00:00008C68 6100FB0A        	  3011: 	bsr DisplayTetra
00:00008C6C 6100E5A0        	  3012: 	bsr CRLF
00:00008C70 6000EBA6        	  3013: 	bra	Monitor
                            	  3014: 
                            	  3015: trap3:
                            	  3016: 	; First save all registers
00:00008C74 48F9FFFF00040100	  3017: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
00:00008C7C 33DF00040140    	  3018: 	move.w		(a7)+,Regsave+$40
00:00008C82 23DF00040144    	  3019: 	move.l		(a7)+,Regsave+$44
00:00008C88 2E7C00040FFC    	  3020: 	move.l		#$40FFC,a7			; reset stack pointer
00:00008C8E 46FC2500        	  3021: 	move.w		#$2500,sr				; enable interrupts
00:00008C92 303900040202    	  3022: 	move.w		NumSetBreakpoints,d0
00:00008C98 5340            	  3023: 	subi.w		#1,d0
00:00008C9A 41F900040220    	  3024: 	lea				Breakpoints,a0
00:00008CA0 223900040144    	  3025: 	move.l		Regsave+$44,d1
                            	  3026: .0001:
00:00008CA6 B298            	  3027: 	cmp.l			(a0)+,d1
00:00008CA8 6708            	  3028: 	beq.s			ProcessBreakpoint
00:00008CAA 51C8FFFA        	  3029: 	dbra			d0,.0001
00:00008CAE 6000EB68        	  3030: 	bra				Monitor					; not a breakpoint
                            	  3031: ProcessBreakpoint:
00:00008CB2 6104            	  3032: 	bsr				DisarmAllBreakpoints
00:00008CB4 6000F40C        	  3033: 	bra				cmdDumpRegs
                            	  3034: 
                            	  3035: ;------------------------------------------------------------------------------
                            	  3036: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  3037: ;------------------------------------------------------------------------------
                            	  3038: 
                            	  3039: DisarmAllBreakpoints:
00:00008CB8 48E780E0        	  3040: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
00:00008CBC 303900040202    	  3041: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
00:00008CC2 0C400008        	  3042: 	cmpi.w	#numBreakpoints,d0		; check for valid number
00:00008CC6 641A            	  3043: 	bhs.s		.0001
00:00008CC8 45F900040220    	  3044: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
00:00008CCE 41F900040280    	  3045: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
00:00008CD4 6004            	  3046: 	bra.s		.0003									; enter loop at bottom
                            	  3047: .0002:
00:00008CD6 225A            	  3048: 	move.l	(a2)+,a1							; a1 = address of breakpoint
00:00008CD8 3298            	  3049: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  3050: .0003:
00:00008CDA 51C8FFFA        	  3051: 	dbra		d0,.0002
00:00008CDE 4CDF0701        	  3052: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  3053: .0001:
00:00008CE2 4E75            	  3054: 	rts	
                            	  3055: 
                            	  3056: ;------------------------------------------------------------------------------
                            	  3057: ; ArmAllBreakpoints, used when entering the monitor.
                            	  3058: ;------------------------------------------------------------------------------
                            	  3059: 
                            	  3060: ArmAllBreakpoints:
00:00008CE4 48E780E0        	  3061: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
00:00008CE8 303900040202    	  3062: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00008CEE 0C400008        	  3063: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
00:00008CF2 641E            	  3064: 	bhs.s			.0001
00:00008CF4 45F900040220    	  3065: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
00:00008CFA 41F900040280    	  3066: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
00:00008D00 6008            	  3067: 	bra.s			.0003									; enter loop at bottom
                            	  3068: .0002:
00:00008D02 225A            	  3069: 	move.l		(a2)+,a1							; a1 = address of breakpoint
00:00008D04 3091            	  3070: 	move.w		(a1),(a0)							; copy instruction word to table
00:00008D06 30FC4E43        	  3071: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  3072: .0003:
00:00008D0A 51C8FFF6        	  3073: 	dbra			d0,.0002
00:00008D0E 4CDF0701        	  3074: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  3075: .0001:
00:00008D12 4E75            	  3076: 	rts	
                            	  3077: 
                            	  3078: ;------------------------------------------------------------------------------
                            	  3079: ;------------------------------------------------------------------------------
                            	  3080: 
                            	  3081: ArmBreakpoint:
00:00008D14 48E7E0E0        	  3082: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
00:00008D18 303900040202    	  3083: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00008D1E 0C400008        	  3084: 	cmpi.w		#numBreakpoints,d0		; check if too many
00:00008D22 645A            	  3085: 	bhs.s			.0001
00:00008D24 527900040202    	  3086: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
00:00008D2A 2400            	  3087: 	move.l		d0,d2
00:00008D2C 6100F120        	  3088: 	bsr				ignBlanks
00:00008D30 6100F45A        	  3089: 	bsr				GetHexNumber
00:00008D34 6748            	  3090: 	beq.s			.0001									; was there an address?
00:00008D36 08010000        	  3091: 	btst			#0,d1									; address value must be even
00:00008D3A 6642            	  3092: 	bne.s			.0001
                            	  3093: 	; See if the breakpoint is in the table already
00:00008D3C 43F900040220    	  3094: 	lea				Breakpoints,a1				; a1 points to breakpoint table
00:00008D42 343C0007        	  3095: 	move.w		#numBreakpoints-1,d2
                            	  3096: .0002:
00:00008D46 B299            	  3097: 	cmp.l			(a1)+,d1
00:00008D48 673A            	  3098: 	beq.s			.0003									; breakpoint is in table already
00:00008D4A 51CAFFFA        	  3099: 	dbra			d2,.0002
                            	  3100: 	; Add breakpoint to table
                            	  3101: 	; Search for empty entry
00:00008D4E 43F900040220    	  3102: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
00:00008D54 4242            	  3103: 	clr.w			d2										; d2 = count
                            	  3104: .0006:
00:00008D56 4A91            	  3105: 	tst.l			(a1)									; is the entry empty?
00:00008D58 670C            	  3106: 	beq.s			.0005									; branch if found empty entry
00:00008D5A 5889            	  3107: 	lea				4(a1),a1							; point to next entry
00:00008D5C 5242            	  3108: 	addi.w		#1,d2									; increment count
00:00008D5E 0C420008        	  3109: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
00:00008D62 65F2            	  3110: 	blo.s			.0006
00:00008D64 6018            	  3111: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  3112: .0005:
00:00008D66 E542            	  3113: 	asl.w			#2,d2									; d2 = long word index
00:00008D68 23812000        	  3114: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
00:00008D6C 2441            	  3115: 	move.l		d1,a2
00:00008D6E E24A            	  3116: 	lsr.w			#1,d2									; d2 = word index
                            	  3117: .0004:
00:00008D70 43F900040280    	  3118: 	lea				BreakpointWords,a1
00:00008D76 33922000        	  3119: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
00:00008D7A 34BC4E43        	  3120: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  3121: .0001:
00:00008D7E 4CDF0707        	  3122: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
00:00008D82 4E75            	  3123: 	rts
                            	  3124: .0003:
00:00008D84 2469FFFC        	  3125: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
00:00008D88 0C524E43        	  3126: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
00:00008D8C 67F0            	  3127: 	beq.s			.0001
00:00008D8E D482            	  3128: 	asl.l			#1,d2									; d2 = word index
00:00008D90 60DE            	  3129: 	bra.s			.0004
                            	  3130: 
                            	  3131: 
                            	  3132: ;------------------------------------------------------------------------------
                            	  3133: ;------------------------------------------------------------------------------
                            	  3134: 
                            	  3135: DisarmBreakpoint:
00:00008D92 48E7E0E0        	  3136: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
00:00008D96 303900040202    	  3137: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00008D9C 0C400008        	  3138: 	cmpi.w		#numBreakpoints,d0		; check if too many
00:00008DA0 623E            	  3139: 	bhi.s			.0001
00:00008DA2 2400            	  3140: 	move.l		d0,d2
00:00008DA4 6100F0A8        	  3141: 	bsr				ignBlanks
00:00008DA8 6100F3E2        	  3142: 	bsr				GetHexNumber
00:00008DAC 6732            	  3143: 	beq.s			.0001									; was there an address?
00:00008DAE 08010000        	  3144: 	btst			#0,d1									; address value must be even
00:00008DB2 662C            	  3145: 	bne.s			.0001
                            	  3146: 	; See if the breakpoint is in the table already
00:00008DB4 43F900040220    	  3147: 	lea				Breakpoints,a1				; a1 points to breakpoint table
00:00008DBA 5342            	  3148: 	subi.w		#1,d2
                            	  3149: .0002:
00:00008DBC B299            	  3150: 	cmp.l			(a1)+,d1
00:00008DBE 6706            	  3151: 	beq.s			.0003									; breakpoint is in table already
00:00008DC0 51CAFFFA        	  3152: 	dbra			d2,.0002
00:00008DC4 601A            	  3153: 	bra				.0001									; breakpoint was not in table
                            	  3154: .0003:
                            	  3155: 	; Remove breakpoint from table
00:00008DC6 537900040202    	  3156: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
00:00008DCC 2469FFFC        	  3157: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
00:00008DD0 42A9FFFC        	  3158: 	clr.l			-4(a1)								; empty out breakpoint
00:00008DD4 43F900040280    	  3159: 	lea				BreakpointWords,a1
00:00008DDA D482            	  3160: 	asl.l			#1,d2									; d2 = word index
00:00008DDC 34B12000        	  3161: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  3162: .0001:
00:00008DE0 4CDF0707        	  3163: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
00:00008DE4 4E75            	  3164: 	rts
                            	  3165: 
                            	  3166: ;------------------------------------------------------------------------------
                            	  3167: ;------------------------------------------------------------------------------
                            	  3168: 
                            	  3169: ListBreakpoints:
00:00008DE6 6100E426        	  3170: 	bsr			CRLF
00:00008DEA 343C0008        	  3171: 	move.w	#numBreakpoints,d2
00:00008DEE 43F900040220    	  3172: 	lea			Breakpoints,a1
                            	  3173: .0001:
00:00008DF4 2219            	  3174: 	move.l	(a1)+,d1
00:00008DF6 6100F97C        	  3175: 	bsr			DisplayTetra
00:00008DFA 6100E412        	  3176: 	bsr			CRLF
00:00008DFE 51CAFFF4        	  3177: 	dbra		d2,.0001
00:00008E02 6000EA14        	  3178: 	bra			Monitor
                            	  3179: 
                            	  3180: ;------------------------------------------------------------------------------
                            	  3181: ;------------------------------------------------------------------------------
                            	  3182: 
                            	  3183: ClearBreakpointList:
00:00008E06 343C0008        	  3184: 	move.w	#numBreakpoints,d2
00:00008E0A 43F900040220    	  3185: 	lea			Breakpoints,a1
                            	  3186: .0001:
00:00008E10 4299            	  3187: 	clr.l		(a1)+
00:00008E12 51CAFFFC        	  3188: 	dbra		d2,.0001
00:00008E16 4E75            	  3189: 	rts
                            	  3190: 
                            	  3191: ;------------------------------------------------------------------------------
                            	  3192: ; SendMsg
                            	  3193: ; 00100xy0
                            	  3194: ;
                            	  3195: ; Parameters:
                            	  3196: ;		d1 = target core number
                            	  3197: ;		d2 = argument 1
                            	  3198: ;		d3 = argument 2
                            	  3199: ;		d4 = argument 3
                            	  3200: ;
                            	  3201: ;------------------------------------------------------------------------------
                            	  3202: 
                            	  3203: SendMsg:
00:00008E18 48E70440        	  3204: 	movem.l	d5/a1,-(a7)
00:00008E1C E149            	  3205: 	lsl.w		#8,d1
00:00008E1E 4E7A5FE0        	  3206: 	movec		coreno,d5
00:00008E22 E94D            	  3207: 	lsl.w		#4,d5
00:00008E24 8245            	  3208: 	or.w		d5,d1
00:00008E26 43F900100000    	  3209: 	lea			$00100000,a1
00:00008E2C 4AB11000        	  3210: 	tst.l		0(a1,d1.w)
00:00008E30 661C            	  3211: 	bne			.msgFull
00:00008E32 4E7A5FE0        	  3212: 	movec		coreno,d5
00:00008E36 23851000        	  3213: 	move.l	d5,0(a1,d1.w)
00:00008E3A 23821004        	  3214: 	move.l	d2,4(a1,d1.w)
00:00008E3E 23831008        	  3215: 	move.l	d3,8(a1,d1.w)
00:00008E42 2384100C        	  3216: 	move.l	d4,12(a1,d1.w)
00:00008E46 4CDF0220        	  3217: 	movem.l	(a7)+,d5/a1
00:00008E4A 7200            	  3218: 	moveq		#0,d1
00:00008E4C 4E75            	  3219: 	rts
                            	  3220: .msgFull:
00:00008E4E 4CDF0220        	  3221: 	movem.l	(a7)+,d5/a1
00:00008E52 72FF            	  3222: 	moveq		#-1,d1
00:00008E54 4E75            	  3223: 	rts
                            	  3224: 
                            	  3225: ;------------------------------------------------------------------------------
                            	  3226: ; ReceiveMsg
                            	  3227: ;		Scan the message table for messages and dispatch them.
                            	  3228: ; 00100xy0
                            	  3229: ;
                            	  3230: ; Parameters:
                            	  3231: ;------------------------------------------------------------------------------
                            	  3232: 
                            	  3233: ReceiveMsg:
00:00008E56 48E77F40        	  3234: 	movem.l		d1/d2/d3/d4/d5/d6/d7/a1,-(a7)
00:00008E5A 43F900100000    	  3235: 	lea				$00100000,a1
00:00008E60 4E7A5FE0        	  3236: 	movec			coreno,d5
00:00008E64 E14D            	  3237: 	lsl.w			#8,d5
00:00008E66 7C02            	  3238: 	moveq			#2,d6
                            	  3239: .nextCore:
00:00008E68 3E06            	  3240: 	move.w		d6,d7
00:00008E6A E94F            	  3241: 	lsl.w			#4,d7
00:00008E6C DE45            	  3242: 	add.w			d5,d7
00:00008E6E 4AB17000        	  3243: 	tst.l			0(a1,d7.w)			; Is there a message from core d6?
00:00008E72 6716            	  3244: 	beq.s			.noMsg
00:00008E74 22317000        	  3245: 	move.l		0(a1,d7.w),d1
00:00008E78 24317004        	  3246: 	move.l		4(a1,d7.w),d2
00:00008E7C 26317008        	  3247: 	move.l		8(a1,d7.w),d3
00:00008E80 2831700C        	  3248: 	move.l		12(a1,d7.w),d4
00:00008E84 42B17000        	  3249: 	clr.l			0(a1,d7.w)			; indicate message was received
00:00008E88 610E            	  3250: 	bsr				DispatchMsg
                            	  3251: .noMsg:
00:00008E8A 5246            	  3252: 	addq			#1,d6
00:00008E8C BC7C0009        	  3253: 	cmp.w			#9,d6
00:00008E90 63D6            	  3254: 	bls				.nextCore
00:00008E92 4CDF02FE        	  3255: 	movem.l		(a7)+,d1/d2/d3/d4/d5/d6/d7/a1
00:00008E96 4E75            	  3256: 	rts
                            	  3257: 
                            	  3258: ;------------------------------------------------------------------------------
                            	  3259: ;------------------------------------------------------------------------------
                            	  3260: 
                            	  3261: DispatchMsg:
00:00008E98 4E75            	  3262: 	rts
                            	  3263: 
                            	  3264: ;------------------------------------------------------------------------------
                            	  3265: ; Trap #15, function 39 - convert floating-point to string and display
                            	  3266: ;
                            	  3267: ; Parameters
                            	  3268: ;		a1 = pointer to buffer
                            	  3269: ;		fp0 = number to print
                            	  3270: ;		d1 = width of print field
                            	  3271: ;		d2 = precision
                            	  3272: ;		d3 = 'E' or 'e'
                            	  3273: ;------------------------------------------------------------------------------
                            	  3274: 
                            	  3275: prtflt:
00:00008E9A 4E52FFD0        	  3276: 	link a2,#-48
00:00008E9E 2F7900040098002C	  3277: 	move.l _canary,44(sp)
00:00008EA6 48D7074F        	  3278: 	movem.l d0/d1/d2/d3/d6/a0/a1/a2,(sp)
00:00008EAA F22F68000020    	  3279: 	fmove.x fp0,32(sp)
00:00008EB0 2049            	  3280: 	move.l a1,a0						; a0 = pointer to buffer to use
00:00008EB2 13C100040508    	  3281: 	move.b d1,_width
00:00008EB8 23C200040514    	  3282: 	move.l d2,_precision
00:00008EBE 13C30004050C    	  3283: 	move.b d3,_E
00:00008EC4 6100F62A        	  3284: 	bsr _FloatToString
00:00008EC8 6100E35E        	  3285: 	bsr DisplayString
00:00008ECC F22F48000020    	  3286: 	fmove.x 32(sp),fp0
00:00008ED2 4CD7074F        	  3287: 	movem.l (sp),d0/d1/d2/d3/d6/a0/a1/a2
00:00008ED6 A2AF0003002C    	  3288: 	cchk 44(sp)
00:00008EDC 4E5A            	  3289: 	unlk a2
00:00008EDE 4E75            	  3290: 	rts
                            	  3291: 
                            	  3292: T15FloatToString:
00:00008EE0 4E52FFD4        	  3293: 	link a2,#-44
00:00008EE4 48D7034F        	  3294: 	movem.l d0/d1/d2/d3/d6/a0/a1,(sp)
00:00008EE8 F22F6800001C    	  3295: 	fmove.x fp0,28(sp)
00:00008EEE 2049            	  3296: 	move.l a1,a0						; a0 = pointer to buffer to use
00:00008EF0 13C100040508    	  3297: 	move.b d1,_width
00:00008EF6 23C200040514    	  3298: 	move.l d2,_precision
00:00008EFC 13C30004050C    	  3299: 	move.b d3,_E
00:00008F02 6100F5EC        	  3300: 	bsr _FloatToString
00:00008F06 F22F4800001C    	  3301: 	fmove.x 28(sp),fp0
00:00008F0C 4CD7034F        	  3302: 	movem.l (sp),d0/d1/d2/d3/d6/a0/a1
00:00008F10 4E5A            	  3303: 	unlk a2
00:00008F12 4E75            	  3304: 	rts
                            	  3305: 
                            	  3306: ;==============================================================================
                            	  3307: ; Parameters:
                            	  3308: ;		d7 = device number
                            	  3309: ;		d6 = function number
                            	  3310: ;		d0 to d5 = arguments
                            	  3311: ;==============================================================================
                            	  3312: 
                            	  3313: io_trap:
00:00008F14 0C070007        	  3314: 	cmpi.b #7,d7							; make sure legal device
00:00008F18 621C            	  3315: 	bhi.s .0002
00:00008F1A 48E70180        	  3316: 	movem.l d7/a0,-(a7)
00:00008F1E 4887            	  3317: 	ext.w d7
00:00008F20 CEFC0084        	  3318: 	mulu #DCB_SIZE,d7					; index to DCB
00:00008F24 207C00040A00    	  3319: 	move.l #null_dcb,a0
00:00008F2A 20707018        	  3320: 	move.l DCB_CMDPROC(a0,d7.w),a0
00:00008F2E 4E90            	  3321: 	jsr (a0)
00:00008F30 4CDF0180        	  3322: 	movem.l (a7)+,d7/a0
00:00008F34 4E73            	  3323: 	rte
                            	  3324: .0002:
00:00008F36 7020            	  3325: 	moveq #E_BadDevNum,d0
00:00008F38 4E73            	  3326: 	rte
                            	  3327: 
                            	  3328: ;==============================================================================
                            	  3329: ; Output a character to the current output device.
                            	  3330: ;
                            	  3331: ; Parameters:
                            	  3332: ;		d1.b	 character to output
                            	  3333: ; Returns:
                            	  3334: ;		none
                            	  3335: ;==============================================================================
                            	  3336: 
                            	  3337: OutputChar:
00:00008F3A 48E78300        	  3338: 	movem.l d0/d6/d7,-(a7)
00:00008F3E 7E00            	  3339: 	clr.l d7
00:00008F40 7C00            	  3340: 	clr.l d6
00:00008F42 1E39000400A8    	  3341: 	move.b OutputDevice,d7		; d7 = output device
00:00008F48 3C3C0002        	  3342: 	move.w #DEV_PUTCHAR,d6		; d6 = function
00:00008F4C 4E40            	  3343: 	trap #0
00:00008F4E 4CDF00C1        	  3344: 	movem.l (a7)+,d0/d6/d7
00:00008F52 4E75            	  3345: 	rts
                            	  3346: 
                            	  3347: ;------------------------------------------------------------------------------
                            	  3348: ;------------------------------------------------------------------------------
                            	  3349: 
                            	  3350: InitIRQ:
00:00008F54 7006            	  3351: 	moveq		#6,d0
00:00008F56 41F900000B0E    	  3352: 	lea			KeybdIRQ,a0
00:00008F5C 610C            	  3353: 	bsr			InstallIRQ
00:00008F5E 41FA004E        	  3354: 	lea			TickIRQ,a0
00:00008F62 6106            	  3355: 	bsr			InstallIRQ
00:00008F64 7003            	  3356: 	moveq		#3,d0
00:00008F66 41FA87DA        	  3357: 	lea			SerialIRQ,a0
                            	  3358: 	; fall through
                            	  3359: 
                            	  3360: ;------------------------------------------------------------------------------
                            	  3361: ; Install an IRQ handler.
                            	  3362: ;
                            	  3363: ; Parameters:
                            	  3364: ;		a0 = pointer to bucket containing vector
                            	  3365: ;		d0 = vector (64 to 255)
                            	  3366: ; Returns:
                            	  3367: ;		d0 = 0 if successfully added, otherwise E_NotAlloc
                            	  3368: ;		nf = 0, zf = 1 if successfully added, otherwise nf = 1, zf = 0
                            	  3369: ;------------------------------------------------------------------------------
                            	  3370: 
                            	  3371: InstallIRQ:
00:00008F6A 48E70060        	  3372: 	movem.l a1/a2,-(a7)				; save working register
00:00008F6E 4A90            	  3373: 	tst.l (a0)								; link field must be NULL
00:00008F70 6634            	  3374: 	bne.s .0003
00:00008F72 0C400040        	  3375: 	cmpi.w #64,d0							; is vector in range (64 to 255)?
00:00008F76 652E            	  3376: 	blo.s .0003
00:00008F78 0C4000FF        	  3377: 	cmpi.w #255,d0
00:00008F7C 6228            	  3378: 	bhi.s .0003
00:00008F7E 45F80400        	  3379: 	lea	irq_list_tbl,a2				; a2 points to installed IRQ list
00:00008F82 E748            	  3380: 	lsl.w	#3,d0								; multiply by 2 long words
00:00008F84 22720000        	  3381: 	move.l (a2,d0.w),a1				; get first link
00:00008F88 45F20000        	  3382: 	lea (a2,d0.w),a2					; 
                            	  3383: .0002:
00:00008F8C B1C9            	  3384: 	cmpa.l a1,a0							; installed already?
00:00008F8E 6716            	  3385: 	beq.s .0003
00:00008F90 B2FC0000        	  3386: 	cmpa.l #0,a1							; is link NULL?
00:00008F94 6706            	  3387: 	beq.s .0001
00:00008F96 2449            	  3388: 	move.l a1,a2							; save previous link
00:00008F98 2251            	  3389: 	move.l (a1),a1						; get next link
00:00008F9A 60F0            	  3390: 	bra .0002
                            	  3391: .0001:
00:00008F9C 2488            	  3392: 	move.l a0,(a2)						; set link
00:00008F9E 225F245F        	  3393: 	movem.l (a7)+,a1/a2
00:00008FA2 7000            	  3394: 	moveq #E_Ok,d0
00:00008FA4 4E75            	  3395: 	rts
                            	  3396: .0003:
00:00008FA6 225F245F        	  3397: 	movem.l (a7)+,a1/a2
00:00008FAA 7009            	  3398: 	moveq #E_NotAlloc,d0			; return failed to add
00:00008FAC 4E75            	  3399: 	rts
                            	  3400: 
                            	  3401: ;------------------------------------------------------------------------------
                            	  3402: ; TickIRQ
                            	  3403: ; - this IRQ is processed by all cores.
                            	  3404: ; - reset the edge circuit.
                            	  3405: ; - an IRQ live indicator is updated on the text screen for the core
                            	  3406: ;------------------------------------------------------------------------------
                            	  3407: 
                            	  3408: TickIRQ:
00:00008FAE 46FC2600        	  3409: 	move.w #$2600,sr					; disable lower level IRQs
00:00008FB2 48E77080        	  3410: 	movem.l	d1/d2/d3/a0,-(a7)
00:00008FB6 52B90004009C    	  3411: 	addi.l #1,tickcnt
00:00008FBC 13FC0001000400A0	  3412: 	move.b #1,IRQFlag					; tick interrupt indicator in local memory
00:00008FC4 4E7A1FE0        	  3413: 	movec	coreno,d1						; d1 = core number
00:00008FC8 2601            	  3414: 	move.l d1,d3
                            	  3415: 	if (SCREEN_FORMAT==1)
00:00008FCA E583            	  3416: 		asl.l #2,d3								; 4 bytes per text cell
                            	  3417: 	else
                            	  3418: 		asl.l #3,d3								; 8 bytes per text cell
                            	  3419: 	endif
00:00008FCC 23FC1D000000FD09	  3420: 	move.l #$1D000000,PLIC+$14	; reset edge sense circuit
00:00008FD4 0014
00:00008FD6 41F9FD0000C8    	  3421: 	lea $FD0000C8,a0					; display field address
00:00008FDC 24303004        	  3422: 	move.l 4(a0,d3.w),d2			; get char from screen
                            	  3423: ;	rol.l #8,d2								; extract char field
                            	  3424: ;	clr.b d2									; clear char field
                            	  3425: ;	addi.b #'0',d1						; binary to ascii core number
                            	  3426: ;	or.b	d1,d2								; insert core number
                            	  3427: ;	ror.l #8,d2								; reposition to proper place
                            	  3428: ;	addi.w #1,d2							; flashy colors
00:00008FE0 5282            	  3429: 	addi.l #$0001,d2
00:00008FE2 21823004        	  3430: 	move.l d2,4(a0,d3.w)			; update onscreen IRQ flag
00:00008FE6 6100FE6E        	  3431: 	bsr	ReceiveMsg
00:00008FEA 4CDF010E        	  3432: 	movem.l	(a7)+,d1/d2/d3/a0
00:00008FEE 4E73            	  3433: 	rte
                            	  3434: 
                            	  3435: ;------------------------------------------------------------------------------
                            	  3436: ;------------------------------------------------------------------------------
                            	  3437: 
                            	  3438: irq3_rout:
                            	  3439: ;	movem.l	d0/d1/a0/a1,-(a7)
                            	  3440: ;	lea			InstalledIRQ+8*4*3,a0
                            	  3441: ;	bra			irq_rout
                            	  3442: 
                            	  3443: irq6_rout:
                            	  3444: ;	movem.l	d0/d1/a0/a1,-(a7)
                            	  3445: ;	lea			InstalledIRQ+8*4*6,a0
                            	  3446: irq_rout:
00:00008FF0 7007            	  3447: 	moveq		#7,d0
                            	  3448: .nextHandler:
00:00008FF2 2258            	  3449: 	move.l	(a0)+,a1
00:00008FF4 6706            	  3450: 	beq.s		.0003
00:00008FF6 4E91            	  3451: 	jsr			(a1)
00:00008FF8 4A81            	  3452: 	tst.l		d1								; was IRQ handled?
00:00008FFA 6B04            	  3453: 	bmi.s		.0002							; first one to return handled quits loop
                            	  3454: .0003:
00:00008FFC 51C8FFF4        	  3455: 	dbra		d0,.nextHandler
                            	  3456: .0002:
00:00009000 4CDF0303        	  3457: 	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3458: 
                            	  3459: ; Load head of list into an address register, then branch to a generic routine.
                            	  3460: 
                            	  3461: ;	rept 192
                            	  3462: ;	macIRQ_proc_label REPTN
                            	  3463: ;	movem.l a0/a1,-(a7)
                            	  3464: ;	move.l irq_list_tbl+REPTN*4,a1	; get the head of the list
                            	  3465: ;	jmp irq_proc_generic
                            	  3466: ;	endr
                            	  3467: 
                            	  3468: irq_proc_generic:
                            	  3469: .0003:
00:00009004 20690004        	  3470: 	move.l 4(a1),a0									; a0 = vector
00:00009008 B0FC0000        	  3471: 	cmpa.l #0,a0										; ugh. move to address does not set flags
00:0000900C 6706            	  3472: 	beq.s .0001											; valid vector?
00:0000900E 4E90            	  3473: 	jsr (a0)												; call the interrupt routine
00:00009010 4A81            	  3474: 	tst.l d1												; IRQ handled?
00:00009012 6B08            	  3475: 	bmi.s .0002											
                            	  3476: .0001:
00:00009014 2251            	  3477: 	move.l (a1),a1
00:00009016 B0FC0000        	  3478: 	cmpa.l #0,a0										; end of list?
00:0000901A 66E8            	  3479: 	bne.s .0003
                            	  3480: .0002:
00:0000901C 205F225F        	  3481: 	movem.l (a7)+,a0/a1
00:00009020 4E73            	  3482: 	rte 
                            	  3483: 
                            	  3484: SpuriousIRQ:
00:00009022 4E73            	  3485: 	rte
                            	  3486: 
                            	  3487: ;	bsr			KeybdIRQ
                            	  3488: ;	tst.l		d1								; handled by KeybdIRQ?
                            	  3489: ;	bmi.s		.0002							; if yes, go return
                            	  3490: ;.0001:
                            	  3491: ;	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
                            	  3492: ;	move.l	TextScr,a0				; a0 = screen address
                            	  3493: ;	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  3494: ;.0002:	
                            	  3495: ;	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3496: ;	rte
                            	  3497: 
                            	  3498: nmi_rout:
00:00009024 48E7C080        	  3499: 	movem.l	d0/d1/a0,-(a7)
00:00009028 123C004E        	  3500: 	move.b	#'N',d1
00:0000902C 6100FF0C        	  3501: 	bsr			OutputChar
00:00009030 4CDF0103        	  3502: 	movem.l	(a7)+,d0/d1/a0		; return
00:00009034 4E73            	  3503: 	rte
                            	  3504: 
                            	  3505: addr_err:
00:00009036 544F            	  3506: 	addq		#2,sp						; get rid of sr
00:00009038 221F            	  3507: 	move.l	(sp)+,d1				; pop exception address
00:0000903A 6100F738        	  3508: 	bsr			DisplayTetra		; and display it
00:0000903E 43FA00A6        	  3509: 	lea			msgAddrErr,a1	; followed by message
00:00009042 6100E1FA        	  3510: 	bsr			DisplayStringCRLF
                            	  3511: .0001:
00:00009046 60FE            	  3512: 	bra			.0001
00:00009048 6000E7CE        	  3513: 	bra			Monitor
                            	  3514: 	
                            	  3515: brdisp_trap:
00:0000904C 48F9FFFF00040100	  3516: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
00:00009054 33DF00040140    	  3517: 	move.w	(a7)+,Regsave+$40
00:0000905A 23DF00040144    	  3518: 	move.l	(a7)+,Regsave+$44
00:00009060 2E7C00047FFC    	  3519: 	move.l	#$47FFC,a7			; reset stack pointer
00:00009066 46FC2500        	  3520: 	move.w	#$2500,sr				; enable interrupts
00:0000906A 43FA0099        	  3521: 	lea			msg_bad_branch_disp,a1
00:0000906E 6100E1B8        	  3522: 	bsr			DisplayString
00:00009072 6100F6F8        	  3523: 	bsr			DisplaySpace
00:00009076 223900040144    	  3524: 	move.l	Regsave+$44,d1	; exception address
00:0000907C 6100F6F6        	  3525: 	bsr			DisplayTetra		; and display it
                            	  3526: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
00:00009080 6000F040        	  3527: 	bra			cmdDumpRegs
                            	  3528: 
                            	  3529: illegal_trap:
00:00009084 544F            	  3530: 	addq		#2,sp						; get rid of sr
00:00009086 221F            	  3531: 	move.l	(sp)+,d1				; pop exception address
00:00009088 6100F6EA        	  3532: 	bsr			DisplayTetra		; and display it
00:0000908C 43FA0065        	  3533: 	lea			msg_illegal,a1	; followed by message
00:00009090 6100E196        	  3534: 	bsr			DisplayString
                            	  3535: .0001:
00:00009094 60FE            	  3536: 	bra			.0001
00:00009096 6000E780        	  3537: 	bra			Monitor
                            	  3538: 	
                            	  3539: io_irq:
00:0000909A 544F            	  3540: 	addq #2,sp
00:0000909C 221F            	  3541: 	move.l (sp)+,d1
00:0000909E 6100F6D4        	  3542: 	bsr DisplayTetra
00:000090A2 43FA0083        	  3543: 	lea msg_io_access,a1
00:000090A6 6100E180        	  3544: 	bsr DisplayString
00:000090AA 6000F016        	  3545: 	bra cmdDumpRegs
                            	  3546: 
                            	  3547: ; -----------------------------------------------------------------------------
                            	  3548: ; -----------------------------------------------------------------------------
                            	  3549: 
                            	  3550: msg_start:
00:000090AE 46656D74696B6920	  3551: 	dc.b	"Femtiki rf68k Multi-core OS Starting",LF,CR,0
00:000090B6 726636386B204D75
00:000090BE 6C74692D636F7265
00:000090C6 204F532053746172
00:000090CE 74696E67
00:000090D2 0A
00:000090D3 0D
00:000090D4 00
                            	  3552: ;	dc.b	"rf68k System Starting",CR,LF,0
                            	  3553: msg_core_start:
00:000090D5 20636F7265207374	  3554: 	dc.b	" core starting",CR,LF,0
00:000090DD 617274696E67
00:000090E3 0D
00:000090E4 0A
00:000090E5 00
                            	  3555: msgAddrErr
00:000090E6 2061646472657373	  3556: 	dc.b	" address err",0
00:000090EE 20657272
00:000090F2 00
                            	  3557: msg_illegal:
00:000090F3 20696C6C6567616C	  3558: 	dc.b	" illegal opcode",CR,LF,0
00:000090FB 206F70636F6465
00:00009102 0D
00:00009103 0A
00:00009104 00
                            	  3559: msg_bad_branch_disp:
00:00009105 206272616E636820	  3560: 	dc.b	" branch selfref: ",0
00:0000910D 73656C667265663A
00:00009115 20
00:00009116 00
                            	  3561: msg_test_done:
00:00009117 2043505520746573	  3562: 	dc.b	" CPU test done.",0
00:0000911F 7420646F6E652E
00:00009126 00
                            	  3563: msg_io_access
00:00009127 20756E7065726D69	  3564: 	dc.b " unpermitted access to I/O",0
00:0000912F 7474656420616363
00:00009137 65737320746F2049
00:0000913F 2F4F
00:00009141 00
                            	  3565: msgChk
00:00009142 20636865636B2066	  3566: 	dc.b " check failed",0
00:0000914A 61696C6564
00:0000914F 00
                            	  3567: msgStackCanary
00:00009150 20737461636B2063	  3568: 	dc.b " stack canary overwritten",0
00:00009158 616E617279206F76
00:00009160 6572777269747465
00:00009168 6E
00:00009169 00
                            	  3569: 
                            	  3570: 	even
                            	  3571: 
                            	  3572: ;-------------------------------------------------------------------------
                            	  3573: ; File HEX2DEC   HEX2DEC convert hex to decimal                   11/02/81
                            	  3574: ;
                            	  3575: ;    CONVERT BINARY TO DECIMAL  REG  D0 PUT IN ( A6) BUFFER AS ASCII
                            	  3576: 
                            	  3577: ; Shift buffer one character to left
                            	  3578: ShiftBuf:
00:0000916A 48E78028        	  3579: 	movem.l d0/a2/a4,-(a7)
00:0000916E 200B            	  3580: 	move.l a3,d0
00:00009170 06800000003F    	  3581: 	addi.l #BUFSIZE,d0
                            	  3582: .0001:
00:00009176 18EC0001        	  3583: 	move.b 1(a4),(a4)+
00:0000917A B08C            	  3584: 	cmp.l a4,d0
00:0000917C 65F8            	  3585: 	blo.s .0001
00:0000917E 4CDF1401        	  3586: 	movem.l (a7)+,d0/a2/a4
00:00009182 4E75            	  3587: 	rts
                            	  3588: 
                            	  3589: HEX2DEC2:
00:00009184 48E7C01C        	  3590: 	movem.l d0/d1/a3/a4/a5,-(a7)
00:00009188 264E            	  3591: 	move.l a6,a3
00:0000918A 284E            	  3592: 	move.l a6,a4
00:0000918C 2200            	  3593: 	move.l d0,d1
00:0000918E 6A0A            	  3594: 	bpl.s .0001
00:00009190 4480            	  3595: 	neg.l d0										;
00:00009192 6B32            	  3596: 	bmi.s .0002									; neg and still minus, must be -tve zero
00:00009194 1CFC002D        	  3597: 	move.b #'-',(a6)+
00:00009198 284E            	  3598: 	move.l a6,a4
                            	  3599: .0001:
00:0000919A 82FC0064        	  3600: 	divu #100,d1								; scale d1 - chop last 2 decimal digits
00:0000919E A2C10000        	  3601: 	bin2bcd d1									; convert to BCD
00:000091A2 6100F5FC        	  3602: 	bsr BufTetra								; capture in buffer (8 digits)
00:000091A6 2200            	  3603: 	move.l d0,d1
00:000091A8 A2C10000        	  3604: 	bin2bcd d1									; convert to BCD
00:000091AC 6100F5FE        	  3605: 	bsr BufByte									; capture last 2 digits in buffer
                            	  3606: .0004:
00:000091B0 0C140030        	  3607: 	cmpi.b #'0',(a4)						; Is there a leading zero?
00:000091B4 6606            	  3608: 	bne.s .0003									; No, we're done shifting
00:000091B6 61B2            	  3609: 	bsr ShiftBuf								; Shift the buffer over a character
00:000091B8 538E            	  3610: 	subq.l #1,a6								; adjust buffer pos.
00:000091BA 60F4            	  3611: 	bra.s .0004									; go check next character
                            	  3612: .0003:
00:000091BC 4A14            	  3613: 	tst.b (a4)
00:000091BE 6706            	  3614: 	beq.s .0002
00:000091C0 0C140020        	  3615: 	cmpi.b #' ',(a4)						; is the buffer empty?
00:000091C4 6606            	  3616: 	bne.s .0005
                            	  3617: .0002:
00:000091C6 18FC0030        	  3618: 	move.b #'0',(a4)+						; ensure at least a '0'
00:000091CA 2C4C            	  3619: 	move.l a4,a6
                            	  3620: .0005:
00:000091CC 4CDF3803        	  3621: 	movem.l (a7)+,d0/d1/a3/a4/a5
00:000091D0 4E75            	  3622: 	rts
                            	  3623: 
                            	  3624: HEX2DEC: 
00:000091D2 48E77B00        	  3625: 	movem.l D1-D4/D6-D7,-(A7)   ; SAVE REGISTERS
00:000091D6 2E00            	  3626: 	move.l D0,D7          			; SAVE IT HERE
00:000091D8 6A08            	  3627: 	bpl.s HX2DC
00:000091DA 4487            	  3628: 	neg.l D7              			; CHANGE TO POSITIVE
00:000091DC 6B4E            	  3629: 	bmi.s HX2DC57          			; SPECIAL CASE (-0)
00:000091DE 1CFC002D        	  3630: 	move.b #'-',(A6)+      			; PUT IN NEG SIGN
                            	  3631: HX2DC:  
00:000091E2 4244            	  3632: 	clr.w D4              			; FOR ZERO SURPRESS
00:000091E4 7C0A            	  3633: 	moveq #10,D6          			; COUNTER
                            	  3634: HX2DC0:
00:000091E6 7401            	  3635:   moveq #1,D2           			; VALUE TO SUB
00:000091E8 2206            	  3636: 	move.l D6,D1          			; COUNTER
00:000091EA 5381            	  3637: 	subq.l #1,D1           			; ADJUST - FORM POWER OF TEN
00:000091EC 671A            	  3638: 	beq.s HX2DC2           			; IF POWER IS ZERO
                            	  3639: HX2DC1:
00:000091EE 3602            	  3640:   move.w D2,D3          			; D3=LOWER WORD
00:000091F0 C6FC000A        	  3641: 	mulu #10,D3
00:000091F4 4842            	  3642: 	swap D2              				; D2=UPPER WORD
00:000091F6 C4FC000A        	  3643: 	mulu #10,D2
00:000091FA 4843            	  3644: 	swap D3              				; ADD UPPER TO UPPER
00:000091FC D443            	  3645: 	add.w D3,D2
00:000091FE 4842            	  3646: 	swap D2              				; PUT UPPER IN UPPER
00:00009200 4843            	  3647: 	swap D3              				; PUT LOWER IN LOWER
00:00009202 3403            	  3648: 	move.w D3,D2          			; D2=UPPER & LOWER
00:00009204 5381            	  3649: 	subq.l #1,D1
00:00009206 66E6            	  3650: 	bne.s HX2DC1
                            	  3651: HX2DC2:
00:00009208 7000            	  3652:   clr.l D0              			; HOLDS SUB AMT
                            	  3653: HX2DC22:
00:0000920A BE82            	  3654: 	cmp.l D2,D7
00:0000920C 6D06            	  3655:   blt.s HX2DC3           			; IF NO MORE SUB POSSIBLE
00:0000920E 5280            	  3656: 	addq.l #1,D0           			; BUMP SUBS
00:00009210 9E82            	  3657: 	sub.l D2,D7          				; COUNT DOWN BY POWERS OF TEN
00:00009212 60F6            	  3658: 	bra.s HX2DC22          			; DO MORE
                            	  3659: HX2DC3:
00:00009214 4A00            	  3660:   tst.b D0              			; ANY VALUE?
00:00009216 6604            	  3661: 	bne.s HX2DC4
00:00009218 4A44            	  3662: 	tst.w D4              			; ZERO SURPRESS
00:0000921A 6708            	  3663: 	beq.s HX2DC5
                            	  3664: HX2DC4:
00:0000921C 06000030        	  3665:   addi.b #$30,D0         		; BINARY TO ASCII
00:00009220 1CC0            	  3666: 	move.b D0,(A6)+       			; PUT IN BUFFER
00:00009222 1800            	  3667: 	move.b D0,D4          			; MARK AS NON ZERO SURPRESS
                            	  3668: HX2DC5:
00:00009224 5386            	  3669:   subq.l #1,D6           			; NEXT POWER
00:00009226 66BE            	  3670: 	bne.s HX2DC0
00:00009228 4A44            	  3671: 	tst.w D4              			; SEE IF ANYTHING PRINTED
00:0000922A 6604            	  3672: 	bne.s HX2DC6
                            	  3673: HX2DC57:
00:0000922C 1CFC0030        	  3674:  move.b #'0',(A6)+      			; PRINT AT LEST A ZERO
                            	  3675: HX2DC6:
00:00009230 4CDF00DE        	  3676: 	movem.l (A7)+,D1-D4/D6-D7 ; RESTORE REGISTERS
00:00009234 4E75            	  3677:   rts                      	; END OF ROUTINE
                            	  3678: 
                            	  3679: 
                            	  3680: PNT4HX:
                            	  3681: PNT4HEX:
00:00009236 6000F56E        	  3682: 	bra BufWyde
                            	  3683: PNT6HX:
00:0000923A 4840            	  3684: 	swap d0
00:0000923C 6100F56E        	  3685: 	bsr BufByte
00:00009240 4840            	  3686: 	swap d0
00:00009242 6000F562        	  3687: 	bra BufWyde
                            	  3688: PNT8HX:
00:00009246 6000F558        	  3689: 	bra BufTetra
                            	  3690: 	
                            	  3691: ; FORMAT RELATIVE ADDRESS  AAAAAA+Rn
                            	  3692: ;        ENTER     D0 = VALUE
                            	  3693: ;                  A6 = STORE POINTER
                            	  3694: ;
                            	  3695: FRELADDR:
00:0000924A 48E74780        	  3696: 	movem.l D1/D5-D7/A0,-(A7)
00:0000924E 41F900040880    	  3697: 	lea OFFSET,A0
00:00009254 7EFF            	  3698: 	moveq #-1,D7        	; D7 = DIFF. BEST FIT
00:00009256 7C00            	  3699: 	clr.l D6            	; D6 = OFFSET POSITION
                            	  3700: FREL10:
00:00009258 2200            	  3701:   move.l D0,D1
00:0000925A 4A90            	  3702: 	tst.l (a0)
00:0000925C 670C            	  3703: 	beq.s FREL15         	; ZERO OFFSET
00:0000925E 9290            	  3704: 	sub.l (a0),d1      		; D1 = DIFF.
00:00009260 6B08            	  3705: 	bmi.s FREL15         	; NO FIT
00:00009262 B287            	  3706: 	cmp.l D7,D1
00:00009264 6404            	  3707: 	bcc.s FREL15         	; OLD FIT BETTER
00:00009266 2E01            	  3708: 	move.l D1,D7        	; D7 = NEW BEST FIT
00:00009268 2A06            	  3709: 	move.l D6,D5        	; D5 = POSITION
                            	  3710: FREL15:
00:0000926A 5888            	  3711:   addq.l #4,A0
00:0000926C 5286            	  3712: 	addq.l #1,D6
00:0000926E 0C460008        	  3713: 	cmpi.w #8,D6
00:00009272 66E4            	  3714: 	bne.s FREL10         	; MORE OFFSETS TO CHECK
00:00009274 4A87            	  3715: 	tst.l D7
00:00009276 6B1E            	  3716: 	bmi.s FREL25         	; NO FIT
00:00009278 4A46            	  3717: 	tst D6
00:0000927A 6608            	  3718: 	bne.s FREL20
00:0000927C 4AB900040880    	  3719: 	tst.l OFFSET
00:00009282 6712            	  3720: 	beq.s FREL25         	; R0 = 000000; NO FIT
                            	  3721: FREL20:
00:00009284 2007            	  3722:   move.l D7,D0
00:00009286 61B2            	  3723: 	bsr	PNT6HX         		; FORMAT OFFSET
00:00009288 1CFC002B        	  3724: 	move.b #'+',(A6)+    	; +
00:0000928C 1CFC0052        	  3725: 	move.b #'R',(A6)+    	; R
00:00009290 06050030        	  3726: 	addi.b #'0',D5       	; MAKE ASCII
00:00009294 600A            	  3727: 	bra.s FREL30
                            	  3728: FREL25:
00:00009296 61A2            	  3729:   bsr	PNT6HX         	; FORMAT ADDRESS AS IS
00:00009298 1A3C0020        	  3730: 	move.b #BLANK,D5
00:0000929C 1CC5            	  3731: 	move.b D5,(A6)+     	; THREE SPACES FOR ALIGNMENT
00:0000929E 1CC5            	  3732: 	move.b D5,(A6)+
                            	  3733: FREL30:
00:000092A0 1CC5            	  3734:   move.b D5,(A6)+
00:000092A2 4CDF01E2        	  3735: 	movem.l (A7)+,D1/D5-D7/A0
00:000092A6 4E75            	  3736: 	rts
                            	  3737: 
                            	  3738: 	include "dcode68k.x68"

Source: "dcode68k.x68"
                            	     1: ;-------------------------------------------------------------------------
                            	     2: ; File DCODE68K  68K ONE LINE DISASSEMBLER                        07/28/82
                            	     3: ;
                            	     4: ;        CALLING SEQUENCE:
                            	     5: ;   D0,D1,D2 = CODE TO BE DISASSEMBLED
                            	     6: ;   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
                            	     7: ;   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
                            	     8: ;        JSR       DCODE68K
                            	     9: ;
                            	    10: ;        RETURN:
                            	    11: ;   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
                            	    12: ;   A5 = POINTER TO LINE AS DISASSEMBLED
                            	    13: ;   A6 = POINTER TO END OF LINE
                            	    14: ;
                            	    15: ; 01234567890123456789012345678901234567890123456789
                            	    16: ; AAAAAA FDATA.DDDDDDDDDDDDDD FOC.... FOP.....
                            	    17: ;
                            	    18: ;FDATA   =       10             DATA FIELD
                            	    19: ;FOC     =       31             OP-CODE FIELD
                            	    20: ;FOP     =       39             OPERAND FIELD
                            	    21: ;
                            	    22: ; CAUSES ORGIN MODULO 4
                            	    23: ; LONG:    macro
                            	    24: ;         .align  2
                            	    25: ;         DS.B    (;-X)&2
                            	    26: ;         endm
                            	    27: LOCVARSZ = 16
                            	    28: BUFSIZE  = 63
                            	    29: FDATA    =       10        ; OFFSET TO DATA
                            	    30: FOL      =       31        ; OFFSET TO LABEL
                            	    31: FOC      =       31        ; OFFSET TO OP-CODE (NO LABEL FIELD)
                            	    32: FOP      =       39        ; OFFSET TO OPERAND (NO LABEL FIELD)
                            	    33: 
                            	    34: 					code
                            	    35: 					even
                            	    36: X:       ;              ; BASE ADDRESS THIS MODULE
                            	    37:                                 ; LONG
                            	    38: 
                            	    39: ;  MOVEM REGISTERS TO EA
                            	    40: ;
                            	    41: ;        01001D001S......
                            	    42: ;        ..........XXXXXX       EFFECTIVE ADDRESS
                            	    43: ;        .........0......       WORD
                            	    44: ;        .........1......       LONG
                            	    45: ;        .....0..........       REGISTER TO MEMORY
                            	    46: ;        .....1..........       MEMORY TO REGISTER
                            	    47: ;
                            	    48: ;
                            	    49: IMOVEMFR:
00:000092A8 610006F8        	    50:          BSR     MOVEMS         ; SIZE
                            	    51: 
00:000092AC 7C38            	    52:          MOVEQ   #$0038,D6
00:000092AE CC54            	    53:          AND.W   (A4),D6
00:000092B0 0C460020        	    54:          CMPI.W  #$0020,D6
00:000092B4 6706            	    55:          BEQ.S   IM7788         ; PREDECREMENT MODE
                            	    56: 
00:000092B6 7C01            	    57:          MOVEQ   #1,D6         ; D6 = INCREMENTER (BIT POSITION)
00:000092B8 7200            	    58:          MOVEQ   #0,D1         ; D1 = BIT POSITION
00:000092BA 6004            	    59:          BRA.S   IM7799
                            	    60: 
00:000092BC 7CFF            	    61: IM7788:  MOVEQ   #-1,D6        ; D6 = DECREMENTER (BIT POSITION)
00:000092BE 720F            	    62:          MOVEQ   #15,D1        ; D1 = BIT POSITION
00:000092C0 610006F4        	    63: IM7799:  BSR     MOVEMR         ; BUILD MASK WORD
                            	    64: 
00:000092C4 1CFC002C        	    65:          MOVE.B  #',',(A6)+    ; STORE COMMA
                            	    66: 
00:000092C8 5483            	    67:          ADDQ.L  #2,D3
00:000092CA 3814            	    68:          MOVE.W  (A4),D4
00:000092CC 3E3C01F4        	    69:          MOVE.W  #$1F4,D7     ; CONTROL + PREDECREMENT
00:000092D0 6100050E        	    70:          BSR     EEA
00:000092D4 601A            	    71:          BRA.S   CS16           ; COMMON
                            	    72: 
                            	    73:          
                            	    74: 
                            	    75: ; MOVEM  EA  TO REGISTERS
                            	    76: ;
00:000092D6 610006CA        	    77: IMOVEMTR:BSR     MOVEMS         ; SIZE
00:000092DA 5483            	    78:          ADDQ.L  #2,D3
00:000092DC 3E3C07EC        	    79:          MOVE.W  #$7EC,D7     ; CONTROL + POSTINCREMENT
00:000092E0 610004FE        	    80:          BSR     EEA
                            	    81: 
00:000092E4 1CFC002C        	    82:          MOVE.B  #',',(A6)+    ; STORE COMMA
                            	    83: 
00:000092E8 7C01            	    84:          MOVEQ   #1,D6         ; D6 = BIT POSITION INCREMENTER
00:000092EA 7200            	    85:          MOVEQ   #0,D1         ; D1 = BIT POSITION
00:000092EC 610006C8        	    86:          BSR     MOVEMR
                            	    87: 
00:000092F0 606C            	    88: CS16:    BRA.S   CS15           ; COMMON
                            	    89: 
                            	    90:          
                            	    91: ISTOP:
00:000092F2 302C0002        	    92: 	move.w 2(A4),D0
00:000092F6 1CFC0023        	    93: 	move.b #'#',(A6)+    	; IMMEDIATE
00:000092FA 1CFC0024        	    94: 	move.b #'$',(A6)+    	; HEX
00:000092FE 6100FF36        	    95: 	bsr PNT4HX         		; VALUE
00:00009302 600007C6        	    96: 	bra COMMON4
                            	    97: 
                            	    98: IMMED:   ;.align  2              ; ADD  AND  CMP #  EOR  OR  SUB
00:00009306 6100044E        	    99: 	bsr FORMSIZE
00:0000930A 5483            	   100: 	addq.l #2,D3         	; SIZE = 4
00:0000930C 1CFC0023        	   101: 	move.b #'#',(A6)+    	; IMMEDIATE
00:00009310 7000            	   102: 	clr.l D0
00:00009312 302C0002        	   103: 	move.w 2(A4),D0     	; D0 = EXTENSION WORD
00:00009316 3214            	   104: 	move.w (A4),D1
00:00009318 EC49            	   105: 	lsr.w #6,D1
00:0000931A 02410003        	   106: 	andi.w #3,D1
00:0000931E 6746            	   107: 	beq.s IMMED65        	; .BYTE
00:00009320 0C010001        	   108: 	cmpi.b #1,D1
00:00009324 6750            	   109: 	beq.s IMMED75        	; .WORD
00:00009326 5483            	   110: 	addq.l #2,D3         	; .LONG    SIZE = 6
00:00009328 202C0002        	   111: 	move.l 2(A4),D0     	; D0 = LONG EXTENSION WORD
                            	   112: 
                            	   113: IMMED45:
00:0000932C 6100FEA4        	   114: 	bsr HEX2DEC        		; DECIMAL
00:00009330 1CC5            	   115: 	move.b D5,(A6)+     	; COMMA SEPARATOR
00:00009332 3014            	   116: 	move (A4),D0
00:00009334 0240003F        	   117: 	andi.w #$003F,D0
00:00009338 0C40003C        	   118: 	cmpi.w #$003C,D0    	; DESTINATION ADDRESS MODE 111100  "SR"
00:0000933C 6622            	   119: 	bne.s IMMED55        	; NOT FOUND
00:0000933E 3014            	   120: 	move.w (A4),D0      	; "SR"  ILLEGAL FOR
00:00009340 02404000        	   121: 	andi.w #$4000,D0    	; ADDI   SUBI  CMPI
00:00009344 660007AE        	   122: 	bne FERROR         		; 0600   0400  0C00
00:00009348 3214            	   123: 	move.w (A4),D1
00:0000934A 024100C0        	   124: 	andi.w #$00C0,D1
00:0000934E 0C410080        	   125: 	cmpi.w #$0080,D1
00:00009352 670007A0        	   126: 	beq FERROR         		; .LONG NOT ALLOWED
00:00009356 1CFC0053        	   127: 	move.b #'S',(A6)+    	; #,SR FOR ANDI, EORI, ORI
00:0000935A 1CFC0052        	   128: 	move.b #'R',(A6)+
                            	   129: CS15:
00:0000935E 603C            	   130: 	bra.s CS14           	; COMMON
                            	   131: IMMED55:
00:00009360 6100047E        	   132: 	bsr EEA
00:00009364 6036            	   133: 	bra.s CS14           	; COMMON
                            	   134: IMMED65:
00:00009366 2200            	   135: 	move.l D0,D1        	; D1 = XXXXXXXX........
00:00009368 E049            	   136: 	lsr.w #8,D1         	; D1 = 00000000XXXXXXXX
00:0000936A 670A            	   137: 	beq.s IMMED75
00:0000936C 2200            	   138: 	move.l D0,D1
00:0000936E EE41            	   139: 	asr.w #7,D1
00:00009370 5241            	   140: 	addq.w #1,D1         ; CHECK FOR NEGATIVE
00:00009372 66000780        	   141: 	bne FERROR
                            	   142: IMMED75:
00:00009376 48C0            	   143: 	ext.l D0
00:00009378 60B2            	   144: 	bra.s IMMED45
                            	   145: 
                            	   146: ;  BIT   5432109876543210
                            	   147: ;        ....RRRMMM......       ; DESTINATION REGISTER MODE
                            	   148: ;        ..........MMMRRR       ; SOURCE MODE REGISTER
                            	   149: ;        0001............       ; .BYTE
                            	   150: ;        0011............       ; .WORD
                            	   151: ;        0010............       ; .LONG
                            	   152: ;
                            	   153: ; IF BYTE SIZE; DESTINATION ADDRESS DIRECT NOT ALLOWED
                            	   154:    
                            	   155: IMOVE:
00:0000937A 6000037E        	   156: 	bra IMOVEA1
                            	   157: 
                            	   158: ILINK:
00:0000937E 6158            	   159: 	bsr.s FORMREGA
00:00009380 1CC5            	   160: 	move.b D5,(A6)+     ; COMMA SERARATOR
00:00009382 1CFC0023        	   161: 	move.b #'#',(A6)+
00:00009386 302C0002        	   162: 	move.w 2(A4),D0
00:0000938A 48C0            	   163: 	ext.l D0
00:0000938C 6100FE44        	   164: 	bsr HEX2DEC        	; DECIMAL DISPLACEMENT
00:00009390 60000738        	   165: 	bra COMMON4
                            	   166:          
                            	   167:          ; CLR  NEG  NEGX  NOT TST
                            	   168: FORM1:
00:00009394 610003C0        	   169: 	bsr FORMSIZE
                            	   170: ;                               ; NBCD TAS
                            	   171: FORM1A:
00:00009398 61000446        	   172: 	bsr EEA            	; DATA ALTERABLE ONLY
                            	   173: CS14:
00:0000939C 6068            	   174: 	bra.s CS13          ; COMMON
                            	   175:      
                            	   176: 
                            	   177: 				;.align  2              ; EXT  SWAP
                            	   178: FORM3:   
00:0000939E 6148            	   179: 	bsr.s FORMREGD
00:000093A0 6064            	   180: 	bra.s CS13           	; COMMON
                            	   181:          
                            	   182: 
                            	   183: FORM4:	;   .align  2              ; TRAP
00:000093A2 1CFC0023        	   184:          MOVE.B  #'#',(A6)+
00:000093A6 3014            	   185:          MOVE.W  (A4),D0
00:000093A8 02800000000F    	   186:          ANDI.L  #$0F,D0
00:000093AE 6100FE22        	   187:          BSR     HEX2DEC        ; DECIMAL
00:000093B2 6052            	   188:          BRA.S   CS13           ; COMMON
                            	   189: 
                            	   190:          
                            	   191: 
                            	   192: FORM5:	;   .align  2              ; UNLNK
00:000093B4 6122            	   193:          BSR.S   FORMREGA
00:000093B6 604E            	   194:          BRA.S   CS13           ; COMMON
                            	   195: 
                            	   196: ;  BIT   5432109876543210
                            	   197: ;        ....RRR.........       ; ADDRESS REGISTER
                            	   198: ;        ..........XXXXXX       ; EFFECTIVE ADDRESS
                            	   199: ;
                            	   200:          
                            	   201: 
                            	   202: FORM6A:	;  .align  2              ; LEA
00:000093B8 3E3C07E4        	   203:          MOVE.W  #$7E4,D7     ; CONTROL ADDRESSING
00:000093BC 6150            	   204:          BSR.S   EEA10
                            	   205: 
00:000093BE 1CC5            	   206:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   207: 
00:000093C0 3814            	   208:          MOVE.W  (A4),D4
00:000093C2 EF5C            	   209:          ROL.W   #7,D4
00:000093C4 6112            	   210:          BSR.S   FORMREGA
00:000093C6 603E            	   211:          BRA.S   CS13           ; COMMON
                            	   212: 
                            	   213: ;  BIT   5432109876543210
                            	   214: ;        ....DDD.........       ; DATA REGISTER
                            	   215: ;        ..........XXXXXX       ; EFFECTIVE ADDRESS
                            	   216: ;
                            	   217:          
                            	   218: 
                            	   219: FORM6D:  ;.align  2              ; CHK  DIVS  DIVU  MULS  MULU
00:000093C8 3E3C0FFD        	   220:          MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:000093CC 6140            	   221:          BSR.S   EEA10
                            	   222: 
00:000093CE 1CC5            	   223:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   224: 
00:000093D0 3814            	   225:          MOVE.W  (A4),D4
00:000093D2 EF5C            	   226:          ROL.W   #7,D4
00:000093D4 6112            	   227:          BSR.S   FORMREGD
00:000093D6 602E            	   228:          BRA.S   CS13           ; COMMON
                            	   229: 
00:000093D8 1CFC0041        	   230: FORMREGA:MOVE.B  #'A',(A6)+    ; FORMAT A@
00:000093DC 02040007        	   231: FORMREG5:ANDI.B  #$07,D4
00:000093E0 00040030        	   232:          ORI.B   #'0',D4
00:000093E4 1CC4            	   233:          MOVE.B  D4,(A6)+
00:000093E6 4E75            	   234:          RTS
                            	   235: 
00:000093E8 1CFC0044        	   236: FORMREGD:MOVE.B  #'D',(A6)+    ; FORMAT D@
00:000093EC 60EE            	   237:          BRA.S   FORMREG5
                            	   238: 
                            	   239: ;  BIT   5432109876543210
                            	   240: ;        ....DDD......DDD       ; DATA REGISTERS
                            	   241: ;
                            	   242:         
                            	   243: FORM7: ;  .align  2              ; EXG
00:000093EE EF5C            	   244: 	rol.w #7,D4
00:000093F0 61F6            	   245: 	bsr.s FORMREGD
00:000093F2 1CC5            	   246: 	move.b D5,(A6)+     	; COMMA SEPARATOR
00:000093F4 3814            	   247: 	move.w (A4),D4
00:000093F6 61F0            	   248: 	bsr.s FORMREGD
00:000093F8 600C            	   249: 	bra.s CS13           	; COMMON
                            	   250: 
                            	   251: ;  BIT   5432109876543210
                            	   252: ;        ....AAA......AAA       ; ADDRESS REGISTERS
                            	   253: ;
                            	   254:          
                            	   255: FORM8:   ;.align  2              ; EXG
00:000093FA EF5C            	   256:          ROL.W   #7,D4
00:000093FC 61DA            	   257:          BSR.S   FORMREGA
                            	   258: 
                            	   259: FORM815:
00:000093FE 1CFC002C        	   260: 	MOVE.B  #',',(A6)+    ; COMMA SEPARATOR
00:00009402 3814            	   261: 	MOVE.W  (A4),D4
00:00009404 61D2            	   262: 	BSR.S   FORMREGA
                            	   263: CS13:
00:00009406 6078            	   264: 	BRA     CS12           ; COMMON
                            	   265: 
                            	   266: ;  BIT   5432109876543210
                            	   267: ;        ....DDD.........       ; DATA REGISTER
                            	   268: ;        .............AAA       ; ADDRESS REGISTER
                            	   269: ;
                            	   270:          
                            	   271: 
                            	   272: FORM9:   ;.align  2              ; EXG
00:00009408 EF5C            	   273:          ROL.W   #7,D4
00:0000940A 61DC            	   274:          BSR.S   FORMREGD       ; DATA REGISTER
00:0000940C 60F0            	   275:          BRA.S   FORM815
                            	   276: 
00:0000940E 600003D0        	   277: EEA10:   BRA     EEA
                            	   278: 
                            	   279: ;  BIT   5432109876543210
                            	   280: ;        ..........AAAAAA         EFFECTIVE ADDRESS
                            	   281: ;        .......MMM......         OP-MODE
                            	   282: ;        ....RRR.........         D-REGISTER
                            	   283: ;        .......011......         WORD  EA,A@
                            	   284: ;        .......111......         LONG  EA,A@
                            	   285: ;        .......000......         EA,D@ BYTE (ADDRESS REGISTER DIRECT NOT ALLOWED)
                            	   286: ;        .......0........         EA,D@
                            	   287: ;        .......1........         D@,EA
                            	   288: ;        ........00......         BYTE
                            	   289: ;        ........01......         WORD
                            	   290: ;        ........10......         LONG
                            	   291: ;
                            	   292:          
                            	   293: 
                            	   294: ;                               ADD <EA>,A@   CMP <EA>,A@   SUB <EA>,A@
                            	   295: FORM10EX:	;.align  2              ; ADD  CMP  SUB
00:00009412 3E3C0FFF        	   296:          MOVE.W  #$FFF,D7     ; ALL MODES ALLOWED
00:00009416 2004            	   297:          MOVE.L  D4,D0
00:00009418 024001C0        	   298:          ANDI.W  #$01C0,D0
00:0000941C 6738            	   299:          BEQ.S   FORM103        ; .......000......
00:0000941E 0C4001C0        	   300:          CMPI.W  #$01C0,D0
00:00009422 6710            	   301:          BEQ.S   FORM10E3       ; .......111......
00:00009424 0C4000C0        	   302:          CMPI.W  #$00C0,D0
00:00009428 661E            	   303:          BNE.S   FORM10E6
                            	   304: 
00:0000942A 1AFC002E        	   305:          MOVE.B  #'.',(A5)+    ; .......011......       STORE PERIOD
00:0000942E 1AFC0057        	   306:          MOVE.B  #'W',(A5)+
00:00009432 6008            	   307:          BRA.S   FORM10E4
                            	   308: 
00:00009434 1AFC002E        	   309: FORM10E3:MOVE.B  #'.',(A5)+
00:00009438 1AFC004C        	   310:          MOVE.B  #'L',(A5)+
                            	   311: 
00:0000943C 61D0            	   312: FORM10E4:BSR.S   EEA10
                            	   313: 
00:0000943E 1CC5            	   314:          MOVE.B  D5,(A6)+     ; STORE COMMA SEPARATOR
                            	   315: 
00:00009440 3814            	   316:          MOVE.W  (A4),D4
00:00009442 EF5C            	   317:          ROL.W   #7,D4
00:00009444 6192            	   318:          BSR.S   FORMREGA       ; <EA>,A@
00:00009446 6038            	   319:          BRA.S   CS12           ; COMMON
                            	   320: 
00:00009448 08140000        	   321: FORM10E6:BTST.B  #0,(A4)
00:0000944C 661C            	   322:          BNE.S   FORM105        ; .......1........    D@,<EA>
00:0000944E 600A            	   323:          BRA.S   FORM104        ; .......0........    <EA>,D@
                            	   324: 
                            	   325: ;  BIT   5432109876543210
                            	   326: ;        ..........AAAAAA       EFFECTIVE ADDRESS
                            	   327: ;        .......MMM......       OP-MODE
                            	   328: ;        ....RRR.........       D-REGISTER
                            	   329: ;        .......0........       EA,D@
                            	   330: ;        .......1........       D@,EA
                            	   331: ;        ........00......       BYTE
                            	   332: ;        ........01......       WORD
                            	   333: ;        ........10......       LONG
                            	   334: 
                            	   335:          
                            	   336: 
                            	   337: FORM10:  ;.align  2              ; AND  EOR  OR
00:00009450 08140000        	   338:          BTST.B  #0,(A4)
00:00009454 6614            	   339:          BNE.S   FORM105
                            	   340: 
00:00009456 3E3C0FFD        	   341: FORM103: MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000945A 610002FA        	   342: FORM104: BSR     FORMSIZE
00:0000945E 61AE            	   343:          BSR.S   EEA10          ; <EA>,D@
                            	   344: 
00:00009460 1CC5            	   345:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   346: 
00:00009462 1814            	   347:          MOVE.B  (A4),D4
00:00009464 E20C            	   348:          LSR.B   #1,D4
00:00009466 6180            	   349:          BSR     FORMREGD
00:00009468 6016            	   350:          BRA.S   CS12           ; COMMON
                            	   351: 
00:0000946A 610002EA        	   352: FORM105: BSR     FORMSIZE       ; D@,<EA>
00:0000946E 1814            	   353:          MOVE.B  (A4),D4
00:00009470 E20C            	   354:          LSR.B   #1,D4
00:00009472 6100FF74        	   355:          BSR     FORMREGD
                            	   356: 
00:00009476 1CC5            	   357:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   358: 
00:00009478 3814            	   359:          MOVE.W  (A4),D4
00:0000947A 3E3C01FD        	   360:          MOVE.W  #$1FD,D7     ; ALTERABLE MEMORY ADDRESSING
00:0000947E 618E            	   361:          BSR.S   EEA10
00:00009480 6000064A        	   362: CS12:    BRA     COMMON
                            	   363: 
                            	   364:          
                            	   365: 
                            	   366: ;                               PEA     (JMP  JSR)
00:00009484 3E3C07E4        	   367: FORM11:  MOVE.W  #$7E4,D7     ; CONTROL ADDERSSING
00:00009488 6184            	   368:          BSR     EEA10
00:0000948A 60F4            	   369:          BRA.S   CS12           ; COMMON
                            	   370: 
                            	   371:          
                            	   372: 
                            	   373: ;                               ; JMP  JSR
00:0000948C 2004            	   374: FORM11SL:MOVE.L  D4,D0        ; LOOK FOR .S  OR  .L
00:0000948E 0240003F        	   375:          ANDI.W  #$3F,D0
00:00009492 0C400038        	   376:          CMPI.W  #$38,D0
00:00009496 6608            	   377:          BNE.S   FORM112        ; NOT .S
00:00009498 1AFC002E        	   378:          MOVE.B  #'.',(A5)+    ; PERIOD
00:0000949C 1AFC0053        	   379:          MOVE.B  #'S',(A5)+    ; S
00:000094A0 0C400039        	   380: FORM112: CMPI.W  #$39,D0
00:000094A4 6608            	   381:          BNE.S   FORM114
00:000094A6 1AFC002E        	   382:          MOVE.B  #'.',(A5)+    ; PERIOD
00:000094AA 1AFC004C        	   383:          MOVE.B  #'L',(A5)+    ; L
00:000094AE 60D4            	   384: FORM114: BRA.S   FORM11
                            	   385: 
                            	   386: ;  BIT   5432109876543210
                            	   387: ;        ....XXX.....0...       DATA DESTINATION REGISTER
                            	   388: ;        ....XXX.....1...       ADDRESS REGISTER
                            	   389: ;        ....XXX.00......       BYTE
                            	   390: ;        ........01......       WORD
                            	   391: ;        ........10......       LONG
                            	   392: ;        ............0...       DATA REGISTER TO DATA REGISTER
                            	   393: ;        ............1...       MEMORY TO MEMORY
                            	   394: ;        ............0xXX       DATA SOURCE REGISTER
                            	   395: ;        ............1XXX       ADDRESS SOURCE REGISTER
                            	   396: ;
                            	   397:          
                            	   398: 
                            	   399: FORM12:  ;.align  2              ; ABCD  ADDX  SBCD  SUBX
00:000094B0 610002A4        	   400:          BSR     FORMSIZE
                            	   401: 
00:000094B4 08040003        	   402:          BTST    #3,D4
00:000094B8 6610            	   403:          BNE.S   FORM125
                            	   404: 
00:000094BA 6100FF2C        	   405:          BSR     FORMREGD       ; D@,D@;   FORMAT SOURCE
                            	   406: 
00:000094BE 1CC5            	   407:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   408: 
00:000094C0 1814            	   409:          MOVE.B  (A4),D4
00:000094C2 E20C            	   410:          LSR.B   #1,D4
00:000094C4 6100FF22        	   411:          BSR     FORMREGD       ; FORMAT DESTINATION
00:000094C8 6046            	   412:          BRA.S   CS11           ; COMMON
                            	   413: 
00:000094CA 1CFC002D        	   414: FORM125: MOVE.B  #'-',(A6)+    ; -
00:000094CE 1CFC0028        	   415:          MOVE.B  #'(',(A6)+    ; (
00:000094D2 6100FF04        	   416:          BSR     FORMREGA       ; A@    SOURCE
                            	   417: 
00:000094D6 203C282D2C29    	   418:          MOVE.L  #$282d2c29,D0 ; ),-(
00:000094DC 6152            	   419:          BSR.S   SCHR           ; STORE CHARS
                            	   420: 
00:000094DE 1814            	   421:          MOVE.B  (A4),D4
00:000094E0 E20C            	   422:          LSR.B   #1,D4
00:000094E2 6100FEF4        	   423:          BSR     FORMREGA       ; A@   DESTINATION
00:000094E6 1CFC0029        	   424:          MOVE.B  #')',(A6)+
00:000094EA 6024            	   425:          BRA.S   CS11           ; COMMON
                            	   426: 
                            	   427: ;  BIT   5432109876543210
                            	   428: ;        ....XXX.....1...       ADDRESS REGISTER    DESTINATION
                            	   429: ;        ....XXX.00......       BYTE
                            	   430: ;        ........01......       WORD
                            	   431: ;        ........10......       LONG
                            	   432: ;        ............1...       MEMORY TO MEMORY
                            	   433: ;        ............1XXX       ADDRESS SOURCE REGISTER
                            	   434: ;
                            	   435:          
                            	   436: 
                            	   437: FORM12A: ;.align  2              ; CMPM
00:000094EC 61000268        	   438:          BSR     FORMSIZE
                            	   439: 
00:000094F0 1CFC0028        	   440:          MOVE.B  #'(',(A6)+    ; (
00:000094F4 6100FEE2        	   441:          BSR     FORMREGA       ; A@
                            	   442: 
00:000094F8 203C282C2B29    	   443:          MOVE.L  #$282c2b29,D0  ; )+,(
00:000094FE 6130            	   444:          BSR.S   SCHR           ; STORE CHARS
                            	   445: 
00:00009500 1814            	   446:          MOVE.B  (A4),D4
00:00009502 E20C            	   447:          LSR.B   #1,D4
00:00009504 6100FED2        	   448:          BSR     FORMREGA       ; A@
00:00009508 1CFC0029        	   449:          MOVE.B  #')',(A6)+
00:0000950C 1CFC002B        	   450:          MOVE.B  #'+',(A6)+
00:00009510 600005BA        	   451: CS11:    BRA     COMMON
                            	   452: 
                            	   453:          
                            	   454: 
00:00009514 60000210        	   455: IQUICK:  BRA     IQUICKA        ; ADDQ  SUBQ
                            	   456: 
                            	   457: ;  BIT   5432109876543210
                            	   458: ;        0111...0........       FIXED
                            	   459: ;        ....RRR.........       DATA REGISTER
                            	   460: ;        ........DDDDDDDD       SIGN EXTENDED DATA
                            	   461: ;
                            	   462:          
                            	   463: 
                            	   464: IMOVEQ:  ;.align  2
00:00009518 1CFC0023        	   465:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	   466: 
00:0000951C 3014            	   467:          MOVE.W  (A4),D0
00:0000951E 4880            	   468:          EXT.W   D0
00:00009520 48C0            	   469:          EXT.L   D0
00:00009522 6100FCAE        	   470:          BSR     HEX2DEC        ; DECIMAL
                            	   471: 
00:00009526 1CC5            	   472:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   473: 
00:00009528 EF5C            	   474:          ROL.W   #7,D4
00:0000952A 6100FEBC        	   475:          BSR     FORMREGD
00:0000952E 60E0            	   476:          BRA.S   CS11           ; COMMON
                            	   477: 
00:00009530 1CC0            	   478: SCHR:    MOVE.B  D0,(A6)+     ; OUTPUT STRING
00:00009532 E088            	   479:          LSR.L   #8,D0
00:00009534 66FA            	   480:          BNE.S   SCHR           ; MORE TO OUTPUT
00:00009536 4E75            	   481:          RTS
                            	   482: 
                            	   483: ; MOVE FROM SR  (STATUS REGISTER)
                            	   484: ;
                            	   485:          
                            	   486: 
00:00009538 203C002C5253    	   487: IMVFSR:  MOVE.L  #$002c5253,D0 ; SR,
                            	   488: 
00:0000953E 61F0            	   489:          BSR.S   SCHR
00:00009540 6100029E        	   490:          BSR     EEA            ; DATA ALTERABLE
00:00009544 60CA            	   491:          BRA.S   CS11           ; COMMON
                            	   492: 
                            	   493: ; MOVE FROM USP (USER STACK POINTER)
                            	   494: ;
                            	   495:          
                            	   496: 
00:00009546 203C2C505355    	   497: IMVFUSP: MOVE.L  #$2c505355,D0 ; USP,
00:0000954C 61E2            	   498:          BSR.S   SCHR
00:0000954E 6100FE88        	   499:          BSR     FORMREGA
00:00009552 60BC            	   500:          BRA.S   CS11           ; COMMON
                            	   501: 
                            	   502: ; MOVE TO SR (STATUS REGISTER)
                            	   503: ;
                            	   504:          
                            	   505: 
00:00009554 3E3C0FFD        	   506: IMVTSR:  MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:00009558 61000286        	   507:          BSR     EEA
00:0000955C 203C0052532C    	   508:          MOVE.L  #$0052532c,D0 ; ,SR
00:00009562 61CC            	   509: IMVT44:  BSR.S   SCHR
00:00009564 60AA            	   510:          BRA.S   CS11           ; COMMON
                            	   511: 
                            	   512: ; MOVE TO USP (USER STACK POINTER)
                            	   513: ;
                            	   514:          
                            	   515: 
00:00009566 6100FE70        	   516: IMVTUSP: BSR     FORMREGA
00:0000956A 203C5053552C    	   517:          MOVE.L  #$5053552c,D0 ; ,USP
00:00009570 60F0            	   518:          BRA.S   IMVT44
                            	   519: 
                            	   520: ;  MOVE TO CCR (CONDITION CODE REGISTER)
                            	   521: ;
                            	   522:          
                            	   523: 
00:00009572 3E3C0FFD        	   524: IMVTCCR: MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:00009576 61000268        	   525:          BSR     EEA
00:0000957A 203C5243432C    	   526:          MOVE.L  #$5243432c,D0 ; ,CCR
00:00009580 60E0            	   527:          BRA.S   IMVT44
                            	   528: 
                            	   529: ;  BIT   5432109876543210
                            	   530: ;        0000...1..001...       FIXED
                            	   531: ;        ....XXX.........       DATA REGISTER
                            	   532: ;        ........0.......       MEMORY TO REGISTER
                            	   533: ;        ........1.......       REGISTER TO MEMORY
                            	   534: ;        .........0......       WORD
                            	   535: ;        .........1......       LONG
                            	   536: ;        .............XXX       ADDRESS REGISTER
                            	   537: ;
                            	   538:          
                            	   539: 
                            	   540: IMOVEP:  ;.align  2
00:00009582 1AFC002E        	   541:          MOVE.B  #'.',(A5)+    ; D@,#(A@)
00:00009586 303C4C57        	   542:          MOVE.W  #$4c57,D0    ; "LW"
00:0000958A 08040006        	   543:          BTST    #6,D4
00:0000958E 6702            	   544:          BEQ.S   IMOVEP11       ; USE "W"
00:00009590 E048            	   545:          LSR.W   #8,D0         ; USE "L"
00:00009592 1AC0            	   546: IMOVEP11:MOVE.B  D0,(A5)+     ; LENGTH
                            	   547: 
00:00009594 1814            	   548:          MOVE.B  (A4),D4
00:00009596 E20C            	   549:          LSR.B   #1,D4
                            	   550: 
00:00009598 082C00070001    	   551:          BTST.B  #7,1(A4)
00:0000959E 670E            	   552:          BEQ.S   IMOVEP35
                            	   553: 
00:000095A0 6100FE46        	   554:          BSR     FORMREGD       ; D@,$HHHH(A@)
                            	   555: 
00:000095A4 1CC5            	   556:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   557: 
00:000095A6 3814            	   558:          MOVE.W  (A4),D4
00:000095A8 6112            	   559:          BSR.S   IMOVEP66
00:000095AA 6000051E        	   560: CS20:    BRA     COMMON4
                            	   561: 
00:000095AE 610C            	   562: IMOVEP35:BSR.S   IMOVEP66       ; $HHHH(A@),D@
                            	   563: 
00:000095B0 1CC5            	   564:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   565: 
00:000095B2 1814            	   566:          MOVE.B  (A4),D4
00:000095B4 E20C            	   567:          LSR.B   #1,D4
00:000095B6 6100FE30        	   568:          BSR     FORMREGD
00:000095BA 60EE            	   569:          BRA.S   CS20           ; COMMON4
                            	   570: 
00:000095BC 1CFC0024        	   571: IMOVEP66:MOVE.B  #'$',(A6)+    ; FORMAT DISPLACEMENT
00:000095C0 302C0002        	   572:          MOVE.W  2(A4),D0
00:000095C4 6100FC70        	   573:          BSR     PNT4HX
                            	   574: 
00:000095C8 1CFC0028        	   575:          MOVE.B  #'(',(A6)+
                            	   576: 
00:000095CC 3814            	   577:          MOVE.W  (A4),D4
00:000095CE 6100FE08        	   578:          BSR     FORMREGA
00:000095D2 1CFC0029        	   579:          MOVE.B  #')',(A6)+
00:000095D6 4E75            	   580:          RTS
                            	   581: 
                            	   582: SCOMMON:
00:000095D8 600004F2        	   583: 	bra COMMON         ; NOP RESET RTE RTR RTS TRAPV
                            	   584:         
                            	   585: 
00:000095DC 610000E4        	   586: ISCC:    BSR     ICCCC          ; GET REST OF OP-CODE
00:000095E0 610001FE        	   587:          BSR     EEA            ; DATA ALTERABLE
00:000095E4 60F2            	   588:          BRA.S   SCOMMON
                            	   589: 
                            	   590:          
                            	   591: 
                            	   592: IDBCC:   ;.align  2              ; DB--
00:000095E6 3814            	   593:          MOVE.W  (A4),D4
00:000095E8 6100FDFE        	   594:          BSR     FORMREGD
                            	   595: 
00:000095EC 1CC5            	   596:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
00:000095EE 1CFC0024        	   597:          MOVE.B  #'$',(A6)+    ; HEX FIELD TO FOLLOW
                            	   598: 
00:000095F2 610000CE        	   599:          BSR     ICCCC
00:000095F6 602C            	   600:          BRA.S   ICC55
                            	   601: 
                            	   602: ;  BIT   5432109876543210
                            	   603: ;        0110............       FIXED
                            	   604: ;        ....CCCC........       CONDITION
                            	   605: ;        ........DDDDDDD0       DISPLACEMENT
                            	   606: ;        ...............1       ERROR (ODD BOUNDRY DISPLACEMENT)
                            	   607: ;
                            	   608:          
                            	   609: 
                            	   610: ICC:     ;.align  2              ; B--
00:000095F8 610000C8        	   611:          BSR     ICCCC
                            	   612: 
00:000095FC 1CFC0024        	   613: IBSR:    MOVE.B  #'$',(A6)+    ; BSR.S BRA
                            	   614: 
00:00009600 4A04            	   615:          TST.B   D4
00:00009602 6720            	   616:          BEQ.S   ICC55          ; 16 BIT DISPLACEMENT
                            	   617: 
00:00009604 1AFC002E        	   618:          MOVE.B  #'.',(A5)+
00:00009608 1AFC0053        	   619:          MOVE.B  #'S',(A5)+
00:0000960C 4884            	   620:          EXT.W   D4            ; 8 BIT DISPLACEMENT
                            	   621: 
00:0000960E 48C4            	   622: ICC35:   EXT.L   D4            ; SIGN-EXTENDED DISPLACEMENT
00:00009610 D8A9FFFC        	   623:          ADD.L   HISPC(A1),D4  ; + PROGRAM COUNTER
00:00009614 5484            	   624:          ADDQ.L  #2,D4         ; + TWO
00:00009616 2004            	   625:          MOVE.L  D4,D0
                            	   626: 
00:00009618 E284            	   627:          ASR.L   #1,D4
00:0000961A 650004D8        	   628:          BCS     FERROR         ; ODD BOUNDRY DISPLACEMENT
                            	   629: 
00:0000961E 6100FC1A        	   630:          BSR     PNT6HX
00:00009622 60B4            	   631:          BRA.S   SCOMMON
                            	   632: 
00:00009624 5483            	   633: ICC55:   ADDQ.L  #2,D3         ; SIZE
00:00009626 382C0002        	   634:          MOVE.W  2(A4),D4
00:0000962A 1AFC002E        	   635:          MOVE.B  #'.',(A5)+
00:0000962E 1AFC004C        	   636:          MOVE.B  #'L',(A5)+    ; .L FOR 16 BIT DISPLACEMENT
00:00009632 60DA            	   637:          BRA.S   ICC35
                            	   638: 
                            	   639:          
                            	   640: ;                               ; BCHG  BCLR  BSET  BTST
                            	   641: ISETD:   ;.align  2              ; DYNAMIC BIT
00:00009634 EF5C            	   642:          ROL.W   #7,D4
00:00009636 6100FDB0        	   643:          BSR     FORMREGD       ; DATA REGISTER
                            	   644: 
00:0000963A 1CC5            	   645: ISETD12: MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   646: 
00:0000963C 3814            	   647:          MOVE.W  (A4),D4
00:0000963E 610001A0        	   648:          BSR     EEA            ; DATA ALTERABLE
00:00009642 6094            	   649: CS18:    BRA.S   SCOMMON
                            	   650: 
                            	   651:          ;.align   4
                            	   652: 
                            	   653: ;                            BCHG  BCLR  BSET  BTST
                            	   654: ;  1ST WORD     .... .... ..XX XXXX    EA   DATA ALTERABLE ONLY
                            	   655: ;  2ND WORD     0000 0000 000Y YYYY    BIT NUMBER
                            	   656: ;
                            	   657: ISETS:   ;.align  2              ; STATIC BIT
00:00009644 5483            	   658:          ADDQ.L  #2,D3         ; SIZE
00:00009646 1CFC0023        	   659:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	   660: 
00:0000964A 7000            	   661:          CLR.L   D0
00:0000964C 302C0002        	   662:          MOVE.W  2(A4),D0     ; GET BIT POSITION FROM 2ND WORD
00:00009650 2200            	   663:          MOVE.L  D0,D1
00:00009652 EA89            	   664:          LSR.L   #5,D1
00:00009654 6600049E        	   665:          BNE     FERROR
00:00009658 6100FB78        	   666:          BSR     HEX2DEC        ; DECIMAL
                            	   667: 
00:0000965C 60DC            	   668:          BRA.S   ISETD12
                            	   669: 
                            	   670: ;   BIT  5432109876543210
                            	   671: ;        ....XXX.........       IMMEDIATE COUNT/REGISTER
                            	   672: ;        .......0........       RIGHT SHIFT
                            	   673: ;        .......1........       LEFT SHIFT
                            	   674: ;        ........00......       BYTE
                            	   675: ;        ........01......       WORD
                            	   676: ;        ........10......       LONG
                            	   677: ;        ....0...11......       WORD (MEMORY)
                            	   678: ;        ....0...11AAAAAA       EFFECTIVE ADDRESS
                            	   679: ;        ..........0.....       SHIFT IMMEDIATE COUNT
                            	   680: ;        ..........1.....       SHIFT COUNT (MODULO 64) IN DATA REGISTER
                            	   681: ;
                            	   682:          ;.align   4
                            	   683: 
                            	   684: ISHIFT:  ;.align   2             ; AS-  LS-  RO-  ROX-
00:0000965E 303C4C52        	   685:          MOVE.W  #$4c52,D0    ; "LR"
00:00009662 08040008        	   686:          BTST    #8,D4         ; DIRECTION BIT
00:00009666 6702            	   687:          BEQ.S   ISHIFT13       ; RIGHT
00:00009668 E048            	   688:          LSR.W   #8,D0         ; LEFT
00:0000966A 1AC0            	   689: ISHIFT13:MOVE.B  D0,(A5)+     ; DIRECTION; "L" OR "R"
                            	   690: 
00:0000966C 3014            	   691:          MOVE.W  (A4),D0
00:0000966E 024000C0        	   692:          ANDI.W  #$00C0,D0
00:00009672 0C4000C0        	   693:          CMPI.W  #$00C0,D0
00:00009676 6730            	   694:          BEQ.S   ISHIFTM1       ; MEMORY SHIFT
                            	   695: 
00:00009678 610000DC        	   696:          BSR     FORMSIZE
                            	   697: 
00:0000967C EF5C            	   698:          ROL.W   #7,D4
00:0000967E 0804000C        	   699:          BTST    #12,D4        ; I/R BIT
00:00009682 6616            	   700:          BNE.S   ISHIFT33       ; COUNT IN REGISTER
                            	   701: 
00:00009684 02040007        	   702:          ANDI.B  #$07,D4      ; IMMEDIATE COUNT
00:00009688 6604            	   703:          BNE.S   ISHIFT23
00:0000968A 00040008        	   704:          ORI.B   #$08,D4      ; CHANGE ZERO TO EIGHT
00:0000968E 00040030        	   705: ISHIFT23:ORI.B   #'0',D4
00:00009692 1CFC0023        	   706:          MOVE.B  #'#',(A6)+
00:00009696 1CC4            	   707:          MOVE.B  D4,(A6)+
00:00009698 6004            	   708:          BRA.S   ISHIFT44
                            	   709: 
00:0000969A 6100FD4C        	   710: ISHIFT33:BSR     FORMREGD
                            	   711: 
00:0000969E 1CC5            	   712: ISHIFT44:MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   713: 
00:000096A0 3814            	   714:          MOVE.W  (A4),D4
00:000096A2 6100FD44        	   715:          BSR     FORMREGD
00:000096A6 609A            	   716: CS17:    BRA.S   CS18           ; COMMON
                            	   717: 
00:000096A8 1AFC002E        	   718: ISHIFTM1:MOVE.B  #'.',(A5)+    ; PERIOD
00:000096AC 1AFC0057        	   719:          MOVE.B  #'W',(A5)+    ; .WORD
                            	   720: 
00:000096B0 0804000B        	   721:          BTST    #11,D4
00:000096B4 6600043E        	   722:          BNE     FERROR         ; BIT 11 MUST BE ZERO
                            	   723: 
00:000096B8 3E3C01FC        	   724:          MOVE.W  #$1FC,D7     ; MEMORY ALTERABLE ADDRESSING
00:000096BC 61000122        	   725:          BSR     EEA
00:000096C0 60E4            	   726:          BRA.S   CS17           ; COMMON
                            	   727: 
00:000096C2 700F            	   728: ICCCC:   MOVEQ   #$0F,D0      ; APPEND CONDITION CODE
00:000096C4 C014            	   729:          AND.B   (A4),D0      ; D0 = CCC
00:000096C6 E388            	   730:          LSL.L   #1,D0         ; D0 = CCC;2
                            	   731: 
00:000096C8 323B0010        	   732:          MOVE.W  BRTBL(PC,D0.W),D1 ; GET BRANCH MNEMONIC
00:000096CC 1AC1            	   733:          MOVE.B  D1,(A5)+     ; (REVERSED) FROM THE TABLE
00:000096CE E049            	   734:          LSR.W   #8,D1         ; AND ADD THE NONBLANK PORTION
00:000096D0 0C010020        	   735:          CMPI.B  #BLANK,D1     ; TO THE BUFFER.
00:000096D4 6702            	   736:          BEQ.S   ICCCC9
00:000096D6 1AC1            	   737:          MOVE.B  D1,(A5)+
00:000096D8 4E75            	   738: ICCCC9:  RTS
                            	   739: 
00:000096DA 2054            	   740: BRTBL:   dc.b  " T"           ; "T " BRA ACCEPTED
00:000096DC 2046            	   741:          dc.b  " F"           ; "F "
00:000096DE 4948            	   742:          dc.b  "IH"           ; "HI"
00:000096E0 534C            	   743:          dc.b  "SL"           ; "LS"
00:000096E2 4343            	   744:          dc.b  "CC"           ; "CC"
00:000096E4 5343            	   745:          dc.b  "SC"           ; "CS"
00:000096E6 454E            	   746:          dc.b  "EN"           ; "NE"
00:000096E8 5145            	   747:          dc.b  "QE"           ; "EQ"
00:000096EA 4356            	   748:          dc.b  "CV"           ; "VC"
00:000096EC 5356            	   749:          dc.b  "SV"           ; "VS"
00:000096EE 4C50            	   750:          dc.b  "LP"           ; "PL"
00:000096F0 494D            	   751:          dc.b  "IM"           ; "MI"
00:000096F2 4547            	   752:          dc.b  "EG"           ; "GE"
00:000096F4 544C            	   753:          dc.b  "TL"           ; "LT"
00:000096F6 5447            	   754:          dc.b  "TG"           ; "GT"
00:000096F8 454C            	   755:          dc.b  "EL"           ; "LE"
                            	   756: 
                            	   757: ;   BIT  5432109876543210
                            	   758: ;        ....RRRMMM......    DESTINATION REGISTER MODE
                            	   759: ;        ..........MMMRRR    SOURCE MODE REGISTER
                            	   760: ;
                            	   761: ; IF BYTE SIZE; ADDRESS DIRECT NOT ALLOWED AS SOURCE
                            	   762: ;
                            	   763: 					even
                            	   764: IMOVEA1: ;.align  2
00:000096FA 3E3C0FFF        	   765:          MOVE.W  #$FFF,D7     ; ALL MODES
00:000096FE 610000E0        	   766:          BSR     EEA
                            	   767: 
00:00009702 1CC5            	   768:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   769: 
00:00009704 3814            	   770:          MOVE.W  (A4),D4      ; ....RRRMMM......
00:00009706 E24C            	   771:          LSR.W   #1,D4         ; .....RRRMMM.....
00:00009708 EA0C            	   772:          LSR.B   #5,D4         ; .....RRR.....MMM
00:0000970A E05C            	   773:          ROR.W   #8,D4         ; .....MMM.....RRR
00:0000970C EB0C            	   774:          LSL.B   #5,D4         ; .....MMMRRR.....
00:0000970E EA4C            	   775:          LSR.W   #5,D4         ; ..........MMMRRR
                            	   776: 
                            	   777: ; IF .BYTE DESTINATION A@ NOT ALLOWED
00:00009710 3E3C01FF        	   778:          MOVE.W  #$1FF,D7     ; DATA ALTERABLE + A@
00:00009714 1014            	   779:          MOVE.B  (A4),D0
00:00009716 0C000001        	   780:          CMPI.B  #$01,D0
00:0000971A 6604            	   781:          BNE.S   IMOVE19        ; NOT BYTE SIZE
                            	   782: 
00:0000971C 3E3C01FD        	   783:          MOVE.W  #$1FD,D7     ; DATA ALTERABLE
                            	   784: IMOVE19:
                            	   785: 
00:00009720 610000BE        	   786:          BSR     EEA
00:00009724 602C            	   787:          BRA.S   CS19           ; COMMON
                            	   788: 
                            	   789: ;  IF BYTE; ADDRESS REGISTER DIRECT NOT ALLOWED
                            	   790: IQUICKA: ;.align  2              ; ADDQ  SUBQ
00:00009726 612E            	   791:          BSR.S   FORMSIZE
                            	   792: 
00:00009728 1CFC0023        	   793:          MOVE.B  #'#',(A6)+
00:0000972C EF5C            	   794:          ROL.W   #7,D4
00:0000972E 02040007        	   795:          ANDI.B  #7,D4
00:00009732 6604            	   796:          BNE.S   IQUICK21
00:00009734 00040008        	   797:          ORI.B   #8,D4         ; MAKE ZERO INTO EIGHT
00:00009738 00040030        	   798: IQUICK21:ORI.B   #'0',D4       ; MAKE ASCII
00:0000973C 1CC4            	   799:          MOVE.B  D4,(A6)+
                            	   800: 
00:0000973E 1CC5            	   801:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   802: 
00:00009740 3814            	   803:          MOVE.W  (A4),D4
                            	   804: 
00:00009742 3014            	   805:          MOVE.W  (A4),D0
00:00009744 024000C0        	   806:          ANDI.W  #$00C0,D0
00:00009748 6704            	   807:          BEQ.S   IQUICK31       ; DATA ALTERABLE
00:0000974A 3E3C01FF        	   808:          MOVE.W  #$1FF,D7     ; ALTERABLE ADDRESSING
00:0000974E 61000090        	   809: IQUICK31:BSR     EEA
00:00009752 60000378        	   810: CS19:    BRA     COMMON
                            	   811: 
                            	   812: ;  BIT   5432109876543210
                            	   813: ;        ........00......       BYTE
                            	   814: ;        ........01......       WORD
                            	   815: ;        ........10......       LONG
                            	   816: ;        ........11......       ERROR
                            	   817: ;
                            	   818: FORMSIZE: ;.align  2
00:00009756 3414            	   819:          MOVE.W  (A4),D2
00:00009758 1AFC002E        	   820:          MOVE.B  #'.',(A5)+    ; STORE PERIOD
00:0000975C EC4A            	   821:          LSR.W   #6,D2
00:0000975E 02420003        	   822:          ANDI.W  #$03,D2
00:00009762 6606            	   823:          BNE.S   FORM91
00:00009764 1AFC0042        	   824:          MOVE.B  #'B',(A5)+    ; STORE "B"
00:00009768 6016            	   825:          BRA.S   FORM95
                            	   826: 
00:0000976A 103C0057        	   827: FORM91:  MOVE.B  #'W',D0
00:0000976E 0C020001        	   828:          CMPI.B  #1,D2
00:00009772 670A            	   829:          BEQ.S   FORM93
00:00009774 103C004C        	   830:          MOVE.B  #'L',D0
00:00009778 0C020002        	   831:          CMPI.B  #2,D2
00:0000977C 665E            	   832:          BNE.S   FE10           ; FERROR
00:0000977E 1AC0            	   833: FORM93:  MOVE.B  D0,(A5)+     ; STORE "W" OR "L"
00:00009780 4E75            	   834: FORM95:  RTS
                            	   835: 
00:00009782 6100FC64        	   836: EA000:   BSR     FORMREGD
00:00009786 08070000        	   837:          BTST    #0,D7
00:0000978A 6750            	   838:          BEQ.S   FE10           ; FERROR
00:0000978C 4E75            	   839:          RTS
                            	   840: 
00:0000978E 6100FC48        	   841: EA001:   BSR     FORMREGA
00:00009792 08070001        	   842:          BTST    #1,D7
00:00009796 6744            	   843:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:00009798 4E75            	   844:          RTS
                            	   845: 
00:0000979A 1CFC0028        	   846: EA010:   MOVE.B  #'(',(A6)+
00:0000979E 6100FC38        	   847:          BSR     FORMREGA
00:000097A2 1CFC0029        	   848:          MOVE.B  #')',(A6)+
00:000097A6 08070002        	   849:          BTST    #2,D7
00:000097AA 6730            	   850:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:000097AC 4E75            	   851:          RTS
                            	   852: 
00:000097AE 1CFC0028        	   853: EA011:   MOVE.B  #'(',(A6)+
00:000097B2 6100FC24        	   854:          BSR     FORMREGA
00:000097B6 1CFC0029        	   855:          MOVE.B  #')',(A6)+
00:000097BA 1CFC002B        	   856:          MOVE.B  #'+',(A6)+
00:000097BE 08070003        	   857:          BTST    #3,D7
00:000097C2 6718            	   858:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:000097C4 4E75            	   859: EA011RTS:RTS
                            	   860: 
00:000097C6 1CFC002D        	   861: EA100:   MOVE.B  #'-',(A6)+
00:000097CA 1CFC0028        	   862:          MOVE.B  #'(',(A6)+
00:000097CE 6100FC08        	   863:          BSR     FORMREGA
00:000097D2 1CFC0029        	   864:          MOVE.B  #')',(A6)+
00:000097D6 08070004        	   865:          BTST    #4,D7
00:000097DA 66E8            	   866:          BNE.S   EA011RTS
00:000097DC 60000316        	   867: FE10:    BRA     FERROR         ; THIS MODE NOT ALLOWED
                            	   868: 
                            	   869: ;  ENTER       A4 = POINTER TO FIRST WORD
                            	   870: ;              D3 = OFFSET TO EXTENSION
                            	   871: ;              D4 = VALUE TO PROCESS
                            	   872: ;              D7 = MODES ALLOWED MASK
                            	   873: ;
                            	   874: EEA:     ;.align  2
00:000097E0 2004            	   875: 	move.l D4,D0
00:000097E2 E648            	   876: 	lsr.w #3,D0
00:000097E4 02400007        	   877: 	andi.w #$7,D0
00:000097E8 6798            	   878: 	beq.s EA000
00:000097EA 0C000001        	   879: 	cmpi.b #1,D0
00:000097EE 679E            	   880: 	beq.s EA001
00:000097F0 0C000002        	   881: 	cmpi.b #2,D0
00:000097F4 67A4            	   882: 	beq.s EA010
00:000097F6 0C000003        	   883: 	cmpi.b #3,D0
00:000097FA 67B2            	   884: 	beq.s EA011
00:000097FC 0C000004        	   885: 	cmpi.b #4,D0
00:00009800 67C4            	   886: 	beq.s EA100
00:00009802 0C000005        	   887: 	cmpi.b #5,D0
00:00009806 6760            	   888: 	beq.s EA101
00:00009808 0C000007        	   889: 	cmpi.b #7,D0
00:0000980C 6770            	   890: 	beq.s EA111
                            	   891: 
                            	   892: ;    EXTENSION WORD
                            	   893: ;   BIT  5432109876543210
                            	   894: ;        0...............    DATA REGISTER
                            	   895: ;        1...............    ADDRESS REGISTER
                            	   896: ;        .RRR............    REGISTER
                            	   897: ;        ....0...........    SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REG
                            	   898: ;        ....1...........    LONG VALUE IN INDEX REGISTER
                            	   899: ;        .....000........
                            	   900: ;        ........DDDDDDDD    DISPLACEMENT INTEGER
                            	   901: ;
                            	   902: ; EA110            ADDRESS REGISTER INDIRECT WITH INDEX
                            	   903: 
00:0000980E 08070006        	   904:          BTST    #6,D7
00:00009812 67C8            	   905:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
                            	   906: 
00:00009814 32343000        	   907:          MOVE.W  (A4,D3.W),D1
00:00009818 02410700        	   908:          ANDI.W  #$0700,D1
00:0000981C 66BE            	   909:          BNE.S   FE10           ; FERROR  BITS 10-8 MUST BE ZERO
                            	   910: 
00:0000981E 30343000        	   911:          MOVE.W  (A4,D3.W),D0  ; D0 = DISPLACEMENT
00:00009822 4880            	   912:          EXT.W   D0
00:00009824 48C0            	   913:          EXT.L   D0
00:00009826 6100F9AA        	   914:          BSR     HEX2DEC        ; DECIMAL
00:0000982A 1CFC0028        	   915:          MOVE.B  #'(',(A6)+    ; (
                            	   916: 
00:0000982E 6100FBA8        	   917:          BSR     FORMREGA       ; XX(A@
                            	   918: 
00:00009832 1CFC002C        	   919:          MOVE.B  #',',(A6)+    ; XX(A@,
                            	   920: 
00:00009836 18343000        	   921:          MOVE.B  (A4,D3.W),D4
00:0000983A E804            	   922:          ASR.B   #4,D4
00:0000983C 6A06            	   923:          BPL.S   EA1105
00:0000983E 6100FB98        	   924:          BSR     FORMREGA
00:00009842 6004            	   925:          BRA.S   EA1107
                            	   926: 
00:00009844 6100FBA2        	   927: EA1105:  BSR     FORMREGD
00:00009848 1CFC002E        	   928: EA1107:  MOVE.B  #'.',(A6)+    ; XX(A@,X@.
                            	   929: 
00:0000984C 38343000        	   930:          MOVE.W  (A4,D3.W),D4 ; D4 = R@
00:00009850 103C0057        	   931:          MOVE.B  #'W',D0       ; ..........W
00:00009854 0804000B        	   932:          BTST    #11,D4
00:00009858 6704            	   933:          BEQ.S   EA1109
00:0000985A 103C004C        	   934:          MOVE.B  #'L',D0       ; ..........L
00:0000985E 1CC0            	   935: EA1109:  MOVE.B  D0,(A6)+
00:00009860 1CFC0029        	   936:          MOVE.B  #')',(A6)+    ; ...........)
00:00009864 5483            	   937:          ADDQ.L  #2,D3
00:00009866 4E75            	   938:          RTS
                            	   939: 
                            	   940: ; ADDRESS REGISTER INDIRECT WITH DISPLACEMENT
                            	   941: ;
                            	   942: EA101:
00:00009868 08070005        	   943: 	btst #5,D7         	; 101000;   DIS(A@)
00:0000986C 6756            	   944: 	beq.s FE11          ; FERROR;  THIS MODE NOT ALLOWED
00:0000986E 30343000        	   945: 	move.w (A4,D3.W),D0
00:00009872 48C0            	   946: 	ext.l D0
00:00009874 6100F95C        	   947: 	bsr HEX2DEC        	; DECIMAL
00:00009878 5483            	   948: 	addq.l #2,D3        ; SIZE
00:0000987A 6000FF1E        	   949: 	bra EA010
                            	   950: 
                            	   951: ;  111000        ABSOLUTE SHORT
                            	   952: ;  111001        ABSOLUTE LONG
                            	   953: ;  111010        PROGRAM COUNTER WITH DISPLACEMENT
                            	   954: ;  111011        PROGRAM COUNTER WITH INDEX
                            	   955: ;  111100        IMMEDIATE OR STATUS REG
                            	   956: ;
                            	   957: EA111:
00:0000987E 02440007        	   958: 	andi.w #7,D4
00:00009882 6618            	   959: 	bne.s EA1112
00:00009884 08070007        	   960: 	btst #7,D7
00:00009888 673A            	   961: 	beq.s FE11           	; FERROR;  THIS MODE NOT ALLOWED
00:0000988A 30343000        	   962: 	move.w (A4,D3.W),D0 	; 111000;   ABSOLUTE SHORT
00:0000988E 48C0            	   963: 	ext.l D0
00:00009890 1CFC0024        	   964: 	move.b #'$',(A6)+
00:00009894 6100F9B0        	   965: 	bsr PNT8HX         		; SIGN EXTENDED VALUE
00:00009898 5483            	   966: 	addq.l #2,D3         	; SIZE + 2
00:0000989A 4E75            	   967: 	rts
                            	   968: 
                            	   969: EA1112:
00:0000989C 0C040001        	   970: 	cmpi.b #1,D4
00:000098A0 6616            	   971: 	bne.s EA1113
00:000098A2 08070008        	   972: 	btst #8,D7
00:000098A6 671C            	   973: 	beq.s FE11          	; FERROR;  THIS MODE NOT ALLOWED
00:000098A8 1CFC0024        	   974: 	move.b #'$',(A6)+    	; HEX
00:000098AC 20343000        	   975: 	move.l (A4,D3.W),D0  	; 111001;     ABSOLUTE LONG
00:000098B0 6100F994        	   976: 	bsr PNT8HX
                            	   977: 	;-       MOVE.B  #'.',(A6)+    ; FORCE LONG FORMAT
                            	   978: 	;-       MOVE.B  #'L',(A6)+    ; IE   .L
00:000098B4 5883            	   979: 	addq.l #4,D3
00:000098B6 4E75            	   980: 	rts
                            	   981: 
                            	   982: EA1113:
00:000098B8 0C040002        	   983: 	cmpi.b #2,D4
00:000098BC 662C            	   984: 	bne.s EA1114
00:000098BE 08070009        	   985: 	btst #9,D7
00:000098C2 6604            	   986: 	bne.s EA1113A
                            	   987: FE11:
00:000098C4 6000022E        	   988: 	bra FERROR         	; THIS MODE NOT ALLOWED
                            	   989: 
                            	   990: EA1113A:
00:000098C8 30343000        	   991: 	move.w (A4,D3.W),D0  ; 111010;  PC + DISPLACEMENT  DESTINATION(PC)
00:000098CC 48C0            	   992: 	ext.l D0
00:000098CE D0A9FFFC        	   993: 	add.l HISPC(A1),D0
00:000098D2 5480            	   994: 	addq.l #2,D0
00:000098D4 1CFC0024        	   995: 	move.b #'$',(A6)+    ; HEX "$"
00:000098D8 6100F96C        	   996: 	bsr PNT8HX         ; DESTINATION
00:000098DC 203C29435028    	   997: 	move.l #$29435028,D0  ; (PC)
00:000098E2 6100FC4C        	   998: 	bsr SCHR           ; STORE WORD
00:000098E6 5483            	   999: 	addq.l #2,D3         ; SIZE
00:000098E8 4E75            	  1000: 	rts
                            	  1001: 
                            	  1002: EA1114:
00:000098EA 0C040003        	  1003: 	cmpi.b #3,D4
00:000098EE 6664            	  1004: 	bne.s EA1115
                            	  1005: 
                            	  1006: ; PROGRAM COUNTER WITH INDEX    DESTINATION(PC,R@.X)
                            	  1007: ;
                            	  1008: ;        5432109876543210       SECOND WORD
                            	  1009: ;        0...............       DATA REGISTER
                            	  1010: ;        1...............       ADDRESS REGISTER
                            	  1011: ;        .XXX............       REGISTER
                            	  1012: ;        ....0...........       SIGN-EXTENDED, LOW ORDER WORD INTEGER
                            	  1013: ;                               ..IN INDEX REGISTER
                            	  1014: ;        ....1...........       LONG VALUE IN INDEX REGISTER
                            	  1015: ;        .....000........
                            	  1016: ;        ........XXXXXXXX       DISPLACEMENT INTEGER
                            	  1017: ;
00:000098F0 0807000A        	  1018:          BTST    #10,D7
00:000098F4 67CE            	  1019:          BEQ.S   FE11           ; FERROR  THIS MODE NOT ASLLOWED
                            	  1020: 
00:000098F6 32343000        	  1021:          MOVE.W  (A4,D3.W),D1
00:000098FA 02410700        	  1022:          ANDI.W  #$0700,D1
00:000098FE 66C4            	  1023:          BNE.S   FE11           ; FERROR;  BITS 10-8 MUST BE ZERO
                            	  1024: 
00:00009900 10343001        	  1025:          MOVE.B  1(A4,D3.W),D0 ; 111100;   DESTINATION(PC,R@.X)
00:00009904 4880            	  1026:          EXT.W   D0
00:00009906 48C0            	  1027:          EXT.L   D0
00:00009908 D0A9FFFC        	  1028:          ADD.L   HISPC(A1),D0
00:0000990C 5480            	  1029:          ADDQ.L  #2,D0
00:0000990E 1CFC0024        	  1030:          MOVE.B  #'$',(A6)+    ; HEX "$"
00:00009912 6100F932        	  1031:          BSR     PNT8HX         ; DESTINATION
                            	  1032: 
00:00009916 203C2C435028    	  1033:          MOVE.L  #$2c435028,D0
00:0000991C 6100FC12        	  1034:          BSR     SCHR           ; DES(PC,
                            	  1035: 
00:00009920 38343000        	  1036:          MOVE.W  (A4,D3.W),D4
00:00009924 E95C            	  1037:          ROL.W   #4,D4
00:00009926 08040003        	  1038:          BTST    #3,D4
00:0000992A 6706            	  1039:          BEQ.S   EAF25
00:0000992C 6100FAAA        	  1040:          BSR     FORMREGA
00:00009930 6004            	  1041:          BRA.S   EAF27
00:00009932 6100FAB4        	  1042: EAF25:   BSR     FORMREGD       ; DES(PC,R@
                            	  1043: EAF27:
                            	  1044: 
00:00009936 1CFC002E        	  1045:          MOVE.B  #'.',(A6)+    ; DES(PC,R@.
                            	  1046: 
00:0000993A 38343000        	  1047:          MOVE.W  (A4,D3.W),D4
00:0000993E 303C4C57        	  1048:          MOVE.W  #$4c57,D0    ; "LW"
00:00009942 0804000B        	  1049:          BTST    #11,D4
00:00009946 6702            	  1050:          BEQ.S   EAF35
00:00009948 E048            	  1051:          LSR.W   #8,D0
00:0000994A 1CC0            	  1052: EAF35:   MOVE.B  D0,(A6)+     ; DES(PC,R@.X
                            	  1053: 
00:0000994C 1CFC0029        	  1054:          MOVE.B  #')',(A6)+    ; DES(PC,R@.X)
00:00009950 5483            	  1055:          ADDQ.L  #2,D3
00:00009952 4E75            	  1056:          RTS
                            	  1057: 
                            	  1058: ;   BIT  5432109876543210
                            	  1059: ;        ..........111100       ; FIRST WORD;  #<IMMEDIATE>
                            	  1060: ;
00:00009954 0C040004        	  1061: EA1115:  CMPI.B  #4,D4
00:00009958 6600FF6A        	  1062:          BNE     FE11           ; FERROR
                            	  1063: 
00:0000995C 0807000B        	  1064:          BTST    #11,D7
00:00009960 6700FF62        	  1065:          BEQ     FE11           ; FERROR;  THIS MODE NOT ALLOWED
                            	  1066: 
00:00009964 1CFC0023        	  1067:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	  1068: 
00:00009968 122DFFFF        	  1069:          MOVE.B  -1(A5),D1
00:0000996C 0C01004C        	  1070:          CMPI.B  #'L',D1
00:00009970 6724            	  1071:          BEQ.S   EA11155        ; LONG
                            	  1072: 
00:00009972 30343000        	  1073:          MOVE.W  (A4,D3.W),D0
                            	  1074: 
00:00009976 0C010042        	  1075:          CMPI.B  #'B',D1
00:0000997A 6610            	  1076:          BNE.S   EA11153        ; .WORD
                            	  1077: 
                            	  1078: ; BYTE SIZE; DATA ALLOWED
                            	  1079: ;  0000 0000 XXXX XXXX
                            	  1080: ;  1111 1111 1XXX XXXX
00:0000997C 2200            	  1081:          MOVE.L  D0,D1
00:0000997E E049            	  1082:          LSR.W   #8,D1
00:00009980 670A            	  1083:          BEQ.S   EA11153
00:00009982 2200            	  1084:          MOVE.L  D0,D1
00:00009984 EE41            	  1085:          ASR.W   #7,D1
00:00009986 5241            	  1086:          ADDQ.W  #1,D1
00:00009988 6600FF3A        	  1087:          BNE     FE11           ; FERROR
                            	  1088: 
00:0000998C 48C0            	  1089: EA11153: EXT.L   D0
00:0000998E 6100F842        	  1090:          BSR     HEX2DEC
00:00009992 5483            	  1091:          ADDQ.L  #2,D3
00:00009994 4E75            	  1092:          RTS
                            	  1093: 
00:00009996 20343000        	  1094: EA11155: MOVE.L  (A4,D3.W),D0
00:0000999A 6100F836        	  1095:          BSR     HEX2DEC
00:0000999E 5883            	  1096:          ADDQ.L  #4,D3         ; SIZE
00:000099A0 4E75            	  1097:          RTS
                            	  1098: 
00:000099A2 1AFC002E        	  1099: MOVEMS:  MOVE.B  #'.',(A5)+    ; PERIOD
00:000099A6 303C4C57        	  1100:          MOVE.W  #$4c57,D0    ; "LW"
00:000099AA 08040006        	  1101:          BTST    #6,D4
00:000099AE 6702            	  1102:          BEQ.S   MOVEMS2
00:000099B0 E048            	  1103:          LSR.W   #8,D0
00:000099B2 1AC0            	  1104: MOVEMS2: MOVE.B  D0,(A5)+     ; SIZE
00:000099B4 4E75            	  1105:          RTS
                            	  1106: 
                            	  1107: ; MOVEM - REGISTER EXPANSION
                            	  1108: ;
                            	  1109: MOVEMR:  ;.align  2
00:000099B6 342C0002        	  1110:          MOVE.W  2(A4),D2     ; D2 = SECOND WORD
00:000099BA 7020            	  1111:          MOVEQ   #$20,D0      ; D0 = SPACE
00:000099BC 7E2F            	  1112:          MOVEQ   #$2F,D7      ; D7 = /
00:000099BE 538E            	  1113:          SUBQ.L  #1,A6         ; ADJUST STORE POINTER
00:000099C0 7A30            	  1114:          MOVEQ   #$30,D5      ; D5 = REGISTER #
00:000099C2 383C4144        	  1115:          MOVE.W  #$4144,D4    ; "AD" D4 = REG CLASS
                            	  1116: 
00:000099C6 0302            	  1117: MOVEMR11:BTST    D1,D2
00:000099C8 6730            	  1118:          BEQ.S   MOVEMR77       ; BIT RESET
                            	  1119: 
00:000099CA B016            	  1120:          CMP.B   (A6),D0      ; BIT SET
00:000099CC 6612            	  1121:          BNE.S   MOVEMR44       ; NOT SPACE
                            	  1122: 
00:000099CE 1D440001        	  1123: MOVEMR33:MOVE.B  D4,1(A6)     ; REG TYPE
00:000099D2 1D450002        	  1124:          MOVE.B  D5,2(A6)     ; REG #
00:000099D6 1D7C002D0003    	  1125:          MOVE.B  #'-',3(A6)    ; -
00:000099DC 568E            	  1126:          ADDQ.L  #3,A6
00:000099DE 602E            	  1127:          BRA.S   MOVEMR88
                            	  1128: 
                            	  1129: MOVEMR44:
00:000099E0 0C16002C        	  1130: 	cmpi.b #',',(A6)
00:000099E4 67E8            	  1131: 	beq.s MOVEMR33      ; COMMA SEPARATOR
00:000099E6 BE16            	  1132: 	cmp.b (A6),D7      	; / SEPARATOR
00:000099E8 67E4            	  1133: 	beq.s MOVEMR33
00:000099EA 1D440001        	  1134: 	move.b D4,1(A6)     ; REG TYPE
00:000099EE 1D450002        	  1135: 	move.b D5,2(A6)     ; REG #
00:000099F2 1D7C002D0003    	  1136: 	move.b #'-',3(A6)   ; - SEPARATOR
00:000099F8 6014            	  1137: 	bra.s MOVEMR88
                            	  1138: 
                            	  1139: MOVEMR77:
00:000099FA 0C16002C        	  1140: 	cmpi.b #',',(A6)
00:000099FE 670E            	  1141: 	beq.s MOVEMR88       ; COMMA
00:00009A00 B016            	  1142: 	cmp.b (A6),D0
00:00009A02 670A            	  1143: 	beq.s MOVEMR88       ; SPACE
00:00009A04 B02E0001        	  1144: 	cmp.b 1(A6),D0
00:00009A08 6702            	  1145: 	beq.s MOVEMR79       ; SPACE
00:00009A0A 568E            	  1146: 	addq.l #3,A6
                            	  1147: MOVEMR79:
00:00009A0C 1C87            	  1148: 	move.b D7,(A6)      ; / SEPARATOR
                            	  1149: 
                            	  1150: MOVEMR88:
00:00009A0E 5285            	  1151: 	addq.l #1,D5
00:00009A10 D286            	  1152: 	add.l D6,D1        ; D1 = BIT POSITION
00:00009A12 0C050038        	  1153: 	cmpi.b #'8',D5
00:00009A16 66AE            	  1154: 	bne.s MOVEMR11
00:00009A18 B016            	  1155: 	cmp.b (A6),D0      ; SPACE
00:00009A1A 670A            	  1156: 	beq.s MOVEMR94
00:00009A1C B02E0001        	  1157: 	cmp.b 1(A6),D0     ; SPACE
00:00009A20 6704            	  1158: 	beq.s MOVEMR94
00:00009A22 568E            	  1159: 	addq.l #3,A6
00:00009A24 1C87            	  1160: 	move.b D7,(A6)      ; /   SEPARATOR
                            	  1161: 
                            	  1162: MOVEMR94:
00:00009A26 1A3C0030        	  1163: 	move.b #'0',D5       	; RESET REG TO ZERO
00:00009A2A E04C            	  1164: 	lsr.w #8,D4         	; CHANGE REG TYPE
00:00009A2C 6698            	  1165: 	bne.s MOVEMR11       	; MORE
00:00009A2E 1C80            	  1166: 	move.b D0,(A6)      	; SPACE
00:00009A30 4E75            	  1167: 	rts
                            	  1168: 
                            	  1169: DCODE68K:
00:00009A32 4E51FFF0        	  1170: 	link A1,#-LOCVARSZ 	; CREATE A FRAME FOR THE
00:00009A36 48E91007FFF0    	  1171: 	movem.l D0-D2/A4,DDATA(A1)  ; CODE AND ITS PC.  A4
00:00009A3C 49E9FFF0        	  1172: 	lea DDATA(A1),A4 		; POINTS TO THE CODE.
00:00009A40 264D            	  1173: 	move.l A5,A3        ; A3 = START OF OUTPUT BUFFER
00:00009A42 2C4D            	  1174: 	move.l A5,A6
00:00009A44 703F            	  1175: 	moveq #BUFSIZE,D0
                            	  1176: DEC311:
00:00009A46 1CFC0020        	  1177:   move.b #BLANK,(a6)+  ; SPACE FILL BUFFER
00:00009A4A 5380            	  1178: 	subq.l #1,D0
00:00009A4C 66F8            	  1179: 	bne.s DEC311
00:00009A4E 421E            	  1180: 	clr.b (a6)+					; NULL temrinate
00:00009A50 2C4B            	  1181: 	move.l A3,A6        ; FORMAT ADDRESS
00:00009A52 2029FFFC        	  1182: 	move.l HISPC(A1),D0
00:00009A56 6100F7F2        	  1183: 	bsr FRELADDR
                            	  1184: 
                            	  1185: ; CHECK FOR KNOWN ILLEGAL CODES
00:00009A5A 3014            	  1186: 	move.w (a4),d0
00:00009A5C 4BFA00C0        	  1187: 	lea KI(PC),a5
00:00009A60 2C4D            	  1188: 	move.l a5,a6
00:00009A62 548E            	  1189: 	add.l #KIEND-KI,a6
                            	  1190: DEC404:
00:00009A64 B05D            	  1191:   cmp.w (a5)+,d0
00:00009A66 671A            	  1192: 	beq.s FE12           ; FERROR;  ILLEGAL CODE
00:00009A68 BBCE            	  1193: 	cmp.l a6,a5
00:00009A6A 66F8            	  1194: 	bne.s DEC404
                            	  1195: 
                            	  1196: ; LOOK FOR MATCH OF OP-CODE
                            	  1197: ;
00:00009A6C 4BFA00B2        	  1198: 	lea TBL(PC),A5   		; A5 = POINTER TO DECODE TABLE
00:00009A70 4DFA0366        	  1199: 	lea TBLE(PC),A6  		; A6 = POINTER TO END OF TABLE
                            	  1200: DEC411:
00:00009A74 3014            	  1201: 	move.w (A4),D0      ;  FIRST WORD
00:00009A76 C05D            	  1202: 	and.w (A5)+,D0     	;  MASK
00:00009A78 B05D            	  1203: 	cmp.w (A5)+,D0
00:00009A7A 6708            	  1204: 	beq.s DEC425        ; FOUND MATCH
00:00009A7C 588D            	  1205: 	addq.l #4,A5        ; UPDATE POINTER
00:00009A7E BBCE            	  1206: 	cmp.l A6,A5
00:00009A80 65F2            	  1207: 	blo.s DEC411        ; MORE TABLE
                            	  1208: FE12:
00:00009A82 6070            	  1209: 	bra.s FERROR        ; ILLEGAL INSTRUCTION
                            	  1210: DEC425:
00:00009A84 7C00            	  1211:   clr.l D6
00:00009A86 3C1D            	  1212: 	move.w (A5)+,D6     ; D6 = (GOTO OFFSET)/4
                            	  1213: ;         LSL.L   #2,D6
00:00009A88 7E00            	  1214: 	clr.l D7
00:00009A8A 3E1D            	  1215: 	move.w (A5)+,D7     ; D7 = INDEX TO OP-CODE
                            	  1216: 
                            	  1217: ; MOVE OP-CODE TO BUFFER
                            	  1218: ;
00:00009A8C 41FA034A        	  1219: 	lea OPCTBL(PC),A0
                            	  1220: DEC510:
00:00009A90 4A47            	  1221:   tst D7
00:00009A92 6708            	  1222: 	beq.s DEC530         	; AT INDEX
                            	  1223: DEC515:
00:00009A94 4A18            	  1224:   tst.b (A0)+
00:00009A96 6AFC            	  1225: 	bpl.s DEC515         	; MOVE THROUGH FIELD
00:00009A98 5387            	  1226: 	subq.l #1,D7
00:00009A9A 60F4            	  1227: 	bra.s DEC510
                            	  1228: DEC530:
00:00009A9C 701F            	  1229: 	moveq #FOC,D0
00:00009A9E 4BF30000        	  1230: 	lea.l (A3,D0.W),A5 		; A5 = STORE POINTER  OP-CODE
                            	  1231: DEC535:
00:00009AA2 1018            	  1232:   move.b (A0)+,D0
00:00009AA4 08800007        	  1233: 	bclr #7,D0
00:00009AA8 6604            	  1234: 	bne.s DEC537         	; END OF MOVE
00:00009AAA 1AC0            	  1235: 	move.b D0,(A5)+
00:00009AAC 60F4            	  1236: 	bra.s DEC535
                            	  1237: DEC537:
00:00009AAE 1AC0            	  1238:   move.b D0,(A5)+
                            	  1239: 
                            	  1240: ; CALCULATE GOTO AND GO
                            	  1241: ;
00:00009AB0 7602            	  1242: 	moveq #2,D3         ; D3= SIZE
00:00009AB2 41FAF7F4        	  1243: 	lea X(PC),A0
00:00009AB6 D1C6            	  1244: 	add.l D6,A0
00:00009AB8 7027            	  1245: 	moveq #FOP,D0
00:00009ABA 4DF30000        	  1246: 	lea.l (A3,D0.W),A6 	; A6 = POINTER FOR OPERAND
00:00009ABE 3814            	  1247: 	move.w (A4),D4      ; D4 = FIRST WORD
00:00009AC0 1A3C002C        	  1248: 	move.b #',',D5      ; D5 = CONTAINS ASCII COMMA
00:00009AC4 3E3C01FD        	  1249: 	move.w #$1FD,D7     ; D7 = DATA ALTERABLE MODES ALLOWED
00:00009AC8 4ED0            	  1250: 	jmp (A0)
                            	  1251: 
                            	  1252: ;	 A3 = pointer to beginning of buffer
                            	  1253: ;  A4 = POINTER TO DATA IN FRAME CREATED BY "LINK A1,..."
                            	  1254: ;  A5 = POINTER STORE OP-CODE
                            	  1255: ;  A6 = POINTER STORE OPERAND
                            	  1256: ;  D3 = SIZE = 2 BYTES
                            	  1257: ;  D4 = FIRST WORD
                            	  1258: ;  D7 = ADDRESS MODES ALLOWED ($1FD) DATA ALTERABLE
                            	  1259: 
                            	  1260: COMMON4:
00:00009ACA 5483            	  1261: 	addq.l #2,D3         	; SIZE = 4
                            	  1262: COMMON:
00:00009ACC 2C03            	  1263: 	move.l D3,D6        	; D6 = SIZE
00:00009ACE 1CFC0020        	  1264: 	move.b #BLANK,(A6)+ 	; SPACE AS LAST CHAR
00:00009AD2 2A4E            	  1265: 	move.l A6,A5        	; SAVE END OF BUFFER POINTER
00:00009AD4 700A            	  1266: 	moveq #FDATA,D0
00:00009AD6 4DF30000        	  1267: 	lea.l (A3,D0.W),A6
                            	  1268: COMMON35:
00:00009ADA 301C            	  1269: 	move.w (A4)+,D0     	; GET NEXT WORD OF DATA.
00:00009ADC 54A9FFFC        	  1270: 	addq.l #2,HISPC(A1)  	; ADJUST PROG COUNTER.
00:00009AE0 6100F754        	  1271: 	bsr PNT4HX         		; FORMAT DATA. (A6)+
00:00009AE4 5503            	  1272: 	subq.b #2,D3
00:00009AE6 66F2            	  1273: 	bne.s COMMON35
00:00009AE8 2C4D            	  1274: 	move.l A5,A6        	; A6 = RESTORE END POINTER
00:00009AEA 2A4B            	  1275: 	move.l A3,A5        	; A5 =  BEGINNING OF BUFFER
00:00009AEC 2869FFFC        	  1276: 	move.l HISPC(A1),A4 	; MOVE THE UPDATED PC
00:00009AF0 4E59            	  1277: 	unlk A1            		; TO A4 AND UNDO FRAME.
00:00009AF2 4E75            	  1278: 	rts
                            	  1279: 
                            	  1280: FERROR:  ;.align  2
                            	  1281: ; ILLEGAL INSTRUCTION
                            	  1282: ;
00:00009AF4 701F            	  1283: 	moveq #FOC,D0
00:00009AF6 4DF30000        	  1284: 	lea.l (A3,D0.W),A6
00:00009AFA 4BFA0018        	  1285: 	lea MSG111(PC),A5
                            	  1286: FERROR35:
00:00009AFE 101D            	  1287: 	move.b (A5)+,D0
00:00009B00 0C000004        	  1288: 	cmpi.b #EOT,D0
00:00009B04 6704            	  1289: 	beq.s FERROR39
00:00009B06 1CC0            	  1290: 	move.b D0,(A6)+
00:00009B08 60F4            	  1291: 	bra.s FERROR35
                            	  1292: FERROR39:
00:00009B0A 3014            	  1293: 	move.w (A4),D0
00:00009B0C 6100F728        	  1294: 	bsr PNT4HX
00:00009B10 7602            	  1295: 	moveq #2,D3         ; SIZE
00:00009B12 60B8            	  1296: 	bra.s COMMON
                            	  1297: MSG111:  
00:00009B14 44432E5720202020	  1298: 	dc.b "DC.W    $"
00:00009B1C 24
00:00009B1D 04              	  1299: 	dc.b EOT
                            	  1300: 
                            	  1301: KI:
00:00009B1E 4AFB            	  1302: 	dc.w $4AFB         ; KNOWN ILLEGAL CODES
                            	  1303: KIEND:   
                            	  1304: 	even
                            	  1305: 
                            	  1306: ;  \1   MASK
                            	  1307: ;  \2   OP-CODE PATTERN
                            	  1308: ;  \3   GOTO OFFSET
                            	  1309: ;  \4   INDEX TO OP-CODE
                            	  1310: C68:     macro arg1,arg2,arg3,arg4
                            	  1311:          DC.W    $\1
                            	  1312:          DC.W    $\2
                            	  1313:          DC.W    (\3-X)
                            	  1314:          DC.w    \4
                            	  1315:          endm
                            	  1316: 
                            	  1317: 				 even
                            	  1318: TBL:     ;.align  2
                            	  1319:          C68     FEC0,E6C0,ISHIFT,56           ; RO
00:00009B20 FEC0            	     1M          DC.W    $FEC0
00:00009B22 E6C0            	     2M          DC.W    $E6C0
00:00009B24 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B26 0038            	     4M          DC.w    56
                            	  1320:          C68     FEC0,E4C0,ISHIFT,57           ; ROX
00:00009B28 FEC0            	     1M          DC.W    $FEC0
00:00009B2A E4C0            	     2M          DC.W    $E4C0
00:00009B2C 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B2E 0039            	     4M          DC.w    57
                            	  1321:          C68     FEC0,E2C0,ISHIFT,55           ; LS
00:00009B30 FEC0            	     1M          DC.W    $FEC0
00:00009B32 E2C0            	     2M          DC.W    $E2C0
00:00009B34 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B36 0037            	     4M          DC.w    55
                            	  1322:          C68     FEC0,E0C0,ISHIFT,54           ; AS
00:00009B38 FEC0            	     1M          DC.W    $FEC0
00:00009B3A E0C0            	     2M          DC.W    $E0C0
00:00009B3C 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B3E 0036            	     4M          DC.w    54
                            	  1323:          C68     F018,E018,ISHIFT,56           ; RO
00:00009B40 F018            	     1M          DC.W    $F018
00:00009B42 E018            	     2M          DC.W    $E018
00:00009B44 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B46 0038            	     4M          DC.w    56
                            	  1324:          C68     F018,E010,ISHIFT,57           ; ROX
00:00009B48 F018            	     1M          DC.W    $F018
00:00009B4A E010            	     2M          DC.W    $E010
00:00009B4C 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B4E 0039            	     4M          DC.w    57
                            	  1325:          C68     F018,E008,ISHIFT,55           ; LS
00:00009B50 F018            	     1M          DC.W    $F018
00:00009B52 E008            	     2M          DC.W    $E008
00:00009B54 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B56 0037            	     4M          DC.w    55
                            	  1326:          C68     F018,E000,ISHIFT,54           ; AS
00:00009B58 F018            	     1M          DC.W    $F018
00:00009B5A E000            	     2M          DC.W    $E000
00:00009B5C 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009B5E 0036            	     4M          DC.w    54
                            	  1327:          C68     F0C0,D0C0,FORM10EX,4          ; ADD       <EA>,A@
00:00009B60 F0C0            	     1M          DC.W    $F0C0
00:00009B62 D0C0            	     2M          DC.W    $D0C0
00:00009B64 016A            	     3M          DC.W    (FORM10EX-X)
00:00009B66 0004            	     4M          DC.w    4
                            	  1328:          C68     F130,D100,FORM12,53           ; ADDX
00:00009B68 F130            	     1M          DC.W    $F130
00:00009B6A D100            	     2M          DC.W    $D100
00:00009B6C 0208            	     3M          DC.W    (FORM12-X)
00:00009B6E 0035            	     4M          DC.w    53
                            	  1329:          C68     F000,D000,FORM10EX,4          ; ADD
00:00009B70 F000            	     1M          DC.W    $F000
00:00009B72 D000            	     2M          DC.W    $D000
00:00009B74 016A            	     3M          DC.W    (FORM10EX-X)
00:00009B76 0004            	     4M          DC.w    4
                            	  1330:          C68     F1F8,C188,FORM9,50            ; EXG
00:00009B78 F1F8            	     1M          DC.W    $F1F8
00:00009B7A C188            	     2M          DC.W    $C188
00:00009B7C 0160            	     3M          DC.W    (FORM9-X)
00:00009B7E 0032            	     4M          DC.w    50
                            	  1331:          C68     F1F8,C148,FORM8,50            ; EXG
00:00009B80 F1F8            	     1M          DC.W    $F1F8
00:00009B82 C148            	     2M          DC.W    $C148
00:00009B84 0152            	     3M          DC.W    (FORM8-X)
00:00009B86 0032            	     4M          DC.w    50
                            	  1332:          C68     F1F8,C140,FORM7,50            ; EXG
00:00009B88 F1F8            	     1M          DC.W    $F1F8
00:00009B8A C140            	     2M          DC.W    $C140
00:00009B8C 0146            	     3M          DC.W    (FORM7-X)
00:00009B8E 0032            	     4M          DC.w    50
                            	  1333:          C68     F1F0,C100,FORM12,49           ; ABCD
00:00009B90 F1F0            	     1M          DC.W    $F1F0
00:00009B92 C100            	     2M          DC.W    $C100
00:00009B94 0208            	     3M          DC.W    (FORM12-X)
00:00009B96 0031            	     4M          DC.w    49
                            	  1334:          C68     F1C0,C1C0,FORM6D,48           ; MULS
00:00009B98 F1C0            	     1M          DC.W    $F1C0
00:00009B9A C1C0            	     2M          DC.W    $C1C0
00:00009B9C 0120            	     3M          DC.W    (FORM6D-X)
00:00009B9E 0030            	     4M          DC.w    48
                            	  1335:          C68     F1C0,C0C0,FORM6D,47           ; MULU
00:00009BA0 F1C0            	     1M          DC.W    $F1C0
00:00009BA2 C0C0            	     2M          DC.W    $C0C0
00:00009BA4 0120            	     3M          DC.W    (FORM6D-X)
00:00009BA6 002F            	     4M          DC.w    47
                            	  1336:          C68     F000,C000,FORM10,2            ; AND
00:00009BA8 F000            	     1M          DC.W    $F000
00:00009BAA C000            	     2M          DC.W    $C000
00:00009BAC 01A8            	     3M          DC.W    (FORM10-X)
00:00009BAE 0002            	     4M          DC.w    2
                            	  1337:          C68     F0C0,B0C0,FORM10EX,6          ; CMP     <EA>,A@
00:00009BB0 F0C0            	     1M          DC.W    $F0C0
00:00009BB2 B0C0            	     2M          DC.W    $B0C0
00:00009BB4 016A            	     3M          DC.W    (FORM10EX-X)
00:00009BB6 0006            	     4M          DC.w    6
                            	  1338:          C68     F138,B108,FORM12A,46          ; CMPM
00:00009BB8 F138            	     1M          DC.W    $F138
00:00009BBA B108            	     2M          DC.W    $B108
00:00009BBC 0244            	     3M          DC.W    (FORM12A-X)
00:00009BBE 002E            	     4M          DC.w    46
                            	  1339:          C68     F100,B100,FORM10,5            ; EOR
00:00009BC0 F100            	     1M          DC.W    $F100
00:00009BC2 B100            	     2M          DC.W    $B100
00:00009BC4 01A8            	     3M          DC.W    (FORM10-X)
00:00009BC6 0005            	     4M          DC.w    5
                            	  1340:          C68     F000,B000,FORM10EX,6          ; CMP
00:00009BC8 F000            	     1M          DC.W    $F000
00:00009BCA B000            	     2M          DC.W    $B000
00:00009BCC 016A            	     3M          DC.W    (FORM10EX-X)
00:00009BCE 0006            	     4M          DC.w    6
                            	  1341:          C68     F0C0,90C0,FORM10EX,44         ; SUB       <EA>,A@
00:00009BD0 F0C0            	     1M          DC.W    $F0C0
00:00009BD2 90C0            	     2M          DC.W    $90C0
00:00009BD4 016A            	     3M          DC.W    (FORM10EX-X)
00:00009BD6 002C            	     4M          DC.w    44
                            	  1342:          C68     F130,9100,FORM12,45           ; SUBX
00:00009BD8 F130            	     1M          DC.W    $F130
00:00009BDA 9100            	     2M          DC.W    $9100
00:00009BDC 0208            	     3M          DC.W    (FORM12-X)
00:00009BDE 002D            	     4M          DC.w    45
                            	  1343:          C68     F000,9000,FORM10EX,44         ; SUB
00:00009BE0 F000            	     1M          DC.W    $F000
00:00009BE2 9000            	     2M          DC.W    $9000
00:00009BE4 016A            	     3M          DC.W    (FORM10EX-X)
00:00009BE6 002C            	     4M          DC.w    44
                            	  1344:          C68     F1F0,8100,FORM12,43           ; SBCD
00:00009BE8 F1F0            	     1M          DC.W    $F1F0
00:00009BEA 8100            	     2M          DC.W    $8100
00:00009BEC 0208            	     3M          DC.W    (FORM12-X)
00:00009BEE 002B            	     4M          DC.w    43
                            	  1345:          C68     F1C0,81C0,FORM6D,42           ; DIVS
00:00009BF0 F1C0            	     1M          DC.W    $F1C0
00:00009BF2 81C0            	     2M          DC.W    $81C0
00:00009BF4 0120            	     3M          DC.W    (FORM6D-X)
00:00009BF6 002A            	     4M          DC.w    42
                            	  1346:          C68     F1C0,80C0,FORM6D,41           ; DIVU
00:00009BF8 F1C0            	     1M          DC.W    $F1C0
00:00009BFA 80C0            	     2M          DC.W    $80C0
00:00009BFC 0120            	     3M          DC.W    (FORM6D-X)
00:00009BFE 0029            	     4M          DC.w    41
                            	  1347:          C68     F000,8000,FORM10,40           ; OR
00:00009C00 F000            	     1M          DC.W    $F000
00:00009C02 8000            	     2M          DC.W    $8000
00:00009C04 01A8            	     3M          DC.W    (FORM10-X)
00:00009C06 0028            	     4M          DC.w    40
                            	  1348:          C68     F100,7000,IMOVEQ,39           ; MOVEQ
00:00009C08 F100            	     1M          DC.W    $F100
00:00009C0A 7000            	     2M          DC.W    $7000
00:00009C0C 0270            	     3M          DC.W    (IMOVEQ-X)
00:00009C0E 0027            	     4M          DC.w    39
                            	  1349:          C68     FF00,6100,IBSR,51             ; BSR
00:00009C10 FF00            	     1M          DC.W    $FF00
00:00009C12 6100            	     2M          DC.W    $6100
00:00009C14 0354            	     3M          DC.W    (IBSR-X)
00:00009C16 0033            	     4M          DC.w    51
                            	  1350:          C68     FF00,6000,IBSR,65             ; BRA
00:00009C18 FF00            	     1M          DC.W    $FF00
00:00009C1A 6000            	     2M          DC.W    $6000
00:00009C1C 0354            	     3M          DC.W    (IBSR-X)
00:00009C1E 0041            	     4M          DC.w    65
                            	  1351:          C68     F000,6000,ICC,38              ; B
00:00009C20 F000            	     1M          DC.W    $F000
00:00009C22 6000            	     2M          DC.W    $6000
00:00009C24 0350            	     3M          DC.W    (ICC-X)
00:00009C26 0026            	     4M          DC.w    38
                            	  1352:          C68     F0F8,50C8,IDBCC,37            ; DB
00:00009C28 F0F8            	     1M          DC.W    $F0F8
00:00009C2A 50C8            	     2M          DC.W    $50C8
00:00009C2C 033E            	     3M          DC.W    (IDBCC-X)
00:00009C2E 0025            	     4M          DC.w    37
                            	  1353:          C68     F0C0,50C0,ISCC,36             ; S
00:00009C30 F0C0            	     1M          DC.W    $F0C0
00:00009C32 50C0            	     2M          DC.W    $50C0
00:00009C34 0334            	     3M          DC.W    (ISCC-X)
00:00009C36 0024            	     4M          DC.w    36
                            	  1354:          C68     F100,5100,IQUICK,35           ; SUBQ
00:00009C38 F100            	     1M          DC.W    $F100
00:00009C3A 5100            	     2M          DC.W    $5100
00:00009C3C 026C            	     3M          DC.W    (IQUICK-X)
00:00009C3E 0023            	     4M          DC.w    35
                            	  1355:          C68     F100,5000,IQUICK,34           ; ADDQ
00:00009C40 F100            	     1M          DC.W    $F100
00:00009C42 5000            	     2M          DC.W    $5000
00:00009C44 026C            	     3M          DC.W    (IQUICK-X)
00:00009C46 0022            	     4M          DC.w    34
                            	  1356:          C68     F1C0,41C0,FORM6A,33           ; LEA
00:00009C48 F1C0            	     1M          DC.W    $F1C0
00:00009C4A 41C0            	     2M          DC.W    $41C0
00:00009C4C 0110            	     3M          DC.W    (FORM6A-X)
00:00009C4E 0021            	     4M          DC.w    33
                            	  1357:          C68     F1C0,4180,FORM6D,32           ; CHK
00:00009C50 F1C0            	     1M          DC.W    $F1C0
00:00009C52 4180            	     2M          DC.W    $4180
00:00009C54 0120            	     3M          DC.W    (FORM6D-X)
00:00009C56 0020            	     4M          DC.w    32
                            	  1358:          C68     FFC0,4EC0,FORM11SL,31         ; JMP
00:00009C58 FFC0            	     1M          DC.W    $FFC0
00:00009C5A 4EC0            	     2M          DC.W    $4EC0
00:00009C5C 01E4            	     3M          DC.W    (FORM11SL-X)
00:00009C5E 001F            	     4M          DC.w    31
                            	  1359:          C68     FFC0,4E80,FORM11SL,30         ; JSR
00:00009C60 FFC0            	     1M          DC.W    $FFC0
00:00009C62 4E80            	     2M          DC.W    $4E80
00:00009C64 01E4            	     3M          DC.W    (FORM11SL-X)
00:00009C66 001E            	     4M          DC.w    30
                            	  1360:          C68     FFFF,4E77,SCOMMON,29          ; RTR
00:00009C68 FFFF            	     1M          DC.W    $FFFF
00:00009C6A 4E77            	     2M          DC.W    $4E77
00:00009C6C 0330            	     3M          DC.W    (SCOMMON-X)
00:00009C6E 001D            	     4M          DC.w    29
                            	  1361:          C68     FFFF,4E76,SCOMMON,28          ; TRAPV
00:00009C70 FFFF            	     1M          DC.W    $FFFF
00:00009C72 4E76            	     2M          DC.W    $4E76
00:00009C74 0330            	     3M          DC.W    (SCOMMON-X)
00:00009C76 001C            	     4M          DC.w    28
                            	  1362:          C68     FFFF,4E75,SCOMMON,27          ; RTS
00:00009C78 FFFF            	     1M          DC.W    $FFFF
00:00009C7A 4E75            	     2M          DC.W    $4E75
00:00009C7C 0330            	     3M          DC.W    (SCOMMON-X)
00:00009C7E 001B            	     4M          DC.w    27
                            	  1363:          C68     FFFF,4E73,SCOMMON,26          ; RTE
00:00009C80 FFFF            	     1M          DC.W    $FFFF
00:00009C82 4E73            	     2M          DC.W    $4E73
00:00009C84 0330            	     3M          DC.W    (SCOMMON-X)
00:00009C86 001A            	     4M          DC.w    26
                            	  1364:          C68     FFFF,4E72,ISTOP,25            ; STOP
00:00009C88 FFFF            	     1M          DC.W    $FFFF
00:00009C8A 4E72            	     2M          DC.W    $4E72
00:00009C8C 004A            	     3M          DC.W    (ISTOP-X)
00:00009C8E 0019            	     4M          DC.w    25
                            	  1365:          C68     FFFF,4E71,SCOMMON,24          ; NOP
00:00009C90 FFFF            	     1M          DC.W    $FFFF
00:00009C92 4E71            	     2M          DC.W    $4E71
00:00009C94 0330            	     3M          DC.W    (SCOMMON-X)
00:00009C96 0018            	     4M          DC.w    24
                            	  1366:          C68     FFFF,4E70,SCOMMON,23          ; RESET
00:00009C98 FFFF            	     1M          DC.W    $FFFF
00:00009C9A 4E70            	     2M          DC.W    $4E70
00:00009C9C 0330            	     3M          DC.W    (SCOMMON-X)
00:00009C9E 0017            	     4M          DC.w    23
                            	  1367:          C68     FFF8,4E68,IMVFUSP,60          ; MOVE FROM USP
00:00009CA0 FFF8            	     1M          DC.W    $FFF8
00:00009CA2 4E68            	     2M          DC.W    $4E68
00:00009CA4 029E            	     3M          DC.W    (IMVFUSP-X)
00:00009CA6 003C            	     4M          DC.w    60
                            	  1368:          C68     FFF8,4E60,IMVTUSP,60          ; MOVE TO USP
00:00009CA8 FFF8            	     1M          DC.W    $FFF8
00:00009CAA 4E60            	     2M          DC.W    $4E60
00:00009CAC 02BE            	     3M          DC.W    (IMVTUSP-X)
00:00009CAE 003C            	     4M          DC.w    60
                            	  1369:          C68     FFF8,4E58,FORM5,22            ; UNLINK
00:00009CB0 FFF8            	     1M          DC.W    $FFF8
00:00009CB2 4E58            	     2M          DC.W    $4E58
00:00009CB4 010C            	     3M          DC.W    (FORM5-X)
00:00009CB6 0016            	     4M          DC.w    22
                            	  1370:          C68     FFF8,4E50,ILINK,21            ; LINK
00:00009CB8 FFF8            	     1M          DC.W    $FFF8
00:00009CBA 4E50            	     2M          DC.W    $4E50
00:00009CBC 00D6            	     3M          DC.W    (ILINK-X)
00:00009CBE 0015            	     4M          DC.w    21
                            	  1371:          C68     FFF0,4E40,FORM4,20            ; TRAP
00:00009CC0 FFF0            	     1M          DC.W    $FFF0
00:00009CC2 4E40            	     2M          DC.W    $4E40
00:00009CC4 00FA            	     3M          DC.W    (FORM4-X)
00:00009CC6 0014            	     4M          DC.w    20
                            	  1372:          C68     FF80,4C80,IMOVEMTR,15         ; MOVEM FROM REGISTERS
00:00009CC8 FF80            	     1M          DC.W    $FF80
00:00009CCA 4C80            	     2M          DC.W    $4C80
00:00009CCC 002E            	     3M          DC.W    (IMOVEMTR-X)
00:00009CCE 000F            	     4M          DC.w    15
                            	  1373:          C68     FFC0,4AC0,FORM1A,19           ; TAS
00:00009CD0 FFC0            	     1M          DC.W    $FFC0
00:00009CD2 4AC0            	     2M          DC.W    $4AC0
00:00009CD4 00F0            	     3M          DC.W    (FORM1A-X)
00:00009CD6 0013            	     4M          DC.w    19
                            	  1374:          C68     FF00,4A00,FORM1,18            ; TST
00:00009CD8 FF00            	     1M          DC.W    $FF00
00:00009CDA 4A00            	     2M          DC.W    $4A00
00:00009CDC 00EC            	     3M          DC.W    (FORM1-X)
00:00009CDE 0012            	     4M          DC.w    18
                            	  1375:          C68     FFF8,48C0,FORM3,17            ; EXT.L
00:00009CE0 FFF8            	     1M          DC.W    $FFF8
00:00009CE2 48C0            	     2M          DC.W    $48C0
00:00009CE4 00F6            	     3M          DC.W    (FORM3-X)
00:00009CE6 0011            	     4M          DC.w    17
                            	  1376:          C68     FFF8,4880,FORM3,16            ; EXT.W
00:00009CE8 FFF8            	     1M          DC.W    $FFF8
00:00009CEA 4880            	     2M          DC.W    $4880
00:00009CEC 00F6            	     3M          DC.W    (FORM3-X)
00:00009CEE 0010            	     4M          DC.w    16
                            	  1377:          C68     FF80,4880,IMOVEMFR,15         ; MOVEA TO REGISTERS
00:00009CF0 FF80            	     1M          DC.W    $FF80
00:00009CF2 4880            	     2M          DC.W    $4880
00:00009CF4 0000            	     3M          DC.W    (IMOVEMFR-X)
00:00009CF6 000F            	     4M          DC.w    15
                            	  1378:          C68     FFF8,4840,FORM3,14            ; SWAP
00:00009CF8 FFF8            	     1M          DC.W    $FFF8
00:00009CFA 4840            	     2M          DC.W    $4840
00:00009CFC 00F6            	     3M          DC.W    (FORM3-X)
00:00009CFE 000E            	     4M          DC.w    14
                            	  1379:          C68     FFC0,4840,FORM11,13           ; PEA
00:00009D00 FFC0            	     1M          DC.W    $FFC0
00:00009D02 4840            	     2M          DC.W    $4840
00:00009D04 01DC            	     3M          DC.W    (FORM11-X)
00:00009D06 000D            	     4M          DC.w    13
                            	  1380:          C68     FFC0,4800,FORM1A,12           ; NBCD
00:00009D08 FFC0            	     1M          DC.W    $FFC0
00:00009D0A 4800            	     2M          DC.W    $4800
00:00009D0C 00F0            	     3M          DC.W    (FORM1A-X)
00:00009D0E 000C            	     4M          DC.w    12
                            	  1381:          C68     FFC0,46C0,IMVTSR,59           ; MOVE TO SR
00:00009D10 FFC0            	     1M          DC.W    $FFC0
00:00009D12 46C0            	     2M          DC.W    $46C0
00:00009D14 02AC            	     3M          DC.W    (IMVTSR-X)
00:00009D16 003B            	     4M          DC.w    59
                            	  1382:          C68     FF00,4600,FORM1,11            ; NOT
00:00009D18 FF00            	     1M          DC.W    $FF00
00:00009D1A 4600            	     2M          DC.W    $4600
00:00009D1C 00EC            	     3M          DC.W    (FORM1-X)
00:00009D1E 000B            	     4M          DC.w    11
                            	  1383:          C68     FFC0,44C0,IMVTCCR,59          ; MOVE TO CCR
00:00009D20 FFC0            	     1M          DC.W    $FFC0
00:00009D22 44C0            	     2M          DC.W    $44C0
00:00009D24 02CA            	     3M          DC.W    (IMVTCCR-X)
00:00009D26 003B            	     4M          DC.w    59
                            	  1384:          C68     FF00,4400,FORM1,10            ; NEG
00:00009D28 FF00            	     1M          DC.W    $FF00
00:00009D2A 4400            	     2M          DC.W    $4400
00:00009D2C 00EC            	     3M          DC.W    (FORM1-X)
00:00009D2E 000A            	     4M          DC.w    10
                            	  1385:          C68     FF00,4200,FORM1,9             ; CLR
00:00009D30 FF00            	     1M          DC.W    $FF00
00:00009D32 4200            	     2M          DC.W    $4200
00:00009D34 00EC            	     3M          DC.W    (FORM1-X)
00:00009D36 0009            	     4M          DC.w    9
                            	  1386:          C68     FFC0,40C0,IMVFSR,59           ; MOVE.W  FROM  SR
00:00009D38 FFC0            	     1M          DC.W    $FFC0
00:00009D3A 40C0            	     2M          DC.W    $40C0
00:00009D3C 0290            	     3M          DC.W    (IMVFSR-X)
00:00009D3E 003B            	     4M          DC.w    59
                            	  1387:          C68     FF00,4000,FORM1,8             ; NEGX
00:00009D40 FF00            	     1M          DC.W    $FF00
00:00009D42 4000            	     2M          DC.W    $4000
00:00009D44 00EC            	     3M          DC.W    (FORM1-X)
00:00009D46 0008            	     4M          DC.w    8
                            	  1388:          C68     F000,3000,IMOVE,59            ; MOVE.W
00:00009D48 F000            	     1M          DC.W    $F000
00:00009D4A 3000            	     2M          DC.W    $3000
00:00009D4C 00D2            	     3M          DC.W    (IMOVE-X)
00:00009D4E 003B            	     4M          DC.w    59
                            	  1389:          C68     F000,2000,IMOVE,60            ; MOVE.L
00:00009D50 F000            	     1M          DC.W    $F000
00:00009D52 2000            	     2M          DC.W    $2000
00:00009D54 00D2            	     3M          DC.W    (IMOVE-X)
00:00009D56 003C            	     4M          DC.w    60
                            	  1390:          C68     F000,1000,IMOVE,58            ; MOVE.B
00:00009D58 F000            	     1M          DC.W    $F000
00:00009D5A 1000            	     2M          DC.W    $1000
00:00009D5C 00D2            	     3M          DC.W    (IMOVE-X)
00:00009D5E 003A            	     4M          DC.w    58
                            	  1391:          C68     FF00,0C00,IMMED,6             ; CMP       #
00:00009D60 FF00            	     1M          DC.W    $FF00
00:00009D62 0C00            	     2M          DC.W    $0C00
00:00009D64 005E            	     3M          DC.W    (IMMED-X)
00:00009D66 0006            	     4M          DC.w    6
                            	  1392:          C68     FF00,0A00,IMMED,5             ; EOR       #
00:00009D68 FF00            	     1M          DC.W    $FF00
00:00009D6A 0A00            	     2M          DC.W    $0A00
00:00009D6C 005E            	     3M          DC.W    (IMMED-X)
00:00009D6E 0005            	     4M          DC.w    5
                            	  1393:          C68     FF00,0600,IMMED,4             ; ADD       #
00:00009D70 FF00            	     1M          DC.W    $FF00
00:00009D72 0600            	     2M          DC.W    $0600
00:00009D74 005E            	     3M          DC.W    (IMMED-X)
00:00009D76 0004            	     4M          DC.w    4
                            	  1394:          C68     FF00,0400,IMMED,3             ; SUB       #
00:00009D78 FF00            	     1M          DC.W    $FF00
00:00009D7A 0400            	     2M          DC.W    $0400
00:00009D7C 005E            	     3M          DC.W    (IMMED-X)
00:00009D7E 0003            	     4M          DC.w    3
                            	  1395:          C68     FF00,0200,IMMED,2             ; AND       #
00:00009D80 FF00            	     1M          DC.W    $FF00
00:00009D82 0200            	     2M          DC.W    $0200
00:00009D84 005E            	     3M          DC.W    (IMMED-X)
00:00009D86 0002            	     4M          DC.w    2
                            	  1396:          C68     FF00,0000,IMMED,1             ; OR        #
00:00009D88 FF00            	     1M          DC.W    $FF00
00:00009D8A 0000            	     2M          DC.W    $0000
00:00009D8C 005E            	     3M          DC.W    (IMMED-X)
00:00009D8E 0001            	     4M          DC.w    1
                            	  1397:          C68     F138,0108,IMOVEP,0            ; MOVEP
00:00009D90 F138            	     1M          DC.W    $F138
00:00009D92 0108            	     2M          DC.W    $0108
00:00009D94 02DA            	     3M          DC.W    (IMOVEP-X)
00:00009D96 0000            	     4M          DC.w    0
                            	  1398:          C68     FFC0,08C0,ISETS,64            ; BSET
00:00009D98 FFC0            	     1M          DC.W    $FFC0
00:00009D9A 08C0            	     2M          DC.W    $08C0
00:00009D9C 039C            	     3M          DC.W    (ISETS-X)
00:00009D9E 0040            	     4M          DC.w    64
                            	  1399:          C68     FFC0,0880,ISETS,63            ; BCLR
00:00009DA0 FFC0            	     1M          DC.W    $FFC0
00:00009DA2 0880            	     2M          DC.W    $0880
00:00009DA4 039C            	     3M          DC.W    (ISETS-X)
00:00009DA6 003F            	     4M          DC.w    63
                            	  1400:          C68     FFC0,0840,ISETS,62            ; BCHG
00:00009DA8 FFC0            	     1M          DC.W    $FFC0
00:00009DAA 0840            	     2M          DC.W    $0840
00:00009DAC 039C            	     3M          DC.W    (ISETS-X)
00:00009DAE 003E            	     4M          DC.w    62
                            	  1401:          C68     FFC0,0800,ISETS,61            ; BTST
00:00009DB0 FFC0            	     1M          DC.W    $FFC0
00:00009DB2 0800            	     2M          DC.W    $0800
00:00009DB4 039C            	     3M          DC.W    (ISETS-X)
00:00009DB6 003D            	     4M          DC.w    61
                            	  1402:          C68     F1C0,01C0,ISETD,64            ; BSET
00:00009DB8 F1C0            	     1M          DC.W    $F1C0
00:00009DBA 01C0            	     2M          DC.W    $01C0
00:00009DBC 038C            	     3M          DC.W    (ISETD-X)
00:00009DBE 0040            	     4M          DC.w    64
                            	  1403:          C68     F1C0,0180,ISETD,63            ; BCLR
00:00009DC0 F1C0            	     1M          DC.W    $F1C0
00:00009DC2 0180            	     2M          DC.W    $0180
00:00009DC4 038C            	     3M          DC.W    (ISETD-X)
00:00009DC6 003F            	     4M          DC.w    63
                            	  1404:          C68     F1C0,0140,ISETD,62            ; BCHG
00:00009DC8 F1C0            	     1M          DC.W    $F1C0
00:00009DCA 0140            	     2M          DC.W    $0140
00:00009DCC 038C            	     3M          DC.W    (ISETD-X)
00:00009DCE 003E            	     4M          DC.w    62
                            	  1405:          C68     F1C0,0100,ISETD,61            ; BTST
00:00009DD0 F1C0            	     1M          DC.W    $F1C0
00:00009DD2 0100            	     2M          DC.W    $0100
00:00009DD4 038C            	     3M          DC.W    (ISETD-X)
00:00009DD6 003D            	     4M          DC.w    61
                            	  1406: TBLE:
                            	  1407:           even
                            	  1408: 
                            	  1409: N68:     macro arg1,arg2
                            	  1410:          dc.b  "\1",\2
                            	  1411:          endm
                            	  1412: 
                            	  1413: 				even
                            	  1414: OPCTBL:  ;.align  2
                            	  1415:          N68     MOVE,$d0    ; 0
00:00009DD8 4D4F5645        	     1M          dc.b  "MOVE",$d0
00:00009DDC D0
                            	  1416:          N68     O,$d2       ; 1
00:00009DDD 4F              	     1M          dc.b  "O",$d2
00:00009DDE D2
                            	  1417:          N68     AN,$c4      ; 2
00:00009DDF 414E            	     1M          dc.b  "AN",$c4
00:00009DE1 C4
                            	  1418:          N68     SU,$c2      ; 3
00:00009DE2 5355            	     1M          dc.b  "SU",$c2
00:00009DE4 C2
                            	  1419:          N68     AD,$c4      ; 4
00:00009DE5 4144            	     1M          dc.b  "AD",$c4
00:00009DE7 C4
                            	  1420:          N68     EO,$d2      ; 5
00:00009DE8 454F            	     1M          dc.b  "EO",$d2
00:00009DEA D2
                            	  1421:          N68     CM,$d0      ; 6
00:00009DEB 434D            	     1M          dc.b  "CM",$d0
00:00009DED D0
                            	  1422:          N68     MOV,$c5     ; 7
00:00009DEE 4D4F56          	     1M          dc.b  "MOV",$c5
00:00009DF1 C5
                            	  1423:          N68     NEG,$d8     ; 8
00:00009DF2 4E4547          	     1M          dc.b  "NEG",$d8
00:00009DF5 D8
                            	  1424:          N68     CL,$d2      ; 9
00:00009DF6 434C            	     1M          dc.b  "CL",$d2
00:00009DF8 D2
                            	  1425:          N68     NE,$c7      ; 10
00:00009DF9 4E45            	     1M          dc.b  "NE",$c7
00:00009DFB C7
                            	  1426:          N68     NO,$d4      ; 11
00:00009DFC 4E4F            	     1M          dc.b  "NO",$d4
00:00009DFE D4
                            	  1427:          N68     NBC,$c4     ; 12
00:00009DFF 4E4243          	     1M          dc.b  "NBC",$c4
00:00009E02 C4
                            	  1428:          N68     PEA.,$cc    ; 13
00:00009E03 5045412E        	     1M          dc.b  "PEA.",$cc
00:00009E07 CC
                            	  1429:          N68     SWAP.,$d7   ; 14
00:00009E08 535741502E      	     1M          dc.b  "SWAP.",$d7
00:00009E0D D7
                            	  1430:          N68     MOVE,$cd    ; 15
00:00009E0E 4D4F5645        	     1M          dc.b  "MOVE",$cd
00:00009E12 CD
                            	  1431:          N68     EXT.,$d7    ; 16
00:00009E13 4558542E        	     1M          dc.b  "EXT.",$d7
00:00009E17 D7
                            	  1432:          N68     EXT.,$cc    ; 17
00:00009E18 4558542E        	     1M          dc.b  "EXT.",$cc
00:00009E1C CC
                            	  1433:          N68     TS,$d4      ; 18
00:00009E1D 5453            	     1M          dc.b  "TS",$d4
00:00009E1F D4
                            	  1434:          N68     TAS.,$c2    ; 19
00:00009E20 5441532E        	     1M          dc.b  "TAS.",$c2
00:00009E24 C2
                            	  1435:          N68     TRA,$d0     ; 20
00:00009E25 545241          	     1M          dc.b  "TRA",$d0
00:00009E28 D0
                            	  1436:          N68     LIN,$cb     ; 21
00:00009E29 4C494E          	     1M          dc.b  "LIN",$cb
00:00009E2C CB
                            	  1437:          N68     UNL,$cb     ; 22
00:00009E2D 554E4C          	     1M          dc.b  "UNL",$cb
00:00009E30 CB
                            	  1438:          N68     RESE,$d4    ; 23
00:00009E31 52455345        	     1M          dc.b  "RESE",$d4
00:00009E35 D4
                            	  1439:          N68     NO,$d0      ; 24
00:00009E36 4E4F            	     1M          dc.b  "NO",$d0
00:00009E38 D0
                            	  1440:          N68     STO,$d0     ; 25
00:00009E39 53544F          	     1M          dc.b  "STO",$d0
00:00009E3C D0
                            	  1441:          N68     RT,$c5      ; 26
00:00009E3D 5254            	     1M          dc.b  "RT",$c5
00:00009E3F C5
                            	  1442:          N68     RT,$d3      ; 27
00:00009E40 5254            	     1M          dc.b  "RT",$d3
00:00009E42 D3
                            	  1443:          N68     TRAP,$d6    ; 28
00:00009E43 54524150        	     1M          dc.b  "TRAP",$d6
00:00009E47 D6
                            	  1444:          N68     RT,$d2      ; 29
00:00009E48 5254            	     1M          dc.b  "RT",$d2
00:00009E4A D2
                            	  1445:          N68     JS,$d2      ; 30
00:00009E4B 4A53            	     1M          dc.b  "JS",$d2
00:00009E4D D2
                            	  1446:          N68     JM,$d0      ; 31
00:00009E4E 4A4D            	     1M          dc.b  "JM",$d0
00:00009E50 D0
                            	  1447:          N68     CHK.,$d7    ; 32
00:00009E51 43484B2E        	     1M          dc.b  "CHK.",$d7
00:00009E55 D7
                            	  1448:          N68     LEA.,$cc    ; 33
00:00009E56 4C45412E        	     1M          dc.b  "LEA.",$cc
00:00009E5A CC
                            	  1449:          N68     ADD,$d1     ; 34
00:00009E5B 414444          	     1M          dc.b  "ADD",$d1
00:00009E5E D1
                            	  1450:          N68     SUB,$d1     ; 35
00:00009E5F 535542          	     1M          dc.b  "SUB",$d1
00:00009E62 D1
00:00009E63 D3              	  1451:          DC.B    $d3         ; 36
                            	  1452:          N68     D,$c2       ; 37
00:00009E64 44              	     1M          dc.b  "D",$c2
00:00009E65 C2
00:00009E66 C2              	  1453:          DC.B    $c2         ; 38
                            	  1454:          N68     MOVEQ.,$cc  ; .....39
00:00009E67 4D4F5645512E    	     1M          dc.b  "MOVEQ.",$cc
00:00009E6D CC
                            	  1455:          N68     O,$d2       ; 40
00:00009E6E 4F              	     1M          dc.b  "O",$d2
00:00009E6F D2
                            	  1456:          N68     DIVU.,$d7   ; 41
00:00009E70 444956552E      	     1M          dc.b  "DIVU.",$d7
00:00009E75 D7
                            	  1457:          N68     DIVS.,$d7   ; 42
00:00009E76 444956532E      	     1M          dc.b  "DIVS.",$d7
00:00009E7B D7
                            	  1458:          N68     SBC,$c4     ; 43
00:00009E7C 534243          	     1M          dc.b  "SBC",$c4
00:00009E7F C4
                            	  1459:          N68     SU,$c2      ; 44
00:00009E80 5355            	     1M          dc.b  "SU",$c2
00:00009E82 C2
                            	  1460:          N68     SUB,$d8     ; 45
00:00009E83 535542          	     1M          dc.b  "SUB",$d8
00:00009E86 D8
                            	  1461:          N68     CMP,$cd     ; 46
00:00009E87 434D50          	     1M          dc.b  "CMP",$cd
00:00009E8A CD
                            	  1462:          N68     MULU.,$d7   ; 47
00:00009E8B 4D554C552E      	     1M          dc.b  "MULU.",$d7
00:00009E90 D7
                            	  1463:          N68     MULS.,$d7   ; 48
00:00009E91 4D554C532E      	     1M          dc.b  "MULS.",$d7
00:00009E96 D7
                            	  1464:          N68     ABC,$c4     ; 49
00:00009E97 414243          	     1M          dc.b  "ABC",$c4
00:00009E9A C4
                            	  1465:          N68     EX,$c7      ; 50
00:00009E9B 4558            	     1M          dc.b  "EX",$c7
00:00009E9D C7
                            	  1466:          N68     BS,$d2      ; .....51
00:00009E9E 4253            	     1M          dc.b  "BS",$d2
00:00009EA0 D2
                            	  1467:          N68     NUL,$cc     ; .....52
00:00009EA1 4E554C          	     1M          dc.b  "NUL",$cc
00:00009EA4 CC
                            	  1468:          N68     ADD,$d8     ; 53
00:00009EA5 414444          	     1M          dc.b  "ADD",$d8
00:00009EA8 D8
                            	  1469:          N68     A,$d3       ; 54
00:00009EA9 41              	     1M          dc.b  "A",$d3
00:00009EAA D3
                            	  1470:          N68     L,$d3       ; 55
00:00009EAB 4C              	     1M          dc.b  "L",$d3
00:00009EAC D3
                            	  1471:          N68     R,$cf       ; 56
00:00009EAD 52              	     1M          dc.b  "R",$cf
00:00009EAE CF
                            	  1472:          N68     RO,$d8      ; 57
00:00009EAF 524F            	     1M          dc.b  "RO",$d8
00:00009EB1 D8
                            	  1473:          N68     MOVE.,$c2   ; 58
00:00009EB2 4D4F56452E      	     1M          dc.b  "MOVE.",$c2
00:00009EB7 C2
                            	  1474:          N68     MOVE.,$d7   ; 59
00:00009EB8 4D4F56452E      	     1M          dc.b  "MOVE.",$d7
00:00009EBD D7
                            	  1475:          N68     MOVE.,$cc   ; 60
00:00009EBE 4D4F56452E      	     1M          dc.b  "MOVE.",$cc
00:00009EC3 CC
                            	  1476:          N68     BTS,$d4     ; 61
00:00009EC4 425453          	     1M          dc.b  "BTS",$d4
00:00009EC7 D4
                            	  1477:          N68     BCH,$c7     ; 62
00:00009EC8 424348          	     1M          dc.b  "BCH",$c7
00:00009ECB C7
                            	  1478:          N68     BCL,$d2     ; 63
00:00009ECC 42434C          	     1M          dc.b  "BCL",$d2
00:00009ECF D2
                            	  1479:          N68     BSE,$d4     ; 64
00:00009ED0 425345          	     1M          dc.b  "BSE",$d4
00:00009ED3 D4
                            	  1480:          N68     BR,$c1      ; 65
00:00009ED4 4252            	     1M          dc.b  "BR",$c1
00:00009ED6 C1
                            	  1481: 
00:00009ED7 00              	  1482:          DC.B    0         ; PAD BYTE
                            	  1483: 
                            	  1484: 

Source: "boot.x68"
                            	  3739:  	include "games/asteroids/asteroids 1_0.x68"

Source: "games\asteroids\asteroids 1_0.x68"
                            	     1: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	     2: ;														;
                            	     3: ;	ASTEROIDS type game for the EASy68k simulator	2009/05/17	V1.00			;
                            	     4: ;														;
                            	     5: ;	The objective of of the game is to score as many points as possible by		;
                            	     6: ;	destroying asteroids and flying saucers. You control a triangular ship		;
                            	     7: ;	that can rotate, fire shots forward and thrust forward. As the ship moves,	;
                            	     8: ;	momentum is not conserved, the ship eventually comes to a stop when not		;
                            	     9: ;	thrusting. In moments of extreme danger you can send the ship into		;
                            	    10: ;	hyperspace, causing it to disappear and reappear in a random location.		;
                            	    11: ;														;
                            	    12: ;	Each wave starts with the asteroids drifting in random directions onto the	;
                            	    13: ;	screen. Objects wrap around screen edges, an asteroid that drifts off the	;
                            	    14: ;	left edge of the screen reappears at the right and continues moving in the	;
                            	    15: ;	same direction. As you shoot asteroids they break into smaller asteroids	;
                            	    16: ;	that often move faster and are more difficult to hit. The smaller the		;
                            	    17: ;	asteroid the higher the points scored.							;
                            	    18: ;														;
                            	    19: ;	Every so often a flying saucer will appear on one side of the screen and	;
                            	    20: ;	move to the other before disappearing again. Large saucers fire in random	;
                            	    21: ;	directions, while small saucers aim their fire towards the player's ship.	;
                            	    22: ;														;
                            	    23: ;	Once all of the asteroids and flying saucers have been cleared a new set of	;
                            	    24: ;	large asteroids appears. The number of asteroids increases by two each round	;
                            	    25: ;	up to a maximum of eleven. The game continues until all the player lives	;
                            	    26: ;	are lost, a bonus life being awarded for each 10,000 points scored up to a	;
                            	    27: ;	maximum of 255 lives. A maximum of only 18 lives are shown on screen.		;
                            	    28: ;														;
                            	    29: ;	Like the original game the maximum possible score in this game is 99,990	;
                            	    30: ;	points after which it rolls over back to zero.						;
                            	    31: ;														;
                            	    32: ;	Also like the original game some game parameters can be set using the		;
                            	    33: ;	switches in the hardware window. These can be changed at any time during	;
                            	    34: ;	the game.												;
                            	    35: ;														;
                            	    36: ;	Switch	Function										;
                            	    37: ;	------	--------										;
                            	    38: ;	7 - 3		Unused										;
                            	    39: ;	  2		Starting ship count. On = 4, off = 3					;
                            	    40: ;	1 - 0		Language	1	0								;
                            	    41: ;					off	off	English						;
                            	    42: ;					off	on	German						;
                            	    43: ;					on	off	French						;
                            	    44: ;					on	on	Spanish						;
                            	    45: ;														;
                            	    46: ;	Game controls...											;
                            	    47: ;														;
                            	    48: ;	 [1] or [2] for a one or two player game start						;
                            	    49: ;	 [s] to toggle the sound off and on								;
                            	    50: ;														;
                            	    51: ;	 [q] to rotate the ship widdershins								;
                            	    52: ;	 [w] to rotate the ship deocil								;
                            	    53: ;	 [l] to fire the ship thruster								;
                            	    54: ;	 [p] to fire the ship weapon									;
                            	    55: ;	 [SPACE] to jump to hyperspace								;
                            	    56: ;														;
                            	    57: ;	Other keys are:											;
                            	    58: ;														;
                            	    59: ;	 The F2, F3 and F4 keys can be used to select a screen size of 640 x 480,	;
                            	    60: ;	 800 x 600 and 1024 x 768 respectively.							;
                            	    61: ;														;
                            	    62: ;	The game saves the high scores in the file asteroids.hi If this file is		;
                            	    63: ;	not present it will be created after the first high score is entered. If	;
                            	    64: ;	this file is read only new high scores will not be saved. No check is made	;
                            	    65: ;	on the validity of this file, editing the file may cause the game to crash.	;
                            	    66: ;														;
                            	    67: ;	This version for Sim68K 4.6.0 or later							;
                            	    68: ;														;
                            	    69: ;	More 68000 and other projects can be found on my website at ..			;
                            	    70: ;														;
                            	    71: ;	 http://mycorner.no-ip.org/index.html							;
                            	    72: ;														;
                            	    73: ;	mail : leeedavison@googlemail.com								;
                            	    74: ;														;
                            	    75: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    76: 
                            	    77: ; a0 = system calls and volatile
                            	    78: ; a1 = system calls and volatile
                            	    79: ; a2 = volatile
                            	    80: ; a3 = variables base address
                            	    81: ; a4 = vector list pointer
                            	    82: ; a5 = player 1 / current player
                            	    83: ; a6 = player 2 / other player
                            	    84: ; a7 = stack pointer
                            	    85: 
                            	    86: 
                            	    87: 	ORG	$10000
                            	    88: 	code
                            	    89: 	even
                            	    90: 
                            	    91: asteroids_start:
00:00009ED8 61001226        	    92: 	bsr	Initialise				; go setup everything
00:00009EDC 610006DE        	    93: 	bsr reset_game				; clear the scores and set the ship start count
                            	    94: 
                            	    95: ; main loop. this is executed at most once every 16ms, as it waits for the 16ms counter
                            	    96: ; to be incremented from zero since the last loop
                            	    97: 
                            	    98: main_loop:
00:00009EE0 705E            	    99: 	moveq	#94,d0					; copy screen buffer to main (page flip)
00:00009EE2 4E4F            	   100: 	trap #15
                            	   101: 
00:00009EE4 7E06            	   102: 	moveq #6,d7						; video frame buffer
00:00009EE6 7C0C            	   103: 	moveq #DEV_CLEAR,d6
00:00009EE8 4E40            	   104: 	trap #0
                            	   105: 
                            	   106: ;	move.w #$FF00,d1			; clear screen
                            	   107: ;	moveq #11,d0					; position cursor
                            	   108: ;	trap #15
                            	   109: 
                            	   110: ;	bsr sound_key					; handle the sound key
00:00009EEA 61001208        	   111: 	bsr s_controls				; go check the screen controls
                            	   112: 
00:00009EEE 20390004009C    	   113: 	move.l tickcnt,d0
                            	   114: .0001:
00:00009EF4 B0B90004009C    	   115: 	cmp.l tickcnt,d0
00:00009EFA 67F8            	   116: 	beq.s .0001
00:00009EFC 7001            	   117: 	moveq #1,d0
                            	   118: ;wait_16ms
                            	   119: ;	MOVE.b	sixteen_ms(a3),d0		; get the 16ms counter
                            	   120: ;	BEQ.s		wait_16ms			; if not there yet just loop
                            	   121: 
                            	   122: ;	clr.b	sixteen_ms(a3)			; clear the 16ms counter
00:00009EFE D16B0059        	   123: 	add.w d0,game_count(a3)		; increment the game counter
00:00009F02 D12B0025        	   124: 	add.b d0,time_count(a3)		; increment the timeout counter
                            	   125: 
00:00009F06 49FA13E0        	   126: 	lea vector(pc),a4			; reset the vector RAM pointer
                            	   127: 
00:00009F0A 6168            	   128: 	bsr game_message			; do "PLAYER x", "GAME OVER" or credit messages
                            	   129: 
00:00009F0C 61000F20        	   130: 	bsr check_hiscores		; do the high score checks
00:00009F10 610004C4        	   131: 	bsr enter_hiscores		; get the player high score entries
00:00009F14 6A30            	   132: 	bpl.s no_play					; if the high scores are being entered skip the
                            	   133: 												; active play routines
                            	   134: 
00:00009F16 61000C74        	   135: 	bsr high_scores				; display the high score table if the game is
                            	   136: 												; over
00:00009F1A 652A            	   137: 	bcs.s	no_play					; if the high score table was displayed skip
                            	   138: 												; active play
                            	   139: 
00:00009F1C 4A2B001C        	   140: 	tst.b px_time(a3)			; test the "PLAYER x" timer
00:00009F20 661C            	   141: 	bne.s px_hide					; skip the control checks if the "PLAYER x"
                            	   142: 												; timer is not timed out
                            	   143: 
00:00009F22 4A2B001A        	   144: 	tst.b num_players(a3)	; test the number of players in the game
00:00009F26 6712            	   145: 	beq.s skip_player_cont		; if no players skip the player controls
                            	   146: 
00:00009F28 4A2D0027        	   147: 	tst.b p_flag_off(a5)			; test the player flag
00:00009F2C 6B08            	   148: 	bmi.s skip_player_move		; if the player is exploding skip the player
                            	   149: 														; move controls
                            	   150: 
00:00009F2E 610003FE        	   151: 	bsr	ship_fire					; handle the fire button			##
00:00009F32 610005F8        	   152: 	bsr	hyperspace				; handle the hyperspace button		##
                            	   153: skip_player_move
00:00009F36 610007F4        	   154: 	bsr ship_move					; handle ship rotation and thrust		##
                            	   155: skip_player_cont
00:00009F3A 61000284        	   156: 	bsr do_saucer					; handle the saucer
                            	   157: px_hide
00:00009F3E 610006FA        	   158: 	bsr move_items				; move all the objects and add them to the
                            	   159: 												; vector list
00:00009F42 6100014A        	   160: 	bsr check_hits				; check for player/saucer/shot hits
                            	   161: no_play
00:00009F46 61000AB4        	   162: 	bsr static_messages		; add (c), scores and players ships to the
                            	   163: 												; vector list
                            	   164: 
00:00009F4A 61000E2A        	   165: 	bsr fx_sounds					; do the saucer and thump sounds
                            	   166: 
00:00009F4E 38FCB000        	   167: 	move.w #HALT,(a4)+		; add HALT to the vector list
                            	   168: 
00:00009F52 49FA1394        	   169: 	lea vector(pc),a4			; reset the vector RAM pointer
00:00009F56 61001246        	   170: 	bsr do_vector					; go do the vector list, draw them
                            	   171: 
00:00009F5A 102D007B        	   172: 	move.b new_rocks(a5),d0			; test the generate new rocks flag
00:00009F5E 6704            	   173: 	beq.s no_dec_new_rocks			; if counted out skip the decrement
                            	   174: 
00:00009F60 532D007B        	   175: 	subq.b #1,new_rocks(a5)			; else decrement the generate new rocks flag
                            	   176: no_dec_new_rocks
00:00009F64 802D0076        	   177: 	or.b rock_count(a5),d0			; OR the new rocks flag with the rock count
00:00009F68 6600FF76        	   178: 	bne main_loop					; if not counted out or still rocks go do the
                            	   179: 												; main loop
                            	   180: 
00:00009F6C 487AFF72        	   181: 	pea main_loop					; return to the main loop
00:00009F70 60000910        	   182: 	bra make_rocks				; go generate new rocks
                            	   183: 
                            	   184: 
                            	   185: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   186: ;
                            	   187: ; do "PLAYER x", "GAME OVER" or credit messages
                            	   188: 
                            	   189: game_message:
00:00009F74 4A2B001A        	   190: 	tst.b num_players(a3)		; test the number of players in the game
00:00009F78 670E            	   191: 	beq.s do_start_mess			; if no players go do the start message
                            	   192: 
00:00009F7A 4A2B001C        	   193: 	tst.b px_time(a3)				; test the "PLAYER x" timer
00:00009F7E 677C            	   194: 	beq.s game_over					; if timed out go do "GAME OVER" or thump
                            	   195: 													; sound count
                            	   196: 
00:00009F80 532B001C        	   197: 	subq.b #1,px_time(a3)		; decrement the "PLAYER x" timer
00:00009F84 60001104        	   198: 	bra player_x						; add "PLAYER x" to the vector list and return
                            	   199: 
                            	   200: ; do the push start message
                            	   201: 
                            	   202: do_start_mess:
00:00009F88 7005            	   203: 	moveq #5,d0					; GetKey
00:00009F8A 4E4F            	   204: 	trap #15
00:00009F8C 4A81            	   205: 	tst.l d1
00:00009F8E 6B54            	   206: 	bmi.s push_start_mess
00:00009F90 7001            	   207: 	moveq #1,d0
00:00009F92 0C010031        	   208: 	cmpi.b #'1',d1
00:00009F96 6718            	   209: 	beq.s start_game
00:00009F98 0C010032        	   210: 	cmpi.b #'2',d1
00:00009F9C 6646            	   211: 	bne.s push_start_mess
                            	   212: 
                            	   213: ;	MOVE.l	#'2121',d1			; [2][1][2][1] key
                            	   214: ;	MOVEQ		#19,d0			; check for keypress
                            	   215: ;	TRAP		#15
                            	   216: 
                            	   217: ;	MOVEQ		#1,d0				; default to one player
                            	   218: ;	TST.b		d1				; test the [1] key result
                            	   219: ;	BMI.s		start_game			; if pressed go start a one player game
                            	   220: 
                            	   221: ;	TST.w		d1				; test the [2] key result
                            	   222: 	;BPL.s		push_start_mess		; if not pressed go do the "PUSH START" message
                            	   223: 
                            	   224: 							; else the two player start was pressed
00:00009F9E 4BEB01F7        	   225: 	lea player_2(a3),a5		; set the pointer to player two's variables
00:00009FA2 61000618        	   226: 	bsr reset_game				; clear the score and set the ship start count
00:00009FA6 61000982        	   227: 	bsr player_init				; initialise the player variables
00:00009FAA 610008D6        	   228: 	bsr make_rocks				; generate new rocks
00:00009FAE 7002            	   229: 	moveq #2,d0						; set two players in this game
                            	   230: 
                            	   231: ; one or two player game start
                            	   232: 
                            	   233: start_game:
00:00009FB0 1740001A        	   234: 	move.b d0,num_players(a3)	; save the number of players in the game
                            	   235: 
00:00009FB4 422B0018        	   236: 	clr.b player_idx(a3)			; clear the player index
00:00009FB8 4BEB00F3        	   237: 	lea	player_1(a3),a5				; set the pointer to player one's variables
00:00009FBC 4DEB01F7        	   238: 	lea player_2(a3),a6				; set the pointer to player two's variables
                            	   239: 
00:00009FC0 610005FA        	   240: 	bsr reset_game				; clear the scores and set the ship start count
00:00009FC4 61000964        	   241: 	bsr player_init				; initialise the player variables
00:00009FC8 610008B8        	   242: 	bsr make_rocks				; generate new rocks
                            	   243: 
00:00009FCC 7000            	   244: 	moveq #0,d0						; clear the longword
00:00009FCE 3B400080        	   245: 	move.w d0,score_off(a5)		; clear player 1's score
00:00009FD2 3D400080        	   246: 	move.w d0,score_off(a6)		; clear player 2's score
                            	   247: 
00:00009FD6 177C0080001C    	   248: 	move.b #$80,px_time(a3)		; set the "PLAYER x" timer
00:00009FDC 177C00040024    	   249: 	move.b #$04,thump_time(a3)	; set the thump sound change timer
00:00009FE2 4E75            	   250: 	rts
                            	   251: 
                            	   252: ; else do the "PUSH START" message
                            	   253: 
                            	   254: push_start_mess:
00:00009FE4 102B0176        	   255: 	move.b p1_high(a3),d0			; get the player 1 highscore flag
00:00009FE8 C02B027A        	   256: 	and.b p2_high(a3),d0			; and with the player 2 highscore flag
00:00009FEC 6A0C            	   257: 	bpl.s exit_push_start			; if either player is entering their high score
                            	   258: 														; skip the "PUSH START" message
                            	   259: 
00:00009FEE 7206            	   260: 	moveq #$06,d1								; message 6 - "PUSH START"
00:00009FF0 082B0005005A    	   261: 	btst.b #5,game_count+1(a3)	; test a bit in the game counter low byte
00:00009FF6 67001024        	   262: 	beq add_message							; if set add message d1 to the display list
                            	   263: 															; and return
                            	   264: exit_push_start
00:00009FFA 4E75            	   265: 	rts
                            	   266: 
                            	   267: ; do "GAME OVER" or thump sound count
                            	   268: 
                            	   269: game_over:
00:00009FFC 703F            	   270: 	moveq #$3F,d0							; set the game counter mask
00:00009FFE C06B0059        	   271: 	and.w game_count(a3),d0		; mask the game counter
00:0000A002 660C            	   272: 	bne.s nodec_thmpi					; branch if not zero
                            	   273: 
                            	   274: 							; gets here 1/64th of the time
00:0000A004 0C2D0006007C    	   275: 	cmpi.b #6,thmp_sndi(a5)		; compare the thump sound change timer initial
                            	   276: 							; value with the minimum value
00:0000A00A 6704            	   277: 	beq.s nodec_thmpi					; if there already don't decrement it
                            	   278: 
00:0000A00C 532D007C        	   279: 	subq.b #1,thmp_sndi(a5)		; else decrement the thump sound change timer
                            	   280: 							; initial value
                            	   281: nodec_thmpi
00:0000A010 4A2D0082        	   282: 	tst.b ships_off(a5)			; test the player ship count
00:0000A014 6624            	   283: 	bne.s no_game_over			; if ships left skip game over
                            	   284: 
                            	   285: 							; else this player has no ships left
00:0000A016 102D002B        	   286: 	move.b p_fire_off(a5),d0		; get player fire 1
00:0000A01A 802D002C        	   287: 	or.b p_fire_off+1(a5),d0		; OR with player fire 2
00:0000A01E 802D002D        	   288: 	or.b p_fire_off+2(a5),d0		; OR with player fire 3
00:0000A022 802D002E        	   289: 	or.b p_fire_off+3(a5),d0		; OR with player fire 4
00:0000A026 6612            	   290: 	bne.s no_game_over			; if shots still flying skip the game over
                            	   291: 
00:0000A028 7207            	   292: 	moveq #7,d1							; else message 7 - "GAME OVER"
00:0000A02A 61000FF0        	   293: 	bsr add_message					; add message d1 to the display list
                            	   294: 
00:0000A02E 0C2B0002001A    	   295: 	cmpi.b #$02,num_players(a3)	; compare the number of players with two
00:0000A034 6604            	   296: 	bne.s no_game_over			; if not two player skip which game's over
                            	   297: 
00:0000A036 61001052        	   298: 	bsr player_x						; add "PLAYER x" to the vector list
                            	   299: no_game_over
00:0000A03A 4A2D0027        	   300: 	tst.b p_flag_off(a5)		; test the player flag
00:0000A03E 6638            	   301: 	bne.s	exit_game_message		; if alive or exploding just exit
                            	   302: 
00:0000A040 0C2D0080007A    	   303: 	cmpi.b #$80,hide_p_cnt(a5)	; compare with about to die - 1 with the hide
                            	   304: 							; the player count
00:0000A046 6630            	   305: 	bne.s exit_game_message			; if not about to die just exit
                            	   306: 
00:0000A048 1B7C0010007A    	   307: 	move.b #$10,hide_p_cnt(a5)	; set the hide the player count
                            	   308: 
00:0000A04E 122B001A        	   309: 	move.b num_players(a3),d1	; get the number of players in the game
                            	   310: 
00:0000A052 102B0175        	   311: 	move.b p1_ships(a3),d0		; get player 1's ship count
00:0000A056 802B0279        	   312: 	or.b p2_ships(a3),d0			; OR with player 2's ship count
00:0000A05A 671E            	   313: 	beq.s end_game					; if no ships left go end the game
                            	   314: 
00:0000A05C 610006BA        	   315: 	bsr clear_saucer				; clear the saucer and restart the saucer timer
00:0000A060 5301            	   316: 	subq.b #1,d1						; decrement the number of players in the game
00:0000A062 6714            	   317: 	beq.s exit_game_message	; if that was the last player go flag no game
                            	   318: 							; and exit
                            	   319: 
00:0000A064 177C0080001C    	   320: 	move.b #$80,px_time(a3)		; set the "PLAYER x" timer
                            	   321: 
00:0000A06A 4A2E0082        	   322: 	tst.b ships_off(a6)			; test the other player's ship count
00:0000A06E 6708            	   323: 	beq.s exit_game_message		; if no ships left go flag no game and exit
                            	   324: 
                            	   325: 														; else change to the other player
00:0000A070 0A2B00010018    	   326: 	eori.b #1,player_idx(a3)		; toggle the player index
00:0000A076 CB4E            	   327: 	exg a5,a6									; swap the player pointers
                            	   328: exit_game_message
00:0000A078 4E75            	   329: 	rts
                            	   330: 
                            	   331: ; neither player has any ships left so end the game
                            	   332: 
                            	   333: end_game:
00:0000A07A 17410019        	   334: 	move.b d1,past_play(a3)		; save the number of players that were in the
                            	   335: 							; game
00:0000A07E 177C00FF001A    	   336: 	move.b #$FF,num_players(a3)	; clear the number of players in the game
00:0000A084 4BEB00F3        	   337: 	lea player_1(a3),a5		; set the pointer to player one's variables
00:0000A088 4DEB01F7        	   338: 	lea player_2(a3),a6		; set the pointer to player two's variables
00:0000A08C 4E75            	   339: 	rts
                            	   340: 
                            	   341: 
                            	   342: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   343: ;
                            	   344: ; check for player/saucer/shot hits
                            	   345: 
                            	   346: check_hits:
00:0000A08E 7C07            	   347: 	moveq #flag_end-p_flag_off-1,d6
                            	   348: 							; set the count/index for player/saucer/shots
                            	   349: pss_check_loop
00:0000A090 4A356027        	   350: 	tst.b p_flag_off(a5,d6.w)	; test if the player/saucer/shot exists
00:0000A094 6E06            	   351: 	bgt.s check_pss			; if the item exists and is not exploding go
                            	   352: 							; test it
                            	   353: 
                            	   354: next_pss
00:0000A096 51CEFFF8        	   355: 	dbf d6,pss_check_loop	; decrement count/index and loop if more to do
                            	   356: 
00:0000A09A 4E75            	   357: 	rts
                            	   358: 
                            	   359: ; the player/saucer/shot exists and is not exploding
                            	   360: 
                            	   361: check_pss
00:0000A09C 7E1C            	   362: 	moveq #s_flag_off-flags_off,d7
                            	   363: 							; set the item index to the saucer
00:0000A09E 0C460004        	   364: 	cmpi.w #p_fire_off-p_flag_off,d6
                            	   365: 							; compare the player/saucer/shot index with the
                            	   366: 							; first player shot
00:0000A0A2 640A            	   367: 	bcc.s check_all			; if it is a player shot go test it against all
                            	   368: 							; the items
                            	   369: 
00:0000A0A4 5347            	   370: 	subq.w #1,d7				; else skip the saucer
00:0000A0A6 4A46            	   371: 	tst.w d6						; test the player/saucer/shot index
00:0000A0A8 6604            	   372: 	bne.s check_all			; if not the player go test against everything
                            	   373: 
                            	   374: 							; else skip the player
                            	   375: check_next_object
00:0000A0AA 5347            	   376: 	subq.w #1,d7				; decrement the item index
00:0000A0AC 6BE8            	   377: 	bmi.s next_pss			; if all done go do next player/saucer/shot
                            	   378: 
                            	   379: check_all
00:0000A0AE 1435700C        	   380: 	MOVE.b	flags_off(a5,d7.w),d2	; get the item flag indexed by d7
00:0000A0B2 6FF6            	   381: 	BLE.s		check_next_object		; if the item doesn't exist or the item is
                            	   382: 							; exploding go try the next item
                            	   383: 
00:0000A0B4 3A07            	   384: 	MOVE.w	d7,d5				; copy the item index
00:0000A0B6 DA45            	   385: 	ADD.w		d5,d5				; ; 2 for the item position index
                            	   386: 
00:0000A0B8 3806            	   387: 	MOVE.w	d6,d4				; copy the fire item index
00:0000A0BA D844            	   388: 	ADD.w		d4,d4				; ; 2 for the fire item position index
                            	   389: 
00:0000A0BC 30355080        	   390: 	MOVE.w	x_pos_off(a5,d5.w),d0	; get item x position
00:0000A0C0 907540B6        	   391: 	SUB.w		p_xpos_off(a5,d4.w),d0	; subtract the player/saucer/shot x position
00:0000A0C4 6A02            	   392: 	BPL.s		delta_x_pos			; if the delta is positive skip the negate
                            	   393: 
00:0000A0C6 4440            	   394: 	NEG.w		d0				; else negate the delta
                            	   395: delta_x_pos
00:0000A0C8 0C400151        	   396: 	CMPI.w	#$0151,d0			; compare the range with $0151
00:0000A0CC 64DC            	   397: 	BCC.s		check_next_object		; if it's out of range go try the next item
                            	   398: 
00:0000A0CE 323550C6        	   399: 	MOVE.w	y_pos_off(a5,d5.w),d1	; get item y position
00:0000A0D2 927540FC        	   400: 	SUB.w		p_ypos_off(a5,d4.w),d1	; subtract the player/saucer/shot y position
00:0000A0D6 6A02            	   401: 	BPL.s		delta_y_pos			; if the delta is positive skip the negate
                            	   402: 
00:0000A0D8 4441            	   403: 	NEG.w		d1				; else negate the delta
                            	   404: delta_y_pos
00:0000A0DA 0C410151        	   405: 	CMPI.w	#$0151,d1			; compare the range with $0151
00:0000A0DE 64CA            	   406: 	BCC.s		check_next_object		; if it's out of range go try the next item
                            	   407: 
00:0000A0E0 C0C0            	   408: 	MULU.w	d0,d0				; calculate delta x^2
00:0000A0E2 C2C1            	   409: 	MULU.w	d1,d1				; calculate delta y^2
00:0000A0E4 D081            	   410: 	ADD.l		d1,d0				; calculate delta x^2 + delta y^2
00:0000A0E6 E480            	   411: 	ASR.l		#2,d0				; / 4 makes it a word value again
                            	   412: 
00:0000A0E8 02420007        	   413: 	ANDI.w	#$07,d2			; mask the size bits
00:0000A0EC 5302            	   414: 	SUBQ.b	#1,d2				; make $01 to $04 into $00 to $03
00:0000A0EE D402            	   415: 	ADD.b		d2,d2				; ; 2 bytes per size^2
                            	   416: 
00:0000A0F0 0C460001        	   417: 	CMPI.w	#s_flag_off-p_flag_off,d6
                            	   418: 							; compare the player/saucer/shot index with the
                            	   419: 							; saucer
00:0000A0F4 6E10            	   420: 	BGT.s		no_add_size			; if shot index just go get the collision size
                            	   421: 
00:0000A0F6 6B0C            	   422: 	BMI.s		add_p_size			; if player index only add the player offset
                            	   423: 
00:0000A0F8 083500016027    	   424: 	BTST.b	#1,p_flag_off(a5,d6.w)	; else test the saucer size flag
00:0000A0FE 6702            	   425: 	BEQ.s		small_s_size		; if not size $02 only add the small saucer size
                            	   426: 
00:0000A100 5042            	   427: 	ADDQ.w	#col_table_l-col_table_s,d2
                            	   428: 							; add the offset to the item + large saucer size
                            	   429: 							; table
                            	   430: small_s_size
00:0000A102 5042            	   431: 	ADDQ.w	#col_table_s-col_table_p,d2
                            	   432: 							; add the offset to the item + small saucer size
                            	   433: 							; table
                            	   434: add_p_size
00:0000A104 5042            	   435: 	ADDQ.w	#col_table_p-col_table,d2
                            	   436: 							; add the offset to the item + player size table
                            	   437: no_add_size
00:0000A106 343B200C        	   438: 	MOVE.w	col_table(pc,d2.w),d2	; get the collision size from the table
                            	   439: 
00:0000A10A B440            	   440: 	CMP.w		d0,d2				; compare the distance^2 with the collision size
00:0000A10C 659C            	   441: 	BCS.s		check_next_object		; if it's out of range go try the next item
                            	   442: 
00:0000A10E 487AFF86        	   443: 	PEA		next_pss(pc)		; now go try the next fire item, this one died
00:0000A112 6020            	   444: 	BRA.s		handle_collision		; else go handle a collision between items
                            	   445: 
                            	   446: ; table of collision distance squares
                            	   447: 
                            	   448: col_table
00:0000A114 06E4            	   449: 	dc.w	$06E4			; $24^2		small rock, small saucer, player
00:0000A116 1440            	   450: 	dc.w	$1440			; $48^2		medium rock, large saucer
00:0000A118 0000            	   451: 	dc.w	$0000			; no size 3 rock
00:0000A11A 4410            	   452: 	dc.w	$4410			; $84^2		large rock
                            	   453: col_table_p
00:0000A11C 1000            	   454: 	dc.w	$1000			; ($24 + $1C)^2	small rock  + player
00:0000A11E 2710            	   455: 	dc.w	$2710			; ($48 + $1C)^2	medium rock + player
00:0000A120 0000            	   456: 	dc.w	$0000			; no size 3 rock
00:0000A122 6400            	   457: 	dc.w	$6400			; ($84 + $1C)^2	large rock  + player
                            	   458: col_table_s
00:0000A124 0B64            	   459: 	dc.w	$0B64			; ($24 + $12)^2	small rock  + small saucer
00:0000A126 1FA4            	   460: 	dc.w	$1FA4			; ($48 + $12)^2	medium rock + small saucer
00:0000A128 0000            	   461: 	dc.w	$0000			; no size 3 rock
00:0000A12A 57E4            	   462: 	dc.w	$57E4			; ($84 + $12)^2	large rock  + small saucer
                            	   463: col_table_l
00:0000A12C 1440            	   464: 	dc.w	$1440			; ($24 + $24)^2	small rock  + large saucer
00:0000A12E 2D90            	   465: 	dc.w	$2D90			; ($48 + $24)^2	medium rock + large saucer
00:0000A130 0000            	   466: 	dc.w	$0000			; no size 3 rock
00:0000A132 6E40            	   467: 	dc.w	$6E40			; ($84 + $24)^2	large rock  + large saucer
                            	   468: 
                            	   469: 
                            	   470: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   471: ;
                            	   472: ; handle collision between items
                            	   473: ;
                            	   474: ; d6 = X = player/saucer/shot index
                            	   475: ; d7 = Y = object index
                            	   476: 
                            	   477: handle_collision:
00:0000A134 0C460001        	   478: 	CMPI.w	#s_flag_off-p_flag_off,d6
                            	   479: 							; compare the player/saucer/shot index with the
                            	   480: 							; saucer
00:0000A138 660A            	   481: 	BNE.s		not_saucer			; if not the saucer go find out what it was
                            	   482: 
                            	   483: 							; else the saucer hit something
00:0000A13A 0C47001B        	   484: 	CMPI.w	#p_flag_off-flags_off,d7
                            	   485: 							; compare the object with the player index
00:0000A13E 6612            	   486: 	BNE.s		not_player			; if not the player go find out what it was
                            	   487: 
                            	   488: 							; else the saucer hit the player so make it that
                            	   489: 							; the player hit the saucer
00:0000A140 7E1C            	   490: 	MOVEQ		#s_flag_off-flags_off,d7
                            	   491: 							; make the object the saucer
00:0000A142 7C00            	   492: 	MOVEQ		#p_flag_off-p_flag_off,d6
                            	   493: 							; make the player/saucer/shot index the player
                            	   494: not_saucer
00:0000A144 4A46            	   495: 	TST.w		d6				; test the player/saucer/shot index
00:0000A146 6622            	   496: 	BNE.s		not_pss_player		; if it's not the player go find out what it was
                            	   497: 
                            	   498: ; the player hit something
                            	   499: 
00:0000A148 1B7C0081007A    	   500: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
00:0000A14E 532D0082        	   501: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
                            	   502: 
                            	   503: ; either the player hit the saucer or the player or saucer hit either a rock or a shot
                            	   504: 
                            	   505: not_player
00:0000A152 1BBC00A06027    	   506: 	MOVE.b	#$A0,p_flag_off(a5,d6.w)
                            	   507: 							; set the item is exploding flag
00:0000A158 7000            	   508: 	MOVEQ		#0,d0				; clear the longword
00:0000A15A 1B80604A        	   509: 	MOVE.b	d0,p_xvel_off(a5,d6.w)	; clear the player/saucer/shot x velocity
00:0000A15E 1B80606D        	   510: 	MOVE.b	d0,p_yvel_off(a5,d6.w)	; clear the player/saucer/shot y velocity
00:0000A162 0C47001B        	   511: 	CMPI.w	#p_flag_off-flags_off,d7
                            	   512: 							; compare the object with the player index
00:0000A166 650E            	   513: 	BCS.s		what_hit_rock		; if less go handle something hitting a rock
                            	   514: 
00:0000A168 6038            	   515: 	BRA.s		what_hit_saucer		; else go handle something hitting the saucer
                            	   516: 
                            	   517: ; else a shot hit something
                            	   518: 
                            	   519: not_pss_player
00:0000A16A 42356027        	   520: 	CLR.b		p_flag_off(a5,d6.w)	; clear the shot object
00:0000A16E 0C07001B        	   521: 	CMPI.b	#p_flag_off-flags_off,d7
                            	   522: 							; compare the item with the player's index
00:0000A172 6722            	   523: 	BEQ.s		player_shot			; if it's the player go handle a shot hitting
                            	   524: 							; the player
                            	   525: 
00:0000A174 642C            	   526: 	BCC.s		what_hit_saucer		; if it's the saucer go handle a shot hitting
                            	   527: 							; the saucer
                            	   528: 
                            	   529: what_hit_rock
00:0000A176 61000C40        	   530: 	BSR		hit_a_rock			; handle something hitting a rock
                            	   531: 
                            	   532: ; explode the object
                            	   533: 
                            	   534: explode_object
00:0000A17A 7203            	   535: 	MOVEQ		#$03,d1			; set the mask for the two size bits
00:0000A17C C235700C        	   536: 	AND.b		flags_off(a5,d7.w),d1	; and it with the item flag
00:0000A180 5A01            	   537: 	ADDQ.b	#sexpl_snd,d1		; add the small explosion sound to the size
00:0000A182 61002B94        	   538: 	BSR		play_sample			; go play the sample
                            	   539: 
00:0000A186 1BBC00A0700C    	   540: 	MOVE.b	#$A0,flags_off(a5,d7.w)	; set the item to exploding
00:0000A18C 4235702F        	   541: 	CLR.b		x_vel_off(a5,d7.w)	; clear the item x velocity byte
00:0000A190 42357052        	   542: 	CLR.b		y_vel_off(a5,d7.w)	; clear the item y velocity byte
00:0000A194 4E75            	   543: 	RTS
                            	   544: 
                            	   545: ; handle a shot hitting the player
                            	   546: 
                            	   547: player_shot
00:0000A196 532D0082        	   548: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
00:0000A19A 1B7C0081007A    	   549: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
00:0000A1A0 60D8            	   550: 	BRA.s		explode_object		; go explode the player
                            	   551: 
                            	   552: ; handle something hitting the saucer
                            	   553: 
                            	   554: what_hit_saucer
00:0000A1A2 1B6D00780077    	   555: 	MOVE.b	i_sauc_tim(a5),sauc_cntdn(a5)
                            	   556: 							; save the small saucer boundary/initial saucer
                            	   557: 							; value to the saucer countdown timer
00:0000A1A8 4A2B001A        	   558: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000A1AC 67CC            	   559: 	BEQ.s		explode_object		; if no players skip adding the score
                            	   560: 
00:0000A1AE 7299            	   561: 	MOVEQ		#$99,d1			; default to 990 points for a small saucer
00:0000A1B0 082D00000028    	   562: 	BTST.b	#0,s_flag_off(a5)		; test the saucer size bit
00:0000A1B6 6602            	   563: 	BNE.s		keep_small			; if it was a small saucer keep the score value
                            	   564: 
00:0000A1B8 7220            	   565: 	MOVEQ		#$20,d1			; else set 200 points for the large saucer
                            	   566: keep_small
00:0000A1BA 6100099C        	   567: 	BSR		add_score			; add d1 to the current player's score
00:0000A1BE 60BA            	   568: 	BRA.s		explode_object		; go explode the saucer
                            	   569: 
                            	   570: 
                            	   571: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   572: ;
                            	   573: ; handle the saucer
                            	   574: 
                            	   575: do_saucer
00:0000A1C0 70FC            	   576: 	MOVEQ		#-4,d0			; set the timeout counter mask
00:0000A1C2 C02B0025        	   577: 	AND.b		time_count(a3),d0		; mask the timeout counter
00:0000A1C6 670000B0        	   578: 	BEQ		exit_do_saucer		; 3/4 of the time just exit
                            	   579: 
00:0000A1CA B12B0025        	   580: 	EOR.b		d0,time_count(a3)		; reset the timeout counter
                            	   581: 
00:0000A1CE 4A2D0028        	   582: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000A1D2 6B0000A4        	   583: 	BMI		exit_do_saucer		; if the saucer is exploding just exit
                            	   584: 
00:0000A1D6 660000A2        	   585: 	BNE		existing_saucer		; if a saucer exists go handle it
                            	   586: 
                            	   587: ; no saucer exists so possibly generate a new one
                            	   588: 
00:0000A1DA 4A2B001A        	   589: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000A1DE 670C            	   590: 	BEQ.s		attract_saucer		; if no players go do the attract mode saucer
                            	   591: 
00:0000A1E0 4A2D0027        	   592: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000A1E4 67000092        	   593: 	BEQ		exit_do_saucer		; if this player doesn't exist just exit
                            	   594: 
00:0000A1E8 6B00008E        	   595: 	BMI		exit_do_saucer		; if this player is exploding just exit
                            	   596: 
                            	   597: attract_saucer
00:0000A1EC 4A2D0079        	   598: 	TST.b		r_hit_tim(a5)		; test the rock hit timer
00:0000A1F0 6704            	   599: 	BEQ.s		rock_hit_out		; if counted out skip the decrement
                            	   600: 
00:0000A1F2 532D0079        	   601: 	SUBQ.b	#1,r_hit_tim(a5)		; else decrement the rock hit timer
                            	   602: rock_hit_out
00:0000A1F6 532D0077        	   603: 	SUBQ.b	#1,sauc_cntdn(a5)		; decrement the saucer countdown timer
00:0000A1FA 667C            	   604: 	BNE		exit_do_saucer		; if not there yet just exit
                            	   605: 
00:0000A1FC 1B7C00120077    	   606: 	MOVE.b	#$12,sauc_cntdn(a5)	; set the first saucer fire count
                            	   607: 
00:0000A202 4A2D0079        	   608: 	TST.b		r_hit_tim(a5)		; test the rock hit timer
00:0000A206 670C            	   609: 	BEQ.s		dec_isaucer_time		; if timed out go decrement the initial saucer
                            	   610: 							; timer
                            	   611: 
00:0000A208 102D0076        	   612: 	MOVE.b	rock_count(a5),d0		; get the rock count
00:0000A20C 676A            	   613: 	BEQ.s		exit_do_saucer		; if no rocks just exit
                            	   614: 
00:0000A20E B02D007D        	   615: 	CMP.b		min_rocks(a5),d0		; compare the rock count with the minimum rock
                            	   616: 							; count before the saucer initial timer starts
                            	   617: 							; to decrement
00:0000A212 6364            	   618: 	BLS.s		exit_do_saucer		; if the minimum rock count is >= the rock count
                            	   619: 							; just exit
                            	   620: 
                            	   621: dec_isaucer_time
00:0000A214 70FA            	   622: 	MOVEQ		#-6,d0			; set to subtract 6
00:0000A216 D02D0078        	   623: 	ADD.b		i_sauc_tim(a5),d0		; subtract it from the small saucer
                            	   624: 							; boundary/initial saucer timer
00:0000A21A 0C000020        	   625: 	CMPI.b	#$20,d0			; compare it with the minimum value
00:0000A21E 6504            	   626: 	BCS.s		no_save_ist			; if less skip the save
                            	   627: 
00:0000A220 1B400078        	   628: 	MOVE.b	d0,i_sauc_tim(a5)		; save the small saucer boundary/initial saucer
                            	   629: 							; timer
                            	   630: no_save_ist
00:0000A224 61000F66        	   631: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A228 302B000A        	   632: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000A22C 0C401800        	   633: 	CMPI.w	#$1800,d0			; compare with $1800
00:0000A230 6504            	   634: 	BCS.s		saucer_yok			; if less than $1800 just use it
                            	   635: 
00:0000A232 024017FF        	   636: 	ANDI.w	#$17FF,d0			; else mask to $17xx
                            	   637: saucer_yok
00:0000A236 3B40FFFE        	   638: 	MOVE.w	d0,s_ypos_off(a5)		; save the saucer y position
                            	   639: 
00:0000A23A 7000            	   640: 	MOVEQ		#0,d0				; clear the saucer x position
00:0000A23C 7210            	   641: 	MOVEQ		#$10,d1			; set the saucer x velocity to + $10
00:0000A23E 4A6B000C        	   642: 	TST.w		PRNlword+2(a3)		; test a pseudo random word
00:0000A242 6B06            	   643: 	BMI.s		start_left			; if bit set start on the left
                            	   644: 
                            	   645: 							; else start at the right side and move left
00:0000A244 303C1FFF        	   646: 	MOVE.w	#$1FFF,d0			; set the saucer x position
00:0000A248 72F0            	   647: 	MOVEQ		#$F0,d1			; set the saucer x velocity to - $10
                            	   648: start_left
00:0000A24A 1B41004B        	   649: 	MOVE.b	d1,s_xvel_off(a5)		; save the saucer x velocity byte
00:0000A24E 3B40FFB8        	   650: 	MOVE.w	d0,s_xpos_off(a5)		; save the saucer x position
                            	   651: 
00:0000A252 7202            	   652: 	MOVEQ		#$02,d1			; default to a large saucer
00:0000A254 4A2D0078        	   653: 	TST.b		i_sauc_tim(a5)		; test the small saucer boundary/initial saucer
                            	   654: 							; timer
00:0000A258 6B1A            	   655: 	BMI.s		save_saucer			; if > $80 always make a big saucer
                            	   656: 
00:0000A25A 0C2D00300080    	   657: 	CMPI.b	#$30,score_off(a5)	; compare the player's score with 30000 points
00:0000A260 6410            	   658: 	BCC.s		small_saucer		; if >= 30000 points go make a small saucer
                            	   659: 
00:0000A262 61000F28        	   660: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A266 142D0078        	   661: 	MOVE.b	i_sauc_tim(a5),d2		; get the small saucer boundary/initial saucer
                            	   662: 							; timer
00:0000A26A E20A            	   663: 	LSR.b		#1,d2				; / 2
00:0000A26C B42B000C        	   664: 	CMP.b		PRNlword+2(a3),d2		; compare it with the random byte
00:0000A270 6402            	   665: 	BCC.s		save_saucer			; if the small saucer boundary is > the random
                            	   666: 							; byte go save the large saucer
                            	   667: 
                            	   668: small_saucer
00:0000A272 7201            	   669: 	MOVEQ		#$01,d1			; else make it a small saucer
                            	   670: save_saucer
00:0000A274 1B410028        	   671: 	MOVE.b	d1,s_flag_off(a5)		; save the saucer flag
                            	   672: exit_do_saucer
00:0000A278 4E75            	   673: 	RTS
                            	   674: 
                            	   675: ; there is an existing saucer
                            	   676: 
                            	   677: existing_saucer
00:0000A27A 707E            	   678: 	MOVEQ		#$7E,d0			; set saucer change mask
00:0000A27C C06B0059        	   679: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000A280 6610            	   680: 	BNE.s		keep_saucer_dir		; if it was not x000 000x skip the saucer
                            	   681: 							; direction change
                            	   682: 
00:0000A282 61000F08        	   683: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A286 7003            	   684: 	MOVEQ		#3,d0				; set the direction mask
00:0000A288 C02B000A        	   685: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A28C 1B7B0018006E    	   686: 	MOVE.b	saucer_yvel(pc,d0.w),s_yvel_off(a5)
                            	   687: 							; save the saucer y velocity byte
                            	   688: keep_saucer_dir
00:0000A292 4A2B001A        	   689: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000A296 6706            	   690: 	BEQ.s		attract_fire		; if no players just go do the fire countdown
                            	   691: 
00:0000A298 4A2D007A        	   692: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000A29C 6606            	   693: 	BNE.s		exit_existing_saucer	; if the player is hidden just exit
                            	   694: 
                            	   695: attract_fire
00:0000A29E 532D0077        	   696: 	SUBQ.b	#1,sauc_cntdn(a5)		; decrement the saucer countdown timer
00:0000A2A2 6706            	   697: 	BEQ.s		fire_saucer			; if counted out go fire
                            	   698: 
                            	   699: exit_existing_saucer
00:0000A2A4 4E75            	   700: 	RTS
                            	   701: 
                            	   702: ; saucer y velocity byte
                            	   703: 
                            	   704: saucer_yvel
00:0000A2A6 F0              	   705: 	dc.b	$F0			; down
00:0000A2A7 00              	   706: 	dc.b	$00			; horizontal
00:0000A2A8 00              	   707: 	dc.b	$00			; horizontal
00:0000A2A9 10              	   708: 	dc.b	$10			; up
                            	   709: 
                            	   710: 
                            	   711: ; handle the saucer fire
                            	   712: 
                            	   713: fire_saucer
00:0000A2AA 1B7C000A0077    	   714: 	MOVE.b	#$0A,sauc_cntdn(a5)	; set the time between saucer shots, save the
                            	   715: 							; countdown timer
00:0000A2B0 7001            	   716: 	MOVEQ		#1,d0				; set the mask for a small saucer
00:0000A2B2 C02D0028        	   717: 	AND.b		s_flag_off(a5),d0		; mask the saucer flag
00:0000A2B6 660A            	   718: 	BNE.s		aim_shot			; if it's a small saucer go aim at the player
                            	   719: 
00:0000A2B8 61000ED2        	   720: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A2BC 102B000A        	   721: 	MOVE.b	PRNlword(a3),d0		; get a pseudo random byte
00:0000A2C0 6056            	   722: 	BRA.s		no_aim_shot			; and go fire wildly in any direction
                            	   723: 
                            	   724: ; aim the shot at the player
                            	   725: 
                            	   726: aim_shot
00:0000A2C2 1F2D004B        	   727: 	MOVE.b	s_xvel_off(a5),-(sp)	; copy the saucer x velocity byte
00:0000A2C6 301F            	   728: 	MOVE.w	(sp)+,d0			; get the byte as a word
00:0000A2C8 4200            	   729: 	CLR.b		d0				; clear the low byte
00:0000A2CA E240            	   730: 	ASR.w		#1,d0				; / 2
                            	   731: 
00:0000A2CC 322DFFB6        	   732: 	MOVE.w	p_xpos_off(a5),d1		; get the player x position
00:0000A2D0 926DFFB8        	   733: 	SUB.w		s_xpos_off(a5),d1		; subtract the saucer x position
00:0000A2D4 E541            	   734: 	ASL.w		#2,d1				; ; 4 delta x
                            	   735: 
00:0000A2D6 9240            	   736: 	SUB.w		d0,d1				; subtract the half saucer x velocity word
                            	   737: 
00:0000A2D8 1F2D006E        	   738: 	MOVE.b	s_yvel_off(a5),-(sp)	; copy the saucer y velocity byte
00:0000A2DC 301F            	   739: 	MOVE.w	(sp)+,d0			; get the byte as a word
00:0000A2DE 4200            	   740: 	CLR.b		d0				; clear the low byte
00:0000A2E0 E240            	   741: 	ASR.w		#1,d0				; / 2
                            	   742: 
00:0000A2E2 342DFFFC        	   743: 	MOVE.w	p_ypos_off(a5),d2		; get the player y position
00:0000A2E6 946DFFFE        	   744: 	SUB.w		s_ypos_off(a5),d2		; subtract the saucer y position
00:0000A2EA E542            	   745: 	ASL.w		#2,d2				; ; 4 delta x low byte
                            	   746: 
00:0000A2EC 9440            	   747: 	SUB.w		d0,d2				; subtract the half saucer y velocity word
                            	   748: 
00:0000A2EE 61000BE4        	   749: 	BSR		get_atn			; calculate the angle given the delta x,y in
                            	   750: 							; d1.w,d2.w
00:0000A2F2 1740001F        	   751: 	MOVE.b	d0,s_orient(a3)		; save the saucer shot direction
                            	   752: 
00:0000A2F6 61000E94        	   753: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A2FA 7200            	   754: 	MOVEQ		#0,d1				; set index to +/- $0F degree units perturbation
00:0000A2FC 102B000A        	   755: 	MOVE.b	PRNlword(a3),d0		; get a pseudo random byte
00:0000A300 0C2D00350080    	   756: 	CMPI.b	#$35,score_off(a5)	; compare the player's score with 35000
00:0000A306 6502            	   757: 	BCS.s		wide_shot			; if less than 35000 skip the index change
                            	   758: 
00:0000A308 7201            	   759: 	MOVEQ		#1,d1				; set index to +/- $07 degree units perturbation
                            	   760: wide_shot
00:0000A30A C03B101E        	   761: 	AND.b		shot_mask(pc,d1.w),d0	; mask with the shot AND mask
00:0000A30E 6A04            	   762: 	BPL.s		no_shot_or			; if the result is positive skip the bit set
                            	   763: 
00:0000A310 803B101A        	   764: 	OR.b		shot_or(pc,d1.w),d0	; else set the correct bits for a negative
                            	   765: 							; perturbation
                            	   766: no_shot_or
00:0000A314 D02B001F        	   767: 	ADD.b		s_orient(a3),d0		; add the saucer shot direction to the
                            	   768: 							; perturbation
                            	   769: no_aim_shot
00:0000A318 1740001F        	   770: 	MOVE.b	d0,s_orient(a3)		; save the saucer shot direction
                            	   771: 
00:0000A31C 7801            	   772: 	MOVEQ		#1,d4				; set the index to the saucer velocity
00:0000A31E 7A02            	   773: 	MOVEQ		#2,d5				; set the index to the saucer position
00:0000A320 7CFF            	   774: 	MOVEQ		#-1,d6			; set the minimum shot index - 1
00:0000A322 7E01            	   775: 	MOVEQ		#1,d7				; set the shot start index
                            	   776: 
00:0000A324 122B0021        	   777: 	MOVE.b	last_fire(a3),d1		; get the fire last state
00:0000A328 6022            	   778: 	BRA.s		test_fire_loop		; go fire the shot
                            	   779: 
                            	   780: 
                            	   781: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   782: ;
                            	   783: ; these two byte pairs together effect the accuracy of the small saucer's shooting
                            	   784: ; by limiting the range of the random perturbation to the saucer's aim
                            	   785: 
                            	   786: ; shot AND mask, masks the perturbation to either +/- $0F or +/- $07 degree units
                            	   787: 
                            	   788: shot_mask
00:0000A32A 8F              	   789: 	dc.b	$8F			; AND mask to +/- $0F degree units
00:0000A32B 87              	   790: 	dc.b	$87			; AND mask to +/- $07 degree units
                            	   791: 
                            	   792: ; shot OR byte, sets the needed bits for a negative perturbation result
                            	   793: 
                            	   794: shot_or
00:0000A32C 70              	   795: 	dc.b	$70			; OR to set bits after - $0F mask result
00:0000A32D 78              	   796: 	dc.b	$78			; OR to set bits after - $07 mask result
                            	   797: 
                            	   798: 
                            	   799: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   800: ;
                            	   801: ; handle the fire button
                            	   802: 
                            	   803: ship_fire:
                            	   804: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	   805: ;##	BEQ.s		exit_ship_fire		; if no players just exit
                            	   806: 
                            	   807: ;##	TST.b		hide_p_cnt(a5)		; test the hide the player count
                            	   808: ;##	BNE.s		exit_ship_fire		; if the player is hidden just exit
                            	   809: 
                            	   810: ;	MOVEQ		#'P',d1			; [P] key
                            	   811: ;	MOVEQ		#19,d0			; check for keypress
                            	   812: ;	TRAP		#15
                            	   813: 
00:0000A32E 7005            	   814: 	moveq #5,d0					; getkey
00:0000A330 4E4F            	   815: 	trap #15
00:0000A332 0C010050        	   816: 	cmpi.b #'P',d1
00:0000A336 6620            	   817: 	bne.s save_ship_fire
                            	   818: 
                            	   819: ;	TST.b		d1				; test the result
                            	   820: ;	BEQ.s		save_ship_fire		; if fire not pressed go clear the fire state
                            	   821: 							; and exit
                            	   822: 
00:0000A338 4A2B0021        	   823: 	tst.b last_fire(a3)		; test the fire last state
00:0000A33C 661E            	   824: 	bne.s exit_ship_fire	; if the fire button is held just exit
                            	   825: 
00:0000A33E 7800            	   826: 	moveq #0,d4					; set the index to the player velocity
00:0000A340 7A00            	   827: 	moveq #0,d5					; set the index to the player position
00:0000A342 7C01            	   828: 	moveq #1,d6					; set the minimum shot index - 1
00:0000A344 7E05            	   829: 	moveq #5,d7					; set the shot start index
                            	   830: 
00:0000A346 176B001E001F    	   831: 	move.b p_orient(a3),s_orient(a3)
                            	   832: 							; copy the player orientation
                            	   833: 
                            	   834: ; fire the shot, player or saucer
                            	   835: 
                            	   836: test_fire_loop
00:0000A34C 4A357029        	   837: 	tst.b s_fire_off(a5,d7.w)	; test this fire object
00:0000A350 670C            	   838: 	beq.s fire_shot			; if this shot is free go use it
                            	   839: 
00:0000A352 5347            	   840: 	subq.w #1,d7				; decrement the shot index
00:0000A354 BC47            	   841: 	cmp.w d7,d6					; compare with minimum - 1 index
00:0000A356 66F4            	   842: 	bne.s test_fire_loop		; loop if more to do
                            	   843: 
                            	   844: save_ship_fire
00:0000A358 17410021        	   845: 	move.b d1,last_fire(a3)		; save the fire last state
                            	   846: exit_ship_fire
00:0000A35C 4E75            	   847: 	rts
                            	   848: 
                            	   849: ; player/saucer fired and a shot, indexed by d7, is free
                            	   850: 
                            	   851: fire_shot:
00:0000A35E 3C07            	   852: 	move.w d7,d6				; copy the item index
00:0000A360 DC46            	   853: 	add.w d6,d6					; 2 for position index
                            	   854: 
00:0000A362 1BBC00127029    	   855: 	MOVE.b	#$12,s_fire_off(a5,d7.w)
                            	   856: 							; set the fire item flag
                            	   857: 
00:0000A368 102B001F        	   858: 	MOVE.b	s_orient(a3),d0		; get the player/saucer orientation
00:0000A36C 61000C0E        	   859: 	BSR		cos_d0			; do COS(d0)
                            	   860: 
00:0000A370 1635404A        	   861: 	MOVE.b	p_xvel_off(a5,d4.w),d3	; get the player/saucer x velocity byte
00:0000A374 613A            	   862: 	BSR.s		calc_fire_byte		; test the fire velocity and make 3/4 sin/cos
00:0000A376 1B83704C        	   863: 	MOVE.b	d3,f_xvel_off(a5,d7.w)	; save the shot x velocity byte
                            	   864: 
00:0000A37A D07550B6        	   865: 	ADD.w		p_xpos_off(a5,d5.w),d0	; add the player/saucer x position
00:0000A37E 3B8060BA        	   866: 	MOVE.w	d0,f_xpos_off(a5,d6.w)	; save the shot x position
                            	   867: 
00:0000A382 102B001F        	   868: 	MOVE.b	s_orient(a3),d0		; get the player/saucer orientation
00:0000A386 61000BF8        	   869: 	BSR		sin_d0			; do SIN(d0)
                            	   870: 
00:0000A38A 1635406D        	   871: 	MOVE.b	p_yvel_off(a5,d4.w),d3	; get the player/saucer y velocity byte
00:0000A38E 6120            	   872: 	BSR		calc_fire_byte		; test the fire velocity and make 3/4 sin/cos
00:0000A390 1B83706F        	   873: 	MOVE.b	d3,f_yvel_off(a5,d7.w)	; save the shot y velocity byte
                            	   874: 
00:0000A394 D07550FC        	   875: 	ADD.w		p_ypos_off(a5,d5.w),d0	; add the player/saucer y position
00:0000A398 3B806000        	   876: 	MOVE.w	d0,f_ypos_off(a5,d6.w)	; save the shot y position
                            	   877: 
00:0000A39C 17410021        	   878: 	MOVE.b	d1,last_fire(a3)		; save the fire last state
                            	   879: 
00:0000A3A0 7201            	   880: 	MOVEQ		#pfire_snd,d1		; default to the player fire sound
00:0000A3A2 0C470002        	   881: 	CMPI.w	#2,d7				; compare the index with the lowest player fire
00:0000A3A6 64002970        	   882: 	BCC		play_sample			; if it was the player go play the sample and
                            	   883: 							; return
                            	   884: 
                            	   885: 							; else it must be the saucer that fired so
00:0000A3AA 7200            	   886: 	MOVEQ		#sfire_snd,d1		; set the saucer fire sound
00:0000A3AC 6000296A        	   887: 	BRA		play_sample			; play the sample and return
                            	   888: 
                            	   889: 
                            	   890: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   891: ;
                            	   892: ; test the fire velocity and make 3/4 sin/cos
                            	   893: 
                            	   894: calc_fire_byte
00:0000A3B0 E240            	   895: 	ASR.w		#1,d0				; / 2
                            	   896: 
00:0000A3B2 3F00            	   897: 	MOVE.w	d0,-(sp)			; push the word value
00:0000A3B4 101F            	   898: 	MOVE.b	(sp)+,d0			; pop it as a byte value
                            	   899: 
00:0000A3B6 D600            	   900: 	ADD.b		d0,d3				; add it to the COS / 2 value
00:0000A3B8 6B0A            	   901: 	BMI.s		test_neg_fire		; if negative go test the negative limit
                            	   902: 
00:0000A3BA 0C030070        	   903: 	CMPI.b	#$70,d3			; else compare it with the positive limit
00:0000A3BE 650C            	   904: 	BCS.s		fire_ok			; if < the positive limit skip the adjust
                            	   905: 
00:0000A3C0 766F            	   906: 	MOVEQ		#$6F,d3			; else set the value to the positive limit
00:0000A3C2 6008            	   907: 	BRA.s		fire_ok			; go save the shot x velocity
                            	   908: 
                            	   909: test_neg_fire
00:0000A3C4 0C030091        	   910: 	CMPI.b	#$91,d3			; compare it with the negative limit
00:0000A3C8 6402            	   911: 	BCC.s		fire_ok			; if < the negative limit skip the adjust
                            	   912: 
00:0000A3CA 7691            	   913: 	MOVEQ		#$91,d3			; else set the value to the negative limit
                            	   914: fire_ok
00:0000A3CC 4880            	   915: 	EXT.w		d0				; make the byte value into a word
                            	   916: 
00:0000A3CE 3400            	   917: 	MOVE.w	d0,d2				; get the COS / 2 back
00:0000A3D0 E242            	   918: 	ASR.w		#1,d2				; / 4
00:0000A3D2 D142            	   919: 	ADDX.w	d2,d0				; make 3 / 4 COS and round up
                            	   920: 
00:0000A3D4 4E75            	   921: 	RTS
                            	   922: 
                            	   923: 
                            	   924: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   925: ;
                            	   926: ; get the player high score entries
                            	   927: 
                            	   928: enter_hiscores
00:0000A3D6 102D0083        	   929: 	MOVE.b	high_off(a5),d0		; get the player 1 highscore flag
00:0000A3DA C02E0083        	   930: 	AND.b		high_off(a6),d0		; and with the player 2 highscore flag
00:0000A3DE 6B00014A        	   931: 	BMI		exit_enter_hiscores	; if neither player is entering their high
                            	   932: 							; score just exit
                            	   933: 
00:0000A3E2 102D0083        	   934: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A3E6 6B000088        	   935: 	BMI		next_p_high			; if this player isn't entering their high
                            	   936: 							; score go try the other player
                            	   937: 
                            	   938: 							; get a player high score entry
00:0000A3EA 0C2B00010019    	   939: 	CMPI.b	#1,past_play(a3)		; compare 1 with the number of players that
                            	   940: 							; were in the game
00:0000A3F0 6712            	   941: 	BEQ.s		no_playerx			; if it was only 1 player skip the "PLAYER x"
                            	   942: 							; message
                            	   943: 
00:0000A3F2 7201            	   944: 	MOVEQ		#1,d1				; message 1 - "PLAYER "
00:0000A3F4 61000C26        	   945: 	BSR		add_message			; add message d1 to the display list
                            	   946: 
00:0000A3F8 7010            	   947: 	MOVEQ		#$10,d0			; set game counter mask
00:0000A3FA C06B0059        	   948: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000A3FE 6604            	   949: 	BNE.s		no_playerx			; if bit set skip the player number write
                            	   950: 
00:0000A400 61000C8C        	   951: 	BSR		player_n			; add the player number to the vector list
                            	   952: no_playerx
00:0000A404 7202            	   953: 	MOVEQ		#2,d1				; message 2 - "YOUR SCORE IS ONE OF THE TE..."
00:0000A406 61000C14        	   954: 	BSR		add_message			; add message d1 to the display list
00:0000A40A 7203            	   955: 	MOVEQ		#3,d1				; message 3 - "PLEASE ENTER YOUR INITIALS"
00:0000A40C 61000C0E        	   956: 	BSR		add_message			; add message d1 to the display list
00:0000A410 7204            	   957: 	MOVEQ		#4,d1				; message 4 - "PUSH ROTATE TO SELECT LETTER"
00:0000A412 61000C08        	   958: 	BSR		add_message			; add message d1 to the display list
00:0000A416 7205            	   959: 	MOVEQ		#5,d1				; message 5 - "PUSH HYPERSPACE WHEN LETTER..."
00:0000A418 61000C02        	   960: 	BSR		add_message			; add message d1 to the display list
                            	   961: 
00:0000A41C 36BC2000        	   962: 	MOVE.w	#$2000,glob_scale(a3)	; set the global scale
                            	   963: 
00:0000A420 7264            	   964: 	MOVEQ		#$64,d1			; set the x co-ordinate
00:0000A422 7439            	   965: 	MOVEQ		#$39,d2			; set the y co-ordinate
00:0000A424 61000CAC        	   966: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	   967: 							; a draw command
                            	   968: 
00:0000A428 323C7000        	   969: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000A42C 61000CBE        	   970: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	   971: 
00:0000A430 7000            	   972: 	MOVEQ		#0,d0				; clear the longword
00:0000A432 102D0083        	   973: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A436 41F3003B        	   974: 	LEA		hinames(a3,d0.w),a0	; point to the high score names
                            	   975: 
00:0000A43A 610001AA        	   976: 	BSR		write_initial		; write a high score initial to the vector list
00:0000A43E 610001A6        	   977: 	BSR		write_initial		; write a high score initial to the vector list
00:0000A442 610001A2        	   978: 	BSR		write_initial		; write a high score initial to the vector list
                            	   979: 
                            	   980: ;	MOVEQ		#' ',d1			; [SPACE] key
                            	   981: ;	MOVEQ		#19,d0			; check for keypress
                            	   982: ;	TRAP		#15
00:0000A446 7005            	   983: 	moveq #5,d0
00:0000A448 4E4F            	   984: 	trap #15
00:0000A44A 4A81            	   985: 	tst.l d1
00:0000A44C 6B6E            	   986: 	bmi.s save_hbutton
00:0000A44E 0C010020        	   987: 	cmpi.b #' ',d1
00:0000A452 6668            	   988: 	bne.s save_hbutton
                            	   989: 
                            	   990: ;	TST.b		d1				; test the result
                            	   991: ;	BEQ.s		save_hbutton		; if hyperspace not pressed go save the state
                            	   992: 
00:0000A454 4A2B0022        	   993: 	TST.b		last_hype(a3)		; test the hyperspace last state
00:0000A458 6662            	   994: 	BNE.s		save_hbutton		; if hyperspace is held go save the state
                            	   995: 
                            	   996: ; the hyperspace button has just been pressed
                            	   997: 
00:0000A45A 522B0020        	   998: 	ADDQ.b	#1,hi_char(a3)		; increment the input character index
00:0000A45E 0C2B00030020    	   999: 	CMPI.b	#3,hi_char(a3)		; compare with end + 1
00:0000A464 653E            	  1000: 	BCS.s		next_hi_char		; if not there yet go and increment to the next
                            	  1001: 							; character
                            	  1002: 
                            	  1003: 							; else that was the last character
00:0000A466 17410022        	  1004: 	MOVE.b	d1,last_hype(a3)		; save the hyperspace last state
00:0000A46A 1B7C00FF0083    	  1005: 	MOVE.b	#$FF,high_off(a5)		; clear the player highscore flag
                            	  1006: next_p_high
00:0000A470 7000            	  1007: 	MOVEQ		#0,d0				; clear the longword
00:0000A472 17400020        	  1008: 	MOVE.b	d0,hi_char(a3)		; clear the input character index
                            	  1009: 
00:0000A476 43FA29B2        	  1010: 	LEA		filename(pc),a1		; point to the highscore filename
00:0000A47A 7034            	  1011: 	MOVEQ		#52,d0			; open new file
00:0000A47C 4E4F            	  1012: 	TRAP		#15
                            	  1013: 
00:0000A47E 4A40            	  1014: 	TST.w		d0				; check for errors
00:0000A480 660A            	  1015: 	BNE.s		close_all			; if error go close all files
                            	  1016: 
00:0000A482 43EB0027        	  1017: 	LEA		hiscores(a3),a1		; point to the highscore tables
00:0000A486 7432            	  1018: 	MOVEQ		#50,d2			; set the table length
00:0000A488 7036            	  1019: 	MOVEQ		#54,d0			; write file
00:0000A48A 4E4F            	  1020: 	TRAP		#15
                            	  1021: 
                            	  1022: close_all
00:0000A48C 7032            	  1023: 	MOVEQ		#50,d0			; close all files
00:0000A48E 4E4F            	  1024: 	TRAP		#15
                            	  1025: 
00:0000A490 17400018        	  1026: 	MOVE.b	d0,player_idx(a3)		; clear the player index
00:0000A494 4BEB00F3        	  1027: 	LEA		player_1(a3),a5		; get the pointer to player one's variables
00:0000A498 4DEB01F7        	  1028: 	LEA		player_2(a3),a6		; get the pointer to player two's variables
                            	  1029: 
00:0000A49C 177C00F00059    	  1030: 	MOVE.b	#$F0,game_count(a3)	; set the game counter high byte, high score
                            	  1031: 							; entry timeout
00:0000A4A2 4E75            	  1032: 	RTS
                            	  1033: 
                            	  1034: ; hyperspace button press accepted and not at initials end
                            	  1035: 
                            	  1036: next_hi_char
00:0000A4A4 177C00F40059    	  1037: 	MOVE.b	#$F4,game_count(a3)	; set the game counter high byte, high score
                            	  1038: 							; entry timeout
                            	  1039: 
00:0000A4AA 7000            	  1040: 	MOVEQ		#0,d0				; clear the longword
00:0000A4AC 102D0083        	  1041: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A4B0 D02B0020        	  1042: 	ADD.b		hi_char(a3),d0		; add the input character index
00:0000A4B4 41F3003B        	  1043: 	LEA		hinames(a3,d0.w),a0	; point to the high score names
00:0000A4B8 10BC000B        	  1044: 	MOVE.b	#$0B,(a0)			; set the next character to "A"
                            	  1045: save_hbutton
00:0000A4BC 17410022        	  1046: 	MOVE.b	d1,last_hype(a3)		; save the hyperspace button last state
                            	  1047: 
00:0000A4C0 4A2B0059        	  1048: 	TST.b		game_count(a3)		; test the game counter high byte
00:0000A4C4 660C            	  1049: 	BNE.s		not_timed_out		; if not timed out just continue
                            	  1050: 
00:0000A4C6 70FF            	  1051: 	MOVEQ		#-1,d0			; flag high score done
00:0000A4C8 1B400083        	  1052: 	MOVE.b	d0,high_off(a5)		; clear the player 1 highscore flag
00:0000A4CC 1D400083        	  1053: 	MOVE.b	d0,high_off(a6)		; clear the player 2 highscore flag
00:0000A4D0 609E            	  1054: 	BRA.s		next_p_high			; go save the entry end exit, branch always
                            	  1055: 
                            	  1056: not_timed_out
00:0000A4D2 70F8            	  1057: 	MOVEQ		#-8,d0			; set the timeout counter mask
00:0000A4D4 C02B0025        	  1058: 	AND.b		time_count(a3),d0		; mask the timeout counter
00:0000A4D8 674E            	  1059: 	BEQ.s		exit_not_done		; just exit 7/8ths of the time
                            	  1060: 
00:0000A4DA B12B0025        	  1061: 	EOR.b		d0,time_count(a3)		; reset the timeout counter
                            	  1062: 
00:0000A4DE 7400            	  1063: 	MOVEQ		#0,d2				; assume no rotate
                            	  1064: ;	MOVE.w	#'WQ',d1			; [WQ] keys
                            	  1065: ;	MOVEQ		#19,d0			; check for keypress
                            	  1066: ;	TRAP		#15
00:0000A4E0 7005            	  1067: 	moveq #5,d0
00:0000A4E2 4E4F            	  1068: 	trap #15
00:0000A4E4 0C010051        	  1069: 	cmpi.b #'Q',d1
00:0000A4E8 6604            	  1070: 	bne.s not_rot_left
00:0000A4EA 7401            	  1071: 	moveq #1,d2
00:0000A4EC 6008            	  1072: 	bra.s was_rot_left
                            	  1073: not_rot_left:
00:0000A4EE 0C010057        	  1074: 	cmpi.b #'W',d1
00:0000A4F2 6602            	  1075: 	bne.s not_rot_right2
00:0000A4F4 5302            	  1076: 	subq.b #1,d2	
                            	  1077: 
                            	  1078: ;	TST.b		d1				; test the result
                            	  1079: ;	BPL.s		rot_not_left		; if not pressed go test rotate right
                            	  1080: ;
                            	  1081: ;	MOVEQ		#1,d2				; if pressed set the offset to + 1
                            	  1082: rot_not_left
                            	  1083: ;	TST.w		d1				; test the result
                            	  1084: ;	BPL.s		rot_not_right		; if not pressed go add the rotation
                            	  1085: 
                            	  1086: ;	SUBQ.b	#1,d2				; if pressed set the offset to - 1
                            	  1087: not_rot_right2
                            	  1088: was_rot_left:
00:0000A4F6 7000            	  1089: 	MOVEQ		#0,d0				; clear the longword
00:0000A4F8 102D0083        	  1090: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A4FC D02B0020        	  1091: 	ADD.b		hi_char(a3),d0		; add the input character index
00:0000A500 D433003B        	  1092: 	ADD.b		hinames(a3,d0.w),d2	; add the character to the offset
00:0000A504 6B14            	  1093: 	BMI.s		wrap_to_z			; if negative go set "Z"
                            	  1094: 
00:0000A506 0C02000B        	  1095: 	CMPI.b	#$0B,d2			; compare with "A"
00:0000A50A 6410            	  1096: 	BCC.s		check_alpha			; if >= "A" go test for <= "Z"
                            	  1097: 
00:0000A50C 0C020001        	  1098: 	CMPI.b	#$01,d2			; compare with "0"
00:0000A510 6704            	  1099: 	BEQ.s		wrap_to_a			; if "0" go set to "A"
                            	  1100: 
                            	  1101: 							; gets here if it was "2" to "9"
00:0000A512 7400            	  1102: 	MOVEQ		#0,d2				; else set to " "
00:0000A514 600E            	  1103: 	BRA.s		save_char			; go save the new character
                            	  1104: 
                            	  1105: wrap_to_a
00:0000A516 740B            	  1106: 	MOVEQ		#$0B,d2			; set to "A"
00:0000A518 600A            	  1107: 	BRA.s		save_char			; go save the new character
                            	  1108: 
                            	  1109: wrap_to_z
00:0000A51A 7424            	  1110: 	MOVEQ		#$24,d2			; set to "Z"
                            	  1111: check_alpha
00:0000A51C 0C020025        	  1112: 	CMPI.b	#$25,d2			; compare with "Z" + 1
00:0000A520 6502            	  1113: 	BCS.s		save_char			; if less skip the reset
                            	  1114: 
00:0000A522 7400            	  1115: 	MOVEQ		#0,d2				; else reset it to " "
                            	  1116: save_char
00:0000A524 1782003B        	  1117: 	MOVE.b	d2,hinames(a3,d0.w)	; save the new character
                            	  1118: exit_not_done
00:0000A528 7000            	  1119: 	MOVEQ		#0,d0				; flag high score not complete
                            	  1120: exit_enter_hiscores
00:0000A52A 4E75            	  1121: 	RTS
                            	  1122: 
                            	  1123: 
                            	  1124: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1125: ;
                            	  1126: ; handle the hyperspace button
                            	  1127: 
                            	  1128: hyperspace
                            	  1129: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	  1130: ;##	BEQ		exit_hyperspace		; if no players just exit
                            	  1131: 
                            	  1132: ;##	TST.b		hide_p_cnt(a5)		; test the hide the player count
                            	  1133: ;##	BNE		exit_hyperspace		; if the player is hidden just exit
                            	  1134: 
00:0000A52C 4A2D0027        	  1135: 	tst.b p_flag_off(a5)		; test the player flag
00:0000A530 6F000088        	  1136: 	ble exit_hyperspace			; if no player or player exploding just exit
                            	  1137: 
                            	  1138: ;	MOVEQ		#' ',d1			; [SPACE] key, read the hyperspace button
                            	  1139: ;	MOVEQ		#19,d0			; check for keypress
                            	  1140: ;	TRAP		#15
00:0000A534 7005            	  1141: 	moveq #5,d0
00:0000A536 4E4F            	  1142: 	trap #15
00:0000A538 0C010020        	  1143: 	cmpi.b #' ',d1
00:0000A53C 667C            	  1144: 	bne.s exit_hyperspace
                            	  1145: 
                            	  1146: ;	TST.b		d1				; test the result
                            	  1147: ;	BEQ.s		exit_hyperspace		; if the key is not pressed just exit
                            	  1148: 
00:0000A53E 7000            	  1149: 	MOVEQ		#0,d0				; clear the longword
00:0000A540 1B400027        	  1150: 	MOVE.b	d0,p_flag_off(a5)		; clear the player flag
00:0000A544 1B40004A        	  1151: 	MOVE.b	d0,p_xvel_off(a5)		; clear the player x velocity
00:0000A548 1B40006D        	  1152: 	MOVE.b	d0,p_yvel_off(a5)		; clear the player y velocity
                            	  1153: 
00:0000A54C 1B7C0030007A    	  1154: 	MOVE.b	#$30,hide_p_cnt(a5)	; set the hide the player count
                            	  1155: 
00:0000A552 61000C38        	  1156: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A556 302B000A        	  1157: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000A55A 02401FFF        	  1158: 	ANDI.w	#$1FFF,d0			; mask to $1Fxx
00:0000A55E 0C401E00        	  1159: 	CMPI.w	#$1E00,d0			; compare with $1E00
00:0000A562 6504            	  1160: 	BCS.s		hype_xok1			; if less than $1E00 just use it
                            	  1161: 
00:0000A564 02401CFF        	  1162: 	ANDI.w	#$1CFF,d0			; else restrict it to $1Cxx
                            	  1163: hype_xok1
00:0000A568 0C400400        	  1164: 	CMPI.w	#$0400,d0			; compare it with $0400
00:0000A56C 6404            	  1165: 	BCC.s		hype_xok2			; if >= $0400 go use it
                            	  1166: 
00:0000A56E 00400300        	  1167: 	ORI.w		#$0300,d0			; else make it $03xx
                            	  1168: hype_xok2
00:0000A572 3B40FFB6        	  1169: 	MOVE.w	d0,p_xpos_off(a5)		; save the player x position
                            	  1170: 
00:0000A576 61000C14        	  1171: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A57A 302B000A        	  1172: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000A57E 02401FFF        	  1173: 	ANDI.w	#$1FFF,d0			; mask to $1Fxx
                            	  1174: 
00:0000A582 3F00            	  1175: 	MOVE.w	d0,-(sp)			; push the word
00:0000A584 141F            	  1176: 	MOVE.b	(sp)+,d2			; pull the byte for later success/fail check
                            	  1177: 
00:0000A586 0C401600        	  1178: 	CMPI.w	#$1600,d0			; compare with $1600
00:0000A58A 6504            	  1179: 	BCS.s		hype_yok1			; if less than $1600 just use it
                            	  1180: 
00:0000A58C 024014FF        	  1181: 	ANDI.w	#$14FF,d0			; else restrict it to $14xx
                            	  1182: hype_yok1
00:0000A590 0C400400        	  1183: 	CMPI.w	#$0400,d0			; compare it with $0400
00:0000A594 6404            	  1184: 	BCC.s		hype_yok2			; if >= $0400 go use it
                            	  1185: 
00:0000A596 00400300        	  1186: 	ORI.w		#$0300,d0			; else make it $03xx
                            	  1187: hype_yok2
00:0000A59A 3B40FFFC        	  1188: 	MOVE.w	d0,p_ypos_off(a5)		; save the player y position
                            	  1189: 
00:0000A59E 7201            	  1190: 	MOVEQ		#1,d1				; default to a successful hyperspace jump
                            	  1191: 
00:0000A5A0 0C020018        	  1192: 	CMPI.b	#$18,d2			; compare with $18xx
00:0000A5A4 6510            	  1193: 	BCS.s		save_hyperspace		; if less than $18xx go save the hyperspace flag
                            	  1194: 
00:0000A5A6 02020007        	  1195: 	ANDI.b	#$07,d2			; else mask it
00:0000A5AA D402            	  1196: 	ADD.b		d2,d2				; ; 2
00:0000A5AC 5802            	  1197: 	ADDI.b	#$04,d2			; + 4
00:0000A5AE B42D0076        	  1198: 	CMP.b		rock_count(a5),d2		; compare this with the rock count
00:0000A5B2 6502            	  1199: 	BCS.s		save_hyperspace		; if < the rock count allow the jump
                            	  1200: 
00:0000A5B4 7280            	  1201: 	MOVEQ		#$80,d1			; else flag an unsuccessful hyperspace jump
                            	  1202: save_hyperspace
00:0000A5B6 17410026        	  1203: 	MOVE.b	d1,hyper(a3)		; save the hyperspace flag
                            	  1204: exit_hyperspace
00:0000A5BA 4E75            	  1205: 	RTS
                            	  1206: 
                            	  1207: 
                            	  1208: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1209: ;
                            	  1210: ; clear the items and set the ship start count
                            	  1211: 
                            	  1212: reset_game:
00:0000A5BC 7003            	  1213: 	MOVEQ		#3,d0				; default to a 3 ship game
00:0000A5BE 206B000E        	  1214: 	MOVEA.l	switch_addr(a3),a0	; point to the switch
00:0000A5C2 08100002        	  1215: 	BTST		#2,(a0)			; test the ship start switch
00:0000A5C6 6702            	  1216: 	BEQ.s		three_ship_start		; if 0 go start with three ships
                            	  1217: 
00:0000A5C8 7004            	  1218: 	MOVEQ		#4,d0				; else make it a 4 ship game
                            	  1219: three_ship_start
00:0000A5CA 1740001B        	  1220: 	MOVE.b	d0,ss_count(a3)		; save the starting ship count
                            	  1221: 
00:0000A5CE 1B7C00020075    	  1222: 	MOVE.b	#2,i_rk_count(a5)		; set the previous initial rock count
                            	  1223: 
00:0000A5D4 7000            	  1224: 	MOVEQ		#0,d0				; clear the longword
00:0000A5D6 7E22            	  1225: 	MOVEQ		#flag_end-flags_off-1,d7
                            	  1226: 							; set the count for the number of items
                            	  1227: clear_items_loop
00:0000A5D8 1B80700C        	  1228: 	MOVE.b	d0,flags_off(a5,d7.w)	; clear an item
00:0000A5DC 51CFFFFA        	  1229: 	DBF		d7,clear_items_loop	; loop if more to do
                            	  1230: 
00:0000A5E0 1B400076        	  1231: 	MOVE.b	d0,rock_count(a5)		; clear the rock count
                            	  1232: 
00:0000A5E4 4E75            	  1233: 	RTS
                            	  1234: 
                            	  1235: 
                            	  1236: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1237: ;
                            	  1238: ; write a high score initial to the vector list
                            	  1239: 
                            	  1240: write_initial:
00:0000A5E6 7200            	  1241: 	MOVEQ		#0,d1				; clear the longword
00:0000A5E8 1218            	  1242: 	MOVE.b	(a0)+,d1			; get a high score initial
00:0000A5EA 6614            	  1243: 	BNE.s		add_character		; if not [SPACE] just go add it
                            	  1244: 
00:0000A5EC 102B0176        	  1245: 	MOVE.b	p1_high(a3),d0		; get the player 1 highscore flag
00:0000A5F0 C02B027A        	  1246: 	AND.b		p2_high(a3),d0		; and with the player 2 highscore flag
00:0000A5F4 6B0A            	  1247: 	BMI.s		add_character		; if neither is entering their initials just
                            	  1248: 							; go add the character
                            	  1249: 
                            	  1250: 							; else add a "_" instead of a [SPACE]
00:0000A5F6 38FCF872        	  1251: 	MOVE.w	#$F872,(a4)+		; add the underline vector word to the vector
                            	  1252: 							; list
00:0000A5FA 38FCF801        	  1253: 	MOVE.w	#$F801,(a4)+		; add the step to next character vector word
                            	  1254: 							; to the vector list
00:0000A5FE 4E75            	  1255: 	RTS
                            	  1256: 
                            	  1257: 
                            	  1258: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1259: ;
                            	  1260: ; add character (d1) to the vector list
                            	  1261: 
                            	  1262: add_character:
00:0000A600 2F08            	  1263: 	MOVE.l	a0,-(sp)			; save a0
00:0000A602 D241            	  1264: 	ADD.w		d1,d1				; ; 2 bytes per character (d1) JSRL
00:0000A604 41FA22FE        	  1265: 	LEA		char_set(pc),a0		; point to the character JSRL table
00:0000A608 38F01000        	  1266: 	MOVE.w	(a0,d1.w),(a4)+		; add the JSRL word to the vector list
00:0000A60C 205F            	  1267: 	MOVE.l	(sp)+,a0			; restore a0
00:0000A60E 4E75            	  1268: 	RTS
                            	  1269: 
                            	  1270: 
                            	  1271: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1272: ;
                            	  1273: ; add d7 ships to the vector list. this is limited to a maximum of eighteen ships for
                            	  1274: ; speed and clarity
                            	  1275: 
                            	  1276: add_ships:
00:0000A610 6726            	  1277: 	BEQ.s		exit_add_ships		; if no ships left just exit
                            	  1278: 
00:0000A612 7012            	  1279: 	MOVEQ		#18,d0			; set the maximum ship count
00:0000A614 B047            	  1280: 	CMP.w		d7,d0				; compare the ship count with the max count
00:0000A616 6402            	  1281: 	BCC.s		show_ships			; if <= to max go show the ships
                            	  1282: 
00:0000A618 3E00            	  1283: 	MOVE.w	d0,d7				; else set the ship count to the maximum
                            	  1284: show_ships
00:0000A61A 9247            	  1285: 	SUB.w		d7,d1				; subtract the ship count twice to move the ..
00:0000A61C 9247            	  1286: 	SUB.w		d7,d1				; .. ships further right the more there are
                            	  1287: 
00:0000A61E 36BCE000        	  1288: 	MOVE.w	#$E000,glob_scale(a3)	; set the global scale
00:0000A622 343C00D1        	  1289: 	MOVE.w	#$D1,d2			; set the ships y co-ordinate
00:0000A626 61000AAA        	  1290: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1291: 							; a draw command
00:0000A62A 5347            	  1292: 	SUBQ.w	#1,d7				; adjust for loop type
                            	  1293: add_ships_loop
00:0000A62C 43FA20DC        	  1294: 	LEA		play_liv(pc),a1		; set the pointer to ships left
00:0000A630 61000A8A        	  1295: 	BSR		add_address			; convert the a1 address and add it to the
                            	  1296: 							; vector list as a vector subroutine call
00:0000A634 51CFFFF6        	  1297: 	DBF		d7,add_ships_loop		; decrement the ship count and loop if more
                            	  1298: 							; to do
                            	  1299: exit_add_ships
00:0000A638 4E75            	  1300: 	RTS
                            	  1301: 
                            	  1302: 
                            	  1303: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1304: ;
                            	  1305: ; move all the items and add them to the vector list
                            	  1306: 
                            	  1307: ; d6 = object index
                            	  1308: ; d7 = position index
                            	  1309: 
                            	  1310: move_items:
00:0000A63A 7E44            	  1311: 	MOVEQ		#x_pos_end-x_pos_off-2,d7
                            	  1312: 							; set the index to the last object position
00:0000A63C 7C22            	  1313: 	MOVEQ		#flag_end-flags_off-1,d6
                            	  1314: 							; set the count to the last object
                            	  1315: move_next_item
00:0000A63E 1035600C        	  1316: 	MOVE.b	flags_off(a5,d6.w),d0	; get an object flag
00:0000A642 670000CC        	  1317: 	BEQ		move_next_object		; if no item go do the next one
                            	  1318: 
                            	  1319: ; have an active item
                            	  1320: 
00:0000A646 6A5C            	  1321: 	BPL.s		move_item			; if the item is not exploding go move the item
                            	  1322: 
                            	  1323: 							; else the item is exploding
00:0000A648 4400            	  1324: 	NEG.b		d0				; do twos complement [$A0 becones $60]
00:0000A64A E808            	  1325: 	LSR.b		#4,d0				; shift the high nibble to the low nibble
                            	  1326: 							; [$60 becomes $06]
00:0000A64C 5200            	  1327: 	ADDQ.b	#1,d0				; + 1
00:0000A64E 0C06001B        	  1328: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  1329: 							; compare the index with the player index
00:0000A652 6606            	  1330: 	BNE.s		skip_play_inc		; if not the player skip setting the player
                            	  1331: 							; increment
                            	  1332: 
                            	  1333: ; set the player explosion increment to 1/2 by only setting it to 1 on alternate loops
                            	  1334: 
00:0000A654 7001            	  1335: 	MOVEQ		#1,d0				; set game counter mask
00:0000A656 C06B0059        	  1336: 	AND.w		game_count(a3),d0		; mask the game counter
                            	  1337: skip_play_inc
00:0000A65A D035600C        	  1338: 	ADD.b		flags_off(a5,d6.w),d0	; add the item flag
00:0000A65E 6B2A            	  1339: 	BMI.s		item_exploding		; go handle the item still exploding
                            	  1340: 
00:0000A660 0C46001B        	  1341: 	CMPI.w	#p_flag_off-flags_off,d6
                            	  1342: 							; compare the index with the player index
00:0000A664 6716            	  1343: 	BEQ.s		go_reset_play		; if the player go reset the player and do next
                            	  1344: 
00:0000A666 641A            	  1345: 	BCC.s		go_reset_sauc		; if the saucer go reset the saucer and do next
                            	  1346: 
                            	  1347: 							; else it was a rock so clear it
00:0000A668 532D0076        	  1348: 	SUBQ.b	#1,rock_count(a5)		; decrement the rock count
00:0000A66C 6606            	  1349: 	BNE.s		no_new_rocks		; skip flag set if rocks still left
                            	  1350: 
00:0000A66E 1B7C007F007B    	  1351: 	MOVE.b	#$7F,new_rocks(a5)	; else set the generate new rocks flag
                            	  1352: no_new_rocks
00:0000A674 4235600C        	  1353: 	CLR.b		flags_off(a5,d6.w)	; clear the item flag
00:0000A678 60000096        	  1354: 	BRA		move_next_object		; go check next item
                            	  1355: 
                            	  1356: go_reset_play
00:0000A67C 610002E2        	  1357: 	BSR		player_reset		; reset the player velocity and position
00:0000A680 60F2            	  1358: 	BRA		no_new_rocks		; go clear the player and do the next item
                            	  1359: 
                            	  1360: ; reset the saucer timer
                            	  1361: 
                            	  1362: go_reset_sauc
00:0000A682 1B6D00780077    	  1363: 	MOVE.b	i_sauc_tim(a5),sauc_cntdn(a5)
                            	  1364: 							; get the small saucer boundary/initial saucer
                            	  1365: 							; timer and reset the saucer countdown timer
00:0000A688 60EA            	  1366: 	BRA.s		no_new_rocks		; go clear the saucer and do the next item
                            	  1367: 
                            	  1368: ; the item is still exploding
                            	  1369: 
                            	  1370: item_exploding
00:0000A68A 1B80600C        	  1371: 	MOVE.b	d0,flags_off(a5,d6.w)	; save the incremented item flag
00:0000A68E 1F00            	  1372: 	MOVE.b	d0,-(sp)			; save the byte
00:0000A690 321F            	  1373: 	MOVE.w	(sp)+,d1			; pull the word
00:0000A692 C27CF000        	  1374: 	AND.w		#$F000,d1			; mask the top nibble as the scale
00:0000A696 D27C1000        	  1375: 	ADD.w		#$1000,d1			; + $10
00:0000A69A 0C06001B        	  1376: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  1377: 							; compare the index with the player index
00:0000A69E 6602            	  1378: 	BNE.s		no_reset_scale		; if not the player ship skip the scale reset
                            	  1379: 
00:0000A6A0 7200            	  1380: 	MOVEQ		#$0000,d1			; else it was the player so reset the scale
                            	  1381: no_reset_scale
00:0000A6A2 6066            	  1382: 	BRA.s		keep_scale			; go add the object to the vector list and do
                            	  1383: 							; the next item
                            	  1384: 
                            	  1385: ; the item is not exploding so move the item
                            	  1386: 
                            	  1387: move_item:
00:0000A6A4 1035602F        	  1388: 	MOVE.b	x_vel_off(a5,d6.w),d0	; get the x velocity byte
00:0000A6A8 4880            	  1389: 	EXT.w		d0				; extend it to a word value
00:0000A6AA D0757080        	  1390: 	ADD.w		x_pos_off(a5,d7.w),d0	; add the x position
00:0000A6AE 6B06            	  1391: 	BMI.s		x_pos_neg			; if negative go mask to $2000
                            	  1392: 
00:0000A6B0 B07C2000        	  1393: 	CMP.w		#$2000,d0			; compare the object x position with $2000
00:0000A6B4 6510            	  1394: 	BCS.s		not_x_max			; if less go do y position
                            	  1395: 
                            	  1396: x_pos_neg
00:0000A6B6 02401FFF        	  1397: 	ANDI.w	#$1FFF,d0			; else wrap round the x position
                            	  1398: 
00:0000A6BA 0C06001C        	  1399: 	CMPI.b	#s_flag_off-flags_off,d6
                            	  1400: 							; compare the index with the saucer index
00:0000A6BE 6606            	  1401: 	BNE.s		not_x_max			; if not saucer continue
                            	  1402: 
                            	  1403: 							; else the saucer has passed the screen end
00:0000A6C0 487A004E        	  1404: 	PEA		move_next_object(pc)	; on RTS go check the next item
00:0000A6C4 6052            	  1405: 	BRA.s		clear_saucer		; clear the saucer and restart the saucer timer
                            	  1406: 
                            	  1407: not_x_max
00:0000A6C6 3B807080        	  1408: 	MOVE.w	d0,x_pos_off(a5,d7.w)	; save the new x position
                            	  1409: 
00:0000A6CA 10356052        	  1410: 	MOVE.b	y_vel_off(a5,d6.w),d0	; get the y velocity byte
00:0000A6CE 4880            	  1411: 	EXT.w		d0				; extend it to a word value
00:0000A6D0 D07570C6        	  1412: 	ADD.w		y_pos_off(a5,d7.w),d0	; add the y position
00:0000A6D4 6A06            	  1413: 	BPL.s		y_not_neg			; skip add if not < 0
                            	  1414: 
00:0000A6D6 D07C1800        	  1415: 	ADD.w		#$1800,d0			; else wrap round the y position
00:0000A6DA 600A            	  1416: 	BRA.s		not_y_max			; and skip the max check
                            	  1417: 
                            	  1418: y_not_neg
00:0000A6DC B07C1800        	  1419: 	CMP.w		#$1800,d0			; compare the object y position with $1800
00:0000A6E0 6504            	  1420: 	BCS.s		not_y_max			; if less just continue
                            	  1421: 
00:0000A6E2 907C1800        	  1422: 	SUB.w		#$1800,d0			; else wrap round the y position
                            	  1423: not_y_max
00:0000A6E6 3B8070C6        	  1424: 	MOVE.w	d0,y_pos_off(a5,d7.w)	; save the new y position
                            	  1425: 
00:0000A6EA 323CE000        	  1426: 	MOVE.w	#$E000,d1			; set the scale to $E000
00:0000A6EE 0C46001D        	  1427: 	CMPI.w	#s_fire_off-flags_off,d6
                            	  1428: 							; compare the index with the fire objects
00:0000A6F2 6416            	  1429: 	BCC.s		keep_scale			; if fire object keep this scale and go add the
                            	  1430: 							; item and do next
                            	  1431: 
00:0000A6F4 1035600C        	  1432: 	MOVE.b	flags_off(a5,d6.w),d0	; get the object flag
00:0000A6F8 08000000        	  1433: 	BTST.l	#0,d0				; test bit 0
00:0000A6FC 660C            	  1434: 	BNE.s		keep_scale			; if %xx1 keep this scale and go add the item
                            	  1435: 							; and do next
                            	  1436: 
00:0000A6FE 323CF000        	  1437: 	MOVE.w	#$F000,d1			; set the scale to $F000
00:0000A702 08000001        	  1438: 	BTST.l	#1,d0				; test bit 0
00:0000A706 6602            	  1439: 	BNE.s		keep_scale			; if %x10 keep this scale and go add the item
                            	  1440: 							; and do next
                            	  1441: 
00:0000A708 7200            	  1442: 	MOVEQ		#0,d1				; set the scale to $0000
                            	  1443: 
                            	  1444: ; add the item to the vector list and go do the next item
                            	  1445: 
                            	  1446: keep_scale
00:0000A70A 3681            	  1447: 	MOVE.w	d1,glob_scale(a3)		; save the global scale
00:0000A70C 610003DE        	  1448: 	BSR		add_to_list			; add an object to the vector list
                            	  1449: move_next_object
00:0000A710 5547            	  1450: 	SUBQ.w	#2,d7				; decrement the position index
00:0000A712 51CEFF2A        	  1451: 	DBF		d6,move_next_item		; decrement the count and loop if more to do
                            	  1452: 
00:0000A716 4E75            	  1453: 	RTS
                            	  1454: 
                            	  1455: 
                            	  1456: 
                            	  1457: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1458: ;
                            	  1459: ; clear the saucer and restart the saucer timer
                            	  1460: 
                            	  1461: clear_saucer:
00:0000A718 1B6D00780077    	  1462: 	move.b i_sauc_tim(a5),sauc_cntdn(a5)	
                            	  1463: 							; copy the small saucer boundary/initial saucer
                            	  1464: 							; timer to the saucer countdown timer
00:0000A71E 422D0028        	  1465: 	clr.b s_flag_off(a5)		; clear the saucer flag
00:0000A722 422D004B        	  1466: 	clr.b s_xvel_off(a5)		; clear the saucer x velocity byte
00:0000A726 422D006E        	  1467: 	clr.b s_yvel_off(a5)		; clear the saucer y velocity byte
00:0000A72A 4E75            	  1468: 	rts
                            	  1469: 
                            	  1470: 
                            	  1471: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1472: ;
                            	  1473: ; handle ship rotation and thrust
                            	  1474: 
                            	  1475: ship_move:
                            	  1476: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	  1477: ;##	BEQ.s		exit_ship_move		; if no players just exit
                            	  1478: 
00:0000A72C 4A2D0027        	  1479: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000A730 6B4A            	  1480: 	BMI.s		exit_ship_move		; if the player is exploding just exit
                            	  1481: 
00:0000A732 4A2D007A        	  1482: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000A736 6746            	  1483: 	BEQ.s		rot_and_thrust		; if the player is visible go handle the ship
                            	  1484: 							; rotate and thrust
                            	  1485: 
00:0000A738 532D007A        	  1486: 	SUBQ.b	#1,hide_p_cnt(a5)		; else decrement the hide the player count
00:0000A73C 663E            	  1487: 	BNE.s		exit_ship_move		; if not timed out just exit
                            	  1488: 
00:0000A73E 4A2B0026        	  1489: 	TST.b		hyper(a3)			; test the hyperspace flag
00:0000A742 6B1E            	  1490: 	BMI.s		kill_the_player		; if negative go handle an unsuccessful
                            	  1491: 							; hyperspace jump
                            	  1492: 
00:0000A744 6614            	  1493: 	BNE.s		reveal_player		; else if non zero go handle a successful
                            	  1494: 							; hyperspace jump
                            	  1495: 
                            	  1496: 							; else the player has just become visible
00:0000A746 610000F8        	  1497: 	BSR		check_clear			; check items within $0400 range of the player
00:0000A74A 662C            	  1498: 	BNE.s		clear_hyper			; if there are items within range go clear the
                            	  1499: 							; hyperspace flag and exit
                            	  1500: 
00:0000A74C 4A2D0028        	  1501: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000A750 6708            	  1502: 	BEQ.s		reveal_player		; if there's no saucer go reveal the player
                            	  1503: 
00:0000A752 1B7C0002007A    	  1504: 	MOVE.b	#$02,hide_p_cnt(a5)	; else set the hide the player count
00:0000A758 4E75            	  1505: 	RTS
                            	  1506: 
                            	  1507: ; handle a successful hyperspace jump
                            	  1508: 
                            	  1509: reveal_player
00:0000A75A 1B7C00010027    	  1510: 	MOVE.b	#$01,p_flag_off(a5)	; set the player flag
00:0000A760 6016            	  1511: 	BRA.s		clear_hyper			; go clear the hyperspace flag and return
                            	  1512: 
                            	  1513: ; handle an unsuccessful hyperspace jump
                            	  1514: 
                            	  1515: kill_the_player:
00:0000A762 1B7C00A00027    	  1516: 	MOVE.b	#$A0,p_flag_off(a5)	; flag that the player's ship is exploding
00:0000A768 532D0082        	  1517: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
00:0000A76C 1B7C0081007A    	  1518: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
                            	  1519: 
00:0000A772 7206            	  1520: 	MOVEQ		#mexpl_snd,d1		; set the medium explosion sound
00:0000A774 610025A2        	  1521: 	BSR		play_sample			; go play the sample
                            	  1522: clear_hyper
00:0000A778 422B0026        	  1523: 	CLR.b		hyper(a3)			; clear the hyperspace flag
                            	  1524: exit_ship_move
00:0000A77C 4E75            	  1525: 	RTS
                            	  1526: 
                            	  1527: ; handle the ship rotate and thrust
                            	  1528: 
                            	  1529: rot_and_thrust
                            	  1530: ;	MOVEQ		#0,d2				; assume no rotate
                            	  1531: ;	MOVE.l	#'L WQ',d1			; [L WQ] keys
                            	  1532: ;	MOVEQ		#19,d0			; check for keypress
                            	  1533: ;	TRAP		#15
00:0000A77E 7005            	  1534: 	moveq #5,d0
00:0000A780 4E4F            	  1535: 	trap #15
00:0000A782 0C010051        	  1536: 	cmpi.b #'Q',d1
00:0000A786 6602            	  1537: 	bne.s not_rot_left1
00:0000A788 7403            	  1538: 	moveq #3,d2
                            	  1539: not_rot_left1:
00:0000A78A 0C010057        	  1540: 	cmpi.b #'W',d1
00:0000A78E 6602            	  1541: 	bne.s not_rot_right1
00:0000A790 5702            	  1542: 	subq.b #3,d2
                            	  1543: not_rot_right1:
                            	  1544: 
                            	  1545: ;	TST.b		d1				; test the [Q] result
                            	  1546: ;	BPL.s		not_rot_left		; if not pressed go test rotate right
                            	  1547: 
                            	  1548: ;	MOVEQ		#3,d2				; if pressed set the rotation angle to + 3
                            	  1549: ;not_rot_left
                            	  1550: ;	TST.w		d1				; test the [W] result
                            	  1551: ;	BPL.s		not_rot_right		; if not pressed go add the rotation
                            	  1552: 
                            	  1553: ;	SUBQ.b	#3,d2				; if pressed set the rotation angle to - 3
                            	  1554: ;not_rot_right
00:0000A792 D52B001E        	  1555: 	add.b d2,p_orient(a3)		; add the roataion to the player orientation
                            	  1556: 
00:0000A796 7001            	  1557: 	moveq #1,d0				; set game counter mask
00:0000A798 C06B0059        	  1558: 	and.w game_count(a3),d0		; mask the game counter
00:0000A79C 66DE            	  1559: 	bne.s exit_ship_move		; just exit half the time
                            	  1560: 
00:0000A79E 0C01004C        	  1561: 	cmpi.b #'L',d1
00:0000A7A2 664C            	  1562: 	bne.s not_thrust
                            	  1563: ;	TST.l		d1				; test the [L] result
                            	  1564: ;	BPL.s		not_thrust			; if not pressed then go slow the ship
                            	  1565: 
                            	  1566: ; thrust button is pressed so increase the ship velocity
                            	  1567: 
00:0000A7A4 7202            	  1568: 	MOVEQ		#thrst_snd,d1		; set the thrust sound
00:0000A7A6 61002570        	  1569: 	BSR		play_sample			; play the sample and return
                            	  1570: 
00:0000A7AA 102B001E        	  1571: 	MOVE.b	p_orient(a3),d0		; get the player orientation
00:0000A7AE 610007CC        	  1572: 	BSR		cos_d0			; do COS(d0)
00:0000A7B2 EE40            	  1573: 	ASR.w		#7,d0				; scale to 1/128th
                            	  1574: 
00:0000A7B4 1F2D004A        	  1575: 	MOVE.b	p_xvel_off(a5),-(sp)	; get the x velocity high byte
00:0000A7B8 321F            	  1576: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A7BA 122D007E        	  1577: 	MOVE.b	p_xvlo_off(a5),d1		; get the x velocity low byte
00:0000A7BE D240            	  1578: 	ADD.w		d0,d1				; add the thrust x component
00:0000A7C0 6164            	  1579: 	BSR.s		check_velocity		; limit check the velocity in d1
00:0000A7C2 1B41007E        	  1580: 	MOVE.b	d1,p_xvlo_off(a5)		; save the x velocity low byte
00:0000A7C6 3F01            	  1581: 	MOVE.w	d1,-(sp)			; save the word
00:0000A7C8 1B5F004A        	  1582: 	MOVE.b	(sp)+,p_xvel_off(a5)	; save the x velocity high byte
                            	  1583: 
00:0000A7CC 102B001E        	  1584: 	MOVE.b	p_orient(a3),d0		; get the player orientation
00:0000A7D0 610007AE        	  1585: 	BSR		sin_d0			; do SIN(d0)
00:0000A7D4 EE40            	  1586: 	ASR.w		#7,d0				; scale to 1/128th
                            	  1587: 
00:0000A7D6 1F2D006D        	  1588: 	MOVE.b	p_yvel_off(a5),-(sp)	; get the y velocity high byte
00:0000A7DA 321F            	  1589: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A7DC 122D007F        	  1590: 	MOVE.b	p_yvlo_off(a5),d1		; get the y velocity low byte
00:0000A7E0 D240            	  1591: 	ADD.w		d0,d1				; add the thrust y component
00:0000A7E2 6142            	  1592: 	BSR.s		check_velocity		; limit check the velocity in d1
00:0000A7E4 1B41007F        	  1593: 	MOVE.b	d1,p_yvlo_off(a5)		; save the y velocity low byte
00:0000A7E8 3F01            	  1594: 	MOVE.w	d1,-(sp)			; save the word
00:0000A7EA 1B5F006D        	  1595: 	MOVE.b	(sp)+,p_yvel_off(a5)	; save the y velocity high byte
                            	  1596: 
00:0000A7EE 4E75            	  1597: 	RTS
                            	  1598: 
                            	  1599: ; thrust button is not pressed so slow the ship by adding - 128 ; velocity
                            	  1600: 
                            	  1601: not_thrust
00:0000A7F0 1F2D004A        	  1602: 	MOVE.b	p_xvel_off(a5),-(sp)	; get the x velocity high byte
00:0000A7F4 321F            	  1603: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A7F6 122D007E        	  1604: 	MOVE.b	p_xvlo_off(a5),d1		; get the x velocity low byte
00:0000A7FA 3001            	  1605: 	MOVE.w	d1,d0				; copy the x velocity
00:0000A7FC EE40            	  1606: 	ASR.w		#7,d0				; scale to 1/128th
00:0000A7FE 9240            	  1607: 	SUB.w		d0,d1				; subtract the x drag component
00:0000A800 1B41007E        	  1608: 	MOVE.b	d1,p_xvlo_off(a5)		; save the x velocity low byte
00:0000A804 3F01            	  1609: 	MOVE.w	d1,-(sp)			; save the word
00:0000A806 1B5F004A        	  1610: 	MOVE.b	(sp)+,p_xvel_off(a5)	; save the x velocity high byte
                            	  1611: 
                            	  1612: ; done the x velocity now do the y
                            	  1613: 
00:0000A80A 1F2D006D        	  1614: 	MOVE.b	p_yvel_off(a5),-(sp)	; get the y velocity high byte
00:0000A80E 321F            	  1615: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A810 122D007F        	  1616: 	MOVE.b	p_yvlo_off(a5),d1		; get the y velocity low byte
00:0000A814 3001            	  1617: 	MOVE.w	d1,d0				; copy the y velocity
00:0000A816 EE40            	  1618: 	ASR.w		#7,d0				; scale to 1/128th
00:0000A818 9240            	  1619: 	SUB.w		d0,d1				; subtract the y drag component
00:0000A81A 1B41007F        	  1620: 	MOVE.b	d1,p_yvlo_off(a5)		; save the y velocity low byte
00:0000A81E 3F01            	  1621: 	MOVE.w	d1,-(sp)			; save the word
00:0000A820 1B5F006D        	  1622: 	MOVE.b	(sp)+,p_yvel_off(a5)	; save the y velocity high byte
                            	  1623: 
00:0000A824 4E75            	  1624: 	RTS
                            	  1625: 
                            	  1626: 
                            	  1627: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1628: ;
                            	  1629: ; limit check the velocity in XA
                            	  1630: 
                            	  1631: check_velocity:
00:0000A826 6B0C            	  1632: 	BMI.s		check_neg_velocity	; if negative go check negative limit
                            	  1633: 
00:0000A828 0C414000        	  1634: 	CMPI.w	#$4000,d1			; compare velocity with positive limit
00:0000A82C 6510            	  1635: 	BCS.s		exit_check_velocity	; if less just exit
                            	  1636: 
00:0000A82E 323C3FFF        	  1637: 	MOVE.w	#$3FFF,d1			; else set the velocity
00:0000A832 4E75            	  1638: 	rts
                            	  1639: 
                            	  1640: ; velocity is negative so check against the negative limit
                            	  1641: 
                            	  1642: check_neg_velocity
00:0000A834 0C41C002        	  1643: 	CMPI.w	#$C002,d1			; compare velocity with negative limit
00:0000A838 6404            	  1644: 	BCC.s		exit_check_velocity	; if greater or equal just exit
                            	  1645: 
00:0000A83A 323CC001        	  1646: 	MOVE.w	#$C001,d1			; else set the velocity
                            	  1647: exit_check_velocity
00:0000A83E 4E75            	  1648: 	rts
                            	  1649: 
                            	  1650: 
                            	  1651: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1652: ;
                            	  1653: ; check items within $0400 range of the player
                            	  1654: 
                            	  1655: check_clear:
00:0000A840 7C1C            	  1656: 	moveq #s_flag_off-flags_off,d6
                            	  1657: 							; set the count/index to the saucer
00:0000A842 7E38            	  1658: 	moveq #s_xpos_off-x_pos_off,d7
                            	  1659: 							; set the index to the saucer position
                            	  1660: check_clear_loop
00:0000A844 4A35600C        	  1661: 	tst.b flags_off(a5,d6.w)	; test the item flag
00:0000A848 6F28            	  1662: 	BLE.s		not_closer			; if no item or exploding go do the next item
                            	  1663: 
00:0000A84A 30357080        	  1664: 	MOVE.w	x_pos_off(a5,d7.w),d0	; get the item x position
00:0000A84E 906DFFB6        	  1665: 	SUB.w		p_xpos_off(a5),d0		; subtract the player x position
00:0000A852 0C400400        	  1666: 	CMPI.w	#$0400,d0			; compare the result with $0400
00:0000A856 6506            	  1667: 	BCS.s		check_clear_y		; if closer go check the y distance
                            	  1668: 
00:0000A858 0C40FC00        	  1669: 	CMPI.w	#$FC00,d0			; compare the result with -$0400
00:0000A85C 6514            	  1670: 	BCS.s		not_closer			; if not closer go do the next item
                            	  1671: 
                            	  1672: check_clear_y
00:0000A85E 303570C6        	  1673: 	MOVE.w	y_pos_off(a5,d7.w),d0	; get the item y position
00:0000A862 906DFFFC        	  1674: 	SUB.w		p_ypos_off(a5),d0		; subtract the player y position
00:0000A866 0C400400        	  1675: 	CMPI.w	#$0400,d0			; compare the result with $0400
00:0000A86A 6510            	  1676: 	BCS.s		is_closer			; if closer go flag within distance and
                            	  1677: 							; increment the hide the player count
                            	  1678: 
00:0000A86C 0C40FC00        	  1679: 	CMPI.w	#$FC00,d0			; compare the result with -$0400
00:0000A870 640A            	  1680: 	BCC.s		is_closer			; if closer go flag within distance and
                            	  1681: 							; increment the hide the player count
                            	  1682: 
                            	  1683: not_closer
00:0000A872 5547            	  1684: 	SUBQ.w	#2,d7				; decrement the position index
00:0000A874 51CEFFCE        	  1685: 	DBF		d6,check_clear_loop	; decrement the count and loop if more to do
                            	  1686: 
00:0000A878 7000            	  1687: 	MOVEQ		#0,d0				; return Zb = 1
00:0000A87A 4E75            	  1688: 	rts
                            	  1689: 
                            	  1690: is_closer
00:0000A87C 522D007A        	  1691: 	ADDQ.b	#1,hide_p_cnt(a5)		; increment the hide the player count
                            	  1692: 							; return Zb = 0
00:0000A880 4E75            	  1693: 	rts
                            	  1694: 
                            	  1695: 
                            	  1696: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1697: ;
                            	  1698: ; generate new rocks
                            	  1699: 
                            	  1700: make_rocks:
00:0000A882 4A2D0028        	  1701: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000A886 660000A0        	  1702: 	BNE		exit_make_rocks		; if existing saucer just exit
                            	  1703: 
00:0000A88A 7C34            	  1704: 	MOVEQ		#p_xpos_off-x_pos_off-2,d6
                            	  1705: 							; set the index to the last rock position
00:0000A88C 7A1A            	  1706: 	MOVEQ		#p_flag_off-flags_off-1,d5
                            	  1707: 							; set the count/index to the last rock flag
00:0000A88E 4A2D007B        	  1708: 	TST.b		new_rocks(a5)		; test the generate new rocks flag
00:0000A892 6600008A        	  1709: 	BNE		clear_rocks			; if not counted out go clear all the rocks
                            	  1710: 
                            	  1711: ; these are used as the new rock initial velocity
                            	  1712: 
00:0000A896 7000            	  1713: 	MOVEQ		#0,d0				; clear the longword
00:0000A898 1B40004B        	  1714: 	MOVE.b	d0,s_xvel_off(a5)		; clear the saucer x velocity byte
00:0000A89C 1B40006E        	  1715: 	MOVE.b	d0,s_yvel_off(a5)		; clear the saucer y velocity byte
                            	  1716: 
00:0000A8A0 700A            	  1717: 	MOVEQ		#$0A,d0			; set the max value
00:0000A8A2 B02D007D        	  1718: 	CMP.b		min_rocks(a5),d0		; compare minimum rock count with $0A
00:0000A8A6 6504            	  1719: 	BCS.s		no_inc_min			; if > skip the increment
                            	  1720: 
00:0000A8A8 522D007D        	  1721: 	ADDQ.b	#1,min_rocks(a5)		; else decrement the minimum rock count before
                            	  1722: 							; the saucer initial timer starts to decrement
                            	  1723: no_inc_min
00:0000A8AC 7800            	  1724: 	MOVEQ		#0,d4				; clear the longword
00:0000A8AE 182D0075        	  1725: 	MOVE.b	i_rk_count(a5),d4		; get the initial rock count
00:0000A8B2 5404            	  1726: 	ADDQ.b	#2,d4				; + 2
00:0000A8B4 0C04000B        	  1727: 	CMPI.b	#11,d4			; compare the new rock count with 11 rocks
00:0000A8B8 6302            	  1728: 	BLS.s		no_set_max			; if less or equal just use it
                            	  1729: 
00:0000A8BA 780B            	  1730: 	MOVEQ		#11,d4			; else set the new rock count to 11
                            	  1731: no_set_max
00:0000A8BC 1B440076        	  1732: 	MOVE.b	d4,rock_count(a5)		; save the rock count
00:0000A8C0 1B440075        	  1733: 	MOVE.b	d4,i_rk_count(a5)		; save the initial rock count
                            	  1734: 
00:0000A8C4 7E1C            	  1735: 	MOVEQ		#s_xvel_off-x_vel_off,d7
                            	  1736: 							; set the index to the saucer for a zero initial
                            	  1737: 							; velocity
                            	  1738: 
00:0000A8C6 5344            	  1739: 	SUBQ.w	#1,d4				; adjust for the loop type
                            	  1740: gen_rock_loop
00:0000A8C8 610008C2        	  1741: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A8CC 7018            	  1742: 	MOVEQ		#$18,d0			; set the rock type mask
00:0000A8CE C02B000A        	  1743: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A8D2 00000004        	  1744: 	ORI.b		#$04,d0			; set the rock size to the largest
00:0000A8D6 1B80500C        	  1745: 	MOVE.b	d0,flags_off(a5,d5.w)	; save the rock flag
00:0000A8DA 610000C4        	  1746: 	BSR		copy_velocity		; copy the saucer velocity, (d7), plus a random
                            	  1747: 							; delta x,y velocity to the new rock, (d5),
                            	  1748: 							; velocity
                            	  1749: 
00:0000A8DE 610008AC        	  1750: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A8E2 7200            	  1751: 	MOVEQ		#0,d1				; clear the other axis position
00:0000A8E4 303C3FFF        	  1752: 	MOVE.w	#$3FFF,d0			; set the starting position mask
00:0000A8E8 C06B000A        	  1753: 	AND.w		PRNlword(a3),d0		; mask a pseudo random word
00:0000A8EC E248            	  1754: 	LSR.w		#1,d0				; shift a random bit into Cb
00:0000A8EE 640C            	  1755: 	BCC.s		rock_on_x			; if Cb = 0 go set the rock at a point along
                            	  1756: 							; the x axis
                            	  1757: 
                            	  1758: ; set the rock at a point along the y axis
                            	  1759: 
00:0000A8F0 0C401800        	  1760: 	CMPI.w	#$1800,d0			; compare the position with the y axis maximum
00:0000A8F4 6504            	  1761: 	BCS.s		rock_y_ok			; if less just use it
                            	  1762: 
00:0000A8F6 024017FF        	  1763: 	ANDI.w	#$17FF,d0			; mask the position to the y axis maximum
                            	  1764: rock_y_ok
00:0000A8FA C340            	  1765: 	EXG		d1,d0				; swap y value to d1, zero to d0
                            	  1766: 
                            	  1767: ; set the rock at a point along the x axis
                            	  1768: 
                            	  1769: rock_on_x
00:0000A8FC 3B806080        	  1770: 	MOVE.w	d0,x_pos_off(a5,d6.w)	; save the rock x position
00:0000A900 3B8160C6        	  1771: 	MOVE.w	d1,y_pos_off(a5,d6.w)	; save the rock y position
00:0000A904 5546            	  1772: 	SUBQ.w	#2,d6				; decrement the rock position index
00:0000A906 5345            	  1773: 	SUBQ.w	#1,d5				; decrement the rock count/index
00:0000A908 51CCFFBE        	  1774: 	DBF		d4,gen_rock_loop		; decrement the new rock count and loop if more
                            	  1775: 							; to do
                            	  1776: 
00:0000A90C 1B7C007F0077    	  1777: 	MOVE.b	#$7F,sauc_cntdn(a5)	; set the saucer countdown timer
00:0000A912 1B7C0034007C    	  1778: 	MOVE.b	#$34,thmp_sndi(a5)	; reset the thump sound change timer initial
                            	  1779: 							; value
00:0000A918 177C00080023    	  1780: 	MOVE.b	#beat1_snd,thump_snd(a3)
                            	  1781: 							; reset the thump sound value
                            	  1782: 
                            	  1783: ; now clear all the other rocks
                            	  1784: 
                            	  1785: clear_rocks
00:0000A91E 7000            	  1786: 	MOVEQ		#0,d0				; clear the longword
                            	  1787: clear_rocks_loop
00:0000A920 1B80500C        	  1788: 	MOVE.b	d0,flags_off(a5,d5.w)	; clear the rock flag
00:0000A924 51CDFFFA        	  1789: 	DBF		d5,clear_rocks_loop	; decrement the count and loop if more to do
                            	  1790: 
                            	  1791: exit_make_rocks
00:0000A928 4E75            	  1792: 	rts
                            	  1793: 
                            	  1794: 
                            	  1795: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1796: ;
                            	  1797: ; initialise the player variables
                            	  1798: 
                            	  1799: player_init:
00:0000A92A 1B6B001B0082    	  1800: 	move.b ss_count(a3),ships_off(a5)
                            	  1801: 							; set the player's starting ship count
00:0000A930 1B7C00920078    	  1802: 	move.b #$92,i_sauc_tim(a5)	; set the small saucer boundary/initial saucer
                            	  1803: 							; timer
00:0000A936 1B7C00920077    	  1804: 	move.b #$92,sauc_cntdn(a5)	; set the saucer countdown timer
00:0000A93C 1B7C007F007B    	  1805: 	move.b #$7F,new_rocks(a5)	; set the generate new rocks flag
                            	  1806: 
00:0000A942 1B7C0005007D    	  1807: 	move.b #$05,min_rocks(a5)	; set the minimum rock count before the saucer
                            	  1808: 							; initial timer starts to decrement
00:0000A948 1B7C0034007C    	  1809: 	move.b #$34,thmp_sndi(a5)	; reset the thump sound change timer initial
                            	  1810: 							; value
00:0000A94E 177C00080023    	  1811: 	move.b #beat1_snd,thump_snd(a3)	; reset the thump sound value
00:0000A954 1B7C00FF0083    	  1812: 	move.b #$FF,high_off(a5)		; clear the player highscore flag
00:0000A95A 1B7C0001007A    	  1813: 	move.b #$01,hide_p_cnt(a5)	; set the hide the player count
                            	  1814: 
                            	  1815: 
                            	  1816: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1817: ;
                            	  1818: ; reset the player velocity and position
                            	  1819: 
                            	  1820: player_reset:
00:0000A960 3B7C1000FFB6    	  1821: 	move.w #$1000,p_xpos_off(a5)	; set the player x position
00:0000A966 3B7C0C00FFFC    	  1822: 	move.w #$0C00,p_ypos_off(a5)	; set the player y position
00:0000A96C 422D004A        	  1823: 	clr.b p_xvel_off(a5)					; clear the player x velocity
00:0000A970 422D006D        	  1824: 	clr.b p_yvel_off(a5)					; clear the player y velocity
00:0000A974 4E75            	  1825: 	rts
                            	  1826: 
                            	  1827: 
                            	  1828: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1829: ;
                            	  1830: ; copy the item parameters from the old rock, (d7), to the new rock, (d5)
                            	  1831: 
                            	  1832: copy_rock:
00:0000A976 3807            	  1833: 	MOVE.w	d7,d4				; copy the old rock index
00:0000A978 D844            	  1834: 	ADD.w		d4,d4				; ; 2 for the old rock position index
                            	  1835: 
                            	  1836: copy_rock_2
00:0000A97A 3605            	  1837: 	MOVE.w	d5,d3				; copy the new rock index
00:0000A97C D643            	  1838: 	ADD.w		d3,d3				; ; 2 for the new rock position index
                            	  1839: 
00:0000A97E 7207            	  1840: 	MOVEQ		#$07,d1			; set the size mask
00:0000A980 C235700C        	  1841: 	AND.b		flags_off(a5,d7.w),d1	; mask the old rock size
00:0000A984 61000806        	  1842: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A988 7018            	  1843: 	MOVEQ		#$18,d0			; set the rock type mask
00:0000A98A C02B000A        	  1844: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A98E 8001            	  1845: 	OR.b		d1,d0				; OR in the old rock size
00:0000A990 1B80500C        	  1846: 	MOVE.b	d0,flags_off(a5,d5.w)	; save the new rock flag
                            	  1847: 
00:0000A994 3BB540803080    	  1848: 	MOVE.w	x_pos_off(a5,d4.w),x_pos_off(a5,d3.w)
                            	  1849: 							; copy the old rock x position to the new rock
                            	  1850: 							; x position
00:0000A99A 3BB540C630C6    	  1851: 	MOVE.w	y_pos_off(a5,d4.w),y_pos_off(a5,d3.w)
                            	  1852: 							; copy the old rock y position to the new rock
                            	  1853: 							; y position
                            	  1854: 
                            	  1855: 
                            	  1856: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1857: ;
                            	  1858: ; copy the old rock, (d7), velocity plus random delta x,y velocity to the new rock,
                            	  1859: ; (d5), velocity
                            	  1860: 
                            	  1861: copy_velocity:
00:0000A9A0 610007EA        	  1862: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A9A4 708F            	  1863: 	MOVEQ		#$8F,d0			; mask +/- $00 to $0F
00:0000A9A6 C02B000A        	  1864: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A9AA 6A04            	  1865: 	BPL.s		x_off_pos			; skip bits set if positive
                            	  1866: 
00:0000A9AC 00000070        	  1867: 	ORI.b		#$70,d0			; else make $Fx
                            	  1868: x_off_pos
00:0000A9B0 D035702F        	  1869: 	ADD.b		x_vel_off(a5,d7.w),d0	; add the item (d7) to the delta x velocity
00:0000A9B4 6120            	  1870: 	BSR.s		limit_velocity		; ensure velocity is within limits
00:0000A9B6 1B80502F        	  1871: 	MOVE.b	d0,x_vel_off(a5,d5.w)	; save the rock x velocity
                            	  1872: 
                            	  1873: 
00:0000A9BA 610007D0        	  1874: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A9BE 708F            	  1875: 	MOVEQ		#$8F,d0			; mask +/- $00 to $0F
00:0000A9C0 C02B000A        	  1876: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A9C4 6A04            	  1877: 	BPL.s		y_off_pos			; skip bits set if positive
                            	  1878: 
00:0000A9C6 00000070        	  1879: 	ORI.b		#$70,d0			; else make $Fx
                            	  1880: y_off_pos
00:0000A9CA D0357052        	  1881: 	ADD.b		y_vel_off(a5,d7.w),d0	; add the item (d5) to the delta y velocity
00:0000A9CE 6106            	  1882: 	BSR.s		limit_velocity		; ensure velocity is within limits
00:0000A9D0 1B805052        	  1883: 	MOVE.b	d0,y_vel_off(a5,d5.w)	; save the rock y velocity
                            	  1884: 
00:0000A9D4 4E75            	  1885: 	RTS
                            	  1886: 
                            	  1887: 
                            	  1888: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1889: ;
                            	  1890: ; ensure velocity is within limits
                            	  1891: 
                            	  1892: limit_velocity:
00:0000A9D6 6A12            	  1893: 	BPL.s		limit_p_vel			; if positive go test positive limit
                            	  1894: 
00:0000A9D8 0C0000E1        	  1895: 	CMPI.b	#$E1,d0			; compare velocity with upper limit
00:0000A9DC 6402            	  1896: 	BCC.s		neg_upper_ok		; if less skip set
                            	  1897: 
00:0000A9DE 70E1            	  1898: 	MOVEQ		#$E1,d0			; else set velocity to -$1F
                            	  1899: neg_upper_ok
00:0000A9E0 0C0000FB        	  1900: 	CMPI.b	#$FB,d0			; compare velocity with lower limit
00:0000A9E4 6514            	  1901: 	BCS.s		exit_limit_velocity	; if greater just exit
                            	  1902: 
00:0000A9E6 70FA            	  1903: 	MOVEQ		#$FA,d0			; else set velocity to -$06
00:0000A9E8 4E75            	  1904: 	RTS
                            	  1905: 
                            	  1906: ; test velocity positive limit
                            	  1907: 
                            	  1908: limit_p_vel
00:0000A9EA 0C000006        	  1909: 	CMPI.b	#$06,d0			; compare velocity with lower limit
00:0000A9EE 6402            	  1910: 	BCC.s		pos_lower_ok		; skip set if greater
                            	  1911: 
00:0000A9F0 7006            	  1912: 	MOVEQ		#$06,d0			; else set velocity to $06
                            	  1913: pos_lower_ok
00:0000A9F2 0C000020        	  1914: 	CMPI.b	#$20,d0			; compare velocity with upper limit
00:0000A9F6 6502            	  1915: 	BCS.s		exit_limit_velocity	; if less just exit
                            	  1916: 
00:0000A9F8 701F            	  1917: 	MOVEQ		#$1F,d0			; else set velocity to $1F
                            	  1918: exit_limit_velocity
00:0000A9FA 4E75            	  1919: 	RTS
                            	  1920: 
                            	  1921: 
                            	  1922: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1923: ;
                            	  1924: ; add (c), scores and players ships to the vector list
                            	  1925: 
                            	  1926: static_messages:
00:0000A9FC 43FA18EA        	  1927: 	LEA		copy_msg(pc),a1		; set the pointer to the copyright message
00:0000AA00 610006BA        	  1928: 	BSR		add_address			; convert the a1 address and add it to the
                            	  1929: 							; vector list as a vector subroutine call
                            	  1930: 
00:0000AA04 36BC1000        	  1931: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
00:0000AA08 7219            	  1932: 	MOVEQ		#$19,d1			; set the score x co-ordinate
00:0000AA0A 343C00D7        	  1933: 	MOVE.w	#$D7,d2			; set the score y co-ordinate
00:0000AA0E 610006C2        	  1934: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1935: 							; a draw command
                            	  1936: 
00:0000AA12 323C7000        	  1937: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000AA16 610006D4        	  1938: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  1939: 
00:0000AA1A 0C2B0002001A    	  1940: 	CMPI.b	#$02,num_players(a3)	; compare the number of players in the game
00:0000AA20 661E            	  1941: 	BNE.s		skip_play_flash		; if not two players skip flashing the active
                            	  1942: 							; player
                            	  1943: 
00:0000AA22 4A2B0018        	  1944: 	TST.b		player_idx(a3)		; test the player index
00:0000AA26 6618            	  1945: 	BNE.s		skip_play_flash		; if player 2 go add the player to the vector
                            	  1946: 							; list
                            	  1947: 
00:0000AA28 102D0027        	  1948: 	MOVE.b	p_flag_off(a5),d0		; get the player flag
00:0000AA2C 802B0026        	  1949: 	OR.b		hyper(a3),d0		; OR with the hyperspace flag
00:0000AA30 660E            	  1950: 	BNE.s		skip_play_flash		; if playing go add player 1's score to the
                            	  1951: 							; vector list
                            	  1952: 
00:0000AA32 4A2D007A        	  1953: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000AA36 6B08            	  1954: 	BMI.s		skip_play_flash		; if the player is dieing go display the score
                            	  1955: 
00:0000AA38 082B0004005A    	  1956: 	BTST.b	#4,game_count+1(a3)	; test a bit in the game counter low byte
00:0000AA3E 6714            	  1957: 	BEQ.s		do_p1_ships			; skip the score display if the flash is off
                            	  1958: 
                            	  1959: ; add the active player to the vector list
                            	  1960: 
                            	  1961: skip_play_flash
00:0000AA40 43EB0173        	  1962: 	LEA		p1_score(a3),a1		; point to player 1's score
00:0000AA44 7E02            	  1963: 	MOVEQ		#$02,d7			; set the number byte count
00:0000AA46 17470016        	  1964: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AA4A 61000512        	  1965: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  1966: 							; suppressed character string
00:0000AA4E 7200            	  1967: 	MOVEQ		#0,d1				; add player 1's score's trailing "0"
00:0000AA50 61000650        	  1968: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  1969: 
                            	  1970: do_p1_ships
00:0000AA54 7229            	  1971: 	MOVEQ		#$29,d1			; set the x co-ordinate for player 1's ships
00:0000AA56 7E00            	  1972: 	MOVEQ		#0,d7				; clear the longword
00:0000AA58 1E2B0175        	  1973: 	MOVE.b	p1_ships(a3),d7		; get player 1's ship count
00:0000AA5C 6100FBB2        	  1974: 	BSR		add_ships			; add d7 ships to the vector list
                            	  1975: 
00:0000AA60 4253            	  1976: 	MOVE.w	#$0000,glob_scale(a3)	; set the global scale
                            	  1977: 
00:0000AA62 7278            	  1978: 	MOVEQ		#$78,d1			; set the high score x co-ordinate
00:0000AA64 343C00D7        	  1979: 	MOVE.w	#$D7,d2			; set the high score y co-ordinate
00:0000AA68 61000668        	  1980: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1981: 							; a draw command
00:0000AA6C 323C5000        	  1982: 	MOVE.w	#REL5,d1			; make a $5000,$0000 command
00:0000AA70 6100067A        	  1983: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  1984: 
00:0000AA74 43EB0027        	  1985: 	LEA		hiscores(a3),a1		; point to the highest high score
00:0000AA78 7E02            	  1986: 	MOVEQ		#$02,d7			; set the number byte count
00:0000AA7A 17470016        	  1987: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AA7E 610004DE        	  1988: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  1989: 							; suppressed character string
                            	  1990: 
00:0000AA82 7200            	  1991: 	MOVEQ		#0,d1				; add the high score trailing "0"
00:0000AA84 6100061C        	  1992: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  1993: 
00:0000AA88 36BC1000        	  1994: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  1995: 
00:0000AA8C 323C00C0        	  1996: 	MOVE.w	#$C0,d1			; set the score x co-ordinate
00:0000AA90 343C00D7        	  1997: 	MOVE.w	#$D7,d2			; set the score y co-ordinate
00:0000AA94 6100063C        	  1998: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1999: 							; a draw command
00:0000AA98 323C5000        	  2000: 	MOVE.w	#REL5,d1			; make a $5000,$0000 command
00:0000AA9C 6100064E        	  2001: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2002: 
00:0000AAA0 0C2B0001001A    	  2003: 	CMPI.b	#$01,num_players(a3)	; compare the number of players in the game
                            	  2004: 							; with one
00:0000AAA6 6742            	  2005: 	BEQ.s		exit_static			; if just one player skip displaying p2 score
                            	  2006: 
00:0000AAA8 651E            	  2007: 	BCS.s		do_p2_score			; if no players go add player 2's score to
                            	  2008: 							; the vector list
                            	  2009: 
00:0000AAAA 4A2B0018        	  2010: 	TST.b		player_idx(a3)		; test the player index
00:0000AAAE 6718            	  2011: 	BEQ.s		do_p2_score			; if player 1 go add the player to the vector
                            	  2012: 							; list
                            	  2013: 
00:0000AAB0 102D0027        	  2014: 	MOVE.b	p_flag_off(a5),d0		; get the player flag
00:0000AAB4 802B0026        	  2015: 	OR.b		hyper(a3),d0		; OR with the hyperspace flag
00:0000AAB8 660E            	  2016: 	BNE.s		do_p2_score			; if playing go add player 2's score to the
                            	  2017: 							; vector list
                            	  2018: 
00:0000AABA 4A2D007A        	  2019: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000AABE 6B08            	  2020: 	BMI.s		do_p2_score			; if the player is dieing go display the score
                            	  2021: 
00:0000AAC0 082B0004005A    	  2022: 	BTST.b	#4,game_count+1(a3)	; test a bit in the game counter low byte
00:0000AAC6 6714            	  2023: 	BEQ.s		skip_p2_score		; skip the score display if the flash is off
                            	  2024: 
                            	  2025: do_p2_score
00:0000AAC8 43EB0277        	  2026: 	LEA		p2_score(a3),a1		; point to player 2's score
00:0000AACC 7E02            	  2027: 	MOVEQ		#$02,d7			; set the number byte count
00:0000AACE 17470016        	  2028: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AAD2 6100048A        	  2029: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  2030: 							; suppressed character string
00:0000AAD6 7200            	  2031: 	MOVEQ		#0,d1				; add player 2's score's trailing "0"
00:0000AAD8 610005C8        	  2032: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  2033: 
                            	  2034: skip_p2_score
00:0000AADC 323C00D0        	  2035: 	MOVE.w	#$D0,d1			; set the x co-ordinate for player 2's ships
00:0000AAE0 7E00            	  2036: 	MOVEQ		#0,d7				; clear the longword
00:0000AAE2 1E2B0279        	  2037: 	MOVE.b	p2_ships(a3),d7		; get player 2's ship count
00:0000AAE6 6000FB28        	  2038: 	BRA		add_ships			; add d7 ships to the vector list and return
                            	  2039: 
                            	  2040: exit_static
00:0000AAEA 4E75            	  2041: 	RTS
                            	  2042: 
                            	  2043: 
                            	  2044: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2045: ;
                            	  2046: ; add an item to the vector list
                            	  2047: ;
                            	  2048: ; d6 = object flag offset
                            	  2049: ; d7 = position offset
                            	  2050: 
                            	  2051: 							; first add the DRAW to the item's origin
                            	  2052: add_to_list:
00:0000AAEC 303570C6        	  2053: 	MOVE.w	y_pos_off(a5,d7.w),d0	; get the y position
00:0000AAF0 D07C0400        	  2054: 	ADD.w		#$0400,d0			; add offset so y is centred around 512
00:0000AAF4 E648            	  2055: 	LSR.w		#3,d0				; / 8
00:0000AAF6 0040A000        	  2056: 	ORI.w		#DRAW,d0			; OR in the draw command
00:0000AAFA 38C0            	  2057: 	MOVE.w	d0,(a4)+			; add it to the vector list
                            	  2058: 
00:0000AAFC 30357080        	  2059: 	MOVE.w	x_pos_off(a5,d7.w),d0	; get the x position
00:0000AB00 E648            	  2060: 	LSR.w		#3,d0				; / 8
00:0000AB02 8041            	  2061: 	OR.w		d1,d0				; OR in the global scale
00:0000AB04 38C0            	  2062: 	MOVE.w	d0,(a4)+			; add it to the vector list
                            	  2063: 
00:0000AB06 7200            	  2064: 	MOVEQ		#0,d1				; clear the longword
00:0000AB08 1235600C        	  2065: 	MOVE.b	flags_off(a5,d6.w),d1	; get the object flag
00:0000AB0C 6A12            	  2066: 	BPL.s		add_item			; if not exploding go add the item to the
                            	  2067: 							; vector list
                            	  2068: 
                            	  2069: 							; else add an exploding item
00:0000AB0E 0C06001B        	  2070: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  2071: 							; compare the index with the player index
00:0000AB12 6700014A        	  2072: 	BEQ		add_play_explode		; if it is the player go add ship pieces to the
                            	  2073: 							; vector list
                            	  2074: 
00:0000AB16 0201000C        	  2075: 	ANDI.b	#$0C,d1			; else mask the rock type
00:0000AB1A 43FA180C        	  2076: 	LEA		expl_tab(pc),a1		; point to the explosion JSRL table
00:0000AB1E 601A            	  2077: 	BRA.s		add_explode			; go add the JSRL word to the vector list and
                            	  2078: 							; return
                            	  2079: 
                            	  2080: ; add item d6 to the vector list
                            	  2081: 
                            	  2082: add_item:
00:0000AB20 0C06001B        	  2083: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  2084: 							; compare the index with the player index
00:0000AB24 670001DE        	  2085: 	BEQ		add_player			; if = go add the player to the vector list
                            	  2086: 
00:0000AB28 0C06001C        	  2087: 	CMPI.b	#s_flag_off-flags_off,d6
                            	  2088: 							; compare the index with the saucer index
00:0000AB2C 6712            	  2089: 	BEQ.s		add_saucer			; if = go add the saucer to the vector list
                            	  2090: 
00:0000AB2E 6416            	  2091: 	BCC.s		add_fire			; if > saucer go add fire to the vector list
                            	  2092: 
                            	  2093: 							; else add a rock to the vector list
00:0000AB30 02410018        	  2094: 	ANDI.w	#$0018,d1			; mask the rock type
00:0000AB34 E449            	  2095: 	LSR.w		#2,d1				; >> 3 << 1
00:0000AB36 43FA18D6        	  2096: 	LEA		rock_tab(pc),a1		; point to the rock JSRL table
                            	  2097: add_explode
00:0000AB3A 38F11000        	  2098: 	MOVE.w	(a1,d1.w),(a4)+		; add the JSRL word to the vector list
00:0000AB3E 4E75            	  2099: 	RTS
                            	  2100: 
                            	  2101: ; add the saucer to the vector list
                            	  2102: 
                            	  2103: add_saucer:
00:0000AB40 38FA193E        	  2104: 	MOVE.w	sauc_jsr(pc),(a4)+	; add the saucer JSRL to the vector list
00:0000AB44 4E75            	  2105: 	RTS
                            	  2106: 
                            	  2107: ; add fire to the vector list
                            	  2108: 
                            	  2109: add_fire:
00:0000AB46 38FA1E06        	  2110: 	MOVE.w	shot_jsr(pc),(a4)+	; add the shot JSRL to the vector list
                            	  2111: 
00:0000AB4A 7003            	  2112: 	MOVEQ		#3,d0				; set the game counter mask
00:0000AB4C C06B0059        	  2113: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000AB50 6604            	  2114: 	BNE.s		no_shot_dec			; skip the shot decrement 3/4 of the time
                            	  2115: 
00:0000AB52 5335600C        	  2116: 	SUBQ.b	#1,flags_off(a5,d6.w)	; decrement fire item (d7) flag
                            	  2117: no_shot_dec
00:0000AB56 4E75            	  2118: 	RTS
                            	  2119: 
                            	  2120: 
                            	  2121: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2122: ;
                            	  2123: ; add d1.b to the current player's score
                            	  2124: 
                            	  2125: add_score:
00:0000AB58 44FC0004        	  2126: 	MOVE.w	#4,CCR			; set Zb, clear everything else
00:0000AB5C 142D0081        	  2127: 	MOVE.b	score_off+1(a5),d2	; get the player's score, tens
00:0000AB60 C501            	  2128: 	ABCD.b	d1,d2				; add the value to the score
00:0000AB62 6422            	  2129: 	BCC.s		exit_add_score		; if no carry just exit
                            	  2130: 
00:0000AB64 7200            	  2131: 	MOVEQ		#0,d1				; clear the add high byte
00:0000AB66 102D0080        	  2132: 	MOVE.b	score_off(a5),d0		; get the player's score, thousands
00:0000AB6A C101            	  2133: 	ABCD.b	d1,d0				; add the value to the score
00:0000AB6C 1B400080        	  2134: 	MOVE.b	d0,score_off(a5)		; save the player's score, thousands
                            	  2135: 
00:0000AB70 0200000F        	  2136: 	ANDI.b	#$0F,d0			; mask the units of thousands
00:0000AB74 6610            	  2137: 	BNE.s		exit_add_score		; if the score is not x0000 just exit
                            	  2138: 
00:0000AB76 720A            	  2139: 	MOVEQ		#extra_snd,d1		; set the bonus ship sound
00:0000AB78 6100219E        	  2140: 	BSR		play_sample			; go play the sample
                            	  2141: 
00:0000AB7C 522D0082        	  2142: 	ADDQ.b	#1,ships_off(a5)		; increment the player's ship count
00:0000AB80 6604            	  2143: 	BNE.s		exit_add_score		; exit if not wrappwd
                            	  2144: 
00:0000AB82 532D0082        	  2145: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
                            	  2146: exit_add_score
00:0000AB86 1B420081        	  2147: 	MOVE.b	d2,score_off+1(a5)	; save the player's score, tens
00:0000AB8A 4E75            	  2148: 	RTS
                            	  2149: 
                            	  2150: 
                            	  2151: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2152: ;
                            	  2153: ; display the high score table if the game is over
                            	  2154: 
                            	  2155: high_scores:
00:0000AB8C 4A2B001A        	  2156: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000AB90 660000A0        	  2157: 	BNE		exit_no_scores		; if playing skip the high scores
                            	  2158: 
00:0000AB94 082B00020059    	  2159: 	BTST.b	#2,game_count(a3)		; test a bit in the game counter high byte
00:0000AB9A 66000096        	  2160: 	BNE		exit_no_scores		; if not high score time just exit
                            	  2161: 
00:0000AB9E 45EB0027        	  2162: 	LEA		hiscores(a3),a2		; point to the high score table
                            	  2163: 
00:0000ABA2 4A52            	  2164: 	TST.w		(a2)				; test the highest high score
00:0000ABA4 6700008C        	  2165: 	BEQ		exit_no_scores		; if the high score table is empty just exit
                            	  2166: 
00:0000ABA8 7200            	  2167: 	MOVEQ		#0,d1				; message 0 - "HIGH SCORES"
00:0000ABAA 61000470        	  2168: 	BSR		add_message			; add message d1 to the display list
                            	  2169: 
00:0000ABAE 36BC1000        	  2170: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  2171: 
00:0000ABB2 41EB003B        	  2172: 	LEA		hinames(a3),a0		; point to the high score names
00:0000ABB6 7C00            	  2173: 	MOVEQ		#0,d6				; clear the high score index
00:0000ABB8 377C00A70012    	  2174: 	MOVE.w	#$00A7,hiscore_y(a3)	; set the score's y co-ordinate
                            	  2175: high_scores_loop
00:0000ABBE 4A52            	  2176: 	TST.w		(a2)				; test the high score entry
00:0000ABC0 676A            	  2177: 	BEQ.s		exit_high_scores		; if this score is zero just exit
                            	  2178: 
00:0000ABC2 725F            	  2179: 	MOVEQ		#$5F,d1			; set the score's x co-ordinate
00:0000ABC4 342B0012        	  2180: 	MOVE.w	hiscore_y(a3),d2		; get the score's y co-ordinate
00:0000ABC8 61000508        	  2181: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  2182: 							; a draw command
                            	  2183: 
00:0000ABCC 323C4000        	  2184: 	MOVE.w	#REL4,d1			; make a $4000,$0000 command
00:0000ABD0 6100051A        	  2185: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2186: 
00:0000ABD4 43EB0017        	  2187: 	LEA		high_idx(a3),a1		; point to the high score index
00:0000ABD8 7E01            	  2188: 	MOVEQ		#$01,d7			; set the number byte count and the increment
00:0000ABDA 44FC0004        	  2189: 	MOVE.w	#4,CCR			; set Zb, clear everything else
00:0000ABDE CD07            	  2190: 	ABCD.b	d7,d6				; add to the high score index
00:0000ABE0 1286            	  2191: 	MOVE.b	d6,(a1)			; save the high score decimal index
00:0000ABE2 17470016        	  2192: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000ABE6 61000376        	  2193: 	BSR		output_number		; output a number as a leading zero suppressed
                            	  2194: 							; string
                            	  2195: 
                            	  2196: 							; set the point after the high score number
00:0000ABEA 323C4000        	  2197: 	MOVE.w	#REL4,d1			; make a $4000,$xx00 command
00:0000ABEE 3401            	  2198: 	MOVE.w	d1,d2				; make a $4000,$4000 command, point after entry
                            	  2199: 							; number
00:0000ABF0 610004FC        	  2200: 	BSR		add_pair			; add (d1)00,(d2)00 to the vector list
                            	  2201: 
00:0000ABF4 7200            	  2202: 	MOVEQ		#0,d1				; set [SPACE] character
00:0000ABF6 6100FA08        	  2203: 	BSR		add_character		; add character (d1) to the vector list
                            	  2204: 
00:0000ABFA 224A            	  2205: 	MOVEA.l	a2,a1				; point to the high score entry
00:0000ABFC 7E02            	  2206: 	MOVEQ		#$02,d7			; set the number byte count
00:0000ABFE 177C00FF0016    	  2207: 	MOVE.b	#-1,suppress_0(a3)	; set the flag to suppress leading zeros
00:0000AC04 61000358        	  2208: 	BSR		output_number		; output a number as a leading zero suppressed
                            	  2209: 							; string
                            	  2210: 
00:0000AC08 7200            	  2211: 	MOVEQ		#0,d1				; add the final "0"
00:0000AC0A 61000496        	  2212: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  2213: 
00:0000AC0E 7200            	  2214: 	MOVEQ		#0,d1				; set [SPACE] character
00:0000AC10 6100F9EE        	  2215: 	BSR		add_character		; add character (d1) to the vector list
                            	  2216: 
00:0000AC14 6100F9D0        	  2217: 	BSR		write_initial		; write a high score initial to the vector list
00:0000AC18 6100F9CC        	  2218: 	BSR		write_initial		; write a high score initial to the vector list
00:0000AC1C 6100F9C8        	  2219: 	BSR		write_initial		; write a high score initial to the vector list
                            	  2220: 
00:0000AC20 516B0012        	  2221: 	SUBQ.w	#8,hiscore_y(a3)		; subtract 8 from the score's y co-ordinate
00:0000AC24 544A            	  2222: 	ADDQ.w	#2,a2				; increment the high score pointer
                            	  2223: 
00:0000AC26 0C060010        	  2224: 	CMPI.b	#$10,d6			; compare the high score index with 10
00:0000AC2A 6592            	  2225: 	BCS.s		high_scores_loop		; loop if more to do
                            	  2226: 
                            	  2227: exit_high_scores
00:0000AC2C 003C0001        	  2228: 	ORI.b		#$01,CCR			; set the carry, flag scores displayed
00:0000AC30 4E75            	  2229: 	RTS
                            	  2230: 
                            	  2231: exit_no_scores
00:0000AC32 023C00FE        	  2232: 	ANDI.b	#$FE,CCR			; clear the carry, flag scores not displayed
00:0000AC36 4E75            	  2233: 	RTS
                            	  2234: 
                            	  2235: 
                            	  2236: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2237: ;
                            	  2238: ; find a free rock item, the index is returned in d5
                            	  2239: 
                            	  2240: find_rock:
00:0000AC38 7A1A            	  2241: 	MOVEQ		#p_flag_off-flags_off-1,d5
                            	  2242: 							; set the count/index to the last rock flag
                            	  2243: 
                            	  2244: ; find a free rock item from d5
                            	  2245: 
                            	  2246: find_next_rock
00:0000AC3A 4A35500C        	  2247: 	TST.b		flags_off(a5,d5.w)	; test the rock flag
00:0000AC3E 6704            	  2248: 	BEQ.s		exit_find_rock		; if free return this index
                            	  2249: 
00:0000AC40 51CDFFF8        	  2250: 	DBF		d5,find_next_rock		; else loop if more to do
                            	  2251: 
                            	  2252: exit_find_rock
00:0000AC44 4E75            	  2253: 	RTS
                            	  2254: 
                            	  2255: 
                            	  2256: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2257: ;
                            	  2258: ; wrecked ship piece x,y velocities
                            	  2259: 
                            	  2260: ship_wrk_x
00:0000AC46 FFD8            	  2261: 	dc.w	$FFD8					; x
00:0000AC48 0032            	  2262: 	dc.w	$0032					; x
00:0000AC4A 0000            	  2263: 	dc.w	$0000					; x
00:0000AC4C 003C            	  2264: 	dc.w	$003C					; x
00:0000AC4E 000A            	  2265: 	dc.w	$000A					; x
00:0000AC50 FFD8            	  2266: 	dc.w	$FFD8					; x
                            	  2267: 
                            	  2268: ship_wrk_y
00:0000AC52 001E            	  2269: 	dc.w	$001E					; y
00:0000AC54 FFEC            	  2270: 	dc.w	$FFEC					; y
00:0000AC56 FFC4            	  2271: 	dc.w	$FFC4					; y
00:0000AC58 0014            	  2272: 	dc.w	$0014					; y
00:0000AC5A 0046            	  2273: 	dc.w	$0046					; y
00:0000AC5C FFD8            	  2274: 	dc.w	$FFD8					; y
                            	  2275: 
                            	  2276: 
                            	  2277: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2278: ;
                            	  2279: ; add the player explosion to the vector list
                            	  2280: 
                            	  2281: add_play_explode:
00:0000AC5E 48E70300        	  2282: 	MOVEM.l	d6-d7,-(sp)			; save the registers
00:0000AC62 7200            	  2283: 	MOVEQ		#0,d1				; clear the longword
00:0000AC64 122D0027        	  2284: 	MOVE.b	p_flag_off(a5),d1		; get the player flag
00:0000AC68 0C0100A2        	  2285: 	CMPI.b	#$A2,d1			; compare the player flag with $A2
00:0000AC6C 641A            	  2286: 	BCC.s		no_reset_xy			; if >= $A2 skip resetting the explosion
                            	  2287: 							; start point
                            	  2288: 
                            	  2289: 							; else reset the explosion start point
00:0000AC6E 7E0A            	  2290: 	MOVEQ		#$0A,d7			; set the index to the last piece x,y pair
                            	  2291: reset_xy_loop
00:0000AC70 303B70D4        	  2292: 	MOVE.w	ship_wrk_x(pc,d7.w),d0	; get the x velocity word
00:0000AC74 E948            	  2293: 	LSL.w		#4,d0				; ; 16
00:0000AC76 3780705B        	  2294: 	MOVE.w	d0,expl_x_pos(a3,d7.w)	; save the x position word
                            	  2295: 
00:0000AC7A 303B70D6        	  2296: 	MOVE.w	ship_wrk_y(pc,d7.w),d0	; get the y velocity word
00:0000AC7E E948            	  2297: 	LSL.w		#4,d0				; ; 16
00:0000AC80 37807067        	  2298: 	MOVE.w	d0,expl_y_pos(a3,d7.w)	; save the y position word
                            	  2299: 
00:0000AC84 5547            	  2300: 	SUBQ.w	#2,d7				; decrement the index
00:0000AC86 6AE8            	  2301: 	BPL.s		reset_xy_loop		; loop if more to do
                            	  2302: 
                            	  2303: ; now use the player flag as the start index to the ship pieces. this means there will
                            	  2304: ; be less pieces as the explosion progresses
                            	  2305: 
                            	  2306: no_reset_xy
00:0000AC88 7070            	  2307: 	MOVEQ		#$70,d0			; set the mask
00:0000AC8A B101            	  2308: 	EOR.b		d0,d1				; toggle the player flag
00:0000AC8C C200            	  2309: 	AND.b		d0,d1				; mask the player flag
00:0000AC8E E609            	  2310: 	LSR.b		#3,d1				; / 16 ; 2 gives the piece start index
00:0000AC90 3E01            	  2311: 	MOVE.w	d1,d7				; copy the index
                            	  2312: 
                            	  2313: 							; the piece draw loop	
                            	  2314: piece_draw_loop
00:0000AC92 303B70B2        	  2315: 	MOVE.w	ship_wrk_x(pc,d7.w),d0	; get the x velocity word
00:0000AC96 D073705B        	  2316: 	ADD.w		expl_x_pos(a3,d7.w),d0	; add the x position word
00:0000AC9A 3780705B        	  2317: 	MOVE.w	d0,expl_x_pos(a3,d7.w)	; save the x position word
                            	  2318: 
00:0000AC9E 323B70B2        	  2319: 	MOVE.w	ship_wrk_y(pc,d7.w),d1	; get the y velocity word
00:0000ACA2 D2737067        	  2320: 	ADD.w		expl_y_pos(a3,d7.w),d1	; add the y position word
00:0000ACA6 37817067        	  2321: 	MOVE.w	d1,expl_y_pos(a3,d7.w)	; save the y position word
                            	  2322: 
00:0000ACAA 244C            	  2323: 	MOVEA.l	a4,a2				; copy the vector pointer
                            	  2324: 
00:0000ACAC 7400            	  2325: 	MOVEQ		#0,d2				; clear the x sign bit
00:0000ACAE 4A40            	  2326: 	TST.w		d0				; test the x position word
00:0000ACB0 6A06            	  2327: 	BPL.s		vec_x_pos			; if positive skip the negate
                            	  2328: 
00:0000ACB2 4440            	  2329: 	NEG.w		d0				; else negate the x position, make it positive
00:0000ACB4 343C0400        	  2330: 	MOVE.w	#$0400,d2			; and set the x sign bit
                            	  2331: vec_x_pos
                            	  2332: 
00:0000ACB8 7600            	  2333: 	MOVEQ		#0,d3				; clear the y sign bit
00:0000ACBA 4A41            	  2334: 	TST.w		d1				; test the y position word
00:0000ACBC 6A06            	  2335: 	BPL.s		vec_y_pos			; if positive skip the negate
                            	  2336: 
00:0000ACBE 4441            	  2337: 	NEG.w		d1				; else negate the y position, make it positive
00:0000ACC0 363C0400        	  2338: 	MOVE.w	#$0400,d3			; and set the y sign bit
                            	  2339: vec_y_pos
00:0000ACC4 E848            	  2340: 	LSR.w		#4,d0				; shift the x position
00:0000ACC6 E849            	  2341: 	LSR.w		#4,d1				; shift the y position
                            	  2342: 
00:0000ACC8 8042            	  2343: 	OR.w		d2,d0				; OR in the x sign bit
00:0000ACCA 00416000        	  2344: 	ORI.w		#$6000,d1			; fix the scale
00:0000ACCE 8243            	  2345: 	OR.w		d3,d1				; OR in the y sign bit
                            	  2346: 
00:0000ACD0 38C1            	  2347: 	MOVE.w	d1,(a4)+			; add y position to the vector list
00:0000ACD2 38C0            	  2348: 	MOVE.w	d0,(a4)+			; add x position to the vector list
                            	  2349: 
                            	  2350: 							; add the piece vector to the list
                            	  2351: 
00:0000ACD4 303B7022        	  2352: 	MOVE.w	ship_parts(pc,d7.w),d0	; get wrecked ship piece vector word
00:0000ACD8 38C0            	  2353: 	MOVE.w	d0,(a4)+			; add the wrecked ship piece vector word to the
                            	  2354: 							; vector list
                            	  2355: 
00:0000ACDA 0A400404        	  2356: 	EORI.w	#$0404,d0			; toggle the sign bits
00:0000ACDE 0240FF0F        	  2357: 	ANDI.w	#$FF0F,d0			; clear the intensity bits
00:0000ACE2 38C0            	  2358: 	MOVE.w	d0,(a4)+			; add the inverse wrecked ship piece vector word
                            	  2359: 							; to the vector list
                            	  2360: 
                            	  2361: 							; now copy an inverse relative long vector to
                            	  2362: 							; the list
00:0000ACE4 2012            	  2363: 	MOVE.l	(a2),d0			; get the vector to the piece
00:0000ACE6 0A8004000400    	  2364: 	EORI.l	#$04000400,d0		; toggle the sign bits
00:0000ACEC 28C0            	  2365: 	MOVE.l	d0,(a4)+			; save the inverse vector to the list
                            	  2366: 
00:0000ACEE 5547            	  2367: 	SUBQ.w	#2,d7				; decrement the index
00:0000ACF0 6AA0            	  2368: 	BPL		piece_draw_loop		; loop if more to do
                            	  2369: 
00:0000ACF2 4CDF00C0        	  2370: 	MOVEM.l	(sp)+,d6-d7			; restore the registers
00:0000ACF6 4E75            	  2371: 	rts
                            	  2372: 
                            	  2373: 
                            	  2374: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2375: ;
                            	  2376: ; pieces of wrecked ship
                            	  2377: 
                            	  2378: ship_parts
00:0000ACF8 FFC6            	  2379: 	dc.w	$FFC6				; x = -2, Y = -3
00:0000ACFA FEC1            	  2380: 	dc.w	$FEC1				; x =  1, Y = -2
00:0000ACFC F1C3            	  2381: 	dc.w	$F1C3				; x =  3, Y =  1
00:0000ACFE F1CD            	  2382: 	dc.w	$F1CD				; x = -1, Y =  1
00:0000AD00 F1C7            	  2383: 	dc.w	$F1C7				; x = -3, Y =  1
00:0000AD02 FDC1            	  2384: 	dc.w	$FDC1				; x =  1, Y = -1
                            	  2385: 
                            	  2386: 
                            	  2387: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2388: ;
                            	  2389: ; add the player ship to the vector list
                            	  2390: 
                            	  2391: add_player:
00:0000AD04 7600            	  2392: 	MOVEQ		#0,d3				; clear the x_sign
00:0000AD06 7400            	  2393: 	MOVEQ		#0,d2				; clear the y_sign
00:0000AD08 7800            	  2394: 	MOVEQ		#0,d4				; yx_sign
                            	  2395: 
00:0000AD0A 122B001E        	  2396: 	MOVE.b	p_orient(a3),d1		; get the player orientation
00:0000AD0E 6A0A            	  2397: 	BPL.s		no_pos_reflect		; if positive skip reflection
                            	  2398: 
00:0000AD10 343C0400        	  2399: 	MOVE.w	#$0400,d2			; set the y_sign
00:0000AD14 3802            	  2400: 	MOVE.w	d2,d4				; set the yx_sign
00:0000AD16 4401            	  2401: 	NEG.b		d1				; make ABS orientation
00:0000AD18 6B06            	  2402: 	BMI.s		third_quad			; if still negative go do the third quad
                            	  2403: 
                            	  2404: no_pos_reflect
00:0000AD1A 08010006        	  2405: 	BTST.l	#6,d1				; test the quadrant
00:0000AD1E 670E            	  2406: 	BEQ.s		first_quad			; skip reflect if in first quadrant
                            	  2407: 
                            	  2408: third_quad
00:0000AD20 363C0400        	  2409: 	MOVE.w	#$0400,d3			; set the x_sign
00:0000AD24 183C0004        	  2410: 	MOVE.b	#$04,d4			; set the yx_sign
                            	  2411: 
00:0000AD28 4401            	  2412: 	NEG.b		d1				; negate the byte
00:0000AD2A D23C0080        	  2413: 	ADD.b		#$80,d1			; reflect the quadrant
                            	  2414: first_quad
00:0000AD2E E209            	  2415: 	LSR.b		#1,d1				; do quadrant value / 2
00:0000AD30 C23C003E        	  2416: 	AND.b		#$3E,d1			; mask to word boundary, value is $00 to $20
                            	  2417: 
00:0000AD34 43FA1768        	  2418: 	LEA		play_tab(pc),a1		; point to the player ship table
00:0000AD38 32311000        	  2419: 	MOVE.w	(a1,d1.w),d1		; get the offset to the player ship
00:0000AD3C 43F11000        	  2420: 	LEA		(a1,d1.w),a1		; get the pointer to the player ship
00:0000AD40 6118            	  2421: 	BSR.s		copy_vectors		; copy the vectors from (a1) to the vector list
                            	  2422: 
                            	  2423: ;	MOVEQ		#'L',d1			; set for the thrust button
                            	  2424: ;	MOVEQ		#19,d0			; check for keypress
                            	  2425: ;	TRAP		#15
00:0000AD42 7005            	  2426: 	moveq #5,d0
00:0000AD44 4E4F            	  2427: 	trap #15
00:0000AD46 0C01004C        	  2428: 	cmpi.b #'L',d1
00:0000AD4A 6608            	  2429: 	bne.s no_thrust
                            	  2430: 
                            	  2431: ;	TST.b		d1				; test the result
                            	  2432: ;	BEQ.s		no_thrust			; if not pressed then skip the thrust copy
                            	  2433: 
00:0000AD4C 7003            	  2434: 	MOVEQ		#3,d0				; set the game counter mask
00:0000AD4E C06B0059        	  2435: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000AD52 6606            	  2436: 	BNE.s		copy_vectors		; 3/4 of the time go copy the vectors from (a1)
                            	  2437: 							; to the vector list and return
                            	  2438: no_thrust
00:0000AD54 4E75            	  2439: 	RTS
                            	  2440: 
                            	  2441: 
                            	  2442: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2443: ;
                            	  2444: ; copy the vectors from (a1) to the vector list
                            	  2445: 
                            	  2446: copy_short:
00:0000AD56 B940            	  2447: 	EOR.w		d4,d0				; possibly toggle the x and y signs
00:0000AD58 38C0            	  2448: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
                            	  2449: 
                            	  2450: copy_vectors
00:0000AD5A 3019            	  2451: 	MOVE.w	(a1)+,d0			; get a vector word
00:0000AD5C B07CF000        	  2452: 	CMP.w		#SHRT,d0			; compare with short form vector
00:0000AD60 64F4            	  2453: 	BCC.s		copy_short			; if short vector go copy it
                            	  2454: 
00:0000AD62 B07CA000        	  2455: 	CMP.w		#DRAW,d0			; compare with the DRAW command
00:0000AD66 640C            	  2456: 	BCC.s		exit_copy_vectors		; if DRAW or greater exit the vector copy
                            	  2457: 
                            	  2458: ; else it is a long vector
                            	  2459: 
00:0000AD68 B540            	  2460: 	EOR.w		d2,d0				; possibly toggle the y sign
00:0000AD6A 38C0            	  2461: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
00:0000AD6C 3019            	  2462: 	MOVE.w	(a1)+,d0			; get the second vector word
00:0000AD6E B740            	  2463: 	EOR.w		d3,d0				; possibly toggle the x sign
00:0000AD70 38C0            	  2464: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
00:0000AD72 60E6            	  2465: 	BRA.s		copy_vectors		; go do the next word
                            	  2466: 
                            	  2467: ; it's a short form vector
                            	  2468: 
                            	  2469: exit_copy_vectors
00:0000AD74 4E75            	  2470: 	RTS
                            	  2471: 
                            	  2472: 
                            	  2473: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2474: ;
                            	  2475: ; do the game sounds
                            	  2476: 
                            	  2477: fx_sounds:
00:0000AD76 7200            	  2478: 	MOVEQ		#0,d1				; clear the longword
00:0000AD78 122D0028        	  2479: 	MOVE.b	s_flag_off(a5),d1		; get the saucer flag
00:0000AD7C 6F06            	  2480: 	BLE.s		no_saucer_sound		; if no saucer or the saucer is exploding skip
                            	  2481: 							; the saucer sound
                            	  2482: 
00:0000AD7E 5401            	  2483: 	ADDQ.b	#smsau_snd-1,d1		; add the small saucer sound to the size
00:0000AD80 61001F96        	  2484: 	BSR		play_sample			; go play the sample
                            	  2485: no_saucer_sound
00:0000AD84 4A2D0076        	  2486: 	TST.b		rock_count(a5)		; test the rock count
00:0000AD88 672C            	  2487: 	BEQ.s		no_thump_sound		; if no rocks skip the thump sound
                            	  2488: 
00:0000AD8A 4A2D0027        	  2489: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000AD8E 6F26            	  2490: 	BLE.s		no_thump_sound		; if no player or the player is exploding skip
                            	  2491: 							; the thump sound
                            	  2492: 
00:0000AD90 4A2B0026        	  2493: 	TST.b		hyper(a3)			; test the hyperspace flag
00:0000AD94 6620            	  2494: 	BNE.s		no_thump_sound		; if in hyperspace skip the thump sound
                            	  2495: 
00:0000AD96 532B0024        	  2496: 	SUBQ.b	#1,thump_time(a3)		; decrement the thump sound change timer
00:0000AD9A 661A            	  2497: 	BNE.s		no_thump_sound		; skip changing the sound if not timed out
                            	  2498: 
00:0000AD9C 7004            	  2499: 	MOVEQ		#4,d0				; add the sound on time
00:0000AD9E D02D007C        	  2500: 	ADD.b		thmp_sndi(a5),d0		; add the thump sound change timer initial
00:0000ADA2 17400024        	  2501: 	MOVE.b	d0,thump_time(a3)		; save the thump sound change timer
                            	  2502: 
00:0000ADA6 7001            	  2503: 	MOVEQ		#1,d0				; set the bitmap change mask
00:0000ADA8 122B0023        	  2504: 	MOVE.b	thump_snd(a3),d1		; get the thump sound value
00:0000ADAC B101            	  2505: 	EOR.b		d0,d1				; change the thump sound value
00:0000ADAE 17410023        	  2506: 	MOVE.b	d1,thump_snd(a3)		; save the thump sound value
00:0000ADB2 60001F64        	  2507: 	BRA		play_sample			; go play the sample and return
                            	  2508: 
                            	  2509: no_thump_sound
00:0000ADB6 4E75            	  2510: 	RTS
                            	  2511: 
                            	  2512: 
                            	  2513: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2514: ;
                            	  2515: ; handle something hitting a rock
                            	  2516: 
                            	  2517: ; d6 = player/saucer/shot object index
                            	  2518: ; d7 = object index
                            	  2519: 
                            	  2520: hit_a_rock:
00:0000ADB8 1B7C00500079    	  2521: 	MOVE.b	#$50,r_hit_tim(a5)	; set the rock hit timer
00:0000ADBE 1035700C        	  2522: 	MOVE.b	flags_off(a5,d7.w),d0	; get the rock flag
00:0000ADC2 7278            	  2523: 	MOVEQ		#$78,d1			; set the mask for the rock type
00:0000ADC4 C200            	  2524: 	AND.b		d0,d1				; mask the rock type
                            	  2525: 
00:0000ADC6 02400007        	  2526: 	ANDI.w	#$07,d0			; mask the rock size
00:0000ADCA E248            	  2527: 	LSR.w		#1,d0				; / 2
00:0000ADCC 3400            	  2528: 	MOVE.w	d0,d2				; copy the size
00:0000ADCE 6702            	  2529: 	BEQ.s		clear_rock			; if the size is zero then the rock is destroyed
                            	  2530: 							; so go clear the rock flag
                            	  2531: 
00:0000ADD0 8001            	  2532: 	OR.b		d1,d0				; else OR back the rock type
                            	  2533: clear_rock
00:0000ADD2 1B80700C        	  2534: 	MOVE.b	d0,flags_off(a5,d7.w)	; save the rock flag
                            	  2535: 
00:0000ADD6 4A2B001A        	  2536: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000ADDA 6712            	  2537: 	BEQ.s		skip_add			; if no players skip the score add
                            	  2538: 
00:0000ADDC 4A46            	  2539: 	TST.w		d6				; test the player/saucer/shot index
00:0000ADDE 6706            	  2540: 	BEQ.s		add_to_score		; if the player hit the rock go add it to the
                            	  2541: 							; player's score
                            	  2542: 
00:0000ADE0 0C460004        	  2543: 	CMPI.w	#p_fire_off-p_flag_off,d6
                            	  2544: 							; compare the player/saucer/shot index with the
                            	  2545: 							; first of the player's fire
00:0000ADE4 6508            	  2546: 	BCS.s		skip_add			; if < the player's fire skip adding to the
                            	  2547: 							; player's score
                            	  2548: 
                            	  2549: add_to_score
00:0000ADE6 123B2042        	  2550: 	MOVE.b	rock_score(pc,d2.w),d1	; get the score per rock size
00:0000ADEA 6100FD6C        	  2551: 	BSR		add_score			; add d1.b to the current player's score
                            	  2552: skip_add
00:0000ADEE 4A35700C        	  2553: 	TST.b		flags_off(a5,d7.w)	; test the rock flag
00:0000ADF2 6734            	  2554: 	BEQ.s		exit_hit_a_rock		; if the rock was destroyed just exit
                            	  2555: 
                            	  2556: ; else break the rock into none, one, or two smaller rocks
                            	  2557: 
00:0000ADF4 6100FE42        	  2558: 	BSR		find_rock			; find a free rock, the index is returned in d5
00:0000ADF8 662E            	  2559: 	BNE.s		exit_hit_a_rock		; if there are no free rocks just exit
                            	  2560: 
00:0000ADFA 522D0076        	  2561: 	ADDQ.b	#1,rock_count(a5)		; else increment the rock count
                            	  2562: 
00:0000ADFE 6100FB76        	  2563: 	BSR		copy_rock			; copy the item parameters from the old rock,
                            	  2564: 							; (d7), to the new rock, (d5)
                            	  2565: 
00:0000AE02 701F            	  2566: 	MOVEQ		#$1F,d0			; set the mask for the low 5 bits
00:0000AE04 C035502F        	  2567: 	AND.b		x_vel_off(a5,d5.w),d0	; get the new rock x velocity byte
00:0000AE08 D000            	  2568: 	ADD.b		d0,d0				; ; 2
00:0000AE0A B1353081        	  2569: 	EOR.b		d0,x_pos_off+1(a5,d3.w)	; purturb the new rock x position low byte
                            	  2570: 
00:0000AE0E 6100FE2A        	  2571: 	BSR		find_next_rock		; find a free rock from d5, the index is
                            	  2572: 							; returned in d5
00:0000AE12 6614            	  2573: 	BNE.s		exit_hit_a_rock		; if there are no free rocks just exit
                            	  2574: 
00:0000AE14 522D0076        	  2575: 	ADDQ.b	#1,rock_count(a5)		; else increment the rock count
                            	  2576: 
00:0000AE18 6100FB60        	  2577: 	BSR		copy_rock_2			; copy the item parameters from the old rock,
                            	  2578: 							; (d7), to the new rock, (d5)
                            	  2579: 
00:0000AE1C 701F            	  2580: 	MOVEQ		#$1F,d0			; set the mask for the low 5 bits
00:0000AE1E C0355052        	  2581: 	AND.b		y_vel_off(a5,d5.w),d0	; get the new rock y velocity byte
00:0000AE22 D000            	  2582: 	ADD.b		d0,d0				; ; 2
00:0000AE24 B13530C7        	  2583: 	EOR.b		d0,y_pos_off+1(a5,d3.w)	; purturb the new rock y position low byte
                            	  2584: exit_hit_a_rock
00:0000AE28 4E75            	  2585: 	RTS
                            	  2586: 
                            	  2587: 
                            	  2588: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2589: ;
                            	  2590: ; score per rock size
                            	  2591: 
                            	  2592: rock_score
00:0000AE2A 10              	  2593: 	dc.b	$10					; 100 points, small rock
00:0000AE2B 05              	  2594: 	dc.b	$05					;  50 points, medium rock
00:0000AE2C 02              	  2595: 	dc.b	$02					;  20 points, large rock
00:0000AE2D 00              	  2596: 	dc.b	$00					;   0 points, null pad byte
                            	  2597: 
                            	  2598: 
                            	  2599: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2600: ;
                            	  2601: ; do the high score checks
                            	  2602: 
                            	  2603: check_hiscores:
00:0000AE2E 102B001A        	  2604: 	MOVE.b	num_players(a3),d0	; get the number of players in the game
00:0000AE32 6A5A            	  2605: 	BPL.s		exit_check_hiscores	; if still players just exit
                            	  2606: 
00:0000AE34 1B400083        	  2607: 	MOVE.b	d0,high_off(a5)		; clear the player 2 highscore flag
00:0000AE38 1D400083        	  2608: 	MOVE.b	d0,high_off(a6)		; clear the player 1 highscore flag
                            	  2609: 
00:0000AE3C 177C00010018    	  2610: 	MOVE.b	#$01,player_idx(a3)	; set the player index for player two
00:0000AE42 4BEB01F7        	  2611: 	LEA		player_2(a3),a5		; set the pointer to player two's variables
00:0000AE46 4DEB00F3        	  2612: 	LEA		player_1(a3),a6		; set the pointer to player one's variables
                            	  2613: check_hi_player
00:0000AE4A 7400            	  2614: 	MOVEQ		#0,d2				; clear the high score index
00:0000AE4C 302D0080        	  2615: 	MOVE.w	score_off(a5),d0		; get the player score
00:0000AE50 670E            	  2616: 	BEQ.s		check_hi_next		; if zero go try the other player
                            	  2617: 
                            	  2618: check_hi_loop
00:0000AE52 B0732027        	  2619: 	CMP.w		hiscores(a3,d2.w),d0	; compare the high score with the player score
00:0000AE56 6238            	  2620: 	BHI.s		insert_hiscore		; if the player score was more go insert the
                            	  2621: 							; score
                            	  2622: 
00:0000AE58 5442            	  2623: 	ADDQ.w	#2,d2				; increment the high score index
00:0000AE5A 0C420014        	  2624: 	CMPI.w	#20,d2			; compare with max + 2
00:0000AE5E 65F2            	  2625: 	BCS.s		check_hi_loop		; loop if more high scores to do
                            	  2626: 
                            	  2627: 							; else change to the other player
                            	  2628: check_hi_next
00:0000AE60 CB4E            	  2629: 	EXG		a5,a6				; swap the players
00:0000AE62 0A2B00010018    	  2630: 	EORI.b	#1,player_idx(a3)		; toggle the player index
00:0000AE68 67E0            	  2631: 	BEQ.s		check_hi_player		; loop if more players to do
                            	  2632: 
00:0000AE6A 102D0083        	  2633: 	MOVE.b	high_off(a5),d0		; get player 2's highscore flag
00:0000AE6E 6B14            	  2634: 	BMI.s		exit_hi_chk			; if not entering a high score go clear the
                            	  2635: 							; player count and exit
                            	  2636: 
00:0000AE70 B02E0083        	  2637: 	CMP.b		high_off(a6),d0		; compare with the player 1 highscore flag
00:0000AE74 650E            	  2638: 	BCS.s		exit_hi_chk			; if player 2's position < player 1's position
                            	  2639: 							; just exit
                            	  2640: 
00:0000AE76 5600            	  2641: 	ADDQ.b	#3,d0				; else increment player 2's position to the
                            	  2642: 							; next entry
00:0000AE78 0C00001E        	  2643: 	CMPI.b	#$1E,d0			; compare the result with max + 1
00:0000AE7C 6502            	  2644: 	BCS.s		save_hi_index		; if less go save the new player 1 index
                            	  2645: 
00:0000AE7E 70FF            	  2646: 	MOVEQ		#-1,d0			; else reset player 2's highscore flag
                            	  2647: save_hi_index
00:0000AE80 1B400083        	  2648: 	MOVE.b	d0,high_off(a5)		; save player 2's highscore flag
                            	  2649: exit_hi_chk
00:0000AE84 7000            	  2650: 	MOVEQ		#0,d0				; clear the longword
00:0000AE86 1740001A        	  2651: 	MOVE.b	d0,num_players(a3)	; clear the number of players in the game
00:0000AE8A 17400020        	  2652: 	MOVE.b	d0,hi_char(a3)		; clear the input character index
                            	  2653: exit_check_hiscores
00:0000AE8E 4E75            	  2654: 	RTS
                            	  2655: 
                            	  2656: ; insert a new high score into the high score table. the index is in d2.w
                            	  2657: 
                            	  2658: insert_hiscore:
00:0000AE90 7612            	  2659: 	MOVEQ		#18,d3			; index to the last high score
00:0000AE92 781B            	  2660: 	MOVEQ		#27,d4			; index to the last high score initials
                            	  2661: insert_loop
00:0000AE94 B443            	  2662: 	CMP.w		d3,d2				; compare the current high score with the insert
                            	  2663: 							; point
00:0000AE96 671E            	  2664: 	BEQ.s		exit_insert_loop		; if there exit the loop
                            	  2665: 
00:0000AE98 37B330253027    	  2666: 	MOVE.w	hiscores-2(a3,d3.w),hiscores(a3,d3.w)
                            	  2667: 							; copy the (n-1)th high score to this one
00:0000AE9E 17B34038403B    	  2668: 	MOVE.b	hinames-3(a3,d4.w),hinames(a3,d4.w)
                            	  2669: 							; copy the (n-1)th high score name first byte
00:0000AEA4 17B34039403C    	  2670: 	MOVE.b	hinames-2(a3,d4.w),hinames+1(a3,d4.w)
                            	  2671: 							; copy the (n-1)th high score name second byte
00:0000AEAA 17B3403A403D    	  2672: 	MOVE.b	hinames-1(a3,d4.w),hinames+2(a3,d4.w)
                            	  2673: 							; copy the (n-1)th high score name third byte
                            	  2674: 
00:0000AEB0 5543            	  2675: 	SUBQ.w	#2,d3				; decrement the index to the previous score
00:0000AEB2 5744            	  2676: 	SUBQ.w	#3,d4				; decrement the index to the previous initials
00:0000AEB4 66DE            	  2677: 	BNE.s		insert_loop			; loop for the next high score
                            	  2678: 
                            	  2679: exit_insert_loop
00:0000AEB6 1B440083        	  2680: 	MOVE.b	d4,high_off(a5)		; save the player highscore flag
00:0000AEBA 37803027        	  2681: 	MOVE.w	d0,hiscores(a3,d3.w)	; copy the player score to this one
00:0000AEBE 17BC000B403B    	  2682: 	MOVE.b	#$0B,hinames(a3,d4.w)	; make the high score name first byte "A"
00:0000AEC4 4233403C        	  2683: 	CLR.b		hinames+1(a3,d4.w)	; make the high score name second byte " "
00:0000AEC8 4233403D        	  2684: 	CLR.b		hinames+2(a3,d4.w)	; make the high score name third byte " "
                            	  2685: 
00:0000AECC 177C00F00059    	  2686: 	MOVE.b	#$F0,game_count(a3)	; set the game counter high byte, high score
                            	  2687: 							; entry timeout
                            	  2688: 
00:0000AED2 608C            	  2689: 	BRA.s		check_hi_next		; loop for the other player
                            	  2690: 
                            	  2691: 
                            	  2692: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2693: ;
                            	  2694: ; calculate the angle given the delta x,y. the delta is calculated by subtracting the
                            	  2695: ; source x,y co-ordinates from the target x,y co-ordinates. the angle is returned in
                            	  2696: ; d0.b with $00 being 3 o'clock
                            	  2697: ;
                            	  2698: ; d1.w = delta x = target x - source x
                            	  2699: ; d2.w = delta y = target y - source y
                            	  2700: 
                            	  2701: get_atn:
00:0000AED4 4A42            	  2702: 	TST.w		d2				; test the delta y
00:0000AED6 6A08            	  2703: 	BPL.s		atn_semi			; if +ve skip the delta y negate
                            	  2704: 
00:0000AED8 4442            	  2705: 	NEG.w		d2				; else make delta y positive
00:0000AEDA 6104            	  2706: 	BSR.s		atn_semi			; get arctan(y/x) for the semicircle
00:0000AEDC 4400            	  2707: 	NEG.b		d0				; negate the result
00:0000AEDE 4E75            	  2708: 	RTS
                            	  2709: 
                            	  2710: ; get arctan(y/x) for the semicircle
                            	  2711: 
                            	  2712: atn_semi:
00:0000AEE0 4A41            	  2713: 	TST.w		d1				; test the delta x
00:0000AEE2 6A0C            	  2714: 	BPL.s		atn_quad			; if +ve skip the delta x negate
                            	  2715: 
00:0000AEE4 4441            	  2716: 	NEG.w		d1				; else make delta x positive
00:0000AEE6 6108            	  2717: 	BSR.s		atn_quad			; get arctan(y/x) or arctan(x/y)
00:0000AEE8 0A000080        	  2718: 	EORI.b	#$80,d0			; reflect 180 degrees
00:0000AEEC 4400            	  2719: 	NEG.b		d0				; negate the result
00:0000AEEE 4E75            	  2720: 	RTS
                            	  2721: 
                            	  2722: 
                            	  2723: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2724: ;
                            	  2725: ; get arctan(y/x) or arctan(x/y) for one quadrant.
                            	  2726: 
                            	  2727: atn_quad:
00:0000AEF0 B441            	  2728: 	CMP.w		d1,d2				; compare y with x
00:0000AEF2 650C            	  2729: 	BCS.s		atn_eight			; if x > y get arctan(y/x) from the table
                            	  2730: 							; and return
                            	  2731: 
00:0000AEF4 C342            	  2732: 	EXG		d1,d2				; else swap x,y
00:0000AEF6 6108            	  2733: 	BSR.s		atn_eight			; get arctan(x/y) from the table
00:0000AEF8 04000040        	  2734: 	SUBI.b	#$40,d0			; reflect the quadrant
00:0000AEFC 4400            	  2735: 	NEG.b		d0				; and negate the result
00:0000AEFE 4E75            	  2736: 	RTS
                            	  2737: 
                            	  2738: 
                            	  2739: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2740: ;
                            	  2741: ; divide d2.w by d1.w, the six bit result in d0.w is then used to index the ATN()
                            	  2742: ; table to get the result for this octant. (is that the right word for one eighth
                            	  2743: ; of a circle?)
                            	  2744: 
                            	  2745: atn_eight:
00:0000AF00 7000            	  2746: 	MOVEQ		#0,d0				; clear the result
00:0000AF02 7E05            	  2747: 	MOVEQ		#6-1,d7			; set the bit count
                            	  2748: loop_atn
00:0000AF04 D442            	  2749: 	ADD.w		d2,d2				; shift the dividend
00:0000AF06 3602            	  2750: 	MOVE.w	d2,d3				; copy the dividend
00:0000AF08 9641            	  2751: 	SUB.w		d1,d3				; compare it with the divisor
00:0000AF0A 6502            	  2752: 	BCS.s		skip_sub			; if the dividend < the divisor skip the
                            	  2753: 							; subtract
                            	  2754: 
00:0000AF0C 9441            	  2755: 	SUB.w		d1,d2				; else subtract the divisor
                            	  2756: skip_sub
00:0000AF0E D100            	  2757: 	ADDX.b	d0,d0				; shift a bit into the result
00:0000AF10 51CFFFF2        	  2758: 	DBF		d7,loop_atn			; loop if more to do
                            	  2759: 
00:0000AF14 0200003F        	  2760: 	ANDI.b	#$3F,d0			; mask the result to $0000 to $003F
00:0000AF18 103B0004        	  2761: 	MOVE.b	atn_tab(pc,d0.w),d0	; get the arctan from the table
00:0000AF1C 4E75            	  2762: 	RTS
                            	  2763: 
                            	  2764: 
                            	  2765: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2766: ;
                            	  2767: ; arctangent table. returns the effective angle of the dx/dy ratio for scaled values
                            	  2768: ; of dx/dy of up to 0.984375 or 63/64ths. this is only 1/8th of a full circle but it
                            	  2769: ; is easy to rotate and reflect these values to cover the other 7/8ths.
                            	  2770: 
                            	  2771: atn_tab
00:0000AF1E 20              	  2772: 	dc.b	$20,$20,$1F,$1F,$1F,$1E,$1E,$1E,$1D,$1D,$1C,$1C,$1C,$1B,$1B,$1A
00:0000AF1F 20
00:0000AF20 1F
00:0000AF21 1F
00:0000AF22 1F
00:0000AF23 1E
00:0000AF24 1E
00:0000AF25 1E
00:0000AF26 1D
00:0000AF27 1D
00:0000AF28 1C
00:0000AF29 1C
00:0000AF2A 1C
00:0000AF2B 1B
00:0000AF2C 1B
00:0000AF2D 1A
00:0000AF2E 1A              	  2773: 	dc.b	$1A,$1A,$19,$19,$18,$18,$17,$17,$17,$16,$16,$15,$15,$14,$14,$13
00:0000AF2F 1A
00:0000AF30 19
00:0000AF31 19
00:0000AF32 18
00:0000AF33 18
00:0000AF34 17
00:0000AF35 17
00:0000AF36 17
00:0000AF37 16
00:0000AF38 16
00:0000AF39 15
00:0000AF3A 15
00:0000AF3B 14
00:0000AF3C 14
00:0000AF3D 13
00:0000AF3E 13              	  2774: 	dc.b	$13,$12,$12,$11,$11,$10,$0F,$0F,$0E,$0E,$0D,$0D,$0C,$0B,$0B,$0A
00:0000AF3F 12
00:0000AF40 12
00:0000AF41 11
00:0000AF42 11
00:0000AF43 10
00:0000AF44 0F
00:0000AF45 0F
00:0000AF46 0E
00:0000AF47 0E
00:0000AF48 0D
00:0000AF49 0D
00:0000AF4A 0C
00:0000AF4B 0B
00:0000AF4C 0B
00:0000AF4D 0A
00:0000AF4E 0A              	  2775: 	dc.b	$0A,$09,$08,$08,$07,$07,$06,$05,$05,$04,$03,$03,$02,$02,$01,$00
00:0000AF4F 09
00:0000AF50 08
00:0000AF51 08
00:0000AF52 07
00:0000AF53 07
00:0000AF54 06
00:0000AF55 05
00:0000AF56 05
00:0000AF57 04
00:0000AF58 03
00:0000AF59 03
00:0000AF5A 02
00:0000AF5B 02
00:0000AF5C 01
00:0000AF5D 00
                            	  2776: 
                            	  2777: 
                            	  2778: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2779: ;
                            	  2780: ; output a number as a leading zero suppressed character string
                            	  2781: ;
                            	  2782: ; a1 = number address
                            	  2783: ; d7 = number byte count
                            	  2784: 
                            	  2785: output_number:
00:0000AF5E 5347            	  2786: 	SUBQ.w	#1,d7				; adjust for the loop type
                            	  2787: output_number_loop
00:0000AF60 1211            	  2788: 	MOVE.b	(a1),d1			; get a byte
00:0000AF62 E809            	  2789: 	LSR.b		#4,d1				; shift the high nibble to the low nibble
00:0000AF64 61000130        	  2790: 	BSR		add_sup_hex_chr		; add a leading zero suppressed character
00:0000AF68 4A47            	  2791: 	TST.w		d7				; test the byte count
00:0000AF6A 6604            	  2792: 	BNE.s		zero_suppress		; if this isn't the last byte skip the zero
                            	  2793: 							; suppress clear
                            	  2794: 
00:0000AF6C 422B0016        	  2795: 	CLR.b		suppress_0(a3)		; clear the zero suppress for the last digit
                            	  2796: zero_suppress
00:0000AF70 1219            	  2797: 	MOVE.b	(a1)+,d1			; get a byte and increment the pointer
00:0000AF72 61000122        	  2798: 	BSR		add_sup_hex_chr		; add a leading zero suppressed character
00:0000AF76 51CFFFE8        	  2799: 	DBF		d7,output_number_loop	; decrement count and loop if more to do
                            	  2800: 
00:0000AF7A 4E75            	  2801: 	RTS
                            	  2802: 
                            	  2803: 
                            	  2804: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2805: ;
                            	  2806: ; get COS(d0) in d0. d0 is an eight bit value representing a full circle with the
                            	  2807: ; value increasing as you turn widdershins
                            	  2808: 
                            	  2809: cos_d0
00:0000AF7C 06000040        	  2810: 	ADDI.b	#$40,d0			; add 1/4 rotation
                            	  2811: 
                            	  2812: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2813: ;
                            	  2814: ; get SIN(d0) in d0. d0 is an eight bit value representing a full circle with the
                            	  2815: ; value increasing as you turn widdershins
                            	  2816: 
                            	  2817: sin_d0
00:0000AF80 024000FF        	  2818: 	ANDI.w	#$00FF,d0			; mask one full circle
00:0000AF84 4A00            	  2819: 	TST.b		d0				; test angle sign
00:0000AF86 6A06            	  2820: 	BPL.s		cossin_d0			; if +ve just get SIN/COS and return
                            	  2821: 
00:0000AF88 6104            	  2822: 	BSR.s		cossin_d0			; else get SIN/COS
00:0000AF8A 4440            	  2823: 	NEG.w		d0				; now do twos complement
00:0000AF8C 4E75            	  2824: 	RTS
                            	  2825: 
                            	  2826: ; get d0 from SIN/COS table
                            	  2827: 
                            	  2828: cossin_d0
00:0000AF8E D000            	  2829: 	ADD.b		d0,d0				; ; 2 bytes per word value
00:0000AF90 6A02            	  2830: 	BPL.s		a_was_less			; branch if the angle < 1/4 circle
                            	  2831: 
00:0000AF92 4400            	  2832: 	NEG.b		d0				; wrap $82 to $FE to $7E to $02
                            	  2833: a_was_less
00:0000AF94 303B0004        	  2834: 	MOVE.w	sin_cos(pc,d0.w),d0	; get the SIN/COS value
00:0000AF98 4E75            	  2835: 	RTS
                            	  2836: 
                            	  2837: 
                            	  2838: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2839: ;
                            	  2840: ; SIN/COS table, returns values between $0000 and $7FFF. the last value should be
                            	  2841: ; $8000 but that can cause an overflow in the word length calculations and it's
                            	  2842: ; easier to fudge the table a bit. no one will ever notice.
                            	  2843: 
                            	  2844: sin_cos
00:0000AF9A 0000            	  2845: 	dc.w	$0000,$0324,$0648,$096B,$0C8C,$0FAB,$12C8,$15E2
00:0000AF9C 0324
00:0000AF9E 0648
00:0000AFA0 096B
00:0000AFA2 0C8C
00:0000AFA4 0FAB
00:0000AFA6 12C8
00:0000AFA8 15E2
00:0000AFAA 18F9            	  2846: 	dc.w	$18F9,$1C0C,$1F1A,$2224,$2528,$2827,$2B1F,$2E11
00:0000AFAC 1C0C
00:0000AFAE 1F1A
00:0000AFB0 2224
00:0000AFB2 2528
00:0000AFB4 2827
00:0000AFB6 2B1F
00:0000AFB8 2E11
00:0000AFBA 30FC            	  2847: 	dc.w	$30FC,$33DF,$36BA,$398D,$3C57,$3F17,$41CE,$447B
00:0000AFBC 33DF
00:0000AFBE 36BA
00:0000AFC0 398D
00:0000AFC2 3C57
00:0000AFC4 3F17
00:0000AFC6 41CE
00:0000AFC8 447B
00:0000AFCA 471D            	  2848: 	dc.w	$471D,$49B4,$4C40,$4EC0,$5134,$539B,$55F6,$5843
00:0000AFCC 49B4
00:0000AFCE 4C40
00:0000AFD0 4EC0
00:0000AFD2 5134
00:0000AFD4 539B
00:0000AFD6 55F6
00:0000AFD8 5843
00:0000AFDA 5A82            	  2849: 	dc.w	$5A82,$5CB4,$5ED7,$60EC,$62F2,$64E9,$66CF,$68A7
00:0000AFDC 5CB4
00:0000AFDE 5ED7
00:0000AFE0 60EC
00:0000AFE2 62F2
00:0000AFE4 64E9
00:0000AFE6 66CF
00:0000AFE8 68A7
00:0000AFEA 6A6E            	  2850: 	dc.w	$6A6E,$6C24,$6DCA,$6F5F,$70E3,$7255,$73B6,$7505
00:0000AFEC 6C24
00:0000AFEE 6DCA
00:0000AFF0 6F5F
00:0000AFF2 70E3
00:0000AFF4 7255
00:0000AFF6 73B6
00:0000AFF8 7505
00:0000AFFA 7642            	  2851: 	dc.w	$7642,$776C,$7885,$798A,$7A7D,$7B5D,$7C2A,$7CE4
00:0000AFFC 776C
00:0000AFFE 7885
00:0000B000 798A
00:0000B002 7A7D
00:0000B004 7B5D
00:0000B006 7C2A
00:0000B008 7CE4
00:0000B00A 7D8A            	  2852: 	dc.w	$7D8A,$7E1E,$7E9D,$7F0A,$7F62,$7FA7,$7FD9,$7FF6
00:0000B00C 7E1E
00:0000B00E 7E9D
00:0000B010 7F0A
00:0000B012 7F62
00:0000B014 7FA7
00:0000B016 7FD9
00:0000B018 7FF6
00:0000B01A 7FFF            	  2853: 	dc.w	$7FFF
                            	  2854: 
                            	  2855: 
                            	  2856: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2857: ;
                            	  2858: ; add message d1 to the display list
                            	  2859: 
                            	  2860: add_message:
00:0000B01C 36BC1000        	  2861: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  2862: 
00:0000B020 D241            	  2863: 	ADD.w		d1,d1				; make into a word index
00:0000B022 3F01            	  2864: 	MOVE.w	d1,-(sp)			; save the index
                            	  2865: 
00:0000B024 D241            	  2866: 	ADD.w		d1,d1				; make into a word pair index
00:0000B026 41FA193A        	  2867: 	LEA		mess_origin(pc),a0	; point to the mesage co-ordinate table
00:0000B02A 34301002        	  2868: 	MOVE.w	2(a0,d1.w),d2		; get the message y co-ordinate
00:0000B02E 32301000        	  2869: 	MOVE.w	(a0,d1.w),d1		; get the message x co-ordinate
00:0000B032 6100009E        	  2870: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  2871: 							; a draw command
                            	  2872: 
00:0000B036 323C7000        	  2873: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000B03A 610000B0        	  2874: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2875: 
00:0000B03E 7003            	  2876: 	MOVEQ		#$03,d0			; set the mask for the language bits
00:0000B040 206B000E        	  2877: 	MOVEA.l	switch_addr(a3),a0	; point to the switch
00:0000B044 C010            	  2878: 	AND.b		(a0),d0			; get and mask the switch bits
00:0000B046 D040            	  2879: 	ADD.w		d0,d0				; make into a word pointer
                            	  2880: 
00:0000B048 41FA1938        	  2881: 	LEA		mess_table(pc),a0		; point to the mesage language table
00:0000B04C 30300000        	  2882: 	MOVE.w	(a0,d0.w),d0		; get the offset to the messages
00:0000B050 41F00000        	  2883: 	LEA		(a0,d0.w),a0		; get the pointer to the messages
                            	  2884: 
00:0000B054 321F            	  2885: 	MOVE.w	(sp)+,d1			; restore the message index
                            	  2886: 
00:0000B056 32301000        	  2887: 	MOVE.w	(a0,d1.w),d1		; get the offset to the message
00:0000B05A 41F01000        	  2888: 	LEA		(a0,d1.w),a0		; get the pointer to the message
00:0000B05E 43FA18A4        	  2889: 	LEA		char_set(pc),a1		; get the pointer to the character JSRL table
00:0000B062 7000            	  2890: 	MOVEQ		#0,d0				; clear the longword
                            	  2891: add_char_loop
00:0000B064 1018            	  2892: 	MOVE.b	(a0)+,d0			; get the next character
00:0000B066 671A            	  2893: 	BEQ.s		exit_add_message		; if null just exit
                            	  2894: 
                            	  2895: ; convert the character and add it to the vector list
                            	  2896: 
00:0000B068 903C0020        	  2897: 	SUB.b		#' ',d0			; subtract [SPACE]
00:0000B06C 670C            	  2898: 	BEQ.s		add_the_char		; if it was [SPACE] go add it
                            	  2899: 
00:0000B06E 903C000F        	  2900: 	SUB.b		#15,d0			; convert a number
00:0000B072 0C00000B        	  2901: 	CMPI.b	#11,d0			; compare with converted "9"+1
00:0000B076 6502            	  2902: 	BCS.s		add_the_char		; if it was <="9" go add it
                            	  2903: 
00:0000B078 5F00            	  2904: 	SUBQ.b	#7,d0				; else convert "A" to "Z"
                            	  2905: add_the_char
00:0000B07A D000            	  2906: 	ADD.b		d0,d0				; ; 2
00:0000B07C 38F10000        	  2907: 	MOVE.w	(a1,d0.w),(a4)+		; copy the JSRL to the vector list
00:0000B080 60E2            	  2908: 	BRA.s		add_char_loop		; loop for next
                            	  2909: 
                            	  2910: exit_add_message
00:0000B082 4E75            	  2911: 	RTS
                            	  2912: 
                            	  2913: 
                            	  2914: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2915: ;
                            	  2916: ; timer interrupt. the timer interrupt should be triggered every 16ms
                            	  2917: 
                            	  2918: timer_interrupt
00:0000B084 522B001D        	  2919: 	ADDQ.b	#1,sixteen_ms(a3)		; increment the 16ms counter
00:0000B088 4E73            	  2920: 	RTE
                            	  2921: 
                            	  2922: 
                            	  2923: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2924: ;
                            	  2925: ; add "PLAYER x" to the vector list
                            	  2926: 
                            	  2927: player_x:
00:0000B08A 7201            	  2928: 	MOVEQ		#1,d1				; message 1 - "PLAYER "
00:0000B08C 618E            	  2929: 	BSR		add_message			; add message d1 to the display list
                            	  2930: player_n
00:0000B08E 7201            	  2931: 	MOVEQ		#1,d1				; make 0,1 into 1,2
00:0000B090 D22B0018        	  2932: 	ADD.b		player_idx(a3),d1		; add the player index
00:0000B094 600C            	  2933: 	BRA.s		add_hex_chr			; write a hex character to the vector list
                            	  2934: 							; and return
                            	  2935: 
                            	  2936: 
                            	  2937: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2938: ;
                            	  2939: ; if suppress_0 <> 0 write a leading zero suppressed hex character to the vector list
                            	  2940: 
                            	  2941: add_sup_hex_chr
00:0000B096 4A2B0016        	  2942: 	TST.b		suppress_0(a3)		; test the leading zero suppressed flag
00:0000B09A 6706            	  2943: 	BEQ.s		add_hex_chr			; if not suppressed go write a hex character
                            	  2944: 							; to the vector list
                            	  2945: 
                            	  2946: ; if supressed write a [SPACE] instead of a "0"
                            	  2947: 
00:0000B09C 700F            	  2948: 	MOVEQ		#$0F,d0			; set the nibble mask
00:0000B09E C240            	  2949: 	AND.w		d0,d1				; mask the low nibble
00:0000B0A0 670A            	  2950: 	BEQ.s		add_sup_zero		; if it is zero go write a space
                            	  2951: 
                            	  2952: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2953: ;
                            	  2954: ; write a hex character d1 to the vector list
                            	  2955: 
                            	  2956: add_hex_chr
00:0000B0A2 C27C000F        	  2957: 	AND.w		#$0F,d1			; mask the low nibble
00:0000B0A6 5241            	  2958: 	ADDQ.w	#1,d1				; add 1 to pass the [SPACE] character
00:0000B0A8 422B0016        	  2959: 	CLR.b		suppress_0(a3)		; clear the leading zero suppressed flag
                            	  2960: add_sup_zero
00:0000B0AC D241            	  2961: 	ADD.w		d1,d1				; ; 2, bytes per character
00:0000B0AE 2F08            	  2962: 	MOVE.l	a0,-(sp)			; save a0
00:0000B0B0 41FA1852        	  2963: 	LEA		char_set(pc),a0		; point to the character JSRL table
00:0000B0B4 38F01000        	  2964: 	MOVE.w	(a0,d1.w),(a4)+		; copy the character JSRL to the vector list
00:0000B0B8 205F            	  2965: 	MOVE.l	(sp)+,a0			; restore a0
                            	  2966: 
00:0000B0BA 4E75            	  2967: 	RTS
                            	  2968: 
                            	  2969: 
                            	  2970: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2971: ;
                            	  2972: ; convert the a1 address and add it to the vector list as a vector subroutine call
                            	  2973: 
                            	  2974: add_address:
00:0000B0BC 41FA022A        	  2975: 	LEA		vector(pc),a0		; point to the vector memory
00:0000B0C0 93C8            	  2976: 	SUBA.l	a0,a1				; convert the pointer to an offset
00:0000B0C2 2209            	  2977: 	MOVE.l	a1,d1				; copy the result
00:0000B0C4 E249            	  2978: 	LSR.w		#1,d1				; / 2
00:0000B0C6 C27C0FFF        	  2979: 	AND.w		#$0FFF,d1			; mask the address bits
00:0000B0CA 0041C000        	  2980: 	ORI.w		#JSRL,d1			; OR with vector subroutine call
00:0000B0CE 38C1            	  2981: 	MOVE.w	d1,(a4)+			; copy to the vector list
00:0000B0D0 4E75            	  2982: 	RTS
                            	  2983: 
                            	  2984: 
                            	  2985: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2986: ;
                            	  2987: ; add 4 ; the co-ordinate pair in d1,d2 to the list as a draw command
                            	  2988: 
                            	  2989: add_coords:
00:0000B0D2 7002            	  2990: 	MOVEQ		#2,d0				; set shift count
00:0000B0D4 E161            	  2991: 	ASL.w		d0,d1				; x co-ordinate ; 4
00:0000B0D6 E162            	  2992: 	ASL.w		d0,d2				; y co-ordinate ; 4
                            	  2993: 
00:0000B0D8 303C0FFC        	  2994: 	MOVE.w	#$0FFC,d0			; set the co-ordinate mask
00:0000B0DC C240            	  2995: 	AND.w		d0,d1				; mask the x co-ordinate
00:0000B0DE C440            	  2996: 	AND.w		d0,d2				; mask the y co-ordinate
                            	  2997: 
00:0000B0E0 0042A000        	  2998: 	ORI.w		#DRAW,d2			; OR in the draw command
00:0000B0E4 8253            	  2999: 	OR.w		glob_scale(a3),d1		; OR in the global scale
                            	  3000: 
00:0000B0E6 38C2            	  3001: 	MOVE.w	d2,(a4)+			; save the command/y co-ordinate to the list
00:0000B0E8 38C1            	  3002: 	MOVE.w	d1,(a4)+			; save the scale/x co-ordinate to the list
00:0000B0EA 4E75            	  3003: 	RTS
                            	  3004: 
                            	  3005: 
                            	  3006: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3007: ;
                            	  3008: ; add (d1)00,0000 to the vector list
                            	  3009: 
                            	  3010: add_single
00:0000B0EC 7400            	  3011: 	MOVEQ		#0,d2				; clear the second word
                            	  3012: 
                            	  3013: 
                            	  3014: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3015: ;
                            	  3016: ; add (A)00,(X)00 to the vector list
                            	  3017: 
                            	  3018: add_pair
00:0000B0EE 38C1            	  3019: 	MOVE.w	d1,(a4)+			; save the first word to the vector list
00:0000B0F0 38C2            	  3020: 	MOVE.w	d2,(a4)+			; save the second word to the vector list
00:0000B0F2 4E75            	  3021: 	RTS
                            	  3022: 
                            	  3023: 
                            	  3024: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3025: ;
                            	  3026: ; check the [F2], [F3] and [F4] keys. set the screen size to 640 x 480, 800 x 600 or
                            	  3027: ; 1024 x 768 if the corresponding key has been pressed
                            	  3028: 
                            	  3029: s_controls
                            	  3030: ;	MOVE.l	#$71007273,d1		; [F2], [], [F3] and [F4] keys
                            	  3031: ;	MOVEQ		#19,d0			; check for keypress
                            	  3032: ;	TRAP		#15
                            	  3033: 
                            	  3034: ;	MOVEQ		#33,d0			; set/get output window size
                            	  3035: 
                            	  3036: ;	MOVE.l	d1,d2				; copy result
                            	  3037: ;	BEQ.s		notscreen			; skip screen size if no F key
                            	  3038: 
                            	  3039: ;	MOVE.l	#$028001E0,d1		; set 640 x 480
                            	  3040: ;	TST.l		d2				; test result
                            	  3041: ;	BMI.s		setscreen			; if F2 go set window size
                            	  3042: 
                            	  3043: ;	MOVE.l	#$03200258,d1		; set 800 x 600
                            	  3044: ;	TST.w		d2				; test result
                            	  3045: ;	BMI.s		setscreen			; if F3 go set window size
                            	  3046: 
                            	  3047: 							; else was F4 so ..
                            	  3048: ;	MOVE.l	#$04000300,d1		; set 1024 x 768
                            	  3049: setscreen
                            	  3050: ;	CMP.l		scr_x(a3),d1		; compare with current screen size
                            	  3051: ;	BEQ.s		notscreen			; if already set skip setting it now
                            	  3052: 
                            	  3053: ;	TRAP		#15
                            	  3054: 
                            	  3055: notscreen
                            	  3056: ;	MOVEQ		#0,d1				; get the current window size
                            	  3057: ;	TRAP		#15
                            	  3058: 
00:0000B0F4 223C03200258    	  3059: 	move.l #$03200258,d1		; always 800x600
00:0000B0FA 27410006        	  3060: 	move.l d1,scr_x(a3)			; save the screen x and y size
00:0000B0FE 4E75            	  3061: 	rts
                            	  3062: 
                            	  3063: 
                            	  3064: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3065: ;
                            	  3066: ; setup stuff.
                            	  3067: 
                            	  3068: Initialise:
00:0000B100 7200            	  3069: 	moveq	#0,d1					; turn off echo
00:0000B102 700C            	  3070: 	moveq	#12,d0				; keyboard echo
00:0000B104 4E4F            	  3071: 	trap #15
                            	  3072: 
00:0000B106 323CFF00        	  3073: 	move.w #$FF00,d1		; clear screen
00:0000B10A 700B            	  3074: 	moveq #11,d0				; position cursor
00:0000B10C 4E4F            	  3075: 	trap #15
                            	  3076: 
00:0000B10E 7211            	  3077: 	moveq #17,d1				; enable double buffering
00:0000B110 705C            	  3078: 	moveq	#92,d0				; set draw mode
00:0000B112 4E4F            	  3079: 	trap #15
                            	  3080: 
00:0000B114 720A            	  3081: 	moveq #10,d1				; OR mode drawing, this helps on two ways.
                            	  3082: 							; first it emulates a vector display where
                            	  3083: 							; the vectors that cross can bright up the
                            	  3084: 							; intersection and second it means we can
                            	  3085: 							; forget depth sorting of objects
00:0000B116 705C            	  3086: 	moveq #92,d0				; set draw mode
00:0000B118 4E4F            	  3087: 	trap #15
                            	  3088: 
00:0000B11A 47FA1D1B        	  3089: 	lea	variables(pc),a3	; get the pointer to the variables base
00:0000B11E 4BEB00F3        	  3090: 	lea player_1(a3),a5		; get the pointer to player one's variables
00:0000B122 4DEB01F7        	  3091: 	lea player_2(a3),a6		; get the pointer to player two's variables
                            	  3092: 
                            	  3093: 										; clear all the variable space
00:0000B126 7000            	  3094: 	moveq #0,d0				; clear the longword
00:0000B128 41EB0012        	  3095: 	lea hiscore_y(a3),a0		; get the start address
00:0000B12C 43EB027B        	  3096: 	lea p_2_end(a3),a1			; get the end address
                            	  3097: clear_loop
00:0000B130 30C0            	  3098: 	move.w d0,(a0)+			; clear the word
00:0000B132 B1C9            	  3099: 	cmpa.l a1,a0				; compare the addresses
00:0000B134 66FA            	  3100: 	bne.s clear_loop		; if not at end loop
                            	  3101: 
00:0000B136 7008            	  3102: 	moveq #8,d0					; get the time in 1/100 ths seconds
00:0000B138 4E4F            	  3103: 	trap #15
                            	  3104: 
00:0000B13A 0A81DEADBEEF    	  3105: 	eori.l	#$DEADBEEF,d1		; EOR with the initial PRNG seed, this must
                            	  3106: 													; result in any value but zero
00:0000B140 4EB900001ECE    	  3107: 	jsr InitRand
00:0000B146 2741000A        	  3108: 	move.l	d1,PRNlword(a3)		; save the initial PRNG seed
                            	  3109: 
00:0000B14A 7203            	  3110: 	moveq #3,d1					; get the switches address
00:0000B14C 7020            	  3111: 	moveq #32,d0				; simulator hardware
00:0000B14E 4E4F            	  3112: 	trap #15
                            	  3113: 
00:0000B150 2741000E        	  3114: 	move.l d1,switch_addr(a3)	; save the switches address
                            	  3115: 
                            	  3116: 	;LEA		timer_interrupt(pc),a0	; get the timer interrupt routine address
                            	  3117: 	;MOVE.l	a0,$64.w			; save the timer interrupt as interrupt 1
                            	  3118: 
                            	  3119: 	;MOVEQ		#6,d1				; set auto IRQ
                            	  3120: 	;MOVEQ		#$81,d2			; enable IRQ 1
                            	  3121: 	;MOVEQ		#16,d3			; set the time in ms
                            	  3122: 	;MOVEQ		#32,d0			; set simulator hardware
                            	  3123: 	;TRAP		#15
                            	  3124: 
                            	  3125: 	;MOVEQ		#5,d1				; enable exceptions
                            	  3126: 	;MOVEQ		#32,d0			; set simulator hardware
                            	  3127: 	;TRAP		#15
                            	  3128: 
00:0000B154 49FA0192        	  3129: 	lea vector(pc),a4			; get the pointer to the vector list RAM
00:0000B158 38BCB000        	  3130: 	move.w #HALT,(a4)			; add HALT to the vector list
                            	  3131: 
00:0000B15C 61001B4D        	  3132: 	bsr sound_init				; initialise the sounds
                            	  3133: 
00:0000B160 70FF            	  3134: 	moveq #-1,d0					; flag high score done
00:0000B162 17400176        	  3135: 	move.b d0,p1_high(a3)	; save the player 1 highscore flag
00:0000B166 1740027A        	  3136: 	move.b d0,p2_high(a3)	; save the player 2 highscore flag
                            	  3137: 
00:0000B16A 43FA1CBE        	  3138: 	lea filename(pc),a1		; point to the highscore filename
00:0000B16E 7033            	  3139: 	moveq	#51,d0					; open existing file
00:0000B170 4E4F            	  3140: 	trap #15
                            	  3141: 
00:0000B172 4A40            	  3142: 	tst.w d0							; check for errors
00:0000B174 6706            	  3143: 	beq.s read_hi					; if no error go read the file
                            	  3144: 
00:0000B176 0C400003        	  3145: 	cmpi.w #3,d0					; compare with read only
00:0000B17A 660A            	  3146: 	bne.s	close_all_2			; if not read only go close all files
                            	  3147: 
                            	  3148: read_hi
00:0000B17C 43EB0027        	  3149: 	lea hiscores(a3),a1		; point to the highscore tables
00:0000B180 7432            	  3150: 	moveq	#50,d2					; set the table length
00:0000B182 7035            	  3151: 	moveq	#53,d0					; read file
00:0000B184 4E4F            	  3152: 	trap #15
                            	  3153: 
                            	  3154: close_all_2
00:0000B186 7032            	  3155: 	moveq #50,d0					; close all files
00:0000B188 4E4F            	  3156: 	trap #15
                            	  3157: 
00:0000B18A 4E75            	  3158: 	rts
                            	  3159: 
                            	  3160: 
                            	  3161: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3162: ;
                            	  3163: ; This is the code that generates the pseudo random sequence. A seed word located in
                            	  3164: ; PRNlword(a3) is loaded into a register before being operated on to generate the
                            	  3165: ; next number in the sequence. This number is then saved as the seed for the next
                            	  3166: ; time it's called.
                            	  3167: ;
                            	  3168: ; This code is adapted from the 32 bit version of RND(n) used in EhBASIC68. Taking
                            	  3169: ; the 19th next number is slower but helps to hide the shift and add nature of this
                            	  3170: ; generator as can be seen from analysing the output.
                            	  3171: 
                            	  3172: gen_prng:
00:0000B18C 2F01            	  3173: 	move.l d1,-(a7)
00:0000B18E 4EB900001F0E    	  3174: 	jsr RandGetNum
00:0000B194 2741000A        	  3175: 	move.l d1,PRNlword(a3)
00:0000B198 221F            	  3176: 	move.l (a7)+,d1
00:0000B19A 4E75            	  3177: 	rts
                            	  3178: 
                            	  3179: ;	MOVEM.l	d0-d2,-(sp)			; save d0, d1 and d2
                            	  3180: ;	MOVE.l	PRNlword(a3),d0		; get current seed longword
                            	  3181: ;	MOVEQ		#$AF-$100,d1		; set the EOR value
                            	  3182: ;	MOVEQ		#18,d2			; do this 19 times
                            	  3183: Ninc0
                            	  3184: ;	ADD.l		d0,d0				; shift left 1 bit
                            	  3185: ;	BCC.s		Ninc1				; if bit not set skip feedback
                            	  3186: 
                            	  3187: ;	EOR.b		d1,d0				; do Galois LFSR feedback
                            	  3188: Ninc1
                            	  3189: ;	DBF		d2,Ninc0			; loop
                            	  3190: 
                            	  3191: ;	MOVE.l	d0,PRNlword(a3)		; save back to seed longword
                            	  3192: ;	MOVEM.l	(sp)+,d0-d2			; restore d0, d1 and d2
                            	  3193: 
                            	  3194: ;	RTS
                            	  3195: 
                            	  3196: 
                            	  3197: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3198: ;
                            	  3199: ; vector generator subroutines. this code emulates the atari digital vector generator
                            	  3200: ; and truns the vector draw list into lines on the screen
                            	  3201: 
                            	  3202: ; vector subroutine return code. if a vector subroutine is called the address for this
                            	  3203: ; code is pushed on the stack
                            	  3204: 
                            	  3205: op_rtsvec:
00:0000B19C 285F            	  3206: 	MOVE.l	(sp)+,a4			; restore the vector pointer
                            	  3207: 
                            	  3208: ; evaluate the next vector command. the command is pointed to by (a4) and execution
                            	  3209: ; will continue until an RTSL or HALT command is encountered. this is a subset of the
                            	  3210: ; battlezone DVG command set
                            	  3211: 
                            	  3212: do_vector:
00:0000B19E 381C            	  3213: 	MOVE.w	(a4)+,d4			; get the vector opcode
00:0000B1A0 3004            	  3214: 	MOVE.w	d4,d0				; copy it
00:0000B1A2 ED58            	  3215: 	ROL.w		#6,d0				; shift opcode bits to b5-b2
00:0000B1A4 0240003C        	  3216: 	ANDI.w	#$003C,d0			; mask the opcode bits
00:0000B1A8 4EFB0076        	  3217: 	JMP		vector_base(pc,d0.w)	; go do the vector opcode
                            	  3218: 
                            	  3219: ; call vector subroutine, push the vector pointer and then the vector subroutine
                            	  3220: ; address as the return address then do jump to vector address
                            	  3221: 
                            	  3222: op_call
00:0000B1AC 2F0C            	  3223: 	MOVE.l	a4,-(sp)			; save the vector pointer
00:0000B1AE 487AFFEC        	  3224: 	PEA		op_rtsvec(pc)		; push vector return code as return address
                            	  3225: 
                            	  3226: ; jump to vector, the address is a thirteen bit address
                            	  3227: 
                            	  3228: op_jump
00:0000B1B2 C87C0FFF        	  3229: 	AND.w		#$0FFF,d4			; mask the address
00:0000B1B6 D844            	  3230: 	ADD.w		d4,d4				; make it a word address
00:0000B1B8 49FA012E        	  3231: 	LEA		vector(pc),a4		; reset the vector RAM pointer
00:0000B1BC 49F44000        	  3232: 	LEA		(a4,d4.w),a4		; calculate the new address
00:0000B1C0 60DC            	  3233: 	BRA.s		do_vector			; go do the next vector
                            	  3234: 
                            	  3235: ; relative vector routine. co-ordinates are ten bit with sign numbers
                            	  3236: 
                            	  3237: op_vctr
00:0000B1C2 3E3C07FF        	  3238: 	MOVE.w	#$07FF,d7			; set the co-ordinate and sign bits mask
00:0000B1C6 720A            	  3239: 	MOVEQ		#10,d1			; set the sign bit number
                            	  3240: 
00:0000B1C8 C847            	  3241: 	AND.w		d7,d4				; mask the y co-ordinate and sign
00:0000B1CA 0384            	  3242: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000B1CC 6702            	  3243: 	BEQ.s		no_neg_y11			; if positive skip the negate
                            	  3244: 
00:0000B1CE 4444            	  3245: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3246: no_neg_y11
                            	  3247: 
00:0000B1D0 361C            	  3248: 	MOVE.w	(a4)+,d3			; get the second word
00:0000B1D2 3403            	  3249: 	MOVE.w	d3,d2				; copy the intensity
                            	  3250: 
00:0000B1D4 C647            	  3251: 	AND.w		d7,d3				; mask the x co-ordinate and sign
00:0000B1D6 0383            	  3252: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000B1D8 6702            	  3253: 	BEQ.s		no_neg_x11			; if positive skip the negate
                            	  3254: 
00:0000B1DA 4443            	  3255: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3256: no_neg_x11
                            	  3257: 
00:0000B1DC E440            	  3258: 	ASR.w		#2,d0				; make the scale count from the masked JMP
00:0000B1DE 4440            	  3259: 	NEG.w		d0				; make negative
00:0000B1E0 D07C0009        	  3260: 	ADD.w		#9,d0				; make 9 - scale
                            	  3261: 
00:0000B1E4 E063            	  3262: 	ASR.w		d0,d3				; scale the x co-ordinate
00:0000B1E6 E064            	  3263: 	ASR.w		d0,d4				; scale the y co-ordinate
                            	  3264: 
00:0000B1E8 600000A2        	  3265: 	BRA		end_vector			; go do the end of the vector draw
                            	  3266: 
                            	  3267: ; set scale and position the beam
                            	  3268: 
                            	  3269: op_abs
00:0000B1EC 3E3C07FF        	  3270: 	MOVE.w	#$07FF,d7			; set the co-ordinate and sign bits mask
00:0000B1F0 720A            	  3271: 	MOVEQ		#10,d1			; set the sign bit number
                            	  3272: 
00:0000B1F2 C847            	  3273: 	AND.w		d7,d4				; mask the y co-ordinate and sign
00:0000B1F4 0384            	  3274: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000B1F6 6702            	  3275: 	BEQ.s		no_neg_y10			; if positive skip the negate
                            	  3276: 
00:0000B1F8 4444            	  3277: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3278: no_neg_y10
                            	  3279: 
00:0000B1FA 361C            	  3280: 	MOVE.w	(a4)+,d3			; get the second word
00:0000B1FC 3403            	  3281: 	MOVE.w	d3,d2				; copy the scale
                            	  3282: 
00:0000B1FE C647            	  3283: 	AND.w		d7,d3				; mask the x co-ordinate and sign
00:0000B200 0383            	  3284: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000B202 6702            	  3285: 	BEQ.s		no_neg_x10			; if positive skip the negate
                            	  3286: 
00:0000B204 4443            	  3287: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3288: no_neg_x10
                            	  3289: 
                            	  3290: ; now convert the scale so it is b15 = direction flag and the rest is the shift count
                            	  3291: 
00:0000B206 E95A            	  3292: 	ROL.w		#4,d2				; move the scale bits to bits 3 to 0
00:0000B208 0242000F        	  3293: 	ANDI.w	#$000F,d2			; mask the scale bits
00:0000B20C 08820003        	  3294: 	BCLR.l	#3,d2				; clear the top bit
00:0000B210 6706            	  3295: 	BEQ.s		not_right			; ship right shift adjust
                            	  3296: 
00:0000B212 4442            	  3297: 	NEG.w		d2				; make negative
00:0000B214 D47C8008        	  3298: 	ADD.w		#$8008,d2			; add offset and flag right shift
                            	  3299: not_right
00:0000B218 3682            	  3300: 	MOVE.w	d2,(a3)			; save the global scal, offset is zero	##
                            	  3301: ;##	MOVE.w	d2,vector_s(a3)		; save the global scale
                            	  3302: 
00:0000B21A 7056            	  3303: 	MOVEQ		#86,d0			; set move to x,y
00:0000B21C 6000009E        	  3304: 	BRA		vector_move			; go do the move
                            	  3305: 
                            	  3306: vector_base
00:0000B220 4E75            	  3307: 	RTS						; treat $0xxx as HALT, quit processing vectors
00:0000B222 4E71            	  3308: 	NOP						; filler
00:0000B224 6000FF9C        	  3309: 	BRA.w		op_vctr			; scale 1 relative long vector
00:0000B228 6000FF98        	  3310: 	BRA.w		op_vctr			; scale 2 relative long vector
00:0000B22C 6000FF94        	  3311: 	BRA.w		op_vctr			; scale 3 relative long vector
00:0000B230 6000FF90        	  3312: 	BRA.w		op_vctr			; scale 4 relative long vector
00:0000B234 6000FF8C        	  3313: 	BRA.w		op_vctr			; scale 5 relative long vector
00:0000B238 6000FF88        	  3314: 	BRA.w		op_vctr			; scale 6 relative long vector
00:0000B23C 6000FF84        	  3315: 	BRA.w		op_vctr			; scale 7 relative long vector
00:0000B240 6000FF80        	  3316: 	BRA.w		op_vctr			; scale 8 relative long vector
00:0000B244 6000FF7C        	  3317: 	BRA.w		op_vctr			; scale 9 relative long vector
00:0000B248 6000FFA2        	  3318: 	BRA.w		op_abs			; set scale and position beam
00:0000B24C 4E75            	  3319: 	RTS						; do HALT, quit processing vectors
00:0000B24E 4E71            	  3320: 	NOP						; filler
00:0000B250 6000FF5A        	  3321: 	BRA.w		op_call			; call vector subroutine
00:0000B254 4E75            	  3322: 	RTS						; return from vector subroutine
00:0000B256 4E71            	  3323: 	NOP						; filler
00:0000B258 6000FF58        	  3324: 	BRA.w		op_jump			; do vector jump
                            	  3325: ;##	BRA.w		op_short			; draw relative short vector
                            	  3326: 
                            	  3327: ; do relative short vector
                            	  3328: 
                            	  3329: op_short
00:0000B25C 3E04            	  3330: 	MOVE.w	d4,d7				; copy the opcode
00:0000B25E 02470808        	  3331: 	ANDI.w	#$0808,d7			; mask the scale bits	0000 x000 0000 y000
00:0000B262 E94F            	  3332: 	LSL.w		#4,d7				; shift bits to b8,b0	x000 0000 y000 0000
00:0000B264 E31F            	  3333: 	ROL.b		#1,d7				; shift bits together	x000 0000 0000 000y
00:0000B266 E35F            	  3334: 	ROL.w		#1,d7				; shift bits to b1,b0	0000 0000 0000 00yx
00:0000B268 5247            	  3335: 	ADDQ.w	#1,d7				; make 1 to 4
                            	  3336: 
00:0000B26A 1F04            	  3337: 	MOVE.b	d4,-(sp)			; push the intensity byte
00:0000B26C 341F            	  3338: 	MOVE.w	(sp)+,d2			; pull the word, intensity now in high byte
                            	  3339: 
00:0000B26E 7007            	  3340: 	MOVEQ		#7,d0				; set the co-ordinate and sign bits mask
00:0000B270 7202            	  3341: 	MOVEQ		#2,d1				; set the sign bit number
                            	  3342: 
00:0000B272 3604            	  3343: 	MOVE.w	d4,d3				; copy the opcode for the x co-ordinate
                            	  3344: 
00:0000B274 3F04            	  3345: 	MOVE.w	d4,-(sp)			; push the opcode
00:0000B276 181F            	  3346: 	MOVE.b	(sp)+,d4			; pull the y co-ordinate byte
                            	  3347: 
00:0000B278 C840            	  3348: 	AND.w		d0,d4				; mask the y co-ordinate and sign bits
00:0000B27A 0384            	  3349: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000B27C 6702            	  3350: 	BEQ.s		no_neg_y2			; if positive just exit
                            	  3351: 
00:0000B27E 4444            	  3352: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3353: no_neg_y2
                            	  3354: 
00:0000B280 C640            	  3355: 	AND.w		d0,d3				; mask the x co-ordinate and sign bits
00:0000B282 0383            	  3356: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000B284 6702            	  3357: 	BEQ.s		no_neg_x2			; if positive just exit
                            	  3358: 
00:0000B286 4443            	  3359: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3360: no_neg_x2
                            	  3361: 
00:0000B288 EF63            	  3362: 	ASL.w		d7,d3				; scale the x magnitude
00:0000B28A EF64            	  3363: 	ASL.w		d7,d4				; scale the y magnitude
                            	  3364: 
                            	  3365: end_vector
00:0000B28C 3E13            	  3366: 	MOVE.w	(a3),d7			; get the global scale, offset is zero	##
                            	  3367: ;##	MOVE.w	vector_s(a3),d7		; get the global scale
00:0000B28E 6A06            	  3368: 	BPL.s		shift_left			; if positive go shift left
                            	  3369: 
                            	  3370: 							; else shift right
00:0000B290 EE63            	  3371: 	ASR.w		d7,d3				; scale the x co-ordinate
00:0000B292 EE64            	  3372: 	ASR.w		d7,d4				; scale the y co-ordinate
00:0000B294 6004            	  3373: 	BRA.s		last_vector			; continue
                            	  3374: 
                            	  3375: shift_left
00:0000B296 EF63            	  3376: 	ASL.w		d7,d3				; scale the x co-ordinate
00:0000B298 EF64            	  3377: 	ASL.w		d7,d4				; scale the y co-ordinate
                            	  3378: last_vector
00:0000B29A D66B0002        	  3379: 	ADD.w		local_x(a3),d3		; add x the co-ordinate to vector x
00:0000B29E D86B0004        	  3380: 	ADD.w		local_y(a3),d4		; add y the co-ordinate to vector y
                            	  3381: 
00:0000B2A2 7056            	  3382: 	MOVEQ		#86,d0			; set move to x,y
                            	  3383: 
00:0000B2A4 C47CF000        	  3384: 	AND.w		#$F000,d2			; d2 is intensity
00:0000B2A8 6712            	  3385: 	BEQ.s		vector_move			; if zero intensity just do move
                            	  3386: 
00:0000B2AA 7200            	  3387: 	MOVEQ		#0,d1				; clear the longword
00:0000B2AC 3F02            	  3388: 	MOVE.w	d2,-(sp)			; copy the intensity
00:0000B2AE 141F            	  3389: 	MOVE.b	(sp)+,d2			; to the low byte byte
00:0000B2B0 1202            	  3390: 	MOVE.b	d2,d1				; copy the intensity byte
00:0000B2B2 4841            	  3391: 	SWAP		d1				; move to the high word
00:0000B2B4 3202            	  3392: 	MOVE.w	d2,d1				; get the other word
                            	  3393: 
00:0000B2B6 7050            	  3394: 	MOVEQ		#80,d0			; set pen colour
00:0000B2B8 4E4F            	  3395: 	TRAP		#15
                            	  3396: 
00:0000B2BA 7055            	  3397: 	MOVEQ		#85,d0			; set draw to x,y
                            	  3398: vector_move
00:0000B2BC 3404            	  3399: 	MOVE.w	d4,d2				; copy the y co-ordinate
00:0000B2BE 3203            	  3400: 	MOVE.w	d3,d1				; copy the x co-ordinate
                            	  3401: ;##	BRA.s		display_vector		; display the vector
                            	  3402: 
                            	  3403: 
                            	  3404: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3405: ;
                            	  3406: ; display vector and do next. takes the vector, scales the x and y to the current
                            	  3407: ; screen size - does axis inversion if needed - and then displays it. set up the
                            	  3408: ; graphics function in d0, x co-ordinate in d1.w and y co-ordinate in d2.w
                            	  3409: 
                            	  3410: ;##display_vector
00:0000B2C0 37410002        	  3411: 	MOVE.w	d1,local_x(a3)		; save as new local x co-ordinate
00:0000B2C4 37420004        	  3412: 	MOVE.w	d2,local_y(a3)		; save as new local y co-ordinate
                            	  3413: 
00:0000B2C8 760A            	  3414: 	MOVEQ		#10,d3			; set the shift count for / 1024
                            	  3415: 
00:0000B2CA C3EB0006        	  3416: 	MULS.w	scr_x(a3),d1		; x ; screen x
00:0000B2CE E6A1            	  3417: 	ASR.l		d3,d1				; / 1024
                            	  3418: 
00:0000B2D0 947C0080        	  3419: 	SUB.w		#128,d2			; subtract offset to centre vertically
00:0000B2D4 C5EB0006        	  3420: 	MULS.w	scr_x(a3),d2		; y ; screen x
00:0000B2D8 E6A2            	  3421: 	ASR.l		d3,d2				; / 1024
00:0000B2DA 4442            	  3422: 	NEG.w		d2				; y = 0 is top of screen remember
00:0000B2DC D46B0008        	  3423: 	ADD.w		scr_y(a3),d2		; + screen y
00:0000B2E0 5342            	  3424: 	SUBQ.w	#1,d2				; - 1
                            	  3425: 
00:0000B2E2 4E4F            	  3426: 	TRAP		#15				; do move or draw
                            	  3427: 
00:0000B2E4 6000FEB8        	  3428: 	BRA		do_vector			; go do the next vector opcode
                            	  3429: 
                            	  3430: 
                            	  3431: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3432: ;
                            	  3433: ; vector commands
                            	  3434: 
                            	  3435: REL1		EQU $1000				; draw relative
                            	  3436: REL2		EQU $2000				; draw relative
                            	  3437: REL3		EQU $3000				; draw relative
                            	  3438: REL4		EQU $4000				; draw relative
                            	  3439: REL5		EQU $5000				; draw relative
                            	  3440: REL6		EQU $6000				; draw relative
                            	  3441: REL7		EQU $7000				; draw relative
                            	  3442: REL8		EQU $8000				; draw relative
                            	  3443: REL9		EQU $9000				; draw relative
                            	  3444: DRAW		EQU $A000				; draw absolute
                            	  3445: HALT		EQU $B000				; halt
                            	  3446: JSRL		EQU $C000				; vector subroutine call
                            	  3447: RTSL		EQU $D000				; return from vector subroutine
                            	  3448: JMPL		EQU $E000				; vector jump
                            	  3449: SHRT		EQU $F000				; relative short vector
                            	  3450: 
                            	  3451: 
                            	  3452: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3453: ;
                            	  3454: ; vector list RAM
                            	  3455: 
                            	  3456: vector
00:0000B2E8 00              	  3457: 	ds.b	$1000					; 4k of space
00:0000B2E9 *
                            	  3458: 
                            	  3459: 
                            	  3460: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3461: ;
                            	  3462: ; vector ROM
                            	  3463: 
                            	  3464: ; copyright symbol followed by JSR's to write "2009 LEE DAVISO", followed by a JMP to
                            	  3465: ; char_n, which is the routine for "N"
                            	  3466: 
                            	  3467: copy_msg
00:0000C2E8 A088            	  3468: 	dc.w	$A088,$019A,$7000,$0000,$F573,$F173,$F178,$F177
00:0000C2EA 019A
00:0000C2EC 7000
00:0000C2EE 0000
00:0000C2F0 F573
00:0000C2F2 F173
00:0000C2F4 F178
00:0000C2F6 F177
00:0000C2F8 F577            	  3469: 	dc.w	$F577,$F578,$3180,$0200,$F875,$FD70,$F871,$FD02
00:0000C2FA F578
00:0000C2FC 3180
00:0000C2FE 0200
00:0000C300 F875
00:0000C302 FD70
00:0000C304 F871
00:0000C306 FD02
00:0000C308 CAD6            	  3470: 	dc.w	JSRL+(char_2-vector)>>1		; 2
00:0000C30A CA81            	  3471: 	dc.w	JSRL+(char_o0-vector)>>1	; 0
00:0000C30C CA81            	  3472: 	dc.w	JSRL+(char_o0-vector)>>1	; 0
00:0000C30E CB07            	  3473: 	dc.w	JSRL+(char_9-vector)>>1		; 9
00:0000C310 CAD0            	  3474: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000C312 CA71            	  3475: 	dc.w	JSRL+(char_l-vector)>>1		; L
00:0000C314 CA3F            	  3476: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000C316 CA3F            	  3477: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000C318 CAD0            	  3478: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000C31A CA37            	  3479: 	dc.w	JSRL+(char_d-vector)>>1		; D
00:0000C31C CA1C            	  3480: 	dc.w	JSRL+(char_a-vector)>>1		; A
00:0000C31E CAB2            	  3481: 	dc.w	JSRL+(char_v-vector)>>1		; V
00:0000C320 CA5E            	  3482: 	dc.w	JSRL+(char_i-vector)>>1		; I
00:0000C322 CA9F            	  3483: 	dc.w	JSRL+(char_s-vector)>>1		; S
00:0000C324 CA81            	  3484: 	dc.w	JSRL+(char_o0-vector)>>1	; O
00:0000C326 EA7C            	  3485: 	dc.w	JMPL+(char_n-vector)>>1		; N
                            	  3486: 
                            	  3487: ; table for the various saucer and rock explosions
                            	  3488: 
                            	  3489: expl_tab
00:0000C328 C874            	  3490: 	dc.w	JSRL+(expl_0-vector)>>1		; explosion 0
00:0000C32A C859            	  3491: 	dc.w	JSRL+(expl_1-vector)>>1		; explosion 1
00:0000C32C C83A            	  3492: 	dc.w	JSRL+(expl_2-vector)>>1		; explosion 2
00:0000C32E C824            	  3493: 	dc.w	JSRL+(expl_3-vector)>>1		; explosion 3
                            	  3494: 
                            	  3495: ; explosion 3
                            	  3496: 
                            	  3497: expl_3
00:0000C330 F80D            	  3498: 	dc.w	$F80D,$F8F8,$FD0D,$F8F8,$FD09,$F8F8,$F10B,$F8F8
00:0000C332 F8F8
00:0000C334 FD0D
00:0000C336 F8F8
00:0000C338 FD09
00:0000C33A F8F8
00:0000C33C F10B
00:0000C33E F8F8
00:0000C340 F50A            	  3499: 	dc.w	$F50A,$F8F8,$F908,$F8F8,$F309,$F8F8,$F30D,$F8F8
00:0000C342 F8F8
00:0000C344 F908
00:0000C346 F8F8
00:0000C348 F309
00:0000C34A F8F8
00:0000C34C F30D
00:0000C34E F8F8
00:0000C350 5480            	  3500: 	dc.w	$5480,$0600,$F8F8,$F10F,$F8F8,RTSL
00:0000C352 0600
00:0000C354 F8F8
00:0000C356 F10F
00:0000C358 F8F8
00:0000C35A D000
                            	  3501: 
                            	  3502: ; explosion 2
                            	  3503: 
                            	  3504: expl_2
00:0000C35C 3000            	  3505: 	dc.w	$3000,$0780,$F8F8,$3780,$0780,$F8F8,$3780,$0380
00:0000C35E 0780
00:0000C360 F8F8
00:0000C362 3780
00:0000C364 0780
00:0000C366 F8F8
00:0000C368 3780
00:0000C36A 0380
00:0000C36C F8F8            	  3506: 	dc.w	$F8F8,$40E0,$02A0,$F8F8,$35C0,$0380,$F8F8,$3380
00:0000C36E 40E0
00:0000C370 02A0
00:0000C372 F8F8
00:0000C374 35C0
00:0000C376 0380
00:0000C378 F8F8
00:0000C37A 3380
00:0000C37C 0000            	  3507: 	dc.w	$0000,$F8F8,$42A0,$00E0,$F8F8,$42A0,$04E0,$F8F8
00:0000C37E F8F8
00:0000C380 42A0
00:0000C382 00E0
00:0000C384 F8F8
00:0000C386 42A0
00:0000C388 04E0
00:0000C38A F8F8
00:0000C38C 44E0            	  3508: 	dc.w	$44E0,$0780,$F8F8,$40E0,$06A0,$F8F8,RTSL
00:0000C38E 0780
00:0000C390 F8F8
00:0000C392 40E0
00:0000C394 06A0
00:0000C396 F8F8
00:0000C398 D000
                            	  3509: 
                            	  3510: ; explosion 1
                            	  3511: 
                            	  3512: expl_1
00:0000C39A F807            	  3513: 	dc.w	$F807,$F8F8,$FF07,$F8F8,$FF03,$F8F8,$40C0,$0240
00:0000C39C F8F8
00:0000C39E FF07
00:0000C3A0 F8F8
00:0000C3A2 FF03
00:0000C3A4 F8F8
00:0000C3A6 40C0
00:0000C3A8 0240
00:0000C3AA F8F8            	  3514: 	dc.w	$F8F8,$3580,$0300,$F8F8,$FB00,$F8F8,$4240,$00C0
00:0000C3AC 3580
00:0000C3AE 0300
00:0000C3B0 F8F8
00:0000C3B2 FB00
00:0000C3B4 F8F8
00:0000C3B6 4240
00:0000C3B8 00C0
00:0000C3BA F8F8            	  3515: 	dc.w	$F8F8,$4240,$04C0,$F8F8,$44C0,$0700,$F8F8,$40C0
00:0000C3BC 4240
00:0000C3BE 04C0
00:0000C3C0 F8F8
00:0000C3C2 44C0
00:0000C3C4 0700
00:0000C3C6 F8F8
00:0000C3C8 40C0
00:0000C3CA 0640            	  3516: 	dc.w	$0640,$F8F8,RTSL
00:0000C3CC F8F8
00:0000C3CE D000
                            	  3517: 
                            	  3518: ; explosion 0
                            	  3519: 
                            	  3520: expl_0
00:0000C3D0 3000            	  3521: 	dc.w	$3000,$0680,$F8F8,$3680,$0680,$F8F8,$3680,$0280
00:0000C3D2 0680
00:0000C3D4 F8F8
00:0000C3D6 3680
00:0000C3D8 0680
00:0000C3DA F8F8
00:0000C3DC 3680
00:0000C3DE 0280
00:0000C3E0 F8F8            	  3522: 	dc.w	$F8F8,$3140,$03C0,$F8F8,$3540,$0280,$F8F8,$3280
00:0000C3E2 3140
00:0000C3E4 03C0
00:0000C3E6 F8F8
00:0000C3E8 3540
00:0000C3EA 0280
00:0000C3EC F8F8
00:0000C3EE 3280
00:0000C3F0 0000            	  3523: 	dc.w	$0000,$F8F8,$33C0,$0140,$F8F8,$33C0,$0540,$F8F8
00:0000C3F2 F8F8
00:0000C3F4 33C0
00:0000C3F6 0140
00:0000C3F8 F8F8
00:0000C3FA 33C0
00:0000C3FC 0540
00:0000C3FE F8F8
00:0000C400 44A0            	  3524: 	dc.w	$44A0,$0680,$F8F8,$3140,$07C0,$F8F8,RTSL
00:0000C402 0680
00:0000C404 F8F8
00:0000C406 3140
00:0000C408 07C0
00:0000C40A F8F8
00:0000C40C D000
                            	  3525: 
                            	  3526: ; table for rocks
                            	  3527: 
                            	  3528: rock_tab
00:0000C40E C897            	  3529: 	dc.w	JSRL+(rock_0-vector)>>1		; top notch rock
00:0000C410 C8A3            	  3530: 	dc.w	JSRL+(rock_1-vector)>>1		; "X" rock
00:0000C412 C8B1            	  3531: 	dc.w	JSRL+(rock_2-vector)>>1		; bottom and left notch rock
00:0000C414 C8BE            	  3532: 	dc.w	JSRL+(rock_3-vector)>>1		; left and right notch rock
                            	  3533: 
                            	  3534: ; top notch rock
                            	  3535: 
                            	  3536: rock_0
00:0000C416 F908            	  3537: 	dc.w	$F908,$F979,$FD79,$F67D,$F679,$F68F,$F08F,$F97D
00:0000C418 F979
00:0000C41A FD79
00:0000C41C F67D
00:0000C41E F679
00:0000C420 F68F
00:0000C422 F08F
00:0000C424 F97D
00:0000C426 FA78            	  3538: 	dc.w	$FA78,$F979,$FD79,RTSL
00:0000C428 F979
00:0000C42A FD79
00:0000C42C D000
                            	  3539: 
                            	  3540: ; "X" rock
                            	  3541: 
                            	  3542: rock_1
00:0000C42E F10A            	  3543: 	dc.w	$F10A,$F17A,$F97D,$F57E,$F17E,$FD7D,$F679,$F67D
00:0000C430 F17A
00:0000C432 F97D
00:0000C434 F57E
00:0000C436 F17E
00:0000C438 FD7D
00:0000C43A F679
00:0000C43C F67D
00:0000C43E FD79            	  3544: 	dc.w	$FD79,$F179,$F58B,$F38A,$F97D,RTSL
00:0000C440 F179
00:0000C442 F58B
00:0000C444 F38A
00:0000C446 F97D
00:0000C448 D000
                            	  3545: 
                            	  3546: ; bottom and left notch rock
                            	  3547: 
                            	  3548: rock_2
00:0000C44A F80D            	  3549: 	dc.w	$F80D,$F57E,$F77A,$F37A,$F778,$F879,$F37A,$F978
00:0000C44C F57E
00:0000C44E F77A
00:0000C450 F37A
00:0000C452 F778
00:0000C454 F879
00:0000C456 F37A
00:0000C458 F978
00:0000C45A F37E            	  3550: 	dc.w	$F37E,$F07F,$F77F,$F57A,RTSL
00:0000C45C F07F
00:0000C45E F77F
00:0000C460 F57A
00:0000C462 D000
                            	  3551: 
                            	  3552: ; left and right notch rock
                            	  3553: 
                            	  3554: rock_3
00:0000C464 F009            	  3555: 	dc.w	$F009,$F17B,$F168,$F27F,$F07F,$F669,$F07F,$F778
00:0000C466 F17B
00:0000C468 F168
00:0000C46A F27F
00:0000C46C F07F
00:0000C46E F669
00:0000C470 F07F
00:0000C472 F778
00:0000C474 F77A            	  3556: 	dc.w	$F77A,$F17B,$F569,$F969,$F27F,RTSL
00:0000C476 F17B
00:0000C478 F569
00:0000C47A F969
00:0000C47C F27F
00:0000C47E D000
                            	  3557: 
                            	  3558: ; indirect saucer table
                            	  3559: 
                            	  3560: sauc_jsr
00:0000C480 C8CD            	  3561: 	dc.w	JSRL+(sauc_vec-vector)>>1	; saucer
                            	  3562: 
                            	  3563: ; saucer
                            	  3564: 
                            	  3565: sauc_vec
00:0000C482 F10E            	  3566: 	dc.w	$F10E,$F8CA,$F60B,$6000,$D680,$F6DB,$F8CA,$F2DB
00:0000C484 F8CA
00:0000C486 F60B
00:0000C488 6000
00:0000C48A D680
00:0000C48C F6DB
00:0000C48E F8CA
00:0000C490 F2DB
00:0000C492 F2DF            	  3567: 	dc.w	$F2DF,$F2CD,$F8CD,$F6CD,$F6DF,RTSL
00:0000C494 F2CD
00:0000C496 F8CD
00:0000C498 F6CD
00:0000C49A F6DF
00:0000C49C D000
                            	  3568: 
                            	  3569: ; player ship address table
                            	  3570: 
                            	  3571: play_tab
00:0000C49E 0022            	  3572: 	dc.w	play_00-play_tab
00:0000C4A0 003A            	  3573: 	dc.w	play_01-play_tab
00:0000C4A2 005E            	  3574: 	dc.w	play_02-play_tab
00:0000C4A4 0082            	  3575: 	dc.w	play_03-play_tab
00:0000C4A6 00A6            	  3576: 	dc.w	play_04-play_tab
00:0000C4A8 00C8            	  3577: 	dc.w	play_05-play_tab
00:0000C4AA 00EC            	  3578: 	dc.w	play_06-play_tab
00:0000C4AC 0110            	  3579: 	dc.w	play_07-play_tab
00:0000C4AE 0134            	  3580: 	dc.w	play_08-play_tab
00:0000C4B0 0158            	  3581: 	dc.w	play_09-play_tab
00:0000C4B2 017C            	  3582: 	dc.w	play_0A-play_tab
00:0000C4B4 01A0            	  3583: 	dc.w	play_0B-play_tab
00:0000C4B6 01C4            	  3584: 	dc.w	play_0C-play_tab
00:0000C4B8 01E8            	  3585: 	dc.w	play_0D-play_tab
00:0000C4BA 020C            	  3586: 	dc.w	play_0E-play_tab
00:0000C4BC 0230            	  3587: 	dc.w	play_0F-play_tab
00:0000C4BE 0254            	  3588: 	dc.w	play_10-play_tab
                            	  3589: 
                            	  3590: ; ship and thrust outlines. each ship outline is followed by its thrust outline which
                            	  3591: ; is only copied if the thrust button is pressed
                            	  3592: 
                            	  3593: play_00
00:0000C4C0 F60F            	  3594: 	dc.w	$F60F,$FAC8,$F9BD,$6500,$C300,$6500,$C700,$F9B9
00:0000C4C2 FAC8
00:0000C4C4 F9BD
00:0000C4C6 6500
00:0000C4C8 C300
00:0000C4CA 6500
00:0000C4CC C700
00:0000C4CE F9B9
00:0000C4D0 D000            	  3595: 	dc.w	RTSL
00:0000C4D2 F9CE            	  3596: 	dc.w	$F9CE,$F9CA,RTSL
00:0000C4D4 F9CA
00:0000C4D6 D000
                            	  3597: play_01
00:0000C4D8 4640            	  3598: 	dc.w	$4640,$06C0,$5200,$C430,$41C0,$C620,$64B0,$C318
00:0000C4DA 06C0
00:0000C4DC 5200
00:0000C4DE C430
00:0000C4E0 41C0
00:0000C4E2 C620
00:0000C4E4 64B0
00:0000C4E6 C318
00:0000C4E8 6548            	  3599: 	dc.w	$6548,$C6E0,$4220,$C1C0,RTSL
00:0000C4EA C6E0
00:0000C4EC 4220
00:0000C4EE C1C0
00:0000C4F0 D000
00:0000C4F2 50D0            	  3600: 	dc.w	$50D0,$C610,$4260,$C3C0,RTSL
00:0000C4F4 C610
00:0000C4F6 4260
00:0000C4F8 C3C0
00:0000C4FA D000
                            	  3601: play_02
00:0000C4FC 4680            	  3602: 	dc.w	$4680,$0680,$43E0,$C4C0,$41A0,$C660,$6468,$C320
00:0000C4FE 0680
00:0000C500 43E0
00:0000C502 C4C0
00:0000C504 41A0
00:0000C506 C660
00:0000C508 6468
00:0000C50A C320
00:0000C50C 6590            	  3603: 	dc.w	$6590,$C6C0,$4260,$C1A0,RTSL
00:0000C50E C6C0
00:0000C510 4260
00:0000C512 C1A0
00:0000C514 D000
00:0000C516 5090            	  3604: 	dc.w	$5090,$C630,$42C0,$C380,RTSL
00:0000C518 C630
00:0000C51A 42C0
00:0000C51C C380
00:0000C51E D000
                            	  3605: play_03
00:0000C520 46C0            	  3606: 	dc.w	$46C0,$0640,$43E0,$C520,$4160,$C680,$6418,$C328
00:0000C522 0640
00:0000C524 43E0
00:0000C526 C520
00:0000C528 4160
00:0000C52A C680
00:0000C52C 6418
00:0000C52E C328
00:0000C530 65D0            	  3607: 	dc.w	$65D0,$C698,$4280,$C160,RTSL
00:0000C532 C698
00:0000C534 4280
00:0000C536 C160
00:0000C538 D000
00:0000C53A 5060            	  3608: 	dc.w	$5060,$C630,$4320,$C340,RTSL
00:0000C53C C630
00:0000C53E 4320
00:0000C540 C340
00:0000C542 D000
                            	  3609: play_04
00:0000C544 F70E            	  3610: 	dc.w	$F70E,$43C0,$C580,$4120,$C6A0,$6038,$C328,$6610
00:0000C546 43C0
00:0000C548 C580
00:0000C54A 4120
00:0000C54C C6A0
00:0000C54E 6038
00:0000C550 C328
00:0000C552 6610
00:0000C554 C660            	  3611: 	dc.w	$C660,$42A0,$C120,RTSL
00:0000C556 42A0
00:0000C558 C120
00:0000C55A D000
00:0000C55C 5030            	  3612: 	dc.w	$5030,$C640,$4360,$C2E0,RTSL
00:0000C55E C640
00:0000C560 4360
00:0000C562 C2E0
00:0000C564 D000
                            	  3613: play_05
00:0000C566 4720            	  3614: 	dc.w	$4720,$05C0,$4380,$C5E0,$40E0,$C6C0,$6088,$C320
00:0000C568 05C0
00:0000C56A 4380
00:0000C56C C5E0
00:0000C56E 40E0
00:0000C570 C6C0
00:0000C572 6088
00:0000C574 C320
00:0000C576 6648            	  3615: 	dc.w	$6648,$C630,$42C0,$C0E0,RTSL
00:0000C578 C630
00:0000C57A 42C0
00:0000C57C C0E0
00:0000C57E D000
00:0000C580 5410            	  3616: 	dc.w	$5410,$C640,$43A0,$C2A0,RTSL
00:0000C582 C640
00:0000C584 43A0
00:0000C586 C2A0
00:0000C588 D000
                            	  3617: play_06
00:0000C58A 4760            	  3618: 	dc.w	$4760,$0560,$4360,$C640,$4080,$C6C0,$60D8,$C310
00:0000C58C 0560
00:0000C58E 4360
00:0000C590 C640
00:0000C592 4080
00:0000C594 C6C0
00:0000C596 60D8
00:0000C598 C310
00:0000C59A 6680            	  3619: 	dc.w	$6680,$C5F0,$42C0,$C080,RTSL
00:0000C59C C5F0
00:0000C59E 42C0
00:0000C5A0 C080
00:0000C5A2 D000
00:0000C5A4 5440            	  3620: 	dc.w	$5440,$C630,$43E0,$C240,RTSL
00:0000C5A6 C630
00:0000C5A8 43E0
00:0000C5AA C240
00:0000C5AC D000
                            	  3621: play_07
00:0000C5AE 4780            	  3622: 	dc.w	$4780,$0500,$4320,$C680,$4040,$C6E0,$6120,$C2F8
00:0000C5B0 0500
00:0000C5B2 4320
00:0000C5B4 C680
00:0000C5B6 4040
00:0000C5B8 C6E0
00:0000C5BA 6120
00:0000C5BC C2F8
00:0000C5BE 66B0            	  3623: 	dc.w	$66B0,$C5B0,$42E0,$C040,RTSL
00:0000C5C0 C5B0
00:0000C5C2 42E0
00:0000C5C4 C040
00:0000C5C6 D000
00:0000C5C8 5480            	  3624: 	dc.w	$5480,$C630,$5210,$C0F0,RTSL
00:0000C5CA C630
00:0000C5CC 5210
00:0000C5CE C0F0
00:0000C5D0 D000
                            	  3625: play_08
00:0000C5D2 4780            	  3626: 	dc.w	$4780,$04C0,$42E0,$C6E0,$4000,$C6E0,$6168,$C2D8
00:0000C5D4 04C0
00:0000C5D6 42E0
00:0000C5D8 C6E0
00:0000C5DA 4000
00:0000C5DC C6E0
00:0000C5DE 6168
00:0000C5E0 C2D8
00:0000C5E2 66D8            	  3627: 	dc.w	$66D8,$C568,$42E0,$C000,RTSL
00:0000C5E4 C568
00:0000C5E6 42E0
00:0000C5E8 C000
00:0000C5EA D000
00:0000C5EC 54B0            	  3628: 	dc.w	$54B0,$C620,$5220,$C0B0,RTSL
00:0000C5EE C620
00:0000C5F0 5220
00:0000C5F2 C0B0
00:0000C5F4 D000
                            	  3629: play_09
00:0000C5F6 47A0            	  3630: 	dc.w	$47A0,$0460,$4280,$C720,$4440,$C6E0,$61B0,$C2B0
00:0000C5F8 0460
00:0000C5FA 4280
00:0000C5FC C720
00:0000C5FE 4440
00:0000C600 C6E0
00:0000C602 61B0
00:0000C604 C2B0
00:0000C606 66F8            	  3631: 	dc.w	$66F8,$C520,$42E0,$C440,RTSL
00:0000C608 C520
00:0000C60A 42E0
00:0000C60C C440
00:0000C60E D000
00:0000C610 54F0            	  3632: 	dc.w	$54F0,$C610,$5230,$C080,RTSL
00:0000C612 C610
00:0000C614 5230
00:0000C616 C080
00:0000C618 D000
                            	  3633: play_0A
00:0000C61A 47A0            	  3634: 	dc.w	$47A0,$0000,$4240,$C760,$4480,$C6C0,$61F0,$C280
00:0000C61C 0000
00:0000C61E 4240
00:0000C620 C760
00:0000C622 4480
00:0000C624 C6C0
00:0000C626 61F0
00:0000C628 C280
00:0000C62A 6710            	  3635: 	dc.w	$6710,$C4D8,$42C0,$C480,RTSL
00:0000C62C C4D8
00:0000C62E 42C0
00:0000C630 C480
00:0000C632 D000
00:0000C634 4640            	  3636: 	dc.w	$4640,$C7E0,$5230,$C040,RTSL
00:0000C636 C7E0
00:0000C638 5230
00:0000C63A C040
00:0000C63C D000
                            	  3637: play_0B
00:0000C63E 47A0            	  3638: 	dc.w	$47A0,$0060,$41E0,$C780,$44E0,$C6C0,$6230,$C248
00:0000C640 0060
00:0000C642 41E0
00:0000C644 C780
00:0000C646 44E0
00:0000C648 C6C0
00:0000C64A 6230
00:0000C64C C248
00:0000C64E 6720            	  3639: 	dc.w	$6720,$C488,$42C0,$C4E0,RTSL
00:0000C650 C488
00:0000C652 42C0
00:0000C654 C4E0
00:0000C656 D000
00:0000C658 46A0            	  3640: 	dc.w	$46A0,$C7A0,$5240,$C010,RTSL
00:0000C65A C7A0
00:0000C65C 5240
00:0000C65E C010
00:0000C660 D000
                            	  3641: play_0C
00:0000C662 4780            	  3642: 	dc.w	$4780,$00C0,$4180,$C7C0,$4520,$C6A0,$6260,$C210
00:0000C664 00C0
00:0000C666 4180
00:0000C668 C7C0
00:0000C66A 4520
00:0000C66C C6A0
00:0000C66E 6260
00:0000C670 C210
00:0000C672 6728            	  3643: 	dc.w	$6728,$C438,$42A0,$C520,RTSL
00:0000C674 C438
00:0000C676 42A0
00:0000C678 C520
00:0000C67A D000
00:0000C67C 46E0            	  3644: 	dc.w	$46E0,$C760,$5240,$C430,RTSL
00:0000C67E C760
00:0000C680 5240
00:0000C682 C430
00:0000C684 D000
                            	  3645: play_0D
00:0000C686 4780            	  3646: 	dc.w	$4780,$0100,$4120,$C7E0,$4560,$C680,$6298,$C1D0
00:0000C688 0100
00:0000C68A 4120
00:0000C68C C7E0
00:0000C68E 4560
00:0000C690 C680
00:0000C692 6298
00:0000C694 C1D0
00:0000C696 6728            	  3647: 	dc.w	$6728,$C018,$4280,$C560,RTSL
00:0000C698 C018
00:0000C69A 4280
00:0000C69C C560
00:0000C69E D000
00:0000C6A0 4740            	  3648: 	dc.w	$4740,$C720,$5230,$C460,RTSL
00:0000C6A2 C720
00:0000C6A4 5230
00:0000C6A6 C460
00:0000C6A8 D000
                            	  3649: play_0E
00:0000C6AA 4760            	  3650: 	dc.w	$4760,$0160,$40C0,$C7E0,$45A0,$C660,$62C0,$C190
00:0000C6AC 0160
00:0000C6AE 40C0
00:0000C6B0 C7E0
00:0000C6B2 45A0
00:0000C6B4 C660
00:0000C6B6 62C0
00:0000C6B8 C190
00:0000C6BA 6720            	  3651: 	dc.w	$6720,$C068,$4260,$C5A0,RTSL
00:0000C6BC C068
00:0000C6BE 4260
00:0000C6C0 C5A0
00:0000C6C2 D000
00:0000C6C4 4780            	  3652: 	dc.w	$4780,$C6C0,$5230,$C490,RTSL
00:0000C6C6 C6C0
00:0000C6C8 5230
00:0000C6CA C490
00:0000C6CC D000
                            	  3653: play_0F
00:0000C6CE 4720            	  3654: 	dc.w	$4720,$01C0,$5030,$C600,$45C0,$C620,$62E0,$C148
00:0000C6D0 01C0
00:0000C6D2 5030
00:0000C6D4 C600
00:0000C6D6 45C0
00:0000C6D8 C620
00:0000C6DA 62E0
00:0000C6DC C148
00:0000C6DE 6718            	  3655: 	dc.w	$6718,$C0B0,$4220,$C5C0,RTSL
00:0000C6E0 C0B0
00:0000C6E2 4220
00:0000C6E4 C5C0
00:0000C6E6 D000
00:0000C6E8 47C0            	  3656: 	dc.w	$47C0,$C660,$5210,$C4D0,RTSL
00:0000C6EA C660
00:0000C6EC 5210
00:0000C6EE C4D0
00:0000C6F0 D000
                            	  3657: play_10
00:0000C6F2 F70A            	  3658: 	dc.w	$F70A,$F8CE,$FDCD,$6300,$C100,$6700,$C100,$F9CD
00:0000C6F4 F8CE
00:0000C6F6 FDCD
00:0000C6F8 6300
00:0000C6FA C100
00:0000C6FC 6700
00:0000C6FE C100
00:0000C700 F9CD
00:0000C702 D000            	  3659: 	dc.w	RTSL
00:0000C704 FECD            	  3660: 	dc.w	$FECD,$FACD,RTSL
00:0000C706 FACD
00:0000C708 D000
                            	  3661: 
                            	  3662: ; ship outline for player lives
                            	  3663: 
                            	  3664: play_liv
00:0000C70A F70E            	  3665: 	dc.w	$F70E,$F87A,$FD79,$6300,$7500,$6700,$7500,$F979
00:0000C70C F87A
00:0000C70E FD79
00:0000C710 6300
00:0000C712 7500
00:0000C714 6700
00:0000C716 7500
00:0000C718 F979
00:0000C71A 60C0            	  3666: 	dc.w	$60C0,$0280,$D09F
00:0000C71C 0280
00:0000C71E D09F
                            	  3667: 
                            	  3668: ; character set
                            	  3669: 
                            	  3670: char_a						; A
00:0000C720 FA70            	  3671: 	dc.w	$FA70,$F272,$F672,$FE70
00:0000C722 F272
00:0000C724 F672
00:0000C726 FE70
00:0000C728 F906            	  3672: 	dc.w	$F906,$F872,$F602,RTSL
00:0000C72A F872
00:0000C72C F602
00:0000C72E D000
                            	  3673: char_b						; B
00:0000C730 FB70            	  3674: 	dc.w	$FB70,$F073,$F571,$F570
00:0000C732 F073
00:0000C734 F571
00:0000C736 F570
00:0000C738 F575            	  3675: 	dc.w	$F575,$F077,$F003,$F571
00:0000C73A F077
00:0000C73C F003
00:0000C73E F571
00:0000C740 F570            	  3676: 	dc.w	$F570,$F575,$F077,$F803,RTSL
00:0000C742 F575
00:0000C744 F077
00:0000C746 F803
00:0000C748 D000
                            	  3677: char_c						; C
00:0000C74A FB70            	  3678: 	dc.w	$FB70,$F872,$FF06,$F872
00:0000C74C F872
00:0000C74E FF06
00:0000C750 F872
00:0000C752 F002            	  3679: 	dc.w	$F002,RTSL
00:0000C754 D000
                            	  3680: char_d						; D
00:0000C756 FB70            	  3681: 	dc.w	$FB70,$F072,$F672,$F670
00:0000C758 F072
00:0000C75A F672
00:0000C75C F670
00:0000C75E F676            	  3682: 	dc.w	$F676,$F076,$F803,RTSL
00:0000C760 F076
00:0000C762 F803
00:0000C764 D000
                            	  3683: char_e						; E
00:0000C766 FB70            	  3684: 	dc.w	$FB70,$F872,$F705,$F077
00:0000C768 F872
00:0000C76A F705
00:0000C76C F077
00:0000C76E F700            	  3685: 	dc.w	$F700,$F872,$F002,RTSL
00:0000C770 F872
00:0000C772 F002
00:0000C774 D000
                            	  3686: char_f						; F
00:0000C776 FB70            	  3687: 	dc.w	$FB70,$F872,$F705,$F077
00:0000C778 F872
00:0000C77A F705
00:0000C77C F077
00:0000C77E F700            	  3688: 	dc.w	$F700,$F803,RTSL
00:0000C780 F803
00:0000C782 D000
                            	  3689: char_g						; G
00:0000C784 FB70            	  3690: 	dc.w	$FB70,$F872,$F670,$F606
00:0000C786 F872
00:0000C788 F670
00:0000C78A F606
00:0000C78C F072            	  3691: 	dc.w	$F072,$F670,$F876,$F803
00:0000C78E F670
00:0000C790 F876
00:0000C792 F803
00:0000C794 D000            	  3692: 	dc.w	RTSL
                            	  3693: char_h						; H
00:0000C796 FB70            	  3694: 	dc.w	$FB70,$F700,$F872,$F300
00:0000C798 F700
00:0000C79A F872
00:0000C79C F300
00:0000C79E FF70            	  3695: 	dc.w	$FF70,$F002,RTSL
00:0000C7A0 F002
00:0000C7A2 D000
                            	  3696: char_i						; I
00:0000C7A4 F872            	  3697: 	dc.w	$F872,$F006,$FB70,$F002
00:0000C7A6 F006
00:0000C7A8 FB70
00:0000C7AA F002
00:0000C7AC F876            	  3698: 	dc.w	$F876,$FF03,RTSL
00:0000C7AE FF03
00:0000C7B0 D000
                            	  3699: char_j						; J
00:0000C7B2 F200            	  3700: 	dc.w	$F200,$F672,$F072,$FB70
00:0000C7B4 F672
00:0000C7B6 F072
00:0000C7B8 FB70
00:0000C7BA FF01            	  3701: 	dc.w	$FF01,RTSL
00:0000C7BC D000
                            	  3702: char_k						; K
00:0000C7BE FB70            	  3703: 	dc.w	$FB70,$F003,$F777,$F773
00:0000C7C0 F003
00:0000C7C2 F777
00:0000C7C4 F773
00:0000C7C6 F003            	  3704: 	dc.w	$F003,RTSL
00:0000C7C8 D000
                            	  3705: char_l						; L
00:0000C7CA FB00            	  3706: 	dc.w	$FB00,$FF70,$F872,$F002,RTSL
00:0000C7CC FF70
00:0000C7CE F872
00:0000C7D0 F002
00:0000C7D2 D000
                            	  3707: char_m						; M
00:0000C7D4 FB70            	  3708: 	dc.w	$FB70,$F672,$F272,$FF70
00:0000C7D6 F672
00:0000C7D8 F272
00:0000C7DA FF70
00:0000C7DC F002            	  3709: 	dc.w	$F002,RTSL
00:0000C7DE D000
                            	  3710: char_n						; N
00:0000C7E0 FB70            	  3711: 	dc.w	$FB70,$FF72,$FB70,$FF01,RTSL
00:0000C7E2 FF72
00:0000C7E4 FB70
00:0000C7E6 FF01
00:0000C7E8 D000
                            	  3712: char_o0						; O,0
00:0000C7EA FB70            	  3713: 	dc.w	$FB70,$F872,$FF70,$F876
00:0000C7EC F872
00:0000C7EE FF70
00:0000C7F0 F876
00:0000C7F2 F803            	  3714: 	dc.w	$F803,RTSL
00:0000C7F4 D000
                            	  3715: char_p						; P
00:0000C7F6 FB70            	  3716: 	dc.w	$FB70,$F872,$F770,$F876
00:0000C7F8 F872
00:0000C7FA F770
00:0000C7FC F876
00:0000C7FE F703            	  3717: 	dc.w	$F703,$F003,RTSL
00:0000C800 F003
00:0000C802 D000
                            	  3718: char_q						; Q
00:0000C804 FB70            	  3719: 	dc.w	$FB70,$F872,$FE70,$F676
00:0000C806 F872
00:0000C808 FE70
00:0000C80A F676
00:0000C80C F076            	  3720: 	dc.w	$F076,$F202,$F672,$F002
00:0000C80E F202
00:0000C810 F672
00:0000C812 F002
00:0000C814 D000            	  3721: 	dc.w	RTSL
                            	  3722: char_r						; R
00:0000C816 FB70            	  3723: 	dc.w	$FB70,$F872,$F770,$F876
00:0000C818 F872
00:0000C81A F770
00:0000C81C F876
00:0000C81E F001            	  3724: 	dc.w	$F001,$F773,$F002,RTSL
00:0000C820 F773
00:0000C822 F002
00:0000C824 D000
                            	  3725: char_s						; S
00:0000C826 F872            	  3726: 	dc.w	$F872,$F370,$F876,$F370
00:0000C828 F370
00:0000C82A F876
00:0000C82C F370
00:0000C82E F872            	  3727: 	dc.w	$F872,$FF01,RTSL
00:0000C830 FF01
00:0000C832 D000
                            	  3728: char_t						; T
00:0000C834 F002            	  3729: 	dc.w	$F002,$FB70,$F006,$F872
00:0000C836 FB70
00:0000C838 F006
00:0000C83A F872
00:0000C83C FF01            	  3730: 	dc.w	$FF01,RTSL
00:0000C83E D000
                            	  3731: char_u						; U
00:0000C840 FB00            	  3732: 	dc.w	$FB00,$FF70,$F872,$FB70
00:0000C842 FF70
00:0000C844 F872
00:0000C846 FB70
00:0000C848 FF01            	  3733: 	dc.w	$FF01,RTSL
00:0000C84A D000
                            	  3734: char_v						; V
00:0000C84C FB00            	  3735: 	dc.w	$FB00,$FF71,$FB71,$FF01,RTSL
00:0000C84E FF71
00:0000C850 FB71
00:0000C852 FF01
00:0000C854 D000
                            	  3736: char_w						; W
00:0000C856 FB00            	  3737: 	dc.w	$FB00,$FF70,$F272,$F672
00:0000C858 FF70
00:0000C85A F272
00:0000C85C F672
00:0000C85E FB70            	  3738: 	dc.w	$FB70,$FF01,RTSL
00:0000C860 FF01
00:0000C862 D000
                            	  3739: char_x						; X
00:0000C864 FB72            	  3740: 	dc.w	$FB72,$F806,$FF72,$F002,RTSL
00:0000C866 F806
00:0000C868 FF72
00:0000C86A F002
00:0000C86C D000
                            	  3741: char_y						; Y
00:0000C86E F002            	  3742: 	dc.w	$F002,$FA70,$F276,$F802
00:0000C870 FA70
00:0000C872 F276
00:0000C874 F802
00:0000C876 F676            	  3743: 	dc.w	$F676,$FE02,RTSL
00:0000C878 FE02
00:0000C87A D000
                            	  3744: char_z						; Z
00:0000C87C FB00            	  3745: 	dc.w	$FB00,$F872,$FF76,$F872
00:0000C87E F872
00:0000C880 FF76
00:0000C882 F872
00:0000C884 F002            	  3746: 	dc.w	$F002,RTSL
00:0000C886 D000
                            	  3747: char_spc						; [SPACE]
00:0000C888 F803            	  3748: 	dc.w	$F803,RTSL
00:0000C88A D000
                            	  3749: char_1						; 1
00:0000C88C F002            	  3750: 	dc.w	$F002,$FB70,$FF02,RTSL
00:0000C88E FB70
00:0000C890 FF02
00:0000C892 D000
                            	  3751: char_2						; 2
00:0000C894 FB00            	  3752: 	dc.w	$FB00,$F872,$F770,$F876
00:0000C896 F872
00:0000C898 F770
00:0000C89A F876
00:0000C89C F770            	  3753: 	dc.w	$F770,$F872,$F002,RTSL
00:0000C89E F872
00:0000C8A0 F002
00:0000C8A2 D000
                            	  3754: char_3						; 3
00:0000C8A4 F872            	  3755: 	dc.w	$F872,$FB70,$F876,$F700
00:0000C8A6 FB70
00:0000C8A8 F876
00:0000C8AA F700
00:0000C8AC F872            	  3756: 	dc.w	$F872,$F702,RTSL
00:0000C8AE F702
00:0000C8B0 D000
                            	  3757: char_4						; 4
00:0000C8B2 FB00            	  3758: 	dc.w	$FB00,$F770,$F872,$F300
00:0000C8B4 F770
00:0000C8B6 F872
00:0000C8B8 F300
00:0000C8BA FF70            	  3759: 	dc.w	$FF70,$F002,RTSL
00:0000C8BC F002
00:0000C8BE D000
                            	  3760: char_5						; 6
00:0000C8C0 F872            	  3761: 	dc.w	$F872,$F370,$F876,$F370
00:0000C8C2 F370
00:0000C8C4 F876
00:0000C8C6 F370
00:0000C8C8 F872            	  3762: 	dc.w	$F872,$FF01,RTSL
00:0000C8CA FF01
00:0000C8CC D000
                            	  3763: char_6						; 6
00:0000C8CE F300            	  3764: 	dc.w	$F300,$F872,$F770,$F876
00:0000C8D0 F872
00:0000C8D2 F770
00:0000C8D4 F876
00:0000C8D6 FB70            	  3765: 	dc.w	$FB70,$FF03,RTSL
00:0000C8D8 FF03
00:0000C8DA D000
                            	  3766: char_7						; 7
00:0000C8DC FB00            	  3767: 	dc.w	$FB00,$F872,$FF70,$F002,RTSL
00:0000C8DE F872
00:0000C8E0 FF70
00:0000C8E2 F002
00:0000C8E4 D000
                            	  3768: char_8						; 8
00:0000C8E6 F872            	  3769: 	dc.w	$F872,$FB70,$F876,$FF70
00:0000C8E8 FB70
00:0000C8EA F876
00:0000C8EC FF70
00:0000C8EE F300            	  3770: 	dc.w	$F300,$F872,$F702,RTSL
00:0000C8F0 F872
00:0000C8F2 F702
00:0000C8F4 D000
                            	  3771: char_9						; 9
00:0000C8F6 F802            	  3772: 	dc.w	$F802,$FB70,$F876,$F770
00:0000C8F8 FB70
00:0000C8FA F876
00:0000C8FC F770
00:0000C8FE F872            	  3773: 	dc.w	$F872,$F702,RTSL
00:0000C900 F702
00:0000C902 D000
                            	  3774: 
                            	  3775: ; indirect table for character set
                            	  3776: 
                            	  3777: char_set
00:0000C904 CAD0            	  3778: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000C906 CA81            	  3779: 	dc.w	JSRL+(char_o0-vector)>>1	; 0 also O
00:0000C908 CAD2            	  3780: 	dc.w	JSRL+(char_1-vector)>>1		; 1
00:0000C90A CAD6            	  3781: 	dc.w	JSRL+(char_2-vector)>>1		; 2
00:0000C90C CADE            	  3782: 	dc.w	JSRL+(char_3-vector)>>1		; 3
00:0000C90E CAE5            	  3783: 	dc.w	JSRL+(char_4-vector)>>1		; 4
00:0000C910 CAEC            	  3784: 	dc.w	JSRL+(char_5-vector)>>1		; 5
00:0000C912 CAF3            	  3785: 	dc.w	JSRL+(char_6-vector)>>1		; 6
00:0000C914 CAFA            	  3786: 	dc.w	JSRL+(char_7-vector)>>1		; 7
00:0000C916 CAFF            	  3787: 	dc.w	JSRL+(char_8-vector)>>1		; 8
00:0000C918 CB07            	  3788: 	dc.w	JSRL+(char_9-vector)>>1		; 9
00:0000C91A CA1C            	  3789: 	dc.w	JSRL+(char_a-vector)>>1		; A
00:0000C91C CA24            	  3790: 	dc.w	JSRL+(char_b-vector)>>1		; B
00:0000C91E CA31            	  3791: 	dc.w	JSRL+(char_c-vector)>>1		; C
00:0000C920 CA37            	  3792: 	dc.w	JSRL+(char_d-vector)>>1		; D
00:0000C922 CA3F            	  3793: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000C924 CA47            	  3794: 	dc.w	JSRL+(char_f-vector)>>1		; F
00:0000C926 CA4E            	  3795: 	dc.w	JSRL+(char_g-vector)>>1		; G
00:0000C928 CA57            	  3796: 	dc.w	JSRL+(char_h-vector)>>1		; H
00:0000C92A CA5E            	  3797: 	dc.w	JSRL+(char_i-vector)>>1		; I
00:0000C92C CA65            	  3798: 	dc.w	JSRL+(char_j-vector)>>1		; J
00:0000C92E CA6B            	  3799: 	dc.w	JSRL+(char_k-vector)>>1		; K
00:0000C930 CA71            	  3800: 	dc.w	JSRL+(char_l-vector)>>1		; L
00:0000C932 CA76            	  3801: 	dc.w	JSRL+(char_m-vector)>>1		; M
00:0000C934 CA7C            	  3802: 	dc.w	JSRL+(char_n-vector)>>1		; N
00:0000C936 CA81            	  3803: 	dc.w	JSRL+(char_o0-vector)>>1	; O also 0
00:0000C938 CA87            	  3804: 	dc.w	JSRL+(char_p-vector)>>1		; P
00:0000C93A CA8E            	  3805: 	dc.w	JSRL+(char_q-vector)>>1		; Q
00:0000C93C CA97            	  3806: 	dc.w	JSRL+(char_r-vector)>>1		; R
00:0000C93E CA9F            	  3807: 	dc.w	JSRL+(char_s-vector)>>1		; S
00:0000C940 CAA6            	  3808: 	dc.w	JSRL+(char_t-vector)>>1		; T
00:0000C942 CAAC            	  3809: 	dc.w	JSRL+(char_u-vector)>>1		; U
00:0000C944 CAB2            	  3810: 	dc.w	JSRL+(char_v-vector)>>1		; V
00:0000C946 CAB7            	  3811: 	dc.w	JSRL+(char_w-vector)>>1		; W
00:0000C948 CABE            	  3812: 	dc.w	JSRL+(char_x-vector)>>1		; X
00:0000C94A CAC3            	  3813: 	dc.w	JSRL+(char_y-vector)>>1		; Y
00:0000C94C CACA            	  3814: 	dc.w	JSRL+(char_z-vector)>>1		; Z
                            	  3815: 
                            	  3816: ; indirect shot table
                            	  3817: 
                            	  3818: shot_jsr
00:0000C94E CB34            	  3819: 	dc.w	JSRL+(shot_vec-vector)>>1	; shot
                            	  3820: 
                            	  3821: ; shot vector object, a small cross of intensity $F
                            	  3822: 
                            	  3823: shot_vec
00:0000C950 7420            	  3824: 	dc.w	$7420,$0000
00:0000C952 0000
00:0000C954 7040            	  3825: 	dc.w	$7040,$F000
00:0000C956 F000
00:0000C958 7420            	  3826: 	dc.w	$7420,$0420
00:0000C95A 0420
00:0000C95C 7000            	  3827: 	dc.w	$7000,$F040
00:0000C95E F040
00:0000C960 D000            	  3828: 	dc.w	RTSL
                            	  3829: 
                            	  3830: 
                            	  3831: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3832: ;
                            	  3833: ; canned messages
                            	  3834: 
                            	  3835: ; x,y co-ordinates for the message origins
                            	  3836: 
                            	  3837: mess_origin
00:0000C962 0064            	  3838: 	dc.w	$0064,$00B6				; message 0 x,y
00:0000C964 00B6
00:0000C966 0064            	  3839: 	dc.w	$0064,$00B6				; message 1 x,y
00:0000C968 00B6
00:0000C96A 000C            	  3840: 	dc.w	$000C,$00AA				; message 2 x,y
00:0000C96C 00AA
00:0000C96E 000C            	  3841: 	dc.w	$000C,$00A2				; message 3 x,y
00:0000C970 00A2
00:0000C972 000C            	  3842: 	dc.w	$000C,$009A				; message 4 x,y
00:0000C974 009A
00:0000C976 000C            	  3843: 	dc.w	$000C,$0092				; message 5 x,y
00:0000C978 0092
00:0000C97A 0064            	  3844: 	dc.w	$0064,$00C6				; message 6 x,y
00:0000C97C 00C6
00:0000C97E 0064            	  3845: 	dc.w	$0064,$009D				; message 7 x,y
00:0000C980 009D
                            	  3846: 
                            	  3847: ; message tables
                            	  3848: 
                            	  3849: mess_table
00:0000C982 0008            	  3850: 	dc.w	e_messages-mess_table		; english
00:0000C984 00C2            	  3851: 	dc.w	d_messages-mess_table		; german
00:0000C986 019E            	  3852: 	dc.w	f_messages-mess_table		; french
00:0000C988 026C            	  3853: 	dc.w	s_messages-mess_table		; spanish
                            	  3854: 
                            	  3855: ; message offset table
                            	  3856: 
                            	  3857: e_messages
00:0000C98A 0010            	  3858: 	dc.w	e_mess_0-e_messages		; message 0
00:0000C98C 001C            	  3859: 	dc.w	e_mess_1-e_messages		; message 1
00:0000C98E 0024            	  3860: 	dc.w	e_mess_2-e_messages		; message 2
00:0000C990 0046            	  3861: 	dc.w	e_mess_3-e_messages		; message 3
00:0000C992 0061            	  3862: 	dc.w	e_mess_4-e_messages		; message 4
00:0000C994 007E            	  3863: 	dc.w	e_mess_5-e_messages		; message 5
00:0000C996 00A5            	  3864: 	dc.w	e_mess_6-e_messages		; message 6
00:0000C998 00B0            	  3865: 	dc.w	e_mess_7-e_messages		; message 7
                            	  3866: 
                            	  3867: e_mess_0
00:0000C99A 484947482053434F	  3868: 	dc.b	'HIGH SCORES',$00
00:0000C9A2 524553
00:0000C9A5 00
                            	  3869: e_mess_1
00:0000C9A6 504C4159455220  	  3870: 	dc.b	'PLAYER ',$00
00:0000C9AD 00
                            	  3871: e_mess_2
00:0000C9AE 594F55522053434F	  3872: 	dc.b	'YOUR SCORE IS ONE OF THE TEN BEST',$00
00:0000C9B6 5245204953204F4E
00:0000C9BE 45204F4620544845
00:0000C9C6 2054454E20424553
00:0000C9CE 54
00:0000C9CF 00
                            	  3873: e_mess_3
00:0000C9D0 504C454153452045	  3874: 	dc.b	'PLEASE ENTER YOUR INITIALS',$00
00:0000C9D8 4E54455220594F55
00:0000C9E0 5220494E49544941
00:0000C9E8 4C53
00:0000C9EA 00
                            	  3875: e_mess_4
00:0000C9EB 5055534820524F54	  3876: 	dc.b	'PUSH ROTATE TO SELECT LETTER',$00
00:0000C9F3 41544520544F2053
00:0000C9FB 454C454354204C45
00:0000CA03 54544552
00:0000CA07 00
                            	  3877: e_mess_5
00:0000CA08 5055534820485950	  3878: 	dc.b	'PUSH HYPERSPACE WHEN LETTER IS CORRECT',$00
00:0000CA10 4552535041434520
00:0000CA18 5748454E204C4554
00:0000CA20 5445522049532043
00:0000CA28 4F5252454354
00:0000CA2E 00
                            	  3879: e_mess_6
00:0000CA2F 5055534820535441	  3880: 	dc.b	'PUSH START',$00
00:0000CA37 5254
00:0000CA39 00
                            	  3881: e_mess_7
00:0000CA3A 47414D45204F5645	  3882: 	dc.b	'GAME OVER',$00
00:0000CA42 52
00:0000CA43 00
                            	  3883: 
                            	  3884: 	ds.w	0					; ensure even
                            	  3885: 
                            	  3886: ; german message offset table
                            	  3887: 
                            	  3888: d_messages
00:0000CA44 0010            	  3889: 	dc.w	d_mess_0-d_messages		; message 0
00:0000CA46 0020            	  3890: 	dc.w	d_mess_1-d_messages		; message 1
00:0000CA48 0029            	  3891: 	dc.w	d_mess_2-d_messages		; message 2
00:0000CA4A 0050            	  3892: 	dc.w	d_mess_3-d_messages		; message 3
00:0000CA4C 0073            	  3893: 	dc.w	d_mess_4-d_messages		; message 4
00:0000CA4E 0096            	  3894: 	dc.w	d_mess_5-d_messages		; message 5
00:0000CA50 00BC            	  3895: 	dc.w	d_mess_6-d_messages		; message 6
00:0000CA52 00D2            	  3896: 	dc.w	d_mess_7-d_messages		; message 7
                            	  3897: 
                            	  3898: d_mess_0
00:0000CA54 484F454348535445	  3899: 	dc.b	'HOECHSTERGEBNIS',$00
00:0000CA5C 524745424E4953
00:0000CA63 00
                            	  3900: d_mess_1
00:0000CA64 535049454C455220	  3901: 	dc.b	'SPIELER ',$00
00:0000CA6C 00
                            	  3902: d_mess_2
00:0000CA6D 4948522045524745	  3903: 	dc.b	'IHR ERGEBNIS IST EINES DER ZEHN BESTEN',$00
00:0000CA75 424E495320495354
00:0000CA7D 2045494E45532044
00:0000CA85 4552205A45484E20
00:0000CA8D 42455354454E
00:0000CA93 00
                            	  3904: d_mess_3
00:0000CA94 4249545445204745	  3905: 	dc.b	'BITTE GEBEN SIE IHRE INITIALEN EIN',$00
00:0000CA9C 42454E2053494520
00:0000CAA4 4948524520494E49
00:0000CAAC 5449414C454E2045
00:0000CAB4 494E
00:0000CAB6 00
                            	  3906: d_mess_4
00:0000CAB7 5A55522042554348	  3907: 	dc.b	'ZUR BUCHSTABENWAHL ROTATE DRUECKEN',$00
00:0000CABF 53544142454E5741
00:0000CAC7 484C20524F544154
00:0000CACF 452044525545434B
00:0000CAD7 454E
00:0000CAD9 00
                            	  3908: d_mess_5
00:0000CADA 57454E4E20425543	  3909: 	dc.b	'WENN BUCHSTABE OK HYPERSPACE DRUECKEN',$00
00:0000CAE2 485354414245204F
00:0000CAEA 4B20485950455253
00:0000CAF2 5041434520445255
00:0000CAFA 45434B454E
00:0000CAFF 00
                            	  3910: d_mess_6
00:0000CB00 53544152544B4E4F	  3911: 	dc.b	'STARTKNOEPFE DRUECKEN',$00
00:0000CB08 4550464520445255
00:0000CB10 45434B454E
00:0000CB15 00
                            	  3912: d_mess_7
00:0000CB16 535049454C454E44	  3913: 	dc.b	'SPIELENDE',$00
00:0000CB1E 45
00:0000CB1F 00
                            	  3914: 
                            	  3915: 	ds.w	0					; ensure even
                            	  3916: 
                            	  3917: ; french message offset table
                            	  3918: 
                            	  3919: f_messages
00:0000CB20 0010            	  3920: 	dc.w	f_mess_0-f_messages		; message 0
00:0000CB22 001F            	  3921: 	dc.w	f_mess_1-f_messages		; message 1
00:0000CB24 0026            	  3922: 	dc.w	f_mess_2-f_messages		; message 2
00:0000CB26 004A            	  3923: 	dc.w	f_mess_3-f_messages		; message 3
00:0000CB28 0063            	  3924: 	dc.w	f_mess_4-f_messages		; message 4
00:0000CB2A 0085            	  3925: 	dc.w	f_mess_5-f_messages		; message 5
00:0000CB2C 00AE            	  3926: 	dc.w	f_mess_6-f_messages		; message 6
00:0000CB2E 00C0            	  3927: 	dc.w	f_mess_7-f_messages		; message 7
                            	  3928: 
                            	  3929: f_mess_0
00:0000CB30 4D45494C4C455552	  3930: 	dc.b	'MEILLEUR SCORE',$00
00:0000CB38 2053434F5245
00:0000CB3E 00
                            	  3931: f_mess_1
00:0000CB3F 4A4F55455220    	  3932: 	dc.b	'JOUER ',$00
00:0000CB45 00
                            	  3933: f_mess_2
00:0000CB46 564F545245205343	  3934: 	dc.b	'VOTRE SCORE EST UN DES 10 MEILLEURS',$00
00:0000CB4E 4F52452045535420
00:0000CB56 554E204445532031
00:0000CB5E 30204D45494C4C45
00:0000CB66 555253
00:0000CB69 00
                            	  3935: f_mess_3
00:0000CB6A 53565020454E5452	  3936: 	dc.b	'SVP ENTREZ VOS INITIALES',$00
00:0000CB72 455A20564F532049
00:0000CB7A 4E495449414C4553
00:0000CB82 00
                            	  3937: f_mess_4
00:0000CB83 504F555353455A20	  3938: 	dc.b	'POUSSEZ ROTATE POUR VOS INITIALES',$00
00:0000CB8B 524F544154452050
00:0000CB93 4F555220564F5320
00:0000CB9B 494E495449414C45
00:0000CBA3 53
00:0000CBA4 00
                            	  3939: f_mess_5
00:0000CBA5 504F555353455A20	  3940: 	dc.b	'POUSSEZ HYPERSPACE QUAND LETTRE CORRECTE',$00
00:0000CBAD 4859504552535041
00:0000CBB5 4345205155414E44
00:0000CBBD 204C455454524520
00:0000CBC5 434F525245435445
00:0000CBCD 00
                            	  3941: f_mess_6
00:0000CBCE 4150505559455220	  3942: 	dc.b	'APPUYER SUR START',$00
00:0000CBD6 5355522053544152
00:0000CBDE 54
00:0000CBDF 00
                            	  3943: f_mess_7
00:0000CBE0 46494E2044452050	  3944: 	dc.b	'FIN DE PARTIE',$00
00:0000CBE8 4152544945
00:0000CBED 00
                            	  3945: 
                            	  3946: 	ds.w	0					; ensure even
                            	  3947: 
                            	  3948: ; spanish message offset table
                            	  3949: 
                            	  3950: s_messages
00:0000CBEE 0010            	  3951: 	dc.w	s_mess_0-s_messages		; message 0
00:0000CBF0 0018            	  3952: 	dc.w	s_mess_1-s_messages		; message 1
00:0000CBF2 0021            	  3953: 	dc.w	s_mess_2-s_messages		; message 2
00:0000CBF4 0048            	  3954: 	dc.w	s_mess_3-s_messages		; message 3
00:0000CBF6 0066            	  3955: 	dc.w	s_mess_4-s_messages		; message 4
00:0000CBF8 008E            	  3956: 	dc.w	s_mess_5-s_messages		; message 5
00:0000CBFA 00A0            	  3957: 	dc.w	s_mess_6-s_messages		; message 6
00:0000CBFC 00AD            	  3958: 	dc.w	s_mess_7-s_messages		; message 7
                            	  3959: 
                            	  3960: s_mess_0
00:0000CBFE 5245434F524453  	  3961: 	dc.b	'RECORDS',$00
00:0000CC05 00
                            	  3962: s_mess_1
00:0000CC06 4A554741444F5220	  3963: 	dc.b	'JUGADOR ',$00
00:0000CC0E 00
                            	  3964: s_mess_2
00:0000CC0F 53552050554E5441	  3965: 	dc.b	'SU PUNTAJE ESTA ENTRE LOS DIEZ MEJORES',$00
00:0000CC17 4A45204553544120
00:0000CC1F 454E545245204C4F
00:0000CC27 53204449455A204D
00:0000CC2F 454A4F524553
00:0000CC35 00
                            	  3966: s_mess_3
00:0000CC36 504F52204641564F	  3967: 	dc.b	'POR FAVOR ENTRE SUS INICIALES',$00
00:0000CC3E 5220454E54524520
00:0000CC46 53555320494E4943
00:0000CC4E 49414C4553
00:0000CC53 00
                            	  3968: s_mess_4
00:0000CC54 4F5052494D412052	  3969: 	dc.b	'OPRIMA ROTATE PARA SELECCIONAR LA LETRA',$00
00:0000CC5C 4F54415445205041
00:0000CC64 52412053454C4543
00:0000CC6C 43494F4E4152204C
00:0000CC74 41204C45545241
00:0000CC7B 00
                            	  3970: s_mess_5
00:0000CC7C 4F5052494D412048	  3971: 	dc.b	'OPRIMA HYPERSPACE',$00
00:0000CC84 5950455253504143
00:0000CC8C 45
00:0000CC8D 00
                            	  3972: s_mess_6
00:0000CC8E 50554C5341522053	  3973: 	dc.b	'PULSAR START',$00
00:0000CC96 54415254
00:0000CC9A 00
                            	  3974: s_mess_7
00:0000CC9B 4A5545474F205445	  3975: 	dc.b	'JUEGO TERMINADO',$00
00:0000CCA3 524D494E41444F
00:0000CCAA 00
                            	  3976: 
                            	  3977: 	ds.w	0					; ensure even
                            	  3978: 
                            	  3979: 
                            	  3980: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3981: ;
                            	  3982: ; include files
                            	  3983: 
                            	  3984: 	INCLUDE	"games/asteroids/sounds.x68"

Source: "games\asteroids\sounds.x68"
                            	     1: *************************************************************************************
                            	     2: *														*
                            	     3: *	Sound routines V1.00. This is an include file for asteroids 1_0.x68		*
                            	     4: *														*
                            	     5: *	load the sounds, play an indexed sample. Uses the DirextX sound play and	*
                            	     6: *	requires EASy68K 3.7.10 beta or later.							*
                            	     7: *														*
                            	     8: *************************************************************************************
                            	     9: 
                            	    10: sfire_snd	EQU  0
                            	    11: pfire_snd	EQU  1
                            	    12: thrst_snd	EQU  2
                            	    13: smsau_snd	EQU  3
                            	    14: lgsau_snd	EQU  4
                            	    15: sexpl_snd	EQU  5
                            	    16: mexpl_snd	EQU  sexpl_snd+1
                            	    17: lexpl_snd	EQU  sexpl_snd+2
                            	    18: beat1_snd	EQU  8				* beat_2 must be beat_1 XOR 1
                            	    19: beat2_snd	EQU  9				* see above
                            	    20: extra_snd	EQU 10
                            	    21: 
                            	    22: 
                            	    23: *************************************************************************************
                            	    24: *
                            	    25: * initialise the sounds routine
                            	    26: 
                            	    27: sound_init
00:0000CCAC 422B0014        	    28: 	MOVE.b	#0,s_key(a3)		* clear the last [S] key status
00:0000CCB0 177C00FF0015    	    29: 	MOVE.b	#-1,play_sound(a3)	* set the sound flag
                            	    30: 
00:0000CCB6 43FA0098        	    31: 	LEA		beat1_sound(pc),a1	* point to the background beat sound file name
00:0000CCBA 7208            	    32: 	MOVEQ		#beat1_snd,d1		* index 10
00:0000CCBC 614E            	    33: 	BSR.s		load_sound			* load the sound into directx memory
                            	    34: 
00:0000CCBE 43FA00A2        	    35: 	LEA		beat2_sound(pc),a1	* point to the background beat sound file name
00:0000CCC2 7209            	    36: 	MOVEQ		#beat2_snd,d1		* index 9
00:0000CCC4 6146            	    37: 	BSR.s		load_sound			* load the sound into directx memory
                            	    38: 
00:0000CCC6 43FA00AC        	    39: 	LEA		lexpl_sound(pc),a1	* point to the large explosion sound file name
00:0000CCCA 7207            	    40: 	MOVEQ		#lexpl_snd,d1		* index 8
00:0000CCCC 613E            	    41: 	BSR.s		load_sound			* load the sound into directx memory
                            	    42: 
00:0000CCCE 43FA00B9        	    43: 	LEA		mexpl_sound(pc),a1	* point to the medium explosion sound file name
00:0000CCD2 7206            	    44: 	MOVEQ		#mexpl_snd,d1		* index 7
00:0000CCD4 6136            	    45: 	BSR.s		load_sound			* load the sound into directx memory
                            	    46: 
00:0000CCD6 43FA00C6        	    47: 	LEA		sexpl_sound(pc),a1	* point to the small explosion sound file name
00:0000CCDA 7205            	    48: 	MOVEQ		#sexpl_snd,d1		* index 6
00:0000CCDC 612E            	    49: 	BSR.s		load_sound			* load the sound into directx memory
                            	    50: 
00:0000CCDE 43FA00D3        	    51: 	LEA		extra_sound(pc),a1	* point to the extra life sound file name
00:0000CCE2 720A            	    52: 	MOVEQ		#extra_snd,d1		* index 5
00:0000CCE4 6126            	    53: 	BSR.s		load_sound			* load the sound into directx memory
                            	    54: 
00:0000CCE6 43FA00E1        	    55: 	LEA		lgsau_sound(pc),a1	* point to the large saucer sound file name
00:0000CCEA 7204            	    56: 	MOVEQ		#lgsau_snd,d1		* index 4
00:0000CCEC 6124            	    57: 	BSR.s		load_old_sound		* load the sound into sound memory
                            	    58: 
00:0000CCEE 43FA00EE        	    59: 	LEA		smsau_sound(pc),a1	* point to the small saucer sound file name
00:0000CCF2 7203            	    60: 	MOVEQ		#smsau_snd,d1		* index 3
00:0000CCF4 611C            	    61: 	BSR.s		load_old_sound		* load the sound into directx memory
                            	    62: 
00:0000CCF6 43FA00FB        	    63: 	LEA		thrst_sound(pc),a1	* point to the ship thrust sound file name
00:0000CCFA 7202            	    64: 	MOVEQ		#thrst_snd,d1		* index 2
00:0000CCFC 610E            	    65: 	BSR.s		load_sound			* load the sound into directx memory
                            	    66: 
00:0000CCFE 43FA0106        	    67: 	LEA		pfire_sound(pc),a1	* point to the player fire sound file name
00:0000CD02 7201            	    68: 	MOVEQ		#pfire_snd,d1		* index 1
00:0000CD04 6106            	    69: 	BSR.s		load_sound			* load the sound into directx memory
                            	    70: 
00:0000CD06 43FA0110        	    71: 	LEA		sfire_sound(pc),a1	* point to the saucer fire sound file name
00:0000CD0A 7200            	    72: 	MOVEQ		#sfire_snd,d1		* index 0
                            	    73: 
                            	    74: 
                            	    75: *************************************************************************************
                            	    76: *
                            	    77: * load the sound into directx memory
                            	    78: 
                            	    79: load_sound
00:0000CD0C 704A            	    80: 	MOVEQ		#74,d0			* load the sound into directx memory
00:0000CD0E 4E4F            	    81: 	TRAP		#15
                            	    82: 
00:0000CD10 4E75            	    83: 	RTS
                            	    84: 
                            	    85: 
                            	    86: *************************************************************************************
                            	    87: *
                            	    88: * load the sound into sound memory
                            	    89: 
                            	    90: load_old_sound
00:0000CD12 7047            	    91: 	MOVEQ		#71,d0			* load the sound into sound memory
00:0000CD14 4E4F            	    92: 	TRAP		#15
                            	    93: 
00:0000CD16 4E75            	    94: 	RTS
                            	    95: 
                            	    96: 
                            	    97: *************************************************************************************
                            	    98: *
                            	    99: * play a sound sample
                            	   100: 
                            	   101: play_sample
00:0000CD18 4A2B001A        	   102: 	TST.b		num_players(a3)		* test the number of players in the game
00:0000CD1C 6718            	   103: 	BEQ.s		exit_play_sample		* if no players left just exit
                            	   104: 
00:0000CD1E 4A2B0015        	   105: 	TST.b		play_sound(a3)		* test the sound flag
00:0000CD22 6712            	   106: 	BEQ.s		exit_play_sample		* if the sound is off just exit
                            	   107: 
00:0000CD24 7048            	   108: 	MOVEQ		#72,d0			* play a sound from sound memory
00:0000CD26 0C410003        	   109: 	CMPI.w	#smsau_snd,d1		* is it the small saucer sound
00:0000CD2A 6708            	   110: 	BEQ.s		old_sound_play		* if so go play it with the old player
                            	   111: 
00:0000CD2C 0C410004        	   112: 	CMPI.w	#lgsau_snd,d1		* is it the large saucer sound
00:0000CD30 6702            	   113: 	BEQ.s		old_sound_play		* if so go play it with the old player
                            	   114: 
00:0000CD32 704B            	   115: 	MOVEQ		#75,d0			* play a sound from directx memory
                            	   116: old_sound_play
00:0000CD34 4E4F            	   117: 	TRAP		#15
                            	   118: 
                            	   119: exit_play_sample
00:0000CD36 4E75            	   120: 	RTS
                            	   121: 
                            	   122: 
                            	   123: *************************************************************************************
                            	   124: *
                            	   125: * test the sound key
                            	   126: 
                            	   127: sound_key
00:0000CD38 7253            	   128: 	MOVEQ		#$53,d1			* [][][][S] key
00:0000CD3A 7013            	   129: 	MOVEQ		#19,d0			* check for keypress
00:0000CD3C 4E4F            	   130: 	TRAP		#15
                            	   131: 
00:0000CD3E 102B0014        	   132: 	MOVE.b	s_key(a3),d0		* get the last key(s) state
00:0000CD42 B300            	   133: 	EOR.b		d1,d0				* compare the result with the last key(s) state,
                            	   134: 							* each byte is now $FF if a key has changed or
                            	   135: 							* $00 if a key has not changed
00:0000CD44 C001            	   136: 	AND.b		d1,d0				* make each byte $FF if key just pressed or
                            	   137: 							* $00 if key not just pressed
00:0000CD46 B12B0015        	   138: 	EOR.b		d0,play_sound(a3)		* if key just pressed toggle the sound flag
00:0000CD4A 17410014        	   139: 	MOVE.b	d1,s_key(a3)		* save the last [S] key status
00:0000CD4E 4E75            	   140: 	RTS
                            	   141: 
                            	   142: 
                            	   143: *************************************************************************************
                            	   144: *
                            	   145: * sound file names
                            	   146: 
                            	   147: beat1_sound
00:0000CD50 73616D706C65735C	   148: 	dc.b	'samples\beat1.wav',$00		* background beat sound
00:0000CD58 62656174312E7761
00:0000CD60 76
00:0000CD61 00
                            	   149: 
                            	   150: beat2_sound
00:0000CD62 73616D706C65735C	   151: 	dc.b	'samples\beat2.wav',$00		* background beat sound
00:0000CD6A 62656174322E7761
00:0000CD72 76
00:0000CD73 00
                            	   152: 
                            	   153: lexpl_sound
00:0000CD74 73616D706C65735C	   154: 	dc.b	'samples\lexplode.wav',$00	* large explosion sound
00:0000CD7C 6C6578706C6F6465
00:0000CD84 2E776176
00:0000CD88 00
                            	   155: 
                            	   156: mexpl_sound
00:0000CD89 73616D706C65735C	   157: 	dc.b	'samples\mexplode.wav',$00	* medium explosion sound
00:0000CD91 6D6578706C6F6465
00:0000CD99 2E776176
00:0000CD9D 00
                            	   158: 
                            	   159: sexpl_sound
00:0000CD9E 73616D706C65735C	   160: 	dc.b	'samples\sexplode.wav',$00	* small explosion sound
00:0000CDA6 736578706C6F6465
00:0000CDAE 2E776176
00:0000CDB2 00
                            	   161: 
                            	   162: extra_sound
00:0000CDB3 73616D706C65735C	   163: 	dc.b	'samples\extraship.wav',$00	* extra life sound
00:0000CDBB 6578747261736869
00:0000CDC3 702E776176
00:0000CDC8 00
                            	   164: 
                            	   165: lgsau_sound
00:0000CDC9 73616D706C65735C	   166: 	dc.b	'samples\lgsaucer.wav',$00	* large saucer sound
00:0000CDD1 6C67736175636572
00:0000CDD9 2E776176
00:0000CDDD 00
                            	   167: 
                            	   168: smsau_sound
00:0000CDDE 73616D706C65735C	   169: 	dc.b	'samples\smsaucer.wav',$00	* small saucer sound
00:0000CDE6 736D736175636572
00:0000CDEE 2E776176
00:0000CDF2 00
                            	   170: 
                            	   171: thrst_sound
00:0000CDF3 73616D706C65735C	   172: 	dc.b	'samples\thrust.wav',$00	* ship thrust sound
00:0000CDFB 7468727573742E77
00:0000CE03 6176
00:0000CE05 00
                            	   173: 
                            	   174: pfire_sound
00:0000CE06 73616D706C65735C	   175: 	dc.b	'samples\pfire.wav',$00		* player fire sound
00:0000CE0E 70666972652E7761
00:0000CE16 76
00:0000CE17 00
                            	   176: 
                            	   177: sfire_sound
00:0000CE18 73616D706C65735C	   178: 	dc.b	'samples\sfire.wav',$00		* saucer fire sound
00:0000CE20 73666972652E7761
00:0000CE28 76
00:0000CE29 00
                            	   179: 
                            	   180: 	ds.w	0					* ensure even
                            	   181: 
                            	   182: 
                            	   183: *************************************************************************************
                            	   184: 
                            	   185: 

Source: "games\asteroids\asteroids 1_0.x68"
                            	  3985: 							; sound routines
                            	  3986: 
                            	  3987: 
                            	  3988: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3989: ;
                            	  3990: ; high score table filename
                            	  3991: 
                            	  3992: filename
00:0000CE2A 61737465726F6964	  3993: 	dc.b		'asteroids.hi',0		; highscore filename
00:0000CE32 732E6869
00:0000CE36 00
                            	  3994: 	ds.w		0				; ensure even
                            	  3995: 
                            	  3996: 
                            	  3997: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3998: ;
                            	  3999: ; variables
                            	  4000: 
                            	  4001: variables
                            	  4002: 
                            	  4003: 	OFFSET	0				; going to use relative addressing
                            	  4004: 
                            	  4005: vector_s
                            	  4006: ;##	ds.w	1				; vector scale
02:00000000 0000            	  4007: glob_scale	ds.w	1				; global scale
                            	  4008: 
                            	  4009: 
02:00000002 0000            	  4010: local_x	ds.w	1				; local screen x co-ordinate offset
02:00000004 0000            	  4011: local_y	ds.w	1				; local screen y co-ordinate offset
                            	  4012: 
02:00000006 0000            	  4013: scr_x		ds.w	1				; screen x size
02:00000008 0000            	  4014: scr_y		ds.w	1				; screen y size
                            	  4015: 
02:0000000A 00000000        	  4016: PRNlword	ds.l	1				; PRNG seed long word
                            	  4017: 
02:0000000E 00000000        	  4018: switch_addr	ds.l	1				; hardware switch address
                            	  4019: 
02:00000012 0000            	  4020: hiscore_y	ds.w	1				; high score y co-ordinate
                            	  4021: 
                            	  4022: 
02:00000014 00              	  4023: s_key		ds.b	1				; last [s] key status
02:00000015 00              	  4024: play_sound	ds.b	1				; sound flag
                            	  4025: 
02:00000016 00              	  4026: suppress_0	ds.b	1				; leading zero suppress flag
                            	  4027: 							; 0 = don't suppress
                            	  4028: 
02:00000017 00              	  4029: high_idx	ds.b	1				; high score index, single byte, 1 to 10 in BCD
                            	  4030: 
02:00000018 00              	  4031: player_idx	ds.b	1				; player index
                            	  4032: 							; 0 = player 1
                            	  4033: 							; 1 = player 2
                            	  4034: 
02:00000019 00              	  4035: past_play	ds.b	1				; number of players that were in the game
                            	  4036: 
02:0000001A 00              	  4037: num_players	ds.b	1				; number of players in the game
                            	  4038: 							; $00 - game over
                            	  4039: 							; $01 - 1 player game
                            	  4040: 							; $02 - 2 player game
                            	  4041: 							; $FF - game over, high score not checked
                            	  4042: 
02:0000001B 00              	  4043: ss_count	ds.b	1				; starting ship count
                            	  4044: 
02:0000001C 00              	  4045: px_time	ds.b	1				; "PLAYER x" timer. while this is non zero
                            	  4046: 							; "PLAYER x" will be displayed. this is used at
                            	  4047: 							; the beginning of any game and at the beginning
                            	  4048: 							; of each turn in a two player game
                            	  4049: 
02:0000001D 00              	  4050: sixteen_ms	ds.b	1				; 16ms counter, incremented every 16ms by the
                            	  4051: 							; timer interrupt and cleared by the main
                            	  4052: 							; program loop
                            	  4053: 
02:0000001E 00              	  4054: p_orient	ds.b	1				; player orientation, this is shared by both
                            	  4055: 							; players as it is in the arcade machine
                            	  4056: 							;
                            	  4057: 							; $00 = right
                            	  4058: 							; $40 = up
                            	  4059: 							; $80 = left
                            	  4060: 							; $C0 = down
                            	  4061: 							;
                            	  4062: 							; this is $00 = right then anticlockwise each
                            	  4063: 							; positive step being 1.40625 degrees so that
                            	  4064: 							; by the time you get back to $00 one full
                            	  4065: 							; rotation has been done
                            	  4066: 
02:0000001F 00              	  4067: s_orient	ds.b	1				; shot direction, see above
                            	  4068: 
02:00000020 00              	  4069: hi_char	ds.b	1				; high score input character index
                            	  4070: 
02:00000021 00              	  4071: last_fire	ds.b	1				; fire key last state register
02:00000022 00              	  4072: last_hype	ds.b	1				; hyperspace key last state register
                            	  4073: 
02:00000023 00              	  4074: thump_snd	ds.b	1				; thump sound value
02:00000024 00              	  4075: thump_time	ds.b	1				; thump sound change timer
02:00000025 00              	  4076: time_count	ds.b	1				; game counter byte
                            	  4077: 
02:00000026 00              	  4078: hyper		ds.b	1				; hyperspace flag
                            	  4079: 							; $00 = no jump
                            	  4080: 							; $01 = jump successful
                            	  4081: 							; $80 = jump unsuccessful
                            	  4082: 							; $xx = 
                            	  4083: 
                            	  4084: 		ds.w	0
                            	  4085: 
02:00000027 0000            	  4086: hiscores	ds.w	10				; high score table, each score is a BCD word
02:00000029 *
02:0000003B 00              	  4087: hinames	ds.b	3*10				; high score initials table
02:0000003C *
                            	  4088: 
02:00000059 0000            	  4089: game_count	ds.w	1				; game counter word
                            	  4090: 
02:0000005B 0000            	  4091: expl_x_pos	ds.w	6				; player ship explosion pieces x positions
02:0000005D *
                            	  4092: 
02:00000067 0000            	  4093: expl_y_pos	ds.w	6				; player ship explosion pieces y positions
02:00000069 *
                            	  4094: 
                            	  4095: 
                            	  4096: ; player 1 variables
                            	  4097: 
                            	  4098: player_1	EQU	*+$80				; player one variables base
                            	  4099: 
                            	  4100: x_pos_off	EQU	*-player_1			; offset to the x position base
02:00000073 0000            	  4101: 		ds.w	$1B				; item x position base address
02:00000075 *
                            	  4102: 
                            	  4103: p_xpos_off	EQU	*-player_1			; offset to the player x position
02:000000A9 0000            	  4104: 		ds.w	1				; player x position
                            	  4105: 
                            	  4106: s_xpos_off	EQU	*-player_1			; offset to the saucer x position
02:000000AB 0000            	  4107: 		ds.w	1				; saucer x position
                            	  4108: 
                            	  4109: f_xpos_off	EQU	*-player_1			; offset to the player x position
02:000000AD 0000            	  4110: 		ds.w	6				; fire objects x position
02:000000AF *
                            	  4111: x_pos_end	EQU	*-player_1			; offset to the flags end
                            	  4112: 
                            	  4113: y_pos_off	EQU	*-player_1			; offset to the y position base
02:000000B9 0000            	  4114: 		ds.w	$1B				; item y position base address
02:000000BB *
                            	  4115: 
                            	  4116: p_ypos_off	EQU	*-player_1			; offset to the player y position
02:000000EF 0000            	  4117: 		ds.w	1				; player y position
                            	  4118: s_ypos_off	EQU	*-player_1			; offset to the saucer y position
02:000000F1 0000            	  4119: 		ds.w	1				; saucer y position
                            	  4120: 
                            	  4121: f_ypos_off	EQU	*-player_1			; offset to the player y position
02:000000F3 0000            	  4122: 		ds.w	6				; fire objects y position
02:000000F5 *
                            	  4123: 
                            	  4124: 							; items $xx00 to $xx1A are rocks
                            	  4125: 							; $00 = no item
                            	  4126: 							; $0x = item exists
                            	  4127: 							; $Ax = item exploding
                            	  4128: 
                            	  4129: flags_off	EQU	*-player_1			; offset to the flags base
02:000000FF 00              	  4130: 		ds.b	$1B				; space for the rock flags
02:00000100 *
                            	  4131: 
                            	  4132: p_flag_off	EQU	*-player_1			; offset to the player flag
02:0000011A 00              	  4133: 		ds.b	1				; player flag
                            	  4134: 
                            	  4135: s_flag_off	EQU	*-player_1			; offset to the saucer flag
02:0000011B 00              	  4136: 		ds.b	1				; saucer flag
                            	  4137: 							; $00 = no saucer
                            	  4138: 							; $01 = small saucer
                            	  4139: 							; $02 = large saucer
                            	  4140: 							; $8x = saucer exploding
                            	  4141: 
                            	  4142: s_fire_off	EQU	*-player_1			; offset to the saucer fire flags
02:0000011C 00              	  4143: 		ds.b	2				; saucer fire objects
02:0000011D *
                            	  4144: 
                            	  4145: p_fire_off	EQU	*-player_1			; offset to the player fire flags
02:0000011E 00              	  4146: 		ds.b	4				; player fire objects
02:0000011F *
                            	  4147: flag_end	EQU	*-player_1			; offset to the flags end
                            	  4148: 
                            	  4149: x_vel_off	EQU	*-player_1			; offset to the x velocity base
02:00000122 00              	  4150: 		ds.b	$1B				; item x velocity base address
02:00000123 *
                            	  4151: 
                            	  4152: p_xvel_off	EQU	*-player_1			; offset to the player x velocity
02:0000013D 00              	  4153: 		ds.b	1				; player x velocity
                            	  4154: 
                            	  4155: s_xvel_off	EQU	*-player_1			; offset to the saucer x velocity
02:0000013E 00              	  4156: 		ds.b	1				; saucer x velocity
                            	  4157: 
                            	  4158: f_xvel_off	EQU	*-player_1			; offset to the fire objects x velocity
02:0000013F 00              	  4159: 		ds.b	6				; fire objects x velocity
02:00000140 *
                            	  4160: 
                            	  4161: y_vel_off	EQU	*-player_1			; offset to the x velocity base
02:00000145 00              	  4162: 		ds.b	$1B				; item y velocity base address
02:00000146 *
                            	  4163: 
                            	  4164: p_yvel_off	EQU	*-player_1			; offset to the player y velocity
02:00000160 00              	  4165: 		ds.b	1				; player y velocity
                            	  4166: 
                            	  4167: s_yvel_off	EQU	*-player_1			; offset to the saucer y velocity
02:00000161 00              	  4168: 		ds.b	1				; saucer y velocity
                            	  4169: 
                            	  4170: f_yvel_off	EQU	*-player_1			; offset to the fire objects y velocity
02:00000162 00              	  4171: 		ds.b	6				; fire objects y velocity
02:00000163 *
                            	  4172: 
                            	  4173: 
                            	  4174: i_rk_count	EQU	*-player_1			; offset to the initial rock count
02:00000168 00              	  4175: 		ds.b	1				; initial rock count
                            	  4176: rock_count	EQU	*-player_1			; offset to the rock count
02:00000169 00              	  4177: 		ds.b	1				; rock count
                            	  4178: 
                            	  4179: sauc_cntdn	EQU	*-player_1			; offset to the saucer countdown timer
02:0000016A 00              	  4180: 		ds.b	1				; saucer countdown timer
                            	  4181: 
                            	  4182: i_sauc_tim	EQU	*-player_1			; offset to the initial saucer timer
02:0000016B 00              	  4183: 		ds.b	1				; small saucer boundary/initial saucer timer
                            	  4184: 
                            	  4185: r_hit_tim	EQU	*-player_1			; offset to the rock hit timer
02:0000016C 00              	  4186: 		ds.b	1				; rock hit timer. if this times out because the
                            	  4187: 							; player hasn't shot a rock for a while then
                            	  4188: 							; the saucer timer initial value is decremented
                            	  4189: 							; so that the saucers come faster if the player
                            	  4190: 							; is just ignoring the last rock
                            	  4191: 
                            	  4192: hide_p_cnt	EQU	*-player_1			; offset to the hide the player count
02:0000016D 00              	  4193: 		ds.b	1				; hide the player count. when this count is non
                            	  4194: 							; zero the player is not displayed and the
                            	  4195: 							; thump sound does not sound. this count is set
                            	  4196: 							; to various lengths after certain events have
                            	  4197: 							; occured
                            	  4198: 							;
                            	  4199: 							; $0x player hidden, will appear
                            	  4200: 							; $8x player hidden, gonna die
                            	  4201: 
                            	  4202: new_rocks	EQU	*-player_1			; offset to the new rocks flag
02:0000016E 00              	  4203: 		ds.b	1				; generate new rocks flag
                            	  4204: 							; 0 = generate new rocks
                            	  4205: thmp_sndi	EQU	*-player_1			; offset to the thump sound change initial value
02:0000016F 00              	  4206: 		ds.b	1				; thump sound change timer initial value
                            	  4207: 
                            	  4208: min_rocks	EQU	*-player_1			; offset to the minimum rock count
02:00000170 00              	  4209: 		ds.b	1				; minimum rock count before the saucer initial
                            	  4210: 							; timer starts to decrement
                            	  4211: 
                            	  4212: p_xvlo_off	EQU	*-player_1			; offset to the player y velocity low byte
02:00000171 00              	  4213: 		ds.b	1				; player x velocity low byte
                            	  4214: p_yvlo_off	EQU	*-player_1			; offset to the player y velocity low byte
02:00000172 00              	  4215: 		ds.b	1				; player y velocity low byte
                            	  4216: 
                            	  4217: 		ds.w	0				; ensure even
                            	  4218: 
                            	  4219: score_off	EQU	*-player_1			; offset to the score word
02:00000173 0000            	  4220: p1_score	ds.w	1				; player score
                            	  4221: 
                            	  4222: ships_off	EQU	*-player_1			; offset to the ship count
02:00000175 00              	  4223: p1_ships	ds.b	1				; player 1 ship count
                            	  4224: 
                            	  4225: high_off	EQU	*-player_1			; offset to the player entering hiscore flag
02:00000176 00              	  4226: p1_high	ds.b	1				; player 1 highscore flag
                            	  4227: 							; $0x - entering high score, also index
                            	  4228: 							; $8x - done
                            	  4229: 
                            	  4230: 
                            	  4231: 		ds.w	0				; ensure even
                            	  4232: 
                            	  4233: ; player 2 variables
                            	  4234: 
                            	  4235: 
                            	  4236: player_2	EQU	*+$80				; player two variables base
02:00000177 00              	  4237: 		ds.b	score_off+$80		; space for the player two variables
02:00000178 *
                            	  4238: 
02:00000277 0000            	  4239: p2_score	ds.w	1				; player 2 score
                            	  4240: 
02:00000279 00              	  4241: p2_ships	ds.b	1				; player 2 ship count
                            	  4242: 
02:0000027A 00              	  4243: p2_high	ds.b	1				; player 2 highscore flag
                            	  4244: 							; $0x - entering high score, also index
                            	  4245: 							; $8x - done
                            	  4246: 
                            	  4247: 		ds.w	0				; ensure even
                            	  4248: 
                            	  4249: p_2_end
                            	  4250: 
                            	  4251: 
                            	  4252: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  4253: 
                            	  4254: 
                            	  4255: ;	END	asteroids_start
                            	  4256: 
                            	  4257: 
                            	  4258: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  4259: 

Source: "boot.x68"
                            	  3740: 


Symbols by name:
ABCD_INNER1                     00:000043EC
ABCD_INNER2                     00:0000445A
ABCD_NO_C1                      00:00004408
ABCD_NO_C2                      00:00004410
ABCD_NO_C3                      00:00004476
ABCD_NO_C4                      00:0000447E
ABCD_OUTER1                     00:000043EA
ABCD_OUTER2                     00:00004458
ABS                             00:00006ACC
ACIA                             E:FD060000
ACIA_CMD                         E:00000008
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     00:00004F5A
ADDQ_LOOP1                      00:00004774
ADDQ_LOOP2                      00:000047B2
ADDQ_LOOP3                      00:000047E8
ADDX_LOOP3                      00:00005080
ADDX_LOOP4                      00:0000509C
ADDX_LOOP5                      00:000050B8
ADDX_OUTER1                     00:00004FEC
ADD_OUTER1                      00:00004D80
ADD_OUTER2                      00:00004DF4
AHOW                            00:00006D44
ALL_DONE                        00:0000214E
AND_OUTER1                      00:00004A9E
AND_OUTER2                      00:00004B12
ASORRY                          00:00006D3C
AUXIN                           00:00007068
AUXOUT                          00:00007054
AWHAT                           00:00006CFC
AXIRET                          00:00007086
AllocateString                  00:000067E4
ArmAllBreakpoints               00:00008CE4
ArmBreakpoint                   00:00008D14
AsciiToHexNybble                00:00008720
AudioInputTest                  00:00008AC6
BCC1                            00:00004692
BCC10                           00:000046E4
BCC11                           00:000046EC
BCC12                           00:000046F6
BCC13                           00:000046FE
BCC14                           00:00004708
BCC2                            00:0000469C
BCC3                            00:000046A4
BCC4                            00:000046AE
BCC5                            00:000046B6
BCC6                            00:000046C0
BCC7                            00:000046C8
BCC8                            00:000046D2
BCC9                            00:000046DA
BLANK                            E:00000020
BRTBL                           00:000096DA
BSR_CLOSE1                      00:00003222
BSR_CLOSE2                      00:00003258
BSR_FAR1                        00:00002150
BSR_FAR2                        00:00004682
BUFFER                          00:00007158
BUFLEN                           E:00000050
BUFSIZE                          E:0000003F
BYEBYE                          00:00007088
BlankLastLine                   00:000013D0
BouncingBalls                   00:00008AC8
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
BufByte                         00:000087AC
BufNybble                       00:000087B2
BufTetra                        00:000087A0
BufWyde                         00:000087A6
CALL                            00:0000648A
CHKIO                           00:00006FFA
CHKRET                          00:0000700A
CHR                             00:00006C76
CLMSG                           00:000070F0
CLS                             00:00007018
CMPA_OUTER1                     00:00004C74
CMPM_LOOP1                      00:00004D02
CMPM_LOOP2                      00:00004D1C
CMPM_LOOP3                      00:00004D36
CMP_OUTER1                      00:00004BFE
COMMON                          00:00009ACC
COMMON35                        00:00009ADA
COMMON4                         00:00009ACA
COM_CMDTBL                      00:000014B0
CORENO                          00:00006AF4
CR                               E:0000000D
CRLF                            00:0000720E
CS11                            00:00009510
CS12                            00:00009480
CS13                            00:00009406
CS14                            00:0000939C
CS15                            00:0000935E
CS16                            00:000092F0
CS17                            00:000096A6
CS18                            00:00009642
CS19                            00:00009752
CS20                            00:000095AA
CSTART                          00:00005BE0
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLS                            E:00000013
CTRLX                            E:00000018
CTRLZ                            E:0000001A
CURRNT                          00:00007100
CalcScreenLoc                   00:000011A4
CallOS                          00:00000240
CheckForCtrlC                   00:00000842
CheckForKey                     00:000007FC
CheckNumeric                    00:00006554
ClearBreakpointList             00:00008E06
ClearScreen                     00:00008ACC
ClearStringArea                 00:00005D0A
ClearStringStack                00:00005D2A
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
ConcatString                    00:00006660
Cursor1                         00:000076A4
DBCC_LOOP1                      00:00004712
DBCC_LOOP2                      00:00004720
DCB_BKCOLOR                      E:00000060
DCB_CMDPROC                      E:00000018
DCB_FGCOLOR                      E:00000064
DCB_INBUFPTR                     E:00000038
DCB_INBUFPTR2                    E:00000070
DCB_INBUFSIZE                    E:00000040
DCB_INDIMX                       E:00000048
DCB_INDIMY                       E:0000004C
DCB_INDIMZ                       E:00000050
DCB_INPOSX                       E:0000002C
DCB_INPOSY                       E:00000030
DCB_INPOSZ                       E:00000034
DCB_MAGIC                        E:00000000
DCB_NAME                         E:00000004
DCB_OPCODE                       E:00000068
DCB_OUTBUFPTR                    E:0000003C
DCB_OUTBUFPTR2                   E:00000074
DCB_OUTBUFSIZE                   E:00000044
DCB_OUTBUFSIZE2                  E:0000007C
DCB_OUTDIMX                      E:00000054
DCB_OUTDIMY                      E:00000058
DCB_OUTDIMZ                      E:0000005C
DCB_OUTPOSX                      E:00000020
DCB_OUTPOSY                      E:00000024
DCB_OUTPOSZ                      E:00000028
DCB_SIZE                         E:00000084
DCB_UNIT                         E:00000080
DCODE68K                        00:00009A32
DDATA                            E:FFFFFFF0
DEC311                          00:00009A46
DEC404                          00:00009A64
DEC411                          00:00009A74
DEC425                          00:00009A84
DEC510                          00:00009A90
DEC515                          00:00009A94
DEC530                          00:00009A9C
DEC535                          00:00009AA2
DEC537                          00:00009AAE
DEFLT                           00:0000631A
DEV_CLEAR                        E:0000000C
DEV_GETBUF1                      E:00000010
DEV_GET_COLOR                    E:00000015
DEV_GET_DIMEN                    E:00000014
DEV_GET_OUTPOS                   E:00000017
DEV_GET_OUTPTR                   E:00000018
DEV_PUTCHAR                      E:00000002
DEV_SET_OUTPOS                   E:00000007
DEV_SWAPBUF                      E:0000000D
DEV_WRITEAT                      E:00000012
DIRECT                          00:00005EE4
DIRFLG                          00:00007154
DIV1                            00:00006A10
DIV2                            00:00006A16
DIV3                            00:00006A1C
DIV32                           00:000069FE
DIV4                            00:00006A2A
DIVRT                           00:00006A38
DIVS_OUTER1                     00:0000495E
DIVU_OUTER1                     00:0000490C
DOMID                           00:00006BA4
DOQUO                           00:00006FD8
DOQUO1                          00:00006FE0
DRAW                             E:0000A000
DT_NUMERIC                       E:00000001
DT_STRING                        E:00000002
Delay3s                         00:00002030
Delay3s2                        00:00002054
Diagonal1                       00:00007528
Diagonal2                       00:00007548
DisarmAllBreakpoints            00:00008CB8
DisarmBreakpoint                00:00008D92
DispatchMsg                     00:00008E98
DisplayAddr                     00:000087CA
DisplayByte                     00:00008780
DisplayHelp                     00:00007A9E
DisplayMem                      00:0000802E
DisplayNybble                   00:00008786
DisplaySpace                    00:0000876C
DisplayString                   00:00007228
DisplayStringCRLF               00:0000723E
DisplayStringLimited            00:00007242
DisplayStringLimitedCRLF        00:00007262
DisplayTetra                    00:00008774
DisplayTwoSpaces                00:0000875A
DisplayWyde                     00:0000877A
DrawHorizTo                     00:00007642
DrawToXY                        00:000075C4
DrawVertTo                      00:00007674
DumpMem1                        00:0000801C
EA000                           00:00009782
EA001                           00:0000978E
EA010                           00:0000979A
EA011                           00:000097AE
EA011RTS                        00:000097C4
EA100                           00:000097C6
EA101                           00:00009868
EA1105                          00:00009844
EA1107                          00:00009848
EA1109                          00:0000985E
EA111                           00:0000987E
EA1112                          00:0000989C
EA1113                          00:000098B8
EA1113A                         00:000098C8
EA1114                          00:000098EA
EA1115                          00:00009954
EA11153                         00:0000998C
EA11155                         00:00009996
EAF25                           00:00009932
EAF27                           00:00009936
EAF35                           00:0000994A
EEA                             00:000097E0
EEA10                           00:0000940E
ENDCHK                          00:00006CE8
ENDCHK1                         00:00006CF8
ENDMEM                          00:00005BDC
EOR_OUTER2                      00:00004B88
EOT                              E:00000004
ERROR                           00:00006D00
ETYPE                           00:00006D4A
EX1                             00:00005F1E
EXCEPTION_6                     00:00002158
EXCEPTION_7                     00:00002160
EXEC                            00:00005EF4
EXGO                            00:00005F2A
EXLP                            00:00005EFC
EXMAT                           00:00005F24
EXNGO                           00:00005F06
EXP4RT                          00:00006754
EXPR                            00:00006500
EXPR2                           00:000065F0
EXPR3                           00:000066CE
EXPR4                           00:00006738
EXPR_AND                        00:00006526
EXPR_OR                         00:00006500
EXPR_REL                        00:00006566
E_BadDevNum                      E:00000020
E_Func                           E:00000002
E_NotAlloc                       E:00000009
E_NotSupported                   E:0000000A
E_Ok                             E:00000000
EditMemHelper                   00:00007E8C
ExecuteCode                     00:00007F22
FDATA                            E:0000000A
FE10                            00:000097DC
FE11                            00:000098C4
FE12                            00:00009A82
FERROR                          00:00009AF4
FERROR35                        00:00009AFE
FERROR39                        00:00009B0A
FI1                             00:00006CDA
FI2                             00:00006CE6
FIN                             00:00006CCE
FINISH                          00:00006102
FMTK_SEMA                        E:00000008
FNDLN                           00:00006DEE
FNDLNP                          00:00006DFC
FNDNXT                          00:00006E14
FNDRET                          00:00006E12
FNDSKP                          00:00006E16
FOC                              E:0000001F
FOP                              E:00000027
FOR                             00:00006170
FORM1                           00:00009394
FORM10                          00:00009450
FORM103                         00:00009456
FORM104                         00:0000945A
FORM105                         00:0000946A
FORM10E3                        00:00009434
FORM10E4                        00:0000943C
FORM10E6                        00:00009448
FORM10EX                        00:00009412
FORM11                          00:00009484
FORM112                         00:000094A0
FORM114                         00:000094AE
FORM11SL                        00:0000948C
FORM12                          00:000094B0
FORM125                         00:000094CA
FORM12A                         00:000094EC
FORM1A                          00:00009398
FORM3                           00:0000939E
FORM4                           00:000093A2
FORM5                           00:000093B4
FORM6A                          00:000093B8
FORM6D                          00:000093C8
FORM7                           00:000093EE
FORM8                           00:000093FA
FORM815                         00:000093FE
FORM9                           00:00009408
FORM91                          00:0000976A
FORM93                          00:0000977E
FORM95                          00:00009780
FORMREG5                        00:000093DC
FORMREGA                        00:000093D8
FORMREGD                        00:000093E8
FORMSIZE                        00:00009756
FR1                             00:0000618A
FR2                             00:000061A2
FR3                             00:000061A8
FR4                             00:000061AE
FR5                             00:000061B6
FR6                             00:000061C8
FR7                             00:000061D4
FR8                             00:000061EC
FRAMEBUF                         E:FD200000
FRAMEBUF_CMDTBL                 00:00001934
FREL10                          00:00009258
FREL15                          00:0000926A
FREL20                          00:00009284
FREL25                          00:00009296
FREL30                          00:000092A0
FRELADDR                        00:0000924A
FemtikiInit                     00:00000220
FemtikiInitIRQ                  00:00000230
FemtikiTimerIRQ                 00:0000030E
ForceUnlockSemaphore            00:00001FBC
FreeTCB                          E:0010030C
FromScreen                      00:00007804
GBYTE                           00:00006372
GBYTE1                          00:00006376
GBYTE2                          00:00006384
GETLN                           00:00006D50
GFXACCEL                         E:FD300000
GFXACCEL_CMDTBL                 00:00001BF8
GL1                             00:00006D60
GL2                             00:00006D7E
GL3                             00:00006D92
GL4                             00:00006DB6
GL5                             00:00006DC2
GL6                             00:00006DDE
GL7                             00:00006DE6
GOAUXI                          00:00005BD0
GOAUXO                          00:00005BCC
GOBYE                           00:00005BD4
GOIN                            00:00005BC8
GOOUT                           00:00005BC4
GOSUB                           00:0000610A
GOTO                            00:0000600C
GOWARM                          00:00005BC0
GRBufferToScreen                00:0000744E
GarbageCollectStrings           00:00006842
GetCmdLine                      00:00007C52
GetDecNumber                    00:000081BA
GetHexNumber                    00:0000818C
GetKey                          00:00000808
GetRunningTCBPointer            00:000002AA
GetSzChar                       00:00007E66
GetTick                         00:0000741C
GlobalReadLong                  00:00001E74
GlobalWriteLong                 00:00001E7A
GraphicsDemo                    00:00008ACA
HALT                             E:0000B000
HAS_MMU                          E:00000000
HEX2DEC                         00:000091D2
HEX2DEC2                        00:00009184
HISPC                            E:FFFFFFFC
HOWMSG                          00:000070C1
HX2DC                           00:000091E2
HX2DC0                          00:000091E6
HX2DC1                          00:000091EE
HX2DC2                          00:00009208
HX2DC22                         00:0000920A
HX2DC3                          00:00009214
HX2DC4                          00:0000921C
HX2DC5                          00:00009224
HX2DC57                         00:0000922C
HX2DC6                          00:00009230
HelpMsg                         00:00007AAA
HomeCursor                      00:0000142A
I2C2                             E:FD069000
I2C_CMD                          E:00000004
I2C_CTRL                         E:00000002
I2C_PREH                         E:00000001
I2C_PREL                         E:00000000
I2C_RXR                          E:00000003
I2C_STAT                         E:00000004
I2C_TXR                          E:00000003
IBSR                            00:000095FC
ICC                             00:000095F8
ICC35                           00:0000960E
ICC55                           00:00009624
ICCCC                           00:000096C2
ICCCC9                          00:000096D8
IDBCC                           00:000095E6
IF                              00:0000625C
IF1                             00:00006260
IF2                             00:00006266
IGNBLK                          00:00006FA6
ILINK                           00:0000937E
IM7788                          00:000092BC
IM7799                          00:000092C0
IMMED                           00:00009306
IMMED45                         00:0000932C
IMMED55                         00:00009360
IMMED65                         00:00009366
IMMED75                         00:00009376
IMOVE                           00:0000937A
IMOVE19                         00:00009720
IMOVEA1                         00:000096FA
IMOVEMFR                        00:000092A8
IMOVEMTR                        00:000092D6
IMOVEP                          00:00009582
IMOVEP11                        00:00009592
IMOVEP35                        00:000095AE
IMOVEP66                        00:000095BC
IMOVEQ                          00:00009518
IMVFSR                          00:00009538
IMVFUSP                         00:00009546
IMVT44                          00:00009562
IMVTCCR                         00:00009572
IMVTSR                          00:00009554
IMVTUSP                         00:00009566
INC                             00:00007034
INC1                            00:00007040
INCOM                           00:00005F3C
INCON                           00:00005F2E
INITMSG                         00:00007096
INPERR                          00:00006276
INPPTR                          00:000070F8
INPUT                           00:00006284
INT                             00:00006C60
INT_EXPR                        00:000064EE
IOCOM                           00:00005F4A
IOCON                           00:00005F60
IOFocus                          E:00100000
IP2                             00:000062B6
IP3                             00:000062D0
IP4                             00:0000630A
IP5                             00:00006316
IP6                             00:000062B2
IP7                             00:000062A8
IQUICK                          00:00009514
IQUICK21                        00:00009738
IQUICK31                        00:0000974E
IQUICKA                         00:00009726
IRQFlag                          E:000400A0
IRQROUT                         00:00007134
IRQ_trampolines                 01:00000100
ISCC                            00:000095DC
ISETD                           00:00009634
ISETD12                         00:0000963A
ISETS                           00:00009644
ISHIFT                          00:0000965E
ISHIFT13                        00:0000966A
ISHIFT23                        00:0000968E
ISHIFT33                        00:0000969A
ISHIFT44                        00:0000969E
ISHIFTM1                        00:000096A8
ISTOP                           00:000092F2
IncCursorPos                    00:00001346
IncCursorRow                    00:00001360
InitIOPBitmap                   00:00001E82
InitIRQ                         00:00008F54
InitRand                        00:00001ECE
InitSemaphores                  00:00001F74
Initialise                      00:0000B100
InputDevice                      E:000400A4
InstallIRQ                      00:00008F6A
JMPL                             E:0000E000
JSRL                             E:0000C000
KBD_CMDTBL                      00:00000580
KEYBD                            E:FD0FFE00
KEYBD_SEMA                       E:00000003
KI                              00:00009B1E
KIEND                           00:00009B20
KeybdEcho                        E:0004000C
KeybdGetChar                    00:00000862
KeybdGetCharNoWait              00:00000852
KeybdGetCharWait                00:0000085A
KeybdGetID                      00:000005DE
KeybdID                          E:00100018
KeybdIRQ                        00:00000B0E
KeybdInit                       00:00000648
KeybdLEDs                        E:0010000E
KeybdRecvByte                   00:000007AC
KeybdSendByte                   00:00000ACE
KeybdSetLED                     00:0000061C
KeybdSetLEDStatus               00:00000A7E
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     00:000007CE
LEA1                            00:00003C2E
LEFT                            00:00006C06
LEN                             00:00006C3A
LET                             00:00006322
LF                               E:0000000A
LIST                            00:00006054
LOAD                            00:00006332
LOCVARSZ                         E:00000010
LOD1                            00:0000633E
LOD2                            00:00006358
LODEND                          00:00006368
LOPINC                          00:00007114
LOPLMT                          00:00007120
LOPLN                           00:0000712C
LOPPT                           00:00007130
LOPVAR                          00:00007110
LS1                             00:00006060
LS2                             00:00006074
LS3                             00:0000607A
LSTROM                          00:000070F4
LT1                             00:0000632E
LastStr                         00:00007144
ListBreakpoints                 00:00008DE6
LockSemaphore                   00:00001F9A
LockSysSemaphore                00:00000396
LorR1                           00:00006B38
LorRArgs                        00:00006B00
MAX_TID                          E:00000FFF
MEMORY_SEMA                      E:00000006
MID                             00:00006B3C
MID1                            00:00006C02
MID2                            00:00006B84
MID4                            00:00006BD0
MID5                            00:00006B9C
MMU                              E:FDC00000
MOVE1                           00:0000389C
MOVE2                           00:00003820
MOVE3                           00:0000391C
MOVE4                           00:00003A76
MOVEMR                          00:000099B6
MOVEMR11                        00:000099C6
MOVEMR33                        00:000099CE
MOVEMR44                        00:000099E0
MOVEMR77                        00:000099FA
MOVEMR79                        00:00009A0C
MOVEMR88                        00:00009A0E
MOVEMR94                        00:00009A26
MOVEMS                          00:000099A2
MOVEMS2                         00:000099B2
MSG111                          00:00009B14
MULS_OUTER1                     00:00005254
MULU_OUTER1                     00:00005208
MVDOWN                          00:00006E38
MVRET                           00:00006E2C
MVUP                            00:00006E24
MVUPW                           00:00006E2E
Monitor                         00:00007818
MoveToXY                        00:000075B6
NBCD_LOOP                       00:000045D2
NBCD_LOOP1                      00:00004618
NBCD_NO_C                       00:000045DE
NBCD_NO_C1                      00:0000462C
NBCD_NO_Z                       00:000045E2
NBCD_NO_Z1                      00:00004630
NCORES                           E:00000004
NEW                             00:00005F76
NEXT                            00:000061F0
NOSTRING                        00:000070D8
NR_TCB                           E:00001000
NUM_EXPR                        00:000064E0
NX0                             00:000061FA
NX1                             00:0000623A
NX2                             00:00006252
NX3                             00:0000620C
NextRec                         00:000088B8
NextString                      00:0000687E
Ninc0                           00:0000B19C
Ninc1                           00:0000B19C
NumSetBreakpoints                E:00040202
OFFSET                           E:00040880
OKMSG                           00:000070BA
ONIRQ                           00:00006020
ONIRQ1                          00:0000603A
OPCTBL                          00:00009DD8
OR_OUTER1                       00:000049B4
OR_OUTER2                       00:00004A28
OSCallTable                     00:0000023E
OUTC                            00:00007024
OUTCOM                          00:00005F54
OUTCON                          00:00005F6A
OUTPTR                          00:000070FC
OutputChar                      00:00008F3A
OutputDevice                     E:000400A8
PARN                            00:000067CE
PBYTE                           00:000063F0
PBYTE1                          00:000063F2
PBYTE2                          00:00006406
PEEK                            00:00006A3A
PKER                            00:00006486
PLIC                             E:FD090000
PNT4HEX                         00:00009236
PNT4HX                          00:00009236
PNT6HX                          00:0000923A
PNT8HX                          00:00009246
POKE                            00:00006410
POPA                            00:00006E40
PR0                             00:0000609E
PR1                             00:000060AC
PR2                             00:00006090
PR3                             00:000060BA
PR6                             00:000060C6
PR8                             00:000060CC
PR9                             00:000060E8
PRINT                           00:00006080
PRMESG                          00:0000700C
PRMRET                          00:00007016
PRNlword                         S:0000000A
PRTLN                           00:00006F24
PRTNUM                          00:00006EDA
PRTRET                          00:00006ECC
PRTSTG                          00:00006EB2
PRTSTR2                         00:00006ED4
PRTSTR2a                        00:00006ECE
PS1                             00:00006EB4
PUSHA                           00:00006E7C
PeekScreenChar                  00:00007E60
PointsIntoStringArea            00:000068DA
ProcessBreakpoint               00:00008CB2
ProcessRec                      00:000088CA
ProcessS1                       00:000089CE
ProcessS2                       00:000089D2
ProcessS3                       00:000089D6
ProcessS7                       00:000089DA
ProcessS8                       00:000089EC
ProcessS9                       00:000089FE
Prompt1                         00:0000785A
Prompt3                         00:00007844
PromptLn                        00:00007838
QHOW                            00:00006D42
QSORRY                          00:00006D3A
QWHAT                           00:00006CFA
QueueCycle                       E:0010031C
RAND                             E:FD0FFD00
RAND_MW                          E:FD0FFD0C
RAND_MZ                          E:FD0FFD08
RAND_NUM                         E:FD0FFD00
RAND_SEMA                        E:00000004
RAND_STRM                        E:FD0FFD04
RANPNT                          00:000070F4
REL4                             E:00004000
REL5                             E:00005000
REL7                             E:00007000
REM                             00:0000625A
RETURN                          00:00006144
RIGHT                           00:00006C12
RND                             00:00006AA2
ROXx_FLAGS                      00:0000551C
ROXx_LOOP1                      00:00005532
ROXx_LOOP2                      00:00005552
ROXx_LOOP3                      00:00005572
ROXx_LOOP4                      00:00005592
ROXx_LOOP5                      00:000055B2
ROXx_LOOP6                      00:000055D4
ROx_FLAGS                       00:000052E6
ROx_LOOP1                       00:000052FC
ROx_LOOP2                       00:0000531C
ROx_LOOP3                       00:0000533C
ROx_LOOP4                       00:0000535C
ROx_LOOP5                       00:0000537C
ROx_LOOP6                       00:0000539E
RST_REG                          E:FD0FFC00
RTCBuf                           E:00100200
RTR_DONE                        00:00004674
RTSL                             E:0000D000
RUN                             00:00005F92
RUN1                            00:00005FE6
RUNNXL                          00:00005FA6
RUNSML                          00:00005FFC
RUNTSL                          00:00005FF2
RandGetNum                      00:00001F0E
RandInit                        00:00001ECE
RandWait                        00:00001F5E
ReceiveMsg                      00:00008E56
Regsave                          E:00040100
RunningTCB                       E:00100224
S1932a                          00:00008A48
S1932b                          00:00008A5C
S19Checksum                      E:00100150
S19Get16BitAddress              00:00008A10
S19Get24BitAddress              00:00008A1E
S19Get32BitAddress              00:00008A2A
S19StartAddress                  E:00040008
SAVE                            00:00006392
SAVE1                           00:0000639A
SAVE2                           00:000063BE
SAVEND                          00:000063CC
SBCD_INNER1                     00:000044E4
SBCD_INNER2                     00:00004552
SBCD_NO_C1                      00:00004500
SBCD_NO_C2                      00:00004508
SBCD_NO_C3                      00:0000456E
SBCD_NO_C4                      00:00004576
SBCD_OUTER1                     00:000044E2
SBCD_OUTER2                     00:00004550
SCHR                            00:00009530
SCOMMON                         00:000095D8
SCREEN_FORMAT                    E:00000001
SCREEN_SEMA                      E:00000005
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SERIAL_SEMA                      E:00000002
SETVAL                          00:00006CAE
SHIFTS2_FLAGS                   00:00005994
SHIFTS2_LOOP1                   00:000059AA
SHIFTS2_LOOP2                   00:000059C6
SHIFTS2_LOOP3                   00:000059E2
SHIFTS2_LOOP4                   00:000059FE
SHIFTS2_LOOP5                   00:00005A1A
SHIFTS2_LOOP6                   00:00005A38
SHIFTS_FLAGS                    00:00005752
SHIFTS_LOOP1                    00:00005768
SHIFTS_LOOP2                    00:00005788
SHIFTS_LOOP3                    00:000057A8
SHIFTS_LOOP4                    00:000057C8
SHIFTS_LOOP5                    00:000057E8
SHIFTS_LOOP6                    00:0000580A
SHRT                             E:0000F000
SIV1                            00:000068B2
SIZE                            00:00006AD8
SRYMSG                          00:000070EA
ST3                             00:00005C7E
ST4                             00:00005CD0
START                           00:00005BBE
STKFP                           00:00007104
STKGOS                          00:00007108
STKINP                          00:0000710C
STKLMT                          00:00007150
STOP                            00:00005F8A
STRAREASIZE                      E:00000800
STRSTK                          00:00007138
SUBA_OUTER1                     00:00004FA6
SUBQ_LOOP1                      00:00004832
SUBQ_LOOP2                      00:0000486C
SUBQ_LOOP3                      00:000048A2
SUBX_LOOP3                      00:00005190
SUBX_LOOP4                      00:000051AC
SUBX_LOOP5                      00:000051C8
SUBX_OUTER1                     00:000050FC
SUB_OUTER1                      00:00004E6A
SUB_OUTER2                      00:00004EDE
SV1                             00:00006CCC
ScrollUp                        00:0000138A
SelectThreadToRun               00:000002C2
SendMsg                         00:00008E18
SerHeadRcv                       E:00100162
SerHeadXmit                      E:00100168
SerRcvBuf                        E:00101000
SerRcvXoff                       E:00100165
SerRcvXon                        E:00100164
SerTailRcv                       E:00100160
SerTailXmit                      E:00100166
SerXmitBuf                       E:00102000
SerXmitXoff                      E:0010016A
SerialGetChar                   00:000015CC
SerialIRQ                       00:00001742
SerialInit                      00:0000158E
SerialPeekChar                  00:00001644
SerialPeekCharDirect            00:00001680
SerialPutChar                   00:0000169A
SerialPutCharDirect             00:000016FE
SerialRbo                       00:0000171A
SerialRcvCount                  00:00001722
SetDrawMode                     00:00007424
SetKeyboardEcho                 00:000007F4
SetPenColor                     00:00007446
ShiftBuf                        00:0000916A
SimHardware                     00:0000740C
SpuriousIRQ                     00:00009022
StartMon                        00:0000780E
StartQ                          00:00000172
StrArea                         00:00007140
StrSp                           00:0000713C
StringInVar                     00:00006894
StringOnStack                   00:000068FE
StubRout                        00:000076DC
SyncCursor                      00:0000143C
T15Abort                        00:0000200C
T15DispatchTable                00:0000727C
T15FloatToString                00:00008EE0
T15GetFloat                     00:00001FFE
T15LockSemaphore                00:00001FF2
T15UnlockSemaphore              00:00001FF8
TAB1                            00:00005D3E
TAB10                           00:00005DF3
TAB10_1                         00:00005ED4
TAB11                           00:00005DF6
TAB11_1                         00:00005EDC
TAB1_1                          00:00005DFC
TAB2                            00:00005D6D
TAB2_1                          00:00005E2C
TAB4                            00:00005DAA
TAB4_1                          00:00005E6C
TAB5                            00:00005DDC
TAB5_1                          00:00005EA0
TAB6                            00:00005DDF
TAB6_1                          00:00005EA8
TAB8                            00:00005DE4
TAB8_1                          00:00005EB0
TAB9                            00:00005DEF
TAB9_1                          00:00005ECC
TBL                             00:00009B20
TBLE                            00:00009DD8
TC1                             00:00006F54
TCBAffineChose                  00:000000A0
TCBAffinity                      E:00000084
TCBAffinityBase                  E:00000082
TCBAlloc                        00:0000006E
TCBEndTick                       E:00000070
TCBFree                         00:00000092
TCBHandleToPointer              00:00000028
TCBIAlloc                       00:00000050
TCBIFree                        00:0000007C
TCBInit                         00:00000000
TCBInsertIntoReadyQueue         00:000000D8
TCBNext                          E:0000007C
TCBPC                            E:00000050
TCBPointerToHandle              00:00000040
TCBPopReadyQueue                00:0000017A
TCBPrev                          E:00000080
TCBPriority                      E:00000055
TCBRegs                          E:00000004
TCBRemoveFromReadyQueue         00:00000150
TCBSR                            E:0000004C
TCBSSP                           E:00000048
TCBStartTick                     E:0000006C
TCBStatus                        E:00000054
TCBTicks                         E:00000074
TCBUSP                           E:00000044
TCB_SIZE                         E:00000100
TEXTCOL                          E:00000040
TEXTREG                          E:FD080000
TEXTROW                          E:00000020
TEXTVID_CMDTBL                  00:00000EC4
TICK                            00:00006AE8
TOUPB1                          00:00006FB6
TOUPBRT                         00:00006FD6
TOUPBUF                         00:00006FB0
TOUPPER                         00:00006FE8
TOUPRET                         00:00006FF8
TRAP15                          00:00007266
TSTC                            00:00006F42
TSTNUM                          00:00006F5A
TSTV                            00:0000697C
TSTVRT                          00:000069FC
TS_PREEMPT                       E:00000020
TS_RUNNING                       E:00000080
TV1                             00:000069C4
TV2                             00:000069F4
TXT                             00:000071A8
TXTBGN                          00:00005BD8
TXTUNF                          00:00007148
TYPMSG                          00:000070D0
TestBitmap                      00:00007488
TextCols                         E:0004008D
TextRows                         E:0004008C
TextScr                          E:00040004
TickIRQ                         00:00008FAE
TimerStack                       E:00041BFC
USP1                            00:0000695A
UnlockSemaphore                 00:00001FD6
UnlockSysSemaphore              00:000003A6
UpdateIRQLive                   00:000002EC
UpdateStringPointers            00:0000692E
VARBGN                          00:0000714C
Vertical1                       00:00007572
Vertical2                       00:0000758E
WAITIRQ                         00:00006044
WHTMSG                          00:000070C8
WSTART                          00:00005C4A
Wait10ms                        00:00000AD6
Wait300ms                       00:00000AF2
X                               00:000092A8
XOFF                             E:00000013
XON                              E:00000011
XP11                            00:0000657A
XP12                            00:00006586
XP13                            00:00006592
XP14                            00:0000659E
XP15                            00:000065AA
XP15RT                          00:000065B6
XP16                            00:000065B8
XP17                            00:000065D6
XP18                            00:000065DC
XP21                            00:000065FE
XP22                            00:00006604
XP23                            00:00006608
XP24                            00:00006616
XP25                            00:00006644
XP26                            00:0000664A
XP27                            00:0000665E
XP30                            00:000066D4
XP31                            00:000066E0
XP34                            00:000066F6
XP35                            00:00006710
XP36                            00:000066D0
XP40                            00:00006744
XP41                            00:00006756
XP42                            00:000067DE
XP43                            00:000067E0
XP44                            00:000067C2
XP45                            00:00006770
XPRT0                           00:000065C6
XPRT1                           00:000065CE
XPSTNG                          00:00006766
XP_AND                          00:00006538
XP_ANDX                         00:0000654E
XP_MOD                          00:00006716
XP_OR                           00:00006510
XP_ORX                          00:0000654E
XP_POP                          00:000064B4
XP_POP1                         00:000064CA
XP_PUSH                         00:0000649E
_CheckNan                       00:0000822C
_CheckNegative                  00:000082AA
_CheckZero                      00:00008290
_ComputeDigitsBeforeDecpt       00:00008304
_E                               E:0004050C
_ExtExpDigit                    00:00008428
_ExtExpDigits                   00:00008446
_FloatToString                  00:000084F0
_GetExponent                    00:000085A8
_GetFloat                       00:000086A8
_GetFloatBackupChar             00:00008540
_GetFloatGetChar                00:00008532
_GetFloatIgnBlanks              00:00008538
_GetFraction                    00:00008544
_GetInteger                     00:00008632
_GetRand                        00:00001F3C
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdClearIRQ                  00:00000796
_KeybdCnt                        E:00100013
_KeybdGetScancode               00:00000778
_KeybdGetStatus                 00:0000075A
_KeybdHead                       E:00100011
_KeybdInit                      00:00000648
_KeybdOBuf                       E:00100080
_KeybdTail                       E:00100012
_Keybd_tick                      E:0001001C
_LeadingZero                    00:0000833E
_LessThanDbl                    00:000082D8
_MakeBig                        00:000082BC
_PadLeft                        00:0000846E
_PadRight                       00:000084BE
_SpitOutDigits                  00:0000834E
_SpitOutE                       00:00008410
_TrimDotZero                    00:000083E8
_TrimTrailingPoint              00:000083CA
_TrimTrailingZeros              00:00008404
_canary                          E:00040098
_dasmbuf                         E:00040800
_dfMil                          00:00008218
_dfOne                          00:00008200
_dfTen                          00:0000820C
_digits_before_decpt             E:00040510
_fpBuf                           E:00040520
_fpTextIncr                      E:00040094
_fpWork                          E:00040600
_keybdControlCodes              00:00000DC4
_keybdExtendedCodes             00:00000E44
_msgInf                         00:00008228
_msgNan                         00:00008224
_precision                       E:00040514
_shiftedScanCodes               00:00000CC4
_unshiftedScanCodes             00:00000BC4
_width                           E:00040508
a_was_less                      00:0000AF94
add_address                     00:0000B0BC
add_char_loop                   00:0000B064
add_character                   00:0000A600
add_coords                      00:0000B0D2
add_explode                     00:0000AB3A
add_fire                        00:0000AB46
add_hex_chr                     00:0000B0A2
add_item                        00:0000AB20
add_message                     00:0000B01C
add_p_size                      00:0000A104
add_pair                        00:0000B0EE
add_play_explode                00:0000AC5E
add_player                      00:0000AD04
add_saucer                      00:0000AB40
add_score                       00:0000AB58
add_ships                       00:0000A610
add_ships_loop                  00:0000A62C
add_single                      00:0000B0EC
add_sup_hex_chr                 00:0000B096
add_sup_zero                    00:0000B0AC
add_the_char                    00:0000B07A
add_to_list                     00:0000AAEC
add_to_score                    00:0000ADE6
addr_err                        00:00009036
aim_shot                        00:0000A2C2
asteroids_start                 00:00009ED8
atn_eight                       00:0000AF00
atn_quad                        00:0000AEF0
atn_semi                        00:0000AEE0
atn_tab                         00:0000AF1E
attract_fire                    00:0000A29E
attract_saucer                  00:0000A1EC
beat1_snd                        E:00000008
beat1_sound                     00:0000CD50
beat2_snd                        E:00000009
beat2_sound                     00:0000CD62
bkColor                          E:00040088
brdisp_trap                     00:0000904C
bus_err                         00:00008C5A
calc_fire_byte                  00:0000A3B0
char_1                          00:0000C88C
char_2                          00:0000C894
char_3                          00:0000C8A4
char_4                          00:0000C8B2
char_5                          00:0000C8C0
char_6                          00:0000C8CE
char_7                          00:0000C8DC
char_8                          00:0000C8E6
char_9                          00:0000C8F6
char_a                          00:0000C720
char_b                          00:0000C730
char_c                          00:0000C74A
char_d                          00:0000C756
char_e                          00:0000C766
char_f                          00:0000C776
char_g                          00:0000C784
char_h                          00:0000C796
char_i                          00:0000C7A4
char_j                          00:0000C7B2
char_k                          00:0000C7BE
char_l                          00:0000C7CA
char_m                          00:0000C7D4
char_n                          00:0000C7E0
char_o0                         00:0000C7EA
char_p                          00:0000C7F6
char_q                          00:0000C804
char_r                          00:0000C816
char_s                          00:0000C826
char_set                        00:0000C904
char_spc                        00:0000C888
char_t                          00:0000C834
char_u                          00:0000C840
char_v                          00:0000C84C
char_w                          00:0000C856
char_x                          00:0000C864
char_y                          00:0000C86E
char_z                          00:0000C87C
check_all                       00:0000A0AE
check_alpha                     00:0000A51C
check_clear                     00:0000A840
check_clear_loop                00:0000A844
check_clear_y                   00:0000A85E
check_hi_loop                   00:0000AE52
check_hi_next                   00:0000AE60
check_hi_player                 00:0000AE4A
check_hiscores                  00:0000AE2E
check_hits                      00:0000A08E
check_neg_velocity              00:0000A834
check_next_object               00:0000A0AA
check_pss                       00:0000A09C
check_velocity                  00:0000A826
chk_exception                   00:0000201C
clear_hyper                     00:0000A778
clear_items_loop                00:0000A5D8
clear_loop                      00:0000B130
clear_rock                      00:0000ADD2
clear_rocks                     00:0000A91E
clear_rocks_loop                00:0000A920
clear_saucer                    00:0000A718
close_all                       00:0000A48C
close_all_2                     00:0000B186
cmdAsteroids                    00:00007920
cmdBreakpoint                   00:000078FC
cmdClearScreen                  00:0000793C
cmdClock                        00:00007A2E
cmdCore                         00:00007948
cmdDisassemble                  00:00007FA8
cmdDispatch                     00:00007874
cmdDumpMemory                   00:00007FF8
cmdDumpRegs                     00:000080C2
cmdEditMemory                   00:00007EAE
cmdFMTK                         00:0000796C
cmdFillB                        00:00007D5A
cmdFillL                        00:00007E02
cmdFillW                        00:00007DAE
cmdGrDemo                       00:00007F32
cmdHelp                         00:00007A9E
cmdJump                         00:00007F22
cmdLoadS19                      00:000088B2
cmdMonitor                      00:00007818
cmdReceiveSerial                00:00007D26
cmdReset                        00:00007A4C
cmdSendSerial                   00:00007CF6
cmdString                       00:00007756
cmdTable                        00:00007794
cmdTestCPU                      00:0000792C
cmdTestFP                       00:00007974
cmdTestGF                       00:00007A00
cmdTestRAM                      00:000087EA
cmdTestSerialReceive            00:0000816C
cmdTinyBasic                    00:00007928
cmdVideoMode                    00:000078BA
col_table                       00:0000A114
col_table_l                     00:0000A12C
col_table_p                     00:0000A11C
col_table_s                     00:0000A124
copy_msg                        00:0000C2E8
copy_rock                       00:0000A976
copy_rock_2                     00:0000A97A
copy_short                      00:0000AD56
copy_vectors                    00:0000AD5A
copy_velocity                   00:0000A9A0
cos_d0                          00:0000AF7C
cossin_d0                       00:0000AF8E
cpu_test                        00:00002070
d_mess_0                        00:0000CA54
d_mess_1                        00:0000CA64
d_mess_2                        00:0000CA6D
d_mess_3                        00:0000CA94
d_mess_4                        00:0000CAB7
d_mess_5                        00:0000CADA
d_mess_6                        00:0000CB00
d_mess_7                        00:0000CB16
d_messages                      00:0000CA44
dccr                            00:000011F8
dclf                            00:000012CC
dcx10                           00:00001260
dcx11                           00:00001282
dcx12                           00:00001278
dcx14                           00:000011EC
dcx16                           00:000012D0
dcx4                            00:000012D4
dcx6                            00:00001216
dcx7                            00:000011F0
dcx8                            00:0000122C
dcx9                            00:00001242
dec_isaucer_time                00:0000A214
delta_x_pos                     00:0000A0C8
delta_y_pos                     00:0000A0DA
dly3s1                          00:00002040
dly3s2                          00:0000203E
doBackspace                     00:000012DE
doCtrlX                         00:00001322
doDelete                        00:000012EC
do_nothing                      00:000004D8
do_p1_ships                     00:0000AA54
do_p2_score                     00:0000AAC8
do_saucer                       00:0000A1C0
do_start_mess                   00:00009F88
do_vector                       00:0000B19E
dspj1                           00:0000722C
dspmem1                         00:0000805A
dspspc1                         00:00008764
dsret                           00:00007238
e_mess_0                        00:0000C99A
e_mess_1                        00:0000C9A6
e_mess_2                        00:0000C9AE
e_mess_3                        00:0000C9D0
e_mess_4                        00:0000C9EB
e_mess_5                        00:0000CA08
e_mess_6                        00:0000CA2F
e_mess_7                        00:0000CA3A
e_messages                      00:0000C98A
edtmem1                         00:00007EB8
end_game                        00:0000A07A
end_vector                      00:0000B28C
enter_hiscores                  00:0000A3D6
err_cmdproc                     00:000014AC
err_dcb                          E:00040B8C
err_init                        00:0000147E
err_ret                         00:000014AA
existing_saucer                 00:0000A27A
exit_add_message                00:0000B082
exit_add_score                  00:0000AB86
exit_add_ships                  00:0000A638
exit_check_hiscores             00:0000AE8E
exit_check_velocity             00:0000A83E
exit_copy_vectors               00:0000AD74
exit_do_saucer                  00:0000A278
exit_enter_hiscores             00:0000A52A
exit_existing_saucer            00:0000A2A4
exit_find_rock                  00:0000AC44
exit_game_message               00:0000A078
exit_hi_chk                     00:0000AE84
exit_high_scores                00:0000AC2C
exit_hit_a_rock                 00:0000AE28
exit_hyperspace                 00:0000A5BA
exit_insert_loop                00:0000AEB6
exit_limit_velocity             00:0000A9FA
exit_make_rocks                 00:0000A928
exit_no_scores                  00:0000AC32
exit_not_done                   00:0000A528
exit_play_sample                00:0000CD36
exit_push_start                 00:00009FFA
exit_ship_fire                  00:0000A35C
exit_ship_move                  00:0000A77C
exit_static                     00:0000AAEA
expl_0                          00:0000C3D0
expl_1                          00:0000C39A
expl_2                          00:0000C35C
expl_3                          00:0000C330
expl_tab                        00:0000C328
expl_x_pos                       S:0000005B
expl_y_pos                       S:00000067
explode_object                  00:0000A17A
extra_snd                        E:0000000A
extra_sound                     00:0000CDB3
f_mess_0                        00:0000CB30
f_mess_1                        00:0000CB3F
f_mess_2                        00:0000CB46
f_mess_3                        00:0000CB6A
f_mess_4                        00:0000CB83
f_mess_5                        00:0000CBA5
f_mess_6                        00:0000CBCE
f_mess_7                        00:0000CBE0
f_messages                      00:0000CB20
f_xpos_off                       E:FFFFFFBA
f_xvel_off                       E:0000004C
f_ypos_off                       E:00000000
f_yvel_off                       E:0000006F
fgColor                          E:00040084
filename                        00:0000CE2A
find_next_rock                  00:0000AC3A
find_rock                       00:0000AC38
fire_ok                         00:0000A3CC
fire_saucer                     00:0000A2AA
fire_shot                       00:0000A35E
first_quad                      00:0000AD2E
flag_end                         E:0000002F
flags_off                        E:0000000C
fpBuf                            E:000402C0
framebuf_clear                  00:00001B98
framebuf_cmdproc                00:0000198C
framebuf_dcb                     E:00040D18
framebuf_get_color              00:00001A5E
framebuf_get_dimen              00:00001A6E
framebuf_getbuf                 00:00001A5A
framebuf_getbuf1                00:000019CC
framebuf_getbuf2                00:000019D4
framebuf_getchar                00:000019AE
framebuf_init                   00:00001884
framebuf_putbuf                 00:00001A5A
framebuf_putchar                00:000019AE
framebuf_set_inpos              00:000019B0
framebuf_set_outpos             00:000019BE
framebuf_set_unit               00:00001A50
framebuf_setbuf1                00:000019DC
framebuf_setbuf2                00:000019EA
framebuf_stat                   00:000019AE
framebuf_stub                   00:00001A5A
framebuf_swapbuf                00:000019F8
framebuf_writeat                00:00001A9E
fx_sounds                       00:0000AD76
game_count                       S:00000059
game_message                    00:00009F74
game_over                       00:00009FFC
gen_prng                        00:0000B18C
gen_rock_loop                   00:0000A8C8
get_atn                         00:0000AED4
get_screen_address              00:000071FC
get_screen_color                00:00001184
gfxaccel_clear                  00:00001CD8
gfxaccel_cmdproc                00:00001CAC
gfxaccel_draw_line              00:00001CDC
gfxaccel_draw_rectangle         00:00001D32
gfxaccel_draw_triangle          00:00001DA2
gfxaccel_get_color              00:00001CE0
gfxaccel_get_dimen              00:00001CDC
gfxaccel_get_inpos              00:00001CDC
gfxaccel_get_outpos             00:00001CDC
gfxaccel_get_outptr             00:00001CDC
gfxaccel_getbuf                 00:00001CDC
gfxaccel_getbuf1                00:00001CDC
gfxaccel_getbuf2                00:00001CDC
gfxaccel_getchar                00:00001CDC
gfxaccel_init                   00:00001C74
gfxaccel_plot_point             00:00001CDC
gfxaccel_putbuf                 00:00001CDC
gfxaccel_putchar                00:00001CDC
gfxaccel_set_color              00:00001CEA
gfxaccel_set_color123           00:00001D08
gfxaccel_set_inpos              00:00001CDC
gfxaccel_set_outpos             00:00001CDC
gfxaccel_set_unit               00:00001CDC
gfxaccel_setbuf1                00:00001CDC
gfxaccel_setbuf2                00:00001CDC
gfxaccel_stat                   00:00001CCE
gfxaccel_stub                   00:00001CDC
gfxaccel_swapbuf                00:00001CDC
gfxaccel_wait                   00:00001E46
gfxaccel_writeat                00:00001CDC
glob_scale                       S:00000000
go_reset_play                   00:0000A67C
go_reset_sauc                   00:0000A682
gr_bitmap_buffer                 E:000408B0
gr_bitmap_screen                 E:000408A4
gr_double_buffer                 E:000408AC
gr_height                        E:000408A0
gr_width                         E:0004089C
gr_x                             E:00040894
gr_y                             E:00040898
gthx3                           00:00008756
gthx5                           00:00008732
gthx6                           00:00008744
handle_collision                00:0000A134
hi_char                          S:00000020
hide_p_cnt                       E:0000007A
high_idx                         S:00000017
high_off                         E:00000083
high_scores                     00:0000AB8C
high_scores_loop                00:0000ABBE
hinames                          S:0000003B
hiscore_y                        S:00000012
hiscores                         S:00000027
hit_a_rock                      00:0000ADB8
hype_xok1                       00:0000A568
hype_xok2                       00:0000A572
hype_yok1                       00:0000A590
hype_yok2                       00:0000A59A
hyper                            S:00000026
hyperspace                      00:0000A52C
i2c_setup                       00:00008ADC
i2c_wait_rx_nack                00:00008B2A
i2c_wait_tip                    00:00008AEC
i2c_wr_cmd                      00:00008AFC
i2c_xmit1                       00:00008B0C
i_rk_count                       E:00000075
i_sauc_tim                       E:00000078
icc1                            00:00001388
ignBlanks                       00:00007E4E
illegal_trap                    00:00009084
init_i2c                        00:00008ADC
init_plic                       00:00007720
insert_hiscore                  00:0000AE90
insert_loop                     00:0000AE94
io_irq                          00:0000909A
io_trap                         00:00008F14
irq3_rout                       00:00008FF0
irq6_rout                       00:00008FF0
irq_list_tbl                     A:00000400
irq_proc_generic                00:00009004
irq_rout                        00:00008FF0
is_closer                       00:0000A87C
item_exploding                  00:0000A68A
kbdi0002                        00:00000674
kbdi0004                        00:000006EC
kbdi0005                        00:00000708
kbdiTryAgain                    00:000006DE
kbdiXmitBusy                    00:00000722
keep_saucer_dir                 00:0000A292
keep_scale                      00:0000A70A
keep_small                      00:0000A1BA
keybd_cmdproc                   00:000005A0
keybd_dcb                        E:00040A84
keybd_getbuf                    00:000005DA
keybd_getchar                   00:000005D2
keybd_init                      00:00000510
keybd_putbuf                    00:000005DA
keybd_putchar                   00:000005CA
keybd_set_inpos                 00:000005DA
keybd_set_outpos                00:000005DA
keybd_stat                      00:000005C2
kgid1                           00:00000610
kgnotKbd                        00:00000618
kill_the_player                 00:0000A762
last_fire                        S:00000021
last_hype                        S:00000022
last_vector                     00:0000B29A
leds                             E:FD0FFF00
ledxit                          00:0000070C
lexpl_snd                        E:00000007
lexpl_sound                     00:0000CD74
lgsau_snd                        E:00000004
lgsau_sound                     00:0000CDC9
limit_p_vel                     00:0000A9EA
limit_velocity                  00:0000A9D6
load_old_sound                  00:0000CD12
load_sound                      00:0000CD0C
local_x                          S:00000002
local_y                          S:00000004
loop1                           00:000004A0
loop2                           00:0000049E
loop3                           00:00001166
loop_atn                        00:0000AF04
main_loop                       00:00009EE0
make_rocks                      00:0000A882
memend                           E:00100004
mess_origin                     00:0000C962
mess_table                      00:0000C982
mexpl_snd                        E:00000006
mexpl_sound                     00:0000CD89
min_rocks                        E:0000007D
move_item                       00:0000A6A4
move_items                      00:0000A63A
move_next_item                  00:0000A63E
move_next_object                00:0000A710
msgAddrErr                      00:000090E6
msgBadKeybd                     00:00000730
msgBusErr                       00:00008C49
msgChk                          00:00009142
msgHello                        00:00007C40
msgRtcReadFail                  00:00008C30
msgStackCanary                  00:00009150
msgUnknownCmd                   00:00007C30
msgXmitBusy                     00:0000073F
msg_bad_branch_disp             00:00009105
msg_core_start                  00:000090D5
msg_illegal                     00:000090F3
msg_io_access                   00:00009127
msg_reglist                     00:00008146
msg_regs                        00:00008142
msg_start                       00:000090AE
msg_test_done                   00:00009117
nd1                             00:00001E7E
nd2                             00:00001E7E
nd3                             00:00001E7E
nd4                             00:00001E7E
neg_upper_ok                    00:0000A9E0
net_delay                       00:00001E7E
new_rocks                        E:0000007B
next_hi_char                    00:0000A4A4
next_p_high                     00:0000A470
next_pss                        00:0000A096
nmeSerial                       00:00001818
nmi_rout                        00:00009024
no_add_size                     00:0000A106
no_aim_shot                     00:0000A318
no_dec_new_rocks                00:00009F64
no_game_over                    00:0000A03A
no_inc_min                      00:0000A8AC
no_neg_x10                      00:0000B206
no_neg_x11                      00:0000B1DC
no_neg_x2                       00:0000B288
no_neg_y10                      00:0000B1FA
no_neg_y11                      00:0000B1D0
no_neg_y2                       00:0000B280
no_new_rocks                    00:0000A674
no_play                         00:00009F46
no_playerx                      00:0000A404
no_pos_reflect                  00:0000AD1A
no_reset_scale                  00:0000A6A2
no_reset_xy                     00:0000AC88
no_saucer_sound                 00:0000AD84
no_save_ist                     00:0000A224
no_set_max                      00:0000A8BC
no_shot_dec                     00:0000AB56
no_shot_or                      00:0000A314
no_thrust                       00:0000AD54
no_thump_sound                  00:0000ADB6
nodec_thmpi                     00:0000A010
notRxInt                        00:000017B8
notTxInt                        00:00001806
not_closer                      00:0000A872
not_player                      00:0000A152
not_pss_player                  00:0000A16A
not_right                       00:0000B218
not_rot_left                    00:0000A4EE
not_rot_left1                   00:0000A78A
not_rot_right1                  00:0000A792
not_rot_right2                  00:0000A4F6
not_saucer                      00:0000A144
not_thrust                      00:0000A7F0
not_timed_out                   00:0000A4D2
not_x_max                       00:0000A6C6
not_y_max                       00:0000A6E6
notscreen                       00:0000B0F4
null_cmdproc                    00:0000050C
null_dcb                         E:00040A00
null_init                       00:000004DE
null_ret                        00:0000050A
numBreakpoints                   E:00000008
num_players                      S:0000001A
old_sound_play                  00:0000CD34
op_ABCD                         00:000043CA
op_ADD                          00:00004D60
op_ADDA                         00:00004F34
op_ADDQ                         00:00004760
op_ADDX                         00:00004FCC
op_ADD_I                        00:00003448
op_AND                          00:00004A7E
op_ANDI_TO_CCR                  00:000021F8
op_ANDI_TO_SR                   00:0000221E
op_BCC                          00:0000468A
op_BCHG                         00:000025EE
op_BCLR                         00:00002956
op_BOOL_I                       00:00003078
op_BSET                         00:00002CA4
op_BSR                          00:0000322A
op_BTST                         00:00002244
op_BTST0                        00:000023CE
op_BTST1                        00:000023DA
op_BTST10                       00:00002422
op_BTST11                       00:0000242A
op_BTST12                       00:00002430
op_BTST2                        00:000023E2
op_BTST20                       00:00002588
op_BTST21                       00:00002592
op_BTST22                       00:00002598
op_BTST23                       00:0000259E
op_BTST24                       00:000025A4
op_BTST25                       00:000025AA
op_BTST26                       00:000025B0
op_BTST27                       00:000025B6
op_BTST28                       00:000025BC
op_BTST29                       00:000025C2
op_BTST3                        00:000023EA
op_BTST30                       00:000025C8
op_BTST31                       00:000025CE
op_BTST32                       00:000025D2
op_BTST4                        00:000023F2
op_BTST5                        00:000023FA
op_BTST6                        00:00002402
op_BTST7                        00:0000240A
op_BTST8                        00:00002412
op_BTST9                        00:0000241A
op_CHK                          00:00003CD4
op_CMP                          00:00004BDE
op_CMPA                         00:00004C54
op_CMPM                         00:00004CBA
op_CMP_I                        00:00003260
op_DBCC                         00:0000470A
op_DIVS                         00:00004942
op_DIVU                         00:000048F0
op_EOR                          00:00004B68
op_EORI_TO_CCR                  00:000021AC
op_EORI_TO_SR                   00:000021D2
op_EXG                          00:00005284
op_EXT                          00:00003B54
op_LEAPEA                       00:00003B96
op_LINKS                        00:00003CA6
op_MOVE                         00:00003754
op_MOVEM                        00:000040AC
op_MOVEP                        00:00002FEC
op_MOVEQ                        00:000048D4
op_MOVE_USP                     00:00003CC4
op_MOVE_xxx_FLAGS               00:00003960
op_MULS                         00:00005238
op_MULU                         00:000051EC
op_NBCD                         00:000045BA
op_NEGS                         00:00003D1E
op_OR                           00:00004994
op_ORI_TO_CCR                   00:00002168
op_ORI_TO_SR                    00:0000218A
op_ROXx                         00:00005528
op_ROx                          00:000052F2
op_RTR                          00:00004668
op_SBCD                         00:000044C2
op_SCC                          00:00004730
op_SHIFTS                       00:0000575E
op_SHIFTS2                      00:000059A0
op_SUB                          00:00004E4A
op_SUBA                         00:00004F80
op_SUBQ                         00:0000481A
op_SUBX                         00:000050DC
op_SUB_I                        00:000035CE
op_SWAP                         00:00003B80
op_TAS                          00:00003C42
op_TRAPV                        00:0000464C
op_TST                          00:00003C68
op_abs                          00:0000B1EC
op_call                         00:0000B1AC
op_jump                         00:0000B1B2
op_rtsvec                       00:0000B19C
op_short                        00:0000B25C
op_vctr                         00:0000B1C2
output_number                   00:0000AF5E
output_number_loop              00:0000AF60
p1_high                          S:00000176
p1_score                         S:00000173
p1_ships                         S:00000175
p2_high                          S:0000027A
p2_score                         S:00000277
p2_ships                         S:00000279
p_2_end                          S:0000027B
p_fire_off                       E:0000002B
p_flag_off                       E:00000027
p_orient                         S:0000001E
p_xpos_off                       E:FFFFFFB6
p_xvel_off                       E:0000004A
p_xvlo_off                       E:0000007E
p_ypos_off                       E:FFFFFFFC
p_yvel_off                       E:0000006D
p_yvlo_off                       E:0000007F
past_play                        S:00000019
pcssxa                          00:00008962
pen_color                        E:00040890
pfire_snd                        E:00000001
pfire_sound                     00:0000CE06
piece_draw_loop                 00:0000AC92
play_00                         00:0000C4C0
play_01                         00:0000C4D8
play_02                         00:0000C4FC
play_03                         00:0000C520
play_04                         00:0000C544
play_05                         00:0000C566
play_06                         00:0000C58A
play_07                         00:0000C5AE
play_08                         00:0000C5D2
play_09                         00:0000C5F6
play_0A                         00:0000C61A
play_0B                         00:0000C63E
play_0C                         00:0000C662
play_0D                         00:0000C686
play_0E                         00:0000C6AA
play_0F                         00:0000C6CE
play_10                         00:0000C6F2
play_liv                        00:0000C70A
play_sample                     00:0000CD18
play_sound                       S:00000015
play_tab                        00:0000C49E
player_1                         E:000000F3
player_2                         E:000001F7
player_idx                       S:00000018
player_init                     00:0000A92A
player_n                        00:0000B08E
player_reset                    00:0000A960
player_shot                     00:0000A196
player_x                        00:0000B08A
plot                            00:00001A9E
plot_and                        00:00001B60
plot_black                      00:00001B82
plot_copy                       00:00001B74
plot_or                         00:00001B36
plot_sw                         00:00001B10
plot_white                      00:00001B8C
plot_xor                        00:00001B4A
plottbl                         00:00001AD4
pos_lower_ok                    00:0000A9F2
prtflt                          00:00008E9A
pss_check_loop                  00:0000A090
push_start_mess                 00:00009FE4
px_hide                         00:00009F3E
px_time                          S:0000001C
r_hit_tim                        E:00000079
ramtest                         00:000087EA
ramtest0                        00:00008834
ramtest1                        00:0000883C
ramtest2                        00:0000886A
ramtest3                        00:000088B0
ramtest6                        00:0000885A
rbo                             00:00008AD4
read_hi                         00:0000B17C
readyQ                           E:00100320
reset_game                      00:0000A5BC
reset_xy_loop                   00:0000AC70
reveal_player                   00:0000A75A
rmtst1                          00:0000884E
rmtst2                          00:00008882
rmtst3                          00:0000888A
rmtst5                          00:00008804
rock_0                          00:0000C416
rock_1                          00:0000C42E
rock_2                          00:0000C44A
rock_3                          00:0000C464
rock_count                       E:00000076
rock_hit_out                    00:0000A1F6
rock_on_x                       00:0000A8FC
rock_score                      00:0000AE2A
rock_tab                        00:0000C40E
rock_y_ok                       00:0000A8FA
rot_and_thrust                  00:0000A77E
rot_not_left                    00:0000A4F6
rotate_iofocus                  00:000076F0
rtc_read                        00:00008B3A
rtc_write                       00:00008BC6
sGetChar                        00:00008A9E
s_controls                      00:0000B0F4
s_fire_off                       E:00000029
s_flag_off                       E:00000028
s_key                            S:00000014
s_mess_0                        00:0000CBFE
s_mess_1                        00:0000CC06
s_mess_2                        00:0000CC0F
s_mess_3                        00:0000CC36
s_mess_4                        00:0000CC54
s_mess_5                        00:0000CC7C
s_mess_6                        00:0000CC8E
s_mess_7                        00:0000CC9B
s_messages                      00:0000CBEE
s_orient                         S:0000001F
s_xpos_off                       E:FFFFFFB8
s_xvel_off                       E:0000004B
s_ypos_off                       E:FFFFFFFE
s_yvel_off                       E:0000006E
sauc_cntdn                       E:00000077
sauc_jsr                        00:0000C480
sauc_vec                        00:0000C482
saucer_yok                      00:0000A236
saucer_yvel                     00:0000A2A6
save_char                       00:0000A524
save_hbutton                    00:0000A4BC
save_hi_index                   00:0000AE80
save_hyperspace                 00:0000A5B6
save_saucer                     00:0000A274
save_ship_fire                  00:0000A358
score_off                        E:00000080
scr_x                            S:00000006
scr_y                            S:00000008
select_focus1                   00:00007702
select_iofocus                  00:000076DE
semamem                          E:FD050000
serial_cmdproc                  00:00001536
serial_dcb                       E:00040C94
serial_getbuf                   00:0000158A
serial_getchar                  00:00001564
serial_getchar_direct           00:0000156A
serial_init                     00:000014E0
serial_peek_char                00:00001572
serial_peek_char_direct         00:0000157A
serial_putbuf                   00:0000158A
serial_putchar                  00:0000155C
serial_putchar_direct           00:00001582
serial_set_inpos                00:0000158A
serial_set_outpos               00:0000158A
serial_stat                     00:00001558
set_graphics_mode               00:000071D2
set_text_mode                   00:000071A8
setscreen                       00:0000B0F4
setup_err                       00:0000147E
setup_framebuf                  00:00001820
setup_gfxaccel                  00:00001C74
setup_keybd                     00:00000510
setup_null                      00:000004DE
setup_serial                    00:000014E0
setup_textvid                   00:00000F4C
sexpl_snd                        E:00000005
sexpl_sound                     00:0000CD9E
sfire_snd                        E:00000000
sfire_sound                     00:0000CE18
shift_left                      00:0000B296
ship_fire                       00:0000A32E
ship_move                       00:0000A72C
ship_parts                      00:0000ACF8
ship_wrk_x                      00:0000AC46
ship_wrk_y                      00:0000AC52
ships_off                        E:00000082
shot_jsr                        00:0000C94E
shot_mask                       00:0000A32A
shot_or                         00:0000A32C
shot_vec                        00:0000C950
show_ships                      00:0000A61A
sin_cos                         00:0000AF9A
sin_d0                          00:0000AF80
sirq0001                        00:00001768
sirq0002                        00:00001806
sirqNxtByte                     00:00001756
sirqRxFull                      00:000017B8
sirqTxEmpty                     00:00001806
sirqXmitOff                     00:00001806
sixteen_ms                       S:0000001D
skip_add                        00:0000ADEE
skip_p2_score                   00:0000AADC
skip_play_flash                 00:0000AA40
skip_play_inc                   00:0000A65A
skip_player_cont                00:00009F3A
skip_player_move                00:00009F36
skip_sub                        00:0000AF0E
small_s_size                    00:0000A102
small_saucer                    00:0000A272
smsau_snd                        E:00000003
smsau_sound                     00:0000CDDE
sound_init                      00:0000CCAB
sound_key                       00:0000CD38
ss_count                         S:0000001B
start                           00:000003B8
start_game                      00:00009FB0
start_left                      00:0000A24A
start_other                     00:000004B2
static_messages                 00:0000A9FC
suppress_0                       S:00000016
switch_addr                      S:0000000E
sys_switches                     E:000408B8
tblPow2                         00:00007A7E
tcbs                             E:20010000
test_fire_loop                  00:0000A34C
test_neg_fire                   00:0000A3C4
textvid_clear                   00:0000111A
textvid_cmdproc                 00:00000F28
textvid_dcb                      E:00040B08
textvid_get_color               00:000010C0
textvid_get_dimen               00:000010EA
textvid_get_inpos               00:00001042
textvid_get_outpos              00:00001084
textvid_get_outptr              00:0000109A
textvid_getbuf                  00:0000103E
textvid_getbuf1                 00:000010D0
textvid_getchar                 00:00001036
textvid_init                    00:00000F8A
textvid_putbuf                  00:0000103E
textvid_putchar                 00:000011CE
textvid_set_inpos               00:00001058
textvid_set_outpos              00:0000106E
textvid_set_unit                00:000010E0
textvid_stat                    00:00001032
textvid_stub                    00:0000103E
third_quad                      00:0000AD20
thmp_sndi                        E:0000007C
three_ship_start                00:0000A5CA
thrst_snd                        E:00000002
thrst_sound                     00:0000CDF3
thump_snd                        S:00000023
thump_time                       S:00000024
tickcnt                          E:0004009C
time_count                       S:00000025
timer_interrupt                 00:0000B084
trap3                           00:00008C74
variables                       00:0000CE37
vec_x_pos                       00:0000ACB8
vec_y_pos                       00:0000ACC4
vector                          00:0000B2E8
vector_base                     00:0000B220
vector_move                     00:0000B2BC
was_rot_left                    00:0000A4F6
what_hit_rock                   00:0000A176
what_hit_saucer                 00:0000A1A2
wide_shot                       00:0000A30A
wrap_to_a                       00:0000A516
wrap_to_z                       00:0000A51A
write_initial                   00:0000A5E6
x_off_pos                       00:0000A9B0
x_pos_end                        E:FFFFFFC6
x_pos_neg                       00:0000A6B6
x_pos_off                        E:FFFFFF80
x_vel_off                        E:0000002F
y_not_neg                       00:0000A6DC
y_off_pos                       00:0000A9CA
y_pos_off                        E:FFFFFFC6
y_vel_off                        E:00000052
zero_suppress                   00:0000AF70

Symbols by value:
FD050000 semamem
FD060000 ACIA
FD069000 I2C2
FD080000 TEXTREG
FD090000 PLIC
FD0FFC00 RST_REG
FD0FFD00 RAND_NUM
FD0FFD00 RAND
FD0FFD04 RAND_STRM
FD0FFD08 RAND_MZ
FD0FFD0C RAND_MW
FD0FFE00 KEYBD
FD0FFF00 leds
FD200000 FRAMEBUF
FD300000 GFXACCEL
FDC00000 MMU
FFFFFF80 x_pos_off
FFFFFFB6 p_xpos_off
FFFFFFB8 s_xpos_off
FFFFFFBA f_xpos_off
FFFFFFC6 x_pos_end
FFFFFFC6 y_pos_off
FFFFFFF0 DDATA
FFFFFFFC p_ypos_off
FFFFFFFC HISPC
FFFFFFFE s_ypos_off
00000000 E_Ok
00000000 f_ypos_off
00000000 ACIA_TX
00000000 TCBInit
00000000 glob_scale
00000000 DCB_MAGIC
00000000 sfire_snd
00000000 ACIA_RX
00000000 HAS_MMU
00000000 I2C_PREL
00000001 DT_NUMERIC
00000001 SCREEN_FORMAT
00000001 pfire_snd
00000001 I2C_PREH
00000002 local_x
00000002 I2C_CTRL
00000002 DT_STRING
00000002 SERIAL_SEMA
00000002 DEV_PUTCHAR
00000002 E_Func
00000002 thrst_snd
00000003 I2C_TXR
00000003 KEYBD_SEMA
00000003 CTRLC
00000003 I2C_RXR
00000003 smsau_snd
00000004 local_y
00000004 ACIA_STAT
00000004 I2C_CMD
00000004 EOT
00000004 I2C_STAT
00000004 TCBRegs
00000004 RAND_SEMA
00000004 lgsau_snd
00000004 DCB_NAME
00000004 NCORES
00000005 SCREEN_SEMA
00000005 sexpl_snd
00000006 scr_x
00000006 MEMORY_SEMA
00000006 mexpl_snd
00000007 DEV_SET_OUTPOS
00000007 lexpl_snd
00000008 numBreakpoints
00000008 beat1_snd
00000008 CTRLH
00000008 FMTK_SEMA
00000008 scr_y
00000008 ACIA_CMD
00000009 beat2_snd
00000009 E_NotAlloc
0000000A PRNlword
0000000A LF
0000000A E_NotSupported
0000000A extra_snd
0000000A FDATA
0000000C DEV_CLEAR
0000000C ACIA_CTRL
0000000C flags_off
0000000D SC_TAB
0000000D DEV_SWAPBUF
0000000D CR
0000000E switch_addr
00000010 DEV_GETBUF1
00000010 LOCVARSZ
00000011 XON
00000011 SC_ALT
00000012 DEV_WRITEAT
00000012 hiscore_y
00000012 SC_LSHIFT
00000013 CTRLS
00000013 XOFF
00000014 DEV_GET_DIMEN
00000014 s_key
00000014 SC_CTRL
00000015 play_sound
00000015 DEV_GET_COLOR
00000016 suppress_0
00000017 high_idx
00000017 DEV_GET_OUTPOS
00000018 DCB_CMDPROC
00000018 CTRLX
00000018 player_idx
00000018 DEV_GET_OUTPTR
00000019 past_play
0000001A num_players
0000001A CTRLZ
0000001B ss_count
0000001C px_time
0000001D sixteen_ms
0000001E p_orient
0000001F FOC
0000001F s_orient
00000020 hi_char
00000020 DCB_OUTPOSX
00000020 TEXTROW
00000020 BLANK
00000020 TS_PREEMPT
00000020 E_BadDevNum
00000021 last_fire
00000022 last_hype
00000023 thump_snd
00000024 thump_time
00000024 DCB_OUTPOSY
00000025 time_count
00000026 hyper
00000027 FOP
00000027 p_flag_off
00000027 hiscores
00000028 DCB_OUTPOSZ
00000028 s_flag_off
00000028 TCBHandleToPointer
00000029 s_fire_off
0000002B p_fire_off
0000002C DCB_INPOSX
0000002F flag_end
0000002F x_vel_off
00000030 DCB_INPOSY
00000034 DCB_INPOSZ
00000038 DCB_INBUFPTR
0000003B hinames
0000003C DCB_OUTBUFPTR
0000003F BUFSIZE
00000040 TCBPointerToHandle
00000040 DCB_INBUFSIZE
00000040 TEXTCOL
00000044 DCB_OUTBUFSIZE
00000044 TCBUSP
00000048 DCB_INDIMX
00000048 TCBSSP
0000004A p_xvel_off
0000004B s_xvel_off
0000004C DCB_INDIMY
0000004C TCBSR
0000004C f_xvel_off
00000050 BUFLEN
00000050 DCB_INDIMZ
00000050 TCBPC
00000050 TCBIAlloc
00000052 y_vel_off
00000054 TCBStatus
00000054 DCB_OUTDIMX
00000055 TCBPriority
00000058 SC_CAPSLOCK
00000058 DCB_OUTDIMY
00000059 SC_RSHIFT
00000059 game_count
0000005B expl_x_pos
0000005C DCB_OUTDIMZ
00000060 DCB_BKCOLOR
00000064 DCB_FGCOLOR
00000067 expl_y_pos
00000068 DCB_OPCODE
0000006C TCBStartTick
0000006D p_yvel_off
0000006E s_yvel_off
0000006E TCBAlloc
0000006F f_yvel_off
00000070 DCB_INBUFPTR2
00000070 TCBEndTick
00000074 DCB_OUTBUFPTR2
00000074 TCBTicks
00000075 i_rk_count
00000076 rock_count
00000077 sauc_cntdn
00000077 SC_NUMLOCK
00000078 i_sauc_tim
00000079 r_hit_tim
0000007A hide_p_cnt
0000007B new_rocks
0000007C thmp_sndi
0000007C DCB_OUTBUFSIZE2
0000007C TCBIFree
0000007C TCBNext
0000007D min_rocks
0000007E SC_SCROLLLOCK
0000007E p_xvlo_off
0000007F p_yvlo_off
00000080 TS_RUNNING
00000080 TCBPrev
00000080 DCB_UNIT
00000080 score_off
00000082 TCBAffinityBase
00000082 ships_off
00000083 high_off
00000084 DCB_SIZE
00000084 TCBAffinity
00000092 TCBFree
000000A0 TCBAffineChose
000000D8 TCBInsertIntoReadyQueue
000000E0 SC_EXTEND
000000F0 SC_KEYUP
000000F3 player_1
00000100 IRQ_trampolines
00000100 TCB_SIZE
00000150 TCBRemoveFromReadyQueue
00000172 StartQ
00000173 p1_score
00000175 p1_ships
00000176 p1_high
0000017A TCBPopReadyQueue
000001F7 player_2
00000220 FemtikiInit
00000230 FemtikiInitIRQ
0000023E OSCallTable
00000240 CallOS
00000277 p2_score
00000279 p2_ships
0000027A p2_high
0000027B p_2_end
000002AA GetRunningTCBPointer
000002C2 SelectThreadToRun
000002EC UpdateIRQLive
0000030E FemtikiTimerIRQ
00000396 LockSysSemaphore
000003A6 UnlockSysSemaphore
000003B8 start
00000400 irq_list_tbl
0000049E loop2
000004A0 loop1
000004B2 start_other
000004D8 do_nothing
000004DE null_init
000004DE setup_null
0000050A null_ret
0000050C null_cmdproc
00000510 keybd_init
00000510 setup_keybd
00000580 KBD_CMDTBL
000005A0 keybd_cmdproc
000005C2 keybd_stat
000005CA keybd_putchar
000005D2 keybd_getchar
000005DA keybd_getbuf
000005DA keybd_putbuf
000005DA keybd_set_inpos
000005DA keybd_set_outpos
000005DE KeybdGetID
00000610 kgid1
00000618 kgnotKbd
0000061C KeybdSetLED
00000648 _KeybdInit
00000648 KeybdInit
00000674 kbdi0002
000006DE kbdiTryAgain
000006EC kbdi0004
00000708 kbdi0005
0000070C ledxit
00000722 kbdiXmitBusy
00000730 msgBadKeybd
0000073F msgXmitBusy
0000075A _KeybdGetStatus
00000778 _KeybdGetScancode
00000796 _KeybdClearIRQ
000007AC KeybdRecvByte
000007CE KeybdWaitTx
000007F4 SetKeyboardEcho
000007FC CheckForKey
00000800 STRAREASIZE
00000808 GetKey
00000842 CheckForCtrlC
00000852 KeybdGetCharNoWait
0000085A KeybdGetCharWait
00000862 KeybdGetChar
00000A7E KeybdSetLEDStatus
00000ACE KeybdSendByte
00000AD6 Wait10ms
00000AF2 Wait300ms
00000B0E KeybdIRQ
00000BC4 _unshiftedScanCodes
00000CC4 _shiftedScanCodes
00000DC4 _keybdControlCodes
00000E44 _keybdExtendedCodes
00000EC4 TEXTVID_CMDTBL
00000F28 textvid_cmdproc
00000F4C setup_textvid
00000F8A textvid_init
00000FFF MAX_TID
00001000 NR_TCB
00001032 textvid_stat
00001036 textvid_getchar
0000103E textvid_putbuf
0000103E textvid_stub
0000103E textvid_getbuf
00001042 textvid_get_inpos
00001058 textvid_set_inpos
0000106E textvid_set_outpos
00001084 textvid_get_outpos
0000109A textvid_get_outptr
000010C0 textvid_get_color
000010D0 textvid_getbuf1
000010E0 textvid_set_unit
000010EA textvid_get_dimen
0000111A textvid_clear
00001166 loop3
00001184 get_screen_color
000011A4 CalcScreenLoc
000011CE textvid_putchar
000011EC dcx14
000011F0 dcx7
000011F8 dccr
00001216 dcx6
0000122C dcx8
00001242 dcx9
00001260 dcx10
00001278 dcx12
00001282 dcx11
000012CC dclf
000012D0 dcx16
000012D4 dcx4
000012DE doBackspace
000012EC doDelete
00001322 doCtrlX
00001346 IncCursorPos
00001360 IncCursorRow
00001388 icc1
0000138A ScrollUp
000013D0 BlankLastLine
0000142A HomeCursor
0000143C SyncCursor
0000147E err_init
0000147E setup_err
000014AA err_ret
000014AC err_cmdproc
000014B0 COM_CMDTBL
000014E0 setup_serial
000014E0 serial_init
00001536 serial_cmdproc
00001558 serial_stat
0000155C serial_putchar
00001564 serial_getchar
0000156A serial_getchar_direct
00001572 serial_peek_char
0000157A serial_peek_char_direct
00001582 serial_putchar_direct
0000158A serial_putbuf
0000158A serial_set_outpos
0000158A serial_set_inpos
0000158A serial_getbuf
0000158E SerialInit
000015CC SerialGetChar
00001644 SerialPeekChar
00001680 SerialPeekCharDirect
0000169A SerialPutChar
000016FE SerialPutCharDirect
0000171A SerialRbo
00001722 SerialRcvCount
00001742 SerialIRQ
00001756 sirqNxtByte
00001768 sirq0001
000017B8 notRxInt
000017B8 sirqRxFull
00001806 sirqXmitOff
00001806 sirq0002
00001806 notTxInt
00001806 sirqTxEmpty
00001818 nmeSerial
00001820 setup_framebuf
00001884 framebuf_init
00001934 FRAMEBUF_CMDTBL
0000198C framebuf_cmdproc
000019AE framebuf_getchar
000019AE framebuf_stat
000019AE framebuf_putchar
000019B0 framebuf_set_inpos
000019BE framebuf_set_outpos
000019CC framebuf_getbuf1
000019D4 framebuf_getbuf2
000019DC framebuf_setbuf1
000019EA framebuf_setbuf2
000019F8 framebuf_swapbuf
00001A50 framebuf_set_unit
00001A5A framebuf_getbuf
00001A5A framebuf_stub
00001A5A framebuf_putbuf
00001A5E framebuf_get_color
00001A6E framebuf_get_dimen
00001A9E plot
00001A9E framebuf_writeat
00001AD4 plottbl
00001B10 plot_sw
00001B36 plot_or
00001B4A plot_xor
00001B60 plot_and
00001B74 plot_copy
00001B82 plot_black
00001B8C plot_white
00001B98 framebuf_clear
00001BF8 GFXACCEL_CMDTBL
00001C74 setup_gfxaccel
00001C74 gfxaccel_init
00001CAC gfxaccel_cmdproc
00001CCE gfxaccel_stat
00001CD8 gfxaccel_clear
00001CDC gfxaccel_set_outpos
00001CDC gfxaccel_putchar
00001CDC gfxaccel_set_unit
00001CDC gfxaccel_putbuf
00001CDC gfxaccel_setbuf1
00001CDC gfxaccel_setbuf2
00001CDC gfxaccel_writeat
00001CDC gfxaccel_stub
00001CDC gfxaccel_get_dimen
00001CDC gfxaccel_swapbuf
00001CDC gfxaccel_get_inpos
00001CDC gfxaccel_get_outpos
00001CDC gfxaccel_get_outptr
00001CDC gfxaccel_getbuf
00001CDC gfxaccel_getbuf1
00001CDC gfxaccel_getbuf2
00001CDC gfxaccel_getchar
00001CDC gfxaccel_draw_line
00001CDC gfxaccel_plot_point
00001CDC gfxaccel_set_inpos
00001CE0 gfxaccel_get_color
00001CEA gfxaccel_set_color
00001D08 gfxaccel_set_color123
00001D32 gfxaccel_draw_rectangle
00001DA2 gfxaccel_draw_triangle
00001E46 gfxaccel_wait
00001E74 GlobalReadLong
00001E7A GlobalWriteLong
00001E7E nd3
00001E7E nd2
00001E7E net_delay
00001E7E nd4
00001E7E nd1
00001E82 InitIOPBitmap
00001ECE InitRand
00001ECE RandInit
00001F0E RandGetNum
00001F3C _GetRand
00001F5E RandWait
00001F74 InitSemaphores
00001F9A LockSemaphore
00001FBC ForceUnlockSemaphore
00001FD6 UnlockSemaphore
00001FF2 T15LockSemaphore
00001FF8 T15UnlockSemaphore
00001FFE T15GetFloat
0000200C T15Abort
0000201C chk_exception
00002030 Delay3s
0000203E dly3s2
00002040 dly3s1
00002054 Delay3s2
00002070 cpu_test
0000214E ALL_DONE
00002150 BSR_FAR1
00002158 EXCEPTION_6
00002160 EXCEPTION_7
00002168 op_ORI_TO_CCR
0000218A op_ORI_TO_SR
000021AC op_EORI_TO_CCR
000021D2 op_EORI_TO_SR
000021F8 op_ANDI_TO_CCR
0000221E op_ANDI_TO_SR
00002244 op_BTST
000023CE op_BTST0
000023DA op_BTST1
000023E2 op_BTST2
000023EA op_BTST3
000023F2 op_BTST4
000023FA op_BTST5
00002402 op_BTST6
0000240A op_BTST7
00002412 op_BTST8
0000241A op_BTST9
00002422 op_BTST10
0000242A op_BTST11
00002430 op_BTST12
00002588 op_BTST20
00002592 op_BTST21
00002598 op_BTST22
0000259E op_BTST23
000025A4 op_BTST24
000025AA op_BTST25
000025B0 op_BTST26
000025B6 op_BTST27
000025BC op_BTST28
000025C2 op_BTST29
000025C8 op_BTST30
000025CE op_BTST31
000025D2 op_BTST32
000025EE op_BCHG
00002956 op_BCLR
00002CA4 op_BSET
00002FEC op_MOVEP
00003078 op_BOOL_I
00003222 BSR_CLOSE1
0000322A op_BSR
00003258 BSR_CLOSE2
00003260 op_CMP_I
00003448 op_ADD_I
000035CE op_SUB_I
00003754 op_MOVE
00003820 MOVE2
0000389C MOVE1
0000391C MOVE3
00003960 op_MOVE_xxx_FLAGS
00003A76 MOVE4
00003B54 op_EXT
00003B80 op_SWAP
00003B96 op_LEAPEA
00003C2E LEA1
00003C42 op_TAS
00003C68 op_TST
00003CA6 op_LINKS
00003CC4 op_MOVE_USP
00003CD4 op_CHK
00003D1E op_NEGS
00004000 REL4
000040AC op_MOVEM
000043CA op_ABCD
000043EA ABCD_OUTER1
000043EC ABCD_INNER1
00004408 ABCD_NO_C1
00004410 ABCD_NO_C2
00004458 ABCD_OUTER2
0000445A ABCD_INNER2
00004476 ABCD_NO_C3
0000447E ABCD_NO_C4
000044C2 op_SBCD
000044E2 SBCD_OUTER1
000044E4 SBCD_INNER1
00004500 SBCD_NO_C1
00004508 SBCD_NO_C2
00004550 SBCD_OUTER2
00004552 SBCD_INNER2
0000456E SBCD_NO_C3
00004576 SBCD_NO_C4
000045BA op_NBCD
000045D2 NBCD_LOOP
000045DE NBCD_NO_C
000045E2 NBCD_NO_Z
00004618 NBCD_LOOP1
0000462C NBCD_NO_C1
00004630 NBCD_NO_Z1
0000464C op_TRAPV
00004668 op_RTR
00004674 RTR_DONE
00004682 BSR_FAR2
0000468A op_BCC
00004692 BCC1
0000469C BCC2
000046A4 BCC3
000046AE BCC4
000046B6 BCC5
000046C0 BCC6
000046C8 BCC7
000046D2 BCC8
000046DA BCC9
000046E4 BCC10
000046EC BCC11
000046F6 BCC12
000046FE BCC13
00004708 BCC14
0000470A op_DBCC
00004712 DBCC_LOOP1
00004720 DBCC_LOOP2
00004730 op_SCC
00004760 op_ADDQ
00004774 ADDQ_LOOP1
000047B2 ADDQ_LOOP2
000047E8 ADDQ_LOOP3
0000481A op_SUBQ
00004832 SUBQ_LOOP1
0000486C SUBQ_LOOP2
000048A2 SUBQ_LOOP3
000048D4 op_MOVEQ
000048F0 op_DIVU
0000490C DIVU_OUTER1
00004942 op_DIVS
0000495E DIVS_OUTER1
00004994 op_OR
000049B4 OR_OUTER1
00004A28 OR_OUTER2
00004A7E op_AND
00004A9E AND_OUTER1
00004B12 AND_OUTER2
00004B68 op_EOR
00004B88 EOR_OUTER2
00004BDE op_CMP
00004BFE CMP_OUTER1
00004C54 op_CMPA
00004C74 CMPA_OUTER1
00004CBA op_CMPM
00004D02 CMPM_LOOP1
00004D1C CMPM_LOOP2
00004D36 CMPM_LOOP3
00004D60 op_ADD
00004D80 ADD_OUTER1
00004DF4 ADD_OUTER2
00004E4A op_SUB
00004E6A SUB_OUTER1
00004EDE SUB_OUTER2
00004F34 op_ADDA
00004F5A ADDA_OUTER1
00004F80 op_SUBA
00004FA6 SUBA_OUTER1
00004FCC op_ADDX
00004FEC ADDX_OUTER1
00005000 REL5
00005080 ADDX_LOOP3
0000509C ADDX_LOOP4
000050B8 ADDX_LOOP5
000050DC op_SUBX
000050FC SUBX_OUTER1
00005190 SUBX_LOOP3
000051AC SUBX_LOOP4
000051C8 SUBX_LOOP5
000051EC op_MULU
00005208 MULU_OUTER1
00005238 op_MULS
00005254 MULS_OUTER1
00005284 op_EXG
000052E6 ROx_FLAGS
000052F2 op_ROx
000052FC ROx_LOOP1
0000531C ROx_LOOP2
0000533C ROx_LOOP3
0000535C ROx_LOOP4
0000537C ROx_LOOP5
0000539E ROx_LOOP6
0000551C ROXx_FLAGS
00005528 op_ROXx
00005532 ROXx_LOOP1
00005552 ROXx_LOOP2
00005572 ROXx_LOOP3
00005592 ROXx_LOOP4
000055B2 ROXx_LOOP5
000055D4 ROXx_LOOP6
00005752 SHIFTS_FLAGS
0000575E op_SHIFTS
00005768 SHIFTS_LOOP1
00005788 SHIFTS_LOOP2
000057A8 SHIFTS_LOOP3
000057C8 SHIFTS_LOOP4
000057E8 SHIFTS_LOOP5
0000580A SHIFTS_LOOP6
00005994 SHIFTS2_FLAGS
000059A0 op_SHIFTS2
000059AA SHIFTS2_LOOP1
000059C6 SHIFTS2_LOOP2
000059E2 SHIFTS2_LOOP3
000059FE SHIFTS2_LOOP4
00005A1A SHIFTS2_LOOP5
00005A38 SHIFTS2_LOOP6
00005BBE START
00005BC0 GOWARM
00005BC4 GOOUT
00005BC8 GOIN
00005BCC GOAUXO
00005BD0 GOAUXI
00005BD4 GOBYE
00005BD8 TXTBGN
00005BDC ENDMEM
00005BE0 CSTART
00005C4A WSTART
00005C7E ST3
00005CD0 ST4
00005D0A ClearStringArea
00005D2A ClearStringStack
00005D3E TAB1
00005D6D TAB2
00005DAA TAB4
00005DDC TAB5
00005DDF TAB6
00005DE4 TAB8
00005DEF TAB9
00005DF3 TAB10
00005DF6 TAB11
00005DFC TAB1_1
00005E2C TAB2_1
00005E6C TAB4_1
00005EA0 TAB5_1
00005EA8 TAB6_1
00005EB0 TAB8_1
00005ECC TAB9_1
00005ED4 TAB10_1
00005EDC TAB11_1
00005EE4 DIRECT
00005EF4 EXEC
00005EFC EXLP
00005F06 EXNGO
00005F1E EX1
00005F24 EXMAT
00005F2A EXGO
00005F2E INCON
00005F3C INCOM
00005F4A IOCOM
00005F54 OUTCOM
00005F60 IOCON
00005F6A OUTCON
00005F76 NEW
00005F8A STOP
00005F92 RUN
00005FA6 RUNNXL
00005FE6 RUN1
00005FF2 RUNTSL
00005FFC RUNSML
0000600C GOTO
00006020 ONIRQ
0000603A ONIRQ1
00006044 WAITIRQ
00006054 LIST
00006060 LS1
00006074 LS2
0000607A LS3
00006080 PRINT
00006090 PR2
0000609E PR0
000060AC PR1
000060BA PR3
000060C6 PR6
000060CC PR8
000060E8 PR9
00006102 FINISH
0000610A GOSUB
00006144 RETURN
00006170 FOR
0000618A FR1
000061A2 FR2
000061A8 FR3
000061AE FR4
000061B6 FR5
000061C8 FR6
000061D4 FR7
000061EC FR8
000061F0 NEXT
000061FA NX0
0000620C NX3
0000623A NX1
00006252 NX2
0000625A REM
0000625C IF
00006260 IF1
00006266 IF2
00006276 INPERR
00006284 INPUT
000062A8 IP7
000062B2 IP6
000062B6 IP2
000062D0 IP3
0000630A IP4
00006316 IP5
0000631A DEFLT
00006322 LET
0000632E LT1
00006332 LOAD
0000633E LOD1
00006358 LOD2
00006368 LODEND
00006372 GBYTE
00006376 GBYTE1
00006384 GBYTE2
00006392 SAVE
0000639A SAVE1
000063BE SAVE2
000063CC SAVEND
000063F0 PBYTE
000063F2 PBYTE1
00006406 PBYTE2
00006410 POKE
00006486 PKER
0000648A CALL
0000649E XP_PUSH
000064B4 XP_POP
000064CA XP_POP1
000064E0 NUM_EXPR
000064EE INT_EXPR
00006500 EXPR
00006500 EXPR_OR
00006510 XP_OR
00006526 EXPR_AND
00006538 XP_AND
0000654E XP_ANDX
0000654E XP_ORX
00006554 CheckNumeric
00006566 EXPR_REL
0000657A XP11
00006586 XP12
00006592 XP13
0000659E XP14
000065AA XP15
000065B6 XP15RT
000065B8 XP16
000065C6 XPRT0
000065CE XPRT1
000065D6 XP17
000065DC XP18
000065F0 EXPR2
000065FE XP21
00006604 XP22
00006608 XP23
00006616 XP24
00006644 XP25
0000664A XP26
0000665E XP27
00006660 ConcatString
000066CE EXPR3
000066D0 XP36
000066D4 XP30
000066E0 XP31
000066F6 XP34
00006710 XP35
00006716 XP_MOD
00006738 EXPR4
00006744 XP40
00006754 EXP4RT
00006756 XP41
00006766 XPSTNG
00006770 XP45
000067C2 XP44
000067CE PARN
000067DE XP42
000067E0 XP43
000067E4 AllocateString
00006842 GarbageCollectStrings
0000687E NextString
00006894 StringInVar
000068B2 SIV1
000068DA PointsIntoStringArea
000068FE StringOnStack
0000692E UpdateStringPointers
0000695A USP1
0000697C TSTV
000069C4 TV1
000069F4 TV2
000069FC TSTVRT
000069FE DIV32
00006A10 DIV1
00006A16 DIV2
00006A1C DIV3
00006A2A DIV4
00006A38 DIVRT
00006A3A PEEK
00006AA2 RND
00006ACC ABS
00006AD8 SIZE
00006AE8 TICK
00006AF4 CORENO
00006B00 LorRArgs
00006B38 LorR1
00006B3C MID
00006B84 MID2
00006B9C MID5
00006BA4 DOMID
00006BD0 MID4
00006C02 MID1
00006C06 LEFT
00006C12 RIGHT
00006C3A LEN
00006C60 INT
00006C76 CHR
00006CAE SETVAL
00006CCC SV1
00006CCE FIN
00006CDA FI1
00006CE6 FI2
00006CE8 ENDCHK
00006CF8 ENDCHK1
00006CFA QWHAT
00006CFC AWHAT
00006D00 ERROR
00006D3A QSORRY
00006D3C ASORRY
00006D42 QHOW
00006D44 AHOW
00006D4A ETYPE
00006D50 GETLN
00006D60 GL1
00006D7E GL2
00006D92 GL3
00006DB6 GL4
00006DC2 GL5
00006DDE GL6
00006DE6 GL7
00006DEE FNDLN
00006DFC FNDLNP
00006E12 FNDRET
00006E14 FNDNXT
00006E16 FNDSKP
00006E24 MVUP
00006E2C MVRET
00006E2E MVUPW
00006E38 MVDOWN
00006E40 POPA
00006E7C PUSHA
00006EB2 PRTSTG
00006EB4 PS1
00006ECC PRTRET
00006ECE PRTSTR2a
00006ED4 PRTSTR2
00006EDA PRTNUM
00006F24 PRTLN
00006F42 TSTC
00006F54 TC1
00006F5A TSTNUM
00006FA6 IGNBLK
00006FB0 TOUPBUF
00006FB6 TOUPB1
00006FD6 TOUPBRT
00006FD8 DOQUO
00006FE0 DOQUO1
00006FE8 TOUPPER
00006FF8 TOUPRET
00006FFA CHKIO
00007000 REL7
0000700A CHKRET
0000700C PRMESG
00007016 PRMRET
00007018 CLS
00007024 OUTC
00007034 INC
00007040 INC1
00007054 AUXOUT
00007068 AUXIN
00007086 AXIRET
00007088 BYEBYE
00007096 INITMSG
000070BA OKMSG
000070C1 HOWMSG
000070C8 WHTMSG
000070D0 TYPMSG
000070D8 NOSTRING
000070EA SRYMSG
000070F0 CLMSG
000070F4 LSTROM
000070F4 RANPNT
000070F8 INPPTR
000070FC OUTPTR
00007100 CURRNT
00007104 STKFP
00007108 STKGOS
0000710C STKINP
00007110 LOPVAR
00007114 LOPINC
00007120 LOPLMT
0000712C LOPLN
00007130 LOPPT
00007134 IRQROUT
00007138 STRSTK
0000713C StrSp
00007140 StrArea
00007144 LastStr
00007148 TXTUNF
0000714C VARBGN
00007150 STKLMT
00007154 DIRFLG
00007158 BUFFER
000071A8 TXT
000071A8 set_text_mode
000071D2 set_graphics_mode
000071FC get_screen_address
0000720E CRLF
00007228 DisplayString
0000722C dspj1
00007238 dsret
0000723E DisplayStringCRLF
00007242 DisplayStringLimited
00007262 DisplayStringLimitedCRLF
00007266 TRAP15
0000727C T15DispatchTable
0000740C SimHardware
0000741C GetTick
00007424 SetDrawMode
00007446 SetPenColor
0000744E GRBufferToScreen
00007488 TestBitmap
00007528 Diagonal1
00007548 Diagonal2
00007572 Vertical1
0000758E Vertical2
000075B6 MoveToXY
000075C4 DrawToXY
00007642 DrawHorizTo
00007674 DrawVertTo
000076A4 Cursor1
000076DC StubRout
000076DE select_iofocus
000076F0 rotate_iofocus
00007702 select_focus1
00007720 init_plic
00007756 cmdString
00007794 cmdTable
00007804 FromScreen
0000780E StartMon
00007818 Monitor
00007818 cmdMonitor
00007838 PromptLn
00007844 Prompt3
0000785A Prompt1
00007874 cmdDispatch
000078BA cmdVideoMode
000078FC cmdBreakpoint
00007920 cmdAsteroids
00007928 cmdTinyBasic
0000792C cmdTestCPU
0000793C cmdClearScreen
00007948 cmdCore
0000796C cmdFMTK
00007974 cmdTestFP
00007A00 cmdTestGF
00007A2E cmdClock
00007A4C cmdReset
00007A7E tblPow2
00007A9E DisplayHelp
00007A9E cmdHelp
00007AAA HelpMsg
00007C30 msgUnknownCmd
00007C40 msgHello
00007C52 GetCmdLine
00007CF6 cmdSendSerial
00007D26 cmdReceiveSerial
00007D5A cmdFillB
00007DAE cmdFillW
00007E02 cmdFillL
00007E4E ignBlanks
00007E60 PeekScreenChar
00007E66 GetSzChar
00007E8C EditMemHelper
00007EAE cmdEditMemory
00007EB8 edtmem1
00007F22 cmdJump
00007F22 ExecuteCode
00007F32 cmdGrDemo
00007FA8 cmdDisassemble
00007FF8 cmdDumpMemory
0000801C DumpMem1
0000802E DisplayMem
0000805A dspmem1
000080C2 cmdDumpRegs
00008142 msg_regs
00008146 msg_reglist
0000816C cmdTestSerialReceive
0000818C GetHexNumber
000081BA GetDecNumber
00008200 _dfOne
0000820C _dfTen
00008218 _dfMil
00008224 _msgNan
00008228 _msgInf
0000822C _CheckNan
00008290 _CheckZero
000082AA _CheckNegative
000082BC _MakeBig
000082D8 _LessThanDbl
00008304 _ComputeDigitsBeforeDecpt
0000833E _LeadingZero
0000834E _SpitOutDigits
000083CA _TrimTrailingPoint
000083E8 _TrimDotZero
00008404 _TrimTrailingZeros
00008410 _SpitOutE
00008428 _ExtExpDigit
00008446 _ExtExpDigits
0000846E _PadLeft
000084BE _PadRight
000084F0 _FloatToString
00008532 _GetFloatGetChar
00008538 _GetFloatIgnBlanks
00008540 _GetFloatBackupChar
00008544 _GetFraction
000085A8 _GetExponent
00008632 _GetInteger
000086A8 _GetFloat
00008720 AsciiToHexNybble
00008732 gthx5
00008744 gthx6
00008756 gthx3
0000875A DisplayTwoSpaces
00008764 dspspc1
0000876C DisplaySpace
00008774 DisplayTetra
0000877A DisplayWyde
00008780 DisplayByte
00008786 DisplayNybble
000087A0 BufTetra
000087A6 BufWyde
000087AC BufByte
000087B2 BufNybble
000087CA DisplayAddr
000087EA cmdTestRAM
000087EA ramtest
00008804 rmtst5
00008834 ramtest0
0000883C ramtest1
0000884E rmtst1
0000885A ramtest6
0000886A ramtest2
00008882 rmtst2
0000888A rmtst3
000088B0 ramtest3
000088B2 cmdLoadS19
000088B8 NextRec
000088CA ProcessRec
00008962 pcssxa
000089CE ProcessS1
000089D2 ProcessS2
000089D6 ProcessS3
000089DA ProcessS7
000089EC ProcessS8
000089FE ProcessS9
00008A10 S19Get16BitAddress
00008A1E S19Get24BitAddress
00008A2A S19Get32BitAddress
00008A48 S1932a
00008A5C S1932b
00008A9E sGetChar
00008AC6 AudioInputTest
00008AC8 BouncingBalls
00008ACA GraphicsDemo
00008ACC ClearScreen
00008AD4 rbo
00008ADC init_i2c
00008ADC i2c_setup
00008AEC i2c_wait_tip
00008AFC i2c_wr_cmd
00008B0C i2c_xmit1
00008B2A i2c_wait_rx_nack
00008B3A rtc_read
00008BC6 rtc_write
00008C30 msgRtcReadFail
00008C49 msgBusErr
00008C5A bus_err
00008C74 trap3
00008CB2 ProcessBreakpoint
00008CB8 DisarmAllBreakpoints
00008CE4 ArmAllBreakpoints
00008D14 ArmBreakpoint
00008D92 DisarmBreakpoint
00008DE6 ListBreakpoints
00008E06 ClearBreakpointList
00008E18 SendMsg
00008E56 ReceiveMsg
00008E98 DispatchMsg
00008E9A prtflt
00008EE0 T15FloatToString
00008F14 io_trap
00008F3A OutputChar
00008F54 InitIRQ
00008F6A InstallIRQ
00008FAE TickIRQ
00008FF0 irq_rout
00008FF0 irq6_rout
00008FF0 irq3_rout
00009004 irq_proc_generic
00009022 SpuriousIRQ
00009024 nmi_rout
00009036 addr_err
0000904C brdisp_trap
00009084 illegal_trap
0000909A io_irq
000090AE msg_start
000090D5 msg_core_start
000090E6 msgAddrErr
000090F3 msg_illegal
00009105 msg_bad_branch_disp
00009117 msg_test_done
00009127 msg_io_access
00009142 msgChk
00009150 msgStackCanary
0000916A ShiftBuf
00009184 HEX2DEC2
000091D2 HEX2DEC
000091E2 HX2DC
000091E6 HX2DC0
000091EE HX2DC1
00009208 HX2DC2
0000920A HX2DC22
00009214 HX2DC3
0000921C HX2DC4
00009224 HX2DC5
0000922C HX2DC57
00009230 HX2DC6
00009236 PNT4HEX
00009236 PNT4HX
0000923A PNT6HX
00009246 PNT8HX
0000924A FRELADDR
00009258 FREL10
0000926A FREL15
00009284 FREL20
00009296 FREL25
000092A0 FREL30
000092A8 X
000092A8 IMOVEMFR
000092BC IM7788
000092C0 IM7799
000092D6 IMOVEMTR
000092F0 CS16
000092F2 ISTOP
00009306 IMMED
0000932C IMMED45
0000935E CS15
00009360 IMMED55
00009366 IMMED65
00009376 IMMED75
0000937A IMOVE
0000937E ILINK
00009394 FORM1
00009398 FORM1A
0000939C CS14
0000939E FORM3
000093A2 FORM4
000093B4 FORM5
000093B8 FORM6A
000093C8 FORM6D
000093D8 FORMREGA
000093DC FORMREG5
000093E8 FORMREGD
000093EE FORM7
000093FA FORM8
000093FE FORM815
00009406 CS13
00009408 FORM9
0000940E EEA10
00009412 FORM10EX
00009434 FORM10E3
0000943C FORM10E4
00009448 FORM10E6
00009450 FORM10
00009456 FORM103
0000945A FORM104
0000946A FORM105
00009480 CS12
00009484 FORM11
0000948C FORM11SL
000094A0 FORM112
000094AE FORM114
000094B0 FORM12
000094CA FORM125
000094EC FORM12A
00009510 CS11
00009514 IQUICK
00009518 IMOVEQ
00009530 SCHR
00009538 IMVFSR
00009546 IMVFUSP
00009554 IMVTSR
00009562 IMVT44
00009566 IMVTUSP
00009572 IMVTCCR
00009582 IMOVEP
00009592 IMOVEP11
000095AA CS20
000095AE IMOVEP35
000095BC IMOVEP66
000095D8 SCOMMON
000095DC ISCC
000095E6 IDBCC
000095F8 ICC
000095FC IBSR
0000960E ICC35
00009624 ICC55
00009634 ISETD
0000963A ISETD12
00009642 CS18
00009644 ISETS
0000965E ISHIFT
0000966A ISHIFT13
0000968E ISHIFT23
0000969A ISHIFT33
0000969E ISHIFT44
000096A6 CS17
000096A8 ISHIFTM1
000096C2 ICCCC
000096D8 ICCCC9
000096DA BRTBL
000096FA IMOVEA1
00009720 IMOVE19
00009726 IQUICKA
00009738 IQUICK21
0000974E IQUICK31
00009752 CS19
00009756 FORMSIZE
0000976A FORM91
0000977E FORM93
00009780 FORM95
00009782 EA000
0000978E EA001
0000979A EA010
000097AE EA011
000097C4 EA011RTS
000097C6 EA100
000097DC FE10
000097E0 EEA
00009844 EA1105
00009848 EA1107
0000985E EA1109
00009868 EA101
0000987E EA111
0000989C EA1112
000098B8 EA1113
000098C4 FE11
000098C8 EA1113A
000098EA EA1114
00009932 EAF25
00009936 EAF27
0000994A EAF35
00009954 EA1115
0000998C EA11153
00009996 EA11155
000099A2 MOVEMS
000099B2 MOVEMS2
000099B6 MOVEMR
000099C6 MOVEMR11
000099CE MOVEMR33
000099E0 MOVEMR44
000099FA MOVEMR77
00009A0C MOVEMR79
00009A0E MOVEMR88
00009A26 MOVEMR94
00009A32 DCODE68K
00009A46 DEC311
00009A64 DEC404
00009A74 DEC411
00009A82 FE12
00009A84 DEC425
00009A90 DEC510
00009A94 DEC515
00009A9C DEC530
00009AA2 DEC535
00009AAE DEC537
00009ACA COMMON4
00009ACC COMMON
00009ADA COMMON35
00009AF4 FERROR
00009AFE FERROR35
00009B0A FERROR39
00009B14 MSG111
00009B1E KI
00009B20 TBL
00009B20 KIEND
00009DD8 TBLE
00009DD8 OPCTBL
00009ED8 asteroids_start
00009EE0 main_loop
00009F36 skip_player_move
00009F3A skip_player_cont
00009F3E px_hide
00009F46 no_play
00009F64 no_dec_new_rocks
00009F74 game_message
00009F88 do_start_mess
00009FB0 start_game
00009FE4 push_start_mess
00009FFA exit_push_start
00009FFC game_over
0000A000 DRAW
0000A010 nodec_thmpi
0000A03A no_game_over
0000A078 exit_game_message
0000A07A end_game
0000A08E check_hits
0000A090 pss_check_loop
0000A096 next_pss
0000A09C check_pss
0000A0AA check_next_object
0000A0AE check_all
0000A0C8 delta_x_pos
0000A0DA delta_y_pos
0000A102 small_s_size
0000A104 add_p_size
0000A106 no_add_size
0000A114 col_table
0000A11C col_table_p
0000A124 col_table_s
0000A12C col_table_l
0000A134 handle_collision
0000A144 not_saucer
0000A152 not_player
0000A16A not_pss_player
0000A176 what_hit_rock
0000A17A explode_object
0000A196 player_shot
0000A1A2 what_hit_saucer
0000A1BA keep_small
0000A1C0 do_saucer
0000A1EC attract_saucer
0000A1F6 rock_hit_out
0000A214 dec_isaucer_time
0000A224 no_save_ist
0000A236 saucer_yok
0000A24A start_left
0000A272 small_saucer
0000A274 save_saucer
0000A278 exit_do_saucer
0000A27A existing_saucer
0000A292 keep_saucer_dir
0000A29E attract_fire
0000A2A4 exit_existing_saucer
0000A2A6 saucer_yvel
0000A2AA fire_saucer
0000A2C2 aim_shot
0000A30A wide_shot
0000A314 no_shot_or
0000A318 no_aim_shot
0000A32A shot_mask
0000A32C shot_or
0000A32E ship_fire
0000A34C test_fire_loop
0000A358 save_ship_fire
0000A35C exit_ship_fire
0000A35E fire_shot
0000A3B0 calc_fire_byte
0000A3C4 test_neg_fire
0000A3CC fire_ok
0000A3D6 enter_hiscores
0000A404 no_playerx
0000A470 next_p_high
0000A48C close_all
0000A4A4 next_hi_char
0000A4BC save_hbutton
0000A4D2 not_timed_out
0000A4EE not_rot_left
0000A4F6 not_rot_right2
0000A4F6 was_rot_left
0000A4F6 rot_not_left
0000A516 wrap_to_a
0000A51A wrap_to_z
0000A51C check_alpha
0000A524 save_char
0000A528 exit_not_done
0000A52A exit_enter_hiscores
0000A52C hyperspace
0000A568 hype_xok1
0000A572 hype_xok2
0000A590 hype_yok1
0000A59A hype_yok2
0000A5B6 save_hyperspace
0000A5BA exit_hyperspace
0000A5BC reset_game
0000A5CA three_ship_start
0000A5D8 clear_items_loop
0000A5E6 write_initial
0000A600 add_character
0000A610 add_ships
0000A61A show_ships
0000A62C add_ships_loop
0000A638 exit_add_ships
0000A63A move_items
0000A63E move_next_item
0000A65A skip_play_inc
0000A674 no_new_rocks
0000A67C go_reset_play
0000A682 go_reset_sauc
0000A68A item_exploding
0000A6A2 no_reset_scale
0000A6A4 move_item
0000A6B6 x_pos_neg
0000A6C6 not_x_max
0000A6DC y_not_neg
0000A6E6 not_y_max
0000A70A keep_scale
0000A710 move_next_object
0000A718 clear_saucer
0000A72C ship_move
0000A75A reveal_player
0000A762 kill_the_player
0000A778 clear_hyper
0000A77C exit_ship_move
0000A77E rot_and_thrust
0000A78A not_rot_left1
0000A792 not_rot_right1
0000A7F0 not_thrust
0000A826 check_velocity
0000A834 check_neg_velocity
0000A83E exit_check_velocity
0000A840 check_clear
0000A844 check_clear_loop
0000A85E check_clear_y
0000A872 not_closer
0000A87C is_closer
0000A882 make_rocks
0000A8AC no_inc_min
0000A8BC no_set_max
0000A8C8 gen_rock_loop
0000A8FA rock_y_ok
0000A8FC rock_on_x
0000A91E clear_rocks
0000A920 clear_rocks_loop
0000A928 exit_make_rocks
0000A92A player_init
0000A960 player_reset
0000A976 copy_rock
0000A97A copy_rock_2
0000A9A0 copy_velocity
0000A9B0 x_off_pos
0000A9CA y_off_pos
0000A9D6 limit_velocity
0000A9E0 neg_upper_ok
0000A9EA limit_p_vel
0000A9F2 pos_lower_ok
0000A9FA exit_limit_velocity
0000A9FC static_messages
0000AA40 skip_play_flash
0000AA54 do_p1_ships
0000AAC8 do_p2_score
0000AADC skip_p2_score
0000AAEA exit_static
0000AAEC add_to_list
0000AB20 add_item
0000AB3A add_explode
0000AB40 add_saucer
0000AB46 add_fire
0000AB56 no_shot_dec
0000AB58 add_score
0000AB86 exit_add_score
0000AB8C high_scores
0000ABBE high_scores_loop
0000AC2C exit_high_scores
0000AC32 exit_no_scores
0000AC38 find_rock
0000AC3A find_next_rock
0000AC44 exit_find_rock
0000AC46 ship_wrk_x
0000AC52 ship_wrk_y
0000AC5E add_play_explode
0000AC70 reset_xy_loop
0000AC88 no_reset_xy
0000AC92 piece_draw_loop
0000ACB8 vec_x_pos
0000ACC4 vec_y_pos
0000ACF8 ship_parts
0000AD04 add_player
0000AD1A no_pos_reflect
0000AD20 third_quad
0000AD2E first_quad
0000AD54 no_thrust
0000AD56 copy_short
0000AD5A copy_vectors
0000AD74 exit_copy_vectors
0000AD76 fx_sounds
0000AD84 no_saucer_sound
0000ADB6 no_thump_sound
0000ADB8 hit_a_rock
0000ADD2 clear_rock
0000ADE6 add_to_score
0000ADEE skip_add
0000AE28 exit_hit_a_rock
0000AE2A rock_score
0000AE2E check_hiscores
0000AE4A check_hi_player
0000AE52 check_hi_loop
0000AE60 check_hi_next
0000AE80 save_hi_index
0000AE84 exit_hi_chk
0000AE8E exit_check_hiscores
0000AE90 insert_hiscore
0000AE94 insert_loop
0000AEB6 exit_insert_loop
0000AED4 get_atn
0000AEE0 atn_semi
0000AEF0 atn_quad
0000AF00 atn_eight
0000AF04 loop_atn
0000AF0E skip_sub
0000AF1E atn_tab
0000AF5E output_number
0000AF60 output_number_loop
0000AF70 zero_suppress
0000AF7C cos_d0
0000AF80 sin_d0
0000AF8E cossin_d0
0000AF94 a_was_less
0000AF9A sin_cos
0000B000 HALT
0000B01C add_message
0000B064 add_char_loop
0000B07A add_the_char
0000B082 exit_add_message
0000B084 timer_interrupt
0000B08A player_x
0000B08E player_n
0000B096 add_sup_hex_chr
0000B0A2 add_hex_chr
0000B0AC add_sup_zero
0000B0BC add_address
0000B0D2 add_coords
0000B0EC add_single
0000B0EE add_pair
0000B0F4 notscreen
0000B0F4 setscreen
0000B0F4 s_controls
0000B100 Initialise
0000B130 clear_loop
0000B17C read_hi
0000B186 close_all_2
0000B18C gen_prng
0000B19C Ninc0
0000B19C op_rtsvec
0000B19C Ninc1
0000B19E do_vector
0000B1AC op_call
0000B1B2 op_jump
0000B1C2 op_vctr
0000B1D0 no_neg_y11
0000B1DC no_neg_x11
0000B1EC op_abs
0000B1FA no_neg_y10
0000B206 no_neg_x10
0000B218 not_right
0000B220 vector_base
0000B25C op_short
0000B280 no_neg_y2
0000B288 no_neg_x2
0000B28C end_vector
0000B296 shift_left
0000B29A last_vector
0000B2BC vector_move
0000B2E8 vector
0000C000 JSRL
0000C2E8 copy_msg
0000C328 expl_tab
0000C330 expl_3
0000C35C expl_2
0000C39A expl_1
0000C3D0 expl_0
0000C40E rock_tab
0000C416 rock_0
0000C42E rock_1
0000C44A rock_2
0000C464 rock_3
0000C480 sauc_jsr
0000C482 sauc_vec
0000C49E play_tab
0000C4C0 play_00
0000C4D8 play_01
0000C4FC play_02
0000C520 play_03
0000C544 play_04
0000C566 play_05
0000C58A play_06
0000C5AE play_07
0000C5D2 play_08
0000C5F6 play_09
0000C61A play_0A
0000C63E play_0B
0000C662 play_0C
0000C686 play_0D
0000C6AA play_0E
0000C6CE play_0F
0000C6F2 play_10
0000C70A play_liv
0000C720 char_a
0000C730 char_b
0000C74A char_c
0000C756 char_d
0000C766 char_e
0000C776 char_f
0000C784 char_g
0000C796 char_h
0000C7A4 char_i
0000C7B2 char_j
0000C7BE char_k
0000C7CA char_l
0000C7D4 char_m
0000C7E0 char_n
0000C7EA char_o0
0000C7F6 char_p
0000C804 char_q
0000C816 char_r
0000C826 char_s
0000C834 char_t
0000C840 char_u
0000C84C char_v
0000C856 char_w
0000C864 char_x
0000C86E char_y
0000C87C char_z
0000C888 char_spc
0000C88C char_1
0000C894 char_2
0000C8A4 char_3
0000C8B2 char_4
0000C8C0 char_5
0000C8CE char_6
0000C8DC char_7
0000C8E6 char_8
0000C8F6 char_9
0000C904 char_set
0000C94E shot_jsr
0000C950 shot_vec
0000C962 mess_origin
0000C982 mess_table
0000C98A e_messages
0000C99A e_mess_0
0000C9A6 e_mess_1
0000C9AE e_mess_2
0000C9D0 e_mess_3
0000C9EB e_mess_4
0000CA08 e_mess_5
0000CA2F e_mess_6
0000CA3A e_mess_7
0000CA44 d_messages
0000CA54 d_mess_0
0000CA64 d_mess_1
0000CA6D d_mess_2
0000CA94 d_mess_3
0000CAB7 d_mess_4
0000CADA d_mess_5
0000CB00 d_mess_6
0000CB16 d_mess_7
0000CB20 f_messages
0000CB30 f_mess_0
0000CB3F f_mess_1
0000CB46 f_mess_2
0000CB6A f_mess_3
0000CB83 f_mess_4
0000CBA5 f_mess_5
0000CBCE f_mess_6
0000CBE0 f_mess_7
0000CBEE s_messages
0000CBFE s_mess_0
0000CC06 s_mess_1
0000CC0F s_mess_2
0000CC36 s_mess_3
0000CC54 s_mess_4
0000CC7C s_mess_5
0000CC8E s_mess_6
0000CC9B s_mess_7
0000CCAB sound_init
0000CD0C load_sound
0000CD12 load_old_sound
0000CD18 play_sample
0000CD34 old_sound_play
0000CD36 exit_play_sample
0000CD38 sound_key
0000CD50 beat1_sound
0000CD62 beat2_sound
0000CD74 lexpl_sound
0000CD89 mexpl_sound
0000CD9E sexpl_sound
0000CDB3 extra_sound
0000CDC9 lgsau_sound
0000CDDE smsau_sound
0000CDF3 thrst_sound
0000CE06 pfire_sound
0000CE18 sfire_sound
0000CE2A filename
0000CE37 variables
0000D000 RTSL
0000E000 JMPL
0000F000 SHRT
0001001C _Keybd_tick
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040094 _fpTextIncr
00040098 _canary
0004009C tickcnt
000400A0 IRQFlag
000400A4 InputDevice
000400A8 OutputDevice
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
000402C0 fpBuf
00040508 _width
0004050C _E
00040510 _digits_before_decpt
00040514 _precision
00040520 _fpBuf
00040600 _fpWork
00040800 _dasmbuf
00040880 OFFSET
00040890 pen_color
00040894 gr_x
00040898 gr_y
0004089C gr_width
000408A0 gr_height
000408A4 gr_bitmap_screen
000408AC gr_double_buffer
000408B0 gr_bitmap_buffer
000408B8 sys_switches
00040A00 null_dcb
00040A84 keybd_dcb
00040B08 textvid_dcb
00040B8C err_dcb
00040C94 serial_dcb
00040D18 framebuf_dcb
00041BFC TimerStack
00100000 IOFocus
00100004 memend
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100018 KeybdID
00100020 _KeybdBuf
00100080 _KeybdOBuf
00100150 S19Checksum
00100160 SerTailRcv
00100162 SerHeadRcv
00100164 SerRcvXon
00100165 SerRcvXoff
00100166 SerTailXmit
00100168 SerHeadXmit
0010016A SerXmitXoff
00100200 RTCBuf
00100224 RunningTCB
0010030C FreeTCB
0010031C QueueCycle
00100320 readyQ
00101000 SerRcvBuf
00102000 SerXmitBuf
20010000 tcbs
