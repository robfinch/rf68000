Sections:
00: "DATA" (0-118)
01: "CODE" (0-533F)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+      <+
                            	     7: ;          | startup sp,pc  | 8 B   |
                            	     8: ; 00000008 +----------------+       |
                            	     9: ;					 |    vectors     | pair shared+
                            	    10: ; 00000400 +----------------+       |
                            	    11: ;					 |   bios mem     |       |
                            	    12: ; 00001000 +----------------+       |
                            	    13: ;					 |   bios code    |       |
                            	    14: ; 00008000 +----------------+      <+
                            	    15: ;					 |    unused      |
                            	    16: ; 00040000 +----------------+
                            	    17: ;					 |   local ram    |
                            	    18: ; 00041000 +----------------+
                            	    19: ;					 |    unused      |
                            	    20: ; 00100000 +----------------+
                            	    21: ;					 |   global ram   |
                            	    22: ; 00101000 +----------------+
                            	    23: ;					 |    unused      |
                            	    24: ; 20000000 +----------------+
                            	    25: ;          |                |
                            	    26: ;          |                |
                            	    27: ;          |                |
                            	    28: ;          :  dram memory   : 512 MB
                            	    29: ;          |                |
                            	    30: ;          |                |
                            	    31: ;          |                |
                            	    32: ; 40000000 +----------------+
                            	    33: ;          |                |
                            	    34: ;          :     unused     :
                            	    35: ;          |                |
                            	    36: ; FFD00000 +----------------+
                            	    37: ;          |                |
                            	    38: ;          :    I/O area    : 1.0 M
                            	    39: ;          |                |
                            	    40: ; FFE00000 +----------------+
                            	    41: ;          |                |
                            	    42: ;          :     unused     :
                            	    43: ;          |                |
                            	    44: ; FFFFFFFF +----------------+
                            	    45: ;
                            	    46: ;-------------------------------------------------------------------------------
                            	    47: ;
                            	    48: CTRLC	EQU		$03
                            	    49: CTRLH	EQU		$08
                            	    50: CTRLX	EQU		$18
                            	    51: LF		EQU		$0A
                            	    52: CR		EQU		$0D
                            	    53: 
                            	    54: SC_F12  EQU    $07
                            	    55: SC_C    EQU    $21
                            	    56: SC_T    EQU    $2C
                            	    57: SC_Z    EQU    $1A
                            	    58: SC_KEYUP	EQU		$F0
                            	    59: SC_EXTEND   EQU		$E0
                            	    60: SC_CTRL		EQU		$14
                            	    61: SC_RSHIFT	EQU		$59
                            	    62: SC_NUMLOCK	EQU		$77
                            	    63: SC_SCROLLLOCK	EQU	$7E
                            	    64: SC_CAPSLOCK		EQU	$58
                            	    65: SC_ALT		EQU		$11
                            	    66: SC_LSHIFT	EQU		$12
                            	    67: SC_DEL		EQU		$71		; extend
                            	    68: SC_LCTRL	EQU		$58
                            	    69: SC_TAB      EQU		$0D
                            	    70: 
                            	    71: TEXTREG		EQU	$FD03FF00
                            	    72: txtscreen	EQU	$FD000000
                            	    73: semamem		EQU	$FD050000
                            	    74: ACIA			EQU	$FD060000
                            	    75: ACIA_RX		EQU	0
                            	    76: ACIA_TX		EQU	0
                            	    77: ACIA_STAT	EQU	4
                            	    78: ACIA_CMD	EQU	8
                            	    79: ACIA_CTRL	EQU	12
                            	    80: PLIC			EQU	$FD090000
                            	    81: leds			EQU	$FD0FFF00
                            	    82: keybd			EQU	$FD0FFE00
                            	    83: KEYBD			EQU	$FD0FFE00
                            	    84: rand			EQU	$FD0FFD00
                            	    85: IOFocus		EQU	$00100000
                            	    86: 
                            	    87: 	data
00:00000000 00040FFC        	    88: 	dc.l		$00040FFC
00:00000004 00000000        	    89: 	dc.l		start
00:00000008 00005020        	    90: 	dc.l		bus_err
00:0000000C 00000000        	    91: 	dc.l		0
00:00000010 000052CC        	    92: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    93: 	dc.l		0
00:00000018 00000270        	    94: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 00000280        	    95: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	    96: 	dc.l		0
00:00000024 00000000        	    97: 	dc.l		0
                            	    98: 	
                            	    99: 	; 10
00:00000028 00000000        	   100: 	dc.l		0
00:0000002C 00000000        	   101: 	dc.l		0
00:00000030 00000000        	   102: 	dc.l		0
00:00000034 00000000        	   103: 	dc.l		0
00:00000038 00000000        	   104: 	dc.l		0
00:0000003C 00000000        	   105: 	dc.l		0
00:00000040 00000000        	   106: 	dc.l		0
00:00000044 00000000        	   107: 	dc.l		0
00:00000048 00000000        	   108: 	dc.l		0
00:0000004C 00000000        	   109: 	dc.l		0
                            	   110: 	
                            	   111: 	; 20
00:00000050 00000000        	   112: 	dc.l		0
00:00000054 00000000        	   113: 	dc.l		0
00:00000058 00000000        	   114: 	dc.l		0
00:0000005C 00000000        	   115: 	dc.l		0
00:00000060 00000000        	   116: 	dc.l		0
00:00000064 00000000        	   117: 	dc.l		0
00:00000068 00000000        	   118: 	dc.l		0
00:0000006C 00000000        	   119: 	dc.l		0
00:00000070 00000000        	   120: 	dc.l		0
00:00000074 00000000        	   121: 	dc.l		0
                            	   122: 	
                            	   123: 	; 30
00:00000078 000051F0        	   124: 	dc.l		irq_rout					* IRQ 30 - timer
00:0000007C 00005282        	   125: 	dc.l		nmi_rout
00:00000080 00000000        	   126: 	dc.l		0
00:00000084 00000000        	   127: 	dc.l		0
00:00000088 00000000        	   128: 	dc.l		0
00:0000008C 0000504C        	   129: 	dc.l		trap3							; breakpoint
00:00000090 00000000        	   130: 	dc.l		0
00:00000094 00000000        	   131: 	dc.l		0
00:00000098 00000000        	   132: 	dc.l		0
00:0000009C 00000000        	   133: 	dc.l		0
                            	   134: 
                            	   135: 	; 40
00:000000A0 00000000        	   136: 	dc.l		0
00:000000A4 00000000        	   137: 	dc.l		0
00:000000A8 00000000        	   138: 	dc.l		0
00:000000AC 00000000        	   139: 	dc.l		0
00:000000B0 00000000        	   140: 	dc.l		0
00:000000B4 00000000        	   141: 	dc.l		0
00:000000B8 00000000        	   142: 	dc.l		0
00:000000BC 00004084        	   143: 	dc.l		TRAP15
00:000000C0 00000000        	   144: 	dc.l		0
00:000000C4 00000000        	   145: 	dc.l		0
                            	   146: 
                            	   147: 	; 50	
00:000000C8 00000000        	   148: 	dc.l		0
00:000000CC 00000000        	   149: 	dc.l		0
00:000000D0 00000000        	   150: 	dc.l		0
00:000000D4 00000000        	   151: 	dc.l		0
00:000000D8 00000000        	   152: 	dc.l		0
00:000000DC 00000000        	   153: 	dc.l		0
00:000000E0 00000000        	   154: 	dc.l		0
00:000000E4 00000000        	   155: 	dc.l		0
00:000000E8 00000000        	   156: 	dc.l		0
00:000000EC 00000000        	   157: 	dc.l		0
                            	   158: 
                            	   159: 	; 60
00:000000F0 00000000        	   160: 	dc.l		0
00:000000F4 00000000        	   161: 	dc.l		0
00:000000F8 00000000        	   162: 	dc.l		0
00:000000FC 00005294        	   163: 	dc.l		brdisp_trap
00:00000100 00000000        	   164: 	dc.l		0
00:00000104 00000000        	   165: 	dc.l		0
00:00000108 00000000        	   166: 	dc.l		0
00:0000010C 00000000        	   167: 	dc.l		0
00:00000110 00000000        	   168: 	dc.l		0
00:00000114 00000000        	   169: 	dc.l		0
                            	   170: 
                            	   171: 
                            	   172: ;-------------------------------------------------------------------------------
                            	   173: ;-------------------------------------------------------------------------------
                            	   174: 
                            	   175: ; BIOS variables which must be local (not shared) to each core
                            	   176: 
                            	   177: CursorRow	equ		$40000
                            	   178: CursorCol	equ		$40001
                            	   179: TextPos		equ		$40002
                            	   180: TextCurpos	equ	$40002
                            	   181: TextScr			equ	$40004
                            	   182: S19StartAddress	equ	$40008
                            	   183: KeybdEcho		equ	$4000C
                            	   184: KeybdWaitFlag	equ	$4000D
                            	   185: CmdBuf			equ $40040
                            	   186: CmdBufEnd		equ	$40080
                            	   187: fgColor			equ	$40084
                            	   188: bkColor			equ	$40088
                            	   189: TextRows		equ	$4008C
                            	   190: TextCols		equ	$4008D
                            	   191: Regsave			equ	$40100
                            	   192: numBreakpoints	equ		8
                            	   193: BreakpointFlag	equ		$40200
                            	   194: NumSetBreakpoints	equ	$40202	; to $40203
                            	   195: Breakpoints			equ		$40220	; to $40240
                            	   196: BreakpointWords	equ		$40280	; to $402A0
                            	   197: 
                            	   198: ; Keyboard buffer is in shared memory
                            	   199: KeybdLEDs		equ	$0010000E
                            	   200: _KeyState1	equ	$0010000F
                            	   201: _KeyState2	equ	$00100010
                            	   202: _KeybdHead	equ	$00100011
                            	   203: _KeybdTail	equ	$00100012
                            	   204: _KeybdCnt		equ	$00100013
                            	   205: _KeybdBuf		equ	$00100020
                            	   206: 
                            	   207: 	code
                            	   208: 	align		2
                            	   209: start:
01:00000000 46FC2700        	   210: 	move.w	#$2700,sr				; enable level 6 and higher interrupts
                            	   211: 	; Prepare local variable storage
01:00000004 303C03FF        	   212: 	move.w	#1023,d0					; 1024 longs to clear
01:00000008 41F900040000    	   213: 	lea			$40000,a0					; non shared local memory address
                            	   214: .0111:
01:0000000E 4298            	   215: 	clr.l		(a0)+							; clear the memory area
01:00000010 51C8FFFC        	   216: 	dbra		d0,.0111
01:00000014 23FC001FFFFF0004	   217: 	move.l	#$1fffff,fgColor	; set foreground / background color
01:0000001C 0084
01:0000001E 23FC0000003F0004	   218: 	move.l	#$00003f,bkColor
01:00000026 0088
01:00000028 4E7A0FE0        	   219: 	movec.l	coreno,d0					; get core number (2 to 9)
01:0000002C 5500            	   220: 	subi.b	#2,d0							; adjust (0 to 7)
01:0000002E C0FC4000        	   221: 	mulu		#16384,d0					; compute screen location
01:00000032 0680FD000000    	   222: 	addi.l	#$FD000000,d0
01:00000038 23C000040004    	   223: 	move.l	d0,TextScr
01:0000003E 13FC00400004008D	   224: 	move.b	#64,TextCols			; set rows and columns
01:00000046 13FC00200004008C	   225: 	move.b	#32,TextRows
01:0000004E 4E7A0FE0        	   226: 	movec.l	coreno,d0					; get core number
01:00000052 0C000002        	   227: 	cmpi.b	#2,d0
01:00000056 664E            	   228: 	bne			start_other
01:00000058 13C000100000    	   229: 	move.b	d0,IOFocus				; Set the IO focus in global memory
                            	   230: ;	bsr			InitSemaphores
01:0000005E 610000FA        	   231: 	bsr			Delay3s						; give devices time to reset
01:00000062 61003CA2        	   232: 	bsr			clear_screen
                            	   233: 
01:00000066 61004F8A        	   234: 	bsr			SerialInit
                            	   235: 
                            	   236: 	; Write startup message to screen
                            	   237: 
01:0000006A 43FA5276        	   238: 	lea			msg_start,a1
01:0000006E 61003F96        	   239: 	bsr			DisplayString
01:00000072 7201            	   240: 	moveq.l	#1,d1
01:00000074 610000C4        	   241: 	bsr			UnlockSemaphore	; allow another cpu access
01:00000078 7200            	   242: 	moveq.l	#0,d1
01:0000007A 610000BE        	   243: 	bsr			UnlockSemaphore	; allow other cpus to proceed
01:0000007E 33FCA4A4FD0FFF00	   244: 	move.w	#$A4A4,leds			; diagnostics
01:00000086 6100412A        	   245: 	bsr			init_plic				; initialize platform level interrupt controller
01:0000008A 600047B6        	   246: 	bra			StartMon
01:0000008E 610000EE        	   247: 	bsr			cpu_test
                            	   248: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   249: ;	move.l	a0,64*4
                            	   250: 
                            	   251: loop2:
01:00000092 70FF            	   252: 	move.l	#-1,d0
                            	   253: loop1:
01:00000094 2200            	   254: 	move.l	d0,d1
01:00000096 E089            	   255: 	lsr.l		#8,d1
01:00000098 E089            	   256: 	lsr.l		#8,d1
01:0000009A 13C1FD0FFF00    	   257: 	move.b	d1,leds
01:000000A0 51C8FFF2        	   258: 	dbra		d0,loop1
01:000000A4 60EC            	   259: 	bra			loop2
                            	   260: 
                            	   261: start_other:
01:000000A6 61003C5E        	   262: 	bsr			clear_screen
01:000000AA 4E7A1FE0        	   263: 	movec.l	coreno,d1
01:000000AE 61004D8A        	   264: 	bsr			DisplayByte
01:000000B2 43FA5246        	   265: 	lea			msg_core_start,a1
01:000000B6 61003F4E        	   266: 	bsr			DisplayString
                            	   267: do_nothing:	
01:000000BA 60004786        	   268: 	bra			StartMon
01:000000BE 60FA            	   269: 	bra			do_nothing
                            	   270: 
                            	   271: ;------------------------------------------------------------------------------
                            	   272: ; Initialize semaphores
                            	   273: ; - all semaphores are set to one except the first one, which is set to zero.
                            	   274: ;
                            	   275: ; Parameters:
                            	   276: ;		<none>
                            	   277: ; Modifies:
                            	   278: ;		<none>
                            	   279: ; Returns:
                            	   280: ;		<none>
                            	   281: ;------------------------------------------------------------------------------
                            	   282: 
                            	   283: InitSemaphores:
01:000000C0 48E7C080        	   284: 	movem.l	d0/d1/a0,-(a7)
01:000000C4 41F9FD050000    	   285: 	lea			semamem,a0
01:000000CA 42284000        	   286: 	move.b	#0,$4000(a0)		; lock the first semaphore
01:000000CE 323C00FE        	   287: 	move.w	#254,d1
01:000000D2 7001            	   288: 	moveq		#1,d0
                            	   289: .0001:
01:000000D4 41E80010        	   290: 	lea			16(a0),a0
01:000000D8 11404000        	   291: 	move.b	d0,$4000(a0)
01:000000DC 51C9FFF6        	   292: 	dbra		d1,.0001
01:000000E0 4CDF0103        	   293: 	movem.l	(a7)+,d0/d1/a0
01:000000E4 4E75            	   294: 	rts
                            	   295: 
                            	   296: ; -----------------------------------------------------------------------------
                            	   297: ; Test a semaphore to see if it is non-zero.
                            	   298: ;
                            	   299: ; Parameters:
                            	   300: ;		d1 semaphore number
                            	   301: ; -----------------------------------------------------------------------------
                            	   302: 
                            	   303: TestSemaphore:
01:000000E6 48E74080        	   304: 	movem.l	d1/a0,-(a7)			; save registers
01:000000EA 41F9FD050000    	   305: 	lea			semamem,a0			; point to semaphore memory
01:000000F0 4881            	   306: 	ext.w		d1							; make d1 word value
01:000000F2 E941            	   307: 	asl.w		#4,d1						; align to memory
01:000000F4 06414000        	   308: 	addi.w	#$4000,d1				; point to read / write memory
01:000000F8 4A301000        	   309: 	tst.b		(a0,d1.w)				; read (test) value for zero
01:000000FC 4CDF0102        	   310: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000100 4E75            	   311: 	rts
                            	   312: 
                            	   313: ; -----------------------------------------------------------------------------
                            	   314: ; Parameters:
                            	   315: ;		d1 semaphore number
                            	   316: ;
                            	   317: ; Side Effects:
                            	   318: ;		increments semaphore, saturates at 255
                            	   319: ;
                            	   320: ; Returns:	
                            	   321: ; 	z flag set if semaphore was zero
                            	   322: ; -----------------------------------------------------------------------------
                            	   323: 
                            	   324: IncrementSemaphore:
01:00000102 48E74080        	   325: 	movem.l	d1/a0,-(a7)			; save registers
01:00000106 41F9FD050000    	   326: 	lea			semamem,a0			; point to semaphore memory
01:0000010C 4881            	   327: 	ext.w		d1							; make d1 word value
01:0000010E E941            	   328: 	asl.w		#4,d1						; align to memory
01:00000110 4A301001        	   329: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:00000114 4CDF0102        	   330: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000118 4E75            	   331: 	rts
                            	   332: 	
                            	   333: ; -----------------------------------------------------------------------------
                            	   334: ; Parameters:
                            	   335: ;		d1 semaphore number
                            	   336: ;
                            	   337: ; Side Effects:
                            	   338: ;		decrements semaphore, saturates at zero
                            	   339: ;
                            	   340: ; Returns:	
                            	   341: ; 	z flag set if semaphore was zero
                            	   342: ; -----------------------------------------------------------------------------
                            	   343: 
                            	   344: DecrementSemaphore:
01:0000011A 48E74080        	   345: 	movem.l	d1/a0,-(a7)			; save registers
01:0000011E 41F9FD050000    	   346: 	lea			semamem,a0			; point to semaphore memory
01:00000124 024100FF        	   347: 	andi.w	#255,d1					; make d1 word value
01:00000128 E941            	   348: 	asl.w		#4,d1						; align to memory
01:0000012A 4A301001        	   349: 	tst.b		1(a0,d1.w)			; read (test) value for zero
01:0000012E 4CDF0102        	   350: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000132 4E75            	   351: 	rts
                            	   352: 
                            	   353: ; -----------------------------------------------------------------------------
                            	   354: ; Parameters:
                            	   355: ;		d1 semaphore number
                            	   356: ; -----------------------------------------------------------------------------
                            	   357: 
                            	   358: LockSemaphore:
                            	   359: .0001:
01:00000134 61E4            	   360: 	bsr			DecrementSemaphore
01:00000136 67FC            	   361: 	beq.s		.0001
01:00000138 4E75            	   362: 	rts
                            	   363: 	
                            	   364: ; -----------------------------------------------------------------------------
                            	   365: ; Test a semaphore to see if it is non-zero.
                            	   366: ;
                            	   367: ; Parameters:
                            	   368: ;		d1 semaphore number
                            	   369: ; -----------------------------------------------------------------------------
                            	   370: 
                            	   371: UnlockSemaphore:
01:0000013A 48E74080        	   372: 	movem.l	d1/a0,-(a7)			; save registers
01:0000013E 41F9FD050000    	   373: 	lea			semamem,a0			; point to semaphore memory
01:00000144 024100FF        	   374: 	andi.w	#255,d1					; make d1 word value
01:00000148 E941            	   375: 	asl.w		#4,d1						; align to memory
01:0000014A 06414000        	   376: 	addi.w	#$4000,d1				; point to read / write memory
01:0000014E 11BC00011000    	   377: 	move.b	#1,(a0,d1.w)		; write one to unlock
01:00000154 4CDF0102        	   378: 	movem.l	(a7)+,a0/d1			; restore regs
01:00000158 4E75            	   379: 	rts
                            	   380: 
                            	   381: ; -----------------------------------------------------------------------------
                            	   382: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   383: ; -----------------------------------------------------------------------------
                            	   384: 
                            	   385: Delay3s:
01:0000015A 203C002DC6C0    	   386: 	move.l	#3000000,d0		; this should take a few seconds to loop
01:00000160 41F9FD0FFF00    	   387: 	lea			leds,a0				; a0 = address of LED output register
01:00000166 6002            	   388: 	bra			dly3s1				; branch to the loop
                            	   389: dly3s2:	
01:00000168 4840            	   390: 	swap		d0						; loop is larger than 16-bits
                            	   391: dly3s1:
01:0000016A 2200            	   392: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
01:0000016C E199            	   393: 	rol.l		#8,d1					; could use swap here, but lets test rol
01:0000016E E199            	   394: 	rol.l		#8,d1
01:00000170 1081            	   395: 	move.b	d1,(a0)				; set the LEDs
01:00000172 51C8FFF6        	   396: 	dbra		d0,dly3s1			; decrement and branch back
01:00000176 4840            	   397: 	swap		d0
01:00000178 51C8FFEE        	   398: 	dbra		d0,dly3s2
01:0000017C 4E75            	   399: 	rts
                            	   400: 
                            	   401: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: 	code												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    79: *	move.l	a0,6*4
                            	    80: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    81: *	move.l	a0,7*4
                            	    82: 
                            	    83: cpu_test:
01:0000017E 61000108        	    84: 	bsr	op_ORI_TO_CCR
01:00000182 61000126        	    85: 	bsr	op_ORI_TO_SR
01:00000186 61000148        	    86: 	bsr	op_EORI_TO_CCR
01:0000018A 6100016A        	    87: 	bsr	op_EORI_TO_SR
01:0000018E 61000190        	    88: 	bsr	op_ANDI_TO_CCR
01:00000192 610001B2        	    89: 	bsr	op_ANDI_TO_SR
01:00000196 610001D8        	    90: 	bsr	op_BTST
01:0000019A 6100057E        	    91: 	bsr	op_BCHG
01:0000019E 610008E2        	    92: 	bsr	op_BCLR
01:000001A2 61000C2C        	    93: 	bsr	op_BSET
01:000001A6 61000F70        	    94: 	bsr op_MOVEP
01:000001AA 61000FF8        	    95: 	bsr op_BOOL_I
01:000001AE 610011DC        	    96: 	bsr op_CMP_I
01:000001B2 610013C0        	    97: 	bsr op_ADD_I
01:000001B6 61001542        	    98: 	bsr op_SUB_I
01:000001BA 610016C4        	    99: 	bsr op_MOVE
01:000001BE 610018CC        	   100: 	bsr op_MOVE_xxx_FLAGS
01:000001C2 61001ABC        	   101: 	bsr op_EXT
01:000001C6 61001AE4        	   102: 	bsr op_SWAP
01:000001CA 61001AF6        	   103: 	bsr op_LEAPEA
01:000001CE 61001B9E        	   104: 	bsr op_TAS
01:000001D2 61001BC0        	   105: 	bsr op_TST
01:000001D6 61001BFA        	   106: 	bsr op_LINKS
01:000001DA 61001C14        	   107: 	bsr op_MOVE_USP
01:000001DE 61001C20        	   108: 	bsr op_CHK
01:000001E2 61001C56        	   109: 	bsr op_NEGS
01:000001E6 61001FE0        	   110: 	bsr op_MOVEM
                            	   111: ** fails
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
01:000001EA 6100257C        	   115: 	bsr op_TRAPV
01:000001EE 61002594        	   116: 	bsr op_RTR
01:000001F2 61001162        	   117: 	bsr op_BSR
01:000001F6 610025AE        	   118: 	bsr op_BCC
01:000001FA 6100262A        	   119: 	bsr op_DBCC
01:000001FE 6100264C        	   120: 	bsr op_SCC
01:00000202 61002670        	   121: 	bsr op_ADDQ
01:00000206 61002726        	   122: 	bsr op_SUBQ
01:0000020A 610027DC        	   123: 	bsr op_MOVEQ
                            	   124: *** fails
01:0000020E 610027F4        	   125: 	bsr op_DIVU
01:00000212 61002842        	   126: 	bsr op_DIVS
01:00000216 61002890        	   127: 	bsr op_OR
01:0000021A 61002976        	   128: 	bsr op_AND
01:0000021E 61002A5C        	   129: 	bsr op_EOR
01:00000222 61002ACE        	   130: 	bsr op_CMP
01:00000226 61002B40        	   131: 	bsr op_CMPA
01:0000022A 61002BA2        	   132: 	bsr op_CMPM
01:0000022E 61002C44        	   133: 	bsr op_ADD
01:00000232 61002D2A        	   134: 	bsr op_SUB
01:00000236 61002E10        	   135: 	bsr op_ADDA
01:0000023A 61002E58        	   136: 	bsr op_SUBA
01:0000023E 61002EA0        	   137: 	bsr op_ADDX	
01:00000242 61002FAC        	   138: 	bsr op_SUBX
01:00000246 610030B8        	   139: 	bsr op_MULU
01:0000024A 61003100        	   140: 	bsr op_MULS
01:0000024E 61003148        	   141: 	bsr op_EXG
01:00000252 610031B2        	   142: 	bsr op_ROx
01:00000256 610033E4        	   143: 	bsr op_ROXx
01:0000025A 61003616        	   144: 	bsr op_SHIFTS
01:0000025E 61003854        	   145: 	bsr op_SHIFTS2
                            	   146: 
01:00000262 4E75            	   147: 	rts
                            	   148: 	bra ALL_DONE
                            	   149: 
                            	   150: * Loop here when all tests pass
                            	   151: *
                            	   152: 
01:00000264 60FE            	   153: ALL_DONE: bra.s ALL_DONE
                            	   154: 
01:00000266 263C33333333    	   155: BSR_FAR1:       move.l #$33333333,d3
01:0000026C 4E75            	   156:                 rts
                            	   157: 
                            	   158: ;	moveq		#-1,d0
                            	   159: ;	move.l	d0,$FD0FFF00
                            	   160: ;do_nothing:
                            	   161: ;	bra			*		
                            	   162: 
                            	   163: 
                            	   164: * Exception Vector = 6   CHK Instruction
                            	   165: *
                            	   166: 	align	4
                            	   167: EXCEPTION_6:
01:00000270 2C3CEEEE0006    	   168: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
01:00000276 4E73            	   169: 	rte
                            	   170: 
                            	   171: * Exception Vector = 7   TRAPV Instruction
                            	   172: *
                            	   173: 	align	4
                            	   174: EXCEPTION_7:
01:00000280 203C12345678    	   175: 	move.l #$12345678,d0      * Set d6 to the exception vector
01:00000286 4E73            	   176: 	rte
                            	   177: 
                            	   178: ;-----------------------------------------------------------
                            	   179: ;-----------------------------------------------------------
                            	   180: ; OPCODE : ORI_TO_CCR
                            	   181: ;-----------------------------------------------------------
                            	   182: ;-----------------------------------------------------------
                            	   183: op_ORI_TO_CCR:
                            	   184: 
01:00000288 003C00FF        	   185:     ori.b #$FF,CCR
01:0000028C 6AFE            	   186:     bpl.s *                   ; branch if Z clear
01:0000028E 66FE            	   187:     bne.s *                   ; branch if N clear
01:00000290 68FE            	   188:     bvc.s *                   ; branch if V clear
01:00000292 64FE            	   189:     bcc.s *                   ; branch if C clear
                            	   190: 
01:00000294 44FC0000        	   191:     move #$00,CCR
01:00000298 003C0000        	   192:     ori.b #$00,CCR
01:0000029C 67FE            	   193:     beq.s *                   ; branch if Z set
01:0000029E 6BFE            	   194:     bmi.s *                   ; branch if N set
01:000002A0 69FE            	   195:     bvs.s *                   ; branch if V set
01:000002A2 65FE            	   196:     bcs.s *                   ; branch if C set
                            	   197: 
01:000002A4 46FC2700        	   198:     move.w #$2700,SR          ; Put flags back to initial value
                            	   199: 
01:000002A8 4E75            	   200:     rts
                            	   201: 
                            	   202: ;-----------------------------------------------------------
                            	   203: ;-----------------------------------------------------------
                            	   204: ; OPCODE : ORI_TO_SR
                            	   205: ;-----------------------------------------------------------
                            	   206: ;-----------------------------------------------------------
                            	   207: 
                            	   208: op_ORI_TO_SR:
                            	   209: 
01:000002AA 00BCFF002FFF    	   210:     ori.l #$FF002FFF,SR
01:000002B0 6AFE            	   211:     bpl.s *                   * branch if Z clear
01:000002B2 66FE            	   212:     bne.s *                   * branch if N clear
01:000002B4 68FE            	   213:     bvc.s *                   * branch if V clear
01:000002B6 64FE            	   214:     bcc.s *                   * branch if C clear
                            	   215: 
01:000002B8 46FC2000        	   216:     move.w #$2000,SR
01:000002BC 00BC00000000    	   217:     ori.l #$0000,SR
01:000002C2 67FE            	   218:     beq.s *                   * branch if Z set
01:000002C4 6BFE            	   219:     bmi.s *                   * branch if N set
01:000002C6 69FE            	   220:     bvs.s *                   * branch if V set
01:000002C8 65FE            	   221:     bcs.s *                   * branch if C set
                            	   222: 
01:000002CA 46FC2700        	   223:     move.w #$2700,sr         * Put flags back to initial value
                            	   224: 
01:000002CE 4E75            	   225:     rts
                            	   226: ; 
                            	   227: ;-----------------------------------------------------------
                            	   228: ;-----------------------------------------------------------
                            	   229: ; OPCODE : EORI_TO_CCR
                            	   230: ;-----------------------------------------------------------
                            	   231: ;-----------------------------------------------------------
                            	   232: op_EORI_TO_CCR:
                            	   233: 
01:000002D0 44FC0000        	   234:     move #$00,CCR
01:000002D4 0A3C00FF        	   235:     eori.b #$FF,CCR
01:000002D8 6AFE            	   236:     bpl.s *                   ; branch if Z clear
01:000002DA 66FE            	   237:     bne.s *                   ; branch if N clear
01:000002DC 68FE            	   238:     bvc.s *                   ; branch if V clear
01:000002DE 64FE            	   239:     bcc.s *                   ; branch if C clear
                            	   240: 
01:000002E0 44FC0000        	   241:     move #$00,CCR
01:000002E4 0A3C0000        	   242:     eori.b #$00,CCR
01:000002E8 67FE            	   243:     beq.s *                   ; branch if Z set
01:000002EA 6BFE            	   244:     bmi.s *                   ; branch if N set
01:000002EC 69FE            	   245:     bvs.s *                   ; branch if V set
01:000002EE 65FE            	   246:     bcs.s *                   ; branch if C set
                            	   247: 
01:000002F0 46FC2700        	   248:     move.w #$2700,sr           ; Put flags back to initial value
                            	   249: 
01:000002F4 4E75            	   250:     rts
                            	   251: 
                            	   252: 
                            	   253: 
                            	   254: *-----------------------------------------------------------
                            	   255: *-----------------------------------------------------------
                            	   256: * OPCODE : EORI_TO_SR
                            	   257: *-----------------------------------------------------------
                            	   258: *-----------------------------------------------------------
                            	   259: op_EORI_TO_SR:
                            	   260: 
01:000002F6 46FC2000        	   261:     move.w #$2000,SR
01:000002FA 0ABC00000FFF    	   262:     eori.l #$0FFF,SR
01:00000300 6AFE            	   263:     bpl.s *                   * branch if Z clear
01:00000302 66FE            	   264:     bne.s *                   * branch if N clear
01:00000304 68FE            	   265:     bvc.s *                   * branch if V clear
01:00000306 64FE            	   266:     bcc.s *                   * branch if C clear
                            	   267: 
01:00000308 46FC2000        	   268:     move.w #$2000,SR
01:0000030C 0ABC00000000    	   269:     eori.l #$0000,SR
01:00000312 67FE            	   270:     beq.s *                   * branch if Z set
01:00000314 6BFE            	   271:     bmi.s *                   * branch if N set
01:00000316 69FE            	   272:     bvs.s *                   * branch if V set
01:00000318 65FE            	   273:     bcs.s *                   * branch if C set
                            	   274: 
01:0000031A 46FC2700        	   275:     move.w #$2700,sr          * Put flags back to initial value
                            	   276: 
01:0000031E 4E75            	   277:     rts
                            	   278: 
                            	   279: 
                            	   280: 
                            	   281: *-----------------------------------------------------------
                            	   282: *-----------------------------------------------------------
                            	   283: * OPCODE : ANDI_TO_CCR
                            	   284: *-----------------------------------------------------------
                            	   285: *-----------------------------------------------------------
                            	   286: op_ANDI_TO_CCR:
                            	   287: 
01:00000320 44FC00FF        	   288:     move #$FF,CCR
01:00000324 023C00FF        	   289:     andi.b #$FF,CCR
01:00000328 6AFE            	   290:     bpl.s *                   * branch if Z clear
01:0000032A 66FE            	   291:     bne.s *                   * branch if N clear
01:0000032C 68FE            	   292:     bvc.s *                   * branch if V clear
01:0000032E 64FE            	   293:     bcc.s *                   * branch if C clear
                            	   294: 
01:00000330 44FC00FF        	   295:     move #$FF,CCR
01:00000334 023C0000        	   296:     andi.b #$00,CCR
01:00000338 67FE            	   297:     beq.s *                   * branch if Z set
01:0000033A 6BFE            	   298:     bmi.s *                   * branch if N set
01:0000033C 69FE            	   299:     bvs.s *                   * branch if V set
01:0000033E 65FE            	   300:     bcs.s *                   * branch if C set
                            	   301: 
01:00000340 46FC2700        	   302:     move #$2700,SR           * Put flags back to initial value
                            	   303: 
01:00000344 4E75            	   304:     rts
                            	   305: 
                            	   306: 
                            	   307: 
                            	   308: *-----------------------------------------------------------
                            	   309: *-----------------------------------------------------------
                            	   310: * OPCODE : ANDI_TO_SR
                            	   311: *-----------------------------------------------------------
                            	   312: *-----------------------------------------------------------
                            	   313: op_ANDI_TO_SR:
01:00000346 46FC20FF        	   314:     move.w #$20FF,SR
01:0000034A 02BCFFFFFFFF    	   315:     andi.l #$FFFFFFFF,SR
01:00000350 6AFE            	   316:     bpl.s *                   * branch if Z clear
01:00000352 66FE            	   317:     bne.s *                   * branch if N clear
01:00000354 68FE            	   318:     bvc.s *                   * branch if V clear
01:00000356 64FE            	   319:     bcc.s *                   * branch if C clear
                            	   320: 
01:00000358 46FC20FF        	   321:     move.w #$20FF,SR
01:0000035C 02BCFFFFFF00    	   322:     andi.l #$FFFFFF00,SR
01:00000362 67FE            	   323:     beq.s *                   * branch if Z set
01:00000364 6BFE            	   324:     bmi.s *                   * branch if N set
01:00000366 69FE            	   325:     bvs.s *                   * branch if V set
01:00000368 65FE            	   326:     bcs.s *                   * branch if C set
                            	   327: 
01:0000036A 46FC2700        	   328:     move.w #$2700,sr           * Put flags back to initial value
                            	   329: 
01:0000036E 4E75            	   330:     rts
                            	   331: 
                            	   332: 
                            	   333: *-----------------------------------------------------------
                            	   334: *-----------------------------------------------------------
                            	   335: * OPCODE : BTST
                            	   336: *-----------------------------------------------------------
                            	   337: *-----------------------------------------------------------
                            	   338: op_BTST:
                            	   339: 
                            	   340: *  Bit Number.s Static
                            	   341: 
                            	   342: *             EA = Dn  - LONG only
01:00000370 203C80000001    	   343:             move.l #$80000001,d0      * populate test data
01:00000376 08000000        	   344:             btst.l #0,d0
01:0000037A 67FE            	   345:             beq.s *               * branch if Z set
01:0000037C 08000001        	   346:             btst.l #1,d0              *
01:00000380 66FE            	   347:             bne.s *               * branch if Z clear
01:00000382 0800001F        	   348:             btst.l #31,d0             *
01:00000386 67FE            	   349:             beq.s *               * branch if Z set
                            	   350: 
                            	   351: 
                            	   352: *             EA = (An)  - BYTE only
01:00000388 307C0100        	   353:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000038C 10BC0081        	   354:             move.b #$81,(a0)          * populate test data
01:00000390 1210            	   355:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000392 08100000        	   356:             btst.b #0,(a0)
01:00000396 67FE            	   357:             beq.s *               * branch if Z set
01:00000398 08100001        	   358:             btst.b #1,(a0)            *
01:0000039C 66FE            	   359:             bne.s *               * branch if Z clear
01:0000039E 08100007        	   360:             btst.b #7,(a0)            *
01:000003A2 67FE            	   361:             beq.s *               * branch if Z set
                            	   362: 
                            	   363: 
                            	   364: *             EA = (An)+  - BYTE only
01:000003A4 307C0100        	   365:             move.l #$00000100,a0      * point to memory to address 0x100
01:000003A8 10FC0001        	   366:             move.b #$01,(a0)+         * populate test data
01:000003AC 10FC00FC        	   367:             move.b #$FC,(a0)+         * populate test data
01:000003B0 10FC0080        	   368:             move.b #$80,(a0)+         * populate test data
01:000003B4 307C0100        	   369:             move.l #$00000100,a0      * point to memory to address 0x100
01:000003B8 08180000        	   370:             btst.b #0,(a0)+
01:000003BC 67FE            	   371:             beq.s *               * branch if Z set
01:000003BE 08180001        	   372:             btst.b #1,(a0)+           *
01:000003C2 66FE            	   373:             bne.s *               * branch if Z clear
01:000003C4 08180007        	   374:             btst.b #7,(a0)+           *
01:000003C8 67FE            	   375:             beq.s *               * branch if Z set
                            	   376: 
                            	   377: 
                            	   378: *             EA = -(An)  - BYTE only
01:000003CA 307C0100        	   379:             move.l #$00000100,a0      * point to memory to address
01:000003CE 10FC0080        	   380:             move.b #$80,(a0)+         * populate test data
01:000003D2 10FC00FC        	   381:             move.b #$FC,(a0)+         * populate test data
01:000003D6 10FC0001        	   382:             move.b #$01,(a0)+         * populate test data
01:000003DA 307C0103        	   383:             move.l #$00000103,a0      * point to memory to address
01:000003DE 08200000        	   384:             btst.b #0,-(a0)
01:000003E2 67FE            	   385:             beq.s *               * branch if Z set
01:000003E4 08200001        	   386:             btst.b #1,-(a0)           *
01:000003E8 66FE            	   387:             bne.s *               * branch if Z clear
01:000003EA 08200007        	   388:             btst.b #7,-(a0)           *
01:000003EE 67FE            	   389:             beq.s *               * branch if Z set
                            	   390: 
                            	   391: 
                            	   392: *             EA = n(An)  - BYTE only
01:000003F0 307C0100        	   393:             move.l #$00000100,a0      * point to memory to address
01:000003F4 10FC0001        	   394:             move.b #$01,(a0)+         * populate test data
01:000003F8 10FC00FC        	   395:             move.b #$FC,(a0)+         * populate test data
01:000003FC 10FC0080        	   396:             move.b #$80,(a0)+         * populate test data
01:00000400 307C0100        	   397:             move.l #$00000100,a0      * point to memory to address
01:00000404 08100000        	   398:             btst.b #0,0(a0)
01:00000408 67FE            	   399:             beq.s *               * branch if Z set
01:0000040A 082800010001    	   400:             btst.b #1,1(a0)           *
01:00000410 66FE            	   401:             bne.s *               * branch if Z clear
01:00000412 082800070002    	   402:             btst.b #7,2(a0)           *
01:00000418 67FE            	   403:             beq.s *               * branch if Z set
                            	   404: 
                            	   405: 
                            	   406: *             EA = n(An,R.W)  - BYTE only
01:0000041A 307C0100        	   407:             move.l #$00000100,a0      * point to memory to address
01:0000041E 93C9            	   408:             move.l #$00000000,a1      * point to memory to address
01:00000420 347C0001        	   409:             move.l #$00000001,a2      * point to memory to address
01:00000424 7000            	   410:             moveq  #$00000000,d0      * point to memory to address
01:00000426 7201            	   411:             moveq  #$00000001,d1      * point to memory to address
01:00000428 083000000000    	   412:             btst.b #0,0(a0,d0.w)
01:0000042E 67FE            	   413:             beq.s *               * branch if Z set
01:00000430 083000011000    	   414:             btst.b #1,0(a0,d1.w)      *
01:00000436 66FE            	   415:             bne.s *               * branch if Z clear
01:00000438 083000071001    	   416:             btst.b #7,1(a0,d1.w)      *
01:0000043E 67FE            	   417:             beq.s *               * branch if Z set
                            	   418: *             EA = n(An,R.L)  - BYTE only
01:00000440 083000000800    	   419:             btst.b #0,0(a0,d0.l)
01:00000446 67FE            	   420:             beq.s *               * branch if Z set
01:00000448 083000011800    	   421:             btst.b #1,0(a0,d1.l)      *
01:0000044E 66FE            	   422:             bne.s *               * branch if Z clear
01:00000450 083000071801    	   423:             btst.b #7,1(a0,d1.l)      *
01:00000456 67FE            	   424:             beq.s *               * branch if Z set
                            	   425: *             EA = n(An,A.W)  - BYTE only
01:00000458 083000009000    	   426:             btst.b #0,0(a0,a1.w)
01:0000045E 67FE            	   427:             beq.s *               * branch if Z set
01:00000460 08300001A000    	   428:             btst.b #1,0(a0,a2.w)      *
01:00000466 66FE            	   429:             bne.s *               * branch if Z clear
01:00000468 08300007A001    	   430:             btst.b #7,1(a0,a2.w)      *
01:0000046E 67FE            	   431:             beq.s *               * branch if Z set
                            	   432: *             EA = n(An,A.L)  - BYTE only
01:00000470 083000009800    	   433:             btst.b #0,0(a0,a1.l)
01:00000476 67FE            	   434:             beq.s *               * branch if Z set
01:00000478 08300001A800    	   435:             btst.b #1,0(a0,a2.l)      *
01:0000047E 66FE            	   436:             bne.s *               * branch if Z clear
01:00000480 08300007A801    	   437:             btst.b #7,1(a0,a2.l)      *
01:00000486 67FE            	   438:             beq.s *               * branch if Z set
                            	   439: 
                            	   440: 
                            	   441: *             EA = x.W  - BYTE only
01:00000488 083800000100    	   442:             btst.b #0,$0100
01:0000048E 67FE            	   443:             beq.s *               * branch if Z set
01:00000490 083800010101    	   444:             btst.b #1,$0101           *
01:00000496 66FE            	   445:             bne.s *               * branch if Z clear
01:00000498 083800070102    	   446:             btst.b #7,$0102           *
01:0000049E 67FE            	   447:             beq.s *               * branch if Z set
                            	   448: 
                            	   449: 
                            	   450: *             EA = x.L  - BYTE only
01:000004A0 207C0000F100    	   451:             move.l #$F100,a0      * point to memory to address 0x100
01:000004A6 10FC0001        	   452:             move.b #$01,(a0)+         * populate test data
01:000004AA 10FC00FC        	   453:             move.b #$FC,(a0)+         * populate test data
01:000004AE 10FC0080        	   454:             move.b #$80,(a0)+         * populate test data
01:000004B2 083900000000F100	   455:             btst.b #0,$F100
01:000004BA 67FE            	   456:             beq.s *               * branch if Z set
01:000004BC 083900010000F101	   457:             btst.b #1,$F101       *
01:000004C4 66FE            	   458:             bne.s *               * branch if Z clear
01:000004C6 083900070000F102	   459:             btst.b #7,$F102       *
01:000004CE 67FE            	   460:             beq.s *               * branch if Z set
                            	   461: 
                            	   462: 
                            	   463: *             EA = x(PC)  - BYTE only
01:000004D0 4BFAFE9E        	   464:             lea op_BTST(pc),a5
01:000004D4 083A0000FE98    	   465:             btst.b #0,op_BTST(pc)
01:000004DA 66FE            	   466:             bne.s *               * branch if Z clear
01:000004DC 083A0003001A    	   467:             btst.b #3,op_BTST0(pc)     *
01:000004E2 67FE            	   468:             beq.s *               * branch if Z set
01:000004E4 083A00060074    	   469:             btst.b #6,op_BTST12(pc)    *
01:000004EA 67FE            	   470:             beq.s *               * branch if Z set
                            	   471: 
                            	   472: 
                            	   473: *             EA = n(PC,R.W)  - BYTE only
01:000004EC 307C0100        	   474:             move.l #$00000100,a0      * point to memory to address
01:000004F0 93C9            	   475:             move.l #$00000000,a1      * point to memory to address
01:000004F2 347C0001        	   476:             move.l #$00000001,a2      * point to memory to address
01:000004F6 7000            	   477:             moveq  #$00000000,d0      * point to memory to address
01:000004F8 7201            	   478:             moveq  #$00000001,d1      * point to memory to address
                            	   479: 
01:000004FA 083B000000FC    	   480: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
01:00000500 66FE            	   481:             bne.s *               * branch if Z clear
                            	   482: 
01:00000502 4BFB1002        	   483:             lea op_BTST1(pc,d1.w),a5
01:00000506 083B000110FC    	   484: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
01:0000050C 67FE            	   485:             beq.s *               * branch if Z set
01:0000050E 083B000710FC    	   486: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
01:00000514 66FE            	   487:             bne.s *               * branch if Z clear
                            	   488: *             EA = n(PC,R.L)  - BYTE only
01:00000516 083B000008FC    	   489: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
01:0000051C 66FE            	   490:             bne.s *               * branch if Z clear
01:0000051E 083B000118FC    	   491: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
01:00000524 67FE            	   492:             beq.s *               * branch if Z set
01:00000526 083B000718FC    	   493: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
01:0000052C 66FE            	   494:             bne.s *               * branch if Z clear
                            	   495: *             EA = n(PC,A.W)  - BYTE only
01:0000052E 083B000090FC    	   496: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
01:00000534 66FE            	   497:             bne.s *               * branch if Z clear
01:00000536 083B0001A0FC    	   498: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
01:0000053C 67FE            	   499:             beq.s *               * branch if Z set
01:0000053E 083B0007A0FC    	   500: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
01:00000544 66FE            	   501:             bne.s *               * branch if Z clear
                            	   502: *             EA = n(PC,A.L)  - BYTE only
01:00000546 083B000098FC    	   503: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
01:0000054C 66FE            	   504:             bne.s *               * branch if Z clear
01:0000054E 083B0001A8FC    	   505: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
01:00000554 67FE            	   506:             beq.s *               * branch if Z set
01:00000556 083B0007A8FC    	   507: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
01:0000055C 66FE            	   508: op_BTST12:  bne.s *               * branch if Z clear
                            	   509: 
                            	   510: 
                            	   511: 
                            	   512: * Bit Number.s Dynamic
                            	   513: 
                            	   514: *             EA = Dn  - LONG only
01:0000055E 203C80000001    	   515:             move.l #$80000001,d0      * populate test data
01:00000564 7A00            	   516:             move.l #0,d5              * populate bit.s number to test
01:00000566 7C01            	   517:             move.l #1,d6              * populate bit.s number to test
01:00000568 7E1F            	   518:             move.l #31,d7              * populate bit.s number to test
                            	   519: 
01:0000056A 0B00            	   520:             btst.l d5,d0
01:0000056C 67FE            	   521:             beq.s *               * branch if Z set
01:0000056E 0D00            	   522:             btst.l d6,d0              *
01:00000570 66FE            	   523:             bne.s *               * branch if Z clear
01:00000572 0F00            	   524:             btst.l d7,d0             *
01:00000574 67FE            	   525:             beq.s *               * branch if Z set
                            	   526: 
                            	   527: 
                            	   528: *             EA = (An)  - BYTE only
01:00000576 7A00            	   529:             move.l #0,d5              * populate bit.s number to test
01:00000578 7C01            	   530:             move.l #1,d6              * populate bit.s number to test
01:0000057A 7E07            	   531:             move.l #7,d7              * populate bit.s number to test
01:0000057C 307C0100        	   532:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000580 10BC0081        	   533:             move.b #$81,(a0)          * populate test data
01:00000584 1210            	   534:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000586 0B10            	   535:             btst.b d5,(a0)
01:00000588 67FE            	   536:             beq.s *               * branch if Z set
01:0000058A 0D10            	   537:             btst.b d6,(a0)            *
01:0000058C 66FE            	   538:             bne.s *               * branch if Z clear
01:0000058E 0F10            	   539:             btst.b d7,(a0)            *
01:00000590 67FE            	   540:             beq.s *               * branch if Z set
                            	   541: 
                            	   542: * ---
                            	   543: 
                            	   544: 
                            	   545: *             EA = (An)+  - BYTE only
01:00000592 307C0100        	   546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000596 10FC0001        	   547:             move.b #$01,(a0)+         * populate test data
01:0000059A 10FC00FC        	   548:             move.b #$FC,(a0)+         * populate test data
01:0000059E 10FC0080        	   549:             move.b #$80,(a0)+         * populate test data
01:000005A2 307C0100        	   550:             move.l #$00000100,a0      * point to memory to address 0x100
01:000005A6 0B18            	   551:             btst.b d5,(a0)+
01:000005A8 67FE            	   552:             beq.s *               * branch if Z set
01:000005AA 0D18            	   553:             btst.b d6,(a0)+           *
01:000005AC 66FE            	   554:             bne.s *               * branch if Z clear
01:000005AE 0F18            	   555:             btst.b d7,(a0)+           *
01:000005B0 67FE            	   556:             beq.s *               * branch if Z set
                            	   557: 
                            	   558: 
                            	   559: *             EA = -(An)  - BYTE only
01:000005B2 307C0100        	   560:             move.l #$00000100,a0      * point to memory to address
01:000005B6 10FC0080        	   561:             move.b #$80,(a0)+         * populate test data
01:000005BA 10FC00FC        	   562:             move.b #$FC,(a0)+         * populate test data
01:000005BE 10FC0001        	   563:             move.b #$01,(a0)+         * populate test data
01:000005C2 307C0103        	   564:             move.l #$00000103,a0      * point to memory to address
01:000005C6 0B20            	   565:             btst.b d5,-(a0)
01:000005C8 67FE            	   566:             beq.s *               * branch if Z set
01:000005CA 0D20            	   567:             btst.b d6,-(a0)           *
01:000005CC 66FE            	   568:             bne.s *               * branch if Z clear
01:000005CE 0F20            	   569:             btst.b d7,-(a0)           *
01:000005D0 67FE            	   570:             beq.s *               * branch if Z set
                            	   571: 
                            	   572: 
                            	   573: *             EA = n(An)  - BYTE only
01:000005D2 307C0100        	   574:             move.l #$00000100,a0      * point to memory to address
01:000005D6 10FC0001        	   575:             move.b #$01,(a0)+         * populate test data
01:000005DA 10FC00FC        	   576:             move.b #$FC,(a0)+         * populate test data
01:000005DE 10FC0080        	   577:             move.b #$80,(a0)+         * populate test data
01:000005E2 307C0100        	   578:             move.l #$00000100,a0      * point to memory to address
01:000005E6 0B10            	   579:             btst.b d5,0(a0)
01:000005E8 67FE            	   580:             beq.s *               * branch if Z set
01:000005EA 0D280001        	   581:             btst.b d6,1(a0)           *
01:000005EE 66FE            	   582:             bne.s *               * branch if Z clear
01:000005F0 0F280002        	   583:             btst.b d7,2(a0)           *
01:000005F4 67FE            	   584:             beq.s *               * branch if Z set
                            	   585: 
                            	   586: 
                            	   587: *             EA = n(An,R.W)  - BYTE only
01:000005F6 307C0100        	   588:             move.l #$00000100,a0      * point to memory to address
01:000005FA 93C9            	   589:             move.l #$00000000,a1      * point to memory to address
01:000005FC 347C0001        	   590:             move.l #$00000001,a2      * point to memory to address
01:00000600 7000            	   591:             moveq  #$00000000,d0      * point to memory to address
01:00000602 7201            	   592:             moveq  #$00000001,d1      * point to memory to address
01:00000604 0B300000        	   593:             btst.b d5,0(a0,d0.w)
01:00000608 67FE            	   594:             beq.s *               * branch if Z set
01:0000060A 0D301000        	   595:             btst.b d6,0(a0,d1.w)      *
01:0000060E 66FE            	   596:             bne.s *               * branch if Z clear
01:00000610 0F301001        	   597:             btst.b d7,1(a0,d1.w)      *
01:00000614 67FE            	   598:             beq.s *               * branch if Z set
                            	   599: *             EA = n(An,R.L)  - BYTE only
01:00000616 0B300800        	   600:             btst.b d5,0(a0,d0.l)
01:0000061A 67FE            	   601:             beq.s *               * branch if Z set
01:0000061C 0D301800        	   602:             btst.b d6,0(a0,d1.l)      *
01:00000620 66FE            	   603:             bne.s *               * branch if Z clear
01:00000622 0F301801        	   604:             btst.b d7,1(a0,d1.l)      *
01:00000626 67FE            	   605:             beq.s *               * branch if Z set
                            	   606: *             EA = n(An,A.W)  - BYTE only
01:00000628 0B309000        	   607:             btst.b d5,0(a0,a1.w)
01:0000062C 67FE            	   608:             beq.s *               * branch if Z set
01:0000062E 0D30A000        	   609:             btst.b d6,0(a0,a2.w)      *
01:00000632 66FE            	   610:             bne.s *               * branch if Z clear
01:00000634 0F30A001        	   611:             btst.b d7,1(a0,a2.w)      *
01:00000638 67FE            	   612:             beq.s *               * branch if Z set
                            	   613: *             EA = n(An,A.L)  - BYTE only
01:0000063A 0B309800        	   614:             btst.b d5,0(a0,a1.l)
01:0000063E 67FE            	   615:             beq.s *               * branch if Z set
01:00000640 0D30A800        	   616:             btst.b d6,0(a0,a2.l)      *
01:00000644 66FE            	   617:             bne.s *               * branch if Z clear
01:00000646 0F30A801        	   618:             btst.b d7,1(a0,a2.l)      *
01:0000064A 67FE            	   619:             beq.s *               * branch if Z set
                            	   620: 
                            	   621: 
                            	   622: *             EA = x.W  - BYTE only
01:0000064C 0B380100        	   623:             btst.b d5,$0100
01:00000650 67FE            	   624:             beq.s *               * branch if Z set
01:00000652 0D380101        	   625:             btst.b d6,$0101           *
01:00000656 66FE            	   626:             bne.s *               * branch if Z clear
01:00000658 0F380102        	   627:             btst.b d7,$0102           *
01:0000065C 67FE            	   628:             beq.s *               * branch if Z set
                            	   629: 
                            	   630: 
                            	   631: *             EA = x.L  - BYTE only
01:0000065E 207C0000F100    	   632:             move.l #$F100,a0      * point to memory to address 0x100
01:00000664 10FC0001        	   633:             move.b #$01,(a0)+         * populate test data
01:00000668 10FC00FC        	   634:             move.b #$FC,(a0)+         * populate test data
01:0000066C 10FC0080        	   635:             move.b #$80,(a0)+         * populate test data
01:00000670 0B390000F100    	   636:             btst.b d5,$F100
01:00000676 67FE            	   637:             beq.s *               * branch if Z set
01:00000678 0D390000F101    	   638:             btst.b d6,$F101       *
01:0000067E 66FE            	   639:             bne.s *               * branch if Z clear
01:00000680 0F390000F102    	   640:             btst.b d7,$F102       *
01:00000686 67FE            	   641:             beq.s *               * branch if Z set
                            	   642: 
                            	   643: 
                            	   644: *             EA = x(PC)  - BYTE only
01:00000688 7C03            	   645:             move.l #3,d6              * populate bit.s number to test
01:0000068A 7E06            	   646:             move.l #6,d7              * populate bit.s number to test
01:0000068C 4BFAFCE2        	   647:             lea op_BTST(pc),a5
01:00000690 0B3AFCDE        	   648:             btst.b d5,op_BTST(pc)
01:00000694 66FE            	   649:             bne.s *               * branch if Z clear
01:00000696 0D3AFE62        	   650:             btst.b d6,op_BTST0(pc)     *
01:0000069A 67FE            	   651:             beq.s *               * branch if Z set
01:0000069C 0F3AFEBE        	   652:             btst.b d7,op_BTST12(pc)    *
01:000006A0 67FE            	   653:             beq.s *               * branch if Z set
                            	   654: 
                            	   655: 
                            	   656: *             EA = n(PC,R.W)  - BYTE only
01:000006A2 307C0100        	   657:             move.l #$00000100,a0      * point to memory to address
01:000006A6 93C9            	   658:             move.l #$00000000,a1      * point to memory to address
01:000006A8 347C0001        	   659:             move.l #$00000001,a2      * point to memory to address
01:000006AC 7000            	   660:             moveq  #$00000000,d0      * point to memory to address
01:000006AE 7201            	   661:             moveq  #$00000001,d1      * point to memory to address
01:000006B0 7C01            	   662:             move.l #1,d6              * populate bit.s number to test
01:000006B2 7E07            	   663:             move.l #7,d7              * populate bit.s number to test
                            	   664: 
01:000006B4 0B3B00FE        	   665: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
01:000006B8 67FE            	   666:             beq.s *               * branch if Z set
01:000006BA 4BFB1002        	   667:             lea op_BTST21(pc,d1.w),a5
01:000006BE 0D3B10FE        	   668: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
01:000006C2 67FE            	   669:             beq.s *               * branch if Z set
01:000006C4 0F3B10FE        	   670: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
01:000006C8 66FE            	   671:             bne.s *               * branch if Z clear
                            	   672: *             EA = n(PC,R.L)  - BYTE only
01:000006CA 0B3B08FE        	   673: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
01:000006CE 67FE            	   674:             beq.s *               * branch if Z set
01:000006D0 0D3B18FE        	   675: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
01:000006D4 67FE            	   676:             beq.s *               * branch if Z set
01:000006D6 0F3B18FE        	   677: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
01:000006DA 66FE            	   678:             bne.s *               * branch if Z clear
                            	   679: *             EA = n(PC,A.W)  - BYTE only
01:000006DC 0B3B90FE        	   680: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
01:000006E0 67FE            	   681:             beq.s *               * branch if Z set
01:000006E2 0D3BA0FE        	   682: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
01:000006E6 67FE            	   683:             beq.s *               * branch if Z set
01:000006E8 0F3BA0FE        	   684: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
01:000006EC 66FE            	   685:             bne.s *               * branch if Z clear
                            	   686: *             EA = n(PC,A.L)  - BYTE only
01:000006EE 0B3B98FE        	   687: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
01:000006F2 67FE            	   688:             beq.s *               * branch if Z set
01:000006F4 0D3BA8FE        	   689: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
01:000006F8 67FE            	   690:             beq.s *               * branch if Z set
01:000006FA 0F3BA8FE        	   691: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
01:000006FE 66FE            	   692: op_BTST32:  bne.s *               * branch if Z clear
                            	   693: 
                            	   694: *             EA = #x  - BYTE only
                            	   695: 
01:00000700 7A00            	   696:             move.l #0,d5              * populate bit.s number to test
01:00000702 7C03            	   697:             move.l #3,d6              * populate bit.s number to test
01:00000704 7E07            	   698:             move.l #7,d7              * populate bit.s number to test
                            	   699: 
01:00000706 0B3C0088        	   700:             btst.b d5,#$88
01:0000070A 66FE            	   701:             bne.s *               * branch if Z clear
01:0000070C 0D3C0088        	   702:             btst.b d6,#$88
01:00000710 67FE            	   703:             beq.s *               * branch if Z set
01:00000712 0F3C0088        	   704:             btst.b d7,#$88
01:00000716 67FE            	   705:             beq.s *               * branch if Z set
                            	   706: 
                            	   707: 
01:00000718 4E75            	   708:     rts
                            	   709: 
                            	   710: *-----------------------------------------------------------
                            	   711: *-----------------------------------------------------------
                            	   712: * OPCODE : BCHG
                            	   713: *-----------------------------------------------------------
                            	   714: *-----------------------------------------------------------
                            	   715: op_BCHG:
                            	   716: 
                            	   717: 
                            	   718: *  Bit Number.s Static
                            	   719: 
                            	   720: *             EA = Dn  - LONG only
01:0000071A 203C80000001    	   721:             move.l #$80000001,d0      * populate test data
01:00000720 08400000        	   722:             bchg.l #0,d0
01:00000724 67FE            	   723:             beq.s *               * branch if Z set
01:00000726 08400001        	   724:             bchg.l #1,d0              *
01:0000072A 66FE            	   725:             bne.s *               * branch if Z clear
01:0000072C 0840001F        	   726:             bchg.l #31,d0             *
01:00000730 67FE            	   727:             beq.s *               * branch if Z set
01:00000732 0C8000000002    	   728:             cmpi.l #$00000002,d0
01:00000738 66FE            	   729:             bne.s *               * branch if Z clear
                            	   730: 
                            	   731: 
                            	   732: *             EA = (An)  - BYTE only
01:0000073A 307C0100        	   733:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000073E 10BC0081        	   734:             move.b #$81,(a0)          * populate test data
01:00000742 1210            	   735:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:00000744 08500000        	   736:             bchg.b #0,(a0)
01:00000748 67FE            	   737:             beq.s *               * branch if Z set
01:0000074A 08500001        	   738:             bchg.b #1,(a0)            *
01:0000074E 66FE            	   739:             bne.s *               * branch if Z clear
01:00000750 08500007        	   740:             bchg.b #7,(a0)            *
01:00000754 67FE            	   741:             beq.s *               * branch if Z set
01:00000756 0C100002        	   742:             cmpi.b #$02,(a0)
01:0000075A 66FE            	   743:             bne.s *               * branch if Z clear
                            	   744: 
                            	   745: *             EA = (An)+  - BYTE only
01:0000075C 307C0100        	   746:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000760 10FC0001        	   747:             move.b #$01,(a0)+         * populate test data
01:00000764 10FC00FC        	   748:             move.b #$FC,(a0)+         * populate test data
01:00000768 10FC0080        	   749:             move.b #$80,(a0)+         * populate test data
01:0000076C 307C0100        	   750:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000770 08580000        	   751:             bchg.b #0,(a0)+
01:00000774 67FE            	   752:             beq.s *               * branch if Z set
01:00000776 08580001        	   753:             bchg.b #1,(a0)+           *
01:0000077A 66FE            	   754:             bne.s *               * branch if Z clear
01:0000077C 08580007        	   755:             bchg.b #7,(a0)+           *
01:00000780 67FE            	   756:             beq.s *               * branch if Z set
01:00000782 307C0100        	   757:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000786 4A18            	   758:             cmpi.b #$00,(a0)+
01:00000788 66FE            	   759:             bne.s *               * branch if Z clear
01:0000078A 0C1800FE        	   760:             cmpi.b #$FE,(a0)+
01:0000078E 66FE            	   761:             bne.s *               * branch if Z clear
01:00000790 4A18            	   762:             cmpi.b #$00,(a0)+
01:00000792 66FE            	   763:             bne.s *               * branch if Z clear
                            	   764: 
                            	   765: *             EA = -(An)  - BYTE only
01:00000794 307C0100        	   766:             move.l #$00000100,a0      * point to memory to address
01:00000798 10FC0080        	   767:             move.b #$80,(a0)+         * populate test data
01:0000079C 10FC00FC        	   768:             move.b #$FC,(a0)+         * populate test data
01:000007A0 10FC0001        	   769:             move.b #$01,(a0)+         * populate test data
01:000007A4 307C0103        	   770:             move.l #$00000103,a0      * point to memory to address
01:000007A8 08600000        	   771:             bchg.b #0,-(a0)
01:000007AC 67FE            	   772:             beq.s *               * branch if Z set
01:000007AE 08600001        	   773:             bchg.b #1,-(a0)           *
01:000007B2 66FE            	   774:             bne.s *               * branch if Z clear
01:000007B4 08600007        	   775:             bchg.b #7,-(a0)           *
01:000007B8 67FE            	   776:             beq.s *               * branch if Z set
01:000007BA 307C0103        	   777:             move.l #$00000103,a0      * point to memory to address 0x100
01:000007BE 4A20            	   778:             cmpi.b #$00,-(a0)
01:000007C0 66FE            	   779:             bne.s *               * branch if Z clear
01:000007C2 0C2000FE        	   780:             cmpi.b #$FE,-(a0)
01:000007C6 66FE            	   781:             bne.s *               * branch if Z clear
01:000007C8 4A20            	   782:             cmpi.b #$00,-(a0)
01:000007CA 66FE            	   783:             bne.s *               * branch if Z clear
                            	   784: 
                            	   785: 
                            	   786: *             EA = n(An)  - BYTE only
01:000007CC 307C0100        	   787:             move.l #$00000100,a0      * point to memory to address
01:000007D0 10FC0001        	   788:             move.b #$01,(a0)+         * populate test data
01:000007D4 10FC00FC        	   789:             move.b #$FC,(a0)+         * populate test data
01:000007D8 10FC0080        	   790:             move.b #$80,(a0)+         * populate test data
01:000007DC 307C0100        	   791:             move.l #$00000100,a0      * point to memory to address
01:000007E0 08500000        	   792:             bchg.b #0,0(a0)
01:000007E4 67FE            	   793:             beq.s *               * branch if Z set
01:000007E6 086800010001    	   794:             bchg.b #1,1(a0)           *
01:000007EC 66FE            	   795:             bne.s *               * branch if Z clear
01:000007EE 086800070002    	   796:             bchg.b #7,2(a0)           *
01:000007F4 67FE            	   797:             beq.s *               * branch if Z set
01:000007F6 307C0100        	   798:             move.l #$00000100,a0      * point to memory to address 0x100
01:000007FA 4A18            	   799:             cmpi.b #$00,(a0)+
01:000007FC 66FE            	   800:             bne.s *               * branch if Z clear
01:000007FE 0C1800FE        	   801:             cmpi.b #$FE,(a0)+
01:00000802 66FE            	   802:             bne.s *               * branch if Z clear
01:00000804 4A18            	   803:             cmpi.b #$00,(a0)+
01:00000806 66FE            	   804:             bne.s *               * branch if Z clear
                            	   805: 
                            	   806: 
                            	   807: *             EA = n(An,D.W)  - BYTE only
01:00000808 307C0100        	   808:             move.l #$00000100,a0      * point to memory to address
01:0000080C 93C9            	   809:             move.l #$00000000,a1      * point to memory to address
01:0000080E 347C0001        	   810:             move.l #$00000001,a2      * point to memory to address
01:00000812 7000            	   811:             moveq  #$00000000,d0      * point to memory to address
01:00000814 7201            	   812:             moveq  #$00000001,d1      * point to memory to address
01:00000816 087000000000    	   813:             bchg.b #0,0(a0,d0.w)
01:0000081C 66FE            	   814:             bne.s *               * branch if Z clear
01:0000081E 087000011000    	   815:             bchg.b #1,0(a0,d1.w)      *
01:00000824 67FE            	   816:             beq.s *               * branch if Z set
01:00000826 087000071001    	   817:             bchg.b #7,1(a0,d1.w)      *
01:0000082C 66FE            	   818:             bne.s *               * branch if Z clear
                            	   819: *             EA = n(An,D.L)  - BYTE only
01:0000082E 087000000800    	   820:             bchg.b #0,0(a0,d0.l)
01:00000834 67FE            	   821:             beq.s *               * branch if Z set
01:00000836 087000011800    	   822:             bchg.b #1,0(a0,d1.l)      *
01:0000083C 66FE            	   823:             bne.s *               * branch if Z clear
01:0000083E 087000071801    	   824:             bchg.b #7,1(a0,d1.l)      *
01:00000844 67FE            	   825:             beq.s *               * branch if Z set
                            	   826: *             EA = n(An,A.W)  - BYTE only
01:00000846 087000009000    	   827:             bchg.b #0,0(a0,a1.w)
01:0000084C 66FE            	   828:             bne.s *               * branch if Z clear
01:0000084E 08700001A000    	   829:             bchg.b #1,0(a0,a2.w)      *
01:00000854 67FE            	   830:             beq.s *               * branch if Z set
01:00000856 08700007A001    	   831:             bchg.b #7,1(a0,a2.w)      *
01:0000085C 66FE            	   832:             bne.s *               * branch if Z clear
                            	   833: *             EA = n(An,A.L)  - BYTE only
01:0000085E 087000009800    	   834:             bchg.b #0,0(a0,a1.l)
01:00000864 67FE            	   835:             beq.s *               * branch if Z set
01:00000866 08700001A800    	   836:             bchg.b #1,0(a0,a2.l)      *
01:0000086C 66FE            	   837:             bne.s *               * branch if Z clear
01:0000086E 08700007A801    	   838:             bchg.b #7,1(a0,a2.l)      *
01:00000874 67FE            	   839:             beq.s *               * branch if Z set
01:00000876 307C0100        	   840:             move.l #$00000100,a0      * point to memory to address 0x100
01:0000087A 4A18            	   841:             cmpi.b #$00,(a0)+
01:0000087C 66FE            	   842:             bne.s *               * branch if Z clear
01:0000087E 0C1800FE        	   843:             cmpi.b #$FE,(a0)+
01:00000882 66FE            	   844:             bne.s *               * branch if Z clear
01:00000884 4A18            	   845:             cmpi.b #$00,(a0)+
01:00000886 66FE            	   846:             bne.s *               * branch if Z clear
                            	   847: 
                            	   848: 
                            	   849: *             EA = x.W  - BYTE only
01:00000888 087800000100    	   850:             bchg.b #0,$0100
01:0000088E 66FE            	   851:             bne.s *               * branch if Z clear
01:00000890 087800010101    	   852:             bchg.b #1,$0101           *
01:00000896 67FE            	   853:             beq.s *               * branch if Z set
01:00000898 087800070102    	   854:             bchg.b #7,$0102           *
01:0000089E 66FE            	   855:             bne.s *               * branch if Z clear
01:000008A0 307C0100        	   856:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008A4 0C180001        	   857:             cmpi.b #$01,(a0)+
01:000008A8 66FE            	   858:             bne.s *               * branch if Z clear
01:000008AA 0C1800FC        	   859:             cmpi.b #$FC,(a0)+
01:000008AE 66FE            	   860:             bne.s *               * branch if Z clear
01:000008B0 0C180080        	   861:             cmpi.b #$80,(a0)+
01:000008B4 66FE            	   862:             bne.s *               * branch if Z clear
                            	   863: 
                            	   864: *             EA = x.L  - BYTE only
01:000008B6 207C0000F100    	   865:             move.l #$F100,a0      * point to memory to address 0x100
01:000008BC 10FC0001        	   866:             move.b #$01,(a0)+         * populate test data
01:000008C0 10FC00FC        	   867:             move.b #$FC,(a0)+         * populate test data
01:000008C4 10FC0080        	   868:             move.b #$80,(a0)+         * populate test data
01:000008C8 087900000000F100	   869:             bchg.b #0,$F100
01:000008D0 67FE            	   870:             beq.s *               * branch if Z set
01:000008D2 087900010000F101	   871:             bchg.b #1,$F101       *
01:000008DA 66FE            	   872:             bne.s *               * branch if Z clear
01:000008DC 087900070000F102	   873:             bchg.b #7,$F102       *
01:000008E4 67FE            	   874:             beq.s *               * branch if Z set
01:000008E6 307C0100        	   875:             move.l #$00000100,a0      * point to memory to address 0x100
01:000008EA 0C180001        	   876:             cmpi.b #$01,(a0)+
01:000008EE 66FE            	   877:             bne.s *               * branch if Z clear
01:000008F0 0C1800FC        	   878:             cmpi.b #$FC,(a0)+
01:000008F4 66FE            	   879:             bne.s *               * branch if Z clear
01:000008F6 0C180080        	   880:             cmpi.b #$80,(a0)+
01:000008FA 66FE            	   881:             bne.s *               * branch if Z clear
                            	   882: 
                            	   883: 
                            	   884: * Bit Number.s Dynamic
                            	   885: 
                            	   886: *             EA = Dn  - LONG only
01:000008FC 203C80000001    	   887:             move.l #$80000001,d0      * populate test data
01:00000902 7A00            	   888:             move.l #0,d5              * populate bit.s number to test
01:00000904 7C01            	   889:             move.l #1,d6              * populate bit.s number to test
01:00000906 7E1F            	   890:             move.l #31,d7              * populate bit.s number to test
                            	   891: 
01:00000908 0B40            	   892:             bchg.l d5,d0
01:0000090A 67FE            	   893:             beq.s *               * branch if Z set
01:0000090C 0D40            	   894:             bchg.l d6,d0              *
01:0000090E 66FE            	   895:             bne.s *               * branch if Z clear
01:00000910 0F40            	   896:             bchg.l d7,d0             *
01:00000912 67FE            	   897:             beq.s *               * branch if Z set
01:00000914 0C8000000002    	   898:             cmpi.l #$00000002,d0
01:0000091A 66FE            	   899:             bne.s *               * branch if Z clear
                            	   900: 
                            	   901: 
                            	   902: *             EA = (An)  - BYTE only
01:0000091C 7A00            	   903:             move.l #0,d5              * populate bit.s number to test
01:0000091E 7C01            	   904:             move.l #1,d6              * populate bit.s number to test
01:00000920 7E07            	   905:             move.l #7,d7              * populate bit.s number to test
01:00000922 307C0100        	   906:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000926 10BC0081        	   907:             move.b #$81,(a0)          * populate test data
01:0000092A 1210            	   908:             move.b (a0),d1            * Check to see if data in memory is 0x81
01:0000092C 0B50            	   909:             bchg.b d5,(a0)
01:0000092E 67FE            	   910:             beq.s *               * branch if Z set
01:00000930 0D50            	   911:             bchg.b d6,(a0)            *
01:00000932 66FE            	   912:             bne.s *               * branch if Z clear
01:00000934 0F50            	   913:             bchg.b d7,(a0)            *
01:00000936 67FE            	   914:             beq.s *               * branch if Z set
01:00000938 0C100002        	   915:             cmpi.b #$02,(a0)
01:0000093C 66FE            	   916:             bne.s *               * branch if Z clear
                            	   917: 
                            	   918: 
                            	   919: *             EA = (An)+  - BYTE only
01:0000093E 307C0100        	   920:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000942 10FC0001        	   921:             move.b #$01,(a0)+         * populate test data
01:00000946 10FC00FC        	   922:             move.b #$FC,(a0)+         * populate test data
01:0000094A 10FC0080        	   923:             move.b #$80,(a0)+         * populate test data
01:0000094E 307C0100        	   924:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000952 0B58            	   925:             bchg.b d5,(a0)+
01:00000954 67FE            	   926:             beq.s *               * branch if Z set
01:00000956 0D58            	   927:             bchg.b d6,(a0)+           *
01:00000958 66FE            	   928:             bne.s *               * branch if Z clear
01:0000095A 0F58            	   929:             bchg.b d7,(a0)+           *
01:0000095C 67FE            	   930:             beq.s *               * branch if Z set
01:0000095E 307C0100        	   931:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000962 4A18            	   932:             cmpi.b #$00,(a0)+
01:00000964 66FE            	   933:             bne.s *               * branch if Z clear
01:00000966 0C1800FE        	   934:             cmpi.b #$FE,(a0)+
01:0000096A 66FE            	   935:             bne.s *               * branch if Z clear
01:0000096C 4A18            	   936:             cmpi.b #$00,(a0)+
01:0000096E 66FE            	   937:             bne.s *               * branch if Z clear
                            	   938: 
                            	   939: *             EA = -(An)  - BYTE only
01:00000970 307C0100        	   940:             move.l #$00000100,a0      * point to memory to address
01:00000974 10FC0080        	   941:             move.b #$80,(a0)+         * populate test data
01:00000978 10FC00FC        	   942:             move.b #$FC,(a0)+         * populate test data
01:0000097C 10FC0001        	   943:             move.b #$01,(a0)+         * populate test data
01:00000980 307C0103        	   944:             move.l #$00000103,a0      * point to memory to address
01:00000984 0B60            	   945:             bchg.b d5,-(a0)
01:00000986 67FE            	   946:             beq.s *               * branch if Z set
01:00000988 0D60            	   947:             bchg.b d6,-(a0)           *
01:0000098A 66FE            	   948:             bne.s *               * branch if Z clear
01:0000098C 0F60            	   949:             bchg.b d7,-(a0)           *
01:0000098E 67FE            	   950:             beq.s *               * branch if Z set
01:00000990 307C0103        	   951:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000994 4A20            	   952:             cmpi.b #$00,-(a0)
01:00000996 66FE            	   953:             bne.s *               * branch if Z clear
01:00000998 0C2000FE        	   954:             cmpi.b #$FE,-(a0)
01:0000099C 66FE            	   955:             bne.s *               * branch if Z clear
01:0000099E 4A20            	   956:             cmpi.b #$00,-(a0)
01:000009A0 66FE            	   957:             bne.s *               * branch if Z clear
                            	   958: 
                            	   959: *             EA = n(An)  - BYTE only
01:000009A2 307C0100        	   960:             move.l #$00000100,a0      * point to memory to address
01:000009A6 10FC0001        	   961:             move.b #$01,(a0)+         * populate test data
01:000009AA 10FC00FC        	   962:             move.b #$FC,(a0)+         * populate test data
01:000009AE 10FC0080        	   963:             move.b #$80,(a0)+         * populate test data
01:000009B2 307C0100        	   964:             move.l #$00000100,a0      * point to memory to address
01:000009B6 0B50            	   965:             bchg.b d5,0(a0)
01:000009B8 67FE            	   966:             beq.s *               * branch if Z set
01:000009BA 0D680001        	   967:             bchg.b d6,1(a0)           *
01:000009BE 66FE            	   968:             bne.s *               * branch if Z clear
01:000009C0 0F680002        	   969:             bchg.b d7,2(a0)           *
01:000009C4 67FE            	   970:             beq.s *               * branch if Z set
01:000009C6 307C0100        	   971:             move.l #$00000100,a0      * point to memory to address 0x100
01:000009CA 4A18            	   972:             cmpi.b #$00,(a0)+
01:000009CC 66FE            	   973:             bne.s *               * branch if Z clear
01:000009CE 0C1800FE        	   974:             cmpi.b #$FE,(a0)+
01:000009D2 66FE            	   975:             bne.s *               * branch if Z clear
01:000009D4 4A18            	   976:             cmpi.b #$00,(a0)+
01:000009D6 66FE            	   977:             bne.s *               * branch if Z clear
                            	   978: 
                            	   979: *             EA = n(An,R.W)  - BYTE only
01:000009D8 307C0100        	   980:             move.l #$00000100,a0      * point to memory to address
01:000009DC 93C9            	   981:             move.l #$00000000,a1      * point to memory to address
01:000009DE 347C0001        	   982:             move.l #$00000001,a2      * point to memory to address
01:000009E2 7000            	   983:             moveq  #$00000000,d0      * point to memory to address
01:000009E4 7201            	   984:             moveq  #$00000001,d1      * point to memory to address
01:000009E6 0B700000        	   985:             bchg.b d5,0(a0,d0.w)
01:000009EA 66FE            	   986:             bne.s *               * branch if Z clear
01:000009EC 0D701000        	   987:             bchg.b d6,0(a0,d1.w)      *
01:000009F0 67FE            	   988:             beq.s *               * branch if Z set
01:000009F2 0F701001        	   989:             bchg.b d7,1(a0,d1.w)      *
01:000009F6 66FE            	   990:             bne.s *               * branch if Z clear
                            	   991: *             EA = n(An,R.L)  - BYTE only
01:000009F8 0B700800        	   992:             bchg.b d5,0(a0,d0.l)
01:000009FC 67FE            	   993:             beq.s *               * branch if Z set
01:000009FE 0D701800        	   994:             bchg.b d6,0(a0,d1.l)      *
01:00000A02 66FE            	   995:             bne.s *               * branch if Z clear
01:00000A04 0F701801        	   996:             bchg.b d7,1(a0,d1.l)      *
01:00000A08 67FE            	   997:             beq.s *               * branch if Z set
                            	   998: *             EA = n(An,A.W)  - BYTE only
01:00000A0A 0B709000        	   999:             bchg.b d5,0(a0,a1.w)
01:00000A0E 66FE            	  1000:             bne.s *               * branch if Z clear
01:00000A10 0D70A000        	  1001:             bchg.b d6,0(a0,a2.w)      *
01:00000A14 67FE            	  1002:             beq.s *               * branch if Z set
01:00000A16 0F70A001        	  1003:             bchg.b d7,1(a0,a2.w)      *
01:00000A1A 66FE            	  1004:             bne.s *               * branch if Z clear
                            	  1005: *             EA = n(An,A.L)  - BYTE only
01:00000A1C 0B709800        	  1006:             bchg.b d5,0(a0,a1.l)
01:00000A20 67FE            	  1007:             beq.s *               * branch if Z set
01:00000A22 0D70A800        	  1008:             bchg.b d6,0(a0,a2.l)      *
01:00000A26 66FE            	  1009:             bne.s *               * branch if Z clear
01:00000A28 0F70A801        	  1010:             bchg.b d7,1(a0,a2.l)      *
01:00000A2C 67FE            	  1011:             beq.s *               * branch if Z set
01:00000A2E 4A18            	  1012:             cmpi.b #$00,(a0)+
01:00000A30 66FE            	  1013:             bne.s *               * branch if Z clear
                            	  1014: 
                            	  1015: *             EA = x.W  - BYTE only
01:00000A32 0B780100        	  1016:             bchg.b d5,$0100
01:00000A36 66FE            	  1017:             bne.s *               * branch if Z clear
01:00000A38 0D780101        	  1018:             bchg.b d6,$0101           *
01:00000A3C 67FE            	  1019:             beq.s *               * branch if Z set
01:00000A3E 0F780102        	  1020:             bchg.b d7,$0102           *
01:00000A42 66FE            	  1021:             bne.s *               * branch if Z clear
01:00000A44 0C1800FC        	  1022:             cmpi.b #$FC,(a0)+
01:00000A48 66FE            	  1023:             bne.s *               * branch if Z clear
                            	  1024: 
                            	  1025: *             EA = x.L  - BYTE only
01:00000A4A 207C0000F100    	  1026:             move.l #$F100,a0      * point to memory to address 0x100
01:00000A50 10FC0001        	  1027:             move.b #$01,(a0)+         * populate test data
01:00000A54 10FC00FC        	  1028:             move.b #$FC,(a0)+         * populate test data
01:00000A58 10FC0080        	  1029:             move.b #$80,(a0)+         * populate test data
01:00000A5C 0B790000F100    	  1030:             bchg.b d5,$F100
01:00000A62 67FE            	  1031:             beq.s *               * branch if Z set
01:00000A64 0D790000F101    	  1032:             bchg.b d6,$F101       *
01:00000A6A 66FE            	  1033:             bne.s *               * branch if Z clear
01:00000A6C 0F790000F102    	  1034:             bchg.b d7,$F102       *
01:00000A72 67FE            	  1035:             beq.s *               * branch if Z set
01:00000A74 207C0000F101    	  1036:             move.l #$F101,a0      * point to memory to address 0x100
01:00000A7A 0C1000FE        	  1037:             cmpi.b #$FE,(a0)
01:00000A7E 66FE            	  1038:             bne.s *               * branch if Z clear
                            	  1039: 
                            	  1040: 
01:00000A80 4E75            	  1041:     rts
                            	  1042: 
                            	  1043: *-----------------------------------------------------------
                            	  1044: *-----------------------------------------------------------
                            	  1045: * OPCODE : BCLR
                            	  1046: *-----------------------------------------------------------
                            	  1047: *-----------------------------------------------------------
                            	  1048: op_BCLR:
                            	  1049: 
                            	  1050: 
                            	  1051: *  Bit Number.s Static
                            	  1052: 
                            	  1053: *             EA = Dn  - LONG only
01:00000A82 203CFF0000FF    	  1054:             move.l #$FF0000FF,d0      * populate test data
01:00000A88 08800000        	  1055:             bclr.l #0,d0
01:00000A8C 67FE            	  1056:             beq.s *               * branch if Z set
01:00000A8E 08800001        	  1057:             bclr.l #1,d0              *
01:00000A92 67FE            	  1058:             beq.s *               * branch if Z set
01:00000A94 0880000F        	  1059:             bclr.l #15,d0             *
01:00000A98 66FE            	  1060:             bne.s *               * branch if Z clear
01:00000A9A 0880001F        	  1061:             bclr.l #31,d0             *
01:00000A9E 67FE            	  1062:             beq.s *               * branch if Z set
01:00000AA0 0C807F0000FC    	  1063:             cmpi.l #$7F0000FC,d0
01:00000AA6 66FE            	  1064:             bne.s *               * branch if Z clear
                            	  1065: 
                            	  1066: 
                            	  1067: *             EA = (An)  - BYTE only
01:00000AA8 307C0100        	  1068:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AAC 10BC000F        	  1069:             move.b #$0F,(a0)          * populate test data
01:00000AB0 08900000        	  1070:             bclr.b #0,(a0)
01:00000AB4 67FE            	  1071:             beq.s *               * branch if Z set
01:00000AB6 08900007        	  1072:             bclr.b #7,(a0)            *
01:00000ABA 66FE            	  1073:             bne.s *               * branch if Z clear
01:00000ABC 0C10000E        	  1074:             cmpi.b #$0E,(a0)
01:00000AC0 66FE            	  1075:             bne.s *               * branch if Z clear
                            	  1076: 
                            	  1077: *             EA = (An)+  - BYTE only
01:00000AC2 307C0100        	  1078:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AC6 10FC0001        	  1079:             move.b #$01,(a0)+         * populate test data
01:00000ACA 4218            	  1080:             move.b #$00,(a0)+         * populate test data
01:00000ACC 307C0100        	  1081:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AD0 08980000        	  1082:             bclr.b #0,(a0)+
01:00000AD4 67FE            	  1083:             beq.s *               * branch if Z set
01:00000AD6 08980001        	  1084:             bclr.b #1,(a0)+           *
01:00000ADA 66FE            	  1085:             bne.s *               * branch if Z clear
01:00000ADC 307C0100        	  1086:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000AE0 4A18            	  1087:             cmpi.b #$00,(a0)+
01:00000AE2 66FE            	  1088:             bne.s *               * branch if Z clear
01:00000AE4 4A18            	  1089:             cmpi.b #$00,(a0)+
01:00000AE6 66FE            	  1090:             bne.s *               * branch if Z clear
                            	  1091: 
                            	  1092: 
                            	  1093: *             EA = -(An)  - BYTE only
01:00000AE8 307C0100        	  1094:             move.l #$00000100,a0      * point to memory to address
01:00000AEC 10FC0001        	  1095:             move.b #$01,(a0)+         * populate test data
01:00000AF0 10FC0080        	  1096:             move.b #$80,(a0)+         * populate test data
01:00000AF4 08A00007        	  1097:             bclr.b #7,-(a0)
01:00000AF8 67FE            	  1098:             beq.s *               * branch if Z set
01:00000AFA 08A00000        	  1099:             bclr.b #0,-(a0)           *
01:00000AFE 67FE            	  1100:             beq.s *               * branch if Z set
01:00000B00 307C0102        	  1101:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000B04 4A20            	  1102:             cmpi.b #$00,-(a0)
01:00000B06 66FE            	  1103:             bne.s *               * branch if Z clear
01:00000B08 4A20            	  1104:             cmpi.b #$00,-(a0)
01:00000B0A 66FE            	  1105:             bne.s *               * branch if Z clear
                            	  1106: 
                            	  1107: 
                            	  1108: *             EA = n(An)  - BYTE only
01:00000B0C 307C0100        	  1109:             move.l #$00000100,a0      * point to memory to address
01:00000B10 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
01:00000B14 10FC00FF        	  1111:             move.b #$FF,(a0)+         * populate test data
01:00000B18 307C0100        	  1112:             move.l #$00000100,a0      * point to memory to address
01:00000B1C 08900000        	  1113:             bclr.b #0,0(a0)
01:00000B20 67FE            	  1114:             beq.s *               * branch if Z set
01:00000B22 08A800040001    	  1115:             bclr.b #4,1(a0)           *
01:00000B28 67FE            	  1116:             beq.s *               * branch if Z set
01:00000B2A 307C0100        	  1117:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000B2E 0C1800FE        	  1118:             cmpi.b #$FE,(a0)+
01:00000B32 66FE            	  1119:             bne.s *               * branch if Z clear
01:00000B34 0C1800EF        	  1120:             cmpi.b #$EF,(a0)+
01:00000B38 66FE            	  1121:             bne.s *               * branch if Z clear
                            	  1122: 
                            	  1123: 
                            	  1124: *             EA = n(An,D.W)  - BYTE only
01:00000B3A 307C0100        	  1125:             move.l #$00000100,a0      * point to memory to address
01:00000B3E 93C9            	  1126:             move.l #$00000000,a1      * point to memory to address
01:00000B40 347C0001        	  1127:             move.l #$00000001,a2      * point to memory to address
01:00000B44 7000            	  1128:             moveq  #$00000000,d0      * point to memory to address
01:00000B46 7201            	  1129:             moveq  #$00000001,d1      * point to memory to address
01:00000B48 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
01:00000B4C 10FC00FF        	  1131:             move.b #$FF,(a0)+         * populate test data
01:00000B50 307C0100        	  1132:             move.l #$00000100,a0      * point to memory to address
01:00000B54 08B000000000    	  1133:             bclr.b #0,0(a0,d0.w)
01:00000B5A 67FE            	  1134:             beq.s *               * branch if Z set
01:00000B5C 08B000011000    	  1135:             bclr.b #1,0(a0,d1.w)      *
01:00000B62 67FE            	  1136:             beq.s *               * branch if Z set
01:00000B64 08B000021001    	  1137:             bclr.b #2,1(a0,d1.w)      *
01:00000B6A 66FE            	  1138:             bne.s *               * branch if Z clear
                            	  1139: *             EA = n(An,D.L)  - BYTE only
01:00000B6C 08B000030800    	  1140:             bclr.b #3,0(a0,d0.l)
01:00000B72 67FE            	  1141:             beq.s *               * branch if Z set
01:00000B74 08B000041800    	  1142:             bclr.b #4,0(a0,d1.l)      *
01:00000B7A 67FE            	  1143:             beq.s *               * branch if Z set
01:00000B7C 08B000051801    	  1144:             bclr.b #5,1(a0,d1.l)      *
01:00000B82 66FE            	  1145:             bne.s *               * branch if Z clear
                            	  1146: *             EA = n(An,A.W)  - BYTE only
01:00000B84 08B000069000    	  1147:             bclr.b #6,0(a0,a1.w)
01:00000B8A 67FE            	  1148:             beq.s *               * branch if Z set
01:00000B8C 08B00001A000    	  1149:             bclr.b #1,0(a0,a2.w)      *
01:00000B92 66FE            	  1150:             bne.s *               * branch if Z clear
01:00000B94 08B00007A001    	  1151:             bclr.b #7,1(a0,a2.w)      *
01:00000B9A 67FE            	  1152:             beq.s *               * branch if Z set
                            	  1153: *             EA = n(An,A.L)  - BYTE only
01:00000B9C 08B000009800    	  1154:             bclr.b #0,0(a0,a1.l)
01:00000BA2 66FE            	  1155:             bne.s *               * branch if Z clear
01:00000BA4 08B00000A800    	  1156:             bclr.b #0,0(a0,a2.l)      *
01:00000BAA 67FE            	  1157:             beq.s *               * branch if Z set
01:00000BAC 08B00001A801    	  1158:             bclr.b #1,1(a0,a2.l)      *
01:00000BB2 66FE            	  1159:             bne.s *               * branch if Z clear
01:00000BB4 307C0100        	  1160:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BB8 0C1800B6        	  1161:             cmpi.b #$B6,(a0)+
01:00000BBC 66FE            	  1162:             bne.s *               * branch if Z clear
01:00000BBE 0C1800EC        	  1163:             cmpi.b #$EC,(a0)+
01:00000BC2 66FE            	  1164:             bne.s *               * branch if Z clear
01:00000BC4 0C180059        	  1165:             cmpi.b #$59,(a0)+
01:00000BC8 67FE            	  1166:             beq.s *               * branch if Z set
                            	  1167: 
                            	  1168: 
                            	  1169: *             EA = x.W  - BYTE only
01:00000BCA 307C0100        	  1170:             move.l #$00000100,a0      * point to memory to address
01:00000BCE 10FC00FF        	  1171:             move.b #$FF,(a0)+         * populate test data
01:00000BD2 08B800000100    	  1172:             bclr.b #0,$0100
01:00000BD8 67FE            	  1173:             beq.s *               * branch if Z set
01:00000BDA 08B800010100    	  1174:             bclr.b #1,$0100           *
01:00000BE0 67FE            	  1175:             beq.s *               * branch if Z set
01:00000BE2 307C0100        	  1176:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000BE6 0C1800FC        	  1177:             cmpi.b #$FC,(a0)+
01:00000BEA 66FE            	  1178:             bne.s *               * branch if Z clear
                            	  1179: 
                            	  1180: 
                            	  1181: *             EA = x.L  - BYTE only
01:00000BEC 207C0000F100    	  1182:             move.l #$F100,a0      * point to memory to address 0x100
01:00000BF2 10BC00FF        	  1183:             move.b #$FF,(a0)          * populate test data
01:00000BF6 08B900000000F100	  1184:             bclr.b #0,$F100
01:00000BFE 67FE            	  1185:             beq.s *               * branch if Z set
01:00000C00 08B900010000F100	  1186:             bclr.b #1,$F100       *
01:00000C08 67FE            	  1187:             beq.s *               * branch if Z set
01:00000C0A 08B900020000F100	  1188:             bclr.b #2,$F100       *
01:00000C12 67FE            	  1189:             beq.s *               * branch if Z set
01:00000C14 207C0000F100    	  1190:             move.l #$F100,a0      * point to memory to address 0x100
01:00000C1A 0C1800F8        	  1191:             cmpi.b #$F8,(a0)+
01:00000C1E 66FE            	  1192:             bne.s *               * branch if Z clear
                            	  1193: 
                            	  1194: 
                            	  1195: * Bit Number.s Dynamic
                            	  1196: 
                            	  1197: *             EA = Dn  - LONG only
01:00000C20 203CFF00FF00    	  1198:             move.l #$FF00FF00,d0      * populate test data
01:00000C26 7A00            	  1199:             move.l #0,d5              * populate bit.s number to test
01:00000C28 7C01            	  1200:             move.l #1,d6              * populate bit.s number to test
01:00000C2A 7E1F            	  1201:             move.l #31,d7              * populate bit.s number to test
                            	  1202: 
01:00000C2C 0B80            	  1203:             bclr.l d5,d0
01:00000C2E 66FE            	  1204:             bne.s *               * branch if Z clear
01:00000C30 0D80            	  1205:             bclr.l d6,d0              *
01:00000C32 66FE            	  1206:             bne.s *               * branch if Z clear
01:00000C34 0F80            	  1207:             bclr.l d7,d0             *
01:00000C36 67FE            	  1208:             beq.s *               * branch if Z set
01:00000C38 0C807F00FF00    	  1209:             cmpi.l #$7F00FF00,d0
01:00000C3E 66FE            	  1210:             bne.s *               * branch if Z clear
                            	  1211: 
                            	  1212: 
                            	  1213: *             EA = (An)  - BYTE only
01:00000C40 7A00            	  1214:             move.l #0,d5              * populate bit.s number to test
01:00000C42 7C01            	  1215:             move.l #1,d6              * populate bit.s number to test
01:00000C44 7E07            	  1216:             move.l #7,d7              * populate bit.s number to test
01:00000C46 307C0100        	  1217:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C4A 10BC0081        	  1218:             move.b #$81,(a0)          * populate test data
01:00000C4E 0B90            	  1219:             bclr.b d5,(a0)
01:00000C50 67FE            	  1220:             beq.s *               * branch if Z set
01:00000C52 0D90            	  1221:             bclr.b d6,(a0)            *
01:00000C54 66FE            	  1222:             bne.s *               * branch if Z clear
01:00000C56 0F90            	  1223:             bclr.b d7,(a0)            *
01:00000C58 67FE            	  1224:             beq.s *               * branch if Z set
01:00000C5A 4A10            	  1225:             cmpi.b #$00,(a0)
01:00000C5C 66FE            	  1226:             bne.s *               * branch if Z clear
                            	  1227: 
                            	  1228: 
                            	  1229: *             EA = (An)+  - BYTE only
01:00000C5E 307C0100        	  1230:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C62 10FC0001        	  1231:             move.b #$01,(a0)+         * populate test data
01:00000C66 10FC00FC        	  1232:             move.b #$FC,(a0)+         * populate test data
01:00000C6A 10FC0080        	  1233:             move.b #$80,(a0)+         * populate test data
01:00000C6E 307C0100        	  1234:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C72 0B98            	  1235:             bclr.b d5,(a0)+
01:00000C74 67FE            	  1236:             beq.s *               * branch if Z set
01:00000C76 0D98            	  1237:             bclr.b d6,(a0)+           *
01:00000C78 66FE            	  1238:             bne.s *               * branch if Z clear
01:00000C7A 0F98            	  1239:             bclr.b d7,(a0)+           *
01:00000C7C 67FE            	  1240:             beq.s *               * branch if Z set
01:00000C7E 307C0100        	  1241:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000C82 4A18            	  1242:             cmpi.b #$00,(a0)+
01:00000C84 66FE            	  1243:             bne.s *               * branch if Z clear
01:00000C86 0C1800FC        	  1244:             cmpi.b #$FC,(a0)+
01:00000C8A 66FE            	  1245:             bne.s *               * branch if Z clear
01:00000C8C 4A18            	  1246:             cmpi.b #$00,(a0)+
01:00000C8E 66FE            	  1247:             bne.s *               * branch if Z clear
                            	  1248: 
                            	  1249: *             EA = -(An)  - BYTE only
01:00000C90 307C0100        	  1250:             move.l #$00000100,a0      * point to memory to address
01:00000C94 10FC0080        	  1251:             move.b #$80,(a0)+         * populate test data
01:00000C98 10FC00FC        	  1252:             move.b #$FC,(a0)+         * populate test data
01:00000C9C 10FC0001        	  1253:             move.b #$01,(a0)+         * populate test data
01:00000CA0 307C0103        	  1254:             move.l #$00000103,a0      * point to memory to address
01:00000CA4 0BA0            	  1255:             bclr.b d5,-(a0)
01:00000CA6 67FE            	  1256:             beq.s *               * branch if Z set
01:00000CA8 0DA0            	  1257:             bclr.b d6,-(a0)           *
01:00000CAA 66FE            	  1258:             bne.s *               * branch if Z clear
01:00000CAC 0FA0            	  1259:             bclr.b d7,-(a0)           *
01:00000CAE 67FE            	  1260:             beq.s *               * branch if Z set
01:00000CB0 307C0103        	  1261:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000CB4 4A20            	  1262:             cmpi.b #$00,-(a0)
01:00000CB6 66FE            	  1263:             bne.s *               * branch if Z clear
01:00000CB8 0C2000FC        	  1264:             cmpi.b #$FC,-(a0)
01:00000CBC 66FE            	  1265:             bne.s *               * branch if Z clear
01:00000CBE 4A20            	  1266:             cmpi.b #$00,-(a0)
01:00000CC0 66FE            	  1267:             bne.s *               * branch if Z clear
                            	  1268: 
                            	  1269: *             EA = n(An)  - BYTE only
01:00000CC2 307C0100        	  1270:             move.l #$00000100,a0      * point to memory to address
01:00000CC6 10FC0001        	  1271:             move.b #$01,(a0)+         * populate test data
01:00000CCA 10FC00FC        	  1272:             move.b #$FC,(a0)+         * populate test data
01:00000CCE 10FC0080        	  1273:             move.b #$80,(a0)+         * populate test data
01:00000CD2 307C0100        	  1274:             move.l #$00000100,a0      * point to memory to address
01:00000CD6 0B90            	  1275:             bclr.b d5,0(a0)
01:00000CD8 67FE            	  1276:             beq.s *               * branch if Z set
01:00000CDA 0DA80001        	  1277:             bclr.b d6,1(a0)           *
01:00000CDE 66FE            	  1278:             bne.s *               * branch if Z clear
01:00000CE0 0FA80002        	  1279:             bclr.b d7,2(a0)           *
01:00000CE4 67FE            	  1280:             beq.s *               * branch if Z set
01:00000CE6 307C0100        	  1281:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000CEA 4A18            	  1282:             cmpi.b #$00,(a0)+
01:00000CEC 66FE            	  1283:             bne.s *               * branch if Z clear
01:00000CEE 0C1800FC        	  1284:             cmpi.b #$FC,(a0)+
01:00000CF2 66FE            	  1285:             bne.s *               * branch if Z clear
01:00000CF4 4A18            	  1286:             cmpi.b #$00,(a0)+
01:00000CF6 66FE            	  1287:             bne.s *               * branch if Z clear
                            	  1288: 
                            	  1289: *             EA = n(An,R.W)  - BYTE only
01:00000CF8 307C0100        	  1290:             move.l #$00000100,a0      * point to memory to address
01:00000CFC 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
01:00000D00 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
01:00000D04 10FC00FF        	  1293:             move.b #$FF,(a0)+         * populate test data
01:00000D08 307C0103        	  1294:             move.l #$00000103,a0      * point to memory to address
01:00000D0C 307C0100        	  1295:             move.l #$00000100,a0      * point to memory to address
01:00000D10 93C9            	  1296:             move.l #$00000000,a1      * point to memory to address
01:00000D12 347C0001        	  1297:             move.l #$00000001,a2      * point to memory to address
01:00000D16 7000            	  1298:             moveq  #$00000000,d0      * point to memory to address
01:00000D18 7201            	  1299:             moveq  #$00000001,d1      * point to memory to address
01:00000D1A 0BB00000        	  1300:             bclr.b d5,0(a0,d0.w)
01:00000D1E 67FE            	  1301:             beq.s *               * branch if Z set
01:00000D20 0DB01000        	  1302:             bclr.b d6,0(a0,d1.w)      *
01:00000D24 67FE            	  1303:             beq.s *               * branch if Z set
01:00000D26 0FB01001        	  1304:             bclr.b d7,1(a0,d1.w)      *
01:00000D2A 67FE            	  1305:             beq.s *               * branch if Z set
                            	  1306: *             EA = n(An,R.L)  - BYTE only
01:00000D2C 0BB00800        	  1307:             bclr.b d5,0(a0,d0.l)
01:00000D30 66FE            	  1308:             bne.s *               * branch if Z clear
01:00000D32 0DB01800        	  1309:             bclr.b d6,0(a0,d1.l)      *
01:00000D36 66FE            	  1310:             bne.s *               * branch if Z clear
01:00000D38 0FB01801        	  1311:             bclr.b d7,1(a0,d1.l)      *
01:00000D3C 66FE            	  1312:             bne.s *               * branch if Z clear
                            	  1313: *             EA = n(An,A.W)  - BYTE only
01:00000D3E 0BB09000        	  1314:             bclr.b d5,0(a0,a1.w)
01:00000D42 66FE            	  1315:             bne.s *               * branch if Z clear
01:00000D44 0DB0A000        	  1316:             bclr.b d6,0(a0,a2.w)      *
01:00000D48 66FE            	  1317:             bne.s *               * branch if Z clear
01:00000D4A 0FB0A001        	  1318:             bclr.b d7,1(a0,a2.w)      *
01:00000D4E 66FE            	  1319:             bne.s *               * branch if Z clear
                            	  1320: *             EA = n(An,A.L)  - BYTE only
01:00000D50 0BB09800        	  1321:             bclr.b d5,0(a0,a1.l)
01:00000D54 66FE            	  1322:             bne.s *               * branch if Z clear
01:00000D56 0DB0A800        	  1323:             bclr.b d6,0(a0,a2.l)      *
01:00000D5A 66FE            	  1324:             bne.s *               * branch if Z clear
01:00000D5C 0FB0A801        	  1325:             bclr.b d7,1(a0,a2.l)      *
01:00000D60 66FE            	  1326:             bne.s *               * branch if Z clear
01:00000D62 307C0100        	  1327:             move.l #$00000100,a0      * point to memory to address
01:00000D66 0C1000FE        	  1328:             cmpi.b #$FE,(a0)
01:00000D6A 66FE            	  1329:             bne.s *               * branch if Z clear
                            	  1330: 
                            	  1331: *             EA = x.W  - BYTE only
01:00000D6C 307C0100        	  1332:             move.l #$00000100,a0      * point to memory to address
01:00000D70 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
01:00000D74 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
01:00000D78 10FC00FF        	  1335:             move.b #$FF,(a0)+         * populate test data
01:00000D7C 0BB80100        	  1336:             bclr.b d5,$0100
01:00000D80 67FE            	  1337:             beq.s *               * branch if Z set
01:00000D82 0DB80101        	  1338:             bclr.b d6,$0101           *
01:00000D86 67FE            	  1339:             beq.s *               * branch if Z set
01:00000D88 0FB80102        	  1340:             bclr.b d7,$0102           *
01:00000D8C 67FE            	  1341:             beq.s *               * branch if Z set
01:00000D8E 307C0100        	  1342:             move.l #$00000100,a0      * point to memory to address
01:00000D92 0C1800FE        	  1343:             cmpi.b #$FE,(a0)+
01:00000D96 66FE            	  1344:             bne.s *               * branch if Z clear
                            	  1345: 
                            	  1346: *             EA = x.L  - BYTE only
01:00000D98 207C0000F100    	  1347:             move.l #$F100,a0      * point to memory to address 0x100
01:00000D9E 10FC0001        	  1348:             move.b #$01,(a0)+         * populate test data
01:00000DA2 10FC00FC        	  1349:             move.b #$FC,(a0)+         * populate test data
01:00000DA6 10FC0080        	  1350:             move.b #$80,(a0)+         * populate test data
01:00000DAA 0BB90000F100    	  1351:             bclr.b d5,$F100
01:00000DB0 67FE            	  1352:             beq.s *               * branch if Z set
01:00000DB2 0DB90000F101    	  1353:             bclr.b d6,$F101       *
01:00000DB8 66FE            	  1354:             bne.s *               * branch if Z clear
01:00000DBA 0FB90000F102    	  1355:             bclr.b d7,$F102       *
01:00000DC0 67FE            	  1356:             beq.s *               * branch if Z set
01:00000DC2 207C0000F101    	  1357:             move.l #$F101,a0      * point to memory to address 0x100
01:00000DC8 0C1000FC        	  1358:             cmpi.b #$FC,(a0)
01:00000DCC 66FE            	  1359:             bne.s *               * branch if Z clear
                            	  1360: 
                            	  1361: 
                            	  1362: 
01:00000DCE 4E75            	  1363:     rts
                            	  1364: 
                            	  1365: *-----------------------------------------------------------
                            	  1366: *-----------------------------------------------------------
                            	  1367: * OPCODE : BSET
                            	  1368: *-----------------------------------------------------------
                            	  1369: *-----------------------------------------------------------
                            	  1370: op_BSET:
                            	  1371: 
                            	  1372: 
                            	  1373: *  Bit Number.s Static
                            	  1374: 
                            	  1375: *             EA = Dn  - LONG only
01:00000DD0 7000            	  1376:             moveq  #$00000000,d0      * populate test data
01:00000DD2 08C00000        	  1377:             bset.l #0,d0
01:00000DD6 66FE            	  1378:             bne.s *               * branch if Z clear
01:00000DD8 08C00001        	  1379:             bset.l #1,d0              *
01:00000DDC 66FE            	  1380:             bne.s *               * branch if Z clear
01:00000DDE 08C0000F        	  1381:             bset.l #15,d0             *
01:00000DE2 66FE            	  1382:             bne.s *               * branch if Z clear
01:00000DE4 08C0001F        	  1383:             bset.l #31,d0             *
01:00000DE8 66FE            	  1384:             bne.s *               * branch if Z clear
01:00000DEA 0C8080008003    	  1385:             cmpi.l #$80008003,d0
01:00000DF0 66FE            	  1386:             bne.s *               * branch if Z clear
                            	  1387: 
                            	  1388: 
                            	  1389: *             EA = (An)  - BYTE only
01:00000DF2 307C0100        	  1390:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000DF6 4210            	  1391:             move.b #$00,(a0)          * populate test data
01:00000DF8 08D00000        	  1392:             bset.b #0,(a0)
01:00000DFC 66FE            	  1393:             bne.s *               * branch if Z clear
01:00000DFE 08D00007        	  1394:             bset.b #7,(a0)            *
01:00000E02 66FE            	  1395:             bne.s *               * branch if Z clear
01:00000E04 0C100081        	  1396:             cmpi.b #$81,(a0)
01:00000E08 66FE            	  1397:             bne.s *               * branch if Z clear
                            	  1398: 
                            	  1399: *             EA = (An)+  - BYTE only
01:00000E0A 307C0100        	  1400:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E0E 4218            	  1401:             move.b #$00,(a0)+         * populate test data
01:00000E10 4218            	  1402:             move.b #$00,(a0)+         * populate test data
01:00000E12 307C0100        	  1403:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E16 08D80000        	  1404:             bset.b #0,(a0)+
01:00000E1A 66FE            	  1405:             bne.s *               * branch if Z clear
01:00000E1C 08D80001        	  1406:             bset.b #1,(a0)+           *
01:00000E20 66FE            	  1407:             bne.s *               * branch if Z clear
01:00000E22 307C0100        	  1408:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E26 0C180001        	  1409:             cmpi.b #$01,(a0)+
01:00000E2A 66FE            	  1410:             bne.s *               * branch if Z clear
01:00000E2C 0C180002        	  1411:             cmpi.b #$02,(a0)+
01:00000E30 66FE            	  1412:             bne.s *               * branch if Z clear
                            	  1413: 
                            	  1414: 
                            	  1415: *             EA = -(An)  - BYTE only
01:00000E32 307C0100        	  1416:             move.l #$00000100,a0      * point to memory to address
01:00000E36 4218            	  1417:             move.b #$00,(a0)+         * populate test data
01:00000E38 4218            	  1418:             move.b #$00,(a0)+         * populate test data
01:00000E3A 08E00007        	  1419:             bset.b #7,-(a0)
01:00000E3E 66FE            	  1420:             bne.s *               * branch if Z clear
01:00000E40 08E00000        	  1421:             bset.b #0,-(a0)           *
01:00000E44 66FE            	  1422:             bne.s *               * branch if Z clear
01:00000E46 307C0102        	  1423:             move.l #$00000102,a0      * point to memory to address 0x100
01:00000E4A 0C200080        	  1424:             cmpi.b #$80,-(a0)
01:00000E4E 66FE            	  1425:             bne.s *               * branch if Z clear
01:00000E50 0C200001        	  1426:             cmpi.b #$01,-(a0)
01:00000E54 66FE            	  1427:             bne.s *               * branch if Z clear
                            	  1428: 
                            	  1429: 
                            	  1430: *             EA = n(An)  - BYTE only
01:00000E56 307C0100        	  1431:             move.l #$00000100,a0      * point to memory to address
01:00000E5A 4218            	  1432:             move.b #$00,(a0)+         * populate test data
01:00000E5C 4218            	  1433:             move.b #$00,(a0)+         * populate test data
01:00000E5E 307C0100        	  1434:             move.l #$00000100,a0      * point to memory to address
01:00000E62 08D00000        	  1435:             bset.b #0,0(a0)
01:00000E66 66FE            	  1436:             bne.s *               * branch if Z clear
01:00000E68 08E800040001    	  1437:             bset.b #4,1(a0)           *
01:00000E6E 66FE            	  1438:             bne.s *               * branch if Z clear
01:00000E70 307C0100        	  1439:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000E74 0C180001        	  1440:             cmpi.b #$01,(a0)+
01:00000E78 66FE            	  1441:             bne.s *               * branch if Z clear
01:00000E7A 0C180010        	  1442:             cmpi.b #$10,(a0)+
01:00000E7E 66FE            	  1443:             bne.s *               * branch if Z clear
                            	  1444: 
                            	  1445: 
                            	  1446: *             EA = n(An,D.W)  - BYTE only
01:00000E80 307C0100        	  1447:             move.l #$00000100,a0      * point to memory to address
01:00000E84 93C9            	  1448:             move.l #$00000000,a1      * point to memory to address
01:00000E86 347C0004        	  1449:             move.l #$00000004,a2      * point to memory to address
01:00000E8A 7000            	  1450:             moveq  #$00000000,d0      * point to memory to address
01:00000E8C 7201            	  1451:             moveq  #$00000001,d1      * point to memory to address
01:00000E8E 4218            	  1452:             move.b #$00,(a0)+         * populate test data
01:00000E90 4218            	  1453:             move.b #$00,(a0)+         * populate test data
01:00000E92 4218            	  1454:             move.b #$00,(a0)+         * populate test data
01:00000E94 4218            	  1455:             move.b #$00,(a0)+         * populate test data
01:00000E96 4218            	  1456:             move.b #$00,(a0)+         * populate test data
01:00000E98 4218            	  1457:             move.b #$00,(a0)+         * populate test data
01:00000E9A 4218            	  1458:             move.b #$00,(a0)+         * populate test data
01:00000E9C 4218            	  1459:             move.b #$00,(a0)+         * populate test data
01:00000E9E 4218            	  1460:             move.b #$00,(a0)+         * populate test data
01:00000EA0 4218            	  1461:             move.b #$00,(a0)+         * populate test data
01:00000EA2 307C0100        	  1462:             move.l #$00000100,a0      * point to memory to address
01:00000EA6 08F000000000    	  1463:             bset.b #0,0(a0,d0.w)
01:00000EAC 66FE            	  1464:             bne.s *               * branch if Z clear
01:00000EAE 08F000011000    	  1465:             bset.b #1,0(a0,d1.w)      *
01:00000EB4 66FE            	  1466:             bne.s *               * branch if Z clear
01:00000EB6 08F000021001    	  1467:             bset.b #2,1(a0,d1.w)      *
01:00000EBC 66FE            	  1468:             bne.s *               * branch if Z clear
                            	  1469: *             EA = n(An,D.L)  - BYTE only
01:00000EBE 08F000030802    	  1470:             bset.b #3,2(a0,d0.l)
01:00000EC4 66FE            	  1471:             bne.s *               * branch if Z clear
01:00000EC6 08F000041800    	  1472:             bset.b #4,0(a0,d1.l)      *
01:00000ECC 66FE            	  1473:             bne.s *               * branch if Z clear
01:00000ECE 08F000051801    	  1474:             bset.b #5,1(a0,d1.l)      *
01:00000ED4 66FE            	  1475:             bne.s *               * branch if Z clear
                            	  1476: *             EA = n(An,A.W)  - BYTE only
01:00000ED6 08F000069000    	  1477:             bset.b #6,0(a0,a1.w)
01:00000EDC 66FE            	  1478:             bne.s *               * branch if Z clear
01:00000EDE 08F00001A000    	  1479:             bset.b #1,0(a0,a2.w)      *
01:00000EE4 66FE            	  1480:             bne.s *               * branch if Z clear
01:00000EE6 08F00007A001    	  1481:             bset.b #7,1(a0,a2.w)      *
01:00000EEC 66FE            	  1482:             bne.s *               * branch if Z clear
                            	  1483: *             EA = n(An,A.L)  - BYTE only
01:00000EEE 08F00000A802    	  1484:             bset.b #0,2(a0,a2.l)
01:00000EF4 66FE            	  1485:             bne.s *               * branch if Z clear
01:00000EF6 08F00000A803    	  1486:             bset.b #0,3(a0,a2.l)      *
01:00000EFC 66FE            	  1487:             bne.s *               * branch if Z clear
01:00000EFE 08F00001A804    	  1488:             bset.b #1,4(a0,a2.l)      *
01:00000F04 66FE            	  1489:             bne.s *               * branch if Z clear
01:00000F06 307C0100        	  1490:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F0A 0C9841122C00    	  1491:             cmpi.l #$41122C00,(a0)+
01:00000F10 66FE            	  1492:             bne.s *               * branch if Z clear
01:00000F12 0C9802800101    	  1493:             cmpi.l #$02800101,(a0)+
01:00000F18 66FE            	  1494:             bne.s *
                            	  1495: 
                            	  1496: 
                            	  1497: 
                            	  1498: *             EA = x.W  - BYTE only
01:00000F1A 307C0100        	  1499:             move.l #$00000100,a0      * point to memory to address
01:00000F1E 4218            	  1500:             move.b #$00,(a0)+         * populate test data
01:00000F20 08F800000100    	  1501:             bset.b #0,$0100
01:00000F26 66FE            	  1502:             bne.s *               * branch if Z clear
01:00000F28 08F800010100    	  1503:             bset.b #1,$0100           *
01:00000F2E 66FE            	  1504:             bne.s *               * branch if Z clear
01:00000F30 307C0100        	  1505:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F34 0C180003        	  1506:             cmpi.b #$03,(a0)+
01:00000F38 66FE            	  1507:             bne.s *
                            	  1508: 
                            	  1509: 
                            	  1510: *             EA = x.L  - BYTE only
01:00000F3A 207C0000F100    	  1511:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F40 4210            	  1512:             move.b #$00,(a0)          * populate test data
01:00000F42 08F900000000F100	  1513:             bset.b #0,$F100
01:00000F4A 66FE            	  1514:             bne.s *               * branch if Z clear
01:00000F4C 08F900010000F100	  1515:             bset.b #1,$F100       *
01:00000F54 66FE            	  1516:             bne.s *               * branch if Z clear
01:00000F56 08F900020000F100	  1517:             bset.b #2,$F100       *
01:00000F5E 66FE            	  1518:             bne.s *               * branch if Z clear
01:00000F60 207C0000F100    	  1519:             move.l #$F100,a0      * point to memory to address 0x100
01:00000F66 0C180007        	  1520:             cmpi.b #$07,(a0)+
01:00000F6A 66FE            	  1521:             bne.s *
                            	  1522: 
                            	  1523: 
                            	  1524: * Bit Number.s Dynamic
                            	  1525: 
                            	  1526: *             EA = Dn  - LONG only
01:00000F6C 7000            	  1527:             moveq  #$00000000,d0      * populate test data
01:00000F6E 7A00            	  1528:             move.l #0,d5              * populate bit.s number to test
01:00000F70 7C01            	  1529:             move.l #1,d6              * populate bit.s number to test
01:00000F72 7E1F            	  1530:             move.l #31,d7              * populate bit.s number to test
                            	  1531: 
01:00000F74 0BC0            	  1532:             bset.l d5,d0
01:00000F76 66FE            	  1533:             bne.s *               * branch if Z clear
01:00000F78 0DC0            	  1534:             bset.l d6,d0              *
01:00000F7A 66FE            	  1535:             bne.s *               * branch if Z clear
01:00000F7C 0FC0            	  1536:             bset.l d7,d0             *
01:00000F7E 66FE            	  1537:             bne.s *               * branch if Z clear
01:00000F80 0C8080000003    	  1538:             cmpi.l #$80000003,d0
01:00000F86 66FE            	  1539:             bne.s *               * branch if Z clear
                            	  1540: 
                            	  1541: 
                            	  1542: *             EA = (An)  - BYTE only
01:00000F88 7A00            	  1543:             move.l #0,d5              * populate bit.s number to test
01:00000F8A 7C01            	  1544:             move.l #1,d6              * populate bit.s number to test
01:00000F8C 7E07            	  1545:             move.l #7,d7              * populate bit.s number to test
01:00000F8E 307C0100        	  1546:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000F92 4210            	  1547:             move.b #$00,(a0)          * populate test data
01:00000F94 0BD0            	  1548:             bset.b d5,(a0)
01:00000F96 66FE            	  1549:             bne.s *               * branch if Z clear
01:00000F98 0DD0            	  1550:             bset.b d6,(a0)            *
01:00000F9A 66FE            	  1551:             bne.s *               * branch if Z clear
01:00000F9C 0FD0            	  1552:             bset.b d7,(a0)            *
01:00000F9E 66FE            	  1553:             bne.s *               * branch if Z clear
01:00000FA0 0C100083        	  1554:             cmpi.b #$83,(a0)
01:00000FA4 66FE            	  1555:             bne.s *               * branch if Z clear
                            	  1556: 
                            	  1557: 
                            	  1558: *             EA = (An)+  - BYTE only
01:00000FA6 307C0100        	  1559:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FAA 4218            	  1560:             move.b #$00,(a0)+         * populate test data
01:00000FAC 4218            	  1561:             move.b #$00,(a0)+         * populate test data
01:00000FAE 4218            	  1562:             move.b #$00,(a0)+         * populate test data
01:00000FB0 307C0100        	  1563:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FB4 0BD8            	  1564:             bset.b d5,(a0)+
01:00000FB6 66FE            	  1565:             bne.s *               * branch if Z clear
01:00000FB8 0DD8            	  1566:             bset.b d6,(a0)+           *
01:00000FBA 66FE            	  1567:             bne.s *               * branch if Z clear
01:00000FBC 0FD8            	  1568:             bset.b d7,(a0)+           *
01:00000FBE 66FE            	  1569:             bne.s *               * branch if Z clear
01:00000FC0 307C0100        	  1570:             move.l #$00000100,a0      * point to memory to address 0x100
01:00000FC4 0C180001        	  1571:             cmpi.b #$01,(a0)+
01:00000FC8 66FE            	  1572:             bne.s *               * branch if Z clear
01:00000FCA 0C180002        	  1573:             cmpi.b #$02,(a0)+
01:00000FCE 66FE            	  1574:             bne.s *               * branch if Z clear
01:00000FD0 0C180080        	  1575:             cmpi.b #$80,(a0)+
01:00000FD4 66FE            	  1576:             bne.s *               * branch if Z clear
                            	  1577: 
                            	  1578: *             EA = -(An)  - BYTE only
01:00000FD6 307C0100        	  1579:             move.l #$00000100,a0      * point to memory to address
01:00000FDA 4218            	  1580:             move.b #$00,(a0)+         * populate test data
01:00000FDC 4218            	  1581:             move.b #$00,(a0)+         * populate test data
01:00000FDE 4218            	  1582:             move.b #$00,(a0)+         * populate test data
01:00000FE0 307C0103        	  1583:             move.l #$00000103,a0      * point to memory to address
01:00000FE4 0BE0            	  1584:             bset.b d5,-(a0)
01:00000FE6 66FE            	  1585:             bne.s *               * branch if Z clear
01:00000FE8 0DE0            	  1586:             bset.b d6,-(a0)           *
01:00000FEA 66FE            	  1587:             bne.s *               * branch if Z clear
01:00000FEC 0FE0            	  1588:             bset.b d7,-(a0)           *
01:00000FEE 66FE            	  1589:             bne.s *               * branch if Z clear
01:00000FF0 307C0103        	  1590:             move.l #$00000103,a0      * point to memory to address 0x100
01:00000FF4 0C200001        	  1591:             cmpi.b #$01,-(a0)
01:00000FF8 66FE            	  1592:             bne.s *               * branch if Z clear
01:00000FFA 0C200002        	  1593:             cmpi.b #$02,-(a0)
01:00000FFE 66FE            	  1594:             bne.s *               * branch if Z clear
01:00001000 0C200080        	  1595:             cmpi.b #$80,-(a0)
01:00001004 66FE            	  1596:             bne.s *               * branch if Z clear
                            	  1597: 
                            	  1598: *             EA = n(An)  - BYTE only
01:00001006 307C0100        	  1599:             move.l #$00000100,a0      * point to memory to address
01:0000100A 4218            	  1600:             move.b #$00,(a0)+         * populate test data
01:0000100C 4218            	  1601:             move.b #$00,(a0)+         * populate test data
01:0000100E 4218            	  1602:             move.b #$00,(a0)+         * populate test data
01:00001010 307C0100        	  1603:             move.l #$00000100,a0      * point to memory to address
01:00001014 0BD0            	  1604:             bset.b d5,0(a0)
01:00001016 66FE            	  1605:             bne.s *               * branch if Z clear
01:00001018 0DE80001        	  1606:             bset.b d6,1(a0)           *
01:0000101C 66FE            	  1607:             bne.s *               * branch if Z clear
01:0000101E 0FE80002        	  1608:             bset.b d7,2(a0)           *
01:00001022 66FE            	  1609:             bne.s *               * branch if Z clear
01:00001024 307C0100        	  1610:             move.l #$00000100,a0      * point to memory to address 0x100
01:00001028 0C180001        	  1611:             cmpi.b #$01,(a0)+
01:0000102C 66FE            	  1612:             bne.s *               * branch if Z clear
01:0000102E 0C180002        	  1613:             cmpi.b #$02,(a0)+
01:00001032 66FE            	  1614:             bne.s *               * branch if Z clear
01:00001034 0C180080        	  1615:             cmpi.b #$80,(a0)+
01:00001038 66FE            	  1616:             bne.s *               * branch if Z clear
                            	  1617: 
                            	  1618: *             EA = n(An,R.W)  - BYTE only
01:0000103A 307C0100        	  1619:             move.l #$00000100,a0      * point to memory to address
01:0000103E 4218            	  1620:             move.b #$00,(a0)+         * populate test data
01:00001040 4218            	  1621:             move.b #$00,(a0)+         * populate test data
01:00001042 4218            	  1622:             move.b #$00,(a0)+         * populate test data
01:00001044 4218            	  1623:             move.b #$00,(a0)+         * populate test data
01:00001046 4218            	  1624:             move.b #$00,(a0)+         * populate test data
01:00001048 4218            	  1625:             move.b #$00,(a0)+         * populate test data
01:0000104A 4218            	  1626:             move.b #$00,(a0)+         * populate test data
01:0000104C 4218            	  1627:             move.b #$00,(a0)+         * populate test data
01:0000104E 4218            	  1628:             move.b #$00,(a0)+         * populate test data
01:00001050 4218            	  1629:             move.b #$00,(a0)+         * populate test data
01:00001052 4218            	  1630:             move.b #$00,(a0)+         * populate test data
01:00001054 4218            	  1631:             move.b #$00,(a0)+         * populate test data
01:00001056 307C0100        	  1632:             move.l #$00000100,a0      * point to memory to address
01:0000105A 93C9            	  1633:             move.l #$00000000,a1      * point to memory to address
01:0000105C 347C0001        	  1634:             move.l #$00000001,a2      * point to memory to address
01:00001060 7000            	  1635:             moveq  #$00000000,d0      * point to memory to address
01:00001062 7201            	  1636:             moveq  #$00000001,d1      * point to memory to address
01:00001064 0BF00000        	  1637:             bset.b d5,0(a0,d0.w)
01:00001068 66FE            	  1638:             bne.s *               * branch if Z clear
01:0000106A 0DF01000        	  1639:             bset.b d6,0(a0,d1.w)      *
01:0000106E 66FE            	  1640:             bne.s *               * branch if Z clear
01:00001070 0FF01001        	  1641:             bset.b d7,1(a0,d1.w)      *
01:00001074 66FE            	  1642:             bne.s *               * branch if Z clear
                            	  1643: *             EA = n(An,R.L)  - BYTE only
01:00001076 0BF00802        	  1644:             bset.b d5,2(a0,d0.l)
01:0000107A 66FE            	  1645:             bne.s *               * branch if Z clear
01:0000107C 0DF01803        	  1646:             bset.b d6,3(a0,d1.l)      *
01:00001080 66FE            	  1647:             bne.s *               * branch if Z clear
01:00001082 0FF01804        	  1648:             bset.b d7,4(a0,d1.l)      *
01:00001086 66FE            	  1649:             bne.s *               * branch if Z clear
                            	  1650: *             EA = n(An,A.W)  - BYTE only
01:00001088 0BF09005        	  1651:             bset.b d5,5(a0,a1.w)
01:0000108C 66FE            	  1652:             bne.s *               * branch if Z clear
01:0000108E 0DF0A006        	  1653:             bset.b d6,6(a0,a2.w)      *
01:00001092 66FE            	  1654:             bne.s *               * branch if Z clear
01:00001094 0FF0A007        	  1655:             bset.b d7,7(a0,a2.w)      *
01:00001098 66FE            	  1656:             bne.s *               * branch if Z clear
                            	  1657: *             EA = n(An,A.L)  - BYTE only
01:0000109A 0BF09808        	  1658:             bset.b d5,8(a0,a1.l)
01:0000109E 66FE            	  1659:             bne.s *               * branch if Z clear
01:000010A0 0DF0A809        	  1660:             bset.b d6,9(a0,a2.l)      *
01:000010A4 66FE            	  1661:             bne.s *               * branch if Z clear
01:000010A6 0FF0A80A        	  1662:             bset.b d7,10(a0,a2.l)      *
01:000010AA 66FE            	  1663:             bne.s *               * branch if Z clear
01:000010AC 307C0100        	  1664:             move.l #$00000100,a0      * point to memory to address 0x100
01:000010B0 0C9801028100    	  1665:             cmpi.l #$01028100,(a0)+
01:000010B6 66FE            	  1666:             bne.s *               * branch if Z clear
01:000010B8 0C9802810002    	  1667:             cmpi.l #$02810002,(a0)+
01:000010BE 66FE            	  1668:             bne.s *
                            	  1669: 
                            	  1670: 
                            	  1671: *             EA = x.W  - BYTE only
01:000010C0 307C0100        	  1672:             move.l #$00000100,a0      * point to memory to address
01:000010C4 4218            	  1673:             move.b #$00,(a0)+         * populate test data
01:000010C6 4218            	  1674:             move.b #$00,(a0)+         * populate test data
01:000010C8 4218            	  1675:             move.b #$00,(a0)+         * populate test data
01:000010CA 0BF80100        	  1676:             bset.b d5,$0100
01:000010CE 66FE            	  1677:             bne.s *               * branch if Z clear
01:000010D0 0DF80100        	  1678:             bset.b d6,$0100           *
01:000010D4 66FE            	  1679:             bne.s *               * branch if Z clear
01:000010D6 0FF80100        	  1680:             bset.b d7,$0100           *
01:000010DA 66FE            	  1681:             bne.s *               * branch if Z clear
01:000010DC 307C0100        	  1682:             move.l #$00000100,a0      * point to memory to address
01:000010E0 0C180083        	  1683:             cmpi.b #$83,(a0)+
01:000010E4 66FE            	  1684:             bne.s *               * branch if Z clear
                            	  1685: 
                            	  1686: *             EA = x.L  - BYTE only
01:000010E6 207C0000F100    	  1687:             move.l #$F100,a0      * point to memory to address 0x100
01:000010EC 4218            	  1688:             move.b #$00,(a0)+         * populate test data
01:000010EE 4218            	  1689:             move.b #$00,(a0)+         * populate test data
01:000010F0 4218            	  1690:             move.b #$00,(a0)+         * populate test data
01:000010F2 0BF90000F100    	  1691:             bset.b d5,$F100
01:000010F8 66FE            	  1692:             bne.s *               * branch if Z clear
01:000010FA 0DF90000F100    	  1693:             bset.b d6,$F100       *
01:00001100 66FE            	  1694:             bne.s *               * branch if Z clear
01:00001102 0FF90000F100    	  1695:             bset.b d7,$F100       *
01:00001108 66FE            	  1696:             bne.s *               * branch if Z clear
01:0000110A 207C0000F100    	  1697:             move.l #$F100,a0      * point to memory to address 0x100
01:00001110 0C100083        	  1698:             cmpi.b #$83,(a0)
01:00001114 66FE            	  1699:             bne.s *               * branch if Z clear
                            	  1700: 
                            	  1701: 
01:00001116 4E75            	  1702:     rts
                            	  1703: 
                            	  1704: *-----------------------------------------------------------
                            	  1705: *-----------------------------------------------------------
                            	  1706: * OPCODE : MOVEP
                            	  1707: *-----------------------------------------------------------
                            	  1708: *-----------------------------------------------------------
                            	  1709: op_MOVEP:
                            	  1710: 
                            	  1711: * Dn --> x(An)
01:00001118 307C0100        	  1712:             move.l #$00000100,a0
01:0000111C 203C12345678    	  1713:             move.l #$12345678,d0
01:00001122 223CAABBCCDD    	  1714:             move.l #$AABBCCDD,d1
01:00001128 4290            	  1715:             move.l #0,(a0)
01:0000112A 42A80004        	  1716:             move.l #0,4(a0)
                            	  1717: 
01:0000112E 01880000        	  1718:             movep.w d0,0(a0)      * even offset
01:00001132 03880001        	  1719:             movep.w d1,1(a0)      * odd offset
                            	  1720: 
01:00001136 01C80004        	  1721:             movep.l d0,4(a0)      * even offset
01:0000113A 03C80005        	  1722:             movep.l d1,5(a0)      * odd offset
                            	  1723: 
01:0000113E 0C9056CC78DD    	  1724:             cmpi.l #$56CC78DD,(a0)
01:00001144 66FE            	  1725:             bne.s *
01:00001146 0CA812AA34BB0004	  1726:             cmpi.l #$12AA34BB,4(a0)
01:0000114E 66FE            	  1727:             bne.s *
01:00001150 0CA856CC78DD0008	  1728:             cmpi.l #$56CC78DD,8(a0)
01:00001158 66FE            	  1729:             bne.s *
                            	  1730: 
                            	  1731: 
                            	  1732: * x(An)--> Dn
01:0000115A 203C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d0
01:00001160 223C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d1
01:00001166 243C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d2
01:0000116C 263C5A5A5A5A    	  1736:             move.l #$5a5a5a5a,d3
                            	  1737: 
01:00001172 01080000        	  1738:             movep.w 0(a0),d0      * even offset
01:00001176 03080001        	  1739:             movep.w 1(a0),d1      * odd offset
                            	  1740: 
01:0000117A 05480004        	  1741:             movep.l 4(a0),d2      * even offset
01:0000117E 07480005        	  1742:             movep.l 5(a0),d3      * odd offset
                            	  1743: 
01:00001182 0C805A5A5678    	  1744:             cmpi.l #$5a5a5678,d0
01:00001188 66FE            	  1745:             bne.s *
01:0000118A 0C815A5ACCDD    	  1746:             cmpi.l #$5a5aCCDD,d1
01:00001190 66FE            	  1747:             bne.s *
01:00001192 0C8212345678    	  1748:             cmpi.l #$12345678,d2
01:00001198 66FE            	  1749:             bne.s *
01:0000119A 0C83AABBCCDD    	  1750:             cmpi.l #$AABBCCDD,d3
01:000011A0 66FE            	  1751:             bne.s *
                            	  1752: 
01:000011A2 4E75            	  1753:             rts
                            	  1754: 
                            	  1755: 
                            	  1756: 
                            	  1757: *-----------------------------------------------------------
                            	  1758: *-----------------------------------------------------------
                            	  1759: * OPCODE : BOOL_I
                            	  1760: *-----------------------------------------------------------
                            	  1761: *-----------------------------------------------------------
                            	  1762: op_BOOL_I:
                            	  1763: 
                            	  1764: *     Dn -- BYTE
01:000011A4 203C12345678    	  1765:             move.l #$12345678,d0
01:000011AA 44FC000F        	  1766:             move.w #$000F,CCR          * pre-set Flags
01:000011AE 000000FF        	  1767:             ori.b  #$FF,d0
01:000011B2 0A00005A        	  1768:             eori.b #$5A,d0
01:000011B6 020000F0        	  1769:             andi.b #$F0,d0
01:000011BA 69FE            	  1770:             bvs.s *                       * Check V,C are cleared
01:000011BC 65FE            	  1771:             bcs.s *
01:000011BE 6AFE            	  1772:             bpl.s *                       * Verify if N flag is set
01:000011C0 4200            	  1773:             andi.b #$00,d0
01:000011C2 6BFE            	  1774:             bmi.s *                       * Verify if N flag is cleared
01:000011C4 66FE            	  1775:             bne.s *                       * Verify if Z flag is set
                            	  1776: 
                            	  1777: *     Dn -- WORD
01:000011C6 223C12345678    	  1778:             move.l #$12345678,d1
01:000011CC 44FC000F        	  1779:             move.w #$000F,CCR          * pre-set Flags
01:000011D0 0041FFFF        	  1780:             ori.w  #$FFFF,d1
01:000011D4 0A415A5A        	  1781:             eori.w #$5A5A,d1
01:000011D8 0241F0F0        	  1782:             andi.w #$F0F0,d1
01:000011DC 69FE            	  1783:             bvs.s *                       * Check V,C are cleared
01:000011DE 65FE            	  1784:             bcs.s *
01:000011E0 6AFE            	  1785:             bpl.s *                       * Verify if N flag is set
01:000011E2 4241            	  1786:             andi.w #$0000,d1
01:000011E4 6BFE            	  1787:             bmi.s *                       * Verify if N flag is cleared
01:000011E6 66FE            	  1788:             bne.s *                       * Verify if Z flag is set
                            	  1789: 
                            	  1790: *     Dn -- LONG
01:000011E8 243C12345678    	  1791:             move.l #$12345678,d2
01:000011EE 44FC000F        	  1792:             move.w #$000F,CCR          * pre-set Flags
01:000011F2 0082FFFFFFFF    	  1793:             ori.l  #$FFFFFFFF,d2
01:000011F8 0A825A5A5A5A    	  1794:             eori.l #$5A5A5A5A,d2
01:000011FE 0282F0F0F0F0    	  1795:             andi.l #$F0F0F0F0,d2
01:00001204 69FE            	  1796:             bvs.s *                       * Check V,C are cleared
01:00001206 65FE            	  1797:             bcs.s *
01:00001208 6AFE            	  1798:             bpl.s *                       * Verify if N flag is set
01:0000120A 4282            	  1799:             andi.l #$00000000,d2
01:0000120C 6BFE            	  1800:             bmi.s *                       * Verify if N flag is cleared
01:0000120E 66FE            	  1801:             bne.s *                       * Verify if Z flag is set
                            	  1802: 
                            	  1803: 
                            	  1804: *     (An) -- BYTE
01:00001210 307C0100        	  1805:             move.l #$00000100,a0
01:00001214 20BC12345678    	  1806:             move.l #$12345678,(a0)
01:0000121A 44FC000F        	  1807:             move.w #$000F,CCR          * pre-set Flags
01:0000121E 001000FF        	  1808:             ori.b  #$FF,(a0)
01:00001222 0A10005A        	  1809:             eori.b #$5A,(a0)
01:00001226 021000F0        	  1810:             andi.b #$F0,(a0)
01:0000122A 69FE            	  1811:             bvs.s *                       * Check V,C are cleared
01:0000122C 65FE            	  1812:             bcs.s *
01:0000122E 6AFE            	  1813:             bpl.s *                       * Verify if N flag is set
01:00001230 4210            	  1814:             andi.b #$00,(a0)
01:00001232 6BFE            	  1815:             bmi.s *                       * Verify if N flag is cleared
01:00001234 66FE            	  1816:             bne.s *                       * Verify if Z flag is set
01:00001236 4A10            	  1817:             cmpi.b #$00,(a0)
01:00001238 66FE            	  1818:             bne.s *                       * Verify if Z flag is set
                            	  1819: 
                            	  1820: *     (An) -- WORD
01:0000123A 20BC12345678    	  1821:             move.l #$12345678,(a0)
01:00001240 44FC000F        	  1822:             move.w #$000F,CCR          * pre-set Flags
01:00001244 0050FFFF        	  1823:             ori.w  #$FFFF,(a0)
01:00001248 0A505A5A        	  1824:             eori.w #$5A5A,(a0)
01:0000124C 0250F0F0        	  1825:             andi.w #$F0F0,(a0)
01:00001250 69FE            	  1826:             bvs.s *                       * Check V,C are cleared
01:00001252 65FE            	  1827:             bcs.s *
01:00001254 6AFE            	  1828:             bpl.s *                       * Verify if N flag is set
01:00001256 4250            	  1829:             andi.w #$0000,(a0)
01:00001258 6BFE            	  1830:             bmi.s *                       * Verify if N flag is cleared
01:0000125A 66FE            	  1831:             bne.s *                       * Verify if Z flag is set
01:0000125C 4A50            	  1832:             cmpi.w #$00,(a0)
01:0000125E 66FE            	  1833:             bne.s *                       * Verify if Z flag is set
                            	  1834: 
                            	  1835: *     (An) -- LONG
01:00001260 20BC12345678    	  1836:             move.l #$12345678,(a0)
01:00001266 44FC000F        	  1837:             move.w #$000F,CCR          * pre-set Flags
01:0000126A 0090FFFFFFFF    	  1838:             ori.l  #$FFFFFFFF,(a0)
01:00001270 0A905A5A5A5A    	  1839:             eori.l #$5A5A5A5A,(a0)
01:00001276 0290F0F0F0F0    	  1840:             andi.l #$F0F0F0F0,(a0)
01:0000127C 69FE            	  1841:             bvs.s *                       * Check V,C are cleared
01:0000127E 65FE            	  1842:             bcs.s *
01:00001280 6AFE            	  1843:             bpl.s *                       * Verify if N flag is set
01:00001282 4290            	  1844:             andi.l #$00000000,(a0)
01:00001284 6BFE            	  1845:             bmi.s *                       * Verify if N flag is cleared
01:00001286 66FE            	  1846:             bne.s *                       * Verify if Z flag is set
01:00001288 4A90            	  1847:             cmpi.l #$00,(a0)
01:0000128A 66FE            	  1848:             bne.s *                       * Verify if Z flag is set
                            	  1849: 
                            	  1850: 
                            	  1851: 
                            	  1852: *     (An)+ -- BYTE
01:0000128C 307C0100        	  1853:             move.l #$00000100,a0
01:00001290 20BC00A5FF88    	  1854:             move.l #$00A5FF88,(a0)
01:00001296 44FC000F        	  1855:             move.w #$000F,CCR          * pre-set Flags
                            	  1856: 
01:0000129A 001800F5        	  1857:             ori.b  #$F5,(a0)+
01:0000129E 6AFE            	  1858:             bpl.s *                       * Verify if N flag is set
01:000012A0 67FE            	  1859:             beq.s *                       * Verify if Z flag is cleared
                            	  1860: 
01:000012A2 4618            	  1861:             eori.b #$FF,(a0)+
01:000012A4 6BFE            	  1862:             bmi.s *                       * Verify if N flag is cleared
01:000012A6 67FE            	  1863:             beq.s *                       * Verify if Z flag is cleared
                            	  1864: 
01:000012A8 021800AA        	  1865:             andi.b #$AA,(a0)+
01:000012AC 6AFE            	  1866:             bpl.s *                       * Verify if N flag is set
01:000012AE 67FE            	  1867:             beq.s *                       * Verify if Z flag is cleared
                            	  1868: 
01:000012B0 307C0100        	  1869:             move.l #$00000100,a0
01:000012B4 0C90F55AAA88    	  1870:             cmpi.l #$F55AAA88,(a0)
01:000012BA 66FE            	  1871:             bne.s *                       * Verify if Z flag is set
                            	  1872: 
                            	  1873: 
                            	  1874: *     (An)+ -- WORD
01:000012BC 307C0100        	  1875:             move.l #$00000100,a0
01:000012C0 327C0104        	  1876:             move.l #$00000104,a1
01:000012C4 20BC00005A5A    	  1877:             move.l #$00005a5a,(a0)
01:000012CA 22BC12345678    	  1878:             move.l #$12345678,(a1)
01:000012D0 44FC000F        	  1879:             move.w #$000F,CCR          * pre-set Flags
                            	  1880: 
01:000012D4 00585678        	  1881:             ori.w  #$5678,(a0)+
01:000012D8 6BFE            	  1882:             bmi.s *                       * Verify if N flag is cleared
01:000012DA 67FE            	  1883:             beq.s *                       * Verify if Z flag is cleared
                            	  1884: 
01:000012DC 4658            	  1885:             eori.w #$FFFF,(a0)+
01:000012DE 6AFE            	  1886:             bpl.s *                       * Verify if N flag is set
01:000012E0 67FE            	  1887:             beq.s *                       * Verify if Z flag is cleared
                            	  1888: 
01:000012E2 0258A55A        	  1889:             andi.w #$A55A,(a0)+
01:000012E6 6BFE            	  1890:             bmi.s *                       * Verify if N flag is cleared
01:000012E8 67FE            	  1891:             beq.s *                       * Verify if Z flag is cleared
                            	  1892: 
01:000012EA 307C0100        	  1893:             move.l #$00000100,a0
01:000012EE 0C905678A5A5    	  1894:             cmpi.l #$5678a5a5,(a0)
01:000012F4 307C0104        	  1895:             move.l #$00000104,a0
01:000012F8 0C9000105678    	  1896:             cmpi.l #$00105678,(a0)
01:000012FE 66FE            	  1897:             bne.s *                       * Verify if Z flag is set
                            	  1898: 
                            	  1899: *     (An)+ -- LONG
01:00001300 307C0100        	  1900:             move.l #$00000100,a0
01:00001304 4298            	  1901:             move.l #$00000000,(a0)+
01:00001306 20FC5A5A5A5A    	  1902:             move.l #$5a5a5a5a,(a0)+
01:0000130C 20FCFFFFFFFF    	  1903:             move.l #$FFFFFFFF,(a0)+
01:00001312 307C0100        	  1904:             move.l #$00000100,a0
01:00001316 44FC000F        	  1905:             move.w #$000F,CCR          * pre-set Flags
                            	  1906: 
01:0000131A 009812345678    	  1907:             ori.l  #$12345678,(a0)+
01:00001320 6BFE            	  1908:             bmi.s *                       * Verify if N flag is cleared
01:00001322 67FE            	  1909:             beq.s *                       * Verify if Z flag is cleared
                            	  1910: 
01:00001324 4698            	  1911:             eori.l #$FFFFFFFF,(a0)+
01:00001326 6AFE            	  1912:             bpl.s *                       * Verify if N flag is set
01:00001328 67FE            	  1913:             beq.s *                       * Verify if Z flag is cleared
                            	  1914: 
01:0000132A 0298A5A5A55A    	  1915:             andi.l #$A5A5A55A,(a0)+
01:00001330 6AFE            	  1916:             bpl.s *                       * Verify if N flag is set
01:00001332 67FE            	  1917:             beq.s *                       * Verify if Z flag is cleared
                            	  1918: 
01:00001334 307C0100        	  1919:             move.l #$00000100,a0
01:00001338 0C9812345678    	  1920:             cmpi.l #$12345678,(a0)+
01:0000133E 0C98A5A5A5A5    	  1921:             cmpi.l #$a5a5a5a5,(a0)+
01:00001344 0C98A5A5A55A    	  1922:             cmpi.l #$a5a5a55a,(a0)+
01:0000134A 66FE            	  1923:             bne.s *                       * Verify if Z flag is set
                            	  1924: 
01:0000134C 4E75            	  1925:             rts
                            	  1926: 
                            	  1927: 
                            	  1928: *-----------------------------------------------------------
                            	  1929: *-----------------------------------------------------------
                            	  1930: * OPCODE : BSR
                            	  1931: *-----------------------------------------------------------
                            	  1932: *-----------------------------------------------------------
                            	  1933: 
                            	  1934: 
01:0000134E 223C11111111    	  1935: BSR_CLOSE1:     move.l #$11111111,d1
01:00001354 4E75            	  1936:                 rts
                            	  1937: 
                            	  1938: 
                            	  1939: 
01:00001356 61F6            	  1940: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
01:00001358 612A            	  1941:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
01:0000135A 6100EF0A        	  1942:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
01:0000135E 6100143E        	  1943:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1944: 
01:00001362 0C8111111111    	  1945:                 cmpi.l #$11111111,d1
01:00001368 66FE            	  1946:                 bne.s *
01:0000136A 0C8222222222    	  1947:                 cmpi.l #$22222222,d2
01:00001370 66FE            	  1948:                 bne.s *
01:00001372 0C8333333333    	  1949:                 cmpi.l #$33333333,d3
01:00001378 66FE            	  1950:                 bne.s *
01:0000137A 0C8444444444    	  1951:                 cmpi.l #$44444444,d4
01:00001380 66FE            	  1952:                 bne.s *
                            	  1953: 
01:00001382 4E75            	  1954:                 rts
                            	  1955: 
                            	  1956: 
01:00001384 243C22222222    	  1957: BSR_CLOSE2:     move.l #$22222222,d2
01:0000138A 4E75            	  1958:                 rts
                            	  1959: 
                            	  1960: *-----------------------------------------------------------
                            	  1961: *-----------------------------------------------------------
                            	  1962: * OPCODE : op_CMP_I
                            	  1963: *-----------------------------------------------------------
                            	  1964: *-----------------------------------------------------------
                            	  1965: op_CMP_I:
                            	  1966: 
01:0000138C 307C0100        	  1967:             move.l #$00000100,a0
01:00001390 20BC00000100    	  1968:             move.l #$00000100,(a0)
                            	  1969: 
                            	  1970: *     REGISTER - BYTE
01:00001396 7080            	  1971:             move.l #$FFFFFF80,d0
01:00001398 0C000080        	  1972:             cmpi.b #$80,d0
01:0000139C 66FE            	  1973:             bne.s *                       * Check Z Flag  beq/bne
01:0000139E 6BFE            	  1974:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013A0 65FE            	  1975:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013A2 69FE            	  1976:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1977: 
01:000013A4 223CFFFFF000    	  1978:             move.l #$FFFFF000,d1
01:000013AA 4A01            	  1979:             cmpi.b #$00,d1
01:000013AC 66FE            	  1980:             bne.s *                       * Check Z Flag  beq/bne
01:000013AE 6BFE            	  1981:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013B0 65FE            	  1982:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013B2 69FE            	  1983:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1984: 
01:000013B4 7481D442        	  1985:             move.l #$FFFFFF02,d2
01:000013B8 0C0200FF        	  1986:             cmpi.b #$FF,d2
01:000013BC 67FE            	  1987:             beq.s *                       * Check Z Flag  beq/bne
01:000013BE 6BFE            	  1988:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013C0 64FE            	  1989:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013C2 69FE            	  1990:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1991: 
01:000013C4 263CFFFFFF7F    	  1992:             move.l #$FFFFFF7F,d3
01:000013CA 0C0300FF        	  1993:             cmpi.b #$FF,d3
01:000013CE 67FE            	  1994:             beq.s *                       * Check Z Flag  beq/bne
01:000013D0 6AFE            	  1995:             bpl.s *                       * Check N Flag  bmi/bpl
01:000013D2 64FE            	  1996:             bcc.s *                       * Check C Flag  bcc/bcs
01:000013D4 68FE            	  1997:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1998: 
                            	  1999: 
                            	  2000: *     REGISTER - WORD
01:000013D6 203CFFFF8000    	  2001:             move.l #$FFFF8000,d0
01:000013DC 0C408000        	  2002:             cmpi.w #$8000,d0
01:000013E0 66FE            	  2003:             bne.s *                       * Check Z Flag  beq/bne
01:000013E2 6BFE            	  2004:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013E4 65FE            	  2005:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013E6 69FE            	  2006:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2007: 
01:000013E8 223CFFF00000    	  2008:             move.l #$FFF00000,d1
01:000013EE 4A41            	  2009:             cmpi.w #$0000,d1
01:000013F0 66FE            	  2010:             bne.s *                       * Check Z Flag  beq/bne
01:000013F2 6BFE            	  2011:             bmi.s *                       * Check N Flag  bmi/bpl
01:000013F4 65FE            	  2012:             bcs.s *                       * Check C Flag  bcc/bcs
01:000013F6 69FE            	  2013:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2014: 
01:000013F8 243CFFFF0002    	  2015:             move.l #$FFFF0002,d2
01:000013FE 0C42FFFF        	  2016:             cmpi.w #$FFFF,d2
01:00001402 67FE            	  2017:             beq.s *                       * Check Z Flag  beq/bne
01:00001404 6BFE            	  2018:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001406 64FE            	  2019:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001408 69FE            	  2020:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2021: 
01:0000140A 263CFFFF7FFF    	  2022:             move.l #$FFFF7FFF,d3
01:00001410 0C43FFFF        	  2023:             cmpi.w #$FFFF,d3
01:00001414 67FE            	  2024:             beq.s *                       * Check Z Flag  beq/bne
01:00001416 6AFE            	  2025:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001418 64FE            	  2026:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000141A 68FE            	  2027:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2028: 
                            	  2029: *     REGISTER - LONG
01:0000141C 203C80000000    	  2030:             move.l #$80000000,d0
01:00001422 0C8080000000    	  2031:             cmpi.l #$80000000,d0
01:00001428 66FE            	  2032:             bne.s *                       * Check Z Flag  beq/bne
01:0000142A 6BFE            	  2033:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000142C 65FE            	  2034:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000142E 69FE            	  2035:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2036: 
01:00001430 7200            	  2037:             moveq  #$00000000,d1
01:00001432 4A81            	  2038:             cmpi.l #$00000000,d1
01:00001434 66FE            	  2039:             bne.s *                       * Check Z Flag  beq/bne
01:00001436 6BFE            	  2040:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001438 65FE            	  2041:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000143A 69FE            	  2042:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2043: 
01:0000143C 7402            	  2044:             moveq  #$00000002,d2
01:0000143E 0C82FFFFFFFF    	  2045:             cmpi.l #$FFFFFFFF,d2
01:00001444 67FE            	  2046:             beq.s *                       * Check Z Flag  beq/bne
01:00001446 6BFE            	  2047:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001448 64FE            	  2048:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000144A 69FE            	  2049:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2050: 
01:0000144C 263C7FFFFFFF    	  2051:             move.l #$7FFFFFFF,d3
01:00001452 0C83FFFFFFFF    	  2052:             cmpi.l #$FFFFFFFF,d3
01:00001458 67FE            	  2053:             beq.s *                       * Check Z Flag  beq/bne
01:0000145A 6AFE            	  2054:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000145C 64FE            	  2055:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000145E 68FE            	  2056:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: 
                            	  2061: *     EA=x(An,Dn) - BYTE
01:00001460 307C0100        	  2062:             move.l #$00000100,a0
01:00001464 7E04            	  2063:             moveq  #$00000004,d7
                            	  2064: 
01:00001466 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
01:0000146E 21BCFFFFFF80700C	  2066:             move.l #$FFFFFF80,12(a0,d7)
01:00001476 0C300080700F    	  2067:             cmpi.b #$80,15(a0,d7)
01:0000147C 66FE            	  2068:             bne.s *                       * Check Z Flag  beq/bne
01:0000147E 6BFE            	  2069:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001480 65FE            	  2070:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001482 69FE            	  2071:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2072: 
01:00001484 21BCFFFFF000700C	  2073:             move.l #$FFFFF000,12(a0,d7)
01:0000148C 4A30700F        	  2074:             cmpi.b #$00,15(a0,d7)
01:00001490 66FE            	  2075:             bne.s *                       * Check Z Flag  beq/bne
01:00001492 6BFE            	  2076:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001494 65FE            	  2077:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001496 69FE            	  2078:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2079: 
01:00001498 21BCFFFFFF02700C	  2080:             move.l #$FFFFFF02,12(a0,d7)
01:000014A0 0C3000FF700F    	  2081:             cmpi.b #$FF,15(a0,d7)
01:000014A6 67FE            	  2082:             beq.s *                       * Check Z Flag  beq/bne
01:000014A8 6BFE            	  2083:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014AA 64FE            	  2084:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014AC 69FE            	  2085:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2086: 
01:000014AE 21BCFFFFFF7F700C	  2087:             move.l #$FFFFFF7F,12(a0,d7)
01:000014B6 0C3000FF700F    	  2088:             cmpi.b #$FF,15(a0,d7)
01:000014BC 67FE            	  2089:             beq.s *                       * Check Z Flag  beq/bne
01:000014BE 6AFE            	  2090:             bpl.s *                       * Check N Flag  bmi/bpl
01:000014C0 64FE            	  2091:             bcc.s *                       * Check C Flag  bcc/bcs
01:000014C2 68FE            	  2092:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2093: 
                            	  2094: 
                            	  2095: *     EA=x(An,Dn) - WORD
01:000014C4 21BCFFFF8000700C	  2096:             move.l #$FFFF8000,12(a0,d7)
01:000014CC 0C708000700E    	  2097:             cmpi.w #$8000,14(a0,d7)
01:000014D2 66FE            	  2098:             bne.s *                       * Check Z Flag  beq/bne
01:000014D4 6BFE            	  2099:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014D6 65FE            	  2100:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014D8 69FE            	  2101:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2102: 
01:000014DA 21BCFFF00000700C	  2103:             move.l #$FFF00000,12(a0,d7)
01:000014E2 4A70700E        	  2104:             cmpi.w #$0000,14(a0,d7)
01:000014E6 66FE            	  2105:             bne.s *                       * Check Z Flag  beq/bne
01:000014E8 6BFE            	  2106:             bmi.s *                       * Check N Flag  bmi/bpl
01:000014EA 65FE            	  2107:             bcs.s *                       * Check C Flag  bcc/bcs
01:000014EC 69FE            	  2108:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2109: 
01:000014EE 21BCFFFF0002700C	  2110:             move.l #$FFFF0002,12(a0,d7)
01:000014F6 0C70FFFF700E    	  2111:             cmpi.w #$FFFF,14(a0,d7)
01:000014FC 67FE            	  2112:             beq.s *                       * Check Z Flag  beq/bne
01:000014FE 6BFE            	  2113:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001500 64FE            	  2114:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001502 69FE            	  2115:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2116: 
01:00001504 21BCFFFF7FFF700C	  2117:             move.l #$FFFF7FFF,12(a0,d7)
01:0000150C 0C70FFFF700E    	  2118:             cmpi.w #$FFFF,14(a0,d7)
01:00001512 67FE            	  2119:             beq.s *                       * Check Z Flag  beq/bne
01:00001514 6AFE            	  2120:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001516 64FE            	  2121:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001518 68FE            	  2122:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2123: 
                            	  2124: *     EA=x(An,Dn) - LONG
01:0000151A 21BC80000000700C	  2125:             move.l #$80000000,12(a0,d7)
01:00001522 0CB080000000700C	  2126:             cmpi.l #$80000000,12(a0,d7)
01:0000152A 66FE            	  2127:             bne.s *                       * Check Z Flag  beq/bne
01:0000152C 6BFE            	  2128:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000152E 65FE            	  2129:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001530 69FE            	  2130:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2131: 
01:00001532 42B0700C        	  2132:             move.l #$00000000,12(a0,d7)
01:00001536 4AB0700C        	  2133:             cmpi.l #$00000000,12(a0,d7)
01:0000153A 66FE            	  2134:             bne.s *                       * Check Z Flag  beq/bne
01:0000153C 6BFE            	  2135:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000153E 65FE            	  2136:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001540 69FE            	  2137:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2138: 
01:00001542 21BC00000002700C	  2139:             move.l #$00000002,12(a0,d7)
01:0000154A 0CB0FFFFFFFF700C	  2140:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:00001552 67FE            	  2141:             beq.s *                       * Check Z Flag  beq/bne
01:00001554 6BFE            	  2142:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001556 64FE            	  2143:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001558 69FE            	  2144:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2145: 
01:0000155A 21BC7FFFFFFF700C	  2146:             move.l #$7FFFFFFF,12(a0,d7)
01:00001562 0CB0FFFFFFFF700C	  2147:             cmpi.l #$FFFFFFFF,12(a0,d7)
01:0000156A 67FE            	  2148:             beq.s *                       * Check Z Flag  beq/bne
01:0000156C 6AFE            	  2149:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000156E 64FE            	  2150:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001570 68FE            	  2151:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2152: 
                            	  2153: 
                            	  2154: 
                            	  2155: 
01:00001572 4E75            	  2156:             rts
                            	  2157: 
                            	  2158: 
                            	  2159: 
                            	  2160: *-----------------------------------------------------------
                            	  2161: *-----------------------------------------------------------
                            	  2162: * OPCODE : ADD_I
                            	  2163: *-----------------------------------------------------------
                            	  2164: *-----------------------------------------------------------
                            	  2165: op_ADD_I:
                            	  2166: 
                            	  2167: *     EA = Dn  - Byte
01:00001574 203C12345678    	  2168:             move.l #$12345678,d0      * populate test data
01:0000157A 06000000        	  2169:             addi.b #0,d0
01:0000157E 67FE            	  2170:             beq.s *                       * Check Z Flag  beq/bne
01:00001580 6BFE            	  2171:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001582 65FE            	  2172:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001584 69FE            	  2173:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001586 06000010        	  2174:             addi.b #$10,d0
01:0000158A 67FE            	  2175:             beq.s *                       * Check Z Flag  beq/bne
01:0000158C 6AFE            	  2176:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000158E 65FE            	  2177:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001590 68FE            	  2178:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001592 060000A5        	  2179:             addi.b #$A5,d0
01:00001596 67FE            	  2180:             beq.s *                       * Check Z Flag  beq/bne
01:00001598 6BFE            	  2181:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000159A 64FE            	  2182:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000159C 68FE            	  2183:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000159E 0C00002D        	  2184:             cmpi.b #$2D,d0
01:000015A2 66FE            	  2185:             bne.s *                       * Check Z Flag  beq/bne
                            	  2186: 
                            	  2187: *     EA = Dn  - WORD
01:000015A4 203C12345678    	  2188:             move.l #$12345678,d0      * populate test data
01:000015AA 06400000        	  2189:             addi.w #0,d0
01:000015AE 67FE            	  2190:             beq.s *                       * Check Z Flag  beq/bne
01:000015B0 6BFE            	  2191:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015B2 65FE            	  2192:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015B4 69FE            	  2193:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015B6 06407000        	  2194:             addi.w #$7000,d0
01:000015BA 67FE            	  2195:             beq.s *                       * Check Z Flag  beq/bne
01:000015BC 6AFE            	  2196:             bpl.s *                       * Check N Flag  bmi/bpl
01:000015BE 65FE            	  2197:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015C0 68FE            	  2198:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015C2 0640A55A        	  2199:             addi.w #$A55A,d0
01:000015C6 67FE            	  2200:             beq.s *                       * Check Z Flag  beq/bne
01:000015C8 6BFE            	  2201:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015CA 64FE            	  2202:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015CC 68FE            	  2203:             bvc.s *                       * Check V Flag  bvc/bvs
01:000015CE 0C406BD2        	  2204:             cmpi.w #$6BD2,d0
01:000015D2 66FE            	  2205:             bne.s *                       * Check Z Flag  beq/bne
                            	  2206: 
                            	  2207: *     EA = Dn  - LONG
01:000015D4 203C12345678    	  2208:             move.l #$12345678,d0      * populate test data
01:000015DA 068000000000    	  2209:             addi.l #0,d0
01:000015E0 67FE            	  2210:             beq.s *                       * Check Z Flag  beq/bne
01:000015E2 6BFE            	  2211:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015E4 65FE            	  2212:             bcs.s *                       * Check C Flag  bcc/bcs
01:000015E6 69FE            	  2213:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015E8 0680F0000000    	  2214:             addi.l #$F0000000,d0
01:000015EE 67FE            	  2215:             beq.s *                       * Check Z Flag  beq/bne
01:000015F0 6BFE            	  2216:             bmi.s *                       * Check N Flag  bmi/bpl
01:000015F2 64FE            	  2217:             bcc.s *                       * Check C Flag  bcc/bcs
01:000015F4 69FE            	  2218:             bvs.s *                       * Check V Flag  bvc/bvs
01:000015F6 0680855AA55A    	  2219:             addi.l #$855AA55A,d0
01:000015FC 67FE            	  2220:             beq.s *                       * Check Z Flag  beq/bne
01:000015FE 6AFE            	  2221:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001600 65FE            	  2222:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001602 69FE            	  2223:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001604 0680A0000000    	  2224:             addi.l #$A0000000,d0
01:0000160A 68FE            	  2225:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000160C 0C80278EFBD2    	  2226:             cmpi.l #$278EFBD2,d0
01:00001612 66FE            	  2227:             bne.s *                       * Check Z Flag  beq/bne
                            	  2228: 
                            	  2229: 
                            	  2230: 
                            	  2231: *     EA = x.L  - Byte
01:00001614 207C0000F100    	  2232:             move.l #$F100,a0      * populate test data
01:0000161A 20BC12345678    	  2233:             move.l #$12345678,(a0)     * populate test data
01:00001620 063900000000F103	  2234:             addi.b #0,$F103
01:00001628 67FE            	  2235:             beq.s *                       * Check Z Flag  beq/bne
01:0000162A 6BFE            	  2236:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000162C 65FE            	  2237:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000162E 69FE            	  2238:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001630 063900100000F103	  2239:             addi.b #$10,$F103
01:00001638 67FE            	  2240:             beq.s *                       * Check Z Flag  beq/bne
01:0000163A 6AFE            	  2241:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000163C 65FE            	  2242:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000163E 68FE            	  2243:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001640 063900A50000F103	  2244:             addi.b #$A5,$F103
01:00001648 67FE            	  2245:             beq.s *                       * Check Z Flag  beq/bne
01:0000164A 6BFE            	  2246:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000164C 64FE            	  2247:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000164E 68FE            	  2248:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001650 0C39002D0000F103	  2249:             cmpi.b #$2D,$F103
01:00001658 66FE            	  2250:             bne.s *                       * Check Z Flag  beq/bne
                            	  2251: 
                            	  2252: *     EA = x.L- WORD
01:0000165A 207C0000F100    	  2253:             move.l #$F100,a0      * populate test data
01:00001660 20BC12345678    	  2254:             move.l #$12345678,(a0)     * populate test data
01:00001666 067900000000F100	  2255:             addi.w #0,$F100
01:0000166E 67FE            	  2256:             beq.s *                       * Check Z Flag  beq/bne
01:00001670 6BFE            	  2257:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001672 65FE            	  2258:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001674 69FE            	  2259:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001676 067970000000F100	  2260:             addi.w #$7000,$F100
01:0000167E 67FE            	  2261:             beq.s *                       * Check Z Flag  beq/bne
01:00001680 6AFE            	  2262:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001682 65FE            	  2263:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001684 68FE            	  2264:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001686 0679A55A0000F100	  2265:             addi.w #$A55A,$F100
01:0000168E 67FE            	  2266:             beq.s *                       * Check Z Flag  beq/bne
01:00001690 6BFE            	  2267:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001692 64FE            	  2268:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001694 68FE            	  2269:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001696 0C79278E0000F100	  2270:             cmpi.w #$278E,$F100
01:0000169E 66FE            	  2271:             bne.s *                       * Check Z Flag  beq/bne
                            	  2272: 
                            	  2273: *     EA = x.L- LONG
01:000016A0 23FC123456780000	  2274:             move.l #$12345678,$F100  * populate test data
01:000016A8 F100
01:000016AA 06B9000000000000	  2275:             addi.l #0,$F100
01:000016B2 F100
01:000016B4 67FE            	  2276:             beq.s *                       * Check Z Flag  beq/bne
01:000016B6 6BFE            	  2277:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016B8 65FE            	  2278:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016BA 69FE            	  2279:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016BC 06B9F00000000000	  2280:             addi.l #$F0000000,$F100
01:000016C4 F100
01:000016C6 67FE            	  2281:             beq.s *                       * Check Z Flag  beq/bne
01:000016C8 6BFE            	  2282:             bmi.s *                       * Check N Flag  bmi/bpl
01:000016CA 64FE            	  2283:             bcc.s *                       * Check C Flag  bcc/bcs
01:000016CC 69FE            	  2284:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016CE 06B9855AA55A0000	  2285:             addi.l #$855AA55A,$F100
01:000016D6 F100
01:000016D8 67FE            	  2286:             beq.s *                       * Check Z Flag  beq/bne
01:000016DA 6AFE            	  2287:             bpl.s *                       * Check N Flag  bmi/bpl
01:000016DC 65FE            	  2288:             bcs.s *                       * Check C Flag  bcc/bcs
01:000016DE 69FE            	  2289:             bvs.s *                       * Check V Flag  bvc/bvs
01:000016E0 06B9A00000000000	  2290:             addi.l #$A0000000,$F100
01:000016E8 F100
01:000016EA 68FE            	  2291:             bvc.s *                       * Check V Flag  bvc/bvs
01:000016EC 0CB9278EFBD20000	  2292:             cmpi.l #$278EFBD2,$F100
01:000016F4 F100
01:000016F6 66FE            	  2293:             bne.s *                       * Check Z Flag  beq/bne
                            	  2294: 
01:000016F8 4E75            	  2295:             rts
                            	  2296: 
                            	  2297: 
                            	  2298: *-----------------------------------------------------------
                            	  2299: *-----------------------------------------------------------
                            	  2300: * OPCODE : SUB_I
                            	  2301: *-----------------------------------------------------------
                            	  2302: *-----------------------------------------------------------
                            	  2303: op_SUB_I:
                            	  2304: 
                            	  2305: *     EA = Dn  - Byte
01:000016FA 203C12345678    	  2306:             move.l #$12345678,d0      * populate test data
01:00001700 04000000        	  2307:             subi.b #0,d0
01:00001704 67FE            	  2308:             beq.s *                       * Check Z Flag  beq/bne
01:00001706 6BFE            	  2309:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001708 65FE            	  2310:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000170A 69FE            	  2311:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000170C 04000010        	  2312:             subi.b #$10,d0
01:00001710 67FE            	  2313:             beq.s *                       * Check Z Flag  beq/bne
01:00001712 6BFE            	  2314:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001714 65FE            	  2315:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001716 69FE            	  2316:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001718 040000A5        	  2317:             subi.b #$A5,d0
01:0000171C 67FE            	  2318:             beq.s *                       * Check Z Flag  beq/bne
01:0000171E 6AFE            	  2319:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001720 64FE            	  2320:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001722 68FE            	  2321:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001724 0C0000C3        	  2322:             cmpi.b #$C3,d0
01:00001728 66FE            	  2323:             bne.s *                       * Check Z Flag  beq/bne
                            	  2324: 
                            	  2325: *     EA = Dn  - WORD
01:0000172A 203C12345678    	  2326:             move.l #$12345678,d0      * populate test data
01:00001730 04400000        	  2327:             subi.w #0,d0
01:00001734 67FE            	  2328:             beq.s *                       * Check Z Flag  beq/bne
01:00001736 6BFE            	  2329:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001738 65FE            	  2330:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000173A 69FE            	  2331:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000173C 04407000        	  2332:             subi.w #$7000,d0
01:00001740 67FE            	  2333:             beq.s *                       * Check Z Flag  beq/bne
01:00001742 6AFE            	  2334:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001744 64FE            	  2335:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001746 69FE            	  2336:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001748 0440A55A        	  2337:             subi.w #$A55A,d0
01:0000174C 67FE            	  2338:             beq.s *                       * Check Z Flag  beq/bne
01:0000174E 6BFE            	  2339:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001750 65FE            	  2340:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001752 69FE            	  2341:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001754 0C40411E        	  2342:             cmpi.w #$411E,d0
01:00001758 66FE            	  2343:             bne.s *                       * Check Z Flag  beq/bne
                            	  2344: 
                            	  2345: *     EA = Dn  - LONG
01:0000175A 203C12345678    	  2346:             move.l #$12345678,d0      * populate test data
01:00001760 048000000000    	  2347:             subi.l #0,d0
01:00001766 67FE            	  2348:             beq.s *                       * Check Z Flag  beq/bne
01:00001768 6BFE            	  2349:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000176A 65FE            	  2350:             bcs.s *                       * Check C Flag  bcc/bcs
01:0000176C 69FE            	  2351:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000176E 0480F0000000    	  2352:             subi.l #$F0000000,d0
01:00001774 67FE            	  2353:             beq.s *                       * Check Z Flag  beq/bne
01:00001776 6BFE            	  2354:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001778 64FE            	  2355:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000177A 69FE            	  2356:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000177C 0480855AA55A    	  2357:             subi.l #$855AA55A,d0
01:00001782 67FE            	  2358:             beq.s *                       * Check Z Flag  beq/bne
01:00001784 6AFE            	  2359:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001786 64FE            	  2360:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001788 68FE            	  2361:             bvc.s *                       * Check V Flag  bvc/bvs
01:0000178A 0480A0000000    	  2362:             subi.l #$A0000000,d0
01:00001790 69FE            	  2363:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001792 0C80FCD9B11E    	  2364:             cmpi.l #$FCD9B11E,d0
01:00001798 66FE            	  2365:             bne.s *                       * Check Z Flag  beq/bne
                            	  2366: 
                            	  2367: 
                            	  2368: 
                            	  2369: *     EA = x.L  - Byte
01:0000179A 207C0000F100    	  2370:             move.l #$F100,a0      * populate test data
01:000017A0 20BC12345678    	  2371:             move.l #$12345678,(a0)     * populate test data
01:000017A6 043900000000F103	  2372:             subi.b #0,$F103
01:000017AE 67FE            	  2373:             beq.s *                       * Check Z Flag  beq/bne
01:000017B0 6BFE            	  2374:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017B2 65FE            	  2375:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017B4 69FE            	  2376:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017B6 043900100000F103	  2377:             subi.b #$10,$F103
01:000017BE 67FE            	  2378:             beq.s *                       * Check Z Flag  beq/bne
01:000017C0 6BFE            	  2379:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017C2 65FE            	  2380:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017C4 69FE            	  2381:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017C6 043900A50000F103	  2382:             subi.b #$A5,$F103
01:000017CE 67FE            	  2383:             beq.s *                       * Check Z Flag  beq/bne
01:000017D0 6AFE            	  2384:             bpl.s *                       * Check N Flag  bmi/bpl
01:000017D2 64FE            	  2385:             bcc.s *                       * Check C Flag  bcc/bcs
01:000017D4 68FE            	  2386:             bvc.s *                       * Check V Flag  bvc/bvs
01:000017D6 0C3900C30000F103	  2387:             cmpi.b #$C3,$F103
01:000017DE 66FE            	  2388:             bne.s *                       * Check Z Flag  beq/bne
                            	  2389: 
                            	  2390: *     EA = x.L- WORD
01:000017E0 207C0000F100    	  2391:             move.l #$F100,a0      * populate test data
01:000017E6 20BC12345678    	  2392:             move.l #$12345678,(a0)     * populate test data
01:000017EC 047900000000F100	  2393:             subi.w #0,$F100
01:000017F4 67FE            	  2394:             beq.s *                       * Check Z Flag  beq/bne
01:000017F6 6BFE            	  2395:             bmi.s *                       * Check N Flag  bmi/bpl
01:000017F8 65FE            	  2396:             bcs.s *                       * Check C Flag  bcc/bcs
01:000017FA 69FE            	  2397:             bvs.s *                       * Check V Flag  bvc/bvs
01:000017FC 047970000000F100	  2398:             subi.w #$7000,$F100
01:00001804 67FE            	  2399:             beq.s *                       * Check Z Flag  beq/bne
01:00001806 6AFE            	  2400:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001808 64FE            	  2401:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000180A 69FE            	  2402:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000180C 0479A55A0000F100	  2403:             subi.w #$A55A,$F100
01:00001814 67FE            	  2404:             beq.s *                       * Check Z Flag  beq/bne
01:00001816 6AFE            	  2405:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001818 64FE            	  2406:             bcc.s *                       * Check C Flag  bcc/bcs
01:0000181A 69FE            	  2407:             bvs.s *                       * Check V Flag  bvc/bvs
01:0000181C 0C79FCDA0000F100	  2408:             cmpi.w #$FCDA,$F100
01:00001824 66FE            	  2409:             bne.s *                       * Check Z Flag  beq/bne
                            	  2410: 
                            	  2411: *     EA = x.L- LONG
01:00001826 23FC123456780000	  2412:             move.l #$12345678,$F100  * populate test data
01:0000182E F100
01:00001830 04B9000000000000	  2413:             subi.l #0,$F100
01:00001838 F100
01:0000183A 67FE            	  2414:             beq.s *                       * Check Z Flag  beq/bne
01:0000183C 6BFE            	  2415:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000183E 65FE            	  2416:             bcs.s *                       * Check C Flag  bcc/bcs
01:00001840 69FE            	  2417:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001842 04B9F00000000000	  2418:             subi.l #$F0000000,$F100
01:0000184A F100
01:0000184C 67FE            	  2419:             beq.s *                       * Check Z Flag  beq/bne
01:0000184E 6BFE            	  2420:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001850 64FE            	  2421:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001852 69FE            	  2422:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001854 04B9855AA55A0000	  2423:             subi.l #$855AA55A,$F100
01:0000185C F100
01:0000185E 67FE            	  2424:             beq.s *                       * Check Z Flag  beq/bne
01:00001860 6AFE            	  2425:             bpl.s *                       * Check N Flag  bmi/bpl
01:00001862 64FE            	  2426:             bcc.s *                       * Check C Flag  bcc/bcs
01:00001864 68FE            	  2427:             bvc.s *                       * Check V Flag  bvc/bvs
01:00001866 04B9A00000000000	  2428:             subi.l #$A0000000,$F100
01:0000186E F100
01:00001870 69FE            	  2429:             bvs.s *                       * Check V Flag  bvc/bvs
01:00001872 0CB9FCD9B11E0000	  2430:             cmpi.l #$FCD9B11E,$F100
01:0000187A F100
01:0000187C 66FE            	  2431:             bne.s *                       * Check Z Flag  beq/bne
                            	  2432: 
01:0000187E 4E75            	  2433:             rts
                            	  2434: 
                            	  2435: 
                            	  2436: 
                            	  2437: *-----------------------------------------------------------
                            	  2438: *-----------------------------------------------------------
                            	  2439: * OPCODE : MOVE
                            	  2440: *-----------------------------------------------------------
                            	  2441: *-----------------------------------------------------------
                            	  2442: op_MOVE:
01:00001880 203C11223344    	  2443:             move.l #$11223344,d0
01:00001886 223C55667788    	  2444:             move.l #$55667788,d1
01:0000188C 243C8899AABB    	  2445:             move.l #$8899aabb,d2
01:00001892 263CCCDDEEFF    	  2446:             move.l #$ccddeeff,d3
01:00001898 7800            	  2447:             moveq  #$00000000,d4
01:0000189A 7A00            	  2448:             moveq  #$00000000,d5
01:0000189C 7C00            	  2449:             moveq  #$00000000,d6
01:0000189E 7E00            	  2450:             moveq  #$00000000,d7
01:000018A0 207C44332211    	  2451:             move.l #$44332211,a0
01:000018A6 227C88776655    	  2452:             move.l #$88776655,a1
01:000018AC 247CBBAA9988    	  2453:             move.l #$bbaa9988,a2
01:000018B2 267CFFEEDDCC    	  2454:             move.l #$ffeeddcc,a3
                            	  2455: 
01:000018B8 1800            	  2456:             move.b d0,d4              * BYTE - DATA REGISTER
01:000018BA 67FE            	  2457:             beq.s *                       * Check Z Flag  beq/bne
01:000018BC 6BFE            	  2458:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018BE 0C8400000044    	  2459:             cmpi.l #$00000044,d4
01:000018C4 66FE            	  2460:             bne.s *                       * Check Z Flag  beq/bne
                            	  2461: 
01:000018C6 3A01            	  2462:             move.w d1,d5              * WORD - DATA REGISTER
01:000018C8 67FE            	  2463:             beq.s *                       * Check Z Flag  beq/bne
01:000018CA 6BFE            	  2464:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018CC 0C8500007788    	  2465:             cmpi.l #$00007788,d5
01:000018D2 66FE            	  2466:             bne.s *                       * Check Z Flag  beq/bne
                            	  2467: 
01:000018D4 2C02            	  2468:             move.l d2,d6              * LONG - DATA REGISTER
01:000018D6 67FE            	  2469:             beq.s *                       * Check Z Flag  beq/bne
01:000018D8 6AFE            	  2470:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018DA 0C868899AABB    	  2471:             cmpi.l #$8899aabb,d6
01:000018E0 66FE            	  2472:             bne.s *                       * Check Z Flag  beq/bne
                            	  2473: 
01:000018E2 3A09            	  2474:             move.w a1,d5              * WORD - ADDRESS REGISTER
01:000018E4 67FE            	  2475:             beq.s *                       * Check Z Flag  beq/bne
01:000018E6 6BFE            	  2476:             bmi.s *                       * Check N Flag  bmi/bpl
01:000018E8 0C8500006655    	  2477:             cmpi.l #$00006655,d5
01:000018EE 66FE            	  2478:             bne.s *                       * Check Z Flag  beq/bne
                            	  2479: 
01:000018F0 2C0A            	  2480:             move.l a2,d6              * LONG - ADDRESS REGISTER
01:000018F2 67FE            	  2481:             beq.s *                       * Check Z Flag  beq/bne
01:000018F4 6AFE            	  2482:             bpl.s *                       * Check N Flag  bmi/bpl
01:000018F6 0C86BBAA9988    	  2483:             cmpi.l #$bbaa9988,d6
01:000018FC 66FE            	  2484:             bne.s *                       * Check Z Flag  beq/bne
                            	  2485: 
                            	  2486: 
01:000018FE 3842            	  2487:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
01:00001900 B9C2            	  2488:             cmpa.l d2,a4
01:00001902 67FE            	  2489:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2490: 
01:00001904 2A41            	  2491:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
01:00001906 BBC1            	  2492:             cmpa.l d1,a5
01:00001908 66FE            	  2493:             bne.s *                       * Check Z Flag  beq/bne
                            	  2494: 
                            	  2495: 
                            	  2496: 
                            	  2497: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2498: 
01:0000190A 203C11223344    	  2499:             move.l #$11223344,d0
01:00001910 223C00010100    	  2500:             move.l #$00010100,d1
01:00001916 243C8899AABB    	  2501:             move.l #$8899aabb,d2
01:0000191C 7601            	  2502:             moveq  #$00000001,d3
01:0000191E 7800            	  2503:             moveq  #$00000000,d4
01:00001920 7A00            	  2504:             moveq  #$00000000,d5
01:00001922 7C00            	  2505:             moveq  #$00000000,d6
01:00001924 7E00            	  2506:             moveq  #$00000000,d7
01:00001926 91C8            	  2507:             move.l #$00000000,a0
01:00001928 227C00010100    	  2508:             move.l #$00010100,a1
                            	  2509: 
                            	  2510: *     x(An,AL) --> x.L
01:0000192E 11BC005A9804    	  2511:             move.b #$5A,4(a0,a1.l)    * BYTE
01:00001934 47F09804        	  2512:             lea 4(a0,a1.l),a3
01:00001938 13F0980400010105	  2513:             move.b 4(a0,a1.l),$00010105
01:00001940 67FE            	  2514:             beq.s *                       * Check Z Flag  beq/bne
01:00001942 6BFE            	  2515:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001944 0C30005A9805    	  2516:             cmpi.b #$5A,5(a0,a1.l)
01:0000194A 66FE            	  2517:             bne.s *                       * Check Z Flag  beq/bne
                            	  2518: 
                            	  2519: *     x.L --> n(An,Dw)
01:0000194C 11B9000101051007	  2520: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
01:00001954 67FE            	  2521:             beq.s *                       * Check Z Flag  beq/bne
01:00001956 6BFE            	  2522:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001958 0C30005A1007    	  2523:             cmpi.b #$5A,7(a0,d1.w)
01:0000195E 66FE            	  2524:             bne.s *                       * Check Z Flag  beq/bne
                            	  2525: 
                            	  2526: *     x(PC,Ds) --> x.w
01:00001960 11FB30660100    	  2527:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
01:00001966 67FE            	  2528:             beq.s *                       * Check Z Flag  beq/bne
01:00001968 6AFE            	  2529:             bpl.s *                       * Check N Flag  bmi/bpl
01:0000196A 0C3900B90000194D	  2530:             cmpi.b #$B9,1+MOVE2
01:00001972 66FE            	  2531:             bne.s *                       * Check Z Flag  beq/bne
                            	  2532: 
                            	  2533: *     #x -->    n(An,AL)
01:00001974 11BC00781007    	  2534:             move.b  #$78,7(a0,d1.w)    * BYTE
01:0000197A 67FE            	  2535:             beq.s *                       * Check Z Flag  beq/bne
01:0000197C 6BFE            	  2536:             bmi.s *                       * Check N Flag  bmi/bpl
01:0000197E 0C3000781007    	  2537:             cmpi.b #$78,7(a0,d1.w)
01:00001984 66FE            	  2538:             bne.s *                       * Check Z Flag  beq/bne
                            	  2539: 
01:00001986 203C11223344    	  2540:             move.l #$11223344,d0
01:0000198C 223C00010100    	  2541:             move.l #$00010100,d1
01:00001992 243C8899AABB    	  2542:             move.l #$8899aabb,d2
01:00001998 7602            	  2543:             moveq  #$00000002,d3
01:0000199A 7800            	  2544:             moveq  #$00000000,d4
01:0000199C 7A00            	  2545:             moveq  #$00000000,d5
01:0000199E 7C00            	  2546:             moveq  #$00000000,d6
01:000019A0 7E00            	  2547:             moveq  #$00000000,d7
01:000019A2 91C8            	  2548:             move.l #$00000000,a0
01:000019A4 227C00010100    	  2549:             move.l #$00010100,a1
                            	  2550: 
                            	  2551: *     x(An,AL) --> x.L
01:000019AA 31BC5A5A9804    	  2552:             move.w #$5A5A,4(a0,a1.l)    * WORD
01:000019B0 49F09804        	  2553:             lea 4(a0,a1.l),a4
01:000019B4 33F0980400010104	  2554:             move.w 4(a0,a1.l),$00010104
01:000019BC 67FE            	  2555:             beq.s *                       * Check Z Flag  beq/bne
01:000019BE 6BFE            	  2556:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019C0 0C705A5A9804    	  2557:             cmpi.w #$5A5A,4(a0,a1.l)
01:000019C6 66FE            	  2558:             bne.s *                       * Check Z Flag  beq/bne
                            	  2559: 
                            	  2560: *     x.L --> n(An,Dw)
01:000019C8 31B9000101041006	  2561: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
01:000019D0 67FE            	  2562:             beq.s *                       * Check Z Flag  beq/bne
01:000019D2 6BFE            	  2563:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019D4 0C705A5A1006    	  2564:             cmpi.w #$5A5A,6(a0,d1.w)
01:000019DA 66FE            	  2565:             bne.s *                       * Check Z Flag  beq/bne
                            	  2566: 
                            	  2567: *     x(PC,Ds) --> x.w
01:000019DC 31FB30EA0100    	  2568:             move.w  MOVE1(pc,d3),$0100 * WORD
01:000019E2 67FE            	  2569:             beq.s *                       * Check Z Flag  beq/bne
01:000019E4 6BFE            	  2570:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019E6 0C7967FE000019D0	  2571:             cmpi.w #$67FE,8+MOVE1
01:000019EE 66FE            	  2572:             bne.s *                       * Check Z Flag  beq/bne
                            	  2573: 
                            	  2574: *     #x -->    n(An,AL)
01:000019F0 31BC78781006    	  2575:             move.w  #$7878,6(a0,d1.w)    * WORD
01:000019F6 67FE            	  2576:             beq.s *                       * Check Z Flag  beq/bne
01:000019F8 6BFE            	  2577:             bmi.s *                       * Check N Flag  bmi/bpl
01:000019FA 0C7078781006    	  2578:             cmpi.w #$7878,6(a0,d1.w)
01:00001A00 66FE            	  2579:             bne.s *                       * Check Z Flag  beq/bne
                            	  2580: 
                            	  2581: * ---
                            	  2582: 
01:00001A02 203C11223344    	  2583:             move.l #$11223344,d0
01:00001A08 223C00010100    	  2584:             move.l #$00010100,d1
01:00001A0E 243C8899AABB    	  2585:             move.l #$8899aabb,d2
01:00001A14 7602            	  2586:             moveq  #$00000002,d3
01:00001A16 7800            	  2587:             moveq  #$00000000,d4
01:00001A18 7A00            	  2588:             moveq  #$00000000,d5
01:00001A1A 7C00            	  2589:             moveq  #$00000000,d6
01:00001A1C 7E00            	  2590:             moveq  #$00000000,d7
01:00001A1E 91C8            	  2591:             move.l #$00000000,a0
01:00001A20 227C00010100    	  2592:             move.l #$00010100,a1
                            	  2593: 
                            	  2594: *     x(An,AL) --> x.L
01:00001A26 21BC5A5A12349804	  2595:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
01:00001A2E 49F09804        	  2596:             lea 4(a0,a1.l),a4
01:00001A32 23F0980400010104	  2597:             move.l 4(a0,a1.l),$00010104
01:00001A3A 67FE            	  2598:             beq.s *                       * Check Z Flag  beq/bne
01:00001A3C 6BFE            	  2599:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A3E 0CB05A5A12349804	  2600:             cmpi.l #$5A5A1234,4(a0,a1.l)
01:00001A46 66FE            	  2601:             bne.s *                       * Check Z Flag  beq/bne
                            	  2602: 
                            	  2603: *     x.L --> n(An,Dw)
01:00001A48 21B9000101041006	  2604: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
01:00001A50 67FE            	  2605:             beq.s *                       * Check Z Flag  beq/bne
01:00001A52 6BFE            	  2606:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A54 0CB05A5A12341006	  2607:             cmpi.l #$5A5A1234,6(a0,d1.w)
01:00001A5C 66FE            	  2608:             bne.s *                       * Check Z Flag  beq/bne
                            	  2609: 
                            	  2610: *     x(PC,Ds) --> x.w
01:00001A5E 21FB30E80100    	  2611:             move.l  MOVE3(pc,d3),$0100 * LONG
01:00001A64 67FE            	  2612:             beq.s *                       * Check Z Flag  beq/bne
01:00001A66 6BFE            	  2613:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A68 0CB967FE6BFE0000	  2614:             cmpi.l #$67FE6BFE,8+MOVE3
01:00001A70 1A50
01:00001A72 66FE            	  2615:             bne.s *                       * Check Z Flag  beq/bne
                            	  2616: 
                            	  2617: *     #x -->    n(An,AL)
01:00001A74 21BC787823231006	  2618:             move.l  #$78782323,6(a0,d1.w)    * LONG
01:00001A7C 67FE            	  2619:             beq.s *                       * Check Z Flag  beq/bne
01:00001A7E 6BFE            	  2620:             bmi.s *                       * Check N Flag  bmi/bpl
01:00001A80 0CB0787823231006	  2621:             cmpi.l #$78782323,6(a0,d1.w)
01:00001A88 66FE            	  2622:             bne.s *                       * Check Z Flag  beq/bne
                            	  2623: 
                            	  2624: 
01:00001A8A 4E75            	  2625:          rts
                            	  2626: 
                            	  2627: 
                            	  2628: *-----------------------------------------------------------
                            	  2629: *-----------------------------------------------------------
                            	  2630: * OPCODE : MOVE_xxx_FLAGS
                            	  2631: *-----------------------------------------------------------
                            	  2632: *-----------------------------------------------------------
                            	  2633: op_MOVE_xxx_FLAGS:
                            	  2634: 
                            	  2635: *     Move_To_SR
                            	  2636: 
                            	  2637: *     Dn
                            	  2638: 
01:00001A8C 303C2FFF        	  2639:             move.w #$2FFF,d0
01:00001A90 46C0            	  2640:             move.w d0,SR
01:00001A92 6AFE            	  2641:             bpl.s *           * branch if Z clear
01:00001A94 66FE            	  2642:             bne.s *           * branch if N clear
01:00001A96 68FE            	  2643:             bvc.s *           * branch if V clear
01:00001A98 64FE            	  2644:             bcc.s *           * branch if C clear
01:00001A9A 303C2F00        	  2645:             move.w #$2F00,d0
01:00001A9E 44C0            	  2646:             move d0,CCR
01:00001AA0 67FE            	  2647:             beq.s *           * branch if Z set
01:00001AA2 6BFE            	  2648:             bmi.s *           * branch if N set
01:00001AA4 69FE            	  2649:             bvs.s *           * branch if V set
01:00001AA6 65FE            	  2650:             bcs.s *           * branch if C set
                            	  2651: 
01:00001AA8 303C2000        	  2652:             move.w #$2000,d0
01:00001AAC 46C0            	  2653:             move.w d0,SR
01:00001AAE 67FE            	  2654:             beq.s *           * branch if Z set
01:00001AB0 6BFE            	  2655:             bmi.s *           * branch if N set
01:00001AB2 69FE            	  2656:             bvs.s *           * branch if V set
01:00001AB4 65FE            	  2657:             bcs.s *           * branch if C set
                            	  2658: 
                            	  2659: *     (An)
01:00001AB6 307C0100        	  2660:             move.l #$00000100,a0
01:00001ABA 30BC2FFF        	  2661:             move.w #$2FFF,(a0)
01:00001ABE 46D0            	  2662:             move.w (a0),SR
01:00001AC0 6AFE            	  2663:             bpl.s *           * branch if Z clear
01:00001AC2 66FE            	  2664:             bne.s *           * branch if N clear
01:00001AC4 68FE            	  2665:             bvc.s *           * branch if V clear
01:00001AC6 64FE            	  2666:             bcc.s *           * branch if C clear
                            	  2667: 
01:00001AC8 30BC2000        	  2668:             move.w #$2000,(a0)
01:00001ACC 46D0            	  2669:             move.w (a0),SR
01:00001ACE 67FE            	  2670:             beq.s *           * branch if Z set
01:00001AD0 6BFE            	  2671:             bmi.s *           * branch if N set
01:00001AD2 69FE            	  2672:             bvs.s *           * branch if V set
01:00001AD4 65FE            	  2673:             bcs.s *           * branch if C set
                            	  2674: 
                            	  2675: *     (An)+
01:00001AD6 307C0100        	  2676:             move.l #$00000100,a0
01:00001ADA 30BC2FFF        	  2677:             move.w #$2FFF,(a0)
01:00001ADE 46D8            	  2678:             move.w (a0)+,SR
01:00001AE0 6AFE            	  2679:             bpl.s *           * branch if Z clear
01:00001AE2 66FE            	  2680:             bne.s *           * branch if N clear
01:00001AE4 68FE            	  2681:             bvc.s *           * branch if V clear
01:00001AE6 64FE            	  2682:             bcc.s *           * branch if C clear
                            	  2683: 
01:00001AE8 30BC2000        	  2684:             move.w #$2000,(a0)
01:00001AEC 46D8            	  2685:             move.w (a0)+,SR
01:00001AEE 67FE            	  2686:             beq.s *           * branch if Z set
01:00001AF0 6BFE            	  2687:             bmi.s *           * branch if N set
01:00001AF2 69FE            	  2688:             bvs.s *           * branch if V set
01:00001AF4 65FE            	  2689:             bcs.s *           * branch if C set
                            	  2690: 
                            	  2691: *     -(An)
01:00001AF6 307C0102        	  2692:             move.l #$00000102,a0
01:00001AFA 30BC2FFF        	  2693:             move.w #$2FFF,(a0)
01:00001AFE 46D8            	  2694:             move.w (a0)+,SR
01:00001B00 6AFE            	  2695:             bpl.s *           * branch if Z clear
01:00001B02 66FE            	  2696:             bne.s *           * branch if N clear
01:00001B04 68FE            	  2697:             bvc.s *           * branch if V clear
01:00001B06 64FE            	  2698:             bcc.s *           * branch if C clear
                            	  2699: 
01:00001B08 30BC2000        	  2700:             move.w #$2000,(a0)
01:00001B0C 46D8            	  2701:             move.w (a0)+,SR
01:00001B0E 67FE            	  2702:             beq.s *           * branch if Z set
01:00001B10 6BFE            	  2703:             bmi.s *           * branch if N set
01:00001B12 69FE            	  2704:             bvs.s *           * branch if V set
01:00001B14 65FE            	  2705:             bcs.s *           * branch if C set
                            	  2706: 
                            	  2707: *     n(An)
01:00001B16 307C0102        	  2708:             move.l #$00000102,a0
01:00001B1A 317C2FFF0002    	  2709:             move.w #$2FFF,2(a0)
01:00001B20 46E80002        	  2710:             move.w 2(a0),SR
01:00001B24 6AFE            	  2711:             bpl.s *           * branch if Z clear
01:00001B26 66FE            	  2712:             bne.s *           * branch if N clear
01:00001B28 68FE            	  2713:             bvc.s *           * branch if V clear
01:00001B2A 64FE            	  2714:             bcc.s *           * branch if C clear
                            	  2715: 
01:00001B2C 317C20000002    	  2716:             move.w #$2000,2(a0)
01:00001B32 46E80002        	  2717:             move.w 2(a0),SR
01:00001B36 67FE            	  2718:             beq.s *           * branch if Z set
01:00001B38 6BFE            	  2719:             bmi.s *           * branch if N set
01:00001B3A 69FE            	  2720:             bvs.s *           * branch if V set
01:00001B3C 65FE            	  2721:             bcs.s *           * branch if C set
                            	  2722: 
                            	  2723: *     n(An,Rn.l)
01:00001B3E 307C0100        	  2724:             move.l #$00000100,a0
01:00001B42 7002            	  2725:             moveq  #$00000002,d0
01:00001B44 31BC2FFF0802    	  2726:             move.w #$2FFF,2(a0,d0.l)
01:00001B4A 46F00802        	  2727:             move.w 2(a0,d0.l),SR
01:00001B4E 6AFE            	  2728:             bpl.s *           * branch if Z clear
01:00001B50 66FE            	  2729:             bne.s *           * branch if N clear
01:00001B52 68FE            	  2730:             bvc.s *           * branch if V clear
01:00001B54 64FE            	  2731:             bcc.s *           * branch if C clear
                            	  2732: 
01:00001B56 31BC20000802    	  2733:             move.w #$2000,2(a0,d0.l)
01:00001B5C 46F00802        	  2734:             move.w 2(a0,d0.l),SR
01:00001B60 67FE            	  2735:             beq.s *           * branch if Z set
01:00001B62 6BFE            	  2736:             bmi.s *           * branch if N set
01:00001B64 69FE            	  2737:             bvs.s *           * branch if V set
01:00001B66 65FE            	  2738:             bcs.s *           * branch if C set
                            	  2739: 
                            	  2740: *     x.W
01:00001B68 31FC2FFF0100    	  2741:             move.w #$2FFF,$0100
01:00001B6E 46F80100        	  2742:             move.w $0100,SR
01:00001B72 6AFE            	  2743:             bpl.s *           * branch if Z clear
01:00001B74 66FE            	  2744:             bne.s *           * branch if N clear
01:00001B76 68FE            	  2745:             bvc.s *           * branch if V clear
01:00001B78 64FE            	  2746:             bcc.s *           * branch if C clear
                            	  2747: 
01:00001B7A 31FC20000100    	  2748:             move.w #$2000,$0100
01:00001B80 46F80100        	  2749:             move.w $0100,SR
01:00001B84 67FE            	  2750:             beq.s *           * branch if Z set
01:00001B86 6BFE            	  2751:             bmi.s *           * branch if N set
01:00001B88 69FE            	  2752:             bvs.s *           * branch if V set
01:00001B8A 65FE            	  2753:             bcs.s *           * branch if C set
                            	  2754: 
                            	  2755: *     x.L
01:00001B8C 33FC2FFF00010100	  2756:             move.w #$2FFF,$00010100
01:00001B94 46F900010100    	  2757:             move.w $00010100,SR
01:00001B9A 6AFE            	  2758:             bpl.s *           * branch if Z clear
01:00001B9C 66FE            	  2759:             bne.s *           * branch if N clear
01:00001B9E 68FE            	  2760:             bvc.s *           * branch if V clear
01:00001BA0 64FE            	  2761:             bcc.s *           * branch if C clear
                            	  2762: 
01:00001BA2 33FC200000010100	  2763: MOVE4:      move.w #$2000,$00010100
01:00001BAA 46F900010100    	  2764:             move.w $00010100,SR
01:00001BB0 67FE            	  2765:             beq.s *           * branch if Z set
01:00001BB2 6BFE            	  2766:             bmi.s *           * branch if N set
01:00001BB4 69FE            	  2767:             bvs.s *           * branch if V set
01:00001BB6 65FE            	  2768:             bcs.s *           * branch if C set
                            	  2769: 
                            	  2770: *     x(PC)
01:00001BB8 46FAFFEA        	  2771:             move.w MOVE4+2(pc),SR
01:00001BBC 67FE            	  2772:             beq.s *           * branch if Z set
01:00001BBE 6BFE            	  2773:             bmi.s *           * branch if N set
01:00001BC0 69FE            	  2774:             bvs.s *           * branch if V set
01:00001BC2 65FE            	  2775:             bcs.s *           * branch if C set
                            	  2776: 
                            	  2777: *     x(PC,d0.l)
01:00001BC4 7000            	  2778:             moveq  #$00000000,d0
01:00001BC6 46FB08DC        	  2779:             move.w MOVE4+2(pc,d0.l),SR
01:00001BCA 67FE            	  2780:             beq.s *           * branch if Z set
01:00001BCC 6BFE            	  2781:             bmi.s *           * branch if N set
01:00001BCE 69FE            	  2782:             bvs.s *           * branch if V set
01:00001BD0 65FE            	  2783:             bcs.s *           * branch if C set
01:00001BD2 44FB08D0        	  2784:             move MOVE4+2(pc,d0.l),CCR
01:00001BD6 67FE            	  2785:             beq.s *           * branch if Z set
01:00001BD8 6BFE            	  2786:             bmi.s *           * branch if N set
01:00001BDA 69FE            	  2787:             bvs.s *           * branch if V set
01:00001BDC 65FE            	  2788:             bcs.s *           * branch if C set
                            	  2789: 
                            	  2790: *     #x
01:00001BDE 46FC2FFF        	  2791:             move.w #$2FFF,SR
01:00001BE2 66FE            	  2792:             bne.s *           * branch if Z clear
01:00001BE4 6AFE            	  2793:             bpl.s *           * branch if N clear
01:00001BE6 68FE            	  2794:             bvc.s *           * branch if V clear
01:00001BE8 64FE            	  2795:             bcc.s *           * branch if C clear
                            	  2796: 
                            	  2797: 
                            	  2798: 
                            	  2799: *  MOVE_From_SR
                            	  2800: 
                            	  2801: 
                            	  2802: 
                            	  2803: *     Dn
01:00001BEA 46FC275A        	  2804:             move.w #$275A,SR          * Initial value
01:00001BEE 40C0            	  2805:             move.w SR,d0
01:00001BF0 0C40271A        	  2806:             cmpi.w #$271A,d0
                            	  2807: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2808: *            bne.s *                   * branch if Z set
                            	  2809: 
                            	  2810: *     (An)
01:00001BF4 307C0100        	  2811:             move.l #$00000100,a0
01:00001BF8 46FC275A        	  2812:             move.w #$275A,SR          * Initial value
01:00001BFC 40D0            	  2813:             move.w SR,(a0)
01:00001BFE 0C50275A        	  2814:             cmpi.w #$275A,(a0)
01:00001C02 66FE            	  2815:             bne.s *                   * branch if Z set
                            	  2816: 
                            	  2817: *     (An)+
01:00001C04 307C0100        	  2818:             move.l #$00000100,a0
01:00001C08 46FC257A        	  2819:             move.w #$257A,SR          * Initial value
01:00001C0C 40D8            	  2820:             move.w SR,(a0)+
01:00001C0E 307C0100        	  2821:             move.l #$00000100,a0
01:00001C12 0C58257A        	  2822:             cmpi.w #$257A,(a0)+
01:00001C16 66FE            	  2823:             bne.s *                   * branch if Z set
                            	  2824: 
                            	  2825: *     -(An)
01:00001C18 307C0102        	  2826:             move.l #$00000102,a0
01:00001C1C 46FC2766        	  2827:             move.w #$2766,SR          * Initial value
01:00001C20 40E0            	  2828:             move.w SR,-(a0)
01:00001C22 307C0100        	  2829:             move.l #$00000100,a0
01:00001C26 0C502766        	  2830:             cmpi.w #$2766,(a0)
01:00001C2A 66FE            	  2831:             bne.s *                   * branch if Z set
                            	  2832: 
                            	  2833: *     x(An)
01:00001C2C 307C0102        	  2834:             move.l #$00000102,a0
01:00001C30 46FC2733        	  2835:             move.w #$2733,SR          * Initial value
01:00001C34 40E80004        	  2836:             move.w SR,4(a0)
01:00001C38 0C6827330004    	  2837:             cmpi.w #$2733,4(a0)
01:00001C3E 66FE            	  2838:             bne.s *                   * branch if Z set
                            	  2839: 
                            	  2840: *     x(An,rn)
01:00001C40 307C0102        	  2841:             move.l #$00000102,a0
01:00001C44 7004            	  2842:             moveq  #$00000004,d0
01:00001C46 46FC275A        	  2843:             move.w #$275a,SR          * Initial value
01:00001C4A 40F00804        	  2844:             move.w SR,4(a0,d0.l)
01:00001C4E 0C70275A0804    	  2845:             cmpi.w #$275a,4(a0,d0.l)
01:00001C54 66FE            	  2846:             bne.s *                   * branch if Z set
                            	  2847: 
                            	  2848: *     x.W
01:00001C56 46FC2777        	  2849:             move.w #$2777,SR          * Initial value
01:00001C5A 40F80102        	  2850:             move.w SR,$0102
01:00001C5E 0C7827770102    	  2851:             cmpi.w #$2777,$0102
01:00001C64 66FE            	  2852:             bne.s *                   * branch if Z set
                            	  2853: 
                            	  2854: *     x.L
01:00001C66 46FC2777        	  2855:             move.w #$2777,SR          * Initial value
01:00001C6A 40F900010102    	  2856:             move.w SR,$10102
01:00001C70 0C79277700010102	  2857:             cmpi.w #$2777,$10102
01:00001C78 66FE            	  2858:             bne.s *                   * branch if Z set
                            	  2859: 
                            	  2860: 
                            	  2861: 
01:00001C7A 46FC2700        	  2862:             move.w #$2700,SR          * Put flags back to initial value
                            	  2863: 
01:00001C7E 4E75            	  2864:             rts
                            	  2865: 
                            	  2866: 
                            	  2867: *-----------------------------------------------------------
                            	  2868: *-----------------------------------------------------------
                            	  2869: * OPCODE : EXT
                            	  2870: *-----------------------------------------------------------
                            	  2871: *-----------------------------------------------------------
                            	  2872: op_EXT:
                            	  2873: 
01:00001C80 707F            	  2874:             move.l #$0000007F,d0
01:00001C82 223C00008FFF    	  2875:             move.l #$00008FFF,d1
01:00001C88 7400            	  2876:             moveq  #$00000000,d2
                            	  2877: 
01:00001C8A 4880            	  2878:             ext.w d0
01:00001C8C 6BFE            	  2879:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001C8E 67FE            	  2880:             beq.s *                   * Check Z Flag  beq/bne
01:00001C90 0C800000007F    	  2881:             cmpi.l #$0000007F,d0
01:00001C96 66FE            	  2882:             bne.s *                   * branch if Z set
                            	  2883: 
01:00001C98 48C1            	  2884:             ext.l d1
01:00001C9A 6AFE            	  2885:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001C9C 67FE            	  2886:             beq.s *                   * Check Z Flag  beq/bne
01:00001C9E 0C81FFFF8FFF    	  2887:             cmpi.l #$FFFF8FFF,d1
01:00001CA4 66FE            	  2888:             bne.s *                   * branch if Z set
                            	  2889: 
01:00001CA6 48C2            	  2890:             ext.l d2
01:00001CA8 66FE            	  2891:             bne.s *                   * Check Z Flag  beq/bne
                            	  2892: 
                            	  2893: 
                            	  2894: 
01:00001CAA 4E75            	  2895:             rts
                            	  2896: 
                            	  2897: 
                            	  2898: *-----------------------------------------------------------
                            	  2899: *-----------------------------------------------------------
                            	  2900: * OPCODE : SWAP
                            	  2901: *-----------------------------------------------------------
                            	  2902: *-----------------------------------------------------------
                            	  2903: op_SWAP:
                            	  2904: 
01:00001CAC 203C12345678    	  2905:             move.l #$12345678,d0
                            	  2906: 
01:00001CB2 4840            	  2907:             swap d0
01:00001CB4 6BFE            	  2908:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001CB6 67FE            	  2909:             beq.s *                   * Check Z Flag  beq/bne
01:00001CB8 0C8056781234    	  2910:             cmpi.l #$56781234,d0
01:00001CBE 66FE            	  2911:             bne.s *                   * branch if Z set
                            	  2912: 
                            	  2913: 
                            	  2914: 
01:00001CC0 4E75            	  2915:             rts
                            	  2916: 
                            	  2917: 
                            	  2918: *-----------------------------------------------------------
                            	  2919: *-----------------------------------------------------------
                            	  2920: * OPCODE : LEA_PEA
                            	  2921: *-----------------------------------------------------------
                            	  2922: *-----------------------------------------------------------
                            	  2923: op_LEAPEA:
                            	  2924: 
01:00001CC2 207C00345678    	  2925:             move.l #$00345678,a0
01:00001CC8 7800            	  2926:             moveq  #$00000000,d4
                            	  2927: 
                            	  2928: *     (An)
01:00001CCA 4DD0            	  2929:             lea (a0),a6
01:00001CCC 200E            	  2930:             move.l a6,d0
01:00001CCE 0C8000345678    	  2931:             cmpi.l #$00345678,d0
01:00001CD4 66FE            	  2932:             bne.s *                   * branch if Z set
01:00001CD6 4850            	  2933:             pea (a0)
01:00001CD8 0C9700345678    	  2934:             cmpi.l #$00345678,(a7)
01:00001CDE 66FE            	  2935:             bne.s *                   * branch if Z set
                            	  2936:             * This was without a specifier which the assembler defaulted to .w
01:00001CE0 588F            	  2937:             addq.l #4,a7            * Restore Stack Pointer
                            	  2938: 
                            	  2939: *     x(An)
01:00001CE2 4DE80004        	  2940:             lea 4(a0),a6
01:00001CE6 200E            	  2941:             move.l a6,d0
01:00001CE8 0C800034567C    	  2942:             cmpi.l #$0034567C,d0
01:00001CEE 66FE            	  2943:             bne.s *                   * branch if Z set
01:00001CF0 48680004        	  2944:             pea 4(a0)
01:00001CF4 0C970034567C    	  2945:             cmpi.l #$0034567C,(a7)
01:00001CFA 66FE            	  2946:             bne.s *                   * branch if Z set
                            	  2947:             * This was without a specifier which the assembler defaulted to .w
01:00001CFC 588F            	  2948:             addq.l #4,a7            * Restore Stack Pointer
                            	  2949: 
                            	  2950: *     x(An,Dn.l)
01:00001CFE 4DF04004        	  2951:             lea 4(a0,d4),a6
01:00001D02 200E            	  2952:             move.l a6,d0
01:00001D04 0C800034567C    	  2953:             cmpi.l #$0034567C,d0
01:00001D0A 66FE            	  2954:             bne.s *                   * branch if Z set
01:00001D0C 48704804        	  2955:             pea 4(a0,d4.l)
01:00001D10 0C970034567C    	  2956:             cmpi.l #$0034567C,(a7)
01:00001D16 66FE            	  2957:             bne.s *                   * branch if Z set
                            	  2958:             * This was without a specifier which the assembler defaulted to .w
01:00001D18 588F            	  2959:             addq.l #4,a7            * Restore Stack Pointer
                            	  2960: 
                            	  2961: *     x.W
01:00001D1A 4DF81234        	  2962:             lea $1234,a6
01:00001D1E 200E            	  2963:             move.l a6,d0
01:00001D20 0C401234        	  2964:             cmpi.w #$1234,d0
01:00001D24 66FE            	  2965:             bne.s *                   * branch if Z set
01:00001D26 48781234        	  2966:             pea $1234
01:00001D2A 0C9700001234    	  2967:             cmpi.l #$00001234,(a7)
01:00001D30 66FE            	  2968:             bne.s *                   * branch if Z set
                            	  2969:             * This was without a specifier which the assembler defaulted to .w
01:00001D32 588F            	  2970:             addq.l #4,a7            * Restore Stack Pointer
                            	  2971: 
                            	  2972: *     x.L
01:00001D34 4DF900345678    	  2973:             lea $00345678,a6
01:00001D3A 200E            	  2974:             move.l a6,d0
01:00001D3C B08E            	  2975:             cmp.l a6,d0
01:00001D3E 66FE            	  2976:             bne.s *                   * branch if Z set
01:00001D40 487900345678    	  2977:             pea $00345678
01:00001D46 0C9700345678    	  2978:             cmpi.l #$00345678,(a7)
01:00001D4C 66FE            	  2979:             bne.s *                   * branch if Z set
                            	  2980:             * This was without a specifier which the assembler defaulted to .w
01:00001D4E 588F            	  2981:             addq.l #4,a7            * Restore Stack Pointer
                            	  2982: 
                            	  2983: *     x(PC)
01:00001D50 4DFA0008        	  2984:             lea LEA1(pc),a6
01:00001D54 200E            	  2985:             move.l a6,d0
01:00001D56 B08E            	  2986:             cmp.l a6,d0
01:00001D58 66FE            	  2987:             bne.s *                   * branch if Z set
01:00001D5A 487AFFFE        	  2988: LEA1:       pea LEA1(pc)
01:00001D5E 0C970000241E    	  2989:             cmpi.l #$0000241E,(a7)
01:00001D64 67FE            	  2990:             beq.s *                   * branch if Z clear
                            	  2991:             * This was without a specifier which the assembler defaulted to .w
01:00001D66 588F            	  2992:             addq.l #4,a7              * Restore Stack Pointer
                            	  2993: 
                            	  2994: 
                            	  2995: 
                            	  2996: 
01:00001D68 46FC2700        	  2997:             move.w #$2700,sr          * Put flags back to initial value
                            	  2998: 
01:00001D6C 4E75            	  2999:             rts
                            	  3000:  	
                            	  3001: 
                            	  3002: 
                            	  3003: *-----------------------------------------------------------
                            	  3004: *-----------------------------------------------------------
                            	  3005: * OPCODE : LEA_TAS
                            	  3006: *-----------------------------------------------------------
                            	  3007: *-----------------------------------------------------------
                            	  3008: op_TAS:
                            	  3009: 
                            	  3010: *     Test just one addressing mode
                            	  3011: 
01:00001D6E 307C0100        	  3012:             move.l #$00000100,a0
                            	  3013: 
                            	  3014: *     (An)
01:00001D72 4210            	  3015:             move.b #$00,(a0)
01:00001D74 6BFE            	  3016:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D76 66FE            	  3017:             bne.s *                   * Check Z Flag  beq/bne
01:00001D78 4AD0            	  3018:             tas (a0)
01:00001D7A 0C100080        	  3019:             cmpi.b #$80,(a0)
01:00001D7E 66FE            	  3020:             bne.s *                   * branch if Z set
01:00001D80 10BC00F5        	  3021:             move.b #$F5,(a0)
01:00001D84 4AD0            	  3022:             tas (a0)
01:00001D86 6AFE            	  3023:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001D88 67FE            	  3024:             beq.s *                   * Check Z Flag  beq/bne
01:00001D8A 4AD0            	  3025:             tas (a0)
01:00001D8C 0C1000F5        	  3026:             cmpi.b #$F5,(a0)
01:00001D90 66FE            	  3027:             bne.s *                   * branch if Z set
                            	  3028: 
01:00001D92 4E75            	  3029:             rts
                            	  3030: 
                            	  3031: 
                            	  3032: *-----------------------------------------------------------
                            	  3033: *-----------------------------------------------------------
                            	  3034: * OPCODE : LEA_TST
                            	  3035: *-----------------------------------------------------------
                            	  3036: *-----------------------------------------------------------
                            	  3037: op_TST:
                            	  3038: 
                            	  3039: *     Test just one addressing mode
                            	  3040: 
01:00001D94 307C0100        	  3041:             move.l #$00000100,a0
                            	  3042: 
                            	  3043: *     (An) - BYTE
01:00001D98 4210            	  3044:             move.b #$00,(a0)
01:00001D9A 4A10            	  3045:             tst.b (a0)
01:00001D9C 6BFE            	  3046:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001D9E 66FE            	  3047:             bne.s *                   * Check Z Flag  beq/bne
01:00001DA0 10BC00F5        	  3048:             move.b #$F5,(a0)
01:00001DA4 4A10            	  3049:             tst.b (a0)
01:00001DA6 6AFE            	  3050:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DA8 67FE            	  3051:             beq.s *                   * Check Z Flag  beq/bne
                            	  3052: 
                            	  3053: *     (An) - WORD
01:00001DAA 4250            	  3054:             move.w #$0000,(a0)
01:00001DAC 4A50            	  3055:             tst.w (a0)
01:00001DAE 6BFE            	  3056:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DB0 66FE            	  3057:             bne.s *                   * Check Z Flag  beq/bne
01:00001DB2 30BCF567        	  3058:             move.w #$F567,(a0)
01:00001DB6 4A50            	  3059:             tst.w (a0)
01:00001DB8 6AFE            	  3060:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DBA 67FE            	  3061:             beq.s *                   * Check Z Flag  beq/bne
                            	  3062: 
                            	  3063: *     (An) - LONG
01:00001DBC 4290            	  3064:             move.l #$00000000,(a0)
01:00001DBE 4A90            	  3065:             tst.l (a0)
01:00001DC0 6BFE            	  3066:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001DC2 66FE            	  3067:             bne.s *                   * Check Z Flag  beq/bne
01:00001DC4 20BCF56789AB    	  3068:             move.l #$F56789ab,(a0)
01:00001DCA 4A90            	  3069:             tst.l (a0)
01:00001DCC 6AFE            	  3070:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001DCE 67FE            	  3071:             beq.s *                   * Check Z Flag  beq/bne
                            	  3072: 
                            	  3073: 
01:00001DD0 4E75            	  3074:             rts
                            	  3075: 
                            	  3076: 
                            	  3077: *-----------------------------------------------------------
                            	  3078: *-----------------------------------------------------------
                            	  3079: * OPCODE : LINKS
                            	  3080: *-----------------------------------------------------------
                            	  3081: *-----------------------------------------------------------
                            	  3082: op_LINKS:
                            	  3083: 
01:00001DD2 207C11223344    	  3084:             move.l #$11223344,a0
01:00001DD8 203C11223344    	  3085:             move.l #$11223344,d0
01:00001DDE 4E500000        	  3086:             link a0,#$0
01:00001DE2 0C9711223344    	  3087:             cmpi.l #$11223344,(a7)
                            	  3088: 
01:00001DE8 4E58            	  3089:             unlk a0
01:00001DEA B1C0            	  3090:             cmp.l d0,a0
01:00001DEC 66FE            	  3091:             bne.s *                   * branch if Z set
                            	  3092: 
01:00001DEE 4E75            	  3093:             rts
                            	  3094: 
                            	  3095: *-----------------------------------------------------------
                            	  3096: *-----------------------------------------------------------
                            	  3097: * OPCODE : MOVE_USP
                            	  3098: *-----------------------------------------------------------
                            	  3099: *-----------------------------------------------------------
                            	  3100: op_MOVE_USP:
                            	  3101: 
01:00001DF0 207C11223344    	  3102:             move.l #$11223344,a0
01:00001DF6 4E60            	  3103:             move a0,USP
01:00001DF8 4E69            	  3104:             move USP,a1
01:00001DFA B3C8            	  3105:             cmp.l a0,a1
01:00001DFC 66FE            	  3106:             bne.s *                   * branch if Z set
                            	  3107: 
01:00001DFE 4E75            	  3108:             rts
                            	  3109: 
                            	  3110: 
                            	  3111: *-----------------------------------------------------------
                            	  3112: *-----------------------------------------------------------
                            	  3113: * OPCODE : CHK
                            	  3114: *-----------------------------------------------------------
                            	  3115: *-----------------------------------------------------------
                            	  3116: op_CHK:
01:00001E00 303C1122        	  3117:             move.w #$1122,d0
01:00001E04 323C1122        	  3118:             move.w #$1122,d1
01:00001E08 4380            	  3119:             chk d0,d1
                            	  3120: 
01:00001E0A 4E71            	  3121:             nop
01:00001E0C 4E71            	  3122:             nop
                            	  3123: 
01:00001E0E 323C1122        	  3124:             move.w #$1122,d1
01:00001E12 43BC1122        	  3125:             chk #$1122,d1
                            	  3126: 
01:00001E16 323C1122        	  3127:             move.w #$1122,d1
01:00001E1A 43BC007A        	  3128:             chk #00122,d1
01:00001E1E BCBCEEEE0006    	  3129:             cmp.l #$EEEE0006,d6
01:00001E24 66FE            	  3130:             bne.s *                   * branch if Z set
                            	  3131: 
01:00001E26 303C1122        	  3132:             move.w #$1122,d0
01:00001E2A 323C8000        	  3133:             move.w #$8000,d1
01:00001E2E 4380            	  3134:             chk d0,d1
01:00001E30 BCBCEEEE0006    	  3135:             cmp.l #$EEEE0006,d6
01:00001E36 66FE            	  3136:             bne.s *                   * branch if Z set
                            	  3137: 
01:00001E38 4E75            	  3138:             rts
                            	  3139: 
                            	  3140: 
                            	  3141: *-----------------------------------------------------------
                            	  3142: *-----------------------------------------------------------
                            	  3143: * OPCODE : NEGS
                            	  3144: *-----------------------------------------------------------
                            	  3145: *-----------------------------------------------------------
                            	  3146: op_NEGS:
                            	  3147: 
                            	  3148: *     NOT - BYTE
01:00001E3A 307C0100        	  3149:             move.l #$00000100,a0
01:00001E3E 7000            	  3150:             moveq  #$00000000,d0
01:00001E40 4600            	  3151:             not.b d0
01:00001E42 6AFE            	  3152:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E44 67FE            	  3153:             beq.s *                   * Check Z Flag  beq/bne
01:00001E46 4600            	  3154:             not.b d0
01:00001E48 6BFE            	  3155:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E4A 66FE            	  3156:             bne.s *                   * Check Z Flag  beq/bne
01:00001E4C 4A00            	  3157:             cmpi.b #$00,d0
01:00001E4E 66FE            	  3158:             bne.s *                   * Check Z Flag  beq/bne
01:00001E50 10BC0080        	  3159:             move.b #$80,(a0)
01:00001E54 4610            	  3160:             not.b (a0)
01:00001E56 6BFE            	  3161:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E58 67FE            	  3162:             beq.s *                   * Check Z Flag  beq/bne
01:00001E5A 4610            	  3163:             not.b (a0)
01:00001E5C 6AFE            	  3164:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E5E 67FE            	  3165:             beq.s *                   * Check Z Flag  beq/bne
01:00001E60 0C100080        	  3166:             cmpi.b #$80,(a0)
01:00001E64 66FE            	  3167:             bne.s *                   * Check Z Flag  beq/bne
                            	  3168: 
                            	  3169: *     NOT - WORD
01:00001E66 307C0100        	  3170:             move.l #$00000100,a0
01:00001E6A 7000            	  3171:             moveq  #$00000000,d0
01:00001E6C 4640            	  3172:             not.w d0
01:00001E6E 6AFE            	  3173:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E70 67FE            	  3174:             beq.s *                   * Check Z Flag  beq/bne
01:00001E72 4640            	  3175:             not.w d0
01:00001E74 6BFE            	  3176:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E76 66FE            	  3177:             bne.s *                   * Check Z Flag  beq/bne
01:00001E78 4A40            	  3178:             cmpi.w #$0000,d0
01:00001E7A 66FE            	  3179:             bne.s *                   * Check Z Flag  beq/bne
01:00001E7C 30BC5A5A        	  3180:             move.w #$5a5a,(a0)
01:00001E80 4650            	  3181:             not.w (a0)
01:00001E82 6AFE            	  3182:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E84 67FE            	  3183:             beq.s *                   * Check Z Flag  beq/bne
01:00001E86 4650            	  3184:             not.w (a0)
01:00001E88 6BFE            	  3185:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001E8A 67FE            	  3186:             beq.s *                   * Check Z Flag  beq/bne
01:00001E8C 0C505A5A        	  3187:             cmpi.w #$5a5a,(a0)
01:00001E90 66FE            	  3188:             bne.s *                   * Check Z Flag  beq/bne
                            	  3189: 
                            	  3190: *     NOT - LONG
01:00001E92 307C0100        	  3191:             move.l #$00000100,a0
01:00001E96 7000            	  3192:             moveq  #$00000000,d0
01:00001E98 4680            	  3193:             not.l d0
01:00001E9A 6AFE            	  3194:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001E9C 67FE            	  3195:             beq.s *                   * Check Z Flag  beq/bne
01:00001E9E 4680            	  3196:             not.l d0
01:00001EA0 6BFE            	  3197:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EA2 66FE            	  3198:             bne.s *                   * Check Z Flag  beq/bne
01:00001EA4 4A80            	  3199:             cmpi.l #$00000000,d0
01:00001EA6 66FE            	  3200:             bne.s *                   * Check Z Flag  beq/bne
01:00001EA8 20BC5A5A1234    	  3201:             move.l #$5a5a1234,(a0)
01:00001EAE 4690            	  3202:             not.l (a0)
01:00001EB0 6AFE            	  3203:             bpl.s *                   * Check N Flag  bmi/bpl
01:00001EB2 67FE            	  3204:             beq.s *                   * Check Z Flag  beq/bne
01:00001EB4 4690            	  3205:             not.l (a0)
01:00001EB6 6BFE            	  3206:             bmi.s *                   * Check N Flag  bmi/bpl
01:00001EB8 67FE            	  3207:             beq.s *                   * Check Z Flag  beq/bne
01:00001EBA 0C905A5A1234    	  3208:             cmpi.l #$5a5a1234,(a0)
01:00001EC0 66FE            	  3209:             bne.s *                   * Check Z Flag  beq/bne
                            	  3210: 
                            	  3211: * -----
                            	  3212: 
                            	  3213: *     NEG - BYTE
01:00001EC2 307C0100        	  3214:             move.l #$00000100,a0
01:00001EC6 7000            	  3215:             moveq  #$00000000,d0
01:00001EC8 7240D241        	  3216:             move.l #$00000080,d1
01:00001ECC 4400            	  3217:             neg.b d0
01:00001ECE 6BFE            	  3218:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001ED0 66FE            	  3219:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001ED2 65FE            	  3220:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001ED4 69FE            	  3221:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001ED6 4401            	  3222:             neg.b d1
01:00001ED8 6AFE            	  3223:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EDA 67FE            	  3224:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EDC 64FE            	  3225:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EDE 68FE            	  3226:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001EE0 0C010080        	  3227:             cmpi.b #$80,d1
01:00001EE4 66FE            	  3228:             bne.s *                   * Check Z Flag  beq/bne
01:00001EE6 10BC007F        	  3229:             move.b #$7F,(a0)
01:00001EEA 4410            	  3230:             neg.b (a0)
01:00001EEC 6AFE            	  3231:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001EEE 67FE            	  3232:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EF0 64FE            	  3233:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001EF2 69FE            	  3234:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001EF4 10BC00F5        	  3235:             move.b #$F5,(a0)
01:00001EF8 4410            	  3236:             neg.b (a0)
01:00001EFA 6BFE            	  3237:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001EFC 67FE            	  3238:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001EFE 64FE            	  3239:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F00 69FE            	  3240:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F02 0C10000B        	  3241:             cmpi.b #$0B,(a0)
01:00001F06 66FE            	  3242:             bne.s *                   * Check Z Flag  beq/bne
                            	  3243: 
                            	  3244: * -----
                            	  3245: 
                            	  3246: *     NEG - WORD
01:00001F08 307C0100        	  3247:             move.l #$00000100,a0
01:00001F0C 7000            	  3248:             moveq  #$00000000,d0
01:00001F0E 223C00008000    	  3249:             move.l #$00008000,d1
01:00001F14 4440            	  3250:             neg.w d0
01:00001F16 6BFE            	  3251:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F18 66FE            	  3252:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F1A 65FE            	  3253:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F1C 69FE            	  3254:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F1E 4441            	  3255:             neg.w d1
01:00001F20 6AFE            	  3256:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F22 67FE            	  3257:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F24 64FE            	  3258:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F26 68FE            	  3259:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F28 0C418000        	  3260:             cmpi.w #$8000,d1
01:00001F2C 66FE            	  3261:             bne.s *                   * Check Z Flag  beq/bne
01:00001F2E 30BC7FFF        	  3262:             move.w #$7FFF,(a0)
01:00001F32 4450            	  3263:             neg.w (a0)
01:00001F34 6AFE            	  3264:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F36 67FE            	  3265:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F38 64FE            	  3266:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F3A 69FE            	  3267:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F3C 30BCF578        	  3268:             move.w #$F578,(a0)
01:00001F40 4450            	  3269:             neg.w (a0)
01:00001F42 6BFE            	  3270:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F44 67FE            	  3271:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F46 64FE            	  3272:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F48 69FE            	  3273:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F4A 0C500A88        	  3274:             cmpi.w #$0A88,(a0)
01:00001F4E 66FE            	  3275:             bne.s *                   * Check Z Flag  beq/bne
                            	  3276: 
                            	  3277: * -----
                            	  3278: 
                            	  3279: *     NEG - LONG
01:00001F50 307C0100        	  3280:             move.l #$00000100,a0
01:00001F54 7000            	  3281:             moveq  #$00000000,d0
01:00001F56 223C80000000    	  3282:             move.l #$80000000,d1
01:00001F5C 4480            	  3283:             neg.l d0
01:00001F5E 6BFE            	  3284:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F60 66FE            	  3285:             bne.s *                   * Check Z Flag  beq/bne 1
01:00001F62 65FE            	  3286:             bcs.s *                   * Check C Flag  bcc/bcs 1
01:00001F64 69FE            	  3287:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F66 4481            	  3288:             neg.l d1
01:00001F68 6AFE            	  3289:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F6A 67FE            	  3290:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F6C 64FE            	  3291:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F6E 68FE            	  3292:             bvc.s *                   * Check V Flag  bvc/bvs 0
01:00001F70 0C8180000000    	  3293:             cmpi.l #$80000000,d1
01:00001F76 66FE            	  3294:             bne.s *                   * Check Z Flag  beq/bne
01:00001F78 20BC7FFFFFFF    	  3295:             move.l #$7FFFFFFF,(a0)
01:00001F7E 4490            	  3296:             neg.l (a0)
01:00001F80 6AFE            	  3297:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001F82 67FE            	  3298:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F84 64FE            	  3299:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F86 69FE            	  3300:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F88 20BCF5781234    	  3301:             move.l #$F5781234,(a0)
01:00001F8E 4490            	  3302:             neg.l (a0)
01:00001F90 6BFE            	  3303:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001F92 67FE            	  3304:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001F94 64FE            	  3305:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001F96 69FE            	  3306:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001F98 0C900A87EDCC    	  3307:             cmpi.l #$0A87EDCC,(a0)
01:00001F9E 66FE            	  3308:             bne.s *                   * Check Z Flag  beq/bne
                            	  3309: 
                            	  3310: 
                            	  3311: * -----
                            	  3312: 
                            	  3313: *     NEGX - BYTE
01:00001FA0 307C0100        	  3314:             move.l #$00000100,a0
01:00001FA4 7000            	  3315:             moveq  #$00000000,d0
01:00001FA6 7240D241        	  3316:             move.l #$00000080,d1
01:00001FAA 003C0010        	  3317:             ori.b #$10,CCR        * Set X Flag
01:00001FAE 4000            	  3318:             negx.b d0
01:00001FB0 6AFE            	  3319:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00001FB2 67FE            	  3320:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FB4 64FE            	  3321:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FB6 69FE            	  3322:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FB8 023C00EF        	  3323:             andi.b #$EF,CCR       * Clear X Flag
01:00001FBC 4000            	  3324:             negx.b d0
01:00001FBE 6BFE            	  3325:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00001FC0 67FE            	  3326:             beq.s *                   * Check Z Flag  beq/bne 1
01:00001FC2 64FE            	  3327:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00001FC4 69FE            	  3328:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FC6 003C0010        	  3329:             ori.b #$10,CCR        * Set X Flag
01:00001FCA 4001            	  3330:             negx.b d1
01:00001FCC 6BFE            	  3331:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:00001FCE 67FE            	  3332:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FD0 64FE            	  3333:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FD2 69FE            	  3334:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FD4 0C01007F        	  3335:             cmpi.b #$7F,d1
01:00001FD8 66FE            	  3336:             bne.s *                   * Check Z Flag  beq/bne
01:00001FDA 023C00EF        	  3337:             andi.b #$EF,CCR       * Clear X Flag
01:00001FDE 4001            	  3338:             negx.b d1
01:00001FE0 6AFE            	  3339:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FE2 67FE            	  3340:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FE4 64FE            	  3341:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00001FE6 69FE            	  3342:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00001FE8 0C010081        	  3343:             cmpi.b #$81,d1
01:00001FEC 66FE            	  3344:             bne.s *                   * Check Z Flag  beq/bne
01:00001FEE 10BC007F        	  3345:             move.b #$7F,(a0)
01:00001FF2 003C0010        	  3346:             ori.b #$10,CCR        * Set X Flag
01:00001FF6 4010            	  3347:             negx.b (a0)
01:00001FF8 6AFE            	  3348:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00001FFA 67FE            	  3349:             beq.s *                   * Check Z Flag  beq/bne 0
01:00001FFC 64FE            	  3350:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3351:             * I think overflow should happen here.
                            	  3352: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:00001FFE 10BC007F        	  3353:             move.b #$7F,(a0)
01:00002002 023C00EF        	  3354:             andi.b #$EF,CCR       * Clear X Flag
01:00002006 4010            	  3355:             negx.b (a0)
01:00002008 6AFE            	  3356:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000200A 67FE            	  3357:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000200C 64FE            	  3358:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000200E 69FE            	  3359:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002010 10BC00F5        	  3360:             move.b #$F5,(a0)
01:00002014 003C0010        	  3361:             ori.b #$10,CCR        * Set X Flag
01:00002018 4010            	  3362:             negx.b (a0)
01:0000201A 6BFE            	  3363:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000201C 67FE            	  3364:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000201E 64FE            	  3365:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002020 69FE            	  3366:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002022 0C10000A        	  3367:             cmpi.b #$0A,(a0)
01:00002026 66FE            	  3368:             bne.s *                   * Check Z Flag  beq/bne
01:00002028 023C00EF        	  3369:             andi.b #$EF,CCR       * Clear X Flag
01:0000202C 4010            	  3370:             negx.b (a0)
01:0000202E 6AFE            	  3371:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002030 67FE            	  3372:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002032 64FE            	  3373:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002034 69FE            	  3374:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002036 0C1000F6        	  3375:             cmpi.b #$F6,(a0)
01:0000203A 66FE            	  3376:             bne.s *                   * Check Z Flag  beq/bne
                            	  3377: 
                            	  3378: 
                            	  3379: 
                            	  3380: * -----
                            	  3381: 
                            	  3382: *     NEGX - WORD
01:0000203C 307C0100        	  3383:             move.l #$00000100,a0
01:00002040 7000            	  3384:             moveq  #$00000000,d0
01:00002042 223C00008000    	  3385:             move.l #$00008000,d1
01:00002048 003C0010        	  3386:             ori.b #$10,CCR        * Set X Flag
01:0000204C 4040            	  3387:             negx.w d0
01:0000204E 6AFE            	  3388:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002050 67FE            	  3389:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002052 64FE            	  3390:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002054 69FE            	  3391:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002056 023C00EF        	  3392:             andi.b #$EF,CCR       * Clear X Flag
01:0000205A 4040            	  3393:             negx.w d0
01:0000205C 6BFE            	  3394:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:0000205E 67FE            	  3395:             beq.s *                   * Check Z Flag  beq/bne 1
01:00002060 64FE            	  3396:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002062 69FE            	  3397:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002064 003C0010        	  3398:             ori.b #$10,CCR        * Set X Flag
01:00002068 4041            	  3399:             negx.w d1
01:0000206A 6BFE            	  3400:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000206C 67FE            	  3401:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000206E 64FE            	  3402:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002070 69FE            	  3403:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002072 0C417FFF        	  3404:             cmpi.w #$7FFF,d1
01:00002076 66FE            	  3405:             bne.s *                   * Check Z Flag  beq/bne
01:00002078 023C00EF        	  3406:             andi.b #$EF,CCR       * Clear X Flag
01:0000207C 4041            	  3407:             negx.w d1
01:0000207E 6AFE            	  3408:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002080 67FE            	  3409:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002082 64FE            	  3410:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002084 69FE            	  3411:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002086 0C418001        	  3412:             cmpi.w #$8001,d1
01:0000208A 66FE            	  3413:             bne.s *                   * Check Z Flag  beq/bne
01:0000208C 30BC7FFF        	  3414:             move.w #$7FFF,(a0)
01:00002090 003C0010        	  3415:             ori.b #$10,CCR        * Set X Flag
01:00002094 4050            	  3416:             negx.w (a0)
01:00002096 6AFE            	  3417:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002098 67FE            	  3418:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000209A 64FE            	  3419:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3420: ***            
                            	  3421: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000209C 30BCF567        	  3422:             move.w #$F567,(a0)
01:000020A0 023C00EF        	  3423:             andi.b #$EF,CCR       * Clear X Flag
01:000020A4 4050            	  3424:             negx.w (a0)
01:000020A6 6BFE            	  3425:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:000020A8 67FE            	  3426:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020AA 64FE            	  3427:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020AC 69FE            	  3428:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020AE 30BCF567        	  3429:             move.w #$F567,(a0)
01:000020B2 003C0010        	  3430:             ori.b #$10,CCR        * Set X Flag
01:000020B6 4050            	  3431:             negx.w (a0)
01:000020B8 6BFE            	  3432:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020BA 67FE            	  3433:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020BC 64FE            	  3434:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020BE 69FE            	  3435:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020C0 0C500A98        	  3436:             cmpi.w #$0A98,(a0)
01:000020C4 66FE            	  3437:             bne.s *                   * Check Z Flag  beq/bne
01:000020C6 023C00EF        	  3438:             andi.b #$EF,CCR       * Clear X Flag
01:000020CA 4050            	  3439:             negx.w (a0)
01:000020CC 6AFE            	  3440:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020CE 67FE            	  3441:             beq.s *                   * Check Z Flag  beq/bne 0
01:000020D0 64FE            	  3442:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:000020D2 69FE            	  3443:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020D4 0C50F568        	  3444:             cmpi.w #$F568,(a0)
01:000020D8 66FE            	  3445:             bne.s *                   * Check Z Flag  beq/bne
                            	  3446: 
                            	  3447: 
                            	  3448: * -----
                            	  3449: 
                            	  3450: *     NEGX - LONG
01:000020DA 307C0100        	  3451:             move.l #$00000100,a0
01:000020DE 7000            	  3452:             moveq  #$00000000,d0
01:000020E0 223C80000000    	  3453:             move.l #$80000000,d1
01:000020E6 003C0010        	  3454:             ori.b #$10,CCR        * Set X Flag
01:000020EA 4080            	  3455:             negx.l d0
01:000020EC 6AFE            	  3456:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:000020EE 67FE            	  3457:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020F0 64FE            	  3458:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:000020F2 69FE            	  3459:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:000020F4 023C00EF        	  3460:             andi.b #$EF,CCR       * Clear X Flag
01:000020F8 4080            	  3461:             negx.l d0
01:000020FA 6BFE            	  3462:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000020FC 67FE            	  3463:             beq.s *                   * Check Z Flag  beq/bne 1
01:000020FE 64FE            	  3464:             bcc.s *                   * Check C Flag  bcc/bcs 1
01:00002100 69FE            	  3465:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002102 003C0010        	  3466:             ori.b #$10,CCR        * Set X Flag
01:00002106 4081            	  3467:             negx.l d1
01:00002108 6BFE            	  3468:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000210A 67FE            	  3469:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000210C 64FE            	  3470:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000210E 69FE            	  3471:             bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002110 0C817FFFFFFF    	  3472:             cmpi.l #$7FFFFFFF,d1
01:00002116 66FE            	  3473:             bne.s *                   * Check Z Flag  beq/bne
01:00002118 023C00EF        	  3474:             andi.b #$EF,CCR       * Clear X Flag
01:0000211C 4081            	  3475:             negx.l d1
01:0000211E 6AFE            	  3476:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:00002120 67FE            	  3477:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002122 64FE            	  3478:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3479: ****            
                            	  3480: *            bvs.s *                   * Check V Flag  bvc/bvs 0
01:00002124 0C8180000001    	  3481:             cmpi.l #$80000001,d1
01:0000212A 66FE            	  3482:             bne.s *                   * Check Z Flag  beq/bne
01:0000212C 20BC00007FFF    	  3483:             move.l #$7FFF,(a0)
01:00002132 003C0010        	  3484:             ori.b #$10,CCR        * Set X Flag
01:00002136 4090            	  3485:             negx.l (a0)
01:00002138 6AFE            	  3486:             bpl.s *                   * Check N Flag  bmi/bpl 1
01:0000213A 67FE            	  3487:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000213C 64FE            	  3488:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3489: ****            
                            	  3490: *            bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000213E 20BCF5671234    	  3491:             move.l #$F5671234,(a0)
01:00002144 023C00EF        	  3492:             andi.b #$EF,CCR       * Clear X Flag
01:00002148 4090            	  3493:             negx.l (a0)
01:0000214A 6BFE            	  3494:             bmi.s *                   * Check N Flag  bmi/bpl 1
01:0000214C 67FE            	  3495:             beq.s *                   * Check Z Flag  beq/bne 0
01:0000214E 64FE            	  3496:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002150 69FE            	  3497:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002152 20BCF5675678    	  3498:             move.l #$F5675678,(a0)
01:00002158 003C0010        	  3499:             ori.b #$10,CCR        * Set X Flag
01:0000215C 4090            	  3500:             negx.l (a0)
01:0000215E 6BFE            	  3501:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:00002160 67FE            	  3502:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002162 64FE            	  3503:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:00002164 69FE            	  3504:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:00002166 0C900A98A987    	  3505:             cmpi.l #$0A98A987,(a0)
01:0000216C 66FE            	  3506:             bne.s *                   * Check Z Flag  beq/bne
01:0000216E 023C00EF        	  3507:             andi.b #$EF,CCR       * Clear X Flag
01:00002172 4090            	  3508:             negx.l (a0)
01:00002174 6AFE            	  3509:             bpl.s *                   * Check N Flag  bmi/bpl 0
01:00002176 67FE            	  3510:             beq.s *                   * Check Z Flag  beq/bne 0
01:00002178 64FE            	  3511:             bcc.s *                   * Check C Flag  bcc/bcs 0
01:0000217A 69FE            	  3512:             bvs.s *                   * Check V Flag  bvc/bvs 1
01:0000217C 0C90F5675679    	  3513:             cmpi.l #$F5675679,(a0)
01:00002182 66FE            	  3514:             bne.s *                   * Check Z Flag  beq/bne
                            	  3515: 
                            	  3516: 
                            	  3517: * -----
                            	  3518: 
                            	  3519: *     CLR - BYTE
01:00002184 307C0100        	  3520:             move.l #$00000100,a0
01:00002188 203C12345678    	  3521:             move.l #$12345678,d0
01:0000218E 223C12345678    	  3522:             move.l #$12345678,d1
01:00002194 243C12345678    	  3523:             move.l #$12345678,d2
01:0000219A 283C12345600    	  3524:             move.l #$12345600,d4
01:000021A0 2A3C12340000    	  3525:             move.l #$12340000,d5
01:000021A6 7C00            	  3526:             moveq  #$00000000,d6
                            	  3527: 
01:000021A8 4200            	  3528:             clr.b d0
01:000021AA 66FE            	  3529:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021AC 6BFE            	  3530:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021AE B880            	  3531:             cmp.l d0,d4
01:000021B0 66FE            	  3532:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3533: 
01:000021B2 4241            	  3534:             clr.w d1
01:000021B4 66FE            	  3535:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021B6 6BFE            	  3536:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021B8 BA81            	  3537:             cmp.l d1,d5
01:000021BA 66FE            	  3538:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3539: 
01:000021BC 7400            	  3540:             clr.l d2
01:000021BE 66FE            	  3541:             bne.s *                   * Check Z Flag  beq/bne 0
01:000021C0 6BFE            	  3542:             bmi.s *                   * Check N Flag  bmi/bpl 0
01:000021C2 BC82            	  3543:             cmp.l d2,d6
01:000021C4 66FE            	  3544:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3545: 
01:000021C6 4E75            	  3546:             rts
                            	  3547: 
                            	  3548: 
                            	  3549: 
                            	  3550: *-----------------------------------------------------------
                            	  3551: *-----------------------------------------------------------
                            	  3552: * OPCODE : MOVEM
                            	  3553: *-----------------------------------------------------------
                            	  3554: *-----------------------------------------------------------
                            	  3555: op_MOVEM:
                            	  3556: 
                            	  3557: *     WORD  Registers --> Memory
01:000021C8 203C0000D0D0    	  3558:             move.l #$0000d0d0,d0
01:000021CE 223C0000D1D1    	  3559:             move.l #$0000d1d1,d1
01:000021D4 243C0000D2D2    	  3560:             move.l #$0000d2d2,d2
01:000021DA 263C0000D3D3    	  3561:             move.l #$0000d3d3,d3
01:000021E0 283C0000D4D4    	  3562:             move.l #$0000d4d4,d4
01:000021E6 2A3C0000D5D5    	  3563:             move.l #$0000d5d5,d5
01:000021EC 2C3C0000D6D6    	  3564:             move.l #$0000d6d6,d6
01:000021F2 2E3C0000D7D7    	  3565:             move.l #$0000d7d7,d7
01:000021F8 307C0A0A        	  3566:             move.l #$00000a0a,a0
01:000021FC 327C1A1A        	  3567:             move.l #$00001a1a,a1
01:00002200 347C2A2A        	  3568:             move.l #$00002a2a,a2
01:00002204 367C3A3A        	  3569:             move.l #$00003a3a,a3
01:00002208 387C4A4A        	  3570:             move.l #$00004a4a,a4
01:0000220C 3A7C5A5A        	  3571:             move.l #$00005a5a,a5
01:00002210 3C7C6A6A        	  3572:             move.l #$00006a6a,a6
                            	  3573: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3574: 
01:00002214 48B8FFFF0100    	  3575:             movem.w D0-D7/A0-A7,$00000100
                            	  3576: 
01:0000221A 307C0100        	  3577:             move.l #$00000100,a0
                            	  3578: 
01:0000221E B058            	  3579:             cmp.w (a0)+,d0
01:00002220 66FE            	  3580:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002222 B258            	  3581:             cmp.w (a0)+,d1
01:00002224 66FE            	  3582:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002226 B458            	  3583:             cmp.w (a0)+,d2
01:00002228 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000222A B658            	  3585:             cmp.w (a0)+,d3
01:0000222C 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000222E B858            	  3587:             cmp.w (a0)+,d4
01:00002230 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002232 BA58            	  3589:             cmp.w (a0)+,d5
01:00002234 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002236 BC58            	  3591:             cmp.w (a0)+,d6
01:00002238 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000223A BE58            	  3593:             cmp.w (a0)+,d7
01:0000223C 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3595: 
01:0000223E 0C580A0A        	  3596:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
01:00002242 66FE            	  3597:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3598: 
01:00002244 B2D8            	  3599:             cmp.w (a0)+,a1
01:00002246 66FE            	  3600:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002248 B4D8            	  3601:             cmp.w (a0)+,a2
01:0000224A 66FE            	  3602:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000224C B6D8            	  3603:             cmp.w (a0)+,a3
01:0000224E 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002250 B8D8            	  3605:             cmp.w (a0)+,a4
01:00002252 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002254 BAD8            	  3607:             cmp.w (a0)+,a5
01:00002256 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002258 BCD8            	  3609:             cmp.w (a0)+,a6
01:0000225A 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: 
                            	  3615: *     LONG  Registers --> Memory
01:0000225C 203CD0D0D0D0    	  3616:             move.l #$d0d0d0d0,d0
01:00002262 223CD1D1D1D1    	  3617:             move.l #$d1d1d1d1,d1
01:00002268 243CD2D2D2D2    	  3618:             move.l #$d2d2d2d2,d2
01:0000226E 263CD3D3D3D3    	  3619:             move.l #$d3d3d3d3,d3
01:00002274 283CD4D4D4D4    	  3620:             move.l #$d4d4d4d4,d4
01:0000227A 2A3CD5D5D5D5    	  3621:             move.l #$d5d5d5d5,d5
01:00002280 2C3CD6D6D6D6    	  3622:             move.l #$d6d6d6d6,d6
01:00002286 2E3CD7D7D7D7    	  3623:             move.l #$d7d7d7d7,d7
01:0000228C 207C0A0A0A0A    	  3624:             move.l #$0a0a0a0a,a0
01:00002292 227C1A1A1A1A    	  3625:             move.l #$1a1a1a1a,a1
01:00002298 247C2A2A2A2A    	  3626:             move.l #$2a2a2a2a,a2
01:0000229E 267C3A3A3A3A    	  3627:             move.l #$3a3a3a3a,a3
01:000022A4 287C4A4A4A4A    	  3628:             move.l #$4a4a4a4a,a4
01:000022AA 2A7C5A5A5A5A    	  3629:             move.l #$5a5a5a5a,a5
01:000022B0 2C7C6A6A6A6A    	  3630:             move.l #$6a6a6a6a,a6
                            	  3631: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3632: 
                            	  3633: 
01:000022B6 48F8FFFF0120    	  3634:             movem.l D0-D7/A0-A7,$00000120
                            	  3635: 
01:000022BC 307C0120        	  3636:             move.l #$00000120,a0
                            	  3637: 
01:000022C0 B098            	  3638:             cmp.l (a0)+,d0
01:000022C2 66FE            	  3639:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C4 B298            	  3640:             cmp.l (a0)+,d1
01:000022C6 66FE            	  3641:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022C8 B498            	  3642:             cmp.l (a0)+,d2
01:000022CA 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022CC B698            	  3644:             cmp.l (a0)+,d3
01:000022CE 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D0 B898            	  3646:             cmp.l (a0)+,d4
01:000022D2 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D4 BA98            	  3648:             cmp.l (a0)+,d5
01:000022D6 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022D8 BC98            	  3650:             cmp.l (a0)+,d6
01:000022DA 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022DC BE98            	  3652:             cmp.l (a0)+,d7
01:000022DE 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3654: 
01:000022E0 0C980A0A0A0A    	  3655:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
01:000022E6 66FE            	  3656:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3657: 
01:000022E8 B3D8            	  3658:             cmp.l (a0)+,a1
01:000022EA 66FE            	  3659:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022EC B5D8            	  3660:             cmp.l (a0)+,a2
01:000022EE 66FE            	  3661:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F0 B7D8            	  3662:             cmp.l (a0)+,a3
01:000022F2 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F4 B9D8            	  3664:             cmp.l (a0)+,a4
01:000022F6 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022F8 BBD8            	  3666:             cmp.l (a0)+,a5
01:000022FA 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
01:000022FC BDD8            	  3668:             cmp.l (a0)+,a6
01:000022FE 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3670: *      ----
                            	  3671: 
                            	  3672: 
                            	  3673: *     WORD  Registers --> Memory  -(An) EA Mode
01:00002300 203C0000D0D0    	  3674:             move.l #$0000d0d0,d0
01:00002306 223C0000D1D1    	  3675:             move.l #$0000d1d1,d1
01:0000230C 243C0000D2D2    	  3676:             move.l #$0000d2d2,d2
01:00002312 263C0000D3D3    	  3677:             move.l #$0000d3d3,d3
01:00002318 283C0000D4D4    	  3678:             move.l #$0000d4d4,d4
01:0000231E 2A3C0000D5D5    	  3679:             move.l #$0000d5d5,d5
01:00002324 2C3C0000D6D6    	  3680:             move.l #$0000d6d6,d6
01:0000232A 2E3C0000D7D7    	  3681:             move.l #$0000d7d7,d7
01:00002330 307C0A0A        	  3682:             move.l #$00000a0a,a0
01:00002334 327C1A1A        	  3683:             move.l #$00001a1a,a1
01:00002338 347C2A2A        	  3684:             move.l #$00002a2a,a2
01:0000233C 367C3A3A        	  3685:             move.l #$00003a3a,a3
01:00002340 387C4A4A        	  3686:             move.l #$00004a4a,a4
01:00002344 3A7C5A5A        	  3687:             move.l #$00005a5a,a5
01:00002348 3C7C6A6A        	  3688:             move.l #$00006a6a,a6
                            	  3689: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3690: 
01:0000234C 307C01A0        	  3691:             move.l #$000001A0,a0
01:00002350 48A0FFFF        	  3692:             movem.w D0-D7/A0-A7,-(a0)
                            	  3693: 
01:00002354 307C019E        	  3694:             move.l #$0000019E,a0
                            	  3695: 
01:00002358 BCE0            	  3696:             cmp.w -(a0),a6
01:0000235A 66FE            	  3697:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000235C BAE0            	  3698:             cmp.w -(a0),a5
01:0000235E 66FE            	  3699:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002360 B8E0            	  3700:             cmp.w -(a0),a4
01:00002362 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002364 B6E0            	  3702:             cmp.w -(a0),a3
01:00002366 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002368 B4E0            	  3704:             cmp.w -(a0),a2
01:0000236A 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000236C B2E0            	  3706:             cmp.w -(a0),a1
01:0000236E 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002370 B0E0            	  3708:             cmp.w -(a0),a0
                            	  3709: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002372 BE60            	  3710:             cmp.w -(a0),d7
01:00002374 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002376 BC60            	  3712:             cmp.w -(a0),d6
01:00002378 66FE            	  3713:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237A BA60            	  3714:             cmp.w -(a0),d5
01:0000237C 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000237E B860            	  3716:             cmp.w -(a0),d4
01:00002380 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002382 B660            	  3718:             cmp.w -(a0),d3
01:00002384 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002386 B460            	  3720:             cmp.w -(a0),d2
01:00002388 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000238A B260            	  3722:             cmp.w -(a0),d1
01:0000238C 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000238E B060            	  3724:             cmp.w -(a0),d0
01:00002390 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: 
                            	  3730: *     LONG  Registers --> Memory   -(An) EA Mode
01:00002392 203CD0D0D0D0    	  3731:             move.l #$d0d0d0d0,d0
01:00002398 223CD1D1D1D1    	  3732:             move.l #$d1d1d1d1,d1
01:0000239E 243CD2D2D2D2    	  3733:             move.l #$d2d2d2d2,d2
01:000023A4 263CD3D3D3D3    	  3734:             move.l #$d3d3d3d3,d3
01:000023AA 283CD4D4D4D4    	  3735:             move.l #$d4d4d4d4,d4
01:000023B0 2A3CD5D5D5D5    	  3736:             move.l #$d5d5d5d5,d5
01:000023B6 2C3CD6D6D6D6    	  3737:             move.l #$d6d6d6d6,d6
01:000023BC 2E3CD7D7D7D7    	  3738:             move.l #$d7d7d7d7,d7
01:000023C2 207C0A0A0A0A    	  3739:             move.l #$0a0a0a0a,a0
01:000023C8 227C1A1A1A1A    	  3740:             move.l #$1a1a1a1a,a1
01:000023CE 247C2A2A2A2A    	  3741:             move.l #$2a2a2a2a,a2
01:000023D4 267C3A3A3A3A    	  3742:             move.l #$3a3a3a3a,a3
01:000023DA 287C4A4A4A4A    	  3743:             move.l #$4a4a4a4a,a4
01:000023E0 2A7C5A5A5A5A    	  3744:             move.l #$5a5a5a5a,a5
01:000023E6 2C7C6A6A6A6A    	  3745:             move.l #$6a6a6a6a,a6
                            	  3746: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3747: 
                            	  3748: 
01:000023EC 307C01A0        	  3749:             move.l #$000001A0,a0
01:000023F0 48E0FFFF        	  3750:             movem.l D0-D7/A0-A7,-(a0)
                            	  3751: 
01:000023F4 307C019C        	  3752:             move.l #$0000019C,a0
                            	  3753: 
01:000023F8 BDE0            	  3754:             cmp.l -(a0),a6
01:000023FA 66FE            	  3755:             bne.s *                   * Check Z Flag  beq/bne 0
01:000023FC BBE0            	  3756:             cmp.l -(a0),a5
01:000023FE 66FE            	  3757:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002400 B9E0            	  3758:             cmp.l -(a0),a4
01:00002402 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002404 B7E0            	  3760:             cmp.l -(a0),a3
01:00002406 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002408 B5E0            	  3762:             cmp.l -(a0),a2
01:0000240A 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000240C B3E0            	  3764:             cmp.l -(a0),a1
01:0000240E 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002410 B1E0            	  3766:             cmp.l -(a0),a0
                            	  3767: *            bne.s *                   * Check Z Flag  beq/bne 0
01:00002412 BEA0            	  3768:             cmp.l -(a0),d7
01:00002414 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002416 BCA0            	  3770:             cmp.l -(a0),d6
01:00002418 66FE            	  3771:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000241A BAA0            	  3772:             cmp.l -(a0),d5
01:0000241C 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000241E B8A0            	  3774:             cmp.l -(a0),d4
01:00002420 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002422 B6A0            	  3776:             cmp.l -(a0),d3
01:00002424 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002426 B4A0            	  3778:             cmp.l -(a0),d2
01:00002428 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000242A B2A0            	  3780:             cmp.l -(a0),d1
01:0000242C 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000242E B0A0            	  3782:             cmp.l -(a0),d0
01:00002430 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3784: 
                            	  3785: 
                            	  3786: 
                            	  3787: *     ----
                            	  3788: 
                            	  3789: *     WORD - Memory --> Registers
01:00002432 7000            	  3790:             moveq  #$00000000,d0
01:00002434 7200            	  3791:             moveq  #$00000000,d1
01:00002436 7400            	  3792:             moveq  #$00000000,d2
01:00002438 7600            	  3793:             moveq  #$00000000,d3
01:0000243A 7800            	  3794:             moveq  #$00000000,d4
01:0000243C 7A00            	  3795:             moveq  #$00000000,d5
01:0000243E 7C00            	  3796:             moveq  #$00000000,d6
01:00002440 7E00            	  3797:             moveq  #$00000000,d7
01:00002442 91C8            	  3798:             move.l #$00000000,a0
01:00002444 93C9            	  3799:             move.l #$00000000,a1
01:00002446 95CA            	  3800:             move.l #$00000000,a2
01:00002448 97CB            	  3801:             move.l #$00000000,a3
01:0000244A 99CC            	  3802:             move.l #$00000000,a4
01:0000244C 9BCD            	  3803:             move.l #$00000000,a5
01:0000244E 9DCE            	  3804:             move.l #$00000000,a6
                            	  3805: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3806: 
01:00002450 4CB82A550100    	  3807:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3808: 
01:00002456 B0BCFFFFD0D0    	  3809:             cmp.l #$FFFFD0D0,d0
01:0000245C 66FE            	  3810:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000245E B4BCFFFFD1D1    	  3811:             cmp.l #$FFFFD1D1,d2
01:00002464 66FE            	  3812:             bne.s *                  * Check Z Flag  beq/bne 0
01:00002466 B8BCFFFFD2D2    	  3813:             cmp.l #$FFFFD2D2,d4
01:0000246C 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000246E BCBCFFFFD3D3    	  3815:             cmp.l #$FFFFD3D3,d6
01:00002474 66FE            	  3816:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002476 B2FCD4D4        	  3817:             cmp.l #$FFFFD4D4,a1
01:0000247A 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
01:0000247C B6FCD5D5        	  3819:             cmp.l #$FFFFD5D5,a3
01:00002480 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
01:00002482 BAFCD6D6        	  3821:             cmp.l #$FFFFD6D6,a5
01:00002486 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3823: 
                            	  3824: 
                            	  3825: *     LONG - Memory --> Registers
01:00002488 7000            	  3826:             moveq  #$00000000,d0
01:0000248A 7200            	  3827:             moveq  #$00000000,d1
01:0000248C 7400            	  3828:             moveq  #$00000000,d2
01:0000248E 7600            	  3829:             moveq  #$00000000,d3
01:00002490 7800            	  3830:             moveq  #$00000000,d4
01:00002492 7A00            	  3831:             moveq  #$00000000,d5
01:00002494 7C00            	  3832:             moveq  #$00000000,d6
01:00002496 7E00            	  3833:             moveq  #$00000000,d7
01:00002498 91C8            	  3834:             move.l #$00000000,a0
01:0000249A 93C9            	  3835:             move.l #$00000000,a1
01:0000249C 95CA            	  3836:             move.l #$00000000,a2
01:0000249E 97CB            	  3837:             move.l #$00000000,a3
01:000024A0 99CC            	  3838:             move.l #$00000000,a4
01:000024A2 9BCD            	  3839:             move.l #$00000000,a5
01:000024A4 9DCE            	  3840:             move.l #$00000000,a6
                            	  3841: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3842: 
01:000024A6 4CF82A550120    	  3843:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3844: 
01:000024AC B0BCD0D0D0D0    	  3845:             cmp.l #$D0D0D0D0,d0
01:000024B2 66FE            	  3846:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024B4 B4BCD1D1D1D1    	  3847:             cmp.l #$D1D1D1D1,d2
01:000024BA 66FE            	  3848:             bne.s *                  * Check Z Flag  beq/bne 0
01:000024BC B8BCD2D2D2D2    	  3849:             cmp.l #$D2D2D2D2,d4
01:000024C2 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024C4 BCBCD3D3D3D3    	  3851:             cmp.l #$D3D3D3D3,d6
01:000024CA 66FE            	  3852:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024CC B3FCD4D4D4D4    	  3853:             cmp.l #$D4D4D4D4,a1
01:000024D2 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024D4 B7FCD5D5D5D5    	  3855:             cmp.l #$D5D5D5D5,a3
01:000024DA 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
01:000024DC BBFCD6D6D6D6    	  3857:             cmp.l #$D6D6D6D6,a5
01:000024E2 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3859: 
01:000024E4 4E75            	  3860:             rts
                            	  3861: 
                            	  3862: 
                            	  3863: *-----------------------------------------------------------
                            	  3864: *-----------------------------------------------------------
                            	  3865: * OPCODE : ABCD
                            	  3866: *-----------------------------------------------------------
                            	  3867: *-----------------------------------------------------------
                            	  3868: op_ABCD:
                            	  3869: 
                            	  3870: *     Test with X Flag CLEARED
01:000024E6 307C0110        	  3871:                 move.l #$00000110,a0 * Address pointer-X
01:000024EA 327C0120        	  3872:                 move.l #$00000120,a1 * Address pointer-Y
01:000024EE 7000            	  3873:                 moveq  #$00000000,d0 * BCD byte-X
01:000024F0 7200            	  3874:                 moveq  #$00000000,d1 * BCD byte-Y
01:000024F2 7400            	  3875:                 moveq  #$00000000,d2
01:000024F4 7600            	  3876:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000024F6 7800            	  3877:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000024F8 7A00            	  3878:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000024FA 2C3C00000099    	  3879:                 move.l #$00000099,d6 * Inner loop counter
01:00002500 2E3C00000099    	  3880:                 move.l #$00000099,d7 * Outer loop counter
                            	  3881: 
01:00002506 2007            	  3882: ABCD_OUTER1:    move.l d7,d0
01:00002508 2206            	  3883: ABCD_INNER1:    move.l d6,d1
01:0000250A 023C00EF        	  3884:                 andi.b #$EF,CCR     * Clear X Flag
01:0000250E 307C0110        	  3885:                 move.l #$00000110,a0 * Address pointer-X
01:00002512 327C0120        	  3886:                 move.l #$00000120,a1 * Address pointer-Y
01:00002516 1140FFFF        	  3887:                 move.b d0,-1(a0)
01:0000251A 1341FFFF        	  3888:                 move.b d1,-1(a1)
                            	  3889: 
01:0000251E C300            	  3890:                 abcd d0,d1
01:00002520 6402            	  3891:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
01:00002522 5284            	  3892:                 add.l #1,d4
01:00002524 DA81            	  3893: ABCD_NO_C1:     add.l d1,d5
                            	  3894: 
01:00002526 C308            	  3895:                 abcd -(a0),-(a1)
01:00002528 6402            	  3896:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
01:0000252A 5284            	  3897:                 add.l #1,d4
01:0000252C D611            	  3898: ABCD_NO_C2:     add.b (a1),d3
                            	  3899: 
                            	  3900: 
01:0000252E 51CEFFD8        	  3901:                 dbf d6,ABCD_INNER1
01:00002532 2C3C00000099    	  3902:                 move.l #$00000099,d6
01:00002538 51CFFFCC        	  3903:                 dbf d7,ABCD_OUTER1
01:0000253C 0C8400005AFC    	  3904:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
01:00002542 66FE            	  3905:                 bne.s *
01:00002544 0C85001C9A34    	  3906:                 cmpi.l #$001C9A34,d5
01:0000254A 66FE            	  3907:                 bne.s *
01:0000254C 0C8300000034    	  3908:                 cmpi.l #$00000034,d3
01:00002552 66FE            	  3909:                 bne.s *
                            	  3910: 
                            	  3911: *     Test with X Flag SET
01:00002554 307C0110        	  3912:                 move.l #$00000110,a0 * Address pointer-X
01:00002558 327C0120        	  3913:                 move.l #$00000120,a1 * Address pointer-Y
01:0000255C 7000            	  3914:                 moveq  #$00000000,d0 * BCD byte-X
01:0000255E 7200            	  3915:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002560 7400            	  3916:                 moveq  #$00000000,d2
01:00002562 7600            	  3917:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:00002564 7800            	  3918:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002566 7A00            	  3919:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002568 2C3C00000099    	  3920:                 move.l #$00000099,d6 * Inner loop counter
01:0000256E 2E3C00000099    	  3921:                 move.l #$00000099,d7 * Outer loop counter
                            	  3922: 
01:00002574 2007            	  3923: ABCD_OUTER2:    move.l d7,d0
01:00002576 2206            	  3924: ABCD_INNER2:    move.l d6,d1
01:00002578 003C0010        	  3925:                 ori.b #$10,CCR      * Set X Flag
01:0000257C 307C0110        	  3926:                 move.l #$00000110,a0 * Address pointer-X
01:00002580 327C0120        	  3927:                 move.l #$00000120,a1 * Address pointer-Y
01:00002584 1140FFFF        	  3928:                 move.b d0,-1(a0)
01:00002588 1341FFFF        	  3929:                 move.b d1,-1(a1)
                            	  3930: 
01:0000258C C300            	  3931:                 abcd d0,d1
01:0000258E 6402            	  3932:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002590 5284            	  3933:                 add.l #1,d4
01:00002592 DA81            	  3934: ABCD_NO_C3:     add.l d1,d5
                            	  3935: 
01:00002594 C308            	  3936:                 abcd -(a0),-(a1)
01:00002596 6402            	  3937:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002598 5284            	  3938:                 add.l #1,d4
01:0000259A D611            	  3939: ABCD_NO_C4:     add.b (a1),d3
                            	  3940: 
                            	  3941: 
01:0000259C 51CEFFD8        	  3942:                 dbf d6,ABCD_INNER2
01:000025A0 2C3C00000099    	  3943:                 move.l #$00000099,d6
01:000025A6 51CFFFCC        	  3944:                 dbf d7,ABCD_OUTER2
01:000025AA 0C8400005B60    	  3945:                 cmpi.l #$00005B60,d4  * Check the cumulative results
01:000025B0 66FE            	  3946:                 bne.s *
01:000025B2 0C85001CCFC8    	  3947:                 cmpi.l #$001CCFC8,d5
01:000025B8 66FE            	  3948:                 bne.s *
01:000025BA 0C8300000034    	  3949:                 cmpi.l #$00000034,d3
01:000025C0 66FE            	  3950:                 bne.s *
                            	  3951: 
                            	  3952: *             Quick check of Z Flag
01:000025C2 4200            	  3953:                 move.b #$00,d0
01:000025C4 4201            	  3954:                 move.b #$00,d1
01:000025C6 44FC0000        	  3955:                 move #$00,CCR              * Set Z flag to 0
01:000025CA C101            	  3956:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025CC 67FE            	  3957:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3958: 
01:000025CE 103C0001        	  3959:                 move.b #$01,d0
01:000025D2 4201            	  3960:                 move.b #$00,d1
01:000025D4 44FC0004        	  3961:                 move #$04,CCR              * Set Z flag to 0
01:000025D8 C101            	  3962:                 abcd d1,d0                  * Should NOT set Z Flag to 1
01:000025DA 67FE            	  3963:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3964: 
01:000025DC 4E75            	  3965:                 rts
                            	  3966: 
                            	  3967: *-----------------------------------------------------------
                            	  3968: *-----------------------------------------------------------
                            	  3969: * OPCODE : SBCD
                            	  3970: *-----------------------------------------------------------
                            	  3971: *-----------------------------------------------------------
                            	  3972: op_SBCD:
                            	  3973: 
                            	  3974: *     Test with X Flag CLEARED
01:000025DE 307C0110        	  3975:                 move.l #$00000110,a0 * Address pointer-X
01:000025E2 327C0120        	  3976:                 move.l #$00000120,a1 * Address pointer-Y
01:000025E6 7000            	  3977:                 moveq  #$00000000,d0 * BCD byte-X
01:000025E8 7200            	  3978:                 moveq  #$00000000,d1 * BCD byte-Y
01:000025EA 7400            	  3979:                 moveq  #$00000000,d2
01:000025EC 7600            	  3980:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:000025EE 7800            	  3981:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000025F0 7A00            	  3982:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:000025F2 2C3C00000099    	  3983:                 move.l #$00000099,d6 * Inner loop counter
01:000025F8 2E3C00000099    	  3984:                 move.l #$00000099,d7 * Outer loop counter
                            	  3985: 
01:000025FE 2007            	  3986: SBCD_OUTER1:    move.l d7,d0
01:00002600 2206            	  3987: SBCD_INNER1:    move.l d6,d1
01:00002602 023C00EF        	  3988:                 andi.b #$EF,CCR     * Clear X Flag
01:00002606 307C0110        	  3989:                 move.l #$00000110,a0 * Address pointer-X
01:0000260A 327C0120        	  3990:                 move.l #$00000120,a1 * Address pointer-Y
01:0000260E 1140FFFF        	  3991:                 move.b d0,-1(a0)
01:00002612 1341FFFF        	  3992:                 move.b d1,-1(a1)
                            	  3993: 
01:00002616 8300            	  3994:                 sbcd d0,d1
01:00002618 6402            	  3995:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
01:0000261A 5284            	  3996:                 add.l #1,d4
01:0000261C DA81            	  3997: SBCD_NO_C1:     add.l d1,d5
                            	  3998: 
01:0000261E 8308            	  3999:                 sbcd -(a0),-(a1)
01:00002620 6402            	  4000:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
01:00002622 5284            	  4001:                 add.l #1,d4
01:00002624 D611            	  4002: SBCD_NO_C2:     add.b (a1),d3
                            	  4003: 
                            	  4004: 
01:00002626 51CEFFD8        	  4005:                 dbf d6,SBCD_INNER1
01:0000262A 2C3C00000099    	  4006:                 move.l #$00000099,d6
01:00002630 51CFFFCC        	  4007:                 dbf d7,SBCD_OUTER1
01:00002634 0C8400005C0A    	  4008:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
01:0000263A 66FE            	  4009:                 bne.s *
01:0000263C 0C85001C459E    	  4010:                 cmpi.l #$001C459E,d5
01:00002642 66FE            	  4011:                 bne.s *
01:00002644 0C830000009E    	  4012:                 cmpi.l #$0000009E,d3
01:0000264A 66FE            	  4013:                 bne.s *
                            	  4014: 
                            	  4015: *     Test with X Flag SET
01:0000264C 307C0110        	  4016:                 move.l #$00000110,a0 * Address pointer-X
01:00002650 327C0120        	  4017:                 move.l #$00000120,a1 * Address pointer-Y
01:00002654 7000            	  4018:                 moveq  #$00000000,d0 * BCD byte-X
01:00002656 7200            	  4019:                 moveq  #$00000000,d1 * BCD byte-Y
01:00002658 7400            	  4020:                 moveq  #$00000000,d2
01:0000265A 7600            	  4021:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
01:0000265C 7800            	  4022:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:0000265E 7A00            	  4023:                 moveq  #$00000000,d5 * Cumulative Register BCD results
01:00002660 2C3C00000099    	  4024:                 move.l #$00000099,d6 * Inner loop counter
01:00002666 2E3C00000099    	  4025:                 move.l #$00000099,d7 * Outer loop counter
                            	  4026: 
01:0000266C 2007            	  4027: SBCD_OUTER2:    move.l d7,d0
01:0000266E 2206            	  4028: SBCD_INNER2:    move.l d6,d1
01:00002670 003C0010        	  4029:                 ori.b #$10,CCR      * Set X Flag
01:00002674 307C0110        	  4030:                 move.l #$00000110,a0 * Address pointer-X
01:00002678 327C0120        	  4031:                 move.l #$00000120,a1 * Address pointer-Y
01:0000267C 1140FFFF        	  4032:                 move.b d0,-1(a0)
01:00002680 1341FFFF        	  4033:                 move.b d1,-1(a1)
                            	  4034: 
01:00002684 8300            	  4035:                 sbcd d0,d1
01:00002686 6402            	  4036:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
01:00002688 5284            	  4037:                 add.l #1,d4
01:0000268A DA81            	  4038: SBCD_NO_C3:     add.l d1,d5
                            	  4039: 
01:0000268C 8308            	  4040:                 sbcd -(a0),-(a1)
01:0000268E 6402            	  4041:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
01:00002690 5284            	  4042:                 add.l #1,d4
01:00002692 D611            	  4043: SBCD_NO_C4:     add.b (a1),d3
                            	  4044: 
01:00002694 51CEFFD8        	  4045:                 dbf d6,SBCD_INNER2
01:00002698 2C3C00000099    	  4046:                 move.l #$00000099,d6
01:0000269E 51CFFFCC        	  4047:                 dbf d7,SBCD_OUTER2
01:000026A2 0C8400005CA4    	  4048:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
01:000026A8 66FE            	  4049:                 bne.s *
01:000026AA 0C85001C5C66    	  4050:                 cmpi.l #$001C5C66,d5
01:000026B0 66FE            	  4051:                 bne.s *
01:000026B2 0C830000009E    	  4052:                 cmpi.l #$0000009E,d3
01:000026B8 66FE            	  4053:                 bne.s *
                            	  4054: 
                            	  4055: 
                            	  4056: *             Quick check of Z Flag
01:000026BA 4200            	  4057:                 move.b #$00,d0
01:000026BC 4201            	  4058:                 move.b #$00,d1
01:000026BE 44FC0000        	  4059:                 move #$00,CCR              * Set Z flag to 0
01:000026C2 8101            	  4060:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026C4 67FE            	  4061:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4062: 
01:000026C6 103C0001        	  4063:                 move.b #$01,d0
01:000026CA 4201            	  4064:                 move.b #$00,d1
01:000026CC 44FC0004        	  4065:                 move #$04,CCR              * Set Z flag to 0
01:000026D0 8101            	  4066:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
01:000026D2 67FE            	  4067:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4068: 
01:000026D4 4E75            	  4069:                 rts
                            	  4070: 
                            	  4071: *-----------------------------------------------------------
                            	  4072: *-----------------------------------------------------------
                            	  4073: * OPCODE : NBCD
                            	  4074: *-----------------------------------------------------------
                            	  4075: *-----------------------------------------------------------
                            	  4076: op_NBCD:
                            	  4077: 
                            	  4078: *        NBCD to a  Register
                            	  4079: 
01:000026D6 7000            	  4080:                 moveq  #$00000000,d0 * BCD byte
01:000026D8 7200            	  4081:                 moveq  #$00000000,d1
01:000026DA 7400            	  4082:                 moveq  #$00000000,d2
01:000026DC 7600            	  4083:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:000026DE 7800            	  4084:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:000026E0 7A00            	  4085:                 moveq  #$00000000,d5 * Cumulative BCD results
01:000026E2 2C3C00000099    	  4086:                 move.l #$00000099,d6
01:000026E8 2E3C00000099    	  4087:                 move.l #$00000099,d7 * Loop counter
                            	  4088: 
01:000026EE 2007            	  4089: NBCD_LOOP:      move.l d7,d0
01:000026F0 44FC0004        	  4090:                 move #$04,CCR        * Set Z flag to 0
                            	  4091: 
01:000026F4 4800            	  4092:                 nbcd d0
                            	  4093: 
01:000026F6 6402            	  4094:                 bcc.s NBCD_NO_C         * Check C Flag
01:000026F8 5284            	  4095:                 add.l #1,d4
01:000026FA 6602            	  4096: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
01:000026FC 5283            	  4097:                 add.l #1,d3
01:000026FE DA80            	  4098: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4099: 
01:00002700 51CFFFEC        	  4100:                 dbf d7,NBCD_LOOP
                            	  4101: 
01:00002704 0C8300000001    	  4102:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:0000270A 66FE            	  4103:                 bne.s *
01:0000270C 0C8400000099    	  4104:                 cmpi.l #$00000099,d4
01:00002712 66FE            	  4105:                 bne.s *
01:00002714 0C8500002E3B    	  4106:                 cmpi.l #$00002E3B,d5
01:0000271A 66FE            	  4107:                 bne.s *
                            	  4108: 
                            	  4109: 
                            	  4110: *        NBCD to a memory location
                            	  4111: 
01:0000271C 7000            	  4112:                 moveq  #$00000000,d0 * BCD byte
01:0000271E 7200            	  4113:                 moveq  #$00000000,d1
01:00002720 7400            	  4114:                 moveq  #$00000000,d2
01:00002722 7600            	  4115:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
01:00002724 7800            	  4116:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
01:00002726 7A00            	  4117:                 moveq  #$00000000,d5 * Cumulative BCD results
01:00002728 2C3C00000099    	  4118:                 move.l #$00000099,d6
01:0000272E 2E3C00000099    	  4119:                 move.l #$00000099,d7 * Loop counter
                            	  4120: 
01:00002734 11C70100        	  4121: NBCD_LOOP1:     move.b d7,$00000100
01:00002738 44FC0004        	  4122:                 move #$04,CCR        * Set Z flag to 0
                            	  4123: 
01:0000273C 48380100        	  4124:                 nbcd $00000100
01:00002740 10380100        	  4125:                 move.b $00000100,d0
                            	  4126: 
01:00002744 6402            	  4127:                 bcc.s NBCD_NO_C1        * Check C Flag
01:00002746 5284            	  4128:                 add.l #1,d4
01:00002748 6602            	  4129: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
01:0000274A 5283            	  4130:                 add.l #1,d3
01:0000274C DA80            	  4131: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4132: 
01:0000274E 51CFFFE4        	  4133:                 dbf d7,NBCD_LOOP1
                            	  4134: 
01:00002752 0C8300000001    	  4135:                 cmpi.l #$00000001,d3  * Check the cumulative results
01:00002758 66FE            	  4136:                 bne.s *
01:0000275A 4A84            	  4137:                 cmpi.l #$00000000,d4
01:0000275C 66FE            	  4138:                 bne.s *
01:0000275E 0C8500002E3B    	  4139:                 cmpi.l #$00002E3B,d5
01:00002764 66FE            	  4140:                 bne.s *
                            	  4141: 
                            	  4142: 
01:00002766 4E75            	  4143:                 rts
                            	  4144: 
                            	  4145: 
                            	  4146: 
                            	  4147: *-----------------------------------------------------------
                            	  4148: *-----------------------------------------------------------
                            	  4149: * OPCODE : TRAPV
                            	  4150: *-----------------------------------------------------------
                            	  4151: *-----------------------------------------------------------
                            	  4152: op_TRAPV:
                            	  4153: 
                            	  4154: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4155: 
01:00002768 7000            	  4156:                 moveq  #$00000000,d0 * Clear d0
                            	  4157: 
01:0000276A 44FC0000        	  4158:                 move #$00,CCR        * Clear V flag
01:0000276E 4E76            	  4159:                 trapv
01:00002770 4A80            	  4160:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
01:00002772 66FE            	  4161:                 bne.s *
                            	  4162: 
01:00002774 44FC0002        	  4163:                 move #$02,CCR        * Set V flag
01:00002778 4E76            	  4164:                 trapv
01:0000277A 0C8012345678    	  4165:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
01:00002780 66FE            	  4166:                 bne.s *
                            	  4167: 
                            	  4168: 
01:00002782 4E75            	  4169:                 rts
                            	  4170: 
                            	  4171: 
                            	  4172: 
                            	  4173: *-----------------------------------------------------------
                            	  4174: *-----------------------------------------------------------
                            	  4175: * OPCODE : RTR
                            	  4176: *-----------------------------------------------------------
                            	  4177: *-----------------------------------------------------------
                            	  4178: 
                            	  4179: op_RTR:
                            	  4180: 
                            	  4181: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4182: 
01:00002784 41FA000A        	  4183:                 lea 		RTR_DONE,a0
01:00002788 2F08            	  4184:                 move.l 	a0,-(a7)     * push destination PC to the stack
01:0000278A 3F3CFF15        	  4185:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
01:0000278E 4E77            	  4186:                 rtr
                            	  4187: 
01:00002790 40C0            	  4188: RTR_DONE:       move.w SR,d0
01:00002792 0240001F        	  4189:                 andi.w #$1F,d0
01:00002796 0C400015        	  4190:                 cmpi.w #$15,d0
01:0000279A 66FE            	  4191:                 bne.s *
                            	  4192: 
01:0000279C 4E75            	  4193:                 rts
                            	  4194: 
                            	  4195: 
01:0000279E 283C44444444    	  4196: BSR_FAR2:       move.l #$44444444,d4
01:000027A4 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
                            	  4200: *-----------------------------------------------------------
                            	  4201: *-----------------------------------------------------------
                            	  4202: * OPCODE : BCC
                            	  4203: *-----------------------------------------------------------
                            	  4204: *-----------------------------------------------------------
                            	  4205: 
01:000027A6 44FC0000        	  4206: op_BCC:         move #$00,CCR
01:000027AA 6202            	  4207:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
01:000027AC 60FE            	  4208:                 bra.s *
                            	  4209: 
01:000027AE 44FC0001        	  4210: BCC1:           move #$01,CCR
01:000027B2 63000004        	  4211:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
01:000027B6 60FE            	  4212:                 bra.s *
                            	  4213: 
01:000027B8 44FC0000        	  4214: BCC2:           move #$00,CCR
01:000027BC 6402            	  4215:                 bcc.s BCC3            * Carry Clear         C=0
01:000027BE 60FE            	  4216:                 bra.s *
                            	  4217: 
01:000027C0 44FC0001        	  4218: BCC3:           move #$01,CCR
01:000027C4 65000004        	  4219:                 bcs.w BCC4            * Carry Set           C=1
01:000027C8 60FE            	  4220:                 bra.s *
                            	  4221: 
01:000027CA 44FC0000        	  4222: BCC4:           move #$00,CCR
01:000027CE 6602            	  4223:                 bne.s BCC5            * Not Equal           Z=0
01:000027D0 60FE            	  4224:                 bra.s *
                            	  4225: 
01:000027D2 44FC0004        	  4226: BCC5:           move #$04,CCR
01:000027D6 67000004        	  4227:                 beq.w BCC6            * Equal               Z=1
01:000027DA 60FE            	  4228:                 bra.s *
                            	  4229: 
01:000027DC 44FC0000        	  4230: BCC6:           move #$00,CCR
01:000027E0 6802            	  4231:                 bvc.s BCC7            * V Clear             V=0
01:000027E2 60FE            	  4232:                 bra.s *
                            	  4233: 
01:000027E4 44FC0002        	  4234: BCC7:           move #$02,CCR
01:000027E8 69000004        	  4235:                 bvs.w BCC8            * V Set               V=1
01:000027EC 60FE            	  4236:                 bra.s *
                            	  4237: 
01:000027EE 44FC0000        	  4238: BCC8:           move #$00,CCR
01:000027F2 6A02            	  4239:                 bpl.s BCC9            * Plus                N=0
01:000027F4 60FE            	  4240:                 bra.s *
                            	  4241: 
01:000027F6 44FC0008        	  4242: BCC9:           move #$08,CCR
01:000027FA 6B000004        	  4243:                 bmi.w BCC10           * Minus               N=1
01:000027FE 60FE            	  4244:                 bra.s *
                            	  4245: 
01:00002800 44FC0000        	  4246: BCC10:          move #$00,CCR
01:00002804 6C02            	  4247:                 bge.s BCC11           * Greater or Equal    N=V
01:00002806 60FE            	  4248:                 bra.s *
                            	  4249: 
01:00002808 44FC0002        	  4250: BCC11:          move #$02,CCR
01:0000280C 6D000004        	  4251:                 blt.w BCC12           * Less Than           N!=V
01:00002810 60FE            	  4252:                 bra.s *
                            	  4253: 
01:00002812 44FC000A        	  4254: BCC12:          move #$0A,CCR
01:00002816 6E02            	  4255:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
01:00002818 60FE            	  4256:                 bra.s *
                            	  4257: 
01:0000281A 44FC0006        	  4258: BCC13:          move #$06,CCR
01:0000281E 6F000004        	  4259:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
01:00002822 60FE            	  4260:                 bra.s *
                            	  4261: 
                            	  4262: 
01:00002824 4E75            	  4263: BCC14:          rts
                            	  4264: 
                            	  4265: 
                            	  4266: *-----------------------------------------------------------
                            	  4267: *-----------------------------------------------------------
                            	  4268: * OPCODE : DBCC
                            	  4269: *-----------------------------------------------------------
                            	  4270: *-----------------------------------------------------------
                            	  4271: 
01:00002826 7003            	  4272: op_DBCC:        moveq  #$00000003,d0    * Loop counter
01:00002828 7200            	  4273:                 moveq  #$00000000,d1    * Accumulator
01:0000282A 44FC0000        	  4274:                 move #$00,CCR
                            	  4275: 
01:0000282E 5201            	  4276: DBCC_LOOP1:     addi.b #$1,d1
01:00002830 51C8FFFC        	  4277:                 dbf d0,DBCC_LOOP1
                            	  4278: 
01:00002834 0C8100000004    	  4279:                 cmpi.l #$00000004,d1  * Check Accumulator results
01:0000283A 66FE            	  4280:                 bne.s *
                            	  4281: 
01:0000283C 5201            	  4282: DBCC_LOOP2:     addi.b #$1,d1
01:0000283E 54C8FFFC        	  4283:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4284: 
01:00002842 0C8100000005    	  4285:                 cmpi.l #$00000005,d1  * Check Accumulator results
01:00002848 66FE            	  4286:                 bne.s *
                            	  4287: 
01:0000284A 4E75            	  4288:                 rts
                            	  4289: 
                            	  4290: 
                            	  4291: *-----------------------------------------------------------
                            	  4292: *-----------------------------------------------------------
                            	  4293: * OPCODE : SCC
                            	  4294: *-----------------------------------------------------------
                            	  4295: *-----------------------------------------------------------
                            	  4296: 
01:0000284C 44FC0001        	  4297: op_SCC:         move #$01,CCR
01:00002850 54F900010000    	  4298:                 scc $00010000                   * Clear the EA byte
01:00002856 4A3900010000    	  4299:                 cmpi.b #$00,$00010000
01:0000285C 66FE            	  4300:                 bne.s *
                            	  4301: 
01:0000285E 44FC0000        	  4302:                 move #$00,CCR
01:00002862 54F900010000    	  4303:                 scc $00010000                   * Set the EA byte to 0xFF
01:00002868 0C3900FF00010000	  4304:                 cmpi.b #$FF,$00010000
01:00002870 66FE            	  4305:                 bne.s *
                            	  4306: 
01:00002872 4E75            	  4307:                 rts
                            	  4308: 
                            	  4309: 
                            	  4310: 
                            	  4311: *-----------------------------------------------------------
                            	  4312: *-----------------------------------------------------------
                            	  4313: * OPCODE : ADDQ
                            	  4314: *-----------------------------------------------------------
                            	  4315: *-----------------------------------------------------------
                            	  4316: 
                            	  4317: op_ADDQ:
                            	  4318: 
                            	  4319: *     BYTE
01:00002874 203C000000FF    	  4320:                 move.l #$000000FF,d0    * Loop counter
01:0000287A 7200            	  4321:                 moveq  #$00000000,d1    * Flag results accumulator
01:0000287C 7400            	  4322:                 moveq  #$00000000,d2    * Data results accumulator
01:0000287E 7600            	  4323:                 moveq  #$00000000,d3
01:00002880 7800            	  4324:                 moveq  #$00000000,d4
01:00002882 7A00            	  4325:                 moveq  #$00000000,d5
01:00002884 7C00            	  4326:                 moveq  #$00000000,d6
01:00002886 7E00            	  4327:                 moveq  #$00000000,d7
                            	  4328: 
01:00002888 5605            	  4329: ADDQ_LOOP1:     addq.b #3,d5
01:0000288A 40C6            	  4330:                 move.w SR,d6
01:0000288C 02860000001F    	  4331:                 andi.l #$1F,d6        * Isolate flags
01:00002892 D286            	  4332:                 add.l d6,d1           * Copy flag results into accumulator
01:00002894 D485            	  4333:                 add.l d5,d2           * Copy data results into data accumulator
01:00002896 51C8FFF0        	  4334:                 dbf d0,ADDQ_LOOP1
                            	  4335: 
01:0000289A 0C810000043D    	  4336:                 cmpi.l #$0000043D,d1
01:000028A0 66FE            	  4337:                 bne.s *
01:000028A2 0C8200007F80    	  4338:                 cmpi.l #$00007F80,d2
01:000028A8 66FE            	  4339:                 bne.s *
                            	  4340: 
                            	  4341: 
                            	  4342: *     WORD
01:000028AA 203C000000FF    	  4343:                 move.l #$000000FF,d0    * Loop counter
01:000028B0 7200            	  4344:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028B2 7400            	  4345:                 moveq  #$00000000,d2    * Data results accumulator
01:000028B4 7600            	  4346:                 moveq  #$00000000,d3
01:000028B6 7800            	  4347:                 moveq  #$00000000,d4
01:000028B8 2A3C0000FFF0    	  4348:                 move.l #$0000FFF0,d5
01:000028BE 7C00            	  4349:                 moveq  #$00000000,d6
01:000028C0 7E00            	  4350:                 moveq  #$00000000,d7
01:000028C2 307C0100        	  4351:                 move.l #$00000100,a0
                            	  4352: 
01:000028C6 5A45            	  4353: ADDQ_LOOP2:     addq.w #5,d5
01:000028C8 40C6            	  4354:                 move.w SR,d6
01:000028CA 02860000001F    	  4355:                 andi.l #$1F,d6        * Isolate flags
01:000028D0 D286            	  4356:                 add.l d6,d1           * Copy flag results into accumulator
01:000028D2 D485            	  4357:                 add.l d5,d2           * Copy data results into data accumulator
01:000028D4 51C8FFF0        	  4358:                 dbf d0,ADDQ_LOOP2
                            	  4359: 
01:000028D8 0C8100000029    	  4360:                 cmpi.l #$00000029,d1
01:000028DE 66FE            	  4361:                 bne.s *
01:000028E0 0C8200057280    	  4362:                 cmpi.l #$00057280,d2
01:000028E6 66FE            	  4363:                 bne.s *
                            	  4364: 
                            	  4365: 
                            	  4366: *     LONG
01:000028E8 203C000000FF    	  4367:                 move.l #$000000FF,d0    * Loop counter
01:000028EE 7200            	  4368:                 moveq  #$00000000,d1    * Flag results accumulator
01:000028F0 7400            	  4369:                 moveq  #$00000000,d2    * Data results accumulator
01:000028F2 7600            	  4370:                 moveq  #$00000000,d3
01:000028F4 7800            	  4371:                 moveq  #$00000000,d4
01:000028F6 7AF0            	  4372:                 move.l #$FFFFFFF0,d5
01:000028F8 7C00            	  4373:                 moveq  #$00000000,d6
01:000028FA 7E00            	  4374:                 moveq  #$00000000,d7
                            	  4375: 
01:000028FC 5285            	  4376: ADDQ_LOOP3:     addq.l #1,d5
01:000028FE 40C6            	  4377:                 move.w SR,d6
01:00002900 02860000001F    	  4378:                 andi.l #$1F,d6        * Isolate flags
01:00002906 D286            	  4379:                 add.l d6,d1           * Copy flag results into accumulator
01:00002908 D485            	  4380:                 add.l d5,d2           * Copy data results into data accumulator
01:0000290A 51C8FFF0        	  4381:                 dbf d0,ADDQ_LOOP3
                            	  4382: 
01:0000290E 0C810000008D    	  4383:                 cmpi.l #$0000008D,d1
01:00002914 66FE            	  4384:                 bne.s *
01:00002916 0C8200007080    	  4385:                 cmpi.l #$00007080,d2
01:0000291C 66FE            	  4386:                 bne.s *
                            	  4387: 
                            	  4388: *     Check that Flags are not updated for Address registers
01:0000291E 207C0000FFFF    	  4389:                 move.l #$0000FFFF,a0
01:00002924 44FC0000        	  4390:                 move #$00,CCR         * Clear flags
01:00002928 5E48            	  4391:                 addq.w #$7,a0
01:0000292A 65FE            	  4392:                 bcs.s *
                            	  4393: 
01:0000292C 4E75            	  4394:                 rts
                            	  4395: 
                            	  4396: 
                            	  4397: 
                            	  4398: *-----------------------------------------------------------
                            	  4399: *-----------------------------------------------------------
                            	  4400: * OPCODE : SUBQ
                            	  4401: *-----------------------------------------------------------
                            	  4402: *-----------------------------------------------------------
                            	  4403: 
                            	  4404: op_SUBQ:
                            	  4405: 
                            	  4406: *     BYTE
01:0000292E 203C000000FF    	  4407:                 move.l #$000000FF,d0    * Loop counter
01:00002934 7200            	  4408:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002936 243C00001234    	  4409:                 move.l #$00001234,d2    * Data results accumulator
01:0000293C 7600            	  4410:                 moveq  #$00000000,d3
01:0000293E 7800            	  4411:                 moveq  #$00000000,d4
01:00002940 7A12            	  4412:                 moveq  #$00000012,d5
01:00002942 7C00            	  4413:                 moveq  #$00000000,d6
01:00002944 7E00            	  4414:                 moveq  #$00000000,d7
                            	  4415: 
01:00002946 5305            	  4416: SUBQ_LOOP1:     subq.b #1,d5
01:00002948 40C6            	  4417:                 move.w SR,d6
01:0000294A 02860000001F    	  4418:                 andi.l #$1F,d6        * Isolate flags
01:00002950 D286            	  4419:                 add.l d6,d1           * Copy flag results into accumulator
01:00002952 D485            	  4420:                 add.l d5,d2           * Copy data results into data accumulator
01:00002954 51C8FFF0        	  4421:                 dbf d0,SUBQ_LOOP1
                            	  4422: 
01:00002958 0C8100000417    	  4423:                 cmpi.l #$00000417,d1
01:0000295E 66FE            	  4424:                 bne.s *
01:00002960 0C82000091B4    	  4425:                 cmpi.l #$000091B4,d2
01:00002966 66FE            	  4426:                 bne.s *
                            	  4427: 
                            	  4428: 
                            	  4429: *     WORD
01:00002968 203C000000FF    	  4430:                 move.l #$000000FF,d0    * Loop counter
01:0000296E 7200            	  4431:                 moveq  #$00000000,d1    * Flag results accumulator
01:00002970 7400            	  4432:                 moveq  #$00000000,d2    * Data results accumulator
01:00002972 7600            	  4433:                 moveq  #$00000000,d3
01:00002974 7800            	  4434:                 moveq  #$00000000,d4
01:00002976 7A02            	  4435:                 moveq  #$00000002,d5
01:00002978 7C00            	  4436:                 moveq  #$00000000,d6
01:0000297A 7E00            	  4437:                 moveq  #$00000000,d7
01:0000297C 307C0100        	  4438:                 move.l #$00000100,a0
                            	  4439: 
01:00002980 5B45            	  4440: SUBQ_LOOP2:     subq.w #5,d5
01:00002982 40C6            	  4441:                 move.w SR,d6
01:00002984 02860000001F    	  4442:                 andi.l #$1F,d6        * Isolate flags
01:0000298A D286            	  4443:                 add.l d6,d1           * Copy flag results into accumulator
01:0000298C D485            	  4444:                 add.l d5,d2           * Copy data results into data accumulator
01:0000298E 51C8FFF0        	  4445:                 dbf d0,SUBQ_LOOP2
                            	  4446: 
01:00002992 0C8100000811    	  4447:                 cmpi.l #$00000811,d1
01:00002998 66FE            	  4448:                 bne.s *
01:0000299A 0C8200FD7F80    	  4449:                 cmpi.l #$00FD7F80,d2
01:000029A0 66FE            	  4450:                 bne.s *
                            	  4451: 
                            	  4452: 
                            	  4453: *     LONG
01:000029A2 203C000000FF    	  4454:                 move.l #$000000FF,d0    * Loop counter
01:000029A8 7200            	  4455:                 moveq  #$00000000,d1    * Flag results accumulator
01:000029AA 7400            	  4456:                 moveq  #$00000000,d2    * Data results accumulator
01:000029AC 7600            	  4457:                 moveq  #$00000000,d3
01:000029AE 7800            	  4458:                 moveq  #$00000000,d4
01:000029B0 7A07            	  4459:                 moveq  #$00000007,d5
01:000029B2 7C00            	  4460:                 moveq  #$00000000,d6
01:000029B4 7E00            	  4461:                 moveq  #$00000000,d7
                            	  4462: 
01:000029B6 5385            	  4463: SUBQ_LOOP3:     subq.l #1,d5
01:000029B8 40C6            	  4464:                 move.w SR,d6
01:000029BA 02860000001F    	  4465:                 andi.l #$1F,d6        * Isolate flags
01:000029C0 D286            	  4466:                 add.l d6,d1           * Copy flag results into accumulator
01:000029C2 D485            	  4467:                 add.l d5,d2           * Copy data results into data accumulator
01:000029C4 51C8FFF0        	  4468:                 dbf d0,SUBQ_LOOP3
                            	  4469: 
01:000029C8 0C81000007DD    	  4470:                 cmpi.l #$000007DD,d1
01:000029CE 66FE            	  4471:                 bne.s *
01:000029D0 0C82FFFF8680    	  4472:                 cmpi.l #$FFFF8680,d2
01:000029D6 66FE            	  4473:                 bne.s *
                            	  4474: 
                            	  4475: *     Check that Flags are not updated for Address registers
01:000029D8 207C0001FFFF    	  4476:                 move.l #$0001FFFF,a0
01:000029DE 44FC0000        	  4477:                 move #$00,CCR         * Clear flags
01:000029E2 5F48            	  4478:                 subq.w #$7,a0
01:000029E4 65FE            	  4479:                 bcs.s *
                            	  4480: 
01:000029E6 4E75            	  4481:                 rts
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: 
                            	  4486: *-----------------------------------------------------------
                            	  4487: *-----------------------------------------------------------
                            	  4488: * OPCODE : MOVEQ
                            	  4489: *-----------------------------------------------------------
                            	  4490: *-----------------------------------------------------------
                            	  4491: 
                            	  4492: op_MOVEQ:
01:000029E8 7000            	  4493:                 moveq  #$00000000,d0
01:000029EA 7000            	  4494:                 moveq #$0,d0
01:000029EC 66FE            	  4495:                 bne.s *
01:000029EE 4A80            	  4496:                 cmpi.l #$00000000,d0
01:000029F0 66FE            	  4497:                 bne.s *
                            	  4498: 
01:000029F2 7000            	  4499:                 moveq  #$00000000,d0
01:000029F4 7080            	  4500:                 moveq #-128,d0
01:000029F6 67FE            	  4501:                 beq.s *
01:000029F8 6AFE            	  4502:                 bpl.s *
01:000029FA 0C80FFFFFF80    	  4503:                 cmpi.l #$FFFFFF80,d0
01:00002A00 66FE            	  4504:                 bne.s *
                            	  4505: 
                            	  4506: 
01:00002A02 4E75            	  4507:                 rts
                            	  4508: 
                            	  4509: 
                            	  4510: *-----------------------------------------------------------
                            	  4511: *-----------------------------------------------------------
                            	  4512: * OPCODE : DIVU
                            	  4513: *-----------------------------------------------------------
                            	  4514: *-----------------------------------------------------------
                            	  4515: 
                            	  4516: op_DIVU:
                            	  4517: 
01:00002A04 203CA5A5A5A5    	  4518:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A0A 223C00005A5A    	  4519:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A10 243CA5A5A5A5    	  4520:                 move.l #$a5a5a5a5,d2
01:00002A16 7600            	  4521:                 moveq  #$00000000,d3
01:00002A18 7800            	  4522:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A1A 7A00            	  4523:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A1C 7C0E            	  4524:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A1E 7E1E            	  4525:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4526: 
                            	  4527: 
01:00002A20 80C1            	  4528: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
01:00002A22 40C3            	  4529:                 move.w SR,d3
01:00002A24 02830000000C    	  4530:                 andi.l #$0C,d3            * Isolate flags
01:00002A2A DA83            	  4531:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A2C D880            	  4532:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A2E E289            	  4533:                 lsr.l #$1,d1
                            	  4534: 
01:00002A30 51CEFFEE        	  4535:                 dbf d6,DIVU_OUTER1
01:00002A34 E28A            	  4536:                 lsr.l #$1,d2
01:00002A36 2002            	  4537:                 move.l d2,d0
01:00002A38 223C00005A5A    	  4538:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A3E 7C0E            	  4539:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A40 51CFFFDE        	  4540:                 dbf d7,DIVU_OUTER1
                            	  4541: 
01:00002A44 0C8492FEDB89    	  4542:                 cmpi.l #$92FEDB89,d4      * Check the data results
01:00002A4A 66FE            	  4543:                 bne.s *
                            	  4544: 
01:00002A4C 0C8500000110    	  4545:                 cmpi.l #$00000110,d5      * Check the Flag results
01:00002A52 66FE            	  4546:                 bne.s *
                            	  4547: 
                            	  4548: 
01:00002A54 4E75            	  4549:                 rts
                            	  4550: 
                            	  4551: 
                            	  4552: 
                            	  4553: *-----------------------------------------------------------
                            	  4554: *-----------------------------------------------------------
                            	  4555: * OPCODE : DIVS
                            	  4556: *-----------------------------------------------------------
                            	  4557: *-----------------------------------------------------------
                            	  4558: 
                            	  4559: op_DIVS:
                            	  4560: 
01:00002A56 203CA5A5A5A5    	  4561:                 move.l #$a5a5a5a5,d0        * Initial Numerator
01:00002A5C 223C00005A5A    	  4562:                 move.l #$00005a5a,d1        * Initial Divisor
01:00002A62 243CA5A5A5A5    	  4563:                 move.l #$a5a5a5a5,d2
01:00002A68 7600            	  4564:                 moveq  #$00000000,d3
01:00002A6A 7800            	  4565:                 moveq  #$00000000,d4        * Cumulative data results
01:00002A6C 7A00            	  4566:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002A6E 7C0E            	  4567:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A70 7E1E            	  4568:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4569: 
                            	  4570: 
01:00002A72 81C1            	  4571: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
01:00002A74 40C3            	  4572:                 move.w SR,d3
01:00002A76 02830000000C    	  4573:                 andi.l #$0C,d3            * Isolate flags
01:00002A7C DA83            	  4574:                 add.l d3,d5               * Copy flag results into accumulator
01:00002A7E D880            	  4575:                 add.l d0,d4               * Copy data results into data accumulator
01:00002A80 E289            	  4576:                 lsr.l #$1,d1
                            	  4577: 
01:00002A82 51CEFFEE        	  4578:                 dbf d6,DIVS_OUTER1
01:00002A86 E28A            	  4579:                 lsr.l #$1,d2
01:00002A88 2002            	  4580:                 move.l d2,d0
01:00002A8A 223C00005A5A    	  4581:                 move.l #$00005a5a,d1       * Initial Divisor
01:00002A90 7C0E            	  4582:                 move.l #$0000000E,d6       * Inner loop counter
01:00002A92 51CFFFDE        	  4583:                 dbf d7,DIVS_OUTER1
                            	  4584: 
01:00002A96 0C844EC5D057    	  4585:                 cmpi.l #$4EC5D057,d4      * Check the data results
01:00002A9C 66FE            	  4586:                 bne.s *
                            	  4587: 
01:00002A9E 0C8500000038    	  4588:                 cmpi.l #$00000038,d5      * Check the Flag results
01:00002AA4 66FE            	  4589:                 bne.s *
                            	  4590: 
                            	  4591: 
01:00002AA6 4E75            	  4592:                 rts
                            	  4593: 
                            	  4594: 
                            	  4595: 
                            	  4596: *-----------------------------------------------------------
                            	  4597: *-----------------------------------------------------------
                            	  4598: * OPCODE : OR
                            	  4599: *-----------------------------------------------------------
                            	  4600: *-----------------------------------------------------------
                            	  4601: 
                            	  4602: op_OR:
                            	  4603: 
                            	  4604: *  * <EA> to Register
                            	  4605: 
01:00002AA8 203CA5A5A5A5    	  4606:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002AAE 223C8167E123    	  4607:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002AB4 243CA5A5A5A5    	  4608:                 move.l #$a5a5a5a5,d2
01:00002ABA 7600            	  4609:                 moveq  #$00000000,d3
01:00002ABC 7800            	  4610:                 moveq  #$00000000,d4       * Cumulative data results
01:00002ABE 7A00            	  4611:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002AC0 7C1E            	  4612:                 move.l #$0000001E,d6       * Inner loop counter
01:00002AC2 7E1E            	  4613:                 move.l #$0000001E,d7       * Outer loop counter
01:00002AC4 307C0100        	  4614:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4615: 
                            	  4616: 
                            	  4617: OR_OUTER1:
                            	  4618: 
                            	  4619: *     BYTE
01:00002AC8 2081            	  4620:                 move.l d1,(a0)
01:00002ACA 8010            	  4621:                 or.b (a0),d0
01:00002ACC 40C3            	  4622:                 move.w SR,d3
01:00002ACE 02830000000C    	  4623:                 andi.l #$0C,d3            * Isolate flags
01:00002AD4 DA83            	  4624:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AD6 D880            	  4625:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4626: 
                            	  4627: *     WORD
01:00002AD8 2081            	  4628:                 move.l d1,(a0)
01:00002ADA 8050            	  4629:                 or.w (a0),d0
01:00002ADC 40C3            	  4630:                 move.w SR,d3
01:00002ADE 02830000000C    	  4631:                 andi.l #$0C,d3            * Isolate flags
01:00002AE4 DA83            	  4632:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AE6 D880            	  4633:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4634: 
                            	  4635: *     LONG
01:00002AE8 2081            	  4636:                 move.l d1,(a0)
01:00002AEA 8090            	  4637:                 or.l (a0),d0
01:00002AEC 40C3            	  4638:                 move.w SR,d3
01:00002AEE 02830000000F    	  4639:                 andi.l #$0F,d3            * Isolate flags
01:00002AF4 DA83            	  4640:                 add.l d3,d5               * Copy flag results into accumulator
01:00002AF6 D880            	  4641:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4642: 
                            	  4643: 
01:00002AF8 E289            	  4644:                 lsr.l #$1,d1
01:00002AFA 51CEFFCC        	  4645:                 dbf d6,OR_OUTER1
01:00002AFE E28A            	  4646:                 lsr.l #$1,d2
01:00002B00 223C8167E123    	  4647:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B06 7C1E            	  4648:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B08 51CFFFBE        	  4649:                 dbf d7,OR_OUTER1
                            	  4650: 
01:00002B0C 0C8476EAC803    	  4651:                 cmpi.l #$76EAC803,d4      * Check the data results
01:00002B12 66FE            	  4652:                 bne.s *
01:00002B14 0C8500005A18    	  4653:                 cmpi.l #$00005A18,d5      * Check the Flag results
01:00002B1A 66FE            	  4654:                 bne.s *
                            	  4655: 
                            	  4656: 
                            	  4657: *  * Register to <EA>
                            	  4658: 
01:00002B1C 203C86738374    	  4659:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002B22 223CFC55F2FE    	  4660:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002B28 243C86738374    	  4661:                 move.l #$86738374,d2
01:00002B2E 7600            	  4662:                 moveq  #$00000000,d3
01:00002B30 7800            	  4663:                 moveq  #$00000000,d4       * Cumulative data results
01:00002B32 7A00            	  4664:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002B34 7C1E            	  4665:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B36 7E1D            	  4666:                 move.l #$0000001D,d7       * Outer loop counter
01:00002B38 307C0100        	  4667:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4668: 
                            	  4669: 
                            	  4670: OR_OUTER2:
                            	  4671: 
                            	  4672: *     BYTE
01:00002B3C 2080            	  4673:                 move.l d0,(a0)
01:00002B3E 8310            	  4674:                 or.b d1,(a0)
01:00002B40 40C3            	  4675:                 move.w SR,d3
01:00002B42 02830000000C    	  4676:                 andi.l #$0C,d3            * Isolate flags
01:00002B48 DA83            	  4677:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B4A D890            	  4678:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4679: 
                            	  4680: *     WORD
01:00002B4C 2080            	  4681:                 move.l d0,(a0)
01:00002B4E 8350            	  4682:                 or.w d1,(a0)
01:00002B50 40C3            	  4683:                 move.w SR,d3
01:00002B52 02830000000C    	  4684:                 andi.l #$0C,d3            * Isolate flags
01:00002B58 DA83            	  4685:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B5A D890            	  4686:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4687: 
                            	  4688: *     LONG
01:00002B5C 2080            	  4689:                 move.l d0,(a0)
01:00002B5E 8390            	  4690:                 or.l d1,(a0)
01:00002B60 40C3            	  4691:                 move.w SR,d3
01:00002B62 02830000000F    	  4692:                 andi.l #$0F,d3            * Isolate flags
01:00002B68 DA83            	  4693:                 add.l d3,d5               * Copy flag results into accumulator
01:00002B6A D890            	  4694:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4695: 
                            	  4696: 
01:00002B6C E289            	  4697:                 lsr.l #$1,d1
01:00002B6E 51CEFFCC        	  4698:                 dbf d6,OR_OUTER2
01:00002B72 E28A            	  4699:                 lsr.l #$1,d2
01:00002B74 223C8167E123    	  4700:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002B7A 7C1E            	  4701:                 move.l #$0000001E,d6       * Inner loop counter
01:00002B7C 51CFFFBE        	  4702:                 dbf d7,OR_OUTER2
                            	  4703: 
01:00002B80 0C84FA82B9E4    	  4704:                 cmpi.l #$FA82B9E4,d4      * Check the data results
01:00002B86 66FE            	  4705:                 bne.s *
01:00002B88 0C8500005730    	  4706:                 cmpi.l #$00005730,d5      * Check the Flag results
01:00002B8E 66FE            	  4707:                 bne.s *
                            	  4708: 
                            	  4709: 
01:00002B90 4E75            	  4710:                 rts
                            	  4711: 
                            	  4712: 
                            	  4713: 
                            	  4714: *-----------------------------------------------------------
                            	  4715: *-----------------------------------------------------------
                            	  4716: * OPCODE : AND
                            	  4717: *-----------------------------------------------------------
                            	  4718: *-----------------------------------------------------------
                            	  4719: 
                            	  4720: op_AND:
                            	  4721: 
                            	  4722: *  * <EA> to Register
                            	  4723: 
01:00002B92 203CA5A5A5A5    	  4724:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002B98 223C8167E123    	  4725:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002B9E 243CA5A5A5A5    	  4726:                 move.l #$a5a5a5a5,d2
01:00002BA4 7600            	  4727:                 moveq  #$00000000,d3
01:00002BA6 7800            	  4728:                 moveq  #$00000000,d4       * Cumulative data results
01:00002BA8 7A00            	  4729:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002BAA 7C1E            	  4730:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BAC 7E1E            	  4731:                 move.l #$0000001E,d7       * Outer loop counter
01:00002BAE 307C0100        	  4732:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4733: 
                            	  4734: 
                            	  4735: AND_OUTER1:
                            	  4736: 
                            	  4737: *     BYTE
01:00002BB2 2081            	  4738:                 move.l d1,(a0)
01:00002BB4 C010            	  4739:                 and.b (a0),d0
01:00002BB6 40C3            	  4740:                 move.w sr,d3
01:00002BB8 02830000000C    	  4741:                 andi.l #$0C,d3            * Isolate flags
01:00002BBE DA83            	  4742:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BC0 D880            	  4743:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4744: 
                            	  4745: *     WORD
01:00002BC2 2081            	  4746:                 move.l d1,(a0)
01:00002BC4 C050            	  4747:                 and.w (a0),d0
01:00002BC6 40C3            	  4748:                 move.w sr,d3
01:00002BC8 02830000000C    	  4749:                 andi.l #$0C,d3            * Isolate flags
01:00002BCE DA83            	  4750:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BD0 D880            	  4751:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4752: 
                            	  4753: *     LONG
01:00002BD2 2081            	  4754:                 move.l d1,(a0)
01:00002BD4 C090            	  4755:                 and.l (a0),d0
01:00002BD6 40C3            	  4756:                 move.w sr,d3
01:00002BD8 02830000000F    	  4757:                 andi.l #$0F,d3            * Isolate flags
01:00002BDE DA83            	  4758:                 add.l d3,d5               * Copy flag results into accumulator
01:00002BE0 D880            	  4759:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4760: 
                            	  4761: 
01:00002BE2 E289            	  4762:                 lsr.l #$1,d1
01:00002BE4 51CEFFCC        	  4763:                 dbf d6,AND_OUTER1
01:00002BE8 E28A            	  4764:                 lsr.l #$1,d2
01:00002BEA 223C8167E123    	  4765:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002BF0 7C1E            	  4766:                 move.l #$0000001E,d6       * Inner loop counter
01:00002BF2 51CFFFBE        	  4767:                 dbf d7,AND_OUTER1
                            	  4768: 
01:00002BF6 0C84CF212883    	  4769:                 cmpi.l #$CF212883,d4      * Check the data results
01:00002BFC 66FE            	  4770:                 bne.s *
01:00002BFE 0C8500002D10    	  4771:                 cmpi.l #$00002D10,d5      * Check the Flag results
01:00002C04 66FE            	  4772:                 bne.s *
                            	  4773: 
                            	  4774: 
                            	  4775: *  * Register to <EA>
                            	  4776: 
01:00002C06 203C86738374    	  4777:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C0C 223CFC55F2FE    	  4778:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C12 243C86738374    	  4779:                 move.l #$86738374,d2
01:00002C18 7600            	  4780:                 moveq  #$00000000,d3
01:00002C1A 7800            	  4781:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C1C 7A00            	  4782:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C1E 7C1E            	  4783:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C20 7E1D            	  4784:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C22 307C0100        	  4785:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4786: 
                            	  4787: 
                            	  4788: AND_OUTER2:
                            	  4789: 
                            	  4790: *     BYTE
01:00002C26 2080            	  4791:                 move.l d0,(a0)
01:00002C28 C310            	  4792:                 and.b d1,(a0)
01:00002C2A 40C3            	  4793:                 move.w sr,d3
01:00002C2C 02830000000C    	  4794:                 andi.l #$0C,d3            * Isolate flags
01:00002C32 DA83            	  4795:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C34 D890            	  4796:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4797: 
                            	  4798: *     WORD
01:00002C36 2080            	  4799:                 move.l d0,(a0)
01:00002C38 C350            	  4800:                 and.w d1,(a0)
01:00002C3A 40C3            	  4801:                 move.w sr,d3
01:00002C3C 02830000000C    	  4802:                 andi.l #$0C,d3            * Isolate flags
01:00002C42 DA83            	  4803:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C44 D890            	  4804:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4805: 
                            	  4806: *     LONG
01:00002C46 2080            	  4807:                 move.l d0,(a0)
01:00002C48 C390            	  4808:                 and.l d1,(a0)
01:00002C4A 40C3            	  4809:                 move.w sr,d3
01:00002C4C 02830000000F    	  4810:                 andi.l #$0F,d3            * Isolate flags
01:00002C52 DA83            	  4811:                 add.l d3,d5               * Copy flag results into accumulator
01:00002C54 D890            	  4812:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4813: 
                            	  4814: 
01:00002C56 E289            	  4815:                 lsr.l #$1,d1
01:00002C58 51CEFFCC        	  4816:                 dbf d6,AND_OUTER2
01:00002C5C E28A            	  4817:                 lsr.l #$1,d2
01:00002C5E 223C8167E123    	  4818:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002C64 7C1E            	  4819:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C66 51CFFFBE        	  4820:                 dbf d7,AND_OUTER2
                            	  4821: 
01:00002C6A 0C844A3DE544    	  4822:                 cmpi.l #$4A3DE544,d4      * Check the data results
01:00002C70 66FE            	  4823:                 bne.s *
01:00002C72 0C85000018E8    	  4824:                 cmpi.l #$000018E8,d5      * Check the Flag results
01:00002C78 66FE            	  4825:                 bne.s *
                            	  4826: 
                            	  4827: 
01:00002C7A 4E75            	  4828:                 rts
                            	  4829: 
                            	  4830: 
                            	  4831: 
                            	  4832: *-----------------------------------------------------------
                            	  4833: *-----------------------------------------------------------
                            	  4834: * OPCODE : EOR
                            	  4835: *-----------------------------------------------------------
                            	  4836: *-----------------------------------------------------------
                            	  4837: 
                            	  4838: op_EOR:
                            	  4839: 
                            	  4840: *  * Register to <EA>
                            	  4841: 
01:00002C7C 203C86738374    	  4842:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002C82 223CFC55F2FE    	  4843:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002C88 243C86738374    	  4844:                 move.l #$86738374,d2
01:00002C8E 7600            	  4845:                 moveq  #$00000000,d3
01:00002C90 7800            	  4846:                 moveq  #$00000000,d4       * Cumulative data results
01:00002C92 7A00            	  4847:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002C94 7C1E            	  4848:                 move.l #$0000001E,d6       * Inner loop counter
01:00002C96 7E1D            	  4849:                 move.l #$0000001D,d7       * Outer loop counter
01:00002C98 307C0100        	  4850:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4851: 
                            	  4852: 
                            	  4853: EOR_OUTER2:
                            	  4854: 
                            	  4855: *     BYTE
01:00002C9C 2080            	  4856:                 move.l d0,(a0)
01:00002C9E B310            	  4857:                 eor.b d1,(a0)
01:00002CA0 40C3            	  4858:                 move.w sr,d3
01:00002CA2 02830000000C    	  4859:                 andi.l #$0C,d3            * Isolate flags
01:00002CA8 DA83            	  4860:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CAA D890            	  4861:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4862: 
                            	  4863: *     WORD
01:00002CAC 2080            	  4864:                 move.l d0,(a0)
01:00002CAE B350            	  4865:                 eor.w d1,(a0)
01:00002CB0 40C3            	  4866:                 move.w sr,d3
01:00002CB2 02830000000C    	  4867:                 andi.l #$0C,d3            * Isolate flags
01:00002CB8 DA83            	  4868:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CBA D890            	  4869:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4870: 
                            	  4871: *     LONG
01:00002CBC 2080            	  4872:                 move.l d0,(a0)
01:00002CBE B390            	  4873:                 eor.l d1,(a0)
01:00002CC0 40C3            	  4874:                 move.w sr,d3
01:00002CC2 02830000000F    	  4875:                 andi.l #$0F,d3            * Isolate flags
01:00002CC8 DA83            	  4876:                 add.l d3,d5               * Copy flag results into accumulator
01:00002CCA D890            	  4877:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4878: 
                            	  4879: 
01:00002CCC E289            	  4880:                 lsr.l #$1,d1
01:00002CCE 51CEFFCC        	  4881:                 dbf d6,EOR_OUTER2
01:00002CD2 E28A            	  4882:                 lsr.l #$1,d2
01:00002CD4 223C8167E123    	  4883:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002CDA 7C1E            	  4884:                 move.l #$0000001E,d6       * Inner loop counter
01:00002CDC 51CFFFBE        	  4885:                 dbf d7,EOR_OUTER2
                            	  4886: 
01:00002CE0 0C8455C5EB70    	  4887:                 cmpi.l #$55C5EB70,d4      * Check the data results
01:00002CE6 66FE            	  4888:                 bne.s *
01:00002CE8 0C8500004430    	  4889:                 cmpi.l #$00004430,d5      * Check the Flag results
01:00002CEE 66FE            	  4890:                 bne.s *
                            	  4891: 
                            	  4892: 
01:00002CF0 4E75            	  4893:                 rts
                            	  4894: 
                            	  4895: 
                            	  4896: *-----------------------------------------------------------
                            	  4897: *-----------------------------------------------------------
                            	  4898: * OPCODE : CMP
                            	  4899: *-----------------------------------------------------------
                            	  4900: *-----------------------------------------------------------
                            	  4901: 
                            	  4902: op_CMP:
                            	  4903: 
                            	  4904: 
                            	  4905: *  * <EA> to Register
                            	  4906: 
01:00002CF2 203CA5A5A5A5    	  4907:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002CF8 223C8167E123    	  4908:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002CFE 243CA5A5A5A5    	  4909:                 move.l #$a5a5a5a5,d2
01:00002D04 7600            	  4910:                 moveq  #$00000000,d3
01:00002D06 7800            	  4911:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D08 7A00            	  4912:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D0A 7C1E            	  4913:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D0C 7E1E            	  4914:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D0E 307C0100        	  4915:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4916: 
                            	  4917: 
                            	  4918: CMP_OUTER1:
                            	  4919: 
                            	  4920: *     BYTE
01:00002D12 2081            	  4921:                 move.l d1,(a0)
01:00002D14 B010            	  4922:                 cmp.b (a0),d0
01:00002D16 40C3            	  4923:                 move.w sr,d3
01:00002D18 02830000000F    	  4924:                 andi.l #$0F,d3            * Isolate flags
01:00002D1E DA83            	  4925:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D20 D880            	  4926:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4927: 
                            	  4928: *     WORD
01:00002D22 2081            	  4929:                 move.l d1,(a0)
01:00002D24 B050            	  4930:                 cmp.w (a0),d0
01:00002D26 40C3            	  4931:                 move.w sr,d3
01:00002D28 02830000000F    	  4932:                 andi.l #$0F,d3            * Isolate flags
01:00002D2E DA83            	  4933:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D30 D880            	  4934:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4935: 
                            	  4936: *     LONG
01:00002D32 2081            	  4937:                 move.l d1,(a0)
01:00002D34 B090            	  4938:                 cmp.l (a0),d0
01:00002D36 40C3            	  4939:                 move.w sr,d3
01:00002D38 02830000000F    	  4940:                 andi.l #$0F,d3            * Isolate flags
01:00002D3E DA83            	  4941:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D40 D880            	  4942:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4943: 
                            	  4944: 
01:00002D42 E289            	  4945:                 lsr.l #$1,d1
01:00002D44 51CEFFCC        	  4946:                 dbf d6,CMP_OUTER1
01:00002D48 E28A            	  4947:                 lsr.l #$1,d2
01:00002D4A 223C8167E123    	  4948:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002D50 7C1E            	  4949:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D52 51CFFFBE        	  4950:                 dbf d7,CMP_OUTER1
                            	  4951: 
01:00002D56 0C847878712F    	  4952:                 cmpi.l #$7878712F,d4      * Check the data results
01:00002D5C 66FE            	  4953:                 bne.s *
01:00002D5E 0C8500005502    	  4954:                 cmpi.l #$00005502,d5      * Check the Flag results
01:00002D64 66FE            	  4955:                 bne.s *
                            	  4956: 
                            	  4957: 
                            	  4958: 
01:00002D66 4E75            	  4959:                 rts
                            	  4960: 
                            	  4961: 
                            	  4962: *-----------------------------------------------------------
                            	  4963: *-----------------------------------------------------------
                            	  4964: * OPCODE : CMPA
                            	  4965: *-----------------------------------------------------------
                            	  4966: *-----------------------------------------------------------
                            	  4967: 
                            	  4968: op_CMPA:
                            	  4969: 
                            	  4970: 
                            	  4971: *  * <EA> to Register
                            	  4972: 
01:00002D68 207CA5A5A5A5    	  4973:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
01:00002D6E 223C8167E123    	  4974:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002D74 243CA5A5A5A5    	  4975:                 move.l #$a5a5a5a5,d2
01:00002D7A 7600            	  4976:                 moveq  #$00000000,d3
01:00002D7C 7800            	  4977:                 moveq  #$00000000,d4       * Cumulative data results
01:00002D7E 7A00            	  4978:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002D80 7C1E            	  4979:                 move.l #$0000001E,d6       * Inner loop counter
01:00002D82 7E1E            	  4980:                 move.l #$0000001E,d7       * Outer loop counter
01:00002D84 327C0100        	  4981:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4982: 
                            	  4983: 
                            	  4984: CMPA_OUTER1:
                            	  4985: 
                            	  4986: 
                            	  4987: *     WORD
01:00002D88 2281            	  4988:                 move.l d1,(a1)
01:00002D8A B0D1            	  4989:                 cmpa.w (a1),a0
01:00002D8C 40C3            	  4990:                 move.w sr,d3
01:00002D8E 02830000000F    	  4991:                 andi.l #$0F,d3            * Isolate flags
01:00002D94 DA83            	  4992:                 add.l d3,d5               * Copy flag results into accumulator
01:00002D96 D888            	  4993:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4994: 
                            	  4995: *     LONG
01:00002D98 2281            	  4996:                 move.l d1,(a1)
01:00002D9A B1D1            	  4997:                 cmpa.l (a1),a0
01:00002D9C 40C3            	  4998:                 move.w sr,d3
01:00002D9E 02830000000F    	  4999:                 andi.l #$0F,d3            * Isolate flags
01:00002DA4 DA83            	  5000:                 add.l d3,d5               * Copy flag results into accumulator
01:00002DA6 D888            	  5001:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5002: 
                            	  5003: 
01:00002DA8 E289            	  5004:                 lsr.l #$1,d1
01:00002DAA 51CEFFDC        	  5005:                 dbf d6,CMPA_OUTER1
01:00002DAE E28A            	  5006:                 lsr.l #$1,d2
01:00002DB0 223C8167E123    	  5007:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002DB6 7C1E            	  5008:                 move.l #$0000001E,d6       * Inner loop counter
01:00002DB8 51CFFFCE        	  5009:                 dbf d7,CMPA_OUTER1
                            	  5010: 
01:00002DBC 0C84A5A5A0CA    	  5011:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
01:00002DC2 66FE            	  5012:                 bne.s *
01:00002DC4 0C8500003A7D    	  5013:                 cmpi.l #$00003A7D,d5      * Check the Flag results
01:00002DCA 66FE            	  5014:                 bne.s *
                            	  5015: 
                            	  5016: 
01:00002DCC 4E75            	  5017:                 rts
                            	  5018: 
                            	  5019: 
                            	  5020: 
                            	  5021: *-----------------------------------------------------------
                            	  5022: *-----------------------------------------------------------
                            	  5023: * OPCODE : CMPM
                            	  5024: *-----------------------------------------------------------
                            	  5025: *-----------------------------------------------------------
                            	  5026: 
                            	  5027: op_CMPM:
                            	  5028: 
01:00002DCE 307C0100        	  5029:                 move.l #$00000100,a0       * Address for Data-X
01:00002DD2 327C0200        	  5030:                 move.l #$00000200,a1       * Address for Data-Y
01:00002DD6 7000            	  5031:                 moveq  #$00000000,d0
01:00002DD8 7200            	  5032:                 moveq  #$00000000,d1
01:00002DDA 7400            	  5033:                 moveq  #$00000000,d2
                            	  5034: 
01:00002DDC 20FC11FF5580    	  5035:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00002DE2 20FC1111FFFF    	  5036:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:00002DE8 20FC33333333    	  5037:                 move.l #$33333333,(a0)+   * Populate test data
01:00002DEE 20FC44444444    	  5038:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5039: 
01:00002DF4 22FC80FF337F    	  5040:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00002DFA 22FCFFFF1111    	  5041:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00002E00 22FC33333333    	  5042:                 move.l #$33333333,(a1)+   * Populate test data
01:00002E06 22FC44444444    	  5043:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5044: 
01:00002E0C 307C0100        	  5045:                 move.l #$00000100,a0       * Address for Data-X
01:00002E10 327C0200        	  5046:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E14 7C0F            	  5047:                 move.l #$0000000F,d6       * Loop counter
                            	  5048: 
01:00002E16 B308            	  5049: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
01:00002E18 40C3            	  5050:                 move.w sr,d3
01:00002E1A 02830000000F    	  5051:                 andi.l #$0F,d3            * Isolate flags
01:00002E20 D083            	  5052:                 add.l d3,d0               * Copy flag results into accumulator
01:00002E22 51CEFFF2        	  5053:                 dbf d6,CMPM_LOOP1
                            	  5054: 
                            	  5055: 
01:00002E26 307C0100        	  5056:                 move.l #$00000100,a0       * Address for Data-X
01:00002E2A 327C0200        	  5057:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E2E 7C07            	  5058:                 moveq  #$00000007,d6       * Loop counter
                            	  5059: 
01:00002E30 B348            	  5060: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
01:00002E32 40C3            	  5061:                 move.w sr,d3
01:00002E34 02830000000F    	  5062:                 andi.l #$0F,d3            * Isolate flags
01:00002E3A D283            	  5063:                 add.l d3,d1               * Copy flag results into accumulator
01:00002E3C 51CEFFF2        	  5064:                 dbf d6,CMPM_LOOP2
                            	  5065: 
                            	  5066: 
01:00002E40 307C0100        	  5067:                 move.l #$00000100,a0       * Address for Data-X
01:00002E44 327C0200        	  5068:                 move.l #$00000200,a1       * Address for Data-Y
01:00002E48 7C03            	  5069:                 moveq  #$00000003,d6       * Loop counter
                            	  5070: 
01:00002E4A B388            	  5071: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
01:00002E4C 40C3            	  5072:                 move.w sr,d3
01:00002E4E 02830000000F    	  5073:                 andi.l #$0F,d3            * Isolate flags
01:00002E54 D483            	  5074:                 add.l d3,d2               * Copy flag results into accumulator
01:00002E56 51CEFFF2        	  5075:                 dbf d6,CMPM_LOOP3
                            	  5076: 
                            	  5077: 
01:00002E5A 0C800000004C    	  5078:                 cmpi.l #$0000004C,d0      * Check the data results
01:00002E60 66FE            	  5079:                 bne.s *
01:00002E62 0C8100000024    	  5080:                 cmpi.l #$00000024,d1
01:00002E68 66FE            	  5081:                 bne.s *
01:00002E6A 0C8200000012    	  5082:                 cmpi.l #$00000012,d2
01:00002E70 66FE            	  5083:                 bne.s *
                            	  5084: 
01:00002E72 4E75            	  5085:                 rts
                            	  5086: 
                            	  5087: 
                            	  5088: *-----------------------------------------------------------
                            	  5089: *-----------------------------------------------------------
                            	  5090: * OPCODE : ADD
                            	  5091: *-----------------------------------------------------------
                            	  5092: *-----------------------------------------------------------
                            	  5093: 
                            	  5094: op_ADD:
                            	  5095: 
                            	  5096: 
                            	  5097: *  * <EA> to Register
01:00002E74 203CA5A5A5A5    	  5098:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002E7A 223C8167E123    	  5099:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002E80 243CA5A5A5A5    	  5100:                 move.l #$a5a5a5a5,d2
01:00002E86 7600            	  5101:                 moveq  #$00000000,d3
01:00002E88 7800            	  5102:                 moveq  #$00000000,d4       * Cumulative data results
01:00002E8A 7A00            	  5103:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002E8C 7C1E            	  5104:                 move.l #$0000001E,d6       * Inner loop counter
01:00002E8E 7E1E            	  5105:                 move.l #$0000001E,d7       * Outer loop counter
01:00002E90 307C0100        	  5106:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5107: 
                            	  5108: 
                            	  5109: ADD_OUTER1:
                            	  5110: 
                            	  5111: *     BYTE
01:00002E94 2081            	  5112:                 move.l d1,(a0)
01:00002E96 D010            	  5113:                 add.b (a0),d0
01:00002E98 40C3            	  5114:                 move.w sr,d3
01:00002E9A 02830000001F    	  5115:                 andi.l #$1F,d3            * Isolate flags
01:00002EA0 DA83            	  5116:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EA2 D880            	  5117:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5118: 
                            	  5119: *     WORD
01:00002EA4 2081            	  5120:                 move.l d1,(a0)
01:00002EA6 D050            	  5121:                 add.w (a0),d0
01:00002EA8 40C3            	  5122:                 move.w sr,d3
01:00002EAA 02830000000C    	  5123:                 andi.l #$0C,d3            * Isolate flags
01:00002EB0 DA83            	  5124:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EB2 D880            	  5125:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5126: 
                            	  5127: *     LONG
01:00002EB4 2081            	  5128:                 move.l d1,(a0)
01:00002EB6 D090            	  5129:                 add.l (a0),d0
01:00002EB8 40C3            	  5130:                 move.w sr,d3
01:00002EBA 02830000000F    	  5131:                 andi.l #$0F,d3            * Isolate flags
01:00002EC0 DA83            	  5132:                 add.l d3,d5               * Copy flag results into accumulator
01:00002EC2 D880            	  5133:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5134: 
                            	  5135: 
01:00002EC4 E299            	  5136:                 ror.l #$1,d1
01:00002EC6 51CEFFCC        	  5137:                 dbf d6,ADD_OUTER1
01:00002ECA E29A            	  5138:                 ror.l #$1,d2
01:00002ECC 223C8167E123    	  5139:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002ED2 7C1E            	  5140:                 move.l #$0000001E,d6       * Inner loop counter
01:00002ED4 51CFFFBE        	  5141:                 dbf d7,ADD_OUTER1
                            	  5142: 
01:00002ED8 0C8423ED428F    	  5143:                 cmpi.l #$23ED428F,d4      * Check the data results
01:00002EDE 66FE            	  5144:                 bne.s *
01:00002EE0 0C8500004C96    	  5145:                 cmpi.l #$00004C96,d5      * Check the Flag results
01:00002EE6 66FE            	  5146:                 bne.s *
                            	  5147: 
                            	  5148: 
                            	  5149: *  * Register to <EA>
01:00002EE8 203C86738374    	  5150:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002EEE 223CFC55F2FE    	  5151:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002EF4 243C86738374    	  5152:                 move.l #$86738374,d2
01:00002EFA 7600            	  5153:                 moveq  #$00000000,d3
01:00002EFC 7800            	  5154:                 moveq  #$00000000,d4       * Cumulative data results
01:00002EFE 7A00            	  5155:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F00 7C1E            	  5156:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F02 7E1D            	  5157:                 move.l #$0000001D,d7       * Outer loop counter
01:00002F04 307C0100        	  5158:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5159: 
                            	  5160: 
                            	  5161: ADD_OUTER2:
                            	  5162: 
                            	  5163: *     BYTE
01:00002F08 2080            	  5164:                 move.l d0,(a0)
01:00002F0A D310            	  5165:                 add.b d1,(a0)
01:00002F0C 40C3            	  5166:                 move.w sr,d3
01:00002F0E 02830000000C    	  5167:                 andi.l #$0C,d3            * Isolate flags
01:00002F14 DA83            	  5168:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F16 D890            	  5169:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5170: 
                            	  5171: *     WORD
01:00002F18 2080            	  5172:                 move.l d0,(a0)
01:00002F1A D350            	  5173:                 add.w d1,(a0)
01:00002F1C 40C3            	  5174:                 move.w sr,d3
01:00002F1E 02830000001F    	  5175:                 andi.l #$1F,d3            * Isolate flags
01:00002F24 DA83            	  5176:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F26 D890            	  5177:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5178: 
                            	  5179: *     LONG
01:00002F28 2080            	  5180:                 move.l d0,(a0)
01:00002F2A D390            	  5181:                 add.l d1,(a0)
01:00002F2C 40C3            	  5182:                 move.w sr,d3
01:00002F2E 02830000000F    	  5183:                 andi.l #$0F,d3            * Isolate flags
01:00002F34 DA83            	  5184:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F36 D890            	  5185:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5186: 
                            	  5187: 
01:00002F38 E299            	  5188:                 ror.l #$1,d1
01:00002F3A 51CEFFCC        	  5189:                 dbf d6,ADD_OUTER2
01:00002F3E E29A            	  5190:                 ror.l #$1,d2
01:00002F40 223C8167E123    	  5191:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002F46 7C1E            	  5192:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F48 51CFFFBE        	  5193:                 dbf d7,ADD_OUTER2
                            	  5194: 
01:00002F4C 0C846701B884    	  5195:                 cmpi.l #$6701B884,d4      * Check the data results
01:00002F52 66FE            	  5196:                 bne.s *
01:00002F54 0C8500005467    	  5197:                 cmpi.l #$00005467,d5      * Check the Flag results
01:00002F5A 66FE            	  5198:                 bne.s *
                            	  5199: 
01:00002F5C 4E75            	  5200:                 rts
                            	  5201: 
                            	  5202: *-----------------------------------------------------------
                            	  5203: *-----------------------------------------------------------
                            	  5204: * OPCODE : SUB
                            	  5205: *-----------------------------------------------------------
                            	  5206: *-----------------------------------------------------------
                            	  5207: 
                            	  5208: op_SUB:
                            	  5209: 
                            	  5210: *  * <EA> to Register
01:00002F5E 203CA5A5A5A5    	  5211:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:00002F64 223C8167E123    	  5212:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:00002F6A 243CA5A5A5A5    	  5213:                 move.l #$a5a5a5a5,d2
01:00002F70 7600            	  5214:                 moveq  #$00000000,d3
01:00002F72 7800            	  5215:                 moveq  #$00000000,d4       * Cumulative data results
01:00002F74 7A00            	  5216:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002F76 7C1E            	  5217:                 move.l #$0000001E,d6       * Inner loop counter
01:00002F78 7E1E            	  5218:                 move.l #$0000001E,d7       * Outer loop counter
01:00002F7A 307C0100        	  5219:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5220: 
                            	  5221: 
                            	  5222: SUB_OUTER1:
                            	  5223: 
                            	  5224: *     BYTE
01:00002F7E 2081            	  5225:                 move.l d1,(a0)
01:00002F80 9010            	  5226:                 sub.b (a0),d0
01:00002F82 40C3            	  5227:                 move.w sr,d3
01:00002F84 02830000001F    	  5228:                 andi.l #$1F,d3            * Isolate flags
01:00002F8A DA83            	  5229:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F8C D880            	  5230:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5231: 
                            	  5232: *     WORD
01:00002F8E 2081            	  5233:                 move.l d1,(a0)
01:00002F90 9050            	  5234:                 sub.w (a0),d0
01:00002F92 40C3            	  5235:                 move.w sr,d3
01:00002F94 02830000000C    	  5236:                 andi.l #$0C,d3            * Isolate flags
01:00002F9A DA83            	  5237:                 add.l d3,d5               * Copy flag results into accumulator
01:00002F9C D880            	  5238:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5239: 
                            	  5240: *     LONG
01:00002F9E 2081            	  5241:                 move.l d1,(a0)
01:00002FA0 9090            	  5242:                 sub.l (a0),d0
01:00002FA2 40C3            	  5243:                 move.w sr,d3
01:00002FA4 02830000000F    	  5244:                 andi.l #$0F,d3            * Isolate flags
01:00002FAA DA83            	  5245:                 add.l d3,d5               * Copy flag results into accumulator
01:00002FAC D880            	  5246:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5247: 
                            	  5248: 
01:00002FAE E299            	  5249:                 ror.l #$1,d1
01:00002FB0 51CEFFCC        	  5250:                 dbf d6,SUB_OUTER1
01:00002FB4 E29A            	  5251:                 ror.l #$1,d2
01:00002FB6 223C8167E123    	  5252:                 move.l #$8167E123,d1       * Initial Data-Y
01:00002FBC 7C1E            	  5253:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FBE 51CFFFBE        	  5254:                 dbf d7,SUB_OUTER1
                            	  5255: 
01:00002FC2 0C841A8D14CF    	  5256:                 cmpi.l #$1A8D14CF,d4      * Check the data results
01:00002FC8 66FE            	  5257:                 bne.s *
01:00002FCA 0C8500004FC4    	  5258:                 cmpi.l #$00004FC4,d5      * Check the Flag results
01:00002FD0 66FE            	  5259:                 bne.s *
                            	  5260: 
                            	  5261: 
                            	  5262: *  * Register to <EA>
01:00002FD2 203C86738374    	  5263:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
01:00002FD8 223CFC55F2FE    	  5264:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
01:00002FDE 243C86738374    	  5265:                 move.l #$86738374,d2
01:00002FE4 7600            	  5266:                 moveq  #$00000000,d3
01:00002FE6 7800            	  5267:                 moveq  #$00000000,d4       * Cumulative data results
01:00002FE8 7A00            	  5268:                 moveq  #$00000000,d5       * Cumulative flag results
01:00002FEA 7C1E            	  5269:                 move.l #$0000001E,d6       * Inner loop counter
01:00002FEC 7E1D            	  5270:                 move.l #$0000001D,d7       * Outer loop counter
01:00002FEE 307C0100        	  5271:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5272: 
                            	  5273: 
                            	  5274: SUB_OUTER2:
                            	  5275: 
                            	  5276: *     BYTE
01:00002FF2 2080            	  5277:                 move.l d0,(a0)
01:00002FF4 9310            	  5278:                 sub.b d1,(a0)
01:00002FF6 40C3            	  5279:                 move.w sr,d3
01:00002FF8 02830000000C    	  5280:                 andi.l #$0C,d3            * Isolate flags
01:00002FFE DA83            	  5281:                 add.l d3,d5               * Copy flag results into accumulator
01:00003000 D890            	  5282:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5283: 
                            	  5284: *     WORD
01:00003002 2080            	  5285:                 move.l d0,(a0)
01:00003004 9350            	  5286:                 sub.w d1,(a0)
01:00003006 40C3            	  5287:                 move.w sr,d3
01:00003008 02830000001F    	  5288:                 andi.l #$1F,d3            * Isolate flags
01:0000300E DA83            	  5289:                 add.l d3,d5               * Copy flag results into accumulator
01:00003010 D890            	  5290:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5291: 
                            	  5292: *     LONG
01:00003012 2080            	  5293:                 move.l d0,(a0)
01:00003014 9390            	  5294:                 sub.l d1,(a0)
01:00003016 40C3            	  5295:                 move.w sr,d3
01:00003018 02830000000F    	  5296:                 andi.l #$0F,d3            * Isolate flags
01:0000301E DA83            	  5297:                 add.l d3,d5               * Copy flag results into accumulator
01:00003020 D890            	  5298:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5299: 
                            	  5300: 
01:00003022 E299            	  5301:                 ror.l #$1,d1
01:00003024 51CEFFCC        	  5302:                 dbf d6,SUB_OUTER2
01:00003028 E29A            	  5303:                 ror.l #$1,d2
01:0000302A 223C8167E123    	  5304:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003030 7C1E            	  5305:                 move.l #$0000001E,d6       * Inner loop counter
01:00003032 51CFFFBE        	  5306:                 dbf d7,SUB_OUTER2
                            	  5307: 
01:00003036 0C8436D38BEC    	  5308:                 cmpi.l #$36D38BEC,d4      * Check the data results
01:0000303C 66FE            	  5309:                 bne.s *
01:0000303E 0C85000045A5    	  5310:                 cmpi.l #$000045A5,d5      * Check the Flag results
01:00003044 66FE            	  5311:                 bne.s *
                            	  5312: 
                            	  5313: 
                            	  5314: 
                            	  5315: 
01:00003046 4E75            	  5316:                 rts
                            	  5317: 
                            	  5318: 
                            	  5319: 
                            	  5320: *-----------------------------------------------------------
                            	  5321: *-----------------------------------------------------------
                            	  5322: * OPCODE : ADDA
                            	  5323: *-----------------------------------------------------------
                            	  5324: *-----------------------------------------------------------
                            	  5325: 
                            	  5326: op_ADDA:
                            	  5327: 
                            	  5328: *  * <EA> to Register
01:00003048 203CA5A5A5A5    	  5329:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000304E 223C8167E123    	  5330:                 move.l #$8167E123,d1
01:00003054 243CA5A5A5A5    	  5331:                 move.l #$a5a5a5a5,d2
01:0000305A 7600            	  5332:                 moveq  #$00000000,d3
01:0000305C 7800            	  5333:                 moveq  #$00000000,d4       * Cumulative data results
01:0000305E 7A00            	  5334:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003060 7C1E            	  5335:                 move.l #$0000001E,d6       * Inner loop counter
01:00003062 7E1E            	  5336:                 move.l #$0000001E,d7       * Outer loop counter
01:00003064 307C0100        	  5337:                 move.l #$00000100,a0       * Address for memory EA operations
01:00003068 227C8167E123    	  5338:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5339: 
                            	  5340: ADDA_OUTER1:
                            	  5341: 
                            	  5342: *     WORD
                            	  5343: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5344: *                adda.w (a0),a1
                            	  5345: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5346: 
                            	  5347: *     LONG
01:0000306E 2081            	  5348:                 move.l d1,(a0)
01:00003070 D3D0            	  5349:                 adda.l (a0),a1
01:00003072 D889            	  5350:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5351: 
01:00003074 E299            	  5352:                 ror.l #$1,d1
01:00003076 51CEFFF6        	  5353:                 dbf d6,ADDA_OUTER1
01:0000307A E299            	  5354:                 ror.l #$1,d1
01:0000307C 2241            	  5355:                 move.l d1,a1
01:0000307E 223C8167E123    	  5356:                 move.l #$8167E123,d1       * Initial Data-Y
01:00003084 7C1E            	  5357:                 move.l #$0000001E,d6       * Inner loop counter
01:00003086 51CFFFE6        	  5358:                 dbf d7,ADDA_OUTER1
                            	  5359: 
01:0000308A 0C84AC04DB4C    	  5360:                 cmpi.l #$AC04DB4C,d4      * Check the data results
01:00003090 66FE            	  5361:                 bne.s *
                            	  5362: 
                            	  5363: 
01:00003092 4E75            	  5364:                 rts
                            	  5365: 
                            	  5366: 
                            	  5367: *-----------------------------------------------------------
                            	  5368: *-----------------------------------------------------------
                            	  5369: * OPCODE : SUBA
                            	  5370: *-----------------------------------------------------------
                            	  5371: *-----------------------------------------------------------
                            	  5372: 
                            	  5373: op_SUBA:
                            	  5374: 
                            	  5375: *  * <EA> to Register
01:00003094 203CA5A5A5A5    	  5376:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:0000309A 223C8167E123    	  5377:                 move.l #$8167E123,d1
01:000030A0 243CA5A5A5A5    	  5378:                 move.l #$a5a5a5a5,d2
01:000030A6 7600            	  5379:                 moveq  #$00000000,d3
01:000030A8 7800            	  5380:                 moveq  #$00000000,d4       * Cumulative data results
01:000030AA 7A00            	  5381:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030AC 7C1E            	  5382:                 move.l #$0000001E,d6       * Inner loop counter
01:000030AE 7E1E            	  5383:                 move.l #$0000001E,d7       * Outer loop counter
01:000030B0 307C0100        	  5384:                 move.l #$00000100,a0       * Address for memory EA operations
01:000030B4 227C8167E123    	  5385:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5386: 
                            	  5387: SUBA_OUTER1:
                            	  5388: 
                            	  5389: *     WORD
                            	  5390: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5391: *                suba.w (a0),a1
                            	  5392: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5393: 
                            	  5394: *     LONG
01:000030BA 2081            	  5395:                 move.l d1,(a0)
01:000030BC 93D0            	  5396:                 suba.l (a0),a1
01:000030BE D889            	  5397:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5398: 
01:000030C0 E299            	  5399:                 ror.l #$1,d1
01:000030C2 51CEFFF6        	  5400:                 dbf d6,SUBA_OUTER1
01:000030C6 E299            	  5401:                 ror.l #$1,d1
01:000030C8 2241            	  5402:                 move.l d1,a1
01:000030CA 223C8167E123    	  5403:                 move.l #$8167E123,d1       * Initial Data-Y
01:000030D0 7C1E            	  5404:                 move.l #$0000001E,d6       * Inner loop counter
01:000030D2 51CFFFE6        	  5405:                 dbf d7,SUBA_OUTER1
                            	  5406: 
01:000030D6 0C84E1E36D7A    	  5407:                 cmpi.l #$E1E36D7A,d4      * Check the data results
01:000030DC 66FE            	  5408:                 bne.s *
                            	  5409: 
                            	  5410: 
01:000030DE 4E75            	  5411:                 rts
                            	  5412: 
                            	  5413: 
                            	  5414: 
                            	  5415: *-----------------------------------------------------------
                            	  5416: *-----------------------------------------------------------
                            	  5417: * OPCODE : ADDX
                            	  5418: *-----------------------------------------------------------
                            	  5419: *-----------------------------------------------------------
                            	  5420: 
                            	  5421: op_ADDX:
                            	  5422: 
                            	  5423: 
                            	  5424: *  * Register to Register
01:000030E0 203CA5A5A5A5    	  5425:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000030E6 223C8167E123    	  5426:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000030EC 243CA5A5A5A5    	  5427:                 move.l #$a5a5a5a5,d2
01:000030F2 7600            	  5428:                 moveq  #$00000000,d3
01:000030F4 7800            	  5429:                 moveq  #$00000000,d4       * Cumulative data results
01:000030F6 7A00            	  5430:                 moveq  #$00000000,d5       * Cumulative flag results
01:000030F8 7C1E            	  5431:                 move.l #$0000001E,d6       * Inner loop counter
01:000030FA 7E1E            	  5432:                 move.l #$0000001E,d7       * Outer loop counter
01:000030FC 307C0100        	  5433:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5434: 
                            	  5435: 
                            	  5436: ADDX_OUTER1:
                            	  5437: 
                            	  5438: *     BYTE
01:00003100 2002            	  5439:                 move.l d2,d0
01:00003102 D101            	  5440:                 addx.b d1,d0
01:00003104 40C3            	  5441:                 move.w sr,d3
01:00003106 02830000001F    	  5442:                 andi.l #$1F,d3            * Isolate flags
01:0000310C DA83            	  5443:                 add.l d3,d5               * Copy flag results into accumulator
01:0000310E D880            	  5444:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5445: 
                            	  5446: *     WORD
01:00003110 2002            	  5447:                 move.l d2,d0
01:00003112 D141            	  5448:                 addx.w d1,d0
01:00003114 40C3            	  5449:                 move.w sr,d3
01:00003116 02830000001F    	  5450:                 andi.l #$1F,d3            * Isolate flags
01:0000311C DA83            	  5451:                 add.l d3,d5               * Copy flag results into accumulator
01:0000311E D880            	  5452:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5453: 
                            	  5454: *     LONG
01:00003120 2002            	  5455:                 move.l d2,d0
01:00003122 D181            	  5456:                 addx.l d1,d0
01:00003124 40C3            	  5457:                 move.w sr,d3
01:00003126 02830000001F    	  5458:                 andi.l #$1F,d3            * Isolate flags
01:0000312C DA83            	  5459:                 add.l d3,d5               * Copy flag results into accumulator
01:0000312E D880            	  5460:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5461: 
01:00003130 E299            	  5462:                 ror.l #$1,d1
01:00003132 51CEFFCC        	  5463:                 dbf d6,ADDX_OUTER1
01:00003136 E29A            	  5464:                 ror.l #$1,d2
01:00003138 223C8167E123    	  5465:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000313E 7C1E            	  5466:                 move.l #$0000001E,d6       * Inner loop counter
01:00003140 51CFFFBE        	  5467:                 dbf d7,ADDX_OUTER1
                            	  5468: 
01:00003144 0C844E96A4D9    	  5469:                 cmpi.l #$4E96A4D9,d4      * Check the data results
01:0000314A 66FE            	  5470:                 bne.s *
01:0000314C 0C85000085CD    	  5471:                 cmpi.l #$000085CD,d5      * Check the Flag results
01:00003152 66FE            	  5472:                 bne.s *
                            	  5473: 
                            	  5474: 
                            	  5475: 
                            	  5476: *     -(An),-(An)
                            	  5477: 
01:00003154 7000            	  5478:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003156 7200            	  5479:                 moveq  #$00000000,d1
01:00003158 7400            	  5480:                 moveq  #$00000000,d2
01:0000315A 307C0100        	  5481:                 move.l #$00000100,a0       * Address for Data-X
01:0000315E 327C0200        	  5482:                 move.l #$00000200,a1       * Address for Data-Y
01:00003162 20FC11FF5580    	  5483:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003168 20FC1111FFFF    	  5484:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:0000316E 20FC33333333    	  5485:                 move.l #$33333333,(a0)+   * Populate test data
01:00003174 20FC44444444    	  5486:                 move.l #$44444444,(a0)+   * Populate test data
01:0000317A 22FC80FF337F    	  5487:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003180 22FCFFFF1111    	  5488:                 move.l #$FFFF1111,(a1)+   * Populate test data
01:00003186 22FC33333333    	  5489:                 move.l #$33333333,(a1)+   * Populate test data
01:0000318C 22FC44444444    	  5490:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5491: 
                            	  5492: 
01:00003192 7C0F            	  5493:                 move.l #$0000000F,d6       * Loop counter
                            	  5494: 
01:00003194 D308            	  5495: ADDX_LOOP3:     addx.b -(a0),-(a1)
01:00003196 40C3            	  5496:                 move.w sr,d3
01:00003198 02830000000F    	  5497:                 andi.l #$0F,d3            * Isolate flags
01:0000319E D083            	  5498:                 add.l d3,d0               * Copy flag results into accumulator
01:000031A0 D211            	  5499:                 add.b (a1),d1
01:000031A2 51CEFFF0        	  5500:                 dbf d6,ADDX_LOOP3
                            	  5501: 
                            	  5502: 
01:000031A6 307C0110        	  5503:                 move.l #$00000110,a0       * Address for Data-X
01:000031AA 327C0210        	  5504:                 move.l #$00000210,a1       * Address for Data-Y
01:000031AE 7C07            	  5505:                 moveq  #$00000007,d6       * Loop counter
                            	  5506: 
01:000031B0 D348            	  5507: ADDX_LOOP4:     addx.w -(a0),-(a1)
01:000031B2 40C3            	  5508:                 move.w sr,d3
01:000031B4 02830000000F    	  5509:                 andi.l #$0F,d3            * Isolate flags
01:000031BA D083            	  5510:                 add.l d3,d0               * Copy flag results into accumulator
01:000031BC D251            	  5511:                 add.w (a1),d1
01:000031BE 51CEFFF0        	  5512:                 dbf d6,ADDX_LOOP4
                            	  5513: 
                            	  5514: 
01:000031C2 307C0110        	  5515:                 move.l #$00000110,a0       * Address for Data-X
01:000031C6 327C0210        	  5516:                 move.l #$00000210,a1       * Address for Data-Y
01:000031CA 7C03            	  5517:                 moveq  #$00000003,d6       * Loop counter
                            	  5518: 
01:000031CC D388            	  5519: ADDX_LOOP5:     addx.l -(a0),-(a1)
01:000031CE 40C3            	  5520:                 move.w sr,d3
01:000031D0 02830000000F    	  5521:                 andi.l #$0F,d3            * Isolate flags
01:000031D6 D083            	  5522:                 add.l d3,d0               * Copy flag results into accumulator
01:000031D8 D291            	  5523:                 add.l (a1),d1
01:000031DA 51CEFFF0        	  5524:                 dbf d6,ADDX_LOOP5
                            	  5525: 
                            	  5526: 
01:000031DE 0C8000000095    	  5527:                 cmpi.l #$00000095,d0      * Check the flag results
01:000031E4 66FE            	  5528:                 bne.s *
01:000031E6 0C81C812A682    	  5529:                 cmpi.l #$C812A682,d1      * Check the data results
01:000031EC 66FE            	  5530:                 bne.s *
                            	  5531: 
01:000031EE 4E75            	  5532:                 rts
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: 
                            	  5537: *-----------------------------------------------------------
                            	  5538: *-----------------------------------------------------------
                            	  5539: * OPCODE : SUBX
                            	  5540: *-----------------------------------------------------------
                            	  5541: *-----------------------------------------------------------
                            	  5542: 
                            	  5543: op_SUBX:
                            	  5544: 
                            	  5545: 
                            	  5546: *  * Register to Register
01:000031F0 203CA5A5A5A5    	  5547:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
01:000031F6 223C8167E123    	  5548:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
01:000031FC 243CA5A5A5A5    	  5549:                 move.l #$a5a5a5a5,d2
01:00003202 7600            	  5550:                 moveq  #$00000000,d3
01:00003204 7800            	  5551:                 moveq  #$00000000,d4       * Cumulative data results
01:00003206 7A00            	  5552:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003208 7C1E            	  5553:                 move.l #$0000001E,d6       * Inner loop counter
01:0000320A 7E1E            	  5554:                 move.l #$0000001E,d7       * Outer loop counter
01:0000320C 307C0100        	  5555:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5556: 
                            	  5557: 
                            	  5558: SUBX_OUTER1:
                            	  5559: 
                            	  5560: *     BYTE
01:00003210 2002            	  5561:                 move.l d2,d0
01:00003212 9101            	  5562:                 subx.b d1,d0
01:00003214 40C3            	  5563:                 move.w sr,d3
01:00003216 02830000001F    	  5564:                 andi.l #$1F,d3            * Isolate flags
01:0000321C DA83            	  5565:                 add.l d3,d5               * Copy flag results into accumulator
01:0000321E D880            	  5566:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5567: 
                            	  5568: *     WORD
01:00003220 2002            	  5569:                 move.l d2,d0
01:00003222 9141            	  5570:                 subx.w d1,d0
01:00003224 40C3            	  5571:                 move.w sr,d3
01:00003226 02830000001F    	  5572:                 andi.l #$1F,d3            * Isolate flags
01:0000322C DA83            	  5573:                 add.l d3,d5               * Copy flag results into accumulator
01:0000322E D880            	  5574:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5575: 
                            	  5576: *     LONG
01:00003230 2002            	  5577:                 move.l d2,d0
01:00003232 9181            	  5578:                 subx.l d1,d0
01:00003234 40C3            	  5579:                 move.w sr,d3
01:00003236 02830000001F    	  5580:                 andi.l #$1F,d3            * Isolate flags
01:0000323C DA83            	  5581:                 add.l d3,d5               * Copy flag results into accumulator
01:0000323E D880            	  5582:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5583: 
01:00003240 E299            	  5584:                 ror.l #$1,d1
01:00003242 51CEFFCC        	  5585:                 dbf d6,SUBX_OUTER1
01:00003246 E29A            	  5586:                 ror.l #$1,d2
01:00003248 223C8167E123    	  5587:                 move.l #$8167E123,d1       * Initial Data-Y
01:0000324E 7C1E            	  5588:                 move.l #$0000001E,d6       * Inner loop counter
01:00003250 51CFFFBE        	  5589:                 dbf d7,SUBX_OUTER1
                            	  5590: 
01:00003254 0C84FCAA913E    	  5591:                 cmpi.l #$FCAA913E,d4      * Check the data results
01:0000325A 66FE            	  5592:                 bne.s *
01:0000325C 0C8500007E89    	  5593:                 cmpi.l #$00007E89,d5      * Check the Flag results
01:00003262 66FE            	  5594:                 bne.s *
                            	  5595: 
                            	  5596: 
                            	  5597: 
                            	  5598: *     -(An),-(An)
                            	  5599: 
01:00003264 7000            	  5600:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
01:00003266 7200            	  5601:                 moveq  #$00000000,d1
01:00003268 7400            	  5602:                 moveq  #$00000000,d2
01:0000326A 307C0100        	  5603:                 move.l #$00000100,a0       * Address for Data-X
01:0000326E 327C0200        	  5604:                 move.l #$00000200,a1       * Address for Data-Y
01:00003272 20FC11FF5580    	  5605:                 move.l #$11FF5580,(a0)+   * Populate test data
01:00003278 20FC1111FFFF    	  5606:                 move.l #$1111FFFF,(a0)+   * Populate test data
01:0000327E 20FC80FF337F    	  5607:                 move.l #$80FF337F,(a0)+   * Populate test data
01:00003284 20FC44444444    	  5608:                 move.l #$44444444,(a0)+   * Populate test data
01:0000328A 22FC80FF337F    	  5609:                 move.l #$80FF337F,(a1)+   * Populate test data
01:00003290 22FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a1)+   * Populate test data
01:00003296 22FC33333333    	  5611:                 move.l #$33333333,(a1)+   * Populate test data
01:0000329C 22FC5580EECC    	  5612:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5613: 
                            	  5614: 
01:000032A2 7C0F            	  5615:                 move.l #$0000000F,d6       * Loop counter
                            	  5616: 
01:000032A4 9308            	  5617: SUBX_LOOP3:     subx.b -(a0),-(a1)
01:000032A6 40C3            	  5618:                 move.w sr,d3
01:000032A8 02830000000F    	  5619:                 andi.l #$0F,d3            * Isolate flags
01:000032AE D083            	  5620:                 add.l d3,d0               * Copy flag results into accumulator
01:000032B0 D211            	  5621:                 add.b (a1),d1
01:000032B2 51CEFFF0        	  5622:                 dbf d6,SUBX_LOOP3
                            	  5623: 
                            	  5624: 
01:000032B6 307C0110        	  5625:                 move.l #$00000110,a0       * Address for Data-X
01:000032BA 327C0210        	  5626:                 move.l #$00000210,a1       * Address for Data-Y
01:000032BE 7C07            	  5627:                 moveq  #$00000007,d6       * Loop counter
                            	  5628: 
01:000032C0 9348            	  5629: SUBX_LOOP4:     subx.w -(a0),-(a1)
01:000032C2 40C3            	  5630:                 move.w sr,d3
01:000032C4 02830000000F    	  5631:                 andi.l #$0F,d3            * Isolate flags
01:000032CA D083            	  5632:                 add.l d3,d0               * Copy flag results into accumulator
01:000032CC D251            	  5633:                 add.w (a1),d1
01:000032CE 51CEFFF0        	  5634:                 dbf d6,SUBX_LOOP4
                            	  5635: 
                            	  5636: 
01:000032D2 307C0110        	  5637:                 move.l #$00000110,a0       * Address for Data-X
01:000032D6 327C0210        	  5638:                 move.l #$00000210,a1       * Address for Data-Y
01:000032DA 7C03            	  5639:                 moveq  #$00000003,d6       * Loop counter
                            	  5640: 
01:000032DC 9388            	  5641: SUBX_LOOP5:     subx.l -(a0),-(a1)
01:000032DE 40C3            	  5642:                 move.w sr,d3
01:000032E0 02830000000F    	  5643:                 andi.l #$0F,d3            * Isolate flags
01:000032E6 D083            	  5644:                 add.l d3,d0               * Copy flag results into accumulator
01:000032E8 D291            	  5645:                 add.l (a1),d1
01:000032EA 51CEFFF0        	  5646:                 dbf d6,SUBX_LOOP5
                            	  5647: 
                            	  5648: 
01:000032EE 0C80000000B1    	  5649:                 cmpi.l #$000000B1,d0      * Check the flag results
01:000032F4 66FE            	  5650:                 bne.s *
01:000032F6 0C8162C6F417    	  5651:                 cmpi.l #$62C6F417,d1      * Check the data results
01:000032FC 66FE            	  5652:                 bne.s *
                            	  5653: 
01:000032FE 4E75            	  5654:                 rts
                            	  5655: 
                            	  5656: 
                            	  5657: *-----------------------------------------------------------
                            	  5658: *-----------------------------------------------------------
                            	  5659: * OPCODE : MULU
                            	  5660: *-----------------------------------------------------------
                            	  5661: *-----------------------------------------------------------
                            	  5662: 
                            	  5663: op_MULU:
                            	  5664: 
01:00003300 203CFE805501    	  5665:                 move.l #$FE805501,d0        * Initial
01:00003306 223C5697EDB6    	  5666:                 move.l #$5697EDB6,d1        * Initial Y
01:0000330C 243CFE805501    	  5667:                 move.l #$FE805501,d2
01:00003312 7600            	  5668:                 moveq  #$00000000,d3
01:00003314 7800            	  5669:                 moveq  #$00000000,d4        * Cumulative data results
01:00003316 7A00            	  5670:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003318 7C0E            	  5671:                 move.l #$0000000E,d6       * Inner loop counter
01:0000331A 7E0E            	  5672:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5673: 
                            	  5674: 
01:0000331C C0C1            	  5675: MULU_OUTER1:    mulu d1,d0
01:0000331E 40C3            	  5676:                 move.w sr,d3
01:00003320 02830000000C    	  5677:                 andi.l #$0C,d3            * Isolate flags
01:00003326 DA83            	  5678:                 add.l d3,d5               * Copy flag results into accumulator
01:00003328 D880            	  5679:                 add.l d0,d4               * Copy data results into data accumulator
01:0000332A E299            	  5680:                 ror.l #$1,d1
                            	  5681: 
01:0000332C 51CEFFEE        	  5682:                 dbf d6,MULU_OUTER1
01:00003330 E29A            	  5683:                 ror.l #$1,d2
01:00003332 2002            	  5684:                 move.l d2,d0
01:00003334 7C0E            	  5685:                 move.l #$0000000E,d6       * Inner loop counter
01:00003336 51CFFFE4        	  5686:                 dbf d7,MULU_OUTER1
                            	  5687: 
01:0000333A 0C8476FB988C    	  5688:                 cmpi.l #$76FB988C,d4      * Check the data results
01:00003340 66FE            	  5689:                 bne.s *
                            	  5690: 
01:00003342 0C8500000170    	  5691:                 cmpi.l #$00000170,d5      * Check the Flag results
01:00003348 66FE            	  5692:                 bne.s *
                            	  5693: 
                            	  5694: 
01:0000334A 4E75            	  5695:                 rts
                            	  5696: 
                            	  5697: 
                            	  5698: *-----------------------------------------------------------
                            	  5699: *-----------------------------------------------------------
                            	  5700: * OPCODE : MULS
                            	  5701: *-----------------------------------------------------------
                            	  5702: *-----------------------------------------------------------
                            	  5703: 
                            	  5704: op_MULS:
                            	  5705: 
01:0000334C 203CFE805501    	  5706:                 move.l #$FE805501,d0        * Initial
01:00003352 223C5697EDB6    	  5707:                 move.l #$5697EDB6,d1        * Initial Y
01:00003358 243CFE805501    	  5708:                 move.l #$FE805501,d2
01:0000335E 7600            	  5709:                 moveq  #$00000000,d3
01:00003360 7800            	  5710:                 moveq  #$00000000,d4        * Cumulative data results
01:00003362 7A00            	  5711:                 moveq  #$00000000,d5       * Cumulative flag results
01:00003364 7C0E            	  5712:                 move.l #$0000000E,d6       * Inner loop counter
01:00003366 7E0E            	  5713:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5714: 
                            	  5715: 
01:00003368 C1C1            	  5716: MULS_OUTER1:    muls d1,d0
01:0000336A 40C3            	  5717:                 move.w sr,d3
01:0000336C 02830000000C    	  5718:                 andi.l #$0C,d3            * Isolate flags
01:00003372 DA83            	  5719:                 add.l d3,d5               * Copy flag results into accumulator
01:00003374 D880            	  5720:                 add.l d0,d4               * Copy data results into data accumulator
01:00003376 E299            	  5721:                 ror.l #$1,d1
                            	  5722: 
01:00003378 51CEFFEE        	  5723:                 dbf d6,MULS_OUTER1
01:0000337C E29A            	  5724:                 ror.l #$1,d2
01:0000337E 2002            	  5725:                 move.l d2,d0
01:00003380 7C0E            	  5726:                 move.l #$0000000E,d6       * Inner loop counter
01:00003382 51CFFFE4        	  5727:                 dbf d7,MULS_OUTER1
                            	  5728: 
01:00003386 0C84D4E2988C    	  5729:                 cmpi.l #$D4E2988C,d4      * Check the data results
01:0000338C 66FE            	  5730:                 bne.s *
                            	  5731: 
01:0000338E 0C85000003E0    	  5732:                 cmpi.l #$000003E0,d5      * Check the Flag results
01:00003394 66FE            	  5733:                 bne.s *
                            	  5734: 
                            	  5735: 
01:00003396 4E75            	  5736:                 rts
                            	  5737: 
                            	  5738: 
                            	  5739: 
                            	  5740: *-----------------------------------------------------------
                            	  5741: *-----------------------------------------------------------
                            	  5742: * OPCODE : EXG
                            	  5743: *-----------------------------------------------------------
                            	  5744: *-----------------------------------------------------------
                            	  5745: 
                            	  5746: op_EXG:
01:00003398 223CD1D1D1D1    	  5747:                 move.l #$d1d1d1d1,d1
01:0000339E 243CD2D2D2D2    	  5748:                 move.l #$d2d2d2d2,d2
01:000033A4 263CD3D3D3D3    	  5749:                 move.l #$d3d3d3d3,d3
01:000033AA 227CA1A1A1A1    	  5750:                 move.l #$a1a1a1a1,a1
01:000033B0 247CA2A2A2A2    	  5751:                 move.l #$a2a2a2a2,a2
01:000033B6 267CA3A3A3A3    	  5752:                 move.l #$a3a3a3a3,a3
                            	  5753: 
01:000033BC C342            	  5754:                 exg d1,d2
01:000033BE C34A            	  5755:                 exg a1,a2
01:000033C0 C78B            	  5756:                 exg d3,a3
                            	  5757: 
01:000033C2 0C81D2D2D2D2    	  5758:                 cmpi.l #$d2d2d2d2,d1      * Check the results
01:000033C8 66FE            	  5759:                 bne.s *
01:000033CA 0C82D1D1D1D1    	  5760:                 cmpi.l #$d1d1d1d1,d2
01:000033D0 66FE            	  5761:                 bne.s *
01:000033D2 0C83A3A3A3A3    	  5762:                 cmpi.l #$a3a3a3a3,d3
01:000033D8 66FE            	  5763:                 bne.s *
                            	  5764: 
01:000033DA 2209            	  5765:                 move.l a1,d1
01:000033DC 240A            	  5766:                 move.l a2,d2
01:000033DE 260B            	  5767:                 move.l a3,d3
                            	  5768: 
01:000033E0 0C81A2A2A2A2    	  5769:                 cmpi.l #$a2a2a2a2,d1
01:000033E6 66FE            	  5770:                 bne.s *
01:000033E8 0C82A1A1A1A1    	  5771:                 cmpi.l #$a1a1a1a1,d2
01:000033EE 66FE            	  5772:                 bne.s *
01:000033F0 0C83D3D3D3D3    	  5773:                 cmpi.l #$d3d3d3d3,d3
01:000033F6 66FE            	  5774:                 bne.s *
                            	  5775: 
01:000033F8 4E75            	  5776:                 rts
                            	  5777: 
                            	  5778: 
                            	  5779: *-----------------------------------------------------------
                            	  5780: *-----------------------------------------------------------
                            	  5781: * OPCODE : ROx
                            	  5782: *-----------------------------------------------------------
                            	  5783: *-----------------------------------------------------------
                            	  5784: 
                            	  5785: *     Subroutine to check and accumulate the flags
01:000033FA 40C3            	  5786: ROx_FLAGS:      move.w sr,d3
01:000033FC 02830000000F    	  5787:                 andi.l #$0F,d3            * Isolate flags
01:00003402 DA83            	  5788:                 add.l d3,d5               * Copy flag results into accumulator
01:00003404 4E75            	  5789:                 rts
                            	  5790: 
                            	  5791: op_ROx:
                            	  5792: 
                            	  5793: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5794: 
                            	  5795: *        BYTE LEFT
01:00003406 203C80018FF1    	  5796:                 move.l #$80018FF1,d0
01:0000340C 7A00            	  5797:                 moveq  #$00000000,d5
01:0000340E 7C11            	  5798:                 moveq  #$00000011,d6
                            	  5799: ROx_LOOP1:
01:00003410 ED38            	  5800:                 rol.b d6,d0
01:00003412 61E6            	  5801:                 bsr ROx_FLAGS
01:00003414 51CEFFFA        	  5802:                 dbf d6,ROx_LOOP1
01:00003418 0C8080018FE3    	  5803:                 cmpi.l #$80018FE3,d0
01:0000341E 66FE            	  5804:                 bne.s *
01:00003420 0C850000006B    	  5805:                 cmpi.l #$0000006B,d5
01:00003426 66FE            	  5806:                 bne.s *
                            	  5807: 
                            	  5808: *        BYTE RIGHT
01:00003428 203C80018FF1    	  5809:                 move.l #$80018FF1,d0
01:0000342E 7C12            	  5810:                 moveq  #$00000012,d6
                            	  5811: ROx_LOOP2:
01:00003430 EC38            	  5812:                 ror.b d6,d0
01:00003432 61C6            	  5813:                 bsr ROx_FLAGS
01:00003434 51CEFFFA        	  5814:                 dbf d6,ROx_LOOP2
01:00003438 0C8080018F3E    	  5815:                 cmpi.l #$80018F3E,d0
01:0000343E 66FE            	  5816:                 bne.s *
01:00003440 0C85000000C5    	  5817:                 cmpi.l #$000000C5,d5
01:00003446 66FE            	  5818:                 bne.s *
                            	  5819: 
                            	  5820: 
                            	  5821: *        WORD LEFT
01:00003448 203C80018FF1    	  5822:                 move.l #$80018FF1,d0
01:0000344E 7C13            	  5823:                 moveq  #$00000013,d6
                            	  5824: ROx_LOOP3:
01:00003450 ED78            	  5825:                 rol.w d6,d0
01:00003452 61A6            	  5826:                 bsr ROx_FLAGS
01:00003454 51CEFFFA        	  5827:                 dbf d6,ROx_LOOP3
01:00003458 0C80800163FC    	  5828:                 cmpi.l #$800163FC,d0
01:0000345E 66FE            	  5829:                 bne.s *
01:00003460 0C8500000131    	  5830:                 cmpi.l #$00000131,d5
01:00003466 66FE            	  5831:                 bne.s *
                            	  5832: 
                            	  5833: *        WORD RIGHT
01:00003468 203C80018FF1    	  5834:                 move.l #$80018FF1,d0
01:0000346E 7C1E            	  5835:                 move.l #$0000001E,d6
                            	  5836: ROx_LOOP4:
01:00003470 EC78            	  5837:                 ror.w d6,d0
01:00003472 6186            	  5838:                 bsr ROx_FLAGS
01:00003474 51CEFFFA        	  5839:                 dbf d6,ROx_LOOP4
01:00003478 0C808001C7F8    	  5840:                 cmpi.l #$8001C7F8,d0
01:0000347E 66FE            	  5841:                 bne.s *
01:00003480 0C85000001DB    	  5842:                 cmpi.l #$000001DB,d5
01:00003486 66FE            	  5843:                 bne.s *
                            	  5844: 
                            	  5845: 
                            	  5846: *        LONG LEFT
01:00003488 203C80018FF1    	  5847:                 move.l #$80018FF1,d0
01:0000348E 7C15            	  5848:                 moveq  #$00000015,d6
                            	  5849: ROx_LOOP5:
01:00003490 EDB8            	  5850:                 rol.l d6,d0
01:00003492 6100FF66        	  5851:                 bsr ROx_FLAGS
01:00003496 51CEFFF8        	  5852:                 dbf d6,ROx_LOOP5
01:0000349A 0C8000C7F8C0    	  5853:                 cmpi.l #$00C7F8C0,d0
01:000034A0 66FE            	  5854:                 bne.s *
01:000034A2 0C850000021A    	  5855:                 cmpi.l #$0000021A,d5
01:000034A8 66FE            	  5856:                 bne.s *
                            	  5857: 
                            	  5858: *        LONG RIGHT
01:000034AA 203C80018FF1    	  5859:                 move.l #$80018FF1,d0
01:000034B0 7C16            	  5860:                 moveq  #$00000016,d6
                            	  5861: ROx_LOOP6:
01:000034B2 ECB8            	  5862:                 ror.l d6,d0
01:000034B4 6100FF44        	  5863:                 bsr ROx_FLAGS
01:000034B8 51CEFFF8        	  5864:                 dbf d6,ROx_LOOP6
01:000034BC 0C80000C7F8C    	  5865:                 cmpi.l #$000C7F8C,d0
01:000034C2 66FE            	  5866:                 bne.s *
01:000034C4 0C8500000250    	  5867:                 cmpi.l #$00000250,d5
01:000034CA 66FE            	  5868:                 bne.s *
                            	  5869: 
                            	  5870: 
                            	  5871: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5872: 
01:000034CC 203C80018FF1    	  5873:                 move.l #$80018FF1,d0
01:000034D2 7A00            	  5874:                 moveq  #$00000000,d5
                            	  5875: 
                            	  5876: *        BYTE LEFT
01:000034D4 E318            	  5877:                 rol.b #1,d0
01:000034D6 6100FF22        	  5878:                 bsr ROx_FLAGS
01:000034DA EB18            	  5879:                 rol.b #5,d0
01:000034DC 6100FF1C        	  5880:                 bsr ROx_FLAGS
01:000034E0 EF18            	  5881:                 rol.b #7,d0
01:000034E2 6100FF16        	  5882:                 bsr ROx_FLAGS
01:000034E6 E118            	  5883:                 rol.b #8,d0
01:000034E8 6100FF10        	  5884:                 bsr ROx_FLAGS
01:000034EC 0C8080018F3E    	  5885:                 cmpi.l #$80018F3E,d0
01:000034F2 66FE            	  5886:                 bne.s *
01:000034F4 0C8500000009    	  5887:                 cmpi.l #$00000009,d5
01:000034FA 66FE            	  5888:                 bne.s *
                            	  5889: 
                            	  5890: *        BYTE RIGHT
01:000034FC E218            	  5891:                 ror.b #1,d0
01:000034FE 6100FEFA        	  5892:                 bsr ROx_FLAGS
01:00003502 EA18            	  5893:                 ror.b #5,d0
01:00003504 6100FEF4        	  5894:                 bsr ROx_FLAGS
01:00003508 EE18            	  5895:                 ror.b #7,d0
01:0000350A 6100FEEE        	  5896:                 bsr ROx_FLAGS
01:0000350E E018            	  5897:                 ror.b #8,d0
01:00003510 6100FEE8        	  5898:                 bsr ROx_FLAGS
01:00003514 0C8080018FF1    	  5899:                 cmpi.l #$80018FF1,d0
01:0000351A 66FE            	  5900:                 bne.s *
01:0000351C 0C8500000024    	  5901:                 cmpi.l #$00000024,d5
01:00003522 66FE            	  5902:                 bne.s *
                            	  5903: 
                            	  5904: *        WORD LEFT
01:00003524 E358            	  5905:                 rol.w #1,d0
01:00003526 6100FED2        	  5906:                 bsr ROx_FLAGS
01:0000352A EB58            	  5907:                 rol.w #5,d0
01:0000352C 6100FECC        	  5908:                 bsr ROx_FLAGS
01:00003530 EF58            	  5909:                 rol.w #7,d0
01:00003532 6100FEC6        	  5910:                 bsr ROx_FLAGS
01:00003536 E158            	  5911:                 rol.w #8,d0
01:00003538 6100FEC0        	  5912:                 bsr ROx_FLAGS
01:0000353C 0C808001FE31    	  5913:                 cmpi.l #$8001FE31,d0
01:00003542 66FE            	  5914:                 bne.s *
01:00003544 0C8500000037    	  5915:                 cmpi.l #$00000037,d5
01:0000354A 66FE            	  5916:                 bne.s *
                            	  5917: 
                            	  5918: *        WORD RIGHT
01:0000354C E258            	  5919:                 ror.w #1,d0
01:0000354E 6100FEAA        	  5920:                 bsr ROx_FLAGS
01:00003552 EA58            	  5921:                 ror.w #5,d0
01:00003554 6100FEA4        	  5922:                 bsr ROx_FLAGS
01:00003558 EE58            	  5923:                 ror.w #7,d0
01:0000355A 6100FE9E        	  5924:                 bsr ROx_FLAGS
01:0000355E E058            	  5925:                 ror.w #8,d0
01:00003560 6100FE98        	  5926:                 bsr ROx_FLAGS
01:00003564 0C8080018FF1    	  5927:                 cmpi.l #$80018FF1,d0
01:0000356A 66FE            	  5928:                 bne.s *
01:0000356C 0C850000005B    	  5929:                 cmpi.l #$0000005B,d5
01:00003572 66FE            	  5930:                 bne.s *
                            	  5931: 
                            	  5932: *        LONG LEFT
01:00003574 E398            	  5933:                 rol.l #1,d0
01:00003576 6100FE82        	  5934:                 bsr ROx_FLAGS
01:0000357A EB98            	  5935:                 rol.l #5,d0
01:0000357C 6100FE7C        	  5936:                 bsr ROx_FLAGS
01:00003580 EF98            	  5937:                 rol.l #7,d0
01:00003582 6100FE76        	  5938:                 bsr ROx_FLAGS
01:00003586 E198            	  5939:                 rol.l #8,d0
01:00003588 6100FE70        	  5940:                 bsr ROx_FLAGS
01:0000358C 0C80FE300031    	  5941:                 cmpi.l #$FE300031,d0
01:00003592 66FE            	  5942:                 bne.s *
01:00003594 0C8500000065    	  5943:                 cmpi.l #$00000065,d5
01:0000359A 66FE            	  5944:                 bne.s *
                            	  5945: 
                            	  5946: *        LONG RIGHT
01:0000359C E298            	  5947:                 ror.l #1,d0
01:0000359E 6100FE5A        	  5948:                 bsr ROx_FLAGS
01:000035A2 EA98            	  5949:                 ror.l #5,d0
01:000035A4 6100FE54        	  5950:                 bsr ROx_FLAGS
01:000035A8 EE98            	  5951:                 ror.l #7,d0
01:000035AA 6100FE4E        	  5952:                 bsr ROx_FLAGS
01:000035AE E098            	  5953:                 ror.l #8,d0
01:000035B0 6100FE48        	  5954:                 bsr ROx_FLAGS
01:000035B4 0C8080018FF1    	  5955:                 cmpi.l #$80018FF1,d0
01:000035BA 66FE            	  5956:                 bne.s *
01:000035BC 0C8500000080    	  5957:                 cmpi.l #$00000080,d5
01:000035C2 66FE            	  5958:                 bne.s *
                            	  5959: 
                            	  5960: 
                            	  5961: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5962: 
01:000035C4 7A00            	  5963:                 moveq  #$00000000,d5
01:000035C6 307C0100        	  5964:                 move.l #$00000100,a0
01:000035CA 30BC8FF1        	  5965:                 move.w #$8FF1,(a0)
                            	  5966: 
                            	  5967: *        WORD LEFT
01:000035CE E7D0            	  5968:                 rol (a0)
01:000035D0 6100FE28        	  5969:                 bsr ROx_FLAGS
01:000035D4 E7D0            	  5970:                 rol (a0)
01:000035D6 6100FE22        	  5971:                 bsr ROx_FLAGS
01:000035DA E7D0            	  5972:                 rol (a0)
01:000035DC 6100FE1C        	  5973:                 bsr ROx_FLAGS
01:000035E0 E7D0            	  5974:                 rol (a0)
01:000035E2 6100FE16        	  5975:                 bsr ROx_FLAGS
01:000035E6 3010            	  5976:                 move.w (a0),d0
01:000035E8 0C808001FF18    	  5977:                 cmpi.l #$8001FF18,d0
01:000035EE 66FE            	  5978:                 bne.s *
01:000035F0 0C8500000009    	  5979:                 cmpi.l #$00000009,d5
01:000035F6 66FE            	  5980:                 bne.s *
                            	  5981: 
                            	  5982: *        WORD RIGHT
01:000035F8 E6D0            	  5983:                 ror (a0)
01:000035FA 6100FDFE        	  5984:                 bsr ROx_FLAGS
01:000035FE E6D0            	  5985:                 ror (a0)
01:00003600 6100FDF8        	  5986:                 bsr ROx_FLAGS
01:00003604 E6D0            	  5987:                 ror (a0)
01:00003606 6100FDF2        	  5988:                 bsr ROx_FLAGS
01:0000360A E6D0            	  5989:                 ror (a0)
01:0000360C 6100FDEC        	  5990:                 bsr ROx_FLAGS
01:00003610 E6D0            	  5991:                 ror (a0)
01:00003612 6100FDE6        	  5992:                 bsr ROx_FLAGS
01:00003616 E6D0            	  5993:                 ror (a0)
01:00003618 6100FDE0        	  5994:                 bsr ROx_FLAGS
01:0000361C 3010            	  5995:                 move.w (a0),d0
01:0000361E 0C80800163FC    	  5996:                 cmpi.l #$800163FC,d0
01:00003624 66FE            	  5997:                 bne.s *
01:00003626 0C850000001B    	  5998:                 cmpi.l #$0000001B,d5
01:0000362C 66FE            	  5999:                 bne.s *
                            	  6000: 
01:0000362E 4E75            	  6001:                 rts
                            	  6002: 
                            	  6003: 
                            	  6004: 
                            	  6005: *-----------------------------------------------------------
                            	  6006: *-----------------------------------------------------------
                            	  6007: * OPCODE : ROXx
                            	  6008: *-----------------------------------------------------------
                            	  6009: *-----------------------------------------------------------
                            	  6010: 
                            	  6011: *     Subroutine to check and accumulate the flags
01:00003630 40C3            	  6012: ROXx_FLAGS:     move.w sr,d3
01:00003632 02830000000F    	  6013:                 andi.l #$0F,d3            * Isolate flags
01:00003638 DA83            	  6014:                 add.l d3,d5               * Copy flag results into accumulator
01:0000363A 4E75            	  6015:                 rts
                            	  6016: 
                            	  6017: op_ROXx:
                            	  6018: 
                            	  6019: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6020: 
                            	  6021: *        BYTE LEFT
01:0000363C 203C80018FF1    	  6022:                 move.l #$80018FF1,d0
01:00003642 7A00            	  6023:                 moveq  #$00000000,d5
01:00003644 7C11            	  6024:                 moveq  #$00000011,d6
                            	  6025: ROXx_LOOP1:
01:00003646 ED30            	  6026:                 roxl.b d6,d0
01:00003648 61E6            	  6027:                 bsr ROXx_FLAGS
01:0000364A 51CEFFFA        	  6028:                 dbf d6,ROXx_LOOP1
01:0000364E 0C8080018FD0    	  6029:                 cmpi.l #$80018FD0,d0
01:00003654 66FE            	  6030:                 bne.s *
01:00003656 0C8500000042    	  6031:                 cmpi.l #$00000042,d5
01:0000365C 66FE            	  6032:                 bne.s *
                            	  6033: 
                            	  6034: *        BYTE RIGHT
01:0000365E 203C80018FF1    	  6035:                 move.l #$80018FF1,d0
01:00003664 7C12            	  6036:                 moveq  #$00000012,d6
                            	  6037: ROXx_LOOP2:
01:00003666 EC30            	  6038:                 roxr.b d6,d0
01:00003668 61C6            	  6039:                 bsr ROXx_FLAGS
01:0000366A 51CEFFFA        	  6040:                 dbf d6,ROXx_LOOP2
01:0000366E 0C8080018F51    	  6041:                 cmpi.l #$80018F51,d0
01:00003674 66FE            	  6042:                 bne.s *
01:00003676 0C850000009C    	  6043:                 cmpi.l #$0000009C,d5
01:0000367C 66FE            	  6044:                 bne.s *
                            	  6045: 
                            	  6046: 
                            	  6047: *        WORD LEFT
01:0000367E 203C80018FF1    	  6048:                 move.l #$80018FF1,d0
01:00003684 7C13            	  6049:                 moveq  #$00000013,d6
                            	  6050: ROXx_LOOP3:
01:00003686 ED70            	  6051:                 roxl.w d6,d0
01:00003688 61A6            	  6052:                 bsr ROXx_FLAGS
01:0000368A 51CEFFFA        	  6053:                 dbf d6,ROXx_LOOP3
01:0000368E 0C8080013980    	  6054:                 cmpi.l #$80013980,d0
01:00003694 66FE            	  6055:                 bne.s *
01:00003696 0C85000000C9    	  6056:                 cmpi.l #$000000C9,d5
01:0000369C 66FE            	  6057:                 bne.s *
                            	  6058: 
                            	  6059: *        WORD RIGHT
01:0000369E 203C80018FF1    	  6060:                 move.l #$80018FF1,d0
01:000036A4 7C1E            	  6061:                 move.l #$0000001E,d6
                            	  6062: ROXx_LOOP4:
01:000036A6 EC70            	  6063:                 roxr.w d6,d0
01:000036A8 6186            	  6064:                 bsr ROXx_FLAGS
01:000036AA 51CEFFFA        	  6065:                 dbf d6,ROXx_LOOP4
01:000036AE 0C8080010A1D    	  6066:                 cmpi.l #$80010A1D,d0
01:000036B4 66FE            	  6067:                 bne.s *
01:000036B6 0C850000014D    	  6068:                 cmpi.l #$0000014D,d5
01:000036BC 66FE            	  6069:                 bne.s *
                            	  6070: 
                            	  6071: 
                            	  6072: *        LONG LEFT
01:000036BE 203C80018FF1    	  6073:                 move.l #$80018FF1,d0
01:000036C4 7C15            	  6074:                 moveq  #$00000015,d6
                            	  6075: ROXx_LOOP5:
01:000036C6 EDB0            	  6076:                 roxl.l d6,d0
01:000036C8 6100FF66        	  6077:                 bsr ROXx_FLAGS
01:000036CC 51CEFFF8        	  6078:                 dbf d6,ROXx_LOOP5
01:000036D0 0C80800185D0    	  6079:                 cmpi.l #$800185D0,d0
01:000036D6 66FE            	  6080:                 bne.s *
01:000036D8 0C85000001A1    	  6081:                 cmpi.l #$000001A1,d5
01:000036DE 66FE            	  6082:                 bne.s *
                            	  6083: 
                            	  6084: *        LONG RIGHT
01:000036E0 203C80018FF1    	  6085:                 move.l #$80018FF1,d0
01:000036E6 7C16            	  6086:                 moveq  #$00000016,d6
                            	  6087: ROXx_LOOP6:
01:000036E8 ECB0            	  6088:                 roxr.l d6,d0
01:000036EA 6100FF44        	  6089:                 bsr ROXx_FLAGS
01:000036EE 51CEFFF8        	  6090:                 dbf d6,ROXx_LOOP6
01:000036F2 0C80082D8200    	  6091:                 cmpi.l #$082D8200,d0
01:000036F8 66FE            	  6092:                 bne.s *
01:000036FA 0C85000001DE    	  6093:                 cmpi.l #$000001DE,d5
01:00003700 66FE            	  6094:                 bne.s *
                            	  6095: 
                            	  6096: 
                            	  6097: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6098: 
01:00003702 203C80018FF1    	  6099:                 move.l #$80018FF1,d0
01:00003708 7A00            	  6100:                 moveq  #$00000000,d5
                            	  6101: 
                            	  6102: *        BYTE LEFT
01:0000370A E310            	  6103:                 roxl.b #1,d0
01:0000370C 6100FF22        	  6104:                 bsr ROXx_FLAGS
01:00003710 EB10            	  6105:                 roxl.b #5,d0
01:00003712 6100FF1C        	  6106:                 bsr ROXx_FLAGS
01:00003716 EF10            	  6107:                 roxl.b #7,d0
01:00003718 6100FF16        	  6108:                 bsr ROXx_FLAGS
01:0000371C E110            	  6109:                 roxl.b #8,d0
01:0000371E 6100FF10        	  6110:                 bsr ROXx_FLAGS
01:00003722 0C8080018F09    	  6111:                 cmpi.l #$80018F09,d0
01:00003728 66FE            	  6112:                 bne.s *
01:0000372A 0C850000000B    	  6113:                 cmpi.l #$0000000B,d5
01:00003730 66FE            	  6114:                 bne.s *
                            	  6115: 
                            	  6116: *        BYTE RIGHT
01:00003732 E210            	  6117:                 roxr.b #1,d0
01:00003734 6100FEFA        	  6118:                 bsr ROXx_FLAGS
01:00003738 EA10            	  6119:                 roxr.b #5,d0
01:0000373A 6100FEF4        	  6120:                 bsr ROXx_FLAGS
01:0000373E EE10            	  6121:                 roxr.b #7,d0
01:00003740 6100FEEE        	  6122:                 bsr ROXx_FLAGS
01:00003744 E010            	  6123:                 roxr.b #8,d0
01:00003746 6100FEE8        	  6124:                 bsr ROXx_FLAGS
01:0000374A 0C8080018F00    	  6125:                 cmpi.l #$80018F00,d0
01:00003750 66FE            	  6126:                 bne.s *
01:00003752 0C8500000015    	  6127:                 cmpi.l #$00000015,d5
01:00003758 66FE            	  6128:                 bne.s *
                            	  6129: 
                            	  6130: *        WORD LEFT
01:0000375A E350            	  6131:                 roxl.w #1,d0
01:0000375C 6100FED2        	  6132:                 bsr ROXx_FLAGS
01:00003760 EB50            	  6133:                 roxl.w #5,d0
01:00003762 6100FECC        	  6134:                 bsr ROXx_FLAGS
01:00003766 EF50            	  6135:                 roxl.w #7,d0
01:00003768 6100FEC6        	  6136:                 bsr ROXx_FLAGS
01:0000376C E150            	  6137:                 roxl.w #8,d0
01:0000376E 6100FEC0        	  6138:                 bsr ROXx_FLAGS
01:00003772 0C808001B000    	  6139:                 cmpi.l #$8001B000,d0
01:00003778 66FE            	  6140:                 bne.s *
01:0000377A 0C8500000027    	  6141:                 cmpi.l #$00000027,d5
01:00003780 66FE            	  6142:                 bne.s *
                            	  6143: 
                            	  6144: *        WORD RIGHT
01:00003782 E250            	  6145:                 roxr.w #1,d0
01:00003784 6100FEAA        	  6146:                 bsr ROXx_FLAGS
01:00003788 EA50            	  6147:                 roxr.w #5,d0
01:0000378A 6100FEA4        	  6148:                 bsr ROXx_FLAGS
01:0000378E EE50            	  6149:                 roxr.w #7,d0
01:00003790 6100FE9E        	  6150:                 bsr ROXx_FLAGS
01:00003794 E050            	  6151:                 roxr.w #8,d0
01:00003796 6100FE98        	  6152:                 bsr ROXx_FLAGS
01:0000379A 0C8080010A00    	  6153:                 cmpi.l #$80010A00,d0
01:000037A0 66FE            	  6154:                 bne.s *
01:000037A2 0C8500000028    	  6155:                 cmpi.l #$00000028,d5
01:000037A8 66FE            	  6156:                 bne.s *
                            	  6157: 
                            	  6158: *        LONG LEFT
01:000037AA E390            	  6159:                 roxl.l #1,d0
01:000037AC 6100FE82        	  6160:                 bsr ROXx_FLAGS
01:000037B0 EB90            	  6161:                 roxl.l #5,d0
01:000037B2 6100FE7C        	  6162:                 bsr ROXx_FLAGS
01:000037B6 EF90            	  6163:                 roxl.l #7,d0
01:000037B8 6100FE76        	  6164:                 bsr ROXx_FLAGS
01:000037BC E190            	  6165:                 roxl.l #8,d0
01:000037BE 6100FE70        	  6166:                 bsr ROXx_FLAGS
01:000037C2 0C8040000010    	  6167:                 cmpi.l #$40000010,d0
01:000037C8 66FE            	  6168:                 bne.s *
01:000037CA 0C850000002A    	  6169:                 cmpi.l #$0000002A,d5
01:000037D0 66FE            	  6170:                 bne.s *
                            	  6171: 
                            	  6172: *        LONG RIGHT
01:000037D2 E290            	  6173:                 roxr.l #1,d0
01:000037D4 6100FE5A        	  6174:                 bsr ROXx_FLAGS
01:000037D8 EA90            	  6175:                 roxr.l #5,d0
01:000037DA 6100FE54        	  6176:                 bsr ROXx_FLAGS
01:000037DE EE90            	  6177:                 roxr.l #7,d0
01:000037E0 6100FE4E        	  6178:                 bsr ROXx_FLAGS
01:000037E4 E090            	  6179:                 roxr.l #8,d0
01:000037E6 6100FE48        	  6180:                 bsr ROXx_FLAGS
01:000037EA 0C8000010200    	  6181:                 cmpi.l #$00010200,d0
01:000037F0 66FE            	  6182:                 bne.s *
01:000037F2 0C8500000032    	  6183:                 cmpi.l #$00000032,d5
01:000037F8 66FE            	  6184:                 bne.s *
                            	  6185: 
                            	  6186: 
                            	  6187: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6188: 
01:000037FA 7A00            	  6189:                 moveq  #$00000000,d5
01:000037FC 307C0100        	  6190:                 move.l #$00000100,a0
01:00003800 30BC8FF1        	  6191:                 move.w #$8FF1,(a0)
                            	  6192: 
                            	  6193: *        WORD LEFT
01:00003804 E5D0            	  6194:                 roxl (a0)
01:00003806 6100FE28        	  6195:                 bsr ROXx_FLAGS
01:0000380A E5D0            	  6196:                 roxl (a0)
01:0000380C 6100FE22        	  6197:                 bsr ROXx_FLAGS
01:00003810 E5D0            	  6198:                 roxl (a0)
01:00003812 6100FE1C        	  6199:                 bsr ROXx_FLAGS
01:00003816 E5D0            	  6200:                 roxl (a0)
01:00003818 6100FE16        	  6201:                 bsr ROXx_FLAGS
01:0000381C 3010            	  6202:                 move.w (a0),d0
01:0000381E 0C800001FF10    	  6203:                 cmpi.l #$0001FF10,d0
01:00003824 66FE            	  6204:                 bne.s *
01:00003826 0C8500000009    	  6205:                 cmpi.l #$00000009,d5
01:0000382C 66FE            	  6206:                 bne.s *
                            	  6207: 
                            	  6208: *        WORD RIGHT
01:0000382E E4D0            	  6209:                 roxr (a0)
01:00003830 6100FDFE        	  6210:                 bsr ROXx_FLAGS
01:00003834 E4D0            	  6211:                 roxr (a0)
01:00003836 6100FDF8        	  6212:                 bsr ROXx_FLAGS
01:0000383A E4D0            	  6213:                 roxr (a0)
01:0000383C 6100FDF2        	  6214:                 bsr ROXx_FLAGS
01:00003840 E4D0            	  6215:                 roxr (a0)
01:00003842 6100FDEC        	  6216:                 bsr ROXx_FLAGS
01:00003846 E4D0            	  6217:                 roxr (a0)
01:00003848 6100FDE6        	  6218:                 bsr ROXx_FLAGS
01:0000384C E4D0            	  6219:                 roxr (a0)
01:0000384E 6100FDE0        	  6220:                 bsr ROXx_FLAGS
01:00003852 3010            	  6221:                 move.w (a0),d0
01:00003854 0C80000103FC    	  6222:                 cmpi.l #$000103FC,d0
01:0000385A 66FE            	  6223:                 bne.s *
01:0000385C 0C850000000A    	  6224:                 cmpi.l #$0000000A,d5
01:00003862 66FE            	  6225:                 bne.s *
                            	  6226: 
01:00003864 4E75            	  6227:                 rts
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: 
                            	  6232: *-----------------------------------------------------------
                            	  6233: *-----------------------------------------------------------
                            	  6234: * OPCODE : SHIFTS
                            	  6235: *-----------------------------------------------------------
                            	  6236: *-----------------------------------------------------------
                            	  6237: 
                            	  6238: *     Subroutine to check and accumulate the flags
01:00003866 40C3            	  6239: SHIFTS_FLAGS:   move.w sr,d3
01:00003868 02830000000F    	  6240:                 andi.l #$0F,d3            * Isolate flags
01:0000386E DA83            	  6241:                 add.l d3,d5               * Copy flag results into accumulator
01:00003870 4E75            	  6242:                 rts
                            	  6243: 
                            	  6244: op_SHIFTS:
                            	  6245: 
                            	  6246: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6247: 
                            	  6248: *        BYTE LEFT
01:00003872 203C80018F81    	  6249:                 move.l #$80018F81,d0
01:00003878 7A00            	  6250:                 moveq  #$00000000,d5
01:0000387A 7C02            	  6251:                 moveq  #$00000002,d6
                            	  6252: SHIFTS_LOOP1:
01:0000387C ED20            	  6253:                 asl.b d6,d0
01:0000387E 61E6            	  6254:                 bsr SHIFTS_FLAGS
01:00003880 51CEFFFA        	  6255:                 dbf d6,SHIFTS_LOOP1
01:00003884 0C8080018F08    	  6256:                 cmpi.l #$80018F08,d0
01:0000388A 66FE            	  6257:                 bne.s *
01:0000388C 0C8500000002    	  6258:                 cmpi.l #$00000002,d5
01:00003892 66FE            	  6259:                 bne.s *
                            	  6260: 
                            	  6261: *        BYTE RIGHT
01:00003894 203C80018F81    	  6262:                 move.l #$80018F81,d0
01:0000389A 7C02            	  6263:                 moveq  #$00000002,d6
                            	  6264: SHIFTS_LOOP2:
01:0000389C EC20            	  6265:                 asr.b d6,d0
01:0000389E 61C6            	  6266:                 bsr SHIFTS_FLAGS
01:000038A0 51CEFFFA        	  6267:                 dbf d6,SHIFTS_LOOP2
01:000038A4 0C8080018FF0    	  6268:                 cmpi.l #$80018FF0,d0
01:000038AA 66FE            	  6269:                 bne.s *
01:000038AC 0C850000001A    	  6270:                 cmpi.l #$0000001A,d5
01:000038B2 66FE            	  6271:                 bne.s *
                            	  6272: 
                            	  6273: 
                            	  6274: *        WORD LEFT
01:000038B4 203C80018FF1    	  6275:                 move.l #$80018FF1,d0
01:000038BA 7C02            	  6276:                 moveq  #$00000002,d6
                            	  6277: SHIFTS_LOOP3:
01:000038BC ED60            	  6278:                 asl.w d6,d0
01:000038BE 61A6            	  6279:                 bsr SHIFTS_FLAGS
01:000038C0 51CEFFFA        	  6280:                 dbf d6,SHIFTS_LOOP3
01:000038C4 0C8080017F88    	  6281:                 cmpi.l #$80017F88,d0
01:000038CA 66FE            	  6282:                 bne.s *
01:000038CC 0C850000001C    	  6283:                 cmpi.l #$0000001C,d5
01:000038D2 66FE            	  6284:                 bne.s *
                            	  6285: 
                            	  6286: *        WORD RIGHT
01:000038D4 203C80018FF1    	  6287:                 move.l #$80018FF1,d0
01:000038DA 7C02            	  6288:                 moveq  #$00000002,d6
                            	  6289: SHIFTS_LOOP4:
01:000038DC EC60            	  6290:                 asr.w d6,d0
01:000038DE 6186            	  6291:                 bsr SHIFTS_FLAGS
01:000038E0 51CEFFFA        	  6292:                 dbf d6,SHIFTS_LOOP4
01:000038E4 0C808001F1FE    	  6293:                 cmpi.l #$8001F1FE,d0
01:000038EA 66FE            	  6294:                 bne.s *
01:000038EC 0C8500000034    	  6295:                 cmpi.l #$00000034,d5
01:000038F2 66FE            	  6296:                 bne.s *
                            	  6297: 
                            	  6298: 
                            	  6299: *        LONG LEFT
01:000038F4 203C80018FF1    	  6300:                 move.l #$80018FF1,d0
01:000038FA 7C02            	  6301:                 moveq  #$00000002,d6
                            	  6302: SHIFTS_LOOP5:
01:000038FC EDA0            	  6303:                 asl.l d6,d0
01:000038FE 6100FF66        	  6304:                 bsr SHIFTS_FLAGS
01:00003902 51CEFFF8        	  6305:                 dbf d6,SHIFTS_LOOP5
01:00003906 0C80000C7F88    	  6306:                 cmpi.l #$000C7F88,d0
01:0000390C 66FE            	  6307:                 bne.s *
01:0000390E 0C8500000036    	  6308:                 cmpi.l #$00000036,d5
01:00003914 66FE            	  6309:                 bne.s *
                            	  6310: 
                            	  6311: *        LONG RIGHT
01:00003916 203C80018FF1    	  6312:                 move.l #$80018FF1,d0
01:0000391C 7C02            	  6313:                 moveq  #$00000002,d6
                            	  6314: SHIFTS_LOOP6:
01:0000391E ECA0            	  6315:                 asr.l d6,d0
01:00003920 6100FF44        	  6316:                 bsr SHIFTS_FLAGS
01:00003924 51CEFFF8        	  6317:                 dbf d6,SHIFTS_LOOP6
01:00003928 0C80F00031FE    	  6318:                 cmpi.l #$F00031FE,d0
01:0000392E 66FE            	  6319:                 bne.s *
01:00003930 0C850000004E    	  6320:                 cmpi.l #$0000004E,d5
01:00003936 66FE            	  6321:                 bne.s *
                            	  6322: 
                            	  6323: 
                            	  6324: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6325: 
01:00003938 203C80018FF1    	  6326:                 move.l #$80018FF1,d0
01:0000393E 7A00            	  6327:                 moveq  #$00000000,d5
                            	  6328: 
                            	  6329: *        BYTE LEFT
01:00003940 D000            	  6330:                 asl.b #1,d0
01:00003942 6100FF22        	  6331:                 bsr SHIFTS_FLAGS
01:00003946 E500            	  6332:                 asl.b #2,d0
01:00003948 6100FF1C        	  6333:                 bsr SHIFTS_FLAGS
01:0000394C D000            	  6334:                 asl.b #1,d0
01:0000394E 6100FF16        	  6335:                 bsr SHIFTS_FLAGS
01:00003952 E700            	  6336:                 asl.b #3,d0
01:00003954 6100FF10        	  6337:                 bsr SHIFTS_FLAGS
01:00003958 0C8080018F80    	  6338:                 cmpi.l #$80018F80,d0
01:0000395E 66FE            	  6339:                 bne.s *
01:00003960 0C850000001F    	  6340:                 cmpi.l #$0000001F,d5
01:00003966 66FE            	  6341:                 bne.s *
                            	  6342: 
                            	  6343: *        BYTE RIGHT
01:00003968 E200            	  6344:                 asr.b #1,d0
01:0000396A 6100FEFA        	  6345:                 bsr SHIFTS_FLAGS
01:0000396E E400            	  6346:                 asr.b #2,d0
01:00003970 6100FEF4        	  6347:                 bsr SHIFTS_FLAGS
01:00003974 E600            	  6348:                 asr.b #3,d0
01:00003976 6100FEEE        	  6349:                 bsr SHIFTS_FLAGS
01:0000397A E200            	  6350:                 asr.b #1,d0
01:0000397C 6100FEE8        	  6351:                 bsr SHIFTS_FLAGS
01:00003980 0C8080018FFF    	  6352:                 cmpi.l #$80018FFF,d0
01:00003986 66FE            	  6353:                 bne.s *
01:00003988 0C850000003F    	  6354:                 cmpi.l #$0000003F,d5
01:0000398E 66FE            	  6355:                 bne.s *
                            	  6356: 
                            	  6357: *        WORD LEFT
01:00003990 D040            	  6358:                 asl.w #1,d0
01:00003992 6100FED2        	  6359:                 bsr SHIFTS_FLAGS
01:00003996 E540            	  6360:                 asl.w #2,d0
01:00003998 6100FECC        	  6361:                 bsr SHIFTS_FLAGS
01:0000399C E740            	  6362:                 asl.w #3,d0
01:0000399E 6100FEC6        	  6363:                 bsr SHIFTS_FLAGS
01:000039A2 EB40            	  6364:                 asl.w #5,d0
01:000039A4 6100FEC0        	  6365:                 bsr SHIFTS_FLAGS
01:000039A8 0C808001F800    	  6366:                 cmpi.l #$8001F800,d0
01:000039AE 66FE            	  6367:                 bne.s *
01:000039B0 0C8500000056    	  6368:                 cmpi.l #$00000056,d5
01:000039B6 66FE            	  6369:                 bne.s *
                            	  6370: 
                            	  6371: *        WORD RIGHT
01:000039B8 EA40            	  6372:                 asr.w #5,d0
01:000039BA 6100FEAA        	  6373:                 bsr SHIFTS_FLAGS
01:000039BE E240            	  6374:                 asr.w #1,d0
01:000039C0 6100FEA4        	  6375:                 bsr SHIFTS_FLAGS
01:000039C4 E440            	  6376:                 asr.w #2,d0
01:000039C6 6100FE9E        	  6377:                 bsr SHIFTS_FLAGS
01:000039CA E840            	  6378:                 asr.w #4,d0
01:000039CC 6100FE98        	  6379:                 bsr SHIFTS_FLAGS
01:000039D0 0C808001FFFF    	  6380:                 cmpi.l #$8001FFFF,d0
01:000039D6 66FE            	  6381:                 bne.s *
01:000039D8 0C8500000077    	  6382:                 cmpi.l #$00000077,d5
01:000039DE 66FE            	  6383:                 bne.s *
                            	  6384: 
                            	  6385: *        LONG LEFT
01:000039E0 203C80018FF1    	  6386:                 move.l #$80018FF1,d0
01:000039E6 D080            	  6387:                 asl.l #1,d0
01:000039E8 6100FE7C        	  6388:                 bsr SHIFTS_FLAGS
01:000039EC E580            	  6389:                 asl.l #2,d0
01:000039EE 6100FE76        	  6390:                 bsr SHIFTS_FLAGS
01:000039F2 EF80            	  6391:                 asl.l #7,d0
01:000039F4 6100FE70        	  6392:                 bsr SHIFTS_FLAGS
01:000039F8 E980            	  6393:                 asl.l #4,d0
01:000039FA 6100FE6A        	  6394:                 bsr SHIFTS_FLAGS
01:000039FE 0C8063FC4000    	  6395:                 cmpi.l #$63FC4000,d0
01:00003A04 66FE            	  6396:                 bne.s *
01:00003A06 0C850000007A    	  6397:                 cmpi.l #$0000007A,d5
01:00003A0C 66FE            	  6398:                 bne.s *
                            	  6399: 
                            	  6400: *        LONG RIGHT
01:00003A0E 203C80018FF1    	  6401:                 move.l #$80018FF1,d0
01:00003A14 E280            	  6402:                 asr.l #1,d0
01:00003A16 6100FE4E        	  6403:                 bsr SHIFTS_FLAGS
01:00003A1A EA80            	  6404:                 asr.l #5,d0
01:00003A1C 6100FE48        	  6405:                 bsr SHIFTS_FLAGS
01:00003A20 EE80            	  6406:                 asr.l #7,d0
01:00003A22 6100FE42        	  6407:                 bsr SHIFTS_FLAGS
01:00003A26 E080            	  6408:                 asr.l #8,d0
01:00003A28 6100FE3C        	  6409:                 bsr SHIFTS_FLAGS
01:00003A2C 0C80FFFFFC00    	  6410:                 cmpi.l #$FFFFFC00,d0
01:00003A32 66FE            	  6411:                 bne.s *
01:00003A34 0C850000009C    	  6412:                 cmpi.l #$0000009C,d5
01:00003A3A 66FE            	  6413:                 bne.s *
                            	  6414: 
                            	  6415: 
                            	  6416: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6417: 
01:00003A3C 7A00            	  6418:                 moveq  #$00000000,d5
01:00003A3E 307C0100        	  6419:                 move.l #$00000100,a0
01:00003A42 30BC8FF1        	  6420:                 move.w #$8FF1,(a0)
                            	  6421: 
                            	  6422: *        WORD LEFT
01:00003A46 E1D0            	  6423:                 asl  (a0)
01:00003A48 6100FE1C        	  6424:                 bsr SHIFTS_FLAGS
01:00003A4C E1D0            	  6425:                 asl  (a0)
01:00003A4E 6100FE16        	  6426:                 bsr SHIFTS_FLAGS
01:00003A52 E1D0            	  6427:                 asl  (a0)
01:00003A54 6100FE10        	  6428:                 bsr SHIFTS_FLAGS
01:00003A58 E1D0            	  6429:                 asl  (a0)
01:00003A5A 6100FE0A        	  6430:                 bsr SHIFTS_FLAGS
01:00003A5E 3010            	  6431:                 move.w (a0),d0
01:00003A60 0C80FFFFFF10    	  6432:                 cmpi.l #$FFFFFF10,d0
01:00003A66 66FE            	  6433:                 bne.s *
01:00003A68 0C850000000D    	  6434:                 cmpi.l #$0000000D,d5
01:00003A6E 66FE            	  6435:                 bne.s *
                            	  6436: 
                            	  6437: *        WORD RIGHT
01:00003A70 E0D0            	  6438:                 asr (a0)
01:00003A72 6100FDF2        	  6439:                 bsr SHIFTS_FLAGS
01:00003A76 E0D0            	  6440:                 asr (a0)
01:00003A78 6100FDEC        	  6441:                 bsr SHIFTS_FLAGS
01:00003A7C E0D0            	  6442:                 asr (a0)
01:00003A7E 6100FDE6        	  6443:                 bsr SHIFTS_FLAGS
01:00003A82 E0D0            	  6444:                 asr (a0)
01:00003A84 6100FDE0        	  6445:                 bsr SHIFTS_FLAGS
01:00003A88 E0D0            	  6446:                 asr (a0)
01:00003A8A 6100FDDA        	  6447:                 bsr SHIFTS_FLAGS
01:00003A8E E0D0            	  6448:                 asr (a0)
01:00003A90 6100FDD4        	  6449:                 bsr SHIFTS_FLAGS
01:00003A94 3010            	  6450:                 move.w (a0),d0
01:00003A96 0C80FFFFFFFC    	  6451:                 cmpi.l #$FFFFFFFC,d0
01:00003A9C 66FE            	  6452:                 bne.s *
01:00003A9E 0C850000003E    	  6453:                 cmpi.l #$0000003E,d5
01:00003AA4 66FE            	  6454:                 bne.s *
                            	  6455: 
01:00003AA6 4E75            	  6456:                 rts
                            	  6457: 
                            	  6458: 
                            	  6459: 
                            	  6460: *-----------------------------------------------------------
                            	  6461: *-----------------------------------------------------------
                            	  6462: * OPCODE : SHIFTS2
                            	  6463: *-----------------------------------------------------------
                            	  6464: *-----------------------------------------------------------
                            	  6465: 
                            	  6466: *     Subroutine to check and accumulate the flags
01:00003AA8 40C3            	  6467: SHIFTS2_FLAGS:  move.w sr,d3
01:00003AAA 02830000000F    	  6468:                 andi.l #$0F,d3            * Isolate flags
01:00003AB0 DA83            	  6469:                 add.l d3,d5               * Copy flag results into accumulator
01:00003AB2 4E75            	  6470:                 rts
                            	  6471: 
                            	  6472: op_SHIFTS2:
                            	  6473: 
                            	  6474: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6475: 
                            	  6476: *        BYTE LEFT
01:00003AB4 203C80018F81    	  6477:                 move.l #$80018F81,d0
01:00003ABA 7A00            	  6478:                 moveq  #$00000000,d5
01:00003ABC 7C02            	  6479:                 moveq  #$00000002,d6
                            	  6480: SHIFTS2_LOOP1:
01:00003ABE ED28            	  6481:                 lsl.b d6,d0
01:00003AC0 61E6            	  6482:                 bsr SHIFTS2_FLAGS
01:00003AC2 51CEFFFA        	  6483:                 dbf d6,SHIFTS2_LOOP1
01:00003AC6 0C8080018F08    	  6484:                 cmpi.l #$80018F08,d0
01:00003ACC 66FE            	  6485:                 bne.s *
01:00003ACE 4A85            	  6486:                 cmpi.l #$00000000,d5
01:00003AD0 66FE            	  6487:                 bne.s *
                            	  6488: 
                            	  6489: *        BYTE RIGHT
01:00003AD2 203C80018F81    	  6490:                 move.l #$80018F81,d0
01:00003AD8 7C02            	  6491:                 moveq  #$00000002,d6
                            	  6492: SHIFTS2_LOOP2:
01:00003ADA EC28            	  6493:                 lsr.b d6,d0
01:00003ADC 61CA            	  6494:                 bsr SHIFTS2_FLAGS
01:00003ADE 51CEFFFA        	  6495:                 dbf d6,SHIFTS2_LOOP2
01:00003AE2 0C8080018F10    	  6496:                 cmpi.l #$80018F10,d0
01:00003AE8 66FE            	  6497:                 bne.s *
01:00003AEA 4A85            	  6498:                 cmpi.l #$00000000,d5
01:00003AEC 66FE            	  6499:                 bne.s *
                            	  6500: 
                            	  6501: 
                            	  6502: *        WORD LEFT
01:00003AEE 203C80018FF1    	  6503:                 move.l #$80018FF1,d0
01:00003AF4 7C02            	  6504:                 moveq  #$00000002,d6
                            	  6505: SHIFTS2_LOOP3:
01:00003AF6 ED68            	  6506:                 lsl.w d6,d0
01:00003AF8 61AE            	  6507:                 bsr SHIFTS2_FLAGS
01:00003AFA 51CEFFFA        	  6508:                 dbf d6,SHIFTS2_LOOP3
01:00003AFE 0C8080017F88    	  6509:                 cmpi.l #$80017F88,d0
01:00003B04 66FE            	  6510:                 bne.s *
01:00003B06 4A85            	  6511:                 cmpi.l #$00000000,d5
01:00003B08 66FE            	  6512:                 bne.s *
                            	  6513: 
                            	  6514: *        WORD RIGHT
01:00003B0A 203C80018FF1    	  6515:                 move.l #$80018FF1,d0
01:00003B10 7C02            	  6516:                 moveq  #$00000002,d6
                            	  6517: SHIFTS2_LOOP4:
01:00003B12 EC68            	  6518:                 lsr.w d6,d0
01:00003B14 6192            	  6519:                 bsr SHIFTS2_FLAGS
01:00003B16 51CEFFFA        	  6520:                 dbf d6,SHIFTS2_LOOP4
01:00003B1A 0C80800111FE    	  6521:                 cmpi.l #$800111FE,d0
01:00003B20 66FE            	  6522:                 bne.s *
01:00003B22 4A85            	  6523:                 cmpi.l #$00000000,d5
01:00003B24 66FE            	  6524:                 bne.s *
                            	  6525: 
                            	  6526: 
                            	  6527: *        LONG LEFT
01:00003B26 203C80018FF1    	  6528:                 move.l #$80018FF1,d0
01:00003B2C 7C02            	  6529:                 moveq  #$00000002,d6
                            	  6530: SHIFTS2_LOOP5:
01:00003B2E EDA8            	  6531:                 lsl.l d6,d0
01:00003B30 6100FF76        	  6532:                 bsr SHIFTS2_FLAGS
01:00003B34 51CEFFF8        	  6533:                 dbf d6,SHIFTS2_LOOP5
01:00003B38 0C80000C7F88    	  6534:                 cmpi.l #$000C7F88,d0
01:00003B3E 66FE            	  6535:                 bne.s *
01:00003B40 4A85            	  6536:                 cmpi.l #$00000000,d5
01:00003B42 66FE            	  6537:                 bne.s *
                            	  6538: 
                            	  6539: *        LONG RIGHT
01:00003B44 203C80018FF1    	  6540:                 move.l #$80018FF1,d0
01:00003B4A 7C02            	  6541:                 moveq  #$00000002,d6
                            	  6542: SHIFTS2_LOOP6:
01:00003B4C ECA8            	  6543:                 lsr.l d6,d0
01:00003B4E 6100FF58        	  6544:                 bsr SHIFTS2_FLAGS
01:00003B52 51CEFFF8        	  6545:                 dbf d6,SHIFTS2_LOOP6
01:00003B56 0C80100031FE    	  6546:                 cmpi.l #$100031FE,d0
01:00003B5C 66FE            	  6547:                 bne.s *
01:00003B5E 4A85            	  6548:                 cmpi.l #$00000000,d5
01:00003B60 66FE            	  6549:                 bne.s *
                            	  6550: 
                            	  6551: 
                            	  6552: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6553: 
01:00003B62 203C80018FF1    	  6554:                 move.l #$80018FF1,d0
01:00003B68 7A00            	  6555:                 moveq  #$00000000,d5
                            	  6556: 
                            	  6557: *        BYTE LEFT
01:00003B6A E308            	  6558:                 lsl.b #1,d0
01:00003B6C 6100FF3A        	  6559:                 bsr SHIFTS2_FLAGS
01:00003B70 E508            	  6560:                 lsl.b #2,d0
01:00003B72 6100FF34        	  6561:                 bsr SHIFTS2_FLAGS
01:00003B76 E308            	  6562:                 lsl.b #1,d0
01:00003B78 6100FF2E        	  6563:                 bsr SHIFTS2_FLAGS
01:00003B7C E708            	  6564:                 lsl.b #3,d0
01:00003B7E 6100FF28        	  6565:                 bsr SHIFTS2_FLAGS
01:00003B82 0C8080018F80    	  6566:                 cmpi.l #$80018F80,d0
01:00003B88 66FE            	  6567:                 bne.s *
01:00003B8A 0C850000001B    	  6568:                 cmpi.l #$0000001B,d5
01:00003B90 66FE            	  6569:                 bne.s *
                            	  6570: 
                            	  6571: *        BYTE RIGHT
01:00003B92 E208            	  6572:                 lsr.b #1,d0
01:00003B94 6100FF12        	  6573:                 bsr SHIFTS2_FLAGS
01:00003B98 E408            	  6574:                 lsr.b #2,d0
01:00003B9A 6100FF0C        	  6575:                 bsr SHIFTS2_FLAGS
01:00003B9E E608            	  6576:                 lsr.b #3,d0
01:00003BA0 6100FF06        	  6577:                 bsr SHIFTS2_FLAGS
01:00003BA4 E208            	  6578:                 lsr.b #1,d0
01:00003BA6 6100FF00        	  6579:                 bsr SHIFTS2_FLAGS
01:00003BAA 0C8080018F01    	  6580:                 cmpi.l #$80018F01,d0
01:00003BB0 66FE            	  6581:                 bne.s *
01:00003BB2 0C850000001B    	  6582:                 cmpi.l #$0000001B,d5
01:00003BB8 66FE            	  6583:                 bne.s *
                            	  6584: 
                            	  6585: *        WORD LEFT
01:00003BBA E348            	  6586:                 lsl.w #1,d0
01:00003BBC 6100FEEA        	  6587:                 bsr SHIFTS2_FLAGS
01:00003BC0 E548            	  6588:                 lsl.w #2,d0
01:00003BC2 6100FEE4        	  6589:                 bsr SHIFTS2_FLAGS
01:00003BC6 E748            	  6590:                 lsl.w #3,d0
01:00003BC8 6100FEDE        	  6591:                 bsr SHIFTS2_FLAGS
01:00003BCC EB48            	  6592:                 lsl.w #5,d0
01:00003BCE 6100FED8        	  6593:                 bsr SHIFTS2_FLAGS
01:00003BD2 0C8080010800    	  6594:                 cmpi.l #$80010800,d0
01:00003BD8 66FE            	  6595:                 bne.s *
01:00003BDA 0C8500000025    	  6596:                 cmpi.l #$00000025,d5
01:00003BE0 66FE            	  6597:                 bne.s *
                            	  6598: 
                            	  6599: *        WORD RIGHT
01:00003BE2 EA48            	  6600:                 lsr.w #5,d0
01:00003BE4 6100FEC2        	  6601:                 bsr SHIFTS2_FLAGS
01:00003BE8 E248            	  6602:                 lsr.w #1,d0
01:00003BEA 6100FEBC        	  6603:                 bsr SHIFTS2_FLAGS
01:00003BEE E448            	  6604:                 lsr.w #2,d0
01:00003BF0 6100FEB6        	  6605:                 bsr SHIFTS2_FLAGS
01:00003BF4 E848            	  6606:                 lsr.w #4,d0
01:00003BF6 6100FEB0        	  6607:                 bsr SHIFTS2_FLAGS
01:00003BFA 0C8080010000    	  6608:                 cmpi.l #$80010000,d0
01:00003C00 66FE            	  6609:                 bne.s *
01:00003C02 0C850000002A    	  6610:                 cmpi.l #$0000002A,d5
01:00003C08 66FE            	  6611:                 bne.s *
                            	  6612: 
                            	  6613: *        LONG LEFT
01:00003C0A 203C80018FF1    	  6614:                 move.l #$80018FF1,d0
01:00003C10 E388            	  6615:                 lsl.l #1,d0
01:00003C12 6100FE94        	  6616:                 bsr SHIFTS2_FLAGS
01:00003C16 E588            	  6617:                 lsl.l #2,d0
01:00003C18 6100FE8E        	  6618:                 bsr SHIFTS2_FLAGS
01:00003C1C EF88            	  6619:                 lsl.l #7,d0
01:00003C1E 6100FE88        	  6620:                 bsr SHIFTS2_FLAGS
01:00003C22 E988            	  6621:                 lsl.l #4,d0
01:00003C24 6100FE82        	  6622:                 bsr SHIFTS2_FLAGS
01:00003C28 0C8063FC4000    	  6623:                 cmpi.l #$63FC4000,d0
01:00003C2E 66FE            	  6624:                 bne.s *
01:00003C30 0C850000002B    	  6625:                 cmpi.l #$0000002B,d5
01:00003C36 66FE            	  6626:                 bne.s *
                            	  6627: 
                            	  6628: *        LONG RIGHT
01:00003C38 203C80018FF1    	  6629:                 move.l #$80018FF1,d0
01:00003C3E E288            	  6630:                 lsr.l #1,d0
01:00003C40 6100FE66        	  6631:                 bsr SHIFTS2_FLAGS
01:00003C44 EA88            	  6632:                 lsr.l #5,d0
01:00003C46 6100FE60        	  6633:                 bsr SHIFTS2_FLAGS
01:00003C4A EE88            	  6634:                 lsr.l #7,d0
01:00003C4C 6100FE5A        	  6635:                 bsr SHIFTS2_FLAGS
01:00003C50 E088            	  6636:                 lsr.l #8,d0
01:00003C52 6100FE54        	  6637:                 bsr SHIFTS2_FLAGS
01:00003C56 0C8000000400    	  6638:                 cmpi.l #$00000400,d0
01:00003C5C 66FE            	  6639:                 bne.s *
01:00003C5E 0C850000002D    	  6640:                 cmpi.l #$0000002D,d5
01:00003C64 66FE            	  6641:                 bne.s *
                            	  6642: 
                            	  6643: 
                            	  6644: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6645: 
01:00003C66 7A00            	  6646:                 moveq  #$00000000,d5
01:00003C68 307C0100        	  6647:                 move.l #$00000100,a0
01:00003C6C 30BC8FF1        	  6648:                 move.w #$8FF1,(a0)
                            	  6649: 
                            	  6650: *        WORD LEFT
01:00003C70 E3D0            	  6651:                 lsl  (a0)
01:00003C72 6100FE34        	  6652:                 bsr SHIFTS2_FLAGS
01:00003C76 E3D0            	  6653:                 lsl  (a0)
01:00003C78 6100FE2E        	  6654:                 bsr SHIFTS2_FLAGS
01:00003C7C E3D0            	  6655:                 lsl  (a0)
01:00003C7E 6100FE28        	  6656:                 bsr SHIFTS2_FLAGS
01:00003C82 E3D0            	  6657:                 lsl  (a0)
01:00003C84 6100FE22        	  6658:                 bsr SHIFTS2_FLAGS
01:00003C88 3010            	  6659:                 move.w (a0),d0
01:00003C8A 0C800000FF10    	  6660:                 cmpi.l #$0000FF10,d0
01:00003C90 66FE            	  6661:                 bne.s *
01:00003C92 0C8500000009    	  6662:                 cmpi.l #$00000009,d5
01:00003C98 66FE            	  6663:                 bne.s *
                            	  6664: 
                            	  6665: *        WORD RIGHT
01:00003C9A E2D0            	  6666:                 lsr (a0)
01:00003C9C 6100FE0A        	  6667:                 bsr SHIFTS2_FLAGS
01:00003CA0 E2D0            	  6668:                 lsr (a0)
01:00003CA2 6100FE04        	  6669:                 bsr SHIFTS2_FLAGS
01:00003CA6 E2D0            	  6670:                 lsr (a0)
01:00003CA8 6100FDFE        	  6671:                 bsr SHIFTS2_FLAGS
01:00003CAC E2D0            	  6672:                 lsr (a0)
01:00003CAE 6100FDF8        	  6673:                 bsr SHIFTS2_FLAGS
01:00003CB2 E2D0            	  6674:                 lsr (a0)
01:00003CB4 6100FDF2        	  6675:                 bsr SHIFTS2_FLAGS
01:00003CB8 E2D0            	  6676:                 lsr (a0)
01:00003CBA 6100FDEC        	  6677:                 bsr SHIFTS2_FLAGS
01:00003CBE 3010            	  6678:                 move.w (a0),d0
01:00003CC0 0C80000003FC    	  6679:                 cmpi.l #$000003FC,d0
01:00003CC6 66FE            	  6680:                 bne.s *
01:00003CC8 0C850000000A    	  6681:                 cmpi.l #$0000000A,d5
01:00003CCE 66FE            	  6682:                 bne.s *
                            	  6683: 
01:00003CD0 4E75            	  6684:                 rts
                            	  6685: 
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ;-----------------------------------------------------------
                            	  6688: ; OPCODE : BSR / RTS
                            	  6689: ;-----------------------------------------------------------
                            	  6690: ;-----------------------------------------------------------
                            	  6691: 
                            	  6692: ;t3_bsr:
                            	  6693: ;	moveq	#3,d3
                            	  6694: ;	rts
                            	  6695: 
                            	  6696: ;t1_bsr:
                            	  6697: ;	moveq	#1,d1
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;op_bsr:
                            	  6701: ;	bsr			t1_bsr
                            	  6702: ;	bsr			t2_bsr
                            	  6703: ;	bsr.w		t3_bsr
                            	  6704: ;	bsr.w		t4_bsr
                            	  6705: ;	cmpi.l	#1,d1
                            	  6706: ;	bne			*
                            	  6707: ;	cmpi.l	#2,d2
                            	  6708: ;	bne			*
                            	  6709: ;	cmpi.l	#3,d3
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#4,d4
                            	  6712: ;	bne			*
                            	  6713: ;	rts
                            	  6714: 
                            	  6715: ;t2_bsr:
                            	  6716: ;	moveq	#2,d2
                            	  6717: ;	rts
                            	  6718: 	
                            	  6719: ;t4_bsr:
                            	  6720: ;	moveq	#4,d4
                            	  6721: ;	rts
                            	  6722: 

Source: "boot.asm"
                            	   402: 
                            	   403: ; -----------------------------------------------------------------------------
                            	   404: ; Gets the screen color in d0 and d1.
                            	   405: ; -----------------------------------------------------------------------------
                            	   406: 
                            	   407: get_screen_color:
01:00003CD2 203900040084    	   408: 	move.l	fgColor,d0			; get foreground color
01:00003CD8 EB80            	   409: 	asl.l		#5,d0						; shift into position
01:00003CDA 008040000000    	   410: 	ori.l		#$40000000,d0		; set priority
01:00003CE0 223900040088    	   411: 	move.l	bkColor,d1
01:00003CE6 E089            	   412: 	lsr.l		#8,d1
01:00003CE8 E089            	   413: 	lsr.l		#8,d1
01:00003CEA 02810000001F    	   414: 	andi.l	#31,d1					; mask off extra bits
01:00003CF0 8081            	   415: 	or.l		d1,d0						; set background color bits in upper long word
01:00003CF2 223900040088    	   416: 	move.l	bkColor,d1			; get background color
01:00003CF8 E181            	   417: 	asl.l		#8,d1						; shift into position for display ram
01:00003CFA E181            	   418: 	asl.l		#8,d1
01:00003CFC 4E75            	   419: 	rts
                            	   420: 
                            	   421: ; -----------------------------------------------------------------------------
                            	   422: ; -----------------------------------------------------------------------------
                            	   423: 
                            	   424: get_screen_address:
01:00003CFE 207900040004    	   425: 	move.l	TextScr,a0
01:00003D04 4E75            	   426: 	rts
                            	   427: 	
                            	   428: ; -----------------------------------------------------------------------------
                            	   429: ; -----------------------------------------------------------------------------
                            	   430: 
                            	   431: clear_screen:
01:00003D06 48E7E080        	   432: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003D0A 61F2            	   433: 	bsr			get_screen_address	; a0 = pointer to screen area
01:00003D0C 10390004008C    	   434: 	move.b	TextRows,d0					; d0 = rows
01:00003D12 14390004008D    	   435: 	move.b	TextCols,d2					; d2 = cols
01:00003D18 4880            	   436: 	ext.w		d0									; convert to word
01:00003D1A 4882            	   437: 	ext.w		d2									; convert to word
01:00003D1C C4C0            	   438: 	mulu		d0,d2								; d2 = number of character cells to clear
01:00003D1E 61B2            	   439: 	bsr			get_screen_color		; get the color bits
01:00003D20 00410020        	   440: 	ori.w		#32,d1							; load space character
01:00003D24 E159            	   441: 	rol.w		#8,d1								; swap endian, text controller expects little endian
01:00003D26 4841            	   442: 	swap		d1
01:00003D28 E159            	   443: 	rol.w		#8,d1
01:00003D2A E158            	   444: 	rol.w		#8,d0								; swap endian
01:00003D2C 4840            	   445: 	swap		d0
01:00003D2E E158            	   446: 	rol.w		#8,d0
                            	   447: loop3:
01:00003D30 20C1            	   448: 	move.l	d1,(a0)+						; copy char plus bkcolor to cell
01:00003D32 4E71            	   449: 	nop	
01:00003D34 4E71            	   450: 	nop
01:00003D36 4E71            	   451: 	nop	
01:00003D38 4E71            	   452: 	nop
01:00003D3A 4E71            	   453: 	nop	
01:00003D3C 4E71            	   454: 	nop
01:00003D3E 4E71            	   455: 	nop	
01:00003D40 4E71            	   456: 	nop
01:00003D42 20C0            	   457: 	move.l	d0,(a0)+					; copy fgcolor to cell
01:00003D44 4E71            	   458: 	nop
01:00003D46 4E71            	   459: 	nop
01:00003D48 4E71            	   460: 	nop	
01:00003D4A 4E71            	   461: 	nop
01:00003D4C 4E71            	   462: 	nop	
01:00003D4E 4E71            	   463: 	nop
01:00003D50 4E71            	   464: 	nop	
01:00003D52 4E71            	   465: 	nop
01:00003D54 51CAFFDA        	   466: 	dbra		d2,loop3
01:00003D58 4CDF0107        	   467: 	movem.l	(a7)+,d0/d1/d2/a0
01:00003D5C 4E75            	   468: 	rts
                            	   469: 
                            	   470: CRLF:
01:00003D5E 2F01            	   471: 	move.l	d1,-(a7)
01:00003D60 123C000D        	   472: 	move.b	#13,d1
01:00003D64 6142            	   473: 	bsr			DisplayChar
01:00003D66 123C000A        	   474: 	move.b	#10,d1
01:00003D6A 613C            	   475: 	bsr			DisplayChar
01:00003D6C 221F            	   476: 	move.l	(a7)+,d1
01:00003D6E 4E75            	   477: 	rts
                            	   478: 
                            	   479: ;------------------------------------------------------------------------------
                            	   480: ;------------------------------------------------------------------------------
                            	   481: 
                            	   482: UpdateTextPos:
01:00003D70 103900040000    	   483: 	move.b	CursorRow,d0		; compute screen location
01:00003D76 0240007F        	   484: 	andi.w	#$7f,d0
01:00003D7A 14390004008D    	   485: 	move.b	TextCols,d2
01:00003D80 4882            	   486: 	ext.w		d2
01:00003D82 C0C2            	   487: 	mulu.w	d2,d0
01:00003D84 2600            	   488: 	move.l	d0,d3
01:00003D86 143900040001    	   489: 	move.b	CursorCol,d2
01:00003D8C 024200FF        	   490: 	andi.w	#$ff,d2
01:00003D90 D042            	   491: 	add.w		d2,d0
01:00003D92 33C000040002    	   492: 	move.w	d0,TextPos			; save cursor pos
01:00003D98 4E75            	   493: 	rts
                            	   494: 
                            	   495: ;------------------------------------------------------------------------------
                            	   496: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   497: ; Destroys d0,d2,a0
                            	   498: ;------------------------------------------------------------------------------
                            	   499: 
                            	   500: CalcScreenLoc:
01:00003D9A 61D4            	   501: 	bsr			UpdateTextPos
01:00003D9C 48C0            	   502: 	ext.l		d0								; make it into a long
01:00003D9E E780            	   503: 	asl.l		#3,d0							; 8 bytes per char
01:00003DA0 6100FF5C        	   504: 	bsr			get_screen_address
01:00003DA4 D1C0            	   505: 	add.l		d0,a0							; a0 = screen location
01:00003DA6 4E75            	   506: 	rts
                            	   507: 
                            	   508: ;------------------------------------------------------------------------------
                            	   509: ; Display a character on the screen
                            	   510: ; d1.b = char to display
                            	   511: ;------------------------------------------------------------------------------
                            	   512: 
                            	   513: DisplayChar:
01:00003DA8 48E77000        	   514: 	movem.l	d1/d2/d3,-(a7)
01:00003DAC 4E7A2FE0        	   515: 	movec		coreno,d2
01:00003DB0 0C020002        	   516: 	cmpi.b	#2,d2
01:00003DB4 4DD6            	   517: 	bne.s		.0001
                            	   518: ;	bsr			SerialPutChar
                            	   519: .0001:
01:00003DB6 0281000000FF    	   520: 	andi.l	#$ff,d1				; zero out upper bytes of d1
01:00003DBC 0C01000D        	   521: 	cmpi.b	#13,d1				; carriage return ?
01:00003DC0 6610            	   522: 	bne.s		dccr
01:00003DC2 423900040001    	   523: 	clr.b		CursorCol			; just set cursor column to zero on a CR
                            	   524: dcx14:
01:00003DC8 61000290        	   525: 	bsr			SyncCursor		; set position in text controller
                            	   526: dcx7:
01:00003DCC 4CDF000E        	   527: 	movem.l	(a7)+,d1/d2/d3
01:00003DD0 4E75            	   528: 	rts
                            	   529: dccr:
01:00003DD2 0C010091        	   530: 	cmpi.b	#$91,d1			; cursor right ?
01:00003DD6 6618            	   531: 	bne.s   dcx6
01:00003DD8 14390004008D    	   532: 	move.b	TextCols,d2
01:00003DDE 5302            	   533: 	sub.b		#1,d2
01:00003DE0 943900040001    	   534: 	sub.b		CursorCol,d2
01:00003DE6 67E4            	   535: 	beq.s		dcx7
01:00003DE8 523900040001    	   536: 	addi.b	#1,CursorCol
01:00003DEE 60D8            	   537: 	bra.s		dcx14
                            	   538: dcx6:
01:00003DF0 0C010090        	   539: 	cmpi.b	#$90,d1			; cursor up ?
01:00003DF4 6610            	   540: 	bne.s		dcx8
01:00003DF6 4A3900040000    	   541: 	cmpi.b	#0,CursorRow
01:00003DFC 67CE            	   542: 	beq.s		dcx7
01:00003DFE 533900040000    	   543: 	subi.b	#1,CursorRow
01:00003E04 60C2            	   544: 	bra.s		dcx14
                            	   545: dcx8:
01:00003E06 0C010093        	   546: 	cmpi.b	#$93,d1			; cursor left?
01:00003E0A 6610            	   547: 	bne.s		dcx9
01:00003E0C 4A3900040001    	   548: 	cmpi.b	#0,CursorCol
01:00003E12 67B8            	   549: 	beq.s		dcx7
01:00003E14 533900040001    	   550: 	subi.b	#1,CursorCol
01:00003E1A 60AC            	   551: 	bra.s		dcx14
                            	   552: dcx9:
01:00003E1C 0C010092        	   553: 	cmpi.b	#$92,d1			; cursor down ?
01:00003E20 6618            	   554: 	bne.s		dcx10
01:00003E22 14390004008C    	   555: 	move.b	TextRows,d2
01:00003E28 5302            	   556: 	sub.b		#1,d2
01:00003E2A B43900040000    	   557: 	cmp.b		CursorRow,d2
01:00003E30 679A            	   558: 	beq.s		dcx7
01:00003E32 523900040000    	   559: 	addi.b	#1,CursorRow
01:00003E38 608E            	   560: 	bra.s		dcx14
                            	   561: dcx10:
01:00003E3A 0C010094        	   562: 	cmpi.b	#$94,d1			; cursor home ?
01:00003E3E 661C            	   563: 	bne.s		dcx11
01:00003E40 4A3900040001    	   564: 	cmpi.b	#0,CursorCol
01:00003E46 670A            	   565: 	beq.s		dcx12
01:00003E48 423900040001    	   566: 	clr.b		CursorCol
01:00003E4E 6000FF78        	   567: 	bra			dcx14
                            	   568: dcx12:
01:00003E52 423900040000    	   569: 	clr.b		CursorRow
01:00003E58 6000FF6E        	   570: 	bra			dcx14
                            	   571: dcx11:
01:00003E5C 48E7E080        	   572: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003E60 0C010099        	   573: 	cmpi.b	#$99,d1			; delete ?
01:00003E64 675C            	   574: 	beq.s		doDelete
01:00003E66 0C010008        	   575: 	cmpi.b	#CTRLH,d1			; backspace ?
01:00003E6A 6748            	   576: 	beq.s   doBackspace
01:00003E6C 0C010018        	   577: 	cmpi.b	#CTRLX,d1			; delete line ?
01:00003E70 6700008C        	   578: 	beq			doCtrlX
01:00003E74 0C01000A        	   579: 	cmpi.b	#10,d1		; linefeed ?
01:00003E78 6728            	   580: 	beq.s		dclf
                            	   581: 
                            	   582: 	; regular char
01:00003E7A 6100FF1E        	   583: 	bsr			CalcScreenLoc	; a0 = screen location
01:00003E7E 2401            	   584: 	move.l	d1,d2					; d2 = char
01:00003E80 6100FE50        	   585: 	bsr			get_screen_color	; d0,d1 = color
01:00003E84 8282            	   586: 	or.l		d2,d1					; d1 = char + color
01:00003E86 E159            	   587: 	rol.w		#8,d1					; text controller expects little endian data
01:00003E88 4841            	   588: 	swap		d1
01:00003E8A E159            	   589: 	rol.w		#8,d1
01:00003E8C 2081            	   590: 	move.l	d1,(a0)
01:00003E8E E158            	   591: 	rol.w		#8,d0					; swap bytes
01:00003E90 4840            	   592: 	swap		d0						; swap halfs
01:00003E92 E158            	   593: 	rol.w		#8,d0					; swap remaining bytes
01:00003E94 21400004        	   594: 	move.l	d0,4(a0)
01:00003E98 61000088        	   595: 	bsr			IncCursorPos
01:00003E9C 610001BC        	   596: 	bsr			SyncCursor
01:00003EA0 6008            	   597: 	bra			dcx4
                            	   598: dclf:
01:00003EA2 6100009E        	   599: 	bsr			IncCursorRow
                            	   600: dcx16:
01:00003EA6 610001B2        	   601: 	bsr			SyncCursor
                            	   602: dcx4:
01:00003EAA 4CDF0107        	   603: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
01:00003EAE 4CDF000E        	   604: 	movem.l	(a7)+,d1/d2/d3
01:00003EB2 4E75            	   605: 	rts
                            	   606: 
                            	   607: 	;---------------------------
                            	   608: 	; CTRL-H: backspace
                            	   609: 	;---------------------------
                            	   610: doBackspace:
01:00003EB4 4A3900040001    	   611: 	cmpi.b	#0,CursorCol		; if already at start of line
01:00003EBA 67EE            	   612: 	beq.s   dcx4						; nothing to do
01:00003EBC 533900040001    	   613: 	subi.b	#1,CursorCol		; decrement column
                            	   614: 
                            	   615: 	;---------------------------
                            	   616: 	; Delete key
                            	   617: 	;---------------------------
                            	   618: doDelete:
01:00003EC2 48E7C080        	   619: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
01:00003EC6 6100FED2        	   620: 	bsr		  CalcScreenLoc		; a0 = screen location
01:00003ECA 103900040001    	   621: 	move.b	CursorCol,d0
                            	   622: .0001:
01:00003ED0 20A80008        	   623: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
01:00003ED4 2168000C0004    	   624: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
01:00003EDA 5088            	   625: 	lea			8(a0),a0
01:00003EDC 5200            	   626: 	addi.b	#1,d0
01:00003EDE B0390004008D    	   627: 	cmp.b		TextCols,d0
01:00003EE4 65EA            	   628: 	blo.s		.0001
01:00003EE6 6100FDEA        	   629: 	bsr			get_screen_color
01:00003EEA 323C0020        	   630: 	move.w	#' ',d1				; terminate line with a space
01:00003EEE E159            	   631: 	rol.w		#8,d1
01:00003EF0 4841            	   632: 	swap		d1
01:00003EF2 E159            	   633: 	rol.w		#8,d1
01:00003EF4 2141FFF8        	   634: 	move.l	d1,-8(a0)
01:00003EF8 4CDF0103        	   635: 	movem.l	(a7)+,d0/d1/a0
01:00003EFC 60A8            	   636: 	bra.s		dcx16				; finished
                            	   637: 
                            	   638: 	;---------------------------
                            	   639: 	; CTRL-X: erase line
                            	   640: 	;---------------------------
                            	   641: doCtrlX:
01:00003EFE 423900040001    	   642: 	clr.b		CursorCol			; Reset cursor to start of line
01:00003F04 10390004008D    	   643: 	move.b	TextCols,d0			; and display TextCols number of spaces
01:00003F0A 4880            	   644: 	ext.w		d0
01:00003F0C 48C0            	   645: 	ext.l		d0
01:00003F0E 123C0020        	   646: 	move.b	#' ',d1				; d1 = space char
                            	   647: .0001:
                            	   648: 	; DisplayChar is called recursively here
                            	   649: 	; It's safe to do because we know it won't recurse again due to the
                            	   650: 	; fact we know the character being displayed is a space char
01:00003F12 6100FE94        	   651: 	bsr		DisplayChar			
01:00003F16 5340            	   652: 	subq	#1,d0
01:00003F18 66F8            	   653: 	bne.s	.0001
01:00003F1A 423900040001    	   654: 	clr.b	CursorCol			; now really go back to start of line
01:00003F20 6084            	   655: 	bra.s	dcx16				; we're done
                            	   656: 
                            	   657: ;------------------------------------------------------------------------------
                            	   658: ; Increment the cursor position, scroll the screen if needed.
                            	   659: ;------------------------------------------------------------------------------
                            	   660: 
                            	   661: IncCursorPos:
01:00003F22 527900040002    	   662: 	addi.w	#1,TextCurpos
01:00003F28 523900040001    	   663: 	addi.b	#1,CursorCol
01:00003F2E 10390004008D    	   664: 	move.b	TextCols,d0
01:00003F34 B03900040001    	   665: 	cmp.b		CursorCol,d0
01:00003F3A 6438            	   666: 	bhs.s		icc1
01:00003F3C 423900040001    	   667: 	clr.b		CursorCol
                            	   668: IncCursorRow:
01:00003F42 523900040000    	   669: 	addi.b	#1,CursorRow
01:00003F48 10390004008C    	   670: 	move.b	TextRows,d0
01:00003F4E B03900040000    	   671: 	cmp.b		CursorRow,d0
01:00003F54 621E            	   672: 	bhi.s		icc1
01:00003F56 10390004008C    	   673: 	move.b	TextRows,d0
01:00003F5C 13C000040000    	   674: 	move.b	d0,CursorRow		; in case CursorRow is way over
01:00003F62 533900040000    	   675: 	subi.b	#1,CursorRow
01:00003F68 4880            	   676: 	ext.w		d0
01:00003F6A D040            	   677: 	asl.w		#1,d0
01:00003F6C 917900040002    	   678: 	sub.w		d0,TextCurpos
01:00003F72 6102            	   679: 	bsr			ScrollUp
                            	   680: icc1:
01:00003F74 4E75            	   681: 	rts
                            	   682: 
                            	   683: ;------------------------------------------------------------------------------
                            	   684: ; Scroll screen up.
                            	   685: ;------------------------------------------------------------------------------
                            	   686: 
                            	   687: ScrollUp:
01:00003F76 48E7C084        	   688: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
01:00003F7A 6100FD82        	   689: 	bsr			get_screen_address
01:00003F7E 2A48            	   690: 	move.l	a0,a5								; a5 = pointer to text screen
                            	   691: .0003:								
01:00003F80 10390004008D    	   692: 	move.b	TextCols,d0					; d0 = columns
01:00003F86 12390004008C    	   693: 	move.b	TextRows,d1					; d1 = rows
01:00003F8C 4880            	   694: 	ext.w		d0									; make cols into a word value
01:00003F8E 4881            	   695: 	ext.w		d1									; make rows into a word value
01:00003F90 E740            	   696: 	asl.w		#3,d0								; make into cell index
01:00003F92 41F50000        	   697: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
01:00003F96 E648            	   698: 	lsr.w		#3,d0								; get back d0
01:00003F98 5341            	   699: 	subq		#1,d1								; number of rows-1
01:00003F9A C0C1            	   700: 	mulu		d1,d0								; d0 = count of characters to move
                            	   701: .0001:
01:00003F9C 2AD8            	   702: 	move.l	(a0)+,(a5)+					; each char is 64 bits
01:00003F9E 4E71            	   703: 	nop
01:00003FA0 4E71            	   704: 	nop
01:00003FA2 2AD8            	   705: 	move.l	(a0)+,(a5)+	
01:00003FA4 4E71            	   706: 	nop
01:00003FA6 4E71            	   707: 	nop
01:00003FA8 51C8FFF2        	   708: 	dbra		d0,.0001
01:00003FAC 4CDF2103        	   709: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   710: 	; Fall through into blanking out last line
                            	   711: 
                            	   712: ;------------------------------------------------------------------------------
                            	   713: ; Blank out the last line on the screen.
                            	   714: ;------------------------------------------------------------------------------
                            	   715: 
                            	   716: BlankLastLine:
01:00003FB0 48E7E080        	   717: 	movem.l	d0/d1/d2/a0,-(a7)
01:00003FB4 6100FD48        	   718: 	bsr			get_screen_address
01:00003FB8 10390004008C    	   719: 	move.b	TextRows,d0					; d0 = columns
01:00003FBE 12390004008D    	   720: 	move.b	TextCols,d1					; d1 = rows
01:00003FC4 4880            	   721: 	ext.w		d0
01:00003FC6 4881            	   722: 	ext.w		d1
01:00003FC8 5341            	   723: 	subq		#1,d1								; last row = #rows-1
01:00003FCA C0C1            	   724: 	mulu		d1,d0								; d0 = index of last line
01:00003FCC E740            	   725: 	asl.w		#3,d0								; *8 bytes per char
01:00003FCE 41F00000        	   726: 	lea			(a0,d0.w),a0				; point a0 to last row
01:00003FD2 14390004008D    	   727: 	move.b	TextCols,d2					; number of text cells to clear
01:00003FD8 4882            	   728: 	ext.w		d2
01:00003FDA 5342            	   729: 	subi.w	#1,d2								; count must be one less than desired
01:00003FDC 6100FCF4        	   730: 	bsr			get_screen_color		; d0,d1 = screen color
01:00003FE0 323C0020        	   731: 	move.w	#32,d1							; set the character for display in low 16 bits
01:00003FE4 E159            	   732: 	rol.w		#8,d1								; reverse the byte order
01:00003FE6 4841            	   733: 	swap		d1
01:00003FE8 E159            	   734: 	rol.w		#8,d1
01:00003FEA E158            	   735: 	rol.w		#8,d0
01:00003FEC 4840            	   736: 	swap		d0
01:00003FEE E158            	   737: 	rol.w		#8,d0
                            	   738: .0001:
01:00003FF0 20C0            	   739: 	move.l	d0,(a0)+
01:00003FF2 4E71            	   740: 	nop
01:00003FF4 4E71            	   741: 	nop
01:00003FF6 20C1            	   742: 	move.l	d1,(a0)+
01:00003FF8 4E71            	   743: 	nop
01:00003FFA 4E71            	   744: 	nop
01:00003FFC 51CAFFF2        	   745: 	dbra		d2,.0001
01:00004000 4CDF0107        	   746: 	movem.l	(a7)+,d0/d1/d2/a0
01:00004004 4E75            	   747: 	rts
                            	   748: 
                            	   749: ;------------------------------------------------------------------------------
                            	   750: ; Display a string on the screen.
                            	   751: ;------------------------------------------------------------------------------
                            	   752: 
                            	   753: DisplayString:
01:00004006 48E7C040        	   754: 	movem.l	d0/d1/a1,-(a7)
                            	   755: dspj1:
01:0000400A 7200            	   756: 	clr.l		d1						; clear upper bits of d1
01:0000400C 1219            	   757: 	move.b	(a1)+,d1			; move string char into d1
01:0000400E 6706            	   758: 	beq.s		dsret					; is it end of string ?
01:00004010 6100FD96        	   759: 	bsr			DisplayChar		; display character
01:00004014 60F4            	   760: 	bra.s		dspj1					; go back for next character
                            	   761: dsret:
01:00004016 4CDF0203        	   762: 	movem.l	(a7)+,d0/d1/a1
01:0000401A 4E75            	   763: 	rts
                            	   764: 
                            	   765: ;------------------------------------------------------------------------------
                            	   766: ; Display a string on the screen followed by carriage return / linefeed.
                            	   767: ;------------------------------------------------------------------------------
                            	   768: 
                            	   769: DisplayStringCRLF:
01:0000401C 61E8            	   770: 	bsr		DisplayString
01:0000401E 6000FD3E        	   771: 	bra		CRLF
                            	   772: 
                            	   773: ;------------------------------------------------------------------------------
                            	   774: ; Display a string on the screen limited to 255 chars max.
                            	   775: ;------------------------------------------------------------------------------
                            	   776: 
                            	   777: DisplayStringLimited:
01:00004022 48E7E040        	   778: 	movem.l	d0/d1/d2/a1,-(a7)
01:00004026 3401            	   779: 	move.w	d1,d2					; d2 = max count
01:00004028 024200FF        	   780: 	andi.w	#$00FF,d2			; limit to 255 chars
01:0000402C 600A            	   781: 	bra.s		.0003					; enter loop at bottom
                            	   782: .0001:
01:0000402E 7200            	   783: 	clr.l		d1						; clear upper bits of d1
01:00004030 1219            	   784: 	move.b	(a1)+,d1			; move string char into d1
01:00004032 6708            	   785: 	beq.s		.0002					; is it end of string ?
01:00004034 6100FD72        	   786: 	bsr			DisplayChar		; display character
                            	   787: .0003:
01:00004038 51CAFFF4        	   788: 	dbra		d2,.0001			; go back for next character
                            	   789: .0002:
01:0000403C 4CDF0207        	   790: 	movem.l	(a7)+,d0/d1/d2/a1
01:00004040 4E75            	   791: 	rts
                            	   792: 
                            	   793: DisplayStringLimitedCRLF:
01:00004042 61DE            	   794: 	bsr		DisplayStringLimited
01:00004044 6000FD18        	   795: 	bra		CRLF
                            	   796: 	
                            	   797: ;------------------------------------------------------------------------------
                            	   798: ; Set cursor position to top left of screen.
                            	   799: ;
                            	   800: ; Parameters:
                            	   801: ;		<none>
                            	   802: ; Returns:
                            	   803: ;		<none>
                            	   804: ; Registers Affected:
                            	   805: ;		<none>
                            	   806: ;------------------------------------------------------------------------------
                            	   807: 
                            	   808: HomeCursor:
01:00004048 423900040000    	   809: 	clr.b		CursorRow
01:0000404E 423900040001    	   810: 	clr.b		CursorCol
01:00004054 427900040002    	   811: 	clr.w		TextPos
                            	   812: 	; fall through
                            	   813: 
                            	   814: ;------------------------------------------------------------------------------
                            	   815: ; SyncCursor:
                            	   816: ;
                            	   817: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   818: ; the core with the IO focus.
                            	   819: ;
                            	   820: ; Parameters:
                            	   821: ;		<none>
                            	   822: ; Returns:
                            	   823: ;		<none>
                            	   824: ; Registers Affected:
                            	   825: ;		<none>
                            	   826: ;------------------------------------------------------------------------------
                            	   827: 
                            	   828: SyncCursor:
01:0000405A 48E7A000        	   829: 	movem.l	d0/d2,-(a7)
01:0000405E 6100FD10        	   830: 	bsr			UpdateTextPos
01:00004062 4E7A2FE0        	   831: 	movec		coreno,d2
01:00004066 B43900100000    	   832: 	cmp.b		IOFocus,d2
01:0000406C 6610            	   833: 	bne.s		.0001
01:0000406E 5542            	   834: 	subi.w	#2,d2						; factor in location of screen in controller
01:00004070 C4FC0800        	   835: 	mulu		#2048,d2				; 2048 cells per screen
01:00004074 D042            	   836: 	add.w		d2,d0
01:00004076 E158            	   837: 	rol.w		#8,d0						; swap byte order
01:00004078 33C0FD03FF24    	   838: 	move.w	d0,TEXTREG+$24
                            	   839: .0001:	
01:0000407E 4CDF0005        	   840: 	movem.l	(a7)+,d0/d2
01:00004082 4E75            	   841: 	rts
                            	   842: 
                            	   843: ;==============================================================================
                            	   844: ; TRAP #15 handler
                            	   845: ;
                            	   846: ; Parameters:
                            	   847: ;		d0.w = function number to perform
                            	   848: ;==============================================================================
                            	   849: 
                            	   850: TRAP15:
01:00004084 48E78080        	   851: 	movem.l	d0/a0,-(a7)
01:00004088 41FA0012        	   852: 	lea			T15DispatchTable,a0
01:0000408C E580            	   853: 	asl.l		#2,d0
01:0000408E 20700000        	   854: 	move.l	(a0,d0.w),a0
01:00004092 4E90            	   855: 	jsr			(a0)
01:00004094 4CDF0101        	   856: 	movem.l	(a7)+,d0/a0
01:00004098 4E73            	   857: 	rte
                            	   858: 
                            	   859: 		align	2
                            	   860: T15DispatchTable:
01:0000409C 00004042        	   861: 	dc.l	DisplayStringLimitedCRLF
01:000040A0 00004022        	   862: 	dc.l	DisplayStringLimited
01:000040A4 00004172        	   863: 	dc.l	StubRout
01:000040A8 00004172        	   864: 	dc.l	StubRout
01:000040AC 00004172        	   865: 	dc.l	StubRout
01:000040B0 00004256        	   866: 	dc.l	GetKey
01:000040B4 00003DA8        	   867: 	dc.l	DisplayChar
01:000040B8 0000424A        	   868: 	dc.l	CheckForKey
01:000040BC 00004172        	   869: 	dc.l	StubRout
01:000040C0 00004172        	   870: 	dc.l	StubRout
                            	   871: 	; 10
01:000040C4 00004172        	   872: 	dc.l	StubRout
01:000040C8 0000413C        	   873: 	dc.l	Cursor1
01:000040CC 00004242        	   874: 	dc.l	SetKeyboardEcho
01:000040D0 0000401C        	   875: 	dc.l	DisplayStringCRLF
01:000040D4 00004006        	   876: 	dc.l	DisplayString
01:000040D8 00004172        	   877: 	dc.l	StubRout
01:000040DC 00004172        	   878: 	dc.l	StubRout
01:000040E0 00004172        	   879: 	dc.l	StubRout
01:000040E4 00004172        	   880: 	dc.l	StubRout
01:000040E8 00004172        	   881: 	dc.l	StubRout
                            	   882: 	; 20
01:000040EC 00004172        	   883: 	dc.l	StubRout
01:000040F0 00004172        	   884: 	dc.l	StubRout
01:000040F4 00004172        	   885: 	dc.l	StubRout
01:000040F8 00004172        	   886: 	dc.l	StubRout
01:000040FC 00004172        	   887: 	dc.l	StubRout
01:00004100 00004172        	   888: 	dc.l	StubRout
01:00004104 00004172        	   889: 	dc.l	StubRout
01:00004108 00004172        	   890: 	dc.l	StubRout
01:0000410C 00004172        	   891: 	dc.l	StubRout
01:00004110 00004172        	   892: 	dc.l	StubRout
                            	   893: 	; 30
01:00004114 00004172        	   894: 	dc.l	StubRout
01:00004118 00004172        	   895: 	dc.l	StubRout
01:0000411C 00004186        	   896: 	dc.l	rotate_iofocus
01:00004120 00005000        	   897: 	dc.l	SerialPeekCharDirect
01:00004124 00005024        	   898: 	dc.l	SerialPutChar
01:00004128 00004172        	   899: 	dc.l	StubRout
01:0000412C 00004172        	   900: 	dc.l	StubRout
01:00004130 00004172        	   901: 	dc.l	StubRout
01:00004134 00004172        	   902: 	dc.l	StubRout
01:00004138 00004172        	   903: 	dc.l	StubRout
                            	   904: 
                            	   905: ;------------------------------------------------------------------------------
                            	   906: ; Cursor positioning / Clear screen
                            	   907: ; - out of range settings are ignored
                            	   908: ;
                            	   909: ; Parameters:
                            	   910: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	   911: ;	Returns:
                            	   912: ;		none
                            	   913: ;------------------------------------------------------------------------------
                            	   914: 
                            	   915: Cursor1:
01:0000413C 2F01            	   916: 	move.l		d1,-(a7)
01:0000413E 0C41FF00        	   917: 	cmpi.w		#$FF00,d1
01:00004142 6608            	   918: 	bne.s			.0002
01:00004144 6100FBC0        	   919: 	bsr				clear_screen
01:00004148 6000FEFE        	   920: 	bra				HomeCursor
                            	   921: .0002:
01:0000414C B2390004008C    	   922: 	cmp.b			TextRows,d1		; if cursor pos out of range, ignore setting
01:00004152 6406            	   923: 	bhs.s			.0003
01:00004154 13C100040000    	   924: 	move.b		d1,CursorRow
                            	   925: .0003:
01:0000415A E059            	   926: 	ror.w			#8,d1
01:0000415C B2390004008D    	   927: 	cmp.b			TextCols,d1
01:00004162 6406            	   928: 	bhs.s			.0001
01:00004164 13C100040001    	   929: 	move.b		d1,CursorCol
                            	   930: .0001:
01:0000416A 6100FEEE        	   931: 	bsr				SyncCursor		; update hardware cursor
01:0000416E 221F            	   932: 	move.l		(a7)+,d1
01:00004170 4E75            	   933: 	rts
                            	   934: 
                            	   935: ;------------------------------------------------------------------------------
                            	   936: ; Stub routine for unimplemented functionality.
                            	   937: ;------------------------------------------------------------------------------
                            	   938: 
                            	   939: StubRout:
01:00004172 4E75            	   940: 	rts
                            	   941: 
                            	   942: ;------------------------------------------------------------------------------
                            	   943: ; Select a specific IO focus.
                            	   944: ;------------------------------------------------------------------------------
                            	   945: 
                            	   946: select_iofocus:
01:00004174 0C010002        	   947: 	cmpi.b	#2,d1
01:00004178 650A            	   948: 	blo.s		.0001
01:0000417A 0C010009        	   949: 	cmpi.b	#9,d1
01:0000417E 6204            	   950: 	bhi.s		.0001
01:00004180 2001            	   951: 	move.l	d1,d0
01:00004182 6014            	   952: 	bra.s		select_focus1
                            	   953: .0001:
01:00004184 4E75            	   954: 	rts
                            	   955: 
                            	   956: ;------------------------------------------------------------------------------
                            	   957: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	   958: ;
                            	   959: ; Modifies:
                            	   960: ;		d0, IOFocus BIOS variable
                            	   961: ;------------------------------------------------------------------------------
                            	   962: 
                            	   963: rotate_iofocus:
01:00004186 103900100000    	   964: 	move.b	IOFocus,d0				; d0 = focus, we can trash d0
01:0000418C 5200            	   965: 	add.b		#1,d0							; increment the focus
01:0000418E B03C0009        	   966: 	cmp.b		#9,d0							; limit to 2 to 9
01:00004192 6304            	   967: 	bls.s		.0001
01:00004194 103C0002        	   968: 	move.b	#2,d0
                            	   969: .0001:
                            	   970: select_focus1:
01:00004198 13C000100000    	   971: 	move.b	d0,IOFocus				; set IO focus
01:0000419E 5500            	   972: 	subi.b	#2,d0							; screen is 0 to 7, focus is 2 to 9
01:000041A0 4880            	   973: 	ext.w		d0								; make into long value
01:000041A2 C0FC0800        	   974: 	mulu		#2048,d0					; * 2048	cells per screen
01:000041A6 E158            	   975: 	rol.w		#8,d0							; swap byte order
01:000041A8 33C0FD03FF28    	   976: 	move.w	d0,TEXTREG+$28		; update screen address in text controller
01:000041AE 6000FEAA        	   977: 	bra			SyncCursor				; set cursor position
                            	   978: 
                            	   979: ;==============================================================================
                            	   980: ; PLIC - platform level interrupt controller
                            	   981: ;
                            	   982: ; Register layout:
                            	   983: ;   bits 0 to 7  = cause code to issue
                            	   984: ;   bits 8 to 11 = irq level to issue
                            	   985: ;   bit 16 = irq enable
                            	   986: ;   bit 17 = edge sensitivity
                            	   987: ;		bit 24 to 29 target core
                            	   988: ;
                            	   989: ; Note byte order must be reversed for PLIC.
                            	   990: ;==============================================================================
                            	   991: 
                            	   992: init_plic:
01:000041B2 41F9FD090000    	   993: 	lea		PLIC,a0						; a0 points to PLIC
01:000041B8 41E800F4        	   994: 	lea		$80+4*29(a0),a0		; point to timer registers (29)
01:000041BC 20BC00060302    	   995: 	move.l	#$00060302,(a0)	; initialize, core=2,edge sensitive,enabled,irq6
01:000041C2 5888            	   996: 	lea			4(a0),a0				; point to keyboard registers (30)
01:000041C4 20BC00060102    	   997: 	move.l	#$00060102,(a0)	; initialize, core=2,level sensitive,enabled,irq6
01:000041CA 5888            	   998: 	lea			4(a0),a0				; point to nmi button register (31)
01:000041CC 20BC00070302    	   999: 	move.l	#$00070302,(a0)	; initialize, core=2,edge sensitive,enabled,irq7
01:000041D2 4E75            	  1000: 	rts
                            	  1001: 
                            	  1002: ;==============================================================================
                            	  1003: ; Keyboard stuff
                            	  1004: ;
                            	  1005: ; KeyState2_
                            	  1006: ; 876543210
                            	  1007: ; ||||||||+ = shift
                            	  1008: ; |||||||+- = alt
                            	  1009: ; ||||||+-- = control
                            	  1010: ; |||||+--- = numlock
                            	  1011: ; ||||+---- = capslock
                            	  1012: ; |||+----- = scrolllock
                            	  1013: ; ||+------ =
                            	  1014: ; |+------- = 
                            	  1015: ; +-------- = extended
                            	  1016: ;
                            	  1017: ;==============================================================================
                            	  1018: 
                            	  1019: _KeybdInit:
01:000041D4 42390010000F    	  1020: 	clr.b	_KeyState1
01:000041DA 423900100010    	  1021: 	clr.b	_KeyState2
01:000041E0 4E75            	  1022: 	rts
                            	  1023: 
                            	  1024: _KeybdGetStatus:
01:000041E2 7200            	  1025: 	moveq		#0,d1
01:000041E4 1239FD0FFE01    	  1026: 	move.b	KEYBD+1,d1
01:000041EA 4E75            	  1027: 	rts
                            	  1028: 
                            	  1029: ; Get the scancode from the keyboard port
                            	  1030: 
                            	  1031: _KeybdGetScancode:
01:000041EC 7200            	  1032: 	moveq		#0,d1
01:000041EE 1239FD0FFE00    	  1033: 	move.b	KEYBD,d1				* get the scan code
01:000041F4 4239FD0FFE01    	  1034: 	move.b	#0,KEYBD+1			* clear receive register
01:000041FA 4E75            	  1035: 	rts
                            	  1036: 
                            	  1037: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	  1038: ; keyboard in order to wait for a response.
                            	  1039: ;
                            	  1040: KeybdRecvByte:
01:000041FC 2F03            	  1041: 	move.l	d3,-(a7)
01:000041FE 363C0064        	  1042: 	move.w	#100,d3		; wait up to 1s
                            	  1043: .0003:
01:00004202 61DE            	  1044: 	bsr		_KeybdGetStatus	; wait for response from keyboard
01:00004204 4A01            	  1045: 	tst.b	d1
01:00004206 6B0E            	  1046: 	bmi		.0004		; is input buffer full ? yes, branch
01:00004208 6100031C        	  1047: 	bsr		Wait10ms		; wait a bit
01:0000420C 51CBFFF4        	  1048: 	dbra	d3,.0003	; go back and try again
01:00004210 261F            	  1049: 	move.l	(a7)+,d3
01:00004212 72FF            	  1050: 	moveq	#-1,d1			; return -1
01:00004214 4E75            	  1051: 	rts
                            	  1052: .0004:
01:00004216 61D4            	  1053: 	bsr		_KeybdGetScancode
01:00004218 261F            	  1054: 	move.l	(a7)+,d3
01:0000421A 4E75            	  1055: 	rts
                            	  1056: 
                            	  1057: 
                            	  1058: ; Wait until the keyboard transmit is complete
                            	  1059: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	  1060: ;
                            	  1061: KeybdWaitTx:
01:0000421C 48E73000        	  1062: 	movem.l	d2/d3,-(a7)
01:00004220 7664            	  1063: 	moveq	#100,d3		; wait a max of 1s
                            	  1064: .0001:
01:00004222 61BE            	  1065: 	bsr		_KeybdGetStatus
01:00004224 08010006        	  1066: 	btst	#6,d1		; check for transmit complete bit
01:00004228 6610            	  1067: 	bne	    .0002		; branch if bit set
01:0000422A 610002FA        	  1068: 	bsr		Wait10ms		; delay a little bit
01:0000422E 51CBFFF2        	  1069: 	dbra	d3,.0001	; go back and try again
01:00004232 4CDF000C        	  1070: 	movem.l	(a7)+,d2/d3
01:00004236 72FF            	  1071: 	moveq	#-1,d1		; return -1
01:00004238 4E75            	  1072: 	rts
                            	  1073: .0002:
01:0000423A 4CDF000C        	  1074: 	movem.l	(a7)+,d2/d3
01:0000423E 7200            	  1075: 	moveq	#0,d1		; return 0
01:00004240 4E75            	  1076: 	rts
                            	  1077: 
                            	  1078: ;------------------------------------------------------------------------------
                            	  1079: ; d1.b 0=echo off, non-zero = echo on
                            	  1080: ;------------------------------------------------------------------------------
                            	  1081: 
                            	  1082: SetKeyboardEcho:
01:00004242 13C10004000C    	  1083: 	move.b	d1,KeybdEcho
01:00004248 4E75            	  1084: 	rts
                            	  1085: 
                            	  1086: ;------------------------------------------------------------------------------
                            	  1087: ; Get key pending status into d1.b
                            	  1088: ;
                            	  1089: ; Returns:
                            	  1090: ;		d1.b = 1 if a key is available, otherwise zero.
                            	  1091: ;------------------------------------------------------------------------------
                            	  1092: 
                            	  1093: CheckForKey:
01:0000424A 7200            	  1094: 	moveq.l	#0,d1					; clear high order bits
                            	  1095: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	  1096: ;	smi.b		d1						; set true/false
                            	  1097: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
01:0000424C 4A3900100013    	  1098: 	tst.b		_KeybdCnt
01:00004252 56C1            	  1099: 	sne.b		d1
01:00004254 4E75            	  1100: 	rts
                            	  1101: 
                            	  1102: ;------------------------------------------------------------------------------
                            	  1103: ; GetKey
                            	  1104: ; 	Get a character from the keyboard. 
                            	  1105: ;
                            	  1106: ; Modifies:
                            	  1107: ;		d1
                            	  1108: ; Returns:
                            	  1109: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	  1110: ;------------------------------------------------------------------------------
                            	  1111: 
                            	  1112: GetKey:
01:00004256 2F00            	  1113: 	move.l	d0,-(a7)					; push d0
01:00004258 123900100000    	  1114: 	move.b	IOFocus,d1				; Check if the core has the IO focus
01:0000425E 4E7A0FE0        	  1115: 	movec.l	coreno,d0
01:00004262 B200            	  1116: 	cmp.b		d0,d1
01:00004264 6624            	  1117: 	bne.s		.0004							; go return no key available, if not in focus
01:00004266 6138            	  1118: 	bsr			KeybdGetCharNoWait	; get a character
01:00004268 0C0100FF        	  1119: 	cmpi.b	#-1,d1						; was a key available?
01:0000426C 671C            	  1120: 	beq.s		.0004
01:0000426E 4A390004000C    	  1121: 	tst.b		KeybdEcho					; is keyboard echo on ?
01:00004274 6710            	  1122: 	beq.s		.0003							; no echo, just return the key
01:00004276 0C01000D        	  1123: 	cmpi.b	#CR,d1						; convert CR keystroke into CRLF
01:0000427A 6606            	  1124: 	bne.s		.0005
01:0000427C 6100FAE0        	  1125: 	bsr			CRLF
01:00004280 6004            	  1126: 	bra.s		.0003
                            	  1127: .0005:
01:00004282 6100FB24        	  1128: 	bsr			DisplayChar
                            	  1129: .0003:
01:00004286 201F            	  1130: 	move.l	(a7)+,d0					; pop d0
01:00004288 4E75            	  1131: 	rts												; return key
                            	  1132: ; Return -1 indicating no char was available
                            	  1133: .0004:
01:0000428A 201F            	  1134: 	move.l	(a7)+,d0					; pop d0
01:0000428C 72FF            	  1135: 	moveq		#-1,d1						; return no key available
01:0000428E 4E75            	  1136: 	rts
                            	  1137: 
                            	  1138: CheckForCtrlC:
01:00004290 61B8            	  1139: 	bsr			CheckForKey
01:00004292 670A            	  1140: 	beq.s		.0001
01:00004294 611A            	  1141: 	bsr			KeybdGetChar
01:00004296 B23C0003        	  1142: 	cmp.b		#CTRLC,d1
01:0000429A 670005B0        	  1143: 	beq			Monitor
                            	  1144: .0001:
01:0000429E 4E75            	  1145: 	rts
                            	  1146: 
                            	  1147: ;------------------------------------------------------------------------------
                            	  1148: ;------------------------------------------------------------------------------
                            	  1149: 
                            	  1150: KeybdGetCharNoWait:
01:000042A0 42390004000D    	  1151: 	clr.b	KeybdWaitFlag
01:000042A6 6008            	  1152: 	bra		KeybdGetChar
                            	  1153: 
                            	  1154: KeybdGetCharWait:
01:000042A8 13FC00FF0004000D	  1155: 	move.b	#-1,KeybdWaitFlag
                            	  1156: 
                            	  1157: KeybdGetChar:
01:000042B0 48E73080        	  1158: 	movem.l	d2/d3/a0,-(a7)
                            	  1159: .0003:
01:000042B4 7201            	  1160: 	moveq		#1,d1
                            	  1161: ;	bsr			LockSemaphore
01:000042B6 143900100013    	  1162: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
01:000042BC 6738            	  1163: 	beq.s		.0015						;
01:000042BE 143900100011    	  1164: 	move.b	_KeybdHead,d2		; d2 = buffer head
01:000042C4 4882            	  1165: 	ext.w		d2
01:000042C6 41F900100020    	  1166: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
01:000042CC 7200            	  1167: 	clr.l		d1
01:000042CE 12302000        	  1168: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
01:000042D2 5202            	  1169: 	addi.b	#1,d2						; increment keyboard head index
01:000042D4 0202001F        	  1170: 	andi.b	#31,d2					; and wrap around at buffer size
01:000042D8 13C200100011    	  1171: 	move.b	d2,_KeybdHead
01:000042DE 533900100013    	  1172: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
01:000042E4 C342            	  1173: 	exg			d1,d2						; save scancode value in d2
01:000042E6 7201            	  1174: 	moveq		#1,d1
01:000042E8 6100BE50        	  1175: 	bsr			UnlockSemaphore
01:000042EC C541            	  1176: 	exg			d2,d1						; restore scancode value
01:000042EE 6020            	  1177: 	bra			.0001						; go process scan code
                            	  1178: .0014:
01:000042F0 6100FEF0        	  1179: 	bsr		_KeybdGetStatus		; check keyboard status for key available
01:000042F4 6B16            	  1180: 	bmi		.0006							; yes, go process
                            	  1181: .0015:
01:000042F6 7201            	  1182: 	moveq	#1,d1
01:000042F8 6100BE40        	  1183: 	bsr		UnlockSemaphore
01:000042FC 4A390004000D    	  1184: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
01:00004302 6BB0            	  1185: 	bmi		.0003							; yes, branch back
01:00004304 4CDF010C        	  1186: 	movem.l	(a7)+,d2/d3/a0
01:00004308 72FF            	  1187: 	moveq	#-1,d1						; flag no char available
01:0000430A 4E75            	  1188: 	rts
                            	  1189: .0006:
01:0000430C 6100FEDE        	  1190: 	bsr		_KeybdGetScancode
                            	  1191: .0001:
01:00004310 33FC0001FD0FFF00	  1192: 	move.w	#1,leds
01:00004318 B23C00F0        	  1193: 	cmp.b	#SC_KEYUP,d1
01:0000431C 670000C0        	  1194: 	beq		.doKeyup
01:00004320 B23C00E0        	  1195: 	cmp.b	#SC_EXTEND,d1
01:00004324 670000C4        	  1196: 	beq		.doExtend
01:00004328 B23C0014        	  1197: 	cmp.b	#SC_CTRL,d1
01:0000432C 670000C8        	  1198: 	beq		.doCtrl
01:00004330 B23C0012        	  1199: 	cmp.b	#SC_LSHIFT,d1
01:00004334 6700012A        	  1200: 	beq		.doShift
01:00004338 B23C0059        	  1201: 	cmp.b	#SC_RSHIFT,d1
01:0000433C 67000122        	  1202: 	beq		.doShift
01:00004340 B23C0077        	  1203: 	cmp.b	#SC_NUMLOCK,d1
01:00004344 67000142        	  1204: 	beq		.doNumLock
01:00004348 B23C0058        	  1205: 	cmp.b	#SC_CAPSLOCK,d1
01:0000434C 67000148        	  1206: 	beq		.doCapsLock
01:00004350 B23C007E        	  1207: 	cmp.b	#SC_SCROLLLOCK,d1
01:00004354 6700014E        	  1208: 	beq		.doScrollLock
01:00004358 B23C0011        	  1209: 	cmp.b   #SC_ALT,d1
01:0000435C 670000C0        	  1210: 	beq     .doAlt
01:00004360 14390010000F    	  1211: 	move.b	_KeyState1,d2			; check key up/down
01:00004366 42390010000F    	  1212: 	move.b	#0,_KeyState1			; clear keyup status
01:0000436C 4A02            	  1213: 	tst.b	d2
01:0000436E 6600FF44        	  1214: 	bne	    .0003					; ignore key up
01:00004372 B23C000D        	  1215: 	cmp.b   #SC_TAB,d1
01:00004376 670000CE        	  1216: 	beq     .doTab
                            	  1217: .0013:
01:0000437A 143900100010    	  1218: 	move.b	_KeyState2,d2
01:00004380 6A1A            	  1219: 	bpl		.0010					; is it extended code ?
01:00004382 C43C007F        	  1220: 	and.b	#$7F,d2					; clear extended bit
01:00004386 13C200100010    	  1221: 	move.b	d2,_KeyState2
01:0000438C 42390010000F    	  1222: 	move.b	#0,_KeyState1			; clear keyup
01:00004392 41FA0422        	  1223: 	lea		_keybdExtendedCodes,a0
01:00004396 12301000        	  1224: 	move.b	(a0,d1.w),d1
01:0000439A 6034            	  1225: 	bra		.0008
                            	  1226: .0010:
01:0000439C 08020002        	  1227: 	btst	#2,d2					; is it CTRL code ?
01:000043A0 670E            	  1228: 	beq		.0009
01:000043A2 C27C007F        	  1229: 	and.w	#$7F,d1
01:000043A6 41FA038E        	  1230: 	lea		_keybdControlCodes,a0
01:000043AA 12301000        	  1231: 	move.b	(a0,d1.w),d1
01:000043AE 6020            	  1232: 	bra		.0008
                            	  1233: .0009:
01:000043B0 08020000        	  1234: 	btst	#0,d2					; is it shift down ?
01:000043B4 670A            	  1235: 	beq  	.0007
01:000043B6 41FA027E        	  1236: 	lea		_shiftedScanCodes,a0
01:000043BA 12301000        	  1237: 	move.b	(a0,d1.w),d1
01:000043BE 6010            	  1238: 	bra		.0008
                            	  1239: .0007:
01:000043C0 41FA0174        	  1240: 	lea		_unshiftedScanCodes,a0
01:000043C4 12301000        	  1241: 	move.b	(a0,d1.w),d1
01:000043C8 33FC0202FD0FFF00	  1242: 	move.w	#$0202,leds
                            	  1243: .0008:
01:000043D0 33FC0303FD0FFF00	  1244: 	move.w	#$0303,leds
01:000043D8 4CDF010C        	  1245: 	movem.l	(a7)+,d2/d3/a0
01:000043DC 4E75            	  1246: 	rts
                            	  1247: .doKeyup:
01:000043DE 13FC00FF0010000F	  1248: 	move.b	#-1,_KeyState1
01:000043E6 6000FECC        	  1249: 	bra		.0003
                            	  1250: .doExtend:
01:000043EA 0039008000100010	  1251: 	or.b	#$80,_KeyState2
01:000043F2 6000FEC0        	  1252: 	bra		.0003
                            	  1253: .doCtrl:
01:000043F6 12390010000F    	  1254: 	move.b	_KeyState1,d1
01:000043FC 42390010000F    	  1255: 	clr.b	_KeyState1
01:00004402 4A01            	  1256: 	tst.b	d1
01:00004404 6A0C            	  1257: 	bpl.s	.0004
01:00004406 08B9000200100010	  1258: 	bclr	#2,_KeyState2
01:0000440E 6000FEA4        	  1259: 	bra		.0003
                            	  1260: .0004:
01:00004412 08F9000200100010	  1261: 	bset	#2,_KeyState2
01:0000441A 6000FE98        	  1262: 	bra		.0003
                            	  1263: .doAlt:
01:0000441E 12390010000F    	  1264: 	move.b	_KeyState1,d1
01:00004424 42390010000F    	  1265: 	clr.b	_KeyState1
01:0000442A 4A01            	  1266: 	tst.b	d1
01:0000442C 6A0C            	  1267: 	bpl		.0011
01:0000442E 08B9000100100010	  1268: 	bclr	#1,_KeyState2
01:00004436 6000FE7C        	  1269: 	bra		.0003
                            	  1270: .0011:
01:0000443A 08F9000100100010	  1271: 	bset	#1,_KeyState2
01:00004442 6000FE70        	  1272: 	bra		.0003
                            	  1273: .doTab:
01:00004446 2F01            	  1274: 	move.l	d1,-(a7)
01:00004448 123900100010    	  1275:   move.b  _KeyState2,d1
01:0000444E 08010001        	  1276:   btst	#1,d1                 ; is ALT down ?
01:00004452 6706            	  1277:   beq     .0012
                            	  1278: ;    	inc     _iof_switch
01:00004454 221F            	  1279:   move.l	(a7)+,d1
01:00004456 6000FE5C        	  1280:   bra     .0003
                            	  1281: .0012:
01:0000445A 221F            	  1282:   move.l	(a7)+,d1
01:0000445C 6000FF1C        	  1283:   bra     .0013
                            	  1284: .doShift:
01:00004460 12390010000F    	  1285: 	move.b	_KeyState1,d1
01:00004466 42390010000F    	  1286: 	clr.b	_KeyState1
01:0000446C 4A01            	  1287: 	tst.b	d1
01:0000446E 6A0C            	  1288: 	bpl.s	.0005
01:00004470 08B9000000100010	  1289: 	bclr	#0,_KeyState2
01:00004478 6000FE3A        	  1290: 	bra		.0003
                            	  1291: .0005:
01:0000447C 08F9000000100010	  1292: 	bset	#0,_KeyState2
01:00004484 6000FE2E        	  1293: 	bra		.0003
                            	  1294: .doNumLock:
01:00004488 0879000400100010	  1295: 	bchg	#4,_KeyState2
01:00004490 6120            	  1296: 	bsr		KeybdSetLEDStatus
01:00004492 6000FE20        	  1297: 	bra		.0003
                            	  1298: .doCapsLock:
01:00004496 0879000500100010	  1299: 	bchg	#5,_KeyState2
01:0000449E 6112            	  1300: 	bsr		KeybdSetLEDStatus
01:000044A0 6000FE12        	  1301: 	bra		.0003
                            	  1302: .doScrollLock:
01:000044A4 0879000600100010	  1303: 	bchg	#6,_KeyState2
01:000044AC 6104            	  1304: 	bsr		KeybdSetLEDStatus
01:000044AE 6000FE04        	  1305: 	bra		.0003
                            	  1306: 
                            	  1307: KeybdSetLEDStatus:
01:000044B2 48E73000        	  1308: 	movem.l	d2/d3,-(a7)
01:000044B6 42390010000E    	  1309: 	clr.b	KeybdLEDs
01:000044BC 0839000400100010	  1310: 	btst	#4,_KeyState2
01:000044C4 6708            	  1311: 	beq.s	.0002
01:000044C6 13FC00020010000E	  1312: 	move.b	#2,KeybdLEDs
                            	  1313: .0002:
01:000044CE 0839000500100010	  1314: 	btst	#5,_KeyState2
01:000044D6 6708            	  1315: 	beq.s	.0003
01:000044D8 08F900020010000E	  1316: 	bset	#2,KeybdLEDs
                            	  1317: .0003:
01:000044E0 0839000600100010	  1318: 	btst	#6,_KeyState2
01:000044E8 6708            	  1319: 	beq.s	.0004
01:000044EA 08F900000010000E	  1320: 	bset	#0,KeybdLEDs
                            	  1321: .0004:
01:000044F2 123C00ED        	  1322: 	move.b	#$ED,d1
01:000044F6 6126            	  1323: 	bsr		KeybdSendByte
01:000044F8 6100FD22        	  1324: 	bsr		KeybdWaitTx
01:000044FC 6100FCFE        	  1325: 	bsr		KeybdRecvByte
01:00004500 4A01            	  1326: 	tst.b	d1
01:00004502 6B14            	  1327: 	bmi		.0001
01:00004504 B27C00FA        	  1328: 	cmp		#$FA,d1
01:00004508 12390010000E    	  1329: 	move.b	KeybdLEDs,d1
01:0000450E 610E            	  1330: 	bsr		KeybdSendByte
01:00004510 6100FD0A        	  1331: 	bsr		KeybdWaitTx
01:00004514 6100FCE6        	  1332: 	bsr		KeybdRecvByte
                            	  1333: .0001:
01:00004518 4CDF000C        	  1334: 	movem.l	(a7)+,d2/d3
01:0000451C 4E75            	  1335: 	rts
                            	  1336: 
                            	  1337: KeybdSendByte:
01:0000451E 13C1FD0FFE00    	  1338: 	move.b	d1,KEYBD
01:00004524 4E75            	  1339: 	rts
                            	  1340: 	
                            	  1341: Wait10ms:
01:00004526 2F03            	  1342: 	move.l	d3,-(a7)
01:00004528 263C000003E8    	  1343: 	move.l	#1000,d3
                            	  1344: .0001:
01:0000452E 51CBFFFE        	  1345: 	dbra	d3,.0001
01:00004532 261F            	  1346: 	move.l	(a7)+,d3
01:00004534 4E75            	  1347: 	rts
                            	  1348: 
                            	  1349: 
                            	  1350: ;--------------------------------------------------------------------------
                            	  1351: ; PS2 scan codes to ascii conversion tables.
                            	  1352: ;--------------------------------------------------------------------------
                            	  1353: ;
                            	  1354: _unshiftedScanCodes:
01:00004536 2E              	  1355: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
01:00004537 A9
01:00004538 2E
01:00004539 A5
01:0000453A A3
01:0000453B A1
01:0000453C A2
01:0000453D AC
01:0000453E 2E              	  1356: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
01:0000453F AA
01:00004540 A8
01:00004541 A6
01:00004542 A4
01:00004543 09
01:00004544 60
01:00004545 2E
01:00004546 2E              	  1357: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
01:00004547 2E
01:00004548 2E
01:00004549 2E
01:0000454A 2E
01:0000454B 71
01:0000454C 31
01:0000454D 2E
01:0000454E 2E              	  1358: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
01:0000454F 2E
01:00004550 7A
01:00004551 73
01:00004552 61
01:00004553 77
01:00004554 32
01:00004555 2E
01:00004556 2E              	  1359: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
01:00004557 63
01:00004558 78
01:00004559 64
01:0000455A 65
01:0000455B 34
01:0000455C 33
01:0000455D 2E
01:0000455E 2E              	  1360: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
01:0000455F 20
01:00004560 76
01:00004561 66
01:00004562 74
01:00004563 72
01:00004564 35
01:00004565 2E
01:00004566 2E              	  1361: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
01:00004567 6E
01:00004568 62
01:00004569 68
01:0000456A 67
01:0000456B 79
01:0000456C 36
01:0000456D 2E
01:0000456E 2E              	  1362: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
01:0000456F 2E
01:00004570 6D
01:00004571 6A
01:00004572 75
01:00004573 37
01:00004574 38
01:00004575 2E
01:00004576 2E              	  1363: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
01:00004577 2C
01:00004578 6B
01:00004579 69
01:0000457A 6F
01:0000457B 30
01:0000457C 39
01:0000457D 2E
01:0000457E 2E              	  1364: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
01:0000457F 2E
01:00004580 2F
01:00004581 6C
01:00004582 3B
01:00004583 70
01:00004584 2D
01:00004585 2E
01:00004586 2E              	  1365: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
01:00004587 2E
01:00004588 27
01:00004589 2E
01:0000458A 5B
01:0000458B 3D
01:0000458C 2E
01:0000458D 2E
01:0000458E AD              	  1366: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
01:0000458F 2E
01:00004590 0D
01:00004591 5D
01:00004592 2E
01:00004593 5C
01:00004594 2E
01:00004595 2E
01:00004596 2E              	  1367: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004597 2E
01:00004598 2E
01:00004599 2E
01:0000459A 2E
01:0000459B 2E
01:0000459C 08
01:0000459D 2E
01:0000459E 2E              	  1368: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:0000459F 95
01:000045A0 2E
01:000045A1 93
01:000045A2 94
01:000045A3 2E
01:000045A4 2E
01:000045A5 2E
01:000045A6 98              	  1369: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
01:000045A7 7F
01:000045A8 92
01:000045A9 2E
01:000045AA 91
01:000045AB 90
01:000045AC 1B
01:000045AD AF
01:000045AE AB              	  1370: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
01:000045AF 2E
01:000045B0 97
01:000045B1 2E
01:000045B2 2E
01:000045B3 96
01:000045B4 AE
01:000045B5 2E
                            	  1371: 
01:000045B6 2E              	  1372: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
01:000045B7 2E
01:000045B8 2E
01:000045B9 A7
01:000045BA 2E
01:000045BB 2E
01:000045BC 2E
01:000045BD 2E
01:000045BE 2E              	  1373: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045BF 2E
01:000045C0 2E
01:000045C1 2E
01:000045C2 2E
01:000045C3 2E
01:000045C4 2E
01:000045C5 2E
01:000045C6 2E              	  1374: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045C7 2E
01:000045C8 2E
01:000045C9 2E
01:000045CA 2E
01:000045CB 2E
01:000045CC 2E
01:000045CD 2E
01:000045CE 2E              	  1375: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045CF 2E
01:000045D0 2E
01:000045D1 2E
01:000045D2 2E
01:000045D3 2E
01:000045D4 2E
01:000045D5 2E
01:000045D6 2E              	  1376: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045D7 2E
01:000045D8 2E
01:000045D9 2E
01:000045DA 2E
01:000045DB 2E
01:000045DC 2E
01:000045DD 2E
01:000045DE 2E              	  1377: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045DF 2E
01:000045E0 2E
01:000045E1 2E
01:000045E2 2E
01:000045E3 2E
01:000045E4 2E
01:000045E5 2E
01:000045E6 2E              	  1378: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045E7 2E
01:000045E8 2E
01:000045E9 2E
01:000045EA 2E
01:000045EB 2E
01:000045EC 2E
01:000045ED 2E
01:000045EE 2E              	  1379: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045EF 2E
01:000045F0 2E
01:000045F1 2E
01:000045F2 2E
01:000045F3 2E
01:000045F4 2E
01:000045F5 2E
01:000045F6 2E              	  1380: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045F7 2E
01:000045F8 2E
01:000045F9 2E
01:000045FA 2E
01:000045FB 2E
01:000045FC 2E
01:000045FD 2E
01:000045FE 2E              	  1381: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000045FF 2E
01:00004600 2E
01:00004601 2E
01:00004602 2E
01:00004603 2E
01:00004604 2E
01:00004605 2E
01:00004606 2E              	  1382: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004607 2E
01:00004608 2E
01:00004609 2E
01:0000460A 2E
01:0000460B 2E
01:0000460C 2E
01:0000460D 2E
01:0000460E 2E              	  1383: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000460F 2E
01:00004610 2E
01:00004611 2E
01:00004612 2E
01:00004613 2E
01:00004614 2E
01:00004615 2E
01:00004616 2E              	  1384: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004617 2E
01:00004618 2E
01:00004619 2E
01:0000461A 2E
01:0000461B 2E
01:0000461C 2E
01:0000461D 2E
01:0000461E 2E              	  1385: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000461F 2E
01:00004620 2E
01:00004621 2E
01:00004622 2E
01:00004623 2E
01:00004624 2E
01:00004625 2E
01:00004626 2E              	  1386: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004627 2E
01:00004628 2E
01:00004629 2E
01:0000462A 2E
01:0000462B 2E
01:0000462C 2E
01:0000462D 2E
01:0000462E 2E              	  1387: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
01:0000462F 2E
01:00004630 FA
01:00004631 2E
01:00004632 2E
01:00004633 2E
01:00004634 2E
01:00004635 2E
                            	  1388: 
                            	  1389: _shiftedScanCodes:
01:00004636 2E              	  1390: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004637 2E
01:00004638 2E
01:00004639 2E
01:0000463A 2E
01:0000463B 2E
01:0000463C 2E
01:0000463D 2E
01:0000463E 2E              	  1391: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:0000463F 2E
01:00004640 2E
01:00004641 2E
01:00004642 2E
01:00004643 09
01:00004644 7E
01:00004645 2E
01:00004646 2E              	  1392: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
01:00004647 2E
01:00004648 2E
01:00004649 2E
01:0000464A 2E
01:0000464B 51
01:0000464C 21
01:0000464D 2E
01:0000464E 2E              	  1393: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
01:0000464F 2E
01:00004650 5A
01:00004651 53
01:00004652 41
01:00004653 57
01:00004654 40
01:00004655 2E
01:00004656 2E              	  1394: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
01:00004657 43
01:00004658 58
01:00004659 44
01:0000465A 45
01:0000465B 24
01:0000465C 23
01:0000465D 2E
01:0000465E 2E              	  1395: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
01:0000465F 20
01:00004660 56
01:00004661 46
01:00004662 54
01:00004663 52
01:00004664 25
01:00004665 2E
01:00004666 2E              	  1396: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
01:00004667 4E
01:00004668 42
01:00004669 48
01:0000466A 47
01:0000466B 59
01:0000466C 5E
01:0000466D 2E
01:0000466E 2E              	  1397: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
01:0000466F 2E
01:00004670 4D
01:00004671 4A
01:00004672 55
01:00004673 26
01:00004674 2A
01:00004675 2E
01:00004676 2E              	  1398: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
01:00004677 3C
01:00004678 4B
01:00004679 49
01:0000467A 4F
01:0000467B 29
01:0000467C 28
01:0000467D 2E
01:0000467E 2E              	  1399: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
01:0000467F 3E
01:00004680 3F
01:00004681 4C
01:00004682 3A
01:00004683 50
01:00004684 5F
01:00004685 2E
01:00004686 2E              	  1400: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004687 2E
01:00004688 22
01:00004689 2E
01:0000468A 7B
01:0000468B 2B
01:0000468C 2E
01:0000468D 2E
01:0000468E 2E              	  1401: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:0000468F 2E
01:00004690 0D
01:00004691 7D
01:00004692 2E
01:00004693 7C
01:00004694 2E
01:00004695 2E
01:00004696 2E              	  1402: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004697 2E
01:00004698 2E
01:00004699 2E
01:0000469A 2E
01:0000469B 2E
01:0000469C 08
01:0000469D 2E
01:0000469E 2E              	  1403: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000469F 2E
01:000046A0 2E
01:000046A1 2E
01:000046A2 2E
01:000046A3 2E
01:000046A4 2E
01:000046A5 2E
01:000046A6 2E              	  1404: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:000046A7 7F
01:000046A8 2E
01:000046A9 2E
01:000046AA 2E
01:000046AB 2E
01:000046AC 1B
01:000046AD 2E
01:000046AE 2E              	  1405: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046AF 2E
01:000046B0 2E
01:000046B1 2E
01:000046B2 2E
01:000046B3 2E
01:000046B4 2E
01:000046B5 2E
                            	  1406: 
01:000046B6 2E              	  1407: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046B7 2E
01:000046B8 2E
01:000046B9 2E
01:000046BA 2E
01:000046BB 2E
01:000046BC 2E
01:000046BD 2E
01:000046BE 2E              	  1408: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046BF 2E
01:000046C0 2E
01:000046C1 2E
01:000046C2 2E
01:000046C3 2E
01:000046C4 2E
01:000046C5 2E
01:000046C6 2E              	  1409: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046C7 2E
01:000046C8 2E
01:000046C9 2E
01:000046CA 2E
01:000046CB 2E
01:000046CC 2E
01:000046CD 2E
01:000046CE 2E              	  1410: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046CF 2E
01:000046D0 2E
01:000046D1 2E
01:000046D2 2E
01:000046D3 2E
01:000046D4 2E
01:000046D5 2E
01:000046D6 2E              	  1411: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046D7 2E
01:000046D8 2E
01:000046D9 2E
01:000046DA 2E
01:000046DB 2E
01:000046DC 2E
01:000046DD 2E
01:000046DE 2E              	  1412: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046DF 2E
01:000046E0 2E
01:000046E1 2E
01:000046E2 2E
01:000046E3 2E
01:000046E4 2E
01:000046E5 2E
01:000046E6 2E              	  1413: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046E7 2E
01:000046E8 2E
01:000046E9 2E
01:000046EA 2E
01:000046EB 2E
01:000046EC 2E
01:000046ED 2E
01:000046EE 2E              	  1414: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046EF 2E
01:000046F0 2E
01:000046F1 2E
01:000046F2 2E
01:000046F3 2E
01:000046F4 2E
01:000046F5 2E
01:000046F6 2E              	  1415: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046F7 2E
01:000046F8 2E
01:000046F9 2E
01:000046FA 2E
01:000046FB 2E
01:000046FC 2E
01:000046FD 2E
01:000046FE 2E              	  1416: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000046FF 2E
01:00004700 2E
01:00004701 2E
01:00004702 2E
01:00004703 2E
01:00004704 2E
01:00004705 2E
01:00004706 2E              	  1417: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004707 2E
01:00004708 2E
01:00004709 2E
01:0000470A 2E
01:0000470B 2E
01:0000470C 2E
01:0000470D 2E
01:0000470E 2E              	  1418: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000470F 2E
01:00004710 2E
01:00004711 2E
01:00004712 2E
01:00004713 2E
01:00004714 2E
01:00004715 2E
01:00004716 2E              	  1419: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004717 2E
01:00004718 2E
01:00004719 2E
01:0000471A 2E
01:0000471B 2E
01:0000471C 2E
01:0000471D 2E
01:0000471E 2E              	  1420: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000471F 2E
01:00004720 2E
01:00004721 2E
01:00004722 2E
01:00004723 2E
01:00004724 2E
01:00004725 2E
01:00004726 2E              	  1421: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004727 2E
01:00004728 2E
01:00004729 2E
01:0000472A 2E
01:0000472B 2E
01:0000472C 2E
01:0000472D 2E
01:0000472E 2E              	  1422: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000472F 2E
01:00004730 2E
01:00004731 2E
01:00004732 2E
01:00004733 2E
01:00004734 2E
01:00004735 2E
                            	  1423: 
                            	  1424: ; control
                            	  1425: _keybdControlCodes:
01:00004736 2E              	  1426: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004737 2E
01:00004738 2E
01:00004739 2E
01:0000473A 2E
01:0000473B 2E
01:0000473C 2E
01:0000473D 2E
01:0000473E 2E              	  1427: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
01:0000473F 2E
01:00004740 2E
01:00004741 2E
01:00004742 2E
01:00004743 09
01:00004744 7E
01:00004745 2E
01:00004746 2E              	  1428: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
01:00004747 2E
01:00004748 2E
01:00004749 2E
01:0000474A 2E
01:0000474B 11
01:0000474C 21
01:0000474D 2E
01:0000474E 2E              	  1429: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
01:0000474F 2E
01:00004750 1A
01:00004751 13
01:00004752 01
01:00004753 17
01:00004754 40
01:00004755 2E
01:00004756 2E              	  1430: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
01:00004757 03
01:00004758 18
01:00004759 04
01:0000475A 05
01:0000475B 24
01:0000475C 23
01:0000475D 2E
01:0000475E 2E              	  1431: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
01:0000475F 20
01:00004760 16
01:00004761 06
01:00004762 14
01:00004763 12
01:00004764 25
01:00004765 2E
01:00004766 2E              	  1432: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
01:00004767 0E
01:00004768 02
01:00004769 08
01:0000476A 07
01:0000476B 19
01:0000476C 5E
01:0000476D 2E
01:0000476E 2E              	  1433: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
01:0000476F 2E
01:00004770 0D
01:00004771 0A
01:00004772 15
01:00004773 26
01:00004774 2A
01:00004775 2E
01:00004776 2E              	  1434: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
01:00004777 3C
01:00004778 0B
01:00004779 09
01:0000477A 0F
01:0000477B 29
01:0000477C 28
01:0000477D 2E
01:0000477E 2E              	  1435: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
01:0000477F 3E
01:00004780 3F
01:00004781 0C
01:00004782 3A
01:00004783 10
01:00004784 5F
01:00004785 2E
01:00004786 2E              	  1436: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
01:00004787 2E
01:00004788 22
01:00004789 2E
01:0000478A 7B
01:0000478B 2B
01:0000478C 2E
01:0000478D 2E
01:0000478E 2E              	  1437: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
01:0000478F 2E
01:00004790 0D
01:00004791 7D
01:00004792 2E
01:00004793 7C
01:00004794 2E
01:00004795 2E
01:00004796 2E              	  1438: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
01:00004797 2E
01:00004798 2E
01:00004799 2E
01:0000479A 2E
01:0000479B 2E
01:0000479C 08
01:0000479D 2E
01:0000479E 2E              	  1439: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000479F 2E
01:000047A0 2E
01:000047A1 2E
01:000047A2 2E
01:000047A3 2E
01:000047A4 2E
01:000047A5 2E
01:000047A6 2E              	  1440: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
01:000047A7 7F
01:000047A8 2E
01:000047A9 2E
01:000047AA 2E
01:000047AB 2E
01:000047AC 1B
01:000047AD 2E
01:000047AE 2E              	  1441: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047AF 2E
01:000047B0 2E
01:000047B1 2E
01:000047B2 2E
01:000047B3 2E
01:000047B4 2E
01:000047B5 2E
                            	  1442: 
                            	  1443: _keybdExtendedCodes:
01:000047B6 2E              	  1444: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
01:000047B7 2E
01:000047B8 2E
01:000047B9 2E
01:000047BA A3
01:000047BB A1
01:000047BC A2
01:000047BD 2E
01:000047BE 2E              	  1445: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047BF 2E
01:000047C0 2E
01:000047C1 2E
01:000047C2 2E
01:000047C3 2E
01:000047C4 2E
01:000047C5 2E
01:000047C6 2E              	  1446: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047C7 2E
01:000047C8 2E
01:000047C9 2E
01:000047CA 2E
01:000047CB 2E
01:000047CC 2E
01:000047CD 2E
01:000047CE 2E              	  1447: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047CF 2E
01:000047D0 2E
01:000047D1 2E
01:000047D2 2E
01:000047D3 2E
01:000047D4 2E
01:000047D5 2E
01:000047D6 2E              	  1448: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047D7 2E
01:000047D8 2E
01:000047D9 2E
01:000047DA 2E
01:000047DB 2E
01:000047DC 2E
01:000047DD 2E
01:000047DE 2E              	  1449: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047DF 2E
01:000047E0 2E
01:000047E1 2E
01:000047E2 2E
01:000047E3 2E
01:000047E4 2E
01:000047E5 2E
01:000047E6 2E              	  1450: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047E7 2E
01:000047E8 2E
01:000047E9 2E
01:000047EA 2E
01:000047EB 2E
01:000047EC 2E
01:000047ED 2E
01:000047EE 2E              	  1451: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047EF 2E
01:000047F0 2E
01:000047F1 2E
01:000047F2 2E
01:000047F3 2E
01:000047F4 2E
01:000047F5 2E
01:000047F6 2E              	  1452: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047F7 2E
01:000047F8 2E
01:000047F9 2E
01:000047FA 2E
01:000047FB 2E
01:000047FC 2E
01:000047FD 2E
01:000047FE 2E              	  1453: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:000047FF 2E
01:00004800 2E
01:00004801 2E
01:00004802 2E
01:00004803 2E
01:00004804 2E
01:00004805 2E
01:00004806 2E              	  1454: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004807 2E
01:00004808 2E
01:00004809 2E
01:0000480A 2E
01:0000480B 2E
01:0000480C 2E
01:0000480D 2E
01:0000480E 2E              	  1455: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:0000480F 2E
01:00004810 2E
01:00004811 2E
01:00004812 2E
01:00004813 2E
01:00004814 2E
01:00004815 2E
01:00004816 2E              	  1456: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
01:00004817 2E
01:00004818 2E
01:00004819 2E
01:0000481A 2E
01:0000481B 2E
01:0000481C 2E
01:0000481D 2E
01:0000481E 2E              	  1457: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
01:0000481F 95
01:00004820 2E
01:00004821 93
01:00004822 94
01:00004823 2E
01:00004824 2E
01:00004825 2E
01:00004826 98              	  1458: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
01:00004827 99
01:00004828 92
01:00004829 2E
01:0000482A 91
01:0000482B 90
01:0000482C 2E
01:0000482D 2E
01:0000482E 2E              	  1459: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
01:0000482F 2E
01:00004830 97
01:00004831 2E
01:00004832 2E
01:00004833 96
01:00004834 2E
01:00004835 2E
                            	  1460: 
                            	  1461: ;==============================================================================
                            	  1462: ;==============================================================================
                            	  1463: ; Monitor
                            	  1464: ;==============================================================================
                            	  1465: ;==============================================================================
                            	  1466: ;
                            	  1467: ; Get a word from screen memory and swap byte order
                            	  1468: 
                            	  1469: FromScreen:
01:00004836 2210            	  1470: 	move.l	(a0),d1
01:00004838 E159            	  1471: 	rol.w		#8,d1
01:0000483A 4841            	  1472: 	swap		d1
01:0000483C E159            	  1473: 	rol.w		#8,d1
01:0000483E 5088            	  1474: 	lea			8(a0),a0	; increment screen pointer
01:00004840 4E75            	  1475: 	rts
                            	  1476: 
                            	  1477: StartMon:
01:00004842 427900040202    	  1478: 	clr.w		NumSetBreakpoints
01:00004848 61000994        	  1479: 	bsr			ClearBreakpointList
                            	  1480: Monitor:
                            	  1481: 	; Reset the stack pointer on each entry into the monitor
01:0000484C 2E7C00040FFC    	  1482: 	move.l	#$40FFC,sp	; reset core's stack
01:00004852 46FC2500        	  1483: 	move.w	#$2500,sr		; enable level 6 and higher interrupts
01:00004856 7201            	  1484: 	moveq		#1,d1
01:00004858 6100B8E0        	  1485: 	bsr			UnlockSemaphore
01:0000485C 42390004000C    	  1486: 	clr.b		KeybdEcho		; turn off keyboard echo
                            	  1487: PromptLn:
01:00004862 6100F4FA        	  1488: 	bsr			CRLF
01:00004866 123C0024        	  1489: 	move.b	#'$',d1
01:0000486A 6100F53C        	  1490: 	bsr			DisplayChar
                            	  1491: 
                            	  1492: ; Get characters until a CR is keyed
                            	  1493: ;
                            	  1494: Prompt3:
01:0000486E 6100F9E6        	  1495: 	bsr			GetKey
01:00004872 0C0100FF        	  1496: 	cmpi.b	#-1,d1
01:00004876 67F6            	  1497: 	beq.s		Prompt3
01:00004878 0C01000D        	  1498: 	cmpi.b	#CR,d1
01:0000487C 6706            	  1499: 	beq.s		Prompt1
01:0000487E 6100F528        	  1500: 	bsr			DisplayChar
01:00004882 60EA            	  1501: 	bra.s		Prompt3
                            	  1502: 
                            	  1503: ; Process the screen line that the CR was keyed on
                            	  1504: ;
                            	  1505: Prompt1:
01:00004884 423900040001    	  1506: 	clr.b		CursorCol			; go back to the start of the line
01:0000488A 6100F50E        	  1507: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1508: .0001:
01:0000488E 61A6            	  1509: 	bsr			FromScreen		; grab character off screen
01:00004890 0C010024        	  1510: 	cmpi.b	#'$',d1				; skip over '$' prompt character
01:00004894 67F8            	  1511: 	beq.s		.0001
                            	  1512: 	
                            	  1513: ; Dispatch based on command character
                            	  1514: ;
                            	  1515: Prompt2:
01:00004896 0C010061        	  1516: 	cmpi.b	#'a',d1
01:0000489A 6700074A        	  1517: 	beq			AudioInputTest
01:0000489E 0C010062        	  1518: 	cmpi.b	#'b',d1
01:000048A2 67000744        	  1519: 	beq			BouncingBalls
01:000048A6 0C010067        	  1520: 	cmpi.b	#'g',d1
01:000048AA 6700073E        	  1521: 	beq			GraphicsDemo
01:000048AE 0C01003A        	  1522: 	cmpi.b	#':',d1			; $: - edit memory
01:000048B2 6700036C        	  1523: 	beq			EditMem
01:000048B6 0C010044        	  1524: 	cmpi.b	#'D',d1			; $D - dump memory
01:000048BA 6612            	  1525: 	bne.s		.0003
01:000048BC 6100FF78        	  1526: 	bsr			FromScreen
01:000048C0 0C010052        	  1527: 	cmpi.b	#'R',d1			; $DR - dump registers
01:000048C4 6700043E        	  1528: 	beq			DumpRegs
01:000048C8 5188            	  1529: 	lea			-8(a0),a0
01:000048CA 600003AE        	  1530: 	bra			DumpMem
                            	  1531: .0003:
01:000048CE 0C010046        	  1532: 	cmpi.b	#'F',d1
01:000048D2 670002F4        	  1533: 	beq			FillMem
01:000048D6 0C010042        	  1534: 	cmpi.b	#'B',d1			; $B - start tiny basic
01:000048DA 6634            	  1535: 	bne.s	.0001
01:000048DC 6100FF58        	  1536: 	bsr			FromScreen
01:000048E0 0C010052        	  1537: 	cmpi.b	#'R',d1
01:000048E4 6624            	  1538: 	bne.s		.0004
01:000048E6 61000326        	  1539: 	bsr			ignBlanks
01:000048EA 6100FF4A        	  1540: 	bsr			FromScreen
01:000048EE 0C01002B        	  1541: 	cmpi.b	#'+',d1
01:000048F2 670007F8        	  1542: 	beq			ArmBreakpoint
01:000048F6 0C01002D        	  1543: 	cmpi.b	#'-',d1
01:000048FA 6700086E        	  1544: 	beq			DisarmBreakpoint
01:000048FE 0C01004C        	  1545: 	cmpi.b	#'L',d1
01:00004902 670008BA        	  1546: 	beq			ListBreakpoints
01:00004906 6000FF44        	  1547: 	bra			Monitor
                            	  1548: .0004:
01:0000490A 4EF9FFFCC000    	  1549: 	jmp			$FFFCC000
                            	  1550: .0001:
01:00004910 0C01004A        	  1551: 	cmpi.b	#'J',d1			; $J - execute code
01:00004914 67000356        	  1552: 	beq			ExecuteCode
01:00004918 0C01004C        	  1553: 	cmpi.b	#'L',d1			; $L - load S19 file
01:0000491C 6700053C        	  1554: 	beq			LoadS19
01:00004920 0C01003F        	  1555: 	cmpi.b	#'?',d1			; $? - display help
01:00004924 676E            	  1556: 	beq			DisplayHelp
01:00004926 0C010043        	  1557: 	cmpi.b	#'C',d1			; $C - clear screen
01:0000492A 6726            	  1558: 	beq			TestCLS
01:0000492C 0C010054        	  1559: 	cmpi.b	#'T',d1			; $T - run cpu test program
01:00004930 660C            	  1560: 	bne.s		.0002
01:00004932 6100B84A        	  1561: 	bsr			cpu_test
01:00004936 43FA09F7        	  1562: 	lea			msg_test_done,a1
01:0000493A 6100F6E0        	  1563: 	bsr			DisplayStringCRLF
                            	  1564: .0002:
01:0000493E 0C010053        	  1565: 	cmpi.b	#'S',d1
01:00004942 67000220        	  1566: 	beq			SendSerial
01:00004946 0C010052        	  1567: 	cmpi.b	#'R',d1
01:0000494A 67000248        	  1568: 	beq			ReceiveSerial
01:0000494E 6000FEFC        	  1569: 	bra			Monitor
                            	  1570: 
                            	  1571: TestCLS:
01:00004952 6100FEE2        	  1572: 	bsr			FromScreen
01:00004956 5242            	  1573: 	addq		#1,d2
01:00004958 0C01004C        	  1574: 	cmpi.b	#'L',d1
01:0000495C 661A            	  1575: 	bne.s		.0001
01:0000495E 6100FED6        	  1576: 	bsr			FromScreen
01:00004962 5242            	  1577: 	addq		#1,d2
01:00004964 0C010053        	  1578: 	cmpi.b	#'S',d1
01:00004968 6600FEE2        	  1579: 	bne			Monitor
01:0000496C 6100067E        	  1580: 	bsr			ClearScreen
01:00004970 6100F6D6        	  1581: 	bsr			HomeCursor
01:00004974 6000FED6        	  1582: 	bra			Monitor
                            	  1583: .0001:
01:00004978 0C010032        	  1584: 	cmpi.b	#'2',d1					; check range
01:0000497C 6500FECE        	  1585: 	blo			Monitor
01:00004980 0C010039        	  1586: 	cmpi.b	#'9',d1
01:00004984 6200FEC6        	  1587: 	bhi			Monitor
01:00004988 04010030        	  1588: 	subi.b	#'0',d1					; convert ascii to binary
01:0000498C 6100F7E6        	  1589: 	bsr			select_iofocus
01:00004990 6000FEBA        	  1590: 	bra			Monitor
                            	  1591: 	
                            	  1592: DisplayHelp:
01:00004994 43FA000A        	  1593: 	lea			HelpMsg,a1
01:00004998 6100F66C        	  1594: 	bsr			DisplayString
01:0000499C 6000FEAE        	  1595: 	bra			Monitor
                            	  1596: 
                            	  1597: HelpMsg:
01:000049A0 3F203D2044697370	  1598: 	dc.b	"? = Display help",CR,LF
01:000049A8 6C61792068656C70
01:000049B0 0D
01:000049B1 0A
01:000049B2 433C6E3E203D2073	  1599: 	dc.b  "C<n> = switch to core n",CR,LF
01:000049BA 776974636820746F
01:000049C2 20636F7265206E
01:000049C9 0D
01:000049CA 0A
01:000049CB 434C53203D20636C	  1600: 	dc.b	"CLS = clear screen",CR,LF
01:000049D3 6561722073637265
01:000049DB 656E
01:000049DD 0D
01:000049DE 0A
01:000049DF 3A203D2045646974	  1601: 	dc.b	": = Edit memory bytes",CR,LF
01:000049E7 206D656D6F727920
01:000049EF 6279746573
01:000049F4 0D
01:000049F5 0A
01:000049F6 46203D2046696C6C	  1602: 	dc.b	"F = Fill memory",CR,LF
01:000049FE 206D656D6F7279
01:00004A05 0D
01:00004A06 0A
01:00004A07 4C203D204C6F6164	  1603: 	dc.b	"L = Load S19 file",CR,LF
01:00004A0F 205331392066696C
01:00004A17 65
01:00004A18 0D
01:00004A19 0A
01:00004A1A 44203D2044756D70	  1604: 	dc.b	"D = Dump memory, DR = dump registers",CR,LF
01:00004A22 206D656D6F72792C
01:00004A2A 204452203D206475
01:00004A32 6D70207265676973
01:00004A3A 74657273
01:00004A3E 0D
01:00004A3F 0A
01:00004A40 42203D2073746172	  1605: 	dc.b	"B = start tiny basic",CR,LF
01:00004A48 742074696E792062
01:00004A50 61736963
01:00004A54 0D
01:00004A55 0A
01:00004A56 4252203D20736574	  1606: 	dc.b  "BR = set breakpoint",CR,LF
01:00004A5E 20627265616B706F
01:00004A66 696E74
01:00004A69 0D
01:00004A6A 0A
01:00004A6B 4A203D204A756D70	  1607: 	dc.b	"J = Jump to code",CR,LF
01:00004A73 20746F20636F6465
01:00004A7B 0D
01:00004A7C 0A
01:00004A7D 5345203D2073656E	  1608: 	dc.b  "SE = send to serial port",CR,LF
01:00004A85 6420746F20736572
01:00004A8D 69616C20706F7274
01:00004A95 0D
01:00004A96 0A
01:00004A97 54203D2063707520	  1609: 	dc.b	"T = cpu test program",CR,LF,0
01:00004A9F 746573742070726F
01:00004AA7 6772616D
01:00004AAB 0D
01:00004AAC 0A
01:00004AAD 00
                            	  1610: 
                            	  1611: msgHello:
01:00004AAE 0A              	  1612: 	dc.b	LF,CR,"Hello World!",LF,CR,0
01:00004AAF 0D
01:00004AB0 48656C6C6F20576F
01:00004AB8 726C6421
01:00004ABC 0A
01:00004ABD 0D
01:00004ABE 00
                            	  1613: 	even
                            	  1614: 
                            	  1615: ;------------------------------------------------------------------------------
                            	  1616: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1617: ; Used to fetch a command line. (Not currently used).
                            	  1618: ;
                            	  1619: ; d0.b	- command prompt
                            	  1620: ;------------------------------------------------------------------------------
                            	  1621: 
                            	  1622: GetCmdLine:
01:00004AC0 6100F2E6        	  1623: 		bsr		DisplayChar		; display prompt
01:00004AC4 103C0020        	  1624: 		move.b	#' ',d0
01:00004AC8 6100F2DE        	  1625: 		bsr		DisplayChar
01:00004ACC 41F900040040    	  1626: 		lea		CmdBuf,a0
                            	  1627: .0001:
01:00004AD2 6100F782        	  1628: 		bsr		GetKey
01:00004AD6 B03C0008        	  1629: 		cmp.b	#CTRLH,d0
01:00004ADA 6728            	  1630: 		beq.s	.0003
01:00004ADC B03C0018        	  1631: 		cmp.b	#CTRLX,d0
01:00004AE0 6746            	  1632: 		beq.s	.0004
01:00004AE2 B03C000D        	  1633: 		cmp.b	#CR,d0
01:00004AE6 6706            	  1634: 		beq.s	.0002
01:00004AE8 B03C0020        	  1635: 		cmp.b	#' ',d0
01:00004AEC 65E4            	  1636: 		bcs.s	.0001
                            	  1637: .0002:
01:00004AEE 1080            	  1638: 		move.b	d0,(a0)
01:00004AF0 5088            	  1639: 		lea			8(a0),a0
01:00004AF2 6100F2B4        	  1640: 		bsr		DisplayChar
01:00004AF6 B03C000D        	  1641: 		cmp.b	#CR,d0
01:00004AFA 675E            	  1642: 		beq		.0007
01:00004AFC B1FC0004007F    	  1643: 		cmp.l	#CmdBufEnd-1,a0
01:00004B02 65CE            	  1644: 		bcs.s	.0001
                            	  1645: .0003:
01:00004B04 103C0008        	  1646: 		move.b	#CTRLH,d0
01:00004B08 6100F29E        	  1647: 		bsr		DisplayChar
01:00004B0C 103C0020        	  1648: 		move.b	#' ',d0
01:00004B10 6100F296        	  1649: 		bsr		DisplayChar
01:00004B14 B1FC00040040    	  1650: 		cmp.l	#CmdBuf,a0
01:00004B1A 63B6            	  1651: 		bls.s	.0001
01:00004B1C 103C0008        	  1652: 		move.b	#CTRLH,d0
01:00004B20 6100F286        	  1653: 		bsr		DisplayChar
01:00004B24 5388            	  1654: 		subq.l	#1,a0
01:00004B26 60AA            	  1655: 		bra.s	.0001
                            	  1656: .0004:
01:00004B28 2208            	  1657: 		move.l	a0,d1
01:00004B2A 92BC00040040    	  1658: 		sub.l	#CmdBuf,d1
01:00004B30 671E            	  1659: 		beq.s	.0006
01:00004B32 5341            	  1660: 		subq	#1,d1
                            	  1661: .0005:
01:00004B34 103C0008        	  1662: 		move.b	#CTRLH,d0
01:00004B38 6100F26E        	  1663: 		bsr		DisplayChar
01:00004B3C 103C0020        	  1664: 		move.b	#' ',d0
01:00004B40 6100F266        	  1665: 		bsr		DisplayChar
01:00004B44 103C0008        	  1666: 		move.b	#CTRLH,d0
01:00004B48 6100F25E        	  1667: 		bsr		DisplayChar
01:00004B4C 51C9FFE6        	  1668: 		dbra	d1,.0005
                            	  1669: .0006:
01:00004B50 41F900040040    	  1670: 		lea		CmdBuf,a0
01:00004B56 6000FF7A        	  1671: 		bra		.0001
                            	  1672: .0007:
01:00004B5A 103C000A        	  1673: 		move.b	#LF,d0
01:00004B5E 6100F248        	  1674: 		bsr		DisplayChar
01:00004B62 4E75            	  1675: 		rts
                            	  1676: 
                            	  1677: ;------------------------------------------------------------------------------
                            	  1678: ; S <address> <length>
                            	  1679: ; Send data buffer to serial port
                            	  1680: ; S 40000 40
                            	  1681: ;------------------------------------------------------------------------------
                            	  1682: 
                            	  1683: SendSerial:
01:00004B64 610000A8        	  1684: 	bsr			ignBlanks
01:00004B68 61000244        	  1685: 	bsr			GetHexNumber
01:00004B6C 6700FCDE        	  1686: 	beq			Monitor
01:00004B70 2C01            	  1687: 	move.l	d1,d6					; d6 points to buffer
01:00004B72 6100009A        	  1688: 	bsr			ignBlanks
01:00004B76 61000236        	  1689: 	bsr			GetHexNumber
01:00004B7A 6602            	  1690: 	bne.s		.0003
01:00004B7C 7210            	  1691: 	moveq		#16,d1
                            	  1692: .0003:
01:00004B7E 2246            	  1693: 	move.l	d6,a1					; a1 points to buffer
01:00004B80 2401            	  1694: 	move.l	d1,d2					; d2 = count of bytes to send
01:00004B82 6008            	  1695: 	bra.s		.0002					; enter loop at bottom
                            	  1696: .0001:
01:00004B84 1219            	  1697: 	move.b	(a1)+,d1
01:00004B86 303C0022        	  1698: 	move.w	#34,d0				; serial putchar
01:00004B8A 4E4F            	  1699: 	trap		#15
                            	  1700: .0002:
01:00004B8C 51CAFFF6        	  1701: 	dbra		d2,.0001
01:00004B90 6000FCBA        	  1702: 	bra			Monitor
                            	  1703: 		
                            	  1704: ;------------------------------------------------------------------------------
                            	  1705: ; R <address> <length>
                            	  1706: ; Send data buffer to serial port
                            	  1707: ; R 10000 40
                            	  1708: ;------------------------------------------------------------------------------
                            	  1709: 
                            	  1710: ReceiveSerial:
01:00004B94 6178            	  1711: 	bsr			ignBlanks
01:00004B96 61000216        	  1712: 	bsr			GetHexNumber
01:00004B9A 6700FCB0        	  1713: 	beq			Monitor
01:00004B9E 2C01            	  1714: 	move.l	d1,d6					; d6 points to buffer
01:00004BA0 616C            	  1715: 	bsr			ignBlanks
01:00004BA2 6100020A        	  1716: 	bsr			GetHexNumber
01:00004BA6 6602            	  1717: 	bne.s		.0003
01:00004BA8 7210            	  1718: 	moveq		#16,d1
                            	  1719: .0003:
01:00004BAA 2246            	  1720: 	move.l	d6,a1					; a1 points to buffer
01:00004BAC 2401            	  1721: 	move.l	d1,d2					; d2 = count of bytes to send
01:00004BAE 6010            	  1722: 	bra.s		.0002					; enter loop at bottom
                            	  1723: .0001:
01:00004BB0 303C0021        	  1724: 	move.w	#33,d0				; serial peek char
01:00004BB4 4E4F            	  1725: 	trap		#15
01:00004BB6 0C81FFFFFFFF    	  1726: 	cmpi.l	#-1,d1
01:00004BBC 67F2            	  1727: 	beq			.0001
01:00004BBE 12C1            	  1728: 	move.b	d1,(a1)+
                            	  1729: .0002:
01:00004BC0 51CAFFEE        	  1730: 	dbra		d2,.0001
01:00004BC4 6000FC86        	  1731: 	bra			Monitor
                            	  1732: 		
                            	  1733: ;------------------------------------------------------------------------------
                            	  1734: ; Fill memory
                            	  1735: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1736: ; FW = fill words
                            	  1737: ; FL = fill longs
                            	  1738: ; F = fill bytes
                            	  1739: ;------------------------------------------------------------------------------
                            	  1740: 
                            	  1741: FillMem:
01:00004BC8 6100FC6C        	  1742: 	bsr			FromScreen
                            	  1743: 	;bsr		ScreenToAscii
01:00004BCC 1801            	  1744: 	move.b	d1,d4			; d4 = fill size
01:00004BCE 613E            	  1745: 	bsr			ignBlanks
01:00004BD0 610001DC        	  1746: 	bsr			GetHexNumber
01:00004BD4 2241            	  1747: 	move.l	d1,a1			; a1 = start
01:00004BD6 6136            	  1748: 	bsr			ignBlanks
01:00004BD8 610001D4        	  1749: 	bsr			GetHexNumber
01:00004BDC 2601            	  1750: 	move.l	d1,d3			; d3 = count
01:00004BDE 612E            	  1751: 	bsr			ignBlanks
01:00004BE0 610001CC        	  1752: 	bsr			GetHexNumber	; fill value
01:00004BE4 0C04004C        	  1753: 	cmpi.b	#'L',d4
01:00004BE8 660A            	  1754: 	bne			fmem1
                            	  1755: fmemL:
01:00004BEA 22C1            	  1756: 	move.l	d1,(a1)+
01:00004BEC 5383            	  1757: 	sub.l	#1,d3
01:00004BEE 66FA            	  1758: 	bne.s	fmemL
01:00004BF0 6000FC5A        	  1759: 	bra		Monitor
                            	  1760: fmem1
01:00004BF4 0C040057        	  1761: 	cmpi.b	#'W',d4
01:00004BF8 660A            	  1762: 	bne		fmemB
                            	  1763: fmemW:
01:00004BFA 32C1            	  1764: 	move.w	d1,(a1)+
01:00004BFC 5383            	  1765: 	sub.l	#1,d3
01:00004BFE 66FA            	  1766: 	bne.s	fmemW
01:00004C00 6000FC4A        	  1767: 	bra		Monitor
                            	  1768: fmemB:
01:00004C04 12C1            	  1769: 	move.b	d1,(a1)+
01:00004C06 5383            	  1770: 	sub.l	#1,d3
01:00004C08 66FA            	  1771: 	bne.s	fmemB
01:00004C0A 6000FC40        	  1772: 	bra		Monitor
                            	  1773: 
                            	  1774: ;------------------------------------------------------------------------------
                            	  1775: ; Modifies:
                            	  1776: ;	a0	- text pointer
                            	  1777: ;------------------------------------------------------------------------------
                            	  1778: 
                            	  1779: ignBlanks:
01:00004C0E 2F01            	  1780: 	move.l	d1,-(a7)
                            	  1781: .0001:
01:00004C10 6100FC24        	  1782: 	bsr			FromScreen
01:00004C14 0C010020        	  1783: 	cmpi.b	#' ',d1
01:00004C18 67F6            	  1784: 	beq.s		.0001
01:00004C1A 5188            	  1785: 	lea			-8(a0),a0
01:00004C1C 221F            	  1786: 	move.l	(a7)+,d1
01:00004C1E 4E75            	  1787: 	rts
                            	  1788: 
                            	  1789: ;------------------------------------------------------------------------------
                            	  1790: ; Edit memory byte.
                            	  1791: ;------------------------------------------------------------------------------
                            	  1792: 
                            	  1793: EditMem:
01:00004C20 61EC            	  1794: 	bsr		ignBlanks
01:00004C22 6100018A        	  1795: 	bsr		GetHexNumber
01:00004C26 2241            	  1796: 	move.l	d1,a1
                            	  1797: edtmem1:
01:00004C28 61E4            	  1798: 	bsr		ignBlanks
01:00004C2A 61000182        	  1799: 	bsr		GetHexNumber
01:00004C2E 12C1            	  1800: 	move.b	d1,(a1)+
01:00004C30 61DC            	  1801: 	bsr		ignBlanks
01:00004C32 6100017A        	  1802: 	bsr		GetHexNumber
01:00004C36 12C1            	  1803: 	move.b	d1,(a1)+
01:00004C38 61D4            	  1804: 	bsr		ignBlanks
01:00004C3A 61000172        	  1805: 	bsr		GetHexNumber
01:00004C3E 12C1            	  1806: 	move.b	d1,(a1)+
01:00004C40 61CC            	  1807: 	bsr		ignBlanks
01:00004C42 6100016A        	  1808: 	bsr		GetHexNumber
01:00004C46 12C1            	  1809: 	move.b	d1,(a1)+
01:00004C48 61C4            	  1810: 	bsr		ignBlanks
01:00004C4A 61000162        	  1811: 	bsr		GetHexNumber
01:00004C4E 12C1            	  1812: 	move.b	d1,(a1)+
01:00004C50 61BC            	  1813: 	bsr		ignBlanks
01:00004C52 6100015A        	  1814: 	bsr		GetHexNumber
01:00004C56 12C1            	  1815: 	move.b	d1,(a1)+
01:00004C58 61B4            	  1816: 	bsr		ignBlanks
01:00004C5A 61000152        	  1817: 	bsr		GetHexNumber
01:00004C5E 12C1            	  1818: 	move.b	d1,(a1)+
01:00004C60 61AC            	  1819: 	bsr		ignBlanks
01:00004C62 6100014A        	  1820: 	bsr		GetHexNumber
01:00004C66 12C1            	  1821: 	move.b	d1,(a1)+
01:00004C68 6000FBE2        	  1822: 	bra		Monitor
                            	  1823: 
                            	  1824: ;------------------------------------------------------------------------------
                            	  1825: ; Execute code at the specified address.
                            	  1826: ;------------------------------------------------------------------------------
                            	  1827: 
                            	  1828: ExecuteCode:
01:00004C6C 61A0            	  1829: 	bsr			ignBlanks
01:00004C6E 6100013E        	  1830: 	bsr			GetHexNumber
01:00004C72 2041            	  1831: 	move.l	d1,a0
01:00004C74 4E90            	  1832: 	jsr			(a0)
01:00004C76 6000FBD4        	  1833: 	bra     Monitor
                            	  1834: 
                            	  1835: ;------------------------------------------------------------------------------
                            	  1836: ; Do a memory dump of the requested location.
                            	  1837: ; D 0800 0850
                            	  1838: ;------------------------------------------------------------------------------
                            	  1839: 
                            	  1840: DumpMem:
01:00004C7A 6192            	  1841: 	bsr			ignBlanks
01:00004C7C 61000130        	  1842: 	bsr			GetHexNumber
01:00004C80 6700FBCA        	  1843: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
01:00004C84 2601            	  1844: 	move.l	d1,d3				; save off start of range
01:00004C86 6186            	  1845: 	bsr			ignBlanks
01:00004C88 61000124        	  1846: 	bsr			GetHexNumber
01:00004C8C 6608            	  1847: 	bne.s		DumpMem1
01:00004C8E 2203            	  1848: 	move.l	d3,d1
01:00004C90 068100000040    	  1849: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  1850: DumpMem1:
01:00004C96 2043            	  1851: 	move.l	d3,a0
01:00004C98 2241            	  1852: 	move.l	d1,a1
01:00004C9A 6100F0C2        	  1853: 	bsr			CRLF
                            	  1854: .0001:
01:00004C9E B3C8            	  1855: 	cmpa.l	a0,a1
01:00004CA0 6300FBAA        	  1856: 	bls			Monitor
01:00004CA4 6102            	  1857: 	bsr			DisplayMem
01:00004CA6 60F6            	  1858: 	bra.s		.0001
                            	  1859: 
                            	  1860: ;------------------------------------------------------------------------------
                            	  1861: ; Display memory dump in a format suitable for edit.
                            	  1862: ;
                            	  1863: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  1864: ;
                            	  1865: ; Modifies:
                            	  1866: ;		d1,d2,a0
                            	  1867: ;------------------------------------------------------------------------------
                            	  1868: 
                            	  1869: DisplayMem:
01:00004CA8 123C003A        	  1870: 	move.b	#':',d1
01:00004CAC 6100F0FA        	  1871: 	bsr			DisplayChar
01:00004CB0 2208            	  1872: 	move.l	a0,d1
01:00004CB2 6100017A        	  1873: 	bsr			DisplayTetra
01:00004CB6 7407            	  1874: 	moveq		#7,d2
                            	  1875: dspmem1:
01:00004CB8 123C0020        	  1876: 	move.b	#' ',d1
01:00004CBC 6100F0EA        	  1877: 	bsr			DisplayChar
01:00004CC0 1218            	  1878: 	move.b	(a0)+,d1
01:00004CC2 61000176        	  1879: 	bsr			DisplayByte
01:00004CC6 51CAFFF0        	  1880: 	dbra		d2,dspmem1
01:00004CCA 61000148        	  1881: 	bsr			DisplayTwoSpaces
01:00004CCE 123C0022        	  1882: 	move.b	#34,d1
01:00004CD2 6100F0D4        	  1883: 	bsr			DisplayChar
01:00004CD6 5188            	  1884: 	lea			-8(a0),a0
01:00004CD8 7407            	  1885: 	moveq		#7,d2
                            	  1886: .0002:	
01:00004CDA 1218            	  1887: 	move.b	(a0)+,d1
01:00004CDC B23C0020        	  1888: 	cmp.b		#' ',d1
01:00004CE0 6506            	  1889: 	blo.s		.0003
01:00004CE2 B23C007F        	  1890: 	cmp.b		#127,d1
01:00004CE6 6304            	  1891: 	bls.s		.0001
                            	  1892: .0003:
01:00004CE8 123C002E        	  1893: 	move.b	#'.',d1
                            	  1894: .0001:
01:00004CEC 6100F0BA        	  1895: 	bsr			DisplayChar
01:00004CF0 51CAFFE8        	  1896: 	dbra		d2,.0002
01:00004CF4 123C0022        	  1897: 	move.b	#34,d1
01:00004CF8 6100F0AE        	  1898: 	bsr			DisplayChar
01:00004CFC 6100F592        	  1899: 	bsr			CheckForCtrlC
01:00004D00 6000F05C        	  1900: 	bra			CRLF
                            	  1901: 
                            	  1902: ;------------------------------------------------------------------------------
                            	  1903: ; Dump Registers
                            	  1904: ;    The dump is in a format that allows the register value to be edited.
                            	  1905: ;
                            	  1906: ; RegD0 12345678
                            	  1907: ; RegD1 77777777
                            	  1908: ;	... etc
                            	  1909: ;------------------------------------------------------------------------------
                            	  1910: 
                            	  1911: DumpRegs:
01:00004D04 6100F058        	  1912: 	bsr			CRLF
01:00004D08 303C000F        	  1913: 	move.w	#15,d0					; number of registers-1
01:00004D0C 41FA007A        	  1914: 	lea			msg_reglist,a0	;
01:00004D10 43FA0072        	  1915: 	lea			msg_regs,a1
01:00004D14 45F900040100    	  1916: 	lea			Regsave,a2			; a2 points to register save area
                            	  1917: .0001:
01:00004D1A 6100F2EA        	  1918: 	bsr			DisplayString
01:00004D1E 1218            	  1919: 	move.b	(a0)+,d1
01:00004D20 6100F086        	  1920: 	bsr			DisplayChar
01:00004D24 1218            	  1921: 	move.b	(a0)+,d1
01:00004D26 6100F080        	  1922: 	bsr			DisplayChar
01:00004D2A 610000FA        	  1923: 	bsr			DisplaySpace
01:00004D2E 221A            	  1924: 	move.l	(a2)+,d1
01:00004D30 610000FC        	  1925: 	bsr			DisplayTetra
01:00004D34 6100F028        	  1926: 	bsr			CRLF
01:00004D38 51C8FFE0        	  1927: 	dbra		d0,.0001
01:00004D3C 6100F2C8        	  1928: 	bsr			DisplayString
01:00004D40 1218            	  1929: 	move.b	(a0)+,d1
01:00004D42 6100F064        	  1930: 	bsr			DisplayChar
01:00004D46 1218            	  1931: 	move.b	(a0)+,d1
01:00004D48 6100F05E        	  1932: 	bsr			DisplayChar
01:00004D4C 610000D8        	  1933: 	bsr			DisplaySpace
01:00004D50 223900040144    	  1934: 	move.l	Regsave+$44,d1
01:00004D56 610000D6        	  1935: 	bsr			DisplayTetra
01:00004D5A 6100F002        	  1936: 	bsr			CRLF
01:00004D5E 6100F2A6        	  1937: 	bsr			DisplayString
01:00004D62 1218            	  1938: 	move.b	(a0)+,d1
01:00004D64 6100F042        	  1939: 	bsr			DisplayChar
01:00004D68 1218            	  1940: 	move.b	(a0)+,d1
01:00004D6A 6100F03C        	  1941: 	bsr			DisplayChar
01:00004D6E 610000B6        	  1942: 	bsr			DisplaySpace
01:00004D72 323900040140    	  1943: 	move.w	Regsave+$40,d1
01:00004D78 610000BA        	  1944: 	bsr			DisplayWyde
01:00004D7C 6100EFE0        	  1945: 	bsr			CRLF
01:00004D80 6000FACA        	  1946: 	bra			Monitor
                            	  1947: 
                            	  1948: msg_regs:
01:00004D84 526567          	  1949: 	dc.b	"Reg",0
01:00004D87 00
                            	  1950: msg_reglist:
01:00004D88 4430443144324433	  1951: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
01:00004D90 4434443544364437
01:00004D98 4130413141324133
01:00004DA0 4134413541364137
01:00004DA8 50435352
01:00004DAC 00
                            	  1952: 
                            	  1953: 	align	1
                            	  1954: 
                            	  1955: ;------------------------------------------------------------------------------
                            	  1956: ; Get a hexidecimal number. Maximum of eight digits.
                            	  1957: ;
                            	  1958: ; Returns:
                            	  1959: ;		d0 = number of digits
                            	  1960: ;		d1 = value of number
                            	  1961: ;		zf = number of digits == 0
                            	  1962: ;------------------------------------------------------------------------------
                            	  1963: 
                            	  1964: GetHexNumber:
01:00004DAE 2F02            	  1965: 	move.l	d2,-(a7)
01:00004DB0 7400            	  1966: 	clr.l		d2
01:00004DB2 7000            	  1967: 	moveq		#0,d0
                            	  1968: .0002:
01:00004DB4 6100FA80        	  1969: 	bsr			FromScreen
01:00004DB8 6120            	  1970: 	bsr			AsciiToHexNybble
01:00004DBA B23C00FF        	  1971: 	cmp.b		#$ff,d1
01:00004DBE 6712            	  1972: 	beq.s		.0001
01:00004DC0 E98A            	  1973: 	lsl.l		#4,d2
01:00004DC2 02810000000F    	  1974: 	andi.l	#$0f,d1
01:00004DC8 8481            	  1975: 	or.l		d1,d2
01:00004DCA 5240            	  1976: 	addq		#1,d0
01:00004DCC 0C000008        	  1977: 	cmpi.b	#8,d0
01:00004DD0 65E2            	  1978: 	blo.s		.0002
                            	  1979: .0001:
01:00004DD2 2202            	  1980: 	move.l	d2,d1
01:00004DD4 241F            	  1981: 	move.l	(a7)+,d2
01:00004DD6 4A00            	  1982: 	tst.b		d0
01:00004DD8 4E75            	  1983: 	rts	
                            	  1984: 
                            	  1985: ;------------------------------------------------------------------------------
                            	  1986: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  1987: ; to a hex nybble.
                            	  1988: ;------------------------------------------------------------------------------
                            	  1989: 
                            	  1990: AsciiToHexNybble:
01:00004DDA 0C010030        	  1991: 	cmpi.b	#'0',d1
01:00004DDE 6530            	  1992: 	blo.s		gthx3
01:00004DE0 0C010039        	  1993: 	cmpi.b	#'9',d1
01:00004DE4 6206            	  1994: 	bhi.s		gthx5
01:00004DE6 04010030        	  1995: 	subi.b	#'0',d1
01:00004DEA 4E75            	  1996: 	rts
                            	  1997: gthx5:
01:00004DEC 0C010041        	  1998: 	cmpi.b	#'A',d1
01:00004DF0 651E            	  1999: 	blo.s		gthx3
01:00004DF2 0C010046        	  2000: 	cmpi.b	#'F',d1
01:00004DF6 6206            	  2001: 	bhi.s		gthx6
01:00004DF8 060100C9        	  2002: 	addi.b	#10-'A',d1
01:00004DFC 4E75            	  2003: 	rts
                            	  2004: gthx6:
01:00004DFE 0C010061        	  2005: 	cmpi.b	#'a',d1
01:00004E02 650C            	  2006: 	blo.s		gthx3
01:00004E04 0C010066        	  2007: 	cmpi.b	#'f',d1
01:00004E08 6206            	  2008: 	bhi.s		gthx3
01:00004E0A 060100A9        	  2009: 	addi.b	#10-'a',d1
01:00004E0E 4E75            	  2010: 	rts
                            	  2011: gthx3:
01:00004E10 72FF            	  2012: 	moveq	#-1,d1		; not a hex number
01:00004E12 4E75            	  2013: 	rts
                            	  2014: 
                            	  2015: ;------------------------------------------------------------------------------
                            	  2016: ;------------------------------------------------------------------------------
                            	  2017: 
                            	  2018: DisplayTwoSpaces:
01:00004E14 2F01            	  2019: 	move.l	d1,-(a7)
01:00004E16 123C0020        	  2020: 	move.b	#' ',d1
01:00004E1A 6100EF8C        	  2021: 	bsr			DisplayChar
                            	  2022: dspspc1:
01:00004E1E 6100EF88        	  2023: 	bsr			DisplayChar
01:00004E22 221F            	  2024: 	move.l	(a7)+,d1
01:00004E24 4E75            	  2025: 	rts
                            	  2026: 
                            	  2027: DisplaySpace:
01:00004E26 2F01            	  2028: 	move.l	d1,-(a7)
01:00004E28 123C0020        	  2029: 	move.b	#' ',d1
01:00004E2C 60F0            	  2030: 	bra			dspspc1
                            	  2031: 
                            	  2032: ;------------------------------------------------------------------------------
                            	  2033: ; Display the 32 bit word in D1.L
                            	  2034: ;------------------------------------------------------------------------------
                            	  2035: 
                            	  2036: DisplayTetra:
01:00004E2E 4841            	  2037: 	swap	d1
01:00004E30 6102            	  2038: 	bsr		DisplayWyde
01:00004E32 4841            	  2039: 	swap	d1
                            	  2040: 
                            	  2041: ;------------------------------------------------------------------------------
                            	  2042: ; Display the byte in D1.W
                            	  2043: ;------------------------------------------------------------------------------
                            	  2044: 
                            	  2045: DisplayWyde:
01:00004E34 E059            	  2046: 	ror.w		#8,d1
01:00004E36 6102            	  2047: 	bsr			DisplayByte
01:00004E38 E159            	  2048: 	rol.w		#8,d1
                            	  2049: 
                            	  2050: ;------------------------------------------------------------------------------
                            	  2051: ; Display the byte in D1.B
                            	  2052: ;------------------------------------------------------------------------------
                            	  2053: 
                            	  2054: DisplayByte:
01:00004E3A E819            	  2055: 	ror.b		#4,d1
01:00004E3C 6102            	  2056: 	bsr			DisplayNybble
01:00004E3E E919            	  2057: 	rol.b		#4,d1
                            	  2058: 
                            	  2059: ;------------------------------------------------------------------------------
                            	  2060: ; Display nybble in D1.B
                            	  2061: ;------------------------------------------------------------------------------
                            	  2062: 
                            	  2063: DisplayNybble:
01:00004E40 2F01            	  2064: 	move.l	d1,-(a7)
01:00004E42 0201000F        	  2065: 	andi.b	#$F,d1
01:00004E46 06010030        	  2066: 	addi.b	#'0',d1
01:00004E4A 0C010039        	  2067: 	cmpi.b	#'9',d1
01:00004E4E 6302            	  2068: 	bls.s		.0001
01:00004E50 5E01            	  2069: 	addi.b	#7,d1
                            	  2070: .0001:
01:00004E52 6100EF54        	  2071: 	bsr			DisplayChar
01:00004E56 221F            	  2072: 	move.l	(a7)+,d1
01:00004E58 4E75            	  2073: 	rts
                            	  2074: 
                            	  2075: ;------------------------------------------------------------------------------
                            	  2076: ;------------------------------------------------------------------------------
                            	  2077: ;
                            	  2078: ;DisplayHexNumber:
                            	  2079: ;	move.w	#$A6A6,leds		; diagnostics
                            	  2080: ;	move.l	#VDGREG,a6
                            	  2081: ;	move.w	#7,d2		; number-1 of digits to display
                            	  2082: ;disphnum1:
                            	  2083: ;	move.b	d1,d0		; get digit into d0.b
                            	  2084: ;	andi.w	#$0f,d0
                            	  2085: ;	cmpi.w	#$09,d0
                            	  2086: ;	bls.s	disphnum2
                            	  2087: ;	addi.w	#7,d0
                            	  2088: ;disphnum2:
                            	  2089: ;	addi.w	#$30,d0	; convert to display char
                            	  2090: ;	move.w	d2,d3		; char count into d3
                            	  2091: ;	asl.w	#3,d3		; scale * 8
                            	  2092: ;disphnum3:
                            	  2093: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  2094: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  2095: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  2096: ;	ext.w	d0						; zero out high order bits
                            	  2097: ;	move.w	d0,$420(a6)			; set char code
                            	  2098: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  2099: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  2100: ;	move.w	d3,$426(a6)			; set x pos
                            	  2101: ;	move.w	#8,$428(a6)			; set y pos
                            	  2102: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  2103: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  2104: ;	ror.l	#4,d1					; rot to next digit
                            	  2105: ;	dbeq	d2,disphnum1
                            	  2106: ;	jmp		(a5)
                            	  2107: 
                            	  2108: ;==============================================================================
                            	  2109: ; Load an S19 format file
                            	  2110: ;==============================================================================
                            	  2111: ;
                            	  2112: LoadS19:
01:00004E5A 6100EF02        	  2113: 	bsr			CRLF
01:00004E5E 6012            	  2114: 	bra			ProcessRec
                            	  2115: NextRec:
01:00004E60 61000164        	  2116: 	bsr			sGetChar
01:00004E64 0C00000A        	  2117: 	cmpi.b	#LF,d0
01:00004E68 66F6            	  2118: 	bne			NextRec
01:00004E6A 123C002E        	  2119: 	move.b	#'.',d1
01:00004E6E 6100EF38        	  2120: 	bsr			DisplayChar
                            	  2121: ProcessRec
01:00004E72 61000152        	  2122: 	bsr			sGetChar
01:00004E76 1800            	  2123: 	move.b	d0,d4
01:00004E78 0C04001A        	  2124: 	cmpi.b	#26,d4		; CTRL-Z ?
01:00004E7C 6700F9CE        	  2125: 	beq			Monitor
01:00004E80 0C040053        	  2126: 	cmpi.b	#'S',d4
01:00004E84 66DA            	  2127: 	bne			NextRec
01:00004E86 6100013E        	  2128: 	bsr			sGetChar
01:00004E8A 1800            	  2129: 	move.b	d0,d4
01:00004E8C 0C040030        	  2130: 	cmpi.b	#'0',d4
01:00004E90 65CE            	  2131: 	blo			NextRec
01:00004E92 0C040039        	  2132: 	cmpi.b	#'9',d4		; d4 = record type
01:00004E96 62C8            	  2133: 	bhi			NextRec
01:00004E98 6100012C        	  2134: 	bsr			sGetChar
01:00004E9C 6100FF3C        	  2135: 	bsr			AsciiToHexNybble
01:00004EA0 1401            	  2136: 	move.b	d1,d2
01:00004EA2 61000122        	  2137: 	bsr		sGetChar
01:00004EA6 6100FF32        	  2138: 	bsr		AsciiToHexNybble
01:00004EAA E90A            	  2139: 	lsl.b	#4,d2
01:00004EAC 8202            	  2140: 	or.b	d2,d1		; d1 = byte count
01:00004EAE 1601            	  2141: 	move.b	d1,d3		; d3 = byte count
01:00004EB0 0C040030        	  2142: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
01:00004EB4 67AA            	  2143: 	beq		NextRec
01:00004EB6 0C040031        	  2144: 	cmpi.b	#'1',d4
01:00004EBA 676C            	  2145: 	beq		ProcessS1
01:00004EBC 0C040032        	  2146: 	cmpi.b	#'2',d4
01:00004EC0 676A            	  2147: 	beq		ProcessS2
01:00004EC2 0C040033        	  2148: 	cmpi.b	#'3',d4
01:00004EC6 6768            	  2149: 	beq		ProcessS3
01:00004EC8 0C040035        	  2150: 	cmpi.b	#'5',d4		; record count record, ignore
01:00004ECC 6792            	  2151: 	beq		NextRec
01:00004ECE 0C040037        	  2152: 	cmpi.b	#'7',d4
01:00004ED2 6760            	  2153: 	beq		ProcessS7
01:00004ED4 0C040038        	  2154: 	cmpi.b	#'8',d4
01:00004ED8 6766            	  2155: 	beq		ProcessS8
01:00004EDA 0C040039        	  2156: 	cmpi.b	#'9',d4
01:00004EDE 676C            	  2157: 	beq		ProcessS9
01:00004EE0 6000FF7E        	  2158: 	bra		NextRec
                            	  2159: 
                            	  2160: pcssxa
01:00004EE4 024300FF        	  2161: 	andi.w	#$ff,d3
01:00004EE8 5343            	  2162: 	subi.w	#1,d3			; one less for dbra
                            	  2163: .0001
01:00004EEA 7400            	  2164: 	clr.l		d2
01:00004EEC 610000D8        	  2165: 	bsr			sGetChar
01:00004EF0 6100FEE8        	  2166: 	bsr			AsciiToHexNybble
01:00004EF4 E98A            	  2167: 	lsl.l		#4,d2
01:00004EF6 8401            	  2168: 	or.b		d1,d2
01:00004EF8 610000CC        	  2169: 	bsr			sGetChar
01:00004EFC 6100FEDC        	  2170: 	bsr			AsciiToHexNybble
01:00004F00 E98A            	  2171: 	lsl.l		#4,d2
01:00004F02 8401            	  2172: 	or.b		d1,d2
01:00004F04 12C2            	  2173: 	move.b	d2,(a1)+
01:00004F06 51CBFFE2        	  2174: 	dbra		d3,.0001
                            	  2175: ; Get the checksum byte
01:00004F0A 7400            	  2176: 	clr.l		d2
01:00004F0C 610000B8        	  2177: 	bsr			sGetChar
01:00004F10 6100FEC8        	  2178: 	bsr			AsciiToHexNybble
01:00004F14 E98A            	  2179: 	lsl.l		#4,d2
01:00004F16 8401            	  2180: 	or.b		d1,d2
01:00004F18 610000AC        	  2181: 	bsr			sGetChar
01:00004F1C 6100FEBC        	  2182: 	bsr			AsciiToHexNybble
01:00004F20 E98A            	  2183: 	lsl.l		#4,d2
01:00004F22 8401            	  2184: 	or.b		d1,d2
01:00004F24 6000FF3A        	  2185: 	bra			NextRec
                            	  2186: 
                            	  2187: ProcessS1:
01:00004F28 612E            	  2188: 	bsr			S19Get16BitAddress
01:00004F2A 60B8            	  2189: 	bra			pcssxa
                            	  2190: ProcessS2:
01:00004F2C 6136            	  2191: 	bsr			S19Get24BitAddress
01:00004F2E 60B4            	  2192: 	bra			pcssxa
                            	  2193: ProcessS3:
01:00004F30 613E            	  2194: 	bsr			S19Get32BitAddress
01:00004F32 60B0            	  2195: 	bra			pcssxa
                            	  2196: ProcessS7:
01:00004F34 613A            	  2197: 	bsr			S19Get32BitAddress
01:00004F36 23C900040008    	  2198: 	move.l	a1,S19StartAddress
01:00004F3C 6000F90E        	  2199: 	bra			Monitor
                            	  2200: ProcessS8:
01:00004F40 6122            	  2201: 	bsr			S19Get24BitAddress
01:00004F42 23C900040008    	  2202: 	move.l	a1,S19StartAddress
01:00004F48 6000F902        	  2203: 	bra			Monitor
                            	  2204: ProcessS9:
01:00004F4C 610A            	  2205: 	bsr			S19Get16BitAddress
01:00004F4E 23C900040008    	  2206: 	move.l	a1,S19StartAddress
01:00004F54 6000F8F6        	  2207: 	bra			Monitor
                            	  2208: 
                            	  2209: S19Get16BitAddress:
01:00004F58 7400            	  2210: 	clr.l		d2
01:00004F5A 616A            	  2211: 	bsr			sGetChar
01:00004F5C 6100FE7C        	  2212: 	bsr			AsciiToHexNybble
01:00004F60 1401            	  2213: 	move.b	d1,d2
01:00004F62 603E            	  2214: 	bra			S1932b
                            	  2215: 
                            	  2216: S19Get24BitAddress:
01:00004F64 7400            	  2217: 	clr.l	d2
01:00004F66 615E            	  2218: 	bsr		sGetChar
01:00004F68 6100FE70        	  2219: 	bsr		AsciiToHexNybble
01:00004F6C 1401            	  2220: 	move.b	d1,d2
01:00004F6E 601E            	  2221: 	bra		S1932a
                            	  2222: 
                            	  2223: S19Get32BitAddress:
01:00004F70 7400            	  2224: 	clr.l	d2
01:00004F72 6152            	  2225: 	bsr			sGetChar
01:00004F74 6100FE64        	  2226: 	bsr			AsciiToHexNybble
01:00004F78 1401            	  2227: 	move.b	d1,d2
01:00004F7A 614A            	  2228: 	bsr			sGetChar
01:00004F7C 6100FE5C        	  2229: 	bsr			AsciiToHexNybble
01:00004F80 E98A            	  2230: 	lsl.l		#4,d2
01:00004F82 8401            	  2231: 	or.b		d1,d2
01:00004F84 6140            	  2232: 	bsr			sGetChar
01:00004F86 6100FE52        	  2233: 	bsr			AsciiToHexNybble
01:00004F8A E98A            	  2234: 	lsl.l		#4,d2
01:00004F8C 8401            	  2235: 	or.b		d1,d2
                            	  2236: S1932a:
01:00004F8E 6136            	  2237: 	bsr			sGetChar
01:00004F90 6100FE48        	  2238: 	bsr			AsciiToHexNybble
01:00004F94 E98A            	  2239: 	lsl.l		#4,d2
01:00004F96 8401            	  2240: 	or.b		d1,d2
01:00004F98 612C            	  2241: 	bsr			sGetChar
01:00004F9A 6100FE3E        	  2242: 	bsr			AsciiToHexNybble
01:00004F9E E98A            	  2243: 	lsl.l		#4,d2
01:00004FA0 8401            	  2244: 	or.b		d1,d2
                            	  2245: S1932b:
01:00004FA2 6122            	  2246: 	bsr			sGetChar
01:00004FA4 6100FE34        	  2247: 	bsr			AsciiToHexNybble
01:00004FA8 E98A            	  2248: 	lsl.l		#4,d2
01:00004FAA 8401            	  2249: 	or.b		d1,d2
01:00004FAC 6118            	  2250: 	bsr			sGetChar
01:00004FAE 6100FE2A        	  2251: 	bsr			AsciiToHexNybble
01:00004FB2 E98A            	  2252: 	lsl.l		#4,d2
01:00004FB4 8401            	  2253: 	or.b		d1,d2
01:00004FB6 610E            	  2254: 	bsr			sGetChar
01:00004FB8 6100FE20        	  2255: 	bsr			AsciiToHexNybble
01:00004FBC E98A            	  2256: 	lsl.l		#4,d2
01:00004FBE 8401            	  2257: 	or.b		d1,d2
01:00004FC0 7800            	  2258: 	clr.l		d4
01:00004FC2 2242            	  2259: 	move.l	d2,a1
01:00004FC4 4E75            	  2260: 	rts
                            	  2261: 
                            	  2262: ;------------------------------------------------------------------------------
                            	  2263: ; Get a character from auxillary input, checking the keyboard status for a
                            	  2264: ; CTRL-C
                            	  2265: ;------------------------------------------------------------------------------
                            	  2266: ;
                            	  2267: sGetChar:
01:00004FC6 6100F282        	  2268: 	bsr			CheckForKey
01:00004FCA 670C            	  2269: 	beq			.0001
01:00004FCC 7005            	  2270: 	moveq		#5,d0					; GetKey
01:00004FCE 4E4F            	  2271: 	trap		#15
01:00004FD0 0C010003        	  2272: 	cmpi.b	#CTRLC,d1
01:00004FD4 6700F876        	  2273: 	beq			Monitor
                            	  2274: .0001:
01:00004FD8 7021            	  2275: 	moveq		#33,d0				; serial peek character direct
01:00004FDA 4E4F            	  2276: 	trap		#15
01:00004FDC 0C81FFFFFFFF    	  2277: 	cmpi.l	#-1,d1
01:00004FE2 67E2            	  2278: 	beq			sGetChar
01:00004FE4 4E75            	  2279: 	rts
                            	  2280: 
                            	  2281: AudioInputTest:
01:00004FE6 4E75            	  2282: 	rts
                            	  2283: BouncingBalls:
01:00004FE8 4E75            	  2284: 	rts
                            	  2285: GraphicsDemo:
01:00004FEA 4E75            	  2286: 	rts
                            	  2287: ClearScreen:
01:00004FEC 6000ED18        	  2288: 	bra		clear_screen
01:00004FF0 4E75            	  2289: 	rts
                            	  2290: 
                            	  2291: AUXIN:
                            	  2292: 
                            	  2293: ;------------------------------------------------------------------------------
                            	  2294: ; Initialize the serial port an enhanced 6551 circuit.
                            	  2295: ;
                            	  2296: ; Select internal baud rate clock divider for 9600 baud
                            	  2297: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	  2298: ; Note that the byte order is swapped.
                            	  2299: ;------------------------------------------------------------------------------
                            	  2300: 
                            	  2301: SerialInit:
                            	  2302: ;	move.l	#$1E00F700,d0				; fifos enabled
01:00004FF2 203C1E000000    	  2303: 	move.l	#$1E000000,d0				; fifos disabled
01:00004FF8 23C0FD06000C    	  2304: 	move.l	d0,ACIA+ACIA_CTRL
01:00004FFE 4E75            	  2305: 	rts
                            	  2306: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	  2307: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2308: ;	move.l	#300000,d2					; wait 100 ms
                            	  2309: ;	bra			.0001
                            	  2310: ;.0003:
                            	  2311: ;	swap		d2
                            	  2312: ;.0001:
                            	  2313: ;	nop
                            	  2314: ;	dbra		d2,.0001
                            	  2315: ;.0002:
                            	  2316: ;	swap		d2
                            	  2317: ;	dbra		d2,.0003
                            	  2318: ;	move.l	#$07000000,d0				; clear break
                            	  2319: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2320: ;	rts
                            	  2321: 	
                            	  2322: ;------------------------------------------------------------------------------
                            	  2323: ; SerialPeekChar
                            	  2324: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2325: ; buffer.
                            	  2326: ;
                            	  2327: ; Stack Space:
                            	  2328: ;		0 words
                            	  2329: ; Parameters:
                            	  2330: ;		none
                            	  2331: ; Modifies:
                            	  2332: ;		d
                            	  2333: ; Returns:
                            	  2334: ;		d1 = character or -1
                            	  2335: ;------------------------------------------------------------------------------
                            	  2336: 
                            	  2337: SerialPeekCharDirect:
01:00005000 2239FD060004    	  2338: 	move.l	ACIA+ACIA_STAT,d1	; get serial status
01:00005006 E159            	  2339: 	rol.w		#8,d1							; swap byte order
01:00005008 4841            	  2340: 	swap		d1
01:0000500A E159            	  2341: 	rol.w		#8,d1
01:0000500C 08010003        	  2342: 	btst		#3,d1							; look for Rx not empty
01:00005010 670A            	  2343: 	beq.s		.0001
01:00005012 7200            	  2344: 	moveq.l	#0,d1							; clear upper bits of return value
01:00005014 1239FD060000    	  2345: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
01:0000501A 4E75            	  2346: 	rts												; return
                            	  2347: .0001:
01:0000501C 72FF            	  2348: 	moveq		#-1,d1
01:0000501E 4E75            	  2349: 	rts
                            	  2350: 
                            	  2351: bus_err:
                            	  2352: .0001:
01:00005020 4E71            	  2353: 	nop
01:00005022 60FC            	  2354: 	bra			.0001
                            	  2355: 
                            	  2356: ;------------------------------------------------------------------------------
                            	  2357: ; SerialPutChar
                            	  2358: ;    Put a character to the serial transmitter. This routine blocks until the
                            	  2359: ; transmitter is empty. 
                            	  2360: ;
                            	  2361: ; Stack Space
                            	  2362: ;		0 words
                            	  2363: ; Parameters:
                            	  2364: ;		d1.b = character to put
                            	  2365: ; Modifies:
                            	  2366: ;		none
                            	  2367: ;------------------------------------------------------------------------------
                            	  2368: 
                            	  2369: SerialPutChar:
01:00005024 48E7C000        	  2370: 	movem.l	d0/d1,-(a7)				; push d0,d1
                            	  2371: .0001:
01:00005028 2039FD060004    	  2372: 	move.l	ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
01:0000502E E158            	  2373: 	rol.w		#8,d0
01:00005030 4840            	  2374: 	swap		d0
01:00005032 E158            	  2375: 	rol.w		#8,d0
01:00005034 08000004        	  2376: 	btst		#4,d0							; bit #4 of the status reg
01:00005038 67EE            	  2377: 	beq.s		.0001			    		; branch if transmitter is not empty
01:0000503A E159            	  2378: 	rol.w		#8,d1
01:0000503C 4841            	  2379: 	swap		d1
01:0000503E E159            	  2380: 	rol.w		#8,d1
01:00005040 23C1FD060000    	  2381: 	move.l	d1,ACIA+ACIA_TX		; send the byte
01:00005046 4CDF0003        	  2382: 	movem.l	(a7)+,d0/d1				; pop d0,d1
01:0000504A 4E75            	  2383: 	rts
                            	  2384: ;------------------------------------------------------------------------------
                            	  2385: ;------------------------------------------------------------------------------
                            	  2386: 
                            	  2387: trap3:
                            	  2388: 	; First save all registers
01:0000504C 48F9FFFF00040100	  2389: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
01:00005054 33DF00040140    	  2390: 	move.w		(a7)+,Regsave+$40
01:0000505A 23DF00040144    	  2391: 	move.l		(a7)+,Regsave+$44
01:00005060 2E7C00040FFC    	  2392: 	move.l		#$40FFC,a7			; reset stack pointer
01:00005066 46FC2500        	  2393: 	move.w		#$2500,sr				; enable interrupts
01:0000506A 303900040202    	  2394: 	move.w		NumSetBreakpoints,d0
01:00005070 5340            	  2395: 	subi.w		#1,d0
01:00005072 41F900040220    	  2396: 	lea				Breakpoints,a0
01:00005078 223900040144    	  2397: 	move.l		Regsave+$44,d1
                            	  2398: .0001:
01:0000507E B298            	  2399: 	cmp.l			(a0)+,d1
01:00005080 6708            	  2400: 	beq.s			ProcessBreakpoint
01:00005082 51C8FFFA        	  2401: 	dbra			d0,.0001
01:00005086 6000F7C4        	  2402: 	bra				Monitor					; not a breakpoint
                            	  2403: ProcessBreakpoint:
01:0000508A 6104            	  2404: 	bsr				DisarmAllBreakpoints
01:0000508C 6000FC76        	  2405: 	bra				DumpRegs
                            	  2406: 
                            	  2407: ;------------------------------------------------------------------------------
                            	  2408: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  2409: ;------------------------------------------------------------------------------
                            	  2410: 
                            	  2411: DisarmAllBreakpoints:
01:00005090 48E780E0        	  2412: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
01:00005094 303900040202    	  2413: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
01:0000509A 0C400008        	  2414: 	cmpi.w	#numBreakpoints,d0		; check for valid number
01:0000509E 641A            	  2415: 	bhs.s		.0001
01:000050A0 45F900040220    	  2416: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
01:000050A6 41F900040280    	  2417: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
01:000050AC 6004            	  2418: 	bra.s		.0003									; enter loop at bottom
                            	  2419: .0002:
01:000050AE 225A            	  2420: 	move.l	(a2)+,a1							; a1 = address of breakpoint
01:000050B0 3298            	  2421: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  2422: .0003:
01:000050B2 51C8FFFA        	  2423: 	dbra		d0,.0002
01:000050B6 4CDF0701        	  2424: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  2425: .0001:
01:000050BA 4E75            	  2426: 	rts	
                            	  2427: 
                            	  2428: ;------------------------------------------------------------------------------
                            	  2429: ; ArmAllBreakpoints, used when entering the monitor.
                            	  2430: ;------------------------------------------------------------------------------
                            	  2431: 
                            	  2432: ArmAllBreakpoints:
01:000050BC 48E780E0        	  2433: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
01:000050C0 303900040202    	  2434: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:000050C6 0C400008        	  2435: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
01:000050CA 641E            	  2436: 	bhs.s			.0001
01:000050CC 45F900040220    	  2437: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
01:000050D2 41F900040280    	  2438: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
01:000050D8 6008            	  2439: 	bra.s			.0003									; enter loop at bottom
                            	  2440: .0002:
01:000050DA 225A            	  2441: 	move.l		(a2)+,a1							; a1 = address of breakpoint
01:000050DC 3091            	  2442: 	move.w		(a1),(a0)							; copy instruction word to table
01:000050DE 30FC4E43        	  2443: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  2444: .0003:
01:000050E2 51C8FFF6        	  2445: 	dbra			d0,.0002
01:000050E6 4CDF0701        	  2446: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  2447: .0001:
01:000050EA 4E75            	  2448: 	rts	
                            	  2449: 
                            	  2450: ;------------------------------------------------------------------------------
                            	  2451: ;------------------------------------------------------------------------------
                            	  2452: 
                            	  2453: ArmBreakpoint:
01:000050EC 48E7E0E0        	  2454: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
01:000050F0 303900040202    	  2455: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:000050F6 0C400008        	  2456: 	cmpi.w		#numBreakpoints,d0		; check if too many
01:000050FA 645A            	  2457: 	bhs.s			.0001
01:000050FC 527900040202    	  2458: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
01:00005102 2400            	  2459: 	move.l		d0,d2
01:00005104 6100FB08        	  2460: 	bsr				ignBlanks
01:00005108 6100FCA4        	  2461: 	bsr				GetHexNumber
01:0000510C 6748            	  2462: 	beq.s			.0001									; was there an address?
01:0000510E 08010000        	  2463: 	btst			#0,d1									; address value must be even
01:00005112 6642            	  2464: 	bne.s			.0001
                            	  2465: 	; See if the breakpoint is in the table already
01:00005114 43F900040220    	  2466: 	lea				Breakpoints,a1				; a1 points to breakpoint table
01:0000511A 343C0007        	  2467: 	move.w		#numBreakpoints-1,d2
                            	  2468: .0002:
01:0000511E B299            	  2469: 	cmp.l			(a1)+,d1
01:00005120 673A            	  2470: 	beq.s			.0003									; breakpoint is in table already
01:00005122 51CAFFFA        	  2471: 	dbra			d2,.0002
                            	  2472: 	; Add breakpoint to table
                            	  2473: 	; Search for empty entry
01:00005126 43F900040220    	  2474: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
01:0000512C 4242            	  2475: 	clr.w			d2										; d2 = count
                            	  2476: .0006:
01:0000512E 4A91            	  2477: 	tst.l			(a1)									; is the entry empty?
01:00005130 670C            	  2478: 	beq.s			.0005									; branch if found empty entry
01:00005132 5889            	  2479: 	lea				4(a1),a1							; point to next entry
01:00005134 5242            	  2480: 	addi.w		#1,d2									; increment count
01:00005136 0C420008        	  2481: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
01:0000513A 65F2            	  2482: 	blo.s			.0006
01:0000513C 6018            	  2483: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  2484: .0005:
01:0000513E E542            	  2485: 	asl.w			#2,d2									; d2 = long word index
01:00005140 23812000        	  2486: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
01:00005144 2441            	  2487: 	move.l		d1,a2
01:00005146 E24A            	  2488: 	lsr.w			#1,d2									; d2 = word index
                            	  2489: .0004:
01:00005148 43F900040280    	  2490: 	lea				BreakpointWords,a1
01:0000514E 33922000        	  2491: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
01:00005152 34BC4E43        	  2492: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  2493: .0001:
01:00005156 4CDF0707        	  2494: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
01:0000515A 4E75            	  2495: 	rts
                            	  2496: .0003:
01:0000515C 2469FFFC        	  2497: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
01:00005160 0C524E43        	  2498: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
01:00005164 67F0            	  2499: 	beq.s			.0001
01:00005166 D482            	  2500: 	asl.l			#1,d2									; d2 = word index
01:00005168 60DE            	  2501: 	bra.s			.0004
                            	  2502: 
                            	  2503: 
                            	  2504: ;------------------------------------------------------------------------------
                            	  2505: ;------------------------------------------------------------------------------
                            	  2506: 
                            	  2507: DisarmBreakpoint:
01:0000516A 48E7E0E0        	  2508: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
01:0000516E 303900040202    	  2509: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
01:00005174 0C400008        	  2510: 	cmpi.w		#numBreakpoints,d0		; check if too many
01:00005178 623E            	  2511: 	bhi.s			.0001
01:0000517A 2400            	  2512: 	move.l		d0,d2
01:0000517C 6100FA90        	  2513: 	bsr				ignBlanks
01:00005180 6100FC2C        	  2514: 	bsr				GetHexNumber
01:00005184 6732            	  2515: 	beq.s			.0001									; was there an address?
01:00005186 08010000        	  2516: 	btst			#0,d1									; address value must be even
01:0000518A 662C            	  2517: 	bne.s			.0001
                            	  2518: 	; See if the breakpoint is in the table already
01:0000518C 43F900040220    	  2519: 	lea				Breakpoints,a1				; a1 points to breakpoint table
01:00005192 5342            	  2520: 	subi.w		#1,d2
                            	  2521: .0002:
01:00005194 B299            	  2522: 	cmp.l			(a1)+,d1
01:00005196 6706            	  2523: 	beq.s			.0003									; breakpoint is in table already
01:00005198 51CAFFFA        	  2524: 	dbra			d2,.0002
01:0000519C 601A            	  2525: 	bra				.0001									; breakpoint was not in table
                            	  2526: .0003:
                            	  2527: 	; Remove breakpoint from table
01:0000519E 537900040202    	  2528: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
01:000051A4 2469FFFC        	  2529: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
01:000051A8 42A9FFFC        	  2530: 	clr.l			-4(a1)								; empty out breakpoint
01:000051AC 43F900040280    	  2531: 	lea				BreakpointWords,a1
01:000051B2 D482            	  2532: 	asl.l			#1,d2									; d2 = word index
01:000051B4 34B12000        	  2533: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  2534: .0001:
01:000051B8 4CDF0707        	  2535: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
01:000051BC 4E75            	  2536: 	rts
                            	  2537: 
                            	  2538: ;------------------------------------------------------------------------------
                            	  2539: ;------------------------------------------------------------------------------
                            	  2540: 
                            	  2541: ListBreakpoints:
01:000051BE 6100EB9E        	  2542: 	bsr			CRLF
01:000051C2 343C0008        	  2543: 	move.w	#numBreakpoints,d2
01:000051C6 43F900040220    	  2544: 	lea			Breakpoints,a1
                            	  2545: .0001:
01:000051CC 2219            	  2546: 	move.l	(a1)+,d1
01:000051CE 6100FC5E        	  2547: 	bsr			DisplayTetra
01:000051D2 6100EB8A        	  2548: 	bsr			CRLF
01:000051D6 51CAFFF4        	  2549: 	dbra		d2,.0001
01:000051DA 6000F670        	  2550: 	bra			Monitor
                            	  2551: 
                            	  2552: ;------------------------------------------------------------------------------
                            	  2553: ;------------------------------------------------------------------------------
                            	  2554: 
                            	  2555: ClearBreakpointList:
01:000051DE 343C0008        	  2556: 	move.w	#numBreakpoints,d2
01:000051E2 43F900040220    	  2557: 	lea			Breakpoints,a1
                            	  2558: .0001:
01:000051E8 4299            	  2559: 	clr.l		(a1)+
01:000051EA 51CAFFFC        	  2560: 	dbra		d2,.0001
01:000051EE 4E75            	  2561: 	rts
                            	  2562: 
                            	  2563: ;------------------------------------------------------------------------------
                            	  2564: ;------------------------------------------------------------------------------
                            	  2565: 
                            	  2566: irq_rout:
01:000051F0 48E7C080        	  2567: 	movem.l	d0/d1/a0,-(a7)
01:000051F4 7201            	  2568: 	moveq		#1,d1
                            	  2569: ;	bsr			LockSemaphore
01:000051F6 6100EFEA        	  2570: 	bsr			_KeybdGetStatus		; check if timer or keyboard
01:000051FA 6A66            	  2571: 	bpl.s		.0001							; branch if not keyboard
01:000051FC 0839000100100010	  2572: 	btst		#1,_KeyState2			; Is Alt down?
01:00005204 6728            	  2573: 	beq.s		.0003
01:00005206 1039FD0FFE00    	  2574: 	move.b	KEYBD,d0					; get scan code
01:0000520C 0C00000D        	  2575: 	cmpi.b	#SC_TAB,d0				; is Alt-Tab?
01:00005210 661C            	  2576: 	bne.s		.0003
01:00005212 6100EFD8        	  2577: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
01:00005216 6100EF6E        	  2578: 	bsr			rotate_iofocus
01:0000521A 423900100011    	  2579: 	clr.b		_KeybdHead				; clear keyboard buffer
01:00005220 423900100012    	  2580: 	clr.b		_KeybdTail
01:00005226 423900100013    	  2581: 	clr.b		_KeybdCnt
01:0000522C 6048            	  2582: 	bra			.0002							; do not store Alt-Tab
                            	  2583: .0003:
                            	  2584: 	; Insert keyboard scan code into raw keyboard buffer
01:0000522E 6100EFBC        	  2585: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
01:00005232 0C39002000100013	  2586: 	cmpi.b	#32,_KeybdCnt			; see if keyboard buffer full
01:0000523A 643A            	  2587: 	bhs.s		.0002
01:0000523C 103900100012    	  2588: 	move.b	_KeybdTail,d0			; keyboard buffer not full, add to tail
01:00005242 4880            	  2589: 	ext.w		d0
01:00005244 41F900100020    	  2590: 	lea			_KeybdBuf,a0			; a0 = pointer to buffer
01:0000524A 11810000        	  2591: 	move.b	d1,(a0,d0.w)			; put scancode in buffer
01:0000524E 5200            	  2592: 	addi.b	#1,d0							; increment tail index
01:00005250 0200001F        	  2593: 	andi.b	#31,d0						; wrap at buffer limit
01:00005254 13C000100012    	  2594: 	move.b	d0,_KeybdTail			; update tail index
01:0000525A 523900100013    	  2595: 	addi.b	#1,_KeybdCnt			; increment buffer count
01:00005260 6014            	  2596: 	bra			.0002
                            	  2597: .0001:
01:00005262 23FC1D000000FD09	  2598: 	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
01:0000526A 0014
01:0000526C 207900040004    	  2599: 	move.l	TextScr,a0				; a0 = screen address
01:00005272 52A80028        	  2600: 	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  2601: .0002:	
01:00005276 7201            	  2602: 	moveq		#1,d1
01:00005278 6100AEC0        	  2603: 	bsr			UnlockSemaphore
01:0000527C 4CDF0103        	  2604: 	movem.l	(a7)+,d0/d1/a0		; return
01:00005280 4E73            	  2605: 	rte
                            	  2606: 
                            	  2607: nmi_rout:
01:00005282 48E7C080        	  2608: 	movem.l	d0/d1/a0,-(a7)
01:00005286 123C004E        	  2609: 	move.b	#'N',d1
01:0000528A 6100EB1C        	  2610: 	bsr			DisplayChar
01:0000528E 4CDF0103        	  2611: 	movem.l	(a7)+,d0/d1/a0		; return
01:00005292 4E73            	  2612: 	rte
                            	  2613: 
                            	  2614: brdisp_trap:
01:00005294 48F9FFFF00040100	  2615: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
01:0000529C 33DF00040140    	  2616: 	move.w	(a7)+,Regsave+$40
01:000052A2 23DF00040144    	  2617: 	move.l	(a7)+,Regsave+$44
01:000052A8 2E7C00040FFC    	  2618: 	move.l	#$40FFC,a7			; reset stack pointer
01:000052AE 46FC2500        	  2619: 	move.w	#$2500,sr				; enable interrupts
01:000052B2 43FA0069        	  2620: 	lea			msg_bad_branch_disp,a1
01:000052B6 6100ED4E        	  2621: 	bsr			DisplayString
01:000052BA 6100FB6A        	  2622: 	bsr			DisplaySpace
01:000052BE 223900040144    	  2623: 	move.l	Regsave+$44,d1	; exception address
01:000052C4 6100FB68        	  2624: 	bsr			DisplayTetra		; and display it
                            	  2625: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
01:000052C8 6000FA3A        	  2626: 	bra			DumpRegs
                            	  2627: 
                            	  2628: illegal_trap:
01:000052CC 544F            	  2629: 	addq		#2,sp						; get rid of sr
01:000052CE 221F            	  2630: 	move.l	(sp)+,d1				; pop exception address
01:000052D0 6100FB5C        	  2631: 	bsr			DisplayTetra		; and display it
01:000052D4 43FA0035        	  2632: 	lea			msg_illegal,a1	; followed by message
01:000052D8 6100ED2C        	  2633: 	bsr			DisplayString
                            	  2634: .0001:
01:000052DC 60FE            	  2635: 	bra			.0001
01:000052DE 6000F56C        	  2636: 	bra			Monitor
                            	  2637: 	
                            	  2638: ; -----------------------------------------------------------------------------
                            	  2639: ; -----------------------------------------------------------------------------
                            	  2640: 
                            	  2641: msg_start:
01:000052E2 726636386B205379	  2642: 	dc.b	"rf68k System Starting",CR,LF,0
01:000052EA 7374656D20537461
01:000052F2 7274696E67
01:000052F7 0D
01:000052F8 0A
01:000052F9 00
                            	  2643: msg_core_start:
01:000052FA 20636F7265207374	  2644: 	dc.b	" core starting",CR,LF,0
01:00005302 617274696E67
01:00005308 0D
01:00005309 0A
01:0000530A 00
                            	  2645: msg_illegal:
01:0000530B 20696C6C6567616C	  2646: 	dc.b	" illegal opcode",CR,LF,0
01:00005313 206F70636F6465
01:0000531A 0D
01:0000531B 0A
01:0000531C 00
                            	  2647: msg_bad_branch_disp:
01:0000531D 206272616E636820	  2648: 	dc.b	" branch selfref: ",0
01:00005325 73656C667265663A
01:0000532D 20
01:0000532E 00
                            	  2649: msg_test_done:
01:0000532F 2043505520746573	  2650: 	dc.b	" CPU test done.",0
01:00005337 7420646F6E652E
01:0000533E 00
                            	  2651: 
                            	  2652: 
                            	  2653: 
                            	  2654: 


Symbols by name:
ABCD_INNER1                     01:00002508
ABCD_INNER2                     01:00002576
ABCD_NO_C1                      01:00002524
ABCD_NO_C2                      01:0000252C
ABCD_NO_C3                      01:00002592
ABCD_NO_C4                      01:0000259A
ABCD_OUTER1                     01:00002506
ABCD_OUTER2                     01:00002574
ACIA                             E:FD060000
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     01:0000306E
ADDQ_LOOP1                      01:00002888
ADDQ_LOOP2                      01:000028C6
ADDQ_LOOP3                      01:000028FC
ADDX_LOOP3                      01:00003194
ADDX_LOOP4                      01:000031B0
ADDX_LOOP5                      01:000031CC
ADDX_OUTER1                     01:00003100
ADD_OUTER1                      01:00002E94
ADD_OUTER2                      01:00002F08
ALL_DONE                        01:00000264
AND_OUTER1                      01:00002BB2
AND_OUTER2                      01:00002C26
AUXIN                           01:00004FF2
ArmAllBreakpoints               01:000050BC
ArmBreakpoint                   01:000050EC
AsciiToHexNybble                01:00004DDA
AudioInputTest                  01:00004FE6
BCC1                            01:000027AE
BCC10                           01:00002800
BCC11                           01:00002808
BCC12                           01:00002812
BCC13                           01:0000281A
BCC14                           01:00002824
BCC2                            01:000027B8
BCC3                            01:000027C0
BCC4                            01:000027CA
BCC5                            01:000027D2
BCC6                            01:000027DC
BCC7                            01:000027E4
BCC8                            01:000027EE
BCC9                            01:000027F6
BSR_CLOSE1                      01:0000134E
BSR_CLOSE2                      01:00001384
BSR_FAR1                        01:00000266
BSR_FAR2                        01:0000279E
BlankLastLine                   01:00003FB0
BouncingBalls                   01:00004FE8
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
CMPA_OUTER1                     01:00002D88
CMPM_LOOP1                      01:00002E16
CMPM_LOOP2                      01:00002E30
CMPM_LOOP3                      01:00002E4A
CMP_OUTER1                      01:00002D12
CR                               E:0000000D
CRLF                            01:00003D5E
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CalcScreenLoc                   01:00003D9A
CheckForCtrlC                   01:00004290
CheckForKey                     01:0000424A
ClearBreakpointList             01:000051DE
ClearScreen                     01:00004FEC
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
Cursor1                         01:0000413C
CursorCol                        E:00040001
CursorRow                        E:00040000
DBCC_LOOP1                      01:0000282E
DBCC_LOOP2                      01:0000283C
DIVS_OUTER1                     01:00002A72
DIVU_OUTER1                     01:00002A20
DecrementSemaphore              01:0000011A
Delay3s                         01:0000015A
DisarmAllBreakpoints            01:00005090
DisarmBreakpoint                01:0000516A
DisplayByte                     01:00004E3A
DisplayChar                     01:00003DA8
DisplayHelp                     01:00004994
DisplayMem                      01:00004CA8
DisplayNybble                   01:00004E40
DisplaySpace                    01:00004E26
DisplayString                   01:00004006
DisplayStringCRLF               01:0000401C
DisplayStringLimited            01:00004022
DisplayStringLimitedCRLF        01:00004042
DisplayTetra                    01:00004E2E
DisplayTwoSpaces                01:00004E14
DisplayWyde                     01:00004E34
DumpMem                         01:00004C7A
DumpMem1                        01:00004C96
DumpRegs                        01:00004D04
EOR_OUTER2                      01:00002C9C
EXCEPTION_6                     01:00000270
EXCEPTION_7                     01:00000280
EditMem                         01:00004C20
ExecuteCode                     01:00004C6C
FillMem                         01:00004BC8
FromScreen                      01:00004836
GetCmdLine                      01:00004AC0
GetHexNumber                    01:00004DAE
GetKey                          01:00004256
GraphicsDemo                    01:00004FEA
HelpMsg                         01:000049A0
HomeCursor                      01:00004048
IOFocus                          E:00100000
IncCursorPos                    01:00003F22
IncCursorRow                    01:00003F42
IncrementSemaphore              01:00000102
InitSemaphores                  01:000000C0
KEYBD                            E:FD0FFE00
KeybdEcho                        E:0004000C
KeybdGetChar                    01:000042B0
KeybdGetCharNoWait              01:000042A0
KeybdGetCharWait                01:000042A8
KeybdLEDs                        E:0010000E
KeybdRecvByte                   01:000041FC
KeybdSendByte                   01:0000451E
KeybdSetLEDStatus               01:000044B2
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     01:0000421C
LEA1                            01:00001D5A
LF                               E:0000000A
ListBreakpoints                 01:000051BE
LoadS19                         01:00004E5A
LockSemaphore                   01:00000134
MOVE1                           01:000019C8
MOVE2                           01:0000194C
MOVE3                           01:00001A48
MOVE4                           01:00001BA2
MULS_OUTER1                     01:00003368
MULU_OUTER1                     01:0000331C
Monitor                         01:0000484C
NBCD_LOOP                       01:000026EE
NBCD_LOOP1                      01:00002734
NBCD_NO_C                       01:000026FA
NBCD_NO_C1                      01:00002748
NBCD_NO_Z                       01:000026FE
NBCD_NO_Z1                      01:0000274C
NextRec                         01:00004E60
NumSetBreakpoints                E:00040202
OR_OUTER1                       01:00002AC8
OR_OUTER2                       01:00002B3C
PLIC                             E:FD090000
ProcessBreakpoint               01:0000508A
ProcessRec                      01:00004E72
ProcessS1                       01:00004F28
ProcessS2                       01:00004F2C
ProcessS3                       01:00004F30
ProcessS7                       01:00004F34
ProcessS8                       01:00004F40
ProcessS9                       01:00004F4C
Prompt1                         01:00004884
Prompt2                         01:00004896
Prompt3                         01:0000486E
PromptLn                        01:00004862
ROXx_FLAGS                      01:00003630
ROXx_LOOP1                      01:00003646
ROXx_LOOP2                      01:00003666
ROXx_LOOP3                      01:00003686
ROXx_LOOP4                      01:000036A6
ROXx_LOOP5                      01:000036C6
ROXx_LOOP6                      01:000036E8
ROx_FLAGS                       01:000033FA
ROx_LOOP1                       01:00003410
ROx_LOOP2                       01:00003430
ROx_LOOP3                       01:00003450
ROx_LOOP4                       01:00003470
ROx_LOOP5                       01:00003490
ROx_LOOP6                       01:000034B2
RTR_DONE                        01:00002790
ReceiveSerial                   01:00004B94
Regsave                          E:00040100
S1932a                          01:00004F8E
S1932b                          01:00004FA2
S19Get16BitAddress              01:00004F58
S19Get24BitAddress              01:00004F64
S19Get32BitAddress              01:00004F70
S19StartAddress                  E:00040008
SBCD_INNER1                     01:00002600
SBCD_INNER2                     01:0000266E
SBCD_NO_C1                      01:0000261C
SBCD_NO_C2                      01:00002624
SBCD_NO_C3                      01:0000268A
SBCD_NO_C4                      01:00002692
SBCD_OUTER1                     01:000025FE
SBCD_OUTER2                     01:0000266C
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   01:00003AA8
SHIFTS2_LOOP1                   01:00003ABE
SHIFTS2_LOOP2                   01:00003ADA
SHIFTS2_LOOP3                   01:00003AF6
SHIFTS2_LOOP4                   01:00003B12
SHIFTS2_LOOP5                   01:00003B2E
SHIFTS2_LOOP6                   01:00003B4C
SHIFTS_FLAGS                    01:00003866
SHIFTS_LOOP1                    01:0000387C
SHIFTS_LOOP2                    01:0000389C
SHIFTS_LOOP3                    01:000038BC
SHIFTS_LOOP4                    01:000038DC
SHIFTS_LOOP5                    01:000038FC
SHIFTS_LOOP6                    01:0000391E
SUBA_OUTER1                     01:000030BA
SUBQ_LOOP1                      01:00002946
SUBQ_LOOP2                      01:00002980
SUBQ_LOOP3                      01:000029B6
SUBX_LOOP3                      01:000032A4
SUBX_LOOP4                      01:000032C0
SUBX_LOOP5                      01:000032DC
SUBX_OUTER1                     01:00003210
SUB_OUTER1                      01:00002F7E
SUB_OUTER2                      01:00002FF2
ScrollUp                        01:00003F76
SendSerial                      01:00004B64
SerialInit                      01:00004FF2
SerialPeekCharDirect            01:00005000
SerialPutChar                   01:00005024
SetKeyboardEcho                 01:00004242
StartMon                        01:00004842
StubRout                        01:00004172
SyncCursor                      01:0000405A
T15DispatchTable                01:0000409C
TEXTREG                          E:FD03FF00
TRAP15                          01:00004084
TestCLS                         01:00004952
TestSemaphore                   01:000000E6
TextCols                         E:0004008D
TextCurpos                       E:00040002
TextPos                          E:00040002
TextRows                         E:0004008C
TextScr                          E:00040004
UnlockSemaphore                 01:0000013A
UpdateTextPos                   01:00003D70
Wait10ms                        01:00004526
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdCnt                        E:00100013
_KeybdGetScancode               01:000041EC
_KeybdGetStatus                 01:000041E2
_KeybdHead                       E:00100011
_KeybdInit                      01:000041D4
_KeybdTail                       E:00100012
_keybdControlCodes              01:00004736
_keybdExtendedCodes             01:000047B6
_shiftedScanCodes               01:00004636
_unshiftedScanCodes             01:00004536
bkColor                          E:00040088
brdisp_trap                     01:00005294
bus_err                         01:00005020
clear_screen                    01:00003D06
cpu_test                        01:0000017E
dccr                            01:00003DD2
dclf                            01:00003EA2
dcx10                           01:00003E3A
dcx11                           01:00003E5C
dcx12                           01:00003E52
dcx14                           01:00003DC8
dcx16                           01:00003EA6
dcx4                            01:00003EAA
dcx6                            01:00003DF0
dcx7                            01:00003DCC
dcx8                            01:00003E06
dcx9                            01:00003E1C
dly3s1                          01:0000016A
dly3s2                          01:00000168
doBackspace                     01:00003EB4
doCtrlX                         01:00003EFE
doDelete                        01:00003EC2
do_nothing                      01:000000BA
dspj1                           01:0000400A
dspmem1                         01:00004CB8
dspspc1                         01:00004E1E
dsret                           01:00004016
edtmem1                         01:00004C28
fgColor                          E:00040084
fmem1                           01:00004BF4
fmemB                           01:00004C04
fmemL                           01:00004BEA
fmemW                           01:00004BFA
get_screen_address              01:00003CFE
get_screen_color                01:00003CD2
gthx3                           01:00004E10
gthx5                           01:00004DEC
gthx6                           01:00004DFE
icc1                            01:00003F74
ignBlanks                       01:00004C0E
illegal_trap                    01:000052CC
init_plic                       01:000041B2
irq_rout                        01:000051F0
leds                             E:FD0FFF00
loop1                           01:00000094
loop2                           01:00000092
loop3                           01:00003D30
msgHello                        01:00004AAE
msg_bad_branch_disp             01:0000531D
msg_core_start                  01:000052FA
msg_illegal                     01:0000530B
msg_reglist                     01:00004D88
msg_regs                        01:00004D84
msg_start                       01:000052E2
msg_test_done                   01:0000532F
nmi_rout                        01:00005282
numBreakpoints                   E:00000008
op_ABCD                         01:000024E6
op_ADD                          01:00002E74
op_ADDA                         01:00003048
op_ADDQ                         01:00002874
op_ADDX                         01:000030E0
op_ADD_I                        01:00001574
op_AND                          01:00002B92
op_ANDI_TO_CCR                  01:00000320
op_ANDI_TO_SR                   01:00000346
op_BCC                          01:000027A6
op_BCHG                         01:0000071A
op_BCLR                         01:00000A82
op_BOOL_I                       01:000011A4
op_BSET                         01:00000DD0
op_BSR                          01:00001356
op_BTST                         01:00000370
op_BTST0                        01:000004FA
op_BTST1                        01:00000506
op_BTST10                       01:0000054E
op_BTST11                       01:00000556
op_BTST12                       01:0000055C
op_BTST2                        01:0000050E
op_BTST20                       01:000006B4
op_BTST21                       01:000006BE
op_BTST22                       01:000006C4
op_BTST23                       01:000006CA
op_BTST24                       01:000006D0
op_BTST25                       01:000006D6
op_BTST26                       01:000006DC
op_BTST27                       01:000006E2
op_BTST28                       01:000006E8
op_BTST29                       01:000006EE
op_BTST3                        01:00000516
op_BTST30                       01:000006F4
op_BTST31                       01:000006FA
op_BTST32                       01:000006FE
op_BTST4                        01:0000051E
op_BTST5                        01:00000526
op_BTST6                        01:0000052E
op_BTST7                        01:00000536
op_BTST8                        01:0000053E
op_BTST9                        01:00000546
op_CHK                          01:00001E00
op_CMP                          01:00002CF2
op_CMPA                         01:00002D68
op_CMPM                         01:00002DCE
op_CMP_I                        01:0000138C
op_DBCC                         01:00002826
op_DIVS                         01:00002A56
op_DIVU                         01:00002A04
op_EOR                          01:00002C7C
op_EORI_TO_CCR                  01:000002D0
op_EORI_TO_SR                   01:000002F6
op_EXG                          01:00003398
op_EXT                          01:00001C80
op_LEAPEA                       01:00001CC2
op_LINKS                        01:00001DD2
op_MOVE                         01:00001880
op_MOVEM                        01:000021C8
op_MOVEP                        01:00001118
op_MOVEQ                        01:000029E8
op_MOVE_USP                     01:00001DF0
op_MOVE_xxx_FLAGS               01:00001A8C
op_MULS                         01:0000334C
op_MULU                         01:00003300
op_NBCD                         01:000026D6
op_NEGS                         01:00001E3A
op_OR                           01:00002AA8
op_ORI_TO_CCR                   01:00000288
op_ORI_TO_SR                    01:000002AA
op_ROXx                         01:0000363C
op_ROx                          01:00003406
op_RTR                          01:00002784
op_SBCD                         01:000025DE
op_SCC                          01:0000284C
op_SHIFTS                       01:00003872
op_SHIFTS2                      01:00003AB4
op_SUB                          01:00002F5E
op_SUBA                         01:00003094
op_SUBQ                         01:0000292E
op_SUBX                         01:000031F0
op_SUB_I                        01:000016FA
op_SWAP                         01:00001CAC
op_TAS                          01:00001D6E
op_TRAPV                        01:00002768
op_TST                          01:00001D94
pcssxa                          01:00004EE4
rotate_iofocus                  01:00004186
sGetChar                        01:00004FC6
select_focus1                   01:00004198
select_iofocus                  01:00004174
semamem                          E:FD050000
start                           01:00000000
start_other                     01:000000A6
trap3                           01:0000504C

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD090000 PLIC
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 ACIA_RX
00000000 ACIA_TX
00000000 start
00000003 CTRLC
00000004 ACIA_STAT
00000008 CTRLH
00000008 numBreakpoints
0000000A LF
0000000C ACIA_CTRL
0000000D CR
0000000D SC_TAB
00000011 SC_ALT
00000012 SC_LSHIFT
00000014 SC_CTRL
00000018 CTRLX
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
00000092 loop2
00000094 loop1
000000A6 start_other
000000BA do_nothing
000000C0 InitSemaphores
000000E0 SC_EXTEND
000000E6 TestSemaphore
000000F0 SC_KEYUP
00000102 IncrementSemaphore
0000011A DecrementSemaphore
00000134 LockSemaphore
0000013A UnlockSemaphore
0000015A Delay3s
00000168 dly3s2
0000016A dly3s1
0000017E cpu_test
00000264 ALL_DONE
00000266 BSR_FAR1
00000270 EXCEPTION_6
00000280 EXCEPTION_7
00000288 op_ORI_TO_CCR
000002AA op_ORI_TO_SR
000002D0 op_EORI_TO_CCR
000002F6 op_EORI_TO_SR
00000320 op_ANDI_TO_CCR
00000346 op_ANDI_TO_SR
00000370 op_BTST
000004FA op_BTST0
00000506 op_BTST1
0000050E op_BTST2
00000516 op_BTST3
0000051E op_BTST4
00000526 op_BTST5
0000052E op_BTST6
00000536 op_BTST7
0000053E op_BTST8
00000546 op_BTST9
0000054E op_BTST10
00000556 op_BTST11
0000055C op_BTST12
000006B4 op_BTST20
000006BE op_BTST21
000006C4 op_BTST22
000006CA op_BTST23
000006D0 op_BTST24
000006D6 op_BTST25
000006DC op_BTST26
000006E2 op_BTST27
000006E8 op_BTST28
000006EE op_BTST29
000006F4 op_BTST30
000006FA op_BTST31
000006FE op_BTST32
0000071A op_BCHG
00000A82 op_BCLR
00000DD0 op_BSET
00001118 op_MOVEP
000011A4 op_BOOL_I
0000134E BSR_CLOSE1
00001356 op_BSR
00001384 BSR_CLOSE2
0000138C op_CMP_I
00001574 op_ADD_I
000016FA op_SUB_I
00001880 op_MOVE
0000194C MOVE2
000019C8 MOVE1
00001A48 MOVE3
00001A8C op_MOVE_xxx_FLAGS
00001BA2 MOVE4
00001C80 op_EXT
00001CAC op_SWAP
00001CC2 op_LEAPEA
00001D5A LEA1
00001D6E op_TAS
00001D94 op_TST
00001DD2 op_LINKS
00001DF0 op_MOVE_USP
00001E00 op_CHK
00001E3A op_NEGS
000021C8 op_MOVEM
000024E6 op_ABCD
00002506 ABCD_OUTER1
00002508 ABCD_INNER1
00002524 ABCD_NO_C1
0000252C ABCD_NO_C2
00002574 ABCD_OUTER2
00002576 ABCD_INNER2
00002592 ABCD_NO_C3
0000259A ABCD_NO_C4
000025DE op_SBCD
000025FE SBCD_OUTER1
00002600 SBCD_INNER1
0000261C SBCD_NO_C1
00002624 SBCD_NO_C2
0000266C SBCD_OUTER2
0000266E SBCD_INNER2
0000268A SBCD_NO_C3
00002692 SBCD_NO_C4
000026D6 op_NBCD
000026EE NBCD_LOOP
000026FA NBCD_NO_C
000026FE NBCD_NO_Z
00002734 NBCD_LOOP1
00002748 NBCD_NO_C1
0000274C NBCD_NO_Z1
00002768 op_TRAPV
00002784 op_RTR
00002790 RTR_DONE
0000279E BSR_FAR2
000027A6 op_BCC
000027AE BCC1
000027B8 BCC2
000027C0 BCC3
000027CA BCC4
000027D2 BCC5
000027DC BCC6
000027E4 BCC7
000027EE BCC8
000027F6 BCC9
00002800 BCC10
00002808 BCC11
00002812 BCC12
0000281A BCC13
00002824 BCC14
00002826 op_DBCC
0000282E DBCC_LOOP1
0000283C DBCC_LOOP2
0000284C op_SCC
00002874 op_ADDQ
00002888 ADDQ_LOOP1
000028C6 ADDQ_LOOP2
000028FC ADDQ_LOOP3
0000292E op_SUBQ
00002946 SUBQ_LOOP1
00002980 SUBQ_LOOP2
000029B6 SUBQ_LOOP3
000029E8 op_MOVEQ
00002A04 op_DIVU
00002A20 DIVU_OUTER1
00002A56 op_DIVS
00002A72 DIVS_OUTER1
00002AA8 op_OR
00002AC8 OR_OUTER1
00002B3C OR_OUTER2
00002B92 op_AND
00002BB2 AND_OUTER1
00002C26 AND_OUTER2
00002C7C op_EOR
00002C9C EOR_OUTER2
00002CF2 op_CMP
00002D12 CMP_OUTER1
00002D68 op_CMPA
00002D88 CMPA_OUTER1
00002DCE op_CMPM
00002E16 CMPM_LOOP1
00002E30 CMPM_LOOP2
00002E4A CMPM_LOOP3
00002E74 op_ADD
00002E94 ADD_OUTER1
00002F08 ADD_OUTER2
00002F5E op_SUB
00002F7E SUB_OUTER1
00002FF2 SUB_OUTER2
00003048 op_ADDA
0000306E ADDA_OUTER1
00003094 op_SUBA
000030BA SUBA_OUTER1
000030E0 op_ADDX
00003100 ADDX_OUTER1
00003194 ADDX_LOOP3
000031B0 ADDX_LOOP4
000031CC ADDX_LOOP5
000031F0 op_SUBX
00003210 SUBX_OUTER1
000032A4 SUBX_LOOP3
000032C0 SUBX_LOOP4
000032DC SUBX_LOOP5
00003300 op_MULU
0000331C MULU_OUTER1
0000334C op_MULS
00003368 MULS_OUTER1
00003398 op_EXG
000033FA ROx_FLAGS
00003406 op_ROx
00003410 ROx_LOOP1
00003430 ROx_LOOP2
00003450 ROx_LOOP3
00003470 ROx_LOOP4
00003490 ROx_LOOP5
000034B2 ROx_LOOP6
00003630 ROXx_FLAGS
0000363C op_ROXx
00003646 ROXx_LOOP1
00003666 ROXx_LOOP2
00003686 ROXx_LOOP3
000036A6 ROXx_LOOP4
000036C6 ROXx_LOOP5
000036E8 ROXx_LOOP6
00003866 SHIFTS_FLAGS
00003872 op_SHIFTS
0000387C SHIFTS_LOOP1
0000389C SHIFTS_LOOP2
000038BC SHIFTS_LOOP3
000038DC SHIFTS_LOOP4
000038FC SHIFTS_LOOP5
0000391E SHIFTS_LOOP6
00003AA8 SHIFTS2_FLAGS
00003AB4 op_SHIFTS2
00003ABE SHIFTS2_LOOP1
00003ADA SHIFTS2_LOOP2
00003AF6 SHIFTS2_LOOP3
00003B12 SHIFTS2_LOOP4
00003B2E SHIFTS2_LOOP5
00003B4C SHIFTS2_LOOP6
00003CD2 get_screen_color
00003CFE get_screen_address
00003D06 clear_screen
00003D30 loop3
00003D5E CRLF
00003D70 UpdateTextPos
00003D9A CalcScreenLoc
00003DA8 DisplayChar
00003DC8 dcx14
00003DCC dcx7
00003DD2 dccr
00003DF0 dcx6
00003E06 dcx8
00003E1C dcx9
00003E3A dcx10
00003E52 dcx12
00003E5C dcx11
00003EA2 dclf
00003EA6 dcx16
00003EAA dcx4
00003EB4 doBackspace
00003EC2 doDelete
00003EFE doCtrlX
00003F22 IncCursorPos
00003F42 IncCursorRow
00003F74 icc1
00003F76 ScrollUp
00003FB0 BlankLastLine
00004006 DisplayString
0000400A dspj1
00004016 dsret
0000401C DisplayStringCRLF
00004022 DisplayStringLimited
00004042 DisplayStringLimitedCRLF
00004048 HomeCursor
0000405A SyncCursor
00004084 TRAP15
0000409C T15DispatchTable
0000413C Cursor1
00004172 StubRout
00004174 select_iofocus
00004186 rotate_iofocus
00004198 select_focus1
000041B2 init_plic
000041D4 _KeybdInit
000041E2 _KeybdGetStatus
000041EC _KeybdGetScancode
000041FC KeybdRecvByte
0000421C KeybdWaitTx
00004242 SetKeyboardEcho
0000424A CheckForKey
00004256 GetKey
00004290 CheckForCtrlC
000042A0 KeybdGetCharNoWait
000042A8 KeybdGetCharWait
000042B0 KeybdGetChar
000044B2 KeybdSetLEDStatus
0000451E KeybdSendByte
00004526 Wait10ms
00004536 _unshiftedScanCodes
00004636 _shiftedScanCodes
00004736 _keybdControlCodes
000047B6 _keybdExtendedCodes
00004836 FromScreen
00004842 StartMon
0000484C Monitor
00004862 PromptLn
0000486E Prompt3
00004884 Prompt1
00004896 Prompt2
00004952 TestCLS
00004994 DisplayHelp
000049A0 HelpMsg
00004AAE msgHello
00004AC0 GetCmdLine
00004B64 SendSerial
00004B94 ReceiveSerial
00004BC8 FillMem
00004BEA fmemL
00004BF4 fmem1
00004BFA fmemW
00004C04 fmemB
00004C0E ignBlanks
00004C20 EditMem
00004C28 edtmem1
00004C6C ExecuteCode
00004C7A DumpMem
00004C96 DumpMem1
00004CA8 DisplayMem
00004CB8 dspmem1
00004D04 DumpRegs
00004D84 msg_regs
00004D88 msg_reglist
00004DAE GetHexNumber
00004DDA AsciiToHexNybble
00004DEC gthx5
00004DFE gthx6
00004E10 gthx3
00004E14 DisplayTwoSpaces
00004E1E dspspc1
00004E26 DisplaySpace
00004E2E DisplayTetra
00004E34 DisplayWyde
00004E3A DisplayByte
00004E40 DisplayNybble
00004E5A LoadS19
00004E60 NextRec
00004E72 ProcessRec
00004EE4 pcssxa
00004F28 ProcessS1
00004F2C ProcessS2
00004F30 ProcessS3
00004F34 ProcessS7
00004F40 ProcessS8
00004F4C ProcessS9
00004F58 S19Get16BitAddress
00004F64 S19Get24BitAddress
00004F70 S19Get32BitAddress
00004F8E S1932a
00004FA2 S1932b
00004FC6 sGetChar
00004FE6 AudioInputTest
00004FE8 BouncingBalls
00004FEA GraphicsDemo
00004FEC ClearScreen
00004FF2 AUXIN
00004FF2 SerialInit
00005000 SerialPeekCharDirect
00005020 bus_err
00005024 SerialPutChar
0000504C trap3
0000508A ProcessBreakpoint
00005090 DisarmAllBreakpoints
000050BC ArmAllBreakpoints
000050EC ArmBreakpoint
0000516A DisarmBreakpoint
000051BE ListBreakpoints
000051DE ClearBreakpointList
000051F0 irq_rout
00005282 nmi_rout
00005294 brdisp_trap
000052CC illegal_trap
000052E2 msg_start
000052FA msg_core_start
0000530B msg_illegal
0000531D msg_bad_branch_disp
0000532F msg_test_done
00040000 CursorRow
00040001 CursorCol
00040002 TextPos
00040002 TextCurpos
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
00100000 IOFocus
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100020 _KeybdBuf
