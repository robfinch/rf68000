Sections:
00: "DATA" (0-218)
01: "seg500" (500-500)
02: "CODE" (0-56B9)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+      <+
                            	     7: ;          | startup sp,pc  | 8 B   |
                            	     8: ; 00000008 +----------------+       |
                            	     9: ;					 |    vectors     | pair shared+
                            	    10: ; 00000400 +----------------+       |
                            	    11: ;					 |   bios mem     |       |
                            	    12: ; 00001000 +----------------+       |
                            	    13: ;					 |   bios code    |       |
                            	    14: ; 00008000 +----------------+      <+
                            	    15: ;					 |    unused      |
                            	    16: ; 00040000 +----------------+
                            	    17: ;					 |   local ram    |
                            	    18: ; 00041000 +----------------+
                            	    19: ;					 |    unused      |
                            	    20: ; 00100000 +----------------+
                            	    21: ;					 |   global ram   |
                            	    22: ; 00101000 +----------------+
                            	    23: ;					 | serial rcvbuf  |
                            	    24: ; 00102000 +----------------+
                            	    25: ;					 |    unused      |
                            	    26: ; 20000000 +----------------+
                            	    27: ;          |                |
                            	    28: ;          |                |
                            	    29: ;          |                |
                            	    30: ;          :  dram memory   : 512 MB
                            	    31: ;          |                |
                            	    32: ;          |                |
                            	    33: ;          |                |
                            	    34: ; 40000000 +----------------+
                            	    35: ;          |                |
                            	    36: ;          :     unused     :
                            	    37: ;          |                |
                            	    38: ; FFD00000 +----------------+
                            	    39: ;          |                |
                            	    40: ;          :    I/O area    : 1.0 M
                            	    41: ;          |                |
                            	    42: ; FFE00000 +----------------+
                            	    43: ;          |                |
                            	    44: ;          :     unused     :
                            	    45: ;          |                |
                            	    46: ; FFFFFFFF +----------------+
                            	    47: ;
                            	    48: ;-------------------------------------------------------------------------------
                            	    49: ;
                            	    50: CTRLC	EQU		$03
                            	    51: CTRLH	EQU		$08
                            	    52: CTRLX	EQU		$18
                            	    53: CTRLZ	EQU		$1A
                            	    54: LF		EQU		$0A
                            	    55: CR		EQU		$0D
                            	    56: XON		EQU		$11
                            	    57: XOFF	EQU		$13
                            	    58: 
                            	    59: SC_F12  EQU    $07
                            	    60: SC_C    EQU    $21
                            	    61: SC_T    EQU    $2C
                            	    62: SC_Z    EQU    $1A
                            	    63: SC_KEYUP	EQU		$F0
                            	    64: SC_EXTEND   EQU		$E0
                            	    65: SC_CTRL		EQU		$14
                            	    66: SC_RSHIFT	EQU		$59
                            	    67: SC_NUMLOCK	EQU		$77
                            	    68: SC_SCROLLLOCK	EQU	$7E
                            	    69: SC_CAPSLOCK		EQU	$58
                            	    70: SC_ALT		EQU		$11
                            	    71: SC_LSHIFT	EQU		$12
                            	    72: SC_DEL		EQU		$71		; extend
                            	    73: SC_LCTRL	EQU		$58
                            	    74: SC_TAB      EQU		$0D
                            	    75: 
                            	    76: TEXTREG		EQU	$FD03FF00
                            	    77: txtscreen	EQU	$FD000000
                            	    78: semamem		EQU	$FD050000
                            	    79: ACIA			EQU	$FD060000
                            	    80: ACIA_RX		EQU	0
                            	    81: ACIA_TX		EQU	0
                            	    82: ACIA_STAT	EQU	4
                            	    83: ACIA_CMD	EQU	8
                            	    84: ACIA_CTRL	EQU	12
                            	    85: PLIC			EQU	$FD090000
                            	    86: leds			EQU	$FD0FFF00
                            	    87: keybd			EQU	$FD0FFE00
                            	    88: KEYBD			EQU	$FD0FFE00
                            	    89: RAND			EQU	$FD0FFD00
                            	    90: RAND_NUM	EQU	$FD0FFD00
                            	    91: RAND_STRM	EQU	$FD0FFD04
                            	    92: RAND_MZ		EQU $FD0FFD08
                            	    93: RAND_MW		EQU	$FD0FFD0C
                            	    94: IOFocus		EQU	$00100000
                            	    95: 
                            	    96: SERIAL_SEMA	EQU	2
                            	    97: KEYBD_SEMA	EQU	3
                            	    98: RAND_SEMA		EQU	4
                            	    99: SCREEN_SEMA	EQU	5
                            	   100: 
                            	   101: 	data
00:00000000 00040FFC        	   102: 	dc.l		$00040FFC
00:00000004 00000000        	   103: 	dc.l		start
00:00000008 000053C6        	   104: 	dc.l		bus_err
00:0000000C 00000000        	   105: 	dc.l		0
00:00000010 00005646        	   106: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	   107: 	dc.l		0
00:00000018 000002DA        	   108: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 000002E2        	   109: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	   110: 	dc.l		0
00:00000024 00000000        	   111: 	dc.l		0
                            	   112: 	
                            	   113: 	; 10
00:00000028 00000000        	   114: 	dc.l		0
00:0000002C 00000000        	   115: 	dc.l		0
00:00000030 00000000        	   116: 	dc.l		0
00:00000034 00000000        	   117: 	dc.l		0
00:00000038 00000000        	   118: 	dc.l		0
00:0000003C 00000000        	   119: 	dc.l		0
00:00000040 00000000        	   120: 	dc.l		0
00:00000044 00000000        	   121: 	dc.l		0
00:00000048 00000000        	   122: 	dc.l		0
00:0000004C 00000000        	   123: 	dc.l		0
                            	   124: 	
                            	   125: 	; 20
00:00000050 00000000        	   126: 	dc.l		0
00:00000054 00000000        	   127: 	dc.l		0
00:00000058 00000000        	   128: 	dc.l		0
00:0000005C 00000000        	   129: 	dc.l		0
00:00000060 000055FA        	   130: 	dc.l		SpuriousIRQ
00:00000064 00000000        	   131: 	dc.l		0
00:00000068 00000000        	   132: 	dc.l		0
00:0000006C 000055D4        	   133: 	dc.l		irq3_rout
00:00000070 00000000        	   134: 	dc.l		0
00:00000074 00000000        	   135: 	dc.l		0
                            	   136: 	
                            	   137: 	; 30
00:00000078 000055B2        	   138: 	dc.l		TickIRQ						; IRQ 30 - timer / keyboard
00:0000007C 000055FC        	   139: 	dc.l		nmi_rout
00:00000080 00000000        	   140: 	dc.l		0
00:00000084 00000000        	   141: 	dc.l		0
00:00000088 00000000        	   142: 	dc.l		0
00:0000008C 000053CA        	   143: 	dc.l		trap3							; breakpoint
00:00000090 00000000        	   144: 	dc.l		0
00:00000094 00000000        	   145: 	dc.l		0
00:00000098 00000000        	   146: 	dc.l		0
00:0000009C 00000000        	   147: 	dc.l		0
                            	   148: 
                            	   149: 	; 40
00:000000A0 00000000        	   150: 	dc.l		0
00:000000A4 00000000        	   151: 	dc.l		0
00:000000A8 00000000        	   152: 	dc.l		0
00:000000AC 00000000        	   153: 	dc.l		0
00:000000B0 00000000        	   154: 	dc.l		0
00:000000B4 00000000        	   155: 	dc.l		0
00:000000B8 00000000        	   156: 	dc.l		0
00:000000BC 000040F0        	   157: 	dc.l		TRAP15
00:000000C0 00000000        	   158: 	dc.l		0
00:000000C4 00000000        	   159: 	dc.l		0
                            	   160: 
                            	   161: 	; 50	
00:000000C8 00000000        	   162: 	dc.l		0
00:000000CC 00000000        	   163: 	dc.l		0
00:000000D0 00000000        	   164: 	dc.l		0
00:000000D4 00000000        	   165: 	dc.l		0
00:000000D8 00000000        	   166: 	dc.l		0
00:000000DC 00000000        	   167: 	dc.l		0
00:000000E0 00000000        	   168: 	dc.l		0
00:000000E4 00000000        	   169: 	dc.l		0
00:000000E8 00000000        	   170: 	dc.l		0
00:000000EC 00000000        	   171: 	dc.l		0
                            	   172: 
                            	   173: 	; 60
00:000000F0 000045BC        	   174: 	dc.l		KeybdIRQ
00:000000F4 00005332        	   175: 	dc.l		SerialIRQ
00:000000F8 00000000        	   176: 	dc.l		0
00:000000FC 0000560E        	   177: 	dc.l		brdisp_trap
00:00000100 00000000        	   178: 	dc.l		0
00:00000104 00000000        	   179: 	dc.l		0
00:00000108 00000000        	   180: 	dc.l		0
00:0000010C 00000000        	   181: 	dc.l		0
00:00000110 00000000        	   182: 	dc.l		0
00:00000114 00000000        	   183: 	dc.l		0
                            	   184: 
                            	   185: 	org			$400
                            	   186: 
                            	   187: InstalledIRQ:
00:00000400 00000000        	   188: 	dc.l		0
00:00000404 00000000        	   189: 	dc.l		0
00:00000408 00000000        	   190: 	dc.l		0
00:0000040C 00000000        	   191: 	dc.l		0
00:00000410 00000000        	   192: 	dc.l		0
00:00000414 00000000        	   193: 	dc.l		0
00:00000418 00000000        	   194: 	dc.l		0
00:0000041C 00000000        	   195: 	dc.l		0
                            	   196: 
00:00000420 00000000        	   197: 	dc.l		0
00:00000424 00000000        	   198: 	dc.l		0
00:00000428 00000000        	   199: 	dc.l		0
00:0000042C 00000000        	   200: 	dc.l		0
00:00000430 00000000        	   201: 	dc.l		0
00:00000434 00000000        	   202: 	dc.l		0
00:00000438 00000000        	   203: 	dc.l		0
00:0000043C 00000000        	   204: 	dc.l		0
                            	   205: 
00:00000440 00000000        	   206: 	dc.l		0
00:00000444 00000000        	   207: 	dc.l		0
00:00000448 00000000        	   208: 	dc.l		0
00:0000044C 00000000        	   209: 	dc.l		0
00:00000450 00000000        	   210: 	dc.l		0
00:00000454 00000000        	   211: 	dc.l		0
00:00000458 00000000        	   212: 	dc.l		0
00:0000045C 00000000        	   213: 	dc.l		0
                            	   214: 
00:00000460 00000000        	   215: 	dc.l		0
00:00000464 00000000        	   216: 	dc.l		0
00:00000468 00000000        	   217: 	dc.l		0
00:0000046C 00000000        	   218: 	dc.l		0
00:00000470 00000000        	   219: 	dc.l		0
00:00000474 00000000        	   220: 	dc.l		0
00:00000478 00000000        	   221: 	dc.l		0
00:0000047C 00000000        	   222: 	dc.l		0
                            	   223: 
00:00000480 00000000        	   224: 	dc.l		0
00:00000484 00000000        	   225: 	dc.l		0
00:00000488 00000000        	   226: 	dc.l		0
00:0000048C 00000000        	   227: 	dc.l		0
00:00000490 00000000        	   228: 	dc.l		0
00:00000494 00000000        	   229: 	dc.l		0
00:00000498 00000000        	   230: 	dc.l		0
00:0000049C 00000000        	   231: 	dc.l		0
                            	   232: 
00:000004A0 00000000        	   233: 	dc.l		0
00:000004A4 00000000        	   234: 	dc.l		0
00:000004A8 00000000        	   235: 	dc.l		0
00:000004AC 00000000        	   236: 	dc.l		0
00:000004B0 00000000        	   237: 	dc.l		0
00:000004B4 00000000        	   238: 	dc.l		0
00:000004B8 00000000        	   239: 	dc.l		0
00:000004BC 00000000        	   240: 	dc.l		0
                            	   241: 
00:000004C0 00000000        	   242: 	dc.l		0
00:000004C4 00000000        	   243: 	dc.l		0
00:000004C8 00000000        	   244: 	dc.l		0
00:000004CC 00000000        	   245: 	dc.l		0
00:000004D0 00000000        	   246: 	dc.l		0
00:000004D4 00000000        	   247: 	dc.l		0
00:000004D8 00000000        	   248: 	dc.l		0
00:000004DC 00000000        	   249: 	dc.l		0
                            	   250: 
00:000004E0 00000000        	   251: 	dc.l		0
00:000004E4 00000000        	   252: 	dc.l		0
00:000004E8 00000000        	   253: 	dc.l		0
00:000004EC 00000000        	   254: 	dc.l		0
00:000004F0 00000000        	   255: 	dc.l		0
00:000004F4 00000000        	   256: 	dc.l		0
00:000004F8 00000000        	   257: 	dc.l		0
00:000004FC 00000000        	   258: 	dc.l		0
                            	   259: 
                            	   260: 	org			$500
                            	   261: 
                            	   262: ;-------------------------------------------------------------------------------
                            	   263: ;-------------------------------------------------------------------------------
                            	   264: 
                            	   265: ; BIOS variables which must be local (not shared) to each core
                            	   266: 
                            	   267: CursorRow	equ		$40000
                            	   268: CursorCol	equ		$40001
                            	   269: TextPos		equ		$40002
                            	   270: TextCurpos	equ	$40002
                            	   271: TextScr			equ	$40004
                            	   272: S19StartAddress	equ	$40008
                            	   273: KeybdEcho		equ	$4000C
                            	   274: KeybdWaitFlag	equ	$4000D
                            	   275: CmdBuf			equ $40040
                            	   276: CmdBufEnd		equ	$40080
                            	   277: fgColor			equ	$40084
                            	   278: bkColor			equ	$40088
                            	   279: TextRows		equ	$4008C
                            	   280: TextCols		equ	$4008D
                            	   281: Regsave			equ	$40100
                            	   282: numBreakpoints	equ		8
                            	   283: BreakpointFlag	equ		$40200
                            	   284: NumSetBreakpoints	equ	$40202	; to $40203
                            	   285: Breakpoints			equ		$40220	; to $40240
                            	   286: BreakpointWords	equ		$40280	; to $402A0
                            	   287: 
                            	   288: ; Keyboard buffer is in shared memory
                            	   289: KeybdLEDs		equ	$0010000E
                            	   290: _KeyState1	equ	$0010000F
                            	   291: _KeyState2	equ	$00100010
                            	   292: _KeybdHead	equ	$00100011
                            	   293: _KeybdTail	equ	$00100012
                            	   294: _KeybdCnt		equ	$00100013
                            	   295: _KeybdBuf		equ	$00100020
                            	   296: S19Checksum	equ	$00100050
                            	   297: SerTailRcv	equ	$00100060
                            	   298: SerHeadRcv	equ	$00100062
                            	   299: SerRcvXon		equ	$00100064
                            	   300: SerRcvXoff	equ	$00100065
                            	   301: SerRcvBuf		equ	$00101000
                            	   302: 
                            	   303: 	code
                            	   304: 	align		2
                            	   305: start:
02:00000000 46FC2700        	   306: 	move.w	#$2700,sr				; enable level 6 and higher interrupts
                            	   307: 	; Prepare local variable storage
02:00000004 303C03FF        	   308: 	move.w	#1023,d0					; 1024 longs to clear
02:00000008 41F900040000    	   309: 	lea			$40000,a0					; non shared local memory address
                            	   310: .0111:
02:0000000E 4298            	   311: 	clr.l		(a0)+							; clear the memory area
02:00000010 51C8FFFC        	   312: 	dbra		d0,.0111
02:00000014 23FC001FFFFF0004	   313: 	move.l	#$1fffff,fgColor	; set foreground / background color
02:0000001C 0084
02:0000001E 23FC0000003F0004	   314: 	move.l	#$00003f,bkColor
02:00000026 0088
02:00000028 4E7A0FE0        	   315: 	movec.l	coreno,d0					; get core number (2 to 9)
02:0000002C 5500            	   316: 	subi.b	#2,d0							; adjust (0 to 7)
02:0000002E C0FC4000        	   317: 	mulu		#16384,d0					; compute screen location
02:00000032 0680FD000000    	   318: 	addi.l	#$FD000000,d0
02:00000038 23C000040004    	   319: 	move.l	d0,TextScr
02:0000003E 13FC00400004008D	   320: 	move.b	#64,TextCols			; set rows and columns
02:00000046 13FC00200004008C	   321: 	move.b	#32,TextRows
02:0000004E 4E7A0FE0        	   322: 	movec.l	coreno,d0					; get core number
02:00000052 0C000002        	   323: 	cmpi.b	#2,d0
02:00000056 665A            	   324: 	bne			start_other
02:00000058 13C000100000    	   325: 	move.b	d0,IOFocus				; Set the IO focus in global memory
02:0000005E 610000F0        	   326: 	bsr			InitSemaphores
02:00000062 6168            	   327: 	bsr			InitRand
02:00000064 61000164        	   328: 	bsr			Delay3s						; give devices time to reset
02:00000068 61003CF2        	   329: 	bsr			clear_screen
                            	   330: 
                            	   331: ;	bsr			InitIRQ
02:0000006C 6100517E        	   332: 	bsr			SerialInit
                            	   333: 
                            	   334: 	; Write startup message to screen
                            	   335: 
02:00000070 43FA55EA        	   336: 	lea			msg_start,a1
02:00000074 61003FFC        	   337: 	bsr			DisplayString
02:00000078 4E7A0FE0        	   338: 	movec		coreno,d0
02:0000007C 4840            	   339: 	swap		d0
02:0000007E 7201            	   340: 	moveq		#1,d1
02:00000080 6100012E        	   341: 	bsr			UnlockSemaphore	; allow another cpu access
02:00000084 7200            	   342: 	moveq		#0,d1
02:00000086 61000128        	   343: 	bsr			UnlockSemaphore	; allow other cpus to proceed
02:0000008A 33FCA4A4FD0FFF00	   344: 	move.w	#$A4A4,leds			; diagnostics
02:00000092 6100418A        	   345: 	bsr			init_plic				; initialize platform level interrupt controller
02:00000096 60004902        	   346: 	bra			StartMon
02:0000009A 61000152        	   347: 	bsr			cpu_test
                            	   348: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   349: ;	move.l	a0,64*4
                            	   350: 
                            	   351: loop2:
02:0000009E 70FF            	   352: 	move.l	#-1,d0
                            	   353: loop1:
02:000000A0 2200            	   354: 	move.l	d0,d1
02:000000A2 E089            	   355: 	lsr.l		#8,d1
02:000000A4 E089            	   356: 	lsr.l		#8,d1
02:000000A6 13C1FD0FFF00    	   357: 	move.b	d1,leds
02:000000AC 51C8FFF2        	   358: 	dbra		d0,loop1
02:000000B0 60EC            	   359: 	bra			loop2
                            	   360: 
                            	   361: start_other:
02:000000B2 61003CA8        	   362: 	bsr			clear_screen
02:000000B6 4E7A1FE0        	   363: 	movec.l	coreno,d1
02:000000BA 61004EFA        	   364: 	bsr			DisplayByte
02:000000BE 43FA55B4        	   365: 	lea			msg_core_start,a1
02:000000C2 61003FAE        	   366: 	bsr			DisplayString
                            	   367: do_nothing:	
02:000000C6 600048D2        	   368: 	bra			StartMon
02:000000CA 60FA            	   369: 	bra			do_nothing
                            	   370: 
                            	   371: ;------------------------------------------------------------------------------
                            	   372: ;------------------------------------------------------------------------------
                            	   373: 
                            	   374: InitRand:
                            	   375: RandInit:
02:000000CC 4E7A0FE0        	   376: 	movec		coreno,d0
02:000000D0 4840            	   377: 	swap		d0
02:000000D2 7204            	   378: 	moveq		#RAND_SEMA,d1
02:000000D4 610000A0        	   379: 	bsr			LockSemaphore
02:000000D8 4840            	   380: 	swap		d0
02:000000DA ED88            	   381: 	lsl.l		#6,d0									; allow 64 streams per core
02:000000DC 23C0FD0FFD04    	   382: 	move.l	d0,RAND_STRM					; select the stream
02:000000E2 23FC12345678FD0F	   383: 	move.l	#$12345678,RAND_MZ		; initialize to some value
02:000000EA FD08
02:000000EC 23FC98765432FD0F	   384: 	move.l	#$98765432,RAND_MW
02:000000F4 FD0C
02:000000F6 23FC2E5BF271FD0F	   385: 	move.l	#777777777,RAND_NUM		; generate first number
02:000000FE FD00
02:00000100 4E7A0FE0        	   386: 	movec		coreno,d0
02:00000104 4840            	   387: 	swap		d0
02:00000106 7204            	   388: 	moveq		#RAND_SEMA,d1
02:00000108 610000A6        	   389: 	bsr			UnlockSemaphore
02:0000010C 4E75            	   390: 	rts
                            	   391: 
                            	   392: RandGetNum:
02:0000010E 4E7A0FE0        	   393: 	movec		coreno,d0
02:00000112 4840            	   394: 	swap		d0
02:00000114 7204            	   395: 	moveq		#RAND_SEMA,d1
02:00000116 615E            	   396: 	bsr			LockSemaphore
02:00000118 ED88            	   397: 	lsl.l		#6,d0
02:0000011A 23C0FD0FFD04    	   398: 	move.l	d0,RAND_STRM					; select the stream
02:00000120 2039FD0FFD00    	   399: 	move.l	RAND_NUM,d0
02:00000126 42B9FD0FFD00    	   400: 	clr.l		RAND_NUM							; generate next number
02:0000012C 4E7A0FE0        	   401: 	movec		coreno,d0
02:00000130 4840            	   402: 	swap		d0
02:00000132 7204            	   403: 	moveq		#RAND_SEMA,d1
02:00000134 617A            	   404: 	bsr			UnlockSemaphore
02:00000136 C340            	   405: 	exg			d1,d0
02:00000138 4E75            	   406: 	rts
                            	   407: 
                            	   408: ;------------------------------------------------------------------------------
                            	   409: ; RandWait
                            	   410: ;    Wait some random number of clock cycles before returning.
                            	   411: ;------------------------------------------------------------------------------
                            	   412: 
                            	   413: RandWait:
02:0000013A 48E7C000        	   414: 	movem.l	d0/d1,-(a7)
02:0000013E 61CE            	   415: 	bsr			RandGetNum
02:00000140 0241000F        	   416: 	andi.w	#15,d1
                            	   417: .0001:
02:00000144 4E71            	   418: 	nop
02:00000146 51C9FFFC        	   419: 	dbra		d1,.0001
02:0000014A 4CDF0003        	   420: 	movem.l	(a7)+,d0/d1
02:0000014E 4E75            	   421: 	rts
                            	   422: 
                            	   423: ;------------------------------------------------------------------------------
                            	   424: ; Initialize semaphores
                            	   425: ; - all semaphores are set to unlocked except the first one, which is locked
                            	   426: ; for core #2.
                            	   427: ;
                            	   428: ; Parameters:
                            	   429: ;		<none>
                            	   430: ; Modifies:
                            	   431: ;		<none>
                            	   432: ; Returns:
                            	   433: ;		<none>
                            	   434: ;------------------------------------------------------------------------------
                            	   435: 
                            	   436: InitSemaphores:
02:00000150 48E74080        	   437: 	movem.l	d1/a0,-(a7)
02:00000154 41F9FD050000    	   438: 	lea			semamem,a0
02:0000015A 217C000200002000	   439: 	move.l	#$20000,$2000(a0)	; lock the first semaphore for core #2, thread #0
02:00000162 323C00FE        	   440: 	move.w	#254,d1
                            	   441: .0001:
02:00000166 5888            	   442: 	lea			4(a0),a0
02:00000168 42A82000        	   443: 	clr.l		$2000(a0)					; write zeros to unlock
02:0000016C 51C9FFF8        	   444: 	dbra		d1,.0001
02:00000170 4CDF0102        	   445: 	movem.l	(a7)+,d1/a0
02:00000174 4E75            	   446: 	rts
                            	   447: 
                            	   448: ; -----------------------------------------------------------------------------
                            	   449: ; Parameters:
                            	   450: ;		d1 semaphore number
                            	   451: ;
                            	   452: ; Side Effects:
                            	   453: ;		increments semaphore, saturates at 255
                            	   454: ;
                            	   455: ; Returns:	
                            	   456: ; 	z flag set if semaphore was zero
                            	   457: ; -----------------------------------------------------------------------------
                            	   458: 
                            	   459: ;IncrementSemaphore:
                            	   460: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   461: ;	lea			semamem,a0			; point to semaphore memory
                            	   462: ;	ext.w		d1							; make d1 word value
                            	   463: ;	asl.w		#4,d1						; align to memory
                            	   464: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   465: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   466: ;	rts
                            	   467: 	
                            	   468: ; -----------------------------------------------------------------------------
                            	   469: ; Parameters:
                            	   470: ;		d1 semaphore number
                            	   471: ;
                            	   472: ; Side Effects:
                            	   473: ;		decrements semaphore, saturates at zero
                            	   474: ;
                            	   475: ; Returns:	
                            	   476: ; 	z flag set if semaphore was zero
                            	   477: ; -----------------------------------------------------------------------------
                            	   478: 
                            	   479: ;DecrementSemaphore:
                            	   480: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   481: ;	lea			semamem,a0			; point to semaphore memory
                            	   482: ;	andi.w	#255,d1					; make d1 word value
                            	   483: ;	asl.w		#4,d1						; align to memory
                            	   484: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   485: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   486: ;	rts
                            	   487: 
                            	   488: ; -----------------------------------------------------------------------------
                            	   489: ; Lock a semaphore
                            	   490: ;
                            	   491: ; Parameters:
                            	   492: ;		d0 = key
                            	   493: ;		d1 = semaphore number
                            	   494: ; -----------------------------------------------------------------------------
                            	   495: 
                            	   496: LockSemaphore:
02:00000176 48E74080        	   497: 	movem.l	d1/a0,-(a7)			; save registers
02:0000017A 41F9FD050000    	   498: 	lea			semamem,a0			; point to semaphore memory lock area
02:00000180 024100FF        	   499: 	andi.w	#255,d1					; make d1 word value
02:00000184 E549            	   500: 	lsl.w		#2,d1						; align to memory
                            	   501: .0001:
02:00000186 21801000        	   502: 	move.l	d0,(a0,d1.w)		; try and write the semaphore
02:0000018A B0B01000        	   503: 	cmp.l		(a0,d1.w),d0		; did it lock?
02:0000018E 66F6            	   504: 	bne.s		.0001						; no, try again
02:00000190 4CDF0102        	   505: 	movem.l	(a7)+,a0/d1			; restore regs
02:00000194 4E75            	   506: 	rts
                            	   507: 	
                            	   508: ; -----------------------------------------------------------------------------
                            	   509: ; Unlocks a semaphore even if not the owner.
                            	   510: ;
                            	   511: ; Parameters:
                            	   512: ;		d1 semaphore number
                            	   513: ; -----------------------------------------------------------------------------
                            	   514: 
                            	   515: ForceUnlockSemaphore:
02:00000196 48E74080        	   516: 	movem.l	d1/a0,-(a7)				; save registers
02:0000019A 41F9FD053000    	   517: 	lea			semamem+$3000,a0	; point to semaphore memory read/write area
02:000001A0 024100FF        	   518: 	andi.w	#255,d1						; make d1 word value
02:000001A4 E549            	   519: 	lsl.w		#2,d1							; align to memory
02:000001A6 42B01000        	   520: 	clr.l		(a0,d1.w)					; write zero to unlock
02:000001AA 4CDF0102        	   521: 	movem.l	(a7)+,a0/d1				; restore regs
02:000001AE 4E75            	   522: 	rts
                            	   523: 
                            	   524: ; -----------------------------------------------------------------------------
                            	   525: ; Unlocks a semaphore. Must be the owner to have effect.
                            	   526: ; Three cases:
                            	   527: ;	1) the owner, the semaphore will be reset to zero
                            	   528: ;	2) not the owner, the write will be ignored
                            	   529: ; 3) already unlocked, the write will be ignored
                            	   530: ;
                            	   531: ; Parameters:
                            	   532: ;		d0 = key
                            	   533: ;		d1 = semaphore number
                            	   534: ; -----------------------------------------------------------------------------
                            	   535: 
                            	   536: UnlockSemaphore:
02:000001B0 48E74080        	   537: 	movem.l	d1/a0,-(a7)				; save registers
02:000001B4 41F9FD051000    	   538: 	lea			semamem+$1000,a0	; point to semaphore memory unlock area
02:000001BA 024100FF        	   539: 	andi.w	#255,d1						; make d1 word value
02:000001BE E549            	   540: 	lsl.w		#2,d1							; align to memory
02:000001C0 21801000        	   541: 	move.l	d0,(a0,d1.w)			; write matching value to unlock
02:000001C4 4CDF0102        	   542: 	movem.l	(a7)+,a0/d1				; restore regs
02:000001C8 4E75            	   543: 	rts
                            	   544: 
                            	   545: ; -----------------------------------------------------------------------------
                            	   546: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   547: ; -----------------------------------------------------------------------------
                            	   548: 
                            	   549: Delay3s:
02:000001CA 203C002DC6C0    	   550: 	move.l	#3000000,d0		; this should take a few seconds to loop
02:000001D0 41F9FD0FFF00    	   551: 	lea			leds,a0				; a0 = address of LED output register
02:000001D6 6002            	   552: 	bra			dly3s1				; branch to the loop
                            	   553: dly3s2:	
02:000001D8 4840            	   554: 	swap		d0						; loop is larger than 16-bits
                            	   555: dly3s1:
02:000001DA 2200            	   556: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
02:000001DC E199            	   557: 	rol.l		#8,d1					; could use swap here, but lets test rol
02:000001DE E199            	   558: 	rol.l		#8,d1
02:000001E0 1081            	   559: 	move.b	d1,(a0)				; set the LEDs
02:000001E2 51C8FFF6        	   560: 	dbra		d0,dly3s1			; decrement and branch back
02:000001E6 4840            	   561: 	swap		d0
02:000001E8 51C8FFEE        	   562: 	dbra		d0,dly3s2
02:000001EC 4E75            	   563: 	rts
                            	   564: 
                            	   565: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: *    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: 
                            	    79: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    80: *	move.l	a0,6*4
                            	    81: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    82: *	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
02:000001EE 610000FA        	    85: 	bsr	op_ORI_TO_CCR
02:000001F2 61000118        	    86: 	bsr	op_ORI_TO_SR
02:000001F6 61000136        	    87: 	bsr	op_EORI_TO_CCR
02:000001FA 61000158        	    88: 	bsr	op_EORI_TO_SR
02:000001FE 6100017A        	    89: 	bsr	op_ANDI_TO_CCR
02:00000202 6100019C        	    90: 	bsr	op_ANDI_TO_SR
02:00000206 610001BE        	    91: 	bsr	op_BTST
02:0000020A 61000564        	    92: 	bsr	op_BCHG
02:0000020E 610008C8        	    93: 	bsr	op_BCLR
02:00000212 61000C12        	    94: 	bsr	op_BSET
02:00000216 61000F56        	    95: 	bsr op_MOVEP
02:0000021A 61000FDE        	    96: 	bsr op_BOOL_I
02:0000021E 610011C2        	    97: 	bsr op_CMP_I
02:00000222 610013A6        	    98: 	bsr op_ADD_I
02:00000226 61001528        	    99: 	bsr op_SUB_I
02:0000022A 610016AA        	   100: 	bsr op_MOVE
02:0000022E 610018B2        	   101: 	bsr op_MOVE_xxx_FLAGS
02:00000232 61001AA2        	   102: 	bsr op_EXT
02:00000236 61001ACA        	   103: 	bsr op_SWAP
02:0000023A 61001ADC        	   104: 	bsr op_LEAPEA
02:0000023E 61001B84        	   105: 	bsr op_TAS
02:00000242 61001BA6        	   106: 	bsr op_TST
02:00000246 61001BE0        	   107: 	bsr op_LINKS
02:0000024A 61001BFA        	   108: 	bsr op_MOVE_USP
02:0000024E 61001C06        	   109: 	bsr op_CHK
02:00000252 61001C3C        	   110: 	bsr op_NEGS
02:00000256 61001FC6        	   111: 	bsr op_MOVEM
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
02:0000025A 61002562        	   115: 	bsr op_TRAPV
02:0000025E 6100257A        	   116: 	bsr op_RTR
02:00000262 61001148        	   117: 	bsr op_BSR
02:00000266 61002594        	   118: 	bsr op_BCC
02:0000026A 61002610        	   119: 	bsr op_DBCC
02:0000026E 61002632        	   120: 	bsr op_SCC
02:00000272 61002656        	   121: 	bsr op_ADDQ
02:00000276 6100270C        	   122: 	bsr op_SUBQ
02:0000027A 610027C2        	   123: 	bsr op_MOVEQ
02:0000027E 610027DA        	   124: 	bsr op_DIVU
                            	   125: *	bsr op_DIVS
02:00000282 6100287A        	   126: 	bsr op_OR
02:00000286 61002960        	   127: 	bsr op_AND
02:0000028A 61002A46        	   128: 	bsr op_EOR
02:0000028E 61002AB8        	   129: 	bsr op_CMP
02:00000292 61002B2A        	   130: 	bsr op_CMPA
02:00000296 61002B8C        	   131: 	bsr op_CMPM
02:0000029A 61002C2E        	   132: 	bsr op_ADD
02:0000029E 61002D14        	   133: 	bsr op_SUB
02:000002A2 61002DFA        	   134: 	bsr op_ADDA
02:000002A6 61002E42        	   135: 	bsr op_SUBA
02:000002AA 61002E8A        	   136: 	bsr op_ADDX	
02:000002AE 61002F96        	   137: 	bsr op_SUBX
02:000002B2 610030A2        	   138: 	bsr op_MULU
02:000002B6 610030EA        	   139: 	bsr op_MULS
02:000002BA 61003132        	   140: 	bsr op_EXG
02:000002BE 6100319C        	   141: 	bsr op_ROx
02:000002C2 610033CE        	   142: 	bsr op_ROXx
02:000002C6 61003600        	   143: 	bsr op_SHIFTS
02:000002CA 6100383E        	   144: 	bsr op_SHIFTS2
                            	   145: 
02:000002CE 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
02:000002D0 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
02:000002D2 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
02:000002D8 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: * Exception Vector = 6   CHK Instruction
                            	   164: *
                            	   165: *	align	4
                            	   166: EXCEPTION_6:
02:000002DA 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
02:000002E0 4E73            	   168: 	rte
                            	   169: 
                            	   170: * Exception Vector = 7   TRAPV Instruction
                            	   171: *
                            	   172: *	align	4
                            	   173: EXCEPTION_7:
02:000002E2 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
02:000002E8 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
02:000002EA 003C00FF        	   184:     ori.b #$FF,CCR
02:000002EE 6AFE            	   185:     bpl.s *                   ; branch if Z clear
02:000002F0 66FE            	   186:     bne.s *                   ; branch if N clear
02:000002F2 68FE            	   187:     bvc.s *                   ; branch if V clear
02:000002F4 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
02:000002F6 44FC0000        	   190:     move #$00,CCR
02:000002FA 003C0000        	   191:     ori.b #$00,CCR
02:000002FE 67FE            	   192:     beq.s *                   ; branch if Z set
02:00000300 6BFE            	   193:     bmi.s *                   ; branch if N set
02:00000302 69FE            	   194:     bvs.s *                   ; branch if V set
02:00000304 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
02:00000306 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
02:0000030A 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
02:0000030C 007C2FFF        	   209:     ori.w #$2FFF,SR
02:00000310 6AFE            	   210:     bpl.s *                   * branch if Z clear
02:00000312 66FE            	   211:     bne.s *                   * branch if N clear
02:00000314 68FE            	   212:     bvc.s *                   * branch if V clear
02:00000316 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
02:00000318 46FC2000        	   215:     move.w #$2000,SR
02:0000031C 007C0000        	   216:     ori.w #$0000,SR
02:00000320 67FE            	   217:     beq.s *                   * branch if Z set
02:00000322 6BFE            	   218:     bmi.s *                   * branch if N set
02:00000324 69FE            	   219:     bvs.s *                   * branch if V set
02:00000326 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
02:00000328 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
02:0000032C 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
02:0000032E 44FC0000        	   233:     move #$00,CCR
02:00000332 0A3C00FF        	   234:     eori.b #$FF,CCR
02:00000336 6AFE            	   235:     bpl.s *                   ; branch if Z clear
02:00000338 66FE            	   236:     bne.s *                   ; branch if N clear
02:0000033A 68FE            	   237:     bvc.s *                   ; branch if V clear
02:0000033C 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
02:0000033E 44FC0000        	   240:     move #$00,CCR
02:00000342 0A3C0000        	   241:     eori.b #$00,CCR
02:00000346 67FE            	   242:     beq.s *                   ; branch if Z set
02:00000348 6BFE            	   243:     bmi.s *                   ; branch if N set
02:0000034A 69FE            	   244:     bvs.s *                   ; branch if V set
02:0000034C 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
02:0000034E 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
02:00000352 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
02:00000354 46FC2000        	   260:     move.w #$2000,SR
02:00000358 0A7C0FFF        	   261:     eori.w #$0FFF,SR
02:0000035C 6AFE            	   262:     bpl.s *                   * branch if Z clear
02:0000035E 66FE            	   263:     bne.s *                   * branch if N clear
02:00000360 68FE            	   264:     bvc.s *                   * branch if V clear
02:00000362 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
02:00000364 46FC2000        	   267:     move.w #$2000,SR
02:00000368 0A7C0000        	   268:     eori.w #$0000,SR
02:0000036C 67FE            	   269:     beq.s *                   * branch if Z set
02:0000036E 6BFE            	   270:     bmi.s *                   * branch if N set
02:00000370 69FE            	   271:     bvs.s *                   * branch if V set
02:00000372 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
02:00000374 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
02:00000378 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
02:0000037A 44FC00FF        	   287:     move #$FF,CCR
02:0000037E 023C00FF        	   288:     andi.b #$FF,CCR
02:00000382 6AFE            	   289:     bpl.s *                   * branch if Z clear
02:00000384 66FE            	   290:     bne.s *                   * branch if N clear
02:00000386 68FE            	   291:     bvc.s *                   * branch if V clear
02:00000388 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
02:0000038A 44FC00FF        	   294:     move #$FF,CCR
02:0000038E 023C0000        	   295:     andi.b #$00,CCR
02:00000392 67FE            	   296:     beq.s *                   * branch if Z set
02:00000394 6BFE            	   297:     bmi.s *                   * branch if N set
02:00000396 69FE            	   298:     bvs.s *                   * branch if V set
02:00000398 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
02:0000039A 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
02:0000039E 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
02:000003A0 46FC20FF        	   313:     move.w #$20FF,SR
02:000003A4 027CFFFF        	   314:     andi.w #$FFFF,SR
02:000003A8 6AFE            	   315:     bpl.s *                   * branch if Z clear
02:000003AA 66FE            	   316:     bne.s *                   * branch if N clear
02:000003AC 68FE            	   317:     bvc.s *                   * branch if V clear
02:000003AE 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
02:000003B0 46FC20FF        	   320:     move.w #$20FF,SR
02:000003B4 027CFF00        	   321:     andi.w #$FF00,SR
02:000003B8 67FE            	   322:     beq.s *                   * branch if Z set
02:000003BA 6BFE            	   323:     bmi.s *                   * branch if N set
02:000003BC 69FE            	   324:     bvs.s *                   * branch if V set
02:000003BE 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
02:000003C0 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
02:000003C4 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
02:000003C6 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
02:000003CC 08000000        	   343:             btst.l #0,d0
02:000003D0 67FE            	   344:             beq.s *               * branch if Z set
02:000003D2 08000001        	   345:             btst.l #1,d0              *
02:000003D6 66FE            	   346:             bne.s *               * branch if Z clear
02:000003D8 0800001F        	   347:             btst.l #31,d0             *
02:000003DC 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
02:000003DE 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
02:000003E2 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
02:000003E6 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:000003E8 08100000        	   355:             btst.b #0,(a0)
02:000003EC 67FE            	   356:             beq.s *               * branch if Z set
02:000003EE 08100001        	   357:             btst.b #1,(a0)            *
02:000003F2 66FE            	   358:             bne.s *               * branch if Z clear
02:000003F4 08100007        	   359:             btst.b #7,(a0)            *
02:000003F8 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
02:000003FA 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
02:000003FE 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
02:00000402 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
02:00000406 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
02:0000040A 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000040E 08180000        	   369:             btst.b #0,(a0)+
02:00000412 67FE            	   370:             beq.s *               * branch if Z set
02:00000414 08180001        	   371:             btst.b #1,(a0)+           *
02:00000418 66FE            	   372:             bne.s *               * branch if Z clear
02:0000041A 08180007        	   373:             btst.b #7,(a0)+           *
02:0000041E 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
02:00000420 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
02:00000424 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
02:00000428 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
02:0000042C 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
02:00000430 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
02:00000434 08200000        	   383:             btst.b #0,-(a0)
02:00000438 67FE            	   384:             beq.s *               * branch if Z set
02:0000043A 08200001        	   385:             btst.b #1,-(a0)           *
02:0000043E 66FE            	   386:             bne.s *               * branch if Z clear
02:00000440 08200007        	   387:             btst.b #7,-(a0)           *
02:00000444 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
02:00000446 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
02:0000044A 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
02:0000044E 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
02:00000452 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
02:00000456 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
02:0000045A 08100000        	   397:             btst.b #0,0(a0)
02:0000045E 67FE            	   398:             beq.s *               * branch if Z set
02:00000460 082800010001    	   399:             btst.b #1,1(a0)           *
02:00000466 66FE            	   400:             bne.s *               * branch if Z clear
02:00000468 082800070002    	   401:             btst.b #7,2(a0)           *
02:0000046E 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
02:00000470 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
02:00000474 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
02:00000476 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
02:0000047A 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
02:0000047C 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
02:0000047E 083000000000    	   411:             btst.b #0,0(a0,d0.w)
02:00000484 67FE            	   412:             beq.s *               * branch if Z set
02:00000486 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
02:0000048C 66FE            	   414:             bne.s *               * branch if Z clear
02:0000048E 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
02:00000494 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
02:00000496 083000000800    	   418:             btst.b #0,0(a0,d0.l)
02:0000049C 67FE            	   419:             beq.s *               * branch if Z set
02:0000049E 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
02:000004A4 66FE            	   421:             bne.s *               * branch if Z clear
02:000004A6 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
02:000004AC 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
02:000004AE 083000009000    	   425:             btst.b #0,0(a0,a1.w)
02:000004B4 67FE            	   426:             beq.s *               * branch if Z set
02:000004B6 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
02:000004BC 66FE            	   428:             bne.s *               * branch if Z clear
02:000004BE 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
02:000004C4 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
02:000004C6 083000009800    	   432:             btst.b #0,0(a0,a1.l)
02:000004CC 67FE            	   433:             beq.s *               * branch if Z set
02:000004CE 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
02:000004D4 66FE            	   435:             bne.s *               * branch if Z clear
02:000004D6 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
02:000004DC 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
02:000004DE 083800000100    	   441:             btst.b #0,$0100
02:000004E4 67FE            	   442:             beq.s *               * branch if Z set
02:000004E6 083800010101    	   443:             btst.b #1,$0101           *
02:000004EC 66FE            	   444:             bne.s *               * branch if Z clear
02:000004EE 083800070102    	   445:             btst.b #7,$0102           *
02:000004F4 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
02:000004F6 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
02:000004FC 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
02:00000500 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
02:00000504 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
02:00000508 083900000000F100	   454:             btst.b #0,$F100
02:00000510 67FE            	   455:             beq.s *               * branch if Z set
02:00000512 083900010000F101	   456:             btst.b #1,$F101       *
02:0000051A 66FE            	   457:             bne.s *               * branch if Z clear
02:0000051C 083900070000F102	   458:             btst.b #7,$F102       *
02:00000524 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
02:00000526 4BFAFE9E        	   463:             lea op_BTST(pc),a5
02:0000052A 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
02:00000530 66FE            	   465:             bne.s *               * branch if Z clear
02:00000532 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
02:00000538 67FE            	   467:             beq.s *               * branch if Z set
02:0000053A 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
02:00000540 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
02:00000542 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
02:00000546 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
02:00000548 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
02:0000054C 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
02:0000054E 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
02:00000550 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
02:00000556 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
02:00000558 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
02:0000055C 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
02:00000562 67FE            	   484:             beq.s *               * branch if Z set
02:00000564 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
02:0000056A 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
02:0000056C 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
02:00000572 66FE            	   489:             bne.s *               * branch if Z clear
02:00000574 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
02:0000057A 67FE            	   491:             beq.s *               * branch if Z set
02:0000057C 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
02:00000582 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
02:00000584 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
02:0000058A 66FE            	   496:             bne.s *               * branch if Z clear
02:0000058C 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
02:00000592 67FE            	   498:             beq.s *               * branch if Z set
02:00000594 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
02:0000059A 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
02:0000059C 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
02:000005A2 66FE            	   503:             bne.s *               * branch if Z clear
02:000005A4 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
02:000005AA 67FE            	   505:             beq.s *               * branch if Z set
02:000005AC 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
02:000005B2 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
02:000005B4 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
02:000005BA 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
02:000005BC 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
02:000005BE 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
02:000005C0 0B00            	   519:             btst.l d5,d0
02:000005C2 67FE            	   520:             beq.s *               * branch if Z set
02:000005C4 0D00            	   521:             btst.l d6,d0              *
02:000005C6 66FE            	   522:             bne.s *               * branch if Z clear
02:000005C8 0F00            	   523:             btst.l d7,d0             *
02:000005CA 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
02:000005CC 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
02:000005CE 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
02:000005D0 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
02:000005D2 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
02:000005D6 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
02:000005DA 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:000005DC 0B10            	   534:             btst.b d5,(a0)
02:000005DE 67FE            	   535:             beq.s *               * branch if Z set
02:000005E0 0D10            	   536:             btst.b d6,(a0)            *
02:000005E2 66FE            	   537:             bne.s *               * branch if Z clear
02:000005E4 0F10            	   538:             btst.b d7,(a0)            *
02:000005E6 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
02:000005E8 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
02:000005EC 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
02:000005F0 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
02:000005F4 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
02:000005F8 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
02:000005FC 0B18            	   550:             btst.b d5,(a0)+
02:000005FE 67FE            	   551:             beq.s *               * branch if Z set
02:00000600 0D18            	   552:             btst.b d6,(a0)+           *
02:00000602 66FE            	   553:             bne.s *               * branch if Z clear
02:00000604 0F18            	   554:             btst.b d7,(a0)+           *
02:00000606 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
02:00000608 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
02:0000060C 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
02:00000610 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
02:00000614 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
02:00000618 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
02:0000061C 0B20            	   564:             btst.b d5,-(a0)
02:0000061E 67FE            	   565:             beq.s *               * branch if Z set
02:00000620 0D20            	   566:             btst.b d6,-(a0)           *
02:00000622 66FE            	   567:             bne.s *               * branch if Z clear
02:00000624 0F20            	   568:             btst.b d7,-(a0)           *
02:00000626 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
02:00000628 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
02:0000062C 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
02:00000630 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
02:00000634 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
02:00000638 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
02:0000063C 0B10            	   578:             btst.b d5,0(a0)
02:0000063E 67FE            	   579:             beq.s *               * branch if Z set
02:00000640 0D280001        	   580:             btst.b d6,1(a0)           *
02:00000644 66FE            	   581:             bne.s *               * branch if Z clear
02:00000646 0F280002        	   582:             btst.b d7,2(a0)           *
02:0000064A 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
02:0000064C 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
02:00000650 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
02:00000652 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
02:00000656 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
02:00000658 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
02:0000065A 0B300000        	   592:             btst.b d5,0(a0,d0.w)
02:0000065E 67FE            	   593:             beq.s *               * branch if Z set
02:00000660 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
02:00000664 66FE            	   595:             bne.s *               * branch if Z clear
02:00000666 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
02:0000066A 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
02:0000066C 0B300800        	   599:             btst.b d5,0(a0,d0.l)
02:00000670 67FE            	   600:             beq.s *               * branch if Z set
02:00000672 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
02:00000676 66FE            	   602:             bne.s *               * branch if Z clear
02:00000678 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
02:0000067C 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
02:0000067E 0B309000        	   606:             btst.b d5,0(a0,a1.w)
02:00000682 67FE            	   607:             beq.s *               * branch if Z set
02:00000684 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
02:00000688 66FE            	   609:             bne.s *               * branch if Z clear
02:0000068A 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
02:0000068E 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
02:00000690 0B309800        	   613:             btst.b d5,0(a0,a1.l)
02:00000694 67FE            	   614:             beq.s *               * branch if Z set
02:00000696 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
02:0000069A 66FE            	   616:             bne.s *               * branch if Z clear
02:0000069C 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
02:000006A0 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
02:000006A2 0B380100        	   622:             btst.b d5,$0100
02:000006A6 67FE            	   623:             beq.s *               * branch if Z set
02:000006A8 0D380101        	   624:             btst.b d6,$0101           *
02:000006AC 66FE            	   625:             bne.s *               * branch if Z clear
02:000006AE 0F380102        	   626:             btst.b d7,$0102           *
02:000006B2 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
02:000006B4 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
02:000006BA 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
02:000006BE 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
02:000006C2 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
02:000006C6 0B390000F100    	   635:             btst.b d5,$F100
02:000006CC 67FE            	   636:             beq.s *               * branch if Z set
02:000006CE 0D390000F101    	   637:             btst.b d6,$F101       *
02:000006D4 66FE            	   638:             bne.s *               * branch if Z clear
02:000006D6 0F390000F102    	   639:             btst.b d7,$F102       *
02:000006DC 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
02:000006DE 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
02:000006E0 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
02:000006E2 4BFAFCE2        	   646:             lea op_BTST(pc),a5
02:000006E6 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
02:000006EA 66FE            	   648:             bne.s *               * branch if Z clear
02:000006EC 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
02:000006F0 67FE            	   650:             beq.s *               * branch if Z set
02:000006F2 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
02:000006F6 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
02:000006F8 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
02:000006FC 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
02:000006FE 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
02:00000702 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
02:00000704 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
02:00000706 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
02:00000708 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
02:0000070A 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
02:0000070E 67FE            	   665:             beq.s *               * branch if Z set
02:00000710 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
02:00000714 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
02:00000718 67FE            	   668:             beq.s *               * branch if Z set
02:0000071A 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
02:0000071E 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
02:00000720 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
02:00000724 67FE            	   673:             beq.s *               * branch if Z set
02:00000726 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
02:0000072A 67FE            	   675:             beq.s *               * branch if Z set
02:0000072C 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
02:00000730 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
02:00000732 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
02:00000736 67FE            	   680:             beq.s *               * branch if Z set
02:00000738 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
02:0000073C 67FE            	   682:             beq.s *               * branch if Z set
02:0000073E 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
02:00000742 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
02:00000744 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
02:00000748 67FE            	   687:             beq.s *               * branch if Z set
02:0000074A 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
02:0000074E 67FE            	   689:             beq.s *               * branch if Z set
02:00000750 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
02:00000754 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
02:00000756 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
02:00000758 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
02:0000075A 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
02:0000075C 0B3C0088        	   699:             btst.b d5,#$88
02:00000760 66FE            	   700:             bne.s *               * branch if Z clear
02:00000762 0D3C0088        	   701:             btst.b d6,#$88
02:00000766 67FE            	   702:             beq.s *               * branch if Z set
02:00000768 0F3C0088        	   703:             btst.b d7,#$88
02:0000076C 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
02:0000076E 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
02:00000770 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
02:00000776 08400000        	   721:             bchg.l #0,d0
02:0000077A 67FE            	   722:             beq.s *               * branch if Z set
02:0000077C 08400001        	   723:             bchg.l #1,d0              *
02:00000780 66FE            	   724:             bne.s *               * branch if Z clear
02:00000782 0840001F        	   725:             bchg.l #31,d0             *
02:00000786 67FE            	   726:             beq.s *               * branch if Z set
02:00000788 0C8000000002    	   727:             cmpi.l #$00000002,d0
02:0000078E 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
02:00000790 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000794 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
02:00000798 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:0000079A 08500000        	   735:             bchg.b #0,(a0)
02:0000079E 67FE            	   736:             beq.s *               * branch if Z set
02:000007A0 08500001        	   737:             bchg.b #1,(a0)            *
02:000007A4 66FE            	   738:             bne.s *               * branch if Z clear
02:000007A6 08500007        	   739:             bchg.b #7,(a0)            *
02:000007AA 67FE            	   740:             beq.s *               * branch if Z set
02:000007AC 0C100002        	   741:             cmpi.b #$02,(a0)
02:000007B0 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
02:000007B2 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
02:000007B6 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
02:000007BA 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
02:000007BE 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
02:000007C2 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
02:000007C6 08580000        	   750:             bchg.b #0,(a0)+
02:000007CA 67FE            	   751:             beq.s *               * branch if Z set
02:000007CC 08580001        	   752:             bchg.b #1,(a0)+           *
02:000007D0 66FE            	   753:             bne.s *               * branch if Z clear
02:000007D2 08580007        	   754:             bchg.b #7,(a0)+           *
02:000007D6 67FE            	   755:             beq.s *               * branch if Z set
02:000007D8 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
02:000007DC 4A18            	   757:             cmpi.b #$00,(a0)+
02:000007DE 66FE            	   758:             bne.s *               * branch if Z clear
02:000007E0 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
02:000007E4 66FE            	   760:             bne.s *               * branch if Z clear
02:000007E6 4A18            	   761:             cmpi.b #$00,(a0)+
02:000007E8 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
02:000007EA 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
02:000007EE 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
02:000007F2 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
02:000007F6 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
02:000007FA 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
02:000007FE 08600000        	   770:             bchg.b #0,-(a0)
02:00000802 67FE            	   771:             beq.s *               * branch if Z set
02:00000804 08600001        	   772:             bchg.b #1,-(a0)           *
02:00000808 66FE            	   773:             bne.s *               * branch if Z clear
02:0000080A 08600007        	   774:             bchg.b #7,-(a0)           *
02:0000080E 67FE            	   775:             beq.s *               * branch if Z set
02:00000810 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
02:00000814 4A20            	   777:             cmpi.b #$00,-(a0)
02:00000816 66FE            	   778:             bne.s *               * branch if Z clear
02:00000818 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
02:0000081C 66FE            	   780:             bne.s *               * branch if Z clear
02:0000081E 4A20            	   781:             cmpi.b #$00,-(a0)
02:00000820 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
02:00000822 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
02:00000826 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
02:0000082A 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
02:0000082E 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
02:00000832 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
02:00000836 08500000        	   791:             bchg.b #0,0(a0)
02:0000083A 67FE            	   792:             beq.s *               * branch if Z set
02:0000083C 086800010001    	   793:             bchg.b #1,1(a0)           *
02:00000842 66FE            	   794:             bne.s *               * branch if Z clear
02:00000844 086800070002    	   795:             bchg.b #7,2(a0)           *
02:0000084A 67FE            	   796:             beq.s *               * branch if Z set
02:0000084C 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000850 4A18            	   798:             cmpi.b #$00,(a0)+
02:00000852 66FE            	   799:             bne.s *               * branch if Z clear
02:00000854 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
02:00000858 66FE            	   801:             bne.s *               * branch if Z clear
02:0000085A 4A18            	   802:             cmpi.b #$00,(a0)+
02:0000085C 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
02:0000085E 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
02:00000862 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
02:00000864 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
02:00000868 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
02:0000086A 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
02:0000086C 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
02:00000872 66FE            	   813:             bne.s *               * branch if Z clear
02:00000874 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
02:0000087A 67FE            	   815:             beq.s *               * branch if Z set
02:0000087C 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
02:00000882 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
02:00000884 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
02:0000088A 67FE            	   820:             beq.s *               * branch if Z set
02:0000088C 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
02:00000892 66FE            	   822:             bne.s *               * branch if Z clear
02:00000894 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
02:0000089A 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
02:0000089C 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
02:000008A2 66FE            	   827:             bne.s *               * branch if Z clear
02:000008A4 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
02:000008AA 67FE            	   829:             beq.s *               * branch if Z set
02:000008AC 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
02:000008B2 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
02:000008B4 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
02:000008BA 67FE            	   834:             beq.s *               * branch if Z set
02:000008BC 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
02:000008C2 66FE            	   836:             bne.s *               * branch if Z clear
02:000008C4 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
02:000008CA 67FE            	   838:             beq.s *               * branch if Z set
02:000008CC 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
02:000008D0 4A18            	   840:             cmpi.b #$00,(a0)+
02:000008D2 66FE            	   841:             bne.s *               * branch if Z clear
02:000008D4 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
02:000008D8 66FE            	   843:             bne.s *               * branch if Z clear
02:000008DA 4A18            	   844:             cmpi.b #$00,(a0)+
02:000008DC 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
02:000008DE 087800000100    	   849:             bchg.b #0,$0100
02:000008E4 66FE            	   850:             bne.s *               * branch if Z clear
02:000008E6 087800010101    	   851:             bchg.b #1,$0101           *
02:000008EC 67FE            	   852:             beq.s *               * branch if Z set
02:000008EE 087800070102    	   853:             bchg.b #7,$0102           *
02:000008F4 66FE            	   854:             bne.s *               * branch if Z clear
02:000008F6 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
02:000008FA 0C180001        	   856:             cmpi.b #$01,(a0)+
02:000008FE 66FE            	   857:             bne.s *               * branch if Z clear
02:00000900 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
02:00000904 66FE            	   859:             bne.s *               * branch if Z clear
02:00000906 0C180080        	   860:             cmpi.b #$80,(a0)+
02:0000090A 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
02:0000090C 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
02:00000912 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
02:00000916 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
02:0000091A 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
02:0000091E 087900000000F100	   868:             bchg.b #0,$F100
02:00000926 67FE            	   869:             beq.s *               * branch if Z set
02:00000928 087900010000F101	   870:             bchg.b #1,$F101       *
02:00000930 66FE            	   871:             bne.s *               * branch if Z clear
02:00000932 087900070000F102	   872:             bchg.b #7,$F102       *
02:0000093A 67FE            	   873:             beq.s *               * branch if Z set
02:0000093C 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000940 0C180001        	   875:             cmpi.b #$01,(a0)+
02:00000944 66FE            	   876:             bne.s *               * branch if Z clear
02:00000946 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
02:0000094A 66FE            	   878:             bne.s *               * branch if Z clear
02:0000094C 0C180080        	   879:             cmpi.b #$80,(a0)+
02:00000950 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
02:00000952 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
02:00000958 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
02:0000095A 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
02:0000095C 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
02:0000095E 0B40            	   891:             bchg.l d5,d0
02:00000960 67FE            	   892:             beq.s *               * branch if Z set
02:00000962 0D40            	   893:             bchg.l d6,d0              *
02:00000964 66FE            	   894:             bne.s *               * branch if Z clear
02:00000966 0F40            	   895:             bchg.l d7,d0             *
02:00000968 67FE            	   896:             beq.s *               * branch if Z set
02:0000096A 0C8000000002    	   897:             cmpi.l #$00000002,d0
02:00000970 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
02:00000972 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
02:00000974 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
02:00000976 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
02:00000978 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000097C 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
02:00000980 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:00000982 0B50            	   908:             bchg.b d5,(a0)
02:00000984 67FE            	   909:             beq.s *               * branch if Z set
02:00000986 0D50            	   910:             bchg.b d6,(a0)            *
02:00000988 66FE            	   911:             bne.s *               * branch if Z clear
02:0000098A 0F50            	   912:             bchg.b d7,(a0)            *
02:0000098C 67FE            	   913:             beq.s *               * branch if Z set
02:0000098E 0C100002        	   914:             cmpi.b #$02,(a0)
02:00000992 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
02:00000994 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000998 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
02:0000099C 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
02:000009A0 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
02:000009A4 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
02:000009A8 0B58            	   924:             bchg.b d5,(a0)+
02:000009AA 67FE            	   925:             beq.s *               * branch if Z set
02:000009AC 0D58            	   926:             bchg.b d6,(a0)+           *
02:000009AE 66FE            	   927:             bne.s *               * branch if Z clear
02:000009B0 0F58            	   928:             bchg.b d7,(a0)+           *
02:000009B2 67FE            	   929:             beq.s *               * branch if Z set
02:000009B4 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
02:000009B8 4A18            	   931:             cmpi.b #$00,(a0)+
02:000009BA 66FE            	   932:             bne.s *               * branch if Z clear
02:000009BC 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
02:000009C0 66FE            	   934:             bne.s *               * branch if Z clear
02:000009C2 4A18            	   935:             cmpi.b #$00,(a0)+
02:000009C4 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
02:000009C6 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
02:000009CA 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
02:000009CE 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
02:000009D2 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
02:000009D6 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
02:000009DA 0B60            	   944:             bchg.b d5,-(a0)
02:000009DC 67FE            	   945:             beq.s *               * branch if Z set
02:000009DE 0D60            	   946:             bchg.b d6,-(a0)           *
02:000009E0 66FE            	   947:             bne.s *               * branch if Z clear
02:000009E2 0F60            	   948:             bchg.b d7,-(a0)           *
02:000009E4 67FE            	   949:             beq.s *               * branch if Z set
02:000009E6 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
02:000009EA 4A20            	   951:             cmpi.b #$00,-(a0)
02:000009EC 66FE            	   952:             bne.s *               * branch if Z clear
02:000009EE 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
02:000009F2 66FE            	   954:             bne.s *               * branch if Z clear
02:000009F4 4A20            	   955:             cmpi.b #$00,-(a0)
02:000009F6 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
02:000009F8 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
02:000009FC 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
02:00000A00 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
02:00000A04 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
02:00000A08 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
02:00000A0C 0B50            	   964:             bchg.b d5,0(a0)
02:00000A0E 67FE            	   965:             beq.s *               * branch if Z set
02:00000A10 0D680001        	   966:             bchg.b d6,1(a0)           *
02:00000A14 66FE            	   967:             bne.s *               * branch if Z clear
02:00000A16 0F680002        	   968:             bchg.b d7,2(a0)           *
02:00000A1A 67FE            	   969:             beq.s *               * branch if Z set
02:00000A1C 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000A20 4A18            	   971:             cmpi.b #$00,(a0)+
02:00000A22 66FE            	   972:             bne.s *               * branch if Z clear
02:00000A24 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
02:00000A28 66FE            	   974:             bne.s *               * branch if Z clear
02:00000A2A 4A18            	   975:             cmpi.b #$00,(a0)+
02:00000A2C 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
02:00000A2E 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
02:00000A32 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
02:00000A34 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
02:00000A38 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
02:00000A3A 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
02:00000A3C 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
02:00000A40 66FE            	   985:             bne.s *               * branch if Z clear
02:00000A42 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
02:00000A46 67FE            	   987:             beq.s *               * branch if Z set
02:00000A48 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
02:00000A4C 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
02:00000A4E 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
02:00000A52 67FE            	   992:             beq.s *               * branch if Z set
02:00000A54 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
02:00000A58 66FE            	   994:             bne.s *               * branch if Z clear
02:00000A5A 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
02:00000A5E 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
02:00000A60 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
02:00000A64 66FE            	   999:             bne.s *               * branch if Z clear
02:00000A66 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
02:00000A6A 67FE            	  1001:             beq.s *               * branch if Z set
02:00000A6C 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
02:00000A70 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
02:00000A72 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
02:00000A76 67FE            	  1006:             beq.s *               * branch if Z set
02:00000A78 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
02:00000A7C 66FE            	  1008:             bne.s *               * branch if Z clear
02:00000A7E 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
02:00000A82 67FE            	  1010:             beq.s *               * branch if Z set
02:00000A84 4A18            	  1011:             cmpi.b #$00,(a0)+
02:00000A86 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
02:00000A88 0B780100        	  1015:             bchg.b d5,$0100
02:00000A8C 66FE            	  1016:             bne.s *               * branch if Z clear
02:00000A8E 0D780101        	  1017:             bchg.b d6,$0101           *
02:00000A92 67FE            	  1018:             beq.s *               * branch if Z set
02:00000A94 0F780102        	  1019:             bchg.b d7,$0102           *
02:00000A98 66FE            	  1020:             bne.s *               * branch if Z clear
02:00000A9A 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
02:00000A9E 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
02:00000AA0 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
02:00000AA6 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
02:00000AAA 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
02:00000AAE 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
02:00000AB2 0B790000F100    	  1029:             bchg.b d5,$F100
02:00000AB8 67FE            	  1030:             beq.s *               * branch if Z set
02:00000ABA 0D790000F101    	  1031:             bchg.b d6,$F101       *
02:00000AC0 66FE            	  1032:             bne.s *               * branch if Z clear
02:00000AC2 0F790000F102    	  1033:             bchg.b d7,$F102       *
02:00000AC8 67FE            	  1034:             beq.s *               * branch if Z set
02:00000ACA 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
02:00000AD0 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
02:00000AD4 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
02:00000AD6 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
02:00000AD8 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
02:00000ADE 08800000        	  1054:             bclr.l #0,d0
02:00000AE2 67FE            	  1055:             beq.s *               * branch if Z set
02:00000AE4 08800001        	  1056:             bclr.l #1,d0              *
02:00000AE8 67FE            	  1057:             beq.s *               * branch if Z set
02:00000AEA 0880000F        	  1058:             bclr.l #15,d0             *
02:00000AEE 66FE            	  1059:             bne.s *               * branch if Z clear
02:00000AF0 0880001F        	  1060:             bclr.l #31,d0             *
02:00000AF4 67FE            	  1061:             beq.s *               * branch if Z set
02:00000AF6 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
02:00000AFC 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
02:00000AFE 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000B02 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
02:00000B06 08900000        	  1069:             bclr.b #0,(a0)
02:00000B0A 67FE            	  1070:             beq.s *               * branch if Z set
02:00000B0C 08900007        	  1071:             bclr.b #7,(a0)            *
02:00000B10 66FE            	  1072:             bne.s *               * branch if Z clear
02:00000B12 0C10000E        	  1073:             cmpi.b #$0E,(a0)
02:00000B16 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
02:00000B18 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000B1C 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
02:00000B20 4218            	  1079:             move.b #$00,(a0)+         * populate test data
02:00000B22 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000B26 08980000        	  1081:             bclr.b #0,(a0)+
02:00000B2A 67FE            	  1082:             beq.s *               * branch if Z set
02:00000B2C 08980001        	  1083:             bclr.b #1,(a0)+           *
02:00000B30 66FE            	  1084:             bne.s *               * branch if Z clear
02:00000B32 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000B36 4A18            	  1086:             cmpi.b #$00,(a0)+
02:00000B38 66FE            	  1087:             bne.s *               * branch if Z clear
02:00000B3A 4A18            	  1088:             cmpi.b #$00,(a0)+
02:00000B3C 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
02:00000B3E 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
02:00000B42 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
02:00000B46 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
02:00000B4A 08A00007        	  1096:             bclr.b #7,-(a0)
02:00000B4E 67FE            	  1097:             beq.s *               * branch if Z set
02:00000B50 08A00000        	  1098:             bclr.b #0,-(a0)           *
02:00000B54 67FE            	  1099:             beq.s *               * branch if Z set
02:00000B56 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
02:00000B5A 4A20            	  1101:             cmpi.b #$00,-(a0)
02:00000B5C 66FE            	  1102:             bne.s *               * branch if Z clear
02:00000B5E 4A20            	  1103:             cmpi.b #$00,-(a0)
02:00000B60 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
02:00000B62 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
02:00000B66 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
02:00000B6A 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
02:00000B6E 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
02:00000B72 08900000        	  1112:             bclr.b #0,0(a0)
02:00000B76 67FE            	  1113:             beq.s *               * branch if Z set
02:00000B78 08A800040001    	  1114:             bclr.b #4,1(a0)           *
02:00000B7E 67FE            	  1115:             beq.s *               * branch if Z set
02:00000B80 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000B84 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
02:00000B88 66FE            	  1118:             bne.s *               * branch if Z clear
02:00000B8A 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
02:00000B8E 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
02:00000B90 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
02:00000B94 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
02:00000B96 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
02:00000B9A 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
02:00000B9C 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
02:00000B9E 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
02:00000BA2 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
02:00000BA6 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
02:00000BAA 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
02:00000BB0 67FE            	  1133:             beq.s *               * branch if Z set
02:00000BB2 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
02:00000BB8 67FE            	  1135:             beq.s *               * branch if Z set
02:00000BBA 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
02:00000BC0 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
02:00000BC2 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
02:00000BC8 67FE            	  1140:             beq.s *               * branch if Z set
02:00000BCA 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
02:00000BD0 67FE            	  1142:             beq.s *               * branch if Z set
02:00000BD2 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
02:00000BD8 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
02:00000BDA 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
02:00000BE0 67FE            	  1147:             beq.s *               * branch if Z set
02:00000BE2 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
02:00000BE8 66FE            	  1149:             bne.s *               * branch if Z clear
02:00000BEA 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
02:00000BF0 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
02:00000BF2 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
02:00000BF8 66FE            	  1154:             bne.s *               * branch if Z clear
02:00000BFA 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
02:00000C00 67FE            	  1156:             beq.s *               * branch if Z set
02:00000C02 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
02:00000C08 66FE            	  1158:             bne.s *               * branch if Z clear
02:00000C0A 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000C0E 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
02:00000C12 66FE            	  1161:             bne.s *               * branch if Z clear
02:00000C14 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
02:00000C18 66FE            	  1163:             bne.s *               * branch if Z clear
02:00000C1A 0C180059        	  1164:             cmpi.b #$59,(a0)+
02:00000C1E 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
02:00000C20 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
02:00000C24 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
02:00000C28 08B800000100    	  1171:             bclr.b #0,$0100
02:00000C2E 67FE            	  1172:             beq.s *               * branch if Z set
02:00000C30 08B800010100    	  1173:             bclr.b #1,$0100           *
02:00000C36 67FE            	  1174:             beq.s *               * branch if Z set
02:00000C38 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000C3C 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
02:00000C40 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
02:00000C42 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
02:00000C48 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
02:00000C4C 08B900000000F100	  1183:             bclr.b #0,$F100
02:00000C54 67FE            	  1184:             beq.s *               * branch if Z set
02:00000C56 08B900010000F100	  1185:             bclr.b #1,$F100       *
02:00000C5E 67FE            	  1186:             beq.s *               * branch if Z set
02:00000C60 08B900020000F100	  1187:             bclr.b #2,$F100       *
02:00000C68 67FE            	  1188:             beq.s *               * branch if Z set
02:00000C6A 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
02:00000C70 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
02:00000C74 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
02:00000C76 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
02:00000C7C 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
02:00000C7E 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
02:00000C80 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
02:00000C82 0B80            	  1202:             bclr.l d5,d0
02:00000C84 66FE            	  1203:             bne.s *               * branch if Z clear
02:00000C86 0D80            	  1204:             bclr.l d6,d0              *
02:00000C88 66FE            	  1205:             bne.s *               * branch if Z clear
02:00000C8A 0F80            	  1206:             bclr.l d7,d0             *
02:00000C8C 67FE            	  1207:             beq.s *               * branch if Z set
02:00000C8E 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
02:00000C94 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
02:00000C96 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
02:00000C98 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
02:00000C9A 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
02:00000C9C 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000CA0 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
02:00000CA4 0B90            	  1218:             bclr.b d5,(a0)
02:00000CA6 67FE            	  1219:             beq.s *               * branch if Z set
02:00000CA8 0D90            	  1220:             bclr.b d6,(a0)            *
02:00000CAA 66FE            	  1221:             bne.s *               * branch if Z clear
02:00000CAC 0F90            	  1222:             bclr.b d7,(a0)            *
02:00000CAE 67FE            	  1223:             beq.s *               * branch if Z set
02:00000CB0 4A10            	  1224:             cmpi.b #$00,(a0)
02:00000CB2 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
02:00000CB4 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000CB8 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
02:00000CBC 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
02:00000CC0 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
02:00000CC4 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000CC8 0B98            	  1234:             bclr.b d5,(a0)+
02:00000CCA 67FE            	  1235:             beq.s *               * branch if Z set
02:00000CCC 0D98            	  1236:             bclr.b d6,(a0)+           *
02:00000CCE 66FE            	  1237:             bne.s *               * branch if Z clear
02:00000CD0 0F98            	  1238:             bclr.b d7,(a0)+           *
02:00000CD2 67FE            	  1239:             beq.s *               * branch if Z set
02:00000CD4 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000CD8 4A18            	  1241:             cmpi.b #$00,(a0)+
02:00000CDA 66FE            	  1242:             bne.s *               * branch if Z clear
02:00000CDC 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
02:00000CE0 66FE            	  1244:             bne.s *               * branch if Z clear
02:00000CE2 4A18            	  1245:             cmpi.b #$00,(a0)+
02:00000CE4 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
02:00000CE6 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
02:00000CEA 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
02:00000CEE 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
02:00000CF2 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
02:00000CF6 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
02:00000CFA 0BA0            	  1254:             bclr.b d5,-(a0)
02:00000CFC 67FE            	  1255:             beq.s *               * branch if Z set
02:00000CFE 0DA0            	  1256:             bclr.b d6,-(a0)           *
02:00000D00 66FE            	  1257:             bne.s *               * branch if Z clear
02:00000D02 0FA0            	  1258:             bclr.b d7,-(a0)           *
02:00000D04 67FE            	  1259:             beq.s *               * branch if Z set
02:00000D06 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
02:00000D0A 4A20            	  1261:             cmpi.b #$00,-(a0)
02:00000D0C 66FE            	  1262:             bne.s *               * branch if Z clear
02:00000D0E 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
02:00000D12 66FE            	  1264:             bne.s *               * branch if Z clear
02:00000D14 4A20            	  1265:             cmpi.b #$00,-(a0)
02:00000D16 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
02:00000D18 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
02:00000D1C 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
02:00000D20 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
02:00000D24 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
02:00000D28 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
02:00000D2C 0B90            	  1274:             bclr.b d5,0(a0)
02:00000D2E 67FE            	  1275:             beq.s *               * branch if Z set
02:00000D30 0DA80001        	  1276:             bclr.b d6,1(a0)           *
02:00000D34 66FE            	  1277:             bne.s *               * branch if Z clear
02:00000D36 0FA80002        	  1278:             bclr.b d7,2(a0)           *
02:00000D3A 67FE            	  1279:             beq.s *               * branch if Z set
02:00000D3C 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000D40 4A18            	  1281:             cmpi.b #$00,(a0)+
02:00000D42 66FE            	  1282:             bne.s *               * branch if Z clear
02:00000D44 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
02:00000D48 66FE            	  1284:             bne.s *               * branch if Z clear
02:00000D4A 4A18            	  1285:             cmpi.b #$00,(a0)+
02:00000D4C 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
02:00000D4E 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
02:00000D52 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
02:00000D56 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
02:00000D5A 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
02:00000D5E 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
02:00000D62 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
02:00000D66 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
02:00000D68 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
02:00000D6C 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
02:00000D6E 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
02:00000D70 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
02:00000D74 67FE            	  1300:             beq.s *               * branch if Z set
02:00000D76 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
02:00000D7A 67FE            	  1302:             beq.s *               * branch if Z set
02:00000D7C 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
02:00000D80 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
02:00000D82 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
02:00000D86 66FE            	  1307:             bne.s *               * branch if Z clear
02:00000D88 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
02:00000D8C 66FE            	  1309:             bne.s *               * branch if Z clear
02:00000D8E 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
02:00000D92 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
02:00000D94 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
02:00000D98 66FE            	  1314:             bne.s *               * branch if Z clear
02:00000D9A 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
02:00000D9E 66FE            	  1316:             bne.s *               * branch if Z clear
02:00000DA0 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
02:00000DA4 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
02:00000DA6 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
02:00000DAA 66FE            	  1321:             bne.s *               * branch if Z clear
02:00000DAC 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
02:00000DB0 66FE            	  1323:             bne.s *               * branch if Z clear
02:00000DB2 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
02:00000DB6 66FE            	  1325:             bne.s *               * branch if Z clear
02:00000DB8 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
02:00000DBC 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
02:00000DC0 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
02:00000DC2 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
02:00000DC6 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
02:00000DCA 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
02:00000DCE 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
02:00000DD2 0BB80100        	  1335:             bclr.b d5,$0100
02:00000DD6 67FE            	  1336:             beq.s *               * branch if Z set
02:00000DD8 0DB80101        	  1337:             bclr.b d6,$0101           *
02:00000DDC 67FE            	  1338:             beq.s *               * branch if Z set
02:00000DDE 0FB80102        	  1339:             bclr.b d7,$0102           *
02:00000DE2 67FE            	  1340:             beq.s *               * branch if Z set
02:00000DE4 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
02:00000DE8 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
02:00000DEC 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
02:00000DEE 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
02:00000DF4 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
02:00000DF8 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
02:00000DFC 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
02:00000E00 0BB90000F100    	  1350:             bclr.b d5,$F100
02:00000E06 67FE            	  1351:             beq.s *               * branch if Z set
02:00000E08 0DB90000F101    	  1352:             bclr.b d6,$F101       *
02:00000E0E 66FE            	  1353:             bne.s *               * branch if Z clear
02:00000E10 0FB90000F102    	  1354:             bclr.b d7,$F102       *
02:00000E16 67FE            	  1355:             beq.s *               * branch if Z set
02:00000E18 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
02:00000E1E 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
02:00000E22 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
02:00000E24 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
02:00000E26 7000            	  1375:             moveq  #$00000000,d0      * populate test data
02:00000E28 08C00000        	  1376:             bset.l #0,d0
02:00000E2C 66FE            	  1377:             bne.s *               * branch if Z clear
02:00000E2E 08C00001        	  1378:             bset.l #1,d0              *
02:00000E32 66FE            	  1379:             bne.s *               * branch if Z clear
02:00000E34 08C0000F        	  1380:             bset.l #15,d0             *
02:00000E38 66FE            	  1381:             bne.s *               * branch if Z clear
02:00000E3A 08C0001F        	  1382:             bset.l #31,d0             *
02:00000E3E 66FE            	  1383:             bne.s *               * branch if Z clear
02:00000E40 0C8080008003    	  1384:             cmpi.l #$80008003,d0
02:00000E46 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
02:00000E48 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000E4C 4210            	  1390:             move.b #$00,(a0)          * populate test data
02:00000E4E 08D00000        	  1391:             bset.b #0,(a0)
02:00000E52 66FE            	  1392:             bne.s *               * branch if Z clear
02:00000E54 08D00007        	  1393:             bset.b #7,(a0)            *
02:00000E58 66FE            	  1394:             bne.s *               * branch if Z clear
02:00000E5A 0C100081        	  1395:             cmpi.b #$81,(a0)
02:00000E5E 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
02:00000E60 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000E64 4218            	  1400:             move.b #$00,(a0)+         * populate test data
02:00000E66 4218            	  1401:             move.b #$00,(a0)+         * populate test data
02:00000E68 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000E6C 08D80000        	  1403:             bset.b #0,(a0)+
02:00000E70 66FE            	  1404:             bne.s *               * branch if Z clear
02:00000E72 08D80001        	  1405:             bset.b #1,(a0)+           *
02:00000E76 66FE            	  1406:             bne.s *               * branch if Z clear
02:00000E78 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000E7C 0C180001        	  1408:             cmpi.b #$01,(a0)+
02:00000E80 66FE            	  1409:             bne.s *               * branch if Z clear
02:00000E82 0C180002        	  1410:             cmpi.b #$02,(a0)+
02:00000E86 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
02:00000E88 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
02:00000E8C 4218            	  1416:             move.b #$00,(a0)+         * populate test data
02:00000E8E 4218            	  1417:             move.b #$00,(a0)+         * populate test data
02:00000E90 08E00007        	  1418:             bset.b #7,-(a0)
02:00000E94 66FE            	  1419:             bne.s *               * branch if Z clear
02:00000E96 08E00000        	  1420:             bset.b #0,-(a0)           *
02:00000E9A 66FE            	  1421:             bne.s *               * branch if Z clear
02:00000E9C 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
02:00000EA0 0C200080        	  1423:             cmpi.b #$80,-(a0)
02:00000EA4 66FE            	  1424:             bne.s *               * branch if Z clear
02:00000EA6 0C200001        	  1425:             cmpi.b #$01,-(a0)
02:00000EAA 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
02:00000EAC 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
02:00000EB0 4218            	  1431:             move.b #$00,(a0)+         * populate test data
02:00000EB2 4218            	  1432:             move.b #$00,(a0)+         * populate test data
02:00000EB4 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
02:00000EB8 08D00000        	  1434:             bset.b #0,0(a0)
02:00000EBC 66FE            	  1435:             bne.s *               * branch if Z clear
02:00000EBE 08E800040001    	  1436:             bset.b #4,1(a0)           *
02:00000EC4 66FE            	  1437:             bne.s *               * branch if Z clear
02:00000EC6 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000ECA 0C180001        	  1439:             cmpi.b #$01,(a0)+
02:00000ECE 66FE            	  1440:             bne.s *               * branch if Z clear
02:00000ED0 0C180010        	  1441:             cmpi.b #$10,(a0)+
02:00000ED4 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
02:00000ED6 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
02:00000EDA 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
02:00000EDC 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
02:00000EE0 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
02:00000EE2 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
02:00000EE4 4218            	  1451:             move.b #$00,(a0)+         * populate test data
02:00000EE6 4218            	  1452:             move.b #$00,(a0)+         * populate test data
02:00000EE8 4218            	  1453:             move.b #$00,(a0)+         * populate test data
02:00000EEA 4218            	  1454:             move.b #$00,(a0)+         * populate test data
02:00000EEC 4218            	  1455:             move.b #$00,(a0)+         * populate test data
02:00000EEE 4218            	  1456:             move.b #$00,(a0)+         * populate test data
02:00000EF0 4218            	  1457:             move.b #$00,(a0)+         * populate test data
02:00000EF2 4218            	  1458:             move.b #$00,(a0)+         * populate test data
02:00000EF4 4218            	  1459:             move.b #$00,(a0)+         * populate test data
02:00000EF6 4218            	  1460:             move.b #$00,(a0)+         * populate test data
02:00000EF8 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
02:00000EFC 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
02:00000F02 66FE            	  1463:             bne.s *               * branch if Z clear
02:00000F04 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
02:00000F0A 66FE            	  1465:             bne.s *               * branch if Z clear
02:00000F0C 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
02:00000F12 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
02:00000F14 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
02:00000F1A 66FE            	  1470:             bne.s *               * branch if Z clear
02:00000F1C 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
02:00000F22 66FE            	  1472:             bne.s *               * branch if Z clear
02:00000F24 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
02:00000F2A 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
02:00000F2C 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
02:00000F32 66FE            	  1477:             bne.s *               * branch if Z clear
02:00000F34 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
02:00000F3A 66FE            	  1479:             bne.s *               * branch if Z clear
02:00000F3C 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
02:00000F42 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
02:00000F44 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
02:00000F4A 66FE            	  1484:             bne.s *               * branch if Z clear
02:00000F4C 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
02:00000F52 66FE            	  1486:             bne.s *               * branch if Z clear
02:00000F54 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
02:00000F5A 66FE            	  1488:             bne.s *               * branch if Z clear
02:00000F5C 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F60 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
02:00000F66 66FE            	  1491:             bne.s *               * branch if Z clear
02:00000F68 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
02:00000F6E 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
02:00000F70 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
02:00000F74 4218            	  1499:             move.b #$00,(a0)+         * populate test data
02:00000F76 08F800000100    	  1500:             bset.b #0,$0100
02:00000F7C 66FE            	  1501:             bne.s *               * branch if Z clear
02:00000F7E 08F800010100    	  1502:             bset.b #1,$0100           *
02:00000F84 66FE            	  1503:             bne.s *               * branch if Z clear
02:00000F86 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F8A 0C180003        	  1505:             cmpi.b #$03,(a0)+
02:00000F8E 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
02:00000F90 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
02:00000F96 4210            	  1511:             move.b #$00,(a0)          * populate test data
02:00000F98 08F900000000F100	  1512:             bset.b #0,$F100
02:00000FA0 66FE            	  1513:             bne.s *               * branch if Z clear
02:00000FA2 08F900010000F100	  1514:             bset.b #1,$F100       *
02:00000FAA 66FE            	  1515:             bne.s *               * branch if Z clear
02:00000FAC 08F900020000F100	  1516:             bset.b #2,$F100       *
02:00000FB4 66FE            	  1517:             bne.s *               * branch if Z clear
02:00000FB6 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
02:00000FBC 0C180007        	  1519:             cmpi.b #$07,(a0)+
02:00000FC0 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
02:00000FC2 7000            	  1526:             moveq  #$00000000,d0      * populate test data
02:00000FC4 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
02:00000FC6 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
02:00000FC8 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
02:00000FCA 0BC0            	  1531:             bset.l d5,d0
02:00000FCC 66FE            	  1532:             bne.s *               * branch if Z clear
02:00000FCE 0DC0            	  1533:             bset.l d6,d0              *
02:00000FD0 66FE            	  1534:             bne.s *               * branch if Z clear
02:00000FD2 0FC0            	  1535:             bset.l d7,d0             *
02:00000FD4 66FE            	  1536:             bne.s *               * branch if Z clear
02:00000FD6 0C8080000003    	  1537:             cmpi.l #$80000003,d0
02:00000FDC 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
02:00000FDE 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
02:00000FE0 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
02:00000FE2 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
02:00000FE4 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000FE8 4210            	  1546:             move.b #$00,(a0)          * populate test data
02:00000FEA 0BD0            	  1547:             bset.b d5,(a0)
02:00000FEC 66FE            	  1548:             bne.s *               * branch if Z clear
02:00000FEE 0DD0            	  1549:             bset.b d6,(a0)            *
02:00000FF0 66FE            	  1550:             bne.s *               * branch if Z clear
02:00000FF2 0FD0            	  1551:             bset.b d7,(a0)            *
02:00000FF4 66FE            	  1552:             bne.s *               * branch if Z clear
02:00000FF6 0C100083        	  1553:             cmpi.b #$83,(a0)
02:00000FFA 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
02:00000FFC 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
02:00001000 4218            	  1559:             move.b #$00,(a0)+         * populate test data
02:00001002 4218            	  1560:             move.b #$00,(a0)+         * populate test data
02:00001004 4218            	  1561:             move.b #$00,(a0)+         * populate test data
02:00001006 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000100A 0BD8            	  1563:             bset.b d5,(a0)+
02:0000100C 66FE            	  1564:             bne.s *               * branch if Z clear
02:0000100E 0DD8            	  1565:             bset.b d6,(a0)+           *
02:00001010 66FE            	  1566:             bne.s *               * branch if Z clear
02:00001012 0FD8            	  1567:             bset.b d7,(a0)+           *
02:00001014 66FE            	  1568:             bne.s *               * branch if Z clear
02:00001016 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000101A 0C180001        	  1570:             cmpi.b #$01,(a0)+
02:0000101E 66FE            	  1571:             bne.s *               * branch if Z clear
02:00001020 0C180002        	  1572:             cmpi.b #$02,(a0)+
02:00001024 66FE            	  1573:             bne.s *               * branch if Z clear
02:00001026 0C180080        	  1574:             cmpi.b #$80,(a0)+
02:0000102A 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
02:0000102C 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
02:00001030 4218            	  1579:             move.b #$00,(a0)+         * populate test data
02:00001032 4218            	  1580:             move.b #$00,(a0)+         * populate test data
02:00001034 4218            	  1581:             move.b #$00,(a0)+         * populate test data
02:00001036 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
02:0000103A 0BE0            	  1583:             bset.b d5,-(a0)
02:0000103C 66FE            	  1584:             bne.s *               * branch if Z clear
02:0000103E 0DE0            	  1585:             bset.b d6,-(a0)           *
02:00001040 66FE            	  1586:             bne.s *               * branch if Z clear
02:00001042 0FE0            	  1587:             bset.b d7,-(a0)           *
02:00001044 66FE            	  1588:             bne.s *               * branch if Z clear
02:00001046 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
02:0000104A 0C200001        	  1590:             cmpi.b #$01,-(a0)
02:0000104E 66FE            	  1591:             bne.s *               * branch if Z clear
02:00001050 0C200002        	  1592:             cmpi.b #$02,-(a0)
02:00001054 66FE            	  1593:             bne.s *               * branch if Z clear
02:00001056 0C200080        	  1594:             cmpi.b #$80,-(a0)
02:0000105A 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
02:0000105C 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
02:00001060 4218            	  1599:             move.b #$00,(a0)+         * populate test data
02:00001062 4218            	  1600:             move.b #$00,(a0)+         * populate test data
02:00001064 4218            	  1601:             move.b #$00,(a0)+         * populate test data
02:00001066 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
02:0000106A 0BD0            	  1603:             bset.b d5,0(a0)
02:0000106C 66FE            	  1604:             bne.s *               * branch if Z clear
02:0000106E 0DE80001        	  1605:             bset.b d6,1(a0)           *
02:00001072 66FE            	  1606:             bne.s *               * branch if Z clear
02:00001074 0FE80002        	  1607:             bset.b d7,2(a0)           *
02:00001078 66FE            	  1608:             bne.s *               * branch if Z clear
02:0000107A 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000107E 0C180001        	  1610:             cmpi.b #$01,(a0)+
02:00001082 66FE            	  1611:             bne.s *               * branch if Z clear
02:00001084 0C180002        	  1612:             cmpi.b #$02,(a0)+
02:00001088 66FE            	  1613:             bne.s *               * branch if Z clear
02:0000108A 0C180080        	  1614:             cmpi.b #$80,(a0)+
02:0000108E 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
02:00001090 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
02:00001094 4218            	  1619:             move.b #$00,(a0)+         * populate test data
02:00001096 4218            	  1620:             move.b #$00,(a0)+         * populate test data
02:00001098 4218            	  1621:             move.b #$00,(a0)+         * populate test data
02:0000109A 4218            	  1622:             move.b #$00,(a0)+         * populate test data
02:0000109C 4218            	  1623:             move.b #$00,(a0)+         * populate test data
02:0000109E 4218            	  1624:             move.b #$00,(a0)+         * populate test data
02:000010A0 4218            	  1625:             move.b #$00,(a0)+         * populate test data
02:000010A2 4218            	  1626:             move.b #$00,(a0)+         * populate test data
02:000010A4 4218            	  1627:             move.b #$00,(a0)+         * populate test data
02:000010A6 4218            	  1628:             move.b #$00,(a0)+         * populate test data
02:000010A8 4218            	  1629:             move.b #$00,(a0)+         * populate test data
02:000010AA 4218            	  1630:             move.b #$00,(a0)+         * populate test data
02:000010AC 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
02:000010B0 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
02:000010B2 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
02:000010B6 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
02:000010B8 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
02:000010BA 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
02:000010BE 66FE            	  1637:             bne.s *               * branch if Z clear
02:000010C0 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
02:000010C4 66FE            	  1639:             bne.s *               * branch if Z clear
02:000010C6 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
02:000010CA 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
02:000010CC 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
02:000010D0 66FE            	  1644:             bne.s *               * branch if Z clear
02:000010D2 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
02:000010D6 66FE            	  1646:             bne.s *               * branch if Z clear
02:000010D8 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
02:000010DC 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
02:000010DE 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
02:000010E2 66FE            	  1651:             bne.s *               * branch if Z clear
02:000010E4 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
02:000010E8 66FE            	  1653:             bne.s *               * branch if Z clear
02:000010EA 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
02:000010EE 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
02:000010F0 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
02:000010F4 66FE            	  1658:             bne.s *               * branch if Z clear
02:000010F6 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
02:000010FA 66FE            	  1660:             bne.s *               * branch if Z clear
02:000010FC 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
02:00001100 66FE            	  1662:             bne.s *               * branch if Z clear
02:00001102 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
02:00001106 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
02:0000110C 66FE            	  1665:             bne.s *               * branch if Z clear
02:0000110E 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
02:00001114 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
02:00001116 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
02:0000111A 4218            	  1672:             move.b #$00,(a0)+         * populate test data
02:0000111C 4218            	  1673:             move.b #$00,(a0)+         * populate test data
02:0000111E 4218            	  1674:             move.b #$00,(a0)+         * populate test data
02:00001120 0BF80100        	  1675:             bset.b d5,$0100
02:00001124 66FE            	  1676:             bne.s *               * branch if Z clear
02:00001126 0DF80100        	  1677:             bset.b d6,$0100           *
02:0000112A 66FE            	  1678:             bne.s *               * branch if Z clear
02:0000112C 0FF80100        	  1679:             bset.b d7,$0100           *
02:00001130 66FE            	  1680:             bne.s *               * branch if Z clear
02:00001132 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
02:00001136 0C180083        	  1682:             cmpi.b #$83,(a0)+
02:0000113A 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
02:0000113C 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
02:00001142 4218            	  1687:             move.b #$00,(a0)+         * populate test data
02:00001144 4218            	  1688:             move.b #$00,(a0)+         * populate test data
02:00001146 4218            	  1689:             move.b #$00,(a0)+         * populate test data
02:00001148 0BF90000F100    	  1690:             bset.b d5,$F100
02:0000114E 66FE            	  1691:             bne.s *               * branch if Z clear
02:00001150 0DF90000F100    	  1692:             bset.b d6,$F100       *
02:00001156 66FE            	  1693:             bne.s *               * branch if Z clear
02:00001158 0FF90000F100    	  1694:             bset.b d7,$F100       *
02:0000115E 66FE            	  1695:             bne.s *               * branch if Z clear
02:00001160 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
02:00001166 0C100083        	  1697:             cmpi.b #$83,(a0)
02:0000116A 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
02:0000116C 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
02:0000116E 307C0100        	  1711:             move.l #$00000100,a0
02:00001172 203C12345678    	  1712:             move.l #$12345678,d0
02:00001178 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
02:0000117E 4290            	  1714:             move.l #0,(a0)
02:00001180 42A80004        	  1715:             move.l #0,4(a0)
                            	  1716: 
02:00001184 01880000        	  1717:             movep.w d0,0(a0)      * even offset
02:00001188 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
02:0000118C 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
02:00001190 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
02:00001194 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
02:0000119A 66FE            	  1724:             bne.s *
02:0000119C 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
02:000011A4 66FE            	  1726:             bne.s *
02:000011A6 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
02:000011AE 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
02:000011B0 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
02:000011B6 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
02:000011BC 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
02:000011C2 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
02:000011C8 01080000        	  1737:             movep.w 0(a0),d0      * even offset
02:000011CC 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
02:000011D0 05480004        	  1740:             movep.l 4(a0),d2      * even offset
02:000011D4 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
02:000011D8 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
02:000011DE 66FE            	  1744:             bne.s *
02:000011E0 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
02:000011E6 66FE            	  1746:             bne.s *
02:000011E8 0C8212345678    	  1747:             cmpi.l #$12345678,d2
02:000011EE 66FE            	  1748:             bne.s *
02:000011F0 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
02:000011F6 66FE            	  1750:             bne.s *
                            	  1751: 
02:000011F8 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
02:000011FA 203C12345678    	  1764:             move.l #$12345678,d0
02:00001200 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
02:00001204 000000FF        	  1766:             ori.b  #$FF,d0
02:00001208 0A00005A        	  1767:             eori.b #$5A,d0
02:0000120C 020000F0        	  1768:             andi.b #$F0,d0
02:00001210 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
02:00001212 65FE            	  1770:             bcs.s *
02:00001214 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
02:00001216 4200            	  1772:             andi.b #$00,d0
02:00001218 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
02:0000121A 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
02:0000121C 223C12345678    	  1777:             move.l #$12345678,d1
02:00001222 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
02:00001226 0041FFFF        	  1779:             ori.w  #$FFFF,d1
02:0000122A 0A415A5A        	  1780:             eori.w #$5A5A,d1
02:0000122E 0241F0F0        	  1781:             andi.w #$F0F0,d1
02:00001232 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
02:00001234 65FE            	  1783:             bcs.s *
02:00001236 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
02:00001238 4241            	  1785:             andi.w #$0000,d1
02:0000123A 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
02:0000123C 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
02:0000123E 243C12345678    	  1790:             move.l #$12345678,d2
02:00001244 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
02:00001248 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
02:0000124E 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
02:00001254 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
02:0000125A 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
02:0000125C 65FE            	  1796:             bcs.s *
02:0000125E 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
02:00001260 4282            	  1798:             andi.l #$00000000,d2
02:00001262 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
02:00001264 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
02:00001266 307C0100        	  1804:             move.l #$00000100,a0
02:0000126A 20BC12345678    	  1805:             move.l #$12345678,(a0)
02:00001270 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
02:00001274 001000FF        	  1807:             ori.b  #$FF,(a0)
02:00001278 0A10005A        	  1808:             eori.b #$5A,(a0)
02:0000127C 021000F0        	  1809:             andi.b #$F0,(a0)
02:00001280 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
02:00001282 65FE            	  1811:             bcs.s *
02:00001284 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
02:00001286 4210            	  1813:             andi.b #$00,(a0)
02:00001288 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
02:0000128A 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
02:0000128C 4A10            	  1816:             cmpi.b #$00,(a0)
02:0000128E 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
02:00001290 20BC12345678    	  1820:             move.l #$12345678,(a0)
02:00001296 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
02:0000129A 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
02:0000129E 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
02:000012A2 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
02:000012A6 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
02:000012A8 65FE            	  1826:             bcs.s *
02:000012AA 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
02:000012AC 4250            	  1828:             andi.w #$0000,(a0)
02:000012AE 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
02:000012B0 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
02:000012B2 4A50            	  1831:             cmpi.w #$00,(a0)
02:000012B4 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
02:000012B6 20BC12345678    	  1835:             move.l #$12345678,(a0)
02:000012BC 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
02:000012C0 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
02:000012C6 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
02:000012CC 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
02:000012D2 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
02:000012D4 65FE            	  1841:             bcs.s *
02:000012D6 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
02:000012D8 4290            	  1843:             andi.l #$00000000,(a0)
02:000012DA 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
02:000012DC 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
02:000012DE 4A90            	  1846:             cmpi.l #$00,(a0)
02:000012E0 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
02:000012E2 307C0100        	  1852:             move.l #$00000100,a0
02:000012E6 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
02:000012EC 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
02:000012F0 001800F5        	  1856:             ori.b  #$F5,(a0)+
02:000012F4 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
02:000012F6 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
02:000012F8 4618            	  1860:             eori.b #$FF,(a0)+
02:000012FA 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
02:000012FC 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
02:000012FE 021800AA        	  1864:             andi.b #$AA,(a0)+
02:00001302 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
02:00001304 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
02:00001306 307C0100        	  1868:             move.l #$00000100,a0
02:0000130A 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
02:00001310 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
02:00001312 307C0100        	  1874:             move.l #$00000100,a0
02:00001316 327C0104        	  1875:             move.l #$00000104,a1
02:0000131A 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
02:00001320 22BC12345678    	  1877:             move.l #$12345678,(a1)
02:00001326 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
02:0000132A 00585678        	  1880:             ori.w  #$5678,(a0)+
02:0000132E 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
02:00001330 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
02:00001332 4658            	  1884:             eori.w #$FFFF,(a0)+
02:00001334 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
02:00001336 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
02:00001338 0258A55A        	  1888:             andi.w #$A55A,(a0)+
02:0000133C 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
02:0000133E 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
02:00001340 307C0100        	  1892:             move.l #$00000100,a0
02:00001344 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
02:0000134A 307C0104        	  1894:             move.l #$00000104,a0
02:0000134E 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
02:00001354 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
02:00001356 307C0100        	  1899:             move.l #$00000100,a0
02:0000135A 4298            	  1900:             move.l #$00000000,(a0)+
02:0000135C 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
02:00001362 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
02:00001368 307C0100        	  1903:             move.l #$00000100,a0
02:0000136C 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
02:00001370 009812345678    	  1906:             ori.l  #$12345678,(a0)+
02:00001376 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
02:00001378 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
02:0000137A 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
02:0000137C 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
02:0000137E 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
02:00001380 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
02:00001386 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
02:00001388 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
02:0000138A 307C0100        	  1918:             move.l #$00000100,a0
02:0000138E 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
02:00001394 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
02:0000139A 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
02:000013A0 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
02:000013A2 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
02:000013A4 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
02:000013AA 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
02:000013AC 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
02:000013AE 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
02:000013B0 6100EF20        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
02:000013B4 6100143E        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
02:000013B8 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
02:000013BE 66FE            	  1945:                 bne.s *
02:000013C0 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
02:000013C6 66FE            	  1947:                 bne.s *
02:000013C8 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
02:000013CE 66FE            	  1949:                 bne.s *
02:000013D0 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
02:000013D6 66FE            	  1951:                 bne.s *
                            	  1952: 
02:000013D8 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
02:000013DA 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
02:000013E0 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
02:000013E2 307C0100        	  1966:             move.l #$00000100,a0
02:000013E6 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
02:000013EC 7080            	  1970:             move.l #$FFFFFF80,d0
02:000013EE 0C000080        	  1971:             cmpi.b #$80,d0
02:000013F2 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
02:000013F4 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
02:000013F6 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
02:000013F8 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
02:000013FA 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
02:00001400 4A01            	  1978:             cmpi.b #$00,d1
02:00001402 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
02:00001404 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001406 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001408 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
02:0000140A 7481D442        	  1984:             move.l #$FFFFFF02,d2
02:0000140E 0C0200FF        	  1985:             cmpi.b #$FF,d2
02:00001412 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
02:00001414 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001416 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001418 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
02:0000141A 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
02:00001420 0C0300FF        	  1992:             cmpi.b #$FF,d3
02:00001424 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
02:00001426 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001428 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000142A 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
02:0000142C 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
02:00001432 0C408000        	  2001:             cmpi.w #$8000,d0
02:00001436 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
02:00001438 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000143A 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000143C 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
02:0000143E 223CFFF00000    	  2007:             move.l #$FFF00000,d1
02:00001444 4A41            	  2008:             cmpi.w #$0000,d1
02:00001446 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
02:00001448 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000144A 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000144C 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
02:0000144E 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
02:00001454 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
02:00001458 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
02:0000145A 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000145C 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000145E 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
02:00001460 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
02:00001466 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
02:0000146A 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
02:0000146C 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000146E 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001470 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
02:00001472 203C80000000    	  2029:             move.l #$80000000,d0
02:00001478 0C8080000000    	  2030:             cmpi.l #$80000000,d0
02:0000147E 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
02:00001480 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001482 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001484 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
02:00001486 7200            	  2036:             moveq  #$00000000,d1
02:00001488 4A81            	  2037:             cmpi.l #$00000000,d1
02:0000148A 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
02:0000148C 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000148E 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001490 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
02:00001492 7402            	  2043:             moveq  #$00000002,d2
02:00001494 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
02:0000149A 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
02:0000149C 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000149E 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
02:000014A0 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
02:000014A2 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
02:000014A8 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
02:000014AE 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
02:000014B0 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
02:000014B2 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
02:000014B4 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
02:000014B6 307C0100        	  2061:             move.l #$00000100,a0
02:000014BA 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
02:000014BC 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
02:000014C4 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
02:000014CC 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
02:000014D2 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
02:000014D4 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
02:000014D6 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
02:000014D8 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
02:000014DA 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
02:000014E2 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
02:000014E6 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
02:000014E8 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
02:000014EA 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
02:000014EC 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
02:000014EE 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
02:000014F6 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
02:000014FC 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
02:000014FE 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001500 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001502 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
02:00001504 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
02:0000150C 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
02:00001512 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
02:00001514 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001516 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001518 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
02:0000151A 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
02:00001522 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
02:00001528 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
02:0000152A 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000152C 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000152E 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
02:00001530 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
02:00001538 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
02:0000153C 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
02:0000153E 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001540 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001542 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
02:00001544 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
02:0000154C 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
02:00001552 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
02:00001554 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001556 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001558 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
02:0000155A 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
02:00001562 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
02:00001568 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
02:0000156A 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000156C 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000156E 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
02:00001570 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
02:00001578 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
02:00001580 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
02:00001582 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001584 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001586 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
02:00001588 42B0700C        	  2131:             move.l #$00000000,12(a0,d7)
02:0000158C 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
02:00001590 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
02:00001592 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001594 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001596 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
02:00001598 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
02:000015A0 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
02:000015A8 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
02:000015AA 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
02:000015AC 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
02:000015AE 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
02:000015B0 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
02:000015B8 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
02:000015C0 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
02:000015C2 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
02:000015C4 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
02:000015C6 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
02:000015C8 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
02:000015CA 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
02:000015D0 06000000        	  2168:             addi.b #0,d0
02:000015D4 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
02:000015D6 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
02:000015D8 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
02:000015DA 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
02:000015DC 06000010        	  2173:             addi.b #$10,d0
02:000015E0 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
02:000015E2 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
02:000015E4 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
02:000015E6 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
02:000015E8 060000A5        	  2178:             addi.b #$A5,d0
02:000015EC 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
02:000015EE 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
02:000015F0 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
02:000015F2 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
02:000015F4 0C00002D        	  2183:             cmpi.b #$2D,d0
02:000015F8 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
02:000015FA 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
02:00001600 06400000        	  2188:             addi.w #0,d0
02:00001604 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
02:00001606 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001608 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000160A 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000160C 06407000        	  2193:             addi.w #$7000,d0
02:00001610 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
02:00001612 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001614 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001616 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001618 0640A55A        	  2198:             addi.w #$A55A,d0
02:0000161C 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
02:0000161E 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001620 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001622 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001624 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
02:00001628 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
02:0000162A 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
02:00001630 068000000000    	  2208:             addi.l #0,d0
02:00001636 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
02:00001638 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000163A 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000163C 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000163E 0680F0000000    	  2213:             addi.l #$F0000000,d0
02:00001644 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
02:00001646 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001648 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000164A 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000164C 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
02:00001652 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
02:00001654 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001656 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001658 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000165A 0680A0000000    	  2223:             addi.l #$A0000000,d0
02:00001660 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001662 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
02:00001668 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
02:0000166A 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
02:00001670 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
02:00001676 063900000000F103	  2233:             addi.b #0,$F103
02:0000167E 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
02:00001680 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001682 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001684 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001686 063900100000F103	  2238:             addi.b #$10,$F103
02:0000168E 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
02:00001690 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001692 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001694 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001696 063900A50000F103	  2243:             addi.b #$A5,$F103
02:0000169E 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
02:000016A0 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
02:000016A2 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
02:000016A4 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
02:000016A6 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
02:000016AE 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
02:000016B0 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
02:000016B6 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
02:000016BC 067900000000F100	  2254:             addi.w #0,$F100
02:000016C4 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
02:000016C6 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
02:000016C8 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
02:000016CA 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
02:000016CC 067970000000F100	  2259:             addi.w #$7000,$F100
02:000016D4 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
02:000016D6 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
02:000016D8 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
02:000016DA 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
02:000016DC 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
02:000016E4 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
02:000016E6 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
02:000016E8 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
02:000016EA 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
02:000016EC 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
02:000016F4 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
02:000016F6 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
02:000016FE F100
02:00001700 06B9000000000000	  2274:             addi.l #0,$F100
02:00001708 F100
02:0000170A 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
02:0000170C 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000170E 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001710 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001712 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
02:0000171A F100
02:0000171C 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
02:0000171E 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001720 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001722 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001724 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
02:0000172C F100
02:0000172E 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
02:00001730 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001732 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001734 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001736 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
02:0000173E F100
02:00001740 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001742 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
02:0000174A F100
02:0000174C 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
02:0000174E 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
02:00001750 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
02:00001756 04000000        	  2306:             subi.b #0,d0
02:0000175A 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
02:0000175C 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000175E 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001760 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001762 04000010        	  2311:             subi.b #$10,d0
02:00001766 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
02:00001768 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000176A 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000176C 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000176E 040000A5        	  2316:             subi.b #$A5,d0
02:00001772 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
02:00001774 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001776 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001778 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
02:0000177A 0C0000C3        	  2321:             cmpi.b #$C3,d0
02:0000177E 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
02:00001780 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
02:00001786 04400000        	  2326:             subi.w #0,d0
02:0000178A 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
02:0000178C 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000178E 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001790 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001792 04407000        	  2331:             subi.w #$7000,d0
02:00001796 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
02:00001798 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000179A 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000179C 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000179E 0440A55A        	  2336:             subi.w #$A55A,d0
02:000017A2 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
02:000017A4 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
02:000017A6 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
02:000017A8 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017AA 0C40411E        	  2341:             cmpi.w #$411E,d0
02:000017AE 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
02:000017B0 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
02:000017B6 048000000000    	  2346:             subi.l #0,d0
02:000017BC 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
02:000017BE 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
02:000017C0 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
02:000017C2 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017C4 0480F0000000    	  2351:             subi.l #$F0000000,d0
02:000017CA 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
02:000017CC 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
02:000017CE 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
02:000017D0 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017D2 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
02:000017D8 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
02:000017DA 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
02:000017DC 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
02:000017DE 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
02:000017E0 0480A0000000    	  2361:             subi.l #$A0000000,d0
02:000017E6 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017E8 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
02:000017EE 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
02:000017F0 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
02:000017F6 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
02:000017FC 043900000000F103	  2371:             subi.b #0,$F103
02:00001804 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
02:00001806 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001808 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000180A 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000180C 043900100000F103	  2376:             subi.b #$10,$F103
02:00001814 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
02:00001816 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001818 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000181A 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000181C 043900A50000F103	  2381:             subi.b #$A5,$F103
02:00001824 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
02:00001826 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001828 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000182A 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
02:0000182C 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
02:00001834 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
02:00001836 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
02:0000183C 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
02:00001842 047900000000F100	  2392:             subi.w #0,$F100
02:0000184A 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
02:0000184C 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000184E 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001850 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001852 047970000000F100	  2397:             subi.w #$7000,$F100
02:0000185A 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
02:0000185C 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000185E 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001860 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001862 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
02:0000186A 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
02:0000186C 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000186E 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001870 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001872 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
02:0000187A 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
02:0000187C 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
02:00001884 F100
02:00001886 04B9000000000000	  2412:             subi.l #0,$F100
02:0000188E F100
02:00001890 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
02:00001892 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001894 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001896 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001898 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
02:000018A0 F100
02:000018A2 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
02:000018A4 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
02:000018A6 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
02:000018A8 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
02:000018AA 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
02:000018B2 F100
02:000018B4 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
02:000018B6 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
02:000018B8 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
02:000018BA 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
02:000018BC 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
02:000018C4 F100
02:000018C6 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
02:000018C8 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
02:000018D0 F100
02:000018D2 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
02:000018D4 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
02:000018D6 203C11223344    	  2442:             move.l #$11223344,d0
02:000018DC 223C55667788    	  2443:             move.l #$55667788,d1
02:000018E2 243C8899AABB    	  2444:             move.l #$8899aabb,d2
02:000018E8 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
02:000018EE 7800            	  2446:             moveq  #$00000000,d4
02:000018F0 7A00            	  2447:             moveq  #$00000000,d5
02:000018F2 7C00            	  2448:             moveq  #$00000000,d6
02:000018F4 7E00            	  2449:             moveq  #$00000000,d7
02:000018F6 207C44332211    	  2450:             move.l #$44332211,a0
02:000018FC 227C88776655    	  2451:             move.l #$88776655,a1
02:00001902 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
02:00001908 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
02:0000190E 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
02:00001910 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
02:00001912 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001914 0C8400000044    	  2458:             cmpi.l #$00000044,d4
02:0000191A 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
02:0000191C 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
02:0000191E 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
02:00001920 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001922 0C8500007788    	  2464:             cmpi.l #$00007788,d5
02:00001928 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
02:0000192A 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
02:0000192C 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
02:0000192E 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001930 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
02:00001936 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
02:00001938 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
02:0000193A 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
02:0000193C 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000193E 0C8500006655    	  2476:             cmpi.l #$00006655,d5
02:00001944 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
02:00001946 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
02:00001948 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
02:0000194A 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000194C 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
02:00001952 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
02:00001954 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
02:00001956 B9C2            	  2487:             cmpa.l d2,a4
02:00001958 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
02:0000195A 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
02:0000195C BBC1            	  2491:             cmpa.l d1,a5
02:0000195E 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
02:00001960 203C11223344    	  2498:             move.l #$11223344,d0
02:00001966 223C00010100    	  2499:             move.l #$00010100,d1
02:0000196C 243C8899AABB    	  2500:             move.l #$8899aabb,d2
02:00001972 7601            	  2501:             moveq  #$00000001,d3
02:00001974 7800            	  2502:             moveq  #$00000000,d4
02:00001976 7A00            	  2503:             moveq  #$00000000,d5
02:00001978 7C00            	  2504:             moveq  #$00000000,d6
02:0000197A 7E00            	  2505:             moveq  #$00000000,d7
02:0000197C 91C8            	  2506:             move.l #$00000000,a0
02:0000197E 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
02:00001984 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
02:0000198A 47F09804        	  2511:             lea 4(a0,a1.l),a3
02:0000198E 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
02:00001996 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
02:00001998 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000199A 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
02:000019A0 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
02:000019A2 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
02:000019AA 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
02:000019AC 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
02:000019AE 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
02:000019B4 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
02:000019B6 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
02:000019BC 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
02:000019BE 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
02:000019C0 0C3900B9000019A3	  2529:             cmpi.b #$B9,1+MOVE2
02:000019C8 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
02:000019CA 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
02:000019D0 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
02:000019D2 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
02:000019D4 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
02:000019DA 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
02:000019DC 203C11223344    	  2539:             move.l #$11223344,d0
02:000019E2 223C00010100    	  2540:             move.l #$00010100,d1
02:000019E8 243C8899AABB    	  2541:             move.l #$8899aabb,d2
02:000019EE 7602            	  2542:             moveq  #$00000002,d3
02:000019F0 7800            	  2543:             moveq  #$00000000,d4
02:000019F2 7A00            	  2544:             moveq  #$00000000,d5
02:000019F4 7C00            	  2545:             moveq  #$00000000,d6
02:000019F6 7E00            	  2546:             moveq  #$00000000,d7
02:000019F8 91C8            	  2547:             move.l #$00000000,a0
02:000019FA 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
02:00001A00 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
02:00001A06 49F09804        	  2552:             lea 4(a0,a1.l),a4
02:00001A0A 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
02:00001A12 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
02:00001A14 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A16 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
02:00001A1C 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
02:00001A1E 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
02:00001A26 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
02:00001A28 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A2A 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
02:00001A30 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
02:00001A32 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
02:00001A38 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
02:00001A3A 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A3C 0C7967FE00001A26	  2570:             cmpi.w #$67FE,8+MOVE1
02:00001A44 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
02:00001A46 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
02:00001A4C 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
02:00001A4E 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A50 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
02:00001A56 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
02:00001A58 203C11223344    	  2582:             move.l #$11223344,d0
02:00001A5E 223C00010100    	  2583:             move.l #$00010100,d1
02:00001A64 243C8899AABB    	  2584:             move.l #$8899aabb,d2
02:00001A6A 7602            	  2585:             moveq  #$00000002,d3
02:00001A6C 7800            	  2586:             moveq  #$00000000,d4
02:00001A6E 7A00            	  2587:             moveq  #$00000000,d5
02:00001A70 7C00            	  2588:             moveq  #$00000000,d6
02:00001A72 7E00            	  2589:             moveq  #$00000000,d7
02:00001A74 91C8            	  2590:             move.l #$00000000,a0
02:00001A76 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
02:00001A7C 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
02:00001A84 49F09804        	  2595:             lea 4(a0,a1.l),a4
02:00001A88 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
02:00001A90 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
02:00001A92 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A94 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
02:00001A9C 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
02:00001A9E 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
02:00001AA6 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
02:00001AA8 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001AAA 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
02:00001AB2 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
02:00001AB4 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
02:00001ABA 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
02:00001ABC 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001ABE 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
02:00001AC6 1AA6
02:00001AC8 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
02:00001ACA 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
02:00001AD2 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
02:00001AD4 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001AD6 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
02:00001ADE 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
02:00001AE0 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
02:00001AE2 303C2FFF        	  2638:             move.w #$2FFF,d0
02:00001AE6 46C0            	  2639:             move.w d0,SR
02:00001AE8 6AFE            	  2640:             bpl.s *           * branch if Z clear
02:00001AEA 66FE            	  2641:             bne.s *           * branch if N clear
02:00001AEC 68FE            	  2642:             bvc.s *           * branch if V clear
02:00001AEE 64FE            	  2643:             bcc.s *           * branch if C clear
02:00001AF0 303C2F00        	  2644:             move.w #$2F00,d0
02:00001AF4 44C0            	  2645:             move d0,CCR
02:00001AF6 67FE            	  2646:             beq.s *           * branch if Z set
02:00001AF8 6BFE            	  2647:             bmi.s *           * branch if N set
02:00001AFA 69FE            	  2648:             bvs.s *           * branch if V set
02:00001AFC 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
02:00001AFE 303C2000        	  2651:             move.w #$2000,d0
02:00001B02 46C0            	  2652:             move.w d0,SR
02:00001B04 67FE            	  2653:             beq.s *           * branch if Z set
02:00001B06 6BFE            	  2654:             bmi.s *           * branch if N set
02:00001B08 69FE            	  2655:             bvs.s *           * branch if V set
02:00001B0A 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
02:00001B0C 307C0100        	  2659:             move.l #$00000100,a0
02:00001B10 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
02:00001B14 46D0            	  2661:             move.w (a0),SR
02:00001B16 6AFE            	  2662:             bpl.s *           * branch if Z clear
02:00001B18 66FE            	  2663:             bne.s *           * branch if N clear
02:00001B1A 68FE            	  2664:             bvc.s *           * branch if V clear
02:00001B1C 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
02:00001B1E 30BC2000        	  2667:             move.w #$2000,(a0)
02:00001B22 46D0            	  2668:             move.w (a0),SR
02:00001B24 67FE            	  2669:             beq.s *           * branch if Z set
02:00001B26 6BFE            	  2670:             bmi.s *           * branch if N set
02:00001B28 69FE            	  2671:             bvs.s *           * branch if V set
02:00001B2A 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
02:00001B2C 307C0100        	  2675:             move.l #$00000100,a0
02:00001B30 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
02:00001B34 46D8            	  2677:             move.w (a0)+,SR
02:00001B36 6AFE            	  2678:             bpl.s *           * branch if Z clear
02:00001B38 66FE            	  2679:             bne.s *           * branch if N clear
02:00001B3A 68FE            	  2680:             bvc.s *           * branch if V clear
02:00001B3C 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
02:00001B3E 30BC2000        	  2683:             move.w #$2000,(a0)
02:00001B42 46D8            	  2684:             move.w (a0)+,SR
02:00001B44 67FE            	  2685:             beq.s *           * branch if Z set
02:00001B46 6BFE            	  2686:             bmi.s *           * branch if N set
02:00001B48 69FE            	  2687:             bvs.s *           * branch if V set
02:00001B4A 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
02:00001B4C 307C0102        	  2691:             move.l #$00000102,a0
02:00001B50 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
02:00001B54 46D8            	  2693:             move.w (a0)+,SR
02:00001B56 6AFE            	  2694:             bpl.s *           * branch if Z clear
02:00001B58 66FE            	  2695:             bne.s *           * branch if N clear
02:00001B5A 68FE            	  2696:             bvc.s *           * branch if V clear
02:00001B5C 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
02:00001B5E 30BC2000        	  2699:             move.w #$2000,(a0)
02:00001B62 46D8            	  2700:             move.w (a0)+,SR
02:00001B64 67FE            	  2701:             beq.s *           * branch if Z set
02:00001B66 6BFE            	  2702:             bmi.s *           * branch if N set
02:00001B68 69FE            	  2703:             bvs.s *           * branch if V set
02:00001B6A 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
02:00001B6C 307C0102        	  2707:             move.l #$00000102,a0
02:00001B70 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
02:00001B76 46E80002        	  2709:             move.w 2(a0),SR
02:00001B7A 6AFE            	  2710:             bpl.s *           * branch if Z clear
02:00001B7C 66FE            	  2711:             bne.s *           * branch if N clear
02:00001B7E 68FE            	  2712:             bvc.s *           * branch if V clear
02:00001B80 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
02:00001B82 317C20000002    	  2715:             move.w #$2000,2(a0)
02:00001B88 46E80002        	  2716:             move.w 2(a0),SR
02:00001B8C 67FE            	  2717:             beq.s *           * branch if Z set
02:00001B8E 6BFE            	  2718:             bmi.s *           * branch if N set
02:00001B90 69FE            	  2719:             bvs.s *           * branch if V set
02:00001B92 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
02:00001B94 307C0100        	  2723:             move.l #$00000100,a0
02:00001B98 7002            	  2724:             moveq  #$00000002,d0
02:00001B9A 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
02:00001BA0 46F00802        	  2726:             move.w 2(a0,d0.l),SR
02:00001BA4 6AFE            	  2727:             bpl.s *           * branch if Z clear
02:00001BA6 66FE            	  2728:             bne.s *           * branch if N clear
02:00001BA8 68FE            	  2729:             bvc.s *           * branch if V clear
02:00001BAA 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
02:00001BAC 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
02:00001BB2 46F00802        	  2733:             move.w 2(a0,d0.l),SR
02:00001BB6 67FE            	  2734:             beq.s *           * branch if Z set
02:00001BB8 6BFE            	  2735:             bmi.s *           * branch if N set
02:00001BBA 69FE            	  2736:             bvs.s *           * branch if V set
02:00001BBC 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
02:00001BBE 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
02:00001BC4 46F80100        	  2741:             move.w $0100,SR
02:00001BC8 6AFE            	  2742:             bpl.s *           * branch if Z clear
02:00001BCA 66FE            	  2743:             bne.s *           * branch if N clear
02:00001BCC 68FE            	  2744:             bvc.s *           * branch if V clear
02:00001BCE 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
02:00001BD0 31FC20000100    	  2747:             move.w #$2000,$0100
02:00001BD6 46F80100        	  2748:             move.w $0100,SR
02:00001BDA 67FE            	  2749:             beq.s *           * branch if Z set
02:00001BDC 6BFE            	  2750:             bmi.s *           * branch if N set
02:00001BDE 69FE            	  2751:             bvs.s *           * branch if V set
02:00001BE0 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
02:00001BE2 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
02:00001BEA 46F900010100    	  2756:             move.w $00010100,SR
02:00001BF0 6AFE            	  2757:             bpl.s *           * branch if Z clear
02:00001BF2 66FE            	  2758:             bne.s *           * branch if N clear
02:00001BF4 68FE            	  2759:             bvc.s *           * branch if V clear
02:00001BF6 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
02:00001BF8 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
02:00001C00 46F900010100    	  2763:             move.w $00010100,SR
02:00001C06 67FE            	  2764:             beq.s *           * branch if Z set
02:00001C08 6BFE            	  2765:             bmi.s *           * branch if N set
02:00001C0A 69FE            	  2766:             bvs.s *           * branch if V set
02:00001C0C 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
02:00001C0E 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
02:00001C12 67FE            	  2771:             beq.s *           * branch if Z set
02:00001C14 6BFE            	  2772:             bmi.s *           * branch if N set
02:00001C16 69FE            	  2773:             bvs.s *           * branch if V set
02:00001C18 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
02:00001C1A 7000            	  2777:             moveq  #$00000000,d0
02:00001C1C 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
02:00001C20 67FE            	  2779:             beq.s *           * branch if Z set
02:00001C22 6BFE            	  2780:             bmi.s *           * branch if N set
02:00001C24 69FE            	  2781:             bvs.s *           * branch if V set
02:00001C26 65FE            	  2782:             bcs.s *           * branch if C set
02:00001C28 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
02:00001C2C 67FE            	  2784:             beq.s *           * branch if Z set
02:00001C2E 6BFE            	  2785:             bmi.s *           * branch if N set
02:00001C30 69FE            	  2786:             bvs.s *           * branch if V set
02:00001C32 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
02:00001C34 46FC2FFF        	  2790:             move.w #$2FFF,SR
02:00001C38 66FE            	  2791:             bne.s *           * branch if Z clear
02:00001C3A 6AFE            	  2792:             bpl.s *           * branch if N clear
02:00001C3C 68FE            	  2793:             bvc.s *           * branch if V clear
02:00001C3E 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
02:00001C40 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
02:00001C44 40C0            	  2804:             move.w SR,d0
02:00001C46 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
02:00001C4A 307C0100        	  2810:             move.l #$00000100,a0
02:00001C4E 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
02:00001C52 40D0            	  2812:             move.w SR,(a0)
02:00001C54 0C50275A        	  2813:             cmpi.w #$275A,(a0)
02:00001C58 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
02:00001C5A 307C0100        	  2817:             move.l #$00000100,a0
02:00001C5E 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
02:00001C62 40D8            	  2819:             move.w SR,(a0)+
02:00001C64 307C0100        	  2820:             move.l #$00000100,a0
02:00001C68 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
02:00001C6C 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
02:00001C6E 307C0102        	  2825:             move.l #$00000102,a0
02:00001C72 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
02:00001C76 40E0            	  2827:             move.w SR,-(a0)
02:00001C78 307C0100        	  2828:             move.l #$00000100,a0
02:00001C7C 0C502766        	  2829:             cmpi.w #$2766,(a0)
02:00001C80 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
02:00001C82 307C0102        	  2833:             move.l #$00000102,a0
02:00001C86 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
02:00001C8A 40E80004        	  2835:             move.w SR,4(a0)
02:00001C8E 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
02:00001C94 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
02:00001C96 307C0102        	  2840:             move.l #$00000102,a0
02:00001C9A 7004            	  2841:             moveq  #$00000004,d0
02:00001C9C 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
02:00001CA0 40F00804        	  2843:             move.w SR,4(a0,d0.l)
02:00001CA4 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
02:00001CAA 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
02:00001CAC 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
02:00001CB0 40F80102        	  2849:             move.w SR,$0102
02:00001CB4 0C7827770102    	  2850:             cmpi.w #$2777,$0102
02:00001CBA 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
02:00001CBC 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
02:00001CC0 40F900010102    	  2855:             move.w SR,$10102
02:00001CC6 0C79277700010102	  2856:             cmpi.w #$2777,$10102
02:00001CCE 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
02:00001CD0 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
02:00001CD4 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
02:00001CD6 707F            	  2873:             move.l #$0000007F,d0
02:00001CD8 223C00008FFF    	  2874:             move.l #$00008FFF,d1
02:00001CDE 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
02:00001CE0 4880            	  2877:             ext.w d0
02:00001CE2 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001CE4 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
02:00001CE6 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
02:00001CEC 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
02:00001CEE 48C1            	  2883:             ext.l d1
02:00001CF0 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001CF2 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
02:00001CF4 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
02:00001CFA 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
02:00001CFC 48C2            	  2889:             ext.l d2
02:00001CFE 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
02:00001D00 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
02:00001D02 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
02:00001D08 4840            	  2906:             swap d0
02:00001D0A 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001D0C 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
02:00001D0E 0C8056781234    	  2909:             cmpi.l #$56781234,d0
02:00001D14 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
02:00001D16 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
02:00001D18 207C00345678    	  2924:             move.l #$00345678,a0
02:00001D1E 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
02:00001D20 4DD0            	  2928:             lea (a0),a6
02:00001D22 200E            	  2929:             move.l a6,d0
02:00001D24 0C8000345678    	  2930:             cmpi.l #$00345678,d0
02:00001D2A 66FE            	  2931:             bne.s *                   * branch if Z set
02:00001D2C 4850            	  2932:             pea (a0)
02:00001D2E 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
02:00001D34 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
02:00001D36 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
02:00001D38 4DE80004        	  2939:             lea 4(a0),a6
02:00001D3C 200E            	  2940:             move.l a6,d0
02:00001D3E 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
02:00001D44 66FE            	  2942:             bne.s *                   * branch if Z set
02:00001D46 48680004        	  2943:             pea 4(a0)
02:00001D4A 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
02:00001D50 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
02:00001D52 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
02:00001D54 4DF04004        	  2950:             lea 4(a0,d4),a6
02:00001D58 200E            	  2951:             move.l a6,d0
02:00001D5A 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
02:00001D60 66FE            	  2953:             bne.s *                   * branch if Z set
02:00001D62 48704804        	  2954:             pea 4(a0,d4.l)
02:00001D66 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
02:00001D6C 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
02:00001D6E 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
02:00001D70 4DF81234        	  2961:             lea $1234,a6
02:00001D74 200E            	  2962:             move.l a6,d0
02:00001D76 0C401234        	  2963:             cmpi.w #$1234,d0
02:00001D7A 66FE            	  2964:             bne.s *                   * branch if Z set
02:00001D7C 48781234        	  2965:             pea $1234
02:00001D80 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
02:00001D86 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
02:00001D88 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
02:00001D8A 4DF900345678    	  2972:             lea $00345678,a6
02:00001D90 200E            	  2973:             move.l a6,d0
02:00001D92 B08E            	  2974:             cmp.l a6,d0
02:00001D94 66FE            	  2975:             bne.s *                   * branch if Z set
02:00001D96 487900345678    	  2976:             pea $00345678
02:00001D9C 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
02:00001DA2 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
02:00001DA4 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
02:00001DA6 4DFA0008        	  2983:             lea LEA1(pc),a6
02:00001DAA 200E            	  2984:             move.l a6,d0
02:00001DAC B08E            	  2985:             cmp.l a6,d0
02:00001DAE 66FE            	  2986:             bne.s *                   * branch if Z set
02:00001DB0 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
02:00001DB4 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
02:00001DBA 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
02:00001DBC 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
02:00001DBE 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
02:00001DC2 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
02:00001DC4 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
02:00001DC8 4210            	  3014:             move.b #$00,(a0)
02:00001DCA 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001DCC 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
02:00001DCE 4AD0            	  3017:             tas (a0)
02:00001DD0 0C100080        	  3018:             cmpi.b #$80,(a0)
02:00001DD4 66FE            	  3019:             bne.s *                   * branch if Z set
02:00001DD6 10BC00F5        	  3020:             move.b #$F5,(a0)
02:00001DDA 4AD0            	  3021:             tas (a0)
02:00001DDC 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001DDE 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
02:00001DE0 4AD0            	  3024:             tas (a0)
02:00001DE2 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
02:00001DE6 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
02:00001DE8 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
02:00001DEA 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
02:00001DEE 4210            	  3043:             move.b #$00,(a0)
02:00001DF0 4A10            	  3044:             tst.b (a0)
02:00001DF2 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001DF4 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
02:00001DF6 10BC00F5        	  3047:             move.b #$F5,(a0)
02:00001DFA 4A10            	  3048:             tst.b (a0)
02:00001DFC 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001DFE 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
02:00001E00 4250            	  3053:             move.w #$0000,(a0)
02:00001E02 4A50            	  3054:             tst.w (a0)
02:00001E04 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E06 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
02:00001E08 30BCF567        	  3057:             move.w #$F567,(a0)
02:00001E0C 4A50            	  3058:             tst.w (a0)
02:00001E0E 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E10 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
02:00001E12 4290            	  3063:             move.l #$00000000,(a0)
02:00001E14 4A90            	  3064:             tst.l (a0)
02:00001E16 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E18 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
02:00001E1A 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
02:00001E20 4A90            	  3068:             tst.l (a0)
02:00001E22 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E24 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
02:00001E26 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
02:00001E28 207C11223344    	  3083:             move.l #$11223344,a0
02:00001E2E 203C11223344    	  3084:             move.l #$11223344,d0
02:00001E34 4E500000        	  3085:             link a0,#$0
02:00001E38 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
02:00001E3E 4E58            	  3088:             unlk a0
02:00001E40 B1C0            	  3089:             cmp.l d0,a0
02:00001E42 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
02:00001E44 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
02:00001E46 207C11223344    	  3101:             move.l #$11223344,a0
02:00001E4C 4E60            	  3102:             move a0,USP
02:00001E4E 4E69            	  3103:             move USP,a1
02:00001E50 B3C8            	  3104:             cmp.l a0,a1
02:00001E52 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
02:00001E54 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: op_CHK:
02:00001E56 303C1122        	  3116:             move.w #$1122,d0
02:00001E5A 323C1122        	  3117:             move.w #$1122,d1
02:00001E5E 4380            	  3118:             chk d0,d1
                            	  3119: 
02:00001E60 4E71            	  3120:             nop
02:00001E62 4E71            	  3121:             nop
                            	  3122: 
02:00001E64 323C1122        	  3123:             move.w #$1122,d1
02:00001E68 43BC1122        	  3124:             chk #$1122,d1
                            	  3125: 
02:00001E6C 323C1122        	  3126:             move.w #$1122,d1
02:00001E70 43BC007A        	  3127:             chk #00122,d1
02:00001E74 BCBCEEEE0006    	  3128:             cmp.l #$EEEE0006,d6
02:00001E7A 66FE            	  3129:             bne.s *                   * branch if Z set
                            	  3130: 
02:00001E7C 303C1122        	  3131:             move.w #$1122,d0
02:00001E80 323C8000        	  3132:             move.w #$8000,d1
02:00001E84 4380            	  3133:             chk d0,d1
02:00001E86 BCBCEEEE0006    	  3134:             cmp.l #$EEEE0006,d6
02:00001E8C 66FE            	  3135:             bne.s *                   * branch if Z set
                            	  3136: 
02:00001E8E 4E75            	  3137:             rts
                            	  3138: 
                            	  3139: 
                            	  3140: *-----------------------------------------------------------
                            	  3141: *-----------------------------------------------------------
                            	  3142: * OPCODE : NEGS
                            	  3143: *-----------------------------------------------------------
                            	  3144: *-----------------------------------------------------------
                            	  3145: op_NEGS:
                            	  3146: 
                            	  3147: *     NOT - BYTE
02:00001E90 307C0100        	  3148:             move.l #$00000100,a0
02:00001E94 7000            	  3149:             moveq  #$00000000,d0
02:00001E96 4600            	  3150:             not.b d0
02:00001E98 6AFE            	  3151:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E9A 67FE            	  3152:             beq.s *                   * Check Z Flag  beq/bne
02:00001E9C 4600            	  3153:             not.b d0
02:00001E9E 6BFE            	  3154:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001EA0 66FE            	  3155:             bne.s *                   * Check Z Flag  beq/bne
02:00001EA2 4A00            	  3156:             cmpi.b #$00,d0
02:00001EA4 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
02:00001EA6 10BC0080        	  3158:             move.b #$80,(a0)
02:00001EAA 4610            	  3159:             not.b (a0)
02:00001EAC 6BFE            	  3160:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001EAE 67FE            	  3161:             beq.s *                   * Check Z Flag  beq/bne
02:00001EB0 4610            	  3162:             not.b (a0)
02:00001EB2 6AFE            	  3163:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001EB4 67FE            	  3164:             beq.s *                   * Check Z Flag  beq/bne
02:00001EB6 0C100080        	  3165:             cmpi.b #$80,(a0)
02:00001EBA 66FE            	  3166:             bne.s *                   * Check Z Flag  beq/bne
                            	  3167: 
                            	  3168: *     NOT - WORD
02:00001EBC 307C0100        	  3169:             move.l #$00000100,a0
02:00001EC0 7000            	  3170:             moveq  #$00000000,d0
02:00001EC2 4640            	  3171:             not.w d0
02:00001EC4 6AFE            	  3172:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001EC6 67FE            	  3173:             beq.s *                   * Check Z Flag  beq/bne
02:00001EC8 4640            	  3174:             not.w d0
02:00001ECA 6BFE            	  3175:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001ECC 66FE            	  3176:             bne.s *                   * Check Z Flag  beq/bne
02:00001ECE 4A40            	  3177:             cmpi.w #$0000,d0
02:00001ED0 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
02:00001ED2 30BC5A5A        	  3179:             move.w #$5a5a,(a0)
02:00001ED6 4650            	  3180:             not.w (a0)
02:00001ED8 6AFE            	  3181:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001EDA 67FE            	  3182:             beq.s *                   * Check Z Flag  beq/bne
02:00001EDC 4650            	  3183:             not.w (a0)
02:00001EDE 6BFE            	  3184:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001EE0 67FE            	  3185:             beq.s *                   * Check Z Flag  beq/bne
02:00001EE2 0C505A5A        	  3186:             cmpi.w #$5a5a,(a0)
02:00001EE6 66FE            	  3187:             bne.s *                   * Check Z Flag  beq/bne
                            	  3188: 
                            	  3189: *     NOT - LONG
02:00001EE8 307C0100        	  3190:             move.l #$00000100,a0
02:00001EEC 7000            	  3191:             moveq  #$00000000,d0
02:00001EEE 4680            	  3192:             not.l d0
02:00001EF0 6AFE            	  3193:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001EF2 67FE            	  3194:             beq.s *                   * Check Z Flag  beq/bne
02:00001EF4 4680            	  3195:             not.l d0
02:00001EF6 6BFE            	  3196:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001EF8 66FE            	  3197:             bne.s *                   * Check Z Flag  beq/bne
02:00001EFA 4A80            	  3198:             cmpi.l #$00000000,d0
02:00001EFC 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
02:00001EFE 20BC5A5A1234    	  3200:             move.l #$5a5a1234,(a0)
02:00001F04 4690            	  3201:             not.l (a0)
02:00001F06 6AFE            	  3202:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001F08 67FE            	  3203:             beq.s *                   * Check Z Flag  beq/bne
02:00001F0A 4690            	  3204:             not.l (a0)
02:00001F0C 6BFE            	  3205:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001F0E 67FE            	  3206:             beq.s *                   * Check Z Flag  beq/bne
02:00001F10 0C905A5A1234    	  3207:             cmpi.l #$5a5a1234,(a0)
02:00001F16 66FE            	  3208:             bne.s *                   * Check Z Flag  beq/bne
                            	  3209: 
                            	  3210: * -----
                            	  3211: 
                            	  3212: *     NEG - BYTE
02:00001F18 307C0100        	  3213:             move.l #$00000100,a0
02:00001F1C 7000            	  3214:             moveq  #$00000000,d0
02:00001F1E 7240D241        	  3215:             move.l #$00000080,d1
02:00001F22 4400            	  3216:             neg.b d0
02:00001F24 6BFE            	  3217:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F26 66FE            	  3218:             bne.s *                   * Check Z Flag  beq/bne 1
02:00001F28 65FE            	  3219:             bcs.s *                   * Check C Flag  bcc/bcs 1
02:00001F2A 69FE            	  3220:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F2C 4401            	  3221:             neg.b d1
02:00001F2E 6AFE            	  3222:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F30 67FE            	  3223:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F32 64FE            	  3224:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F34 68FE            	  3225:             bvc.s *                   * Check V Flag  bvc/bvs 0
02:00001F36 0C010080        	  3226:             cmpi.b #$80,d1
02:00001F3A 66FE            	  3227:             bne.s *                   * Check Z Flag  beq/bne
02:00001F3C 10BC007F        	  3228:             move.b #$7F,(a0)
02:00001F40 4410            	  3229:             neg.b (a0)
02:00001F42 6AFE            	  3230:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F44 67FE            	  3231:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F46 64FE            	  3232:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F48 69FE            	  3233:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F4A 10BC00F5        	  3234:             move.b #$F5,(a0)
02:00001F4E 4410            	  3235:             neg.b (a0)
02:00001F50 6BFE            	  3236:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F52 67FE            	  3237:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F54 64FE            	  3238:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F56 69FE            	  3239:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F58 0C10000B        	  3240:             cmpi.b #$0B,(a0)
02:00001F5C 66FE            	  3241:             bne.s *                   * Check Z Flag  beq/bne
                            	  3242: 
                            	  3243: * -----
                            	  3244: 
                            	  3245: *     NEG - WORD
02:00001F5E 307C0100        	  3246:             move.l #$00000100,a0
02:00001F62 7000            	  3247:             moveq  #$00000000,d0
02:00001F64 223C00008000    	  3248:             move.l #$00008000,d1
02:00001F6A 4440            	  3249:             neg.w d0
02:00001F6C 6BFE            	  3250:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F6E 66FE            	  3251:             bne.s *                   * Check Z Flag  beq/bne 1
02:00001F70 65FE            	  3252:             bcs.s *                   * Check C Flag  bcc/bcs 1
02:00001F72 69FE            	  3253:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F74 4441            	  3254:             neg.w d1
02:00001F76 6AFE            	  3255:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F78 67FE            	  3256:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F7A 64FE            	  3257:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F7C 68FE            	  3258:             bvc.s *                   * Check V Flag  bvc/bvs 0
02:00001F7E 0C418000        	  3259:             cmpi.w #$8000,d1
02:00001F82 66FE            	  3260:             bne.s *                   * Check Z Flag  beq/bne
02:00001F84 30BC7FFF        	  3261:             move.w #$7FFF,(a0)
02:00001F88 4450            	  3262:             neg.w (a0)
02:00001F8A 6AFE            	  3263:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F8C 67FE            	  3264:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F8E 64FE            	  3265:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F90 69FE            	  3266:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F92 30BCF578        	  3267:             move.w #$F578,(a0)
02:00001F96 4450            	  3268:             neg.w (a0)
02:00001F98 6BFE            	  3269:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F9A 67FE            	  3270:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F9C 64FE            	  3271:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F9E 69FE            	  3272:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FA0 0C500A88        	  3273:             cmpi.w #$0A88,(a0)
02:00001FA4 66FE            	  3274:             bne.s *                   * Check Z Flag  beq/bne
                            	  3275: 
                            	  3276: * -----
                            	  3277: 
                            	  3278: *     NEG - LONG
02:00001FA6 307C0100        	  3279:             move.l #$00000100,a0
02:00001FAA 7000            	  3280:             moveq  #$00000000,d0
02:00001FAC 223C80000000    	  3281:             move.l #$80000000,d1
02:00001FB2 4480            	  3282:             neg.l d0
02:00001FB4 6BFE            	  3283:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001FB6 66FE            	  3284:             bne.s *                   * Check Z Flag  beq/bne 1
02:00001FB8 65FE            	  3285:             bcs.s *                   * Check C Flag  bcc/bcs 1
02:00001FBA 69FE            	  3286:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FBC 4481            	  3287:             neg.l d1
02:00001FBE 6AFE            	  3288:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001FC0 67FE            	  3289:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FC2 64FE            	  3290:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FC4 68FE            	  3291:             bvc.s *                   * Check V Flag  bvc/bvs 0
02:00001FC6 0C8180000000    	  3292:             cmpi.l #$80000000,d1
02:00001FCC 66FE            	  3293:             bne.s *                   * Check Z Flag  beq/bne
02:00001FCE 20BC7FFFFFFF    	  3294:             move.l #$7FFFFFFF,(a0)
02:00001FD4 4490            	  3295:             neg.l (a0)
02:00001FD6 6AFE            	  3296:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001FD8 67FE            	  3297:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FDA 64FE            	  3298:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FDC 69FE            	  3299:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FDE 20BCF5781234    	  3300:             move.l #$F5781234,(a0)
02:00001FE4 4490            	  3301:             neg.l (a0)
02:00001FE6 6BFE            	  3302:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001FE8 67FE            	  3303:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FEA 64FE            	  3304:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FEC 69FE            	  3305:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FEE 0C900A87EDCC    	  3306:             cmpi.l #$0A87EDCC,(a0)
02:00001FF4 66FE            	  3307:             bne.s *                   * Check Z Flag  beq/bne
                            	  3308: 
                            	  3309: 
                            	  3310: * -----
                            	  3311: 
                            	  3312: *     NEGX - BYTE
02:00001FF6 307C0100        	  3313:             move.l #$00000100,a0
02:00001FFA 7000            	  3314:             moveq  #$00000000,d0
02:00001FFC 7240D241        	  3315:             move.l #$00000080,d1
02:00002000 003C0010        	  3316:             ori.b #$10,CCR        * Set X Flag
02:00002004 4000            	  3317:             negx.b d0
02:00002006 6AFE            	  3318:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00002008 67FE            	  3319:             beq.s *                   * Check Z Flag  beq/bne 1
02:0000200A 64FE            	  3320:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:0000200C 69FE            	  3321:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000200E 023C00EF        	  3322:             andi.b #$EF,CCR       * Clear X Flag
02:00002012 4000            	  3323:             negx.b d0
02:00002014 6BFE            	  3324:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002016 67FE            	  3325:             beq.s *                   * Check Z Flag  beq/bne 1
02:00002018 64FE            	  3326:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:0000201A 69FE            	  3327:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000201C 003C0010        	  3328:             ori.b #$10,CCR        * Set X Flag
02:00002020 4001            	  3329:             negx.b d1
02:00002022 6BFE            	  3330:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:00002024 67FE            	  3331:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002026 64FE            	  3332:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002028 69FE            	  3333:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:0000202A 0C01007F        	  3334:             cmpi.b #$7F,d1
02:0000202E 66FE            	  3335:             bne.s *                   * Check Z Flag  beq/bne
02:00002030 023C00EF        	  3336:             andi.b #$EF,CCR       * Clear X Flag
02:00002034 4001            	  3337:             negx.b d1
02:00002036 6AFE            	  3338:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002038 67FE            	  3339:             beq.s *                   * Check Z Flag  beq/bne 0
02:0000203A 64FE            	  3340:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:0000203C 69FE            	  3341:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:0000203E 0C010081        	  3342:             cmpi.b #$81,d1
02:00002042 66FE            	  3343:             bne.s *                   * Check Z Flag  beq/bne
02:00002044 10BC007F        	  3344:             move.b #$7F,(a0)
02:00002048 003C0010        	  3345:             ori.b #$10,CCR        * Set X Flag
02:0000204C 4010            	  3346:             negx.b (a0)
02:0000204E 6AFE            	  3347:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002050 67FE            	  3348:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002052 64FE            	  3349:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3350:             * I think overflow should happen here.
                            	  3351: *            bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002054 10BC007F        	  3352:             move.b #$7F,(a0)
02:00002058 023C00EF        	  3353:             andi.b #$EF,CCR       * Clear X Flag
02:0000205C 4010            	  3354:             negx.b (a0)
02:0000205E 6AFE            	  3355:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002060 67FE            	  3356:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002062 64FE            	  3357:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002064 69FE            	  3358:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002066 10BC00F5        	  3359:             move.b #$F5,(a0)
02:0000206A 003C0010        	  3360:             ori.b #$10,CCR        * Set X Flag
02:0000206E 4010            	  3361:             negx.b (a0)
02:00002070 6BFE            	  3362:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002072 67FE            	  3363:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002074 64FE            	  3364:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002076 69FE            	  3365:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002078 0C10000A        	  3366:             cmpi.b #$0A,(a0)
02:0000207C 66FE            	  3367:             bne.s *                   * Check Z Flag  beq/bne
02:0000207E 023C00EF        	  3368:             andi.b #$EF,CCR       * Clear X Flag
02:00002082 4010            	  3369:             negx.b (a0)
02:00002084 6AFE            	  3370:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00002086 67FE            	  3371:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002088 64FE            	  3372:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:0000208A 69FE            	  3373:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000208C 0C1000F6        	  3374:             cmpi.b #$F6,(a0)
02:00002090 66FE            	  3375:             bne.s *                   * Check Z Flag  beq/bne
                            	  3376: 
                            	  3377: 
                            	  3378: 
                            	  3379: * -----
                            	  3380: 
                            	  3381: *     NEGX - WORD
02:00002092 307C0100        	  3382:             move.l #$00000100,a0
02:00002096 7000            	  3383:             moveq  #$00000000,d0
02:00002098 223C00008000    	  3384:             move.l #$00008000,d1
02:0000209E 003C0010        	  3385:             ori.b #$10,CCR        * Set X Flag
02:000020A2 4040            	  3386:             negx.w d0
02:000020A4 6AFE            	  3387:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:000020A6 67FE            	  3388:             beq.s *                   * Check Z Flag  beq/bne 1
02:000020A8 64FE            	  3389:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:000020AA 69FE            	  3390:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000020AC 023C00EF        	  3391:             andi.b #$EF,CCR       * Clear X Flag
02:000020B0 4040            	  3392:             negx.w d0
02:000020B2 6BFE            	  3393:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:000020B4 67FE            	  3394:             beq.s *                   * Check Z Flag  beq/bne 1
02:000020B6 64FE            	  3395:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:000020B8 69FE            	  3396:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000020BA 003C0010        	  3397:             ori.b #$10,CCR        * Set X Flag
02:000020BE 4041            	  3398:             negx.w d1
02:000020C0 6BFE            	  3399:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:000020C2 67FE            	  3400:             beq.s *                   * Check Z Flag  beq/bne 0
02:000020C4 64FE            	  3401:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000020C6 69FE            	  3402:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:000020C8 0C417FFF        	  3403:             cmpi.w #$7FFF,d1
02:000020CC 66FE            	  3404:             bne.s *                   * Check Z Flag  beq/bne
02:000020CE 023C00EF        	  3405:             andi.b #$EF,CCR       * Clear X Flag
02:000020D2 4041            	  3406:             negx.w d1
02:000020D4 6AFE            	  3407:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:000020D6 67FE            	  3408:             beq.s *                   * Check Z Flag  beq/bne 0
02:000020D8 64FE            	  3409:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000020DA 69FE            	  3410:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:000020DC 0C418001        	  3411:             cmpi.w #$8001,d1
02:000020E0 66FE            	  3412:             bne.s *                   * Check Z Flag  beq/bne
02:000020E2 30BC7FFF        	  3413:             move.w #$7FFF,(a0)
02:000020E6 003C0010        	  3414:             ori.b #$10,CCR        * Set X Flag
02:000020EA 4050            	  3415:             negx.w (a0)
02:000020EC 6AFE            	  3416:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:000020EE 67FE            	  3417:             beq.s *                   * Check Z Flag  beq/bne 0
02:000020F0 64FE            	  3418:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3419: ***            
                            	  3420: *            bvs.s *                   * Check V Flag  bvc/bvs 1
02:000020F2 30BCF567        	  3421:             move.w #$F567,(a0)
02:000020F6 023C00EF        	  3422:             andi.b #$EF,CCR       * Clear X Flag
02:000020FA 4050            	  3423:             negx.w (a0)
02:000020FC 6BFE            	  3424:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:000020FE 67FE            	  3425:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002100 64FE            	  3426:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002102 69FE            	  3427:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002104 30BCF567        	  3428:             move.w #$F567,(a0)
02:00002108 003C0010        	  3429:             ori.b #$10,CCR        * Set X Flag
02:0000210C 4050            	  3430:             negx.w (a0)
02:0000210E 6BFE            	  3431:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002110 67FE            	  3432:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002112 64FE            	  3433:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002114 69FE            	  3434:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002116 0C500A98        	  3435:             cmpi.w #$0A98,(a0)
02:0000211A 66FE            	  3436:             bne.s *                   * Check Z Flag  beq/bne
02:0000211C 023C00EF        	  3437:             andi.b #$EF,CCR       * Clear X Flag
02:00002120 4050            	  3438:             negx.w (a0)
02:00002122 6AFE            	  3439:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00002124 67FE            	  3440:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002126 64FE            	  3441:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002128 69FE            	  3442:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000212A 0C50F568        	  3443:             cmpi.w #$F568,(a0)
02:0000212E 66FE            	  3444:             bne.s *                   * Check Z Flag  beq/bne
                            	  3445: 
                            	  3446: 
                            	  3447: * -----
                            	  3448: 
                            	  3449: *     NEGX - LONG
02:00002130 307C0100        	  3450:             move.l #$00000100,a0
02:00002134 7000            	  3451:             moveq  #$00000000,d0
02:00002136 223C80000000    	  3452:             move.l #$80000000,d1
02:0000213C 003C0010        	  3453:             ori.b #$10,CCR        * Set X Flag
02:00002140 4080            	  3454:             negx.l d0
02:00002142 6AFE            	  3455:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00002144 67FE            	  3456:             beq.s *                   * Check Z Flag  beq/bne 1
02:00002146 64FE            	  3457:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:00002148 69FE            	  3458:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000214A 023C00EF        	  3459:             andi.b #$EF,CCR       * Clear X Flag
02:0000214E 4080            	  3460:             negx.l d0
02:00002150 6BFE            	  3461:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002152 67FE            	  3462:             beq.s *                   * Check Z Flag  beq/bne 1
02:00002154 64FE            	  3463:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:00002156 69FE            	  3464:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002158 003C0010        	  3465:             ori.b #$10,CCR        * Set X Flag
02:0000215C 4081            	  3466:             negx.l d1
02:0000215E 6BFE            	  3467:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:00002160 67FE            	  3468:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002162 64FE            	  3469:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002164 69FE            	  3470:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:00002166 0C817FFFFFFF    	  3471:             cmpi.l #$7FFFFFFF,d1
02:0000216C 66FE            	  3472:             bne.s *                   * Check Z Flag  beq/bne
02:0000216E 023C00EF        	  3473:             andi.b #$EF,CCR       * Clear X Flag
02:00002172 4081            	  3474:             negx.l d1
02:00002174 6AFE            	  3475:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002176 67FE            	  3476:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002178 64FE            	  3477:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3478: ****            
                            	  3479: *            bvs.s *                   * Check V Flag  bvc/bvs 0
02:0000217A 0C8180000001    	  3480:             cmpi.l #$80000001,d1
02:00002180 66FE            	  3481:             bne.s *                   * Check Z Flag  beq/bne
02:00002182 20BC00007FFF    	  3482:             move.l #$7FFF,(a0)
02:00002188 003C0010        	  3483:             ori.b #$10,CCR        * Set X Flag
02:0000218C 4090            	  3484:             negx.l (a0)
02:0000218E 6AFE            	  3485:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002190 67FE            	  3486:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002192 64FE            	  3487:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3488: ****            
                            	  3489: *            bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002194 20BCF5671234    	  3490:             move.l #$F5671234,(a0)
02:0000219A 023C00EF        	  3491:             andi.b #$EF,CCR       * Clear X Flag
02:0000219E 4090            	  3492:             negx.l (a0)
02:000021A0 6BFE            	  3493:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:000021A2 67FE            	  3494:             beq.s *                   * Check Z Flag  beq/bne 0
02:000021A4 64FE            	  3495:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000021A6 69FE            	  3496:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000021A8 20BCF5675678    	  3497:             move.l #$F5675678,(a0)
02:000021AE 003C0010        	  3498:             ori.b #$10,CCR        * Set X Flag
02:000021B2 4090            	  3499:             negx.l (a0)
02:000021B4 6BFE            	  3500:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:000021B6 67FE            	  3501:             beq.s *                   * Check Z Flag  beq/bne 0
02:000021B8 64FE            	  3502:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000021BA 69FE            	  3503:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000021BC 0C900A98A987    	  3504:             cmpi.l #$0A98A987,(a0)
02:000021C2 66FE            	  3505:             bne.s *                   * Check Z Flag  beq/bne
02:000021C4 023C00EF        	  3506:             andi.b #$EF,CCR       * Clear X Flag
02:000021C8 4090            	  3507:             negx.l (a0)
02:000021CA 6AFE            	  3508:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:000021CC 67FE            	  3509:             beq.s *                   * Check Z Flag  beq/bne 0
02:000021CE 64FE            	  3510:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000021D0 69FE            	  3511:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000021D2 0C90F5675679    	  3512:             cmpi.l #$F5675679,(a0)
02:000021D8 66FE            	  3513:             bne.s *                   * Check Z Flag  beq/bne
                            	  3514: 
                            	  3515: 
                            	  3516: * -----
                            	  3517: 
                            	  3518: *     CLR - BYTE
02:000021DA 307C0100        	  3519:             move.l #$00000100,a0
02:000021DE 203C12345678    	  3520:             move.l #$12345678,d0
02:000021E4 223C12345678    	  3521:             move.l #$12345678,d1
02:000021EA 243C12345678    	  3522:             move.l #$12345678,d2
02:000021F0 283C12345600    	  3523:             move.l #$12345600,d4
02:000021F6 2A3C12340000    	  3524:             move.l #$12340000,d5
02:000021FC 7C00            	  3525:             moveq  #$00000000,d6
                            	  3526: 
02:000021FE 4200            	  3527:             clr.b d0
02:00002200 66FE            	  3528:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002202 6BFE            	  3529:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002204 B880            	  3530:             cmp.l d0,d4
02:00002206 66FE            	  3531:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3532: 
02:00002208 4241            	  3533:             clr.w d1
02:0000220A 66FE            	  3534:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000220C 6BFE            	  3535:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:0000220E BA81            	  3536:             cmp.l d1,d5
02:00002210 66FE            	  3537:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3538: 
02:00002212 7400            	  3539:             clr.l d2
02:00002214 66FE            	  3540:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002216 6BFE            	  3541:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002218 BC82            	  3542:             cmp.l d2,d6
02:0000221A 66FE            	  3543:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3544: 
02:0000221C 4E75            	  3545:             rts
                            	  3546: 
                            	  3547: 
                            	  3548: 
                            	  3549: *-----------------------------------------------------------
                            	  3550: *-----------------------------------------------------------
                            	  3551: * OPCODE : MOVEM
                            	  3552: *-----------------------------------------------------------
                            	  3553: *-----------------------------------------------------------
                            	  3554: op_MOVEM:
                            	  3555: 
                            	  3556: *     WORD  Registers --> Memory
02:0000221E 203C0000D0D0    	  3557:             move.l #$0000d0d0,d0
02:00002224 223C0000D1D1    	  3558:             move.l #$0000d1d1,d1
02:0000222A 243C0000D2D2    	  3559:             move.l #$0000d2d2,d2
02:00002230 263C0000D3D3    	  3560:             move.l #$0000d3d3,d3
02:00002236 283C0000D4D4    	  3561:             move.l #$0000d4d4,d4
02:0000223C 2A3C0000D5D5    	  3562:             move.l #$0000d5d5,d5
02:00002242 2C3C0000D6D6    	  3563:             move.l #$0000d6d6,d6
02:00002248 2E3C0000D7D7    	  3564:             move.l #$0000d7d7,d7
02:0000224E 307C0A0A        	  3565:             move.l #$00000a0a,a0
02:00002252 327C1A1A        	  3566:             move.l #$00001a1a,a1
02:00002256 347C2A2A        	  3567:             move.l #$00002a2a,a2
02:0000225A 367C3A3A        	  3568:             move.l #$00003a3a,a3
02:0000225E 387C4A4A        	  3569:             move.l #$00004a4a,a4
02:00002262 3A7C5A5A        	  3570:             move.l #$00005a5a,a5
02:00002266 3C7C6A6A        	  3571:             move.l #$00006a6a,a6
                            	  3572: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3573: 
02:0000226A 48B8FFFF0100    	  3574:             movem.w D0-D7/A0-A7,$00000100
                            	  3575: 
02:00002270 307C0100        	  3576:             move.l #$00000100,a0
                            	  3577: 
02:00002274 B058            	  3578:             cmp.w (a0)+,d0
02:00002276 66FE            	  3579:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002278 B258            	  3580:             cmp.w (a0)+,d1
02:0000227A 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000227C B458            	  3582:             cmp.w (a0)+,d2
02:0000227E 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002280 B658            	  3584:             cmp.w (a0)+,d3
02:00002282 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002284 B858            	  3586:             cmp.w (a0)+,d4
02:00002286 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002288 BA58            	  3588:             cmp.w (a0)+,d5
02:0000228A 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000228C BC58            	  3590:             cmp.w (a0)+,d6
02:0000228E 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002290 BE58            	  3592:             cmp.w (a0)+,d7
02:00002292 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3594: 
02:00002294 0C580A0A        	  3595:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
02:00002298 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3597: 
02:0000229A B2D8            	  3598:             cmp.w (a0)+,a1
02:0000229C 66FE            	  3599:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000229E B4D8            	  3600:             cmp.w (a0)+,a2
02:000022A0 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022A2 B6D8            	  3602:             cmp.w (a0)+,a3
02:000022A4 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022A6 B8D8            	  3604:             cmp.w (a0)+,a4
02:000022A8 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022AA BAD8            	  3606:             cmp.w (a0)+,a5
02:000022AC 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022AE BCD8            	  3608:             cmp.w (a0)+,a6
02:000022B0 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3610: 
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: *     LONG  Registers --> Memory
02:000022B2 203CD0D0D0D0    	  3615:             move.l #$d0d0d0d0,d0
02:000022B8 223CD1D1D1D1    	  3616:             move.l #$d1d1d1d1,d1
02:000022BE 243CD2D2D2D2    	  3617:             move.l #$d2d2d2d2,d2
02:000022C4 263CD3D3D3D3    	  3618:             move.l #$d3d3d3d3,d3
02:000022CA 283CD4D4D4D4    	  3619:             move.l #$d4d4d4d4,d4
02:000022D0 2A3CD5D5D5D5    	  3620:             move.l #$d5d5d5d5,d5
02:000022D6 2C3CD6D6D6D6    	  3621:             move.l #$d6d6d6d6,d6
02:000022DC 2E3CD7D7D7D7    	  3622:             move.l #$d7d7d7d7,d7
02:000022E2 207C0A0A0A0A    	  3623:             move.l #$0a0a0a0a,a0
02:000022E8 227C1A1A1A1A    	  3624:             move.l #$1a1a1a1a,a1
02:000022EE 247C2A2A2A2A    	  3625:             move.l #$2a2a2a2a,a2
02:000022F4 267C3A3A3A3A    	  3626:             move.l #$3a3a3a3a,a3
02:000022FA 287C4A4A4A4A    	  3627:             move.l #$4a4a4a4a,a4
02:00002300 2A7C5A5A5A5A    	  3628:             move.l #$5a5a5a5a,a5
02:00002306 2C7C6A6A6A6A    	  3629:             move.l #$6a6a6a6a,a6
                            	  3630: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3631: 
                            	  3632: 
02:0000230C 48F8FFFF0120    	  3633:             movem.l D0-D7/A0-A7,$00000120
                            	  3634: 
02:00002312 307C0120        	  3635:             move.l #$00000120,a0
                            	  3636: 
02:00002316 B098            	  3637:             cmp.l (a0)+,d0
02:00002318 66FE            	  3638:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000231A B298            	  3639:             cmp.l (a0)+,d1
02:0000231C 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000231E B498            	  3641:             cmp.l (a0)+,d2
02:00002320 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002322 B698            	  3643:             cmp.l (a0)+,d3
02:00002324 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002326 B898            	  3645:             cmp.l (a0)+,d4
02:00002328 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000232A BA98            	  3647:             cmp.l (a0)+,d5
02:0000232C 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000232E BC98            	  3649:             cmp.l (a0)+,d6
02:00002330 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002332 BE98            	  3651:             cmp.l (a0)+,d7
02:00002334 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3653: 
02:00002336 0C980A0A0A0A    	  3654:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
02:0000233C 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3656: 
02:0000233E B3D8            	  3657:             cmp.l (a0)+,a1
02:00002340 66FE            	  3658:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002342 B5D8            	  3659:             cmp.l (a0)+,a2
02:00002344 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002346 B7D8            	  3661:             cmp.l (a0)+,a3
02:00002348 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000234A B9D8            	  3663:             cmp.l (a0)+,a4
02:0000234C 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000234E BBD8            	  3665:             cmp.l (a0)+,a5
02:00002350 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002352 BDD8            	  3667:             cmp.l (a0)+,a6
02:00002354 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3669: *      ----
                            	  3670: 
                            	  3671: 
                            	  3672: *     WORD  Registers --> Memory  -(An) EA Mode
02:00002356 203C0000D0D0    	  3673:             move.l #$0000d0d0,d0
02:0000235C 223C0000D1D1    	  3674:             move.l #$0000d1d1,d1
02:00002362 243C0000D2D2    	  3675:             move.l #$0000d2d2,d2
02:00002368 263C0000D3D3    	  3676:             move.l #$0000d3d3,d3
02:0000236E 283C0000D4D4    	  3677:             move.l #$0000d4d4,d4
02:00002374 2A3C0000D5D5    	  3678:             move.l #$0000d5d5,d5
02:0000237A 2C3C0000D6D6    	  3679:             move.l #$0000d6d6,d6
02:00002380 2E3C0000D7D7    	  3680:             move.l #$0000d7d7,d7
02:00002386 307C0A0A        	  3681:             move.l #$00000a0a,a0
02:0000238A 327C1A1A        	  3682:             move.l #$00001a1a,a1
02:0000238E 347C2A2A        	  3683:             move.l #$00002a2a,a2
02:00002392 367C3A3A        	  3684:             move.l #$00003a3a,a3
02:00002396 387C4A4A        	  3685:             move.l #$00004a4a,a4
02:0000239A 3A7C5A5A        	  3686:             move.l #$00005a5a,a5
02:0000239E 3C7C6A6A        	  3687:             move.l #$00006a6a,a6
                            	  3688: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3689: 
02:000023A2 307C01A0        	  3690:             move.l #$000001A0,a0
02:000023A6 48A0FFFF        	  3691:             movem.w D0-D7/A0-A7,-(a0)
                            	  3692: 
02:000023AA 307C019E        	  3693:             move.l #$0000019E,a0
                            	  3694: 
02:000023AE BCE0            	  3695:             cmp.w -(a0),a6
02:000023B0 66FE            	  3696:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023B2 BAE0            	  3697:             cmp.w -(a0),a5
02:000023B4 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023B6 B8E0            	  3699:             cmp.w -(a0),a4
02:000023B8 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023BA B6E0            	  3701:             cmp.w -(a0),a3
02:000023BC 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023BE B4E0            	  3703:             cmp.w -(a0),a2
02:000023C0 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023C2 B2E0            	  3705:             cmp.w -(a0),a1
02:000023C4 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023C6 B0E0            	  3707:             cmp.w -(a0),a0
                            	  3708: *            bne.s *                   * Check Z Flag  beq/bne 0
02:000023C8 BE60            	  3709:             cmp.w -(a0),d7
02:000023CA 66FE            	  3710:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023CC BC60            	  3711:             cmp.w -(a0),d6
02:000023CE 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023D0 BA60            	  3713:             cmp.w -(a0),d5
02:000023D2 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023D4 B860            	  3715:             cmp.w -(a0),d4
02:000023D6 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023D8 B660            	  3717:             cmp.w -(a0),d3
02:000023DA 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023DC B460            	  3719:             cmp.w -(a0),d2
02:000023DE 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023E0 B260            	  3721:             cmp.w -(a0),d1
02:000023E2 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023E4 B060            	  3723:             cmp.w -(a0),d0
02:000023E6 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3725: 
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: *     LONG  Registers --> Memory   -(An) EA Mode
02:000023E8 203CD0D0D0D0    	  3730:             move.l #$d0d0d0d0,d0
02:000023EE 223CD1D1D1D1    	  3731:             move.l #$d1d1d1d1,d1
02:000023F4 243CD2D2D2D2    	  3732:             move.l #$d2d2d2d2,d2
02:000023FA 263CD3D3D3D3    	  3733:             move.l #$d3d3d3d3,d3
02:00002400 283CD4D4D4D4    	  3734:             move.l #$d4d4d4d4,d4
02:00002406 2A3CD5D5D5D5    	  3735:             move.l #$d5d5d5d5,d5
02:0000240C 2C3CD6D6D6D6    	  3736:             move.l #$d6d6d6d6,d6
02:00002412 2E3CD7D7D7D7    	  3737:             move.l #$d7d7d7d7,d7
02:00002418 207C0A0A0A0A    	  3738:             move.l #$0a0a0a0a,a0
02:0000241E 227C1A1A1A1A    	  3739:             move.l #$1a1a1a1a,a1
02:00002424 247C2A2A2A2A    	  3740:             move.l #$2a2a2a2a,a2
02:0000242A 267C3A3A3A3A    	  3741:             move.l #$3a3a3a3a,a3
02:00002430 287C4A4A4A4A    	  3742:             move.l #$4a4a4a4a,a4
02:00002436 2A7C5A5A5A5A    	  3743:             move.l #$5a5a5a5a,a5
02:0000243C 2C7C6A6A6A6A    	  3744:             move.l #$6a6a6a6a,a6
                            	  3745: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3746: 
                            	  3747: 
02:00002442 307C01A0        	  3748:             move.l #$000001A0,a0
02:00002446 48E0FFFF        	  3749:             movem.l D0-D7/A0-A7,-(a0)
                            	  3750: 
02:0000244A 307C019C        	  3751:             move.l #$0000019C,a0
                            	  3752: 
02:0000244E BDE0            	  3753:             cmp.l -(a0),a6
02:00002450 66FE            	  3754:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002452 BBE0            	  3755:             cmp.l -(a0),a5
02:00002454 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002456 B9E0            	  3757:             cmp.l -(a0),a4
02:00002458 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000245A B7E0            	  3759:             cmp.l -(a0),a3
02:0000245C 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000245E B5E0            	  3761:             cmp.l -(a0),a2
02:00002460 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002462 B3E0            	  3763:             cmp.l -(a0),a1
02:00002464 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002466 B1E0            	  3765:             cmp.l -(a0),a0
                            	  3766: *            bne.s *                   * Check Z Flag  beq/bne 0
02:00002468 BEA0            	  3767:             cmp.l -(a0),d7
02:0000246A 66FE            	  3768:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000246C BCA0            	  3769:             cmp.l -(a0),d6
02:0000246E 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002470 BAA0            	  3771:             cmp.l -(a0),d5
02:00002472 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002474 B8A0            	  3773:             cmp.l -(a0),d4
02:00002476 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002478 B6A0            	  3775:             cmp.l -(a0),d3
02:0000247A 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000247C B4A0            	  3777:             cmp.l -(a0),d2
02:0000247E 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002480 B2A0            	  3779:             cmp.l -(a0),d1
02:00002482 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002484 B0A0            	  3781:             cmp.l -(a0),d0
02:00002486 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3783: 
                            	  3784: 
                            	  3785: 
                            	  3786: *     ----
                            	  3787: 
                            	  3788: *     WORD - Memory --> Registers
02:00002488 7000            	  3789:             moveq  #$00000000,d0
02:0000248A 7200            	  3790:             moveq  #$00000000,d1
02:0000248C 7400            	  3791:             moveq  #$00000000,d2
02:0000248E 7600            	  3792:             moveq  #$00000000,d3
02:00002490 7800            	  3793:             moveq  #$00000000,d4
02:00002492 7A00            	  3794:             moveq  #$00000000,d5
02:00002494 7C00            	  3795:             moveq  #$00000000,d6
02:00002496 7E00            	  3796:             moveq  #$00000000,d7
02:00002498 91C8            	  3797:             move.l #$00000000,a0
02:0000249A 93C9            	  3798:             move.l #$00000000,a1
02:0000249C 95CA            	  3799:             move.l #$00000000,a2
02:0000249E 97CB            	  3800:             move.l #$00000000,a3
02:000024A0 99CC            	  3801:             move.l #$00000000,a4
02:000024A2 9BCD            	  3802:             move.l #$00000000,a5
02:000024A4 9DCE            	  3803:             move.l #$00000000,a6
                            	  3804: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3805: 
02:000024A6 4CB82A550100    	  3806:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3807: 
02:000024AC B0BCFFFFD0D0    	  3808:             cmp.l #$FFFFD0D0,d0
02:000024B2 66FE            	  3809:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024B4 B4BCFFFFD1D1    	  3810:             cmp.l #$FFFFD1D1,d2
02:000024BA 66FE            	  3811:             bne.s *                  * Check Z Flag  beq/bne 0
02:000024BC B8BCFFFFD2D2    	  3812:             cmp.l #$FFFFD2D2,d4
02:000024C2 66FE            	  3813:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024C4 BCBCFFFFD3D3    	  3814:             cmp.l #$FFFFD3D3,d6
02:000024CA 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024CC B2FCD4D4        	  3816:             cmp.l #$FFFFD4D4,a1
02:000024D0 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024D2 B6FCD5D5        	  3818:             cmp.l #$FFFFD5D5,a3
02:000024D6 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024D8 BAFCD6D6        	  3820:             cmp.l #$FFFFD6D6,a5
02:000024DC 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3822: 
                            	  3823: 
                            	  3824: *     LONG - Memory --> Registers
02:000024DE 7000            	  3825:             moveq  #$00000000,d0
02:000024E0 7200            	  3826:             moveq  #$00000000,d1
02:000024E2 7400            	  3827:             moveq  #$00000000,d2
02:000024E4 7600            	  3828:             moveq  #$00000000,d3
02:000024E6 7800            	  3829:             moveq  #$00000000,d4
02:000024E8 7A00            	  3830:             moveq  #$00000000,d5
02:000024EA 7C00            	  3831:             moveq  #$00000000,d6
02:000024EC 7E00            	  3832:             moveq  #$00000000,d7
02:000024EE 91C8            	  3833:             move.l #$00000000,a0
02:000024F0 93C9            	  3834:             move.l #$00000000,a1
02:000024F2 95CA            	  3835:             move.l #$00000000,a2
02:000024F4 97CB            	  3836:             move.l #$00000000,a3
02:000024F6 99CC            	  3837:             move.l #$00000000,a4
02:000024F8 9BCD            	  3838:             move.l #$00000000,a5
02:000024FA 9DCE            	  3839:             move.l #$00000000,a6
                            	  3840: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3841: 
02:000024FC 4CF82A550120    	  3842:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3843: 
02:00002502 B0BCD0D0D0D0    	  3844:             cmp.l #$D0D0D0D0,d0
02:00002508 66FE            	  3845:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000250A B4BCD1D1D1D1    	  3846:             cmp.l #$D1D1D1D1,d2
02:00002510 66FE            	  3847:             bne.s *                  * Check Z Flag  beq/bne 0
02:00002512 B8BCD2D2D2D2    	  3848:             cmp.l #$D2D2D2D2,d4
02:00002518 66FE            	  3849:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000251A BCBCD3D3D3D3    	  3850:             cmp.l #$D3D3D3D3,d6
02:00002520 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002522 B3FCD4D4D4D4    	  3852:             cmp.l #$D4D4D4D4,a1
02:00002528 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000252A B7FCD5D5D5D5    	  3854:             cmp.l #$D5D5D5D5,a3
02:00002530 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002532 BBFCD6D6D6D6    	  3856:             cmp.l #$D6D6D6D6,a5
02:00002538 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3858: 
02:0000253A 4E75            	  3859:             rts
                            	  3860: 
                            	  3861: 
                            	  3862: *-----------------------------------------------------------
                            	  3863: *-----------------------------------------------------------
                            	  3864: * OPCODE : ABCD
                            	  3865: *-----------------------------------------------------------
                            	  3866: *-----------------------------------------------------------
                            	  3867: op_ABCD:
                            	  3868: 
                            	  3869: *     Test with X Flag CLEARED
02:0000253C 307C0110        	  3870:                 move.l #$00000110,a0 * Address pointer-X
02:00002540 327C0120        	  3871:                 move.l #$00000120,a1 * Address pointer-Y
02:00002544 7000            	  3872:                 moveq  #$00000000,d0 * BCD byte-X
02:00002546 7200            	  3873:                 moveq  #$00000000,d1 * BCD byte-Y
02:00002548 7400            	  3874:                 moveq  #$00000000,d2
02:0000254A 7600            	  3875:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:0000254C 7800            	  3876:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:0000254E 7A00            	  3877:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:00002550 2C3C00000099    	  3878:                 move.l #$00000099,d6 * Inner loop counter
02:00002556 2E3C00000099    	  3879:                 move.l #$00000099,d7 * Outer loop counter
                            	  3880: 
02:0000255C 2007            	  3881: ABCD_OUTER1:    move.l d7,d0
02:0000255E 2206            	  3882: ABCD_INNER1:    move.l d6,d1
02:00002560 023C00EF        	  3883:                 andi.b #$EF,CCR     * Clear X Flag
02:00002564 307C0110        	  3884:                 move.l #$00000110,a0 * Address pointer-X
02:00002568 327C0120        	  3885:                 move.l #$00000120,a1 * Address pointer-Y
02:0000256C 1140FFFF        	  3886:                 move.b d0,-1(a0)
02:00002570 1341FFFF        	  3887:                 move.b d1,-1(a1)
                            	  3888: 
02:00002574 C300            	  3889:                 abcd d0,d1
02:00002576 6402            	  3890:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
02:00002578 5284            	  3891:                 add.l #1,d4
02:0000257A DA81            	  3892: ABCD_NO_C1:     add.l d1,d5
                            	  3893: 
02:0000257C C308            	  3894:                 abcd -(a0),-(a1)
02:0000257E 6402            	  3895:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
02:00002580 5284            	  3896:                 add.l #1,d4
02:00002582 D611            	  3897: ABCD_NO_C2:     add.b (a1),d3
                            	  3898: 
                            	  3899: 
02:00002584 51CEFFD8        	  3900:                 dbf d6,ABCD_INNER1
02:00002588 2C3C00000099    	  3901:                 move.l #$00000099,d6
02:0000258E 51CFFFCC        	  3902:                 dbf d7,ABCD_OUTER1
02:00002592 0C8400005AFC    	  3903:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
02:00002598 66FE            	  3904:                 bne.s *
02:0000259A 0C85001C9A34    	  3905:                 cmpi.l #$001C9A34,d5
02:000025A0 66FE            	  3906:                 bne.s *
02:000025A2 0C8300000034    	  3907:                 cmpi.l #$00000034,d3
02:000025A8 66FE            	  3908:                 bne.s *
                            	  3909: 
                            	  3910: *     Test with X Flag SET
02:000025AA 307C0110        	  3911:                 move.l #$00000110,a0 * Address pointer-X
02:000025AE 327C0120        	  3912:                 move.l #$00000120,a1 * Address pointer-Y
02:000025B2 7000            	  3913:                 moveq  #$00000000,d0 * BCD byte-X
02:000025B4 7200            	  3914:                 moveq  #$00000000,d1 * BCD byte-Y
02:000025B6 7400            	  3915:                 moveq  #$00000000,d2
02:000025B8 7600            	  3916:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:000025BA 7800            	  3917:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:000025BC 7A00            	  3918:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:000025BE 2C3C00000099    	  3919:                 move.l #$00000099,d6 * Inner loop counter
02:000025C4 2E3C00000099    	  3920:                 move.l #$00000099,d7 * Outer loop counter
                            	  3921: 
02:000025CA 2007            	  3922: ABCD_OUTER2:    move.l d7,d0
02:000025CC 2206            	  3923: ABCD_INNER2:    move.l d6,d1
02:000025CE 003C0010        	  3924:                 ori.b #$10,CCR      * Set X Flag
02:000025D2 307C0110        	  3925:                 move.l #$00000110,a0 * Address pointer-X
02:000025D6 327C0120        	  3926:                 move.l #$00000120,a1 * Address pointer-Y
02:000025DA 1140FFFF        	  3927:                 move.b d0,-1(a0)
02:000025DE 1341FFFF        	  3928:                 move.b d1,-1(a1)
                            	  3929: 
02:000025E2 C300            	  3930:                 abcd d0,d1
02:000025E4 6402            	  3931:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
02:000025E6 5284            	  3932:                 add.l #1,d4
02:000025E8 DA81            	  3933: ABCD_NO_C3:     add.l d1,d5
                            	  3934: 
02:000025EA C308            	  3935:                 abcd -(a0),-(a1)
02:000025EC 6402            	  3936:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
02:000025EE 5284            	  3937:                 add.l #1,d4
02:000025F0 D611            	  3938: ABCD_NO_C4:     add.b (a1),d3
                            	  3939: 
                            	  3940: 
02:000025F2 51CEFFD8        	  3941:                 dbf d6,ABCD_INNER2
02:000025F6 2C3C00000099    	  3942:                 move.l #$00000099,d6
02:000025FC 51CFFFCC        	  3943:                 dbf d7,ABCD_OUTER2
02:00002600 0C8400005B60    	  3944:                 cmpi.l #$00005B60,d4  * Check the cumulative results
02:00002606 66FE            	  3945:                 bne.s *
02:00002608 0C85001CCFC8    	  3946:                 cmpi.l #$001CCFC8,d5
02:0000260E 66FE            	  3947:                 bne.s *
02:00002610 0C8300000034    	  3948:                 cmpi.l #$00000034,d3
02:00002616 66FE            	  3949:                 bne.s *
                            	  3950: 
                            	  3951: *             Quick check of Z Flag
02:00002618 4200            	  3952:                 move.b #$00,d0
02:0000261A 4201            	  3953:                 move.b #$00,d1
02:0000261C 44FC0000        	  3954:                 move #$00,CCR              * Set Z flag to 0
02:00002620 C101            	  3955:                 abcd d1,d0                  * Should NOT set Z Flag to 1
02:00002622 67FE            	  3956:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3957: 
02:00002624 103C0001        	  3958:                 move.b #$01,d0
02:00002628 4201            	  3959:                 move.b #$00,d1
02:0000262A 44FC0004        	  3960:                 move #$04,CCR              * Set Z flag to 0
02:0000262E C101            	  3961:                 abcd d1,d0                  * Should NOT set Z Flag to 1
02:00002630 67FE            	  3962:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3963: 
02:00002632 4E75            	  3964:                 rts
                            	  3965: 
                            	  3966: *-----------------------------------------------------------
                            	  3967: *-----------------------------------------------------------
                            	  3968: * OPCODE : SBCD
                            	  3969: *-----------------------------------------------------------
                            	  3970: *-----------------------------------------------------------
                            	  3971: op_SBCD:
                            	  3972: 
                            	  3973: *     Test with X Flag CLEARED
02:00002634 307C0110        	  3974:                 move.l #$00000110,a0 * Address pointer-X
02:00002638 327C0120        	  3975:                 move.l #$00000120,a1 * Address pointer-Y
02:0000263C 7000            	  3976:                 moveq  #$00000000,d0 * BCD byte-X
02:0000263E 7200            	  3977:                 moveq  #$00000000,d1 * BCD byte-Y
02:00002640 7400            	  3978:                 moveq  #$00000000,d2
02:00002642 7600            	  3979:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:00002644 7800            	  3980:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:00002646 7A00            	  3981:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:00002648 2C3C00000099    	  3982:                 move.l #$00000099,d6 * Inner loop counter
02:0000264E 2E3C00000099    	  3983:                 move.l #$00000099,d7 * Outer loop counter
                            	  3984: 
02:00002654 2007            	  3985: SBCD_OUTER1:    move.l d7,d0
02:00002656 2206            	  3986: SBCD_INNER1:    move.l d6,d1
02:00002658 023C00EF        	  3987:                 andi.b #$EF,CCR     * Clear X Flag
02:0000265C 307C0110        	  3988:                 move.l #$00000110,a0 * Address pointer-X
02:00002660 327C0120        	  3989:                 move.l #$00000120,a1 * Address pointer-Y
02:00002664 1140FFFF        	  3990:                 move.b d0,-1(a0)
02:00002668 1341FFFF        	  3991:                 move.b d1,-1(a1)
                            	  3992: 
02:0000266C 8300            	  3993:                 sbcd d0,d1
02:0000266E 6402            	  3994:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
02:00002670 5284            	  3995:                 add.l #1,d4
02:00002672 DA81            	  3996: SBCD_NO_C1:     add.l d1,d5
                            	  3997: 
02:00002674 8308            	  3998:                 sbcd -(a0),-(a1)
02:00002676 6402            	  3999:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
02:00002678 5284            	  4000:                 add.l #1,d4
02:0000267A D611            	  4001: SBCD_NO_C2:     add.b (a1),d3
                            	  4002: 
                            	  4003: 
02:0000267C 51CEFFD8        	  4004:                 dbf d6,SBCD_INNER1
02:00002680 2C3C00000099    	  4005:                 move.l #$00000099,d6
02:00002686 51CFFFCC        	  4006:                 dbf d7,SBCD_OUTER1
02:0000268A 0C8400005C0A    	  4007:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
02:00002690 66FE            	  4008:                 bne.s *
02:00002692 0C85001C459E    	  4009:                 cmpi.l #$001C459E,d5
02:00002698 66FE            	  4010:                 bne.s *
02:0000269A 0C830000009E    	  4011:                 cmpi.l #$0000009E,d3
02:000026A0 66FE            	  4012:                 bne.s *
                            	  4013: 
                            	  4014: *     Test with X Flag SET
02:000026A2 307C0110        	  4015:                 move.l #$00000110,a0 * Address pointer-X
02:000026A6 327C0120        	  4016:                 move.l #$00000120,a1 * Address pointer-Y
02:000026AA 7000            	  4017:                 moveq  #$00000000,d0 * BCD byte-X
02:000026AC 7200            	  4018:                 moveq  #$00000000,d1 * BCD byte-Y
02:000026AE 7400            	  4019:                 moveq  #$00000000,d2
02:000026B0 7600            	  4020:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:000026B2 7800            	  4021:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:000026B4 7A00            	  4022:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:000026B6 2C3C00000099    	  4023:                 move.l #$00000099,d6 * Inner loop counter
02:000026BC 2E3C00000099    	  4024:                 move.l #$00000099,d7 * Outer loop counter
                            	  4025: 
02:000026C2 2007            	  4026: SBCD_OUTER2:    move.l d7,d0
02:000026C4 2206            	  4027: SBCD_INNER2:    move.l d6,d1
02:000026C6 003C0010        	  4028:                 ori.b #$10,CCR      * Set X Flag
02:000026CA 307C0110        	  4029:                 move.l #$00000110,a0 * Address pointer-X
02:000026CE 327C0120        	  4030:                 move.l #$00000120,a1 * Address pointer-Y
02:000026D2 1140FFFF        	  4031:                 move.b d0,-1(a0)
02:000026D6 1341FFFF        	  4032:                 move.b d1,-1(a1)
                            	  4033: 
02:000026DA 8300            	  4034:                 sbcd d0,d1
02:000026DC 6402            	  4035:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
02:000026DE 5284            	  4036:                 add.l #1,d4
02:000026E0 DA81            	  4037: SBCD_NO_C3:     add.l d1,d5
                            	  4038: 
02:000026E2 8308            	  4039:                 sbcd -(a0),-(a1)
02:000026E4 6402            	  4040:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
02:000026E6 5284            	  4041:                 add.l #1,d4
02:000026E8 D611            	  4042: SBCD_NO_C4:     add.b (a1),d3
                            	  4043: 
02:000026EA 51CEFFD8        	  4044:                 dbf d6,SBCD_INNER2
02:000026EE 2C3C00000099    	  4045:                 move.l #$00000099,d6
02:000026F4 51CFFFCC        	  4046:                 dbf d7,SBCD_OUTER2
02:000026F8 0C8400005CA4    	  4047:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
02:000026FE 66FE            	  4048:                 bne.s *
02:00002700 0C85001C5C66    	  4049:                 cmpi.l #$001C5C66,d5
02:00002706 66FE            	  4050:                 bne.s *
02:00002708 0C830000009E    	  4051:                 cmpi.l #$0000009E,d3
02:0000270E 66FE            	  4052:                 bne.s *
                            	  4053: 
                            	  4054: 
                            	  4055: *             Quick check of Z Flag
02:00002710 4200            	  4056:                 move.b #$00,d0
02:00002712 4201            	  4057:                 move.b #$00,d1
02:00002714 44FC0000        	  4058:                 move #$00,CCR              * Set Z flag to 0
02:00002718 8101            	  4059:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
02:0000271A 67FE            	  4060:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4061: 
02:0000271C 103C0001        	  4062:                 move.b #$01,d0
02:00002720 4201            	  4063:                 move.b #$00,d1
02:00002722 44FC0004        	  4064:                 move #$04,CCR              * Set Z flag to 0
02:00002726 8101            	  4065:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
02:00002728 67FE            	  4066:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4067: 
02:0000272A 4E75            	  4068:                 rts
                            	  4069: 
                            	  4070: *-----------------------------------------------------------
                            	  4071: *-----------------------------------------------------------
                            	  4072: * OPCODE : NBCD
                            	  4073: *-----------------------------------------------------------
                            	  4074: *-----------------------------------------------------------
                            	  4075: op_NBCD:
                            	  4076: 
                            	  4077: *        NBCD to a  Register
                            	  4078: 
02:0000272C 7000            	  4079:                 moveq  #$00000000,d0 * BCD byte
02:0000272E 7200            	  4080:                 moveq  #$00000000,d1
02:00002730 7400            	  4081:                 moveq  #$00000000,d2
02:00002732 7600            	  4082:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
02:00002734 7800            	  4083:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:00002736 7A00            	  4084:                 moveq  #$00000000,d5 * Cumulative BCD results
02:00002738 2C3C00000099    	  4085:                 move.l #$00000099,d6
02:0000273E 2E3C00000099    	  4086:                 move.l #$00000099,d7 * Loop counter
                            	  4087: 
02:00002744 2007            	  4088: NBCD_LOOP:      move.l d7,d0
02:00002746 44FC0004        	  4089:                 move #$04,CCR        * Set Z flag to 0
                            	  4090: 
02:0000274A 4800            	  4091:                 nbcd d0
                            	  4092: 
02:0000274C 6402            	  4093:                 bcc.s NBCD_NO_C         * Check C Flag
02:0000274E 5284            	  4094:                 add.l #1,d4
02:00002750 6602            	  4095: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
02:00002752 5283            	  4096:                 add.l #1,d3
02:00002754 DA80            	  4097: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4098: 
02:00002756 51CFFFEC        	  4099:                 dbf d7,NBCD_LOOP
                            	  4100: 
02:0000275A 0C8300000001    	  4101:                 cmpi.l #$00000001,d3  * Check the cumulative results
02:00002760 66FE            	  4102:                 bne.s *
02:00002762 0C8400000099    	  4103:                 cmpi.l #$00000099,d4
02:00002768 66FE            	  4104:                 bne.s *
02:0000276A 0C8500002E3B    	  4105:                 cmpi.l #$00002E3B,d5
02:00002770 66FE            	  4106:                 bne.s *
                            	  4107: 
                            	  4108: 
                            	  4109: *        NBCD to a memory location
                            	  4110: 
02:00002772 7000            	  4111:                 moveq  #$00000000,d0 * BCD byte
02:00002774 7200            	  4112:                 moveq  #$00000000,d1
02:00002776 7400            	  4113:                 moveq  #$00000000,d2
02:00002778 7600            	  4114:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
02:0000277A 7800            	  4115:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:0000277C 7A00            	  4116:                 moveq  #$00000000,d5 * Cumulative BCD results
02:0000277E 2C3C00000099    	  4117:                 move.l #$00000099,d6
02:00002784 2E3C00000099    	  4118:                 move.l #$00000099,d7 * Loop counter
                            	  4119: 
02:0000278A 11C70100        	  4120: NBCD_LOOP1:     move.b d7,$00000100
02:0000278E 44FC0004        	  4121:                 move #$04,CCR        * Set Z flag to 0
                            	  4122: 
02:00002792 48380100        	  4123:                 nbcd $00000100
02:00002796 10380100        	  4124:                 move.b $00000100,d0
                            	  4125: 
02:0000279A 6402            	  4126:                 bcc.s NBCD_NO_C1        * Check C Flag
02:0000279C 5284            	  4127:                 add.l #1,d4
02:0000279E 6602            	  4128: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
02:000027A0 5283            	  4129:                 add.l #1,d3
02:000027A2 DA80            	  4130: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4131: 
02:000027A4 51CFFFE4        	  4132:                 dbf d7,NBCD_LOOP1
                            	  4133: 
02:000027A8 0C8300000001    	  4134:                 cmpi.l #$00000001,d3  * Check the cumulative results
02:000027AE 66FE            	  4135:                 bne.s *
02:000027B0 4A84            	  4136:                 cmpi.l #$00000000,d4
02:000027B2 66FE            	  4137:                 bne.s *
02:000027B4 0C8500002E3B    	  4138:                 cmpi.l #$00002E3B,d5
02:000027BA 66FE            	  4139:                 bne.s *
                            	  4140: 
                            	  4141: 
02:000027BC 4E75            	  4142:                 rts
                            	  4143: 
                            	  4144: 
                            	  4145: 
                            	  4146: *-----------------------------------------------------------
                            	  4147: *-----------------------------------------------------------
                            	  4148: * OPCODE : TRAPV
                            	  4149: *-----------------------------------------------------------
                            	  4150: *-----------------------------------------------------------
                            	  4151: op_TRAPV:
                            	  4152: 
                            	  4153: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4154: 
02:000027BE 7000            	  4155:                 moveq  #$00000000,d0 * Clear d0
                            	  4156: 
02:000027C0 44FC0000        	  4157:                 move #$00,CCR        * Clear V flag
02:000027C4 4E76            	  4158:                 trapv
02:000027C6 4A80            	  4159:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
02:000027C8 66FE            	  4160:                 bne.s *
                            	  4161: 
02:000027CA 44FC0002        	  4162:                 move #$02,CCR        * Set V flag
02:000027CE 4E76            	  4163:                 trapv
02:000027D0 0C8012345678    	  4164:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
02:000027D6 66FE            	  4165:                 bne.s *
                            	  4166: 
                            	  4167: 
02:000027D8 4E75            	  4168:                 rts
                            	  4169: 
                            	  4170: 
                            	  4171: 
                            	  4172: *-----------------------------------------------------------
                            	  4173: *-----------------------------------------------------------
                            	  4174: * OPCODE : RTR
                            	  4175: *-----------------------------------------------------------
                            	  4176: *-----------------------------------------------------------
                            	  4177: 
                            	  4178: op_RTR:
                            	  4179: 
                            	  4180: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4181: 
02:000027DA 41FA000A        	  4182:                 lea 		RTR_DONE,a0
02:000027DE 2F08            	  4183:                 move.l 	a0,-(a7)     * push destination PC to the stack
02:000027E0 3F3CFF15        	  4184:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
02:000027E4 4E77            	  4185:                 rtr
                            	  4186: 
02:000027E6 40C0            	  4187: RTR_DONE:       move.w SR,d0
02:000027E8 0240001F        	  4188:                 andi.w #$1F,d0
02:000027EC 0C400015        	  4189:                 cmpi.w #$15,d0
02:000027F0 66FE            	  4190:                 bne.s *
                            	  4191: 
02:000027F2 4E75            	  4192:                 rts
                            	  4193: 
                            	  4194: 
02:000027F4 283C44444444    	  4195: BSR_FAR2:       move.l #$44444444,d4
02:000027FA 4E75            	  4196:                 rts
                            	  4197: 
                            	  4198: 
                            	  4199: *-----------------------------------------------------------
                            	  4200: *-----------------------------------------------------------
                            	  4201: * OPCODE : BCC
                            	  4202: *-----------------------------------------------------------
                            	  4203: *-----------------------------------------------------------
                            	  4204: 
02:000027FC 44FC0000        	  4205: op_BCC:         move #$00,CCR
02:00002800 6202            	  4206:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
02:00002802 60FE            	  4207:                 bra.s *
                            	  4208: 
02:00002804 44FC0001        	  4209: BCC1:           move #$01,CCR
02:00002808 63000004        	  4210:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
02:0000280C 60FE            	  4211:                 bra.s *
                            	  4212: 
02:0000280E 44FC0000        	  4213: BCC2:           move #$00,CCR
02:00002812 6402            	  4214:                 bcc.s BCC3            * Carry Clear         C=0
02:00002814 60FE            	  4215:                 bra.s *
                            	  4216: 
02:00002816 44FC0001        	  4217: BCC3:           move #$01,CCR
02:0000281A 65000004        	  4218:                 bcs.w BCC4            * Carry Set           C=1
02:0000281E 60FE            	  4219:                 bra.s *
                            	  4220: 
02:00002820 44FC0000        	  4221: BCC4:           move #$00,CCR
02:00002824 6602            	  4222:                 bne.s BCC5            * Not Equal           Z=0
02:00002826 60FE            	  4223:                 bra.s *
                            	  4224: 
02:00002828 44FC0004        	  4225: BCC5:           move #$04,CCR
02:0000282C 67000004        	  4226:                 beq.w BCC6            * Equal               Z=1
02:00002830 60FE            	  4227:                 bra.s *
                            	  4228: 
02:00002832 44FC0000        	  4229: BCC6:           move #$00,CCR
02:00002836 6802            	  4230:                 bvc.s BCC7            * V Clear             V=0
02:00002838 60FE            	  4231:                 bra.s *
                            	  4232: 
02:0000283A 44FC0002        	  4233: BCC7:           move #$02,CCR
02:0000283E 69000004        	  4234:                 bvs.w BCC8            * V Set               V=1
02:00002842 60FE            	  4235:                 bra.s *
                            	  4236: 
02:00002844 44FC0000        	  4237: BCC8:           move #$00,CCR
02:00002848 6A02            	  4238:                 bpl.s BCC9            * Plus                N=0
02:0000284A 60FE            	  4239:                 bra.s *
                            	  4240: 
02:0000284C 44FC0008        	  4241: BCC9:           move #$08,CCR
02:00002850 6B000004        	  4242:                 bmi.w BCC10           * Minus               N=1
02:00002854 60FE            	  4243:                 bra.s *
                            	  4244: 
02:00002856 44FC0000        	  4245: BCC10:          move #$00,CCR
02:0000285A 6C02            	  4246:                 bge.s BCC11           * Greater or Equal    N=V
02:0000285C 60FE            	  4247:                 bra.s *
                            	  4248: 
02:0000285E 44FC0002        	  4249: BCC11:          move #$02,CCR
02:00002862 6D000004        	  4250:                 blt.w BCC12           * Less Than           N!=V
02:00002866 60FE            	  4251:                 bra.s *
                            	  4252: 
02:00002868 44FC000A        	  4253: BCC12:          move #$0A,CCR
02:0000286C 6E02            	  4254:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
02:0000286E 60FE            	  4255:                 bra.s *
                            	  4256: 
02:00002870 44FC0006        	  4257: BCC13:          move #$06,CCR
02:00002874 6F000004        	  4258:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
02:00002878 60FE            	  4259:                 bra.s *
                            	  4260: 
                            	  4261: 
02:0000287A 4E75            	  4262: BCC14:          rts
                            	  4263: 
                            	  4264: 
                            	  4265: *-----------------------------------------------------------
                            	  4266: *-----------------------------------------------------------
                            	  4267: * OPCODE : DBCC
                            	  4268: *-----------------------------------------------------------
                            	  4269: *-----------------------------------------------------------
                            	  4270: 
02:0000287C 7003            	  4271: op_DBCC:        moveq  #$00000003,d0    * Loop counter
02:0000287E 7200            	  4272:                 moveq  #$00000000,d1    * Accumulator
02:00002880 44FC0000        	  4273:                 move #$00,CCR
                            	  4274: 
02:00002884 5201            	  4275: DBCC_LOOP1:     addi.b #$1,d1
02:00002886 51C8FFFC        	  4276:                 dbf d0,DBCC_LOOP1
                            	  4277: 
02:0000288A 0C8100000004    	  4278:                 cmpi.l #$00000004,d1  * Check Accumulator results
02:00002890 66FE            	  4279:                 bne.s *
                            	  4280: 
02:00002892 5201            	  4281: DBCC_LOOP2:     addi.b #$1,d1
02:00002894 54C8FFFC        	  4282:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4283: 
02:00002898 0C8100000005    	  4284:                 cmpi.l #$00000005,d1  * Check Accumulator results
02:0000289E 66FE            	  4285:                 bne.s *
                            	  4286: 
02:000028A0 4E75            	  4287:                 rts
                            	  4288: 
                            	  4289: 
                            	  4290: *-----------------------------------------------------------
                            	  4291: *-----------------------------------------------------------
                            	  4292: * OPCODE : SCC
                            	  4293: *-----------------------------------------------------------
                            	  4294: *-----------------------------------------------------------
                            	  4295: 
02:000028A2 44FC0001        	  4296: op_SCC:         move #$01,CCR
02:000028A6 54F900010000    	  4297:                 scc $00010000                   * Clear the EA byte
02:000028AC 4A3900010000    	  4298:                 cmpi.b #$00,$00010000
02:000028B2 66FE            	  4299:                 bne.s *
                            	  4300: 
02:000028B4 44FC0000        	  4301:                 move #$00,CCR
02:000028B8 54F900010000    	  4302:                 scc $00010000                   * Set the EA byte to 0xFF
02:000028BE 0C3900FF00010000	  4303:                 cmpi.b #$FF,$00010000
02:000028C6 66FE            	  4304:                 bne.s *
                            	  4305: 
02:000028C8 4E75            	  4306:                 rts
                            	  4307: 
                            	  4308: 
                            	  4309: 
                            	  4310: *-----------------------------------------------------------
                            	  4311: *-----------------------------------------------------------
                            	  4312: * OPCODE : ADDQ
                            	  4313: *-----------------------------------------------------------
                            	  4314: *-----------------------------------------------------------
                            	  4315: 
                            	  4316: op_ADDQ:
                            	  4317: 
                            	  4318: *     BYTE
02:000028CA 203C000000FF    	  4319:                 move.l #$000000FF,d0    * Loop counter
02:000028D0 7200            	  4320:                 moveq  #$00000000,d1    * Flag results accumulator
02:000028D2 7400            	  4321:                 moveq  #$00000000,d2    * Data results accumulator
02:000028D4 7600            	  4322:                 moveq  #$00000000,d3
02:000028D6 7800            	  4323:                 moveq  #$00000000,d4
02:000028D8 7A00            	  4324:                 moveq  #$00000000,d5
02:000028DA 7C00            	  4325:                 moveq  #$00000000,d6
02:000028DC 7E00            	  4326:                 moveq  #$00000000,d7
                            	  4327: 
02:000028DE 5605            	  4328: ADDQ_LOOP1:     addq.b #3,d5
02:000028E0 40C6            	  4329:                 move.w SR,d6
02:000028E2 02860000001F    	  4330:                 andi.l #$1F,d6        * Isolate flags
02:000028E8 D286            	  4331:                 add.l d6,d1           * Copy flag results into accumulator
02:000028EA D485            	  4332:                 add.l d5,d2           * Copy data results into data accumulator
02:000028EC 51C8FFF0        	  4333:                 dbf d0,ADDQ_LOOP1
                            	  4334: 
02:000028F0 0C810000043D    	  4335:                 cmpi.l #$0000043D,d1
02:000028F6 66FE            	  4336:                 bne.s *
02:000028F8 0C8200007F80    	  4337:                 cmpi.l #$00007F80,d2
02:000028FE 66FE            	  4338:                 bne.s *
                            	  4339: 
                            	  4340: 
                            	  4341: *     WORD
02:00002900 203C000000FF    	  4342:                 move.l #$000000FF,d0    * Loop counter
02:00002906 7200            	  4343:                 moveq  #$00000000,d1    * Flag results accumulator
02:00002908 7400            	  4344:                 moveq  #$00000000,d2    * Data results accumulator
02:0000290A 7600            	  4345:                 moveq  #$00000000,d3
02:0000290C 7800            	  4346:                 moveq  #$00000000,d4
02:0000290E 2A3C0000FFF0    	  4347:                 move.l #$0000FFF0,d5
02:00002914 7C00            	  4348:                 moveq  #$00000000,d6
02:00002916 7E00            	  4349:                 moveq  #$00000000,d7
02:00002918 307C0100        	  4350:                 move.l #$00000100,a0
                            	  4351: 
02:0000291C 5A45            	  4352: ADDQ_LOOP2:     addq.w #5,d5
02:0000291E 40C6            	  4353:                 move.w SR,d6
02:00002920 02860000001F    	  4354:                 andi.l #$1F,d6        * Isolate flags
02:00002926 D286            	  4355:                 add.l d6,d1           * Copy flag results into accumulator
02:00002928 D485            	  4356:                 add.l d5,d2           * Copy data results into data accumulator
02:0000292A 51C8FFF0        	  4357:                 dbf d0,ADDQ_LOOP2
                            	  4358: 
02:0000292E 0C8100000029    	  4359:                 cmpi.l #$00000029,d1
02:00002934 66FE            	  4360:                 bne.s *
02:00002936 0C8200057280    	  4361:                 cmpi.l #$00057280,d2
02:0000293C 66FE            	  4362:                 bne.s *
                            	  4363: 
                            	  4364: 
                            	  4365: *     LONG
02:0000293E 203C000000FF    	  4366:                 move.l #$000000FF,d0    * Loop counter
02:00002944 7200            	  4367:                 moveq  #$00000000,d1    * Flag results accumulator
02:00002946 7400            	  4368:                 moveq  #$00000000,d2    * Data results accumulator
02:00002948 7600            	  4369:                 moveq  #$00000000,d3
02:0000294A 7800            	  4370:                 moveq  #$00000000,d4
02:0000294C 7AF0            	  4371:                 move.l #$FFFFFFF0,d5
02:0000294E 7C00            	  4372:                 moveq  #$00000000,d6
02:00002950 7E00            	  4373:                 moveq  #$00000000,d7
                            	  4374: 
02:00002952 5285            	  4375: ADDQ_LOOP3:     addq.l #1,d5
02:00002954 40C6            	  4376:                 move.w SR,d6
02:00002956 02860000001F    	  4377:                 andi.l #$1F,d6        * Isolate flags
02:0000295C D286            	  4378:                 add.l d6,d1           * Copy flag results into accumulator
02:0000295E D485            	  4379:                 add.l d5,d2           * Copy data results into data accumulator
02:00002960 51C8FFF0        	  4380:                 dbf d0,ADDQ_LOOP3
                            	  4381: 
02:00002964 0C810000008D    	  4382:                 cmpi.l #$0000008D,d1
02:0000296A 66FE            	  4383:                 bne.s *
02:0000296C 0C8200007080    	  4384:                 cmpi.l #$00007080,d2
02:00002972 66FE            	  4385:                 bne.s *
                            	  4386: 
                            	  4387: *     Check that Flags are not updated for Address registers
02:00002974 207C0000FFFF    	  4388:                 move.l #$0000FFFF,a0
02:0000297A 44FC0000        	  4389:                 move #$00,CCR         * Clear flags
02:0000297E 5E48            	  4390:                 addq.w #$7,a0
02:00002980 65FE            	  4391:                 bcs.s *
                            	  4392: 
02:00002982 4E75            	  4393:                 rts
                            	  4394: 
                            	  4395: 
                            	  4396: 
                            	  4397: *-----------------------------------------------------------
                            	  4398: *-----------------------------------------------------------
                            	  4399: * OPCODE : SUBQ
                            	  4400: *-----------------------------------------------------------
                            	  4401: *-----------------------------------------------------------
                            	  4402: 
                            	  4403: op_SUBQ:
                            	  4404: 
                            	  4405: *     BYTE
02:00002984 203C000000FF    	  4406:                 move.l #$000000FF,d0    * Loop counter
02:0000298A 7200            	  4407:                 moveq  #$00000000,d1    * Flag results accumulator
02:0000298C 243C00001234    	  4408:                 move.l #$00001234,d2    * Data results accumulator
02:00002992 7600            	  4409:                 moveq  #$00000000,d3
02:00002994 7800            	  4410:                 moveq  #$00000000,d4
02:00002996 7A12            	  4411:                 moveq  #$00000012,d5
02:00002998 7C00            	  4412:                 moveq  #$00000000,d6
02:0000299A 7E00            	  4413:                 moveq  #$00000000,d7
                            	  4414: 
02:0000299C 5305            	  4415: SUBQ_LOOP1:     subq.b #1,d5
02:0000299E 40C6            	  4416:                 move.w SR,d6
02:000029A0 02860000001F    	  4417:                 andi.l #$1F,d6        * Isolate flags
02:000029A6 D286            	  4418:                 add.l d6,d1           * Copy flag results into accumulator
02:000029A8 D485            	  4419:                 add.l d5,d2           * Copy data results into data accumulator
02:000029AA 51C8FFF0        	  4420:                 dbf d0,SUBQ_LOOP1
                            	  4421: 
02:000029AE 0C8100000417    	  4422:                 cmpi.l #$00000417,d1
02:000029B4 66FE            	  4423:                 bne.s *
02:000029B6 0C82000091B4    	  4424:                 cmpi.l #$000091B4,d2
02:000029BC 66FE            	  4425:                 bne.s *
                            	  4426: 
                            	  4427: 
                            	  4428: *     WORD
02:000029BE 203C000000FF    	  4429:                 move.l #$000000FF,d0    * Loop counter
02:000029C4 7200            	  4430:                 moveq  #$00000000,d1    * Flag results accumulator
02:000029C6 7400            	  4431:                 moveq  #$00000000,d2    * Data results accumulator
02:000029C8 7600            	  4432:                 moveq  #$00000000,d3
02:000029CA 7800            	  4433:                 moveq  #$00000000,d4
02:000029CC 7A02            	  4434:                 moveq  #$00000002,d5
02:000029CE 7C00            	  4435:                 moveq  #$00000000,d6
02:000029D0 7E00            	  4436:                 moveq  #$00000000,d7
02:000029D2 307C0100        	  4437:                 move.l #$00000100,a0
                            	  4438: 
02:000029D6 5B45            	  4439: SUBQ_LOOP2:     subq.w #5,d5
02:000029D8 40C6            	  4440:                 move.w SR,d6
02:000029DA 02860000001F    	  4441:                 andi.l #$1F,d6        * Isolate flags
02:000029E0 D286            	  4442:                 add.l d6,d1           * Copy flag results into accumulator
02:000029E2 D485            	  4443:                 add.l d5,d2           * Copy data results into data accumulator
02:000029E4 51C8FFF0        	  4444:                 dbf d0,SUBQ_LOOP2
                            	  4445: 
02:000029E8 0C8100000811    	  4446:                 cmpi.l #$00000811,d1
02:000029EE 66FE            	  4447:                 bne.s *
02:000029F0 0C8200FD7F80    	  4448:                 cmpi.l #$00FD7F80,d2
02:000029F6 66FE            	  4449:                 bne.s *
                            	  4450: 
                            	  4451: 
                            	  4452: *     LONG
02:000029F8 203C000000FF    	  4453:                 move.l #$000000FF,d0    * Loop counter
02:000029FE 7200            	  4454:                 moveq  #$00000000,d1    * Flag results accumulator
02:00002A00 7400            	  4455:                 moveq  #$00000000,d2    * Data results accumulator
02:00002A02 7600            	  4456:                 moveq  #$00000000,d3
02:00002A04 7800            	  4457:                 moveq  #$00000000,d4
02:00002A06 7A07            	  4458:                 moveq  #$00000007,d5
02:00002A08 7C00            	  4459:                 moveq  #$00000000,d6
02:00002A0A 7E00            	  4460:                 moveq  #$00000000,d7
                            	  4461: 
02:00002A0C 5385            	  4462: SUBQ_LOOP3:     subq.l #1,d5
02:00002A0E 40C6            	  4463:                 move.w SR,d6
02:00002A10 02860000001F    	  4464:                 andi.l #$1F,d6        * Isolate flags
02:00002A16 D286            	  4465:                 add.l d6,d1           * Copy flag results into accumulator
02:00002A18 D485            	  4466:                 add.l d5,d2           * Copy data results into data accumulator
02:00002A1A 51C8FFF0        	  4467:                 dbf d0,SUBQ_LOOP3
                            	  4468: 
02:00002A1E 0C81000007DD    	  4469:                 cmpi.l #$000007DD,d1
02:00002A24 66FE            	  4470:                 bne.s *
02:00002A26 0C82FFFF8680    	  4471:                 cmpi.l #$FFFF8680,d2
02:00002A2C 66FE            	  4472:                 bne.s *
                            	  4473: 
                            	  4474: *     Check that Flags are not updated for Address registers
02:00002A2E 207C0001FFFF    	  4475:                 move.l #$0001FFFF,a0
02:00002A34 44FC0000        	  4476:                 move #$00,CCR         * Clear flags
02:00002A38 5F48            	  4477:                 subq.w #$7,a0
02:00002A3A 65FE            	  4478:                 bcs.s *
                            	  4479: 
02:00002A3C 4E75            	  4480:                 rts
                            	  4481: 
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: *-----------------------------------------------------------
                            	  4486: *-----------------------------------------------------------
                            	  4487: * OPCODE : MOVEQ
                            	  4488: *-----------------------------------------------------------
                            	  4489: *-----------------------------------------------------------
                            	  4490: 
                            	  4491: op_MOVEQ:
02:00002A3E 7000            	  4492:                 moveq  #$00000000,d0
02:00002A40 7000            	  4493:                 moveq #$0,d0
02:00002A42 66FE            	  4494:                 bne.s *
02:00002A44 4A80            	  4495:                 cmpi.l #$00000000,d0
02:00002A46 66FE            	  4496:                 bne.s *
                            	  4497: 
02:00002A48 7000            	  4498:                 moveq  #$00000000,d0
02:00002A4A 7080            	  4499:                 moveq #-128,d0
02:00002A4C 67FE            	  4500:                 beq.s *
02:00002A4E 6AFE            	  4501:                 bpl.s *
02:00002A50 0C80FFFFFF80    	  4502:                 cmpi.l #$FFFFFF80,d0
02:00002A56 66FE            	  4503:                 bne.s *
                            	  4504: 
                            	  4505: 
02:00002A58 4E75            	  4506:                 rts
                            	  4507: 
                            	  4508: 
                            	  4509: *-----------------------------------------------------------
                            	  4510: *-----------------------------------------------------------
                            	  4511: * OPCODE : DIVU
                            	  4512: *-----------------------------------------------------------
                            	  4513: *-----------------------------------------------------------
                            	  4514: 
                            	  4515: op_DIVU:
                            	  4516: 
02:00002A5A 203CA5A5A5A5    	  4517:                 move.l #$a5a5a5a5,d0        * Initial Numerator
02:00002A60 223C00005A5A    	  4518:                 move.l #$00005a5a,d1        * Initial Divisor
02:00002A66 243CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d2
02:00002A6C 7600            	  4520:                 moveq  #$00000000,d3
02:00002A6E 7800            	  4521:                 moveq  #$00000000,d4        * Cumulative data results
02:00002A70 7A00            	  4522:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002A72 7C0E            	  4523:                 move.l #$0000000E,d6       * Inner loop counter
02:00002A74 7E1E            	  4524:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4525: 
                            	  4526: 
02:00002A76 80C1            	  4527: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
02:00002A78 40C3            	  4528:                 move.w SR,d3
02:00002A7A 02830000000C    	  4529:                 andi.l #$0C,d3            * Isolate flags
02:00002A80 DA83            	  4530:                 add.l d3,d5               * Copy flag results into accumulator
02:00002A82 D880            	  4531:                 add.l d0,d4               * Copy data results into data accumulator
02:00002A84 E289            	  4532:                 lsr.l #$1,d1
                            	  4533: 
02:00002A86 51CEFFEE        	  4534:                 dbf d6,DIVU_OUTER1
02:00002A8A E28A            	  4535:                 lsr.l #$1,d2
02:00002A8C 2002            	  4536:                 move.l d2,d0
02:00002A8E 223C00005A5A    	  4537:                 move.l #$00005a5a,d1       * Initial Divisor
02:00002A94 7C0E            	  4538:                 move.l #$0000000E,d6       * Inner loop counter
02:00002A96 51CFFFDE        	  4539:                 dbf d7,DIVU_OUTER1
                            	  4540: 
02:00002A9A 0C8492FEDB89    	  4541:                 cmpi.l #$92FEDB89,d4      * Check the data results
02:00002AA0 66FE            	  4542:                 bne.s *
                            	  4543: 
02:00002AA2 0C8500000110    	  4544:                 cmpi.l #$00000110,d5      * Check the Flag results
02:00002AA8 66FE            	  4545:                 bne.s *
                            	  4546: 
                            	  4547: 
02:00002AAA 4E75            	  4548:                 rts
                            	  4549: 
                            	  4550: 
                            	  4551: 
                            	  4552: *-----------------------------------------------------------
                            	  4553: *-----------------------------------------------------------
                            	  4554: * OPCODE : DIVS
                            	  4555: *-----------------------------------------------------------
                            	  4556: *-----------------------------------------------------------
                            	  4557: 
                            	  4558: op_DIVS:
                            	  4559: 
02:00002AAC 203CA5A5A5A5    	  4560:                 move.l #$a5a5a5a5,d0        * Initial Numerator
02:00002AB2 223C00005A5A    	  4561:                 move.l #$00005a5a,d1        * Initial Divisor
02:00002AB8 243CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d2
02:00002ABE 7600            	  4563:                 moveq  #$00000000,d3
02:00002AC0 7800            	  4564:                 moveq  #$00000000,d4        * Cumulative data results
02:00002AC2 7A00            	  4565:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002AC4 7C0E            	  4566:                 move.l #$0000000E,d6       * Inner loop counter
02:00002AC6 7E1E            	  4567:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4568: 
                            	  4569: 
02:00002AC8 81C1            	  4570: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
02:00002ACA 40C3            	  4571:                 move.w SR,d3
02:00002ACC 02830000000C    	  4572:                 andi.l #$0C,d3            * Isolate flags
02:00002AD2 DA83            	  4573:                 add.l d3,d5               * Copy flag results into accumulator
02:00002AD4 D880            	  4574:                 add.l d0,d4               * Copy data results into data accumulator
02:00002AD6 E289            	  4575:                 lsr.l #$1,d1
                            	  4576: 
02:00002AD8 51CEFFEE        	  4577:                 dbf d6,DIVS_OUTER1
02:00002ADC E28A            	  4578:                 lsr.l #$1,d2
02:00002ADE 2002            	  4579:                 move.l d2,d0
02:00002AE0 223C00005A5A    	  4580:                 move.l #$00005a5a,d1       * Initial Divisor
02:00002AE6 7C0E            	  4581:                 move.l #$0000000E,d6       * Inner loop counter
02:00002AE8 51CFFFDE        	  4582:                 dbf d7,DIVS_OUTER1
                            	  4583: 
02:00002AEC 0C844EC5D057    	  4584:                 cmpi.l #$4EC5D057,d4      * Check the data results
02:00002AF2 66FE            	  4585:                 bne.s *
                            	  4586: 
02:00002AF4 0C8500000038    	  4587:                 cmpi.l #$00000038,d5      * Check the Flag results
02:00002AFA 66FE            	  4588:                 bne.s *
                            	  4589: 
                            	  4590: 
02:00002AFC 4E75            	  4591:                 rts
                            	  4592: 
                            	  4593: 
                            	  4594: 
                            	  4595: *-----------------------------------------------------------
                            	  4596: *-----------------------------------------------------------
                            	  4597: * OPCODE : OR
                            	  4598: *-----------------------------------------------------------
                            	  4599: *-----------------------------------------------------------
                            	  4600: 
                            	  4601: op_OR:
                            	  4602: 
                            	  4603: *  * <EA> to Register
                            	  4604: 
02:00002AFE 203CA5A5A5A5    	  4605:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002B04 223C8167E123    	  4606:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002B0A 243CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d2
02:00002B10 7600            	  4608:                 moveq  #$00000000,d3
02:00002B12 7800            	  4609:                 moveq  #$00000000,d4       * Cumulative data results
02:00002B14 7A00            	  4610:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002B16 7C1E            	  4611:                 move.l #$0000001E,d6       * Inner loop counter
02:00002B18 7E1E            	  4612:                 move.l #$0000001E,d7       * Outer loop counter
02:00002B1A 307C0100        	  4613:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4614: 
                            	  4615: 
                            	  4616: OR_OUTER1:
                            	  4617: 
                            	  4618: *     BYTE
02:00002B1E 2081            	  4619:                 move.l d1,(a0)
02:00002B20 8010            	  4620:                 or.b (a0),d0
02:00002B22 40C3            	  4621:                 move.w SR,d3
02:00002B24 02830000000C    	  4622:                 andi.l #$0C,d3            * Isolate flags
02:00002B2A DA83            	  4623:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B2C D880            	  4624:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4625: 
                            	  4626: *     WORD
02:00002B2E 2081            	  4627:                 move.l d1,(a0)
02:00002B30 8050            	  4628:                 or.w (a0),d0
02:00002B32 40C3            	  4629:                 move.w SR,d3
02:00002B34 02830000000C    	  4630:                 andi.l #$0C,d3            * Isolate flags
02:00002B3A DA83            	  4631:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B3C D880            	  4632:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4633: 
                            	  4634: *     LONG
02:00002B3E 2081            	  4635:                 move.l d1,(a0)
02:00002B40 8090            	  4636:                 or.l (a0),d0
02:00002B42 40C3            	  4637:                 move.w SR,d3
02:00002B44 02830000000F    	  4638:                 andi.l #$0F,d3            * Isolate flags
02:00002B4A DA83            	  4639:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B4C D880            	  4640:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4641: 
                            	  4642: 
02:00002B4E E289            	  4643:                 lsr.l #$1,d1
02:00002B50 51CEFFCC        	  4644:                 dbf d6,OR_OUTER1
02:00002B54 E28A            	  4645:                 lsr.l #$1,d2
02:00002B56 223C8167E123    	  4646:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002B5C 7C1E            	  4647:                 move.l #$0000001E,d6       * Inner loop counter
02:00002B5E 51CFFFBE        	  4648:                 dbf d7,OR_OUTER1
                            	  4649: 
02:00002B62 0C8476EAC803    	  4650:                 cmpi.l #$76EAC803,d4      * Check the data results
02:00002B68 66FE            	  4651:                 bne.s *
02:00002B6A 0C8500005A18    	  4652:                 cmpi.l #$00005A18,d5      * Check the Flag results
02:00002B70 66FE            	  4653:                 bne.s *
                            	  4654: 
                            	  4655: 
                            	  4656: *  * Register to <EA>
                            	  4657: 
02:00002B72 203C86738374    	  4658:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002B78 223CFC55F2FE    	  4659:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002B7E 243C86738374    	  4660:                 move.l #$86738374,d2
02:00002B84 7600            	  4661:                 moveq  #$00000000,d3
02:00002B86 7800            	  4662:                 moveq  #$00000000,d4       * Cumulative data results
02:00002B88 7A00            	  4663:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002B8A 7C1E            	  4664:                 move.l #$0000001E,d6       * Inner loop counter
02:00002B8C 7E1D            	  4665:                 move.l #$0000001D,d7       * Outer loop counter
02:00002B8E 307C0100        	  4666:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4667: 
                            	  4668: 
                            	  4669: OR_OUTER2:
                            	  4670: 
                            	  4671: *     BYTE
02:00002B92 2080            	  4672:                 move.l d0,(a0)
02:00002B94 8310            	  4673:                 or.b d1,(a0)
02:00002B96 40C3            	  4674:                 move.w SR,d3
02:00002B98 02830000000C    	  4675:                 andi.l #$0C,d3            * Isolate flags
02:00002B9E DA83            	  4676:                 add.l d3,d5               * Copy flag results into accumulator
02:00002BA0 D890            	  4677:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4678: 
                            	  4679: *     WORD
02:00002BA2 2080            	  4680:                 move.l d0,(a0)
02:00002BA4 8350            	  4681:                 or.w d1,(a0)
02:00002BA6 40C3            	  4682:                 move.w SR,d3
02:00002BA8 02830000000C    	  4683:                 andi.l #$0C,d3            * Isolate flags
02:00002BAE DA83            	  4684:                 add.l d3,d5               * Copy flag results into accumulator
02:00002BB0 D890            	  4685:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4686: 
                            	  4687: *     LONG
02:00002BB2 2080            	  4688:                 move.l d0,(a0)
02:00002BB4 8390            	  4689:                 or.l d1,(a0)
02:00002BB6 40C3            	  4690:                 move.w SR,d3
02:00002BB8 02830000000F    	  4691:                 andi.l #$0F,d3            * Isolate flags
02:00002BBE DA83            	  4692:                 add.l d3,d5               * Copy flag results into accumulator
02:00002BC0 D890            	  4693:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4694: 
                            	  4695: 
02:00002BC2 E289            	  4696:                 lsr.l #$1,d1
02:00002BC4 51CEFFCC        	  4697:                 dbf d6,OR_OUTER2
02:00002BC8 E28A            	  4698:                 lsr.l #$1,d2
02:00002BCA 223C8167E123    	  4699:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002BD0 7C1E            	  4700:                 move.l #$0000001E,d6       * Inner loop counter
02:00002BD2 51CFFFBE        	  4701:                 dbf d7,OR_OUTER2
                            	  4702: 
02:00002BD6 0C84FA82B9E4    	  4703:                 cmpi.l #$FA82B9E4,d4      * Check the data results
02:00002BDC 66FE            	  4704:                 bne.s *
02:00002BDE 0C8500005730    	  4705:                 cmpi.l #$00005730,d5      * Check the Flag results
02:00002BE4 66FE            	  4706:                 bne.s *
                            	  4707: 
                            	  4708: 
02:00002BE6 4E75            	  4709:                 rts
                            	  4710: 
                            	  4711: 
                            	  4712: 
                            	  4713: *-----------------------------------------------------------
                            	  4714: *-----------------------------------------------------------
                            	  4715: * OPCODE : AND
                            	  4716: *-----------------------------------------------------------
                            	  4717: *-----------------------------------------------------------
                            	  4718: 
                            	  4719: op_AND:
                            	  4720: 
                            	  4721: *  * <EA> to Register
                            	  4722: 
02:00002BE8 203CA5A5A5A5    	  4723:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002BEE 223C8167E123    	  4724:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002BF4 243CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d2
02:00002BFA 7600            	  4726:                 moveq  #$00000000,d3
02:00002BFC 7800            	  4727:                 moveq  #$00000000,d4       * Cumulative data results
02:00002BFE 7A00            	  4728:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002C00 7C1E            	  4729:                 move.l #$0000001E,d6       * Inner loop counter
02:00002C02 7E1E            	  4730:                 move.l #$0000001E,d7       * Outer loop counter
02:00002C04 307C0100        	  4731:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4732: 
                            	  4733: 
                            	  4734: AND_OUTER1:
                            	  4735: 
                            	  4736: *     BYTE
02:00002C08 2081            	  4737:                 move.l d1,(a0)
02:00002C0A C010            	  4738:                 and.b (a0),d0
02:00002C0C 40C3            	  4739:                 move.w sr,d3
02:00002C0E 02830000000C    	  4740:                 andi.l #$0C,d3            * Isolate flags
02:00002C14 DA83            	  4741:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C16 D880            	  4742:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4743: 
                            	  4744: *     WORD
02:00002C18 2081            	  4745:                 move.l d1,(a0)
02:00002C1A C050            	  4746:                 and.w (a0),d0
02:00002C1C 40C3            	  4747:                 move.w sr,d3
02:00002C1E 02830000000C    	  4748:                 andi.l #$0C,d3            * Isolate flags
02:00002C24 DA83            	  4749:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C26 D880            	  4750:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4751: 
                            	  4752: *     LONG
02:00002C28 2081            	  4753:                 move.l d1,(a0)
02:00002C2A C090            	  4754:                 and.l (a0),d0
02:00002C2C 40C3            	  4755:                 move.w sr,d3
02:00002C2E 02830000000F    	  4756:                 andi.l #$0F,d3            * Isolate flags
02:00002C34 DA83            	  4757:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C36 D880            	  4758:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4759: 
                            	  4760: 
02:00002C38 E289            	  4761:                 lsr.l #$1,d1
02:00002C3A 51CEFFCC        	  4762:                 dbf d6,AND_OUTER1
02:00002C3E E28A            	  4763:                 lsr.l #$1,d2
02:00002C40 223C8167E123    	  4764:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002C46 7C1E            	  4765:                 move.l #$0000001E,d6       * Inner loop counter
02:00002C48 51CFFFBE        	  4766:                 dbf d7,AND_OUTER1
                            	  4767: 
02:00002C4C 0C84CF212883    	  4768:                 cmpi.l #$CF212883,d4      * Check the data results
02:00002C52 66FE            	  4769:                 bne.s *
02:00002C54 0C8500002D10    	  4770:                 cmpi.l #$00002D10,d5      * Check the Flag results
02:00002C5A 66FE            	  4771:                 bne.s *
                            	  4772: 
                            	  4773: 
                            	  4774: *  * Register to <EA>
                            	  4775: 
02:00002C5C 203C86738374    	  4776:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002C62 223CFC55F2FE    	  4777:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002C68 243C86738374    	  4778:                 move.l #$86738374,d2
02:00002C6E 7600            	  4779:                 moveq  #$00000000,d3
02:00002C70 7800            	  4780:                 moveq  #$00000000,d4       * Cumulative data results
02:00002C72 7A00            	  4781:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002C74 7C1E            	  4782:                 move.l #$0000001E,d6       * Inner loop counter
02:00002C76 7E1D            	  4783:                 move.l #$0000001D,d7       * Outer loop counter
02:00002C78 307C0100        	  4784:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4785: 
                            	  4786: 
                            	  4787: AND_OUTER2:
                            	  4788: 
                            	  4789: *     BYTE
02:00002C7C 2080            	  4790:                 move.l d0,(a0)
02:00002C7E C310            	  4791:                 and.b d1,(a0)
02:00002C80 40C3            	  4792:                 move.w sr,d3
02:00002C82 02830000000C    	  4793:                 andi.l #$0C,d3            * Isolate flags
02:00002C88 DA83            	  4794:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C8A D890            	  4795:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4796: 
                            	  4797: *     WORD
02:00002C8C 2080            	  4798:                 move.l d0,(a0)
02:00002C8E C350            	  4799:                 and.w d1,(a0)
02:00002C90 40C3            	  4800:                 move.w sr,d3
02:00002C92 02830000000C    	  4801:                 andi.l #$0C,d3            * Isolate flags
02:00002C98 DA83            	  4802:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C9A D890            	  4803:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4804: 
                            	  4805: *     LONG
02:00002C9C 2080            	  4806:                 move.l d0,(a0)
02:00002C9E C390            	  4807:                 and.l d1,(a0)
02:00002CA0 40C3            	  4808:                 move.w sr,d3
02:00002CA2 02830000000F    	  4809:                 andi.l #$0F,d3            * Isolate flags
02:00002CA8 DA83            	  4810:                 add.l d3,d5               * Copy flag results into accumulator
02:00002CAA D890            	  4811:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4812: 
                            	  4813: 
02:00002CAC E289            	  4814:                 lsr.l #$1,d1
02:00002CAE 51CEFFCC        	  4815:                 dbf d6,AND_OUTER2
02:00002CB2 E28A            	  4816:                 lsr.l #$1,d2
02:00002CB4 223C8167E123    	  4817:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002CBA 7C1E            	  4818:                 move.l #$0000001E,d6       * Inner loop counter
02:00002CBC 51CFFFBE        	  4819:                 dbf d7,AND_OUTER2
                            	  4820: 
02:00002CC0 0C844A3DE544    	  4821:                 cmpi.l #$4A3DE544,d4      * Check the data results
02:00002CC6 66FE            	  4822:                 bne.s *
02:00002CC8 0C85000018E8    	  4823:                 cmpi.l #$000018E8,d5      * Check the Flag results
02:00002CCE 66FE            	  4824:                 bne.s *
                            	  4825: 
                            	  4826: 
02:00002CD0 4E75            	  4827:                 rts
                            	  4828: 
                            	  4829: 
                            	  4830: 
                            	  4831: *-----------------------------------------------------------
                            	  4832: *-----------------------------------------------------------
                            	  4833: * OPCODE : EOR
                            	  4834: *-----------------------------------------------------------
                            	  4835: *-----------------------------------------------------------
                            	  4836: 
                            	  4837: op_EOR:
                            	  4838: 
                            	  4839: *  * Register to <EA>
                            	  4840: 
02:00002CD2 203C86738374    	  4841:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002CD8 223CFC55F2FE    	  4842:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002CDE 243C86738374    	  4843:                 move.l #$86738374,d2
02:00002CE4 7600            	  4844:                 moveq  #$00000000,d3
02:00002CE6 7800            	  4845:                 moveq  #$00000000,d4       * Cumulative data results
02:00002CE8 7A00            	  4846:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002CEA 7C1E            	  4847:                 move.l #$0000001E,d6       * Inner loop counter
02:00002CEC 7E1D            	  4848:                 move.l #$0000001D,d7       * Outer loop counter
02:00002CEE 307C0100        	  4849:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4850: 
                            	  4851: 
                            	  4852: EOR_OUTER2:
                            	  4853: 
                            	  4854: *     BYTE
02:00002CF2 2080            	  4855:                 move.l d0,(a0)
02:00002CF4 B310            	  4856:                 eor.b d1,(a0)
02:00002CF6 40C3            	  4857:                 move.w sr,d3
02:00002CF8 02830000000C    	  4858:                 andi.l #$0C,d3            * Isolate flags
02:00002CFE DA83            	  4859:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D00 D890            	  4860:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4861: 
                            	  4862: *     WORD
02:00002D02 2080            	  4863:                 move.l d0,(a0)
02:00002D04 B350            	  4864:                 eor.w d1,(a0)
02:00002D06 40C3            	  4865:                 move.w sr,d3
02:00002D08 02830000000C    	  4866:                 andi.l #$0C,d3            * Isolate flags
02:00002D0E DA83            	  4867:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D10 D890            	  4868:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4869: 
                            	  4870: *     LONG
02:00002D12 2080            	  4871:                 move.l d0,(a0)
02:00002D14 B390            	  4872:                 eor.l d1,(a0)
02:00002D16 40C3            	  4873:                 move.w sr,d3
02:00002D18 02830000000F    	  4874:                 andi.l #$0F,d3            * Isolate flags
02:00002D1E DA83            	  4875:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D20 D890            	  4876:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4877: 
                            	  4878: 
02:00002D22 E289            	  4879:                 lsr.l #$1,d1
02:00002D24 51CEFFCC        	  4880:                 dbf d6,EOR_OUTER2
02:00002D28 E28A            	  4881:                 lsr.l #$1,d2
02:00002D2A 223C8167E123    	  4882:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002D30 7C1E            	  4883:                 move.l #$0000001E,d6       * Inner loop counter
02:00002D32 51CFFFBE        	  4884:                 dbf d7,EOR_OUTER2
                            	  4885: 
02:00002D36 0C8455C5EB70    	  4886:                 cmpi.l #$55C5EB70,d4      * Check the data results
02:00002D3C 66FE            	  4887:                 bne.s *
02:00002D3E 0C8500004430    	  4888:                 cmpi.l #$00004430,d5      * Check the Flag results
02:00002D44 66FE            	  4889:                 bne.s *
                            	  4890: 
                            	  4891: 
02:00002D46 4E75            	  4892:                 rts
                            	  4893: 
                            	  4894: 
                            	  4895: *-----------------------------------------------------------
                            	  4896: *-----------------------------------------------------------
                            	  4897: * OPCODE : CMP
                            	  4898: *-----------------------------------------------------------
                            	  4899: *-----------------------------------------------------------
                            	  4900: 
                            	  4901: op_CMP:
                            	  4902: 
                            	  4903: 
                            	  4904: *  * <EA> to Register
                            	  4905: 
02:00002D48 203CA5A5A5A5    	  4906:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002D4E 223C8167E123    	  4907:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002D54 243CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d2
02:00002D5A 7600            	  4909:                 moveq  #$00000000,d3
02:00002D5C 7800            	  4910:                 moveq  #$00000000,d4       * Cumulative data results
02:00002D5E 7A00            	  4911:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002D60 7C1E            	  4912:                 move.l #$0000001E,d6       * Inner loop counter
02:00002D62 7E1E            	  4913:                 move.l #$0000001E,d7       * Outer loop counter
02:00002D64 307C0100        	  4914:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4915: 
                            	  4916: 
                            	  4917: CMP_OUTER1:
                            	  4918: 
                            	  4919: *     BYTE
02:00002D68 2081            	  4920:                 move.l d1,(a0)
02:00002D6A B010            	  4921:                 cmp.b (a0),d0
02:00002D6C 40C3            	  4922:                 move.w sr,d3
02:00002D6E 02830000000F    	  4923:                 andi.l #$0F,d3            * Isolate flags
02:00002D74 DA83            	  4924:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D76 D880            	  4925:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4926: 
                            	  4927: *     WORD
02:00002D78 2081            	  4928:                 move.l d1,(a0)
02:00002D7A B050            	  4929:                 cmp.w (a0),d0
02:00002D7C 40C3            	  4930:                 move.w sr,d3
02:00002D7E 02830000000F    	  4931:                 andi.l #$0F,d3            * Isolate flags
02:00002D84 DA83            	  4932:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D86 D880            	  4933:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4934: 
                            	  4935: *     LONG
02:00002D88 2081            	  4936:                 move.l d1,(a0)
02:00002D8A B090            	  4937:                 cmp.l (a0),d0
02:00002D8C 40C3            	  4938:                 move.w sr,d3
02:00002D8E 02830000000F    	  4939:                 andi.l #$0F,d3            * Isolate flags
02:00002D94 DA83            	  4940:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D96 D880            	  4941:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4942: 
                            	  4943: 
02:00002D98 E289            	  4944:                 lsr.l #$1,d1
02:00002D9A 51CEFFCC        	  4945:                 dbf d6,CMP_OUTER1
02:00002D9E E28A            	  4946:                 lsr.l #$1,d2
02:00002DA0 223C8167E123    	  4947:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002DA6 7C1E            	  4948:                 move.l #$0000001E,d6       * Inner loop counter
02:00002DA8 51CFFFBE        	  4949:                 dbf d7,CMP_OUTER1
                            	  4950: 
02:00002DAC 0C847878712F    	  4951:                 cmpi.l #$7878712F,d4      * Check the data results
02:00002DB2 66FE            	  4952:                 bne.s *
02:00002DB4 0C8500005502    	  4953:                 cmpi.l #$00005502,d5      * Check the Flag results
02:00002DBA 66FE            	  4954:                 bne.s *
                            	  4955: 
                            	  4956: 
                            	  4957: 
02:00002DBC 4E75            	  4958:                 rts
                            	  4959: 
                            	  4960: 
                            	  4961: *-----------------------------------------------------------
                            	  4962: *-----------------------------------------------------------
                            	  4963: * OPCODE : CMPA
                            	  4964: *-----------------------------------------------------------
                            	  4965: *-----------------------------------------------------------
                            	  4966: 
                            	  4967: op_CMPA:
                            	  4968: 
                            	  4969: 
                            	  4970: *  * <EA> to Register
                            	  4971: 
02:00002DBE 207CA5A5A5A5    	  4972:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
02:00002DC4 223C8167E123    	  4973:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002DCA 243CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,d2
02:00002DD0 7600            	  4975:                 moveq  #$00000000,d3
02:00002DD2 7800            	  4976:                 moveq  #$00000000,d4       * Cumulative data results
02:00002DD4 7A00            	  4977:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002DD6 7C1E            	  4978:                 move.l #$0000001E,d6       * Inner loop counter
02:00002DD8 7E1E            	  4979:                 move.l #$0000001E,d7       * Outer loop counter
02:00002DDA 327C0100        	  4980:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4981: 
                            	  4982: 
                            	  4983: CMPA_OUTER1:
                            	  4984: 
                            	  4985: 
                            	  4986: *     WORD
02:00002DDE 2281            	  4987:                 move.l d1,(a1)
02:00002DE0 B0D1            	  4988:                 cmpa.w (a1),a0
02:00002DE2 40C3            	  4989:                 move.w sr,d3
02:00002DE4 02830000000F    	  4990:                 andi.l #$0F,d3            * Isolate flags
02:00002DEA DA83            	  4991:                 add.l d3,d5               * Copy flag results into accumulator
02:00002DEC D888            	  4992:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4993: 
                            	  4994: *     LONG
02:00002DEE 2281            	  4995:                 move.l d1,(a1)
02:00002DF0 B1D1            	  4996:                 cmpa.l (a1),a0
02:00002DF2 40C3            	  4997:                 move.w sr,d3
02:00002DF4 02830000000F    	  4998:                 andi.l #$0F,d3            * Isolate flags
02:00002DFA DA83            	  4999:                 add.l d3,d5               * Copy flag results into accumulator
02:00002DFC D888            	  5000:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5001: 
                            	  5002: 
02:00002DFE E289            	  5003:                 lsr.l #$1,d1
02:00002E00 51CEFFDC        	  5004:                 dbf d6,CMPA_OUTER1
02:00002E04 E28A            	  5005:                 lsr.l #$1,d2
02:00002E06 223C8167E123    	  5006:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002E0C 7C1E            	  5007:                 move.l #$0000001E,d6       * Inner loop counter
02:00002E0E 51CFFFCE        	  5008:                 dbf d7,CMPA_OUTER1
                            	  5009: 
02:00002E12 0C84A5A5A0CA    	  5010:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
02:00002E18 66FE            	  5011:                 bne.s *
02:00002E1A 0C8500003A7D    	  5012:                 cmpi.l #$00003A7D,d5      * Check the Flag results
02:00002E20 66FE            	  5013:                 bne.s *
                            	  5014: 
                            	  5015: 
02:00002E22 4E75            	  5016:                 rts
                            	  5017: 
                            	  5018: 
                            	  5019: 
                            	  5020: *-----------------------------------------------------------
                            	  5021: *-----------------------------------------------------------
                            	  5022: * OPCODE : CMPM
                            	  5023: *-----------------------------------------------------------
                            	  5024: *-----------------------------------------------------------
                            	  5025: 
                            	  5026: op_CMPM:
                            	  5027: 
02:00002E24 307C0100        	  5028:                 move.l #$00000100,a0       * Address for Data-X
02:00002E28 327C0200        	  5029:                 move.l #$00000200,a1       * Address for Data-Y
02:00002E2C 7000            	  5030:                 moveq  #$00000000,d0
02:00002E2E 7200            	  5031:                 moveq  #$00000000,d1
02:00002E30 7400            	  5032:                 moveq  #$00000000,d2
                            	  5033: 
02:00002E32 20FC11FF5580    	  5034:                 move.l #$11FF5580,(a0)+   * Populate test data
02:00002E38 20FC1111FFFF    	  5035:                 move.l #$1111FFFF,(a0)+   * Populate test data
02:00002E3E 20FC33333333    	  5036:                 move.l #$33333333,(a0)+   * Populate test data
02:00002E44 20FC44444444    	  5037:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5038: 
02:00002E4A 22FC80FF337F    	  5039:                 move.l #$80FF337F,(a1)+   * Populate test data
02:00002E50 22FCFFFF1111    	  5040:                 move.l #$FFFF1111,(a1)+   * Populate test data
02:00002E56 22FC33333333    	  5041:                 move.l #$33333333,(a1)+   * Populate test data
02:00002E5C 22FC44444444    	  5042:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5043: 
02:00002E62 307C0100        	  5044:                 move.l #$00000100,a0       * Address for Data-X
02:00002E66 327C0200        	  5045:                 move.l #$00000200,a1       * Address for Data-Y
02:00002E6A 7C0F            	  5046:                 move.l #$0000000F,d6       * Loop counter
                            	  5047: 
02:00002E6C B308            	  5048: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
02:00002E6E 40C3            	  5049:                 move.w sr,d3
02:00002E70 02830000000F    	  5050:                 andi.l #$0F,d3            * Isolate flags
02:00002E76 D083            	  5051:                 add.l d3,d0               * Copy flag results into accumulator
02:00002E78 51CEFFF2        	  5052:                 dbf d6,CMPM_LOOP1
                            	  5053: 
                            	  5054: 
02:00002E7C 307C0100        	  5055:                 move.l #$00000100,a0       * Address for Data-X
02:00002E80 327C0200        	  5056:                 move.l #$00000200,a1       * Address for Data-Y
02:00002E84 7C07            	  5057:                 moveq  #$00000007,d6       * Loop counter
                            	  5058: 
02:00002E86 B348            	  5059: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
02:00002E88 40C3            	  5060:                 move.w sr,d3
02:00002E8A 02830000000F    	  5061:                 andi.l #$0F,d3            * Isolate flags
02:00002E90 D283            	  5062:                 add.l d3,d1               * Copy flag results into accumulator
02:00002E92 51CEFFF2        	  5063:                 dbf d6,CMPM_LOOP2
                            	  5064: 
                            	  5065: 
02:00002E96 307C0100        	  5066:                 move.l #$00000100,a0       * Address for Data-X
02:00002E9A 327C0200        	  5067:                 move.l #$00000200,a1       * Address for Data-Y
02:00002E9E 7C03            	  5068:                 moveq  #$00000003,d6       * Loop counter
                            	  5069: 
02:00002EA0 B388            	  5070: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
02:00002EA2 40C3            	  5071:                 move.w sr,d3
02:00002EA4 02830000000F    	  5072:                 andi.l #$0F,d3            * Isolate flags
02:00002EAA D483            	  5073:                 add.l d3,d2               * Copy flag results into accumulator
02:00002EAC 51CEFFF2        	  5074:                 dbf d6,CMPM_LOOP3
                            	  5075: 
                            	  5076: 
02:00002EB0 0C800000004C    	  5077:                 cmpi.l #$0000004C,d0      * Check the data results
02:00002EB6 66FE            	  5078:                 bne.s *
02:00002EB8 0C8100000024    	  5079:                 cmpi.l #$00000024,d1
02:00002EBE 66FE            	  5080:                 bne.s *
02:00002EC0 0C8200000012    	  5081:                 cmpi.l #$00000012,d2
02:00002EC6 66FE            	  5082:                 bne.s *
                            	  5083: 
02:00002EC8 4E75            	  5084:                 rts
                            	  5085: 
                            	  5086: 
                            	  5087: *-----------------------------------------------------------
                            	  5088: *-----------------------------------------------------------
                            	  5089: * OPCODE : ADD
                            	  5090: *-----------------------------------------------------------
                            	  5091: *-----------------------------------------------------------
                            	  5092: 
                            	  5093: op_ADD:
                            	  5094: 
                            	  5095: 
                            	  5096: *  * <EA> to Register
02:00002ECA 203CA5A5A5A5    	  5097:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002ED0 223C8167E123    	  5098:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002ED6 243CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d2
02:00002EDC 7600            	  5100:                 moveq  #$00000000,d3
02:00002EDE 7800            	  5101:                 moveq  #$00000000,d4       * Cumulative data results
02:00002EE0 7A00            	  5102:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002EE2 7C1E            	  5103:                 move.l #$0000001E,d6       * Inner loop counter
02:00002EE4 7E1E            	  5104:                 move.l #$0000001E,d7       * Outer loop counter
02:00002EE6 307C0100        	  5105:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5106: 
                            	  5107: 
                            	  5108: ADD_OUTER1:
                            	  5109: 
                            	  5110: *     BYTE
02:00002EEA 2081            	  5111:                 move.l d1,(a0)
02:00002EEC D010            	  5112:                 add.b (a0),d0
02:00002EEE 40C3            	  5113:                 move.w sr,d3
02:00002EF0 02830000001F    	  5114:                 andi.l #$1F,d3            * Isolate flags
02:00002EF6 DA83            	  5115:                 add.l d3,d5               * Copy flag results into accumulator
02:00002EF8 D880            	  5116:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5117: 
                            	  5118: *     WORD
02:00002EFA 2081            	  5119:                 move.l d1,(a0)
02:00002EFC D050            	  5120:                 add.w (a0),d0
02:00002EFE 40C3            	  5121:                 move.w sr,d3
02:00002F00 02830000000C    	  5122:                 andi.l #$0C,d3            * Isolate flags
02:00002F06 DA83            	  5123:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F08 D880            	  5124:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5125: 
                            	  5126: *     LONG
02:00002F0A 2081            	  5127:                 move.l d1,(a0)
02:00002F0C D090            	  5128:                 add.l (a0),d0
02:00002F0E 40C3            	  5129:                 move.w sr,d3
02:00002F10 02830000000F    	  5130:                 andi.l #$0F,d3            * Isolate flags
02:00002F16 DA83            	  5131:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F18 D880            	  5132:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5133: 
                            	  5134: 
02:00002F1A E299            	  5135:                 ror.l #$1,d1
02:00002F1C 51CEFFCC        	  5136:                 dbf d6,ADD_OUTER1
02:00002F20 E29A            	  5137:                 ror.l #$1,d2
02:00002F22 223C8167E123    	  5138:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002F28 7C1E            	  5139:                 move.l #$0000001E,d6       * Inner loop counter
02:00002F2A 51CFFFBE        	  5140:                 dbf d7,ADD_OUTER1
                            	  5141: 
02:00002F2E 0C8423ED428F    	  5142:                 cmpi.l #$23ED428F,d4      * Check the data results
02:00002F34 66FE            	  5143:                 bne.s *
02:00002F36 0C8500004C96    	  5144:                 cmpi.l #$00004C96,d5      * Check the Flag results
02:00002F3C 66FE            	  5145:                 bne.s *
                            	  5146: 
                            	  5147: 
                            	  5148: *  * Register to <EA>
02:00002F3E 203C86738374    	  5149:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002F44 223CFC55F2FE    	  5150:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002F4A 243C86738374    	  5151:                 move.l #$86738374,d2
02:00002F50 7600            	  5152:                 moveq  #$00000000,d3
02:00002F52 7800            	  5153:                 moveq  #$00000000,d4       * Cumulative data results
02:00002F54 7A00            	  5154:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002F56 7C1E            	  5155:                 move.l #$0000001E,d6       * Inner loop counter
02:00002F58 7E1D            	  5156:                 move.l #$0000001D,d7       * Outer loop counter
02:00002F5A 307C0100        	  5157:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5158: 
                            	  5159: 
                            	  5160: ADD_OUTER2:
                            	  5161: 
                            	  5162: *     BYTE
02:00002F5E 2080            	  5163:                 move.l d0,(a0)
02:00002F60 D310            	  5164:                 add.b d1,(a0)
02:00002F62 40C3            	  5165:                 move.w sr,d3
02:00002F64 02830000000C    	  5166:                 andi.l #$0C,d3            * Isolate flags
02:00002F6A DA83            	  5167:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F6C D890            	  5168:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5169: 
                            	  5170: *     WORD
02:00002F6E 2080            	  5171:                 move.l d0,(a0)
02:00002F70 D350            	  5172:                 add.w d1,(a0)
02:00002F72 40C3            	  5173:                 move.w sr,d3
02:00002F74 02830000001F    	  5174:                 andi.l #$1F,d3            * Isolate flags
02:00002F7A DA83            	  5175:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F7C D890            	  5176:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5177: 
                            	  5178: *     LONG
02:00002F7E 2080            	  5179:                 move.l d0,(a0)
02:00002F80 D390            	  5180:                 add.l d1,(a0)
02:00002F82 40C3            	  5181:                 move.w sr,d3
02:00002F84 02830000000F    	  5182:                 andi.l #$0F,d3            * Isolate flags
02:00002F8A DA83            	  5183:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F8C D890            	  5184:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5185: 
                            	  5186: 
02:00002F8E E299            	  5187:                 ror.l #$1,d1
02:00002F90 51CEFFCC        	  5188:                 dbf d6,ADD_OUTER2
02:00002F94 E29A            	  5189:                 ror.l #$1,d2
02:00002F96 223C8167E123    	  5190:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002F9C 7C1E            	  5191:                 move.l #$0000001E,d6       * Inner loop counter
02:00002F9E 51CFFFBE        	  5192:                 dbf d7,ADD_OUTER2
                            	  5193: 
02:00002FA2 0C846701B884    	  5194:                 cmpi.l #$6701B884,d4      * Check the data results
02:00002FA8 66FE            	  5195:                 bne.s *
02:00002FAA 0C8500005467    	  5196:                 cmpi.l #$00005467,d5      * Check the Flag results
02:00002FB0 66FE            	  5197:                 bne.s *
                            	  5198: 
02:00002FB2 4E75            	  5199:                 rts
                            	  5200: 
                            	  5201: *-----------------------------------------------------------
                            	  5202: *-----------------------------------------------------------
                            	  5203: * OPCODE : SUB
                            	  5204: *-----------------------------------------------------------
                            	  5205: *-----------------------------------------------------------
                            	  5206: 
                            	  5207: op_SUB:
                            	  5208: 
                            	  5209: *  * <EA> to Register
02:00002FB4 203CA5A5A5A5    	  5210:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002FBA 223C8167E123    	  5211:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002FC0 243CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d2
02:00002FC6 7600            	  5213:                 moveq  #$00000000,d3
02:00002FC8 7800            	  5214:                 moveq  #$00000000,d4       * Cumulative data results
02:00002FCA 7A00            	  5215:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002FCC 7C1E            	  5216:                 move.l #$0000001E,d6       * Inner loop counter
02:00002FCE 7E1E            	  5217:                 move.l #$0000001E,d7       * Outer loop counter
02:00002FD0 307C0100        	  5218:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5219: 
                            	  5220: 
                            	  5221: SUB_OUTER1:
                            	  5222: 
                            	  5223: *     BYTE
02:00002FD4 2081            	  5224:                 move.l d1,(a0)
02:00002FD6 9010            	  5225:                 sub.b (a0),d0
02:00002FD8 40C3            	  5226:                 move.w sr,d3
02:00002FDA 02830000001F    	  5227:                 andi.l #$1F,d3            * Isolate flags
02:00002FE0 DA83            	  5228:                 add.l d3,d5               * Copy flag results into accumulator
02:00002FE2 D880            	  5229:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5230: 
                            	  5231: *     WORD
02:00002FE4 2081            	  5232:                 move.l d1,(a0)
02:00002FE6 9050            	  5233:                 sub.w (a0),d0
02:00002FE8 40C3            	  5234:                 move.w sr,d3
02:00002FEA 02830000000C    	  5235:                 andi.l #$0C,d3            * Isolate flags
02:00002FF0 DA83            	  5236:                 add.l d3,d5               * Copy flag results into accumulator
02:00002FF2 D880            	  5237:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5238: 
                            	  5239: *     LONG
02:00002FF4 2081            	  5240:                 move.l d1,(a0)
02:00002FF6 9090            	  5241:                 sub.l (a0),d0
02:00002FF8 40C3            	  5242:                 move.w sr,d3
02:00002FFA 02830000000F    	  5243:                 andi.l #$0F,d3            * Isolate flags
02:00003000 DA83            	  5244:                 add.l d3,d5               * Copy flag results into accumulator
02:00003002 D880            	  5245:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5246: 
                            	  5247: 
02:00003004 E299            	  5248:                 ror.l #$1,d1
02:00003006 51CEFFCC        	  5249:                 dbf d6,SUB_OUTER1
02:0000300A E29A            	  5250:                 ror.l #$1,d2
02:0000300C 223C8167E123    	  5251:                 move.l #$8167E123,d1       * Initial Data-Y
02:00003012 7C1E            	  5252:                 move.l #$0000001E,d6       * Inner loop counter
02:00003014 51CFFFBE        	  5253:                 dbf d7,SUB_OUTER1
                            	  5254: 
02:00003018 0C841A8D14CF    	  5255:                 cmpi.l #$1A8D14CF,d4      * Check the data results
02:0000301E 66FE            	  5256:                 bne.s *
02:00003020 0C8500004FC4    	  5257:                 cmpi.l #$00004FC4,d5      * Check the Flag results
02:00003026 66FE            	  5258:                 bne.s *
                            	  5259: 
                            	  5260: 
                            	  5261: *  * Register to <EA>
02:00003028 203C86738374    	  5262:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:0000302E 223CFC55F2FE    	  5263:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00003034 243C86738374    	  5264:                 move.l #$86738374,d2
02:0000303A 7600            	  5265:                 moveq  #$00000000,d3
02:0000303C 7800            	  5266:                 moveq  #$00000000,d4       * Cumulative data results
02:0000303E 7A00            	  5267:                 moveq  #$00000000,d5       * Cumulative flag results
02:00003040 7C1E            	  5268:                 move.l #$0000001E,d6       * Inner loop counter
02:00003042 7E1D            	  5269:                 move.l #$0000001D,d7       * Outer loop counter
02:00003044 307C0100        	  5270:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5271: 
                            	  5272: 
                            	  5273: SUB_OUTER2:
                            	  5274: 
                            	  5275: *     BYTE
02:00003048 2080            	  5276:                 move.l d0,(a0)
02:0000304A 9310            	  5277:                 sub.b d1,(a0)
02:0000304C 40C3            	  5278:                 move.w sr,d3
02:0000304E 02830000000C    	  5279:                 andi.l #$0C,d3            * Isolate flags
02:00003054 DA83            	  5280:                 add.l d3,d5               * Copy flag results into accumulator
02:00003056 D890            	  5281:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5282: 
                            	  5283: *     WORD
02:00003058 2080            	  5284:                 move.l d0,(a0)
02:0000305A 9350            	  5285:                 sub.w d1,(a0)
02:0000305C 40C3            	  5286:                 move.w sr,d3
02:0000305E 02830000001F    	  5287:                 andi.l #$1F,d3            * Isolate flags
02:00003064 DA83            	  5288:                 add.l d3,d5               * Copy flag results into accumulator
02:00003066 D890            	  5289:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5290: 
                            	  5291: *     LONG
02:00003068 2080            	  5292:                 move.l d0,(a0)
02:0000306A 9390            	  5293:                 sub.l d1,(a0)
02:0000306C 40C3            	  5294:                 move.w sr,d3
02:0000306E 02830000000F    	  5295:                 andi.l #$0F,d3            * Isolate flags
02:00003074 DA83            	  5296:                 add.l d3,d5               * Copy flag results into accumulator
02:00003076 D890            	  5297:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5298: 
                            	  5299: 
02:00003078 E299            	  5300:                 ror.l #$1,d1
02:0000307A 51CEFFCC        	  5301:                 dbf d6,SUB_OUTER2
02:0000307E E29A            	  5302:                 ror.l #$1,d2
02:00003080 223C8167E123    	  5303:                 move.l #$8167E123,d1       * Initial Data-Y
02:00003086 7C1E            	  5304:                 move.l #$0000001E,d6       * Inner loop counter
02:00003088 51CFFFBE        	  5305:                 dbf d7,SUB_OUTER2
                            	  5306: 
02:0000308C 0C8436D38BEC    	  5307:                 cmpi.l #$36D38BEC,d4      * Check the data results
02:00003092 66FE            	  5308:                 bne.s *
02:00003094 0C85000045A5    	  5309:                 cmpi.l #$000045A5,d5      * Check the Flag results
02:0000309A 66FE            	  5310:                 bne.s *
                            	  5311: 
                            	  5312: 
                            	  5313: 
                            	  5314: 
02:0000309C 4E75            	  5315:                 rts
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: *-----------------------------------------------------------
                            	  5320: *-----------------------------------------------------------
                            	  5321: * OPCODE : ADDA
                            	  5322: *-----------------------------------------------------------
                            	  5323: *-----------------------------------------------------------
                            	  5324: 
                            	  5325: op_ADDA:
                            	  5326: 
                            	  5327: *  * <EA> to Register
02:0000309E 203CA5A5A5A5    	  5328:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:000030A4 223C8167E123    	  5329:                 move.l #$8167E123,d1
02:000030AA 243CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d2
02:000030B0 7600            	  5331:                 moveq  #$00000000,d3
02:000030B2 7800            	  5332:                 moveq  #$00000000,d4       * Cumulative data results
02:000030B4 7A00            	  5333:                 moveq  #$00000000,d5       * Cumulative flag results
02:000030B6 7C1E            	  5334:                 move.l #$0000001E,d6       * Inner loop counter
02:000030B8 7E1E            	  5335:                 move.l #$0000001E,d7       * Outer loop counter
02:000030BA 307C0100        	  5336:                 move.l #$00000100,a0       * Address for memory EA operations
02:000030BE 227C8167E123    	  5337:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5338: 
                            	  5339: ADDA_OUTER1:
                            	  5340: 
                            	  5341: *     WORD
                            	  5342: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5343: *                adda.w (a0),a1
                            	  5344: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5345: 
                            	  5346: *     LONG
02:000030C4 2081            	  5347:                 move.l d1,(a0)
02:000030C6 D3D0            	  5348:                 adda.l (a0),a1
02:000030C8 D889            	  5349:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
02:000030CA E299            	  5351:                 ror.l #$1,d1
02:000030CC 51CEFFF6        	  5352:                 dbf d6,ADDA_OUTER1
02:000030D0 E299            	  5353:                 ror.l #$1,d1
02:000030D2 2241            	  5354:                 move.l d1,a1
02:000030D4 223C8167E123    	  5355:                 move.l #$8167E123,d1       * Initial Data-Y
02:000030DA 7C1E            	  5356:                 move.l #$0000001E,d6       * Inner loop counter
02:000030DC 51CFFFE6        	  5357:                 dbf d7,ADDA_OUTER1
                            	  5358: 
02:000030E0 0C84AC04DB4C    	  5359:                 cmpi.l #$AC04DB4C,d4      * Check the data results
02:000030E6 66FE            	  5360:                 bne.s *
                            	  5361: 
                            	  5362: 
02:000030E8 4E75            	  5363:                 rts
                            	  5364: 
                            	  5365: 
                            	  5366: *-----------------------------------------------------------
                            	  5367: *-----------------------------------------------------------
                            	  5368: * OPCODE : SUBA
                            	  5369: *-----------------------------------------------------------
                            	  5370: *-----------------------------------------------------------
                            	  5371: 
                            	  5372: op_SUBA:
                            	  5373: 
                            	  5374: *  * <EA> to Register
02:000030EA 203CA5A5A5A5    	  5375:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:000030F0 223C8167E123    	  5376:                 move.l #$8167E123,d1
02:000030F6 243CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d2
02:000030FC 7600            	  5378:                 moveq  #$00000000,d3
02:000030FE 7800            	  5379:                 moveq  #$00000000,d4       * Cumulative data results
02:00003100 7A00            	  5380:                 moveq  #$00000000,d5       * Cumulative flag results
02:00003102 7C1E            	  5381:                 move.l #$0000001E,d6       * Inner loop counter
02:00003104 7E1E            	  5382:                 move.l #$0000001E,d7       * Outer loop counter
02:00003106 307C0100        	  5383:                 move.l #$00000100,a0       * Address for memory EA operations
02:0000310A 227C8167E123    	  5384:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5385: 
                            	  5386: SUBA_OUTER1:
                            	  5387: 
                            	  5388: *     WORD
                            	  5389: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5390: *                suba.w (a0),a1
                            	  5391: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5392: 
                            	  5393: *     LONG
02:00003110 2081            	  5394:                 move.l d1,(a0)
02:00003112 93D0            	  5395:                 suba.l (a0),a1
02:00003114 D889            	  5396:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
02:00003116 E299            	  5398:                 ror.l #$1,d1
02:00003118 51CEFFF6        	  5399:                 dbf d6,SUBA_OUTER1
02:0000311C E299            	  5400:                 ror.l #$1,d1
02:0000311E 2241            	  5401:                 move.l d1,a1
02:00003120 223C8167E123    	  5402:                 move.l #$8167E123,d1       * Initial Data-Y
02:00003126 7C1E            	  5403:                 move.l #$0000001E,d6       * Inner loop counter
02:00003128 51CFFFE6        	  5404:                 dbf d7,SUBA_OUTER1
                            	  5405: 
02:0000312C 0C84E1E36D7A    	  5406:                 cmpi.l #$E1E36D7A,d4      * Check the data results
02:00003132 66FE            	  5407:                 bne.s *
                            	  5408: 
                            	  5409: 
02:00003134 4E75            	  5410:                 rts
                            	  5411: 
                            	  5412: 
                            	  5413: 
                            	  5414: *-----------------------------------------------------------
                            	  5415: *-----------------------------------------------------------
                            	  5416: * OPCODE : ADDX
                            	  5417: *-----------------------------------------------------------
                            	  5418: *-----------------------------------------------------------
                            	  5419: 
                            	  5420: op_ADDX:
                            	  5421: 
                            	  5422: 
                            	  5423: *  * Register to Register
02:00003136 203CA5A5A5A5    	  5424:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:0000313C 223C8167E123    	  5425:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00003142 243CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d2
02:00003148 7600            	  5427:                 moveq  #$00000000,d3
02:0000314A 7800            	  5428:                 moveq  #$00000000,d4       * Cumulative data results
02:0000314C 7A00            	  5429:                 moveq  #$00000000,d5       * Cumulative flag results
02:0000314E 7C1E            	  5430:                 move.l #$0000001E,d6       * Inner loop counter
02:00003150 7E1E            	  5431:                 move.l #$0000001E,d7       * Outer loop counter
02:00003152 307C0100        	  5432:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5433: 
                            	  5434: 
                            	  5435: ADDX_OUTER1:
                            	  5436: 
                            	  5437: *     BYTE
02:00003156 2002            	  5438:                 move.l d2,d0
02:00003158 D101            	  5439:                 addx.b d1,d0
02:0000315A 40C3            	  5440:                 move.w sr,d3
02:0000315C 02830000001F    	  5441:                 andi.l #$1F,d3            * Isolate flags
02:00003162 DA83            	  5442:                 add.l d3,d5               * Copy flag results into accumulator
02:00003164 D880            	  5443:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5444: 
                            	  5445: *     WORD
02:00003166 2002            	  5446:                 move.l d2,d0
02:00003168 D141            	  5447:                 addx.w d1,d0
02:0000316A 40C3            	  5448:                 move.w sr,d3
02:0000316C 02830000001F    	  5449:                 andi.l #$1F,d3            * Isolate flags
02:00003172 DA83            	  5450:                 add.l d3,d5               * Copy flag results into accumulator
02:00003174 D880            	  5451:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5452: 
                            	  5453: *     LONG
02:00003176 2002            	  5454:                 move.l d2,d0
02:00003178 D181            	  5455:                 addx.l d1,d0
02:0000317A 40C3            	  5456:                 move.w sr,d3
02:0000317C 02830000001F    	  5457:                 andi.l #$1F,d3            * Isolate flags
02:00003182 DA83            	  5458:                 add.l d3,d5               * Copy flag results into accumulator
02:00003184 D880            	  5459:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5460: 
02:00003186 E299            	  5461:                 ror.l #$1,d1
02:00003188 51CEFFCC        	  5462:                 dbf d6,ADDX_OUTER1
02:0000318C E29A            	  5463:                 ror.l #$1,d2
02:0000318E 223C8167E123    	  5464:                 move.l #$8167E123,d1       * Initial Data-Y
02:00003194 7C1E            	  5465:                 move.l #$0000001E,d6       * Inner loop counter
02:00003196 51CFFFBE        	  5466:                 dbf d7,ADDX_OUTER1
                            	  5467: 
02:0000319A 0C844E96A4D9    	  5468:                 cmpi.l #$4E96A4D9,d4      * Check the data results
02:000031A0 66FE            	  5469:                 bne.s *
02:000031A2 0C85000085CD    	  5470:                 cmpi.l #$000085CD,d5      * Check the Flag results
02:000031A8 66FE            	  5471:                 bne.s *
                            	  5472: 
                            	  5473: 
                            	  5474: 
                            	  5475: *     -(An),-(An)
                            	  5476: 
02:000031AA 7000            	  5477:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
02:000031AC 7200            	  5478:                 moveq  #$00000000,d1
02:000031AE 7400            	  5479:                 moveq  #$00000000,d2
02:000031B0 307C0100        	  5480:                 move.l #$00000100,a0       * Address for Data-X
02:000031B4 327C0200        	  5481:                 move.l #$00000200,a1       * Address for Data-Y
02:000031B8 20FC11FF5580    	  5482:                 move.l #$11FF5580,(a0)+   * Populate test data
02:000031BE 20FC1111FFFF    	  5483:                 move.l #$1111FFFF,(a0)+   * Populate test data
02:000031C4 20FC33333333    	  5484:                 move.l #$33333333,(a0)+   * Populate test data
02:000031CA 20FC44444444    	  5485:                 move.l #$44444444,(a0)+   * Populate test data
02:000031D0 22FC80FF337F    	  5486:                 move.l #$80FF337F,(a1)+   * Populate test data
02:000031D6 22FCFFFF1111    	  5487:                 move.l #$FFFF1111,(a1)+   * Populate test data
02:000031DC 22FC33333333    	  5488:                 move.l #$33333333,(a1)+   * Populate test data
02:000031E2 22FC44444444    	  5489:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5490: 
                            	  5491: 
02:000031E8 7C0F            	  5492:                 move.l #$0000000F,d6       * Loop counter
                            	  5493: 
02:000031EA D308            	  5494: ADDX_LOOP3:     addx.b -(a0),-(a1)
02:000031EC 40C3            	  5495:                 move.w sr,d3
02:000031EE 02830000000F    	  5496:                 andi.l #$0F,d3            * Isolate flags
02:000031F4 D083            	  5497:                 add.l d3,d0               * Copy flag results into accumulator
02:000031F6 D211            	  5498:                 add.b (a1),d1
02:000031F8 51CEFFF0        	  5499:                 dbf d6,ADDX_LOOP3
                            	  5500: 
                            	  5501: 
02:000031FC 307C0110        	  5502:                 move.l #$00000110,a0       * Address for Data-X
02:00003200 327C0210        	  5503:                 move.l #$00000210,a1       * Address for Data-Y
02:00003204 7C07            	  5504:                 moveq  #$00000007,d6       * Loop counter
                            	  5505: 
02:00003206 D348            	  5506: ADDX_LOOP4:     addx.w -(a0),-(a1)
02:00003208 40C3            	  5507:                 move.w sr,d3
02:0000320A 02830000000F    	  5508:                 andi.l #$0F,d3            * Isolate flags
02:00003210 D083            	  5509:                 add.l d3,d0               * Copy flag results into accumulator
02:00003212 D251            	  5510:                 add.w (a1),d1
02:00003214 51CEFFF0        	  5511:                 dbf d6,ADDX_LOOP4
                            	  5512: 
                            	  5513: 
02:00003218 307C0110        	  5514:                 move.l #$00000110,a0       * Address for Data-X
02:0000321C 327C0210        	  5515:                 move.l #$00000210,a1       * Address for Data-Y
02:00003220 7C03            	  5516:                 moveq  #$00000003,d6       * Loop counter
                            	  5517: 
02:00003222 D388            	  5518: ADDX_LOOP5:     addx.l -(a0),-(a1)
02:00003224 40C3            	  5519:                 move.w sr,d3
02:00003226 02830000000F    	  5520:                 andi.l #$0F,d3            * Isolate flags
02:0000322C D083            	  5521:                 add.l d3,d0               * Copy flag results into accumulator
02:0000322E D291            	  5522:                 add.l (a1),d1
02:00003230 51CEFFF0        	  5523:                 dbf d6,ADDX_LOOP5
                            	  5524: 
                            	  5525: 
02:00003234 0C8000000095    	  5526:                 cmpi.l #$00000095,d0      * Check the flag results
02:0000323A 66FE            	  5527:                 bne.s *
02:0000323C 0C81C812A682    	  5528:                 cmpi.l #$C812A682,d1      * Check the data results
02:00003242 66FE            	  5529:                 bne.s *
                            	  5530: 
02:00003244 4E75            	  5531:                 rts
                            	  5532: 
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: *-----------------------------------------------------------
                            	  5537: *-----------------------------------------------------------
                            	  5538: * OPCODE : SUBX
                            	  5539: *-----------------------------------------------------------
                            	  5540: *-----------------------------------------------------------
                            	  5541: 
                            	  5542: op_SUBX:
                            	  5543: 
                            	  5544: 
                            	  5545: *  * Register to Register
02:00003246 203CA5A5A5A5    	  5546:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:0000324C 223C8167E123    	  5547:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00003252 243CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d2
02:00003258 7600            	  5549:                 moveq  #$00000000,d3
02:0000325A 7800            	  5550:                 moveq  #$00000000,d4       * Cumulative data results
02:0000325C 7A00            	  5551:                 moveq  #$00000000,d5       * Cumulative flag results
02:0000325E 7C1E            	  5552:                 move.l #$0000001E,d6       * Inner loop counter
02:00003260 7E1E            	  5553:                 move.l #$0000001E,d7       * Outer loop counter
02:00003262 307C0100        	  5554:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5555: 
                            	  5556: 
                            	  5557: SUBX_OUTER1:
                            	  5558: 
                            	  5559: *     BYTE
02:00003266 2002            	  5560:                 move.l d2,d0
02:00003268 9101            	  5561:                 subx.b d1,d0
02:0000326A 40C3            	  5562:                 move.w sr,d3
02:0000326C 02830000001F    	  5563:                 andi.l #$1F,d3            * Isolate flags
02:00003272 DA83            	  5564:                 add.l d3,d5               * Copy flag results into accumulator
02:00003274 D880            	  5565:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5566: 
                            	  5567: *     WORD
02:00003276 2002            	  5568:                 move.l d2,d0
02:00003278 9141            	  5569:                 subx.w d1,d0
02:0000327A 40C3            	  5570:                 move.w sr,d3
02:0000327C 02830000001F    	  5571:                 andi.l #$1F,d3            * Isolate flags
02:00003282 DA83            	  5572:                 add.l d3,d5               * Copy flag results into accumulator
02:00003284 D880            	  5573:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5574: 
                            	  5575: *     LONG
02:00003286 2002            	  5576:                 move.l d2,d0
02:00003288 9181            	  5577:                 subx.l d1,d0
02:0000328A 40C3            	  5578:                 move.w sr,d3
02:0000328C 02830000001F    	  5579:                 andi.l #$1F,d3            * Isolate flags
02:00003292 DA83            	  5580:                 add.l d3,d5               * Copy flag results into accumulator
02:00003294 D880            	  5581:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5582: 
02:00003296 E299            	  5583:                 ror.l #$1,d1
02:00003298 51CEFFCC        	  5584:                 dbf d6,SUBX_OUTER1
02:0000329C E29A            	  5585:                 ror.l #$1,d2
02:0000329E 223C8167E123    	  5586:                 move.l #$8167E123,d1       * Initial Data-Y
02:000032A4 7C1E            	  5587:                 move.l #$0000001E,d6       * Inner loop counter
02:000032A6 51CFFFBE        	  5588:                 dbf d7,SUBX_OUTER1
                            	  5589: 
02:000032AA 0C84FCAA913E    	  5590:                 cmpi.l #$FCAA913E,d4      * Check the data results
02:000032B0 66FE            	  5591:                 bne.s *
02:000032B2 0C8500007E89    	  5592:                 cmpi.l #$00007E89,d5      * Check the Flag results
02:000032B8 66FE            	  5593:                 bne.s *
                            	  5594: 
                            	  5595: 
                            	  5596: 
                            	  5597: *     -(An),-(An)
                            	  5598: 
02:000032BA 7000            	  5599:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
02:000032BC 7200            	  5600:                 moveq  #$00000000,d1
02:000032BE 7400            	  5601:                 moveq  #$00000000,d2
02:000032C0 307C0100        	  5602:                 move.l #$00000100,a0       * Address for Data-X
02:000032C4 327C0200        	  5603:                 move.l #$00000200,a1       * Address for Data-Y
02:000032C8 20FC11FF5580    	  5604:                 move.l #$11FF5580,(a0)+   * Populate test data
02:000032CE 20FC1111FFFF    	  5605:                 move.l #$1111FFFF,(a0)+   * Populate test data
02:000032D4 20FC80FF337F    	  5606:                 move.l #$80FF337F,(a0)+   * Populate test data
02:000032DA 20FC44444444    	  5607:                 move.l #$44444444,(a0)+   * Populate test data
02:000032E0 22FC80FF337F    	  5608:                 move.l #$80FF337F,(a1)+   * Populate test data
02:000032E6 22FC1111FFFF    	  5609:                 move.l #$1111FFFF,(a1)+   * Populate test data
02:000032EC 22FC33333333    	  5610:                 move.l #$33333333,(a1)+   * Populate test data
02:000032F2 22FC5580EECC    	  5611:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5612: 
                            	  5613: 
02:000032F8 7C0F            	  5614:                 move.l #$0000000F,d6       * Loop counter
                            	  5615: 
02:000032FA 9308            	  5616: SUBX_LOOP3:     subx.b -(a0),-(a1)
02:000032FC 40C3            	  5617:                 move.w sr,d3
02:000032FE 02830000000F    	  5618:                 andi.l #$0F,d3            * Isolate flags
02:00003304 D083            	  5619:                 add.l d3,d0               * Copy flag results into accumulator
02:00003306 D211            	  5620:                 add.b (a1),d1
02:00003308 51CEFFF0        	  5621:                 dbf d6,SUBX_LOOP3
                            	  5622: 
                            	  5623: 
02:0000330C 307C0110        	  5624:                 move.l #$00000110,a0       * Address for Data-X
02:00003310 327C0210        	  5625:                 move.l #$00000210,a1       * Address for Data-Y
02:00003314 7C07            	  5626:                 moveq  #$00000007,d6       * Loop counter
                            	  5627: 
02:00003316 9348            	  5628: SUBX_LOOP4:     subx.w -(a0),-(a1)
02:00003318 40C3            	  5629:                 move.w sr,d3
02:0000331A 02830000000F    	  5630:                 andi.l #$0F,d3            * Isolate flags
02:00003320 D083            	  5631:                 add.l d3,d0               * Copy flag results into accumulator
02:00003322 D251            	  5632:                 add.w (a1),d1
02:00003324 51CEFFF0        	  5633:                 dbf d6,SUBX_LOOP4
                            	  5634: 
                            	  5635: 
02:00003328 307C0110        	  5636:                 move.l #$00000110,a0       * Address for Data-X
02:0000332C 327C0210        	  5637:                 move.l #$00000210,a1       * Address for Data-Y
02:00003330 7C03            	  5638:                 moveq  #$00000003,d6       * Loop counter
                            	  5639: 
02:00003332 9388            	  5640: SUBX_LOOP5:     subx.l -(a0),-(a1)
02:00003334 40C3            	  5641:                 move.w sr,d3
02:00003336 02830000000F    	  5642:                 andi.l #$0F,d3            * Isolate flags
02:0000333C D083            	  5643:                 add.l d3,d0               * Copy flag results into accumulator
02:0000333E D291            	  5644:                 add.l (a1),d1
02:00003340 51CEFFF0        	  5645:                 dbf d6,SUBX_LOOP5
                            	  5646: 
                            	  5647: 
02:00003344 0C80000000B1    	  5648:                 cmpi.l #$000000B1,d0      * Check the flag results
02:0000334A 66FE            	  5649:                 bne.s *
02:0000334C 0C8162C6F417    	  5650:                 cmpi.l #$62C6F417,d1      * Check the data results
02:00003352 66FE            	  5651:                 bne.s *
                            	  5652: 
02:00003354 4E75            	  5653:                 rts
                            	  5654: 
                            	  5655: 
                            	  5656: *-----------------------------------------------------------
                            	  5657: *-----------------------------------------------------------
                            	  5658: * OPCODE : MULU
                            	  5659: *-----------------------------------------------------------
                            	  5660: *-----------------------------------------------------------
                            	  5661: 
                            	  5662: op_MULU:
                            	  5663: 
02:00003356 203CFE805501    	  5664:                 move.l #$FE805501,d0        * Initial
02:0000335C 223C5697EDB6    	  5665:                 move.l #$5697EDB6,d1        * Initial Y
02:00003362 243CFE805501    	  5666:                 move.l #$FE805501,d2
02:00003368 7600            	  5667:                 moveq  #$00000000,d3
02:0000336A 7800            	  5668:                 moveq  #$00000000,d4        * Cumulative data results
02:0000336C 7A00            	  5669:                 moveq  #$00000000,d5       * Cumulative flag results
02:0000336E 7C0E            	  5670:                 move.l #$0000000E,d6       * Inner loop counter
02:00003370 7E0E            	  5671:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5672: 
                            	  5673: 
02:00003372 C0C1            	  5674: MULU_OUTER1:    mulu d1,d0
02:00003374 40C3            	  5675:                 move.w sr,d3
02:00003376 02830000000C    	  5676:                 andi.l #$0C,d3            * Isolate flags
02:0000337C DA83            	  5677:                 add.l d3,d5               * Copy flag results into accumulator
02:0000337E D880            	  5678:                 add.l d0,d4               * Copy data results into data accumulator
02:00003380 E299            	  5679:                 ror.l #$1,d1
                            	  5680: 
02:00003382 51CEFFEE        	  5681:                 dbf d6,MULU_OUTER1
02:00003386 E29A            	  5682:                 ror.l #$1,d2
02:00003388 2002            	  5683:                 move.l d2,d0
02:0000338A 7C0E            	  5684:                 move.l #$0000000E,d6       * Inner loop counter
02:0000338C 51CFFFE4        	  5685:                 dbf d7,MULU_OUTER1
                            	  5686: 
02:00003390 0C8476FB988C    	  5687:                 cmpi.l #$76FB988C,d4      * Check the data results
02:00003396 66FE            	  5688:                 bne.s *
                            	  5689: 
02:00003398 0C8500000170    	  5690:                 cmpi.l #$00000170,d5      * Check the Flag results
02:0000339E 66FE            	  5691:                 bne.s *
                            	  5692: 
                            	  5693: 
02:000033A0 4E75            	  5694:                 rts
                            	  5695: 
                            	  5696: 
                            	  5697: *-----------------------------------------------------------
                            	  5698: *-----------------------------------------------------------
                            	  5699: * OPCODE : MULS
                            	  5700: *-----------------------------------------------------------
                            	  5701: *-----------------------------------------------------------
                            	  5702: 
                            	  5703: op_MULS:
                            	  5704: 
02:000033A2 203CFE805501    	  5705:                 move.l #$FE805501,d0        * Initial
02:000033A8 223C5697EDB6    	  5706:                 move.l #$5697EDB6,d1        * Initial Y
02:000033AE 243CFE805501    	  5707:                 move.l #$FE805501,d2
02:000033B4 7600            	  5708:                 moveq  #$00000000,d3
02:000033B6 7800            	  5709:                 moveq  #$00000000,d4        * Cumulative data results
02:000033B8 7A00            	  5710:                 moveq  #$00000000,d5       * Cumulative flag results
02:000033BA 7C0E            	  5711:                 move.l #$0000000E,d6       * Inner loop counter
02:000033BC 7E0E            	  5712:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5713: 
                            	  5714: 
02:000033BE C1C1            	  5715: MULS_OUTER1:    muls d1,d0
02:000033C0 40C3            	  5716:                 move.w sr,d3
02:000033C2 02830000000C    	  5717:                 andi.l #$0C,d3            * Isolate flags
02:000033C8 DA83            	  5718:                 add.l d3,d5               * Copy flag results into accumulator
02:000033CA D880            	  5719:                 add.l d0,d4               * Copy data results into data accumulator
02:000033CC E299            	  5720:                 ror.l #$1,d1
                            	  5721: 
02:000033CE 51CEFFEE        	  5722:                 dbf d6,MULS_OUTER1
02:000033D2 E29A            	  5723:                 ror.l #$1,d2
02:000033D4 2002            	  5724:                 move.l d2,d0
02:000033D6 7C0E            	  5725:                 move.l #$0000000E,d6       * Inner loop counter
02:000033D8 51CFFFE4        	  5726:                 dbf d7,MULS_OUTER1
                            	  5727: 
02:000033DC 0C84D4E2988C    	  5728:                 cmpi.l #$D4E2988C,d4      * Check the data results
02:000033E2 66FE            	  5729:                 bne.s *
                            	  5730: 
02:000033E4 0C85000003E0    	  5731:                 cmpi.l #$000003E0,d5      * Check the Flag results
02:000033EA 66FE            	  5732:                 bne.s *
                            	  5733: 
                            	  5734: 
02:000033EC 4E75            	  5735:                 rts
                            	  5736: 
                            	  5737: 
                            	  5738: 
                            	  5739: *-----------------------------------------------------------
                            	  5740: *-----------------------------------------------------------
                            	  5741: * OPCODE : EXG
                            	  5742: *-----------------------------------------------------------
                            	  5743: *-----------------------------------------------------------
                            	  5744: 
                            	  5745: op_EXG:
02:000033EE 223CD1D1D1D1    	  5746:                 move.l #$d1d1d1d1,d1
02:000033F4 243CD2D2D2D2    	  5747:                 move.l #$d2d2d2d2,d2
02:000033FA 263CD3D3D3D3    	  5748:                 move.l #$d3d3d3d3,d3
02:00003400 227CA1A1A1A1    	  5749:                 move.l #$a1a1a1a1,a1
02:00003406 247CA2A2A2A2    	  5750:                 move.l #$a2a2a2a2,a2
02:0000340C 267CA3A3A3A3    	  5751:                 move.l #$a3a3a3a3,a3
                            	  5752: 
02:00003412 C342            	  5753:                 exg d1,d2
02:00003414 C34A            	  5754:                 exg a1,a2
02:00003416 C78B            	  5755:                 exg d3,a3
                            	  5756: 
02:00003418 0C81D2D2D2D2    	  5757:                 cmpi.l #$d2d2d2d2,d1      * Check the results
02:0000341E 66FE            	  5758:                 bne.s *
02:00003420 0C82D1D1D1D1    	  5759:                 cmpi.l #$d1d1d1d1,d2
02:00003426 66FE            	  5760:                 bne.s *
02:00003428 0C83A3A3A3A3    	  5761:                 cmpi.l #$a3a3a3a3,d3
02:0000342E 66FE            	  5762:                 bne.s *
                            	  5763: 
02:00003430 2209            	  5764:                 move.l a1,d1
02:00003432 240A            	  5765:                 move.l a2,d2
02:00003434 260B            	  5766:                 move.l a3,d3
                            	  5767: 
02:00003436 0C81A2A2A2A2    	  5768:                 cmpi.l #$a2a2a2a2,d1
02:0000343C 66FE            	  5769:                 bne.s *
02:0000343E 0C82A1A1A1A1    	  5770:                 cmpi.l #$a1a1a1a1,d2
02:00003444 66FE            	  5771:                 bne.s *
02:00003446 0C83D3D3D3D3    	  5772:                 cmpi.l #$d3d3d3d3,d3
02:0000344C 66FE            	  5773:                 bne.s *
                            	  5774: 
02:0000344E 4E75            	  5775:                 rts
                            	  5776: 
                            	  5777: 
                            	  5778: *-----------------------------------------------------------
                            	  5779: *-----------------------------------------------------------
                            	  5780: * OPCODE : ROx
                            	  5781: *-----------------------------------------------------------
                            	  5782: *-----------------------------------------------------------
                            	  5783: 
                            	  5784: *     Subroutine to check and accumulate the flags
02:00003450 40C3            	  5785: ROx_FLAGS:      move.w sr,d3
02:00003452 02830000000F    	  5786:                 andi.l #$0F,d3            * Isolate flags
02:00003458 DA83            	  5787:                 add.l d3,d5               * Copy flag results into accumulator
02:0000345A 4E75            	  5788:                 rts
                            	  5789: 
                            	  5790: op_ROx:
                            	  5791: 
                            	  5792: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5793: 
                            	  5794: *        BYTE LEFT
02:0000345C 203C80018FF1    	  5795:                 move.l #$80018FF1,d0
02:00003462 7A00            	  5796:                 moveq  #$00000000,d5
02:00003464 7C11            	  5797:                 moveq  #$00000011,d6
                            	  5798: ROx_LOOP1:
02:00003466 ED38            	  5799:                 rol.b d6,d0
02:00003468 61E6            	  5800:                 bsr ROx_FLAGS
02:0000346A 51CEFFFA        	  5801:                 dbf d6,ROx_LOOP1
02:0000346E 0C8080018FE3    	  5802:                 cmpi.l #$80018FE3,d0
02:00003474 66FE            	  5803:                 bne.s *
02:00003476 0C850000006B    	  5804:                 cmpi.l #$0000006B,d5
02:0000347C 66FE            	  5805:                 bne.s *
                            	  5806: 
                            	  5807: *        BYTE RIGHT
02:0000347E 203C80018FF1    	  5808:                 move.l #$80018FF1,d0
02:00003484 7C12            	  5809:                 moveq  #$00000012,d6
                            	  5810: ROx_LOOP2:
02:00003486 EC38            	  5811:                 ror.b d6,d0
02:00003488 61C6            	  5812:                 bsr ROx_FLAGS
02:0000348A 51CEFFFA        	  5813:                 dbf d6,ROx_LOOP2
02:0000348E 0C8080018F3E    	  5814:                 cmpi.l #$80018F3E,d0
02:00003494 66FE            	  5815:                 bne.s *
02:00003496 0C85000000C5    	  5816:                 cmpi.l #$000000C5,d5
02:0000349C 66FE            	  5817:                 bne.s *
                            	  5818: 
                            	  5819: 
                            	  5820: *        WORD LEFT
02:0000349E 203C80018FF1    	  5821:                 move.l #$80018FF1,d0
02:000034A4 7C13            	  5822:                 moveq  #$00000013,d6
                            	  5823: ROx_LOOP3:
02:000034A6 ED78            	  5824:                 rol.w d6,d0
02:000034A8 61A6            	  5825:                 bsr ROx_FLAGS
02:000034AA 51CEFFFA        	  5826:                 dbf d6,ROx_LOOP3
02:000034AE 0C80800163FC    	  5827:                 cmpi.l #$800163FC,d0
02:000034B4 66FE            	  5828:                 bne.s *
02:000034B6 0C8500000131    	  5829:                 cmpi.l #$00000131,d5
02:000034BC 66FE            	  5830:                 bne.s *
                            	  5831: 
                            	  5832: *        WORD RIGHT
02:000034BE 203C80018FF1    	  5833:                 move.l #$80018FF1,d0
02:000034C4 7C1E            	  5834:                 move.l #$0000001E,d6
                            	  5835: ROx_LOOP4:
02:000034C6 EC78            	  5836:                 ror.w d6,d0
02:000034C8 6186            	  5837:                 bsr ROx_FLAGS
02:000034CA 51CEFFFA        	  5838:                 dbf d6,ROx_LOOP4
02:000034CE 0C808001C7F8    	  5839:                 cmpi.l #$8001C7F8,d0
02:000034D4 66FE            	  5840:                 bne.s *
02:000034D6 0C85000001DB    	  5841:                 cmpi.l #$000001DB,d5
02:000034DC 66FE            	  5842:                 bne.s *
                            	  5843: 
                            	  5844: 
                            	  5845: *        LONG LEFT
02:000034DE 203C80018FF1    	  5846:                 move.l #$80018FF1,d0
02:000034E4 7C15            	  5847:                 moveq  #$00000015,d6
                            	  5848: ROx_LOOP5:
02:000034E6 EDB8            	  5849:                 rol.l d6,d0
02:000034E8 6100FF66        	  5850:                 bsr ROx_FLAGS
02:000034EC 51CEFFF8        	  5851:                 dbf d6,ROx_LOOP5
02:000034F0 0C8000C7F8C0    	  5852:                 cmpi.l #$00C7F8C0,d0
02:000034F6 66FE            	  5853:                 bne.s *
02:000034F8 0C850000021A    	  5854:                 cmpi.l #$0000021A,d5
02:000034FE 66FE            	  5855:                 bne.s *
                            	  5856: 
                            	  5857: *        LONG RIGHT
02:00003500 203C80018FF1    	  5858:                 move.l #$80018FF1,d0
02:00003506 7C16            	  5859:                 moveq  #$00000016,d6
                            	  5860: ROx_LOOP6:
02:00003508 ECB8            	  5861:                 ror.l d6,d0
02:0000350A 6100FF44        	  5862:                 bsr ROx_FLAGS
02:0000350E 51CEFFF8        	  5863:                 dbf d6,ROx_LOOP6
02:00003512 0C80000C7F8C    	  5864:                 cmpi.l #$000C7F8C,d0
02:00003518 66FE            	  5865:                 bne.s *
02:0000351A 0C8500000250    	  5866:                 cmpi.l #$00000250,d5
02:00003520 66FE            	  5867:                 bne.s *
                            	  5868: 
                            	  5869: 
                            	  5870: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5871: 
02:00003522 203C80018FF1    	  5872:                 move.l #$80018FF1,d0
02:00003528 7A00            	  5873:                 moveq  #$00000000,d5
                            	  5874: 
                            	  5875: *        BYTE LEFT
02:0000352A E318            	  5876:                 rol.b #1,d0
02:0000352C 6100FF22        	  5877:                 bsr ROx_FLAGS
02:00003530 EB18            	  5878:                 rol.b #5,d0
02:00003532 6100FF1C        	  5879:                 bsr ROx_FLAGS
02:00003536 EF18            	  5880:                 rol.b #7,d0
02:00003538 6100FF16        	  5881:                 bsr ROx_FLAGS
02:0000353C E118            	  5882:                 rol.b #8,d0
02:0000353E 6100FF10        	  5883:                 bsr ROx_FLAGS
02:00003542 0C8080018F3E    	  5884:                 cmpi.l #$80018F3E,d0
02:00003548 66FE            	  5885:                 bne.s *
02:0000354A 0C8500000009    	  5886:                 cmpi.l #$00000009,d5
02:00003550 66FE            	  5887:                 bne.s *
                            	  5888: 
                            	  5889: *        BYTE RIGHT
02:00003552 E218            	  5890:                 ror.b #1,d0
02:00003554 6100FEFA        	  5891:                 bsr ROx_FLAGS
02:00003558 EA18            	  5892:                 ror.b #5,d0
02:0000355A 6100FEF4        	  5893:                 bsr ROx_FLAGS
02:0000355E EE18            	  5894:                 ror.b #7,d0
02:00003560 6100FEEE        	  5895:                 bsr ROx_FLAGS
02:00003564 E018            	  5896:                 ror.b #8,d0
02:00003566 6100FEE8        	  5897:                 bsr ROx_FLAGS
02:0000356A 0C8080018FF1    	  5898:                 cmpi.l #$80018FF1,d0
02:00003570 66FE            	  5899:                 bne.s *
02:00003572 0C8500000024    	  5900:                 cmpi.l #$00000024,d5
02:00003578 66FE            	  5901:                 bne.s *
                            	  5902: 
                            	  5903: *        WORD LEFT
02:0000357A E358            	  5904:                 rol.w #1,d0
02:0000357C 6100FED2        	  5905:                 bsr ROx_FLAGS
02:00003580 EB58            	  5906:                 rol.w #5,d0
02:00003582 6100FECC        	  5907:                 bsr ROx_FLAGS
02:00003586 EF58            	  5908:                 rol.w #7,d0
02:00003588 6100FEC6        	  5909:                 bsr ROx_FLAGS
02:0000358C E158            	  5910:                 rol.w #8,d0
02:0000358E 6100FEC0        	  5911:                 bsr ROx_FLAGS
02:00003592 0C808001FE31    	  5912:                 cmpi.l #$8001FE31,d0
02:00003598 66FE            	  5913:                 bne.s *
02:0000359A 0C8500000037    	  5914:                 cmpi.l #$00000037,d5
02:000035A0 66FE            	  5915:                 bne.s *
                            	  5916: 
                            	  5917: *        WORD RIGHT
02:000035A2 E258            	  5918:                 ror.w #1,d0
02:000035A4 6100FEAA        	  5919:                 bsr ROx_FLAGS
02:000035A8 EA58            	  5920:                 ror.w #5,d0
02:000035AA 6100FEA4        	  5921:                 bsr ROx_FLAGS
02:000035AE EE58            	  5922:                 ror.w #7,d0
02:000035B0 6100FE9E        	  5923:                 bsr ROx_FLAGS
02:000035B4 E058            	  5924:                 ror.w #8,d0
02:000035B6 6100FE98        	  5925:                 bsr ROx_FLAGS
02:000035BA 0C8080018FF1    	  5926:                 cmpi.l #$80018FF1,d0
02:000035C0 66FE            	  5927:                 bne.s *
02:000035C2 0C850000005B    	  5928:                 cmpi.l #$0000005B,d5
02:000035C8 66FE            	  5929:                 bne.s *
                            	  5930: 
                            	  5931: *        LONG LEFT
02:000035CA E398            	  5932:                 rol.l #1,d0
02:000035CC 6100FE82        	  5933:                 bsr ROx_FLAGS
02:000035D0 EB98            	  5934:                 rol.l #5,d0
02:000035D2 6100FE7C        	  5935:                 bsr ROx_FLAGS
02:000035D6 EF98            	  5936:                 rol.l #7,d0
02:000035D8 6100FE76        	  5937:                 bsr ROx_FLAGS
02:000035DC E198            	  5938:                 rol.l #8,d0
02:000035DE 6100FE70        	  5939:                 bsr ROx_FLAGS
02:000035E2 0C80FE300031    	  5940:                 cmpi.l #$FE300031,d0
02:000035E8 66FE            	  5941:                 bne.s *
02:000035EA 0C8500000065    	  5942:                 cmpi.l #$00000065,d5
02:000035F0 66FE            	  5943:                 bne.s *
                            	  5944: 
                            	  5945: *        LONG RIGHT
02:000035F2 E298            	  5946:                 ror.l #1,d0
02:000035F4 6100FE5A        	  5947:                 bsr ROx_FLAGS
02:000035F8 EA98            	  5948:                 ror.l #5,d0
02:000035FA 6100FE54        	  5949:                 bsr ROx_FLAGS
02:000035FE EE98            	  5950:                 ror.l #7,d0
02:00003600 6100FE4E        	  5951:                 bsr ROx_FLAGS
02:00003604 E098            	  5952:                 ror.l #8,d0
02:00003606 6100FE48        	  5953:                 bsr ROx_FLAGS
02:0000360A 0C8080018FF1    	  5954:                 cmpi.l #$80018FF1,d0
02:00003610 66FE            	  5955:                 bne.s *
02:00003612 0C8500000080    	  5956:                 cmpi.l #$00000080,d5
02:00003618 66FE            	  5957:                 bne.s *
                            	  5958: 
                            	  5959: 
                            	  5960: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5961: 
02:0000361A 7A00            	  5962:                 moveq  #$00000000,d5
02:0000361C 307C0100        	  5963:                 move.l #$00000100,a0
02:00003620 30BC8FF1        	  5964:                 move.w #$8FF1,(a0)
                            	  5965: 
                            	  5966: *        WORD LEFT
02:00003624 E7D0            	  5967:                 rol (a0)
02:00003626 6100FE28        	  5968:                 bsr ROx_FLAGS
02:0000362A E7D0            	  5969:                 rol (a0)
02:0000362C 6100FE22        	  5970:                 bsr ROx_FLAGS
02:00003630 E7D0            	  5971:                 rol (a0)
02:00003632 6100FE1C        	  5972:                 bsr ROx_FLAGS
02:00003636 E7D0            	  5973:                 rol (a0)
02:00003638 6100FE16        	  5974:                 bsr ROx_FLAGS
02:0000363C 3010            	  5975:                 move.w (a0),d0
02:0000363E 0C808001FF18    	  5976:                 cmpi.l #$8001FF18,d0
02:00003644 66FE            	  5977:                 bne.s *
02:00003646 0C8500000009    	  5978:                 cmpi.l #$00000009,d5
02:0000364C 66FE            	  5979:                 bne.s *
                            	  5980: 
                            	  5981: *        WORD RIGHT
02:0000364E E6D0            	  5982:                 ror (a0)
02:00003650 6100FDFE        	  5983:                 bsr ROx_FLAGS
02:00003654 E6D0            	  5984:                 ror (a0)
02:00003656 6100FDF8        	  5985:                 bsr ROx_FLAGS
02:0000365A E6D0            	  5986:                 ror (a0)
02:0000365C 6100FDF2        	  5987:                 bsr ROx_FLAGS
02:00003660 E6D0            	  5988:                 ror (a0)
02:00003662 6100FDEC        	  5989:                 bsr ROx_FLAGS
02:00003666 E6D0            	  5990:                 ror (a0)
02:00003668 6100FDE6        	  5991:                 bsr ROx_FLAGS
02:0000366C E6D0            	  5992:                 ror (a0)
02:0000366E 6100FDE0        	  5993:                 bsr ROx_FLAGS
02:00003672 3010            	  5994:                 move.w (a0),d0
02:00003674 0C80800163FC    	  5995:                 cmpi.l #$800163FC,d0
02:0000367A 66FE            	  5996:                 bne.s *
02:0000367C 0C850000001B    	  5997:                 cmpi.l #$0000001B,d5
02:00003682 66FE            	  5998:                 bne.s *
                            	  5999: 
02:00003684 4E75            	  6000:                 rts
                            	  6001: 
                            	  6002: 
                            	  6003: 
                            	  6004: *-----------------------------------------------------------
                            	  6005: *-----------------------------------------------------------
                            	  6006: * OPCODE : ROXx
                            	  6007: *-----------------------------------------------------------
                            	  6008: *-----------------------------------------------------------
                            	  6009: 
                            	  6010: *     Subroutine to check and accumulate the flags
02:00003686 40C3            	  6011: ROXx_FLAGS:     move.w sr,d3
02:00003688 02830000000F    	  6012:                 andi.l #$0F,d3            * Isolate flags
02:0000368E DA83            	  6013:                 add.l d3,d5               * Copy flag results into accumulator
02:00003690 4E75            	  6014:                 rts
                            	  6015: 
                            	  6016: op_ROXx:
                            	  6017: 
                            	  6018: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6019: 
                            	  6020: *        BYTE LEFT
02:00003692 203C80018FF1    	  6021:                 move.l #$80018FF1,d0
02:00003698 7A00            	  6022:                 moveq  #$00000000,d5
02:0000369A 7C11            	  6023:                 moveq  #$00000011,d6
                            	  6024: ROXx_LOOP1:
02:0000369C ED30            	  6025:                 roxl.b d6,d0
02:0000369E 61E6            	  6026:                 bsr ROXx_FLAGS
02:000036A0 51CEFFFA        	  6027:                 dbf d6,ROXx_LOOP1
02:000036A4 0C8080018FD0    	  6028:                 cmpi.l #$80018FD0,d0
02:000036AA 66FE            	  6029:                 bne.s *
02:000036AC 0C8500000042    	  6030:                 cmpi.l #$00000042,d5
02:000036B2 66FE            	  6031:                 bne.s *
                            	  6032: 
                            	  6033: *        BYTE RIGHT
02:000036B4 203C80018FF1    	  6034:                 move.l #$80018FF1,d0
02:000036BA 7C12            	  6035:                 moveq  #$00000012,d6
                            	  6036: ROXx_LOOP2:
02:000036BC EC30            	  6037:                 roxr.b d6,d0
02:000036BE 61C6            	  6038:                 bsr ROXx_FLAGS
02:000036C0 51CEFFFA        	  6039:                 dbf d6,ROXx_LOOP2
02:000036C4 0C8080018F51    	  6040:                 cmpi.l #$80018F51,d0
02:000036CA 66FE            	  6041:                 bne.s *
02:000036CC 0C850000009C    	  6042:                 cmpi.l #$0000009C,d5
02:000036D2 66FE            	  6043:                 bne.s *
                            	  6044: 
                            	  6045: 
                            	  6046: *        WORD LEFT
02:000036D4 203C80018FF1    	  6047:                 move.l #$80018FF1,d0
02:000036DA 7C13            	  6048:                 moveq  #$00000013,d6
                            	  6049: ROXx_LOOP3:
02:000036DC ED70            	  6050:                 roxl.w d6,d0
02:000036DE 61A6            	  6051:                 bsr ROXx_FLAGS
02:000036E0 51CEFFFA        	  6052:                 dbf d6,ROXx_LOOP3
02:000036E4 0C8080013980    	  6053:                 cmpi.l #$80013980,d0
02:000036EA 66FE            	  6054:                 bne.s *
02:000036EC 0C85000000C9    	  6055:                 cmpi.l #$000000C9,d5
02:000036F2 66FE            	  6056:                 bne.s *
                            	  6057: 
                            	  6058: *        WORD RIGHT
02:000036F4 203C80018FF1    	  6059:                 move.l #$80018FF1,d0
02:000036FA 7C1E            	  6060:                 move.l #$0000001E,d6
                            	  6061: ROXx_LOOP4:
02:000036FC EC70            	  6062:                 roxr.w d6,d0
02:000036FE 6186            	  6063:                 bsr ROXx_FLAGS
02:00003700 51CEFFFA        	  6064:                 dbf d6,ROXx_LOOP4
02:00003704 0C8080010A1D    	  6065:                 cmpi.l #$80010A1D,d0
02:0000370A 66FE            	  6066:                 bne.s *
02:0000370C 0C850000014D    	  6067:                 cmpi.l #$0000014D,d5
02:00003712 66FE            	  6068:                 bne.s *
                            	  6069: 
                            	  6070: 
                            	  6071: *        LONG LEFT
02:00003714 203C80018FF1    	  6072:                 move.l #$80018FF1,d0
02:0000371A 7C15            	  6073:                 moveq  #$00000015,d6
                            	  6074: ROXx_LOOP5:
02:0000371C EDB0            	  6075:                 roxl.l d6,d0
02:0000371E 6100FF66        	  6076:                 bsr ROXx_FLAGS
02:00003722 51CEFFF8        	  6077:                 dbf d6,ROXx_LOOP5
02:00003726 0C80800185D0    	  6078:                 cmpi.l #$800185D0,d0
02:0000372C 66FE            	  6079:                 bne.s *
02:0000372E 0C85000001A1    	  6080:                 cmpi.l #$000001A1,d5
02:00003734 66FE            	  6081:                 bne.s *
                            	  6082: 
                            	  6083: *        LONG RIGHT
02:00003736 203C80018FF1    	  6084:                 move.l #$80018FF1,d0
02:0000373C 7C16            	  6085:                 moveq  #$00000016,d6
                            	  6086: ROXx_LOOP6:
02:0000373E ECB0            	  6087:                 roxr.l d6,d0
02:00003740 6100FF44        	  6088:                 bsr ROXx_FLAGS
02:00003744 51CEFFF8        	  6089:                 dbf d6,ROXx_LOOP6
02:00003748 0C80082D8200    	  6090:                 cmpi.l #$082D8200,d0
02:0000374E 66FE            	  6091:                 bne.s *
02:00003750 0C85000001DE    	  6092:                 cmpi.l #$000001DE,d5
02:00003756 66FE            	  6093:                 bne.s *
                            	  6094: 
                            	  6095: 
                            	  6096: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6097: 
02:00003758 203C80018FF1    	  6098:                 move.l #$80018FF1,d0
02:0000375E 7A00            	  6099:                 moveq  #$00000000,d5
                            	  6100: 
                            	  6101: *        BYTE LEFT
02:00003760 E310            	  6102:                 roxl.b #1,d0
02:00003762 6100FF22        	  6103:                 bsr ROXx_FLAGS
02:00003766 EB10            	  6104:                 roxl.b #5,d0
02:00003768 6100FF1C        	  6105:                 bsr ROXx_FLAGS
02:0000376C EF10            	  6106:                 roxl.b #7,d0
02:0000376E 6100FF16        	  6107:                 bsr ROXx_FLAGS
02:00003772 E110            	  6108:                 roxl.b #8,d0
02:00003774 6100FF10        	  6109:                 bsr ROXx_FLAGS
02:00003778 0C8080018F09    	  6110:                 cmpi.l #$80018F09,d0
02:0000377E 66FE            	  6111:                 bne.s *
02:00003780 0C850000000B    	  6112:                 cmpi.l #$0000000B,d5
02:00003786 66FE            	  6113:                 bne.s *
                            	  6114: 
                            	  6115: *        BYTE RIGHT
02:00003788 E210            	  6116:                 roxr.b #1,d0
02:0000378A 6100FEFA        	  6117:                 bsr ROXx_FLAGS
02:0000378E EA10            	  6118:                 roxr.b #5,d0
02:00003790 6100FEF4        	  6119:                 bsr ROXx_FLAGS
02:00003794 EE10            	  6120:                 roxr.b #7,d0
02:00003796 6100FEEE        	  6121:                 bsr ROXx_FLAGS
02:0000379A E010            	  6122:                 roxr.b #8,d0
02:0000379C 6100FEE8        	  6123:                 bsr ROXx_FLAGS
02:000037A0 0C8080018F00    	  6124:                 cmpi.l #$80018F00,d0
02:000037A6 66FE            	  6125:                 bne.s *
02:000037A8 0C8500000015    	  6126:                 cmpi.l #$00000015,d5
02:000037AE 66FE            	  6127:                 bne.s *
                            	  6128: 
                            	  6129: *        WORD LEFT
02:000037B0 E350            	  6130:                 roxl.w #1,d0
02:000037B2 6100FED2        	  6131:                 bsr ROXx_FLAGS
02:000037B6 EB50            	  6132:                 roxl.w #5,d0
02:000037B8 6100FECC        	  6133:                 bsr ROXx_FLAGS
02:000037BC EF50            	  6134:                 roxl.w #7,d0
02:000037BE 6100FEC6        	  6135:                 bsr ROXx_FLAGS
02:000037C2 E150            	  6136:                 roxl.w #8,d0
02:000037C4 6100FEC0        	  6137:                 bsr ROXx_FLAGS
02:000037C8 0C808001B000    	  6138:                 cmpi.l #$8001B000,d0
02:000037CE 66FE            	  6139:                 bne.s *
02:000037D0 0C8500000027    	  6140:                 cmpi.l #$00000027,d5
02:000037D6 66FE            	  6141:                 bne.s *
                            	  6142: 
                            	  6143: *        WORD RIGHT
02:000037D8 E250            	  6144:                 roxr.w #1,d0
02:000037DA 6100FEAA        	  6145:                 bsr ROXx_FLAGS
02:000037DE EA50            	  6146:                 roxr.w #5,d0
02:000037E0 6100FEA4        	  6147:                 bsr ROXx_FLAGS
02:000037E4 EE50            	  6148:                 roxr.w #7,d0
02:000037E6 6100FE9E        	  6149:                 bsr ROXx_FLAGS
02:000037EA E050            	  6150:                 roxr.w #8,d0
02:000037EC 6100FE98        	  6151:                 bsr ROXx_FLAGS
02:000037F0 0C8080010A00    	  6152:                 cmpi.l #$80010A00,d0
02:000037F6 66FE            	  6153:                 bne.s *
02:000037F8 0C8500000028    	  6154:                 cmpi.l #$00000028,d5
02:000037FE 66FE            	  6155:                 bne.s *
                            	  6156: 
                            	  6157: *        LONG LEFT
02:00003800 E390            	  6158:                 roxl.l #1,d0
02:00003802 6100FE82        	  6159:                 bsr ROXx_FLAGS
02:00003806 EB90            	  6160:                 roxl.l #5,d0
02:00003808 6100FE7C        	  6161:                 bsr ROXx_FLAGS
02:0000380C EF90            	  6162:                 roxl.l #7,d0
02:0000380E 6100FE76        	  6163:                 bsr ROXx_FLAGS
02:00003812 E190            	  6164:                 roxl.l #8,d0
02:00003814 6100FE70        	  6165:                 bsr ROXx_FLAGS
02:00003818 0C8040000010    	  6166:                 cmpi.l #$40000010,d0
02:0000381E 66FE            	  6167:                 bne.s *
02:00003820 0C850000002A    	  6168:                 cmpi.l #$0000002A,d5
02:00003826 66FE            	  6169:                 bne.s *
                            	  6170: 
                            	  6171: *        LONG RIGHT
02:00003828 E290            	  6172:                 roxr.l #1,d0
02:0000382A 6100FE5A        	  6173:                 bsr ROXx_FLAGS
02:0000382E EA90            	  6174:                 roxr.l #5,d0
02:00003830 6100FE54        	  6175:                 bsr ROXx_FLAGS
02:00003834 EE90            	  6176:                 roxr.l #7,d0
02:00003836 6100FE4E        	  6177:                 bsr ROXx_FLAGS
02:0000383A E090            	  6178:                 roxr.l #8,d0
02:0000383C 6100FE48        	  6179:                 bsr ROXx_FLAGS
02:00003840 0C8000010200    	  6180:                 cmpi.l #$00010200,d0
02:00003846 66FE            	  6181:                 bne.s *
02:00003848 0C8500000032    	  6182:                 cmpi.l #$00000032,d5
02:0000384E 66FE            	  6183:                 bne.s *
                            	  6184: 
                            	  6185: 
                            	  6186: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6187: 
02:00003850 7A00            	  6188:                 moveq  #$00000000,d5
02:00003852 307C0100        	  6189:                 move.l #$00000100,a0
02:00003856 30BC8FF1        	  6190:                 move.w #$8FF1,(a0)
                            	  6191: 
                            	  6192: *        WORD LEFT
02:0000385A E5D0            	  6193:                 roxl (a0)
02:0000385C 6100FE28        	  6194:                 bsr ROXx_FLAGS
02:00003860 E5D0            	  6195:                 roxl (a0)
02:00003862 6100FE22        	  6196:                 bsr ROXx_FLAGS
02:00003866 E5D0            	  6197:                 roxl (a0)
02:00003868 6100FE1C        	  6198:                 bsr ROXx_FLAGS
02:0000386C E5D0            	  6199:                 roxl (a0)
02:0000386E 6100FE16        	  6200:                 bsr ROXx_FLAGS
02:00003872 3010            	  6201:                 move.w (a0),d0
02:00003874 0C800001FF10    	  6202:                 cmpi.l #$0001FF10,d0
02:0000387A 66FE            	  6203:                 bne.s *
02:0000387C 0C8500000009    	  6204:                 cmpi.l #$00000009,d5
02:00003882 66FE            	  6205:                 bne.s *
                            	  6206: 
                            	  6207: *        WORD RIGHT
02:00003884 E4D0            	  6208:                 roxr (a0)
02:00003886 6100FDFE        	  6209:                 bsr ROXx_FLAGS
02:0000388A E4D0            	  6210:                 roxr (a0)
02:0000388C 6100FDF8        	  6211:                 bsr ROXx_FLAGS
02:00003890 E4D0            	  6212:                 roxr (a0)
02:00003892 6100FDF2        	  6213:                 bsr ROXx_FLAGS
02:00003896 E4D0            	  6214:                 roxr (a0)
02:00003898 6100FDEC        	  6215:                 bsr ROXx_FLAGS
02:0000389C E4D0            	  6216:                 roxr (a0)
02:0000389E 6100FDE6        	  6217:                 bsr ROXx_FLAGS
02:000038A2 E4D0            	  6218:                 roxr (a0)
02:000038A4 6100FDE0        	  6219:                 bsr ROXx_FLAGS
02:000038A8 3010            	  6220:                 move.w (a0),d0
02:000038AA 0C80000103FC    	  6221:                 cmpi.l #$000103FC,d0
02:000038B0 66FE            	  6222:                 bne.s *
02:000038B2 0C850000000A    	  6223:                 cmpi.l #$0000000A,d5
02:000038B8 66FE            	  6224:                 bne.s *
                            	  6225: 
02:000038BA 4E75            	  6226:                 rts
                            	  6227: 
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: *-----------------------------------------------------------
                            	  6232: *-----------------------------------------------------------
                            	  6233: * OPCODE : SHIFTS
                            	  6234: *-----------------------------------------------------------
                            	  6235: *-----------------------------------------------------------
                            	  6236: 
                            	  6237: *     Subroutine to check and accumulate the flags
02:000038BC 40C3            	  6238: SHIFTS_FLAGS:   move.w sr,d3
02:000038BE 02830000000F    	  6239:                 andi.l #$0F,d3            * Isolate flags
02:000038C4 DA83            	  6240:                 add.l d3,d5               * Copy flag results into accumulator
02:000038C6 4E75            	  6241:                 rts
                            	  6242: 
                            	  6243: op_SHIFTS:
                            	  6244: 
                            	  6245: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6246: 
                            	  6247: *        BYTE LEFT
02:000038C8 203C80018F81    	  6248:                 move.l #$80018F81,d0
02:000038CE 7A00            	  6249:                 moveq  #$00000000,d5
02:000038D0 7C02            	  6250:                 moveq  #$00000002,d6
                            	  6251: SHIFTS_LOOP1:
02:000038D2 ED20            	  6252:                 asl.b d6,d0
02:000038D4 61E6            	  6253:                 bsr SHIFTS_FLAGS
02:000038D6 51CEFFFA        	  6254:                 dbf d6,SHIFTS_LOOP1
02:000038DA 0C8080018F08    	  6255:                 cmpi.l #$80018F08,d0
02:000038E0 66FE            	  6256:                 bne.s *
02:000038E2 0C8500000002    	  6257:                 cmpi.l #$00000002,d5
02:000038E8 66FE            	  6258:                 bne.s *
                            	  6259: 
                            	  6260: *        BYTE RIGHT
02:000038EA 203C80018F81    	  6261:                 move.l #$80018F81,d0
02:000038F0 7C02            	  6262:                 moveq  #$00000002,d6
                            	  6263: SHIFTS_LOOP2:
02:000038F2 EC20            	  6264:                 asr.b d6,d0
02:000038F4 61C6            	  6265:                 bsr SHIFTS_FLAGS
02:000038F6 51CEFFFA        	  6266:                 dbf d6,SHIFTS_LOOP2
02:000038FA 0C8080018FF0    	  6267:                 cmpi.l #$80018FF0,d0
02:00003900 66FE            	  6268:                 bne.s *
02:00003902 0C850000001A    	  6269:                 cmpi.l #$0000001A,d5
02:00003908 66FE            	  6270:                 bne.s *
                            	  6271: 
                            	  6272: 
                            	  6273: *        WORD LEFT
02:0000390A 203C80018FF1    	  6274:                 move.l #$80018FF1,d0
02:00003910 7C02            	  6275:                 moveq  #$00000002,d6
                            	  6276: SHIFTS_LOOP3:
02:00003912 ED60            	  6277:                 asl.w d6,d0
02:00003914 61A6            	  6278:                 bsr SHIFTS_FLAGS
02:00003916 51CEFFFA        	  6279:                 dbf d6,SHIFTS_LOOP3
02:0000391A 0C8080017F88    	  6280:                 cmpi.l #$80017F88,d0
02:00003920 66FE            	  6281:                 bne.s *
02:00003922 0C850000001C    	  6282:                 cmpi.l #$0000001C,d5
02:00003928 66FE            	  6283:                 bne.s *
                            	  6284: 
                            	  6285: *        WORD RIGHT
02:0000392A 203C80018FF1    	  6286:                 move.l #$80018FF1,d0
02:00003930 7C02            	  6287:                 moveq  #$00000002,d6
                            	  6288: SHIFTS_LOOP4:
02:00003932 EC60            	  6289:                 asr.w d6,d0
02:00003934 6186            	  6290:                 bsr SHIFTS_FLAGS
02:00003936 51CEFFFA        	  6291:                 dbf d6,SHIFTS_LOOP4
02:0000393A 0C808001F1FE    	  6292:                 cmpi.l #$8001F1FE,d0
02:00003940 66FE            	  6293:                 bne.s *
02:00003942 0C8500000034    	  6294:                 cmpi.l #$00000034,d5
02:00003948 66FE            	  6295:                 bne.s *
                            	  6296: 
                            	  6297: 
                            	  6298: *        LONG LEFT
02:0000394A 203C80018FF1    	  6299:                 move.l #$80018FF1,d0
02:00003950 7C02            	  6300:                 moveq  #$00000002,d6
                            	  6301: SHIFTS_LOOP5:
02:00003952 EDA0            	  6302:                 asl.l d6,d0
02:00003954 6100FF66        	  6303:                 bsr SHIFTS_FLAGS
02:00003958 51CEFFF8        	  6304:                 dbf d6,SHIFTS_LOOP5
02:0000395C 0C80000C7F88    	  6305:                 cmpi.l #$000C7F88,d0
02:00003962 66FE            	  6306:                 bne.s *
02:00003964 0C8500000036    	  6307:                 cmpi.l #$00000036,d5
02:0000396A 66FE            	  6308:                 bne.s *
                            	  6309: 
                            	  6310: *        LONG RIGHT
02:0000396C 203C80018FF1    	  6311:                 move.l #$80018FF1,d0
02:00003972 7C02            	  6312:                 moveq  #$00000002,d6
                            	  6313: SHIFTS_LOOP6:
02:00003974 ECA0            	  6314:                 asr.l d6,d0
02:00003976 6100FF44        	  6315:                 bsr SHIFTS_FLAGS
02:0000397A 51CEFFF8        	  6316:                 dbf d6,SHIFTS_LOOP6
02:0000397E 0C80F00031FE    	  6317:                 cmpi.l #$F00031FE,d0
02:00003984 66FE            	  6318:                 bne.s *
02:00003986 0C850000004E    	  6319:                 cmpi.l #$0000004E,d5
02:0000398C 66FE            	  6320:                 bne.s *
                            	  6321: 
                            	  6322: 
                            	  6323: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6324: 
02:0000398E 203C80018FF1    	  6325:                 move.l #$80018FF1,d0
02:00003994 7A00            	  6326:                 moveq  #$00000000,d5
                            	  6327: 
                            	  6328: *        BYTE LEFT
02:00003996 D000            	  6329:                 asl.b #1,d0
02:00003998 6100FF22        	  6330:                 bsr SHIFTS_FLAGS
02:0000399C E500            	  6331:                 asl.b #2,d0
02:0000399E 6100FF1C        	  6332:                 bsr SHIFTS_FLAGS
02:000039A2 D000            	  6333:                 asl.b #1,d0
02:000039A4 6100FF16        	  6334:                 bsr SHIFTS_FLAGS
02:000039A8 E700            	  6335:                 asl.b #3,d0
02:000039AA 6100FF10        	  6336:                 bsr SHIFTS_FLAGS
02:000039AE 0C8080018F80    	  6337:                 cmpi.l #$80018F80,d0
02:000039B4 66FE            	  6338:                 bne.s *
02:000039B6 0C850000001F    	  6339:                 cmpi.l #$0000001F,d5
02:000039BC 66FE            	  6340:                 bne.s *
                            	  6341: 
                            	  6342: *        BYTE RIGHT
02:000039BE E200            	  6343:                 asr.b #1,d0
02:000039C0 6100FEFA        	  6344:                 bsr SHIFTS_FLAGS
02:000039C4 E400            	  6345:                 asr.b #2,d0
02:000039C6 6100FEF4        	  6346:                 bsr SHIFTS_FLAGS
02:000039CA E600            	  6347:                 asr.b #3,d0
02:000039CC 6100FEEE        	  6348:                 bsr SHIFTS_FLAGS
02:000039D0 E200            	  6349:                 asr.b #1,d0
02:000039D2 6100FEE8        	  6350:                 bsr SHIFTS_FLAGS
02:000039D6 0C8080018FFF    	  6351:                 cmpi.l #$80018FFF,d0
02:000039DC 66FE            	  6352:                 bne.s *
02:000039DE 0C850000003F    	  6353:                 cmpi.l #$0000003F,d5
02:000039E4 66FE            	  6354:                 bne.s *
                            	  6355: 
                            	  6356: *        WORD LEFT
02:000039E6 D040            	  6357:                 asl.w #1,d0
02:000039E8 6100FED2        	  6358:                 bsr SHIFTS_FLAGS
02:000039EC E540            	  6359:                 asl.w #2,d0
02:000039EE 6100FECC        	  6360:                 bsr SHIFTS_FLAGS
02:000039F2 E740            	  6361:                 asl.w #3,d0
02:000039F4 6100FEC6        	  6362:                 bsr SHIFTS_FLAGS
02:000039F8 EB40            	  6363:                 asl.w #5,d0
02:000039FA 6100FEC0        	  6364:                 bsr SHIFTS_FLAGS
02:000039FE 0C808001F800    	  6365:                 cmpi.l #$8001F800,d0
02:00003A04 66FE            	  6366:                 bne.s *
02:00003A06 0C8500000056    	  6367:                 cmpi.l #$00000056,d5
02:00003A0C 66FE            	  6368:                 bne.s *
                            	  6369: 
                            	  6370: *        WORD RIGHT
02:00003A0E EA40            	  6371:                 asr.w #5,d0
02:00003A10 6100FEAA        	  6372:                 bsr SHIFTS_FLAGS
02:00003A14 E240            	  6373:                 asr.w #1,d0
02:00003A16 6100FEA4        	  6374:                 bsr SHIFTS_FLAGS
02:00003A1A E440            	  6375:                 asr.w #2,d0
02:00003A1C 6100FE9E        	  6376:                 bsr SHIFTS_FLAGS
02:00003A20 E840            	  6377:                 asr.w #4,d0
02:00003A22 6100FE98        	  6378:                 bsr SHIFTS_FLAGS
02:00003A26 0C808001FFFF    	  6379:                 cmpi.l #$8001FFFF,d0
02:00003A2C 66FE            	  6380:                 bne.s *
02:00003A2E 0C8500000077    	  6381:                 cmpi.l #$00000077,d5
02:00003A34 66FE            	  6382:                 bne.s *
                            	  6383: 
                            	  6384: *        LONG LEFT
02:00003A36 203C80018FF1    	  6385:                 move.l #$80018FF1,d0
02:00003A3C D080            	  6386:                 asl.l #1,d0
02:00003A3E 6100FE7C        	  6387:                 bsr SHIFTS_FLAGS
02:00003A42 E580            	  6388:                 asl.l #2,d0
02:00003A44 6100FE76        	  6389:                 bsr SHIFTS_FLAGS
02:00003A48 EF80            	  6390:                 asl.l #7,d0
02:00003A4A 6100FE70        	  6391:                 bsr SHIFTS_FLAGS
02:00003A4E E980            	  6392:                 asl.l #4,d0
02:00003A50 6100FE6A        	  6393:                 bsr SHIFTS_FLAGS
02:00003A54 0C8063FC4000    	  6394:                 cmpi.l #$63FC4000,d0
02:00003A5A 66FE            	  6395:                 bne.s *
02:00003A5C 0C850000007A    	  6396:                 cmpi.l #$0000007A,d5
02:00003A62 66FE            	  6397:                 bne.s *
                            	  6398: 
                            	  6399: *        LONG RIGHT
02:00003A64 203C80018FF1    	  6400:                 move.l #$80018FF1,d0
02:00003A6A E280            	  6401:                 asr.l #1,d0
02:00003A6C 6100FE4E        	  6402:                 bsr SHIFTS_FLAGS
02:00003A70 EA80            	  6403:                 asr.l #5,d0
02:00003A72 6100FE48        	  6404:                 bsr SHIFTS_FLAGS
02:00003A76 EE80            	  6405:                 asr.l #7,d0
02:00003A78 6100FE42        	  6406:                 bsr SHIFTS_FLAGS
02:00003A7C E080            	  6407:                 asr.l #8,d0
02:00003A7E 6100FE3C        	  6408:                 bsr SHIFTS_FLAGS
02:00003A82 0C80FFFFFC00    	  6409:                 cmpi.l #$FFFFFC00,d0
02:00003A88 66FE            	  6410:                 bne.s *
02:00003A8A 0C850000009C    	  6411:                 cmpi.l #$0000009C,d5
02:00003A90 66FE            	  6412:                 bne.s *
                            	  6413: 
                            	  6414: 
                            	  6415: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6416: 
02:00003A92 7A00            	  6417:                 moveq  #$00000000,d5
02:00003A94 307C0100        	  6418:                 move.l #$00000100,a0
02:00003A98 30BC8FF1        	  6419:                 move.w #$8FF1,(a0)
                            	  6420: 
                            	  6421: *        WORD LEFT
02:00003A9C E1D0            	  6422:                 asl  (a0)
02:00003A9E 6100FE1C        	  6423:                 bsr SHIFTS_FLAGS
02:00003AA2 E1D0            	  6424:                 asl  (a0)
02:00003AA4 6100FE16        	  6425:                 bsr SHIFTS_FLAGS
02:00003AA8 E1D0            	  6426:                 asl  (a0)
02:00003AAA 6100FE10        	  6427:                 bsr SHIFTS_FLAGS
02:00003AAE E1D0            	  6428:                 asl  (a0)
02:00003AB0 6100FE0A        	  6429:                 bsr SHIFTS_FLAGS
02:00003AB4 3010            	  6430:                 move.w (a0),d0
02:00003AB6 0C80FFFFFF10    	  6431:                 cmpi.l #$FFFFFF10,d0
02:00003ABC 66FE            	  6432:                 bne.s *
02:00003ABE 0C850000000D    	  6433:                 cmpi.l #$0000000D,d5
02:00003AC4 66FE            	  6434:                 bne.s *
                            	  6435: 
                            	  6436: *        WORD RIGHT
02:00003AC6 E0D0            	  6437:                 asr (a0)
02:00003AC8 6100FDF2        	  6438:                 bsr SHIFTS_FLAGS
02:00003ACC E0D0            	  6439:                 asr (a0)
02:00003ACE 6100FDEC        	  6440:                 bsr SHIFTS_FLAGS
02:00003AD2 E0D0            	  6441:                 asr (a0)
02:00003AD4 6100FDE6        	  6442:                 bsr SHIFTS_FLAGS
02:00003AD8 E0D0            	  6443:                 asr (a0)
02:00003ADA 6100FDE0        	  6444:                 bsr SHIFTS_FLAGS
02:00003ADE E0D0            	  6445:                 asr (a0)
02:00003AE0 6100FDDA        	  6446:                 bsr SHIFTS_FLAGS
02:00003AE4 E0D0            	  6447:                 asr (a0)
02:00003AE6 6100FDD4        	  6448:                 bsr SHIFTS_FLAGS
02:00003AEA 3010            	  6449:                 move.w (a0),d0
02:00003AEC 0C80FFFFFFFC    	  6450:                 cmpi.l #$FFFFFFFC,d0
02:00003AF2 66FE            	  6451:                 bne.s *
02:00003AF4 0C850000003E    	  6452:                 cmpi.l #$0000003E,d5
02:00003AFA 66FE            	  6453:                 bne.s *
                            	  6454: 
02:00003AFC 4E75            	  6455:                 rts
                            	  6456: 
                            	  6457: 
                            	  6458: 
                            	  6459: *-----------------------------------------------------------
                            	  6460: *-----------------------------------------------------------
                            	  6461: * OPCODE : SHIFTS2
                            	  6462: *-----------------------------------------------------------
                            	  6463: *-----------------------------------------------------------
                            	  6464: 
                            	  6465: *     Subroutine to check and accumulate the flags
02:00003AFE 40C3            	  6466: SHIFTS2_FLAGS:  move.w sr,d3
02:00003B00 02830000000F    	  6467:                 andi.l #$0F,d3            * Isolate flags
02:00003B06 DA83            	  6468:                 add.l d3,d5               * Copy flag results into accumulator
02:00003B08 4E75            	  6469:                 rts
                            	  6470: 
                            	  6471: op_SHIFTS2:
                            	  6472: 
                            	  6473: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6474: 
                            	  6475: *        BYTE LEFT
02:00003B0A 203C80018F81    	  6476:                 move.l #$80018F81,d0
02:00003B10 7A00            	  6477:                 moveq  #$00000000,d5
02:00003B12 7C02            	  6478:                 moveq  #$00000002,d6
                            	  6479: SHIFTS2_LOOP1:
02:00003B14 ED28            	  6480:                 lsl.b d6,d0
02:00003B16 61E6            	  6481:                 bsr SHIFTS2_FLAGS
02:00003B18 51CEFFFA        	  6482:                 dbf d6,SHIFTS2_LOOP1
02:00003B1C 0C8080018F08    	  6483:                 cmpi.l #$80018F08,d0
02:00003B22 66FE            	  6484:                 bne.s *
02:00003B24 4A85            	  6485:                 cmpi.l #$00000000,d5
02:00003B26 66FE            	  6486:                 bne.s *
                            	  6487: 
                            	  6488: *        BYTE RIGHT
02:00003B28 203C80018F81    	  6489:                 move.l #$80018F81,d0
02:00003B2E 7C02            	  6490:                 moveq  #$00000002,d6
                            	  6491: SHIFTS2_LOOP2:
02:00003B30 EC28            	  6492:                 lsr.b d6,d0
02:00003B32 61CA            	  6493:                 bsr SHIFTS2_FLAGS
02:00003B34 51CEFFFA        	  6494:                 dbf d6,SHIFTS2_LOOP2
02:00003B38 0C8080018F10    	  6495:                 cmpi.l #$80018F10,d0
02:00003B3E 66FE            	  6496:                 bne.s *
02:00003B40 4A85            	  6497:                 cmpi.l #$00000000,d5
02:00003B42 66FE            	  6498:                 bne.s *
                            	  6499: 
                            	  6500: 
                            	  6501: *        WORD LEFT
02:00003B44 203C80018FF1    	  6502:                 move.l #$80018FF1,d0
02:00003B4A 7C02            	  6503:                 moveq  #$00000002,d6
                            	  6504: SHIFTS2_LOOP3:
02:00003B4C ED68            	  6505:                 lsl.w d6,d0
02:00003B4E 61AE            	  6506:                 bsr SHIFTS2_FLAGS
02:00003B50 51CEFFFA        	  6507:                 dbf d6,SHIFTS2_LOOP3
02:00003B54 0C8080017F88    	  6508:                 cmpi.l #$80017F88,d0
02:00003B5A 66FE            	  6509:                 bne.s *
02:00003B5C 4A85            	  6510:                 cmpi.l #$00000000,d5
02:00003B5E 66FE            	  6511:                 bne.s *
                            	  6512: 
                            	  6513: *        WORD RIGHT
02:00003B60 203C80018FF1    	  6514:                 move.l #$80018FF1,d0
02:00003B66 7C02            	  6515:                 moveq  #$00000002,d6
                            	  6516: SHIFTS2_LOOP4:
02:00003B68 EC68            	  6517:                 lsr.w d6,d0
02:00003B6A 6192            	  6518:                 bsr SHIFTS2_FLAGS
02:00003B6C 51CEFFFA        	  6519:                 dbf d6,SHIFTS2_LOOP4
02:00003B70 0C80800111FE    	  6520:                 cmpi.l #$800111FE,d0
02:00003B76 66FE            	  6521:                 bne.s *
02:00003B78 4A85            	  6522:                 cmpi.l #$00000000,d5
02:00003B7A 66FE            	  6523:                 bne.s *
                            	  6524: 
                            	  6525: 
                            	  6526: *        LONG LEFT
02:00003B7C 203C80018FF1    	  6527:                 move.l #$80018FF1,d0
02:00003B82 7C02            	  6528:                 moveq  #$00000002,d6
                            	  6529: SHIFTS2_LOOP5:
02:00003B84 EDA8            	  6530:                 lsl.l d6,d0
02:00003B86 6100FF76        	  6531:                 bsr SHIFTS2_FLAGS
02:00003B8A 51CEFFF8        	  6532:                 dbf d6,SHIFTS2_LOOP5
02:00003B8E 0C80000C7F88    	  6533:                 cmpi.l #$000C7F88,d0
02:00003B94 66FE            	  6534:                 bne.s *
02:00003B96 4A85            	  6535:                 cmpi.l #$00000000,d5
02:00003B98 66FE            	  6536:                 bne.s *
                            	  6537: 
                            	  6538: *        LONG RIGHT
02:00003B9A 203C80018FF1    	  6539:                 move.l #$80018FF1,d0
02:00003BA0 7C02            	  6540:                 moveq  #$00000002,d6
                            	  6541: SHIFTS2_LOOP6:
02:00003BA2 ECA8            	  6542:                 lsr.l d6,d0
02:00003BA4 6100FF58        	  6543:                 bsr SHIFTS2_FLAGS
02:00003BA8 51CEFFF8        	  6544:                 dbf d6,SHIFTS2_LOOP6
02:00003BAC 0C80100031FE    	  6545:                 cmpi.l #$100031FE,d0
02:00003BB2 66FE            	  6546:                 bne.s *
02:00003BB4 4A85            	  6547:                 cmpi.l #$00000000,d5
02:00003BB6 66FE            	  6548:                 bne.s *
                            	  6549: 
                            	  6550: 
                            	  6551: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6552: 
02:00003BB8 203C80018FF1    	  6553:                 move.l #$80018FF1,d0
02:00003BBE 7A00            	  6554:                 moveq  #$00000000,d5
                            	  6555: 
                            	  6556: *        BYTE LEFT
02:00003BC0 E308            	  6557:                 lsl.b #1,d0
02:00003BC2 6100FF3A        	  6558:                 bsr SHIFTS2_FLAGS
02:00003BC6 E508            	  6559:                 lsl.b #2,d0
02:00003BC8 6100FF34        	  6560:                 bsr SHIFTS2_FLAGS
02:00003BCC E308            	  6561:                 lsl.b #1,d0
02:00003BCE 6100FF2E        	  6562:                 bsr SHIFTS2_FLAGS
02:00003BD2 E708            	  6563:                 lsl.b #3,d0
02:00003BD4 6100FF28        	  6564:                 bsr SHIFTS2_FLAGS
02:00003BD8 0C8080018F80    	  6565:                 cmpi.l #$80018F80,d0
02:00003BDE 66FE            	  6566:                 bne.s *
02:00003BE0 0C850000001B    	  6567:                 cmpi.l #$0000001B,d5
02:00003BE6 66FE            	  6568:                 bne.s *
                            	  6569: 
                            	  6570: *        BYTE RIGHT
02:00003BE8 E208            	  6571:                 lsr.b #1,d0
02:00003BEA 6100FF12        	  6572:                 bsr SHIFTS2_FLAGS
02:00003BEE E408            	  6573:                 lsr.b #2,d0
02:00003BF0 6100FF0C        	  6574:                 bsr SHIFTS2_FLAGS
02:00003BF4 E608            	  6575:                 lsr.b #3,d0
02:00003BF6 6100FF06        	  6576:                 bsr SHIFTS2_FLAGS
02:00003BFA E208            	  6577:                 lsr.b #1,d0
02:00003BFC 6100FF00        	  6578:                 bsr SHIFTS2_FLAGS
02:00003C00 0C8080018F01    	  6579:                 cmpi.l #$80018F01,d0
02:00003C06 66FE            	  6580:                 bne.s *
02:00003C08 0C850000001B    	  6581:                 cmpi.l #$0000001B,d5
02:00003C0E 66FE            	  6582:                 bne.s *
                            	  6583: 
                            	  6584: *        WORD LEFT
02:00003C10 E348            	  6585:                 lsl.w #1,d0
02:00003C12 6100FEEA        	  6586:                 bsr SHIFTS2_FLAGS
02:00003C16 E548            	  6587:                 lsl.w #2,d0
02:00003C18 6100FEE4        	  6588:                 bsr SHIFTS2_FLAGS
02:00003C1C E748            	  6589:                 lsl.w #3,d0
02:00003C1E 6100FEDE        	  6590:                 bsr SHIFTS2_FLAGS
02:00003C22 EB48            	  6591:                 lsl.w #5,d0
02:00003C24 6100FED8        	  6592:                 bsr SHIFTS2_FLAGS
02:00003C28 0C8080010800    	  6593:                 cmpi.l #$80010800,d0
02:00003C2E 66FE            	  6594:                 bne.s *
02:00003C30 0C8500000025    	  6595:                 cmpi.l #$00000025,d5
02:00003C36 66FE            	  6596:                 bne.s *
                            	  6597: 
                            	  6598: *        WORD RIGHT
02:00003C38 EA48            	  6599:                 lsr.w #5,d0
02:00003C3A 6100FEC2        	  6600:                 bsr SHIFTS2_FLAGS
02:00003C3E E248            	  6601:                 lsr.w #1,d0
02:00003C40 6100FEBC        	  6602:                 bsr SHIFTS2_FLAGS
02:00003C44 E448            	  6603:                 lsr.w #2,d0
02:00003C46 6100FEB6        	  6604:                 bsr SHIFTS2_FLAGS
02:00003C4A E848            	  6605:                 lsr.w #4,d0
02:00003C4C 6100FEB0        	  6606:                 bsr SHIFTS2_FLAGS
02:00003C50 0C8080010000    	  6607:                 cmpi.l #$80010000,d0
02:00003C56 66FE            	  6608:                 bne.s *
02:00003C58 0C850000002A    	  6609:                 cmpi.l #$0000002A,d5
02:00003C5E 66FE            	  6610:                 bne.s *
                            	  6611: 
                            	  6612: *        LONG LEFT
02:00003C60 203C80018FF1    	  6613:                 move.l #$80018FF1,d0
02:00003C66 E388            	  6614:                 lsl.l #1,d0
02:00003C68 6100FE94        	  6615:                 bsr SHIFTS2_FLAGS
02:00003C6C E588            	  6616:                 lsl.l #2,d0
02:00003C6E 6100FE8E        	  6617:                 bsr SHIFTS2_FLAGS
02:00003C72 EF88            	  6618:                 lsl.l #7,d0
02:00003C74 6100FE88        	  6619:                 bsr SHIFTS2_FLAGS
02:00003C78 E988            	  6620:                 lsl.l #4,d0
02:00003C7A 6100FE82        	  6621:                 bsr SHIFTS2_FLAGS
02:00003C7E 0C8063FC4000    	  6622:                 cmpi.l #$63FC4000,d0
02:00003C84 66FE            	  6623:                 bne.s *
02:00003C86 0C850000002B    	  6624:                 cmpi.l #$0000002B,d5
02:00003C8C 66FE            	  6625:                 bne.s *
                            	  6626: 
                            	  6627: *        LONG RIGHT
02:00003C8E 203C80018FF1    	  6628:                 move.l #$80018FF1,d0
02:00003C94 E288            	  6629:                 lsr.l #1,d0
02:00003C96 6100FE66        	  6630:                 bsr SHIFTS2_FLAGS
02:00003C9A EA88            	  6631:                 lsr.l #5,d0
02:00003C9C 6100FE60        	  6632:                 bsr SHIFTS2_FLAGS
02:00003CA0 EE88            	  6633:                 lsr.l #7,d0
02:00003CA2 6100FE5A        	  6634:                 bsr SHIFTS2_FLAGS
02:00003CA6 E088            	  6635:                 lsr.l #8,d0
02:00003CA8 6100FE54        	  6636:                 bsr SHIFTS2_FLAGS
02:00003CAC 0C8000000400    	  6637:                 cmpi.l #$00000400,d0
02:00003CB2 66FE            	  6638:                 bne.s *
02:00003CB4 0C850000002D    	  6639:                 cmpi.l #$0000002D,d5
02:00003CBA 66FE            	  6640:                 bne.s *
                            	  6641: 
                            	  6642: 
                            	  6643: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6644: 
02:00003CBC 7A00            	  6645:                 moveq  #$00000000,d5
02:00003CBE 307C0100        	  6646:                 move.l #$00000100,a0
02:00003CC2 30BC8FF1        	  6647:                 move.w #$8FF1,(a0)
                            	  6648: 
                            	  6649: *        WORD LEFT
02:00003CC6 E3D0            	  6650:                 lsl  (a0)
02:00003CC8 6100FE34        	  6651:                 bsr SHIFTS2_FLAGS
02:00003CCC E3D0            	  6652:                 lsl  (a0)
02:00003CCE 6100FE2E        	  6653:                 bsr SHIFTS2_FLAGS
02:00003CD2 E3D0            	  6654:                 lsl  (a0)
02:00003CD4 6100FE28        	  6655:                 bsr SHIFTS2_FLAGS
02:00003CD8 E3D0            	  6656:                 lsl  (a0)
02:00003CDA 6100FE22        	  6657:                 bsr SHIFTS2_FLAGS
02:00003CDE 3010            	  6658:                 move.w (a0),d0
02:00003CE0 0C800000FF10    	  6659:                 cmpi.l #$0000FF10,d0
02:00003CE6 66FE            	  6660:                 bne.s *
02:00003CE8 0C8500000009    	  6661:                 cmpi.l #$00000009,d5
02:00003CEE 66FE            	  6662:                 bne.s *
                            	  6663: 
                            	  6664: *        WORD RIGHT
02:00003CF0 E2D0            	  6665:                 lsr (a0)
02:00003CF2 6100FE0A        	  6666:                 bsr SHIFTS2_FLAGS
02:00003CF6 E2D0            	  6667:                 lsr (a0)
02:00003CF8 6100FE04        	  6668:                 bsr SHIFTS2_FLAGS
02:00003CFC E2D0            	  6669:                 lsr (a0)
02:00003CFE 6100FDFE        	  6670:                 bsr SHIFTS2_FLAGS
02:00003D02 E2D0            	  6671:                 lsr (a0)
02:00003D04 6100FDF8        	  6672:                 bsr SHIFTS2_FLAGS
02:00003D08 E2D0            	  6673:                 lsr (a0)
02:00003D0A 6100FDF2        	  6674:                 bsr SHIFTS2_FLAGS
02:00003D0E E2D0            	  6675:                 lsr (a0)
02:00003D10 6100FDEC        	  6676:                 bsr SHIFTS2_FLAGS
02:00003D14 3010            	  6677:                 move.w (a0),d0
02:00003D16 0C80000003FC    	  6678:                 cmpi.l #$000003FC,d0
02:00003D1C 66FE            	  6679:                 bne.s *
02:00003D1E 0C850000000A    	  6680:                 cmpi.l #$0000000A,d5
02:00003D24 66FE            	  6681:                 bne.s *
                            	  6682: 
02:00003D26 4E75            	  6683:                 rts
                            	  6684: 
                            	  6685: ;-----------------------------------------------------------
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ; OPCODE : BSR / RTS
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ;-----------------------------------------------------------
                            	  6690: 
                            	  6691: ;t3_bsr:
                            	  6692: ;	moveq	#3,d3
                            	  6693: ;	rts
                            	  6694: 
                            	  6695: ;t1_bsr:
                            	  6696: ;	moveq	#1,d1
                            	  6697: ;	rts
                            	  6698: 
                            	  6699: ;op_bsr:
                            	  6700: ;	bsr			t1_bsr
                            	  6701: ;	bsr			t2_bsr
                            	  6702: ;	bsr.w		t3_bsr
                            	  6703: ;	bsr.w		t4_bsr
                            	  6704: ;	cmpi.l	#1,d1
                            	  6705: ;	bne			*
                            	  6706: ;	cmpi.l	#2,d2
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#3,d3
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#4,d4
                            	  6711: ;	bne			*
                            	  6712: ;	rts
                            	  6713: 
                            	  6714: ;t2_bsr:
                            	  6715: ;	moveq	#2,d2
                            	  6716: ;	rts
                            	  6717: 	
                            	  6718: ;t4_bsr:
                            	  6719: ;	moveq	#4,d4
                            	  6720: ;	rts
                            	  6721: *    END
                            	  6722:     
                            	  6723: 

Source: "boot.asm"
                            	   566: 
                            	   567: ; -----------------------------------------------------------------------------
                            	   568: ; Gets the screen color in d0 and d1.
                            	   569: ; -----------------------------------------------------------------------------
                            	   570: 
                            	   571: get_screen_color:
02:00003D28 203900040084    	   572: 	move.l	fgColor,d0			; get foreground color
02:00003D2E EB80            	   573: 	asl.l		#5,d0						; shift into position
02:00003D30 008040000000    	   574: 	ori.l		#$40000000,d0		; set priority
02:00003D36 223900040088    	   575: 	move.l	bkColor,d1
02:00003D3C E089            	   576: 	lsr.l		#8,d1
02:00003D3E E089            	   577: 	lsr.l		#8,d1
02:00003D40 02810000001F    	   578: 	andi.l	#31,d1					; mask off extra bits
02:00003D46 8081            	   579: 	or.l		d1,d0						; set background color bits in upper long word
02:00003D48 223900040088    	   580: 	move.l	bkColor,d1			; get background color
02:00003D4E E181            	   581: 	asl.l		#8,d1						; shift into position for display ram
02:00003D50 E181            	   582: 	asl.l		#8,d1
02:00003D52 4E75            	   583: 	rts
                            	   584: 
                            	   585: ; -----------------------------------------------------------------------------
                            	   586: ; -----------------------------------------------------------------------------
                            	   587: 
                            	   588: get_screen_address:
02:00003D54 207900040004    	   589: 	move.l	TextScr,a0
02:00003D5A 4E75            	   590: 	rts
                            	   591: 	
                            	   592: ; -----------------------------------------------------------------------------
                            	   593: ; -----------------------------------------------------------------------------
                            	   594: 
                            	   595: clear_screen:
02:00003D5C 48E7E080        	   596: 	movem.l	d0/d1/d2/a0,-(a7)
02:00003D60 4E7A0FE0        	   597: 	movec		coreno,d0
02:00003D64 4840            	   598: 	swap		d0	
02:00003D66 7205            	   599: 	moveq		#SCREEN_SEMA,d1
02:00003D68 6100C40C        	   600: 	bsr			LockSemaphore
02:00003D6C 61E6            	   601: 	bsr			get_screen_address	; a0 = pointer to screen area
02:00003D6E 10390004008C    	   602: 	move.b	TextRows,d0					; d0 = rows
02:00003D74 14390004008D    	   603: 	move.b	TextCols,d2					; d2 = cols
02:00003D7A 4880            	   604: 	ext.w		d0									; convert to word
02:00003D7C 4882            	   605: 	ext.w		d2									; convert to word
02:00003D7E C4C0            	   606: 	mulu		d0,d2								; d2 = number of character cells to clear
02:00003D80 61A6            	   607: 	bsr			get_screen_color		; get the color bits
02:00003D82 00410020        	   608: 	ori.w		#32,d1							; load space character
02:00003D86 E159            	   609: 	rol.w		#8,d1								; swap endian, text controller expects little endian
02:00003D88 4841            	   610: 	swap		d1
02:00003D8A E159            	   611: 	rol.w		#8,d1
02:00003D8C E158            	   612: 	rol.w		#8,d0								; swap endian
02:00003D8E 4840            	   613: 	swap		d0
02:00003D90 E158            	   614: 	rol.w		#8,d0
                            	   615: loop3:
02:00003D92 20C1            	   616: 	move.l	d1,(a0)+						; copy char plus bkcolor to cell
02:00003D94 20C0            	   617: 	move.l	d0,(a0)+					; copy fgcolor to cell
02:00003D96 51CAFFFA        	   618: 	dbra		d2,loop3
02:00003D9A 4E7A0FE0        	   619: 	movec		coreno,d0
02:00003D9E 4840            	   620: 	swap		d0	
02:00003DA0 7205            	   621: 	moveq		#SCREEN_SEMA,d1
02:00003DA2 6100C40C        	   622: 	bsr			UnlockSemaphore
02:00003DA6 4CDF0107        	   623: 	movem.l	(a7)+,d0/d1/d2/a0
02:00003DAA 4E75            	   624: 	rts
                            	   625: 
                            	   626: CRLF:
02:00003DAC 2F01            	   627: 	move.l	d1,-(a7)
02:00003DAE 123C000D        	   628: 	move.b	#13,d1
02:00003DB2 6142            	   629: 	bsr			DisplayChar
02:00003DB4 123C000A        	   630: 	move.b	#10,d1
02:00003DB8 613C            	   631: 	bsr			DisplayChar
02:00003DBA 221F            	   632: 	move.l	(a7)+,d1
02:00003DBC 4E75            	   633: 	rts
                            	   634: 
                            	   635: ;------------------------------------------------------------------------------
                            	   636: ;------------------------------------------------------------------------------
                            	   637: 
                            	   638: UpdateTextPos:
02:00003DBE 103900040000    	   639: 	move.b	CursorRow,d0		; compute screen location
02:00003DC4 0240007F        	   640: 	andi.w	#$7f,d0
02:00003DC8 14390004008D    	   641: 	move.b	TextCols,d2
02:00003DCE 4882            	   642: 	ext.w		d2
02:00003DD0 C0C2            	   643: 	mulu.w	d2,d0
02:00003DD2 2600            	   644: 	move.l	d0,d3
02:00003DD4 143900040001    	   645: 	move.b	CursorCol,d2
02:00003DDA 024200FF        	   646: 	andi.w	#$ff,d2
02:00003DDE D042            	   647: 	add.w		d2,d0
02:00003DE0 33C000040002    	   648: 	move.w	d0,TextPos			; save cursor pos
02:00003DE6 4E75            	   649: 	rts
                            	   650: 
                            	   651: ;------------------------------------------------------------------------------
                            	   652: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   653: ; Destroys d0,d2,a0
                            	   654: ;------------------------------------------------------------------------------
                            	   655: 
                            	   656: CalcScreenLoc:
02:00003DE8 61D4            	   657: 	bsr			UpdateTextPos
02:00003DEA 48C0            	   658: 	ext.l		d0								; make it into a long
02:00003DEC E780            	   659: 	asl.l		#3,d0							; 8 bytes per char
02:00003DEE 6100FF64        	   660: 	bsr			get_screen_address
02:00003DF2 D1C0            	   661: 	add.l		d0,a0							; a0 = screen location
02:00003DF4 4E75            	   662: 	rts
                            	   663: 
                            	   664: ;------------------------------------------------------------------------------
                            	   665: ; Display a character on the screen
                            	   666: ; d1.b = char to display
                            	   667: ;------------------------------------------------------------------------------
                            	   668: 
                            	   669: DisplayChar:
02:00003DF6 48E77000        	   670: 	movem.l	d1/d2/d3,-(a7)
02:00003DFA 4E7A2FE0        	   671: 	movec		coreno,d2
02:00003DFE 0C020002        	   672: 	cmpi.b	#2,d2
02:00003E02 4DD6            	   673: 	bne.s		.0001
                            	   674: ;	bsr			SerialPutChar
                            	   675: .0001:
02:00003E04 0281000000FF    	   676: 	andi.l	#$ff,d1				; zero out upper bytes of d1
02:00003E0A 0C01000D        	   677: 	cmpi.b	#13,d1				; carriage return ?
02:00003E0E 6610            	   678: 	bne.s		dccr
02:00003E10 423900040001    	   679: 	clr.b		CursorCol			; just set cursor column to zero on a CR
                            	   680: dcx14:
02:00003E16 610002AE        	   681: 	bsr			SyncCursor		; set position in text controller
                            	   682: dcx7:
02:00003E1A 4CDF000E        	   683: 	movem.l	(a7)+,d1/d2/d3
02:00003E1E 4E75            	   684: 	rts
                            	   685: dccr:
02:00003E20 0C010091        	   686: 	cmpi.b	#$91,d1			; cursor right ?
02:00003E24 6618            	   687: 	bne.s   dcx6
02:00003E26 14390004008D    	   688: 	move.b	TextCols,d2
02:00003E2C 5302            	   689: 	sub.b		#1,d2
02:00003E2E 943900040001    	   690: 	sub.b		CursorCol,d2
02:00003E34 67E4            	   691: 	beq.s		dcx7
02:00003E36 523900040001    	   692: 	addi.b	#1,CursorCol
02:00003E3C 60D8            	   693: 	bra.s		dcx14
                            	   694: dcx6:
02:00003E3E 0C010090        	   695: 	cmpi.b	#$90,d1			; cursor up ?
02:00003E42 6610            	   696: 	bne.s		dcx8
02:00003E44 4A3900040000    	   697: 	cmpi.b	#0,CursorRow
02:00003E4A 67CE            	   698: 	beq.s		dcx7
02:00003E4C 533900040000    	   699: 	subi.b	#1,CursorRow
02:00003E52 60C2            	   700: 	bra.s		dcx14
                            	   701: dcx8:
02:00003E54 0C010093        	   702: 	cmpi.b	#$93,d1			; cursor left?
02:00003E58 6610            	   703: 	bne.s		dcx9
02:00003E5A 4A3900040001    	   704: 	cmpi.b	#0,CursorCol
02:00003E60 67B8            	   705: 	beq.s		dcx7
02:00003E62 533900040001    	   706: 	subi.b	#1,CursorCol
02:00003E68 60AC            	   707: 	bra.s		dcx14
                            	   708: dcx9:
02:00003E6A 0C010092        	   709: 	cmpi.b	#$92,d1			; cursor down ?
02:00003E6E 6618            	   710: 	bne.s		dcx10
02:00003E70 14390004008C    	   711: 	move.b	TextRows,d2
02:00003E76 5302            	   712: 	sub.b		#1,d2
02:00003E78 B43900040000    	   713: 	cmp.b		CursorRow,d2
02:00003E7E 679A            	   714: 	beq.s		dcx7
02:00003E80 523900040000    	   715: 	addi.b	#1,CursorRow
02:00003E86 608E            	   716: 	bra.s		dcx14
                            	   717: dcx10:
02:00003E88 0C010094        	   718: 	cmpi.b	#$94,d1			; cursor home ?
02:00003E8C 661C            	   719: 	bne.s		dcx11
02:00003E8E 4A3900040001    	   720: 	cmpi.b	#0,CursorCol
02:00003E94 670A            	   721: 	beq.s		dcx12
02:00003E96 423900040001    	   722: 	clr.b		CursorCol
02:00003E9C 6000FF78        	   723: 	bra			dcx14
                            	   724: dcx12:
02:00003EA0 423900040000    	   725: 	clr.b		CursorRow
02:00003EA6 6000FF6E        	   726: 	bra			dcx14
                            	   727: dcx11:
02:00003EAA 48E7E080        	   728: 	movem.l	d0/d1/d2/a0,-(a7)
02:00003EAE 0C010099        	   729: 	cmpi.b	#$99,d1			; delete ?
02:00003EB2 675C            	   730: 	beq.s		doDelete
02:00003EB4 0C010008        	   731: 	cmpi.b	#CTRLH,d1			; backspace ?
02:00003EB8 6748            	   732: 	beq.s   doBackspace
02:00003EBA 0C010018        	   733: 	cmpi.b	#CTRLX,d1			; delete line ?
02:00003EBE 6700008C        	   734: 	beq			doCtrlX
02:00003EC2 0C01000A        	   735: 	cmpi.b	#10,d1		; linefeed ?
02:00003EC6 6728            	   736: 	beq.s		dclf
                            	   737: 
                            	   738: 	; regular char
02:00003EC8 6100FF1E        	   739: 	bsr			CalcScreenLoc	; a0 = screen location
02:00003ECC 2401            	   740: 	move.l	d1,d2					; d2 = char
02:00003ECE 6100FE58        	   741: 	bsr			get_screen_color	; d0,d1 = color
02:00003ED2 8282            	   742: 	or.l		d2,d1					; d1 = char + color
02:00003ED4 E159            	   743: 	rol.w		#8,d1					; text controller expects little endian data
02:00003ED6 4841            	   744: 	swap		d1
02:00003ED8 E159            	   745: 	rol.w		#8,d1
02:00003EDA 2081            	   746: 	move.l	d1,(a0)
02:00003EDC E158            	   747: 	rol.w		#8,d0					; swap bytes
02:00003EDE 4840            	   748: 	swap		d0						; swap halfs
02:00003EE0 E158            	   749: 	rol.w		#8,d0					; swap remaining bytes
02:00003EE2 21400004        	   750: 	move.l	d0,4(a0)
02:00003EE6 61000088        	   751: 	bsr			IncCursorPos
02:00003EEA 610001DA        	   752: 	bsr			SyncCursor
02:00003EEE 6008            	   753: 	bra			dcx4
                            	   754: dclf:
02:00003EF0 6100009E        	   755: 	bsr			IncCursorRow
                            	   756: dcx16:
02:00003EF4 610001D0        	   757: 	bsr			SyncCursor
                            	   758: dcx4:
02:00003EF8 4CDF0107        	   759: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
02:00003EFC 4CDF000E        	   760: 	movem.l	(a7)+,d1/d2/d3
02:00003F00 4E75            	   761: 	rts
                            	   762: 
                            	   763: 	;---------------------------
                            	   764: 	; CTRL-H: backspace
                            	   765: 	;---------------------------
                            	   766: doBackspace:
02:00003F02 4A3900040001    	   767: 	cmpi.b	#0,CursorCol		; if already at start of line
02:00003F08 67EE            	   768: 	beq.s   dcx4						; nothing to do
02:00003F0A 533900040001    	   769: 	subi.b	#1,CursorCol		; decrement column
                            	   770: 
                            	   771: 	;---------------------------
                            	   772: 	; Delete key
                            	   773: 	;---------------------------
                            	   774: doDelete:
02:00003F10 48E7C080        	   775: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
02:00003F14 6100FED2        	   776: 	bsr		  CalcScreenLoc		; a0 = screen location
02:00003F18 103900040001    	   777: 	move.b	CursorCol,d0
                            	   778: .0001:
02:00003F1E 20A80008        	   779: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
02:00003F22 2168000C0004    	   780: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
02:00003F28 5088            	   781: 	lea			8(a0),a0
02:00003F2A 5200            	   782: 	addi.b	#1,d0
02:00003F2C B0390004008D    	   783: 	cmp.b		TextCols,d0
02:00003F32 65EA            	   784: 	blo.s		.0001
02:00003F34 6100FDF2        	   785: 	bsr			get_screen_color
02:00003F38 323C0020        	   786: 	move.w	#' ',d1				; terminate line with a space
02:00003F3C E159            	   787: 	rol.w		#8,d1
02:00003F3E 4841            	   788: 	swap		d1
02:00003F40 E159            	   789: 	rol.w		#8,d1
02:00003F42 2141FFF8        	   790: 	move.l	d1,-8(a0)
02:00003F46 4CDF0103        	   791: 	movem.l	(a7)+,d0/d1/a0
02:00003F4A 60A8            	   792: 	bra.s		dcx16				; finished
                            	   793: 
                            	   794: 	;---------------------------
                            	   795: 	; CTRL-X: erase line
                            	   796: 	;---------------------------
                            	   797: doCtrlX:
02:00003F4C 423900040001    	   798: 	clr.b		CursorCol			; Reset cursor to start of line
02:00003F52 10390004008D    	   799: 	move.b	TextCols,d0			; and display TextCols number of spaces
02:00003F58 4880            	   800: 	ext.w		d0
02:00003F5A 48C0            	   801: 	ext.l		d0
02:00003F5C 123C0020        	   802: 	move.b	#' ',d1				; d1 = space char
                            	   803: .0001:
                            	   804: 	; DisplayChar is called recursively here
                            	   805: 	; It's safe to do because we know it won't recurse again due to the
                            	   806: 	; fact we know the character being displayed is a space char
02:00003F60 6100FE94        	   807: 	bsr		DisplayChar			
02:00003F64 5340            	   808: 	subq	#1,d0
02:00003F66 66F8            	   809: 	bne.s	.0001
02:00003F68 423900040001    	   810: 	clr.b	CursorCol			; now really go back to start of line
02:00003F6E 6084            	   811: 	bra.s	dcx16				; we're done
                            	   812: 
                            	   813: ;------------------------------------------------------------------------------
                            	   814: ; Increment the cursor position, scroll the screen if needed.
                            	   815: ;------------------------------------------------------------------------------
                            	   816: 
                            	   817: IncCursorPos:
02:00003F70 527900040002    	   818: 	addi.w	#1,TextCurpos
02:00003F76 523900040001    	   819: 	addi.b	#1,CursorCol
02:00003F7C 10390004008D    	   820: 	move.b	TextCols,d0
02:00003F82 B03900040001    	   821: 	cmp.b		CursorCol,d0
02:00003F88 6438            	   822: 	bhs.s		icc1
02:00003F8A 423900040001    	   823: 	clr.b		CursorCol
                            	   824: IncCursorRow:
02:00003F90 523900040000    	   825: 	addi.b	#1,CursorRow
02:00003F96 10390004008C    	   826: 	move.b	TextRows,d0
02:00003F9C B03900040000    	   827: 	cmp.b		CursorRow,d0
02:00003FA2 621E            	   828: 	bhi.s		icc1
02:00003FA4 10390004008C    	   829: 	move.b	TextRows,d0
02:00003FAA 13C000040000    	   830: 	move.b	d0,CursorRow		; in case CursorRow is way over
02:00003FB0 533900040000    	   831: 	subi.b	#1,CursorRow
02:00003FB6 4880            	   832: 	ext.w		d0
02:00003FB8 D040            	   833: 	asl.w		#1,d0
02:00003FBA 917900040002    	   834: 	sub.w		d0,TextCurpos
02:00003FC0 6102            	   835: 	bsr			ScrollUp
                            	   836: icc1:
02:00003FC2 4E75            	   837: 	rts
                            	   838: 
                            	   839: ;------------------------------------------------------------------------------
                            	   840: ; Scroll screen up.
                            	   841: ;------------------------------------------------------------------------------
                            	   842: 
                            	   843: ScrollUp:
02:00003FC4 48E7C084        	   844: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
02:00003FC8 4E7A0FE0        	   845: 	movec		coreno,d0
02:00003FCC 4840            	   846: 	swap		d0	
02:00003FCE 7205            	   847: 	moveq		#SCREEN_SEMA,d1
02:00003FD0 6100C1A4        	   848: 	bsr			LockSemaphore
02:00003FD4 6100FD7E        	   849: 	bsr			get_screen_address
02:00003FD8 2A48            	   850: 	move.l	a0,a5								; a5 = pointer to text screen
                            	   851: .0003:								
02:00003FDA 10390004008D    	   852: 	move.b	TextCols,d0					; d0 = columns
02:00003FE0 12390004008C    	   853: 	move.b	TextRows,d1					; d1 = rows
02:00003FE6 4880            	   854: 	ext.w		d0									; make cols into a word value
02:00003FE8 4881            	   855: 	ext.w		d1									; make rows into a word value
02:00003FEA E740            	   856: 	asl.w		#3,d0								; make into cell index
02:00003FEC 41F50000        	   857: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
02:00003FF0 E648            	   858: 	lsr.w		#3,d0								; get back d0
02:00003FF2 5341            	   859: 	subq		#1,d1								; number of rows-1
02:00003FF4 C0C1            	   860: 	mulu		d1,d0								; d0 = count of characters to move
                            	   861: .0001:
02:00003FF6 2AD8            	   862: 	move.l	(a0)+,(a5)+					; each char is 64 bits
02:00003FF8 2AD8            	   863: 	move.l	(a0)+,(a5)+	
02:00003FFA 51C8FFFA        	   864: 	dbra		d0,.0001
02:00003FFE 4E7A0FE0        	   865: 	movec		coreno,d0
02:00004002 4840            	   866: 	swap		d0	
02:00004004 7205            	   867: 	moveq		#SCREEN_SEMA,d1
02:00004006 6100C1A8        	   868: 	bsr			UnlockSemaphore
02:0000400A 4CDF2103        	   869: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   870: 	; Fall through into blanking out last line
                            	   871: 
                            	   872: ;------------------------------------------------------------------------------
                            	   873: ; Blank out the last line on the screen.
                            	   874: ;------------------------------------------------------------------------------
                            	   875: 
                            	   876: BlankLastLine:
02:0000400E 48E7E080        	   877: 	movem.l	d0/d1/d2/a0,-(a7)
02:00004012 4E7A0FE0        	   878: 	movec		coreno,d0
02:00004016 4840            	   879: 	swap		d0	
02:00004018 7205            	   880: 	moveq		#SCREEN_SEMA,d1
02:0000401A 6100C15A        	   881: 	bsr			LockSemaphore
02:0000401E 6100FD34        	   882: 	bsr			get_screen_address
02:00004022 10390004008C    	   883: 	move.b	TextRows,d0					; d0 = columns
02:00004028 12390004008D    	   884: 	move.b	TextCols,d1					; d1 = rows
02:0000402E 4880            	   885: 	ext.w		d0
02:00004030 4881            	   886: 	ext.w		d1
02:00004032 5341            	   887: 	subq		#1,d1								; last row = #rows-1
02:00004034 C0C1            	   888: 	mulu		d1,d0								; d0 = index of last line
02:00004036 E740            	   889: 	asl.w		#3,d0								; *8 bytes per char
02:00004038 41F00000        	   890: 	lea			(a0,d0.w),a0				; point a0 to last row
02:0000403C 14390004008D    	   891: 	move.b	TextCols,d2					; number of text cells to clear
02:00004042 4882            	   892: 	ext.w		d2
02:00004044 5342            	   893: 	subi.w	#1,d2								; count must be one less than desired
02:00004046 6100FCE0        	   894: 	bsr			get_screen_color		; d0,d1 = screen color
02:0000404A 323C0020        	   895: 	move.w	#32,d1							; set the character for display in low 16 bits
02:0000404E 61001194        	   896: 	bsr			rbo									; reverse the byte order
02:00004052 E158            	   897: 	rol.w		#8,d0
02:00004054 4840            	   898: 	swap		d0
02:00004056 E158            	   899: 	rol.w		#8,d0
                            	   900: .0001:
02:00004058 20C0            	   901: 	move.l	d0,(a0)+
02:0000405A 20C1            	   902: 	move.l	d1,(a0)+
02:0000405C 51CAFFFA        	   903: 	dbra		d2,.0001
02:00004060 4E7A0FE0        	   904: 	movec		coreno,d0
02:00004064 4840            	   905: 	swap		d0	
02:00004066 7205            	   906: 	moveq		#SCREEN_SEMA,d1
02:00004068 6100C146        	   907: 	bsr			UnlockSemaphore
02:0000406C 4CDF0107        	   908: 	movem.l	(a7)+,d0/d1/d2/a0
02:00004070 4E75            	   909: 	rts
                            	   910: 
                            	   911: ;------------------------------------------------------------------------------
                            	   912: ; Display a string on the screen.
                            	   913: ;------------------------------------------------------------------------------
                            	   914: 
                            	   915: DisplayString:
02:00004072 48E7C040        	   916: 	movem.l	d0/d1/a1,-(a7)
                            	   917: dspj1:
02:00004076 7200            	   918: 	clr.l		d1						; clear upper bits of d1
02:00004078 1219            	   919: 	move.b	(a1)+,d1			; move string char into d1
02:0000407A 6706            	   920: 	beq.s		dsret					; is it end of string ?
02:0000407C 6100FD78        	   921: 	bsr			DisplayChar		; display character
02:00004080 60F4            	   922: 	bra.s		dspj1					; go back for next character
                            	   923: dsret:
02:00004082 4CDF0203        	   924: 	movem.l	(a7)+,d0/d1/a1
02:00004086 4E75            	   925: 	rts
                            	   926: 
                            	   927: ;------------------------------------------------------------------------------
                            	   928: ; Display a string on the screen followed by carriage return / linefeed.
                            	   929: ;------------------------------------------------------------------------------
                            	   930: 
                            	   931: DisplayStringCRLF:
02:00004088 61E8            	   932: 	bsr		DisplayString
02:0000408A 6000FD20        	   933: 	bra		CRLF
                            	   934: 
                            	   935: ;------------------------------------------------------------------------------
                            	   936: ; Display a string on the screen limited to 255 chars max.
                            	   937: ;------------------------------------------------------------------------------
                            	   938: 
                            	   939: DisplayStringLimited:
02:0000408E 48E7E040        	   940: 	movem.l	d0/d1/d2/a1,-(a7)
02:00004092 3401            	   941: 	move.w	d1,d2					; d2 = max count
02:00004094 024200FF        	   942: 	andi.w	#$00FF,d2			; limit to 255 chars
02:00004098 600A            	   943: 	bra.s		.0003					; enter loop at bottom
                            	   944: .0001:
02:0000409A 7200            	   945: 	clr.l		d1						; clear upper bits of d1
02:0000409C 1219            	   946: 	move.b	(a1)+,d1			; move string char into d1
02:0000409E 6708            	   947: 	beq.s		.0002					; is it end of string ?
02:000040A0 6100FD54        	   948: 	bsr			DisplayChar		; display character
                            	   949: .0003:
02:000040A4 51CAFFF4        	   950: 	dbra		d2,.0001			; go back for next character
                            	   951: .0002:
02:000040A8 4CDF0207        	   952: 	movem.l	(a7)+,d0/d1/d2/a1
02:000040AC 4E75            	   953: 	rts
                            	   954: 
                            	   955: DisplayStringLimitedCRLF:
02:000040AE 61DE            	   956: 	bsr		DisplayStringLimited
02:000040B0 6000FCFA        	   957: 	bra		CRLF
                            	   958: 	
                            	   959: ;------------------------------------------------------------------------------
                            	   960: ; Set cursor position to top left of screen.
                            	   961: ;
                            	   962: ; Parameters:
                            	   963: ;		<none>
                            	   964: ; Returns:
                            	   965: ;		<none>
                            	   966: ; Registers Affected:
                            	   967: ;		<none>
                            	   968: ;------------------------------------------------------------------------------
                            	   969: 
                            	   970: HomeCursor:
02:000040B4 423900040000    	   971: 	clr.b		CursorRow
02:000040BA 423900040001    	   972: 	clr.b		CursorCol
02:000040C0 427900040002    	   973: 	clr.w		TextPos
                            	   974: 	; fall through
                            	   975: 
                            	   976: ;------------------------------------------------------------------------------
                            	   977: ; SyncCursor:
                            	   978: ;
                            	   979: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   980: ; the core with the IO focus.
                            	   981: ;
                            	   982: ; Parameters:
                            	   983: ;		<none>
                            	   984: ; Returns:
                            	   985: ;		<none>
                            	   986: ; Registers Affected:
                            	   987: ;		<none>
                            	   988: ;------------------------------------------------------------------------------
                            	   989: 
                            	   990: SyncCursor:
02:000040C6 48E7A000        	   991: 	movem.l	d0/d2,-(a7)
02:000040CA 6100FCF2        	   992: 	bsr			UpdateTextPos
02:000040CE 4E7A2FE0        	   993: 	movec		coreno,d2
02:000040D2 B43900100000    	   994: 	cmp.b		IOFocus,d2
02:000040D8 6610            	   995: 	bne.s		.0001
02:000040DA 5542            	   996: 	subi.w	#2,d2						; factor in location of screen in controller
02:000040DC C4FC0800        	   997: 	mulu		#2048,d2				; 2048 cells per screen
02:000040E0 D042            	   998: 	add.w		d2,d0
02:000040E2 E158            	   999: 	rol.w		#8,d0						; swap byte order
02:000040E4 33C0FD03FF24    	  1000: 	move.w	d0,TEXTREG+$24
                            	  1001: .0001:	
02:000040EA 4CDF0005        	  1002: 	movem.l	(a7)+,d0/d2
02:000040EE 4E75            	  1003: 	rts
                            	  1004: 
                            	  1005: ;==============================================================================
                            	  1006: ; TRAP #15 handler
                            	  1007: ;
                            	  1008: ; Parameters:
                            	  1009: ;		d0.w = function number to perform
                            	  1010: ;==============================================================================
                            	  1011: 
                            	  1012: TRAP15:
02:000040F0 48E78080        	  1013: 	movem.l	d0/a0,-(a7)
02:000040F4 41FA0012        	  1014: 	lea			T15DispatchTable,a0
02:000040F8 E580            	  1015: 	asl.l		#2,d0
02:000040FA 20700000        	  1016: 	move.l	(a0,d0.w),a0
02:000040FE 4E90            	  1017: 	jsr			(a0)
02:00004100 4CDF0101        	  1018: 	movem.l	(a7)+,d0/a0
02:00004104 4E73            	  1019: 	rte
                            	  1020: 
                            	  1021: 		align	2
                            	  1022: T15DispatchTable:
02:00004108 000040AE        	  1023: 	dc.l	DisplayStringLimitedCRLF
02:0000410C 0000408E        	  1024: 	dc.l	DisplayStringLimited
02:00004110 000041DE        	  1025: 	dc.l	StubRout
02:00004114 000041DE        	  1026: 	dc.l	StubRout
02:00004118 000041DE        	  1027: 	dc.l	StubRout
02:0000411C 000042CC        	  1028: 	dc.l	GetKey
02:00004120 00003DF6        	  1029: 	dc.l	DisplayChar
02:00004124 000042C0        	  1030: 	dc.l	CheckForKey
02:00004128 000041DE        	  1031: 	dc.l	StubRout
02:0000412C 000041DE        	  1032: 	dc.l	StubRout
                            	  1033: 	; 10
02:00004130 000041DE        	  1034: 	dc.l	StubRout
02:00004134 000041A8        	  1035: 	dc.l	Cursor1
02:00004138 000042B8        	  1036: 	dc.l	SetKeyboardEcho
02:0000413C 00004088        	  1037: 	dc.l	DisplayStringCRLF
02:00004140 00004072        	  1038: 	dc.l	DisplayString
02:00004144 000041DE        	  1039: 	dc.l	StubRout
02:00004148 000041DE        	  1040: 	dc.l	StubRout
02:0000414C 000041DE        	  1041: 	dc.l	StubRout
02:00004150 000041DE        	  1042: 	dc.l	StubRout
02:00004154 000041DE        	  1043: 	dc.l	StubRout
                            	  1044: 	; 20
02:00004158 000041DE        	  1045: 	dc.l	StubRout
02:0000415C 000041DE        	  1046: 	dc.l	StubRout
02:00004160 000041DE        	  1047: 	dc.l	StubRout
02:00004164 000041DE        	  1048: 	dc.l	StubRout
02:00004168 000041DE        	  1049: 	dc.l	StubRout
02:0000416C 000041DE        	  1050: 	dc.l	StubRout
02:00004170 000041DE        	  1051: 	dc.l	StubRout
02:00004174 000041DE        	  1052: 	dc.l	StubRout
02:00004178 000041DE        	  1053: 	dc.l	StubRout
02:0000417C 000041DE        	  1054: 	dc.l	StubRout
                            	  1055: 	; 30
02:00004180 000041DE        	  1056: 	dc.l	StubRout
02:00004184 000041DE        	  1057: 	dc.l	StubRout
02:00004188 000041F2        	  1058: 	dc.l	rotate_iofocus
02:0000418C 000052CA        	  1059: 	dc.l	SerialPeekCharDirect
02:00004190 000052E6        	  1060: 	dc.l	SerialPutChar
02:00004194 00005292        	  1061: 	dc.l	SerialPeekChar
02:00004198 0000521E        	  1062: 	dc.l	SerialGetChar
02:0000419C 000041DE        	  1063: 	dc.l	StubRout
02:000041A0 000041DE        	  1064: 	dc.l	StubRout
02:000041A4 000041DE        	  1065: 	dc.l	StubRout
                            	  1066: 
                            	  1067: ;------------------------------------------------------------------------------
                            	  1068: ; Cursor positioning / Clear screen
                            	  1069: ; - out of range settings are ignored
                            	  1070: ;
                            	  1071: ; Parameters:
                            	  1072: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	  1073: ;	Returns:
                            	  1074: ;		none
                            	  1075: ;------------------------------------------------------------------------------
                            	  1076: 
                            	  1077: Cursor1:
02:000041A8 2F01            	  1078: 	move.l		d1,-(a7)
02:000041AA 0C41FF00        	  1079: 	cmpi.w		#$FF00,d1
02:000041AE 6608            	  1080: 	bne.s			.0002
02:000041B0 6100FBAA        	  1081: 	bsr				clear_screen
02:000041B4 6000FEFE        	  1082: 	bra				HomeCursor
                            	  1083: .0002:
02:000041B8 B2390004008C    	  1084: 	cmp.b			TextRows,d1		; if cursor pos out of range, ignore setting
02:000041BE 6406            	  1085: 	bhs.s			.0003
02:000041C0 13C100040000    	  1086: 	move.b		d1,CursorRow
                            	  1087: .0003:
02:000041C6 E059            	  1088: 	ror.w			#8,d1
02:000041C8 B2390004008D    	  1089: 	cmp.b			TextCols,d1
02:000041CE 6406            	  1090: 	bhs.s			.0001
02:000041D0 13C100040001    	  1091: 	move.b		d1,CursorCol
                            	  1092: .0001:
02:000041D6 6100FEEE        	  1093: 	bsr				SyncCursor		; update hardware cursor
02:000041DA 221F            	  1094: 	move.l		(a7)+,d1
02:000041DC 4E75            	  1095: 	rts
                            	  1096: 
                            	  1097: ;------------------------------------------------------------------------------
                            	  1098: ; Stub routine for unimplemented functionality.
                            	  1099: ;------------------------------------------------------------------------------
                            	  1100: 
                            	  1101: StubRout:
02:000041DE 4E75            	  1102: 	rts
                            	  1103: 
                            	  1104: ;------------------------------------------------------------------------------
                            	  1105: ; Select a specific IO focus.
                            	  1106: ;------------------------------------------------------------------------------
                            	  1107: 
                            	  1108: select_iofocus:
02:000041E0 0C010002        	  1109: 	cmpi.b	#2,d1
02:000041E4 650A            	  1110: 	blo.s		.0001
02:000041E6 0C010009        	  1111: 	cmpi.b	#9,d1
02:000041EA 6204            	  1112: 	bhi.s		.0001
02:000041EC 2001            	  1113: 	move.l	d1,d0
02:000041EE 6014            	  1114: 	bra.s		select_focus1
                            	  1115: .0001:
02:000041F0 4E75            	  1116: 	rts
                            	  1117: 
                            	  1118: ;------------------------------------------------------------------------------
                            	  1119: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	  1120: ;
                            	  1121: ; Modifies:
                            	  1122: ;		d0, IOFocus BIOS variable
                            	  1123: ;------------------------------------------------------------------------------
                            	  1124: 
                            	  1125: rotate_iofocus:
02:000041F2 103900100000    	  1126: 	move.b	IOFocus,d0				; d0 = focus, we can trash d0
02:000041F8 5200            	  1127: 	add.b		#1,d0							; increment the focus
02:000041FA B03C0009        	  1128: 	cmp.b		#9,d0							; limit to 2 to 9
02:000041FE 6304            	  1129: 	bls.s		.0001
02:00004200 103C0002        	  1130: 	move.b	#2,d0
                            	  1131: .0001:
                            	  1132: select_focus1:
02:00004204 13C000100000    	  1133: 	move.b	d0,IOFocus				; set IO focus
02:0000420A 5500            	  1134: 	subi.b	#2,d0							; screen is 0 to 7, focus is 2 to 9
02:0000420C 4880            	  1135: 	ext.w		d0								; make into long value
02:0000420E C0FC0800        	  1136: 	mulu		#2048,d0					; * 2048	cells per screen
02:00004212 E158            	  1137: 	rol.w		#8,d0							; swap byte order
02:00004214 33C0FD03FF28    	  1138: 	move.w	d0,TEXTREG+$28		; update screen address in text controller
02:0000421A 6000FEAA        	  1139: 	bra			SyncCursor				; set cursor position
                            	  1140: 
                            	  1141: ;==============================================================================
                            	  1142: ; PLIC - platform level interrupt controller
                            	  1143: ;
                            	  1144: ; Register layout:
                            	  1145: ;   bits 0 to 7  = cause code to issue (vector number)
                            	  1146: ;   bits 8 to 11 = irq level to issue
                            	  1147: ;   bit 16 = irq enable
                            	  1148: ;   bit 17 = edge sensitivity
                            	  1149: ;   bit 18 = 0=vpa, 1=inta
                            	  1150: ;		bit 24 to 29 target core
                            	  1151: ;
                            	  1152: ; Note byte order must be reversed for PLIC.
                            	  1153: ;==============================================================================
                            	  1154: 
                            	  1155: init_plic:
02:0000421E 41F9FD090000    	  1156: 	lea		PLIC,a0						; a0 points to PLIC
02:00004224 43E800F4        	  1157: 	lea		$80+4*29(a0),a1		; point to timer registers (29)
02:00004228 22BC00060302    	  1158: 	move.l	#$00060302,(a1)	; initialize, core=2,edge sensitive,enabled,irq6,vpa
02:0000422E 5889            	  1159: 	lea			4(a1),a1				; point to keyboard registers (30)
02:00004230 22BC3C060502    	  1160: 	move.l	#$3C060502,(a1)	; core=2,level sensitive,enabled,irq6,inta
02:00004236 5889            	  1161: 	lea			4(a1),a1				; point to nmi button register (31)
02:00004238 22BC00070302    	  1162: 	move.l	#$00070302,(a1)	; initialize, core=2,edge sensitive,enabled,irq7,vpa
02:0000423E 43E800C0        	  1163: 	lea		$80+4*16(a0),a1		; a1 points to ACIA register
02:00004242 22BC3D030502    	  1164: 	move.l	#$3D030502,(a1)	; core=2,level sensitive,enabled,irq3,inta	
02:00004248 4E75            	  1165: 	rts
                            	  1166: 
                            	  1167: ;==============================================================================
                            	  1168: ; Keyboard stuff
                            	  1169: ;
                            	  1170: ; KeyState2_
                            	  1171: ; 876543210
                            	  1172: ; ||||||||+ = shift
                            	  1173: ; |||||||+- = alt
                            	  1174: ; ||||||+-- = control
                            	  1175: ; |||||+--- = numlock
                            	  1176: ; ||||+---- = capslock
                            	  1177: ; |||+----- = scrolllock
                            	  1178: ; ||+------ =
                            	  1179: ; |+------- = 
                            	  1180: ; +-------- = extended
                            	  1181: ;
                            	  1182: ;==============================================================================
                            	  1183: 
                            	  1184: _KeybdInit:
02:0000424A 42390010000F    	  1185: 	clr.b	_KeyState1
02:00004250 423900100010    	  1186: 	clr.b	_KeyState2
02:00004256 4E75            	  1187: 	rts
                            	  1188: 
                            	  1189: _KeybdGetStatus:
02:00004258 7200            	  1190: 	moveq		#0,d1
02:0000425A 1239FD0FFE01    	  1191: 	move.b	KEYBD+1,d1
02:00004260 4E75            	  1192: 	rts
                            	  1193: 
                            	  1194: ; Get the scancode from the keyboard port
                            	  1195: 
                            	  1196: _KeybdGetScancode:
02:00004262 7200            	  1197: 	moveq		#0,d1
02:00004264 1239FD0FFE00    	  1198: 	move.b	KEYBD,d1				; get the scan code
02:0000426A 4239FD0FFE01    	  1199: 	move.b	#0,KEYBD+1			; clear receive register
02:00004270 4E75            	  1200: 	rts
                            	  1201: 
                            	  1202: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	  1203: ; keyboard in order to wait for a response.
                            	  1204: ;
                            	  1205: KeybdRecvByte:
02:00004272 2F03            	  1206: 	move.l	d3,-(a7)
02:00004274 363C0064        	  1207: 	move.w	#100,d3		; wait up to 1s
                            	  1208: .0003:
02:00004278 61DE            	  1209: 	bsr		_KeybdGetStatus	; wait for response from keyboard
02:0000427A 4A01            	  1210: 	tst.b	d1
02:0000427C 6B0E            	  1211: 	bmi		.0004		; is input buffer full ? yes, branch
02:0000427E 6100032C        	  1212: 	bsr		Wait10ms		; wait a bit
02:00004282 51CBFFF4        	  1213: 	dbra	d3,.0003	; go back and try again
02:00004286 261F            	  1214: 	move.l	(a7)+,d3
02:00004288 72FF            	  1215: 	moveq	#-1,d1			; return -1
02:0000428A 4E75            	  1216: 	rts
                            	  1217: .0004:
02:0000428C 61D4            	  1218: 	bsr		_KeybdGetScancode
02:0000428E 261F            	  1219: 	move.l	(a7)+,d3
02:00004290 4E75            	  1220: 	rts
                            	  1221: 
                            	  1222: 
                            	  1223: ; Wait until the keyboard transmit is complete
                            	  1224: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	  1225: ;
                            	  1226: KeybdWaitTx:
02:00004292 48E73000        	  1227: 	movem.l	d2/d3,-(a7)
02:00004296 7664            	  1228: 	moveq	#100,d3		; wait a max of 1s
                            	  1229: .0001:
02:00004298 61BE            	  1230: 	bsr		_KeybdGetStatus
02:0000429A 08010006        	  1231: 	btst	#6,d1		; check for transmit complete bit
02:0000429E 6610            	  1232: 	bne	    .0002		; branch if bit set
02:000042A0 6100030A        	  1233: 	bsr		Wait10ms		; delay a little bit
02:000042A4 51CBFFF2        	  1234: 	dbra	d3,.0001	; go back and try again
02:000042A8 4CDF000C        	  1235: 	movem.l	(a7)+,d2/d3
02:000042AC 72FF            	  1236: 	moveq	#-1,d1		; return -1
02:000042AE 4E75            	  1237: 	rts
                            	  1238: .0002:
02:000042B0 4CDF000C        	  1239: 	movem.l	(a7)+,d2/d3
02:000042B4 7200            	  1240: 	moveq	#0,d1		; return 0
02:000042B6 4E75            	  1241: 	rts
                            	  1242: 
                            	  1243: ;------------------------------------------------------------------------------
                            	  1244: ; d1.b 0=echo off, non-zero = echo on
                            	  1245: ;------------------------------------------------------------------------------
                            	  1246: 
                            	  1247: SetKeyboardEcho:
02:000042B8 13C10004000C    	  1248: 	move.b	d1,KeybdEcho
02:000042BE 4E75            	  1249: 	rts
                            	  1250: 
                            	  1251: ;------------------------------------------------------------------------------
                            	  1252: ; Get key pending status into d1.b
                            	  1253: ;
                            	  1254: ; Returns:
                            	  1255: ;		d1.b = 1 if a key is available, otherwise zero.
                            	  1256: ;------------------------------------------------------------------------------
                            	  1257: 
                            	  1258: CheckForKey:
02:000042C0 7200            	  1259: 	moveq.l	#0,d1					; clear high order bits
                            	  1260: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	  1261: ;	smi.b		d1						; set true/false
                            	  1262: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
02:000042C2 4A3900100013    	  1263: 	tst.b		_KeybdCnt
02:000042C8 56C1            	  1264: 	sne.b		d1
02:000042CA 4E75            	  1265: 	rts
                            	  1266: 
                            	  1267: ;------------------------------------------------------------------------------
                            	  1268: ; GetKey
                            	  1269: ; 	Get a character from the keyboard. 
                            	  1270: ;
                            	  1271: ; Modifies:
                            	  1272: ;		d1
                            	  1273: ; Returns:
                            	  1274: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	  1275: ;------------------------------------------------------------------------------
                            	  1276: 
                            	  1277: GetKey:
02:000042CC 2F00            	  1278: 	move.l	d0,-(a7)					; push d0
02:000042CE 123900100000    	  1279: 	move.b	IOFocus,d1				; Check if the core has the IO focus
02:000042D4 4E7A0FE0        	  1280: 	movec.l	coreno,d0
02:000042D8 B200            	  1281: 	cmp.b		d0,d1
02:000042DA 6622            	  1282: 	bne.s		.0004							; go return no key available, if not in focus
02:000042DC 6132            	  1283: 	bsr			KeybdGetCharNoWait	; get a character
02:000042DE 4A81            	  1284: 	tst.l		d1						; was a key available?
02:000042E0 6B1C            	  1285: 	bmi.s		.0004
02:000042E2 4A390004000C    	  1286: 	tst.b		KeybdEcho					; is keyboard echo on ?
02:000042E8 6710            	  1287: 	beq.s		.0003							; no echo, just return the key
02:000042EA 0C01000D        	  1288: 	cmpi.b	#CR,d1						; convert CR keystroke into CRLF
02:000042EE 6606            	  1289: 	bne.s		.0005
02:000042F0 6100FABA        	  1290: 	bsr			CRLF
02:000042F4 6004            	  1291: 	bra.s		.0003
                            	  1292: .0005:
02:000042F6 6100FAFE        	  1293: 	bsr			DisplayChar
                            	  1294: .0003:
02:000042FA 201F            	  1295: 	move.l	(a7)+,d0					; pop d0
02:000042FC 4E75            	  1296: 	rts												; return key
                            	  1297: ; Return -1 indicating no char was available
                            	  1298: .0004:
02:000042FE 201F            	  1299: 	move.l	(a7)+,d0					; pop d0
02:00004300 72FF            	  1300: 	moveq		#-1,d1						; return no key available
02:00004302 4E75            	  1301: 	rts
                            	  1302: 
                            	  1303: CheckForCtrlC:
02:00004304 610A            	  1304: 	bsr			KeybdGetCharNoWait
02:00004306 0C010003        	  1305: 	cmpi.b	#CTRLC,d1
02:0000430A 67000698        	  1306: 	beq			Monitor
02:0000430E 4E75            	  1307: 	rts
                            	  1308: 
                            	  1309: ;------------------------------------------------------------------------------
                            	  1310: ;------------------------------------------------------------------------------
                            	  1311: 
                            	  1312: KeybdGetCharNoWait:
02:00004310 42390004000D    	  1313: 	clr.b	KeybdWaitFlag
02:00004316 6008            	  1314: 	bra		KeybdGetChar
                            	  1315: 
                            	  1316: KeybdGetCharWait:
02:00004318 13FC00FF0004000D	  1317: 	move.b	#-1,KeybdWaitFlag
                            	  1318: 
                            	  1319: KeybdGetChar:
02:00004320 48E7B080        	  1320: 	movem.l	d0/d2/d3/a0,-(a7)
                            	  1321: .0003:
02:00004324 4E7A0FE0        	  1322: 	movec		coreno,d0
02:00004328 4840            	  1323: 	swap		d0
02:0000432A 7203            	  1324: 	moveq		#KEYBD_SEMA,d1
02:0000432C 6100BE48        	  1325: 	bsr			LockSemaphore
02:00004330 143900100013    	  1326: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
02:00004336 673E            	  1327: 	beq.s		.0015						;
02:00004338 143900100011    	  1328: 	move.b	_KeybdHead,d2		; d2 = buffer head
02:0000433E 4882            	  1329: 	ext.w		d2
02:00004340 41F900100020    	  1330: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
02:00004346 7200            	  1331: 	clr.l		d1
02:00004348 12302000        	  1332: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
02:0000434C 5202            	  1333: 	addi.b	#1,d2						; increment keyboard head index
02:0000434E 0202001F        	  1334: 	andi.b	#31,d2					; and wrap around at buffer size
02:00004352 13C200100011    	  1335: 	move.b	d2,_KeybdHead
02:00004358 533900100013    	  1336: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
02:0000435E C342            	  1337: 	exg			d1,d2						; save scancode value in d2
02:00004360 4E7A0FE0        	  1338: 	movec		coreno,d0
02:00004364 4840            	  1339: 	swap		d0
02:00004366 7203            	  1340: 	moveq		#KEYBD_SEMA,d1
02:00004368 6100BE46        	  1341: 	bsr			UnlockSemaphore
02:0000436C C541            	  1342: 	exg			d2,d1						; restore scancode value
02:0000436E 6026            	  1343: 	bra			.0001						; go process scan code
                            	  1344: .0014:
02:00004370 6100FEE6        	  1345: 	bsr		_KeybdGetStatus		; check keyboard status for key available
02:00004374 6B1C            	  1346: 	bmi		.0006							; yes, go process
                            	  1347: .0015:
02:00004376 4E7A0FE0        	  1348: 	movec		coreno,d0
02:0000437A 4840            	  1349: 	swap		d0
02:0000437C 7203            	  1350: 	moveq		#KEYBD_SEMA,d1
02:0000437E 6100BE30        	  1351: 	bsr			UnlockSemaphore
02:00004382 4A390004000D    	  1352: 	tst.b		KeybdWaitFlag			; are we willing to wait for a key ?
02:00004388 6B9A            	  1353: 	bmi			.0003							; yes, branch back
02:0000438A 4CDF010D        	  1354: 	movem.l	(a7)+,d0/d2/d3/a0
02:0000438E 72FF            	  1355: 	moveq		#-1,d1						; flag no char available
02:00004390 4E75            	  1356: 	rts
                            	  1357: .0006:
02:00004392 6100FECE        	  1358: 	bsr		_KeybdGetScancode
                            	  1359: .0001:
02:00004396 33FC0001FD0FFF00	  1360: 	move.w	#1,leds
02:0000439E B23C00F0        	  1361: 	cmp.b	#SC_KEYUP,d1
02:000043A2 670000C0        	  1362: 	beq		.doKeyup
02:000043A6 B23C00E0        	  1363: 	cmp.b	#SC_EXTEND,d1
02:000043AA 670000C4        	  1364: 	beq		.doExtend
02:000043AE B23C0014        	  1365: 	cmp.b	#SC_CTRL,d1
02:000043B2 670000C8        	  1366: 	beq		.doCtrl
02:000043B6 B23C0012        	  1367: 	cmp.b	#SC_LSHIFT,d1
02:000043BA 6700012A        	  1368: 	beq		.doShift
02:000043BE B23C0059        	  1369: 	cmp.b	#SC_RSHIFT,d1
02:000043C2 67000122        	  1370: 	beq		.doShift
02:000043C6 B23C0077        	  1371: 	cmp.b	#SC_NUMLOCK,d1
02:000043CA 67000142        	  1372: 	beq		.doNumLock
02:000043CE B23C0058        	  1373: 	cmp.b	#SC_CAPSLOCK,d1
02:000043D2 67000148        	  1374: 	beq		.doCapsLock
02:000043D6 B23C007E        	  1375: 	cmp.b	#SC_SCROLLLOCK,d1
02:000043DA 6700014E        	  1376: 	beq		.doScrollLock
02:000043DE B23C0011        	  1377: 	cmp.b   #SC_ALT,d1
02:000043E2 670000C0        	  1378: 	beq     .doAlt
02:000043E6 14390010000F    	  1379: 	move.b	_KeyState1,d2			; check key up/down
02:000043EC 42390010000F    	  1380: 	move.b	#0,_KeyState1			; clear keyup status
02:000043F2 4A02            	  1381: 	tst.b	d2
02:000043F4 6600FF2E        	  1382: 	bne	    .0003					; ignore key up
02:000043F8 B23C000D        	  1383: 	cmp.b   #SC_TAB,d1
02:000043FC 670000CE        	  1384: 	beq     .doTab
                            	  1385: .0013:
02:00004400 143900100010    	  1386: 	move.b	_KeyState2,d2
02:00004406 6A1A            	  1387: 	bpl		.0010					; is it extended code ?
02:00004408 C43C007F        	  1388: 	and.b	#$7F,d2					; clear extended bit
02:0000440C 13C200100010    	  1389: 	move.b	d2,_KeyState2
02:00004412 42390010000F    	  1390: 	move.b	#0,_KeyState1			; clear keyup
02:00004418 41FA04B4        	  1391: 	lea		_keybdExtendedCodes,a0
02:0000441C 12301000        	  1392: 	move.b	(a0,d1.w),d1
02:00004420 6034            	  1393: 	bra		.0008
                            	  1394: .0010:
02:00004422 08020002        	  1395: 	btst	#2,d2					; is it CTRL code ?
02:00004426 670E            	  1396: 	beq		.0009
02:00004428 C27C007F        	  1397: 	and.w	#$7F,d1
02:0000442C 41FA0420        	  1398: 	lea		_keybdControlCodes,a0
02:00004430 12301000        	  1399: 	move.b	(a0,d1.w),d1
02:00004434 6020            	  1400: 	bra		.0008
                            	  1401: .0009:
02:00004436 08020000        	  1402: 	btst	#0,d2					; is it shift down ?
02:0000443A 670A            	  1403: 	beq  	.0007
02:0000443C 41FA0310        	  1404: 	lea		_shiftedScanCodes,a0
02:00004440 12301000        	  1405: 	move.b	(a0,d1.w),d1
02:00004444 6010            	  1406: 	bra		.0008
                            	  1407: .0007:
02:00004446 41FA0206        	  1408: 	lea		_unshiftedScanCodes,a0
02:0000444A 12301000        	  1409: 	move.b	(a0,d1.w),d1
02:0000444E 33FC0202FD0FFF00	  1410: 	move.w	#$0202,leds
                            	  1411: .0008:
02:00004456 33FC0303FD0FFF00	  1412: 	move.w	#$0303,leds
02:0000445E 4CDF010D        	  1413: 	movem.l	(a7)+,d0/d2/d3/a0
02:00004462 4E75            	  1414: 	rts
                            	  1415: .doKeyup:
02:00004464 13FC00FF0010000F	  1416: 	move.b	#-1,_KeyState1
02:0000446C 6000FEB6        	  1417: 	bra		.0003
                            	  1418: .doExtend:
02:00004470 0039008000100010	  1419: 	or.b	#$80,_KeyState2
02:00004478 6000FEAA        	  1420: 	bra		.0003
                            	  1421: .doCtrl:
02:0000447C 12390010000F    	  1422: 	move.b	_KeyState1,d1
02:00004482 42390010000F    	  1423: 	clr.b	_KeyState1
02:00004488 4A01            	  1424: 	tst.b	d1
02:0000448A 6A0C            	  1425: 	bpl.s	.0004
02:0000448C 08B9000200100010	  1426: 	bclr	#2,_KeyState2
02:00004494 6000FE8E        	  1427: 	bra		.0003
                            	  1428: .0004:
02:00004498 08F9000200100010	  1429: 	bset	#2,_KeyState2
02:000044A0 6000FE82        	  1430: 	bra		.0003
                            	  1431: .doAlt:
02:000044A4 12390010000F    	  1432: 	move.b	_KeyState1,d1
02:000044AA 42390010000F    	  1433: 	clr.b	_KeyState1
02:000044B0 4A01            	  1434: 	tst.b	d1
02:000044B2 6A0C            	  1435: 	bpl		.0011
02:000044B4 08B9000100100010	  1436: 	bclr	#1,_KeyState2
02:000044BC 6000FE66        	  1437: 	bra		.0003
                            	  1438: .0011:
02:000044C0 08F9000100100010	  1439: 	bset	#1,_KeyState2
02:000044C8 6000FE5A        	  1440: 	bra		.0003
                            	  1441: .doTab:
02:000044CC 2F01            	  1442: 	move.l	d1,-(a7)
02:000044CE 123900100010    	  1443:   move.b  _KeyState2,d1
02:000044D4 08010001        	  1444:   btst	#1,d1                 ; is ALT down ?
02:000044D8 6706            	  1445:   beq     .0012
                            	  1446: ;    	inc     _iof_switch
02:000044DA 221F            	  1447:   move.l	(a7)+,d1
02:000044DC 6000FE46        	  1448:   bra     .0003
                            	  1449: .0012:
02:000044E0 221F            	  1450:   move.l	(a7)+,d1
02:000044E2 6000FF1C        	  1451:   bra     .0013
                            	  1452: .doShift:
02:000044E6 12390010000F    	  1453: 	move.b	_KeyState1,d1
02:000044EC 42390010000F    	  1454: 	clr.b	_KeyState1
02:000044F2 4A01            	  1455: 	tst.b	d1
02:000044F4 6A0C            	  1456: 	bpl.s	.0005
02:000044F6 08B9000000100010	  1457: 	bclr	#0,_KeyState2
02:000044FE 6000FE24        	  1458: 	bra		.0003
                            	  1459: .0005:
02:00004502 08F9000000100010	  1460: 	bset	#0,_KeyState2
02:0000450A 6000FE18        	  1461: 	bra		.0003
                            	  1462: .doNumLock:
02:0000450E 0879000400100010	  1463: 	bchg	#4,_KeyState2
02:00004516 6120            	  1464: 	bsr		KeybdSetLEDStatus
02:00004518 6000FE0A        	  1465: 	bra		.0003
                            	  1466: .doCapsLock:
02:0000451C 0879000500100010	  1467: 	bchg	#5,_KeyState2
02:00004524 6112            	  1468: 	bsr		KeybdSetLEDStatus
02:00004526 6000FDFC        	  1469: 	bra		.0003
                            	  1470: .doScrollLock:
02:0000452A 0879000600100010	  1471: 	bchg	#6,_KeyState2
02:00004532 6104            	  1472: 	bsr		KeybdSetLEDStatus
02:00004534 6000FDEE        	  1473: 	bra		.0003
                            	  1474: 
                            	  1475: KeybdSetLEDStatus:
02:00004538 48E73000        	  1476: 	movem.l	d2/d3,-(a7)
02:0000453C 42390010000E    	  1477: 	clr.b	KeybdLEDs
02:00004542 0839000400100010	  1478: 	btst	#4,_KeyState2
02:0000454A 6708            	  1479: 	beq.s	.0002
02:0000454C 13FC00020010000E	  1480: 	move.b	#2,KeybdLEDs
                            	  1481: .0002:
02:00004554 0839000500100010	  1482: 	btst	#5,_KeyState2
02:0000455C 6708            	  1483: 	beq.s	.0003
02:0000455E 08F900020010000E	  1484: 	bset	#2,KeybdLEDs
                            	  1485: .0003:
02:00004566 0839000600100010	  1486: 	btst	#6,_KeyState2
02:0000456E 6708            	  1487: 	beq.s	.0004
02:00004570 08F900000010000E	  1488: 	bset	#0,KeybdLEDs
                            	  1489: .0004:
02:00004578 123C00ED        	  1490: 	move.b	#$ED,d1
02:0000457C 6126            	  1491: 	bsr		KeybdSendByte
02:0000457E 6100FD12        	  1492: 	bsr		KeybdWaitTx
02:00004582 6100FCEE        	  1493: 	bsr		KeybdRecvByte
02:00004586 4A01            	  1494: 	tst.b	d1
02:00004588 6B14            	  1495: 	bmi		.0001
02:0000458A B27C00FA        	  1496: 	cmp		#$FA,d1
02:0000458E 12390010000E    	  1497: 	move.b	KeybdLEDs,d1
02:00004594 610E            	  1498: 	bsr		KeybdSendByte
02:00004596 6100FCFA        	  1499: 	bsr		KeybdWaitTx
02:0000459A 6100FCD6        	  1500: 	bsr		KeybdRecvByte
                            	  1501: .0001:
02:0000459E 4CDF000C        	  1502: 	movem.l	(a7)+,d2/d3
02:000045A2 4E75            	  1503: 	rts
                            	  1504: 
                            	  1505: KeybdSendByte:
02:000045A4 13C1FD0FFE00    	  1506: 	move.b	d1,KEYBD
02:000045AA 4E75            	  1507: 	rts
                            	  1508: 	
                            	  1509: Wait10ms:
02:000045AC 2F03            	  1510: 	move.l	d3,-(a7)
02:000045AE 263C000003E8    	  1511: 	move.l	#1000,d3
                            	  1512: .0001:
02:000045B4 51CBFFFE        	  1513: 	dbra	d3,.0001
02:000045B8 261F            	  1514: 	move.l	(a7)+,d3
02:000045BA 4E75            	  1515: 	rts
                            	  1516: 
                            	  1517: 
                            	  1518: ;--------------------------------------------------------------------------
                            	  1519: ; Keyboard IRQ routine.
                            	  1520: ;
                            	  1521: ; Returns:
                            	  1522: ; 	d1 = -1 if keyboard routine handled interrupt, otherwise positive.
                            	  1523: ;--------------------------------------------------------------------------
                            	  1524: 
                            	  1525: KeybdIRQ:
02:000045BC 46FC2600        	  1526: 	move.w	#$2600,sr					; disable lower interrupts
02:000045C0 48E7C080        	  1527: 	movem.l	d0/d1/a0,-(a7)
02:000045C4 6100FC92        	  1528: 	bsr			_KeybdGetStatus		; check if keyboard
02:000045C8 4A01            	  1529: 	tst.b		d1
02:000045CA 6A7C            	  1530: 	bpl			.0001							; branch if not keyboard
02:000045CC 4E7A0FE0        	  1531: 	movec		coreno,d0
02:000045D0 4840            	  1532: 	swap		d0
02:000045D2 7203            	  1533: 	moveq		#KEYBD_SEMA,d1
02:000045D4 6100BBA0        	  1534: 	bsr			LockSemaphore
02:000045D8 0839000100100010	  1535: 	btst		#1,_KeyState2			; Is Alt down?
02:000045E0 6728            	  1536: 	beq.s		.0003
02:000045E2 1039FD0FFE00    	  1537: 	move.b	KEYBD,d0					; get scan code
02:000045E8 0C00000D        	  1538: 	cmpi.b	#SC_TAB,d0				; is Alt-Tab?
02:000045EC 661C            	  1539: 	bne.s		.0003
02:000045EE 6100FC72        	  1540: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
02:000045F2 6100FBFE        	  1541: 	bsr			rotate_iofocus
02:000045F6 423900100011    	  1542: 	clr.b		_KeybdHead				; clear keyboard buffer
02:000045FC 423900100012    	  1543: 	clr.b		_KeybdTail
02:00004602 423900100013    	  1544: 	clr.b		_KeybdCnt
02:00004608 6032            	  1545: 	bra			.0002							; do not store Alt-Tab
                            	  1546: .0003:
                            	  1547: 	; Insert keyboard scan code into raw keyboard buffer
02:0000460A 6100FC56        	  1548: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
02:0000460E 0C39002000100013	  1549: 	cmpi.b	#32,_KeybdCnt			; see if keyboard buffer full
02:00004616 6424            	  1550: 	bhs.s		.0002
02:00004618 103900100012    	  1551: 	move.b	_KeybdTail,d0			; keyboard buffer not full, add to tail
02:0000461E 4880            	  1552: 	ext.w		d0
02:00004620 41F900100020    	  1553: 	lea			_KeybdBuf,a0			; a0 = pointer to buffer
02:00004626 11810000        	  1554: 	move.b	d1,(a0,d0.w)			; put scancode in buffer
02:0000462A 5200            	  1555: 	addi.b	#1,d0							; increment tail index
02:0000462C 0200001F        	  1556: 	andi.b	#31,d0						; wrap at buffer limit
02:00004630 13C000100012    	  1557: 	move.b	d0,_KeybdTail			; update tail index
02:00004636 523900100013    	  1558: 	addi.b	#1,_KeybdCnt			; increment buffer count
                            	  1559: .0002:
02:0000463C 4E7A0FE0        	  1560: 	movec		coreno,d0
02:00004640 4840            	  1561: 	swap		d0
02:00004642 7203            	  1562: 	moveq		#KEYBD_SEMA,d1
02:00004644 6100BB6A        	  1563: 	bsr			UnlockSemaphore
                            	  1564: .0001:
02:00004648 4CDF0103        	  1565: 	movem.l	(a7)+,d0/d1/a0		; return
02:0000464C 4E73            	  1566: 	rte
                            	  1567: 
                            	  1568: ;--------------------------------------------------------------------------
                            	  1569: ; PS2 scan codes to ascii conversion tables.
                            	  1570: ;--------------------------------------------------------------------------
                            	  1571: ;
                            	  1572: _unshiftedScanCodes:
02:0000464E 2E              	  1573: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
02:0000464F A9
02:00004650 2E
02:00004651 A5
02:00004652 A3
02:00004653 A1
02:00004654 A2
02:00004655 AC
02:00004656 2E              	  1574: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
02:00004657 AA
02:00004658 A8
02:00004659 A6
02:0000465A A4
02:0000465B 09
02:0000465C 60
02:0000465D 2E
02:0000465E 2E              	  1575: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
02:0000465F 2E
02:00004660 2E
02:00004661 2E
02:00004662 2E
02:00004663 71
02:00004664 31
02:00004665 2E
02:00004666 2E              	  1576: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
02:00004667 2E
02:00004668 7A
02:00004669 73
02:0000466A 61
02:0000466B 77
02:0000466C 32
02:0000466D 2E
02:0000466E 2E              	  1577: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
02:0000466F 63
02:00004670 78
02:00004671 64
02:00004672 65
02:00004673 34
02:00004674 33
02:00004675 2E
02:00004676 2E              	  1578: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
02:00004677 20
02:00004678 76
02:00004679 66
02:0000467A 74
02:0000467B 72
02:0000467C 35
02:0000467D 2E
02:0000467E 2E              	  1579: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
02:0000467F 6E
02:00004680 62
02:00004681 68
02:00004682 67
02:00004683 79
02:00004684 36
02:00004685 2E
02:00004686 2E              	  1580: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
02:00004687 2E
02:00004688 6D
02:00004689 6A
02:0000468A 75
02:0000468B 37
02:0000468C 38
02:0000468D 2E
02:0000468E 2E              	  1581: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
02:0000468F 2C
02:00004690 6B
02:00004691 69
02:00004692 6F
02:00004693 30
02:00004694 39
02:00004695 2E
02:00004696 2E              	  1582: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
02:00004697 2E
02:00004698 2F
02:00004699 6C
02:0000469A 3B
02:0000469B 70
02:0000469C 2D
02:0000469D 2E
02:0000469E 2E              	  1583: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
02:0000469F 2E
02:000046A0 27
02:000046A1 2E
02:000046A2 5B
02:000046A3 3D
02:000046A4 2E
02:000046A5 2E
02:000046A6 AD              	  1584: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
02:000046A7 2E
02:000046A8 0D
02:000046A9 5D
02:000046AA 2E
02:000046AB 5C
02:000046AC 2E
02:000046AD 2E
02:000046AE 2E              	  1585: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
02:000046AF 2E
02:000046B0 2E
02:000046B1 2E
02:000046B2 2E
02:000046B3 2E
02:000046B4 08
02:000046B5 2E
02:000046B6 2E              	  1586: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
02:000046B7 95
02:000046B8 2E
02:000046B9 93
02:000046BA 94
02:000046BB 2E
02:000046BC 2E
02:000046BD 2E
02:000046BE 98              	  1587: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
02:000046BF 7F
02:000046C0 92
02:000046C1 2E
02:000046C2 91
02:000046C3 90
02:000046C4 1B
02:000046C5 AF
02:000046C6 AB              	  1588: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
02:000046C7 2E
02:000046C8 97
02:000046C9 2E
02:000046CA 2E
02:000046CB 96
02:000046CC AE
02:000046CD 2E
                            	  1589: 
02:000046CE 2E              	  1590: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
02:000046CF 2E
02:000046D0 2E
02:000046D1 A7
02:000046D2 2E
02:000046D3 2E
02:000046D4 2E
02:000046D5 2E
02:000046D6 2E              	  1591: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046D7 2E
02:000046D8 2E
02:000046D9 2E
02:000046DA 2E
02:000046DB 2E
02:000046DC 2E
02:000046DD 2E
02:000046DE 2E              	  1592: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046DF 2E
02:000046E0 2E
02:000046E1 2E
02:000046E2 2E
02:000046E3 2E
02:000046E4 2E
02:000046E5 2E
02:000046E6 2E              	  1593: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046E7 2E
02:000046E8 2E
02:000046E9 2E
02:000046EA 2E
02:000046EB 2E
02:000046EC 2E
02:000046ED 2E
02:000046EE 2E              	  1594: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046EF 2E
02:000046F0 2E
02:000046F1 2E
02:000046F2 2E
02:000046F3 2E
02:000046F4 2E
02:000046F5 2E
02:000046F6 2E              	  1595: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046F7 2E
02:000046F8 2E
02:000046F9 2E
02:000046FA 2E
02:000046FB 2E
02:000046FC 2E
02:000046FD 2E
02:000046FE 2E              	  1596: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046FF 2E
02:00004700 2E
02:00004701 2E
02:00004702 2E
02:00004703 2E
02:00004704 2E
02:00004705 2E
02:00004706 2E              	  1597: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004707 2E
02:00004708 2E
02:00004709 2E
02:0000470A 2E
02:0000470B 2E
02:0000470C 2E
02:0000470D 2E
02:0000470E 2E              	  1598: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000470F 2E
02:00004710 2E
02:00004711 2E
02:00004712 2E
02:00004713 2E
02:00004714 2E
02:00004715 2E
02:00004716 2E              	  1599: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004717 2E
02:00004718 2E
02:00004719 2E
02:0000471A 2E
02:0000471B 2E
02:0000471C 2E
02:0000471D 2E
02:0000471E 2E              	  1600: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000471F 2E
02:00004720 2E
02:00004721 2E
02:00004722 2E
02:00004723 2E
02:00004724 2E
02:00004725 2E
02:00004726 2E              	  1601: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004727 2E
02:00004728 2E
02:00004729 2E
02:0000472A 2E
02:0000472B 2E
02:0000472C 2E
02:0000472D 2E
02:0000472E 2E              	  1602: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000472F 2E
02:00004730 2E
02:00004731 2E
02:00004732 2E
02:00004733 2E
02:00004734 2E
02:00004735 2E
02:00004736 2E              	  1603: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004737 2E
02:00004738 2E
02:00004739 2E
02:0000473A 2E
02:0000473B 2E
02:0000473C 2E
02:0000473D 2E
02:0000473E 2E              	  1604: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000473F 2E
02:00004740 2E
02:00004741 2E
02:00004742 2E
02:00004743 2E
02:00004744 2E
02:00004745 2E
02:00004746 2E              	  1605: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
02:00004747 2E
02:00004748 FA
02:00004749 2E
02:0000474A 2E
02:0000474B 2E
02:0000474C 2E
02:0000474D 2E
                            	  1606: 
                            	  1607: _shiftedScanCodes:
02:0000474E 2E              	  1608: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000474F 2E
02:00004750 2E
02:00004751 2E
02:00004752 2E
02:00004753 2E
02:00004754 2E
02:00004755 2E
02:00004756 2E              	  1609: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
02:00004757 2E
02:00004758 2E
02:00004759 2E
02:0000475A 2E
02:0000475B 09
02:0000475C 7E
02:0000475D 2E
02:0000475E 2E              	  1610: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
02:0000475F 2E
02:00004760 2E
02:00004761 2E
02:00004762 2E
02:00004763 51
02:00004764 21
02:00004765 2E
02:00004766 2E              	  1611: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
02:00004767 2E
02:00004768 5A
02:00004769 53
02:0000476A 41
02:0000476B 57
02:0000476C 40
02:0000476D 2E
02:0000476E 2E              	  1612: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
02:0000476F 43
02:00004770 58
02:00004771 44
02:00004772 45
02:00004773 24
02:00004774 23
02:00004775 2E
02:00004776 2E              	  1613: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
02:00004777 20
02:00004778 56
02:00004779 46
02:0000477A 54
02:0000477B 52
02:0000477C 25
02:0000477D 2E
02:0000477E 2E              	  1614: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
02:0000477F 4E
02:00004780 42
02:00004781 48
02:00004782 47
02:00004783 59
02:00004784 5E
02:00004785 2E
02:00004786 2E              	  1615: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
02:00004787 2E
02:00004788 4D
02:00004789 4A
02:0000478A 55
02:0000478B 26
02:0000478C 2A
02:0000478D 2E
02:0000478E 2E              	  1616: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
02:0000478F 3C
02:00004790 4B
02:00004791 49
02:00004792 4F
02:00004793 29
02:00004794 28
02:00004795 2E
02:00004796 2E              	  1617: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
02:00004797 3E
02:00004798 3F
02:00004799 4C
02:0000479A 3A
02:0000479B 50
02:0000479C 5F
02:0000479D 2E
02:0000479E 2E              	  1618: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
02:0000479F 2E
02:000047A0 22
02:000047A1 2E
02:000047A2 7B
02:000047A3 2B
02:000047A4 2E
02:000047A5 2E
02:000047A6 2E              	  1619: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
02:000047A7 2E
02:000047A8 0D
02:000047A9 7D
02:000047AA 2E
02:000047AB 7C
02:000047AC 2E
02:000047AD 2E
02:000047AE 2E              	  1620: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
02:000047AF 2E
02:000047B0 2E
02:000047B1 2E
02:000047B2 2E
02:000047B3 2E
02:000047B4 08
02:000047B5 2E
02:000047B6 2E              	  1621: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047B7 2E
02:000047B8 2E
02:000047B9 2E
02:000047BA 2E
02:000047BB 2E
02:000047BC 2E
02:000047BD 2E
02:000047BE 2E              	  1622: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
02:000047BF 7F
02:000047C0 2E
02:000047C1 2E
02:000047C2 2E
02:000047C3 2E
02:000047C4 1B
02:000047C5 2E
02:000047C6 2E              	  1623: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047C7 2E
02:000047C8 2E
02:000047C9 2E
02:000047CA 2E
02:000047CB 2E
02:000047CC 2E
02:000047CD 2E
                            	  1624: 
02:000047CE 2E              	  1625: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047CF 2E
02:000047D0 2E
02:000047D1 2E
02:000047D2 2E
02:000047D3 2E
02:000047D4 2E
02:000047D5 2E
02:000047D6 2E              	  1626: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047D7 2E
02:000047D8 2E
02:000047D9 2E
02:000047DA 2E
02:000047DB 2E
02:000047DC 2E
02:000047DD 2E
02:000047DE 2E              	  1627: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047DF 2E
02:000047E0 2E
02:000047E1 2E
02:000047E2 2E
02:000047E3 2E
02:000047E4 2E
02:000047E5 2E
02:000047E6 2E              	  1628: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047E7 2E
02:000047E8 2E
02:000047E9 2E
02:000047EA 2E
02:000047EB 2E
02:000047EC 2E
02:000047ED 2E
02:000047EE 2E              	  1629: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047EF 2E
02:000047F0 2E
02:000047F1 2E
02:000047F2 2E
02:000047F3 2E
02:000047F4 2E
02:000047F5 2E
02:000047F6 2E              	  1630: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047F7 2E
02:000047F8 2E
02:000047F9 2E
02:000047FA 2E
02:000047FB 2E
02:000047FC 2E
02:000047FD 2E
02:000047FE 2E              	  1631: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047FF 2E
02:00004800 2E
02:00004801 2E
02:00004802 2E
02:00004803 2E
02:00004804 2E
02:00004805 2E
02:00004806 2E              	  1632: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004807 2E
02:00004808 2E
02:00004809 2E
02:0000480A 2E
02:0000480B 2E
02:0000480C 2E
02:0000480D 2E
02:0000480E 2E              	  1633: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000480F 2E
02:00004810 2E
02:00004811 2E
02:00004812 2E
02:00004813 2E
02:00004814 2E
02:00004815 2E
02:00004816 2E              	  1634: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004817 2E
02:00004818 2E
02:00004819 2E
02:0000481A 2E
02:0000481B 2E
02:0000481C 2E
02:0000481D 2E
02:0000481E 2E              	  1635: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000481F 2E
02:00004820 2E
02:00004821 2E
02:00004822 2E
02:00004823 2E
02:00004824 2E
02:00004825 2E
02:00004826 2E              	  1636: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004827 2E
02:00004828 2E
02:00004829 2E
02:0000482A 2E
02:0000482B 2E
02:0000482C 2E
02:0000482D 2E
02:0000482E 2E              	  1637: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000482F 2E
02:00004830 2E
02:00004831 2E
02:00004832 2E
02:00004833 2E
02:00004834 2E
02:00004835 2E
02:00004836 2E              	  1638: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004837 2E
02:00004838 2E
02:00004839 2E
02:0000483A 2E
02:0000483B 2E
02:0000483C 2E
02:0000483D 2E
02:0000483E 2E              	  1639: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000483F 2E
02:00004840 2E
02:00004841 2E
02:00004842 2E
02:00004843 2E
02:00004844 2E
02:00004845 2E
02:00004846 2E              	  1640: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004847 2E
02:00004848 2E
02:00004849 2E
02:0000484A 2E
02:0000484B 2E
02:0000484C 2E
02:0000484D 2E
                            	  1641: 
                            	  1642: ; control
                            	  1643: _keybdControlCodes:
02:0000484E 2E              	  1644: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000484F 2E
02:00004850 2E
02:00004851 2E
02:00004852 2E
02:00004853 2E
02:00004854 2E
02:00004855 2E
02:00004856 2E              	  1645: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
02:00004857 2E
02:00004858 2E
02:00004859 2E
02:0000485A 2E
02:0000485B 09
02:0000485C 7E
02:0000485D 2E
02:0000485E 2E              	  1646: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
02:0000485F 2E
02:00004860 2E
02:00004861 2E
02:00004862 2E
02:00004863 11
02:00004864 21
02:00004865 2E
02:00004866 2E              	  1647: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
02:00004867 2E
02:00004868 1A
02:00004869 13
02:0000486A 01
02:0000486B 17
02:0000486C 40
02:0000486D 2E
02:0000486E 2E              	  1648: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
02:0000486F 03
02:00004870 18
02:00004871 04
02:00004872 05
02:00004873 24
02:00004874 23
02:00004875 2E
02:00004876 2E              	  1649: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
02:00004877 20
02:00004878 16
02:00004879 06
02:0000487A 14
02:0000487B 12
02:0000487C 25
02:0000487D 2E
02:0000487E 2E              	  1650: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
02:0000487F 0E
02:00004880 02
02:00004881 08
02:00004882 07
02:00004883 19
02:00004884 5E
02:00004885 2E
02:00004886 2E              	  1651: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
02:00004887 2E
02:00004888 0D
02:00004889 0A
02:0000488A 15
02:0000488B 26
02:0000488C 2A
02:0000488D 2E
02:0000488E 2E              	  1652: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
02:0000488F 3C
02:00004890 0B
02:00004891 09
02:00004892 0F
02:00004893 29
02:00004894 28
02:00004895 2E
02:00004896 2E              	  1653: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
02:00004897 3E
02:00004898 3F
02:00004899 0C
02:0000489A 3A
02:0000489B 10
02:0000489C 5F
02:0000489D 2E
02:0000489E 2E              	  1654: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
02:0000489F 2E
02:000048A0 22
02:000048A1 2E
02:000048A2 7B
02:000048A3 2B
02:000048A4 2E
02:000048A5 2E
02:000048A6 2E              	  1655: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
02:000048A7 2E
02:000048A8 0D
02:000048A9 7D
02:000048AA 2E
02:000048AB 7C
02:000048AC 2E
02:000048AD 2E
02:000048AE 2E              	  1656: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
02:000048AF 2E
02:000048B0 2E
02:000048B1 2E
02:000048B2 2E
02:000048B3 2E
02:000048B4 08
02:000048B5 2E
02:000048B6 2E              	  1657: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048B7 2E
02:000048B8 2E
02:000048B9 2E
02:000048BA 2E
02:000048BB 2E
02:000048BC 2E
02:000048BD 2E
02:000048BE 2E              	  1658: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
02:000048BF 7F
02:000048C0 2E
02:000048C1 2E
02:000048C2 2E
02:000048C3 2E
02:000048C4 1B
02:000048C5 2E
02:000048C6 2E              	  1659: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048C7 2E
02:000048C8 2E
02:000048C9 2E
02:000048CA 2E
02:000048CB 2E
02:000048CC 2E
02:000048CD 2E
                            	  1660: 
                            	  1661: _keybdExtendedCodes:
02:000048CE 2E              	  1662: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
02:000048CF 2E
02:000048D0 2E
02:000048D1 2E
02:000048D2 A3
02:000048D3 A1
02:000048D4 A2
02:000048D5 2E
02:000048D6 2E              	  1663: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048D7 2E
02:000048D8 2E
02:000048D9 2E
02:000048DA 2E
02:000048DB 2E
02:000048DC 2E
02:000048DD 2E
02:000048DE 2E              	  1664: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048DF 2E
02:000048E0 2E
02:000048E1 2E
02:000048E2 2E
02:000048E3 2E
02:000048E4 2E
02:000048E5 2E
02:000048E6 2E              	  1665: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048E7 2E
02:000048E8 2E
02:000048E9 2E
02:000048EA 2E
02:000048EB 2E
02:000048EC 2E
02:000048ED 2E
02:000048EE 2E              	  1666: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048EF 2E
02:000048F0 2E
02:000048F1 2E
02:000048F2 2E
02:000048F3 2E
02:000048F4 2E
02:000048F5 2E
02:000048F6 2E              	  1667: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048F7 2E
02:000048F8 2E
02:000048F9 2E
02:000048FA 2E
02:000048FB 2E
02:000048FC 2E
02:000048FD 2E
02:000048FE 2E              	  1668: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000048FF 2E
02:00004900 2E
02:00004901 2E
02:00004902 2E
02:00004903 2E
02:00004904 2E
02:00004905 2E
02:00004906 2E              	  1669: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004907 2E
02:00004908 2E
02:00004909 2E
02:0000490A 2E
02:0000490B 2E
02:0000490C 2E
02:0000490D 2E
02:0000490E 2E              	  1670: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000490F 2E
02:00004910 2E
02:00004911 2E
02:00004912 2E
02:00004913 2E
02:00004914 2E
02:00004915 2E
02:00004916 2E              	  1671: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004917 2E
02:00004918 2E
02:00004919 2E
02:0000491A 2E
02:0000491B 2E
02:0000491C 2E
02:0000491D 2E
02:0000491E 2E              	  1672: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000491F 2E
02:00004920 2E
02:00004921 2E
02:00004922 2E
02:00004923 2E
02:00004924 2E
02:00004925 2E
02:00004926 2E              	  1673: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004927 2E
02:00004928 2E
02:00004929 2E
02:0000492A 2E
02:0000492B 2E
02:0000492C 2E
02:0000492D 2E
02:0000492E 2E              	  1674: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000492F 2E
02:00004930 2E
02:00004931 2E
02:00004932 2E
02:00004933 2E
02:00004934 2E
02:00004935 2E
02:00004936 2E              	  1675: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
02:00004937 95
02:00004938 2E
02:00004939 93
02:0000493A 94
02:0000493B 2E
02:0000493C 2E
02:0000493D 2E
02:0000493E 98              	  1676: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
02:0000493F 99
02:00004940 92
02:00004941 2E
02:00004942 91
02:00004943 90
02:00004944 2E
02:00004945 2E
02:00004946 2E              	  1677: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
02:00004947 2E
02:00004948 97
02:00004949 2E
02:0000494A 2E
02:0000494B 96
02:0000494C 2E
02:0000494D 2E
                            	  1678: 
                            	  1679: ;==============================================================================
                            	  1680: ;==============================================================================
                            	  1681: ; Monitor
                            	  1682: ;==============================================================================
                            	  1683: ;==============================================================================
                            	  1684: 
                            	  1685: cmdString:
02:0000494E BF              	  1686: 	dc.b	'?'+$80						; ? display help
02:0000494F CC              	  1687: 	dc.b	'L'+$80						; L load S19 file
02:00004950 46              	  1688: 	dc.b	'F','B'+$80				; FB fill with byte
02:00004951 C2
02:00004952 46              	  1689: 	dc.b	'F','W'+$80				; FW fill with wyde
02:00004953 D7
02:00004954 46              	  1690: 	dc.b	'F','L'+$80				; FL fill with long wyde
02:00004955 CC
02:00004956 42              	  1691: 	dc.b	'B','A'+$80				; BA start Tiny Basic
02:00004957 C1
02:00004958 42              	  1692: 	dc.b	'B','R'+$80				; BR breakpoint
02:00004959 D2
02:0000495A 44              	  1693: 	dc.b	'D','R'+$80				; DR dump registers
02:0000495B D2
02:0000495C C4              	  1694: 	dc.b	'D'+$80						; D dump memory
02:0000495D CA              	  1695: 	dc.b	'J'+$80						; J jump to code
02:0000495E BA              	  1696: 	dc.b	':'+$80						; : edit memory
02:0000495F 434C            	  1697: 	dc.b	"CL",'S'+$80			; CLS clear screen
02:00004961 D3
02:00004962 434F52          	  1698: 	dc.b	"COR",'E'+$80			; CORE <n> switch to core
02:00004965 C5
02:00004966 54              	  1699: 	dc.b	'T','R'+$80				; TR test serial receive
02:00004967 D2
02:00004968 D4              	  1700: 	dc.b	'T'+$80						; T test CPU
02:00004969 D3              	  1701: 	dc.b	'S'+$80						; S send serial
02:0000496A D2              	  1702: 	dc.b	'R'+$80						; R receive serial
                            	  1703: 
                            	  1704: 	align	2
                            	  1705: cmdTable:
02:0000496C 4AA4            	  1706: 	dc.w	cmdHelp
02:0000496E 4FD6            	  1707: 	dc.w	cmdLoadS19
02:00004970 4CEC            	  1708: 	dc.w	cmdFillB
02:00004972 4D10            	  1709: 	dc.w	cmdFillW
02:00004974 4D34            	  1710: 	dc.w	cmdFillL
02:00004976 4A5E            	  1711: 	dc.w	cmdTinyBasic
02:00004978 4A3A            	  1712: 	dc.w	cmdBreakpoint
02:0000497A 4E66            	  1713: 	dc.w	cmdDumpRegs
02:0000497C 4DD8            	  1714: 	dc.w	cmdDumpMemory
02:0000497E 4DCA            	  1715: 	dc.w	cmdJump
02:00004980 4D6A            	  1716: 	dc.w	cmdEditMemory
02:00004982 4A74            	  1717: 	dc.w	cmdClearScreen
02:00004984 4A80            	  1718: 	dc.w	cmdCore
02:00004986 4F10            	  1719: 	dc.w	cmdTestSerialReceive
02:00004988 4A64            	  1720: 	dc.w	cmdTestCPU
02:0000498A 4C88            	  1721: 	dc.w	cmdSendSerial
02:0000498C 4CB8            	  1722: 	dc.w	cmdReceiveSerial	
02:0000498E 49A4            	  1723: 	dc.w	cmdMonitor
                            	  1724: 
                            	  1725: ; Get a word from screen memory and swap byte order
                            	  1726: 
                            	  1727: FromScreen:
02:00004990 2210            	  1728: 	move.l	(a0),d1
02:00004992 61000850        	  1729: 	bsr			rbo
02:00004996 5088            	  1730: 	lea			8(a0),a0	; increment screen pointer
02:00004998 4E75            	  1731: 	rts
                            	  1732: 
                            	  1733: StartMon:
02:0000499A 427900040202    	  1734: 	clr.w		NumSetBreakpoints
02:000049A0 61000BBA        	  1735: 	bsr			ClearBreakpointList
                            	  1736: cmdMonitor:
                            	  1737: Monitor:
                            	  1738: 	; Reset the stack pointer on each entry into the monitor
02:000049A4 2E7C00040FFC    	  1739: 	move.l	#$40FFC,sp	; reset core's stack
02:000049AA 46FC2200        	  1740: 	move.w	#$2200,sr		; enable level 2 and higher interrupts
02:000049AE 4E7A0FE0        	  1741: 	movec		coreno,d0
02:000049B2 4840            	  1742: 	swap		d0
02:000049B4 7201            	  1743: 	moveq		#1,d1
02:000049B6 6100B7F8        	  1744: 	bsr			UnlockSemaphore
02:000049BA 42390004000C    	  1745: 	clr.b		KeybdEcho		; turn off keyboard echo
                            	  1746: PromptLn:
02:000049C0 6100F3EA        	  1747: 	bsr			CRLF
02:000049C4 123C0024        	  1748: 	move.b	#'$',d1
02:000049C8 6100F42C        	  1749: 	bsr			DisplayChar
                            	  1750: 
                            	  1751: ; Get characters until a CR is keyed
                            	  1752: ;
                            	  1753: Prompt3:
02:000049CC 6100F8FE        	  1754: 	bsr			GetKey
02:000049D0 0C0100FF        	  1755: 	cmpi.b	#-1,d1
02:000049D4 67F6            	  1756: 	beq.s		Prompt3
02:000049D6 0C01000D        	  1757: 	cmpi.b	#CR,d1
02:000049DA 6706            	  1758: 	beq.s		Prompt1
02:000049DC 6100F418        	  1759: 	bsr			DisplayChar
02:000049E0 60EA            	  1760: 	bra.s		Prompt3
                            	  1761: 
                            	  1762: ; Process the screen line that the CR was keyed on
                            	  1763: 
                            	  1764: Prompt1:
02:000049E2 423900040001    	  1765: 	clr.b		CursorCol			; go back to the start of the line
02:000049E8 6100F3FE        	  1766: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1767: .0001:
02:000049EC 61A2            	  1768: 	bsr			FromScreen		; grab character off screen
02:000049EE 0C010024        	  1769: 	cmpi.b	#'$',d1				; skip over '$' prompt character
02:000049F2 67F8            	  1770: 	beq.s		.0001
                            	  1771: 	
                            	  1772: ; Dispatch based on command string
                            	  1773: 
                            	  1774: cmdDispatch:
02:000049F4 45FAFF58        	  1775: 	lea			cmdString,a2
02:000049F8 7800            	  1776: 	clr.l		d4						; command counter
02:000049FA 5188            	  1777: 	lea			-8(a0),a0			; backup a character
02:000049FC 2648            	  1778: 	move.l	a0,a3					; a3 = start of command on screen
                            	  1779: .checkNextCmd:
02:000049FE 6190            	  1780: 	bsr			FromScreen		; d1 = char from input screen
02:00004A00 1A1A            	  1781: 	move.b	(a2)+,d5
02:00004A02 BB01            	  1782: 	eor.b		d5,d1					; does it match with command string?
02:00004A04 67F8            	  1783: 	beq.s		.checkNextCmd	; If it does, keep matching for longest match
02:00004A06 0C010080        	  1784: 	cmpi.b	#$80,d1				; didn't match, was it the end of the command?
02:00004A0A 6724            	  1785: 	beq.s		.foundCmd
02:00004A0C 4A2AFFFF        	  1786: 	tst.b		-1(a2)				; was end of table hit?
02:00004A10 6712            	  1787: 	beq.s		.endOfTable
02:00004A12 5444            	  1788: 	addi.w	#2,d4					; increment command counter
02:00004A14 204B            	  1789: 	move.l	a3,a0					; reset input pointer
02:00004A16 4A2AFFFF        	  1790: 	tst.b		-1(a2)				; were we at the end of the command?
02:00004A1A 6BE2            	  1791: 	bmi.s		.checkNextCmd	; if were at end continue, otherwise scan for enf of cmd
                            	  1792: .scanToEndOfCmd
02:00004A1C 4A1A            	  1793: 	tst.b		(a2)+					; scan to end of command
02:00004A1E 6704            	  1794: 	beq.s		.endOfTable
02:00004A20 6AFA            	  1795: 	bpl.s		.scanToEndOfCmd
02:00004A22 6BDA            	  1796: 	bmi.s		.checkNextCmd
                            	  1797: .endOfTable
02:00004A24 43FA019C        	  1798: 	lea			msgUnknownCmd,a1
02:00004A28 6100F65E        	  1799: 	bsr			DisplayStringCRLF
02:00004A2C 6000FF76        	  1800: 	bra			Monitor
                            	  1801: .foundCmd:
02:00004A30 43FAFF3A        	  1802: 	lea			cmdTable,a1		; a1 = pointer to command address table
02:00004A34 32714000        	  1803: 	move.w	(a1,d4.w),a1	; fetch command routine address from table
02:00004A38 4ED1            	  1804: 	jmp			(a1)					; go execute command
                            	  1805: 
                            	  1806: cmdBreakpoint:
02:00004A3A 6100031C        	  1807: 	bsr			ignBlanks
02:00004A3E 6100FF50        	  1808: 	bsr			FromScreen
02:00004A42 0C01002B        	  1809: 	cmpi.b	#'+',d1
02:00004A46 67000A22        	  1810: 	beq			ArmBreakpoint
02:00004A4A 0C01002D        	  1811: 	cmpi.b	#'-',d1
02:00004A4E 67000A98        	  1812: 	beq			DisarmBreakpoint
02:00004A52 0C01004C        	  1813: 	cmpi.b	#'L',d1
02:00004A56 67000AE4        	  1814: 	beq			ListBreakpoints
02:00004A5A 6000FF48        	  1815: 	bra			Monitor
                            	  1816: 
                            	  1817: cmdTinyBasic:
02:00004A5E 4EF900010000    	  1818: 	jmp			$10000
                            	  1819: 
                            	  1820: cmdTestCPU:
02:00004A64 6100B788        	  1821: 	bsr			cpu_test
02:00004A68 43FA0C3F        	  1822: 	lea			msg_test_done,a1
02:00004A6C 6100F61A        	  1823: 	bsr			DisplayStringCRLF
02:00004A70 6000FF32        	  1824: 	bra			Monitor
                            	  1825: 
                            	  1826: cmdClearScreen:
02:00004A74 61000768        	  1827: 	bsr			ClearScreen
02:00004A78 6100F63A        	  1828: 	bsr			HomeCursor
02:00004A7C 6000FF26        	  1829: 	bra			Monitor
                            	  1830: 
                            	  1831: cmdCore:
02:00004A80 610002D6        	  1832: 	bsr			ignBlanks
02:00004A84 6100FF0A        	  1833: 	bsr			FromScreen
02:00004A88 0C010032        	  1834: 	cmpi.b	#'2',d1					; check range
02:00004A8C 6500FF16        	  1835: 	blo			Monitor
02:00004A90 0C010039        	  1836: 	cmpi.b	#'9',d1
02:00004A94 6200FF0E        	  1837: 	bhi			Monitor
02:00004A98 04010030        	  1838: 	subi.b	#'0',d1					; convert ascii to binary
02:00004A9C 6100F742        	  1839: 	bsr			select_iofocus
02:00004AA0 6000FF02        	  1840: 	bra			Monitor
                            	  1841: 
                            	  1842: cmdHelp:
                            	  1843: DisplayHelp:
02:00004AA4 43FA000A        	  1844: 	lea			HelpMsg,a1
02:00004AA8 6100F5C8        	  1845: 	bsr			DisplayString
02:00004AAC 6000FEF6        	  1846: 	bra			Monitor
                            	  1847: 
                            	  1848: HelpMsg:
02:00004AB0 3F203D2044697370	  1849: 	dc.b	"? = Display help",CR,LF
02:00004AB8 6C61792068656C70
02:00004AC0 0D
02:00004AC1 0A
02:00004AC2 434F5245203C6E3E	  1850: 	dc.b  "CORE <n> = switch to core n",CR,LF
02:00004ACA 203D207377697463
02:00004AD2 6820746F20636F72
02:00004ADA 65206E
02:00004ADD 0D
02:00004ADE 0A
02:00004ADF 434C53203D20636C	  1851: 	dc.b	"CLS = clear screen",CR,LF
02:00004AE7 6561722073637265
02:00004AEF 656E
02:00004AF1 0D
02:00004AF2 0A
02:00004AF3 3A203D2045646974	  1852: 	dc.b	": = Edit memory bytes",CR,LF
02:00004AFB 206D656D6F727920
02:00004B03 6279746573
02:00004B08 0D
02:00004B09 0A
02:00004B0A 46203D2046696C6C	  1853: 	dc.b	"F = Fill memory",CR,LF
02:00004B12 206D656D6F7279
02:00004B19 0D
02:00004B1A 0A
02:00004B1B 4C203D204C6F6164	  1854: 	dc.b	"L = Load S19 file",CR,LF
02:00004B23 205331392066696C
02:00004B2B 65
02:00004B2C 0D
02:00004B2D 0A
02:00004B2E 44203D2044756D70	  1855: 	dc.b	"D = Dump memory, DR = dump registers",CR,LF
02:00004B36 206D656D6F72792C
02:00004B3E 204452203D206475
02:00004B46 6D70207265676973
02:00004B4E 74657273
02:00004B52 0D
02:00004B53 0A
02:00004B54 4241203D20737461	  1856: 	dc.b	"BA = start tiny basic",CR,LF
02:00004B5C 72742074696E7920
02:00004B64 6261736963
02:00004B69 0D
02:00004B6A 0A
02:00004B6B 4252203D20736574	  1857: 	dc.b  "BR = set breakpoint",CR,LF
02:00004B73 20627265616B706F
02:00004B7B 696E74
02:00004B7E 0D
02:00004B7F 0A
02:00004B80 4A203D204A756D70	  1858: 	dc.b	"J = Jump to code",CR,LF
02:00004B88 20746F20636F6465
02:00004B90 0D
02:00004B91 0A
02:00004B92 53203D2073656E64	  1859: 	dc.b  "S = send to serial port",CR,LF
02:00004B9A 20746F2073657269
02:00004BA2 616C20706F7274
02:00004BA9 0D
02:00004BAA 0A
02:00004BAB 54203D2063707520	  1860: 	dc.b	"T = cpu test program",CR,LF,0
02:00004BB3 746573742070726F
02:00004BBB 6772616D
02:00004BBF 0D
02:00004BC0 0A
02:00004BC1 00
                            	  1861: 
                            	  1862: msgUnknownCmd:
02:00004BC2 636F6D6D616E6420	  1863: 	dc.b	"command unknown",0
02:00004BCA 756E6B6E6F776E
02:00004BD1 00
                            	  1864: 
                            	  1865: msgHello:
02:00004BD2 0A              	  1866: 	dc.b	LF,CR,"Hello World!",LF,CR,0
02:00004BD3 0D
02:00004BD4 48656C6C6F20576F
02:00004BDC 726C6421
02:00004BE0 0A
02:00004BE1 0D
02:00004BE2 00
                            	  1867: 	even
                            	  1868: 
                            	  1869: ;------------------------------------------------------------------------------
                            	  1870: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1871: ; Used to fetch a command line. (Not currently used).
                            	  1872: ;
                            	  1873: ; d0.b	- command prompt
                            	  1874: ;------------------------------------------------------------------------------
                            	  1875: 
                            	  1876: GetCmdLine:
02:00004BE4 6100F210        	  1877: 		bsr		DisplayChar		; display prompt
02:00004BE8 103C0020        	  1878: 		move.b	#' ',d0
02:00004BEC 6100F208        	  1879: 		bsr		DisplayChar
02:00004BF0 41F900040040    	  1880: 		lea		CmdBuf,a0
                            	  1881: .0001:
02:00004BF6 6100F6D4        	  1882: 		bsr		GetKey
02:00004BFA B03C0008        	  1883: 		cmp.b	#CTRLH,d0
02:00004BFE 6728            	  1884: 		beq.s	.0003
02:00004C00 B03C0018        	  1885: 		cmp.b	#CTRLX,d0
02:00004C04 6746            	  1886: 		beq.s	.0004
02:00004C06 B03C000D        	  1887: 		cmp.b	#CR,d0
02:00004C0A 6706            	  1888: 		beq.s	.0002
02:00004C0C B03C0020        	  1889: 		cmp.b	#' ',d0
02:00004C10 65E4            	  1890: 		bcs.s	.0001
                            	  1891: .0002:
02:00004C12 1080            	  1892: 		move.b	d0,(a0)
02:00004C14 5088            	  1893: 		lea			8(a0),a0
02:00004C16 6100F1DE        	  1894: 		bsr		DisplayChar
02:00004C1A B03C000D        	  1895: 		cmp.b	#CR,d0
02:00004C1E 675E            	  1896: 		beq		.0007
02:00004C20 B1FC0004007F    	  1897: 		cmp.l	#CmdBufEnd-1,a0
02:00004C26 65CE            	  1898: 		bcs.s	.0001
                            	  1899: .0003:
02:00004C28 103C0008        	  1900: 		move.b	#CTRLH,d0
02:00004C2C 6100F1C8        	  1901: 		bsr		DisplayChar
02:00004C30 103C0020        	  1902: 		move.b	#' ',d0
02:00004C34 6100F1C0        	  1903: 		bsr		DisplayChar
02:00004C38 B1FC00040040    	  1904: 		cmp.l	#CmdBuf,a0
02:00004C3E 63B6            	  1905: 		bls.s	.0001
02:00004C40 103C0008        	  1906: 		move.b	#CTRLH,d0
02:00004C44 6100F1B0        	  1907: 		bsr		DisplayChar
02:00004C48 5388            	  1908: 		subq.l	#1,a0
02:00004C4A 60AA            	  1909: 		bra.s	.0001
                            	  1910: .0004:
02:00004C4C 2208            	  1911: 		move.l	a0,d1
02:00004C4E 92BC00040040    	  1912: 		sub.l	#CmdBuf,d1
02:00004C54 671E            	  1913: 		beq.s	.0006
02:00004C56 5341            	  1914: 		subq	#1,d1
                            	  1915: .0005:
02:00004C58 103C0008        	  1916: 		move.b	#CTRLH,d0
02:00004C5C 6100F198        	  1917: 		bsr		DisplayChar
02:00004C60 103C0020        	  1918: 		move.b	#' ',d0
02:00004C64 6100F190        	  1919: 		bsr		DisplayChar
02:00004C68 103C0008        	  1920: 		move.b	#CTRLH,d0
02:00004C6C 6100F188        	  1921: 		bsr		DisplayChar
02:00004C70 51C9FFE6        	  1922: 		dbra	d1,.0005
                            	  1923: .0006:
02:00004C74 41F900040040    	  1924: 		lea		CmdBuf,a0
02:00004C7A 6000FF7A        	  1925: 		bra		.0001
                            	  1926: .0007:
02:00004C7E 103C000A        	  1927: 		move.b	#LF,d0
02:00004C82 6100F172        	  1928: 		bsr		DisplayChar
02:00004C86 4E75            	  1929: 		rts
                            	  1930: 
                            	  1931: ;------------------------------------------------------------------------------
                            	  1932: ; S <address> <length>
                            	  1933: ; Send data buffer to serial port
                            	  1934: ; S 40000 40
                            	  1935: ;------------------------------------------------------------------------------
                            	  1936: 
                            	  1937: cmdSendSerial:
02:00004C88 610000CE        	  1938: 	bsr			ignBlanks
02:00004C8C 6100029C        	  1939: 	bsr			GetHexNumber
02:00004C90 6700FD12        	  1940: 	beq			Monitor
02:00004C94 2C01            	  1941: 	move.l	d1,d6					; d6 points to buffer
02:00004C96 610000C0        	  1942: 	bsr			ignBlanks
02:00004C9A 6100028E        	  1943: 	bsr			GetHexNumber
02:00004C9E 6602            	  1944: 	bne.s		.0003
02:00004CA0 7210            	  1945: 	moveq		#16,d1
                            	  1946: .0003:
02:00004CA2 2246            	  1947: 	move.l	d6,a1					; a1 points to buffer
02:00004CA4 2401            	  1948: 	move.l	d1,d2					; d2 = count of bytes to send
02:00004CA6 6008            	  1949: 	bra.s		.0002					; enter loop at bottom
                            	  1950: .0001:
02:00004CA8 1219            	  1951: 	move.b	(a1)+,d1
02:00004CAA 303C0022        	  1952: 	move.w	#34,d0				; serial putchar
02:00004CAE 4E4F            	  1953: 	trap		#15
                            	  1954: .0002:
02:00004CB0 51CAFFF6        	  1955: 	dbra		d2,.0001
02:00004CB4 6000FCEE        	  1956: 	bra			Monitor
                            	  1957: 		
                            	  1958: ;------------------------------------------------------------------------------
                            	  1959: ; R <address> <length>
                            	  1960: ; Send data buffer to serial port
                            	  1961: ; R 10000 40
                            	  1962: ;------------------------------------------------------------------------------
                            	  1963: 
                            	  1964: cmdReceiveSerial:
02:00004CB8 6100009E        	  1965: 	bsr			ignBlanks
02:00004CBC 6100026C        	  1966: 	bsr			GetHexNumber
02:00004CC0 6700FCE2        	  1967: 	beq			Monitor
02:00004CC4 2C01            	  1968: 	move.l	d1,d6					; d6 points to buffer
02:00004CC6 61000090        	  1969: 	bsr			ignBlanks
02:00004CCA 6100025E        	  1970: 	bsr			GetHexNumber
02:00004CCE 6602            	  1971: 	bne.s		.0003
02:00004CD0 7210            	  1972: 	moveq		#16,d1
                            	  1973: .0003:
02:00004CD2 2246            	  1974: 	move.l	d6,a1					; a1 points to buffer
02:00004CD4 2401            	  1975: 	move.l	d1,d2					; d2 = count of bytes to send
02:00004CD6 600C            	  1976: 	bra.s		.0002					; enter loop at bottom
                            	  1977: .0001:
02:00004CD8 303C0024        	  1978: 	move.w	#36,d0				; serial peek char
02:00004CDC 4E4F            	  1979: 	trap		#15
02:00004CDE 4A81            	  1980: 	tst.l		d1
02:00004CE0 6BF6            	  1981: 	bmi.s		.0001
02:00004CE2 12C1            	  1982: 	move.b	d1,(a1)+
                            	  1983: .0002:
02:00004CE4 51CAFFF2        	  1984: 	dbra		d2,.0001
02:00004CE8 6000FCBA        	  1985: 	bra			Monitor
                            	  1986: 		
                            	  1987: ;------------------------------------------------------------------------------
                            	  1988: ; Fill memory
                            	  1989: ;
                            	  1990: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1991: ; FW = fill words
                            	  1992: ; FL = fill longs
                            	  1993: ; F = fill bytes
                            	  1994: ;------------------------------------------------------------------------------
                            	  1995: 
                            	  1996: cmdFillB:
02:00004CEC 616A            	  1997: 	bsr			ignBlanks
02:00004CEE 6100023A        	  1998: 	bsr			GetHexNumber
02:00004CF2 2241            	  1999: 	move.l	d1,a1					; a1 = start
02:00004CF4 6162            	  2000: 	bsr			ignBlanks
02:00004CF6 61000232        	  2001: 	bsr			GetHexNumber
02:00004CFA 2601            	  2002: 	move.l	d1,d3					; d3 = count
02:00004CFC 6700FCA6        	  2003: 	beq			Monitor
02:00004D00 6156            	  2004: 	bsr			ignBlanks
02:00004D02 61000226        	  2005: 	bsr			GetHexNumber	; fill value
                            	  2006: .fmem:
02:00004D06 12C1            	  2007: 	move.b	d1,(a1)+
02:00004D08 5383            	  2008: 	sub.l		#1,d3
02:00004D0A 66FA            	  2009: 	bne.s		.fmem
02:00004D0C 6000FC96        	  2010: 	bra			Monitor
                            	  2011: 	
                            	  2012: cmdFillW:
02:00004D10 6146            	  2013: 	bsr			ignBlanks
02:00004D12 61000216        	  2014: 	bsr			GetHexNumber
02:00004D16 2241            	  2015: 	move.l	d1,a1					; a1 = start
02:00004D18 613E            	  2016: 	bsr			ignBlanks
02:00004D1A 6100020E        	  2017: 	bsr			GetHexNumber
02:00004D1E 2601            	  2018: 	move.l	d1,d3					; d3 = count
02:00004D20 6700FC82        	  2019: 	beq			Monitor
02:00004D24 6132            	  2020: 	bsr			ignBlanks
02:00004D26 61000202        	  2021: 	bsr			GetHexNumber	; fill value
                            	  2022: .fmem:
02:00004D2A 32C1            	  2023: 	move.w	d1,(a1)+
02:00004D2C 5383            	  2024: 	sub.l		#1,d3
02:00004D2E 66FA            	  2025: 	bne.s		.fmem
02:00004D30 6000FC72        	  2026: 	bra			Monitor
                            	  2027: 	
                            	  2028: cmdFillL:
02:00004D34 6122            	  2029: 	bsr			ignBlanks
02:00004D36 610001F2        	  2030: 	bsr			GetHexNumber
02:00004D3A 2241            	  2031: 	move.l	d1,a1					; a1 = start
02:00004D3C 611A            	  2032: 	bsr			ignBlanks
02:00004D3E 610001EA        	  2033: 	bsr			GetHexNumber
02:00004D42 2601            	  2034: 	move.l	d1,d3					; d3 = count
02:00004D44 6700FC5E        	  2035: 	beq			Monitor
02:00004D48 610E            	  2036: 	bsr			ignBlanks
02:00004D4A 610001DE        	  2037: 	bsr			GetHexNumber	; fill value
                            	  2038: .fmem:
02:00004D4E 22C1            	  2039: 	move.l	d1,(a1)+
02:00004D50 5383            	  2040: 	sub.l		#1,d3
02:00004D52 66FA            	  2041: 	bne.s		.fmem
02:00004D54 6000FC4E        	  2042: 	bra			Monitor
                            	  2043: 	
                            	  2044: ;------------------------------------------------------------------------------
                            	  2045: ; Modifies:
                            	  2046: ;	a0	- text pointer
                            	  2047: ;------------------------------------------------------------------------------
                            	  2048: 
                            	  2049: ignBlanks:
02:00004D58 2F01            	  2050: 	move.l	d1,-(a7)
                            	  2051: .0001:
02:00004D5A 6100FC34        	  2052: 	bsr			FromScreen
02:00004D5E 0C010020        	  2053: 	cmpi.b	#' ',d1
02:00004D62 67F6            	  2054: 	beq.s		.0001
02:00004D64 5188            	  2055: 	lea			-8(a0),a0
02:00004D66 221F            	  2056: 	move.l	(a7)+,d1
02:00004D68 4E75            	  2057: 	rts
                            	  2058: 
                            	  2059: ;------------------------------------------------------------------------------
                            	  2060: ; Edit memory byte.
                            	  2061: ;    Bytes are built into long words in case the memory is only longword
                            	  2062: ; accessible.
                            	  2063: ;------------------------------------------------------------------------------
                            	  2064: 
                            	  2065: cmdEditMemory:
02:00004D6A 61EC            	  2066: 	bsr			ignBlanks
02:00004D6C 610001BC        	  2067: 	bsr			GetHexNumber
02:00004D70 2241            	  2068: 	move.l	d1,a1
                            	  2069: edtmem1:
02:00004D72 7400            	  2070: 	clr.l		d2
02:00004D74 61E2            	  2071: 	bsr			ignBlanks
02:00004D76 610001B2        	  2072: 	bsr			GetHexNumber
02:00004D7A 1401            	  2073: 	move.b	d1,d2
                            	  2074: ;	move.b	d1,(a1)+
02:00004D7C 61DA            	  2075: 	bsr			ignBlanks
02:00004D7E 610001AA        	  2076: 	bsr			GetHexNumber
02:00004D82 E18A            	  2077: 	lsl.l		#8,d2
02:00004D84 1401            	  2078: 	move.b	d1,d2
                            	  2079: ;	move.b	d1,(a1)+
02:00004D86 61D0            	  2080: 	bsr			ignBlanks
02:00004D88 610001A0        	  2081: 	bsr			GetHexNumber
02:00004D8C E18A            	  2082: 	lsl.l		#8,d2
02:00004D8E 1401            	  2083: 	move.b	d1,d2
                            	  2084: ;	move.b	d1,(a1)+
02:00004D90 61C6            	  2085: 	bsr			ignBlanks
02:00004D92 61000196        	  2086: 	bsr			GetHexNumber
02:00004D96 E18A            	  2087: 	lsl.l		#8,d2
02:00004D98 1401            	  2088: 	move.b	d1,d2
02:00004D9A 22C2            	  2089: 	move.l	d2,(a1)+
                            	  2090: ;	move.b	d1,(a1)+
02:00004D9C 7400            	  2091: 	clr.l		d2
02:00004D9E 61B8            	  2092: 	bsr			ignBlanks
02:00004DA0 61000188        	  2093: 	bsr			GetHexNumber
02:00004DA4 1401            	  2094: 	move.b	d1,d2
                            	  2095: ;	move.b	d1,(a1)+
02:00004DA6 61B0            	  2096: 	bsr			ignBlanks
02:00004DA8 61000180        	  2097: 	bsr			GetHexNumber
02:00004DAC E18A            	  2098: 	lsl.l		#8,d2
02:00004DAE 1401            	  2099: 	move.b	d1,d2
                            	  2100: ;	move.b	d1,(a1)+
02:00004DB0 61A6            	  2101: 	bsr			ignBlanks
02:00004DB2 61000176        	  2102: 	bsr			GetHexNumber
02:00004DB6 E18A            	  2103: 	lsl.l		#8,d2
02:00004DB8 1401            	  2104: 	move.b	d1,d2
                            	  2105: ;	move.b	d1,(a1)+
02:00004DBA 619C            	  2106: 	bsr			ignBlanks
02:00004DBC 6100016C        	  2107: 	bsr			GetHexNumber
02:00004DC0 E18A            	  2108: 	lsl.l		#8,d2
02:00004DC2 1401            	  2109: 	move.b	d1,d2
                            	  2110: ;	move.b	d1,(a1)+
02:00004DC4 22C2            	  2111: 	move.l	d2,(a1)+
02:00004DC6 6000FBDC        	  2112: 	bra			Monitor
                            	  2113: 
                            	  2114: ;------------------------------------------------------------------------------
                            	  2115: ; Execute code at the specified address.
                            	  2116: ;------------------------------------------------------------------------------
                            	  2117: 
                            	  2118: cmdJump:
                            	  2119: ExecuteCode:
02:00004DCA 618C            	  2120: 	bsr			ignBlanks
02:00004DCC 6100015C        	  2121: 	bsr			GetHexNumber
02:00004DD0 2041            	  2122: 	move.l	d1,a0
02:00004DD2 4E90            	  2123: 	jsr			(a0)
02:00004DD4 6000FBCE        	  2124: 	bra     Monitor
                            	  2125: 
                            	  2126: ;------------------------------------------------------------------------------
                            	  2127: ; Do a memory dump of the requested location.
                            	  2128: ; D 0800 0850
                            	  2129: ;------------------------------------------------------------------------------
                            	  2130: 
                            	  2131: cmdDumpMemory:
02:00004DD8 6100FF7E        	  2132: 	bsr			ignBlanks
02:00004DDC 6100014C        	  2133: 	bsr			GetHexNumber
02:00004DE0 6700FBC2        	  2134: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
02:00004DE4 2601            	  2135: 	move.l	d1,d3				; save off start of range
02:00004DE6 6100FF70        	  2136: 	bsr			ignBlanks
02:00004DEA 6100013E        	  2137: 	bsr			GetHexNumber
02:00004DEE 6608            	  2138: 	bne.s		DumpMem1
02:00004DF0 2203            	  2139: 	move.l	d3,d1
02:00004DF2 068100000040    	  2140: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  2141: DumpMem1:
02:00004DF8 2043            	  2142: 	move.l	d3,a0
02:00004DFA 2241            	  2143: 	move.l	d1,a1
02:00004DFC 6100EFAE        	  2144: 	bsr			CRLF
                            	  2145: .0001:
02:00004E00 B3C8            	  2146: 	cmpa.l	a0,a1
02:00004E02 6300FBA0        	  2147: 	bls			Monitor
02:00004E06 6102            	  2148: 	bsr			DisplayMem
02:00004E08 60F6            	  2149: 	bra.s		.0001
                            	  2150: 
                            	  2151: ;------------------------------------------------------------------------------
                            	  2152: ; Display memory dump in a format suitable for edit.
                            	  2153: ;
                            	  2154: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  2155: ;
                            	  2156: ; Modifies:
                            	  2157: ;		d1,d2,a0
                            	  2158: ;------------------------------------------------------------------------------
                            	  2159: 
                            	  2160: DisplayMem:
02:00004E0A 123C003A        	  2161: 	move.b	#':',d1
02:00004E0E 6100EFE6        	  2162: 	bsr			DisplayChar
02:00004E12 2208            	  2163: 	move.l	a0,d1
02:00004E14 61000194        	  2164: 	bsr			DisplayTetra
02:00004E18 7407            	  2165: 	moveq		#7,d2
                            	  2166: dspmem1:
02:00004E1A 123C0020        	  2167: 	move.b	#' ',d1
02:00004E1E 6100EFD6        	  2168: 	bsr			DisplayChar
02:00004E22 1218            	  2169: 	move.b	(a0)+,d1
02:00004E24 61000190        	  2170: 	bsr			DisplayByte
02:00004E28 51CAFFF0        	  2171: 	dbra		d2,dspmem1
02:00004E2C 61000162        	  2172: 	bsr			DisplayTwoSpaces
02:00004E30 123C0022        	  2173: 	move.b	#34,d1
02:00004E34 6100EFC0        	  2174: 	bsr			DisplayChar
02:00004E38 5188            	  2175: 	lea			-8(a0),a0
02:00004E3A 7407            	  2176: 	moveq		#7,d2
                            	  2177: .0002:	
02:00004E3C 1218            	  2178: 	move.b	(a0)+,d1
02:00004E3E B23C0020        	  2179: 	cmp.b		#' ',d1
02:00004E42 6506            	  2180: 	blo.s		.0003
02:00004E44 B23C007F        	  2181: 	cmp.b		#127,d1
02:00004E48 6304            	  2182: 	bls.s		.0001
                            	  2183: .0003:
02:00004E4A 123C002E        	  2184: 	move.b	#'.',d1
                            	  2185: .0001:
02:00004E4E 6100EFA6        	  2186: 	bsr			DisplayChar
02:00004E52 51CAFFE8        	  2187: 	dbra		d2,.0002
02:00004E56 123C0022        	  2188: 	move.b	#34,d1
02:00004E5A 6100EF9A        	  2189: 	bsr			DisplayChar
02:00004E5E 6100F4A4        	  2190: 	bsr			CheckForCtrlC
02:00004E62 6000EF48        	  2191: 	bra			CRLF
                            	  2192: 
                            	  2193: ;------------------------------------------------------------------------------
                            	  2194: ; Dump Registers
                            	  2195: ;    The dump is in a format that allows the register value to be edited.
                            	  2196: ;
                            	  2197: ; RegD0 12345678
                            	  2198: ; RegD1 77777777
                            	  2199: ;	... etc
                            	  2200: ;------------------------------------------------------------------------------
                            	  2201: 
                            	  2202: cmdDumpRegs:
02:00004E66 6100EF44        	  2203: 	bsr			CRLF
02:00004E6A 303C000F        	  2204: 	move.w	#15,d0					; number of registers-1
02:00004E6E 41FA007A        	  2205: 	lea			msg_reglist,a0	;
02:00004E72 43FA0072        	  2206: 	lea			msg_regs,a1
02:00004E76 45F900040100    	  2207: 	lea			Regsave,a2			; a2 points to register save area
                            	  2208: .0001:
02:00004E7C 6100F1F4        	  2209: 	bsr			DisplayString
02:00004E80 1218            	  2210: 	move.b	(a0)+,d1
02:00004E82 6100EF72        	  2211: 	bsr			DisplayChar
02:00004E86 1218            	  2212: 	move.b	(a0)+,d1
02:00004E88 6100EF6C        	  2213: 	bsr			DisplayChar
02:00004E8C 61000114        	  2214: 	bsr			DisplaySpace
02:00004E90 221A            	  2215: 	move.l	(a2)+,d1
02:00004E92 61000116        	  2216: 	bsr			DisplayTetra
02:00004E96 6100EF14        	  2217: 	bsr			CRLF
02:00004E9A 51C8FFE0        	  2218: 	dbra		d0,.0001
02:00004E9E 6100F1D2        	  2219: 	bsr			DisplayString
02:00004EA2 1218            	  2220: 	move.b	(a0)+,d1
02:00004EA4 6100EF50        	  2221: 	bsr			DisplayChar
02:00004EA8 1218            	  2222: 	move.b	(a0)+,d1
02:00004EAA 6100EF4A        	  2223: 	bsr			DisplayChar
02:00004EAE 610000F2        	  2224: 	bsr			DisplaySpace
02:00004EB2 223900040144    	  2225: 	move.l	Regsave+$44,d1
02:00004EB8 610000F0        	  2226: 	bsr			DisplayTetra
02:00004EBC 6100EEEE        	  2227: 	bsr			CRLF
02:00004EC0 6100F1B0        	  2228: 	bsr			DisplayString
02:00004EC4 1218            	  2229: 	move.b	(a0)+,d1
02:00004EC6 6100EF2E        	  2230: 	bsr			DisplayChar
02:00004ECA 1218            	  2231: 	move.b	(a0)+,d1
02:00004ECC 6100EF28        	  2232: 	bsr			DisplayChar
02:00004ED0 610000D0        	  2233: 	bsr			DisplaySpace
02:00004ED4 323900040140    	  2234: 	move.w	Regsave+$40,d1
02:00004EDA 610000D4        	  2235: 	bsr			DisplayWyde
02:00004EDE 6100EECC        	  2236: 	bsr			CRLF
02:00004EE2 6000FAC0        	  2237: 	bra			Monitor
                            	  2238: 
                            	  2239: msg_regs:
02:00004EE6 526567          	  2240: 	dc.b	"Reg",0
02:00004EE9 00
                            	  2241: msg_reglist:
02:00004EEA 4430443144324433	  2242: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
02:00004EF2 4434443544364437
02:00004EFA 4130413141324133
02:00004F02 4134413541364137
02:00004F0A 50435352
02:00004F0E 00
                            	  2243: 
                            	  2244: 	align	1
                            	  2245: 
                            	  2246: ;------------------------------------------------------------------------------
                            	  2247: ;------------------------------------------------------------------------------
                            	  2248: 
                            	  2249: cmdTestSerialReceive:
                            	  2250: .0002:
02:00004F10 7024            	  2251: 	moveq		#36,d0				; serial get char from buffer
02:00004F12 4E4F            	  2252: 	trap		#15
                            	  2253: ;	bsr			SerialPeekCharDirect
02:00004F14 4A81            	  2254: 	tst.l		d1
02:00004F16 6B0C            	  2255: 	bmi.s		.0001
02:00004F18 0C01001A        	  2256: 	cmpi.b	#CTRLZ,d1
02:00004F1C 6700FA86        	  2257: 	beq			Monitor
02:00004F20 6100EED4        	  2258: 	bsr			DisplayChar
                            	  2259: .0001:	
02:00004F24 6100F3DE        	  2260: 	bsr			CheckForCtrlC
02:00004F28 60E6            	  2261: 	bra			.0002
                            	  2262: 	
                            	  2263: ;------------------------------------------------------------------------------
                            	  2264: ; Get a hexidecimal number. Maximum of eight digits.
                            	  2265: ;
                            	  2266: ; Returns:
                            	  2267: ;		d0 = number of digits
                            	  2268: ;		d1 = value of number
                            	  2269: ;		zf = number of digits == 0
                            	  2270: ;------------------------------------------------------------------------------
                            	  2271: 
                            	  2272: GetHexNumber:
02:00004F2A 2F02            	  2273: 	move.l	d2,-(a7)
02:00004F2C 7400            	  2274: 	clr.l		d2
02:00004F2E 7000            	  2275: 	moveq		#0,d0
                            	  2276: .0002:
02:00004F30 6100FA5E        	  2277: 	bsr			FromScreen
02:00004F34 6120            	  2278: 	bsr			AsciiToHexNybble
02:00004F36 B23C00FF        	  2279: 	cmp.b		#$ff,d1
02:00004F3A 6712            	  2280: 	beq.s		.0001
02:00004F3C E98A            	  2281: 	lsl.l		#4,d2
02:00004F3E 02810000000F    	  2282: 	andi.l	#$0f,d1
02:00004F44 8481            	  2283: 	or.l		d1,d2
02:00004F46 5240            	  2284: 	addq		#1,d0
02:00004F48 0C000008        	  2285: 	cmpi.b	#8,d0
02:00004F4C 65E2            	  2286: 	blo.s		.0002
                            	  2287: .0001:
02:00004F4E 2202            	  2288: 	move.l	d2,d1
02:00004F50 241F            	  2289: 	move.l	(a7)+,d2
02:00004F52 4A00            	  2290: 	tst.b		d0
02:00004F54 4E75            	  2291: 	rts	
                            	  2292: 
                            	  2293: ;------------------------------------------------------------------------------
                            	  2294: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  2295: ; to a hex nybble.
                            	  2296: ;------------------------------------------------------------------------------
                            	  2297: 
                            	  2298: AsciiToHexNybble:
02:00004F56 0C010030        	  2299: 	cmpi.b	#'0',d1
02:00004F5A 6530            	  2300: 	blo.s		gthx3
02:00004F5C 0C010039        	  2301: 	cmpi.b	#'9',d1
02:00004F60 6206            	  2302: 	bhi.s		gthx5
02:00004F62 04010030        	  2303: 	subi.b	#'0',d1
02:00004F66 4E75            	  2304: 	rts
                            	  2305: gthx5:
02:00004F68 0C010041        	  2306: 	cmpi.b	#'A',d1
02:00004F6C 651E            	  2307: 	blo.s		gthx3
02:00004F6E 0C010046        	  2308: 	cmpi.b	#'F',d1
02:00004F72 6206            	  2309: 	bhi.s		gthx6
02:00004F74 060100C9        	  2310: 	addi.b	#10-'A',d1
02:00004F78 4E75            	  2311: 	rts
                            	  2312: gthx6:
02:00004F7A 0C010061        	  2313: 	cmpi.b	#'a',d1
02:00004F7E 650C            	  2314: 	blo.s		gthx3
02:00004F80 0C010066        	  2315: 	cmpi.b	#'f',d1
02:00004F84 6206            	  2316: 	bhi.s		gthx3
02:00004F86 060100A9        	  2317: 	addi.b	#10-'a',d1
02:00004F8A 4E75            	  2318: 	rts
                            	  2319: gthx3:
02:00004F8C 72FF            	  2320: 	moveq	#-1,d1		; not a hex number
02:00004F8E 4E75            	  2321: 	rts
                            	  2322: 
                            	  2323: ;------------------------------------------------------------------------------
                            	  2324: ;------------------------------------------------------------------------------
                            	  2325: 
                            	  2326: DisplayTwoSpaces:
02:00004F90 2F01            	  2327: 	move.l	d1,-(a7)
02:00004F92 123C0020        	  2328: 	move.b	#' ',d1
02:00004F96 6100EE5E        	  2329: 	bsr			DisplayChar
                            	  2330: dspspc1:
02:00004F9A 6100EE5A        	  2331: 	bsr			DisplayChar
02:00004F9E 221F            	  2332: 	move.l	(a7)+,d1
02:00004FA0 4E75            	  2333: 	rts
                            	  2334: 
                            	  2335: DisplaySpace:
02:00004FA2 2F01            	  2336: 	move.l	d1,-(a7)
02:00004FA4 123C0020        	  2337: 	move.b	#' ',d1
02:00004FA8 60F0            	  2338: 	bra			dspspc1
                            	  2339: 
                            	  2340: ;------------------------------------------------------------------------------
                            	  2341: ; Display the 32 bit word in D1.L
                            	  2342: ;------------------------------------------------------------------------------
                            	  2343: 
                            	  2344: DisplayTetra:
02:00004FAA 4841            	  2345: 	swap	d1
02:00004FAC 6102            	  2346: 	bsr		DisplayWyde
02:00004FAE 4841            	  2347: 	swap	d1
                            	  2348: 
                            	  2349: ;------------------------------------------------------------------------------
                            	  2350: ; Display the byte in D1.W
                            	  2351: ;------------------------------------------------------------------------------
                            	  2352: 
                            	  2353: DisplayWyde:
02:00004FB0 E059            	  2354: 	ror.w		#8,d1
02:00004FB2 6102            	  2355: 	bsr			DisplayByte
02:00004FB4 E159            	  2356: 	rol.w		#8,d1
                            	  2357: 
                            	  2358: ;------------------------------------------------------------------------------
                            	  2359: ; Display the byte in D1.B
                            	  2360: ;------------------------------------------------------------------------------
                            	  2361: 
                            	  2362: DisplayByte:
02:00004FB6 E819            	  2363: 	ror.b		#4,d1
02:00004FB8 6102            	  2364: 	bsr			DisplayNybble
02:00004FBA E919            	  2365: 	rol.b		#4,d1
                            	  2366: 
                            	  2367: ;------------------------------------------------------------------------------
                            	  2368: ; Display nybble in D1.B
                            	  2369: ;------------------------------------------------------------------------------
                            	  2370: 
                            	  2371: DisplayNybble:
02:00004FBC 2F01            	  2372: 	move.l	d1,-(a7)
02:00004FBE 0201000F        	  2373: 	andi.b	#$F,d1
02:00004FC2 06010030        	  2374: 	addi.b	#'0',d1
02:00004FC6 0C010039        	  2375: 	cmpi.b	#'9',d1
02:00004FCA 6302            	  2376: 	bls.s		.0001
02:00004FCC 5E01            	  2377: 	addi.b	#7,d1
                            	  2378: .0001:
02:00004FCE 6100EE26        	  2379: 	bsr			DisplayChar
02:00004FD2 221F            	  2380: 	move.l	(a7)+,d1
02:00004FD4 4E75            	  2381: 	rts
                            	  2382: 
                            	  2383: ;------------------------------------------------------------------------------
                            	  2384: ;------------------------------------------------------------------------------
                            	  2385: ;
                            	  2386: ;DisplayHexNumber:
                            	  2387: ;	move.w	#$A6A6,leds		; diagnostics
                            	  2388: ;	move.l	#VDGREG,a6
                            	  2389: ;	move.w	#7,d2		; number-1 of digits to display
                            	  2390: ;disphnum1:
                            	  2391: ;	move.b	d1,d0		; get digit into d0.b
                            	  2392: ;	andi.w	#$0f,d0
                            	  2393: ;	cmpi.w	#$09,d0
                            	  2394: ;	bls.s	disphnum2
                            	  2395: ;	addi.w	#7,d0
                            	  2396: ;disphnum2:
                            	  2397: ;	addi.w	#$30,d0	; convert to display char
                            	  2398: ;	move.w	d2,d3		; char count into d3
                            	  2399: ;	asl.w	#3,d3		; scale * 8
                            	  2400: ;disphnum3:
                            	  2401: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  2402: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  2403: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  2404: ;	ext.w	d0						; zero out high order bits
                            	  2405: ;	move.w	d0,$420(a6)			; set char code
                            	  2406: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  2407: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  2408: ;	move.w	d3,$426(a6)			; set x pos
                            	  2409: ;	move.w	#8,$428(a6)			; set y pos
                            	  2410: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  2411: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  2412: ;	ror.l	#4,d1					; rot to next digit
                            	  2413: ;	dbeq	d2,disphnum1
                            	  2414: ;	jmp		(a5)
                            	  2415: 
                            	  2416: ;==============================================================================
                            	  2417: ; Load an S19 format file
                            	  2418: ;==============================================================================
                            	  2419: 
                            	  2420: cmdLoadS19:
02:00004FD6 6100EDD4        	  2421: 	bsr			CRLF
02:00004FDA 6012            	  2422: 	bra			ProcessRec
                            	  2423: NextRec:
02:00004FDC 610001D0        	  2424: 	bsr			sGetChar
02:00004FE0 0C01000A        	  2425: 	cmpi.b	#LF,d1
02:00004FE4 66F6            	  2426: 	bne			NextRec
02:00004FE6 123C002E        	  2427: 	move.b	#'.',d1
02:00004FEA 6100EE0A        	  2428: 	bsr			DisplayChar
                            	  2429: ProcessRec:
02:00004FEE 6100F314        	  2430: 	bsr			CheckForCtrlC	; check for CTRL-C once per record
02:00004FF2 610001BA        	  2431: 	bsr			sGetChar
02:00004FF6 0C01000D        	  2432: 	cmpi.b	#CR,d1
02:00004FFA 67F2            	  2433: 	beq.s		ProcessRec
02:00004FFC 423900100050    	  2434: 	clr.b		S19Checksum
02:00005002 1801            	  2435: 	move.b	d1,d4
02:00005004 0C04001A        	  2436: 	cmpi.b	#CTRLZ,d4			; CTRL-Z ?
02:00005008 6700F99A        	  2437: 	beq			Monitor
02:0000500C 0C040053        	  2438: 	cmpi.b	#'S',d4				; All records must begin with an 'S'
02:00005010 66CA            	  2439: 	bne.s		NextRec
02:00005012 6100019A        	  2440: 	bsr			sGetChar
02:00005016 1801            	  2441: 	move.b	d1,d4
02:00005018 0C040030        	  2442: 	cmpi.b	#'0',d4				; Record type must be between '0' and '9'
02:0000501C 65BE            	  2443: 	blo.s		NextRec
02:0000501E 0C040039        	  2444: 	cmpi.b	#'9',d4				; d4 = record type
02:00005022 62B8            	  2445: 	bhi.s		NextRec
02:00005024 61000188        	  2446: 	bsr			sGetChar			; get byte count for record
02:00005028 6100FF2C        	  2447: 	bsr			AsciiToHexNybble
02:0000502C 1401            	  2448: 	move.b	d1,d2
02:0000502E 6100017E        	  2449: 	bsr			sGetChar
02:00005032 6100FF22        	  2450: 	bsr			AsciiToHexNybble
02:00005036 E90A            	  2451: 	lsl.b		#4,d2
02:00005038 8202            	  2452: 	or.b		d2,d1					; d1 = byte count
02:0000503A 1601            	  2453: 	move.b	d1,d3					; d3 = byte count
02:0000503C D73900100050    	  2454: 	add.b		d3,S19Checksum
02:00005042 0C040030        	  2455: 	cmpi.b	#'0',d4				; manufacturer ID record, ignore
02:00005046 6794            	  2456: 	beq			NextRec
02:00005048 0C040031        	  2457: 	cmpi.b	#'1',d4
02:0000504C 670000A2        	  2458: 	beq			ProcessS1
02:00005050 0C040032        	  2459: 	cmpi.b	#'2',d4
02:00005054 6700009E        	  2460: 	beq			ProcessS2
02:00005058 0C040033        	  2461: 	cmpi.b	#'3',d4
02:0000505C 6700009A        	  2462: 	beq			ProcessS3
02:00005060 0C040035        	  2463: 	cmpi.b	#'5',d4				; record count record, ignore
02:00005064 6700FF76        	  2464: 	beq			NextRec
02:00005068 0C040037        	  2465: 	cmpi.b	#'7',d4
02:0000506C 6700008E        	  2466: 	beq			ProcessS7
02:00005070 0C040038        	  2467: 	cmpi.b	#'8',d4
02:00005074 67000092        	  2468: 	beq			ProcessS8
02:00005078 0C040039        	  2469: 	cmpi.b	#'9',d4
02:0000507C 67000096        	  2470: 	beq			ProcessS9
02:00005080 6000FF5A        	  2471: 	bra			NextRec
                            	  2472: 
                            	  2473: pcssxa:
02:00005084 2209            	  2474: 	move.l	a1,d1
02:00005086 6100FF22        	  2475: 	bsr			DisplayTetra
02:0000508A 123C000D        	  2476: 	move.b	#CR,d1
02:0000508E 6100ED66        	  2477: 	bsr			DisplayChar
02:00005092 024300FF        	  2478: 	andi.w	#$ff,d3
02:00005096 5343            	  2479: 	subi.w	#1,d3			; one less for dbra
                            	  2480: .0001:
02:00005098 7400            	  2481: 	clr.l		d2
02:0000509A 61000112        	  2482: 	bsr			sGetChar
02:0000509E 6100FEB6        	  2483: 	bsr			AsciiToHexNybble
02:000050A2 E98A            	  2484: 	lsl.l		#4,d2
02:000050A4 8401            	  2485: 	or.b		d1,d2
02:000050A6 61000106        	  2486: 	bsr			sGetChar
02:000050AA 6100FEAA        	  2487: 	bsr			AsciiToHexNybble
02:000050AE E98A            	  2488: 	lsl.l		#4,d2
02:000050B0 8401            	  2489: 	or.b		d1,d2
02:000050B2 D53900100050    	  2490: 	add.b		d2,S19Checksum
02:000050B8 12C2            	  2491: 	move.b	d2,(a1)+			; move byte to memory
02:000050BA 51CBFFDC        	  2492: 	dbra		d3,.0001
                            	  2493: 	; Get the checksum byte
02:000050BE 7400            	  2494: 	clr.l		d2
02:000050C0 610000EC        	  2495: 	bsr			sGetChar
02:000050C4 6100FE90        	  2496: 	bsr			AsciiToHexNybble
02:000050C8 E98A            	  2497: 	lsl.l		#4,d2
02:000050CA 8401            	  2498: 	or.b		d1,d2
02:000050CC 610000E0        	  2499: 	bsr			sGetChar
02:000050D0 6100FE84        	  2500: 	bsr			AsciiToHexNybble
02:000050D4 E98A            	  2501: 	lsl.l		#4,d2
02:000050D6 8401            	  2502: 	or.b		d1,d2
02:000050D8 4602            	  2503: 	eor.b		#$FF,d2
02:000050DA B43900100050    	  2504: 	cmp.b		S19Checksum,d2
02:000050E0 6700FEFA        	  2505: 	beq			NextRec
02:000050E4 123C0045        	  2506: 	move.b	#'E',d1
02:000050E8 6100ED0C        	  2507: 	bsr			DisplayChar
02:000050EC 6000FEEE        	  2508: 	bra			NextRec
                            	  2509: 
                            	  2510: ProcessS1:
02:000050F0 612E            	  2511: 	bsr			S19Get16BitAddress
02:000050F2 6090            	  2512: 	bra			pcssxa
                            	  2513: ProcessS2:
02:000050F4 6138            	  2514: 	bsr			S19Get24BitAddress
02:000050F6 608C            	  2515: 	bra			pcssxa
                            	  2516: ProcessS3:
02:000050F8 6140            	  2517: 	bsr			S19Get32BitAddress
02:000050FA 6088            	  2518: 	bra			pcssxa
                            	  2519: ProcessS7:
02:000050FC 613C            	  2520: 	bsr			S19Get32BitAddress
02:000050FE 23C900040008    	  2521: 	move.l	a1,S19StartAddress
02:00005104 6000F89E        	  2522: 	bra			Monitor
                            	  2523: ProcessS8:
02:00005108 6124            	  2524: 	bsr			S19Get24BitAddress
02:0000510A 23C900040008    	  2525: 	move.l	a1,S19StartAddress
02:00005110 6000F892        	  2526: 	bra			Monitor
                            	  2527: ProcessS9:
02:00005114 610A            	  2528: 	bsr			S19Get16BitAddress
02:00005116 23C900040008    	  2529: 	move.l	a1,S19StartAddress
02:0000511C 6000F886        	  2530: 	bra			Monitor
                            	  2531: 
                            	  2532: S19Get16BitAddress:
02:00005120 7400            	  2533: 	clr.l		d2
02:00005122 6100008A        	  2534: 	bsr			sGetChar
02:00005126 6100FE2E        	  2535: 	bsr			AsciiToHexNybble
02:0000512A 1401            	  2536: 	move.b	d1,d2
02:0000512C 603E            	  2537: 	bra			S1932b
                            	  2538: 
                            	  2539: S19Get24BitAddress:
02:0000512E 7400            	  2540: 	clr.l		d2
02:00005130 617C            	  2541: 	bsr			sGetChar
02:00005132 6100FE22        	  2542: 	bsr			AsciiToHexNybble
02:00005136 1401            	  2543: 	move.b	d1,d2
02:00005138 601E            	  2544: 	bra			S1932a
                            	  2545: 
                            	  2546: S19Get32BitAddress:
02:0000513A 7400            	  2547: 	clr.l		d2
02:0000513C 6170            	  2548: 	bsr			sGetChar
02:0000513E 6100FE16        	  2549: 	bsr			AsciiToHexNybble
02:00005142 1401            	  2550: 	move.b	d1,d2
02:00005144 6168            	  2551: 	bsr			sGetChar
02:00005146 6100FE0E        	  2552: 	bsr			AsciiToHexNybble
02:0000514A E98A            	  2553: 	lsl.l		#4,d2
02:0000514C 8401            	  2554: 	or.b		d1,d2
02:0000514E 615E            	  2555: 	bsr			sGetChar
02:00005150 6100FE04        	  2556: 	bsr			AsciiToHexNybble
02:00005154 E98A            	  2557: 	lsl.l		#4,d2
02:00005156 8401            	  2558: 	or.b		d1,d2
                            	  2559: S1932a:
02:00005158 6154            	  2560: 	bsr			sGetChar
02:0000515A 6100FDFA        	  2561: 	bsr			AsciiToHexNybble
02:0000515E E98A            	  2562: 	lsl.l		#4,d2
02:00005160 8401            	  2563: 	or.b		d1,d2
02:00005162 614A            	  2564: 	bsr			sGetChar
02:00005164 6100FDF0        	  2565: 	bsr			AsciiToHexNybble
02:00005168 E98A            	  2566: 	lsl.l		#4,d2
02:0000516A 8401            	  2567: 	or.b		d1,d2
                            	  2568: S1932b:
02:0000516C 6140            	  2569: 	bsr			sGetChar
02:0000516E 6100FDE6        	  2570: 	bsr			AsciiToHexNybble
02:00005172 E98A            	  2571: 	lsl.l		#4,d2
02:00005174 8401            	  2572: 	or.b		d1,d2
02:00005176 6136            	  2573: 	bsr			sGetChar
02:00005178 6100FDDC        	  2574: 	bsr			AsciiToHexNybble
02:0000517C E98A            	  2575: 	lsl.l		#4,d2
02:0000517E 8401            	  2576: 	or.b		d1,d2
02:00005180 612C            	  2577: 	bsr			sGetChar
02:00005182 6100FDD2        	  2578: 	bsr			AsciiToHexNybble
02:00005186 E98A            	  2579: 	lsl.l		#4,d2
02:00005188 8401            	  2580: 	or.b		d1,d2
02:0000518A 7800            	  2581: 	clr.l		d4
02:0000518C 2242            	  2582: 	move.l	d2,a1
                            	  2583: 	; Add bytes from address value to checksum
02:0000518E D53900100050    	  2584: 	add.b		d2,S19Checksum
02:00005194 E08A            	  2585: 	lsr.l		#8,d2
02:00005196 D53900100050    	  2586: 	add.b		d2,S19Checksum
02:0000519C E08A            	  2587: 	lsr.l		#8,d2
02:0000519E D53900100050    	  2588: 	add.b		d2,S19Checksum
02:000051A4 E08A            	  2589: 	lsr.l		#8,d2
02:000051A6 D53900100050    	  2590: 	add.b		d2,S19Checksum
02:000051AC 4E75            	  2591: 	rts
                            	  2592: 
                            	  2593: ;------------------------------------------------------------------------------
                            	  2594: ; Get a character from auxillary input. Waiting for a character is limited to
                            	  2595: ; 32000 tries. If a character is not available within the limit, then a return
                            	  2596: ; to the monitor is done.
                            	  2597: ;
                            	  2598: ;	Parameters:
                            	  2599: ;		none
                            	  2600: ; Returns:
                            	  2601: ;		d1 = character from receive buffer or -1 if no char available
                            	  2602: ;------------------------------------------------------------------------------
                            	  2603: 
                            	  2604: AUXIN:
                            	  2605: 
                            	  2606: sGetChar:
02:000051AE 48E7A000        	  2607: 	movem.l	d0/d2,-(a7)
02:000051B2 343C7D00        	  2608: 	move.w	#32000,d2
                            	  2609: .0001:
02:000051B6 7024            	  2610: 	moveq		#36,d0				; serial get char from buffer
02:000051B8 4E4F            	  2611: 	trap		#15
02:000051BA 4A41            	  2612: 	tst.w		d1						; was there a char available?
02:000051BC 6A0C            	  2613: 	bpl.s		.0002
02:000051BE 51CAFFF6        	  2614: 	dbra		d2,.0001			; no - try again
02:000051C2 4CDF0005        	  2615: 	movem.l	(a7)+,d0/d2
02:000051C6 6000F7DC        	  2616: 	bra			Monitor				; ran out of tries
                            	  2617: .0002:
02:000051CA 4CDF0005        	  2618: 	movem.l	(a7)+,d0/d2
02:000051CE 0C01001A        	  2619: 	cmpi.b	#CTRLZ,d1			; receive end of file?
02:000051D2 6700F7D0        	  2620: 	beq			Monitor
02:000051D6 4E75            	  2621: 	rts
                            	  2622: 
                            	  2623: AudioInputTest:
02:000051D8 4E75            	  2624: 	rts
                            	  2625: BouncingBalls:
02:000051DA 4E75            	  2626: 	rts
                            	  2627: GraphicsDemo:
02:000051DC 4E75            	  2628: 	rts
                            	  2629: ClearScreen:
02:000051DE 6000EB7C        	  2630: 	bra		clear_screen
02:000051E2 4E75            	  2631: 	rts
                            	  2632: 
                            	  2633: ;------------------------------------------------------------------------------
                            	  2634: ; Reverse the order of bytes in d1.
                            	  2635: ;------------------------------------------------------------------------------
                            	  2636: 
                            	  2637: rbo:
02:000051E4 E159            	  2638: 	rol.w		#8,d1
02:000051E6 4841            	  2639: 	swap		d1
02:000051E8 E159            	  2640: 	rol.w		#8,d1
02:000051EA 4E75            	  2641: 	rts
                            	  2642: 
                            	  2643: ;==============================================================================
                            	  2644: ; Serial I/O routines
                            	  2645: ;==============================================================================
                            	  2646: 
                            	  2647: ;------------------------------------------------------------------------------
                            	  2648: ; Initialize the serial port an enhanced 6551 circuit.
                            	  2649: ;
                            	  2650: ; Select internal baud rate clock divider for 9600 baud
                            	  2651: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	  2652: ; Note that the byte order is swapped.
                            	  2653: ;------------------------------------------------------------------------------
                            	  2654: 
                            	  2655: SerialInit:
02:000051EC 427900100062    	  2656: 	clr.w		SerHeadRcv					; clear receive buffer indexes
02:000051F2 427900100060    	  2657: 	clr.w		SerTailRcv
02:000051F8 423900100064    	  2658: 	clr.b		SerRcvXon						; and Xon,Xoff flags
02:000051FE 423900100065    	  2659: 	clr.b		SerRcvXoff
02:00005204 203C09000000    	  2660: 	move.l	#$09000000,d0				; dtr,rts active, rxint enabled, no parity
02:0000520A 23C0FD060008    	  2661: 	move.l	d0,ACIA+ACIA_CMD
                            	  2662: ;	move.l	#$1E00F700,d0				; fifos enabled
02:00005210 203C1E000000    	  2663: 	move.l	#$1E000000,d0				; fifos disabled
02:00005216 23C0FD06000C    	  2664: 	move.l	d0,ACIA+ACIA_CTRL
02:0000521C 4E75            	  2665: 	rts
                            	  2666: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	  2667: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2668: ;	move.l	#300000,d2					; wait 100 ms
                            	  2669: ;	bra			.0001
                            	  2670: ;.0003:
                            	  2671: ;	swap		d2
                            	  2672: ;.0001:
                            	  2673: ;	nop
                            	  2674: ;	dbra		d2,.0001
                            	  2675: ;.0002:
                            	  2676: ;	swap		d2
                            	  2677: ;	dbra		d2,.0003
                            	  2678: ;	move.l	#$07000000,d0				; clear break
                            	  2679: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2680: ;	rts
                            	  2681: 	
                            	  2682: ;------------------------------------------------------------------------------
                            	  2683: ; SerialGetChar
                            	  2684: ;
                            	  2685: ; Check the serial port buffer to see if there's a char available. If there's
                            	  2686: ; a char available then return it. If the buffer is almost empty then send an
                            	  2687: ; XON.
                            	  2688: ;
                            	  2689: ; Stack Space:
                            	  2690: ;		2 words
                            	  2691: ; Parameters:
                            	  2692: ;		none
                            	  2693: ; Modifies:
                            	  2694: ;		d0,d2,a0
                            	  2695: ; Returns:
                            	  2696: ;		d1 = character or -1
                            	  2697: ;------------------------------------------------------------------------------
                            	  2698: 
                            	  2699: SerialGetChar:
02:0000521E 4E7A0FE0        	  2700: 	movec			coreno,d0
02:00005222 4840            	  2701: 	swap			d0
02:00005224 7202            	  2702: 	moveq			#SERIAL_SEMA,d1
02:00005226 6100AF4E        	  2703: 	bsr				LockSemaphore
02:0000522A 610000E6        	  2704: 	bsr				SerialRcvCount			; check number of chars in receive buffer
02:0000522E 0C400008        	  2705: 	cmpi.w		#8,d0								; less than 8?
02:00005232 621C            	  2706: 	bhi				.sgc2
02:00005234 4A3900100064    	  2707: 	tst.b			SerRcvXon						; skip sending XON if already sent
02:0000523A 6614            	  2708: 	bne	  		.sgc2            		; XON already sent?
02:0000523C 123C0011        	  2709: 	move.b		#XON,d1							; if <8 send an XON
02:00005240 423900100065    	  2710: 	clr.b			SerRcvXoff					; clear XOFF status
02:00005246 13C100100064    	  2711: 	move.b		d1,SerRcvXon				; flag so we don't send it multiple times
02:0000524C 61000098        	  2712: 	bsr				SerialPutChar				; send it
                            	  2713: .sgc2:
02:00005250 323900100062    	  2714: 	move.w		SerHeadRcv,d1				; check if anything is in buffer
02:00005256 B27900100060    	  2715: 	cmp.w			SerTailRcv,d1
02:0000525C 6720            	  2716: 	beq				.NoChars						; no?
02:0000525E 41F900101000    	  2717: 	lea				SerRcvBuf,a0
02:00005264 12301000        	  2718: 	move.b		(a0,d1.w),d1				; get byte from buffer
02:00005268 527900100062    	  2719: 	addi.w		#1,SerHeadRcv
02:0000526E 02790FFF00100062	  2720: 	andi.w		#$FFF,SerHeadRcv		; 4k wrap around
02:00005276 0281000000FF    	  2721: 	andi.l		#$FF,d1
02:0000527C 6002            	  2722: 	bra				.Xit
                            	  2723: .NoChars:
02:0000527E 72FF            	  2724: 	moveq			#-1,d1
                            	  2725: .Xit:
02:00005280 C342            	  2726: 	exg				d1,d2
02:00005282 4E7A0FE0        	  2727: 	movec			coreno,d0
02:00005286 4840            	  2728: 	swap			d0
02:00005288 7202            	  2729: 	moveq			#SERIAL_SEMA,d1
02:0000528A 6100AF24        	  2730: 	bsr				UnlockSemaphore
02:0000528E C541            	  2731: 	exg				d2,d1
02:00005290 4E75            	  2732: 	rts
                            	  2733: 
                            	  2734: ;------------------------------------------------------------------------------
                            	  2735: ; SerialPeekChar
                            	  2736: ;
                            	  2737: ; Check the serial port buffer to see if there's a char available. If there's
                            	  2738: ; a char available then return it. But don't update the buffer indexes. No need
                            	  2739: ; to send an XON here.
                            	  2740: ;
                            	  2741: ; Stack Space:
                            	  2742: ;		0 words
                            	  2743: ; Parameters:
                            	  2744: ;		none
                            	  2745: ; Modifies:
                            	  2746: ;		d0,d2,a0
                            	  2747: ; Returns:
                            	  2748: ;		d1 = character or -1
                            	  2749: ;------------------------------------------------------------------------------
                            	  2750: 
                            	  2751: SerialPeekChar:
02:00005292 4E7A0FE0        	  2752: 	movec		coreno,d0
02:00005296 4840            	  2753: 	swap		d0
02:00005298 7202            	  2754: 	moveq		#SERIAL_SEMA,d1
02:0000529A 6100AEDA        	  2755: 	bsr			LockSemaphore
02:0000529E 343900100062    	  2756: 	move.w	SerHeadRcv,d2		; check if anything is in buffer
02:000052A4 B47900100060    	  2757: 	cmp.w		SerTailRcv,d2
02:000052AA 670C            	  2758: 	beq			.NoChars				; no?
02:000052AC 41F900101000    	  2759: 	lea			SerRcvBuf,a0
02:000052B2 14302000        	  2760: 	move.b	(a0,d2.w),d2		; get byte from buffer
02:000052B6 6002            	  2761: 	bra			.Xit
                            	  2762: .NoChars:
02:000052B8 74FF            	  2763: 	moveq		#-1,d2
                            	  2764: .Xit:
02:000052BA 4E7A0FE0        	  2765: 	movec		coreno,d0
02:000052BE 4840            	  2766: 	swap		d0
02:000052C0 7202            	  2767: 	moveq		#SERIAL_SEMA,d1
02:000052C2 6100AEB2        	  2768: 	bsr			LockSemaphore
02:000052C6 3202            	  2769: 	move		d2,d1
02:000052C8 4E75            	  2770: 	rts
                            	  2771: 
                            	  2772: ;------------------------------------------------------------------------------
                            	  2773: ; SerialPeekChar
                            	  2774: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2775: ; buffer.
                            	  2776: ;
                            	  2777: ; Stack Space:
                            	  2778: ;		0 words
                            	  2779: ; Parameters:
                            	  2780: ;		none
                            	  2781: ; Modifies:
                            	  2782: ;		d
                            	  2783: ; Returns:
                            	  2784: ;		d1 = character or -1
                            	  2785: ;------------------------------------------------------------------------------
                            	  2786: 
                            	  2787: SerialPeekCharDirect:
02:000052CA 2239FD060004    	  2788: 	move.l	ACIA+ACIA_STAT,d1	; get serial status
02:000052D0 6138            	  2789: 	bsr			SerialRbo
02:000052D2 08010003        	  2790: 	btst		#3,d1							; look for Rx not empty
02:000052D6 670A            	  2791: 	beq.s		.0001
02:000052D8 7200            	  2792: 	moveq.l	#0,d1							; clear upper bits of return value
02:000052DA 1239FD060000    	  2793: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
02:000052E0 4E75            	  2794: 	rts												; return
                            	  2795: .0001:
02:000052E2 72FF            	  2796: 	moveq		#-1,d1
02:000052E4 4E75            	  2797: 	rts
                            	  2798: 
                            	  2799: ;------------------------------------------------------------------------------
                            	  2800: ; SerialPutChar
                            	  2801: ;    Put a character to the serial transmitter. This routine blocks until the
                            	  2802: ; transmitter is empty. 
                            	  2803: ;
                            	  2804: ; Stack Space
                            	  2805: ;		0 words
                            	  2806: ; Parameters:
                            	  2807: ;		d1.b = character to put
                            	  2808: ; Modifies:
                            	  2809: ;		none
                            	  2810: ;------------------------------------------------------------------------------
                            	  2811: 
                            	  2812: SerialPutChar:
02:000052E6 48E7C000        	  2813: 	movem.l	d0/d1,-(a7)				; push d0,d1
                            	  2814: .0001:
02:000052EA 2039FD060004    	  2815: 	move.l	ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
02:000052F0 E158            	  2816: 	rol.w		#8,d0
02:000052F2 4840            	  2817: 	swap		d0
02:000052F4 E158            	  2818: 	rol.w		#8,d0
02:000052F6 08000004        	  2819: 	btst		#4,d0							; bit #4 of the status reg
02:000052FA 67EE            	  2820: 	beq.s		.0001			    		; branch if transmitter is not empty
02:000052FC 610C            	  2821: 	bsr			SerialRbo
02:000052FE 23C1FD060000    	  2822: 	move.l	d1,ACIA+ACIA_TX		; send the byte
02:00005304 4CDF0003        	  2823: 	movem.l	(a7)+,d0/d1				; pop d0,d1
02:00005308 4E75            	  2824: 	rts
                            	  2825: 	
                            	  2826: ;------------------------------------------------------------------------------
                            	  2827: ; Reverse the order of bytes in d1.
                            	  2828: ;------------------------------------------------------------------------------
                            	  2829: 
                            	  2830: SerialRbo:
02:0000530A E159            	  2831: 	rol.w		#8,d1
02:0000530C 4841            	  2832: 	swap		d1
02:0000530E E159            	  2833: 	rol.w		#8,d1
02:00005310 4E75            	  2834: 	rts
                            	  2835: 
                            	  2836: ;------------------------------------------------------------------------------
                            	  2837: ; Calculate number of character in input buffer
                            	  2838: ;
                            	  2839: ; Returns:
                            	  2840: ;		d0 = number of bytes in buffer.
                            	  2841: ;------------------------------------------------------------------------------
                            	  2842: 
                            	  2843: SerialRcvCount:
02:00005312 303900100060    	  2844: 	move.w	SerTailRcv,d0
02:00005318 907900100062    	  2845: 	sub.w		SerHeadRcv,d0
02:0000531E 6C10            	  2846: 	bge			.0001
02:00005320 303C1000        	  2847: 	move.w	#$1000,d0
02:00005324 907900100062    	  2848: 	sub.w		SerHeadRcv,d0
02:0000532A D07900100060    	  2849: 	add.w		SerTailRcv,d0
                            	  2850: .0001:
02:00005330 4E75            	  2851: 	rts
                            	  2852: 
                            	  2853: ;------------------------------------------------------------------------------
                            	  2854: ; Serial IRQ routine
                            	  2855: ;
                            	  2856: ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                            	  2857: ; Received characters are buffered. If the buffer becomes full, new characters
                            	  2858: ; will be lost.
                            	  2859: ;
                            	  2860: ; Parameters:
                            	  2861: ;		none
                            	  2862: ; Modifies:
                            	  2863: ;		none
                            	  2864: ; Returns:
                            	  2865: ;		d1 = -1 if IRQ handled, otherwise zero
                            	  2866: ;------------------------------------------------------------------------------
                            	  2867: 
                            	  2868: SerialIRQ:
02:00005332 46FC2300        	  2869: 	move.w	#$2300,sr						; disable lower level IRQs
02:00005336 48E7E080        	  2870: 	movem.l	d0/d1/d2/a0,-(a7)
02:0000533A 4E7A0FE0        	  2871: 	movec		coreno,d0
02:0000533E 4840            	  2872: 	swap		d0
02:00005340 7202            	  2873: 	moveq		#SERIAL_SEMA,d1
02:00005342 6100AE32        	  2874: 	bsr			LockSemaphore
                            	  2875: sirqNxtByte:
02:00005346 2239FD060004    	  2876: 	move.l	ACIA+ACIA_STAT,d1		; check the status
02:0000534C 61BC            	  2877: 	bsr			SerialRbo
02:0000534E 08010003        	  2878: 	btst		#3,d1								; bit 3 = rx full
02:00005352 6758            	  2879: 	beq			notRxInt
02:00005354 2239FD060000    	  2880: 	move.l	ACIA+ACIA_RX,d1
02:0000535A 61AE            	  2881: 	bsr			SerialRbo
                            	  2882: sirq0001:
02:0000535C 303900100060    	  2883: 	move.w	SerTailRcv,d0				; check if recieve buffer full
02:00005362 5240            	  2884: 	addi.w	#1,d0
02:00005364 02400FFF        	  2885: 	andi.w	#$FFF,d0
02:00005368 B07900100062    	  2886: 	cmp.w		SerHeadRcv,d0
02:0000536E 673C            	  2887: 	beq			sirqRxFull
02:00005370 33C000100060    	  2888: 	move.w	d0,SerTailRcv				; update tail pointer
02:00005376 5340            	  2889: 	subi.w	#1,d0								; backup
02:00005378 02400FFF        	  2890: 	andi.w	#$FFF,d0
02:0000537C 41F900101000    	  2891: 	lea			SerRcvBuf,a0				; a0 = buffer address
02:00005382 11810000        	  2892: 	move.b	d1,(a0,d0.w)				; store recieved byte in buffer
02:00005386 4A3900100065    	  2893: 	tst.b		SerRcvXoff					; check if xoff already sent
02:0000538C 66B8            	  2894: 	bne			sirqNxtByte
02:0000538E 6182            	  2895: 	bsr			SerialRcvCount			; if more than 4080 chars in buffer
02:00005390 0C400FF0        	  2896: 	cmpi.w	#4080,d0
02:00005394 65B0            	  2897: 	blo			sirqNxtByte
02:00005396 123C0013        	  2898: 	move.b	#XOFF,d1						; send an XOFF
02:0000539A 423900100064    	  2899: 	clr.b		SerRcvXon						; clear XON status
02:000053A0 13C100100065    	  2900: 	move.b	d1,SerRcvXoff				; set XOFF status
02:000053A6 6100FF3E        	  2901: 	bsr			SerialPutChar				; send XOFF
02:000053AA 609A            	  2902: 	bra			sirqNxtByte     		; check the status for another byte
                            	  2903: sirqRxFull:
                            	  2904: notRxInt:
02:000053AC 4E7A0FE0        	  2905: 	movec		coreno,d0
02:000053B0 4840            	  2906: 	swap		d0
02:000053B2 7202            	  2907: 	moveq		#SERIAL_SEMA,d1
02:000053B4 6100ADFA        	  2908: 	bsr			UnlockSemaphore
02:000053B8 4CDF0107        	  2909: 	movem.l	(a7)+,d0/d1/d2/a0
02:000053BC 4E73            	  2910: 	rte
                            	  2911: 
                            	  2912: nmeSerial:
02:000053BE 53657269616C    	  2913: 	dc.b		"Serial",0
02:000053C4 00
                            	  2914: 
                            	  2915: 
                            	  2916: ;------------------------------------------------------------------------------
                            	  2917: ;------------------------------------------------------------------------------
                            	  2918: 	even
                            	  2919: 
                            	  2920: bus_err:
                            	  2921: .0001:
02:000053C6 4E71            	  2922: 	nop
02:000053C8 60FC            	  2923: 	bra			.0001
                            	  2924: 
                            	  2925: trap3:
                            	  2926: 	; First save all registers
02:000053CA 48F9FFFF00040100	  2927: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
02:000053D2 33DF00040140    	  2928: 	move.w		(a7)+,Regsave+$40
02:000053D8 23DF00040144    	  2929: 	move.l		(a7)+,Regsave+$44
02:000053DE 2E7C00040FFC    	  2930: 	move.l		#$40FFC,a7			; reset stack pointer
02:000053E4 46FC2500        	  2931: 	move.w		#$2500,sr				; enable interrupts
02:000053E8 303900040202    	  2932: 	move.w		NumSetBreakpoints,d0
02:000053EE 5340            	  2933: 	subi.w		#1,d0
02:000053F0 41F900040220    	  2934: 	lea				Breakpoints,a0
02:000053F6 223900040144    	  2935: 	move.l		Regsave+$44,d1
                            	  2936: .0001:
02:000053FC B298            	  2937: 	cmp.l			(a0)+,d1
02:000053FE 6708            	  2938: 	beq.s			ProcessBreakpoint
02:00005400 51C8FFFA        	  2939: 	dbra			d0,.0001
02:00005404 6000F59E        	  2940: 	bra				Monitor					; not a breakpoint
                            	  2941: ProcessBreakpoint:
02:00005408 6104            	  2942: 	bsr				DisarmAllBreakpoints
02:0000540A 6000FA5A        	  2943: 	bra				cmdDumpRegs
                            	  2944: 
                            	  2945: ;------------------------------------------------------------------------------
                            	  2946: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  2947: ;------------------------------------------------------------------------------
                            	  2948: 
                            	  2949: DisarmAllBreakpoints:
02:0000540E 48E780E0        	  2950: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
02:00005412 303900040202    	  2951: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
02:00005418 0C400008        	  2952: 	cmpi.w	#numBreakpoints,d0		; check for valid number
02:0000541C 641A            	  2953: 	bhs.s		.0001
02:0000541E 45F900040220    	  2954: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
02:00005424 41F900040280    	  2955: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
02:0000542A 6004            	  2956: 	bra.s		.0003									; enter loop at bottom
                            	  2957: .0002:
02:0000542C 225A            	  2958: 	move.l	(a2)+,a1							; a1 = address of breakpoint
02:0000542E 3298            	  2959: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  2960: .0003:
02:00005430 51C8FFFA        	  2961: 	dbra		d0,.0002
02:00005434 4CDF0701        	  2962: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  2963: .0001:
02:00005438 4E75            	  2964: 	rts	
                            	  2965: 
                            	  2966: ;------------------------------------------------------------------------------
                            	  2967: ; ArmAllBreakpoints, used when entering the monitor.
                            	  2968: ;------------------------------------------------------------------------------
                            	  2969: 
                            	  2970: ArmAllBreakpoints:
02:0000543A 48E780E0        	  2971: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
02:0000543E 303900040202    	  2972: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
02:00005444 0C400008        	  2973: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
02:00005448 641E            	  2974: 	bhs.s			.0001
02:0000544A 45F900040220    	  2975: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
02:00005450 41F900040280    	  2976: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
02:00005456 6008            	  2977: 	bra.s			.0003									; enter loop at bottom
                            	  2978: .0002:
02:00005458 225A            	  2979: 	move.l		(a2)+,a1							; a1 = address of breakpoint
02:0000545A 3091            	  2980: 	move.w		(a1),(a0)							; copy instruction word to table
02:0000545C 30FC4E43        	  2981: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  2982: .0003:
02:00005460 51C8FFF6        	  2983: 	dbra			d0,.0002
02:00005464 4CDF0701        	  2984: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  2985: .0001:
02:00005468 4E75            	  2986: 	rts	
                            	  2987: 
                            	  2988: ;------------------------------------------------------------------------------
                            	  2989: ;------------------------------------------------------------------------------
                            	  2990: 
                            	  2991: ArmBreakpoint:
02:0000546A 48E7E0E0        	  2992: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
02:0000546E 303900040202    	  2993: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
02:00005474 0C400008        	  2994: 	cmpi.w		#numBreakpoints,d0		; check if too many
02:00005478 645A            	  2995: 	bhs.s			.0001
02:0000547A 527900040202    	  2996: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
02:00005480 2400            	  2997: 	move.l		d0,d2
02:00005482 6100F8D4        	  2998: 	bsr				ignBlanks
02:00005486 6100FAA2        	  2999: 	bsr				GetHexNumber
02:0000548A 6748            	  3000: 	beq.s			.0001									; was there an address?
02:0000548C 08010000        	  3001: 	btst			#0,d1									; address value must be even
02:00005490 6642            	  3002: 	bne.s			.0001
                            	  3003: 	; See if the breakpoint is in the table already
02:00005492 43F900040220    	  3004: 	lea				Breakpoints,a1				; a1 points to breakpoint table
02:00005498 343C0007        	  3005: 	move.w		#numBreakpoints-1,d2
                            	  3006: .0002:
02:0000549C B299            	  3007: 	cmp.l			(a1)+,d1
02:0000549E 673A            	  3008: 	beq.s			.0003									; breakpoint is in table already
02:000054A0 51CAFFFA        	  3009: 	dbra			d2,.0002
                            	  3010: 	; Add breakpoint to table
                            	  3011: 	; Search for empty entry
02:000054A4 43F900040220    	  3012: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
02:000054AA 4242            	  3013: 	clr.w			d2										; d2 = count
                            	  3014: .0006:
02:000054AC 4A91            	  3015: 	tst.l			(a1)									; is the entry empty?
02:000054AE 670C            	  3016: 	beq.s			.0005									; branch if found empty entry
02:000054B0 5889            	  3017: 	lea				4(a1),a1							; point to next entry
02:000054B2 5242            	  3018: 	addi.w		#1,d2									; increment count
02:000054B4 0C420008        	  3019: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
02:000054B8 65F2            	  3020: 	blo.s			.0006
02:000054BA 6018            	  3021: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  3022: .0005:
02:000054BC E542            	  3023: 	asl.w			#2,d2									; d2 = long word index
02:000054BE 23812000        	  3024: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
02:000054C2 2441            	  3025: 	move.l		d1,a2
02:000054C4 E24A            	  3026: 	lsr.w			#1,d2									; d2 = word index
                            	  3027: .0004:
02:000054C6 43F900040280    	  3028: 	lea				BreakpointWords,a1
02:000054CC 33922000        	  3029: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
02:000054D0 34BC4E43        	  3030: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  3031: .0001:
02:000054D4 4CDF0707        	  3032: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
02:000054D8 4E75            	  3033: 	rts
                            	  3034: .0003:
02:000054DA 2469FFFC        	  3035: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
02:000054DE 0C524E43        	  3036: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
02:000054E2 67F0            	  3037: 	beq.s			.0001
02:000054E4 D482            	  3038: 	asl.l			#1,d2									; d2 = word index
02:000054E6 60DE            	  3039: 	bra.s			.0004
                            	  3040: 
                            	  3041: 
                            	  3042: ;------------------------------------------------------------------------------
                            	  3043: ;------------------------------------------------------------------------------
                            	  3044: 
                            	  3045: DisarmBreakpoint:
02:000054E8 48E7E0E0        	  3046: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
02:000054EC 303900040202    	  3047: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
02:000054F2 0C400008        	  3048: 	cmpi.w		#numBreakpoints,d0		; check if too many
02:000054F6 623E            	  3049: 	bhi.s			.0001
02:000054F8 2400            	  3050: 	move.l		d0,d2
02:000054FA 6100F85C        	  3051: 	bsr				ignBlanks
02:000054FE 6100FA2A        	  3052: 	bsr				GetHexNumber
02:00005502 6732            	  3053: 	beq.s			.0001									; was there an address?
02:00005504 08010000        	  3054: 	btst			#0,d1									; address value must be even
02:00005508 662C            	  3055: 	bne.s			.0001
                            	  3056: 	; See if the breakpoint is in the table already
02:0000550A 43F900040220    	  3057: 	lea				Breakpoints,a1				; a1 points to breakpoint table
02:00005510 5342            	  3058: 	subi.w		#1,d2
                            	  3059: .0002:
02:00005512 B299            	  3060: 	cmp.l			(a1)+,d1
02:00005514 6706            	  3061: 	beq.s			.0003									; breakpoint is in table already
02:00005516 51CAFFFA        	  3062: 	dbra			d2,.0002
02:0000551A 601A            	  3063: 	bra				.0001									; breakpoint was not in table
                            	  3064: .0003:
                            	  3065: 	; Remove breakpoint from table
02:0000551C 537900040202    	  3066: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
02:00005522 2469FFFC        	  3067: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
02:00005526 42A9FFFC        	  3068: 	clr.l			-4(a1)								; empty out breakpoint
02:0000552A 43F900040280    	  3069: 	lea				BreakpointWords,a1
02:00005530 D482            	  3070: 	asl.l			#1,d2									; d2 = word index
02:00005532 34B12000        	  3071: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  3072: .0001:
02:00005536 4CDF0707        	  3073: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
02:0000553A 4E75            	  3074: 	rts
                            	  3075: 
                            	  3076: ;------------------------------------------------------------------------------
                            	  3077: ;------------------------------------------------------------------------------
                            	  3078: 
                            	  3079: ListBreakpoints:
02:0000553C 6100E86E        	  3080: 	bsr			CRLF
02:00005540 343C0008        	  3081: 	move.w	#numBreakpoints,d2
02:00005544 43F900040220    	  3082: 	lea			Breakpoints,a1
                            	  3083: .0001:
02:0000554A 2219            	  3084: 	move.l	(a1)+,d1
02:0000554C 6100FA5C        	  3085: 	bsr			DisplayTetra
02:00005550 6100E85A        	  3086: 	bsr			CRLF
02:00005554 51CAFFF4        	  3087: 	dbra		d2,.0001
02:00005558 6000F44A        	  3088: 	bra			Monitor
                            	  3089: 
                            	  3090: ;------------------------------------------------------------------------------
                            	  3091: ;------------------------------------------------------------------------------
                            	  3092: 
                            	  3093: ClearBreakpointList:
02:0000555C 343C0008        	  3094: 	move.w	#numBreakpoints,d2
02:00005560 43F900040220    	  3095: 	lea			Breakpoints,a1
                            	  3096: .0001:
02:00005566 4299            	  3097: 	clr.l		(a1)+
02:00005568 51CAFFFC        	  3098: 	dbra		d2,.0001
02:0000556C 4E75            	  3099: 	rts
                            	  3100: 
                            	  3101: ;------------------------------------------------------------------------------
                            	  3102: ;------------------------------------------------------------------------------
                            	  3103: 
                            	  3104: InitIRQ:
02:0000556E 7006            	  3105: 	moveq		#6,d0
02:00005570 41FAF04A        	  3106: 	lea			KeybdIRQ,a0
02:00005574 610C            	  3107: 	bsr			InstallIRQ
02:00005576 41FA003A        	  3108: 	lea			TickIRQ,a0
02:0000557A 6106            	  3109: 	bsr			InstallIRQ
02:0000557C 7003            	  3110: 	moveq		#3,d0
02:0000557E 41FAFDB2        	  3111: 	lea			SerialIRQ,a0
                            	  3112: 	; fall through
                            	  3113: 
                            	  3114: ;------------------------------------------------------------------------------
                            	  3115: ; Install an IRQ handler.
                            	  3116: ;
                            	  3117: ; Parameters:
                            	  3118: ;		d0 = IRQ level
                            	  3119: ;		a0 = pointer to IRQ routine
                            	  3120: ; Returns:
                            	  3121: ;		d1 = -1 if successfully added, 0 otherwise
                            	  3122: ;		nf = 1, zf = 0 if successfully added, otherwise nf = 0, zf = 1
                            	  3123: ;------------------------------------------------------------------------------
                            	  3124: 
                            	  3125: InstallIRQ:
02:00005582 2F00            	  3126: 	move.l	d0,-(a7)					; save working register
02:00005584 43F80400        	  3127: 	lea			InstalledIRQ,a1		; a1 points to installed IRQ list
02:00005588 EB48            	  3128: 	lsl.w		#5,d0							; multiply by 8 long words per IRQ level
                            	  3129: .nextSpot:
02:0000558A B1F10000        	  3130: 	cmpa.l	(a1,d0.w),a0			; Is the IRQ already installed?
02:0000558E 6716            	  3131: 	beq.s		.found
02:00005590 4AB10000        	  3132: 	tst.l		(a1,d0.w)					; test for an empty spot
02:00005594 670C            	  3133: 	beq.s		.foundSpot
02:00005596 5840            	  3134: 	addi.w	#4,d0							; increment to next slot
02:00005598 3200            	  3135: 	move.w	d0,d1
02:0000559A 0241001F        	  3136: 	andi.w	#$1F,d1						; check to see if spots exhausted
02:0000559E 670C            	  3137: 	beq.s		.noEmpties
02:000055A0 60E8            	  3138: 	bra.s		.nextSpot
                            	  3139: .foundSpot:
02:000055A2 23880000        	  3140: 	move.l	a0,(a1,d0.w)			; add IRQ routine to table
                            	  3141: .found:
02:000055A6 201F            	  3142: 	move.l	(a7)+,d0
02:000055A8 72FF            	  3143: 	moveq		#-1,d1						; return success
02:000055AA 4E75            	  3144: 	rts
                            	  3145: .noEmpties:
02:000055AC 201F            	  3146: 	move.l	(a7)+,d0
02:000055AE 7200            	  3147: 	moveq		#0,d1							; return failed to add
02:000055B0 4E75            	  3148: 	rts
                            	  3149: 	
                            	  3150: 
                            	  3151: ;------------------------------------------------------------------------------
                            	  3152: ;------------------------------------------------------------------------------
                            	  3153: 
                            	  3154: TickIRQ:
02:000055B2 46FC2600        	  3155: 	move.w	#$2600,sr					; disable lower level IRQs
02:000055B6 48E74080        	  3156: 	movem.l	d1/a0,-(a7)
                            	  3157: 	; ToDo: detect a tick interrupt
                            	  3158: ;	move.l	PLIC+$00,d1
                            	  3159: ;	rol.l		#8,d1
                            	  3160: ;	cmpi.b	#29,d1
                            	  3161: ;	bne.s		.notTick
02:000055BA 23FC1D000000FD09	  3162: 	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
02:000055C2 0014
02:000055C4 207900040004    	  3163: 	move.l	TextScr,a0				; a0 = screen address
02:000055CA 52A80028        	  3164: 	addi.l	#1,40(a0)					; update onscreen IRQ flag
02:000055CE 4CDF0102        	  3165: 	movem.l	(a7)+,d1/a0
02:000055D2 4E73            	  3166: 	rte
                            	  3167: ;.notTick:
                            	  3168: ;	movem.l	(a7)+,d1/a0
                            	  3169: ;	rte
                            	  3170: 
                            	  3171: ;------------------------------------------------------------------------------
                            	  3172: ;------------------------------------------------------------------------------
                            	  3173: 
                            	  3174: irq3_rout:
02:000055D4 48E7C0C0        	  3175: 	movem.l	d0/d1/a0/a1,-(a7)
02:000055D8 41F80460        	  3176: 	lea			InstalledIRQ+8*4*3,a0
02:000055DC 6008            	  3177: 	bra			irq_rout
                            	  3178: 
                            	  3179: irq6_rout:
02:000055DE 48E7C0C0        	  3180: 	movem.l	d0/d1/a0/a1,-(a7)
02:000055E2 41F804C0        	  3181: 	lea			InstalledIRQ+8*4*6,a0
                            	  3182: irq_rout:
02:000055E6 7007            	  3183: 	moveq		#7,d0
                            	  3184: .nextHandler:
02:000055E8 2258            	  3185: 	move.l	(a0)+,a1
02:000055EA 6706            	  3186: 	beq.s		.0003
02:000055EC 4E91            	  3187: 	jsr			(a1)
02:000055EE 4A81            	  3188: 	tst.l		d1								; was IRQ handled?
02:000055F0 6B04            	  3189: 	bmi.s		.0002							; first one to return handled quits loop
                            	  3190: .0003:
02:000055F2 51C8FFF4        	  3191: 	dbra		d0,.nextHandler
                            	  3192: .0002:
02:000055F6 4CDF0303        	  3193: 	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3194: 
                            	  3195: SpuriousIRQ:
02:000055FA 4E73            	  3196: 	rte
                            	  3197: 
                            	  3198: ;	bsr			KeybdIRQ
                            	  3199: ;	tst.l		d1								; handled by KeybdIRQ?
                            	  3200: ;	bmi.s		.0002							; if yes, go return
                            	  3201: ;.0001:
                            	  3202: ;	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
                            	  3203: ;	move.l	TextScr,a0				; a0 = screen address
                            	  3204: ;	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  3205: ;.0002:	
                            	  3206: ;	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3207: ;	rte
                            	  3208: 
                            	  3209: nmi_rout:
02:000055FC 48E7C080        	  3210: 	movem.l	d0/d1/a0,-(a7)
02:00005600 123C004E        	  3211: 	move.b	#'N',d1
02:00005604 6100E7F0        	  3212: 	bsr			DisplayChar
02:00005608 4CDF0103        	  3213: 	movem.l	(a7)+,d0/d1/a0		; return
02:0000560C 4E73            	  3214: 	rte
                            	  3215: 
                            	  3216: brdisp_trap:
02:0000560E 48F9FFFF00040100	  3217: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
02:00005616 33DF00040140    	  3218: 	move.w	(a7)+,Regsave+$40
02:0000561C 23DF00040144    	  3219: 	move.l	(a7)+,Regsave+$44
02:00005622 2E7C00040FFC    	  3220: 	move.l	#$40FFC,a7			; reset stack pointer
02:00005628 46FC2500        	  3221: 	move.w	#$2500,sr				; enable interrupts
02:0000562C 43FA0069        	  3222: 	lea			msg_bad_branch_disp,a1
02:00005630 6100EA40        	  3223: 	bsr			DisplayString
02:00005634 6100F96C        	  3224: 	bsr			DisplaySpace
02:00005638 223900040144    	  3225: 	move.l	Regsave+$44,d1	; exception address
02:0000563E 6100F96A        	  3226: 	bsr			DisplayTetra		; and display it
                            	  3227: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
02:00005642 6000F822        	  3228: 	bra			cmdDumpRegs
                            	  3229: 
                            	  3230: illegal_trap:
02:00005646 544F            	  3231: 	addq		#2,sp						; get rid of sr
02:00005648 221F            	  3232: 	move.l	(sp)+,d1				; pop exception address
02:0000564A 6100F95E        	  3233: 	bsr			DisplayTetra		; and display it
02:0000564E 43FA0035        	  3234: 	lea			msg_illegal,a1	; followed by message
02:00005652 6100EA1E        	  3235: 	bsr			DisplayString
                            	  3236: .0001:
02:00005656 60FE            	  3237: 	bra			.0001
02:00005658 6000F34A        	  3238: 	bra			Monitor
                            	  3239: 	
                            	  3240: ; -----------------------------------------------------------------------------
                            	  3241: ; -----------------------------------------------------------------------------
                            	  3242: 
                            	  3243: msg_start:
02:0000565C 726636386B205379	  3244: 	dc.b	"rf68k System Starting",CR,LF,0
02:00005664 7374656D20537461
02:0000566C 7274696E67
02:00005671 0D
02:00005672 0A
02:00005673 00
                            	  3245: msg_core_start:
02:00005674 20636F7265207374	  3246: 	dc.b	" core starting",CR,LF,0
02:0000567C 617274696E67
02:00005682 0D
02:00005683 0A
02:00005684 00
                            	  3247: msg_illegal:
02:00005685 20696C6C6567616C	  3248: 	dc.b	" illegal opcode",CR,LF,0
02:0000568D 206F70636F6465
02:00005694 0D
02:00005695 0A
02:00005696 00
                            	  3249: msg_bad_branch_disp:
02:00005697 206272616E636820	  3250: 	dc.b	" branch selfref: ",0
02:0000569F 73656C667265663A
02:000056A7 20
02:000056A8 00
                            	  3251: msg_test_done:
02:000056A9 2043505520746573	  3252: 	dc.b	" CPU test done.",0
02:000056B1 7420646F6E652E
02:000056B8 00
                            	  3253: 
                            	  3254: 
                            	  3255: 
                            	  3256: 


Symbols by name:
ABCD_INNER1                     02:0000255E
ABCD_INNER2                     02:000025CC
ABCD_NO_C1                      02:0000257A
ABCD_NO_C2                      02:00002582
ABCD_NO_C3                      02:000025E8
ABCD_NO_C4                      02:000025F0
ABCD_OUTER1                     02:0000255C
ABCD_OUTER2                     02:000025CA
ACIA                             E:FD060000
ACIA_CMD                         E:00000008
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     02:000030C4
ADDQ_LOOP1                      02:000028DE
ADDQ_LOOP2                      02:0000291C
ADDQ_LOOP3                      02:00002952
ADDX_LOOP3                      02:000031EA
ADDX_LOOP4                      02:00003206
ADDX_LOOP5                      02:00003222
ADDX_OUTER1                     02:00003156
ADD_OUTER1                      02:00002EEA
ADD_OUTER2                      02:00002F5E
ALL_DONE                        02:000002D0
AND_OUTER1                      02:00002C08
AND_OUTER2                      02:00002C7C
AUXIN                           02:000051AE
ArmAllBreakpoints               02:0000543A
ArmBreakpoint                   02:0000546A
AsciiToHexNybble                02:00004F56
AudioInputTest                  02:000051D8
BCC1                            02:00002804
BCC10                           02:00002856
BCC11                           02:0000285E
BCC12                           02:00002868
BCC13                           02:00002870
BCC14                           02:0000287A
BCC2                            02:0000280E
BCC3                            02:00002816
BCC4                            02:00002820
BCC5                            02:00002828
BCC6                            02:00002832
BCC7                            02:0000283A
BCC8                            02:00002844
BCC9                            02:0000284C
BSR_CLOSE1                      02:000013A4
BSR_CLOSE2                      02:000013DA
BSR_FAR1                        02:000002D2
BSR_FAR2                        02:000027F4
BlankLastLine                   02:0000400E
BouncingBalls                   02:000051DA
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
CMPA_OUTER1                     02:00002DDE
CMPM_LOOP1                      02:00002E6C
CMPM_LOOP2                      02:00002E86
CMPM_LOOP3                      02:00002EA0
CMP_OUTER1                      02:00002D68
CR                               E:0000000D
CRLF                            02:00003DAC
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CTRLZ                            E:0000001A
CalcScreenLoc                   02:00003DE8
CheckForCtrlC                   02:00004304
CheckForKey                     02:000042C0
ClearBreakpointList             02:0000555C
ClearScreen                     02:000051DE
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
Cursor1                         02:000041A8
CursorCol                        E:00040001
CursorRow                        E:00040000
DBCC_LOOP1                      02:00002884
DBCC_LOOP2                      02:00002892
DIVS_OUTER1                     02:00002AC8
DIVU_OUTER1                     02:00002A76
Delay3s                         02:000001CA
DisarmAllBreakpoints            02:0000540E
DisarmBreakpoint                02:000054E8
DisplayByte                     02:00004FB6
DisplayChar                     02:00003DF6
DisplayHelp                     02:00004AA4
DisplayMem                      02:00004E0A
DisplayNybble                   02:00004FBC
DisplaySpace                    02:00004FA2
DisplayString                   02:00004072
DisplayStringCRLF               02:00004088
DisplayStringLimited            02:0000408E
DisplayStringLimitedCRLF        02:000040AE
DisplayTetra                    02:00004FAA
DisplayTwoSpaces                02:00004F90
DisplayWyde                     02:00004FB0
DumpMem1                        02:00004DF8
EOR_OUTER2                      02:00002CF2
EXCEPTION_6                     02:000002DA
EXCEPTION_7                     02:000002E2
ExecuteCode                     02:00004DCA
ForceUnlockSemaphore            02:00000196
FromScreen                      02:00004990
GetCmdLine                      02:00004BE4
GetHexNumber                    02:00004F2A
GetKey                          02:000042CC
GraphicsDemo                    02:000051DC
HelpMsg                         02:00004AB0
HomeCursor                      02:000040B4
IOFocus                          E:00100000
IncCursorPos                    02:00003F70
IncCursorRow                    02:00003F90
InitIRQ                         02:0000556E
InitRand                        02:000000CC
InitSemaphores                  02:00000150
InstallIRQ                      02:00005582
InstalledIRQ                     A:00000400
KEYBD                            E:FD0FFE00
KEYBD_SEMA                       E:00000003
KeybdEcho                        E:0004000C
KeybdGetChar                    02:00004320
KeybdGetCharNoWait              02:00004310
KeybdGetCharWait                02:00004318
KeybdIRQ                        02:000045BC
KeybdLEDs                        E:0010000E
KeybdRecvByte                   02:00004272
KeybdSendByte                   02:000045A4
KeybdSetLEDStatus               02:00004538
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     02:00004292
LEA1                            02:00001DB0
LF                               E:0000000A
ListBreakpoints                 02:0000553C
LockSemaphore                   02:00000176
MOVE1                           02:00001A1E
MOVE2                           02:000019A2
MOVE3                           02:00001A9E
MOVE4                           02:00001BF8
MULS_OUTER1                     02:000033BE
MULU_OUTER1                     02:00003372
Monitor                         02:000049A4
NBCD_LOOP                       02:00002744
NBCD_LOOP1                      02:0000278A
NBCD_NO_C                       02:00002750
NBCD_NO_C1                      02:0000279E
NBCD_NO_Z                       02:00002754
NBCD_NO_Z1                      02:000027A2
NextRec                         02:00004FDC
NumSetBreakpoints                E:00040202
OR_OUTER1                       02:00002B1E
OR_OUTER2                       02:00002B92
PLIC                             E:FD090000
ProcessBreakpoint               02:00005408
ProcessRec                      02:00004FEE
ProcessS1                       02:000050F0
ProcessS2                       02:000050F4
ProcessS3                       02:000050F8
ProcessS7                       02:000050FC
ProcessS8                       02:00005108
ProcessS9                       02:00005114
Prompt1                         02:000049E2
Prompt3                         02:000049CC
PromptLn                        02:000049C0
RAND_MW                          E:FD0FFD0C
RAND_MZ                          E:FD0FFD08
RAND_NUM                         E:FD0FFD00
RAND_SEMA                        E:00000004
RAND_STRM                        E:FD0FFD04
ROXx_FLAGS                      02:00003686
ROXx_LOOP1                      02:0000369C
ROXx_LOOP2                      02:000036BC
ROXx_LOOP3                      02:000036DC
ROXx_LOOP4                      02:000036FC
ROXx_LOOP5                      02:0000371C
ROXx_LOOP6                      02:0000373E
ROx_FLAGS                       02:00003450
ROx_LOOP1                       02:00003466
ROx_LOOP2                       02:00003486
ROx_LOOP3                       02:000034A6
ROx_LOOP4                       02:000034C6
ROx_LOOP5                       02:000034E6
ROx_LOOP6                       02:00003508
RTR_DONE                        02:000027E6
RandGetNum                      02:0000010E
RandInit                        02:000000CC
RandWait                        02:0000013A
Regsave                          E:00040100
S1932a                          02:00005158
S1932b                          02:0000516C
S19Checksum                      E:00100050
S19Get16BitAddress              02:00005120
S19Get24BitAddress              02:0000512E
S19Get32BitAddress              02:0000513A
S19StartAddress                  E:00040008
SBCD_INNER1                     02:00002656
SBCD_INNER2                     02:000026C4
SBCD_NO_C1                      02:00002672
SBCD_NO_C2                      02:0000267A
SBCD_NO_C3                      02:000026E0
SBCD_NO_C4                      02:000026E8
SBCD_OUTER1                     02:00002654
SBCD_OUTER2                     02:000026C2
SCREEN_SEMA                      E:00000005
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SERIAL_SEMA                      E:00000002
SHIFTS2_FLAGS                   02:00003AFE
SHIFTS2_LOOP1                   02:00003B14
SHIFTS2_LOOP2                   02:00003B30
SHIFTS2_LOOP3                   02:00003B4C
SHIFTS2_LOOP4                   02:00003B68
SHIFTS2_LOOP5                   02:00003B84
SHIFTS2_LOOP6                   02:00003BA2
SHIFTS_FLAGS                    02:000038BC
SHIFTS_LOOP1                    02:000038D2
SHIFTS_LOOP2                    02:000038F2
SHIFTS_LOOP3                    02:00003912
SHIFTS_LOOP4                    02:00003932
SHIFTS_LOOP5                    02:00003952
SHIFTS_LOOP6                    02:00003974
SUBA_OUTER1                     02:00003110
SUBQ_LOOP1                      02:0000299C
SUBQ_LOOP2                      02:000029D6
SUBQ_LOOP3                      02:00002A0C
SUBX_LOOP3                      02:000032FA
SUBX_LOOP4                      02:00003316
SUBX_LOOP5                      02:00003332
SUBX_OUTER1                     02:00003266
SUB_OUTER1                      02:00002FD4
SUB_OUTER2                      02:00003048
ScrollUp                        02:00003FC4
SerHeadRcv                       E:00100062
SerRcvBuf                        E:00101000
SerRcvXoff                       E:00100065
SerRcvXon                        E:00100064
SerTailRcv                       E:00100060
SerialGetChar                   02:0000521E
SerialIRQ                       02:00005332
SerialInit                      02:000051EC
SerialPeekChar                  02:00005292
SerialPeekCharDirect            02:000052CA
SerialPutChar                   02:000052E6
SerialRbo                       02:0000530A
SerialRcvCount                  02:00005312
SetKeyboardEcho                 02:000042B8
SpuriousIRQ                     02:000055FA
StartMon                        02:0000499A
StubRout                        02:000041DE
SyncCursor                      02:000040C6
T15DispatchTable                02:00004108
TEXTREG                          E:FD03FF00
TRAP15                          02:000040F0
TextCols                         E:0004008D
TextCurpos                       E:00040002
TextPos                          E:00040002
TextRows                         E:0004008C
TextScr                          E:00040004
TickIRQ                         02:000055B2
UnlockSemaphore                 02:000001B0
UpdateTextPos                   02:00003DBE
Wait10ms                        02:000045AC
XOFF                             E:00000013
XON                              E:00000011
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdCnt                        E:00100013
_KeybdGetScancode               02:00004262
_KeybdGetStatus                 02:00004258
_KeybdHead                       E:00100011
_KeybdInit                      02:0000424A
_KeybdTail                       E:00100012
_keybdControlCodes              02:0000484E
_keybdExtendedCodes             02:000048CE
_shiftedScanCodes               02:0000474E
_unshiftedScanCodes             02:0000464E
bkColor                          E:00040088
brdisp_trap                     02:0000560E
bus_err                         02:000053C6
clear_screen                    02:00003D5C
cmdBreakpoint                   02:00004A3A
cmdClearScreen                  02:00004A74
cmdCore                         02:00004A80
cmdDispatch                     02:000049F4
cmdDumpMemory                   02:00004DD8
cmdDumpRegs                     02:00004E66
cmdEditMemory                   02:00004D6A
cmdFillB                        02:00004CEC
cmdFillL                        02:00004D34
cmdFillW                        02:00004D10
cmdHelp                         02:00004AA4
cmdJump                         02:00004DCA
cmdLoadS19                      02:00004FD6
cmdMonitor                      02:000049A4
cmdReceiveSerial                02:00004CB8
cmdSendSerial                   02:00004C88
cmdString                       02:0000494E
cmdTable                        02:0000496C
cmdTestCPU                      02:00004A64
cmdTestSerialReceive            02:00004F10
cmdTinyBasic                    02:00004A5E
cpu_test                        02:000001EE
dccr                            02:00003E20
dclf                            02:00003EF0
dcx10                           02:00003E88
dcx11                           02:00003EAA
dcx12                           02:00003EA0
dcx14                           02:00003E16
dcx16                           02:00003EF4
dcx4                            02:00003EF8
dcx6                            02:00003E3E
dcx7                            02:00003E1A
dcx8                            02:00003E54
dcx9                            02:00003E6A
dly3s1                          02:000001DA
dly3s2                          02:000001D8
doBackspace                     02:00003F02
doCtrlX                         02:00003F4C
doDelete                        02:00003F10
do_nothing                      02:000000C6
dspj1                           02:00004076
dspmem1                         02:00004E1A
dspspc1                         02:00004F9A
dsret                           02:00004082
edtmem1                         02:00004D72
fgColor                          E:00040084
get_screen_address              02:00003D54
get_screen_color                02:00003D28
gthx3                           02:00004F8C
gthx5                           02:00004F68
gthx6                           02:00004F7A
icc1                            02:00003FC2
ignBlanks                       02:00004D58
illegal_trap                    02:00005646
init_plic                       02:0000421E
irq3_rout                       02:000055D4
irq6_rout                       02:000055DE
irq_rout                        02:000055E6
leds                             E:FD0FFF00
loop1                           02:000000A0
loop2                           02:0000009E
loop3                           02:00003D92
msgHello                        02:00004BD2
msgUnknownCmd                   02:00004BC2
msg_bad_branch_disp             02:00005697
msg_core_start                  02:00005674
msg_illegal                     02:00005685
msg_reglist                     02:00004EEA
msg_regs                        02:00004EE6
msg_start                       02:0000565C
msg_test_done                   02:000056A9
nmeSerial                       02:000053BE
nmi_rout                        02:000055FC
notRxInt                        02:000053AC
numBreakpoints                   E:00000008
op_ABCD                         02:0000253C
op_ADD                          02:00002ECA
op_ADDA                         02:0000309E
op_ADDQ                         02:000028CA
op_ADDX                         02:00003136
op_ADD_I                        02:000015CA
op_AND                          02:00002BE8
op_ANDI_TO_CCR                  02:0000037A
op_ANDI_TO_SR                   02:000003A0
op_BCC                          02:000027FC
op_BCHG                         02:00000770
op_BCLR                         02:00000AD8
op_BOOL_I                       02:000011FA
op_BSET                         02:00000E26
op_BSR                          02:000013AC
op_BTST                         02:000003C6
op_BTST0                        02:00000550
op_BTST1                        02:0000055C
op_BTST10                       02:000005A4
op_BTST11                       02:000005AC
op_BTST12                       02:000005B2
op_BTST2                        02:00000564
op_BTST20                       02:0000070A
op_BTST21                       02:00000714
op_BTST22                       02:0000071A
op_BTST23                       02:00000720
op_BTST24                       02:00000726
op_BTST25                       02:0000072C
op_BTST26                       02:00000732
op_BTST27                       02:00000738
op_BTST28                       02:0000073E
op_BTST29                       02:00000744
op_BTST3                        02:0000056C
op_BTST30                       02:0000074A
op_BTST31                       02:00000750
op_BTST32                       02:00000754
op_BTST4                        02:00000574
op_BTST5                        02:0000057C
op_BTST6                        02:00000584
op_BTST7                        02:0000058C
op_BTST8                        02:00000594
op_BTST9                        02:0000059C
op_CHK                          02:00001E56
op_CMP                          02:00002D48
op_CMPA                         02:00002DBE
op_CMPM                         02:00002E24
op_CMP_I                        02:000013E2
op_DBCC                         02:0000287C
op_DIVS                         02:00002AAC
op_DIVU                         02:00002A5A
op_EOR                          02:00002CD2
op_EORI_TO_CCR                  02:0000032E
op_EORI_TO_SR                   02:00000354
op_EXG                          02:000033EE
op_EXT                          02:00001CD6
op_LEAPEA                       02:00001D18
op_LINKS                        02:00001E28
op_MOVE                         02:000018D6
op_MOVEM                        02:0000221E
op_MOVEP                        02:0000116E
op_MOVEQ                        02:00002A3E
op_MOVE_USP                     02:00001E46
op_MOVE_xxx_FLAGS               02:00001AE2
op_MULS                         02:000033A2
op_MULU                         02:00003356
op_NBCD                         02:0000272C
op_NEGS                         02:00001E90
op_OR                           02:00002AFE
op_ORI_TO_CCR                   02:000002EA
op_ORI_TO_SR                    02:0000030C
op_ROXx                         02:00003692
op_ROx                          02:0000345C
op_RTR                          02:000027DA
op_SBCD                         02:00002634
op_SCC                          02:000028A2
op_SHIFTS                       02:000038C8
op_SHIFTS2                      02:00003B0A
op_SUB                          02:00002FB4
op_SUBA                         02:000030EA
op_SUBQ                         02:00002984
op_SUBX                         02:00003246
op_SUB_I                        02:00001750
op_SWAP                         02:00001D02
op_TAS                          02:00001DC4
op_TRAPV                        02:000027BE
op_TST                          02:00001DEA
pcssxa                          02:00005084
rbo                             02:000051E4
rotate_iofocus                  02:000041F2
sGetChar                        02:000051AE
select_focus1                   02:00004204
select_iofocus                  02:000041E0
semamem                          E:FD050000
sirq0001                        02:0000535C
sirqNxtByte                     02:00005346
sirqRxFull                      02:000053AC
start                           02:00000000
start_other                     02:000000B2
trap3                           02:000053CA

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD090000 PLIC
FD0FFD00 RAND_NUM
FD0FFD04 RAND_STRM
FD0FFD08 RAND_MZ
FD0FFD0C RAND_MW
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 start
00000000 ACIA_RX
00000000 ACIA_TX
00000002 SERIAL_SEMA
00000003 CTRLC
00000003 KEYBD_SEMA
00000004 RAND_SEMA
00000004 ACIA_STAT
00000005 SCREEN_SEMA
00000008 CTRLH
00000008 ACIA_CMD
00000008 numBreakpoints
0000000A LF
0000000C ACIA_CTRL
0000000D SC_TAB
0000000D CR
00000011 XON
00000011 SC_ALT
00000012 SC_LSHIFT
00000013 XOFF
00000014 SC_CTRL
00000018 CTRLX
0000001A CTRLZ
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
0000009E loop2
000000A0 loop1
000000B2 start_other
000000C6 do_nothing
000000CC InitRand
000000CC RandInit
000000E0 SC_EXTEND
000000F0 SC_KEYUP
0000010E RandGetNum
0000013A RandWait
00000150 InitSemaphores
00000176 LockSemaphore
00000196 ForceUnlockSemaphore
000001B0 UnlockSemaphore
000001CA Delay3s
000001D8 dly3s2
000001DA dly3s1
000001EE cpu_test
000002D0 ALL_DONE
000002D2 BSR_FAR1
000002DA EXCEPTION_6
000002E2 EXCEPTION_7
000002EA op_ORI_TO_CCR
0000030C op_ORI_TO_SR
0000032E op_EORI_TO_CCR
00000354 op_EORI_TO_SR
0000037A op_ANDI_TO_CCR
000003A0 op_ANDI_TO_SR
000003C6 op_BTST
00000400 InstalledIRQ
00000550 op_BTST0
0000055C op_BTST1
00000564 op_BTST2
0000056C op_BTST3
00000574 op_BTST4
0000057C op_BTST5
00000584 op_BTST6
0000058C op_BTST7
00000594 op_BTST8
0000059C op_BTST9
000005A4 op_BTST10
000005AC op_BTST11
000005B2 op_BTST12
0000070A op_BTST20
00000714 op_BTST21
0000071A op_BTST22
00000720 op_BTST23
00000726 op_BTST24
0000072C op_BTST25
00000732 op_BTST26
00000738 op_BTST27
0000073E op_BTST28
00000744 op_BTST29
0000074A op_BTST30
00000750 op_BTST31
00000754 op_BTST32
00000770 op_BCHG
00000AD8 op_BCLR
00000E26 op_BSET
0000116E op_MOVEP
000011FA op_BOOL_I
000013A4 BSR_CLOSE1
000013AC op_BSR
000013DA BSR_CLOSE2
000013E2 op_CMP_I
000015CA op_ADD_I
00001750 op_SUB_I
000018D6 op_MOVE
000019A2 MOVE2
00001A1E MOVE1
00001A9E MOVE3
00001AE2 op_MOVE_xxx_FLAGS
00001BF8 MOVE4
00001CD6 op_EXT
00001D02 op_SWAP
00001D18 op_LEAPEA
00001DB0 LEA1
00001DC4 op_TAS
00001DEA op_TST
00001E28 op_LINKS
00001E46 op_MOVE_USP
00001E56 op_CHK
00001E90 op_NEGS
0000221E op_MOVEM
0000253C op_ABCD
0000255C ABCD_OUTER1
0000255E ABCD_INNER1
0000257A ABCD_NO_C1
00002582 ABCD_NO_C2
000025CA ABCD_OUTER2
000025CC ABCD_INNER2
000025E8 ABCD_NO_C3
000025F0 ABCD_NO_C4
00002634 op_SBCD
00002654 SBCD_OUTER1
00002656 SBCD_INNER1
00002672 SBCD_NO_C1
0000267A SBCD_NO_C2
000026C2 SBCD_OUTER2
000026C4 SBCD_INNER2
000026E0 SBCD_NO_C3
000026E8 SBCD_NO_C4
0000272C op_NBCD
00002744 NBCD_LOOP
00002750 NBCD_NO_C
00002754 NBCD_NO_Z
0000278A NBCD_LOOP1
0000279E NBCD_NO_C1
000027A2 NBCD_NO_Z1
000027BE op_TRAPV
000027DA op_RTR
000027E6 RTR_DONE
000027F4 BSR_FAR2
000027FC op_BCC
00002804 BCC1
0000280E BCC2
00002816 BCC3
00002820 BCC4
00002828 BCC5
00002832 BCC6
0000283A BCC7
00002844 BCC8
0000284C BCC9
00002856 BCC10
0000285E BCC11
00002868 BCC12
00002870 BCC13
0000287A BCC14
0000287C op_DBCC
00002884 DBCC_LOOP1
00002892 DBCC_LOOP2
000028A2 op_SCC
000028CA op_ADDQ
000028DE ADDQ_LOOP1
0000291C ADDQ_LOOP2
00002952 ADDQ_LOOP3
00002984 op_SUBQ
0000299C SUBQ_LOOP1
000029D6 SUBQ_LOOP2
00002A0C SUBQ_LOOP3
00002A3E op_MOVEQ
00002A5A op_DIVU
00002A76 DIVU_OUTER1
00002AAC op_DIVS
00002AC8 DIVS_OUTER1
00002AFE op_OR
00002B1E OR_OUTER1
00002B92 OR_OUTER2
00002BE8 op_AND
00002C08 AND_OUTER1
00002C7C AND_OUTER2
00002CD2 op_EOR
00002CF2 EOR_OUTER2
00002D48 op_CMP
00002D68 CMP_OUTER1
00002DBE op_CMPA
00002DDE CMPA_OUTER1
00002E24 op_CMPM
00002E6C CMPM_LOOP1
00002E86 CMPM_LOOP2
00002EA0 CMPM_LOOP3
00002ECA op_ADD
00002EEA ADD_OUTER1
00002F5E ADD_OUTER2
00002FB4 op_SUB
00002FD4 SUB_OUTER1
00003048 SUB_OUTER2
0000309E op_ADDA
000030C4 ADDA_OUTER1
000030EA op_SUBA
00003110 SUBA_OUTER1
00003136 op_ADDX
00003156 ADDX_OUTER1
000031EA ADDX_LOOP3
00003206 ADDX_LOOP4
00003222 ADDX_LOOP5
00003246 op_SUBX
00003266 SUBX_OUTER1
000032FA SUBX_LOOP3
00003316 SUBX_LOOP4
00003332 SUBX_LOOP5
00003356 op_MULU
00003372 MULU_OUTER1
000033A2 op_MULS
000033BE MULS_OUTER1
000033EE op_EXG
00003450 ROx_FLAGS
0000345C op_ROx
00003466 ROx_LOOP1
00003486 ROx_LOOP2
000034A6 ROx_LOOP3
000034C6 ROx_LOOP4
000034E6 ROx_LOOP5
00003508 ROx_LOOP6
00003686 ROXx_FLAGS
00003692 op_ROXx
0000369C ROXx_LOOP1
000036BC ROXx_LOOP2
000036DC ROXx_LOOP3
000036FC ROXx_LOOP4
0000371C ROXx_LOOP5
0000373E ROXx_LOOP6
000038BC SHIFTS_FLAGS
000038C8 op_SHIFTS
000038D2 SHIFTS_LOOP1
000038F2 SHIFTS_LOOP2
00003912 SHIFTS_LOOP3
00003932 SHIFTS_LOOP4
00003952 SHIFTS_LOOP5
00003974 SHIFTS_LOOP6
00003AFE SHIFTS2_FLAGS
00003B0A op_SHIFTS2
00003B14 SHIFTS2_LOOP1
00003B30 SHIFTS2_LOOP2
00003B4C SHIFTS2_LOOP3
00003B68 SHIFTS2_LOOP4
00003B84 SHIFTS2_LOOP5
00003BA2 SHIFTS2_LOOP6
00003D28 get_screen_color
00003D54 get_screen_address
00003D5C clear_screen
00003D92 loop3
00003DAC CRLF
00003DBE UpdateTextPos
00003DE8 CalcScreenLoc
00003DF6 DisplayChar
00003E16 dcx14
00003E1A dcx7
00003E20 dccr
00003E3E dcx6
00003E54 dcx8
00003E6A dcx9
00003E88 dcx10
00003EA0 dcx12
00003EAA dcx11
00003EF0 dclf
00003EF4 dcx16
00003EF8 dcx4
00003F02 doBackspace
00003F10 doDelete
00003F4C doCtrlX
00003F70 IncCursorPos
00003F90 IncCursorRow
00003FC2 icc1
00003FC4 ScrollUp
0000400E BlankLastLine
00004072 DisplayString
00004076 dspj1
00004082 dsret
00004088 DisplayStringCRLF
0000408E DisplayStringLimited
000040AE DisplayStringLimitedCRLF
000040B4 HomeCursor
000040C6 SyncCursor
000040F0 TRAP15
00004108 T15DispatchTable
000041A8 Cursor1
000041DE StubRout
000041E0 select_iofocus
000041F2 rotate_iofocus
00004204 select_focus1
0000421E init_plic
0000424A _KeybdInit
00004258 _KeybdGetStatus
00004262 _KeybdGetScancode
00004272 KeybdRecvByte
00004292 KeybdWaitTx
000042B8 SetKeyboardEcho
000042C0 CheckForKey
000042CC GetKey
00004304 CheckForCtrlC
00004310 KeybdGetCharNoWait
00004318 KeybdGetCharWait
00004320 KeybdGetChar
00004538 KeybdSetLEDStatus
000045A4 KeybdSendByte
000045AC Wait10ms
000045BC KeybdIRQ
0000464E _unshiftedScanCodes
0000474E _shiftedScanCodes
0000484E _keybdControlCodes
000048CE _keybdExtendedCodes
0000494E cmdString
0000496C cmdTable
00004990 FromScreen
0000499A StartMon
000049A4 cmdMonitor
000049A4 Monitor
000049C0 PromptLn
000049CC Prompt3
000049E2 Prompt1
000049F4 cmdDispatch
00004A3A cmdBreakpoint
00004A5E cmdTinyBasic
00004A64 cmdTestCPU
00004A74 cmdClearScreen
00004A80 cmdCore
00004AA4 DisplayHelp
00004AA4 cmdHelp
00004AB0 HelpMsg
00004BC2 msgUnknownCmd
00004BD2 msgHello
00004BE4 GetCmdLine
00004C88 cmdSendSerial
00004CB8 cmdReceiveSerial
00004CEC cmdFillB
00004D10 cmdFillW
00004D34 cmdFillL
00004D58 ignBlanks
00004D6A cmdEditMemory
00004D72 edtmem1
00004DCA ExecuteCode
00004DCA cmdJump
00004DD8 cmdDumpMemory
00004DF8 DumpMem1
00004E0A DisplayMem
00004E1A dspmem1
00004E66 cmdDumpRegs
00004EE6 msg_regs
00004EEA msg_reglist
00004F10 cmdTestSerialReceive
00004F2A GetHexNumber
00004F56 AsciiToHexNybble
00004F68 gthx5
00004F7A gthx6
00004F8C gthx3
00004F90 DisplayTwoSpaces
00004F9A dspspc1
00004FA2 DisplaySpace
00004FAA DisplayTetra
00004FB0 DisplayWyde
00004FB6 DisplayByte
00004FBC DisplayNybble
00004FD6 cmdLoadS19
00004FDC NextRec
00004FEE ProcessRec
00005084 pcssxa
000050F0 ProcessS1
000050F4 ProcessS2
000050F8 ProcessS3
000050FC ProcessS7
00005108 ProcessS8
00005114 ProcessS9
00005120 S19Get16BitAddress
0000512E S19Get24BitAddress
0000513A S19Get32BitAddress
00005158 S1932a
0000516C S1932b
000051AE sGetChar
000051AE AUXIN
000051D8 AudioInputTest
000051DA BouncingBalls
000051DC GraphicsDemo
000051DE ClearScreen
000051E4 rbo
000051EC SerialInit
0000521E SerialGetChar
00005292 SerialPeekChar
000052CA SerialPeekCharDirect
000052E6 SerialPutChar
0000530A SerialRbo
00005312 SerialRcvCount
00005332 SerialIRQ
00005346 sirqNxtByte
0000535C sirq0001
000053AC sirqRxFull
000053AC notRxInt
000053BE nmeSerial
000053C6 bus_err
000053CA trap3
00005408 ProcessBreakpoint
0000540E DisarmAllBreakpoints
0000543A ArmAllBreakpoints
0000546A ArmBreakpoint
000054E8 DisarmBreakpoint
0000553C ListBreakpoints
0000555C ClearBreakpointList
0000556E InitIRQ
00005582 InstallIRQ
000055B2 TickIRQ
000055D4 irq3_rout
000055DE irq6_rout
000055E6 irq_rout
000055FA SpuriousIRQ
000055FC nmi_rout
0000560E brdisp_trap
00005646 illegal_trap
0000565C msg_start
00005674 msg_core_start
00005685 msg_illegal
00005697 msg_bad_branch_disp
000056A9 msg_test_done
00040000 CursorRow
00040001 CursorCol
00040002 TextCurpos
00040002 TextPos
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
00100000 IOFocus
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100020 _KeybdBuf
00100050 S19Checksum
00100060 SerTailRcv
00100062 SerHeadRcv
00100064 SerRcvXon
00100065 SerRcvXoff
00101000 SerRcvBuf
