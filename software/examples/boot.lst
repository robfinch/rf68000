Sections:
00: "DATA" (0-218)
01: "seg500" (500-500)
02: "CODE" (0-55A5)


Source: "boot.asm"
                            	     1: ;-------------------------------------------------------------------------------
                            	     2: ;
                            	     3: ; system memory map
                            	     4: ;
                            	     5: ;
                            	     6: ; 00000000 +----------------+      <+
                            	     7: ;          | startup sp,pc  | 8 B   |
                            	     8: ; 00000008 +----------------+       |
                            	     9: ;					 |    vectors     | pair shared+
                            	    10: ; 00000400 +----------------+       |
                            	    11: ;					 |   bios mem     |       |
                            	    12: ; 00001000 +----------------+       |
                            	    13: ;					 |   bios code    |       |
                            	    14: ; 00008000 +----------------+      <+
                            	    15: ;					 |    unused      |
                            	    16: ; 00040000 +----------------+
                            	    17: ;					 |   local ram    |
                            	    18: ; 00041000 +----------------+
                            	    19: ;					 |    unused      |
                            	    20: ; 00100000 +----------------+
                            	    21: ;					 |   global ram   |
                            	    22: ; 00101000 +----------------+
                            	    23: ;					 | serial rcvbuf  |
                            	    24: ; 00102000 +----------------+
                            	    25: ;					 |    unused      |
                            	    26: ; 20000000 +----------------+
                            	    27: ;          |                |
                            	    28: ;          |                |
                            	    29: ;          |                |
                            	    30: ;          :  dram memory   : 512 MB
                            	    31: ;          |                |
                            	    32: ;          |                |
                            	    33: ;          |                |
                            	    34: ; 40000000 +----------------+
                            	    35: ;          |                |
                            	    36: ;          :     unused     :
                            	    37: ;          |                |
                            	    38: ; FFD00000 +----------------+
                            	    39: ;          |                |
                            	    40: ;          :    I/O area    : 1.0 M
                            	    41: ;          |                |
                            	    42: ; FFE00000 +----------------+
                            	    43: ;          |                |
                            	    44: ;          :     unused     :
                            	    45: ;          |                |
                            	    46: ; FFFFFFFF +----------------+
                            	    47: ;
                            	    48: ;-------------------------------------------------------------------------------
                            	    49: ;
                            	    50: CTRLC	EQU		$03
                            	    51: CTRLH	EQU		$08
                            	    52: CTRLX	EQU		$18
                            	    53: CTRLZ	EQU		$1A
                            	    54: LF		EQU		$0A
                            	    55: CR		EQU		$0D
                            	    56: XON		EQU		$11
                            	    57: XOFF	EQU		$13
                            	    58: 
                            	    59: SC_F12  EQU    $07
                            	    60: SC_C    EQU    $21
                            	    61: SC_T    EQU    $2C
                            	    62: SC_Z    EQU    $1A
                            	    63: SC_KEYUP	EQU		$F0
                            	    64: SC_EXTEND   EQU		$E0
                            	    65: SC_CTRL		EQU		$14
                            	    66: SC_RSHIFT	EQU		$59
                            	    67: SC_NUMLOCK	EQU		$77
                            	    68: SC_SCROLLLOCK	EQU	$7E
                            	    69: SC_CAPSLOCK		EQU	$58
                            	    70: SC_ALT		EQU		$11
                            	    71: SC_LSHIFT	EQU		$12
                            	    72: SC_DEL		EQU		$71		; extend
                            	    73: SC_LCTRL	EQU		$58
                            	    74: SC_TAB      EQU		$0D
                            	    75: 
                            	    76: TEXTREG		EQU	$FD03FF00
                            	    77: txtscreen	EQU	$FD000000
                            	    78: semamem		EQU	$FD050000
                            	    79: ACIA			EQU	$FD060000
                            	    80: ACIA_RX		EQU	0
                            	    81: ACIA_TX		EQU	0
                            	    82: ACIA_STAT	EQU	4
                            	    83: ACIA_CMD	EQU	8
                            	    84: ACIA_CTRL	EQU	12
                            	    85: PLIC			EQU	$FD090000
                            	    86: leds			EQU	$FD0FFF00
                            	    87: keybd			EQU	$FD0FFE00
                            	    88: KEYBD			EQU	$FD0FFE00
                            	    89: rand			EQU	$FD0FFD00
                            	    90: IOFocus		EQU	$00100000
                            	    91: 
                            	    92: 	data
00:00000000 00040FFC        	    93: 	dc.l		$00040FFC
00:00000004 00000000        	    94: 	dc.l		start
00:00000008 000052B2        	    95: 	dc.l		bus_err
00:0000000C 00000000        	    96: 	dc.l		0
00:00000010 00005532        	    97: 	dc.l		illegal_trap		* ILLEGAL instruction
00:00000014 00000000        	    98: 	dc.l		0
00:00000018 00000252        	    99: 	dc.l		EXCEPTION_6			* CHK
00:0000001C 0000025A        	   100: 	dc.l		EXCEPTION_7			* TRAPV
00:00000020 00000000        	   101: 	dc.l		0
00:00000024 00000000        	   102: 	dc.l		0
                            	   103: 	
                            	   104: 	; 10
00:00000028 00000000        	   105: 	dc.l		0
00:0000002C 00000000        	   106: 	dc.l		0
00:00000030 00000000        	   107: 	dc.l		0
00:00000034 00000000        	   108: 	dc.l		0
00:00000038 00000000        	   109: 	dc.l		0
00:0000003C 00000000        	   110: 	dc.l		0
00:00000040 00000000        	   111: 	dc.l		0
00:00000044 00000000        	   112: 	dc.l		0
00:00000048 00000000        	   113: 	dc.l		0
00:0000004C 00000000        	   114: 	dc.l		0
                            	   115: 	
                            	   116: 	; 20
00:00000050 00000000        	   117: 	dc.l		0
00:00000054 00000000        	   118: 	dc.l		0
00:00000058 00000000        	   119: 	dc.l		0
00:0000005C 00000000        	   120: 	dc.l		0
00:00000060 000054E6        	   121: 	dc.l		SpuriousIRQ
00:00000064 00000000        	   122: 	dc.l		0
00:00000068 00000000        	   123: 	dc.l		0
00:0000006C 000054C0        	   124: 	dc.l		irq3_rout
00:00000070 00000000        	   125: 	dc.l		0
00:00000074 00000000        	   126: 	dc.l		0
                            	   127: 	
                            	   128: 	; 30
00:00000078 0000549E        	   129: 	dc.l		TickIRQ						; IRQ 30 - timer / keyboard
00:0000007C 000054E8        	   130: 	dc.l		nmi_rout
00:00000080 00000000        	   131: 	dc.l		0
00:00000084 00000000        	   132: 	dc.l		0
00:00000088 00000000        	   133: 	dc.l		0
00:0000008C 000052B6        	   134: 	dc.l		trap3							; breakpoint
00:00000090 00000000        	   135: 	dc.l		0
00:00000094 00000000        	   136: 	dc.l		0
00:00000098 00000000        	   137: 	dc.l		0
00:0000009C 00000000        	   138: 	dc.l		0
                            	   139: 
                            	   140: 	; 40
00:000000A0 00000000        	   141: 	dc.l		0
00:000000A4 00000000        	   142: 	dc.l		0
00:000000A8 00000000        	   143: 	dc.l		0
00:000000AC 00000000        	   144: 	dc.l		0
00:000000B0 00000000        	   145: 	dc.l		0
00:000000B4 00000000        	   146: 	dc.l		0
00:000000B8 00000000        	   147: 	dc.l		0
00:000000BC 00004052        	   148: 	dc.l		TRAP15
00:000000C0 00000000        	   149: 	dc.l		0
00:000000C4 00000000        	   150: 	dc.l		0
                            	   151: 
                            	   152: 	; 50	
00:000000C8 00000000        	   153: 	dc.l		0
00:000000CC 00000000        	   154: 	dc.l		0
00:000000D0 00000000        	   155: 	dc.l		0
00:000000D4 00000000        	   156: 	dc.l		0
00:000000D8 00000000        	   157: 	dc.l		0
00:000000DC 00000000        	   158: 	dc.l		0
00:000000E0 00000000        	   159: 	dc.l		0
00:000000E4 00000000        	   160: 	dc.l		0
00:000000E8 00000000        	   161: 	dc.l		0
00:000000EC 00000000        	   162: 	dc.l		0
                            	   163: 
                            	   164: 	; 60
00:000000F0 00004518        	   165: 	dc.l		KeybdIRQ
00:000000F4 00005236        	   166: 	dc.l		SerialIRQ
00:000000F8 00000000        	   167: 	dc.l		0
00:000000FC 000054FA        	   168: 	dc.l		brdisp_trap
00:00000100 00000000        	   169: 	dc.l		0
00:00000104 00000000        	   170: 	dc.l		0
00:00000108 00000000        	   171: 	dc.l		0
00:0000010C 00000000        	   172: 	dc.l		0
00:00000110 00000000        	   173: 	dc.l		0
00:00000114 00000000        	   174: 	dc.l		0
                            	   175: 
                            	   176: 	org			$400
                            	   177: 
                            	   178: InstalledIRQ:
00:00000400 00000000        	   179: 	dc.l		0
00:00000404 00000000        	   180: 	dc.l		0
00:00000408 00000000        	   181: 	dc.l		0
00:0000040C 00000000        	   182: 	dc.l		0
00:00000410 00000000        	   183: 	dc.l		0
00:00000414 00000000        	   184: 	dc.l		0
00:00000418 00000000        	   185: 	dc.l		0
00:0000041C 00000000        	   186: 	dc.l		0
                            	   187: 
00:00000420 00000000        	   188: 	dc.l		0
00:00000424 00000000        	   189: 	dc.l		0
00:00000428 00000000        	   190: 	dc.l		0
00:0000042C 00000000        	   191: 	dc.l		0
00:00000430 00000000        	   192: 	dc.l		0
00:00000434 00000000        	   193: 	dc.l		0
00:00000438 00000000        	   194: 	dc.l		0
00:0000043C 00000000        	   195: 	dc.l		0
                            	   196: 
00:00000440 00000000        	   197: 	dc.l		0
00:00000444 00000000        	   198: 	dc.l		0
00:00000448 00000000        	   199: 	dc.l		0
00:0000044C 00000000        	   200: 	dc.l		0
00:00000450 00000000        	   201: 	dc.l		0
00:00000454 00000000        	   202: 	dc.l		0
00:00000458 00000000        	   203: 	dc.l		0
00:0000045C 00000000        	   204: 	dc.l		0
                            	   205: 
00:00000460 00000000        	   206: 	dc.l		0
00:00000464 00000000        	   207: 	dc.l		0
00:00000468 00000000        	   208: 	dc.l		0
00:0000046C 00000000        	   209: 	dc.l		0
00:00000470 00000000        	   210: 	dc.l		0
00:00000474 00000000        	   211: 	dc.l		0
00:00000478 00000000        	   212: 	dc.l		0
00:0000047C 00000000        	   213: 	dc.l		0
                            	   214: 
00:00000480 00000000        	   215: 	dc.l		0
00:00000484 00000000        	   216: 	dc.l		0
00:00000488 00000000        	   217: 	dc.l		0
00:0000048C 00000000        	   218: 	dc.l		0
00:00000490 00000000        	   219: 	dc.l		0
00:00000494 00000000        	   220: 	dc.l		0
00:00000498 00000000        	   221: 	dc.l		0
00:0000049C 00000000        	   222: 	dc.l		0
                            	   223: 
00:000004A0 00000000        	   224: 	dc.l		0
00:000004A4 00000000        	   225: 	dc.l		0
00:000004A8 00000000        	   226: 	dc.l		0
00:000004AC 00000000        	   227: 	dc.l		0
00:000004B0 00000000        	   228: 	dc.l		0
00:000004B4 00000000        	   229: 	dc.l		0
00:000004B8 00000000        	   230: 	dc.l		0
00:000004BC 00000000        	   231: 	dc.l		0
                            	   232: 
00:000004C0 00000000        	   233: 	dc.l		0
00:000004C4 00000000        	   234: 	dc.l		0
00:000004C8 00000000        	   235: 	dc.l		0
00:000004CC 00000000        	   236: 	dc.l		0
00:000004D0 00000000        	   237: 	dc.l		0
00:000004D4 00000000        	   238: 	dc.l		0
00:000004D8 00000000        	   239: 	dc.l		0
00:000004DC 00000000        	   240: 	dc.l		0
                            	   241: 
00:000004E0 00000000        	   242: 	dc.l		0
00:000004E4 00000000        	   243: 	dc.l		0
00:000004E8 00000000        	   244: 	dc.l		0
00:000004EC 00000000        	   245: 	dc.l		0
00:000004F0 00000000        	   246: 	dc.l		0
00:000004F4 00000000        	   247: 	dc.l		0
00:000004F8 00000000        	   248: 	dc.l		0
00:000004FC 00000000        	   249: 	dc.l		0
                            	   250: 
                            	   251: 	org			$500
                            	   252: 
                            	   253: ;-------------------------------------------------------------------------------
                            	   254: ;-------------------------------------------------------------------------------
                            	   255: 
                            	   256: ; BIOS variables which must be local (not shared) to each core
                            	   257: 
                            	   258: CursorRow	equ		$40000
                            	   259: CursorCol	equ		$40001
                            	   260: TextPos		equ		$40002
                            	   261: TextCurpos	equ	$40002
                            	   262: TextScr			equ	$40004
                            	   263: S19StartAddress	equ	$40008
                            	   264: KeybdEcho		equ	$4000C
                            	   265: KeybdWaitFlag	equ	$4000D
                            	   266: CmdBuf			equ $40040
                            	   267: CmdBufEnd		equ	$40080
                            	   268: fgColor			equ	$40084
                            	   269: bkColor			equ	$40088
                            	   270: TextRows		equ	$4008C
                            	   271: TextCols		equ	$4008D
                            	   272: Regsave			equ	$40100
                            	   273: numBreakpoints	equ		8
                            	   274: BreakpointFlag	equ		$40200
                            	   275: NumSetBreakpoints	equ	$40202	; to $40203
                            	   276: Breakpoints			equ		$40220	; to $40240
                            	   277: BreakpointWords	equ		$40280	; to $402A0
                            	   278: 
                            	   279: ; Keyboard buffer is in shared memory
                            	   280: KeybdLEDs		equ	$0010000E
                            	   281: _KeyState1	equ	$0010000F
                            	   282: _KeyState2	equ	$00100010
                            	   283: _KeybdHead	equ	$00100011
                            	   284: _KeybdTail	equ	$00100012
                            	   285: _KeybdCnt		equ	$00100013
                            	   286: _KeybdBuf		equ	$00100020
                            	   287: S19Checksum	equ	$00100050
                            	   288: SerTailRcv	equ	$00100060
                            	   289: SerHeadRcv	equ	$00100062
                            	   290: SerRcvXon		equ	$00100064
                            	   291: SerRcvXoff	equ	$00100065
                            	   292: SerRcvBuf		equ	$00101000
                            	   293: 
                            	   294: 	code
                            	   295: 	align		2
                            	   296: start:
02:00000000 46FC2700        	   297: 	move.w	#$2700,sr				; enable level 6 and higher interrupts
                            	   298: 	; Prepare local variable storage
02:00000004 303C03FF        	   299: 	move.w	#1023,d0					; 1024 longs to clear
02:00000008 41F900040000    	   300: 	lea			$40000,a0					; non shared local memory address
                            	   301: .0111:
02:0000000E 4298            	   302: 	clr.l		(a0)+							; clear the memory area
02:00000010 51C8FFFC        	   303: 	dbra		d0,.0111
02:00000014 23FC001FFFFF0004	   304: 	move.l	#$1fffff,fgColor	; set foreground / background color
02:0000001C 0084
02:0000001E 23FC0000003F0004	   305: 	move.l	#$00003f,bkColor
02:00000026 0088
02:00000028 4E7A0FE0        	   306: 	movec.l	coreno,d0					; get core number (2 to 9)
02:0000002C 5500            	   307: 	subi.b	#2,d0							; adjust (0 to 7)
02:0000002E C0FC4000        	   308: 	mulu		#16384,d0					; compute screen location
02:00000032 0680FD000000    	   309: 	addi.l	#$FD000000,d0
02:00000038 23C000040004    	   310: 	move.l	d0,TextScr
02:0000003E 13FC00400004008D	   311: 	move.b	#64,TextCols			; set rows and columns
02:00000046 13FC00200004008C	   312: 	move.b	#32,TextRows
02:0000004E 4E7A0FE0        	   313: 	movec.l	coreno,d0					; get core number
02:00000052 0C000002        	   314: 	cmpi.b	#2,d0
02:00000056 6656            	   315: 	bne			start_other
02:00000058 13C000100000    	   316: 	move.b	d0,IOFocus				; Set the IO focus in global memory
02:0000005E 6168            	   317: 	bsr			InitSemaphores
02:00000060 610000E0        	   318: 	bsr			Delay3s						; give devices time to reset
02:00000064 61003C6E        	   319: 	bsr			clear_screen
                            	   320: 
                            	   321: ;	bsr			InitIRQ
02:00000068 610050BE        	   322: 	bsr			SerialInit
                            	   323: 
                            	   324: 	; Write startup message to screen
                            	   325: 
02:0000006C 43FA54DA        	   326: 	lea			msg_start,a1
02:00000070 61003F62        	   327: 	bsr			DisplayString
02:00000074 4E7A0FE0        	   328: 	movec		coreno,d0
02:00000078 4840            	   329: 	swap		d0
02:0000007A 7201            	   330: 	moveq		#1,d1
02:0000007C 610000AA        	   331: 	bsr			UnlockSemaphore	; allow another cpu access
02:00000080 7200            	   332: 	moveq		#0,d1
02:00000082 610000A4        	   333: 	bsr			UnlockSemaphore	; allow other cpus to proceed
02:00000086 33FCA4A4FD0FFF00	   334: 	move.w	#$A4A4,leds			; diagnostics
02:0000008E 610040EE        	   335: 	bsr			init_plic				; initialize platform level interrupt controller
02:00000092 6000485E        	   336: 	bra			StartMon
02:00000096 610000CE        	   337: 	bsr			cpu_test
                            	   338: ;	lea			brdisp_trap,a0	; set brdisp trap vector
                            	   339: ;	move.l	a0,64*4
                            	   340: 
                            	   341: loop2:
02:0000009A 70FF            	   342: 	move.l	#-1,d0
                            	   343: loop1:
02:0000009C 2200            	   344: 	move.l	d0,d1
02:0000009E E089            	   345: 	lsr.l		#8,d1
02:000000A0 E089            	   346: 	lsr.l		#8,d1
02:000000A2 13C1FD0FFF00    	   347: 	move.b	d1,leds
02:000000A8 51C8FFF2        	   348: 	dbra		d0,loop1
02:000000AC 60EC            	   349: 	bra			loop2
                            	   350: 
                            	   351: start_other:
02:000000AE 61003C24        	   352: 	bsr			clear_screen
02:000000B2 4E7A1FE0        	   353: 	movec.l	coreno,d1
02:000000B6 61004E56        	   354: 	bsr			DisplayByte
02:000000BA 43FA54A4        	   355: 	lea			msg_core_start,a1
02:000000BE 61003F14        	   356: 	bsr			DisplayString
                            	   357: do_nothing:	
02:000000C2 6000482E        	   358: 	bra			StartMon
02:000000C6 60FA            	   359: 	bra			do_nothing
                            	   360: 
                            	   361: ;------------------------------------------------------------------------------
                            	   362: ; Initialize semaphores
                            	   363: ; - all semaphores are set to unlocked except the first one, which is locked
                            	   364: ; for core #2.
                            	   365: ;
                            	   366: ; Parameters:
                            	   367: ;		<none>
                            	   368: ; Modifies:
                            	   369: ;		<none>
                            	   370: ; Returns:
                            	   371: ;		<none>
                            	   372: ;------------------------------------------------------------------------------
                            	   373: 
                            	   374: InitSemaphores:
02:000000C8 48E74080        	   375: 	movem.l	d1/a0,-(a7)
02:000000CC 41F9FD050000    	   376: 	lea			semamem,a0
02:000000D2 217C000200002000	   377: 	move.l	#$20000,$2000(a0)	; lock the first semaphore for core #2, thread #0
02:000000DA 323C00FE        	   378: 	move.w	#254,d1
                            	   379: .0001:
02:000000DE 5888            	   380: 	lea			4(a0),a0
02:000000E0 42A82000        	   381: 	clr.l		$2000(a0)					; write zeros to unlock
02:000000E4 51C9FFF8        	   382: 	dbra		d1,.0001
02:000000E8 4CDF0102        	   383: 	movem.l	(a7)+,d1/a0
02:000000EC 4E75            	   384: 	rts
                            	   385: 
                            	   386: ; -----------------------------------------------------------------------------
                            	   387: ; Parameters:
                            	   388: ;		d1 semaphore number
                            	   389: ;
                            	   390: ; Side Effects:
                            	   391: ;		increments semaphore, saturates at 255
                            	   392: ;
                            	   393: ; Returns:	
                            	   394: ; 	z flag set if semaphore was zero
                            	   395: ; -----------------------------------------------------------------------------
                            	   396: 
                            	   397: ;IncrementSemaphore:
                            	   398: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   399: ;	lea			semamem,a0			; point to semaphore memory
                            	   400: ;	ext.w		d1							; make d1 word value
                            	   401: ;	asl.w		#4,d1						; align to memory
                            	   402: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   403: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   404: ;	rts
                            	   405: 	
                            	   406: ; -----------------------------------------------------------------------------
                            	   407: ; Parameters:
                            	   408: ;		d1 semaphore number
                            	   409: ;
                            	   410: ; Side Effects:
                            	   411: ;		decrements semaphore, saturates at zero
                            	   412: ;
                            	   413: ; Returns:	
                            	   414: ; 	z flag set if semaphore was zero
                            	   415: ; -----------------------------------------------------------------------------
                            	   416: 
                            	   417: ;DecrementSemaphore:
                            	   418: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   419: ;	lea			semamem,a0			; point to semaphore memory
                            	   420: ;	andi.w	#255,d1					; make d1 word value
                            	   421: ;	asl.w		#4,d1						; align to memory
                            	   422: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   423: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   424: ;	rts
                            	   425: 
                            	   426: ; -----------------------------------------------------------------------------
                            	   427: ; Lock a semaphore
                            	   428: ;
                            	   429: ; Parameters:
                            	   430: ;		d0 = key
                            	   431: ;		d1 = semaphore number
                            	   432: ; -----------------------------------------------------------------------------
                            	   433: 
                            	   434: LockSemaphore:
02:000000EE 48E74080        	   435: 	movem.l	d1/a0,-(a7)			; save registers
02:000000F2 41F9FD050000    	   436: 	lea			semamem,a0			; point to semaphore memory lock area
02:000000F8 024100FF        	   437: 	andi.w	#255,d1					; make d1 word value
02:000000FC E549            	   438: 	lsl.w		#2,d1						; align to memory
                            	   439: .0001:
02:000000FE 21801000        	   440: 	move.l	d0,(a0,d1.w)		; try and write the semaphore
02:00000102 B0B01000        	   441: 	cmp.l		(a0,d1.w),d0		; did it lock?
02:00000106 66F6            	   442: 	bne.s		.0001						; no, try again
02:00000108 4CDF0102        	   443: 	movem.l	(a7)+,a0/d1			; restore regs
02:0000010C 4E75            	   444: 	rts
                            	   445: 	
                            	   446: ; -----------------------------------------------------------------------------
                            	   447: ; Unlocks a semaphore even if not the owner.
                            	   448: ;
                            	   449: ; Parameters:
                            	   450: ;		d1 semaphore number
                            	   451: ; -----------------------------------------------------------------------------
                            	   452: 
                            	   453: ForceUnlockSemaphore:
02:0000010E 48E74080        	   454: 	movem.l	d1/a0,-(a7)				; save registers
02:00000112 41F9FD053000    	   455: 	lea			semamem+$3000,a0	; point to semaphore memory read/write area
02:00000118 024100FF        	   456: 	andi.w	#255,d1						; make d1 word value
02:0000011C E549            	   457: 	lsl.w		#2,d1							; align to memory
02:0000011E 42B01000        	   458: 	clr.l		(a0,d1.w)					; write zero to unlock
02:00000122 4CDF0102        	   459: 	movem.l	(a7)+,a0/d1				; restore regs
02:00000126 4E75            	   460: 	rts
                            	   461: 
                            	   462: ; -----------------------------------------------------------------------------
                            	   463: ; Unlocks a semaphore. Must be the owner to have effect.
                            	   464: ; Three cases:
                            	   465: ;	1) the owner, the semaphore will be reset to zero
                            	   466: ;	2) not the owner, the write will be ignored
                            	   467: ; 3) already unlocked, the write will be ignored
                            	   468: ;
                            	   469: ; Parameters:
                            	   470: ;		d0 = key
                            	   471: ;		d1 = semaphore number
                            	   472: ; -----------------------------------------------------------------------------
                            	   473: 
                            	   474: UnlockSemaphore:
02:00000128 48E74080        	   475: 	movem.l	d1/a0,-(a7)				; save registers
02:0000012C 41F9FD051000    	   476: 	lea			semamem+$1000,a0	; point to semaphore memory unlock area
02:00000132 024100FF        	   477: 	andi.w	#255,d1						; make d1 word value
02:00000136 E549            	   478: 	lsl.w		#2,d1							; align to memory
02:00000138 21801000        	   479: 	move.l	d0,(a0,d1.w)			; write matching value to unlock
02:0000013C 4CDF0102        	   480: 	movem.l	(a7)+,a0/d1				; restore regs
02:00000140 4E75            	   481: 	rts
                            	   482: 
                            	   483: ; -----------------------------------------------------------------------------
                            	   484: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   485: ; -----------------------------------------------------------------------------
                            	   486: 
                            	   487: Delay3s:
02:00000142 203C002DC6C0    	   488: 	move.l	#3000000,d0		; this should take a few seconds to loop
02:00000148 41F9FD0FFF00    	   489: 	lea			leds,a0				; a0 = address of LED output register
02:0000014E 6002            	   490: 	bra			dly3s1				; branch to the loop
                            	   491: dly3s2:	
02:00000150 4840            	   492: 	swap		d0						; loop is larger than 16-bits
                            	   493: dly3s1:
02:00000152 2200            	   494: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
02:00000154 E199            	   495: 	rol.l		#8,d1					; could use swap here, but lets test rol
02:00000156 E199            	   496: 	rol.l		#8,d1
02:00000158 1081            	   497: 	move.b	d1,(a0)				; set the LEDs
02:0000015A 51C8FFF6        	   498: 	dbra		d0,dly3s1			; decrement and branch back
02:0000015E 4840            	   499: 	swap		d0
02:00000160 51C8FFEE        	   500: 	dbra		d0,dly3s2
02:00000164 4E75            	   501: 	rts
                            	   502: 
                            	   503: 	include "cputest.asm"

Source: "cputest.asm"
                            	     1: ** @name cputest.s Tests 68000 cpu
                            	     2: *
                            	     3: * Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: *
                            	     5: * Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: * - comment lines must start in first column
                            	     7: * - replaced org instructions by suitable rept
                            	     8: * - copy vectors to low memory at startup
                            	     9: * - replaced jsr/jmp by bsr/bra for position independence
                            	    10: * - replaced move.l by moveq whenever possible
                            	    11: * - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: * - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: * The last three modifications are required to make the test work;
                            	    14: * apparently the original assembler was somewhat smarter then
                            	    15: * the Microware OS-9 assembler and did this automatically.
                            	    16: *
                            	    17: * In some cases the opcodes of the test are used as test data!
                            	    18: *
                            	    19: * Original file header follows.
                            	    20: *
                            	    21: *  File Name   :  MCL68 Opcode Tests
                            	    22: *  Used on     :
                            	    23: *  Author      :  Ted Fried, MicroCore Labs
                            	    24: *  Creation    :  7/14/2020
                            	    25: *
                            	    26: *   Description:
                            	    27: *   ============
                            	    28: *
                            	    29: *  Program to test all of the Motorola 68000's opcodes.
                            	    30: *
                            	    31: *  If failures are detected, the code will immediately loop on itself.
                            	    32: *  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: *
                            	    34: *  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: *
                            	    36: *------------------------------------------------------------------------
                            	    37: *
                            	    38: * Modification History:
                            	    39: * =====================
                            	    40: *
                            	    41: * Revision 1 7/14/2020
                            	    42: * Initial revision
                            	    43: *
                            	    44: *
                            	    45: *------------------------------------------------------------------------
                            	    46: *
                            	    47: * Copyright (c) 2020 Ted Fried
                            	    48: *
                            	    49: * Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: * of this software and associated documentation files (the "Software"), to deal
                            	    51: * in the Software without restriction, including without limitation the rights
                            	    52: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: * copies of the Software, and to permit persons to whom the Software is
                            	    54: * furnished to do so, subject to the following conditions:
                            	    55: *
                            	    56: * The above copyright notice and this permission notice shall be included in all
                            	    57: * copies or substantial portions of the Software.
                            	    58: *
                            	    59: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: * SOFTWARE.
                            	    66: 
                            	    67: * Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: *	data
                            	    70: *	dc.l		$0001FFFC						; top of local ram area
                            	    71: *	dc.l		start
                            	    72: 
                            	    73: *    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: *	move.l	$FFFFFFE0,d0		; get core number
                            	    76: *	cmpi.b	#2,d0
                            	    77: *	bne			do_nothing
                            	    78: 
                            	    79: *	lea			EXCEPTION_6,a0	* check exception vector
                            	    80: *	move.l	a0,6*4
                            	    81: *	lea			EXCEPTION_7,a0	* TRAPV exception vector
                            	    82: *	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
02:00000166 610000FA        	    85: 	bsr	op_ORI_TO_CCR
02:0000016A 61000118        	    86: 	bsr	op_ORI_TO_SR
02:0000016E 61000136        	    87: 	bsr	op_EORI_TO_CCR
02:00000172 61000158        	    88: 	bsr	op_EORI_TO_SR
02:00000176 6100017A        	    89: 	bsr	op_ANDI_TO_CCR
02:0000017A 6100019C        	    90: 	bsr	op_ANDI_TO_SR
02:0000017E 610001BE        	    91: 	bsr	op_BTST
02:00000182 61000564        	    92: 	bsr	op_BCHG
02:00000186 610008C8        	    93: 	bsr	op_BCLR
02:0000018A 61000C12        	    94: 	bsr	op_BSET
02:0000018E 61000F56        	    95: 	bsr op_MOVEP
02:00000192 61000FDE        	    96: 	bsr op_BOOL_I
02:00000196 610011C2        	    97: 	bsr op_CMP_I
02:0000019A 610013A6        	    98: 	bsr op_ADD_I
02:0000019E 61001528        	    99: 	bsr op_SUB_I
02:000001A2 610016AA        	   100: 	bsr op_MOVE
02:000001A6 610018B2        	   101: 	bsr op_MOVE_xxx_FLAGS
02:000001AA 61001AA2        	   102: 	bsr op_EXT
02:000001AE 61001ACA        	   103: 	bsr op_SWAP
02:000001B2 61001ADC        	   104: 	bsr op_LEAPEA
02:000001B6 61001B84        	   105: 	bsr op_TAS
02:000001BA 61001BA6        	   106: 	bsr op_TST
02:000001BE 61001BE0        	   107: 	bsr op_LINKS
02:000001C2 61001BFA        	   108: 	bsr op_MOVE_USP
02:000001C6 61001C06        	   109: 	bsr op_CHK
02:000001CA 61001C3C        	   110: 	bsr op_NEGS
02:000001CE 61001FC6        	   111: 	bsr op_MOVEM
                            	   112: *	bsr op_ABCD
                            	   113: *	bsr op_SBCD
                            	   114: *	bsr op_NBCD
02:000001D2 61002562        	   115: 	bsr op_TRAPV
02:000001D6 6100257A        	   116: 	bsr op_RTR
02:000001DA 61001148        	   117: 	bsr op_BSR
02:000001DE 61002594        	   118: 	bsr op_BCC
02:000001E2 61002610        	   119: 	bsr op_DBCC
02:000001E6 61002632        	   120: 	bsr op_SCC
02:000001EA 61002656        	   121: 	bsr op_ADDQ
02:000001EE 6100270C        	   122: 	bsr op_SUBQ
02:000001F2 610027C2        	   123: 	bsr op_MOVEQ
02:000001F6 610027DA        	   124: 	bsr op_DIVU
                            	   125: *	bsr op_DIVS
02:000001FA 6100287A        	   126: 	bsr op_OR
02:000001FE 61002960        	   127: 	bsr op_AND
02:00000202 61002A46        	   128: 	bsr op_EOR
02:00000206 61002AB8        	   129: 	bsr op_CMP
02:0000020A 61002B2A        	   130: 	bsr op_CMPA
02:0000020E 61002B8C        	   131: 	bsr op_CMPM
02:00000212 61002C2E        	   132: 	bsr op_ADD
02:00000216 61002D14        	   133: 	bsr op_SUB
02:0000021A 61002DFA        	   134: 	bsr op_ADDA
02:0000021E 61002E42        	   135: 	bsr op_SUBA
02:00000222 61002E8A        	   136: 	bsr op_ADDX	
02:00000226 61002F96        	   137: 	bsr op_SUBX
02:0000022A 610030A2        	   138: 	bsr op_MULU
02:0000022E 610030EA        	   139: 	bsr op_MULS
02:00000232 61003132        	   140: 	bsr op_EXG
02:00000236 6100319C        	   141: 	bsr op_ROx
02:0000023A 610033CE        	   142: 	bsr op_ROXx
02:0000023E 61003600        	   143: 	bsr op_SHIFTS
02:00000242 6100383E        	   144: 	bsr op_SHIFTS2
                            	   145: 
02:00000246 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
02:00000248 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
02:0000024A 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
02:00000250 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: * Exception Vector = 6   CHK Instruction
                            	   164: *
                            	   165: *	align	4
                            	   166: EXCEPTION_6:
02:00000252 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
02:00000258 4E73            	   168: 	rte
                            	   169: 
                            	   170: * Exception Vector = 7   TRAPV Instruction
                            	   171: *
                            	   172: *	align	4
                            	   173: EXCEPTION_7:
02:0000025A 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
02:00000260 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
02:00000262 003C00FF        	   184:     ori.b #$FF,CCR
02:00000266 6AFE            	   185:     bpl.s *                   ; branch if Z clear
02:00000268 66FE            	   186:     bne.s *                   ; branch if N clear
02:0000026A 68FE            	   187:     bvc.s *                   ; branch if V clear
02:0000026C 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
02:0000026E 44FC0000        	   190:     move #$00,CCR
02:00000272 003C0000        	   191:     ori.b #$00,CCR
02:00000276 67FE            	   192:     beq.s *                   ; branch if Z set
02:00000278 6BFE            	   193:     bmi.s *                   ; branch if N set
02:0000027A 69FE            	   194:     bvs.s *                   ; branch if V set
02:0000027C 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
02:0000027E 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
02:00000282 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
02:00000284 007C2FFF        	   209:     ori.w #$2FFF,SR
02:00000288 6AFE            	   210:     bpl.s *                   * branch if Z clear
02:0000028A 66FE            	   211:     bne.s *                   * branch if N clear
02:0000028C 68FE            	   212:     bvc.s *                   * branch if V clear
02:0000028E 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
02:00000290 46FC2000        	   215:     move.w #$2000,SR
02:00000294 007C0000        	   216:     ori.w #$0000,SR
02:00000298 67FE            	   217:     beq.s *                   * branch if Z set
02:0000029A 6BFE            	   218:     bmi.s *                   * branch if N set
02:0000029C 69FE            	   219:     bvs.s *                   * branch if V set
02:0000029E 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
02:000002A0 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
02:000002A4 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
02:000002A6 44FC0000        	   233:     move #$00,CCR
02:000002AA 0A3C00FF        	   234:     eori.b #$FF,CCR
02:000002AE 6AFE            	   235:     bpl.s *                   ; branch if Z clear
02:000002B0 66FE            	   236:     bne.s *                   ; branch if N clear
02:000002B2 68FE            	   237:     bvc.s *                   ; branch if V clear
02:000002B4 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
02:000002B6 44FC0000        	   240:     move #$00,CCR
02:000002BA 0A3C0000        	   241:     eori.b #$00,CCR
02:000002BE 67FE            	   242:     beq.s *                   ; branch if Z set
02:000002C0 6BFE            	   243:     bmi.s *                   ; branch if N set
02:000002C2 69FE            	   244:     bvs.s *                   ; branch if V set
02:000002C4 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
02:000002C6 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
02:000002CA 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
02:000002CC 46FC2000        	   260:     move.w #$2000,SR
02:000002D0 0A7C0FFF        	   261:     eori.w #$0FFF,SR
02:000002D4 6AFE            	   262:     bpl.s *                   * branch if Z clear
02:000002D6 66FE            	   263:     bne.s *                   * branch if N clear
02:000002D8 68FE            	   264:     bvc.s *                   * branch if V clear
02:000002DA 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
02:000002DC 46FC2000        	   267:     move.w #$2000,SR
02:000002E0 0A7C0000        	   268:     eori.w #$0000,SR
02:000002E4 67FE            	   269:     beq.s *                   * branch if Z set
02:000002E6 6BFE            	   270:     bmi.s *                   * branch if N set
02:000002E8 69FE            	   271:     bvs.s *                   * branch if V set
02:000002EA 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
02:000002EC 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
02:000002F0 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
02:000002F2 44FC00FF        	   287:     move #$FF,CCR
02:000002F6 023C00FF        	   288:     andi.b #$FF,CCR
02:000002FA 6AFE            	   289:     bpl.s *                   * branch if Z clear
02:000002FC 66FE            	   290:     bne.s *                   * branch if N clear
02:000002FE 68FE            	   291:     bvc.s *                   * branch if V clear
02:00000300 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
02:00000302 44FC00FF        	   294:     move #$FF,CCR
02:00000306 023C0000        	   295:     andi.b #$00,CCR
02:0000030A 67FE            	   296:     beq.s *                   * branch if Z set
02:0000030C 6BFE            	   297:     bmi.s *                   * branch if N set
02:0000030E 69FE            	   298:     bvs.s *                   * branch if V set
02:00000310 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
02:00000312 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
02:00000316 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
02:00000318 46FC20FF        	   313:     move.w #$20FF,SR
02:0000031C 027CFFFF        	   314:     andi.w #$FFFF,SR
02:00000320 6AFE            	   315:     bpl.s *                   * branch if Z clear
02:00000322 66FE            	   316:     bne.s *                   * branch if N clear
02:00000324 68FE            	   317:     bvc.s *                   * branch if V clear
02:00000326 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
02:00000328 46FC20FF        	   320:     move.w #$20FF,SR
02:0000032C 027CFF00        	   321:     andi.w #$FF00,SR
02:00000330 67FE            	   322:     beq.s *                   * branch if Z set
02:00000332 6BFE            	   323:     bmi.s *                   * branch if N set
02:00000334 69FE            	   324:     bvs.s *                   * branch if V set
02:00000336 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
02:00000338 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
02:0000033C 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
02:0000033E 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
02:00000344 08000000        	   343:             btst.l #0,d0
02:00000348 67FE            	   344:             beq.s *               * branch if Z set
02:0000034A 08000001        	   345:             btst.l #1,d0              *
02:0000034E 66FE            	   346:             bne.s *               * branch if Z clear
02:00000350 0800001F        	   347:             btst.l #31,d0             *
02:00000354 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
02:00000356 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000035A 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
02:0000035E 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:00000360 08100000        	   355:             btst.b #0,(a0)
02:00000364 67FE            	   356:             beq.s *               * branch if Z set
02:00000366 08100001        	   357:             btst.b #1,(a0)            *
02:0000036A 66FE            	   358:             bne.s *               * branch if Z clear
02:0000036C 08100007        	   359:             btst.b #7,(a0)            *
02:00000370 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
02:00000372 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000376 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
02:0000037A 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
02:0000037E 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
02:00000382 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000386 08180000        	   369:             btst.b #0,(a0)+
02:0000038A 67FE            	   370:             beq.s *               * branch if Z set
02:0000038C 08180001        	   371:             btst.b #1,(a0)+           *
02:00000390 66FE            	   372:             bne.s *               * branch if Z clear
02:00000392 08180007        	   373:             btst.b #7,(a0)+           *
02:00000396 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
02:00000398 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
02:0000039C 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
02:000003A0 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
02:000003A4 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
02:000003A8 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
02:000003AC 08200000        	   383:             btst.b #0,-(a0)
02:000003B0 67FE            	   384:             beq.s *               * branch if Z set
02:000003B2 08200001        	   385:             btst.b #1,-(a0)           *
02:000003B6 66FE            	   386:             bne.s *               * branch if Z clear
02:000003B8 08200007        	   387:             btst.b #7,-(a0)           *
02:000003BC 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
02:000003BE 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
02:000003C2 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
02:000003C6 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
02:000003CA 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
02:000003CE 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
02:000003D2 08100000        	   397:             btst.b #0,0(a0)
02:000003D6 67FE            	   398:             beq.s *               * branch if Z set
02:000003D8 082800010001    	   399:             btst.b #1,1(a0)           *
02:000003DE 66FE            	   400:             bne.s *               * branch if Z clear
02:000003E0 082800070002    	   401:             btst.b #7,2(a0)           *
02:000003E6 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
02:000003E8 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
02:000003EC 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
02:000003EE 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
02:000003F2 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
02:000003F4 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
02:000003F6 083000000000    	   411:             btst.b #0,0(a0,d0.w)
02:000003FC 67FE            	   412:             beq.s *               * branch if Z set
02:000003FE 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
02:00000404 66FE            	   414:             bne.s *               * branch if Z clear
02:00000406 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
02:0000040C 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
02:0000040E 083000000800    	   418:             btst.b #0,0(a0,d0.l)
02:00000414 67FE            	   419:             beq.s *               * branch if Z set
02:00000416 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
02:0000041C 66FE            	   421:             bne.s *               * branch if Z clear
02:0000041E 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
02:00000424 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
02:00000426 083000009000    	   425:             btst.b #0,0(a0,a1.w)
02:0000042C 67FE            	   426:             beq.s *               * branch if Z set
02:0000042E 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
02:00000434 66FE            	   428:             bne.s *               * branch if Z clear
02:00000436 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
02:0000043C 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
02:0000043E 083000009800    	   432:             btst.b #0,0(a0,a1.l)
02:00000444 67FE            	   433:             beq.s *               * branch if Z set
02:00000446 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
02:0000044C 66FE            	   435:             bne.s *               * branch if Z clear
02:0000044E 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
02:00000454 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
02:00000456 083800000100    	   441:             btst.b #0,$0100
02:0000045C 67FE            	   442:             beq.s *               * branch if Z set
02:0000045E 083800010101    	   443:             btst.b #1,$0101           *
02:00000464 66FE            	   444:             bne.s *               * branch if Z clear
02:00000466 083800070102    	   445:             btst.b #7,$0102           *
02:0000046C 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
02:0000046E 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
02:00000474 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
02:00000478 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
02:0000047C 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
02:00000480 083900000000F100	   454:             btst.b #0,$F100
02:00000488 67FE            	   455:             beq.s *               * branch if Z set
02:0000048A 083900010000F101	   456:             btst.b #1,$F101       *
02:00000492 66FE            	   457:             bne.s *               * branch if Z clear
02:00000494 083900070000F102	   458:             btst.b #7,$F102       *
02:0000049C 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
02:0000049E 4BFAFE9E        	   463:             lea op_BTST(pc),a5
02:000004A2 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
02:000004A8 66FE            	   465:             bne.s *               * branch if Z clear
02:000004AA 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
02:000004B0 67FE            	   467:             beq.s *               * branch if Z set
02:000004B2 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
02:000004B8 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
02:000004BA 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
02:000004BE 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
02:000004C0 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
02:000004C4 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
02:000004C6 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
02:000004C8 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
02:000004CE 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
02:000004D0 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
02:000004D4 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
02:000004DA 67FE            	   484:             beq.s *               * branch if Z set
02:000004DC 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
02:000004E2 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
02:000004E4 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
02:000004EA 66FE            	   489:             bne.s *               * branch if Z clear
02:000004EC 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
02:000004F2 67FE            	   491:             beq.s *               * branch if Z set
02:000004F4 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
02:000004FA 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
02:000004FC 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
02:00000502 66FE            	   496:             bne.s *               * branch if Z clear
02:00000504 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
02:0000050A 67FE            	   498:             beq.s *               * branch if Z set
02:0000050C 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
02:00000512 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
02:00000514 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
02:0000051A 66FE            	   503:             bne.s *               * branch if Z clear
02:0000051C 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
02:00000522 67FE            	   505:             beq.s *               * branch if Z set
02:00000524 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
02:0000052A 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
02:0000052C 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
02:00000532 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
02:00000534 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
02:00000536 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
02:00000538 0B00            	   519:             btst.l d5,d0
02:0000053A 67FE            	   520:             beq.s *               * branch if Z set
02:0000053C 0D00            	   521:             btst.l d6,d0              *
02:0000053E 66FE            	   522:             bne.s *               * branch if Z clear
02:00000540 0F00            	   523:             btst.l d7,d0             *
02:00000542 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
02:00000544 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
02:00000546 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
02:00000548 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
02:0000054A 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000054E 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
02:00000552 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:00000554 0B10            	   534:             btst.b d5,(a0)
02:00000556 67FE            	   535:             beq.s *               * branch if Z set
02:00000558 0D10            	   536:             btst.b d6,(a0)            *
02:0000055A 66FE            	   537:             bne.s *               * branch if Z clear
02:0000055C 0F10            	   538:             btst.b d7,(a0)            *
02:0000055E 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
02:00000560 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000564 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
02:00000568 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
02:0000056C 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
02:00000570 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000574 0B18            	   550:             btst.b d5,(a0)+
02:00000576 67FE            	   551:             beq.s *               * branch if Z set
02:00000578 0D18            	   552:             btst.b d6,(a0)+           *
02:0000057A 66FE            	   553:             bne.s *               * branch if Z clear
02:0000057C 0F18            	   554:             btst.b d7,(a0)+           *
02:0000057E 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
02:00000580 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
02:00000584 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
02:00000588 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
02:0000058C 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
02:00000590 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
02:00000594 0B20            	   564:             btst.b d5,-(a0)
02:00000596 67FE            	   565:             beq.s *               * branch if Z set
02:00000598 0D20            	   566:             btst.b d6,-(a0)           *
02:0000059A 66FE            	   567:             bne.s *               * branch if Z clear
02:0000059C 0F20            	   568:             btst.b d7,-(a0)           *
02:0000059E 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
02:000005A0 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
02:000005A4 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
02:000005A8 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
02:000005AC 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
02:000005B0 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
02:000005B4 0B10            	   578:             btst.b d5,0(a0)
02:000005B6 67FE            	   579:             beq.s *               * branch if Z set
02:000005B8 0D280001        	   580:             btst.b d6,1(a0)           *
02:000005BC 66FE            	   581:             bne.s *               * branch if Z clear
02:000005BE 0F280002        	   582:             btst.b d7,2(a0)           *
02:000005C2 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
02:000005C4 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
02:000005C8 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
02:000005CA 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
02:000005CE 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
02:000005D0 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
02:000005D2 0B300000        	   592:             btst.b d5,0(a0,d0.w)
02:000005D6 67FE            	   593:             beq.s *               * branch if Z set
02:000005D8 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
02:000005DC 66FE            	   595:             bne.s *               * branch if Z clear
02:000005DE 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
02:000005E2 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
02:000005E4 0B300800        	   599:             btst.b d5,0(a0,d0.l)
02:000005E8 67FE            	   600:             beq.s *               * branch if Z set
02:000005EA 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
02:000005EE 66FE            	   602:             bne.s *               * branch if Z clear
02:000005F0 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
02:000005F4 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
02:000005F6 0B309000        	   606:             btst.b d5,0(a0,a1.w)
02:000005FA 67FE            	   607:             beq.s *               * branch if Z set
02:000005FC 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
02:00000600 66FE            	   609:             bne.s *               * branch if Z clear
02:00000602 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
02:00000606 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
02:00000608 0B309800        	   613:             btst.b d5,0(a0,a1.l)
02:0000060C 67FE            	   614:             beq.s *               * branch if Z set
02:0000060E 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
02:00000612 66FE            	   616:             bne.s *               * branch if Z clear
02:00000614 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
02:00000618 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
02:0000061A 0B380100        	   622:             btst.b d5,$0100
02:0000061E 67FE            	   623:             beq.s *               * branch if Z set
02:00000620 0D380101        	   624:             btst.b d6,$0101           *
02:00000624 66FE            	   625:             bne.s *               * branch if Z clear
02:00000626 0F380102        	   626:             btst.b d7,$0102           *
02:0000062A 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
02:0000062C 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
02:00000632 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
02:00000636 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
02:0000063A 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
02:0000063E 0B390000F100    	   635:             btst.b d5,$F100
02:00000644 67FE            	   636:             beq.s *               * branch if Z set
02:00000646 0D390000F101    	   637:             btst.b d6,$F101       *
02:0000064C 66FE            	   638:             bne.s *               * branch if Z clear
02:0000064E 0F390000F102    	   639:             btst.b d7,$F102       *
02:00000654 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
02:00000656 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
02:00000658 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
02:0000065A 4BFAFCE2        	   646:             lea op_BTST(pc),a5
02:0000065E 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
02:00000662 66FE            	   648:             bne.s *               * branch if Z clear
02:00000664 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
02:00000668 67FE            	   650:             beq.s *               * branch if Z set
02:0000066A 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
02:0000066E 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
02:00000670 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
02:00000674 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
02:00000676 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
02:0000067A 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
02:0000067C 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
02:0000067E 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
02:00000680 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
02:00000682 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
02:00000686 67FE            	   665:             beq.s *               * branch if Z set
02:00000688 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
02:0000068C 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
02:00000690 67FE            	   668:             beq.s *               * branch if Z set
02:00000692 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
02:00000696 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
02:00000698 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
02:0000069C 67FE            	   673:             beq.s *               * branch if Z set
02:0000069E 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
02:000006A2 67FE            	   675:             beq.s *               * branch if Z set
02:000006A4 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
02:000006A8 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
02:000006AA 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
02:000006AE 67FE            	   680:             beq.s *               * branch if Z set
02:000006B0 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
02:000006B4 67FE            	   682:             beq.s *               * branch if Z set
02:000006B6 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
02:000006BA 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
02:000006BC 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
02:000006C0 67FE            	   687:             beq.s *               * branch if Z set
02:000006C2 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
02:000006C6 67FE            	   689:             beq.s *               * branch if Z set
02:000006C8 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
02:000006CC 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
02:000006CE 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
02:000006D0 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
02:000006D2 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
02:000006D4 0B3C0088        	   699:             btst.b d5,#$88
02:000006D8 66FE            	   700:             bne.s *               * branch if Z clear
02:000006DA 0D3C0088        	   701:             btst.b d6,#$88
02:000006DE 67FE            	   702:             beq.s *               * branch if Z set
02:000006E0 0F3C0088        	   703:             btst.b d7,#$88
02:000006E4 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
02:000006E6 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
02:000006E8 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
02:000006EE 08400000        	   721:             bchg.l #0,d0
02:000006F2 67FE            	   722:             beq.s *               * branch if Z set
02:000006F4 08400001        	   723:             bchg.l #1,d0              *
02:000006F8 66FE            	   724:             bne.s *               * branch if Z clear
02:000006FA 0840001F        	   725:             bchg.l #31,d0             *
02:000006FE 67FE            	   726:             beq.s *               * branch if Z set
02:00000700 0C8000000002    	   727:             cmpi.l #$00000002,d0
02:00000706 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
02:00000708 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000070C 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
02:00000710 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:00000712 08500000        	   735:             bchg.b #0,(a0)
02:00000716 67FE            	   736:             beq.s *               * branch if Z set
02:00000718 08500001        	   737:             bchg.b #1,(a0)            *
02:0000071C 66FE            	   738:             bne.s *               * branch if Z clear
02:0000071E 08500007        	   739:             bchg.b #7,(a0)            *
02:00000722 67FE            	   740:             beq.s *               * branch if Z set
02:00000724 0C100002        	   741:             cmpi.b #$02,(a0)
02:00000728 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
02:0000072A 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000072E 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
02:00000732 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
02:00000736 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
02:0000073A 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000073E 08580000        	   750:             bchg.b #0,(a0)+
02:00000742 67FE            	   751:             beq.s *               * branch if Z set
02:00000744 08580001        	   752:             bchg.b #1,(a0)+           *
02:00000748 66FE            	   753:             bne.s *               * branch if Z clear
02:0000074A 08580007        	   754:             bchg.b #7,(a0)+           *
02:0000074E 67FE            	   755:             beq.s *               * branch if Z set
02:00000750 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000754 4A18            	   757:             cmpi.b #$00,(a0)+
02:00000756 66FE            	   758:             bne.s *               * branch if Z clear
02:00000758 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
02:0000075C 66FE            	   760:             bne.s *               * branch if Z clear
02:0000075E 4A18            	   761:             cmpi.b #$00,(a0)+
02:00000760 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
02:00000762 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
02:00000766 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
02:0000076A 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
02:0000076E 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
02:00000772 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
02:00000776 08600000        	   770:             bchg.b #0,-(a0)
02:0000077A 67FE            	   771:             beq.s *               * branch if Z set
02:0000077C 08600001        	   772:             bchg.b #1,-(a0)           *
02:00000780 66FE            	   773:             bne.s *               * branch if Z clear
02:00000782 08600007        	   774:             bchg.b #7,-(a0)           *
02:00000786 67FE            	   775:             beq.s *               * branch if Z set
02:00000788 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
02:0000078C 4A20            	   777:             cmpi.b #$00,-(a0)
02:0000078E 66FE            	   778:             bne.s *               * branch if Z clear
02:00000790 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
02:00000794 66FE            	   780:             bne.s *               * branch if Z clear
02:00000796 4A20            	   781:             cmpi.b #$00,-(a0)
02:00000798 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
02:0000079A 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
02:0000079E 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
02:000007A2 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
02:000007A6 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
02:000007AA 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
02:000007AE 08500000        	   791:             bchg.b #0,0(a0)
02:000007B2 67FE            	   792:             beq.s *               * branch if Z set
02:000007B4 086800010001    	   793:             bchg.b #1,1(a0)           *
02:000007BA 66FE            	   794:             bne.s *               * branch if Z clear
02:000007BC 086800070002    	   795:             bchg.b #7,2(a0)           *
02:000007C2 67FE            	   796:             beq.s *               * branch if Z set
02:000007C4 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
02:000007C8 4A18            	   798:             cmpi.b #$00,(a0)+
02:000007CA 66FE            	   799:             bne.s *               * branch if Z clear
02:000007CC 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
02:000007D0 66FE            	   801:             bne.s *               * branch if Z clear
02:000007D2 4A18            	   802:             cmpi.b #$00,(a0)+
02:000007D4 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
02:000007D6 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
02:000007DA 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
02:000007DC 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
02:000007E0 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
02:000007E2 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
02:000007E4 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
02:000007EA 66FE            	   813:             bne.s *               * branch if Z clear
02:000007EC 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
02:000007F2 67FE            	   815:             beq.s *               * branch if Z set
02:000007F4 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
02:000007FA 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
02:000007FC 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
02:00000802 67FE            	   820:             beq.s *               * branch if Z set
02:00000804 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
02:0000080A 66FE            	   822:             bne.s *               * branch if Z clear
02:0000080C 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
02:00000812 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
02:00000814 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
02:0000081A 66FE            	   827:             bne.s *               * branch if Z clear
02:0000081C 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
02:00000822 67FE            	   829:             beq.s *               * branch if Z set
02:00000824 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
02:0000082A 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
02:0000082C 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
02:00000832 67FE            	   834:             beq.s *               * branch if Z set
02:00000834 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
02:0000083A 66FE            	   836:             bne.s *               * branch if Z clear
02:0000083C 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
02:00000842 67FE            	   838:             beq.s *               * branch if Z set
02:00000844 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000848 4A18            	   840:             cmpi.b #$00,(a0)+
02:0000084A 66FE            	   841:             bne.s *               * branch if Z clear
02:0000084C 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
02:00000850 66FE            	   843:             bne.s *               * branch if Z clear
02:00000852 4A18            	   844:             cmpi.b #$00,(a0)+
02:00000854 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
02:00000856 087800000100    	   849:             bchg.b #0,$0100
02:0000085C 66FE            	   850:             bne.s *               * branch if Z clear
02:0000085E 087800010101    	   851:             bchg.b #1,$0101           *
02:00000864 67FE            	   852:             beq.s *               * branch if Z set
02:00000866 087800070102    	   853:             bchg.b #7,$0102           *
02:0000086C 66FE            	   854:             bne.s *               * branch if Z clear
02:0000086E 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000872 0C180001        	   856:             cmpi.b #$01,(a0)+
02:00000876 66FE            	   857:             bne.s *               * branch if Z clear
02:00000878 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
02:0000087C 66FE            	   859:             bne.s *               * branch if Z clear
02:0000087E 0C180080        	   860:             cmpi.b #$80,(a0)+
02:00000882 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
02:00000884 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
02:0000088A 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
02:0000088E 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
02:00000892 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
02:00000896 087900000000F100	   868:             bchg.b #0,$F100
02:0000089E 67FE            	   869:             beq.s *               * branch if Z set
02:000008A0 087900010000F101	   870:             bchg.b #1,$F101       *
02:000008A8 66FE            	   871:             bne.s *               * branch if Z clear
02:000008AA 087900070000F102	   872:             bchg.b #7,$F102       *
02:000008B2 67FE            	   873:             beq.s *               * branch if Z set
02:000008B4 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
02:000008B8 0C180001        	   875:             cmpi.b #$01,(a0)+
02:000008BC 66FE            	   876:             bne.s *               * branch if Z clear
02:000008BE 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
02:000008C2 66FE            	   878:             bne.s *               * branch if Z clear
02:000008C4 0C180080        	   879:             cmpi.b #$80,(a0)+
02:000008C8 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
02:000008CA 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
02:000008D0 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
02:000008D2 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
02:000008D4 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
02:000008D6 0B40            	   891:             bchg.l d5,d0
02:000008D8 67FE            	   892:             beq.s *               * branch if Z set
02:000008DA 0D40            	   893:             bchg.l d6,d0              *
02:000008DC 66FE            	   894:             bne.s *               * branch if Z clear
02:000008DE 0F40            	   895:             bchg.l d7,d0             *
02:000008E0 67FE            	   896:             beq.s *               * branch if Z set
02:000008E2 0C8000000002    	   897:             cmpi.l #$00000002,d0
02:000008E8 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
02:000008EA 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
02:000008EC 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
02:000008EE 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
02:000008F0 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
02:000008F4 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
02:000008F8 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
02:000008FA 0B50            	   908:             bchg.b d5,(a0)
02:000008FC 67FE            	   909:             beq.s *               * branch if Z set
02:000008FE 0D50            	   910:             bchg.b d6,(a0)            *
02:00000900 66FE            	   911:             bne.s *               * branch if Z clear
02:00000902 0F50            	   912:             bchg.b d7,(a0)            *
02:00000904 67FE            	   913:             beq.s *               * branch if Z set
02:00000906 0C100002        	   914:             cmpi.b #$02,(a0)
02:0000090A 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
02:0000090C 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000910 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
02:00000914 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
02:00000918 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
02:0000091C 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000920 0B58            	   924:             bchg.b d5,(a0)+
02:00000922 67FE            	   925:             beq.s *               * branch if Z set
02:00000924 0D58            	   926:             bchg.b d6,(a0)+           *
02:00000926 66FE            	   927:             bne.s *               * branch if Z clear
02:00000928 0F58            	   928:             bchg.b d7,(a0)+           *
02:0000092A 67FE            	   929:             beq.s *               * branch if Z set
02:0000092C 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000930 4A18            	   931:             cmpi.b #$00,(a0)+
02:00000932 66FE            	   932:             bne.s *               * branch if Z clear
02:00000934 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
02:00000938 66FE            	   934:             bne.s *               * branch if Z clear
02:0000093A 4A18            	   935:             cmpi.b #$00,(a0)+
02:0000093C 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
02:0000093E 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
02:00000942 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
02:00000946 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
02:0000094A 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
02:0000094E 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
02:00000952 0B60            	   944:             bchg.b d5,-(a0)
02:00000954 67FE            	   945:             beq.s *               * branch if Z set
02:00000956 0D60            	   946:             bchg.b d6,-(a0)           *
02:00000958 66FE            	   947:             bne.s *               * branch if Z clear
02:0000095A 0F60            	   948:             bchg.b d7,-(a0)           *
02:0000095C 67FE            	   949:             beq.s *               * branch if Z set
02:0000095E 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
02:00000962 4A20            	   951:             cmpi.b #$00,-(a0)
02:00000964 66FE            	   952:             bne.s *               * branch if Z clear
02:00000966 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
02:0000096A 66FE            	   954:             bne.s *               * branch if Z clear
02:0000096C 4A20            	   955:             cmpi.b #$00,-(a0)
02:0000096E 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
02:00000970 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
02:00000974 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
02:00000978 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
02:0000097C 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
02:00000980 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
02:00000984 0B50            	   964:             bchg.b d5,0(a0)
02:00000986 67FE            	   965:             beq.s *               * branch if Z set
02:00000988 0D680001        	   966:             bchg.b d6,1(a0)           *
02:0000098C 66FE            	   967:             bne.s *               * branch if Z clear
02:0000098E 0F680002        	   968:             bchg.b d7,2(a0)           *
02:00000992 67FE            	   969:             beq.s *               * branch if Z set
02:00000994 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000998 4A18            	   971:             cmpi.b #$00,(a0)+
02:0000099A 66FE            	   972:             bne.s *               * branch if Z clear
02:0000099C 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
02:000009A0 66FE            	   974:             bne.s *               * branch if Z clear
02:000009A2 4A18            	   975:             cmpi.b #$00,(a0)+
02:000009A4 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
02:000009A6 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
02:000009AA 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
02:000009AC 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
02:000009B0 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
02:000009B2 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
02:000009B4 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
02:000009B8 66FE            	   985:             bne.s *               * branch if Z clear
02:000009BA 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
02:000009BE 67FE            	   987:             beq.s *               * branch if Z set
02:000009C0 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
02:000009C4 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
02:000009C6 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
02:000009CA 67FE            	   992:             beq.s *               * branch if Z set
02:000009CC 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
02:000009D0 66FE            	   994:             bne.s *               * branch if Z clear
02:000009D2 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
02:000009D6 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
02:000009D8 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
02:000009DC 66FE            	   999:             bne.s *               * branch if Z clear
02:000009DE 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
02:000009E2 67FE            	  1001:             beq.s *               * branch if Z set
02:000009E4 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
02:000009E8 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
02:000009EA 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
02:000009EE 67FE            	  1006:             beq.s *               * branch if Z set
02:000009F0 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
02:000009F4 66FE            	  1008:             bne.s *               * branch if Z clear
02:000009F6 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
02:000009FA 67FE            	  1010:             beq.s *               * branch if Z set
02:000009FC 4A18            	  1011:             cmpi.b #$00,(a0)+
02:000009FE 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
02:00000A00 0B780100        	  1015:             bchg.b d5,$0100
02:00000A04 66FE            	  1016:             bne.s *               * branch if Z clear
02:00000A06 0D780101        	  1017:             bchg.b d6,$0101           *
02:00000A0A 67FE            	  1018:             beq.s *               * branch if Z set
02:00000A0C 0F780102        	  1019:             bchg.b d7,$0102           *
02:00000A10 66FE            	  1020:             bne.s *               * branch if Z clear
02:00000A12 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
02:00000A16 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
02:00000A18 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
02:00000A1E 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
02:00000A22 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
02:00000A26 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
02:00000A2A 0B790000F100    	  1029:             bchg.b d5,$F100
02:00000A30 67FE            	  1030:             beq.s *               * branch if Z set
02:00000A32 0D790000F101    	  1031:             bchg.b d6,$F101       *
02:00000A38 66FE            	  1032:             bne.s *               * branch if Z clear
02:00000A3A 0F790000F102    	  1033:             bchg.b d7,$F102       *
02:00000A40 67FE            	  1034:             beq.s *               * branch if Z set
02:00000A42 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
02:00000A48 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
02:00000A4C 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
02:00000A4E 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
02:00000A50 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
02:00000A56 08800000        	  1054:             bclr.l #0,d0
02:00000A5A 67FE            	  1055:             beq.s *               * branch if Z set
02:00000A5C 08800001        	  1056:             bclr.l #1,d0              *
02:00000A60 67FE            	  1057:             beq.s *               * branch if Z set
02:00000A62 0880000F        	  1058:             bclr.l #15,d0             *
02:00000A66 66FE            	  1059:             bne.s *               * branch if Z clear
02:00000A68 0880001F        	  1060:             bclr.l #31,d0             *
02:00000A6C 67FE            	  1061:             beq.s *               * branch if Z set
02:00000A6E 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
02:00000A74 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
02:00000A76 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000A7A 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
02:00000A7E 08900000        	  1069:             bclr.b #0,(a0)
02:00000A82 67FE            	  1070:             beq.s *               * branch if Z set
02:00000A84 08900007        	  1071:             bclr.b #7,(a0)            *
02:00000A88 66FE            	  1072:             bne.s *               * branch if Z clear
02:00000A8A 0C10000E        	  1073:             cmpi.b #$0E,(a0)
02:00000A8E 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
02:00000A90 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000A94 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
02:00000A98 4218            	  1079:             move.b #$00,(a0)+         * populate test data
02:00000A9A 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000A9E 08980000        	  1081:             bclr.b #0,(a0)+
02:00000AA2 67FE            	  1082:             beq.s *               * branch if Z set
02:00000AA4 08980001        	  1083:             bclr.b #1,(a0)+           *
02:00000AA8 66FE            	  1084:             bne.s *               * branch if Z clear
02:00000AAA 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000AAE 4A18            	  1086:             cmpi.b #$00,(a0)+
02:00000AB0 66FE            	  1087:             bne.s *               * branch if Z clear
02:00000AB2 4A18            	  1088:             cmpi.b #$00,(a0)+
02:00000AB4 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
02:00000AB6 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
02:00000ABA 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
02:00000ABE 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
02:00000AC2 08A00007        	  1096:             bclr.b #7,-(a0)
02:00000AC6 67FE            	  1097:             beq.s *               * branch if Z set
02:00000AC8 08A00000        	  1098:             bclr.b #0,-(a0)           *
02:00000ACC 67FE            	  1099:             beq.s *               * branch if Z set
02:00000ACE 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
02:00000AD2 4A20            	  1101:             cmpi.b #$00,-(a0)
02:00000AD4 66FE            	  1102:             bne.s *               * branch if Z clear
02:00000AD6 4A20            	  1103:             cmpi.b #$00,-(a0)
02:00000AD8 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
02:00000ADA 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
02:00000ADE 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
02:00000AE2 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
02:00000AE6 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
02:00000AEA 08900000        	  1112:             bclr.b #0,0(a0)
02:00000AEE 67FE            	  1113:             beq.s *               * branch if Z set
02:00000AF0 08A800040001    	  1114:             bclr.b #4,1(a0)           *
02:00000AF6 67FE            	  1115:             beq.s *               * branch if Z set
02:00000AF8 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000AFC 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
02:00000B00 66FE            	  1118:             bne.s *               * branch if Z clear
02:00000B02 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
02:00000B06 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
02:00000B08 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
02:00000B0C 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
02:00000B0E 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
02:00000B12 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
02:00000B14 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
02:00000B16 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
02:00000B1A 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
02:00000B1E 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
02:00000B22 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
02:00000B28 67FE            	  1133:             beq.s *               * branch if Z set
02:00000B2A 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
02:00000B30 67FE            	  1135:             beq.s *               * branch if Z set
02:00000B32 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
02:00000B38 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
02:00000B3A 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
02:00000B40 67FE            	  1140:             beq.s *               * branch if Z set
02:00000B42 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
02:00000B48 67FE            	  1142:             beq.s *               * branch if Z set
02:00000B4A 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
02:00000B50 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
02:00000B52 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
02:00000B58 67FE            	  1147:             beq.s *               * branch if Z set
02:00000B5A 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
02:00000B60 66FE            	  1149:             bne.s *               * branch if Z clear
02:00000B62 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
02:00000B68 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
02:00000B6A 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
02:00000B70 66FE            	  1154:             bne.s *               * branch if Z clear
02:00000B72 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
02:00000B78 67FE            	  1156:             beq.s *               * branch if Z set
02:00000B7A 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
02:00000B80 66FE            	  1158:             bne.s *               * branch if Z clear
02:00000B82 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000B86 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
02:00000B8A 66FE            	  1161:             bne.s *               * branch if Z clear
02:00000B8C 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
02:00000B90 66FE            	  1163:             bne.s *               * branch if Z clear
02:00000B92 0C180059        	  1164:             cmpi.b #$59,(a0)+
02:00000B96 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
02:00000B98 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
02:00000B9C 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
02:00000BA0 08B800000100    	  1171:             bclr.b #0,$0100
02:00000BA6 67FE            	  1172:             beq.s *               * branch if Z set
02:00000BA8 08B800010100    	  1173:             bclr.b #1,$0100           *
02:00000BAE 67FE            	  1174:             beq.s *               * branch if Z set
02:00000BB0 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000BB4 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
02:00000BB8 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
02:00000BBA 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
02:00000BC0 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
02:00000BC4 08B900000000F100	  1183:             bclr.b #0,$F100
02:00000BCC 67FE            	  1184:             beq.s *               * branch if Z set
02:00000BCE 08B900010000F100	  1185:             bclr.b #1,$F100       *
02:00000BD6 67FE            	  1186:             beq.s *               * branch if Z set
02:00000BD8 08B900020000F100	  1187:             bclr.b #2,$F100       *
02:00000BE0 67FE            	  1188:             beq.s *               * branch if Z set
02:00000BE2 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
02:00000BE8 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
02:00000BEC 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
02:00000BEE 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
02:00000BF4 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
02:00000BF6 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
02:00000BF8 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
02:00000BFA 0B80            	  1202:             bclr.l d5,d0
02:00000BFC 66FE            	  1203:             bne.s *               * branch if Z clear
02:00000BFE 0D80            	  1204:             bclr.l d6,d0              *
02:00000C00 66FE            	  1205:             bne.s *               * branch if Z clear
02:00000C02 0F80            	  1206:             bclr.l d7,d0             *
02:00000C04 67FE            	  1207:             beq.s *               * branch if Z set
02:00000C06 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
02:00000C0C 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
02:00000C0E 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
02:00000C10 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
02:00000C12 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
02:00000C14 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000C18 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
02:00000C1C 0B90            	  1218:             bclr.b d5,(a0)
02:00000C1E 67FE            	  1219:             beq.s *               * branch if Z set
02:00000C20 0D90            	  1220:             bclr.b d6,(a0)            *
02:00000C22 66FE            	  1221:             bne.s *               * branch if Z clear
02:00000C24 0F90            	  1222:             bclr.b d7,(a0)            *
02:00000C26 67FE            	  1223:             beq.s *               * branch if Z set
02:00000C28 4A10            	  1224:             cmpi.b #$00,(a0)
02:00000C2A 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
02:00000C2C 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000C30 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
02:00000C34 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
02:00000C38 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
02:00000C3C 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000C40 0B98            	  1234:             bclr.b d5,(a0)+
02:00000C42 67FE            	  1235:             beq.s *               * branch if Z set
02:00000C44 0D98            	  1236:             bclr.b d6,(a0)+           *
02:00000C46 66FE            	  1237:             bne.s *               * branch if Z clear
02:00000C48 0F98            	  1238:             bclr.b d7,(a0)+           *
02:00000C4A 67FE            	  1239:             beq.s *               * branch if Z set
02:00000C4C 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000C50 4A18            	  1241:             cmpi.b #$00,(a0)+
02:00000C52 66FE            	  1242:             bne.s *               * branch if Z clear
02:00000C54 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
02:00000C58 66FE            	  1244:             bne.s *               * branch if Z clear
02:00000C5A 4A18            	  1245:             cmpi.b #$00,(a0)+
02:00000C5C 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
02:00000C5E 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
02:00000C62 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
02:00000C66 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
02:00000C6A 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
02:00000C6E 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
02:00000C72 0BA0            	  1254:             bclr.b d5,-(a0)
02:00000C74 67FE            	  1255:             beq.s *               * branch if Z set
02:00000C76 0DA0            	  1256:             bclr.b d6,-(a0)           *
02:00000C78 66FE            	  1257:             bne.s *               * branch if Z clear
02:00000C7A 0FA0            	  1258:             bclr.b d7,-(a0)           *
02:00000C7C 67FE            	  1259:             beq.s *               * branch if Z set
02:00000C7E 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
02:00000C82 4A20            	  1261:             cmpi.b #$00,-(a0)
02:00000C84 66FE            	  1262:             bne.s *               * branch if Z clear
02:00000C86 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
02:00000C8A 66FE            	  1264:             bne.s *               * branch if Z clear
02:00000C8C 4A20            	  1265:             cmpi.b #$00,-(a0)
02:00000C8E 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
02:00000C90 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
02:00000C94 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
02:00000C98 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
02:00000C9C 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
02:00000CA0 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
02:00000CA4 0B90            	  1274:             bclr.b d5,0(a0)
02:00000CA6 67FE            	  1275:             beq.s *               * branch if Z set
02:00000CA8 0DA80001        	  1276:             bclr.b d6,1(a0)           *
02:00000CAC 66FE            	  1277:             bne.s *               * branch if Z clear
02:00000CAE 0FA80002        	  1278:             bclr.b d7,2(a0)           *
02:00000CB2 67FE            	  1279:             beq.s *               * branch if Z set
02:00000CB4 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000CB8 4A18            	  1281:             cmpi.b #$00,(a0)+
02:00000CBA 66FE            	  1282:             bne.s *               * branch if Z clear
02:00000CBC 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
02:00000CC0 66FE            	  1284:             bne.s *               * branch if Z clear
02:00000CC2 4A18            	  1285:             cmpi.b #$00,(a0)+
02:00000CC4 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
02:00000CC6 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
02:00000CCA 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
02:00000CCE 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
02:00000CD2 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
02:00000CD6 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
02:00000CDA 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
02:00000CDE 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
02:00000CE0 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
02:00000CE4 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
02:00000CE6 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
02:00000CE8 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
02:00000CEC 67FE            	  1300:             beq.s *               * branch if Z set
02:00000CEE 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
02:00000CF2 67FE            	  1302:             beq.s *               * branch if Z set
02:00000CF4 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
02:00000CF8 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
02:00000CFA 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
02:00000CFE 66FE            	  1307:             bne.s *               * branch if Z clear
02:00000D00 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
02:00000D04 66FE            	  1309:             bne.s *               * branch if Z clear
02:00000D06 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
02:00000D0A 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
02:00000D0C 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
02:00000D10 66FE            	  1314:             bne.s *               * branch if Z clear
02:00000D12 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
02:00000D16 66FE            	  1316:             bne.s *               * branch if Z clear
02:00000D18 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
02:00000D1C 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
02:00000D1E 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
02:00000D22 66FE            	  1321:             bne.s *               * branch if Z clear
02:00000D24 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
02:00000D28 66FE            	  1323:             bne.s *               * branch if Z clear
02:00000D2A 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
02:00000D2E 66FE            	  1325:             bne.s *               * branch if Z clear
02:00000D30 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
02:00000D34 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
02:00000D38 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
02:00000D3A 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
02:00000D3E 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
02:00000D42 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
02:00000D46 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
02:00000D4A 0BB80100        	  1335:             bclr.b d5,$0100
02:00000D4E 67FE            	  1336:             beq.s *               * branch if Z set
02:00000D50 0DB80101        	  1337:             bclr.b d6,$0101           *
02:00000D54 67FE            	  1338:             beq.s *               * branch if Z set
02:00000D56 0FB80102        	  1339:             bclr.b d7,$0102           *
02:00000D5A 67FE            	  1340:             beq.s *               * branch if Z set
02:00000D5C 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
02:00000D60 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
02:00000D64 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
02:00000D66 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
02:00000D6C 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
02:00000D70 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
02:00000D74 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
02:00000D78 0BB90000F100    	  1350:             bclr.b d5,$F100
02:00000D7E 67FE            	  1351:             beq.s *               * branch if Z set
02:00000D80 0DB90000F101    	  1352:             bclr.b d6,$F101       *
02:00000D86 66FE            	  1353:             bne.s *               * branch if Z clear
02:00000D88 0FB90000F102    	  1354:             bclr.b d7,$F102       *
02:00000D8E 67FE            	  1355:             beq.s *               * branch if Z set
02:00000D90 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
02:00000D96 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
02:00000D9A 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
02:00000D9C 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
02:00000D9E 7000            	  1375:             moveq  #$00000000,d0      * populate test data
02:00000DA0 08C00000        	  1376:             bset.l #0,d0
02:00000DA4 66FE            	  1377:             bne.s *               * branch if Z clear
02:00000DA6 08C00001        	  1378:             bset.l #1,d0              *
02:00000DAA 66FE            	  1379:             bne.s *               * branch if Z clear
02:00000DAC 08C0000F        	  1380:             bset.l #15,d0             *
02:00000DB0 66FE            	  1381:             bne.s *               * branch if Z clear
02:00000DB2 08C0001F        	  1382:             bset.l #31,d0             *
02:00000DB6 66FE            	  1383:             bne.s *               * branch if Z clear
02:00000DB8 0C8080008003    	  1384:             cmpi.l #$80008003,d0
02:00000DBE 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
02:00000DC0 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000DC4 4210            	  1390:             move.b #$00,(a0)          * populate test data
02:00000DC6 08D00000        	  1391:             bset.b #0,(a0)
02:00000DCA 66FE            	  1392:             bne.s *               * branch if Z clear
02:00000DCC 08D00007        	  1393:             bset.b #7,(a0)            *
02:00000DD0 66FE            	  1394:             bne.s *               * branch if Z clear
02:00000DD2 0C100081        	  1395:             cmpi.b #$81,(a0)
02:00000DD6 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
02:00000DD8 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000DDC 4218            	  1400:             move.b #$00,(a0)+         * populate test data
02:00000DDE 4218            	  1401:             move.b #$00,(a0)+         * populate test data
02:00000DE0 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000DE4 08D80000        	  1403:             bset.b #0,(a0)+
02:00000DE8 66FE            	  1404:             bne.s *               * branch if Z clear
02:00000DEA 08D80001        	  1405:             bset.b #1,(a0)+           *
02:00000DEE 66FE            	  1406:             bne.s *               * branch if Z clear
02:00000DF0 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000DF4 0C180001        	  1408:             cmpi.b #$01,(a0)+
02:00000DF8 66FE            	  1409:             bne.s *               * branch if Z clear
02:00000DFA 0C180002        	  1410:             cmpi.b #$02,(a0)+
02:00000DFE 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
02:00000E00 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
02:00000E04 4218            	  1416:             move.b #$00,(a0)+         * populate test data
02:00000E06 4218            	  1417:             move.b #$00,(a0)+         * populate test data
02:00000E08 08E00007        	  1418:             bset.b #7,-(a0)
02:00000E0C 66FE            	  1419:             bne.s *               * branch if Z clear
02:00000E0E 08E00000        	  1420:             bset.b #0,-(a0)           *
02:00000E12 66FE            	  1421:             bne.s *               * branch if Z clear
02:00000E14 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
02:00000E18 0C200080        	  1423:             cmpi.b #$80,-(a0)
02:00000E1C 66FE            	  1424:             bne.s *               * branch if Z clear
02:00000E1E 0C200001        	  1425:             cmpi.b #$01,-(a0)
02:00000E22 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
02:00000E24 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
02:00000E28 4218            	  1431:             move.b #$00,(a0)+         * populate test data
02:00000E2A 4218            	  1432:             move.b #$00,(a0)+         * populate test data
02:00000E2C 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
02:00000E30 08D00000        	  1434:             bset.b #0,0(a0)
02:00000E34 66FE            	  1435:             bne.s *               * branch if Z clear
02:00000E36 08E800040001    	  1436:             bset.b #4,1(a0)           *
02:00000E3C 66FE            	  1437:             bne.s *               * branch if Z clear
02:00000E3E 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000E42 0C180001        	  1439:             cmpi.b #$01,(a0)+
02:00000E46 66FE            	  1440:             bne.s *               * branch if Z clear
02:00000E48 0C180010        	  1441:             cmpi.b #$10,(a0)+
02:00000E4C 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
02:00000E4E 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
02:00000E52 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
02:00000E54 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
02:00000E58 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
02:00000E5A 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
02:00000E5C 4218            	  1451:             move.b #$00,(a0)+         * populate test data
02:00000E5E 4218            	  1452:             move.b #$00,(a0)+         * populate test data
02:00000E60 4218            	  1453:             move.b #$00,(a0)+         * populate test data
02:00000E62 4218            	  1454:             move.b #$00,(a0)+         * populate test data
02:00000E64 4218            	  1455:             move.b #$00,(a0)+         * populate test data
02:00000E66 4218            	  1456:             move.b #$00,(a0)+         * populate test data
02:00000E68 4218            	  1457:             move.b #$00,(a0)+         * populate test data
02:00000E6A 4218            	  1458:             move.b #$00,(a0)+         * populate test data
02:00000E6C 4218            	  1459:             move.b #$00,(a0)+         * populate test data
02:00000E6E 4218            	  1460:             move.b #$00,(a0)+         * populate test data
02:00000E70 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
02:00000E74 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
02:00000E7A 66FE            	  1463:             bne.s *               * branch if Z clear
02:00000E7C 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
02:00000E82 66FE            	  1465:             bne.s *               * branch if Z clear
02:00000E84 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
02:00000E8A 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
02:00000E8C 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
02:00000E92 66FE            	  1470:             bne.s *               * branch if Z clear
02:00000E94 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
02:00000E9A 66FE            	  1472:             bne.s *               * branch if Z clear
02:00000E9C 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
02:00000EA2 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
02:00000EA4 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
02:00000EAA 66FE            	  1477:             bne.s *               * branch if Z clear
02:00000EAC 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
02:00000EB2 66FE            	  1479:             bne.s *               * branch if Z clear
02:00000EB4 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
02:00000EBA 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
02:00000EBC 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
02:00000EC2 66FE            	  1484:             bne.s *               * branch if Z clear
02:00000EC4 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
02:00000ECA 66FE            	  1486:             bne.s *               * branch if Z clear
02:00000ECC 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
02:00000ED2 66FE            	  1488:             bne.s *               * branch if Z clear
02:00000ED4 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000ED8 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
02:00000EDE 66FE            	  1491:             bne.s *               * branch if Z clear
02:00000EE0 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
02:00000EE6 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
02:00000EE8 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
02:00000EEC 4218            	  1499:             move.b #$00,(a0)+         * populate test data
02:00000EEE 08F800000100    	  1500:             bset.b #0,$0100
02:00000EF4 66FE            	  1501:             bne.s *               * branch if Z clear
02:00000EF6 08F800010100    	  1502:             bset.b #1,$0100           *
02:00000EFC 66FE            	  1503:             bne.s *               * branch if Z clear
02:00000EFE 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F02 0C180003        	  1505:             cmpi.b #$03,(a0)+
02:00000F06 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
02:00000F08 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
02:00000F0E 4210            	  1511:             move.b #$00,(a0)          * populate test data
02:00000F10 08F900000000F100	  1512:             bset.b #0,$F100
02:00000F18 66FE            	  1513:             bne.s *               * branch if Z clear
02:00000F1A 08F900010000F100	  1514:             bset.b #1,$F100       *
02:00000F22 66FE            	  1515:             bne.s *               * branch if Z clear
02:00000F24 08F900020000F100	  1516:             bset.b #2,$F100       *
02:00000F2C 66FE            	  1517:             bne.s *               * branch if Z clear
02:00000F2E 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
02:00000F34 0C180007        	  1519:             cmpi.b #$07,(a0)+
02:00000F38 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
02:00000F3A 7000            	  1526:             moveq  #$00000000,d0      * populate test data
02:00000F3C 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
02:00000F3E 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
02:00000F40 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
02:00000F42 0BC0            	  1531:             bset.l d5,d0
02:00000F44 66FE            	  1532:             bne.s *               * branch if Z clear
02:00000F46 0DC0            	  1533:             bset.l d6,d0              *
02:00000F48 66FE            	  1534:             bne.s *               * branch if Z clear
02:00000F4A 0FC0            	  1535:             bset.l d7,d0             *
02:00000F4C 66FE            	  1536:             bne.s *               * branch if Z clear
02:00000F4E 0C8080000003    	  1537:             cmpi.l #$80000003,d0
02:00000F54 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
02:00000F56 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
02:00000F58 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
02:00000F5A 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
02:00000F5C 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F60 4210            	  1546:             move.b #$00,(a0)          * populate test data
02:00000F62 0BD0            	  1547:             bset.b d5,(a0)
02:00000F64 66FE            	  1548:             bne.s *               * branch if Z clear
02:00000F66 0DD0            	  1549:             bset.b d6,(a0)            *
02:00000F68 66FE            	  1550:             bne.s *               * branch if Z clear
02:00000F6A 0FD0            	  1551:             bset.b d7,(a0)            *
02:00000F6C 66FE            	  1552:             bne.s *               * branch if Z clear
02:00000F6E 0C100083        	  1553:             cmpi.b #$83,(a0)
02:00000F72 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
02:00000F74 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F78 4218            	  1559:             move.b #$00,(a0)+         * populate test data
02:00000F7A 4218            	  1560:             move.b #$00,(a0)+         * populate test data
02:00000F7C 4218            	  1561:             move.b #$00,(a0)+         * populate test data
02:00000F7E 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F82 0BD8            	  1563:             bset.b d5,(a0)+
02:00000F84 66FE            	  1564:             bne.s *               * branch if Z clear
02:00000F86 0DD8            	  1565:             bset.b d6,(a0)+           *
02:00000F88 66FE            	  1566:             bne.s *               * branch if Z clear
02:00000F8A 0FD8            	  1567:             bset.b d7,(a0)+           *
02:00000F8C 66FE            	  1568:             bne.s *               * branch if Z clear
02:00000F8E 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000F92 0C180001        	  1570:             cmpi.b #$01,(a0)+
02:00000F96 66FE            	  1571:             bne.s *               * branch if Z clear
02:00000F98 0C180002        	  1572:             cmpi.b #$02,(a0)+
02:00000F9C 66FE            	  1573:             bne.s *               * branch if Z clear
02:00000F9E 0C180080        	  1574:             cmpi.b #$80,(a0)+
02:00000FA2 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
02:00000FA4 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
02:00000FA8 4218            	  1579:             move.b #$00,(a0)+         * populate test data
02:00000FAA 4218            	  1580:             move.b #$00,(a0)+         * populate test data
02:00000FAC 4218            	  1581:             move.b #$00,(a0)+         * populate test data
02:00000FAE 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
02:00000FB2 0BE0            	  1583:             bset.b d5,-(a0)
02:00000FB4 66FE            	  1584:             bne.s *               * branch if Z clear
02:00000FB6 0DE0            	  1585:             bset.b d6,-(a0)           *
02:00000FB8 66FE            	  1586:             bne.s *               * branch if Z clear
02:00000FBA 0FE0            	  1587:             bset.b d7,-(a0)           *
02:00000FBC 66FE            	  1588:             bne.s *               * branch if Z clear
02:00000FBE 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
02:00000FC2 0C200001        	  1590:             cmpi.b #$01,-(a0)
02:00000FC6 66FE            	  1591:             bne.s *               * branch if Z clear
02:00000FC8 0C200002        	  1592:             cmpi.b #$02,-(a0)
02:00000FCC 66FE            	  1593:             bne.s *               * branch if Z clear
02:00000FCE 0C200080        	  1594:             cmpi.b #$80,-(a0)
02:00000FD2 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
02:00000FD4 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
02:00000FD8 4218            	  1599:             move.b #$00,(a0)+         * populate test data
02:00000FDA 4218            	  1600:             move.b #$00,(a0)+         * populate test data
02:00000FDC 4218            	  1601:             move.b #$00,(a0)+         * populate test data
02:00000FDE 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
02:00000FE2 0BD0            	  1603:             bset.b d5,0(a0)
02:00000FE4 66FE            	  1604:             bne.s *               * branch if Z clear
02:00000FE6 0DE80001        	  1605:             bset.b d6,1(a0)           *
02:00000FEA 66FE            	  1606:             bne.s *               * branch if Z clear
02:00000FEC 0FE80002        	  1607:             bset.b d7,2(a0)           *
02:00000FF0 66FE            	  1608:             bne.s *               * branch if Z clear
02:00000FF2 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
02:00000FF6 0C180001        	  1610:             cmpi.b #$01,(a0)+
02:00000FFA 66FE            	  1611:             bne.s *               * branch if Z clear
02:00000FFC 0C180002        	  1612:             cmpi.b #$02,(a0)+
02:00001000 66FE            	  1613:             bne.s *               * branch if Z clear
02:00001002 0C180080        	  1614:             cmpi.b #$80,(a0)+
02:00001006 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
02:00001008 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
02:0000100C 4218            	  1619:             move.b #$00,(a0)+         * populate test data
02:0000100E 4218            	  1620:             move.b #$00,(a0)+         * populate test data
02:00001010 4218            	  1621:             move.b #$00,(a0)+         * populate test data
02:00001012 4218            	  1622:             move.b #$00,(a0)+         * populate test data
02:00001014 4218            	  1623:             move.b #$00,(a0)+         * populate test data
02:00001016 4218            	  1624:             move.b #$00,(a0)+         * populate test data
02:00001018 4218            	  1625:             move.b #$00,(a0)+         * populate test data
02:0000101A 4218            	  1626:             move.b #$00,(a0)+         * populate test data
02:0000101C 4218            	  1627:             move.b #$00,(a0)+         * populate test data
02:0000101E 4218            	  1628:             move.b #$00,(a0)+         * populate test data
02:00001020 4218            	  1629:             move.b #$00,(a0)+         * populate test data
02:00001022 4218            	  1630:             move.b #$00,(a0)+         * populate test data
02:00001024 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
02:00001028 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
02:0000102A 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
02:0000102E 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
02:00001030 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
02:00001032 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
02:00001036 66FE            	  1637:             bne.s *               * branch if Z clear
02:00001038 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
02:0000103C 66FE            	  1639:             bne.s *               * branch if Z clear
02:0000103E 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
02:00001042 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
02:00001044 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
02:00001048 66FE            	  1644:             bne.s *               * branch if Z clear
02:0000104A 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
02:0000104E 66FE            	  1646:             bne.s *               * branch if Z clear
02:00001050 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
02:00001054 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
02:00001056 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
02:0000105A 66FE            	  1651:             bne.s *               * branch if Z clear
02:0000105C 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
02:00001060 66FE            	  1653:             bne.s *               * branch if Z clear
02:00001062 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
02:00001066 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
02:00001068 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
02:0000106C 66FE            	  1658:             bne.s *               * branch if Z clear
02:0000106E 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
02:00001072 66FE            	  1660:             bne.s *               * branch if Z clear
02:00001074 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
02:00001078 66FE            	  1662:             bne.s *               * branch if Z clear
02:0000107A 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
02:0000107E 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
02:00001084 66FE            	  1665:             bne.s *               * branch if Z clear
02:00001086 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
02:0000108C 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
02:0000108E 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
02:00001092 4218            	  1672:             move.b #$00,(a0)+         * populate test data
02:00001094 4218            	  1673:             move.b #$00,(a0)+         * populate test data
02:00001096 4218            	  1674:             move.b #$00,(a0)+         * populate test data
02:00001098 0BF80100        	  1675:             bset.b d5,$0100
02:0000109C 66FE            	  1676:             bne.s *               * branch if Z clear
02:0000109E 0DF80100        	  1677:             bset.b d6,$0100           *
02:000010A2 66FE            	  1678:             bne.s *               * branch if Z clear
02:000010A4 0FF80100        	  1679:             bset.b d7,$0100           *
02:000010A8 66FE            	  1680:             bne.s *               * branch if Z clear
02:000010AA 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
02:000010AE 0C180083        	  1682:             cmpi.b #$83,(a0)+
02:000010B2 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
02:000010B4 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
02:000010BA 4218            	  1687:             move.b #$00,(a0)+         * populate test data
02:000010BC 4218            	  1688:             move.b #$00,(a0)+         * populate test data
02:000010BE 4218            	  1689:             move.b #$00,(a0)+         * populate test data
02:000010C0 0BF90000F100    	  1690:             bset.b d5,$F100
02:000010C6 66FE            	  1691:             bne.s *               * branch if Z clear
02:000010C8 0DF90000F100    	  1692:             bset.b d6,$F100       *
02:000010CE 66FE            	  1693:             bne.s *               * branch if Z clear
02:000010D0 0FF90000F100    	  1694:             bset.b d7,$F100       *
02:000010D6 66FE            	  1695:             bne.s *               * branch if Z clear
02:000010D8 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
02:000010DE 0C100083        	  1697:             cmpi.b #$83,(a0)
02:000010E2 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
02:000010E4 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
02:000010E6 307C0100        	  1711:             move.l #$00000100,a0
02:000010EA 203C12345678    	  1712:             move.l #$12345678,d0
02:000010F0 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
02:000010F6 4290            	  1714:             move.l #0,(a0)
02:000010F8 42A80004        	  1715:             move.l #0,4(a0)
                            	  1716: 
02:000010FC 01880000        	  1717:             movep.w d0,0(a0)      * even offset
02:00001100 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
02:00001104 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
02:00001108 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
02:0000110C 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
02:00001112 66FE            	  1724:             bne.s *
02:00001114 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
02:0000111C 66FE            	  1726:             bne.s *
02:0000111E 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
02:00001126 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
02:00001128 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
02:0000112E 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
02:00001134 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
02:0000113A 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
02:00001140 01080000        	  1737:             movep.w 0(a0),d0      * even offset
02:00001144 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
02:00001148 05480004        	  1740:             movep.l 4(a0),d2      * even offset
02:0000114C 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
02:00001150 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
02:00001156 66FE            	  1744:             bne.s *
02:00001158 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
02:0000115E 66FE            	  1746:             bne.s *
02:00001160 0C8212345678    	  1747:             cmpi.l #$12345678,d2
02:00001166 66FE            	  1748:             bne.s *
02:00001168 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
02:0000116E 66FE            	  1750:             bne.s *
                            	  1751: 
02:00001170 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
02:00001172 203C12345678    	  1764:             move.l #$12345678,d0
02:00001178 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
02:0000117C 000000FF        	  1766:             ori.b  #$FF,d0
02:00001180 0A00005A        	  1767:             eori.b #$5A,d0
02:00001184 020000F0        	  1768:             andi.b #$F0,d0
02:00001188 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
02:0000118A 65FE            	  1770:             bcs.s *
02:0000118C 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
02:0000118E 4200            	  1772:             andi.b #$00,d0
02:00001190 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
02:00001192 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
02:00001194 223C12345678    	  1777:             move.l #$12345678,d1
02:0000119A 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
02:0000119E 0041FFFF        	  1779:             ori.w  #$FFFF,d1
02:000011A2 0A415A5A        	  1780:             eori.w #$5A5A,d1
02:000011A6 0241F0F0        	  1781:             andi.w #$F0F0,d1
02:000011AA 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
02:000011AC 65FE            	  1783:             bcs.s *
02:000011AE 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
02:000011B0 4241            	  1785:             andi.w #$0000,d1
02:000011B2 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
02:000011B4 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
02:000011B6 243C12345678    	  1790:             move.l #$12345678,d2
02:000011BC 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
02:000011C0 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
02:000011C6 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
02:000011CC 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
02:000011D2 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
02:000011D4 65FE            	  1796:             bcs.s *
02:000011D6 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
02:000011D8 4282            	  1798:             andi.l #$00000000,d2
02:000011DA 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
02:000011DC 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
02:000011DE 307C0100        	  1804:             move.l #$00000100,a0
02:000011E2 20BC12345678    	  1805:             move.l #$12345678,(a0)
02:000011E8 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
02:000011EC 001000FF        	  1807:             ori.b  #$FF,(a0)
02:000011F0 0A10005A        	  1808:             eori.b #$5A,(a0)
02:000011F4 021000F0        	  1809:             andi.b #$F0,(a0)
02:000011F8 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
02:000011FA 65FE            	  1811:             bcs.s *
02:000011FC 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
02:000011FE 4210            	  1813:             andi.b #$00,(a0)
02:00001200 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
02:00001202 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
02:00001204 4A10            	  1816:             cmpi.b #$00,(a0)
02:00001206 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
02:00001208 20BC12345678    	  1820:             move.l #$12345678,(a0)
02:0000120E 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
02:00001212 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
02:00001216 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
02:0000121A 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
02:0000121E 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
02:00001220 65FE            	  1826:             bcs.s *
02:00001222 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
02:00001224 4250            	  1828:             andi.w #$0000,(a0)
02:00001226 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
02:00001228 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
02:0000122A 4A50            	  1831:             cmpi.w #$00,(a0)
02:0000122C 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
02:0000122E 20BC12345678    	  1835:             move.l #$12345678,(a0)
02:00001234 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
02:00001238 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
02:0000123E 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
02:00001244 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
02:0000124A 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
02:0000124C 65FE            	  1841:             bcs.s *
02:0000124E 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
02:00001250 4290            	  1843:             andi.l #$00000000,(a0)
02:00001252 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
02:00001254 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
02:00001256 4A90            	  1846:             cmpi.l #$00,(a0)
02:00001258 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
02:0000125A 307C0100        	  1852:             move.l #$00000100,a0
02:0000125E 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
02:00001264 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
02:00001268 001800F5        	  1856:             ori.b  #$F5,(a0)+
02:0000126C 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
02:0000126E 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
02:00001270 4618            	  1860:             eori.b #$FF,(a0)+
02:00001272 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
02:00001274 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
02:00001276 021800AA        	  1864:             andi.b #$AA,(a0)+
02:0000127A 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
02:0000127C 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
02:0000127E 307C0100        	  1868:             move.l #$00000100,a0
02:00001282 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
02:00001288 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
02:0000128A 307C0100        	  1874:             move.l #$00000100,a0
02:0000128E 327C0104        	  1875:             move.l #$00000104,a1
02:00001292 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
02:00001298 22BC12345678    	  1877:             move.l #$12345678,(a1)
02:0000129E 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
02:000012A2 00585678        	  1880:             ori.w  #$5678,(a0)+
02:000012A6 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
02:000012A8 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
02:000012AA 4658            	  1884:             eori.w #$FFFF,(a0)+
02:000012AC 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
02:000012AE 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
02:000012B0 0258A55A        	  1888:             andi.w #$A55A,(a0)+
02:000012B4 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
02:000012B6 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
02:000012B8 307C0100        	  1892:             move.l #$00000100,a0
02:000012BC 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
02:000012C2 307C0104        	  1894:             move.l #$00000104,a0
02:000012C6 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
02:000012CC 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
02:000012CE 307C0100        	  1899:             move.l #$00000100,a0
02:000012D2 4298            	  1900:             move.l #$00000000,(a0)+
02:000012D4 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
02:000012DA 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
02:000012E0 307C0100        	  1903:             move.l #$00000100,a0
02:000012E4 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
02:000012E8 009812345678    	  1906:             ori.l  #$12345678,(a0)+
02:000012EE 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
02:000012F0 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
02:000012F2 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
02:000012F4 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
02:000012F6 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
02:000012F8 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
02:000012FE 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
02:00001300 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
02:00001302 307C0100        	  1918:             move.l #$00000100,a0
02:00001306 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
02:0000130C 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
02:00001312 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
02:00001318 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
02:0000131A 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
02:0000131C 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
02:00001322 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
02:00001324 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
02:00001326 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
02:00001328 6100EF20        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
02:0000132C 6100143E        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
02:00001330 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
02:00001336 66FE            	  1945:                 bne.s *
02:00001338 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
02:0000133E 66FE            	  1947:                 bne.s *
02:00001340 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
02:00001346 66FE            	  1949:                 bne.s *
02:00001348 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
02:0000134E 66FE            	  1951:                 bne.s *
                            	  1952: 
02:00001350 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
02:00001352 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
02:00001358 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
02:0000135A 307C0100        	  1966:             move.l #$00000100,a0
02:0000135E 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
02:00001364 7080            	  1970:             move.l #$FFFFFF80,d0
02:00001366 0C000080        	  1971:             cmpi.b #$80,d0
02:0000136A 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
02:0000136C 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000136E 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001370 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
02:00001372 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
02:00001378 4A01            	  1978:             cmpi.b #$00,d1
02:0000137A 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
02:0000137C 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000137E 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001380 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
02:00001382 7481D442        	  1984:             move.l #$FFFFFF02,d2
02:00001386 0C0200FF        	  1985:             cmpi.b #$FF,d2
02:0000138A 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
02:0000138C 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000138E 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001390 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
02:00001392 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
02:00001398 0C0300FF        	  1992:             cmpi.b #$FF,d3
02:0000139C 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
02:0000139E 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
02:000013A0 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
02:000013A2 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
02:000013A4 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
02:000013AA 0C408000        	  2001:             cmpi.w #$8000,d0
02:000013AE 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
02:000013B0 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
02:000013B2 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
02:000013B4 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
02:000013B6 223CFFF00000    	  2007:             move.l #$FFF00000,d1
02:000013BC 4A41            	  2008:             cmpi.w #$0000,d1
02:000013BE 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
02:000013C0 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
02:000013C2 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
02:000013C4 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
02:000013C6 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
02:000013CC 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
02:000013D0 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
02:000013D2 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
02:000013D4 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
02:000013D6 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
02:000013D8 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
02:000013DE 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
02:000013E2 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
02:000013E4 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
02:000013E6 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
02:000013E8 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
02:000013EA 203C80000000    	  2029:             move.l #$80000000,d0
02:000013F0 0C8080000000    	  2030:             cmpi.l #$80000000,d0
02:000013F6 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
02:000013F8 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
02:000013FA 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
02:000013FC 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
02:000013FE 7200            	  2036:             moveq  #$00000000,d1
02:00001400 4A81            	  2037:             cmpi.l #$00000000,d1
02:00001402 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
02:00001404 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001406 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001408 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
02:0000140A 7402            	  2043:             moveq  #$00000002,d2
02:0000140C 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
02:00001412 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
02:00001414 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001416 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001418 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
02:0000141A 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
02:00001420 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
02:00001426 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
02:00001428 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000142A 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000142C 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
02:0000142E 307C0100        	  2061:             move.l #$00000100,a0
02:00001432 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
02:00001434 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
02:0000143C 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
02:00001444 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
02:0000144A 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
02:0000144C 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000144E 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001450 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
02:00001452 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
02:0000145A 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
02:0000145E 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
02:00001460 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001462 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001464 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
02:00001466 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
02:0000146E 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
02:00001474 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
02:00001476 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001478 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000147A 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
02:0000147C 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
02:00001484 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
02:0000148A 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
02:0000148C 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000148E 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001490 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
02:00001492 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
02:0000149A 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
02:000014A0 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
02:000014A2 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
02:000014A4 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
02:000014A6 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
02:000014A8 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
02:000014B0 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
02:000014B4 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
02:000014B6 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
02:000014B8 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
02:000014BA 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
02:000014BC 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
02:000014C4 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
02:000014CA 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
02:000014CC 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
02:000014CE 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
02:000014D0 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
02:000014D2 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
02:000014DA 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
02:000014E0 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
02:000014E2 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
02:000014E4 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
02:000014E6 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
02:000014E8 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
02:000014F0 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
02:000014F8 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
02:000014FA 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
02:000014FC 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
02:000014FE 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
02:00001500 42B0700C        	  2131:             move.l #$00000000,12(a0,d7)
02:00001504 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
02:00001508 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
02:0000150A 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000150C 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000150E 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
02:00001510 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
02:00001518 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
02:00001520 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
02:00001522 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001524 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001526 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
02:00001528 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
02:00001530 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
02:00001538 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
02:0000153A 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000153C 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000153E 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
02:00001540 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
02:00001542 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
02:00001548 06000000        	  2168:             addi.b #0,d0
02:0000154C 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
02:0000154E 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001550 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001552 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001554 06000010        	  2173:             addi.b #$10,d0
02:00001558 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
02:0000155A 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000155C 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000155E 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001560 060000A5        	  2178:             addi.b #$A5,d0
02:00001564 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
02:00001566 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001568 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000156A 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
02:0000156C 0C00002D        	  2183:             cmpi.b #$2D,d0
02:00001570 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
02:00001572 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
02:00001578 06400000        	  2188:             addi.w #0,d0
02:0000157C 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
02:0000157E 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001580 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001582 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001584 06407000        	  2193:             addi.w #$7000,d0
02:00001588 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
02:0000158A 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000158C 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000158E 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001590 0640A55A        	  2198:             addi.w #$A55A,d0
02:00001594 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
02:00001596 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001598 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000159A 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
02:0000159C 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
02:000015A0 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
02:000015A2 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
02:000015A8 068000000000    	  2208:             addi.l #0,d0
02:000015AE 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
02:000015B0 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
02:000015B2 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
02:000015B4 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
02:000015B6 0680F0000000    	  2213:             addi.l #$F0000000,d0
02:000015BC 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
02:000015BE 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
02:000015C0 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
02:000015C2 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
02:000015C4 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
02:000015CA 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
02:000015CC 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
02:000015CE 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
02:000015D0 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
02:000015D2 0680A0000000    	  2223:             addi.l #$A0000000,d0
02:000015D8 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
02:000015DA 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
02:000015E0 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
02:000015E2 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
02:000015E8 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
02:000015EE 063900000000F103	  2233:             addi.b #0,$F103
02:000015F6 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
02:000015F8 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
02:000015FA 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
02:000015FC 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
02:000015FE 063900100000F103	  2238:             addi.b #$10,$F103
02:00001606 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
02:00001608 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
02:0000160A 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000160C 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
02:0000160E 063900A50000F103	  2243:             addi.b #$A5,$F103
02:00001616 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
02:00001618 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000161A 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000161C 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
02:0000161E 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
02:00001626 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
02:00001628 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
02:0000162E 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
02:00001634 067900000000F100	  2254:             addi.w #0,$F100
02:0000163C 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
02:0000163E 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001640 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001642 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001644 067970000000F100	  2259:             addi.w #$7000,$F100
02:0000164C 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
02:0000164E 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001650 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001652 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001654 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
02:0000165C 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
02:0000165E 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001660 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001662 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001664 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
02:0000166C 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
02:0000166E 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
02:00001676 F100
02:00001678 06B9000000000000	  2274:             addi.l #0,$F100
02:00001680 F100
02:00001682 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
02:00001684 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001686 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001688 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000168A 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
02:00001692 F100
02:00001694 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
02:00001696 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001698 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
02:0000169A 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000169C 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
02:000016A4 F100
02:000016A6 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
02:000016A8 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
02:000016AA 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
02:000016AC 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
02:000016AE 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
02:000016B6 F100
02:000016B8 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
02:000016BA 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
02:000016C2 F100
02:000016C4 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
02:000016C6 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
02:000016C8 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
02:000016CE 04000000        	  2306:             subi.b #0,d0
02:000016D2 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
02:000016D4 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
02:000016D6 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
02:000016D8 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
02:000016DA 04000010        	  2311:             subi.b #$10,d0
02:000016DE 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
02:000016E0 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
02:000016E2 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
02:000016E4 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
02:000016E6 040000A5        	  2316:             subi.b #$A5,d0
02:000016EA 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
02:000016EC 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
02:000016EE 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
02:000016F0 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
02:000016F2 0C0000C3        	  2321:             cmpi.b #$C3,d0
02:000016F6 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
02:000016F8 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
02:000016FE 04400000        	  2326:             subi.w #0,d0
02:00001702 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
02:00001704 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001706 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001708 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000170A 04407000        	  2331:             subi.w #$7000,d0
02:0000170E 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
02:00001710 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001712 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001714 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001716 0440A55A        	  2336:             subi.w #$A55A,d0
02:0000171A 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
02:0000171C 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000171E 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001720 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001722 0C40411E        	  2341:             cmpi.w #$411E,d0
02:00001726 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
02:00001728 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
02:0000172E 048000000000    	  2346:             subi.l #0,d0
02:00001734 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
02:00001736 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001738 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000173A 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000173C 0480F0000000    	  2351:             subi.l #$F0000000,d0
02:00001742 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
02:00001744 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001746 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001748 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
02:0000174A 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
02:00001750 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
02:00001752 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001754 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001756 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001758 0480A0000000    	  2361:             subi.l #$A0000000,d0
02:0000175E 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001760 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
02:00001766 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
02:00001768 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
02:0000176E 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
02:00001774 043900000000F103	  2371:             subi.b #0,$F103
02:0000177C 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
02:0000177E 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001780 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001782 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001784 043900100000F103	  2376:             subi.b #$10,$F103
02:0000178C 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
02:0000178E 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001790 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
02:00001792 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001794 043900A50000F103	  2381:             subi.b #$A5,$F103
02:0000179C 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
02:0000179E 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
02:000017A0 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
02:000017A2 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
02:000017A4 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
02:000017AC 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
02:000017AE 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
02:000017B4 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
02:000017BA 047900000000F100	  2392:             subi.w #0,$F100
02:000017C2 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
02:000017C4 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
02:000017C6 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
02:000017C8 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017CA 047970000000F100	  2397:             subi.w #$7000,$F100
02:000017D2 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
02:000017D4 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
02:000017D6 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
02:000017D8 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017DA 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
02:000017E2 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
02:000017E4 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
02:000017E6 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
02:000017E8 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
02:000017EA 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
02:000017F2 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
02:000017F4 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
02:000017FC F100
02:000017FE 04B9000000000000	  2412:             subi.l #0,$F100
02:00001806 F100
02:00001808 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
02:0000180A 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000180C 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
02:0000180E 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001810 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
02:00001818 F100
02:0000181A 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
02:0000181C 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000181E 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001820 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001822 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
02:0000182A F100
02:0000182C 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
02:0000182E 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001830 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
02:00001832 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
02:00001834 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
02:0000183C F100
02:0000183E 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
02:00001840 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
02:00001848 F100
02:0000184A 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
02:0000184C 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
02:0000184E 203C11223344    	  2442:             move.l #$11223344,d0
02:00001854 223C55667788    	  2443:             move.l #$55667788,d1
02:0000185A 243C8899AABB    	  2444:             move.l #$8899aabb,d2
02:00001860 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
02:00001866 7800            	  2446:             moveq  #$00000000,d4
02:00001868 7A00            	  2447:             moveq  #$00000000,d5
02:0000186A 7C00            	  2448:             moveq  #$00000000,d6
02:0000186C 7E00            	  2449:             moveq  #$00000000,d7
02:0000186E 207C44332211    	  2450:             move.l #$44332211,a0
02:00001874 227C88776655    	  2451:             move.l #$88776655,a1
02:0000187A 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
02:00001880 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
02:00001886 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
02:00001888 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
02:0000188A 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000188C 0C8400000044    	  2458:             cmpi.l #$00000044,d4
02:00001892 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
02:00001894 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
02:00001896 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
02:00001898 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000189A 0C8500007788    	  2464:             cmpi.l #$00007788,d5
02:000018A0 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
02:000018A2 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
02:000018A4 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
02:000018A6 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
02:000018A8 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
02:000018AE 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
02:000018B0 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
02:000018B2 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
02:000018B4 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
02:000018B6 0C8500006655    	  2476:             cmpi.l #$00006655,d5
02:000018BC 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
02:000018BE 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
02:000018C0 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
02:000018C2 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
02:000018C4 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
02:000018CA 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
02:000018CC 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
02:000018CE B9C2            	  2487:             cmpa.l d2,a4
02:000018D0 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
02:000018D2 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
02:000018D4 BBC1            	  2491:             cmpa.l d1,a5
02:000018D6 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
02:000018D8 203C11223344    	  2498:             move.l #$11223344,d0
02:000018DE 223C00010100    	  2499:             move.l #$00010100,d1
02:000018E4 243C8899AABB    	  2500:             move.l #$8899aabb,d2
02:000018EA 7601            	  2501:             moveq  #$00000001,d3
02:000018EC 7800            	  2502:             moveq  #$00000000,d4
02:000018EE 7A00            	  2503:             moveq  #$00000000,d5
02:000018F0 7C00            	  2504:             moveq  #$00000000,d6
02:000018F2 7E00            	  2505:             moveq  #$00000000,d7
02:000018F4 91C8            	  2506:             move.l #$00000000,a0
02:000018F6 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
02:000018FC 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
02:00001902 47F09804        	  2511:             lea 4(a0,a1.l),a3
02:00001906 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
02:0000190E 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
02:00001910 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001912 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
02:00001918 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
02:0000191A 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
02:00001922 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
02:00001924 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001926 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
02:0000192C 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
02:0000192E 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
02:00001934 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
02:00001936 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
02:00001938 0C3900B90000191B	  2529:             cmpi.b #$B9,1+MOVE2
02:00001940 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
02:00001942 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
02:00001948 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
02:0000194A 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000194C 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
02:00001952 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
02:00001954 203C11223344    	  2539:             move.l #$11223344,d0
02:0000195A 223C00010100    	  2540:             move.l #$00010100,d1
02:00001960 243C8899AABB    	  2541:             move.l #$8899aabb,d2
02:00001966 7602            	  2542:             moveq  #$00000002,d3
02:00001968 7800            	  2543:             moveq  #$00000000,d4
02:0000196A 7A00            	  2544:             moveq  #$00000000,d5
02:0000196C 7C00            	  2545:             moveq  #$00000000,d6
02:0000196E 7E00            	  2546:             moveq  #$00000000,d7
02:00001970 91C8            	  2547:             move.l #$00000000,a0
02:00001972 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
02:00001978 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
02:0000197E 49F09804        	  2552:             lea 4(a0,a1.l),a4
02:00001982 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
02:0000198A 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
02:0000198C 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
02:0000198E 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
02:00001994 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
02:00001996 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
02:0000199E 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
02:000019A0 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
02:000019A2 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
02:000019A8 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
02:000019AA 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
02:000019B0 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
02:000019B2 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
02:000019B4 0C7967FE0000199E	  2570:             cmpi.w #$67FE,8+MOVE1
02:000019BC 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
02:000019BE 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
02:000019C4 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
02:000019C6 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
02:000019C8 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
02:000019CE 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
02:000019D0 203C11223344    	  2582:             move.l #$11223344,d0
02:000019D6 223C00010100    	  2583:             move.l #$00010100,d1
02:000019DC 243C8899AABB    	  2584:             move.l #$8899aabb,d2
02:000019E2 7602            	  2585:             moveq  #$00000002,d3
02:000019E4 7800            	  2586:             moveq  #$00000000,d4
02:000019E6 7A00            	  2587:             moveq  #$00000000,d5
02:000019E8 7C00            	  2588:             moveq  #$00000000,d6
02:000019EA 7E00            	  2589:             moveq  #$00000000,d7
02:000019EC 91C8            	  2590:             move.l #$00000000,a0
02:000019EE 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
02:000019F4 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
02:000019FC 49F09804        	  2595:             lea 4(a0,a1.l),a4
02:00001A00 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
02:00001A08 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
02:00001A0A 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A0C 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
02:00001A14 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
02:00001A16 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
02:00001A1E 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
02:00001A20 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A22 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
02:00001A2A 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
02:00001A2C 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
02:00001A32 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
02:00001A34 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A36 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
02:00001A3E 1A1E
02:00001A40 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
02:00001A42 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
02:00001A4A 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
02:00001A4C 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
02:00001A4E 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
02:00001A56 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
02:00001A58 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
02:00001A5A 303C2FFF        	  2638:             move.w #$2FFF,d0
02:00001A5E 46C0            	  2639:             move.w d0,SR
02:00001A60 6AFE            	  2640:             bpl.s *           * branch if Z clear
02:00001A62 66FE            	  2641:             bne.s *           * branch if N clear
02:00001A64 68FE            	  2642:             bvc.s *           * branch if V clear
02:00001A66 64FE            	  2643:             bcc.s *           * branch if C clear
02:00001A68 303C2F00        	  2644:             move.w #$2F00,d0
02:00001A6C 44C0            	  2645:             move d0,CCR
02:00001A6E 67FE            	  2646:             beq.s *           * branch if Z set
02:00001A70 6BFE            	  2647:             bmi.s *           * branch if N set
02:00001A72 69FE            	  2648:             bvs.s *           * branch if V set
02:00001A74 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
02:00001A76 303C2000        	  2651:             move.w #$2000,d0
02:00001A7A 46C0            	  2652:             move.w d0,SR
02:00001A7C 67FE            	  2653:             beq.s *           * branch if Z set
02:00001A7E 6BFE            	  2654:             bmi.s *           * branch if N set
02:00001A80 69FE            	  2655:             bvs.s *           * branch if V set
02:00001A82 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
02:00001A84 307C0100        	  2659:             move.l #$00000100,a0
02:00001A88 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
02:00001A8C 46D0            	  2661:             move.w (a0),SR
02:00001A8E 6AFE            	  2662:             bpl.s *           * branch if Z clear
02:00001A90 66FE            	  2663:             bne.s *           * branch if N clear
02:00001A92 68FE            	  2664:             bvc.s *           * branch if V clear
02:00001A94 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
02:00001A96 30BC2000        	  2667:             move.w #$2000,(a0)
02:00001A9A 46D0            	  2668:             move.w (a0),SR
02:00001A9C 67FE            	  2669:             beq.s *           * branch if Z set
02:00001A9E 6BFE            	  2670:             bmi.s *           * branch if N set
02:00001AA0 69FE            	  2671:             bvs.s *           * branch if V set
02:00001AA2 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
02:00001AA4 307C0100        	  2675:             move.l #$00000100,a0
02:00001AA8 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
02:00001AAC 46D8            	  2677:             move.w (a0)+,SR
02:00001AAE 6AFE            	  2678:             bpl.s *           * branch if Z clear
02:00001AB0 66FE            	  2679:             bne.s *           * branch if N clear
02:00001AB2 68FE            	  2680:             bvc.s *           * branch if V clear
02:00001AB4 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
02:00001AB6 30BC2000        	  2683:             move.w #$2000,(a0)
02:00001ABA 46D8            	  2684:             move.w (a0)+,SR
02:00001ABC 67FE            	  2685:             beq.s *           * branch if Z set
02:00001ABE 6BFE            	  2686:             bmi.s *           * branch if N set
02:00001AC0 69FE            	  2687:             bvs.s *           * branch if V set
02:00001AC2 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
02:00001AC4 307C0102        	  2691:             move.l #$00000102,a0
02:00001AC8 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
02:00001ACC 46D8            	  2693:             move.w (a0)+,SR
02:00001ACE 6AFE            	  2694:             bpl.s *           * branch if Z clear
02:00001AD0 66FE            	  2695:             bne.s *           * branch if N clear
02:00001AD2 68FE            	  2696:             bvc.s *           * branch if V clear
02:00001AD4 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
02:00001AD6 30BC2000        	  2699:             move.w #$2000,(a0)
02:00001ADA 46D8            	  2700:             move.w (a0)+,SR
02:00001ADC 67FE            	  2701:             beq.s *           * branch if Z set
02:00001ADE 6BFE            	  2702:             bmi.s *           * branch if N set
02:00001AE0 69FE            	  2703:             bvs.s *           * branch if V set
02:00001AE2 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
02:00001AE4 307C0102        	  2707:             move.l #$00000102,a0
02:00001AE8 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
02:00001AEE 46E80002        	  2709:             move.w 2(a0),SR
02:00001AF2 6AFE            	  2710:             bpl.s *           * branch if Z clear
02:00001AF4 66FE            	  2711:             bne.s *           * branch if N clear
02:00001AF6 68FE            	  2712:             bvc.s *           * branch if V clear
02:00001AF8 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
02:00001AFA 317C20000002    	  2715:             move.w #$2000,2(a0)
02:00001B00 46E80002        	  2716:             move.w 2(a0),SR
02:00001B04 67FE            	  2717:             beq.s *           * branch if Z set
02:00001B06 6BFE            	  2718:             bmi.s *           * branch if N set
02:00001B08 69FE            	  2719:             bvs.s *           * branch if V set
02:00001B0A 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
02:00001B0C 307C0100        	  2723:             move.l #$00000100,a0
02:00001B10 7002            	  2724:             moveq  #$00000002,d0
02:00001B12 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
02:00001B18 46F00802        	  2726:             move.w 2(a0,d0.l),SR
02:00001B1C 6AFE            	  2727:             bpl.s *           * branch if Z clear
02:00001B1E 66FE            	  2728:             bne.s *           * branch if N clear
02:00001B20 68FE            	  2729:             bvc.s *           * branch if V clear
02:00001B22 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
02:00001B24 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
02:00001B2A 46F00802        	  2733:             move.w 2(a0,d0.l),SR
02:00001B2E 67FE            	  2734:             beq.s *           * branch if Z set
02:00001B30 6BFE            	  2735:             bmi.s *           * branch if N set
02:00001B32 69FE            	  2736:             bvs.s *           * branch if V set
02:00001B34 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
02:00001B36 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
02:00001B3C 46F80100        	  2741:             move.w $0100,SR
02:00001B40 6AFE            	  2742:             bpl.s *           * branch if Z clear
02:00001B42 66FE            	  2743:             bne.s *           * branch if N clear
02:00001B44 68FE            	  2744:             bvc.s *           * branch if V clear
02:00001B46 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
02:00001B48 31FC20000100    	  2747:             move.w #$2000,$0100
02:00001B4E 46F80100        	  2748:             move.w $0100,SR
02:00001B52 67FE            	  2749:             beq.s *           * branch if Z set
02:00001B54 6BFE            	  2750:             bmi.s *           * branch if N set
02:00001B56 69FE            	  2751:             bvs.s *           * branch if V set
02:00001B58 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
02:00001B5A 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
02:00001B62 46F900010100    	  2756:             move.w $00010100,SR
02:00001B68 6AFE            	  2757:             bpl.s *           * branch if Z clear
02:00001B6A 66FE            	  2758:             bne.s *           * branch if N clear
02:00001B6C 68FE            	  2759:             bvc.s *           * branch if V clear
02:00001B6E 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
02:00001B70 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
02:00001B78 46F900010100    	  2763:             move.w $00010100,SR
02:00001B7E 67FE            	  2764:             beq.s *           * branch if Z set
02:00001B80 6BFE            	  2765:             bmi.s *           * branch if N set
02:00001B82 69FE            	  2766:             bvs.s *           * branch if V set
02:00001B84 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
02:00001B86 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
02:00001B8A 67FE            	  2771:             beq.s *           * branch if Z set
02:00001B8C 6BFE            	  2772:             bmi.s *           * branch if N set
02:00001B8E 69FE            	  2773:             bvs.s *           * branch if V set
02:00001B90 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
02:00001B92 7000            	  2777:             moveq  #$00000000,d0
02:00001B94 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
02:00001B98 67FE            	  2779:             beq.s *           * branch if Z set
02:00001B9A 6BFE            	  2780:             bmi.s *           * branch if N set
02:00001B9C 69FE            	  2781:             bvs.s *           * branch if V set
02:00001B9E 65FE            	  2782:             bcs.s *           * branch if C set
02:00001BA0 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
02:00001BA4 67FE            	  2784:             beq.s *           * branch if Z set
02:00001BA6 6BFE            	  2785:             bmi.s *           * branch if N set
02:00001BA8 69FE            	  2786:             bvs.s *           * branch if V set
02:00001BAA 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
02:00001BAC 46FC2FFF        	  2790:             move.w #$2FFF,SR
02:00001BB0 66FE            	  2791:             bne.s *           * branch if Z clear
02:00001BB2 6AFE            	  2792:             bpl.s *           * branch if N clear
02:00001BB4 68FE            	  2793:             bvc.s *           * branch if V clear
02:00001BB6 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
02:00001BB8 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
02:00001BBC 40C0            	  2804:             move.w SR,d0
02:00001BBE 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
02:00001BC2 307C0100        	  2810:             move.l #$00000100,a0
02:00001BC6 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
02:00001BCA 40D0            	  2812:             move.w SR,(a0)
02:00001BCC 0C50275A        	  2813:             cmpi.w #$275A,(a0)
02:00001BD0 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
02:00001BD2 307C0100        	  2817:             move.l #$00000100,a0
02:00001BD6 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
02:00001BDA 40D8            	  2819:             move.w SR,(a0)+
02:00001BDC 307C0100        	  2820:             move.l #$00000100,a0
02:00001BE0 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
02:00001BE4 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
02:00001BE6 307C0102        	  2825:             move.l #$00000102,a0
02:00001BEA 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
02:00001BEE 40E0            	  2827:             move.w SR,-(a0)
02:00001BF0 307C0100        	  2828:             move.l #$00000100,a0
02:00001BF4 0C502766        	  2829:             cmpi.w #$2766,(a0)
02:00001BF8 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
02:00001BFA 307C0102        	  2833:             move.l #$00000102,a0
02:00001BFE 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
02:00001C02 40E80004        	  2835:             move.w SR,4(a0)
02:00001C06 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
02:00001C0C 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
02:00001C0E 307C0102        	  2840:             move.l #$00000102,a0
02:00001C12 7004            	  2841:             moveq  #$00000004,d0
02:00001C14 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
02:00001C18 40F00804        	  2843:             move.w SR,4(a0,d0.l)
02:00001C1C 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
02:00001C22 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
02:00001C24 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
02:00001C28 40F80102        	  2849:             move.w SR,$0102
02:00001C2C 0C7827770102    	  2850:             cmpi.w #$2777,$0102
02:00001C32 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
02:00001C34 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
02:00001C38 40F900010102    	  2855:             move.w SR,$10102
02:00001C3E 0C79277700010102	  2856:             cmpi.w #$2777,$10102
02:00001C46 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
02:00001C48 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
02:00001C4C 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
02:00001C4E 707F            	  2873:             move.l #$0000007F,d0
02:00001C50 223C00008FFF    	  2874:             move.l #$00008FFF,d1
02:00001C56 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
02:00001C58 4880            	  2877:             ext.w d0
02:00001C5A 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001C5C 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
02:00001C5E 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
02:00001C64 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
02:00001C66 48C1            	  2883:             ext.l d1
02:00001C68 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001C6A 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
02:00001C6C 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
02:00001C72 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
02:00001C74 48C2            	  2889:             ext.l d2
02:00001C76 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
02:00001C78 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
02:00001C7A 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
02:00001C80 4840            	  2906:             swap d0
02:00001C82 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001C84 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
02:00001C86 0C8056781234    	  2909:             cmpi.l #$56781234,d0
02:00001C8C 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
02:00001C8E 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
02:00001C90 207C00345678    	  2924:             move.l #$00345678,a0
02:00001C96 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
02:00001C98 4DD0            	  2928:             lea (a0),a6
02:00001C9A 200E            	  2929:             move.l a6,d0
02:00001C9C 0C8000345678    	  2930:             cmpi.l #$00345678,d0
02:00001CA2 66FE            	  2931:             bne.s *                   * branch if Z set
02:00001CA4 4850            	  2932:             pea (a0)
02:00001CA6 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
02:00001CAC 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
02:00001CAE 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
02:00001CB0 4DE80004        	  2939:             lea 4(a0),a6
02:00001CB4 200E            	  2940:             move.l a6,d0
02:00001CB6 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
02:00001CBC 66FE            	  2942:             bne.s *                   * branch if Z set
02:00001CBE 48680004        	  2943:             pea 4(a0)
02:00001CC2 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
02:00001CC8 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
02:00001CCA 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
02:00001CCC 4DF04004        	  2950:             lea 4(a0,d4),a6
02:00001CD0 200E            	  2951:             move.l a6,d0
02:00001CD2 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
02:00001CD8 66FE            	  2953:             bne.s *                   * branch if Z set
02:00001CDA 48704804        	  2954:             pea 4(a0,d4.l)
02:00001CDE 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
02:00001CE4 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
02:00001CE6 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
02:00001CE8 4DF81234        	  2961:             lea $1234,a6
02:00001CEC 200E            	  2962:             move.l a6,d0
02:00001CEE 0C401234        	  2963:             cmpi.w #$1234,d0
02:00001CF2 66FE            	  2964:             bne.s *                   * branch if Z set
02:00001CF4 48781234        	  2965:             pea $1234
02:00001CF8 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
02:00001CFE 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
02:00001D00 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
02:00001D02 4DF900345678    	  2972:             lea $00345678,a6
02:00001D08 200E            	  2973:             move.l a6,d0
02:00001D0A B08E            	  2974:             cmp.l a6,d0
02:00001D0C 66FE            	  2975:             bne.s *                   * branch if Z set
02:00001D0E 487900345678    	  2976:             pea $00345678
02:00001D14 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
02:00001D1A 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
02:00001D1C 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
02:00001D1E 4DFA0008        	  2983:             lea LEA1(pc),a6
02:00001D22 200E            	  2984:             move.l a6,d0
02:00001D24 B08E            	  2985:             cmp.l a6,d0
02:00001D26 66FE            	  2986:             bne.s *                   * branch if Z set
02:00001D28 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
02:00001D2C 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
02:00001D32 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
02:00001D34 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
02:00001D36 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
02:00001D3A 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
02:00001D3C 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
02:00001D40 4210            	  3014:             move.b #$00,(a0)
02:00001D42 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001D44 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
02:00001D46 4AD0            	  3017:             tas (a0)
02:00001D48 0C100080        	  3018:             cmpi.b #$80,(a0)
02:00001D4C 66FE            	  3019:             bne.s *                   * branch if Z set
02:00001D4E 10BC00F5        	  3020:             move.b #$F5,(a0)
02:00001D52 4AD0            	  3021:             tas (a0)
02:00001D54 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001D56 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
02:00001D58 4AD0            	  3024:             tas (a0)
02:00001D5A 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
02:00001D5E 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
02:00001D60 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
02:00001D62 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
02:00001D66 4210            	  3043:             move.b #$00,(a0)
02:00001D68 4A10            	  3044:             tst.b (a0)
02:00001D6A 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001D6C 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
02:00001D6E 10BC00F5        	  3047:             move.b #$F5,(a0)
02:00001D72 4A10            	  3048:             tst.b (a0)
02:00001D74 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001D76 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
02:00001D78 4250            	  3053:             move.w #$0000,(a0)
02:00001D7A 4A50            	  3054:             tst.w (a0)
02:00001D7C 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001D7E 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
02:00001D80 30BCF567        	  3057:             move.w #$F567,(a0)
02:00001D84 4A50            	  3058:             tst.w (a0)
02:00001D86 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001D88 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
02:00001D8A 4290            	  3063:             move.l #$00000000,(a0)
02:00001D8C 4A90            	  3064:             tst.l (a0)
02:00001D8E 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001D90 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
02:00001D92 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
02:00001D98 4A90            	  3068:             tst.l (a0)
02:00001D9A 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001D9C 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
02:00001D9E 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
02:00001DA0 207C11223344    	  3083:             move.l #$11223344,a0
02:00001DA6 203C11223344    	  3084:             move.l #$11223344,d0
02:00001DAC 4E500000        	  3085:             link a0,#$0
02:00001DB0 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
02:00001DB6 4E58            	  3088:             unlk a0
02:00001DB8 B1C0            	  3089:             cmp.l d0,a0
02:00001DBA 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
02:00001DBC 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
02:00001DBE 207C11223344    	  3101:             move.l #$11223344,a0
02:00001DC4 4E60            	  3102:             move a0,USP
02:00001DC6 4E69            	  3103:             move USP,a1
02:00001DC8 B3C8            	  3104:             cmp.l a0,a1
02:00001DCA 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
02:00001DCC 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: op_CHK:
02:00001DCE 303C1122        	  3116:             move.w #$1122,d0
02:00001DD2 323C1122        	  3117:             move.w #$1122,d1
02:00001DD6 4380            	  3118:             chk d0,d1
                            	  3119: 
02:00001DD8 4E71            	  3120:             nop
02:00001DDA 4E71            	  3121:             nop
                            	  3122: 
02:00001DDC 323C1122        	  3123:             move.w #$1122,d1
02:00001DE0 43BC1122        	  3124:             chk #$1122,d1
                            	  3125: 
02:00001DE4 323C1122        	  3126:             move.w #$1122,d1
02:00001DE8 43BC007A        	  3127:             chk #00122,d1
02:00001DEC BCBCEEEE0006    	  3128:             cmp.l #$EEEE0006,d6
02:00001DF2 66FE            	  3129:             bne.s *                   * branch if Z set
                            	  3130: 
02:00001DF4 303C1122        	  3131:             move.w #$1122,d0
02:00001DF8 323C8000        	  3132:             move.w #$8000,d1
02:00001DFC 4380            	  3133:             chk d0,d1
02:00001DFE BCBCEEEE0006    	  3134:             cmp.l #$EEEE0006,d6
02:00001E04 66FE            	  3135:             bne.s *                   * branch if Z set
                            	  3136: 
02:00001E06 4E75            	  3137:             rts
                            	  3138: 
                            	  3139: 
                            	  3140: *-----------------------------------------------------------
                            	  3141: *-----------------------------------------------------------
                            	  3142: * OPCODE : NEGS
                            	  3143: *-----------------------------------------------------------
                            	  3144: *-----------------------------------------------------------
                            	  3145: op_NEGS:
                            	  3146: 
                            	  3147: *     NOT - BYTE
02:00001E08 307C0100        	  3148:             move.l #$00000100,a0
02:00001E0C 7000            	  3149:             moveq  #$00000000,d0
02:00001E0E 4600            	  3150:             not.b d0
02:00001E10 6AFE            	  3151:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E12 67FE            	  3152:             beq.s *                   * Check Z Flag  beq/bne
02:00001E14 4600            	  3153:             not.b d0
02:00001E16 6BFE            	  3154:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E18 66FE            	  3155:             bne.s *                   * Check Z Flag  beq/bne
02:00001E1A 4A00            	  3156:             cmpi.b #$00,d0
02:00001E1C 66FE            	  3157:             bne.s *                   * Check Z Flag  beq/bne
02:00001E1E 10BC0080        	  3158:             move.b #$80,(a0)
02:00001E22 4610            	  3159:             not.b (a0)
02:00001E24 6BFE            	  3160:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E26 67FE            	  3161:             beq.s *                   * Check Z Flag  beq/bne
02:00001E28 4610            	  3162:             not.b (a0)
02:00001E2A 6AFE            	  3163:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E2C 67FE            	  3164:             beq.s *                   * Check Z Flag  beq/bne
02:00001E2E 0C100080        	  3165:             cmpi.b #$80,(a0)
02:00001E32 66FE            	  3166:             bne.s *                   * Check Z Flag  beq/bne
                            	  3167: 
                            	  3168: *     NOT - WORD
02:00001E34 307C0100        	  3169:             move.l #$00000100,a0
02:00001E38 7000            	  3170:             moveq  #$00000000,d0
02:00001E3A 4640            	  3171:             not.w d0
02:00001E3C 6AFE            	  3172:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E3E 67FE            	  3173:             beq.s *                   * Check Z Flag  beq/bne
02:00001E40 4640            	  3174:             not.w d0
02:00001E42 6BFE            	  3175:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E44 66FE            	  3176:             bne.s *                   * Check Z Flag  beq/bne
02:00001E46 4A40            	  3177:             cmpi.w #$0000,d0
02:00001E48 66FE            	  3178:             bne.s *                   * Check Z Flag  beq/bne
02:00001E4A 30BC5A5A        	  3179:             move.w #$5a5a,(a0)
02:00001E4E 4650            	  3180:             not.w (a0)
02:00001E50 6AFE            	  3181:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E52 67FE            	  3182:             beq.s *                   * Check Z Flag  beq/bne
02:00001E54 4650            	  3183:             not.w (a0)
02:00001E56 6BFE            	  3184:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E58 67FE            	  3185:             beq.s *                   * Check Z Flag  beq/bne
02:00001E5A 0C505A5A        	  3186:             cmpi.w #$5a5a,(a0)
02:00001E5E 66FE            	  3187:             bne.s *                   * Check Z Flag  beq/bne
                            	  3188: 
                            	  3189: *     NOT - LONG
02:00001E60 307C0100        	  3190:             move.l #$00000100,a0
02:00001E64 7000            	  3191:             moveq  #$00000000,d0
02:00001E66 4680            	  3192:             not.l d0
02:00001E68 6AFE            	  3193:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E6A 67FE            	  3194:             beq.s *                   * Check Z Flag  beq/bne
02:00001E6C 4680            	  3195:             not.l d0
02:00001E6E 6BFE            	  3196:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E70 66FE            	  3197:             bne.s *                   * Check Z Flag  beq/bne
02:00001E72 4A80            	  3198:             cmpi.l #$00000000,d0
02:00001E74 66FE            	  3199:             bne.s *                   * Check Z Flag  beq/bne
02:00001E76 20BC5A5A1234    	  3200:             move.l #$5a5a1234,(a0)
02:00001E7C 4690            	  3201:             not.l (a0)
02:00001E7E 6AFE            	  3202:             bpl.s *                   * Check N Flag  bmi/bpl
02:00001E80 67FE            	  3203:             beq.s *                   * Check Z Flag  beq/bne
02:00001E82 4690            	  3204:             not.l (a0)
02:00001E84 6BFE            	  3205:             bmi.s *                   * Check N Flag  bmi/bpl
02:00001E86 67FE            	  3206:             beq.s *                   * Check Z Flag  beq/bne
02:00001E88 0C905A5A1234    	  3207:             cmpi.l #$5a5a1234,(a0)
02:00001E8E 66FE            	  3208:             bne.s *                   * Check Z Flag  beq/bne
                            	  3209: 
                            	  3210: * -----
                            	  3211: 
                            	  3212: *     NEG - BYTE
02:00001E90 307C0100        	  3213:             move.l #$00000100,a0
02:00001E94 7000            	  3214:             moveq  #$00000000,d0
02:00001E96 7240D241        	  3215:             move.l #$00000080,d1
02:00001E9A 4400            	  3216:             neg.b d0
02:00001E9C 6BFE            	  3217:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001E9E 66FE            	  3218:             bne.s *                   * Check Z Flag  beq/bne 1
02:00001EA0 65FE            	  3219:             bcs.s *                   * Check C Flag  bcc/bcs 1
02:00001EA2 69FE            	  3220:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001EA4 4401            	  3221:             neg.b d1
02:00001EA6 6AFE            	  3222:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001EA8 67FE            	  3223:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001EAA 64FE            	  3224:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001EAC 68FE            	  3225:             bvc.s *                   * Check V Flag  bvc/bvs 0
02:00001EAE 0C010080        	  3226:             cmpi.b #$80,d1
02:00001EB2 66FE            	  3227:             bne.s *                   * Check Z Flag  beq/bne
02:00001EB4 10BC007F        	  3228:             move.b #$7F,(a0)
02:00001EB8 4410            	  3229:             neg.b (a0)
02:00001EBA 6AFE            	  3230:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001EBC 67FE            	  3231:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001EBE 64FE            	  3232:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001EC0 69FE            	  3233:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001EC2 10BC00F5        	  3234:             move.b #$F5,(a0)
02:00001EC6 4410            	  3235:             neg.b (a0)
02:00001EC8 6BFE            	  3236:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001ECA 67FE            	  3237:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001ECC 64FE            	  3238:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001ECE 69FE            	  3239:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001ED0 0C10000B        	  3240:             cmpi.b #$0B,(a0)
02:00001ED4 66FE            	  3241:             bne.s *                   * Check Z Flag  beq/bne
                            	  3242: 
                            	  3243: * -----
                            	  3244: 
                            	  3245: *     NEG - WORD
02:00001ED6 307C0100        	  3246:             move.l #$00000100,a0
02:00001EDA 7000            	  3247:             moveq  #$00000000,d0
02:00001EDC 223C00008000    	  3248:             move.l #$00008000,d1
02:00001EE2 4440            	  3249:             neg.w d0
02:00001EE4 6BFE            	  3250:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001EE6 66FE            	  3251:             bne.s *                   * Check Z Flag  beq/bne 1
02:00001EE8 65FE            	  3252:             bcs.s *                   * Check C Flag  bcc/bcs 1
02:00001EEA 69FE            	  3253:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001EEC 4441            	  3254:             neg.w d1
02:00001EEE 6AFE            	  3255:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001EF0 67FE            	  3256:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001EF2 64FE            	  3257:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001EF4 68FE            	  3258:             bvc.s *                   * Check V Flag  bvc/bvs 0
02:00001EF6 0C418000        	  3259:             cmpi.w #$8000,d1
02:00001EFA 66FE            	  3260:             bne.s *                   * Check Z Flag  beq/bne
02:00001EFC 30BC7FFF        	  3261:             move.w #$7FFF,(a0)
02:00001F00 4450            	  3262:             neg.w (a0)
02:00001F02 6AFE            	  3263:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F04 67FE            	  3264:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F06 64FE            	  3265:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F08 69FE            	  3266:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F0A 30BCF578        	  3267:             move.w #$F578,(a0)
02:00001F0E 4450            	  3268:             neg.w (a0)
02:00001F10 6BFE            	  3269:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F12 67FE            	  3270:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F14 64FE            	  3271:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F16 69FE            	  3272:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F18 0C500A88        	  3273:             cmpi.w #$0A88,(a0)
02:00001F1C 66FE            	  3274:             bne.s *                   * Check Z Flag  beq/bne
                            	  3275: 
                            	  3276: * -----
                            	  3277: 
                            	  3278: *     NEG - LONG
02:00001F1E 307C0100        	  3279:             move.l #$00000100,a0
02:00001F22 7000            	  3280:             moveq  #$00000000,d0
02:00001F24 223C80000000    	  3281:             move.l #$80000000,d1
02:00001F2A 4480            	  3282:             neg.l d0
02:00001F2C 6BFE            	  3283:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F2E 66FE            	  3284:             bne.s *                   * Check Z Flag  beq/bne 1
02:00001F30 65FE            	  3285:             bcs.s *                   * Check C Flag  bcc/bcs 1
02:00001F32 69FE            	  3286:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F34 4481            	  3287:             neg.l d1
02:00001F36 6AFE            	  3288:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F38 67FE            	  3289:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F3A 64FE            	  3290:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F3C 68FE            	  3291:             bvc.s *                   * Check V Flag  bvc/bvs 0
02:00001F3E 0C8180000000    	  3292:             cmpi.l #$80000000,d1
02:00001F44 66FE            	  3293:             bne.s *                   * Check Z Flag  beq/bne
02:00001F46 20BC7FFFFFFF    	  3294:             move.l #$7FFFFFFF,(a0)
02:00001F4C 4490            	  3295:             neg.l (a0)
02:00001F4E 6AFE            	  3296:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001F50 67FE            	  3297:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F52 64FE            	  3298:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F54 69FE            	  3299:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F56 20BCF5781234    	  3300:             move.l #$F5781234,(a0)
02:00001F5C 4490            	  3301:             neg.l (a0)
02:00001F5E 6BFE            	  3302:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F60 67FE            	  3303:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F62 64FE            	  3304:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001F64 69FE            	  3305:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F66 0C900A87EDCC    	  3306:             cmpi.l #$0A87EDCC,(a0)
02:00001F6C 66FE            	  3307:             bne.s *                   * Check Z Flag  beq/bne
                            	  3308: 
                            	  3309: 
                            	  3310: * -----
                            	  3311: 
                            	  3312: *     NEGX - BYTE
02:00001F6E 307C0100        	  3313:             move.l #$00000100,a0
02:00001F72 7000            	  3314:             moveq  #$00000000,d0
02:00001F74 7240D241        	  3315:             move.l #$00000080,d1
02:00001F78 003C0010        	  3316:             ori.b #$10,CCR        * Set X Flag
02:00001F7C 4000            	  3317:             negx.b d0
02:00001F7E 6AFE            	  3318:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00001F80 67FE            	  3319:             beq.s *                   * Check Z Flag  beq/bne 1
02:00001F82 64FE            	  3320:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:00001F84 69FE            	  3321:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F86 023C00EF        	  3322:             andi.b #$EF,CCR       * Clear X Flag
02:00001F8A 4000            	  3323:             negx.b d0
02:00001F8C 6BFE            	  3324:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001F8E 67FE            	  3325:             beq.s *                   * Check Z Flag  beq/bne 1
02:00001F90 64FE            	  3326:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:00001F92 69FE            	  3327:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001F94 003C0010        	  3328:             ori.b #$10,CCR        * Set X Flag
02:00001F98 4001            	  3329:             negx.b d1
02:00001F9A 6BFE            	  3330:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:00001F9C 67FE            	  3331:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001F9E 64FE            	  3332:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FA0 69FE            	  3333:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:00001FA2 0C01007F        	  3334:             cmpi.b #$7F,d1
02:00001FA6 66FE            	  3335:             bne.s *                   * Check Z Flag  beq/bne
02:00001FA8 023C00EF        	  3336:             andi.b #$EF,CCR       * Clear X Flag
02:00001FAC 4001            	  3337:             negx.b d1
02:00001FAE 6AFE            	  3338:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001FB0 67FE            	  3339:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FB2 64FE            	  3340:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FB4 69FE            	  3341:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:00001FB6 0C010081        	  3342:             cmpi.b #$81,d1
02:00001FBA 66FE            	  3343:             bne.s *                   * Check Z Flag  beq/bne
02:00001FBC 10BC007F        	  3344:             move.b #$7F,(a0)
02:00001FC0 003C0010        	  3345:             ori.b #$10,CCR        * Set X Flag
02:00001FC4 4010            	  3346:             negx.b (a0)
02:00001FC6 6AFE            	  3347:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001FC8 67FE            	  3348:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FCA 64FE            	  3349:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3350:             * I think overflow should happen here.
                            	  3351: *            bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FCC 10BC007F        	  3352:             move.b #$7F,(a0)
02:00001FD0 023C00EF        	  3353:             andi.b #$EF,CCR       * Clear X Flag
02:00001FD4 4010            	  3354:             negx.b (a0)
02:00001FD6 6AFE            	  3355:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00001FD8 67FE            	  3356:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FDA 64FE            	  3357:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FDC 69FE            	  3358:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FDE 10BC00F5        	  3359:             move.b #$F5,(a0)
02:00001FE2 003C0010        	  3360:             ori.b #$10,CCR        * Set X Flag
02:00001FE6 4010            	  3361:             negx.b (a0)
02:00001FE8 6BFE            	  3362:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00001FEA 67FE            	  3363:             beq.s *                   * Check Z Flag  beq/bne 0
02:00001FEC 64FE            	  3364:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00001FEE 69FE            	  3365:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00001FF0 0C10000A        	  3366:             cmpi.b #$0A,(a0)
02:00001FF4 66FE            	  3367:             bne.s *                   * Check Z Flag  beq/bne
02:00001FF6 023C00EF        	  3368:             andi.b #$EF,CCR       * Clear X Flag
02:00001FFA 4010            	  3369:             negx.b (a0)
02:00001FFC 6AFE            	  3370:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00001FFE 67FE            	  3371:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002000 64FE            	  3372:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002002 69FE            	  3373:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002004 0C1000F6        	  3374:             cmpi.b #$F6,(a0)
02:00002008 66FE            	  3375:             bne.s *                   * Check Z Flag  beq/bne
                            	  3376: 
                            	  3377: 
                            	  3378: 
                            	  3379: * -----
                            	  3380: 
                            	  3381: *     NEGX - WORD
02:0000200A 307C0100        	  3382:             move.l #$00000100,a0
02:0000200E 7000            	  3383:             moveq  #$00000000,d0
02:00002010 223C00008000    	  3384:             move.l #$00008000,d1
02:00002016 003C0010        	  3385:             ori.b #$10,CCR        * Set X Flag
02:0000201A 4040            	  3386:             negx.w d0
02:0000201C 6AFE            	  3387:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:0000201E 67FE            	  3388:             beq.s *                   * Check Z Flag  beq/bne 1
02:00002020 64FE            	  3389:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:00002022 69FE            	  3390:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002024 023C00EF        	  3391:             andi.b #$EF,CCR       * Clear X Flag
02:00002028 4040            	  3392:             negx.w d0
02:0000202A 6BFE            	  3393:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:0000202C 67FE            	  3394:             beq.s *                   * Check Z Flag  beq/bne 1
02:0000202E 64FE            	  3395:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:00002030 69FE            	  3396:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002032 003C0010        	  3397:             ori.b #$10,CCR        * Set X Flag
02:00002036 4041            	  3398:             negx.w d1
02:00002038 6BFE            	  3399:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:0000203A 67FE            	  3400:             beq.s *                   * Check Z Flag  beq/bne 0
02:0000203C 64FE            	  3401:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:0000203E 69FE            	  3402:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:00002040 0C417FFF        	  3403:             cmpi.w #$7FFF,d1
02:00002044 66FE            	  3404:             bne.s *                   * Check Z Flag  beq/bne
02:00002046 023C00EF        	  3405:             andi.b #$EF,CCR       * Clear X Flag
02:0000204A 4041            	  3406:             negx.w d1
02:0000204C 6AFE            	  3407:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:0000204E 67FE            	  3408:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002050 64FE            	  3409:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002052 69FE            	  3410:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:00002054 0C418001        	  3411:             cmpi.w #$8001,d1
02:00002058 66FE            	  3412:             bne.s *                   * Check Z Flag  beq/bne
02:0000205A 30BC7FFF        	  3413:             move.w #$7FFF,(a0)
02:0000205E 003C0010        	  3414:             ori.b #$10,CCR        * Set X Flag
02:00002062 4050            	  3415:             negx.w (a0)
02:00002064 6AFE            	  3416:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002066 67FE            	  3417:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002068 64FE            	  3418:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3419: ***            
                            	  3420: *            bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000206A 30BCF567        	  3421:             move.w #$F567,(a0)
02:0000206E 023C00EF        	  3422:             andi.b #$EF,CCR       * Clear X Flag
02:00002072 4050            	  3423:             negx.w (a0)
02:00002074 6BFE            	  3424:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:00002076 67FE            	  3425:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002078 64FE            	  3426:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:0000207A 69FE            	  3427:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000207C 30BCF567        	  3428:             move.w #$F567,(a0)
02:00002080 003C0010        	  3429:             ori.b #$10,CCR        * Set X Flag
02:00002084 4050            	  3430:             negx.w (a0)
02:00002086 6BFE            	  3431:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002088 67FE            	  3432:             beq.s *                   * Check Z Flag  beq/bne 0
02:0000208A 64FE            	  3433:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:0000208C 69FE            	  3434:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000208E 0C500A98        	  3435:             cmpi.w #$0A98,(a0)
02:00002092 66FE            	  3436:             bne.s *                   * Check Z Flag  beq/bne
02:00002094 023C00EF        	  3437:             andi.b #$EF,CCR       * Clear X Flag
02:00002098 4050            	  3438:             negx.w (a0)
02:0000209A 6AFE            	  3439:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:0000209C 67FE            	  3440:             beq.s *                   * Check Z Flag  beq/bne 0
02:0000209E 64FE            	  3441:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000020A0 69FE            	  3442:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000020A2 0C50F568        	  3443:             cmpi.w #$F568,(a0)
02:000020A6 66FE            	  3444:             bne.s *                   * Check Z Flag  beq/bne
                            	  3445: 
                            	  3446: 
                            	  3447: * -----
                            	  3448: 
                            	  3449: *     NEGX - LONG
02:000020A8 307C0100        	  3450:             move.l #$00000100,a0
02:000020AC 7000            	  3451:             moveq  #$00000000,d0
02:000020AE 223C80000000    	  3452:             move.l #$80000000,d1
02:000020B4 003C0010        	  3453:             ori.b #$10,CCR        * Set X Flag
02:000020B8 4080            	  3454:             negx.l d0
02:000020BA 6AFE            	  3455:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:000020BC 67FE            	  3456:             beq.s *                   * Check Z Flag  beq/bne 1
02:000020BE 64FE            	  3457:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:000020C0 69FE            	  3458:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000020C2 023C00EF        	  3459:             andi.b #$EF,CCR       * Clear X Flag
02:000020C6 4080            	  3460:             negx.l d0
02:000020C8 6BFE            	  3461:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:000020CA 67FE            	  3462:             beq.s *                   * Check Z Flag  beq/bne 1
02:000020CC 64FE            	  3463:             bcc.s *                   * Check C Flag  bcc/bcs 1
02:000020CE 69FE            	  3464:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:000020D0 003C0010        	  3465:             ori.b #$10,CCR        * Set X Flag
02:000020D4 4081            	  3466:             negx.l d1
02:000020D6 6BFE            	  3467:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:000020D8 67FE            	  3468:             beq.s *                   * Check Z Flag  beq/bne 0
02:000020DA 64FE            	  3469:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:000020DC 69FE            	  3470:             bvs.s *                   * Check V Flag  bvc/bvs 0
02:000020DE 0C817FFFFFFF    	  3471:             cmpi.l #$7FFFFFFF,d1
02:000020E4 66FE            	  3472:             bne.s *                   * Check Z Flag  beq/bne
02:000020E6 023C00EF        	  3473:             andi.b #$EF,CCR       * Clear X Flag
02:000020EA 4081            	  3474:             negx.l d1
02:000020EC 6AFE            	  3475:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:000020EE 67FE            	  3476:             beq.s *                   * Check Z Flag  beq/bne 0
02:000020F0 64FE            	  3477:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3478: ****            
                            	  3479: *            bvs.s *                   * Check V Flag  bvc/bvs 0
02:000020F2 0C8180000001    	  3480:             cmpi.l #$80000001,d1
02:000020F8 66FE            	  3481:             bne.s *                   * Check Z Flag  beq/bne
02:000020FA 20BC00007FFF    	  3482:             move.l #$7FFF,(a0)
02:00002100 003C0010        	  3483:             ori.b #$10,CCR        * Set X Flag
02:00002104 4090            	  3484:             negx.l (a0)
02:00002106 6AFE            	  3485:             bpl.s *                   * Check N Flag  bmi/bpl 1
02:00002108 67FE            	  3486:             beq.s *                   * Check Z Flag  beq/bne 0
02:0000210A 64FE            	  3487:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3488: ****            
                            	  3489: *            bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000210C 20BCF5671234    	  3490:             move.l #$F5671234,(a0)
02:00002112 023C00EF        	  3491:             andi.b #$EF,CCR       * Clear X Flag
02:00002116 4090            	  3492:             negx.l (a0)
02:00002118 6BFE            	  3493:             bmi.s *                   * Check N Flag  bmi/bpl 1
02:0000211A 67FE            	  3494:             beq.s *                   * Check Z Flag  beq/bne 0
02:0000211C 64FE            	  3495:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:0000211E 69FE            	  3496:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002120 20BCF5675678    	  3497:             move.l #$F5675678,(a0)
02:00002126 003C0010        	  3498:             ori.b #$10,CCR        * Set X Flag
02:0000212A 4090            	  3499:             negx.l (a0)
02:0000212C 6BFE            	  3500:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:0000212E 67FE            	  3501:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002130 64FE            	  3502:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002132 69FE            	  3503:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:00002134 0C900A98A987    	  3504:             cmpi.l #$0A98A987,(a0)
02:0000213A 66FE            	  3505:             bne.s *                   * Check Z Flag  beq/bne
02:0000213C 023C00EF        	  3506:             andi.b #$EF,CCR       * Clear X Flag
02:00002140 4090            	  3507:             negx.l (a0)
02:00002142 6AFE            	  3508:             bpl.s *                   * Check N Flag  bmi/bpl 0
02:00002144 67FE            	  3509:             beq.s *                   * Check Z Flag  beq/bne 0
02:00002146 64FE            	  3510:             bcc.s *                   * Check C Flag  bcc/bcs 0
02:00002148 69FE            	  3511:             bvs.s *                   * Check V Flag  bvc/bvs 1
02:0000214A 0C90F5675679    	  3512:             cmpi.l #$F5675679,(a0)
02:00002150 66FE            	  3513:             bne.s *                   * Check Z Flag  beq/bne
                            	  3514: 
                            	  3515: 
                            	  3516: * -----
                            	  3517: 
                            	  3518: *     CLR - BYTE
02:00002152 307C0100        	  3519:             move.l #$00000100,a0
02:00002156 203C12345678    	  3520:             move.l #$12345678,d0
02:0000215C 223C12345678    	  3521:             move.l #$12345678,d1
02:00002162 243C12345678    	  3522:             move.l #$12345678,d2
02:00002168 283C12345600    	  3523:             move.l #$12345600,d4
02:0000216E 2A3C12340000    	  3524:             move.l #$12340000,d5
02:00002174 7C00            	  3525:             moveq  #$00000000,d6
                            	  3526: 
02:00002176 4200            	  3527:             clr.b d0
02:00002178 66FE            	  3528:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000217A 6BFE            	  3529:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:0000217C B880            	  3530:             cmp.l d0,d4
02:0000217E 66FE            	  3531:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3532: 
02:00002180 4241            	  3533:             clr.w d1
02:00002182 66FE            	  3534:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002184 6BFE            	  3535:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002186 BA81            	  3536:             cmp.l d1,d5
02:00002188 66FE            	  3537:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3538: 
02:0000218A 7400            	  3539:             clr.l d2
02:0000218C 66FE            	  3540:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000218E 6BFE            	  3541:             bmi.s *                   * Check N Flag  bmi/bpl 0
02:00002190 BC82            	  3542:             cmp.l d2,d6
02:00002192 66FE            	  3543:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3544: 
02:00002194 4E75            	  3545:             rts
                            	  3546: 
                            	  3547: 
                            	  3548: 
                            	  3549: *-----------------------------------------------------------
                            	  3550: *-----------------------------------------------------------
                            	  3551: * OPCODE : MOVEM
                            	  3552: *-----------------------------------------------------------
                            	  3553: *-----------------------------------------------------------
                            	  3554: op_MOVEM:
                            	  3555: 
                            	  3556: *     WORD  Registers --> Memory
02:00002196 203C0000D0D0    	  3557:             move.l #$0000d0d0,d0
02:0000219C 223C0000D1D1    	  3558:             move.l #$0000d1d1,d1
02:000021A2 243C0000D2D2    	  3559:             move.l #$0000d2d2,d2
02:000021A8 263C0000D3D3    	  3560:             move.l #$0000d3d3,d3
02:000021AE 283C0000D4D4    	  3561:             move.l #$0000d4d4,d4
02:000021B4 2A3C0000D5D5    	  3562:             move.l #$0000d5d5,d5
02:000021BA 2C3C0000D6D6    	  3563:             move.l #$0000d6d6,d6
02:000021C0 2E3C0000D7D7    	  3564:             move.l #$0000d7d7,d7
02:000021C6 307C0A0A        	  3565:             move.l #$00000a0a,a0
02:000021CA 327C1A1A        	  3566:             move.l #$00001a1a,a1
02:000021CE 347C2A2A        	  3567:             move.l #$00002a2a,a2
02:000021D2 367C3A3A        	  3568:             move.l #$00003a3a,a3
02:000021D6 387C4A4A        	  3569:             move.l #$00004a4a,a4
02:000021DA 3A7C5A5A        	  3570:             move.l #$00005a5a,a5
02:000021DE 3C7C6A6A        	  3571:             move.l #$00006a6a,a6
                            	  3572: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3573: 
02:000021E2 48B8FFFF0100    	  3574:             movem.w D0-D7/A0-A7,$00000100
                            	  3575: 
02:000021E8 307C0100        	  3576:             move.l #$00000100,a0
                            	  3577: 
02:000021EC B058            	  3578:             cmp.w (a0)+,d0
02:000021EE 66FE            	  3579:             bne.s *                   * Check Z Flag  beq/bne 0
02:000021F0 B258            	  3580:             cmp.w (a0)+,d1
02:000021F2 66FE            	  3581:             bne.s *                   * Check Z Flag  beq/bne 0
02:000021F4 B458            	  3582:             cmp.w (a0)+,d2
02:000021F6 66FE            	  3583:             bne.s *                   * Check Z Flag  beq/bne 0
02:000021F8 B658            	  3584:             cmp.w (a0)+,d3
02:000021FA 66FE            	  3585:             bne.s *                   * Check Z Flag  beq/bne 0
02:000021FC B858            	  3586:             cmp.w (a0)+,d4
02:000021FE 66FE            	  3587:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002200 BA58            	  3588:             cmp.w (a0)+,d5
02:00002202 66FE            	  3589:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002204 BC58            	  3590:             cmp.w (a0)+,d6
02:00002206 66FE            	  3591:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002208 BE58            	  3592:             cmp.w (a0)+,d7
02:0000220A 66FE            	  3593:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3594: 
02:0000220C 0C580A0A        	  3595:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
02:00002210 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3597: 
02:00002212 B2D8            	  3598:             cmp.w (a0)+,a1
02:00002214 66FE            	  3599:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002216 B4D8            	  3600:             cmp.w (a0)+,a2
02:00002218 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000221A B6D8            	  3602:             cmp.w (a0)+,a3
02:0000221C 66FE            	  3603:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000221E B8D8            	  3604:             cmp.w (a0)+,a4
02:00002220 66FE            	  3605:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002222 BAD8            	  3606:             cmp.w (a0)+,a5
02:00002224 66FE            	  3607:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002226 BCD8            	  3608:             cmp.w (a0)+,a6
02:00002228 66FE            	  3609:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3610: 
                            	  3611: 
                            	  3612: 
                            	  3613: 
                            	  3614: *     LONG  Registers --> Memory
02:0000222A 203CD0D0D0D0    	  3615:             move.l #$d0d0d0d0,d0
02:00002230 223CD1D1D1D1    	  3616:             move.l #$d1d1d1d1,d1
02:00002236 243CD2D2D2D2    	  3617:             move.l #$d2d2d2d2,d2
02:0000223C 263CD3D3D3D3    	  3618:             move.l #$d3d3d3d3,d3
02:00002242 283CD4D4D4D4    	  3619:             move.l #$d4d4d4d4,d4
02:00002248 2A3CD5D5D5D5    	  3620:             move.l #$d5d5d5d5,d5
02:0000224E 2C3CD6D6D6D6    	  3621:             move.l #$d6d6d6d6,d6
02:00002254 2E3CD7D7D7D7    	  3622:             move.l #$d7d7d7d7,d7
02:0000225A 207C0A0A0A0A    	  3623:             move.l #$0a0a0a0a,a0
02:00002260 227C1A1A1A1A    	  3624:             move.l #$1a1a1a1a,a1
02:00002266 247C2A2A2A2A    	  3625:             move.l #$2a2a2a2a,a2
02:0000226C 267C3A3A3A3A    	  3626:             move.l #$3a3a3a3a,a3
02:00002272 287C4A4A4A4A    	  3627:             move.l #$4a4a4a4a,a4
02:00002278 2A7C5A5A5A5A    	  3628:             move.l #$5a5a5a5a,a5
02:0000227E 2C7C6A6A6A6A    	  3629:             move.l #$6a6a6a6a,a6
                            	  3630: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3631: 
                            	  3632: 
02:00002284 48F8FFFF0120    	  3633:             movem.l D0-D7/A0-A7,$00000120
                            	  3634: 
02:0000228A 307C0120        	  3635:             move.l #$00000120,a0
                            	  3636: 
02:0000228E B098            	  3637:             cmp.l (a0)+,d0
02:00002290 66FE            	  3638:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002292 B298            	  3639:             cmp.l (a0)+,d1
02:00002294 66FE            	  3640:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002296 B498            	  3641:             cmp.l (a0)+,d2
02:00002298 66FE            	  3642:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000229A B698            	  3643:             cmp.l (a0)+,d3
02:0000229C 66FE            	  3644:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000229E B898            	  3645:             cmp.l (a0)+,d4
02:000022A0 66FE            	  3646:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022A2 BA98            	  3647:             cmp.l (a0)+,d5
02:000022A4 66FE            	  3648:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022A6 BC98            	  3649:             cmp.l (a0)+,d6
02:000022A8 66FE            	  3650:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022AA BE98            	  3651:             cmp.l (a0)+,d7
02:000022AC 66FE            	  3652:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3653: 
02:000022AE 0C980A0A0A0A    	  3654:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
02:000022B4 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3656: 
02:000022B6 B3D8            	  3657:             cmp.l (a0)+,a1
02:000022B8 66FE            	  3658:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022BA B5D8            	  3659:             cmp.l (a0)+,a2
02:000022BC 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022BE B7D8            	  3661:             cmp.l (a0)+,a3
02:000022C0 66FE            	  3662:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022C2 B9D8            	  3663:             cmp.l (a0)+,a4
02:000022C4 66FE            	  3664:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022C6 BBD8            	  3665:             cmp.l (a0)+,a5
02:000022C8 66FE            	  3666:             bne.s *                   * Check Z Flag  beq/bne 0
02:000022CA BDD8            	  3667:             cmp.l (a0)+,a6
02:000022CC 66FE            	  3668:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3669: *      ----
                            	  3670: 
                            	  3671: 
                            	  3672: *     WORD  Registers --> Memory  -(An) EA Mode
02:000022CE 203C0000D0D0    	  3673:             move.l #$0000d0d0,d0
02:000022D4 223C0000D1D1    	  3674:             move.l #$0000d1d1,d1
02:000022DA 243C0000D2D2    	  3675:             move.l #$0000d2d2,d2
02:000022E0 263C0000D3D3    	  3676:             move.l #$0000d3d3,d3
02:000022E6 283C0000D4D4    	  3677:             move.l #$0000d4d4,d4
02:000022EC 2A3C0000D5D5    	  3678:             move.l #$0000d5d5,d5
02:000022F2 2C3C0000D6D6    	  3679:             move.l #$0000d6d6,d6
02:000022F8 2E3C0000D7D7    	  3680:             move.l #$0000d7d7,d7
02:000022FE 307C0A0A        	  3681:             move.l #$00000a0a,a0
02:00002302 327C1A1A        	  3682:             move.l #$00001a1a,a1
02:00002306 347C2A2A        	  3683:             move.l #$00002a2a,a2
02:0000230A 367C3A3A        	  3684:             move.l #$00003a3a,a3
02:0000230E 387C4A4A        	  3685:             move.l #$00004a4a,a4
02:00002312 3A7C5A5A        	  3686:             move.l #$00005a5a,a5
02:00002316 3C7C6A6A        	  3687:             move.l #$00006a6a,a6
                            	  3688: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3689: 
02:0000231A 307C01A0        	  3690:             move.l #$000001A0,a0
02:0000231E 48A0FFFF        	  3691:             movem.w D0-D7/A0-A7,-(a0)
                            	  3692: 
02:00002322 307C019E        	  3693:             move.l #$0000019E,a0
                            	  3694: 
02:00002326 BCE0            	  3695:             cmp.w -(a0),a6
02:00002328 66FE            	  3696:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000232A BAE0            	  3697:             cmp.w -(a0),a5
02:0000232C 66FE            	  3698:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000232E B8E0            	  3699:             cmp.w -(a0),a4
02:00002330 66FE            	  3700:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002332 B6E0            	  3701:             cmp.w -(a0),a3
02:00002334 66FE            	  3702:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002336 B4E0            	  3703:             cmp.w -(a0),a2
02:00002338 66FE            	  3704:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000233A B2E0            	  3705:             cmp.w -(a0),a1
02:0000233C 66FE            	  3706:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000233E B0E0            	  3707:             cmp.w -(a0),a0
                            	  3708: *            bne.s *                   * Check Z Flag  beq/bne 0
02:00002340 BE60            	  3709:             cmp.w -(a0),d7
02:00002342 66FE            	  3710:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002344 BC60            	  3711:             cmp.w -(a0),d6
02:00002346 66FE            	  3712:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002348 BA60            	  3713:             cmp.w -(a0),d5
02:0000234A 66FE            	  3714:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000234C B860            	  3715:             cmp.w -(a0),d4
02:0000234E 66FE            	  3716:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002350 B660            	  3717:             cmp.w -(a0),d3
02:00002352 66FE            	  3718:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002354 B460            	  3719:             cmp.w -(a0),d2
02:00002356 66FE            	  3720:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002358 B260            	  3721:             cmp.w -(a0),d1
02:0000235A 66FE            	  3722:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000235C B060            	  3723:             cmp.w -(a0),d0
02:0000235E 66FE            	  3724:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3725: 
                            	  3726: 
                            	  3727: 
                            	  3728: 
                            	  3729: *     LONG  Registers --> Memory   -(An) EA Mode
02:00002360 203CD0D0D0D0    	  3730:             move.l #$d0d0d0d0,d0
02:00002366 223CD1D1D1D1    	  3731:             move.l #$d1d1d1d1,d1
02:0000236C 243CD2D2D2D2    	  3732:             move.l #$d2d2d2d2,d2
02:00002372 263CD3D3D3D3    	  3733:             move.l #$d3d3d3d3,d3
02:00002378 283CD4D4D4D4    	  3734:             move.l #$d4d4d4d4,d4
02:0000237E 2A3CD5D5D5D5    	  3735:             move.l #$d5d5d5d5,d5
02:00002384 2C3CD6D6D6D6    	  3736:             move.l #$d6d6d6d6,d6
02:0000238A 2E3CD7D7D7D7    	  3737:             move.l #$d7d7d7d7,d7
02:00002390 207C0A0A0A0A    	  3738:             move.l #$0a0a0a0a,a0
02:00002396 227C1A1A1A1A    	  3739:             move.l #$1a1a1a1a,a1
02:0000239C 247C2A2A2A2A    	  3740:             move.l #$2a2a2a2a,a2
02:000023A2 267C3A3A3A3A    	  3741:             move.l #$3a3a3a3a,a3
02:000023A8 287C4A4A4A4A    	  3742:             move.l #$4a4a4a4a,a4
02:000023AE 2A7C5A5A5A5A    	  3743:             move.l #$5a5a5a5a,a5
02:000023B4 2C7C6A6A6A6A    	  3744:             move.l #$6a6a6a6a,a6
                            	  3745: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3746: 
                            	  3747: 
02:000023BA 307C01A0        	  3748:             move.l #$000001A0,a0
02:000023BE 48E0FFFF        	  3749:             movem.l D0-D7/A0-A7,-(a0)
                            	  3750: 
02:000023C2 307C019C        	  3751:             move.l #$0000019C,a0
                            	  3752: 
02:000023C6 BDE0            	  3753:             cmp.l -(a0),a6
02:000023C8 66FE            	  3754:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023CA BBE0            	  3755:             cmp.l -(a0),a5
02:000023CC 66FE            	  3756:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023CE B9E0            	  3757:             cmp.l -(a0),a4
02:000023D0 66FE            	  3758:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023D2 B7E0            	  3759:             cmp.l -(a0),a3
02:000023D4 66FE            	  3760:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023D6 B5E0            	  3761:             cmp.l -(a0),a2
02:000023D8 66FE            	  3762:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023DA B3E0            	  3763:             cmp.l -(a0),a1
02:000023DC 66FE            	  3764:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023DE B1E0            	  3765:             cmp.l -(a0),a0
                            	  3766: *            bne.s *                   * Check Z Flag  beq/bne 0
02:000023E0 BEA0            	  3767:             cmp.l -(a0),d7
02:000023E2 66FE            	  3768:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023E4 BCA0            	  3769:             cmp.l -(a0),d6
02:000023E6 66FE            	  3770:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023E8 BAA0            	  3771:             cmp.l -(a0),d5
02:000023EA 66FE            	  3772:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023EC B8A0            	  3773:             cmp.l -(a0),d4
02:000023EE 66FE            	  3774:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023F0 B6A0            	  3775:             cmp.l -(a0),d3
02:000023F2 66FE            	  3776:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023F4 B4A0            	  3777:             cmp.l -(a0),d2
02:000023F6 66FE            	  3778:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023F8 B2A0            	  3779:             cmp.l -(a0),d1
02:000023FA 66FE            	  3780:             bne.s *                   * Check Z Flag  beq/bne 0
02:000023FC B0A0            	  3781:             cmp.l -(a0),d0
02:000023FE 66FE            	  3782:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3783: 
                            	  3784: 
                            	  3785: 
                            	  3786: *     ----
                            	  3787: 
                            	  3788: *     WORD - Memory --> Registers
02:00002400 7000            	  3789:             moveq  #$00000000,d0
02:00002402 7200            	  3790:             moveq  #$00000000,d1
02:00002404 7400            	  3791:             moveq  #$00000000,d2
02:00002406 7600            	  3792:             moveq  #$00000000,d3
02:00002408 7800            	  3793:             moveq  #$00000000,d4
02:0000240A 7A00            	  3794:             moveq  #$00000000,d5
02:0000240C 7C00            	  3795:             moveq  #$00000000,d6
02:0000240E 7E00            	  3796:             moveq  #$00000000,d7
02:00002410 91C8            	  3797:             move.l #$00000000,a0
02:00002412 93C9            	  3798:             move.l #$00000000,a1
02:00002414 95CA            	  3799:             move.l #$00000000,a2
02:00002416 97CB            	  3800:             move.l #$00000000,a3
02:00002418 99CC            	  3801:             move.l #$00000000,a4
02:0000241A 9BCD            	  3802:             move.l #$00000000,a5
02:0000241C 9DCE            	  3803:             move.l #$00000000,a6
                            	  3804: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3805: 
02:0000241E 4CB82A550100    	  3806:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3807: 
02:00002424 B0BCFFFFD0D0    	  3808:             cmp.l #$FFFFD0D0,d0
02:0000242A 66FE            	  3809:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000242C B4BCFFFFD1D1    	  3810:             cmp.l #$FFFFD1D1,d2
02:00002432 66FE            	  3811:             bne.s *                  * Check Z Flag  beq/bne 0
02:00002434 B8BCFFFFD2D2    	  3812:             cmp.l #$FFFFD2D2,d4
02:0000243A 66FE            	  3813:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000243C BCBCFFFFD3D3    	  3814:             cmp.l #$FFFFD3D3,d6
02:00002442 66FE            	  3815:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002444 B2FCD4D4        	  3816:             cmp.l #$FFFFD4D4,a1
02:00002448 66FE            	  3817:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000244A B6FCD5D5        	  3818:             cmp.l #$FFFFD5D5,a3
02:0000244E 66FE            	  3819:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002450 BAFCD6D6        	  3820:             cmp.l #$FFFFD6D6,a5
02:00002454 66FE            	  3821:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3822: 
                            	  3823: 
                            	  3824: *     LONG - Memory --> Registers
02:00002456 7000            	  3825:             moveq  #$00000000,d0
02:00002458 7200            	  3826:             moveq  #$00000000,d1
02:0000245A 7400            	  3827:             moveq  #$00000000,d2
02:0000245C 7600            	  3828:             moveq  #$00000000,d3
02:0000245E 7800            	  3829:             moveq  #$00000000,d4
02:00002460 7A00            	  3830:             moveq  #$00000000,d5
02:00002462 7C00            	  3831:             moveq  #$00000000,d6
02:00002464 7E00            	  3832:             moveq  #$00000000,d7
02:00002466 91C8            	  3833:             move.l #$00000000,a0
02:00002468 93C9            	  3834:             move.l #$00000000,a1
02:0000246A 95CA            	  3835:             move.l #$00000000,a2
02:0000246C 97CB            	  3836:             move.l #$00000000,a3
02:0000246E 99CC            	  3837:             move.l #$00000000,a4
02:00002470 9BCD            	  3838:             move.l #$00000000,a5
02:00002472 9DCE            	  3839:             move.l #$00000000,a6
                            	  3840: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3841: 
02:00002474 4CF82A550120    	  3842:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3843: 
02:0000247A B0BCD0D0D0D0    	  3844:             cmp.l #$D0D0D0D0,d0
02:00002480 66FE            	  3845:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002482 B4BCD1D1D1D1    	  3846:             cmp.l #$D1D1D1D1,d2
02:00002488 66FE            	  3847:             bne.s *                  * Check Z Flag  beq/bne 0
02:0000248A B8BCD2D2D2D2    	  3848:             cmp.l #$D2D2D2D2,d4
02:00002490 66FE            	  3849:             bne.s *                   * Check Z Flag  beq/bne 0
02:00002492 BCBCD3D3D3D3    	  3850:             cmp.l #$D3D3D3D3,d6
02:00002498 66FE            	  3851:             bne.s *                   * Check Z Flag  beq/bne 0
02:0000249A B3FCD4D4D4D4    	  3852:             cmp.l #$D4D4D4D4,a1
02:000024A0 66FE            	  3853:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024A2 B7FCD5D5D5D5    	  3854:             cmp.l #$D5D5D5D5,a3
02:000024A8 66FE            	  3855:             bne.s *                   * Check Z Flag  beq/bne 0
02:000024AA BBFCD6D6D6D6    	  3856:             cmp.l #$D6D6D6D6,a5
02:000024B0 66FE            	  3857:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3858: 
02:000024B2 4E75            	  3859:             rts
                            	  3860: 
                            	  3861: 
                            	  3862: *-----------------------------------------------------------
                            	  3863: *-----------------------------------------------------------
                            	  3864: * OPCODE : ABCD
                            	  3865: *-----------------------------------------------------------
                            	  3866: *-----------------------------------------------------------
                            	  3867: op_ABCD:
                            	  3868: 
                            	  3869: *     Test with X Flag CLEARED
02:000024B4 307C0110        	  3870:                 move.l #$00000110,a0 * Address pointer-X
02:000024B8 327C0120        	  3871:                 move.l #$00000120,a1 * Address pointer-Y
02:000024BC 7000            	  3872:                 moveq  #$00000000,d0 * BCD byte-X
02:000024BE 7200            	  3873:                 moveq  #$00000000,d1 * BCD byte-Y
02:000024C0 7400            	  3874:                 moveq  #$00000000,d2
02:000024C2 7600            	  3875:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:000024C4 7800            	  3876:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:000024C6 7A00            	  3877:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:000024C8 2C3C00000099    	  3878:                 move.l #$00000099,d6 * Inner loop counter
02:000024CE 2E3C00000099    	  3879:                 move.l #$00000099,d7 * Outer loop counter
                            	  3880: 
02:000024D4 2007            	  3881: ABCD_OUTER1:    move.l d7,d0
02:000024D6 2206            	  3882: ABCD_INNER1:    move.l d6,d1
02:000024D8 023C00EF        	  3883:                 andi.b #$EF,CCR     * Clear X Flag
02:000024DC 307C0110        	  3884:                 move.l #$00000110,a0 * Address pointer-X
02:000024E0 327C0120        	  3885:                 move.l #$00000120,a1 * Address pointer-Y
02:000024E4 1140FFFF        	  3886:                 move.b d0,-1(a0)
02:000024E8 1341FFFF        	  3887:                 move.b d1,-1(a1)
                            	  3888: 
02:000024EC C300            	  3889:                 abcd d0,d1
02:000024EE 6402            	  3890:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
02:000024F0 5284            	  3891:                 add.l #1,d4
02:000024F2 DA81            	  3892: ABCD_NO_C1:     add.l d1,d5
                            	  3893: 
02:000024F4 C308            	  3894:                 abcd -(a0),-(a1)
02:000024F6 6402            	  3895:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
02:000024F8 5284            	  3896:                 add.l #1,d4
02:000024FA D611            	  3897: ABCD_NO_C2:     add.b (a1),d3
                            	  3898: 
                            	  3899: 
02:000024FC 51CEFFD8        	  3900:                 dbf d6,ABCD_INNER1
02:00002500 2C3C00000099    	  3901:                 move.l #$00000099,d6
02:00002506 51CFFFCC        	  3902:                 dbf d7,ABCD_OUTER1
02:0000250A 0C8400005AFC    	  3903:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
02:00002510 66FE            	  3904:                 bne.s *
02:00002512 0C85001C9A34    	  3905:                 cmpi.l #$001C9A34,d5
02:00002518 66FE            	  3906:                 bne.s *
02:0000251A 0C8300000034    	  3907:                 cmpi.l #$00000034,d3
02:00002520 66FE            	  3908:                 bne.s *
                            	  3909: 
                            	  3910: *     Test with X Flag SET
02:00002522 307C0110        	  3911:                 move.l #$00000110,a0 * Address pointer-X
02:00002526 327C0120        	  3912:                 move.l #$00000120,a1 * Address pointer-Y
02:0000252A 7000            	  3913:                 moveq  #$00000000,d0 * BCD byte-X
02:0000252C 7200            	  3914:                 moveq  #$00000000,d1 * BCD byte-Y
02:0000252E 7400            	  3915:                 moveq  #$00000000,d2
02:00002530 7600            	  3916:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:00002532 7800            	  3917:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:00002534 7A00            	  3918:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:00002536 2C3C00000099    	  3919:                 move.l #$00000099,d6 * Inner loop counter
02:0000253C 2E3C00000099    	  3920:                 move.l #$00000099,d7 * Outer loop counter
                            	  3921: 
02:00002542 2007            	  3922: ABCD_OUTER2:    move.l d7,d0
02:00002544 2206            	  3923: ABCD_INNER2:    move.l d6,d1
02:00002546 003C0010        	  3924:                 ori.b #$10,CCR      * Set X Flag
02:0000254A 307C0110        	  3925:                 move.l #$00000110,a0 * Address pointer-X
02:0000254E 327C0120        	  3926:                 move.l #$00000120,a1 * Address pointer-Y
02:00002552 1140FFFF        	  3927:                 move.b d0,-1(a0)
02:00002556 1341FFFF        	  3928:                 move.b d1,-1(a1)
                            	  3929: 
02:0000255A C300            	  3930:                 abcd d0,d1
02:0000255C 6402            	  3931:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
02:0000255E 5284            	  3932:                 add.l #1,d4
02:00002560 DA81            	  3933: ABCD_NO_C3:     add.l d1,d5
                            	  3934: 
02:00002562 C308            	  3935:                 abcd -(a0),-(a1)
02:00002564 6402            	  3936:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
02:00002566 5284            	  3937:                 add.l #1,d4
02:00002568 D611            	  3938: ABCD_NO_C4:     add.b (a1),d3
                            	  3939: 
                            	  3940: 
02:0000256A 51CEFFD8        	  3941:                 dbf d6,ABCD_INNER2
02:0000256E 2C3C00000099    	  3942:                 move.l #$00000099,d6
02:00002574 51CFFFCC        	  3943:                 dbf d7,ABCD_OUTER2
02:00002578 0C8400005B60    	  3944:                 cmpi.l #$00005B60,d4  * Check the cumulative results
02:0000257E 66FE            	  3945:                 bne.s *
02:00002580 0C85001CCFC8    	  3946:                 cmpi.l #$001CCFC8,d5
02:00002586 66FE            	  3947:                 bne.s *
02:00002588 0C8300000034    	  3948:                 cmpi.l #$00000034,d3
02:0000258E 66FE            	  3949:                 bne.s *
                            	  3950: 
                            	  3951: *             Quick check of Z Flag
02:00002590 4200            	  3952:                 move.b #$00,d0
02:00002592 4201            	  3953:                 move.b #$00,d1
02:00002594 44FC0000        	  3954:                 move #$00,CCR              * Set Z flag to 0
02:00002598 C101            	  3955:                 abcd d1,d0                  * Should NOT set Z Flag to 1
02:0000259A 67FE            	  3956:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3957: 
02:0000259C 103C0001        	  3958:                 move.b #$01,d0
02:000025A0 4201            	  3959:                 move.b #$00,d1
02:000025A2 44FC0004        	  3960:                 move #$04,CCR              * Set Z flag to 0
02:000025A6 C101            	  3961:                 abcd d1,d0                  * Should NOT set Z Flag to 1
02:000025A8 67FE            	  3962:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3963: 
02:000025AA 4E75            	  3964:                 rts
                            	  3965: 
                            	  3966: *-----------------------------------------------------------
                            	  3967: *-----------------------------------------------------------
                            	  3968: * OPCODE : SBCD
                            	  3969: *-----------------------------------------------------------
                            	  3970: *-----------------------------------------------------------
                            	  3971: op_SBCD:
                            	  3972: 
                            	  3973: *     Test with X Flag CLEARED
02:000025AC 307C0110        	  3974:                 move.l #$00000110,a0 * Address pointer-X
02:000025B0 327C0120        	  3975:                 move.l #$00000120,a1 * Address pointer-Y
02:000025B4 7000            	  3976:                 moveq  #$00000000,d0 * BCD byte-X
02:000025B6 7200            	  3977:                 moveq  #$00000000,d1 * BCD byte-Y
02:000025B8 7400            	  3978:                 moveq  #$00000000,d2
02:000025BA 7600            	  3979:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:000025BC 7800            	  3980:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:000025BE 7A00            	  3981:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:000025C0 2C3C00000099    	  3982:                 move.l #$00000099,d6 * Inner loop counter
02:000025C6 2E3C00000099    	  3983:                 move.l #$00000099,d7 * Outer loop counter
                            	  3984: 
02:000025CC 2007            	  3985: SBCD_OUTER1:    move.l d7,d0
02:000025CE 2206            	  3986: SBCD_INNER1:    move.l d6,d1
02:000025D0 023C00EF        	  3987:                 andi.b #$EF,CCR     * Clear X Flag
02:000025D4 307C0110        	  3988:                 move.l #$00000110,a0 * Address pointer-X
02:000025D8 327C0120        	  3989:                 move.l #$00000120,a1 * Address pointer-Y
02:000025DC 1140FFFF        	  3990:                 move.b d0,-1(a0)
02:000025E0 1341FFFF        	  3991:                 move.b d1,-1(a1)
                            	  3992: 
02:000025E4 8300            	  3993:                 sbcd d0,d1
02:000025E6 6402            	  3994:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
02:000025E8 5284            	  3995:                 add.l #1,d4
02:000025EA DA81            	  3996: SBCD_NO_C1:     add.l d1,d5
                            	  3997: 
02:000025EC 8308            	  3998:                 sbcd -(a0),-(a1)
02:000025EE 6402            	  3999:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
02:000025F0 5284            	  4000:                 add.l #1,d4
02:000025F2 D611            	  4001: SBCD_NO_C2:     add.b (a1),d3
                            	  4002: 
                            	  4003: 
02:000025F4 51CEFFD8        	  4004:                 dbf d6,SBCD_INNER1
02:000025F8 2C3C00000099    	  4005:                 move.l #$00000099,d6
02:000025FE 51CFFFCC        	  4006:                 dbf d7,SBCD_OUTER1
02:00002602 0C8400005C0A    	  4007:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
02:00002608 66FE            	  4008:                 bne.s *
02:0000260A 0C85001C459E    	  4009:                 cmpi.l #$001C459E,d5
02:00002610 66FE            	  4010:                 bne.s *
02:00002612 0C830000009E    	  4011:                 cmpi.l #$0000009E,d3
02:00002618 66FE            	  4012:                 bne.s *
                            	  4013: 
                            	  4014: *     Test with X Flag SET
02:0000261A 307C0110        	  4015:                 move.l #$00000110,a0 * Address pointer-X
02:0000261E 327C0120        	  4016:                 move.l #$00000120,a1 * Address pointer-Y
02:00002622 7000            	  4017:                 moveq  #$00000000,d0 * BCD byte-X
02:00002624 7200            	  4018:                 moveq  #$00000000,d1 * BCD byte-Y
02:00002626 7400            	  4019:                 moveq  #$00000000,d2
02:00002628 7600            	  4020:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
02:0000262A 7800            	  4021:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:0000262C 7A00            	  4022:                 moveq  #$00000000,d5 * Cumulative Register BCD results
02:0000262E 2C3C00000099    	  4023:                 move.l #$00000099,d6 * Inner loop counter
02:00002634 2E3C00000099    	  4024:                 move.l #$00000099,d7 * Outer loop counter
                            	  4025: 
02:0000263A 2007            	  4026: SBCD_OUTER2:    move.l d7,d0
02:0000263C 2206            	  4027: SBCD_INNER2:    move.l d6,d1
02:0000263E 003C0010        	  4028:                 ori.b #$10,CCR      * Set X Flag
02:00002642 307C0110        	  4029:                 move.l #$00000110,a0 * Address pointer-X
02:00002646 327C0120        	  4030:                 move.l #$00000120,a1 * Address pointer-Y
02:0000264A 1140FFFF        	  4031:                 move.b d0,-1(a0)
02:0000264E 1341FFFF        	  4032:                 move.b d1,-1(a1)
                            	  4033: 
02:00002652 8300            	  4034:                 sbcd d0,d1
02:00002654 6402            	  4035:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
02:00002656 5284            	  4036:                 add.l #1,d4
02:00002658 DA81            	  4037: SBCD_NO_C3:     add.l d1,d5
                            	  4038: 
02:0000265A 8308            	  4039:                 sbcd -(a0),-(a1)
02:0000265C 6402            	  4040:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
02:0000265E 5284            	  4041:                 add.l #1,d4
02:00002660 D611            	  4042: SBCD_NO_C4:     add.b (a1),d3
                            	  4043: 
02:00002662 51CEFFD8        	  4044:                 dbf d6,SBCD_INNER2
02:00002666 2C3C00000099    	  4045:                 move.l #$00000099,d6
02:0000266C 51CFFFCC        	  4046:                 dbf d7,SBCD_OUTER2
02:00002670 0C8400005CA4    	  4047:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
02:00002676 66FE            	  4048:                 bne.s *
02:00002678 0C85001C5C66    	  4049:                 cmpi.l #$001C5C66,d5
02:0000267E 66FE            	  4050:                 bne.s *
02:00002680 0C830000009E    	  4051:                 cmpi.l #$0000009E,d3
02:00002686 66FE            	  4052:                 bne.s *
                            	  4053: 
                            	  4054: 
                            	  4055: *             Quick check of Z Flag
02:00002688 4200            	  4056:                 move.b #$00,d0
02:0000268A 4201            	  4057:                 move.b #$00,d1
02:0000268C 44FC0000        	  4058:                 move #$00,CCR              * Set Z flag to 0
02:00002690 8101            	  4059:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
02:00002692 67FE            	  4060:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4061: 
02:00002694 103C0001        	  4062:                 move.b #$01,d0
02:00002698 4201            	  4063:                 move.b #$00,d1
02:0000269A 44FC0004        	  4064:                 move #$04,CCR              * Set Z flag to 0
02:0000269E 8101            	  4065:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
02:000026A0 67FE            	  4066:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4067: 
02:000026A2 4E75            	  4068:                 rts
                            	  4069: 
                            	  4070: *-----------------------------------------------------------
                            	  4071: *-----------------------------------------------------------
                            	  4072: * OPCODE : NBCD
                            	  4073: *-----------------------------------------------------------
                            	  4074: *-----------------------------------------------------------
                            	  4075: op_NBCD:
                            	  4076: 
                            	  4077: *        NBCD to a  Register
                            	  4078: 
02:000026A4 7000            	  4079:                 moveq  #$00000000,d0 * BCD byte
02:000026A6 7200            	  4080:                 moveq  #$00000000,d1
02:000026A8 7400            	  4081:                 moveq  #$00000000,d2
02:000026AA 7600            	  4082:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
02:000026AC 7800            	  4083:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:000026AE 7A00            	  4084:                 moveq  #$00000000,d5 * Cumulative BCD results
02:000026B0 2C3C00000099    	  4085:                 move.l #$00000099,d6
02:000026B6 2E3C00000099    	  4086:                 move.l #$00000099,d7 * Loop counter
                            	  4087: 
02:000026BC 2007            	  4088: NBCD_LOOP:      move.l d7,d0
02:000026BE 44FC0004        	  4089:                 move #$04,CCR        * Set Z flag to 0
                            	  4090: 
02:000026C2 4800            	  4091:                 nbcd d0
                            	  4092: 
02:000026C4 6402            	  4093:                 bcc.s NBCD_NO_C         * Check C Flag
02:000026C6 5284            	  4094:                 add.l #1,d4
02:000026C8 6602            	  4095: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
02:000026CA 5283            	  4096:                 add.l #1,d3
02:000026CC DA80            	  4097: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4098: 
02:000026CE 51CFFFEC        	  4099:                 dbf d7,NBCD_LOOP
                            	  4100: 
02:000026D2 0C8300000001    	  4101:                 cmpi.l #$00000001,d3  * Check the cumulative results
02:000026D8 66FE            	  4102:                 bne.s *
02:000026DA 0C8400000099    	  4103:                 cmpi.l #$00000099,d4
02:000026E0 66FE            	  4104:                 bne.s *
02:000026E2 0C8500002E3B    	  4105:                 cmpi.l #$00002E3B,d5
02:000026E8 66FE            	  4106:                 bne.s *
                            	  4107: 
                            	  4108: 
                            	  4109: *        NBCD to a memory location
                            	  4110: 
02:000026EA 7000            	  4111:                 moveq  #$00000000,d0 * BCD byte
02:000026EC 7200            	  4112:                 moveq  #$00000000,d1
02:000026EE 7400            	  4113:                 moveq  #$00000000,d2
02:000026F0 7600            	  4114:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
02:000026F2 7800            	  4115:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
02:000026F4 7A00            	  4116:                 moveq  #$00000000,d5 * Cumulative BCD results
02:000026F6 2C3C00000099    	  4117:                 move.l #$00000099,d6
02:000026FC 2E3C00000099    	  4118:                 move.l #$00000099,d7 * Loop counter
                            	  4119: 
02:00002702 11C70100        	  4120: NBCD_LOOP1:     move.b d7,$00000100
02:00002706 44FC0004        	  4121:                 move #$04,CCR        * Set Z flag to 0
                            	  4122: 
02:0000270A 48380100        	  4123:                 nbcd $00000100
02:0000270E 10380100        	  4124:                 move.b $00000100,d0
                            	  4125: 
02:00002712 6402            	  4126:                 bcc.s NBCD_NO_C1        * Check C Flag
02:00002714 5284            	  4127:                 add.l #1,d4
02:00002716 6602            	  4128: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
02:00002718 5283            	  4129:                 add.l #1,d3
02:0000271A DA80            	  4130: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4131: 
02:0000271C 51CFFFE4        	  4132:                 dbf d7,NBCD_LOOP1
                            	  4133: 
02:00002720 0C8300000001    	  4134:                 cmpi.l #$00000001,d3  * Check the cumulative results
02:00002726 66FE            	  4135:                 bne.s *
02:00002728 4A84            	  4136:                 cmpi.l #$00000000,d4
02:0000272A 66FE            	  4137:                 bne.s *
02:0000272C 0C8500002E3B    	  4138:                 cmpi.l #$00002E3B,d5
02:00002732 66FE            	  4139:                 bne.s *
                            	  4140: 
                            	  4141: 
02:00002734 4E75            	  4142:                 rts
                            	  4143: 
                            	  4144: 
                            	  4145: 
                            	  4146: *-----------------------------------------------------------
                            	  4147: *-----------------------------------------------------------
                            	  4148: * OPCODE : TRAPV
                            	  4149: *-----------------------------------------------------------
                            	  4150: *-----------------------------------------------------------
                            	  4151: op_TRAPV:
                            	  4152: 
                            	  4153: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4154: 
02:00002736 7000            	  4155:                 moveq  #$00000000,d0 * Clear d0
                            	  4156: 
02:00002738 44FC0000        	  4157:                 move #$00,CCR        * Clear V flag
02:0000273C 4E76            	  4158:                 trapv
02:0000273E 4A80            	  4159:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
02:00002740 66FE            	  4160:                 bne.s *
                            	  4161: 
02:00002742 44FC0002        	  4162:                 move #$02,CCR        * Set V flag
02:00002746 4E76            	  4163:                 trapv
02:00002748 0C8012345678    	  4164:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
02:0000274E 66FE            	  4165:                 bne.s *
                            	  4166: 
                            	  4167: 
02:00002750 4E75            	  4168:                 rts
                            	  4169: 
                            	  4170: 
                            	  4171: 
                            	  4172: *-----------------------------------------------------------
                            	  4173: *-----------------------------------------------------------
                            	  4174: * OPCODE : RTR
                            	  4175: *-----------------------------------------------------------
                            	  4176: *-----------------------------------------------------------
                            	  4177: 
                            	  4178: op_RTR:
                            	  4179: 
                            	  4180: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4181: 
02:00002752 41FA000A        	  4182:                 lea 		RTR_DONE,a0
02:00002756 2F08            	  4183:                 move.l 	a0,-(a7)     * push destination PC to the stack
02:00002758 3F3CFF15        	  4184:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
02:0000275C 4E77            	  4185:                 rtr
                            	  4186: 
02:0000275E 40C0            	  4187: RTR_DONE:       move.w SR,d0
02:00002760 0240001F        	  4188:                 andi.w #$1F,d0
02:00002764 0C400015        	  4189:                 cmpi.w #$15,d0
02:00002768 66FE            	  4190:                 bne.s *
                            	  4191: 
02:0000276A 4E75            	  4192:                 rts
                            	  4193: 
                            	  4194: 
02:0000276C 283C44444444    	  4195: BSR_FAR2:       move.l #$44444444,d4
02:00002772 4E75            	  4196:                 rts
                            	  4197: 
                            	  4198: 
                            	  4199: *-----------------------------------------------------------
                            	  4200: *-----------------------------------------------------------
                            	  4201: * OPCODE : BCC
                            	  4202: *-----------------------------------------------------------
                            	  4203: *-----------------------------------------------------------
                            	  4204: 
02:00002774 44FC0000        	  4205: op_BCC:         move #$00,CCR
02:00002778 6202            	  4206:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
02:0000277A 60FE            	  4207:                 bra.s *
                            	  4208: 
02:0000277C 44FC0001        	  4209: BCC1:           move #$01,CCR
02:00002780 63000004        	  4210:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
02:00002784 60FE            	  4211:                 bra.s *
                            	  4212: 
02:00002786 44FC0000        	  4213: BCC2:           move #$00,CCR
02:0000278A 6402            	  4214:                 bcc.s BCC3            * Carry Clear         C=0
02:0000278C 60FE            	  4215:                 bra.s *
                            	  4216: 
02:0000278E 44FC0001        	  4217: BCC3:           move #$01,CCR
02:00002792 65000004        	  4218:                 bcs.w BCC4            * Carry Set           C=1
02:00002796 60FE            	  4219:                 bra.s *
                            	  4220: 
02:00002798 44FC0000        	  4221: BCC4:           move #$00,CCR
02:0000279C 6602            	  4222:                 bne.s BCC5            * Not Equal           Z=0
02:0000279E 60FE            	  4223:                 bra.s *
                            	  4224: 
02:000027A0 44FC0004        	  4225: BCC5:           move #$04,CCR
02:000027A4 67000004        	  4226:                 beq.w BCC6            * Equal               Z=1
02:000027A8 60FE            	  4227:                 bra.s *
                            	  4228: 
02:000027AA 44FC0000        	  4229: BCC6:           move #$00,CCR
02:000027AE 6802            	  4230:                 bvc.s BCC7            * V Clear             V=0
02:000027B0 60FE            	  4231:                 bra.s *
                            	  4232: 
02:000027B2 44FC0002        	  4233: BCC7:           move #$02,CCR
02:000027B6 69000004        	  4234:                 bvs.w BCC8            * V Set               V=1
02:000027BA 60FE            	  4235:                 bra.s *
                            	  4236: 
02:000027BC 44FC0000        	  4237: BCC8:           move #$00,CCR
02:000027C0 6A02            	  4238:                 bpl.s BCC9            * Plus                N=0
02:000027C2 60FE            	  4239:                 bra.s *
                            	  4240: 
02:000027C4 44FC0008        	  4241: BCC9:           move #$08,CCR
02:000027C8 6B000004        	  4242:                 bmi.w BCC10           * Minus               N=1
02:000027CC 60FE            	  4243:                 bra.s *
                            	  4244: 
02:000027CE 44FC0000        	  4245: BCC10:          move #$00,CCR
02:000027D2 6C02            	  4246:                 bge.s BCC11           * Greater or Equal    N=V
02:000027D4 60FE            	  4247:                 bra.s *
                            	  4248: 
02:000027D6 44FC0002        	  4249: BCC11:          move #$02,CCR
02:000027DA 6D000004        	  4250:                 blt.w BCC12           * Less Than           N!=V
02:000027DE 60FE            	  4251:                 bra.s *
                            	  4252: 
02:000027E0 44FC000A        	  4253: BCC12:          move #$0A,CCR
02:000027E4 6E02            	  4254:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
02:000027E6 60FE            	  4255:                 bra.s *
                            	  4256: 
02:000027E8 44FC0006        	  4257: BCC13:          move #$06,CCR
02:000027EC 6F000004        	  4258:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
02:000027F0 60FE            	  4259:                 bra.s *
                            	  4260: 
                            	  4261: 
02:000027F2 4E75            	  4262: BCC14:          rts
                            	  4263: 
                            	  4264: 
                            	  4265: *-----------------------------------------------------------
                            	  4266: *-----------------------------------------------------------
                            	  4267: * OPCODE : DBCC
                            	  4268: *-----------------------------------------------------------
                            	  4269: *-----------------------------------------------------------
                            	  4270: 
02:000027F4 7003            	  4271: op_DBCC:        moveq  #$00000003,d0    * Loop counter
02:000027F6 7200            	  4272:                 moveq  #$00000000,d1    * Accumulator
02:000027F8 44FC0000        	  4273:                 move #$00,CCR
                            	  4274: 
02:000027FC 5201            	  4275: DBCC_LOOP1:     addi.b #$1,d1
02:000027FE 51C8FFFC        	  4276:                 dbf d0,DBCC_LOOP1
                            	  4277: 
02:00002802 0C8100000004    	  4278:                 cmpi.l #$00000004,d1  * Check Accumulator results
02:00002808 66FE            	  4279:                 bne.s *
                            	  4280: 
02:0000280A 5201            	  4281: DBCC_LOOP2:     addi.b #$1,d1
02:0000280C 54C8FFFC        	  4282:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4283: 
02:00002810 0C8100000005    	  4284:                 cmpi.l #$00000005,d1  * Check Accumulator results
02:00002816 66FE            	  4285:                 bne.s *
                            	  4286: 
02:00002818 4E75            	  4287:                 rts
                            	  4288: 
                            	  4289: 
                            	  4290: *-----------------------------------------------------------
                            	  4291: *-----------------------------------------------------------
                            	  4292: * OPCODE : SCC
                            	  4293: *-----------------------------------------------------------
                            	  4294: *-----------------------------------------------------------
                            	  4295: 
02:0000281A 44FC0001        	  4296: op_SCC:         move #$01,CCR
02:0000281E 54F900010000    	  4297:                 scc $00010000                   * Clear the EA byte
02:00002824 4A3900010000    	  4298:                 cmpi.b #$00,$00010000
02:0000282A 66FE            	  4299:                 bne.s *
                            	  4300: 
02:0000282C 44FC0000        	  4301:                 move #$00,CCR
02:00002830 54F900010000    	  4302:                 scc $00010000                   * Set the EA byte to 0xFF
02:00002836 0C3900FF00010000	  4303:                 cmpi.b #$FF,$00010000
02:0000283E 66FE            	  4304:                 bne.s *
                            	  4305: 
02:00002840 4E75            	  4306:                 rts
                            	  4307: 
                            	  4308: 
                            	  4309: 
                            	  4310: *-----------------------------------------------------------
                            	  4311: *-----------------------------------------------------------
                            	  4312: * OPCODE : ADDQ
                            	  4313: *-----------------------------------------------------------
                            	  4314: *-----------------------------------------------------------
                            	  4315: 
                            	  4316: op_ADDQ:
                            	  4317: 
                            	  4318: *     BYTE
02:00002842 203C000000FF    	  4319:                 move.l #$000000FF,d0    * Loop counter
02:00002848 7200            	  4320:                 moveq  #$00000000,d1    * Flag results accumulator
02:0000284A 7400            	  4321:                 moveq  #$00000000,d2    * Data results accumulator
02:0000284C 7600            	  4322:                 moveq  #$00000000,d3
02:0000284E 7800            	  4323:                 moveq  #$00000000,d4
02:00002850 7A00            	  4324:                 moveq  #$00000000,d5
02:00002852 7C00            	  4325:                 moveq  #$00000000,d6
02:00002854 7E00            	  4326:                 moveq  #$00000000,d7
                            	  4327: 
02:00002856 5605            	  4328: ADDQ_LOOP1:     addq.b #3,d5
02:00002858 40C6            	  4329:                 move.w SR,d6
02:0000285A 02860000001F    	  4330:                 andi.l #$1F,d6        * Isolate flags
02:00002860 D286            	  4331:                 add.l d6,d1           * Copy flag results into accumulator
02:00002862 D485            	  4332:                 add.l d5,d2           * Copy data results into data accumulator
02:00002864 51C8FFF0        	  4333:                 dbf d0,ADDQ_LOOP1
                            	  4334: 
02:00002868 0C810000043D    	  4335:                 cmpi.l #$0000043D,d1
02:0000286E 66FE            	  4336:                 bne.s *
02:00002870 0C8200007F80    	  4337:                 cmpi.l #$00007F80,d2
02:00002876 66FE            	  4338:                 bne.s *
                            	  4339: 
                            	  4340: 
                            	  4341: *     WORD
02:00002878 203C000000FF    	  4342:                 move.l #$000000FF,d0    * Loop counter
02:0000287E 7200            	  4343:                 moveq  #$00000000,d1    * Flag results accumulator
02:00002880 7400            	  4344:                 moveq  #$00000000,d2    * Data results accumulator
02:00002882 7600            	  4345:                 moveq  #$00000000,d3
02:00002884 7800            	  4346:                 moveq  #$00000000,d4
02:00002886 2A3C0000FFF0    	  4347:                 move.l #$0000FFF0,d5
02:0000288C 7C00            	  4348:                 moveq  #$00000000,d6
02:0000288E 7E00            	  4349:                 moveq  #$00000000,d7
02:00002890 307C0100        	  4350:                 move.l #$00000100,a0
                            	  4351: 
02:00002894 5A45            	  4352: ADDQ_LOOP2:     addq.w #5,d5
02:00002896 40C6            	  4353:                 move.w SR,d6
02:00002898 02860000001F    	  4354:                 andi.l #$1F,d6        * Isolate flags
02:0000289E D286            	  4355:                 add.l d6,d1           * Copy flag results into accumulator
02:000028A0 D485            	  4356:                 add.l d5,d2           * Copy data results into data accumulator
02:000028A2 51C8FFF0        	  4357:                 dbf d0,ADDQ_LOOP2
                            	  4358: 
02:000028A6 0C8100000029    	  4359:                 cmpi.l #$00000029,d1
02:000028AC 66FE            	  4360:                 bne.s *
02:000028AE 0C8200057280    	  4361:                 cmpi.l #$00057280,d2
02:000028B4 66FE            	  4362:                 bne.s *
                            	  4363: 
                            	  4364: 
                            	  4365: *     LONG
02:000028B6 203C000000FF    	  4366:                 move.l #$000000FF,d0    * Loop counter
02:000028BC 7200            	  4367:                 moveq  #$00000000,d1    * Flag results accumulator
02:000028BE 7400            	  4368:                 moveq  #$00000000,d2    * Data results accumulator
02:000028C0 7600            	  4369:                 moveq  #$00000000,d3
02:000028C2 7800            	  4370:                 moveq  #$00000000,d4
02:000028C4 7AF0            	  4371:                 move.l #$FFFFFFF0,d5
02:000028C6 7C00            	  4372:                 moveq  #$00000000,d6
02:000028C8 7E00            	  4373:                 moveq  #$00000000,d7
                            	  4374: 
02:000028CA 5285            	  4375: ADDQ_LOOP3:     addq.l #1,d5
02:000028CC 40C6            	  4376:                 move.w SR,d6
02:000028CE 02860000001F    	  4377:                 andi.l #$1F,d6        * Isolate flags
02:000028D4 D286            	  4378:                 add.l d6,d1           * Copy flag results into accumulator
02:000028D6 D485            	  4379:                 add.l d5,d2           * Copy data results into data accumulator
02:000028D8 51C8FFF0        	  4380:                 dbf d0,ADDQ_LOOP3
                            	  4381: 
02:000028DC 0C810000008D    	  4382:                 cmpi.l #$0000008D,d1
02:000028E2 66FE            	  4383:                 bne.s *
02:000028E4 0C8200007080    	  4384:                 cmpi.l #$00007080,d2
02:000028EA 66FE            	  4385:                 bne.s *
                            	  4386: 
                            	  4387: *     Check that Flags are not updated for Address registers
02:000028EC 207C0000FFFF    	  4388:                 move.l #$0000FFFF,a0
02:000028F2 44FC0000        	  4389:                 move #$00,CCR         * Clear flags
02:000028F6 5E48            	  4390:                 addq.w #$7,a0
02:000028F8 65FE            	  4391:                 bcs.s *
                            	  4392: 
02:000028FA 4E75            	  4393:                 rts
                            	  4394: 
                            	  4395: 
                            	  4396: 
                            	  4397: *-----------------------------------------------------------
                            	  4398: *-----------------------------------------------------------
                            	  4399: * OPCODE : SUBQ
                            	  4400: *-----------------------------------------------------------
                            	  4401: *-----------------------------------------------------------
                            	  4402: 
                            	  4403: op_SUBQ:
                            	  4404: 
                            	  4405: *     BYTE
02:000028FC 203C000000FF    	  4406:                 move.l #$000000FF,d0    * Loop counter
02:00002902 7200            	  4407:                 moveq  #$00000000,d1    * Flag results accumulator
02:00002904 243C00001234    	  4408:                 move.l #$00001234,d2    * Data results accumulator
02:0000290A 7600            	  4409:                 moveq  #$00000000,d3
02:0000290C 7800            	  4410:                 moveq  #$00000000,d4
02:0000290E 7A12            	  4411:                 moveq  #$00000012,d5
02:00002910 7C00            	  4412:                 moveq  #$00000000,d6
02:00002912 7E00            	  4413:                 moveq  #$00000000,d7
                            	  4414: 
02:00002914 5305            	  4415: SUBQ_LOOP1:     subq.b #1,d5
02:00002916 40C6            	  4416:                 move.w SR,d6
02:00002918 02860000001F    	  4417:                 andi.l #$1F,d6        * Isolate flags
02:0000291E D286            	  4418:                 add.l d6,d1           * Copy flag results into accumulator
02:00002920 D485            	  4419:                 add.l d5,d2           * Copy data results into data accumulator
02:00002922 51C8FFF0        	  4420:                 dbf d0,SUBQ_LOOP1
                            	  4421: 
02:00002926 0C8100000417    	  4422:                 cmpi.l #$00000417,d1
02:0000292C 66FE            	  4423:                 bne.s *
02:0000292E 0C82000091B4    	  4424:                 cmpi.l #$000091B4,d2
02:00002934 66FE            	  4425:                 bne.s *
                            	  4426: 
                            	  4427: 
                            	  4428: *     WORD
02:00002936 203C000000FF    	  4429:                 move.l #$000000FF,d0    * Loop counter
02:0000293C 7200            	  4430:                 moveq  #$00000000,d1    * Flag results accumulator
02:0000293E 7400            	  4431:                 moveq  #$00000000,d2    * Data results accumulator
02:00002940 7600            	  4432:                 moveq  #$00000000,d3
02:00002942 7800            	  4433:                 moveq  #$00000000,d4
02:00002944 7A02            	  4434:                 moveq  #$00000002,d5
02:00002946 7C00            	  4435:                 moveq  #$00000000,d6
02:00002948 7E00            	  4436:                 moveq  #$00000000,d7
02:0000294A 307C0100        	  4437:                 move.l #$00000100,a0
                            	  4438: 
02:0000294E 5B45            	  4439: SUBQ_LOOP2:     subq.w #5,d5
02:00002950 40C6            	  4440:                 move.w SR,d6
02:00002952 02860000001F    	  4441:                 andi.l #$1F,d6        * Isolate flags
02:00002958 D286            	  4442:                 add.l d6,d1           * Copy flag results into accumulator
02:0000295A D485            	  4443:                 add.l d5,d2           * Copy data results into data accumulator
02:0000295C 51C8FFF0        	  4444:                 dbf d0,SUBQ_LOOP2
                            	  4445: 
02:00002960 0C8100000811    	  4446:                 cmpi.l #$00000811,d1
02:00002966 66FE            	  4447:                 bne.s *
02:00002968 0C8200FD7F80    	  4448:                 cmpi.l #$00FD7F80,d2
02:0000296E 66FE            	  4449:                 bne.s *
                            	  4450: 
                            	  4451: 
                            	  4452: *     LONG
02:00002970 203C000000FF    	  4453:                 move.l #$000000FF,d0    * Loop counter
02:00002976 7200            	  4454:                 moveq  #$00000000,d1    * Flag results accumulator
02:00002978 7400            	  4455:                 moveq  #$00000000,d2    * Data results accumulator
02:0000297A 7600            	  4456:                 moveq  #$00000000,d3
02:0000297C 7800            	  4457:                 moveq  #$00000000,d4
02:0000297E 7A07            	  4458:                 moveq  #$00000007,d5
02:00002980 7C00            	  4459:                 moveq  #$00000000,d6
02:00002982 7E00            	  4460:                 moveq  #$00000000,d7
                            	  4461: 
02:00002984 5385            	  4462: SUBQ_LOOP3:     subq.l #1,d5
02:00002986 40C6            	  4463:                 move.w SR,d6
02:00002988 02860000001F    	  4464:                 andi.l #$1F,d6        * Isolate flags
02:0000298E D286            	  4465:                 add.l d6,d1           * Copy flag results into accumulator
02:00002990 D485            	  4466:                 add.l d5,d2           * Copy data results into data accumulator
02:00002992 51C8FFF0        	  4467:                 dbf d0,SUBQ_LOOP3
                            	  4468: 
02:00002996 0C81000007DD    	  4469:                 cmpi.l #$000007DD,d1
02:0000299C 66FE            	  4470:                 bne.s *
02:0000299E 0C82FFFF8680    	  4471:                 cmpi.l #$FFFF8680,d2
02:000029A4 66FE            	  4472:                 bne.s *
                            	  4473: 
                            	  4474: *     Check that Flags are not updated for Address registers
02:000029A6 207C0001FFFF    	  4475:                 move.l #$0001FFFF,a0
02:000029AC 44FC0000        	  4476:                 move #$00,CCR         * Clear flags
02:000029B0 5F48            	  4477:                 subq.w #$7,a0
02:000029B2 65FE            	  4478:                 bcs.s *
                            	  4479: 
02:000029B4 4E75            	  4480:                 rts
                            	  4481: 
                            	  4482: 
                            	  4483: 
                            	  4484: 
                            	  4485: *-----------------------------------------------------------
                            	  4486: *-----------------------------------------------------------
                            	  4487: * OPCODE : MOVEQ
                            	  4488: *-----------------------------------------------------------
                            	  4489: *-----------------------------------------------------------
                            	  4490: 
                            	  4491: op_MOVEQ:
02:000029B6 7000            	  4492:                 moveq  #$00000000,d0
02:000029B8 7000            	  4493:                 moveq #$0,d0
02:000029BA 66FE            	  4494:                 bne.s *
02:000029BC 4A80            	  4495:                 cmpi.l #$00000000,d0
02:000029BE 66FE            	  4496:                 bne.s *
                            	  4497: 
02:000029C0 7000            	  4498:                 moveq  #$00000000,d0
02:000029C2 7080            	  4499:                 moveq #-128,d0
02:000029C4 67FE            	  4500:                 beq.s *
02:000029C6 6AFE            	  4501:                 bpl.s *
02:000029C8 0C80FFFFFF80    	  4502:                 cmpi.l #$FFFFFF80,d0
02:000029CE 66FE            	  4503:                 bne.s *
                            	  4504: 
                            	  4505: 
02:000029D0 4E75            	  4506:                 rts
                            	  4507: 
                            	  4508: 
                            	  4509: *-----------------------------------------------------------
                            	  4510: *-----------------------------------------------------------
                            	  4511: * OPCODE : DIVU
                            	  4512: *-----------------------------------------------------------
                            	  4513: *-----------------------------------------------------------
                            	  4514: 
                            	  4515: op_DIVU:
                            	  4516: 
02:000029D2 203CA5A5A5A5    	  4517:                 move.l #$a5a5a5a5,d0        * Initial Numerator
02:000029D8 223C00005A5A    	  4518:                 move.l #$00005a5a,d1        * Initial Divisor
02:000029DE 243CA5A5A5A5    	  4519:                 move.l #$a5a5a5a5,d2
02:000029E4 7600            	  4520:                 moveq  #$00000000,d3
02:000029E6 7800            	  4521:                 moveq  #$00000000,d4        * Cumulative data results
02:000029E8 7A00            	  4522:                 moveq  #$00000000,d5       * Cumulative flag results
02:000029EA 7C0E            	  4523:                 move.l #$0000000E,d6       * Inner loop counter
02:000029EC 7E1E            	  4524:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4525: 
                            	  4526: 
02:000029EE 80C1            	  4527: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
02:000029F0 40C3            	  4528:                 move.w SR,d3
02:000029F2 02830000000C    	  4529:                 andi.l #$0C,d3            * Isolate flags
02:000029F8 DA83            	  4530:                 add.l d3,d5               * Copy flag results into accumulator
02:000029FA D880            	  4531:                 add.l d0,d4               * Copy data results into data accumulator
02:000029FC E289            	  4532:                 lsr.l #$1,d1
                            	  4533: 
02:000029FE 51CEFFEE        	  4534:                 dbf d6,DIVU_OUTER1
02:00002A02 E28A            	  4535:                 lsr.l #$1,d2
02:00002A04 2002            	  4536:                 move.l d2,d0
02:00002A06 223C00005A5A    	  4537:                 move.l #$00005a5a,d1       * Initial Divisor
02:00002A0C 7C0E            	  4538:                 move.l #$0000000E,d6       * Inner loop counter
02:00002A0E 51CFFFDE        	  4539:                 dbf d7,DIVU_OUTER1
                            	  4540: 
02:00002A12 0C8492FEDB89    	  4541:                 cmpi.l #$92FEDB89,d4      * Check the data results
02:00002A18 66FE            	  4542:                 bne.s *
                            	  4543: 
02:00002A1A 0C8500000110    	  4544:                 cmpi.l #$00000110,d5      * Check the Flag results
02:00002A20 66FE            	  4545:                 bne.s *
                            	  4546: 
                            	  4547: 
02:00002A22 4E75            	  4548:                 rts
                            	  4549: 
                            	  4550: 
                            	  4551: 
                            	  4552: *-----------------------------------------------------------
                            	  4553: *-----------------------------------------------------------
                            	  4554: * OPCODE : DIVS
                            	  4555: *-----------------------------------------------------------
                            	  4556: *-----------------------------------------------------------
                            	  4557: 
                            	  4558: op_DIVS:
                            	  4559: 
02:00002A24 203CA5A5A5A5    	  4560:                 move.l #$a5a5a5a5,d0        * Initial Numerator
02:00002A2A 223C00005A5A    	  4561:                 move.l #$00005a5a,d1        * Initial Divisor
02:00002A30 243CA5A5A5A5    	  4562:                 move.l #$a5a5a5a5,d2
02:00002A36 7600            	  4563:                 moveq  #$00000000,d3
02:00002A38 7800            	  4564:                 moveq  #$00000000,d4        * Cumulative data results
02:00002A3A 7A00            	  4565:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002A3C 7C0E            	  4566:                 move.l #$0000000E,d6       * Inner loop counter
02:00002A3E 7E1E            	  4567:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4568: 
                            	  4569: 
02:00002A40 81C1            	  4570: DIVS_OUTER1:    divs d1,d0               * !! Easy68K C not always cleared
02:00002A42 40C3            	  4571:                 move.w SR,d3
02:00002A44 02830000000C    	  4572:                 andi.l #$0C,d3            * Isolate flags
02:00002A4A DA83            	  4573:                 add.l d3,d5               * Copy flag results into accumulator
02:00002A4C D880            	  4574:                 add.l d0,d4               * Copy data results into data accumulator
02:00002A4E E289            	  4575:                 lsr.l #$1,d1
                            	  4576: 
02:00002A50 51CEFFEE        	  4577:                 dbf d6,DIVS_OUTER1
02:00002A54 E28A            	  4578:                 lsr.l #$1,d2
02:00002A56 2002            	  4579:                 move.l d2,d0
02:00002A58 223C00005A5A    	  4580:                 move.l #$00005a5a,d1       * Initial Divisor
02:00002A5E 7C0E            	  4581:                 move.l #$0000000E,d6       * Inner loop counter
02:00002A60 51CFFFDE        	  4582:                 dbf d7,DIVS_OUTER1
                            	  4583: 
02:00002A64 0C844EC5D057    	  4584:                 cmpi.l #$4EC5D057,d4      * Check the data results
02:00002A6A 66FE            	  4585:                 bne.s *
                            	  4586: 
02:00002A6C 0C8500000038    	  4587:                 cmpi.l #$00000038,d5      * Check the Flag results
02:00002A72 66FE            	  4588:                 bne.s *
                            	  4589: 
                            	  4590: 
02:00002A74 4E75            	  4591:                 rts
                            	  4592: 
                            	  4593: 
                            	  4594: 
                            	  4595: *-----------------------------------------------------------
                            	  4596: *-----------------------------------------------------------
                            	  4597: * OPCODE : OR
                            	  4598: *-----------------------------------------------------------
                            	  4599: *-----------------------------------------------------------
                            	  4600: 
                            	  4601: op_OR:
                            	  4602: 
                            	  4603: *  * <EA> to Register
                            	  4604: 
02:00002A76 203CA5A5A5A5    	  4605:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002A7C 223C8167E123    	  4606:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002A82 243CA5A5A5A5    	  4607:                 move.l #$a5a5a5a5,d2
02:00002A88 7600            	  4608:                 moveq  #$00000000,d3
02:00002A8A 7800            	  4609:                 moveq  #$00000000,d4       * Cumulative data results
02:00002A8C 7A00            	  4610:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002A8E 7C1E            	  4611:                 move.l #$0000001E,d6       * Inner loop counter
02:00002A90 7E1E            	  4612:                 move.l #$0000001E,d7       * Outer loop counter
02:00002A92 307C0100        	  4613:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4614: 
                            	  4615: 
                            	  4616: OR_OUTER1:
                            	  4617: 
                            	  4618: *     BYTE
02:00002A96 2081            	  4619:                 move.l d1,(a0)
02:00002A98 8010            	  4620:                 or.b (a0),d0
02:00002A9A 40C3            	  4621:                 move.w SR,d3
02:00002A9C 02830000000C    	  4622:                 andi.l #$0C,d3            * Isolate flags
02:00002AA2 DA83            	  4623:                 add.l d3,d5               * Copy flag results into accumulator
02:00002AA4 D880            	  4624:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4625: 
                            	  4626: *     WORD
02:00002AA6 2081            	  4627:                 move.l d1,(a0)
02:00002AA8 8050            	  4628:                 or.w (a0),d0
02:00002AAA 40C3            	  4629:                 move.w SR,d3
02:00002AAC 02830000000C    	  4630:                 andi.l #$0C,d3            * Isolate flags
02:00002AB2 DA83            	  4631:                 add.l d3,d5               * Copy flag results into accumulator
02:00002AB4 D880            	  4632:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4633: 
                            	  4634: *     LONG
02:00002AB6 2081            	  4635:                 move.l d1,(a0)
02:00002AB8 8090            	  4636:                 or.l (a0),d0
02:00002ABA 40C3            	  4637:                 move.w SR,d3
02:00002ABC 02830000000F    	  4638:                 andi.l #$0F,d3            * Isolate flags
02:00002AC2 DA83            	  4639:                 add.l d3,d5               * Copy flag results into accumulator
02:00002AC4 D880            	  4640:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4641: 
                            	  4642: 
02:00002AC6 E289            	  4643:                 lsr.l #$1,d1
02:00002AC8 51CEFFCC        	  4644:                 dbf d6,OR_OUTER1
02:00002ACC E28A            	  4645:                 lsr.l #$1,d2
02:00002ACE 223C8167E123    	  4646:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002AD4 7C1E            	  4647:                 move.l #$0000001E,d6       * Inner loop counter
02:00002AD6 51CFFFBE        	  4648:                 dbf d7,OR_OUTER1
                            	  4649: 
02:00002ADA 0C8476EAC803    	  4650:                 cmpi.l #$76EAC803,d4      * Check the data results
02:00002AE0 66FE            	  4651:                 bne.s *
02:00002AE2 0C8500005A18    	  4652:                 cmpi.l #$00005A18,d5      * Check the Flag results
02:00002AE8 66FE            	  4653:                 bne.s *
                            	  4654: 
                            	  4655: 
                            	  4656: *  * Register to <EA>
                            	  4657: 
02:00002AEA 203C86738374    	  4658:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002AF0 223CFC55F2FE    	  4659:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002AF6 243C86738374    	  4660:                 move.l #$86738374,d2
02:00002AFC 7600            	  4661:                 moveq  #$00000000,d3
02:00002AFE 7800            	  4662:                 moveq  #$00000000,d4       * Cumulative data results
02:00002B00 7A00            	  4663:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002B02 7C1E            	  4664:                 move.l #$0000001E,d6       * Inner loop counter
02:00002B04 7E1D            	  4665:                 move.l #$0000001D,d7       * Outer loop counter
02:00002B06 307C0100        	  4666:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4667: 
                            	  4668: 
                            	  4669: OR_OUTER2:
                            	  4670: 
                            	  4671: *     BYTE
02:00002B0A 2080            	  4672:                 move.l d0,(a0)
02:00002B0C 8310            	  4673:                 or.b d1,(a0)
02:00002B0E 40C3            	  4674:                 move.w SR,d3
02:00002B10 02830000000C    	  4675:                 andi.l #$0C,d3            * Isolate flags
02:00002B16 DA83            	  4676:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B18 D890            	  4677:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4678: 
                            	  4679: *     WORD
02:00002B1A 2080            	  4680:                 move.l d0,(a0)
02:00002B1C 8350            	  4681:                 or.w d1,(a0)
02:00002B1E 40C3            	  4682:                 move.w SR,d3
02:00002B20 02830000000C    	  4683:                 andi.l #$0C,d3            * Isolate flags
02:00002B26 DA83            	  4684:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B28 D890            	  4685:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4686: 
                            	  4687: *     LONG
02:00002B2A 2080            	  4688:                 move.l d0,(a0)
02:00002B2C 8390            	  4689:                 or.l d1,(a0)
02:00002B2E 40C3            	  4690:                 move.w SR,d3
02:00002B30 02830000000F    	  4691:                 andi.l #$0F,d3            * Isolate flags
02:00002B36 DA83            	  4692:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B38 D890            	  4693:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4694: 
                            	  4695: 
02:00002B3A E289            	  4696:                 lsr.l #$1,d1
02:00002B3C 51CEFFCC        	  4697:                 dbf d6,OR_OUTER2
02:00002B40 E28A            	  4698:                 lsr.l #$1,d2
02:00002B42 223C8167E123    	  4699:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002B48 7C1E            	  4700:                 move.l #$0000001E,d6       * Inner loop counter
02:00002B4A 51CFFFBE        	  4701:                 dbf d7,OR_OUTER2
                            	  4702: 
02:00002B4E 0C84FA82B9E4    	  4703:                 cmpi.l #$FA82B9E4,d4      * Check the data results
02:00002B54 66FE            	  4704:                 bne.s *
02:00002B56 0C8500005730    	  4705:                 cmpi.l #$00005730,d5      * Check the Flag results
02:00002B5C 66FE            	  4706:                 bne.s *
                            	  4707: 
                            	  4708: 
02:00002B5E 4E75            	  4709:                 rts
                            	  4710: 
                            	  4711: 
                            	  4712: 
                            	  4713: *-----------------------------------------------------------
                            	  4714: *-----------------------------------------------------------
                            	  4715: * OPCODE : AND
                            	  4716: *-----------------------------------------------------------
                            	  4717: *-----------------------------------------------------------
                            	  4718: 
                            	  4719: op_AND:
                            	  4720: 
                            	  4721: *  * <EA> to Register
                            	  4722: 
02:00002B60 203CA5A5A5A5    	  4723:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002B66 223C8167E123    	  4724:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002B6C 243CA5A5A5A5    	  4725:                 move.l #$a5a5a5a5,d2
02:00002B72 7600            	  4726:                 moveq  #$00000000,d3
02:00002B74 7800            	  4727:                 moveq  #$00000000,d4       * Cumulative data results
02:00002B76 7A00            	  4728:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002B78 7C1E            	  4729:                 move.l #$0000001E,d6       * Inner loop counter
02:00002B7A 7E1E            	  4730:                 move.l #$0000001E,d7       * Outer loop counter
02:00002B7C 307C0100        	  4731:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4732: 
                            	  4733: 
                            	  4734: AND_OUTER1:
                            	  4735: 
                            	  4736: *     BYTE
02:00002B80 2081            	  4737:                 move.l d1,(a0)
02:00002B82 C010            	  4738:                 and.b (a0),d0
02:00002B84 40C3            	  4739:                 move.w sr,d3
02:00002B86 02830000000C    	  4740:                 andi.l #$0C,d3            * Isolate flags
02:00002B8C DA83            	  4741:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B8E D880            	  4742:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4743: 
                            	  4744: *     WORD
02:00002B90 2081            	  4745:                 move.l d1,(a0)
02:00002B92 C050            	  4746:                 and.w (a0),d0
02:00002B94 40C3            	  4747:                 move.w sr,d3
02:00002B96 02830000000C    	  4748:                 andi.l #$0C,d3            * Isolate flags
02:00002B9C DA83            	  4749:                 add.l d3,d5               * Copy flag results into accumulator
02:00002B9E D880            	  4750:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4751: 
                            	  4752: *     LONG
02:00002BA0 2081            	  4753:                 move.l d1,(a0)
02:00002BA2 C090            	  4754:                 and.l (a0),d0
02:00002BA4 40C3            	  4755:                 move.w sr,d3
02:00002BA6 02830000000F    	  4756:                 andi.l #$0F,d3            * Isolate flags
02:00002BAC DA83            	  4757:                 add.l d3,d5               * Copy flag results into accumulator
02:00002BAE D880            	  4758:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4759: 
                            	  4760: 
02:00002BB0 E289            	  4761:                 lsr.l #$1,d1
02:00002BB2 51CEFFCC        	  4762:                 dbf d6,AND_OUTER1
02:00002BB6 E28A            	  4763:                 lsr.l #$1,d2
02:00002BB8 223C8167E123    	  4764:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002BBE 7C1E            	  4765:                 move.l #$0000001E,d6       * Inner loop counter
02:00002BC0 51CFFFBE        	  4766:                 dbf d7,AND_OUTER1
                            	  4767: 
02:00002BC4 0C84CF212883    	  4768:                 cmpi.l #$CF212883,d4      * Check the data results
02:00002BCA 66FE            	  4769:                 bne.s *
02:00002BCC 0C8500002D10    	  4770:                 cmpi.l #$00002D10,d5      * Check the Flag results
02:00002BD2 66FE            	  4771:                 bne.s *
                            	  4772: 
                            	  4773: 
                            	  4774: *  * Register to <EA>
                            	  4775: 
02:00002BD4 203C86738374    	  4776:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002BDA 223CFC55F2FE    	  4777:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002BE0 243C86738374    	  4778:                 move.l #$86738374,d2
02:00002BE6 7600            	  4779:                 moveq  #$00000000,d3
02:00002BE8 7800            	  4780:                 moveq  #$00000000,d4       * Cumulative data results
02:00002BEA 7A00            	  4781:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002BEC 7C1E            	  4782:                 move.l #$0000001E,d6       * Inner loop counter
02:00002BEE 7E1D            	  4783:                 move.l #$0000001D,d7       * Outer loop counter
02:00002BF0 307C0100        	  4784:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4785: 
                            	  4786: 
                            	  4787: AND_OUTER2:
                            	  4788: 
                            	  4789: *     BYTE
02:00002BF4 2080            	  4790:                 move.l d0,(a0)
02:00002BF6 C310            	  4791:                 and.b d1,(a0)
02:00002BF8 40C3            	  4792:                 move.w sr,d3
02:00002BFA 02830000000C    	  4793:                 andi.l #$0C,d3            * Isolate flags
02:00002C00 DA83            	  4794:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C02 D890            	  4795:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4796: 
                            	  4797: *     WORD
02:00002C04 2080            	  4798:                 move.l d0,(a0)
02:00002C06 C350            	  4799:                 and.w d1,(a0)
02:00002C08 40C3            	  4800:                 move.w sr,d3
02:00002C0A 02830000000C    	  4801:                 andi.l #$0C,d3            * Isolate flags
02:00002C10 DA83            	  4802:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C12 D890            	  4803:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4804: 
                            	  4805: *     LONG
02:00002C14 2080            	  4806:                 move.l d0,(a0)
02:00002C16 C390            	  4807:                 and.l d1,(a0)
02:00002C18 40C3            	  4808:                 move.w sr,d3
02:00002C1A 02830000000F    	  4809:                 andi.l #$0F,d3            * Isolate flags
02:00002C20 DA83            	  4810:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C22 D890            	  4811:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4812: 
                            	  4813: 
02:00002C24 E289            	  4814:                 lsr.l #$1,d1
02:00002C26 51CEFFCC        	  4815:                 dbf d6,AND_OUTER2
02:00002C2A E28A            	  4816:                 lsr.l #$1,d2
02:00002C2C 223C8167E123    	  4817:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002C32 7C1E            	  4818:                 move.l #$0000001E,d6       * Inner loop counter
02:00002C34 51CFFFBE        	  4819:                 dbf d7,AND_OUTER2
                            	  4820: 
02:00002C38 0C844A3DE544    	  4821:                 cmpi.l #$4A3DE544,d4      * Check the data results
02:00002C3E 66FE            	  4822:                 bne.s *
02:00002C40 0C85000018E8    	  4823:                 cmpi.l #$000018E8,d5      * Check the Flag results
02:00002C46 66FE            	  4824:                 bne.s *
                            	  4825: 
                            	  4826: 
02:00002C48 4E75            	  4827:                 rts
                            	  4828: 
                            	  4829: 
                            	  4830: 
                            	  4831: *-----------------------------------------------------------
                            	  4832: *-----------------------------------------------------------
                            	  4833: * OPCODE : EOR
                            	  4834: *-----------------------------------------------------------
                            	  4835: *-----------------------------------------------------------
                            	  4836: 
                            	  4837: op_EOR:
                            	  4838: 
                            	  4839: *  * Register to <EA>
                            	  4840: 
02:00002C4A 203C86738374    	  4841:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002C50 223CFC55F2FE    	  4842:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002C56 243C86738374    	  4843:                 move.l #$86738374,d2
02:00002C5C 7600            	  4844:                 moveq  #$00000000,d3
02:00002C5E 7800            	  4845:                 moveq  #$00000000,d4       * Cumulative data results
02:00002C60 7A00            	  4846:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002C62 7C1E            	  4847:                 move.l #$0000001E,d6       * Inner loop counter
02:00002C64 7E1D            	  4848:                 move.l #$0000001D,d7       * Outer loop counter
02:00002C66 307C0100        	  4849:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4850: 
                            	  4851: 
                            	  4852: EOR_OUTER2:
                            	  4853: 
                            	  4854: *     BYTE
02:00002C6A 2080            	  4855:                 move.l d0,(a0)
02:00002C6C B310            	  4856:                 eor.b d1,(a0)
02:00002C6E 40C3            	  4857:                 move.w sr,d3
02:00002C70 02830000000C    	  4858:                 andi.l #$0C,d3            * Isolate flags
02:00002C76 DA83            	  4859:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C78 D890            	  4860:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4861: 
                            	  4862: *     WORD
02:00002C7A 2080            	  4863:                 move.l d0,(a0)
02:00002C7C B350            	  4864:                 eor.w d1,(a0)
02:00002C7E 40C3            	  4865:                 move.w sr,d3
02:00002C80 02830000000C    	  4866:                 andi.l #$0C,d3            * Isolate flags
02:00002C86 DA83            	  4867:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C88 D890            	  4868:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4869: 
                            	  4870: *     LONG
02:00002C8A 2080            	  4871:                 move.l d0,(a0)
02:00002C8C B390            	  4872:                 eor.l d1,(a0)
02:00002C8E 40C3            	  4873:                 move.w sr,d3
02:00002C90 02830000000F    	  4874:                 andi.l #$0F,d3            * Isolate flags
02:00002C96 DA83            	  4875:                 add.l d3,d5               * Copy flag results into accumulator
02:00002C98 D890            	  4876:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4877: 
                            	  4878: 
02:00002C9A E289            	  4879:                 lsr.l #$1,d1
02:00002C9C 51CEFFCC        	  4880:                 dbf d6,EOR_OUTER2
02:00002CA0 E28A            	  4881:                 lsr.l #$1,d2
02:00002CA2 223C8167E123    	  4882:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002CA8 7C1E            	  4883:                 move.l #$0000001E,d6       * Inner loop counter
02:00002CAA 51CFFFBE        	  4884:                 dbf d7,EOR_OUTER2
                            	  4885: 
02:00002CAE 0C8455C5EB70    	  4886:                 cmpi.l #$55C5EB70,d4      * Check the data results
02:00002CB4 66FE            	  4887:                 bne.s *
02:00002CB6 0C8500004430    	  4888:                 cmpi.l #$00004430,d5      * Check the Flag results
02:00002CBC 66FE            	  4889:                 bne.s *
                            	  4890: 
                            	  4891: 
02:00002CBE 4E75            	  4892:                 rts
                            	  4893: 
                            	  4894: 
                            	  4895: *-----------------------------------------------------------
                            	  4896: *-----------------------------------------------------------
                            	  4897: * OPCODE : CMP
                            	  4898: *-----------------------------------------------------------
                            	  4899: *-----------------------------------------------------------
                            	  4900: 
                            	  4901: op_CMP:
                            	  4902: 
                            	  4903: 
                            	  4904: *  * <EA> to Register
                            	  4905: 
02:00002CC0 203CA5A5A5A5    	  4906:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002CC6 223C8167E123    	  4907:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002CCC 243CA5A5A5A5    	  4908:                 move.l #$a5a5a5a5,d2
02:00002CD2 7600            	  4909:                 moveq  #$00000000,d3
02:00002CD4 7800            	  4910:                 moveq  #$00000000,d4       * Cumulative data results
02:00002CD6 7A00            	  4911:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002CD8 7C1E            	  4912:                 move.l #$0000001E,d6       * Inner loop counter
02:00002CDA 7E1E            	  4913:                 move.l #$0000001E,d7       * Outer loop counter
02:00002CDC 307C0100        	  4914:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4915: 
                            	  4916: 
                            	  4917: CMP_OUTER1:
                            	  4918: 
                            	  4919: *     BYTE
02:00002CE0 2081            	  4920:                 move.l d1,(a0)
02:00002CE2 B010            	  4921:                 cmp.b (a0),d0
02:00002CE4 40C3            	  4922:                 move.w sr,d3
02:00002CE6 02830000000F    	  4923:                 andi.l #$0F,d3            * Isolate flags
02:00002CEC DA83            	  4924:                 add.l d3,d5               * Copy flag results into accumulator
02:00002CEE D880            	  4925:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4926: 
                            	  4927: *     WORD
02:00002CF0 2081            	  4928:                 move.l d1,(a0)
02:00002CF2 B050            	  4929:                 cmp.w (a0),d0
02:00002CF4 40C3            	  4930:                 move.w sr,d3
02:00002CF6 02830000000F    	  4931:                 andi.l #$0F,d3            * Isolate flags
02:00002CFC DA83            	  4932:                 add.l d3,d5               * Copy flag results into accumulator
02:00002CFE D880            	  4933:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4934: 
                            	  4935: *     LONG
02:00002D00 2081            	  4936:                 move.l d1,(a0)
02:00002D02 B090            	  4937:                 cmp.l (a0),d0
02:00002D04 40C3            	  4938:                 move.w sr,d3
02:00002D06 02830000000F    	  4939:                 andi.l #$0F,d3            * Isolate flags
02:00002D0C DA83            	  4940:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D0E D880            	  4941:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4942: 
                            	  4943: 
02:00002D10 E289            	  4944:                 lsr.l #$1,d1
02:00002D12 51CEFFCC        	  4945:                 dbf d6,CMP_OUTER1
02:00002D16 E28A            	  4946:                 lsr.l #$1,d2
02:00002D18 223C8167E123    	  4947:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002D1E 7C1E            	  4948:                 move.l #$0000001E,d6       * Inner loop counter
02:00002D20 51CFFFBE        	  4949:                 dbf d7,CMP_OUTER1
                            	  4950: 
02:00002D24 0C847878712F    	  4951:                 cmpi.l #$7878712F,d4      * Check the data results
02:00002D2A 66FE            	  4952:                 bne.s *
02:00002D2C 0C8500005502    	  4953:                 cmpi.l #$00005502,d5      * Check the Flag results
02:00002D32 66FE            	  4954:                 bne.s *
                            	  4955: 
                            	  4956: 
                            	  4957: 
02:00002D34 4E75            	  4958:                 rts
                            	  4959: 
                            	  4960: 
                            	  4961: *-----------------------------------------------------------
                            	  4962: *-----------------------------------------------------------
                            	  4963: * OPCODE : CMPA
                            	  4964: *-----------------------------------------------------------
                            	  4965: *-----------------------------------------------------------
                            	  4966: 
                            	  4967: op_CMPA:
                            	  4968: 
                            	  4969: 
                            	  4970: *  * <EA> to Register
                            	  4971: 
02:00002D36 207CA5A5A5A5    	  4972:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
02:00002D3C 223C8167E123    	  4973:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002D42 243CA5A5A5A5    	  4974:                 move.l #$a5a5a5a5,d2
02:00002D48 7600            	  4975:                 moveq  #$00000000,d3
02:00002D4A 7800            	  4976:                 moveq  #$00000000,d4       * Cumulative data results
02:00002D4C 7A00            	  4977:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002D4E 7C1E            	  4978:                 move.l #$0000001E,d6       * Inner loop counter
02:00002D50 7E1E            	  4979:                 move.l #$0000001E,d7       * Outer loop counter
02:00002D52 327C0100        	  4980:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4981: 
                            	  4982: 
                            	  4983: CMPA_OUTER1:
                            	  4984: 
                            	  4985: 
                            	  4986: *     WORD
02:00002D56 2281            	  4987:                 move.l d1,(a1)
02:00002D58 B0D1            	  4988:                 cmpa.w (a1),a0
02:00002D5A 40C3            	  4989:                 move.w sr,d3
02:00002D5C 02830000000F    	  4990:                 andi.l #$0F,d3            * Isolate flags
02:00002D62 DA83            	  4991:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D64 D888            	  4992:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4993: 
                            	  4994: *     LONG
02:00002D66 2281            	  4995:                 move.l d1,(a1)
02:00002D68 B1D1            	  4996:                 cmpa.l (a1),a0
02:00002D6A 40C3            	  4997:                 move.w sr,d3
02:00002D6C 02830000000F    	  4998:                 andi.l #$0F,d3            * Isolate flags
02:00002D72 DA83            	  4999:                 add.l d3,d5               * Copy flag results into accumulator
02:00002D74 D888            	  5000:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5001: 
                            	  5002: 
02:00002D76 E289            	  5003:                 lsr.l #$1,d1
02:00002D78 51CEFFDC        	  5004:                 dbf d6,CMPA_OUTER1
02:00002D7C E28A            	  5005:                 lsr.l #$1,d2
02:00002D7E 223C8167E123    	  5006:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002D84 7C1E            	  5007:                 move.l #$0000001E,d6       * Inner loop counter
02:00002D86 51CFFFCE        	  5008:                 dbf d7,CMPA_OUTER1
                            	  5009: 
02:00002D8A 0C84A5A5A0CA    	  5010:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
02:00002D90 66FE            	  5011:                 bne.s *
02:00002D92 0C8500003A7D    	  5012:                 cmpi.l #$00003A7D,d5      * Check the Flag results
02:00002D98 66FE            	  5013:                 bne.s *
                            	  5014: 
                            	  5015: 
02:00002D9A 4E75            	  5016:                 rts
                            	  5017: 
                            	  5018: 
                            	  5019: 
                            	  5020: *-----------------------------------------------------------
                            	  5021: *-----------------------------------------------------------
                            	  5022: * OPCODE : CMPM
                            	  5023: *-----------------------------------------------------------
                            	  5024: *-----------------------------------------------------------
                            	  5025: 
                            	  5026: op_CMPM:
                            	  5027: 
02:00002D9C 307C0100        	  5028:                 move.l #$00000100,a0       * Address for Data-X
02:00002DA0 327C0200        	  5029:                 move.l #$00000200,a1       * Address for Data-Y
02:00002DA4 7000            	  5030:                 moveq  #$00000000,d0
02:00002DA6 7200            	  5031:                 moveq  #$00000000,d1
02:00002DA8 7400            	  5032:                 moveq  #$00000000,d2
                            	  5033: 
02:00002DAA 20FC11FF5580    	  5034:                 move.l #$11FF5580,(a0)+   * Populate test data
02:00002DB0 20FC1111FFFF    	  5035:                 move.l #$1111FFFF,(a0)+   * Populate test data
02:00002DB6 20FC33333333    	  5036:                 move.l #$33333333,(a0)+   * Populate test data
02:00002DBC 20FC44444444    	  5037:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5038: 
02:00002DC2 22FC80FF337F    	  5039:                 move.l #$80FF337F,(a1)+   * Populate test data
02:00002DC8 22FCFFFF1111    	  5040:                 move.l #$FFFF1111,(a1)+   * Populate test data
02:00002DCE 22FC33333333    	  5041:                 move.l #$33333333,(a1)+   * Populate test data
02:00002DD4 22FC44444444    	  5042:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5043: 
02:00002DDA 307C0100        	  5044:                 move.l #$00000100,a0       * Address for Data-X
02:00002DDE 327C0200        	  5045:                 move.l #$00000200,a1       * Address for Data-Y
02:00002DE2 7C0F            	  5046:                 move.l #$0000000F,d6       * Loop counter
                            	  5047: 
02:00002DE4 B308            	  5048: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
02:00002DE6 40C3            	  5049:                 move.w sr,d3
02:00002DE8 02830000000F    	  5050:                 andi.l #$0F,d3            * Isolate flags
02:00002DEE D083            	  5051:                 add.l d3,d0               * Copy flag results into accumulator
02:00002DF0 51CEFFF2        	  5052:                 dbf d6,CMPM_LOOP1
                            	  5053: 
                            	  5054: 
02:00002DF4 307C0100        	  5055:                 move.l #$00000100,a0       * Address for Data-X
02:00002DF8 327C0200        	  5056:                 move.l #$00000200,a1       * Address for Data-Y
02:00002DFC 7C07            	  5057:                 moveq  #$00000007,d6       * Loop counter
                            	  5058: 
02:00002DFE B348            	  5059: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
02:00002E00 40C3            	  5060:                 move.w sr,d3
02:00002E02 02830000000F    	  5061:                 andi.l #$0F,d3            * Isolate flags
02:00002E08 D283            	  5062:                 add.l d3,d1               * Copy flag results into accumulator
02:00002E0A 51CEFFF2        	  5063:                 dbf d6,CMPM_LOOP2
                            	  5064: 
                            	  5065: 
02:00002E0E 307C0100        	  5066:                 move.l #$00000100,a0       * Address for Data-X
02:00002E12 327C0200        	  5067:                 move.l #$00000200,a1       * Address for Data-Y
02:00002E16 7C03            	  5068:                 moveq  #$00000003,d6       * Loop counter
                            	  5069: 
02:00002E18 B388            	  5070: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
02:00002E1A 40C3            	  5071:                 move.w sr,d3
02:00002E1C 02830000000F    	  5072:                 andi.l #$0F,d3            * Isolate flags
02:00002E22 D483            	  5073:                 add.l d3,d2               * Copy flag results into accumulator
02:00002E24 51CEFFF2        	  5074:                 dbf d6,CMPM_LOOP3
                            	  5075: 
                            	  5076: 
02:00002E28 0C800000004C    	  5077:                 cmpi.l #$0000004C,d0      * Check the data results
02:00002E2E 66FE            	  5078:                 bne.s *
02:00002E30 0C8100000024    	  5079:                 cmpi.l #$00000024,d1
02:00002E36 66FE            	  5080:                 bne.s *
02:00002E38 0C8200000012    	  5081:                 cmpi.l #$00000012,d2
02:00002E3E 66FE            	  5082:                 bne.s *
                            	  5083: 
02:00002E40 4E75            	  5084:                 rts
                            	  5085: 
                            	  5086: 
                            	  5087: *-----------------------------------------------------------
                            	  5088: *-----------------------------------------------------------
                            	  5089: * OPCODE : ADD
                            	  5090: *-----------------------------------------------------------
                            	  5091: *-----------------------------------------------------------
                            	  5092: 
                            	  5093: op_ADD:
                            	  5094: 
                            	  5095: 
                            	  5096: *  * <EA> to Register
02:00002E42 203CA5A5A5A5    	  5097:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002E48 223C8167E123    	  5098:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002E4E 243CA5A5A5A5    	  5099:                 move.l #$a5a5a5a5,d2
02:00002E54 7600            	  5100:                 moveq  #$00000000,d3
02:00002E56 7800            	  5101:                 moveq  #$00000000,d4       * Cumulative data results
02:00002E58 7A00            	  5102:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002E5A 7C1E            	  5103:                 move.l #$0000001E,d6       * Inner loop counter
02:00002E5C 7E1E            	  5104:                 move.l #$0000001E,d7       * Outer loop counter
02:00002E5E 307C0100        	  5105:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5106: 
                            	  5107: 
                            	  5108: ADD_OUTER1:
                            	  5109: 
                            	  5110: *     BYTE
02:00002E62 2081            	  5111:                 move.l d1,(a0)
02:00002E64 D010            	  5112:                 add.b (a0),d0
02:00002E66 40C3            	  5113:                 move.w sr,d3
02:00002E68 02830000001F    	  5114:                 andi.l #$1F,d3            * Isolate flags
02:00002E6E DA83            	  5115:                 add.l d3,d5               * Copy flag results into accumulator
02:00002E70 D880            	  5116:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5117: 
                            	  5118: *     WORD
02:00002E72 2081            	  5119:                 move.l d1,(a0)
02:00002E74 D050            	  5120:                 add.w (a0),d0
02:00002E76 40C3            	  5121:                 move.w sr,d3
02:00002E78 02830000000C    	  5122:                 andi.l #$0C,d3            * Isolate flags
02:00002E7E DA83            	  5123:                 add.l d3,d5               * Copy flag results into accumulator
02:00002E80 D880            	  5124:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5125: 
                            	  5126: *     LONG
02:00002E82 2081            	  5127:                 move.l d1,(a0)
02:00002E84 D090            	  5128:                 add.l (a0),d0
02:00002E86 40C3            	  5129:                 move.w sr,d3
02:00002E88 02830000000F    	  5130:                 andi.l #$0F,d3            * Isolate flags
02:00002E8E DA83            	  5131:                 add.l d3,d5               * Copy flag results into accumulator
02:00002E90 D880            	  5132:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5133: 
                            	  5134: 
02:00002E92 E299            	  5135:                 ror.l #$1,d1
02:00002E94 51CEFFCC        	  5136:                 dbf d6,ADD_OUTER1
02:00002E98 E29A            	  5137:                 ror.l #$1,d2
02:00002E9A 223C8167E123    	  5138:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002EA0 7C1E            	  5139:                 move.l #$0000001E,d6       * Inner loop counter
02:00002EA2 51CFFFBE        	  5140:                 dbf d7,ADD_OUTER1
                            	  5141: 
02:00002EA6 0C8423ED428F    	  5142:                 cmpi.l #$23ED428F,d4      * Check the data results
02:00002EAC 66FE            	  5143:                 bne.s *
02:00002EAE 0C8500004C96    	  5144:                 cmpi.l #$00004C96,d5      * Check the Flag results
02:00002EB4 66FE            	  5145:                 bne.s *
                            	  5146: 
                            	  5147: 
                            	  5148: *  * Register to <EA>
02:00002EB6 203C86738374    	  5149:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002EBC 223CFC55F2FE    	  5150:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002EC2 243C86738374    	  5151:                 move.l #$86738374,d2
02:00002EC8 7600            	  5152:                 moveq  #$00000000,d3
02:00002ECA 7800            	  5153:                 moveq  #$00000000,d4       * Cumulative data results
02:00002ECC 7A00            	  5154:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002ECE 7C1E            	  5155:                 move.l #$0000001E,d6       * Inner loop counter
02:00002ED0 7E1D            	  5156:                 move.l #$0000001D,d7       * Outer loop counter
02:00002ED2 307C0100        	  5157:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5158: 
                            	  5159: 
                            	  5160: ADD_OUTER2:
                            	  5161: 
                            	  5162: *     BYTE
02:00002ED6 2080            	  5163:                 move.l d0,(a0)
02:00002ED8 D310            	  5164:                 add.b d1,(a0)
02:00002EDA 40C3            	  5165:                 move.w sr,d3
02:00002EDC 02830000000C    	  5166:                 andi.l #$0C,d3            * Isolate flags
02:00002EE2 DA83            	  5167:                 add.l d3,d5               * Copy flag results into accumulator
02:00002EE4 D890            	  5168:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5169: 
                            	  5170: *     WORD
02:00002EE6 2080            	  5171:                 move.l d0,(a0)
02:00002EE8 D350            	  5172:                 add.w d1,(a0)
02:00002EEA 40C3            	  5173:                 move.w sr,d3
02:00002EEC 02830000001F    	  5174:                 andi.l #$1F,d3            * Isolate flags
02:00002EF2 DA83            	  5175:                 add.l d3,d5               * Copy flag results into accumulator
02:00002EF4 D890            	  5176:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5177: 
                            	  5178: *     LONG
02:00002EF6 2080            	  5179:                 move.l d0,(a0)
02:00002EF8 D390            	  5180:                 add.l d1,(a0)
02:00002EFA 40C3            	  5181:                 move.w sr,d3
02:00002EFC 02830000000F    	  5182:                 andi.l #$0F,d3            * Isolate flags
02:00002F02 DA83            	  5183:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F04 D890            	  5184:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5185: 
                            	  5186: 
02:00002F06 E299            	  5187:                 ror.l #$1,d1
02:00002F08 51CEFFCC        	  5188:                 dbf d6,ADD_OUTER2
02:00002F0C E29A            	  5189:                 ror.l #$1,d2
02:00002F0E 223C8167E123    	  5190:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002F14 7C1E            	  5191:                 move.l #$0000001E,d6       * Inner loop counter
02:00002F16 51CFFFBE        	  5192:                 dbf d7,ADD_OUTER2
                            	  5193: 
02:00002F1A 0C846701B884    	  5194:                 cmpi.l #$6701B884,d4      * Check the data results
02:00002F20 66FE            	  5195:                 bne.s *
02:00002F22 0C8500005467    	  5196:                 cmpi.l #$00005467,d5      * Check the Flag results
02:00002F28 66FE            	  5197:                 bne.s *
                            	  5198: 
02:00002F2A 4E75            	  5199:                 rts
                            	  5200: 
                            	  5201: *-----------------------------------------------------------
                            	  5202: *-----------------------------------------------------------
                            	  5203: * OPCODE : SUB
                            	  5204: *-----------------------------------------------------------
                            	  5205: *-----------------------------------------------------------
                            	  5206: 
                            	  5207: op_SUB:
                            	  5208: 
                            	  5209: *  * <EA> to Register
02:00002F2C 203CA5A5A5A5    	  5210:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00002F32 223C8167E123    	  5211:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:00002F38 243CA5A5A5A5    	  5212:                 move.l #$a5a5a5a5,d2
02:00002F3E 7600            	  5213:                 moveq  #$00000000,d3
02:00002F40 7800            	  5214:                 moveq  #$00000000,d4       * Cumulative data results
02:00002F42 7A00            	  5215:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002F44 7C1E            	  5216:                 move.l #$0000001E,d6       * Inner loop counter
02:00002F46 7E1E            	  5217:                 move.l #$0000001E,d7       * Outer loop counter
02:00002F48 307C0100        	  5218:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5219: 
                            	  5220: 
                            	  5221: SUB_OUTER1:
                            	  5222: 
                            	  5223: *     BYTE
02:00002F4C 2081            	  5224:                 move.l d1,(a0)
02:00002F4E 9010            	  5225:                 sub.b (a0),d0
02:00002F50 40C3            	  5226:                 move.w sr,d3
02:00002F52 02830000001F    	  5227:                 andi.l #$1F,d3            * Isolate flags
02:00002F58 DA83            	  5228:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F5A D880            	  5229:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5230: 
                            	  5231: *     WORD
02:00002F5C 2081            	  5232:                 move.l d1,(a0)
02:00002F5E 9050            	  5233:                 sub.w (a0),d0
02:00002F60 40C3            	  5234:                 move.w sr,d3
02:00002F62 02830000000C    	  5235:                 andi.l #$0C,d3            * Isolate flags
02:00002F68 DA83            	  5236:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F6A D880            	  5237:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5238: 
                            	  5239: *     LONG
02:00002F6C 2081            	  5240:                 move.l d1,(a0)
02:00002F6E 9090            	  5241:                 sub.l (a0),d0
02:00002F70 40C3            	  5242:                 move.w sr,d3
02:00002F72 02830000000F    	  5243:                 andi.l #$0F,d3            * Isolate flags
02:00002F78 DA83            	  5244:                 add.l d3,d5               * Copy flag results into accumulator
02:00002F7A D880            	  5245:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5246: 
                            	  5247: 
02:00002F7C E299            	  5248:                 ror.l #$1,d1
02:00002F7E 51CEFFCC        	  5249:                 dbf d6,SUB_OUTER1
02:00002F82 E29A            	  5250:                 ror.l #$1,d2
02:00002F84 223C8167E123    	  5251:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002F8A 7C1E            	  5252:                 move.l #$0000001E,d6       * Inner loop counter
02:00002F8C 51CFFFBE        	  5253:                 dbf d7,SUB_OUTER1
                            	  5254: 
02:00002F90 0C841A8D14CF    	  5255:                 cmpi.l #$1A8D14CF,d4      * Check the data results
02:00002F96 66FE            	  5256:                 bne.s *
02:00002F98 0C8500004FC4    	  5257:                 cmpi.l #$00004FC4,d5      * Check the Flag results
02:00002F9E 66FE            	  5258:                 bne.s *
                            	  5259: 
                            	  5260: 
                            	  5261: *  * Register to <EA>
02:00002FA0 203C86738374    	  5262:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
02:00002FA6 223CFC55F2FE    	  5263:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
02:00002FAC 243C86738374    	  5264:                 move.l #$86738374,d2
02:00002FB2 7600            	  5265:                 moveq  #$00000000,d3
02:00002FB4 7800            	  5266:                 moveq  #$00000000,d4       * Cumulative data results
02:00002FB6 7A00            	  5267:                 moveq  #$00000000,d5       * Cumulative flag results
02:00002FB8 7C1E            	  5268:                 move.l #$0000001E,d6       * Inner loop counter
02:00002FBA 7E1D            	  5269:                 move.l #$0000001D,d7       * Outer loop counter
02:00002FBC 307C0100        	  5270:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5271: 
                            	  5272: 
                            	  5273: SUB_OUTER2:
                            	  5274: 
                            	  5275: *     BYTE
02:00002FC0 2080            	  5276:                 move.l d0,(a0)
02:00002FC2 9310            	  5277:                 sub.b d1,(a0)
02:00002FC4 40C3            	  5278:                 move.w sr,d3
02:00002FC6 02830000000C    	  5279:                 andi.l #$0C,d3            * Isolate flags
02:00002FCC DA83            	  5280:                 add.l d3,d5               * Copy flag results into accumulator
02:00002FCE D890            	  5281:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5282: 
                            	  5283: *     WORD
02:00002FD0 2080            	  5284:                 move.l d0,(a0)
02:00002FD2 9350            	  5285:                 sub.w d1,(a0)
02:00002FD4 40C3            	  5286:                 move.w sr,d3
02:00002FD6 02830000001F    	  5287:                 andi.l #$1F,d3            * Isolate flags
02:00002FDC DA83            	  5288:                 add.l d3,d5               * Copy flag results into accumulator
02:00002FDE D890            	  5289:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5290: 
                            	  5291: *     LONG
02:00002FE0 2080            	  5292:                 move.l d0,(a0)
02:00002FE2 9390            	  5293:                 sub.l d1,(a0)
02:00002FE4 40C3            	  5294:                 move.w sr,d3
02:00002FE6 02830000000F    	  5295:                 andi.l #$0F,d3            * Isolate flags
02:00002FEC DA83            	  5296:                 add.l d3,d5               * Copy flag results into accumulator
02:00002FEE D890            	  5297:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5298: 
                            	  5299: 
02:00002FF0 E299            	  5300:                 ror.l #$1,d1
02:00002FF2 51CEFFCC        	  5301:                 dbf d6,SUB_OUTER2
02:00002FF6 E29A            	  5302:                 ror.l #$1,d2
02:00002FF8 223C8167E123    	  5303:                 move.l #$8167E123,d1       * Initial Data-Y
02:00002FFE 7C1E            	  5304:                 move.l #$0000001E,d6       * Inner loop counter
02:00003000 51CFFFBE        	  5305:                 dbf d7,SUB_OUTER2
                            	  5306: 
02:00003004 0C8436D38BEC    	  5307:                 cmpi.l #$36D38BEC,d4      * Check the data results
02:0000300A 66FE            	  5308:                 bne.s *
02:0000300C 0C85000045A5    	  5309:                 cmpi.l #$000045A5,d5      * Check the Flag results
02:00003012 66FE            	  5310:                 bne.s *
                            	  5311: 
                            	  5312: 
                            	  5313: 
                            	  5314: 
02:00003014 4E75            	  5315:                 rts
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: *-----------------------------------------------------------
                            	  5320: *-----------------------------------------------------------
                            	  5321: * OPCODE : ADDA
                            	  5322: *-----------------------------------------------------------
                            	  5323: *-----------------------------------------------------------
                            	  5324: 
                            	  5325: op_ADDA:
                            	  5326: 
                            	  5327: *  * <EA> to Register
02:00003016 203CA5A5A5A5    	  5328:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:0000301C 223C8167E123    	  5329:                 move.l #$8167E123,d1
02:00003022 243CA5A5A5A5    	  5330:                 move.l #$a5a5a5a5,d2
02:00003028 7600            	  5331:                 moveq  #$00000000,d3
02:0000302A 7800            	  5332:                 moveq  #$00000000,d4       * Cumulative data results
02:0000302C 7A00            	  5333:                 moveq  #$00000000,d5       * Cumulative flag results
02:0000302E 7C1E            	  5334:                 move.l #$0000001E,d6       * Inner loop counter
02:00003030 7E1E            	  5335:                 move.l #$0000001E,d7       * Outer loop counter
02:00003032 307C0100        	  5336:                 move.l #$00000100,a0       * Address for memory EA operations
02:00003036 227C8167E123    	  5337:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5338: 
                            	  5339: ADDA_OUTER1:
                            	  5340: 
                            	  5341: *     WORD
                            	  5342: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5343: *                adda.w (a0),a1
                            	  5344: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5345: 
                            	  5346: *     LONG
02:0000303C 2081            	  5347:                 move.l d1,(a0)
02:0000303E D3D0            	  5348:                 adda.l (a0),a1
02:00003040 D889            	  5349:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
02:00003042 E299            	  5351:                 ror.l #$1,d1
02:00003044 51CEFFF6        	  5352:                 dbf d6,ADDA_OUTER1
02:00003048 E299            	  5353:                 ror.l #$1,d1
02:0000304A 2241            	  5354:                 move.l d1,a1
02:0000304C 223C8167E123    	  5355:                 move.l #$8167E123,d1       * Initial Data-Y
02:00003052 7C1E            	  5356:                 move.l #$0000001E,d6       * Inner loop counter
02:00003054 51CFFFE6        	  5357:                 dbf d7,ADDA_OUTER1
                            	  5358: 
02:00003058 0C84AC04DB4C    	  5359:                 cmpi.l #$AC04DB4C,d4      * Check the data results
02:0000305E 66FE            	  5360:                 bne.s *
                            	  5361: 
                            	  5362: 
02:00003060 4E75            	  5363:                 rts
                            	  5364: 
                            	  5365: 
                            	  5366: *-----------------------------------------------------------
                            	  5367: *-----------------------------------------------------------
                            	  5368: * OPCODE : SUBA
                            	  5369: *-----------------------------------------------------------
                            	  5370: *-----------------------------------------------------------
                            	  5371: 
                            	  5372: op_SUBA:
                            	  5373: 
                            	  5374: *  * <EA> to Register
02:00003062 203CA5A5A5A5    	  5375:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:00003068 223C8167E123    	  5376:                 move.l #$8167E123,d1
02:0000306E 243CA5A5A5A5    	  5377:                 move.l #$a5a5a5a5,d2
02:00003074 7600            	  5378:                 moveq  #$00000000,d3
02:00003076 7800            	  5379:                 moveq  #$00000000,d4       * Cumulative data results
02:00003078 7A00            	  5380:                 moveq  #$00000000,d5       * Cumulative flag results
02:0000307A 7C1E            	  5381:                 move.l #$0000001E,d6       * Inner loop counter
02:0000307C 7E1E            	  5382:                 move.l #$0000001E,d7       * Outer loop counter
02:0000307E 307C0100        	  5383:                 move.l #$00000100,a0       * Address for memory EA operations
02:00003082 227C8167E123    	  5384:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5385: 
                            	  5386: SUBA_OUTER1:
                            	  5387: 
                            	  5388: *     WORD
                            	  5389: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5390: *                suba.w (a0),a1
                            	  5391: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5392: 
                            	  5393: *     LONG
02:00003088 2081            	  5394:                 move.l d1,(a0)
02:0000308A 93D0            	  5395:                 suba.l (a0),a1
02:0000308C D889            	  5396:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
02:0000308E E299            	  5398:                 ror.l #$1,d1
02:00003090 51CEFFF6        	  5399:                 dbf d6,SUBA_OUTER1
02:00003094 E299            	  5400:                 ror.l #$1,d1
02:00003096 2241            	  5401:                 move.l d1,a1
02:00003098 223C8167E123    	  5402:                 move.l #$8167E123,d1       * Initial Data-Y
02:0000309E 7C1E            	  5403:                 move.l #$0000001E,d6       * Inner loop counter
02:000030A0 51CFFFE6        	  5404:                 dbf d7,SUBA_OUTER1
                            	  5405: 
02:000030A4 0C84E1E36D7A    	  5406:                 cmpi.l #$E1E36D7A,d4      * Check the data results
02:000030AA 66FE            	  5407:                 bne.s *
                            	  5408: 
                            	  5409: 
02:000030AC 4E75            	  5410:                 rts
                            	  5411: 
                            	  5412: 
                            	  5413: 
                            	  5414: *-----------------------------------------------------------
                            	  5415: *-----------------------------------------------------------
                            	  5416: * OPCODE : ADDX
                            	  5417: *-----------------------------------------------------------
                            	  5418: *-----------------------------------------------------------
                            	  5419: 
                            	  5420: op_ADDX:
                            	  5421: 
                            	  5422: 
                            	  5423: *  * Register to Register
02:000030AE 203CA5A5A5A5    	  5424:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:000030B4 223C8167E123    	  5425:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:000030BA 243CA5A5A5A5    	  5426:                 move.l #$a5a5a5a5,d2
02:000030C0 7600            	  5427:                 moveq  #$00000000,d3
02:000030C2 7800            	  5428:                 moveq  #$00000000,d4       * Cumulative data results
02:000030C4 7A00            	  5429:                 moveq  #$00000000,d5       * Cumulative flag results
02:000030C6 7C1E            	  5430:                 move.l #$0000001E,d6       * Inner loop counter
02:000030C8 7E1E            	  5431:                 move.l #$0000001E,d7       * Outer loop counter
02:000030CA 307C0100        	  5432:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5433: 
                            	  5434: 
                            	  5435: ADDX_OUTER1:
                            	  5436: 
                            	  5437: *     BYTE
02:000030CE 2002            	  5438:                 move.l d2,d0
02:000030D0 D101            	  5439:                 addx.b d1,d0
02:000030D2 40C3            	  5440:                 move.w sr,d3
02:000030D4 02830000001F    	  5441:                 andi.l #$1F,d3            * Isolate flags
02:000030DA DA83            	  5442:                 add.l d3,d5               * Copy flag results into accumulator
02:000030DC D880            	  5443:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5444: 
                            	  5445: *     WORD
02:000030DE 2002            	  5446:                 move.l d2,d0
02:000030E0 D141            	  5447:                 addx.w d1,d0
02:000030E2 40C3            	  5448:                 move.w sr,d3
02:000030E4 02830000001F    	  5449:                 andi.l #$1F,d3            * Isolate flags
02:000030EA DA83            	  5450:                 add.l d3,d5               * Copy flag results into accumulator
02:000030EC D880            	  5451:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5452: 
                            	  5453: *     LONG
02:000030EE 2002            	  5454:                 move.l d2,d0
02:000030F0 D181            	  5455:                 addx.l d1,d0
02:000030F2 40C3            	  5456:                 move.w sr,d3
02:000030F4 02830000001F    	  5457:                 andi.l #$1F,d3            * Isolate flags
02:000030FA DA83            	  5458:                 add.l d3,d5               * Copy flag results into accumulator
02:000030FC D880            	  5459:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5460: 
02:000030FE E299            	  5461:                 ror.l #$1,d1
02:00003100 51CEFFCC        	  5462:                 dbf d6,ADDX_OUTER1
02:00003104 E29A            	  5463:                 ror.l #$1,d2
02:00003106 223C8167E123    	  5464:                 move.l #$8167E123,d1       * Initial Data-Y
02:0000310C 7C1E            	  5465:                 move.l #$0000001E,d6       * Inner loop counter
02:0000310E 51CFFFBE        	  5466:                 dbf d7,ADDX_OUTER1
                            	  5467: 
02:00003112 0C844E96A4D9    	  5468:                 cmpi.l #$4E96A4D9,d4      * Check the data results
02:00003118 66FE            	  5469:                 bne.s *
02:0000311A 0C85000085CD    	  5470:                 cmpi.l #$000085CD,d5      * Check the Flag results
02:00003120 66FE            	  5471:                 bne.s *
                            	  5472: 
                            	  5473: 
                            	  5474: 
                            	  5475: *     -(An),-(An)
                            	  5476: 
02:00003122 7000            	  5477:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
02:00003124 7200            	  5478:                 moveq  #$00000000,d1
02:00003126 7400            	  5479:                 moveq  #$00000000,d2
02:00003128 307C0100        	  5480:                 move.l #$00000100,a0       * Address for Data-X
02:0000312C 327C0200        	  5481:                 move.l #$00000200,a1       * Address for Data-Y
02:00003130 20FC11FF5580    	  5482:                 move.l #$11FF5580,(a0)+   * Populate test data
02:00003136 20FC1111FFFF    	  5483:                 move.l #$1111FFFF,(a0)+   * Populate test data
02:0000313C 20FC33333333    	  5484:                 move.l #$33333333,(a0)+   * Populate test data
02:00003142 20FC44444444    	  5485:                 move.l #$44444444,(a0)+   * Populate test data
02:00003148 22FC80FF337F    	  5486:                 move.l #$80FF337F,(a1)+   * Populate test data
02:0000314E 22FCFFFF1111    	  5487:                 move.l #$FFFF1111,(a1)+   * Populate test data
02:00003154 22FC33333333    	  5488:                 move.l #$33333333,(a1)+   * Populate test data
02:0000315A 22FC44444444    	  5489:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5490: 
                            	  5491: 
02:00003160 7C0F            	  5492:                 move.l #$0000000F,d6       * Loop counter
                            	  5493: 
02:00003162 D308            	  5494: ADDX_LOOP3:     addx.b -(a0),-(a1)
02:00003164 40C3            	  5495:                 move.w sr,d3
02:00003166 02830000000F    	  5496:                 andi.l #$0F,d3            * Isolate flags
02:0000316C D083            	  5497:                 add.l d3,d0               * Copy flag results into accumulator
02:0000316E D211            	  5498:                 add.b (a1),d1
02:00003170 51CEFFF0        	  5499:                 dbf d6,ADDX_LOOP3
                            	  5500: 
                            	  5501: 
02:00003174 307C0110        	  5502:                 move.l #$00000110,a0       * Address for Data-X
02:00003178 327C0210        	  5503:                 move.l #$00000210,a1       * Address for Data-Y
02:0000317C 7C07            	  5504:                 moveq  #$00000007,d6       * Loop counter
                            	  5505: 
02:0000317E D348            	  5506: ADDX_LOOP4:     addx.w -(a0),-(a1)
02:00003180 40C3            	  5507:                 move.w sr,d3
02:00003182 02830000000F    	  5508:                 andi.l #$0F,d3            * Isolate flags
02:00003188 D083            	  5509:                 add.l d3,d0               * Copy flag results into accumulator
02:0000318A D251            	  5510:                 add.w (a1),d1
02:0000318C 51CEFFF0        	  5511:                 dbf d6,ADDX_LOOP4
                            	  5512: 
                            	  5513: 
02:00003190 307C0110        	  5514:                 move.l #$00000110,a0       * Address for Data-X
02:00003194 327C0210        	  5515:                 move.l #$00000210,a1       * Address for Data-Y
02:00003198 7C03            	  5516:                 moveq  #$00000003,d6       * Loop counter
                            	  5517: 
02:0000319A D388            	  5518: ADDX_LOOP5:     addx.l -(a0),-(a1)
02:0000319C 40C3            	  5519:                 move.w sr,d3
02:0000319E 02830000000F    	  5520:                 andi.l #$0F,d3            * Isolate flags
02:000031A4 D083            	  5521:                 add.l d3,d0               * Copy flag results into accumulator
02:000031A6 D291            	  5522:                 add.l (a1),d1
02:000031A8 51CEFFF0        	  5523:                 dbf d6,ADDX_LOOP5
                            	  5524: 
                            	  5525: 
02:000031AC 0C8000000095    	  5526:                 cmpi.l #$00000095,d0      * Check the flag results
02:000031B2 66FE            	  5527:                 bne.s *
02:000031B4 0C81C812A682    	  5528:                 cmpi.l #$C812A682,d1      * Check the data results
02:000031BA 66FE            	  5529:                 bne.s *
                            	  5530: 
02:000031BC 4E75            	  5531:                 rts
                            	  5532: 
                            	  5533: 
                            	  5534: 
                            	  5535: 
                            	  5536: *-----------------------------------------------------------
                            	  5537: *-----------------------------------------------------------
                            	  5538: * OPCODE : SUBX
                            	  5539: *-----------------------------------------------------------
                            	  5540: *-----------------------------------------------------------
                            	  5541: 
                            	  5542: op_SUBX:
                            	  5543: 
                            	  5544: 
                            	  5545: *  * Register to Register
02:000031BE 203CA5A5A5A5    	  5546:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
02:000031C4 223C8167E123    	  5547:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
02:000031CA 243CA5A5A5A5    	  5548:                 move.l #$a5a5a5a5,d2
02:000031D0 7600            	  5549:                 moveq  #$00000000,d3
02:000031D2 7800            	  5550:                 moveq  #$00000000,d4       * Cumulative data results
02:000031D4 7A00            	  5551:                 moveq  #$00000000,d5       * Cumulative flag results
02:000031D6 7C1E            	  5552:                 move.l #$0000001E,d6       * Inner loop counter
02:000031D8 7E1E            	  5553:                 move.l #$0000001E,d7       * Outer loop counter
02:000031DA 307C0100        	  5554:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5555: 
                            	  5556: 
                            	  5557: SUBX_OUTER1:
                            	  5558: 
                            	  5559: *     BYTE
02:000031DE 2002            	  5560:                 move.l d2,d0
02:000031E0 9101            	  5561:                 subx.b d1,d0
02:000031E2 40C3            	  5562:                 move.w sr,d3
02:000031E4 02830000001F    	  5563:                 andi.l #$1F,d3            * Isolate flags
02:000031EA DA83            	  5564:                 add.l d3,d5               * Copy flag results into accumulator
02:000031EC D880            	  5565:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5566: 
                            	  5567: *     WORD
02:000031EE 2002            	  5568:                 move.l d2,d0
02:000031F0 9141            	  5569:                 subx.w d1,d0
02:000031F2 40C3            	  5570:                 move.w sr,d3
02:000031F4 02830000001F    	  5571:                 andi.l #$1F,d3            * Isolate flags
02:000031FA DA83            	  5572:                 add.l d3,d5               * Copy flag results into accumulator
02:000031FC D880            	  5573:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5574: 
                            	  5575: *     LONG
02:000031FE 2002            	  5576:                 move.l d2,d0
02:00003200 9181            	  5577:                 subx.l d1,d0
02:00003202 40C3            	  5578:                 move.w sr,d3
02:00003204 02830000001F    	  5579:                 andi.l #$1F,d3            * Isolate flags
02:0000320A DA83            	  5580:                 add.l d3,d5               * Copy flag results into accumulator
02:0000320C D880            	  5581:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5582: 
02:0000320E E299            	  5583:                 ror.l #$1,d1
02:00003210 51CEFFCC        	  5584:                 dbf d6,SUBX_OUTER1
02:00003214 E29A            	  5585:                 ror.l #$1,d2
02:00003216 223C8167E123    	  5586:                 move.l #$8167E123,d1       * Initial Data-Y
02:0000321C 7C1E            	  5587:                 move.l #$0000001E,d6       * Inner loop counter
02:0000321E 51CFFFBE        	  5588:                 dbf d7,SUBX_OUTER1
                            	  5589: 
02:00003222 0C84FCAA913E    	  5590:                 cmpi.l #$FCAA913E,d4      * Check the data results
02:00003228 66FE            	  5591:                 bne.s *
02:0000322A 0C8500007E89    	  5592:                 cmpi.l #$00007E89,d5      * Check the Flag results
02:00003230 66FE            	  5593:                 bne.s *
                            	  5594: 
                            	  5595: 
                            	  5596: 
                            	  5597: *     -(An),-(An)
                            	  5598: 
02:00003232 7000            	  5599:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
02:00003234 7200            	  5600:                 moveq  #$00000000,d1
02:00003236 7400            	  5601:                 moveq  #$00000000,d2
02:00003238 307C0100        	  5602:                 move.l #$00000100,a0       * Address for Data-X
02:0000323C 327C0200        	  5603:                 move.l #$00000200,a1       * Address for Data-Y
02:00003240 20FC11FF5580    	  5604:                 move.l #$11FF5580,(a0)+   * Populate test data
02:00003246 20FC1111FFFF    	  5605:                 move.l #$1111FFFF,(a0)+   * Populate test data
02:0000324C 20FC80FF337F    	  5606:                 move.l #$80FF337F,(a0)+   * Populate test data
02:00003252 20FC44444444    	  5607:                 move.l #$44444444,(a0)+   * Populate test data
02:00003258 22FC80FF337F    	  5608:                 move.l #$80FF337F,(a1)+   * Populate test data
02:0000325E 22FC1111FFFF    	  5609:                 move.l #$1111FFFF,(a1)+   * Populate test data
02:00003264 22FC33333333    	  5610:                 move.l #$33333333,(a1)+   * Populate test data
02:0000326A 22FC5580EECC    	  5611:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5612: 
                            	  5613: 
02:00003270 7C0F            	  5614:                 move.l #$0000000F,d6       * Loop counter
                            	  5615: 
02:00003272 9308            	  5616: SUBX_LOOP3:     subx.b -(a0),-(a1)
02:00003274 40C3            	  5617:                 move.w sr,d3
02:00003276 02830000000F    	  5618:                 andi.l #$0F,d3            * Isolate flags
02:0000327C D083            	  5619:                 add.l d3,d0               * Copy flag results into accumulator
02:0000327E D211            	  5620:                 add.b (a1),d1
02:00003280 51CEFFF0        	  5621:                 dbf d6,SUBX_LOOP3
                            	  5622: 
                            	  5623: 
02:00003284 307C0110        	  5624:                 move.l #$00000110,a0       * Address for Data-X
02:00003288 327C0210        	  5625:                 move.l #$00000210,a1       * Address for Data-Y
02:0000328C 7C07            	  5626:                 moveq  #$00000007,d6       * Loop counter
                            	  5627: 
02:0000328E 9348            	  5628: SUBX_LOOP4:     subx.w -(a0),-(a1)
02:00003290 40C3            	  5629:                 move.w sr,d3
02:00003292 02830000000F    	  5630:                 andi.l #$0F,d3            * Isolate flags
02:00003298 D083            	  5631:                 add.l d3,d0               * Copy flag results into accumulator
02:0000329A D251            	  5632:                 add.w (a1),d1
02:0000329C 51CEFFF0        	  5633:                 dbf d6,SUBX_LOOP4
                            	  5634: 
                            	  5635: 
02:000032A0 307C0110        	  5636:                 move.l #$00000110,a0       * Address for Data-X
02:000032A4 327C0210        	  5637:                 move.l #$00000210,a1       * Address for Data-Y
02:000032A8 7C03            	  5638:                 moveq  #$00000003,d6       * Loop counter
                            	  5639: 
02:000032AA 9388            	  5640: SUBX_LOOP5:     subx.l -(a0),-(a1)
02:000032AC 40C3            	  5641:                 move.w sr,d3
02:000032AE 02830000000F    	  5642:                 andi.l #$0F,d3            * Isolate flags
02:000032B4 D083            	  5643:                 add.l d3,d0               * Copy flag results into accumulator
02:000032B6 D291            	  5644:                 add.l (a1),d1
02:000032B8 51CEFFF0        	  5645:                 dbf d6,SUBX_LOOP5
                            	  5646: 
                            	  5647: 
02:000032BC 0C80000000B1    	  5648:                 cmpi.l #$000000B1,d0      * Check the flag results
02:000032C2 66FE            	  5649:                 bne.s *
02:000032C4 0C8162C6F417    	  5650:                 cmpi.l #$62C6F417,d1      * Check the data results
02:000032CA 66FE            	  5651:                 bne.s *
                            	  5652: 
02:000032CC 4E75            	  5653:                 rts
                            	  5654: 
                            	  5655: 
                            	  5656: *-----------------------------------------------------------
                            	  5657: *-----------------------------------------------------------
                            	  5658: * OPCODE : MULU
                            	  5659: *-----------------------------------------------------------
                            	  5660: *-----------------------------------------------------------
                            	  5661: 
                            	  5662: op_MULU:
                            	  5663: 
02:000032CE 203CFE805501    	  5664:                 move.l #$FE805501,d0        * Initial
02:000032D4 223C5697EDB6    	  5665:                 move.l #$5697EDB6,d1        * Initial Y
02:000032DA 243CFE805501    	  5666:                 move.l #$FE805501,d2
02:000032E0 7600            	  5667:                 moveq  #$00000000,d3
02:000032E2 7800            	  5668:                 moveq  #$00000000,d4        * Cumulative data results
02:000032E4 7A00            	  5669:                 moveq  #$00000000,d5       * Cumulative flag results
02:000032E6 7C0E            	  5670:                 move.l #$0000000E,d6       * Inner loop counter
02:000032E8 7E0E            	  5671:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5672: 
                            	  5673: 
02:000032EA C0C1            	  5674: MULU_OUTER1:    mulu d1,d0
02:000032EC 40C3            	  5675:                 move.w sr,d3
02:000032EE 02830000000C    	  5676:                 andi.l #$0C,d3            * Isolate flags
02:000032F4 DA83            	  5677:                 add.l d3,d5               * Copy flag results into accumulator
02:000032F6 D880            	  5678:                 add.l d0,d4               * Copy data results into data accumulator
02:000032F8 E299            	  5679:                 ror.l #$1,d1
                            	  5680: 
02:000032FA 51CEFFEE        	  5681:                 dbf d6,MULU_OUTER1
02:000032FE E29A            	  5682:                 ror.l #$1,d2
02:00003300 2002            	  5683:                 move.l d2,d0
02:00003302 7C0E            	  5684:                 move.l #$0000000E,d6       * Inner loop counter
02:00003304 51CFFFE4        	  5685:                 dbf d7,MULU_OUTER1
                            	  5686: 
02:00003308 0C8476FB988C    	  5687:                 cmpi.l #$76FB988C,d4      * Check the data results
02:0000330E 66FE            	  5688:                 bne.s *
                            	  5689: 
02:00003310 0C8500000170    	  5690:                 cmpi.l #$00000170,d5      * Check the Flag results
02:00003316 66FE            	  5691:                 bne.s *
                            	  5692: 
                            	  5693: 
02:00003318 4E75            	  5694:                 rts
                            	  5695: 
                            	  5696: 
                            	  5697: *-----------------------------------------------------------
                            	  5698: *-----------------------------------------------------------
                            	  5699: * OPCODE : MULS
                            	  5700: *-----------------------------------------------------------
                            	  5701: *-----------------------------------------------------------
                            	  5702: 
                            	  5703: op_MULS:
                            	  5704: 
02:0000331A 203CFE805501    	  5705:                 move.l #$FE805501,d0        * Initial
02:00003320 223C5697EDB6    	  5706:                 move.l #$5697EDB6,d1        * Initial Y
02:00003326 243CFE805501    	  5707:                 move.l #$FE805501,d2
02:0000332C 7600            	  5708:                 moveq  #$00000000,d3
02:0000332E 7800            	  5709:                 moveq  #$00000000,d4        * Cumulative data results
02:00003330 7A00            	  5710:                 moveq  #$00000000,d5       * Cumulative flag results
02:00003332 7C0E            	  5711:                 move.l #$0000000E,d6       * Inner loop counter
02:00003334 7E0E            	  5712:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5713: 
                            	  5714: 
02:00003336 C1C1            	  5715: MULS_OUTER1:    muls d1,d0
02:00003338 40C3            	  5716:                 move.w sr,d3
02:0000333A 02830000000C    	  5717:                 andi.l #$0C,d3            * Isolate flags
02:00003340 DA83            	  5718:                 add.l d3,d5               * Copy flag results into accumulator
02:00003342 D880            	  5719:                 add.l d0,d4               * Copy data results into data accumulator
02:00003344 E299            	  5720:                 ror.l #$1,d1
                            	  5721: 
02:00003346 51CEFFEE        	  5722:                 dbf d6,MULS_OUTER1
02:0000334A E29A            	  5723:                 ror.l #$1,d2
02:0000334C 2002            	  5724:                 move.l d2,d0
02:0000334E 7C0E            	  5725:                 move.l #$0000000E,d6       * Inner loop counter
02:00003350 51CFFFE4        	  5726:                 dbf d7,MULS_OUTER1
                            	  5727: 
02:00003354 0C84D4E2988C    	  5728:                 cmpi.l #$D4E2988C,d4      * Check the data results
02:0000335A 66FE            	  5729:                 bne.s *
                            	  5730: 
02:0000335C 0C85000003E0    	  5731:                 cmpi.l #$000003E0,d5      * Check the Flag results
02:00003362 66FE            	  5732:                 bne.s *
                            	  5733: 
                            	  5734: 
02:00003364 4E75            	  5735:                 rts
                            	  5736: 
                            	  5737: 
                            	  5738: 
                            	  5739: *-----------------------------------------------------------
                            	  5740: *-----------------------------------------------------------
                            	  5741: * OPCODE : EXG
                            	  5742: *-----------------------------------------------------------
                            	  5743: *-----------------------------------------------------------
                            	  5744: 
                            	  5745: op_EXG:
02:00003366 223CD1D1D1D1    	  5746:                 move.l #$d1d1d1d1,d1
02:0000336C 243CD2D2D2D2    	  5747:                 move.l #$d2d2d2d2,d2
02:00003372 263CD3D3D3D3    	  5748:                 move.l #$d3d3d3d3,d3
02:00003378 227CA1A1A1A1    	  5749:                 move.l #$a1a1a1a1,a1
02:0000337E 247CA2A2A2A2    	  5750:                 move.l #$a2a2a2a2,a2
02:00003384 267CA3A3A3A3    	  5751:                 move.l #$a3a3a3a3,a3
                            	  5752: 
02:0000338A C342            	  5753:                 exg d1,d2
02:0000338C C34A            	  5754:                 exg a1,a2
02:0000338E C78B            	  5755:                 exg d3,a3
                            	  5756: 
02:00003390 0C81D2D2D2D2    	  5757:                 cmpi.l #$d2d2d2d2,d1      * Check the results
02:00003396 66FE            	  5758:                 bne.s *
02:00003398 0C82D1D1D1D1    	  5759:                 cmpi.l #$d1d1d1d1,d2
02:0000339E 66FE            	  5760:                 bne.s *
02:000033A0 0C83A3A3A3A3    	  5761:                 cmpi.l #$a3a3a3a3,d3
02:000033A6 66FE            	  5762:                 bne.s *
                            	  5763: 
02:000033A8 2209            	  5764:                 move.l a1,d1
02:000033AA 240A            	  5765:                 move.l a2,d2
02:000033AC 260B            	  5766:                 move.l a3,d3
                            	  5767: 
02:000033AE 0C81A2A2A2A2    	  5768:                 cmpi.l #$a2a2a2a2,d1
02:000033B4 66FE            	  5769:                 bne.s *
02:000033B6 0C82A1A1A1A1    	  5770:                 cmpi.l #$a1a1a1a1,d2
02:000033BC 66FE            	  5771:                 bne.s *
02:000033BE 0C83D3D3D3D3    	  5772:                 cmpi.l #$d3d3d3d3,d3
02:000033C4 66FE            	  5773:                 bne.s *
                            	  5774: 
02:000033C6 4E75            	  5775:                 rts
                            	  5776: 
                            	  5777: 
                            	  5778: *-----------------------------------------------------------
                            	  5779: *-----------------------------------------------------------
                            	  5780: * OPCODE : ROx
                            	  5781: *-----------------------------------------------------------
                            	  5782: *-----------------------------------------------------------
                            	  5783: 
                            	  5784: *     Subroutine to check and accumulate the flags
02:000033C8 40C3            	  5785: ROx_FLAGS:      move.w sr,d3
02:000033CA 02830000000F    	  5786:                 andi.l #$0F,d3            * Isolate flags
02:000033D0 DA83            	  5787:                 add.l d3,d5               * Copy flag results into accumulator
02:000033D2 4E75            	  5788:                 rts
                            	  5789: 
                            	  5790: op_ROx:
                            	  5791: 
                            	  5792: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5793: 
                            	  5794: *        BYTE LEFT
02:000033D4 203C80018FF1    	  5795:                 move.l #$80018FF1,d0
02:000033DA 7A00            	  5796:                 moveq  #$00000000,d5
02:000033DC 7C11            	  5797:                 moveq  #$00000011,d6
                            	  5798: ROx_LOOP1:
02:000033DE ED38            	  5799:                 rol.b d6,d0
02:000033E0 61E6            	  5800:                 bsr ROx_FLAGS
02:000033E2 51CEFFFA        	  5801:                 dbf d6,ROx_LOOP1
02:000033E6 0C8080018FE3    	  5802:                 cmpi.l #$80018FE3,d0
02:000033EC 66FE            	  5803:                 bne.s *
02:000033EE 0C850000006B    	  5804:                 cmpi.l #$0000006B,d5
02:000033F4 66FE            	  5805:                 bne.s *
                            	  5806: 
                            	  5807: *        BYTE RIGHT
02:000033F6 203C80018FF1    	  5808:                 move.l #$80018FF1,d0
02:000033FC 7C12            	  5809:                 moveq  #$00000012,d6
                            	  5810: ROx_LOOP2:
02:000033FE EC38            	  5811:                 ror.b d6,d0
02:00003400 61C6            	  5812:                 bsr ROx_FLAGS
02:00003402 51CEFFFA        	  5813:                 dbf d6,ROx_LOOP2
02:00003406 0C8080018F3E    	  5814:                 cmpi.l #$80018F3E,d0
02:0000340C 66FE            	  5815:                 bne.s *
02:0000340E 0C85000000C5    	  5816:                 cmpi.l #$000000C5,d5
02:00003414 66FE            	  5817:                 bne.s *
                            	  5818: 
                            	  5819: 
                            	  5820: *        WORD LEFT
02:00003416 203C80018FF1    	  5821:                 move.l #$80018FF1,d0
02:0000341C 7C13            	  5822:                 moveq  #$00000013,d6
                            	  5823: ROx_LOOP3:
02:0000341E ED78            	  5824:                 rol.w d6,d0
02:00003420 61A6            	  5825:                 bsr ROx_FLAGS
02:00003422 51CEFFFA        	  5826:                 dbf d6,ROx_LOOP3
02:00003426 0C80800163FC    	  5827:                 cmpi.l #$800163FC,d0
02:0000342C 66FE            	  5828:                 bne.s *
02:0000342E 0C8500000131    	  5829:                 cmpi.l #$00000131,d5
02:00003434 66FE            	  5830:                 bne.s *
                            	  5831: 
                            	  5832: *        WORD RIGHT
02:00003436 203C80018FF1    	  5833:                 move.l #$80018FF1,d0
02:0000343C 7C1E            	  5834:                 move.l #$0000001E,d6
                            	  5835: ROx_LOOP4:
02:0000343E EC78            	  5836:                 ror.w d6,d0
02:00003440 6186            	  5837:                 bsr ROx_FLAGS
02:00003442 51CEFFFA        	  5838:                 dbf d6,ROx_LOOP4
02:00003446 0C808001C7F8    	  5839:                 cmpi.l #$8001C7F8,d0
02:0000344C 66FE            	  5840:                 bne.s *
02:0000344E 0C85000001DB    	  5841:                 cmpi.l #$000001DB,d5
02:00003454 66FE            	  5842:                 bne.s *
                            	  5843: 
                            	  5844: 
                            	  5845: *        LONG LEFT
02:00003456 203C80018FF1    	  5846:                 move.l #$80018FF1,d0
02:0000345C 7C15            	  5847:                 moveq  #$00000015,d6
                            	  5848: ROx_LOOP5:
02:0000345E EDB8            	  5849:                 rol.l d6,d0
02:00003460 6100FF66        	  5850:                 bsr ROx_FLAGS
02:00003464 51CEFFF8        	  5851:                 dbf d6,ROx_LOOP5
02:00003468 0C8000C7F8C0    	  5852:                 cmpi.l #$00C7F8C0,d0
02:0000346E 66FE            	  5853:                 bne.s *
02:00003470 0C850000021A    	  5854:                 cmpi.l #$0000021A,d5
02:00003476 66FE            	  5855:                 bne.s *
                            	  5856: 
                            	  5857: *        LONG RIGHT
02:00003478 203C80018FF1    	  5858:                 move.l #$80018FF1,d0
02:0000347E 7C16            	  5859:                 moveq  #$00000016,d6
                            	  5860: ROx_LOOP6:
02:00003480 ECB8            	  5861:                 ror.l d6,d0
02:00003482 6100FF44        	  5862:                 bsr ROx_FLAGS
02:00003486 51CEFFF8        	  5863:                 dbf d6,ROx_LOOP6
02:0000348A 0C80000C7F8C    	  5864:                 cmpi.l #$000C7F8C,d0
02:00003490 66FE            	  5865:                 bne.s *
02:00003492 0C8500000250    	  5866:                 cmpi.l #$00000250,d5
02:00003498 66FE            	  5867:                 bne.s *
                            	  5868: 
                            	  5869: 
                            	  5870: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5871: 
02:0000349A 203C80018FF1    	  5872:                 move.l #$80018FF1,d0
02:000034A0 7A00            	  5873:                 moveq  #$00000000,d5
                            	  5874: 
                            	  5875: *        BYTE LEFT
02:000034A2 E318            	  5876:                 rol.b #1,d0
02:000034A4 6100FF22        	  5877:                 bsr ROx_FLAGS
02:000034A8 EB18            	  5878:                 rol.b #5,d0
02:000034AA 6100FF1C        	  5879:                 bsr ROx_FLAGS
02:000034AE EF18            	  5880:                 rol.b #7,d0
02:000034B0 6100FF16        	  5881:                 bsr ROx_FLAGS
02:000034B4 E118            	  5882:                 rol.b #8,d0
02:000034B6 6100FF10        	  5883:                 bsr ROx_FLAGS
02:000034BA 0C8080018F3E    	  5884:                 cmpi.l #$80018F3E,d0
02:000034C0 66FE            	  5885:                 bne.s *
02:000034C2 0C8500000009    	  5886:                 cmpi.l #$00000009,d5
02:000034C8 66FE            	  5887:                 bne.s *
                            	  5888: 
                            	  5889: *        BYTE RIGHT
02:000034CA E218            	  5890:                 ror.b #1,d0
02:000034CC 6100FEFA        	  5891:                 bsr ROx_FLAGS
02:000034D0 EA18            	  5892:                 ror.b #5,d0
02:000034D2 6100FEF4        	  5893:                 bsr ROx_FLAGS
02:000034D6 EE18            	  5894:                 ror.b #7,d0
02:000034D8 6100FEEE        	  5895:                 bsr ROx_FLAGS
02:000034DC E018            	  5896:                 ror.b #8,d0
02:000034DE 6100FEE8        	  5897:                 bsr ROx_FLAGS
02:000034E2 0C8080018FF1    	  5898:                 cmpi.l #$80018FF1,d0
02:000034E8 66FE            	  5899:                 bne.s *
02:000034EA 0C8500000024    	  5900:                 cmpi.l #$00000024,d5
02:000034F0 66FE            	  5901:                 bne.s *
                            	  5902: 
                            	  5903: *        WORD LEFT
02:000034F2 E358            	  5904:                 rol.w #1,d0
02:000034F4 6100FED2        	  5905:                 bsr ROx_FLAGS
02:000034F8 EB58            	  5906:                 rol.w #5,d0
02:000034FA 6100FECC        	  5907:                 bsr ROx_FLAGS
02:000034FE EF58            	  5908:                 rol.w #7,d0
02:00003500 6100FEC6        	  5909:                 bsr ROx_FLAGS
02:00003504 E158            	  5910:                 rol.w #8,d0
02:00003506 6100FEC0        	  5911:                 bsr ROx_FLAGS
02:0000350A 0C808001FE31    	  5912:                 cmpi.l #$8001FE31,d0
02:00003510 66FE            	  5913:                 bne.s *
02:00003512 0C8500000037    	  5914:                 cmpi.l #$00000037,d5
02:00003518 66FE            	  5915:                 bne.s *
                            	  5916: 
                            	  5917: *        WORD RIGHT
02:0000351A E258            	  5918:                 ror.w #1,d0
02:0000351C 6100FEAA        	  5919:                 bsr ROx_FLAGS
02:00003520 EA58            	  5920:                 ror.w #5,d0
02:00003522 6100FEA4        	  5921:                 bsr ROx_FLAGS
02:00003526 EE58            	  5922:                 ror.w #7,d0
02:00003528 6100FE9E        	  5923:                 bsr ROx_FLAGS
02:0000352C E058            	  5924:                 ror.w #8,d0
02:0000352E 6100FE98        	  5925:                 bsr ROx_FLAGS
02:00003532 0C8080018FF1    	  5926:                 cmpi.l #$80018FF1,d0
02:00003538 66FE            	  5927:                 bne.s *
02:0000353A 0C850000005B    	  5928:                 cmpi.l #$0000005B,d5
02:00003540 66FE            	  5929:                 bne.s *
                            	  5930: 
                            	  5931: *        LONG LEFT
02:00003542 E398            	  5932:                 rol.l #1,d0
02:00003544 6100FE82        	  5933:                 bsr ROx_FLAGS
02:00003548 EB98            	  5934:                 rol.l #5,d0
02:0000354A 6100FE7C        	  5935:                 bsr ROx_FLAGS
02:0000354E EF98            	  5936:                 rol.l #7,d0
02:00003550 6100FE76        	  5937:                 bsr ROx_FLAGS
02:00003554 E198            	  5938:                 rol.l #8,d0
02:00003556 6100FE70        	  5939:                 bsr ROx_FLAGS
02:0000355A 0C80FE300031    	  5940:                 cmpi.l #$FE300031,d0
02:00003560 66FE            	  5941:                 bne.s *
02:00003562 0C8500000065    	  5942:                 cmpi.l #$00000065,d5
02:00003568 66FE            	  5943:                 bne.s *
                            	  5944: 
                            	  5945: *        LONG RIGHT
02:0000356A E298            	  5946:                 ror.l #1,d0
02:0000356C 6100FE5A        	  5947:                 bsr ROx_FLAGS
02:00003570 EA98            	  5948:                 ror.l #5,d0
02:00003572 6100FE54        	  5949:                 bsr ROx_FLAGS
02:00003576 EE98            	  5950:                 ror.l #7,d0
02:00003578 6100FE4E        	  5951:                 bsr ROx_FLAGS
02:0000357C E098            	  5952:                 ror.l #8,d0
02:0000357E 6100FE48        	  5953:                 bsr ROx_FLAGS
02:00003582 0C8080018FF1    	  5954:                 cmpi.l #$80018FF1,d0
02:00003588 66FE            	  5955:                 bne.s *
02:0000358A 0C8500000080    	  5956:                 cmpi.l #$00000080,d5
02:00003590 66FE            	  5957:                 bne.s *
                            	  5958: 
                            	  5959: 
                            	  5960: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5961: 
02:00003592 7A00            	  5962:                 moveq  #$00000000,d5
02:00003594 307C0100        	  5963:                 move.l #$00000100,a0
02:00003598 30BC8FF1        	  5964:                 move.w #$8FF1,(a0)
                            	  5965: 
                            	  5966: *        WORD LEFT
02:0000359C E7D0            	  5967:                 rol (a0)
02:0000359E 6100FE28        	  5968:                 bsr ROx_FLAGS
02:000035A2 E7D0            	  5969:                 rol (a0)
02:000035A4 6100FE22        	  5970:                 bsr ROx_FLAGS
02:000035A8 E7D0            	  5971:                 rol (a0)
02:000035AA 6100FE1C        	  5972:                 bsr ROx_FLAGS
02:000035AE E7D0            	  5973:                 rol (a0)
02:000035B0 6100FE16        	  5974:                 bsr ROx_FLAGS
02:000035B4 3010            	  5975:                 move.w (a0),d0
02:000035B6 0C808001FF18    	  5976:                 cmpi.l #$8001FF18,d0
02:000035BC 66FE            	  5977:                 bne.s *
02:000035BE 0C8500000009    	  5978:                 cmpi.l #$00000009,d5
02:000035C4 66FE            	  5979:                 bne.s *
                            	  5980: 
                            	  5981: *        WORD RIGHT
02:000035C6 E6D0            	  5982:                 ror (a0)
02:000035C8 6100FDFE        	  5983:                 bsr ROx_FLAGS
02:000035CC E6D0            	  5984:                 ror (a0)
02:000035CE 6100FDF8        	  5985:                 bsr ROx_FLAGS
02:000035D2 E6D0            	  5986:                 ror (a0)
02:000035D4 6100FDF2        	  5987:                 bsr ROx_FLAGS
02:000035D8 E6D0            	  5988:                 ror (a0)
02:000035DA 6100FDEC        	  5989:                 bsr ROx_FLAGS
02:000035DE E6D0            	  5990:                 ror (a0)
02:000035E0 6100FDE6        	  5991:                 bsr ROx_FLAGS
02:000035E4 E6D0            	  5992:                 ror (a0)
02:000035E6 6100FDE0        	  5993:                 bsr ROx_FLAGS
02:000035EA 3010            	  5994:                 move.w (a0),d0
02:000035EC 0C80800163FC    	  5995:                 cmpi.l #$800163FC,d0
02:000035F2 66FE            	  5996:                 bne.s *
02:000035F4 0C850000001B    	  5997:                 cmpi.l #$0000001B,d5
02:000035FA 66FE            	  5998:                 bne.s *
                            	  5999: 
02:000035FC 4E75            	  6000:                 rts
                            	  6001: 
                            	  6002: 
                            	  6003: 
                            	  6004: *-----------------------------------------------------------
                            	  6005: *-----------------------------------------------------------
                            	  6006: * OPCODE : ROXx
                            	  6007: *-----------------------------------------------------------
                            	  6008: *-----------------------------------------------------------
                            	  6009: 
                            	  6010: *     Subroutine to check and accumulate the flags
02:000035FE 40C3            	  6011: ROXx_FLAGS:     move.w sr,d3
02:00003600 02830000000F    	  6012:                 andi.l #$0F,d3            * Isolate flags
02:00003606 DA83            	  6013:                 add.l d3,d5               * Copy flag results into accumulator
02:00003608 4E75            	  6014:                 rts
                            	  6015: 
                            	  6016: op_ROXx:
                            	  6017: 
                            	  6018: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6019: 
                            	  6020: *        BYTE LEFT
02:0000360A 203C80018FF1    	  6021:                 move.l #$80018FF1,d0
02:00003610 7A00            	  6022:                 moveq  #$00000000,d5
02:00003612 7C11            	  6023:                 moveq  #$00000011,d6
                            	  6024: ROXx_LOOP1:
02:00003614 ED30            	  6025:                 roxl.b d6,d0
02:00003616 61E6            	  6026:                 bsr ROXx_FLAGS
02:00003618 51CEFFFA        	  6027:                 dbf d6,ROXx_LOOP1
02:0000361C 0C8080018FD0    	  6028:                 cmpi.l #$80018FD0,d0
02:00003622 66FE            	  6029:                 bne.s *
02:00003624 0C8500000042    	  6030:                 cmpi.l #$00000042,d5
02:0000362A 66FE            	  6031:                 bne.s *
                            	  6032: 
                            	  6033: *        BYTE RIGHT
02:0000362C 203C80018FF1    	  6034:                 move.l #$80018FF1,d0
02:00003632 7C12            	  6035:                 moveq  #$00000012,d6
                            	  6036: ROXx_LOOP2:
02:00003634 EC30            	  6037:                 roxr.b d6,d0
02:00003636 61C6            	  6038:                 bsr ROXx_FLAGS
02:00003638 51CEFFFA        	  6039:                 dbf d6,ROXx_LOOP2
02:0000363C 0C8080018F51    	  6040:                 cmpi.l #$80018F51,d0
02:00003642 66FE            	  6041:                 bne.s *
02:00003644 0C850000009C    	  6042:                 cmpi.l #$0000009C,d5
02:0000364A 66FE            	  6043:                 bne.s *
                            	  6044: 
                            	  6045: 
                            	  6046: *        WORD LEFT
02:0000364C 203C80018FF1    	  6047:                 move.l #$80018FF1,d0
02:00003652 7C13            	  6048:                 moveq  #$00000013,d6
                            	  6049: ROXx_LOOP3:
02:00003654 ED70            	  6050:                 roxl.w d6,d0
02:00003656 61A6            	  6051:                 bsr ROXx_FLAGS
02:00003658 51CEFFFA        	  6052:                 dbf d6,ROXx_LOOP3
02:0000365C 0C8080013980    	  6053:                 cmpi.l #$80013980,d0
02:00003662 66FE            	  6054:                 bne.s *
02:00003664 0C85000000C9    	  6055:                 cmpi.l #$000000C9,d5
02:0000366A 66FE            	  6056:                 bne.s *
                            	  6057: 
                            	  6058: *        WORD RIGHT
02:0000366C 203C80018FF1    	  6059:                 move.l #$80018FF1,d0
02:00003672 7C1E            	  6060:                 move.l #$0000001E,d6
                            	  6061: ROXx_LOOP4:
02:00003674 EC70            	  6062:                 roxr.w d6,d0
02:00003676 6186            	  6063:                 bsr ROXx_FLAGS
02:00003678 51CEFFFA        	  6064:                 dbf d6,ROXx_LOOP4
02:0000367C 0C8080010A1D    	  6065:                 cmpi.l #$80010A1D,d0
02:00003682 66FE            	  6066:                 bne.s *
02:00003684 0C850000014D    	  6067:                 cmpi.l #$0000014D,d5
02:0000368A 66FE            	  6068:                 bne.s *
                            	  6069: 
                            	  6070: 
                            	  6071: *        LONG LEFT
02:0000368C 203C80018FF1    	  6072:                 move.l #$80018FF1,d0
02:00003692 7C15            	  6073:                 moveq  #$00000015,d6
                            	  6074: ROXx_LOOP5:
02:00003694 EDB0            	  6075:                 roxl.l d6,d0
02:00003696 6100FF66        	  6076:                 bsr ROXx_FLAGS
02:0000369A 51CEFFF8        	  6077:                 dbf d6,ROXx_LOOP5
02:0000369E 0C80800185D0    	  6078:                 cmpi.l #$800185D0,d0
02:000036A4 66FE            	  6079:                 bne.s *
02:000036A6 0C85000001A1    	  6080:                 cmpi.l #$000001A1,d5
02:000036AC 66FE            	  6081:                 bne.s *
                            	  6082: 
                            	  6083: *        LONG RIGHT
02:000036AE 203C80018FF1    	  6084:                 move.l #$80018FF1,d0
02:000036B4 7C16            	  6085:                 moveq  #$00000016,d6
                            	  6086: ROXx_LOOP6:
02:000036B6 ECB0            	  6087:                 roxr.l d6,d0
02:000036B8 6100FF44        	  6088:                 bsr ROXx_FLAGS
02:000036BC 51CEFFF8        	  6089:                 dbf d6,ROXx_LOOP6
02:000036C0 0C80082D8200    	  6090:                 cmpi.l #$082D8200,d0
02:000036C6 66FE            	  6091:                 bne.s *
02:000036C8 0C85000001DE    	  6092:                 cmpi.l #$000001DE,d5
02:000036CE 66FE            	  6093:                 bne.s *
                            	  6094: 
                            	  6095: 
                            	  6096: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6097: 
02:000036D0 203C80018FF1    	  6098:                 move.l #$80018FF1,d0
02:000036D6 7A00            	  6099:                 moveq  #$00000000,d5
                            	  6100: 
                            	  6101: *        BYTE LEFT
02:000036D8 E310            	  6102:                 roxl.b #1,d0
02:000036DA 6100FF22        	  6103:                 bsr ROXx_FLAGS
02:000036DE EB10            	  6104:                 roxl.b #5,d0
02:000036E0 6100FF1C        	  6105:                 bsr ROXx_FLAGS
02:000036E4 EF10            	  6106:                 roxl.b #7,d0
02:000036E6 6100FF16        	  6107:                 bsr ROXx_FLAGS
02:000036EA E110            	  6108:                 roxl.b #8,d0
02:000036EC 6100FF10        	  6109:                 bsr ROXx_FLAGS
02:000036F0 0C8080018F09    	  6110:                 cmpi.l #$80018F09,d0
02:000036F6 66FE            	  6111:                 bne.s *
02:000036F8 0C850000000B    	  6112:                 cmpi.l #$0000000B,d5
02:000036FE 66FE            	  6113:                 bne.s *
                            	  6114: 
                            	  6115: *        BYTE RIGHT
02:00003700 E210            	  6116:                 roxr.b #1,d0
02:00003702 6100FEFA        	  6117:                 bsr ROXx_FLAGS
02:00003706 EA10            	  6118:                 roxr.b #5,d0
02:00003708 6100FEF4        	  6119:                 bsr ROXx_FLAGS
02:0000370C EE10            	  6120:                 roxr.b #7,d0
02:0000370E 6100FEEE        	  6121:                 bsr ROXx_FLAGS
02:00003712 E010            	  6122:                 roxr.b #8,d0
02:00003714 6100FEE8        	  6123:                 bsr ROXx_FLAGS
02:00003718 0C8080018F00    	  6124:                 cmpi.l #$80018F00,d0
02:0000371E 66FE            	  6125:                 bne.s *
02:00003720 0C8500000015    	  6126:                 cmpi.l #$00000015,d5
02:00003726 66FE            	  6127:                 bne.s *
                            	  6128: 
                            	  6129: *        WORD LEFT
02:00003728 E350            	  6130:                 roxl.w #1,d0
02:0000372A 6100FED2        	  6131:                 bsr ROXx_FLAGS
02:0000372E EB50            	  6132:                 roxl.w #5,d0
02:00003730 6100FECC        	  6133:                 bsr ROXx_FLAGS
02:00003734 EF50            	  6134:                 roxl.w #7,d0
02:00003736 6100FEC6        	  6135:                 bsr ROXx_FLAGS
02:0000373A E150            	  6136:                 roxl.w #8,d0
02:0000373C 6100FEC0        	  6137:                 bsr ROXx_FLAGS
02:00003740 0C808001B000    	  6138:                 cmpi.l #$8001B000,d0
02:00003746 66FE            	  6139:                 bne.s *
02:00003748 0C8500000027    	  6140:                 cmpi.l #$00000027,d5
02:0000374E 66FE            	  6141:                 bne.s *
                            	  6142: 
                            	  6143: *        WORD RIGHT
02:00003750 E250            	  6144:                 roxr.w #1,d0
02:00003752 6100FEAA        	  6145:                 bsr ROXx_FLAGS
02:00003756 EA50            	  6146:                 roxr.w #5,d0
02:00003758 6100FEA4        	  6147:                 bsr ROXx_FLAGS
02:0000375C EE50            	  6148:                 roxr.w #7,d0
02:0000375E 6100FE9E        	  6149:                 bsr ROXx_FLAGS
02:00003762 E050            	  6150:                 roxr.w #8,d0
02:00003764 6100FE98        	  6151:                 bsr ROXx_FLAGS
02:00003768 0C8080010A00    	  6152:                 cmpi.l #$80010A00,d0
02:0000376E 66FE            	  6153:                 bne.s *
02:00003770 0C8500000028    	  6154:                 cmpi.l #$00000028,d5
02:00003776 66FE            	  6155:                 bne.s *
                            	  6156: 
                            	  6157: *        LONG LEFT
02:00003778 E390            	  6158:                 roxl.l #1,d0
02:0000377A 6100FE82        	  6159:                 bsr ROXx_FLAGS
02:0000377E EB90            	  6160:                 roxl.l #5,d0
02:00003780 6100FE7C        	  6161:                 bsr ROXx_FLAGS
02:00003784 EF90            	  6162:                 roxl.l #7,d0
02:00003786 6100FE76        	  6163:                 bsr ROXx_FLAGS
02:0000378A E190            	  6164:                 roxl.l #8,d0
02:0000378C 6100FE70        	  6165:                 bsr ROXx_FLAGS
02:00003790 0C8040000010    	  6166:                 cmpi.l #$40000010,d0
02:00003796 66FE            	  6167:                 bne.s *
02:00003798 0C850000002A    	  6168:                 cmpi.l #$0000002A,d5
02:0000379E 66FE            	  6169:                 bne.s *
                            	  6170: 
                            	  6171: *        LONG RIGHT
02:000037A0 E290            	  6172:                 roxr.l #1,d0
02:000037A2 6100FE5A        	  6173:                 bsr ROXx_FLAGS
02:000037A6 EA90            	  6174:                 roxr.l #5,d0
02:000037A8 6100FE54        	  6175:                 bsr ROXx_FLAGS
02:000037AC EE90            	  6176:                 roxr.l #7,d0
02:000037AE 6100FE4E        	  6177:                 bsr ROXx_FLAGS
02:000037B2 E090            	  6178:                 roxr.l #8,d0
02:000037B4 6100FE48        	  6179:                 bsr ROXx_FLAGS
02:000037B8 0C8000010200    	  6180:                 cmpi.l #$00010200,d0
02:000037BE 66FE            	  6181:                 bne.s *
02:000037C0 0C8500000032    	  6182:                 cmpi.l #$00000032,d5
02:000037C6 66FE            	  6183:                 bne.s *
                            	  6184: 
                            	  6185: 
                            	  6186: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6187: 
02:000037C8 7A00            	  6188:                 moveq  #$00000000,d5
02:000037CA 307C0100        	  6189:                 move.l #$00000100,a0
02:000037CE 30BC8FF1        	  6190:                 move.w #$8FF1,(a0)
                            	  6191: 
                            	  6192: *        WORD LEFT
02:000037D2 E5D0            	  6193:                 roxl (a0)
02:000037D4 6100FE28        	  6194:                 bsr ROXx_FLAGS
02:000037D8 E5D0            	  6195:                 roxl (a0)
02:000037DA 6100FE22        	  6196:                 bsr ROXx_FLAGS
02:000037DE E5D0            	  6197:                 roxl (a0)
02:000037E0 6100FE1C        	  6198:                 bsr ROXx_FLAGS
02:000037E4 E5D0            	  6199:                 roxl (a0)
02:000037E6 6100FE16        	  6200:                 bsr ROXx_FLAGS
02:000037EA 3010            	  6201:                 move.w (a0),d0
02:000037EC 0C800001FF10    	  6202:                 cmpi.l #$0001FF10,d0
02:000037F2 66FE            	  6203:                 bne.s *
02:000037F4 0C8500000009    	  6204:                 cmpi.l #$00000009,d5
02:000037FA 66FE            	  6205:                 bne.s *
                            	  6206: 
                            	  6207: *        WORD RIGHT
02:000037FC E4D0            	  6208:                 roxr (a0)
02:000037FE 6100FDFE        	  6209:                 bsr ROXx_FLAGS
02:00003802 E4D0            	  6210:                 roxr (a0)
02:00003804 6100FDF8        	  6211:                 bsr ROXx_FLAGS
02:00003808 E4D0            	  6212:                 roxr (a0)
02:0000380A 6100FDF2        	  6213:                 bsr ROXx_FLAGS
02:0000380E E4D0            	  6214:                 roxr (a0)
02:00003810 6100FDEC        	  6215:                 bsr ROXx_FLAGS
02:00003814 E4D0            	  6216:                 roxr (a0)
02:00003816 6100FDE6        	  6217:                 bsr ROXx_FLAGS
02:0000381A E4D0            	  6218:                 roxr (a0)
02:0000381C 6100FDE0        	  6219:                 bsr ROXx_FLAGS
02:00003820 3010            	  6220:                 move.w (a0),d0
02:00003822 0C80000103FC    	  6221:                 cmpi.l #$000103FC,d0
02:00003828 66FE            	  6222:                 bne.s *
02:0000382A 0C850000000A    	  6223:                 cmpi.l #$0000000A,d5
02:00003830 66FE            	  6224:                 bne.s *
                            	  6225: 
02:00003832 4E75            	  6226:                 rts
                            	  6227: 
                            	  6228: 
                            	  6229: 
                            	  6230: 
                            	  6231: *-----------------------------------------------------------
                            	  6232: *-----------------------------------------------------------
                            	  6233: * OPCODE : SHIFTS
                            	  6234: *-----------------------------------------------------------
                            	  6235: *-----------------------------------------------------------
                            	  6236: 
                            	  6237: *     Subroutine to check and accumulate the flags
02:00003834 40C3            	  6238: SHIFTS_FLAGS:   move.w sr,d3
02:00003836 02830000000F    	  6239:                 andi.l #$0F,d3            * Isolate flags
02:0000383C DA83            	  6240:                 add.l d3,d5               * Copy flag results into accumulator
02:0000383E 4E75            	  6241:                 rts
                            	  6242: 
                            	  6243: op_SHIFTS:
                            	  6244: 
                            	  6245: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6246: 
                            	  6247: *        BYTE LEFT
02:00003840 203C80018F81    	  6248:                 move.l #$80018F81,d0
02:00003846 7A00            	  6249:                 moveq  #$00000000,d5
02:00003848 7C02            	  6250:                 moveq  #$00000002,d6
                            	  6251: SHIFTS_LOOP1:
02:0000384A ED20            	  6252:                 asl.b d6,d0
02:0000384C 61E6            	  6253:                 bsr SHIFTS_FLAGS
02:0000384E 51CEFFFA        	  6254:                 dbf d6,SHIFTS_LOOP1
02:00003852 0C8080018F08    	  6255:                 cmpi.l #$80018F08,d0
02:00003858 66FE            	  6256:                 bne.s *
02:0000385A 0C8500000002    	  6257:                 cmpi.l #$00000002,d5
02:00003860 66FE            	  6258:                 bne.s *
                            	  6259: 
                            	  6260: *        BYTE RIGHT
02:00003862 203C80018F81    	  6261:                 move.l #$80018F81,d0
02:00003868 7C02            	  6262:                 moveq  #$00000002,d6
                            	  6263: SHIFTS_LOOP2:
02:0000386A EC20            	  6264:                 asr.b d6,d0
02:0000386C 61C6            	  6265:                 bsr SHIFTS_FLAGS
02:0000386E 51CEFFFA        	  6266:                 dbf d6,SHIFTS_LOOP2
02:00003872 0C8080018FF0    	  6267:                 cmpi.l #$80018FF0,d0
02:00003878 66FE            	  6268:                 bne.s *
02:0000387A 0C850000001A    	  6269:                 cmpi.l #$0000001A,d5
02:00003880 66FE            	  6270:                 bne.s *
                            	  6271: 
                            	  6272: 
                            	  6273: *        WORD LEFT
02:00003882 203C80018FF1    	  6274:                 move.l #$80018FF1,d0
02:00003888 7C02            	  6275:                 moveq  #$00000002,d6
                            	  6276: SHIFTS_LOOP3:
02:0000388A ED60            	  6277:                 asl.w d6,d0
02:0000388C 61A6            	  6278:                 bsr SHIFTS_FLAGS
02:0000388E 51CEFFFA        	  6279:                 dbf d6,SHIFTS_LOOP3
02:00003892 0C8080017F88    	  6280:                 cmpi.l #$80017F88,d0
02:00003898 66FE            	  6281:                 bne.s *
02:0000389A 0C850000001C    	  6282:                 cmpi.l #$0000001C,d5
02:000038A0 66FE            	  6283:                 bne.s *
                            	  6284: 
                            	  6285: *        WORD RIGHT
02:000038A2 203C80018FF1    	  6286:                 move.l #$80018FF1,d0
02:000038A8 7C02            	  6287:                 moveq  #$00000002,d6
                            	  6288: SHIFTS_LOOP4:
02:000038AA EC60            	  6289:                 asr.w d6,d0
02:000038AC 6186            	  6290:                 bsr SHIFTS_FLAGS
02:000038AE 51CEFFFA        	  6291:                 dbf d6,SHIFTS_LOOP4
02:000038B2 0C808001F1FE    	  6292:                 cmpi.l #$8001F1FE,d0
02:000038B8 66FE            	  6293:                 bne.s *
02:000038BA 0C8500000034    	  6294:                 cmpi.l #$00000034,d5
02:000038C0 66FE            	  6295:                 bne.s *
                            	  6296: 
                            	  6297: 
                            	  6298: *        LONG LEFT
02:000038C2 203C80018FF1    	  6299:                 move.l #$80018FF1,d0
02:000038C8 7C02            	  6300:                 moveq  #$00000002,d6
                            	  6301: SHIFTS_LOOP5:
02:000038CA EDA0            	  6302:                 asl.l d6,d0
02:000038CC 6100FF66        	  6303:                 bsr SHIFTS_FLAGS
02:000038D0 51CEFFF8        	  6304:                 dbf d6,SHIFTS_LOOP5
02:000038D4 0C80000C7F88    	  6305:                 cmpi.l #$000C7F88,d0
02:000038DA 66FE            	  6306:                 bne.s *
02:000038DC 0C8500000036    	  6307:                 cmpi.l #$00000036,d5
02:000038E2 66FE            	  6308:                 bne.s *
                            	  6309: 
                            	  6310: *        LONG RIGHT
02:000038E4 203C80018FF1    	  6311:                 move.l #$80018FF1,d0
02:000038EA 7C02            	  6312:                 moveq  #$00000002,d6
                            	  6313: SHIFTS_LOOP6:
02:000038EC ECA0            	  6314:                 asr.l d6,d0
02:000038EE 6100FF44        	  6315:                 bsr SHIFTS_FLAGS
02:000038F2 51CEFFF8        	  6316:                 dbf d6,SHIFTS_LOOP6
02:000038F6 0C80F00031FE    	  6317:                 cmpi.l #$F00031FE,d0
02:000038FC 66FE            	  6318:                 bne.s *
02:000038FE 0C850000004E    	  6319:                 cmpi.l #$0000004E,d5
02:00003904 66FE            	  6320:                 bne.s *
                            	  6321: 
                            	  6322: 
                            	  6323: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6324: 
02:00003906 203C80018FF1    	  6325:                 move.l #$80018FF1,d0
02:0000390C 7A00            	  6326:                 moveq  #$00000000,d5
                            	  6327: 
                            	  6328: *        BYTE LEFT
02:0000390E D000            	  6329:                 asl.b #1,d0
02:00003910 6100FF22        	  6330:                 bsr SHIFTS_FLAGS
02:00003914 E500            	  6331:                 asl.b #2,d0
02:00003916 6100FF1C        	  6332:                 bsr SHIFTS_FLAGS
02:0000391A D000            	  6333:                 asl.b #1,d0
02:0000391C 6100FF16        	  6334:                 bsr SHIFTS_FLAGS
02:00003920 E700            	  6335:                 asl.b #3,d0
02:00003922 6100FF10        	  6336:                 bsr SHIFTS_FLAGS
02:00003926 0C8080018F80    	  6337:                 cmpi.l #$80018F80,d0
02:0000392C 66FE            	  6338:                 bne.s *
02:0000392E 0C850000001F    	  6339:                 cmpi.l #$0000001F,d5
02:00003934 66FE            	  6340:                 bne.s *
                            	  6341: 
                            	  6342: *        BYTE RIGHT
02:00003936 E200            	  6343:                 asr.b #1,d0
02:00003938 6100FEFA        	  6344:                 bsr SHIFTS_FLAGS
02:0000393C E400            	  6345:                 asr.b #2,d0
02:0000393E 6100FEF4        	  6346:                 bsr SHIFTS_FLAGS
02:00003942 E600            	  6347:                 asr.b #3,d0
02:00003944 6100FEEE        	  6348:                 bsr SHIFTS_FLAGS
02:00003948 E200            	  6349:                 asr.b #1,d0
02:0000394A 6100FEE8        	  6350:                 bsr SHIFTS_FLAGS
02:0000394E 0C8080018FFF    	  6351:                 cmpi.l #$80018FFF,d0
02:00003954 66FE            	  6352:                 bne.s *
02:00003956 0C850000003F    	  6353:                 cmpi.l #$0000003F,d5
02:0000395C 66FE            	  6354:                 bne.s *
                            	  6355: 
                            	  6356: *        WORD LEFT
02:0000395E D040            	  6357:                 asl.w #1,d0
02:00003960 6100FED2        	  6358:                 bsr SHIFTS_FLAGS
02:00003964 E540            	  6359:                 asl.w #2,d0
02:00003966 6100FECC        	  6360:                 bsr SHIFTS_FLAGS
02:0000396A E740            	  6361:                 asl.w #3,d0
02:0000396C 6100FEC6        	  6362:                 bsr SHIFTS_FLAGS
02:00003970 EB40            	  6363:                 asl.w #5,d0
02:00003972 6100FEC0        	  6364:                 bsr SHIFTS_FLAGS
02:00003976 0C808001F800    	  6365:                 cmpi.l #$8001F800,d0
02:0000397C 66FE            	  6366:                 bne.s *
02:0000397E 0C8500000056    	  6367:                 cmpi.l #$00000056,d5
02:00003984 66FE            	  6368:                 bne.s *
                            	  6369: 
                            	  6370: *        WORD RIGHT
02:00003986 EA40            	  6371:                 asr.w #5,d0
02:00003988 6100FEAA        	  6372:                 bsr SHIFTS_FLAGS
02:0000398C E240            	  6373:                 asr.w #1,d0
02:0000398E 6100FEA4        	  6374:                 bsr SHIFTS_FLAGS
02:00003992 E440            	  6375:                 asr.w #2,d0
02:00003994 6100FE9E        	  6376:                 bsr SHIFTS_FLAGS
02:00003998 E840            	  6377:                 asr.w #4,d0
02:0000399A 6100FE98        	  6378:                 bsr SHIFTS_FLAGS
02:0000399E 0C808001FFFF    	  6379:                 cmpi.l #$8001FFFF,d0
02:000039A4 66FE            	  6380:                 bne.s *
02:000039A6 0C8500000077    	  6381:                 cmpi.l #$00000077,d5
02:000039AC 66FE            	  6382:                 bne.s *
                            	  6383: 
                            	  6384: *        LONG LEFT
02:000039AE 203C80018FF1    	  6385:                 move.l #$80018FF1,d0
02:000039B4 D080            	  6386:                 asl.l #1,d0
02:000039B6 6100FE7C        	  6387:                 bsr SHIFTS_FLAGS
02:000039BA E580            	  6388:                 asl.l #2,d0
02:000039BC 6100FE76        	  6389:                 bsr SHIFTS_FLAGS
02:000039C0 EF80            	  6390:                 asl.l #7,d0
02:000039C2 6100FE70        	  6391:                 bsr SHIFTS_FLAGS
02:000039C6 E980            	  6392:                 asl.l #4,d0
02:000039C8 6100FE6A        	  6393:                 bsr SHIFTS_FLAGS
02:000039CC 0C8063FC4000    	  6394:                 cmpi.l #$63FC4000,d0
02:000039D2 66FE            	  6395:                 bne.s *
02:000039D4 0C850000007A    	  6396:                 cmpi.l #$0000007A,d5
02:000039DA 66FE            	  6397:                 bne.s *
                            	  6398: 
                            	  6399: *        LONG RIGHT
02:000039DC 203C80018FF1    	  6400:                 move.l #$80018FF1,d0
02:000039E2 E280            	  6401:                 asr.l #1,d0
02:000039E4 6100FE4E        	  6402:                 bsr SHIFTS_FLAGS
02:000039E8 EA80            	  6403:                 asr.l #5,d0
02:000039EA 6100FE48        	  6404:                 bsr SHIFTS_FLAGS
02:000039EE EE80            	  6405:                 asr.l #7,d0
02:000039F0 6100FE42        	  6406:                 bsr SHIFTS_FLAGS
02:000039F4 E080            	  6407:                 asr.l #8,d0
02:000039F6 6100FE3C        	  6408:                 bsr SHIFTS_FLAGS
02:000039FA 0C80FFFFFC00    	  6409:                 cmpi.l #$FFFFFC00,d0
02:00003A00 66FE            	  6410:                 bne.s *
02:00003A02 0C850000009C    	  6411:                 cmpi.l #$0000009C,d5
02:00003A08 66FE            	  6412:                 bne.s *
                            	  6413: 
                            	  6414: 
                            	  6415: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6416: 
02:00003A0A 7A00            	  6417:                 moveq  #$00000000,d5
02:00003A0C 307C0100        	  6418:                 move.l #$00000100,a0
02:00003A10 30BC8FF1        	  6419:                 move.w #$8FF1,(a0)
                            	  6420: 
                            	  6421: *        WORD LEFT
02:00003A14 E1D0            	  6422:                 asl  (a0)
02:00003A16 6100FE1C        	  6423:                 bsr SHIFTS_FLAGS
02:00003A1A E1D0            	  6424:                 asl  (a0)
02:00003A1C 6100FE16        	  6425:                 bsr SHIFTS_FLAGS
02:00003A20 E1D0            	  6426:                 asl  (a0)
02:00003A22 6100FE10        	  6427:                 bsr SHIFTS_FLAGS
02:00003A26 E1D0            	  6428:                 asl  (a0)
02:00003A28 6100FE0A        	  6429:                 bsr SHIFTS_FLAGS
02:00003A2C 3010            	  6430:                 move.w (a0),d0
02:00003A2E 0C80FFFFFF10    	  6431:                 cmpi.l #$FFFFFF10,d0
02:00003A34 66FE            	  6432:                 bne.s *
02:00003A36 0C850000000D    	  6433:                 cmpi.l #$0000000D,d5
02:00003A3C 66FE            	  6434:                 bne.s *
                            	  6435: 
                            	  6436: *        WORD RIGHT
02:00003A3E E0D0            	  6437:                 asr (a0)
02:00003A40 6100FDF2        	  6438:                 bsr SHIFTS_FLAGS
02:00003A44 E0D0            	  6439:                 asr (a0)
02:00003A46 6100FDEC        	  6440:                 bsr SHIFTS_FLAGS
02:00003A4A E0D0            	  6441:                 asr (a0)
02:00003A4C 6100FDE6        	  6442:                 bsr SHIFTS_FLAGS
02:00003A50 E0D0            	  6443:                 asr (a0)
02:00003A52 6100FDE0        	  6444:                 bsr SHIFTS_FLAGS
02:00003A56 E0D0            	  6445:                 asr (a0)
02:00003A58 6100FDDA        	  6446:                 bsr SHIFTS_FLAGS
02:00003A5C E0D0            	  6447:                 asr (a0)
02:00003A5E 6100FDD4        	  6448:                 bsr SHIFTS_FLAGS
02:00003A62 3010            	  6449:                 move.w (a0),d0
02:00003A64 0C80FFFFFFFC    	  6450:                 cmpi.l #$FFFFFFFC,d0
02:00003A6A 66FE            	  6451:                 bne.s *
02:00003A6C 0C850000003E    	  6452:                 cmpi.l #$0000003E,d5
02:00003A72 66FE            	  6453:                 bne.s *
                            	  6454: 
02:00003A74 4E75            	  6455:                 rts
                            	  6456: 
                            	  6457: 
                            	  6458: 
                            	  6459: *-----------------------------------------------------------
                            	  6460: *-----------------------------------------------------------
                            	  6461: * OPCODE : SHIFTS2
                            	  6462: *-----------------------------------------------------------
                            	  6463: *-----------------------------------------------------------
                            	  6464: 
                            	  6465: *     Subroutine to check and accumulate the flags
02:00003A76 40C3            	  6466: SHIFTS2_FLAGS:  move.w sr,d3
02:00003A78 02830000000F    	  6467:                 andi.l #$0F,d3            * Isolate flags
02:00003A7E DA83            	  6468:                 add.l d3,d5               * Copy flag results into accumulator
02:00003A80 4E75            	  6469:                 rts
                            	  6470: 
                            	  6471: op_SHIFTS2:
                            	  6472: 
                            	  6473: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6474: 
                            	  6475: *        BYTE LEFT
02:00003A82 203C80018F81    	  6476:                 move.l #$80018F81,d0
02:00003A88 7A00            	  6477:                 moveq  #$00000000,d5
02:00003A8A 7C02            	  6478:                 moveq  #$00000002,d6
                            	  6479: SHIFTS2_LOOP1:
02:00003A8C ED28            	  6480:                 lsl.b d6,d0
02:00003A8E 61E6            	  6481:                 bsr SHIFTS2_FLAGS
02:00003A90 51CEFFFA        	  6482:                 dbf d6,SHIFTS2_LOOP1
02:00003A94 0C8080018F08    	  6483:                 cmpi.l #$80018F08,d0
02:00003A9A 66FE            	  6484:                 bne.s *
02:00003A9C 4A85            	  6485:                 cmpi.l #$00000000,d5
02:00003A9E 66FE            	  6486:                 bne.s *
                            	  6487: 
                            	  6488: *        BYTE RIGHT
02:00003AA0 203C80018F81    	  6489:                 move.l #$80018F81,d0
02:00003AA6 7C02            	  6490:                 moveq  #$00000002,d6
                            	  6491: SHIFTS2_LOOP2:
02:00003AA8 EC28            	  6492:                 lsr.b d6,d0
02:00003AAA 61CA            	  6493:                 bsr SHIFTS2_FLAGS
02:00003AAC 51CEFFFA        	  6494:                 dbf d6,SHIFTS2_LOOP2
02:00003AB0 0C8080018F10    	  6495:                 cmpi.l #$80018F10,d0
02:00003AB6 66FE            	  6496:                 bne.s *
02:00003AB8 4A85            	  6497:                 cmpi.l #$00000000,d5
02:00003ABA 66FE            	  6498:                 bne.s *
                            	  6499: 
                            	  6500: 
                            	  6501: *        WORD LEFT
02:00003ABC 203C80018FF1    	  6502:                 move.l #$80018FF1,d0
02:00003AC2 7C02            	  6503:                 moveq  #$00000002,d6
                            	  6504: SHIFTS2_LOOP3:
02:00003AC4 ED68            	  6505:                 lsl.w d6,d0
02:00003AC6 61AE            	  6506:                 bsr SHIFTS2_FLAGS
02:00003AC8 51CEFFFA        	  6507:                 dbf d6,SHIFTS2_LOOP3
02:00003ACC 0C8080017F88    	  6508:                 cmpi.l #$80017F88,d0
02:00003AD2 66FE            	  6509:                 bne.s *
02:00003AD4 4A85            	  6510:                 cmpi.l #$00000000,d5
02:00003AD6 66FE            	  6511:                 bne.s *
                            	  6512: 
                            	  6513: *        WORD RIGHT
02:00003AD8 203C80018FF1    	  6514:                 move.l #$80018FF1,d0
02:00003ADE 7C02            	  6515:                 moveq  #$00000002,d6
                            	  6516: SHIFTS2_LOOP4:
02:00003AE0 EC68            	  6517:                 lsr.w d6,d0
02:00003AE2 6192            	  6518:                 bsr SHIFTS2_FLAGS
02:00003AE4 51CEFFFA        	  6519:                 dbf d6,SHIFTS2_LOOP4
02:00003AE8 0C80800111FE    	  6520:                 cmpi.l #$800111FE,d0
02:00003AEE 66FE            	  6521:                 bne.s *
02:00003AF0 4A85            	  6522:                 cmpi.l #$00000000,d5
02:00003AF2 66FE            	  6523:                 bne.s *
                            	  6524: 
                            	  6525: 
                            	  6526: *        LONG LEFT
02:00003AF4 203C80018FF1    	  6527:                 move.l #$80018FF1,d0
02:00003AFA 7C02            	  6528:                 moveq  #$00000002,d6
                            	  6529: SHIFTS2_LOOP5:
02:00003AFC EDA8            	  6530:                 lsl.l d6,d0
02:00003AFE 6100FF76        	  6531:                 bsr SHIFTS2_FLAGS
02:00003B02 51CEFFF8        	  6532:                 dbf d6,SHIFTS2_LOOP5
02:00003B06 0C80000C7F88    	  6533:                 cmpi.l #$000C7F88,d0
02:00003B0C 66FE            	  6534:                 bne.s *
02:00003B0E 4A85            	  6535:                 cmpi.l #$00000000,d5
02:00003B10 66FE            	  6536:                 bne.s *
                            	  6537: 
                            	  6538: *        LONG RIGHT
02:00003B12 203C80018FF1    	  6539:                 move.l #$80018FF1,d0
02:00003B18 7C02            	  6540:                 moveq  #$00000002,d6
                            	  6541: SHIFTS2_LOOP6:
02:00003B1A ECA8            	  6542:                 lsr.l d6,d0
02:00003B1C 6100FF58        	  6543:                 bsr SHIFTS2_FLAGS
02:00003B20 51CEFFF8        	  6544:                 dbf d6,SHIFTS2_LOOP6
02:00003B24 0C80100031FE    	  6545:                 cmpi.l #$100031FE,d0
02:00003B2A 66FE            	  6546:                 bne.s *
02:00003B2C 4A85            	  6547:                 cmpi.l #$00000000,d5
02:00003B2E 66FE            	  6548:                 bne.s *
                            	  6549: 
                            	  6550: 
                            	  6551: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6552: 
02:00003B30 203C80018FF1    	  6553:                 move.l #$80018FF1,d0
02:00003B36 7A00            	  6554:                 moveq  #$00000000,d5
                            	  6555: 
                            	  6556: *        BYTE LEFT
02:00003B38 E308            	  6557:                 lsl.b #1,d0
02:00003B3A 6100FF3A        	  6558:                 bsr SHIFTS2_FLAGS
02:00003B3E E508            	  6559:                 lsl.b #2,d0
02:00003B40 6100FF34        	  6560:                 bsr SHIFTS2_FLAGS
02:00003B44 E308            	  6561:                 lsl.b #1,d0
02:00003B46 6100FF2E        	  6562:                 bsr SHIFTS2_FLAGS
02:00003B4A E708            	  6563:                 lsl.b #3,d0
02:00003B4C 6100FF28        	  6564:                 bsr SHIFTS2_FLAGS
02:00003B50 0C8080018F80    	  6565:                 cmpi.l #$80018F80,d0
02:00003B56 66FE            	  6566:                 bne.s *
02:00003B58 0C850000001B    	  6567:                 cmpi.l #$0000001B,d5
02:00003B5E 66FE            	  6568:                 bne.s *
                            	  6569: 
                            	  6570: *        BYTE RIGHT
02:00003B60 E208            	  6571:                 lsr.b #1,d0
02:00003B62 6100FF12        	  6572:                 bsr SHIFTS2_FLAGS
02:00003B66 E408            	  6573:                 lsr.b #2,d0
02:00003B68 6100FF0C        	  6574:                 bsr SHIFTS2_FLAGS
02:00003B6C E608            	  6575:                 lsr.b #3,d0
02:00003B6E 6100FF06        	  6576:                 bsr SHIFTS2_FLAGS
02:00003B72 E208            	  6577:                 lsr.b #1,d0
02:00003B74 6100FF00        	  6578:                 bsr SHIFTS2_FLAGS
02:00003B78 0C8080018F01    	  6579:                 cmpi.l #$80018F01,d0
02:00003B7E 66FE            	  6580:                 bne.s *
02:00003B80 0C850000001B    	  6581:                 cmpi.l #$0000001B,d5
02:00003B86 66FE            	  6582:                 bne.s *
                            	  6583: 
                            	  6584: *        WORD LEFT
02:00003B88 E348            	  6585:                 lsl.w #1,d0
02:00003B8A 6100FEEA        	  6586:                 bsr SHIFTS2_FLAGS
02:00003B8E E548            	  6587:                 lsl.w #2,d0
02:00003B90 6100FEE4        	  6588:                 bsr SHIFTS2_FLAGS
02:00003B94 E748            	  6589:                 lsl.w #3,d0
02:00003B96 6100FEDE        	  6590:                 bsr SHIFTS2_FLAGS
02:00003B9A EB48            	  6591:                 lsl.w #5,d0
02:00003B9C 6100FED8        	  6592:                 bsr SHIFTS2_FLAGS
02:00003BA0 0C8080010800    	  6593:                 cmpi.l #$80010800,d0
02:00003BA6 66FE            	  6594:                 bne.s *
02:00003BA8 0C8500000025    	  6595:                 cmpi.l #$00000025,d5
02:00003BAE 66FE            	  6596:                 bne.s *
                            	  6597: 
                            	  6598: *        WORD RIGHT
02:00003BB0 EA48            	  6599:                 lsr.w #5,d0
02:00003BB2 6100FEC2        	  6600:                 bsr SHIFTS2_FLAGS
02:00003BB6 E248            	  6601:                 lsr.w #1,d0
02:00003BB8 6100FEBC        	  6602:                 bsr SHIFTS2_FLAGS
02:00003BBC E448            	  6603:                 lsr.w #2,d0
02:00003BBE 6100FEB6        	  6604:                 bsr SHIFTS2_FLAGS
02:00003BC2 E848            	  6605:                 lsr.w #4,d0
02:00003BC4 6100FEB0        	  6606:                 bsr SHIFTS2_FLAGS
02:00003BC8 0C8080010000    	  6607:                 cmpi.l #$80010000,d0
02:00003BCE 66FE            	  6608:                 bne.s *
02:00003BD0 0C850000002A    	  6609:                 cmpi.l #$0000002A,d5
02:00003BD6 66FE            	  6610:                 bne.s *
                            	  6611: 
                            	  6612: *        LONG LEFT
02:00003BD8 203C80018FF1    	  6613:                 move.l #$80018FF1,d0
02:00003BDE E388            	  6614:                 lsl.l #1,d0
02:00003BE0 6100FE94        	  6615:                 bsr SHIFTS2_FLAGS
02:00003BE4 E588            	  6616:                 lsl.l #2,d0
02:00003BE6 6100FE8E        	  6617:                 bsr SHIFTS2_FLAGS
02:00003BEA EF88            	  6618:                 lsl.l #7,d0
02:00003BEC 6100FE88        	  6619:                 bsr SHIFTS2_FLAGS
02:00003BF0 E988            	  6620:                 lsl.l #4,d0
02:00003BF2 6100FE82        	  6621:                 bsr SHIFTS2_FLAGS
02:00003BF6 0C8063FC4000    	  6622:                 cmpi.l #$63FC4000,d0
02:00003BFC 66FE            	  6623:                 bne.s *
02:00003BFE 0C850000002B    	  6624:                 cmpi.l #$0000002B,d5
02:00003C04 66FE            	  6625:                 bne.s *
                            	  6626: 
                            	  6627: *        LONG RIGHT
02:00003C06 203C80018FF1    	  6628:                 move.l #$80018FF1,d0
02:00003C0C E288            	  6629:                 lsr.l #1,d0
02:00003C0E 6100FE66        	  6630:                 bsr SHIFTS2_FLAGS
02:00003C12 EA88            	  6631:                 lsr.l #5,d0
02:00003C14 6100FE60        	  6632:                 bsr SHIFTS2_FLAGS
02:00003C18 EE88            	  6633:                 lsr.l #7,d0
02:00003C1A 6100FE5A        	  6634:                 bsr SHIFTS2_FLAGS
02:00003C1E E088            	  6635:                 lsr.l #8,d0
02:00003C20 6100FE54        	  6636:                 bsr SHIFTS2_FLAGS
02:00003C24 0C8000000400    	  6637:                 cmpi.l #$00000400,d0
02:00003C2A 66FE            	  6638:                 bne.s *
02:00003C2C 0C850000002D    	  6639:                 cmpi.l #$0000002D,d5
02:00003C32 66FE            	  6640:                 bne.s *
                            	  6641: 
                            	  6642: 
                            	  6643: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6644: 
02:00003C34 7A00            	  6645:                 moveq  #$00000000,d5
02:00003C36 307C0100        	  6646:                 move.l #$00000100,a0
02:00003C3A 30BC8FF1        	  6647:                 move.w #$8FF1,(a0)
                            	  6648: 
                            	  6649: *        WORD LEFT
02:00003C3E E3D0            	  6650:                 lsl  (a0)
02:00003C40 6100FE34        	  6651:                 bsr SHIFTS2_FLAGS
02:00003C44 E3D0            	  6652:                 lsl  (a0)
02:00003C46 6100FE2E        	  6653:                 bsr SHIFTS2_FLAGS
02:00003C4A E3D0            	  6654:                 lsl  (a0)
02:00003C4C 6100FE28        	  6655:                 bsr SHIFTS2_FLAGS
02:00003C50 E3D0            	  6656:                 lsl  (a0)
02:00003C52 6100FE22        	  6657:                 bsr SHIFTS2_FLAGS
02:00003C56 3010            	  6658:                 move.w (a0),d0
02:00003C58 0C800000FF10    	  6659:                 cmpi.l #$0000FF10,d0
02:00003C5E 66FE            	  6660:                 bne.s *
02:00003C60 0C8500000009    	  6661:                 cmpi.l #$00000009,d5
02:00003C66 66FE            	  6662:                 bne.s *
                            	  6663: 
                            	  6664: *        WORD RIGHT
02:00003C68 E2D0            	  6665:                 lsr (a0)
02:00003C6A 6100FE0A        	  6666:                 bsr SHIFTS2_FLAGS
02:00003C6E E2D0            	  6667:                 lsr (a0)
02:00003C70 6100FE04        	  6668:                 bsr SHIFTS2_FLAGS
02:00003C74 E2D0            	  6669:                 lsr (a0)
02:00003C76 6100FDFE        	  6670:                 bsr SHIFTS2_FLAGS
02:00003C7A E2D0            	  6671:                 lsr (a0)
02:00003C7C 6100FDF8        	  6672:                 bsr SHIFTS2_FLAGS
02:00003C80 E2D0            	  6673:                 lsr (a0)
02:00003C82 6100FDF2        	  6674:                 bsr SHIFTS2_FLAGS
02:00003C86 E2D0            	  6675:                 lsr (a0)
02:00003C88 6100FDEC        	  6676:                 bsr SHIFTS2_FLAGS
02:00003C8C 3010            	  6677:                 move.w (a0),d0
02:00003C8E 0C80000003FC    	  6678:                 cmpi.l #$000003FC,d0
02:00003C94 66FE            	  6679:                 bne.s *
02:00003C96 0C850000000A    	  6680:                 cmpi.l #$0000000A,d5
02:00003C9C 66FE            	  6681:                 bne.s *
                            	  6682: 
02:00003C9E 4E75            	  6683:                 rts
                            	  6684: 
                            	  6685: ;-----------------------------------------------------------
                            	  6686: ;-----------------------------------------------------------
                            	  6687: ; OPCODE : BSR / RTS
                            	  6688: ;-----------------------------------------------------------
                            	  6689: ;-----------------------------------------------------------
                            	  6690: 
                            	  6691: ;t3_bsr:
                            	  6692: ;	moveq	#3,d3
                            	  6693: ;	rts
                            	  6694: 
                            	  6695: ;t1_bsr:
                            	  6696: ;	moveq	#1,d1
                            	  6697: ;	rts
                            	  6698: 
                            	  6699: ;op_bsr:
                            	  6700: ;	bsr			t1_bsr
                            	  6701: ;	bsr			t2_bsr
                            	  6702: ;	bsr.w		t3_bsr
                            	  6703: ;	bsr.w		t4_bsr
                            	  6704: ;	cmpi.l	#1,d1
                            	  6705: ;	bne			*
                            	  6706: ;	cmpi.l	#2,d2
                            	  6707: ;	bne			*
                            	  6708: ;	cmpi.l	#3,d3
                            	  6709: ;	bne			*
                            	  6710: ;	cmpi.l	#4,d4
                            	  6711: ;	bne			*
                            	  6712: ;	rts
                            	  6713: 
                            	  6714: ;t2_bsr:
                            	  6715: ;	moveq	#2,d2
                            	  6716: ;	rts
                            	  6717: 	
                            	  6718: ;t4_bsr:
                            	  6719: ;	moveq	#4,d4
                            	  6720: ;	rts
                            	  6721: *    END
                            	  6722:     
                            	  6723: 

Source: "boot.asm"
                            	   504: 
                            	   505: ; -----------------------------------------------------------------------------
                            	   506: ; Gets the screen color in d0 and d1.
                            	   507: ; -----------------------------------------------------------------------------
                            	   508: 
                            	   509: get_screen_color:
02:00003CA0 203900040084    	   510: 	move.l	fgColor,d0			; get foreground color
02:00003CA6 EB80            	   511: 	asl.l		#5,d0						; shift into position
02:00003CA8 008040000000    	   512: 	ori.l		#$40000000,d0		; set priority
02:00003CAE 223900040088    	   513: 	move.l	bkColor,d1
02:00003CB4 E089            	   514: 	lsr.l		#8,d1
02:00003CB6 E089            	   515: 	lsr.l		#8,d1
02:00003CB8 02810000001F    	   516: 	andi.l	#31,d1					; mask off extra bits
02:00003CBE 8081            	   517: 	or.l		d1,d0						; set background color bits in upper long word
02:00003CC0 223900040088    	   518: 	move.l	bkColor,d1			; get background color
02:00003CC6 E181            	   519: 	asl.l		#8,d1						; shift into position for display ram
02:00003CC8 E181            	   520: 	asl.l		#8,d1
02:00003CCA 4E75            	   521: 	rts
                            	   522: 
                            	   523: ; -----------------------------------------------------------------------------
                            	   524: ; -----------------------------------------------------------------------------
                            	   525: 
                            	   526: get_screen_address:
02:00003CCC 207900040004    	   527: 	move.l	TextScr,a0
02:00003CD2 4E75            	   528: 	rts
                            	   529: 	
                            	   530: ; -----------------------------------------------------------------------------
                            	   531: ; -----------------------------------------------------------------------------
                            	   532: 
                            	   533: clear_screen:
02:00003CD4 48E7E080        	   534: 	movem.l	d0/d1/d2/a0,-(a7)
02:00003CD8 61F2            	   535: 	bsr			get_screen_address	; a0 = pointer to screen area
02:00003CDA 10390004008C    	   536: 	move.b	TextRows,d0					; d0 = rows
02:00003CE0 14390004008D    	   537: 	move.b	TextCols,d2					; d2 = cols
02:00003CE6 4880            	   538: 	ext.w		d0									; convert to word
02:00003CE8 4882            	   539: 	ext.w		d2									; convert to word
02:00003CEA C4C0            	   540: 	mulu		d0,d2								; d2 = number of character cells to clear
02:00003CEC 61B2            	   541: 	bsr			get_screen_color		; get the color bits
02:00003CEE 00410020        	   542: 	ori.w		#32,d1							; load space character
02:00003CF2 E159            	   543: 	rol.w		#8,d1								; swap endian, text controller expects little endian
02:00003CF4 4841            	   544: 	swap		d1
02:00003CF6 E159            	   545: 	rol.w		#8,d1
02:00003CF8 E158            	   546: 	rol.w		#8,d0								; swap endian
02:00003CFA 4840            	   547: 	swap		d0
02:00003CFC E158            	   548: 	rol.w		#8,d0
                            	   549: loop3:
02:00003CFE 20C1            	   550: 	move.l	d1,(a0)+						; copy char plus bkcolor to cell
02:00003D00 4E71            	   551: 	nop	
02:00003D02 4E71            	   552: 	nop
02:00003D04 4E71            	   553: 	nop	
02:00003D06 4E71            	   554: 	nop
02:00003D08 4E71            	   555: 	nop	
02:00003D0A 4E71            	   556: 	nop
02:00003D0C 4E71            	   557: 	nop	
02:00003D0E 4E71            	   558: 	nop
02:00003D10 20C0            	   559: 	move.l	d0,(a0)+					; copy fgcolor to cell
02:00003D12 4E71            	   560: 	nop
02:00003D14 4E71            	   561: 	nop
02:00003D16 4E71            	   562: 	nop	
02:00003D18 4E71            	   563: 	nop
02:00003D1A 4E71            	   564: 	nop	
02:00003D1C 4E71            	   565: 	nop
02:00003D1E 4E71            	   566: 	nop	
02:00003D20 4E71            	   567: 	nop
02:00003D22 51CAFFDA        	   568: 	dbra		d2,loop3
02:00003D26 4CDF0107        	   569: 	movem.l	(a7)+,d0/d1/d2/a0
02:00003D2A 4E75            	   570: 	rts
                            	   571: 
                            	   572: CRLF:
02:00003D2C 2F01            	   573: 	move.l	d1,-(a7)
02:00003D2E 123C000D        	   574: 	move.b	#13,d1
02:00003D32 6142            	   575: 	bsr			DisplayChar
02:00003D34 123C000A        	   576: 	move.b	#10,d1
02:00003D38 613C            	   577: 	bsr			DisplayChar
02:00003D3A 221F            	   578: 	move.l	(a7)+,d1
02:00003D3C 4E75            	   579: 	rts
                            	   580: 
                            	   581: ;------------------------------------------------------------------------------
                            	   582: ;------------------------------------------------------------------------------
                            	   583: 
                            	   584: UpdateTextPos:
02:00003D3E 103900040000    	   585: 	move.b	CursorRow,d0		; compute screen location
02:00003D44 0240007F        	   586: 	andi.w	#$7f,d0
02:00003D48 14390004008D    	   587: 	move.b	TextCols,d2
02:00003D4E 4882            	   588: 	ext.w		d2
02:00003D50 C0C2            	   589: 	mulu.w	d2,d0
02:00003D52 2600            	   590: 	move.l	d0,d3
02:00003D54 143900040001    	   591: 	move.b	CursorCol,d2
02:00003D5A 024200FF        	   592: 	andi.w	#$ff,d2
02:00003D5E D042            	   593: 	add.w		d2,d0
02:00003D60 33C000040002    	   594: 	move.w	d0,TextPos			; save cursor pos
02:00003D66 4E75            	   595: 	rts
                            	   596: 
                            	   597: ;------------------------------------------------------------------------------
                            	   598: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   599: ; Destroys d0,d2,a0
                            	   600: ;------------------------------------------------------------------------------
                            	   601: 
                            	   602: CalcScreenLoc:
02:00003D68 61D4            	   603: 	bsr			UpdateTextPos
02:00003D6A 48C0            	   604: 	ext.l		d0								; make it into a long
02:00003D6C E780            	   605: 	asl.l		#3,d0							; 8 bytes per char
02:00003D6E 6100FF5C        	   606: 	bsr			get_screen_address
02:00003D72 D1C0            	   607: 	add.l		d0,a0							; a0 = screen location
02:00003D74 4E75            	   608: 	rts
                            	   609: 
                            	   610: ;------------------------------------------------------------------------------
                            	   611: ; Display a character on the screen
                            	   612: ; d1.b = char to display
                            	   613: ;------------------------------------------------------------------------------
                            	   614: 
                            	   615: DisplayChar:
02:00003D76 48E77000        	   616: 	movem.l	d1/d2/d3,-(a7)
02:00003D7A 4E7A2FE0        	   617: 	movec		coreno,d2
02:00003D7E 0C020002        	   618: 	cmpi.b	#2,d2
02:00003D82 4DD6            	   619: 	bne.s		.0001
                            	   620: ;	bsr			SerialPutChar
                            	   621: .0001:
02:00003D84 0281000000FF    	   622: 	andi.l	#$ff,d1				; zero out upper bytes of d1
02:00003D8A 0C01000D        	   623: 	cmpi.b	#13,d1				; carriage return ?
02:00003D8E 6610            	   624: 	bne.s		dccr
02:00003D90 423900040001    	   625: 	clr.b		CursorCol			; just set cursor column to zero on a CR
                            	   626: dcx14:
02:00003D96 61000290        	   627: 	bsr			SyncCursor		; set position in text controller
                            	   628: dcx7:
02:00003D9A 4CDF000E        	   629: 	movem.l	(a7)+,d1/d2/d3
02:00003D9E 4E75            	   630: 	rts
                            	   631: dccr:
02:00003DA0 0C010091        	   632: 	cmpi.b	#$91,d1			; cursor right ?
02:00003DA4 6618            	   633: 	bne.s   dcx6
02:00003DA6 14390004008D    	   634: 	move.b	TextCols,d2
02:00003DAC 5302            	   635: 	sub.b		#1,d2
02:00003DAE 943900040001    	   636: 	sub.b		CursorCol,d2
02:00003DB4 67E4            	   637: 	beq.s		dcx7
02:00003DB6 523900040001    	   638: 	addi.b	#1,CursorCol
02:00003DBC 60D8            	   639: 	bra.s		dcx14
                            	   640: dcx6:
02:00003DBE 0C010090        	   641: 	cmpi.b	#$90,d1			; cursor up ?
02:00003DC2 6610            	   642: 	bne.s		dcx8
02:00003DC4 4A3900040000    	   643: 	cmpi.b	#0,CursorRow
02:00003DCA 67CE            	   644: 	beq.s		dcx7
02:00003DCC 533900040000    	   645: 	subi.b	#1,CursorRow
02:00003DD2 60C2            	   646: 	bra.s		dcx14
                            	   647: dcx8:
02:00003DD4 0C010093        	   648: 	cmpi.b	#$93,d1			; cursor left?
02:00003DD8 6610            	   649: 	bne.s		dcx9
02:00003DDA 4A3900040001    	   650: 	cmpi.b	#0,CursorCol
02:00003DE0 67B8            	   651: 	beq.s		dcx7
02:00003DE2 533900040001    	   652: 	subi.b	#1,CursorCol
02:00003DE8 60AC            	   653: 	bra.s		dcx14
                            	   654: dcx9:
02:00003DEA 0C010092        	   655: 	cmpi.b	#$92,d1			; cursor down ?
02:00003DEE 6618            	   656: 	bne.s		dcx10
02:00003DF0 14390004008C    	   657: 	move.b	TextRows,d2
02:00003DF6 5302            	   658: 	sub.b		#1,d2
02:00003DF8 B43900040000    	   659: 	cmp.b		CursorRow,d2
02:00003DFE 679A            	   660: 	beq.s		dcx7
02:00003E00 523900040000    	   661: 	addi.b	#1,CursorRow
02:00003E06 608E            	   662: 	bra.s		dcx14
                            	   663: dcx10:
02:00003E08 0C010094        	   664: 	cmpi.b	#$94,d1			; cursor home ?
02:00003E0C 661C            	   665: 	bne.s		dcx11
02:00003E0E 4A3900040001    	   666: 	cmpi.b	#0,CursorCol
02:00003E14 670A            	   667: 	beq.s		dcx12
02:00003E16 423900040001    	   668: 	clr.b		CursorCol
02:00003E1C 6000FF78        	   669: 	bra			dcx14
                            	   670: dcx12:
02:00003E20 423900040000    	   671: 	clr.b		CursorRow
02:00003E26 6000FF6E        	   672: 	bra			dcx14
                            	   673: dcx11:
02:00003E2A 48E7E080        	   674: 	movem.l	d0/d1/d2/a0,-(a7)
02:00003E2E 0C010099        	   675: 	cmpi.b	#$99,d1			; delete ?
02:00003E32 675C            	   676: 	beq.s		doDelete
02:00003E34 0C010008        	   677: 	cmpi.b	#CTRLH,d1			; backspace ?
02:00003E38 6748            	   678: 	beq.s   doBackspace
02:00003E3A 0C010018        	   679: 	cmpi.b	#CTRLX,d1			; delete line ?
02:00003E3E 6700008C        	   680: 	beq			doCtrlX
02:00003E42 0C01000A        	   681: 	cmpi.b	#10,d1		; linefeed ?
02:00003E46 6728            	   682: 	beq.s		dclf
                            	   683: 
                            	   684: 	; regular char
02:00003E48 6100FF1E        	   685: 	bsr			CalcScreenLoc	; a0 = screen location
02:00003E4C 2401            	   686: 	move.l	d1,d2					; d2 = char
02:00003E4E 6100FE50        	   687: 	bsr			get_screen_color	; d0,d1 = color
02:00003E52 8282            	   688: 	or.l		d2,d1					; d1 = char + color
02:00003E54 E159            	   689: 	rol.w		#8,d1					; text controller expects little endian data
02:00003E56 4841            	   690: 	swap		d1
02:00003E58 E159            	   691: 	rol.w		#8,d1
02:00003E5A 2081            	   692: 	move.l	d1,(a0)
02:00003E5C E158            	   693: 	rol.w		#8,d0					; swap bytes
02:00003E5E 4840            	   694: 	swap		d0						; swap halfs
02:00003E60 E158            	   695: 	rol.w		#8,d0					; swap remaining bytes
02:00003E62 21400004        	   696: 	move.l	d0,4(a0)
02:00003E66 61000088        	   697: 	bsr			IncCursorPos
02:00003E6A 610001BC        	   698: 	bsr			SyncCursor
02:00003E6E 6008            	   699: 	bra			dcx4
                            	   700: dclf:
02:00003E70 6100009E        	   701: 	bsr			IncCursorRow
                            	   702: dcx16:
02:00003E74 610001B2        	   703: 	bsr			SyncCursor
                            	   704: dcx4:
02:00003E78 4CDF0107        	   705: 	movem.l	(a7)+,d0/d1/d2/a0		; get back a0
02:00003E7C 4CDF000E        	   706: 	movem.l	(a7)+,d1/d2/d3
02:00003E80 4E75            	   707: 	rts
                            	   708: 
                            	   709: 	;---------------------------
                            	   710: 	; CTRL-H: backspace
                            	   711: 	;---------------------------
                            	   712: doBackspace:
02:00003E82 4A3900040001    	   713: 	cmpi.b	#0,CursorCol		; if already at start of line
02:00003E88 67EE            	   714: 	beq.s   dcx4						; nothing to do
02:00003E8A 533900040001    	   715: 	subi.b	#1,CursorCol		; decrement column
                            	   716: 
                            	   717: 	;---------------------------
                            	   718: 	; Delete key
                            	   719: 	;---------------------------
                            	   720: doDelete:
02:00003E90 48E7C080        	   721: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
02:00003E94 6100FED2        	   722: 	bsr		  CalcScreenLoc		; a0 = screen location
02:00003E98 103900040001    	   723: 	move.b	CursorCol,d0
                            	   724: .0001:
02:00003E9E 20A80008        	   725: 	move.l	8(a0),(a0)		; pull remaining characters on line over 1
02:00003EA2 2168000C0004    	   726: 	move.l	12(a0),4(a0)	; pull remaining characters on line over 1
02:00003EA8 5088            	   727: 	lea			8(a0),a0
02:00003EAA 5200            	   728: 	addi.b	#1,d0
02:00003EAC B0390004008D    	   729: 	cmp.b		TextCols,d0
02:00003EB2 65EA            	   730: 	blo.s		.0001
02:00003EB4 6100FDEA        	   731: 	bsr			get_screen_color
02:00003EB8 323C0020        	   732: 	move.w	#' ',d1				; terminate line with a space
02:00003EBC E159            	   733: 	rol.w		#8,d1
02:00003EBE 4841            	   734: 	swap		d1
02:00003EC0 E159            	   735: 	rol.w		#8,d1
02:00003EC2 2141FFF8        	   736: 	move.l	d1,-8(a0)
02:00003EC6 4CDF0103        	   737: 	movem.l	(a7)+,d0/d1/a0
02:00003ECA 60A8            	   738: 	bra.s		dcx16				; finished
                            	   739: 
                            	   740: 	;---------------------------
                            	   741: 	; CTRL-X: erase line
                            	   742: 	;---------------------------
                            	   743: doCtrlX:
02:00003ECC 423900040001    	   744: 	clr.b		CursorCol			; Reset cursor to start of line
02:00003ED2 10390004008D    	   745: 	move.b	TextCols,d0			; and display TextCols number of spaces
02:00003ED8 4880            	   746: 	ext.w		d0
02:00003EDA 48C0            	   747: 	ext.l		d0
02:00003EDC 123C0020        	   748: 	move.b	#' ',d1				; d1 = space char
                            	   749: .0001:
                            	   750: 	; DisplayChar is called recursively here
                            	   751: 	; It's safe to do because we know it won't recurse again due to the
                            	   752: 	; fact we know the character being displayed is a space char
02:00003EE0 6100FE94        	   753: 	bsr		DisplayChar			
02:00003EE4 5340            	   754: 	subq	#1,d0
02:00003EE6 66F8            	   755: 	bne.s	.0001
02:00003EE8 423900040001    	   756: 	clr.b	CursorCol			; now really go back to start of line
02:00003EEE 6084            	   757: 	bra.s	dcx16				; we're done
                            	   758: 
                            	   759: ;------------------------------------------------------------------------------
                            	   760: ; Increment the cursor position, scroll the screen if needed.
                            	   761: ;------------------------------------------------------------------------------
                            	   762: 
                            	   763: IncCursorPos:
02:00003EF0 527900040002    	   764: 	addi.w	#1,TextCurpos
02:00003EF6 523900040001    	   765: 	addi.b	#1,CursorCol
02:00003EFC 10390004008D    	   766: 	move.b	TextCols,d0
02:00003F02 B03900040001    	   767: 	cmp.b		CursorCol,d0
02:00003F08 6438            	   768: 	bhs.s		icc1
02:00003F0A 423900040001    	   769: 	clr.b		CursorCol
                            	   770: IncCursorRow:
02:00003F10 523900040000    	   771: 	addi.b	#1,CursorRow
02:00003F16 10390004008C    	   772: 	move.b	TextRows,d0
02:00003F1C B03900040000    	   773: 	cmp.b		CursorRow,d0
02:00003F22 621E            	   774: 	bhi.s		icc1
02:00003F24 10390004008C    	   775: 	move.b	TextRows,d0
02:00003F2A 13C000040000    	   776: 	move.b	d0,CursorRow		; in case CursorRow is way over
02:00003F30 533900040000    	   777: 	subi.b	#1,CursorRow
02:00003F36 4880            	   778: 	ext.w		d0
02:00003F38 D040            	   779: 	asl.w		#1,d0
02:00003F3A 917900040002    	   780: 	sub.w		d0,TextCurpos
02:00003F40 6102            	   781: 	bsr			ScrollUp
                            	   782: icc1:
02:00003F42 4E75            	   783: 	rts
                            	   784: 
                            	   785: ;------------------------------------------------------------------------------
                            	   786: ; Scroll screen up.
                            	   787: ;------------------------------------------------------------------------------
                            	   788: 
                            	   789: ScrollUp:
02:00003F44 48E7C084        	   790: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
02:00003F48 6100FD82        	   791: 	bsr			get_screen_address
02:00003F4C 2A48            	   792: 	move.l	a0,a5								; a5 = pointer to text screen
                            	   793: .0003:								
02:00003F4E 10390004008D    	   794: 	move.b	TextCols,d0					; d0 = columns
02:00003F54 12390004008C    	   795: 	move.b	TextRows,d1					; d1 = rows
02:00003F5A 4880            	   796: 	ext.w		d0									; make cols into a word value
02:00003F5C 4881            	   797: 	ext.w		d1									; make rows into a word value
02:00003F5E E740            	   798: 	asl.w		#3,d0								; make into cell index
02:00003F60 41F50000        	   799: 	lea			0(a5,d0.w),a0				; a0 = pointer to second row of text screen
02:00003F64 E648            	   800: 	lsr.w		#3,d0								; get back d0
02:00003F66 5341            	   801: 	subq		#1,d1								; number of rows-1
02:00003F68 C0C1            	   802: 	mulu		d1,d0								; d0 = count of characters to move
                            	   803: .0001:
02:00003F6A 2AD8            	   804: 	move.l	(a0)+,(a5)+					; each char is 64 bits
02:00003F6C 4E71            	   805: 	nop
02:00003F6E 4E71            	   806: 	nop
02:00003F70 2AD8            	   807: 	move.l	(a0)+,(a5)+	
02:00003F72 4E71            	   808: 	nop
02:00003F74 4E71            	   809: 	nop
02:00003F76 51C8FFF2        	   810: 	dbra		d0,.0001
02:00003F7A 4CDF2103        	   811: 	movem.l	(a7)+,d0/d1/a0/a5
                            	   812: 	; Fall through into blanking out last line
                            	   813: 
                            	   814: ;------------------------------------------------------------------------------
                            	   815: ; Blank out the last line on the screen.
                            	   816: ;------------------------------------------------------------------------------
                            	   817: 
                            	   818: BlankLastLine:
02:00003F7E 48E7E080        	   819: 	movem.l	d0/d1/d2/a0,-(a7)
02:00003F82 6100FD48        	   820: 	bsr			get_screen_address
02:00003F86 10390004008C    	   821: 	move.b	TextRows,d0					; d0 = columns
02:00003F8C 12390004008D    	   822: 	move.b	TextCols,d1					; d1 = rows
02:00003F92 4880            	   823: 	ext.w		d0
02:00003F94 4881            	   824: 	ext.w		d1
02:00003F96 5341            	   825: 	subq		#1,d1								; last row = #rows-1
02:00003F98 C0C1            	   826: 	mulu		d1,d0								; d0 = index of last line
02:00003F9A E740            	   827: 	asl.w		#3,d0								; *8 bytes per char
02:00003F9C 41F00000        	   828: 	lea			(a0,d0.w),a0				; point a0 to last row
02:00003FA0 14390004008D    	   829: 	move.b	TextCols,d2					; number of text cells to clear
02:00003FA6 4882            	   830: 	ext.w		d2
02:00003FA8 5342            	   831: 	subi.w	#1,d2								; count must be one less than desired
02:00003FAA 6100FCF4        	   832: 	bsr			get_screen_color		; d0,d1 = screen color
02:00003FAE 323C0020        	   833: 	move.w	#32,d1							; set the character for display in low 16 bits
02:00003FB2 E159            	   834: 	rol.w		#8,d1								; reverse the byte order
02:00003FB4 4841            	   835: 	swap		d1
02:00003FB6 E159            	   836: 	rol.w		#8,d1
02:00003FB8 E158            	   837: 	rol.w		#8,d0
02:00003FBA 4840            	   838: 	swap		d0
02:00003FBC E158            	   839: 	rol.w		#8,d0
                            	   840: .0001:
02:00003FBE 20C0            	   841: 	move.l	d0,(a0)+
02:00003FC0 4E71            	   842: 	nop
02:00003FC2 4E71            	   843: 	nop
02:00003FC4 20C1            	   844: 	move.l	d1,(a0)+
02:00003FC6 4E71            	   845: 	nop
02:00003FC8 4E71            	   846: 	nop
02:00003FCA 51CAFFF2        	   847: 	dbra		d2,.0001
02:00003FCE 4CDF0107        	   848: 	movem.l	(a7)+,d0/d1/d2/a0
02:00003FD2 4E75            	   849: 	rts
                            	   850: 
                            	   851: ;------------------------------------------------------------------------------
                            	   852: ; Display a string on the screen.
                            	   853: ;------------------------------------------------------------------------------
                            	   854: 
                            	   855: DisplayString:
02:00003FD4 48E7C040        	   856: 	movem.l	d0/d1/a1,-(a7)
                            	   857: dspj1:
02:00003FD8 7200            	   858: 	clr.l		d1						; clear upper bits of d1
02:00003FDA 1219            	   859: 	move.b	(a1)+,d1			; move string char into d1
02:00003FDC 6706            	   860: 	beq.s		dsret					; is it end of string ?
02:00003FDE 6100FD96        	   861: 	bsr			DisplayChar		; display character
02:00003FE2 60F4            	   862: 	bra.s		dspj1					; go back for next character
                            	   863: dsret:
02:00003FE4 4CDF0203        	   864: 	movem.l	(a7)+,d0/d1/a1
02:00003FE8 4E75            	   865: 	rts
                            	   866: 
                            	   867: ;------------------------------------------------------------------------------
                            	   868: ; Display a string on the screen followed by carriage return / linefeed.
                            	   869: ;------------------------------------------------------------------------------
                            	   870: 
                            	   871: DisplayStringCRLF:
02:00003FEA 61E8            	   872: 	bsr		DisplayString
02:00003FEC 6000FD3E        	   873: 	bra		CRLF
                            	   874: 
                            	   875: ;------------------------------------------------------------------------------
                            	   876: ; Display a string on the screen limited to 255 chars max.
                            	   877: ;------------------------------------------------------------------------------
                            	   878: 
                            	   879: DisplayStringLimited:
02:00003FF0 48E7E040        	   880: 	movem.l	d0/d1/d2/a1,-(a7)
02:00003FF4 3401            	   881: 	move.w	d1,d2					; d2 = max count
02:00003FF6 024200FF        	   882: 	andi.w	#$00FF,d2			; limit to 255 chars
02:00003FFA 600A            	   883: 	bra.s		.0003					; enter loop at bottom
                            	   884: .0001:
02:00003FFC 7200            	   885: 	clr.l		d1						; clear upper bits of d1
02:00003FFE 1219            	   886: 	move.b	(a1)+,d1			; move string char into d1
02:00004000 6708            	   887: 	beq.s		.0002					; is it end of string ?
02:00004002 6100FD72        	   888: 	bsr			DisplayChar		; display character
                            	   889: .0003:
02:00004006 51CAFFF4        	   890: 	dbra		d2,.0001			; go back for next character
                            	   891: .0002:
02:0000400A 4CDF0207        	   892: 	movem.l	(a7)+,d0/d1/d2/a1
02:0000400E 4E75            	   893: 	rts
                            	   894: 
                            	   895: DisplayStringLimitedCRLF:
02:00004010 61DE            	   896: 	bsr		DisplayStringLimited
02:00004012 6000FD18        	   897: 	bra		CRLF
                            	   898: 	
                            	   899: ;------------------------------------------------------------------------------
                            	   900: ; Set cursor position to top left of screen.
                            	   901: ;
                            	   902: ; Parameters:
                            	   903: ;		<none>
                            	   904: ; Returns:
                            	   905: ;		<none>
                            	   906: ; Registers Affected:
                            	   907: ;		<none>
                            	   908: ;------------------------------------------------------------------------------
                            	   909: 
                            	   910: HomeCursor:
02:00004016 423900040000    	   911: 	clr.b		CursorRow
02:0000401C 423900040001    	   912: 	clr.b		CursorCol
02:00004022 427900040002    	   913: 	clr.w		TextPos
                            	   914: 	; fall through
                            	   915: 
                            	   916: ;------------------------------------------------------------------------------
                            	   917: ; SyncCursor:
                            	   918: ;
                            	   919: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   920: ; the core with the IO focus.
                            	   921: ;
                            	   922: ; Parameters:
                            	   923: ;		<none>
                            	   924: ; Returns:
                            	   925: ;		<none>
                            	   926: ; Registers Affected:
                            	   927: ;		<none>
                            	   928: ;------------------------------------------------------------------------------
                            	   929: 
                            	   930: SyncCursor:
02:00004028 48E7A000        	   931: 	movem.l	d0/d2,-(a7)
02:0000402C 6100FD10        	   932: 	bsr			UpdateTextPos
02:00004030 4E7A2FE0        	   933: 	movec		coreno,d2
02:00004034 B43900100000    	   934: 	cmp.b		IOFocus,d2
02:0000403A 6610            	   935: 	bne.s		.0001
02:0000403C 5542            	   936: 	subi.w	#2,d2						; factor in location of screen in controller
02:0000403E C4FC0800        	   937: 	mulu		#2048,d2				; 2048 cells per screen
02:00004042 D042            	   938: 	add.w		d2,d0
02:00004044 E158            	   939: 	rol.w		#8,d0						; swap byte order
02:00004046 33C0FD03FF24    	   940: 	move.w	d0,TEXTREG+$24
                            	   941: .0001:	
02:0000404C 4CDF0005        	   942: 	movem.l	(a7)+,d0/d2
02:00004050 4E75            	   943: 	rts
                            	   944: 
                            	   945: ;==============================================================================
                            	   946: ; TRAP #15 handler
                            	   947: ;
                            	   948: ; Parameters:
                            	   949: ;		d0.w = function number to perform
                            	   950: ;==============================================================================
                            	   951: 
                            	   952: TRAP15:
02:00004052 48E78080        	   953: 	movem.l	d0/a0,-(a7)
02:00004056 41FA0010        	   954: 	lea			T15DispatchTable,a0
02:0000405A E580            	   955: 	asl.l		#2,d0
02:0000405C 20700000        	   956: 	move.l	(a0,d0.w),a0
02:00004060 4E90            	   957: 	jsr			(a0)
02:00004062 4CDF0101        	   958: 	movem.l	(a7)+,d0/a0
02:00004066 4E73            	   959: 	rte
                            	   960: 
                            	   961: 		align	2
                            	   962: T15DispatchTable:
02:00004068 00004010        	   963: 	dc.l	DisplayStringLimitedCRLF
02:0000406C 00003FF0        	   964: 	dc.l	DisplayStringLimited
02:00004070 0000413E        	   965: 	dc.l	StubRout
02:00004074 0000413E        	   966: 	dc.l	StubRout
02:00004078 0000413E        	   967: 	dc.l	StubRout
02:0000407C 0000422C        	   968: 	dc.l	GetKey
02:00004080 00003D76        	   969: 	dc.l	DisplayChar
02:00004084 00004220        	   970: 	dc.l	CheckForKey
02:00004088 0000413E        	   971: 	dc.l	StubRout
02:0000408C 0000413E        	   972: 	dc.l	StubRout
                            	   973: 	; 10
02:00004090 0000413E        	   974: 	dc.l	StubRout
02:00004094 00004108        	   975: 	dc.l	Cursor1
02:00004098 00004218        	   976: 	dc.l	SetKeyboardEcho
02:0000409C 00003FEA        	   977: 	dc.l	DisplayStringCRLF
02:000040A0 00003FD4        	   978: 	dc.l	DisplayString
02:000040A4 0000413E        	   979: 	dc.l	StubRout
02:000040A8 0000413E        	   980: 	dc.l	StubRout
02:000040AC 0000413E        	   981: 	dc.l	StubRout
02:000040B0 0000413E        	   982: 	dc.l	StubRout
02:000040B4 0000413E        	   983: 	dc.l	StubRout
                            	   984: 	; 20
02:000040B8 0000413E        	   985: 	dc.l	StubRout
02:000040BC 0000413E        	   986: 	dc.l	StubRout
02:000040C0 0000413E        	   987: 	dc.l	StubRout
02:000040C4 0000413E        	   988: 	dc.l	StubRout
02:000040C8 0000413E        	   989: 	dc.l	StubRout
02:000040CC 0000413E        	   990: 	dc.l	StubRout
02:000040D0 0000413E        	   991: 	dc.l	StubRout
02:000040D4 0000413E        	   992: 	dc.l	StubRout
02:000040D8 0000413E        	   993: 	dc.l	StubRout
02:000040DC 0000413E        	   994: 	dc.l	StubRout
                            	   995: 	; 30
02:000040E0 0000413E        	   996: 	dc.l	StubRout
02:000040E4 0000413E        	   997: 	dc.l	StubRout
02:000040E8 00004152        	   998: 	dc.l	rotate_iofocus
02:000040EC 000051CE        	   999: 	dc.l	SerialPeekCharDirect
02:000040F0 000051EA        	  1000: 	dc.l	SerialPutChar
02:000040F4 000051B0        	  1001: 	dc.l	SerialPeekChar
02:000040F8 0000515A        	  1002: 	dc.l	SerialGetChar
02:000040FC 0000413E        	  1003: 	dc.l	StubRout
02:00004100 0000413E        	  1004: 	dc.l	StubRout
02:00004104 0000413E        	  1005: 	dc.l	StubRout
                            	  1006: 
                            	  1007: ;------------------------------------------------------------------------------
                            	  1008: ; Cursor positioning / Clear screen
                            	  1009: ; - out of range settings are ignored
                            	  1010: ;
                            	  1011: ; Parameters:
                            	  1012: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	  1013: ;	Returns:
                            	  1014: ;		none
                            	  1015: ;------------------------------------------------------------------------------
                            	  1016: 
                            	  1017: Cursor1:
02:00004108 2F01            	  1018: 	move.l		d1,-(a7)
02:0000410A 0C41FF00        	  1019: 	cmpi.w		#$FF00,d1
02:0000410E 6608            	  1020: 	bne.s			.0002
02:00004110 6100FBC2        	  1021: 	bsr				clear_screen
02:00004114 6000FF00        	  1022: 	bra				HomeCursor
                            	  1023: .0002:
02:00004118 B2390004008C    	  1024: 	cmp.b			TextRows,d1		; if cursor pos out of range, ignore setting
02:0000411E 6406            	  1025: 	bhs.s			.0003
02:00004120 13C100040000    	  1026: 	move.b		d1,CursorRow
                            	  1027: .0003:
02:00004126 E059            	  1028: 	ror.w			#8,d1
02:00004128 B2390004008D    	  1029: 	cmp.b			TextCols,d1
02:0000412E 6406            	  1030: 	bhs.s			.0001
02:00004130 13C100040001    	  1031: 	move.b		d1,CursorCol
                            	  1032: .0001:
02:00004136 6100FEF0        	  1033: 	bsr				SyncCursor		; update hardware cursor
02:0000413A 221F            	  1034: 	move.l		(a7)+,d1
02:0000413C 4E75            	  1035: 	rts
                            	  1036: 
                            	  1037: ;------------------------------------------------------------------------------
                            	  1038: ; Stub routine for unimplemented functionality.
                            	  1039: ;------------------------------------------------------------------------------
                            	  1040: 
                            	  1041: StubRout:
02:0000413E 4E75            	  1042: 	rts
                            	  1043: 
                            	  1044: ;------------------------------------------------------------------------------
                            	  1045: ; Select a specific IO focus.
                            	  1046: ;------------------------------------------------------------------------------
                            	  1047: 
                            	  1048: select_iofocus:
02:00004140 0C010002        	  1049: 	cmpi.b	#2,d1
02:00004144 650A            	  1050: 	blo.s		.0001
02:00004146 0C010009        	  1051: 	cmpi.b	#9,d1
02:0000414A 6204            	  1052: 	bhi.s		.0001
02:0000414C 2001            	  1053: 	move.l	d1,d0
02:0000414E 6014            	  1054: 	bra.s		select_focus1
                            	  1055: .0001:
02:00004150 4E75            	  1056: 	rts
                            	  1057: 
                            	  1058: ;------------------------------------------------------------------------------
                            	  1059: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	  1060: ;
                            	  1061: ; Modifies:
                            	  1062: ;		d0, IOFocus BIOS variable
                            	  1063: ;------------------------------------------------------------------------------
                            	  1064: 
                            	  1065: rotate_iofocus:
02:00004152 103900100000    	  1066: 	move.b	IOFocus,d0				; d0 = focus, we can trash d0
02:00004158 5200            	  1067: 	add.b		#1,d0							; increment the focus
02:0000415A B03C0009        	  1068: 	cmp.b		#9,d0							; limit to 2 to 9
02:0000415E 6304            	  1069: 	bls.s		.0001
02:00004160 103C0002        	  1070: 	move.b	#2,d0
                            	  1071: .0001:
                            	  1072: select_focus1:
02:00004164 13C000100000    	  1073: 	move.b	d0,IOFocus				; set IO focus
02:0000416A 5500            	  1074: 	subi.b	#2,d0							; screen is 0 to 7, focus is 2 to 9
02:0000416C 4880            	  1075: 	ext.w		d0								; make into long value
02:0000416E C0FC0800        	  1076: 	mulu		#2048,d0					; * 2048	cells per screen
02:00004172 E158            	  1077: 	rol.w		#8,d0							; swap byte order
02:00004174 33C0FD03FF28    	  1078: 	move.w	d0,TEXTREG+$28		; update screen address in text controller
02:0000417A 6000FEAC        	  1079: 	bra			SyncCursor				; set cursor position
                            	  1080: 
                            	  1081: ;==============================================================================
                            	  1082: ; PLIC - platform level interrupt controller
                            	  1083: ;
                            	  1084: ; Register layout:
                            	  1085: ;   bits 0 to 7  = cause code to issue (vector number)
                            	  1086: ;   bits 8 to 11 = irq level to issue
                            	  1087: ;   bit 16 = irq enable
                            	  1088: ;   bit 17 = edge sensitivity
                            	  1089: ;   bit 18 = 0=vpa, 1=inta
                            	  1090: ;		bit 24 to 29 target core
                            	  1091: ;
                            	  1092: ; Note byte order must be reversed for PLIC.
                            	  1093: ;==============================================================================
                            	  1094: 
                            	  1095: init_plic:
02:0000417E 41F9FD090000    	  1096: 	lea		PLIC,a0						; a0 points to PLIC
02:00004184 43E800F4        	  1097: 	lea		$80+4*29(a0),a1		; point to timer registers (29)
02:00004188 22BC00060302    	  1098: 	move.l	#$00060302,(a1)	; initialize, core=2,edge sensitive,enabled,irq6,vpa
02:0000418E 5889            	  1099: 	lea			4(a1),a1				; point to keyboard registers (30)
02:00004190 22BC3C060502    	  1100: 	move.l	#$3C060502,(a1)	; core=2,level sensitive,enabled,irq6,inta
02:00004196 5889            	  1101: 	lea			4(a1),a1				; point to nmi button register (31)
02:00004198 22BC00070302    	  1102: 	move.l	#$00070302,(a1)	; initialize, core=2,edge sensitive,enabled,irq7,vpa
02:0000419E 43E800C0        	  1103: 	lea		$80+4*16(a0),a1		; a1 points to ACIA register
02:000041A2 22BC3D030502    	  1104: 	move.l	#$3D030502,(a1)	; core=2,level sensitive,enabled,irq3,inta	
02:000041A8 4E75            	  1105: 	rts
                            	  1106: 
                            	  1107: ;==============================================================================
                            	  1108: ; Keyboard stuff
                            	  1109: ;
                            	  1110: ; KeyState2_
                            	  1111: ; 876543210
                            	  1112: ; ||||||||+ = shift
                            	  1113: ; |||||||+- = alt
                            	  1114: ; ||||||+-- = control
                            	  1115: ; |||||+--- = numlock
                            	  1116: ; ||||+---- = capslock
                            	  1117: ; |||+----- = scrolllock
                            	  1118: ; ||+------ =
                            	  1119: ; |+------- = 
                            	  1120: ; +-------- = extended
                            	  1121: ;
                            	  1122: ;==============================================================================
                            	  1123: 
                            	  1124: _KeybdInit:
02:000041AA 42390010000F    	  1125: 	clr.b	_KeyState1
02:000041B0 423900100010    	  1126: 	clr.b	_KeyState2
02:000041B6 4E75            	  1127: 	rts
                            	  1128: 
                            	  1129: _KeybdGetStatus:
02:000041B8 7200            	  1130: 	moveq		#0,d1
02:000041BA 1239FD0FFE01    	  1131: 	move.b	KEYBD+1,d1
02:000041C0 4E75            	  1132: 	rts
                            	  1133: 
                            	  1134: ; Get the scancode from the keyboard port
                            	  1135: 
                            	  1136: _KeybdGetScancode:
02:000041C2 7200            	  1137: 	moveq		#0,d1
02:000041C4 1239FD0FFE00    	  1138: 	move.b	KEYBD,d1				; get the scan code
02:000041CA 4239FD0FFE01    	  1139: 	move.b	#0,KEYBD+1			; clear receive register
02:000041D0 4E75            	  1140: 	rts
                            	  1141: 
                            	  1142: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	  1143: ; keyboard in order to wait for a response.
                            	  1144: ;
                            	  1145: KeybdRecvByte:
02:000041D2 2F03            	  1146: 	move.l	d3,-(a7)
02:000041D4 363C0064        	  1147: 	move.w	#100,d3		; wait up to 1s
                            	  1148: .0003:
02:000041D8 61DE            	  1149: 	bsr		_KeybdGetStatus	; wait for response from keyboard
02:000041DA 4A01            	  1150: 	tst.b	d1
02:000041DC 6B0E            	  1151: 	bmi		.0004		; is input buffer full ? yes, branch
02:000041DE 61000328        	  1152: 	bsr		Wait10ms		; wait a bit
02:000041E2 51CBFFF4        	  1153: 	dbra	d3,.0003	; go back and try again
02:000041E6 261F            	  1154: 	move.l	(a7)+,d3
02:000041E8 72FF            	  1155: 	moveq	#-1,d1			; return -1
02:000041EA 4E75            	  1156: 	rts
                            	  1157: .0004:
02:000041EC 61D4            	  1158: 	bsr		_KeybdGetScancode
02:000041EE 261F            	  1159: 	move.l	(a7)+,d3
02:000041F0 4E75            	  1160: 	rts
                            	  1161: 
                            	  1162: 
                            	  1163: ; Wait until the keyboard transmit is complete
                            	  1164: ; Returns .CF = 1 if successful, .CF=0 timeout
                            	  1165: ;
                            	  1166: KeybdWaitTx:
02:000041F2 48E73000        	  1167: 	movem.l	d2/d3,-(a7)
02:000041F6 7664            	  1168: 	moveq	#100,d3		; wait a max of 1s
                            	  1169: .0001:
02:000041F8 61BE            	  1170: 	bsr		_KeybdGetStatus
02:000041FA 08010006        	  1171: 	btst	#6,d1		; check for transmit complete bit
02:000041FE 6610            	  1172: 	bne	    .0002		; branch if bit set
02:00004200 61000306        	  1173: 	bsr		Wait10ms		; delay a little bit
02:00004204 51CBFFF2        	  1174: 	dbra	d3,.0001	; go back and try again
02:00004208 4CDF000C        	  1175: 	movem.l	(a7)+,d2/d3
02:0000420C 72FF            	  1176: 	moveq	#-1,d1		; return -1
02:0000420E 4E75            	  1177: 	rts
                            	  1178: .0002:
02:00004210 4CDF000C        	  1179: 	movem.l	(a7)+,d2/d3
02:00004214 7200            	  1180: 	moveq	#0,d1		; return 0
02:00004216 4E75            	  1181: 	rts
                            	  1182: 
                            	  1183: ;------------------------------------------------------------------------------
                            	  1184: ; d1.b 0=echo off, non-zero = echo on
                            	  1185: ;------------------------------------------------------------------------------
                            	  1186: 
                            	  1187: SetKeyboardEcho:
02:00004218 13C10004000C    	  1188: 	move.b	d1,KeybdEcho
02:0000421E 4E75            	  1189: 	rts
                            	  1190: 
                            	  1191: ;------------------------------------------------------------------------------
                            	  1192: ; Get key pending status into d1.b
                            	  1193: ;
                            	  1194: ; Returns:
                            	  1195: ;		d1.b = 1 if a key is available, otherwise zero.
                            	  1196: ;------------------------------------------------------------------------------
                            	  1197: 
                            	  1198: CheckForKey:
02:00004220 7200            	  1199: 	moveq.l	#0,d1					; clear high order bits
                            	  1200: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	  1201: ;	smi.b		d1						; set true/false
                            	  1202: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
02:00004222 4A3900100013    	  1203: 	tst.b		_KeybdCnt
02:00004228 56C1            	  1204: 	sne.b		d1
02:0000422A 4E75            	  1205: 	rts
                            	  1206: 
                            	  1207: ;------------------------------------------------------------------------------
                            	  1208: ; GetKey
                            	  1209: ; 	Get a character from the keyboard. 
                            	  1210: ;
                            	  1211: ; Modifies:
                            	  1212: ;		d1
                            	  1213: ; Returns:
                            	  1214: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	  1215: ;------------------------------------------------------------------------------
                            	  1216: 
                            	  1217: GetKey:
02:0000422C 2F00            	  1218: 	move.l	d0,-(a7)					; push d0
02:0000422E 123900100000    	  1219: 	move.b	IOFocus,d1				; Check if the core has the IO focus
02:00004234 4E7A0FE0        	  1220: 	movec.l	coreno,d0
02:00004238 B200            	  1221: 	cmp.b		d0,d1
02:0000423A 6622            	  1222: 	bne.s		.0004							; go return no key available, if not in focus
02:0000423C 6132            	  1223: 	bsr			KeybdGetCharNoWait	; get a character
02:0000423E 4A81            	  1224: 	tst.l		d1						; was a key available?
02:00004240 6B1C            	  1225: 	bmi.s		.0004
02:00004242 4A390004000C    	  1226: 	tst.b		KeybdEcho					; is keyboard echo on ?
02:00004248 6710            	  1227: 	beq.s		.0003							; no echo, just return the key
02:0000424A 0C01000D        	  1228: 	cmpi.b	#CR,d1						; convert CR keystroke into CRLF
02:0000424E 6606            	  1229: 	bne.s		.0005
02:00004250 6100FADA        	  1230: 	bsr			CRLF
02:00004254 6004            	  1231: 	bra.s		.0003
                            	  1232: .0005:
02:00004256 6100FB1E        	  1233: 	bsr			DisplayChar
                            	  1234: .0003:
02:0000425A 201F            	  1235: 	move.l	(a7)+,d0					; pop d0
02:0000425C 4E75            	  1236: 	rts												; return key
                            	  1237: ; Return -1 indicating no char was available
                            	  1238: .0004:
02:0000425E 201F            	  1239: 	move.l	(a7)+,d0					; pop d0
02:00004260 72FF            	  1240: 	moveq		#-1,d1						; return no key available
02:00004262 4E75            	  1241: 	rts
                            	  1242: 
                            	  1243: CheckForCtrlC:
02:00004264 610A            	  1244: 	bsr			KeybdGetCharNoWait
02:00004266 0C010003        	  1245: 	cmpi.b	#CTRLC,d1
02:0000426A 67000690        	  1246: 	beq			Monitor
02:0000426E 4E75            	  1247: 	rts
                            	  1248: 
                            	  1249: ;------------------------------------------------------------------------------
                            	  1250: ;------------------------------------------------------------------------------
                            	  1251: 
                            	  1252: KeybdGetCharNoWait:
02:00004270 42390004000D    	  1253: 	clr.b	KeybdWaitFlag
02:00004276 6008            	  1254: 	bra		KeybdGetChar
                            	  1255: 
                            	  1256: KeybdGetCharWait:
02:00004278 13FC00FF0004000D	  1257: 	move.b	#-1,KeybdWaitFlag
                            	  1258: 
                            	  1259: KeybdGetChar:
02:00004280 48E7B080        	  1260: 	movem.l	d0/d2/d3/a0,-(a7)
                            	  1261: .0003:
02:00004284 4E7A0FE0        	  1262: 	movec		coreno,d0
02:00004288 4840            	  1263: 	swap		d0
02:0000428A 7201            	  1264: 	moveq		#1,d1
                            	  1265: ;	bsr			LockSemaphore
02:0000428C 143900100013    	  1266: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
02:00004292 673E            	  1267: 	beq.s		.0015						;
02:00004294 143900100011    	  1268: 	move.b	_KeybdHead,d2		; d2 = buffer head
02:0000429A 4882            	  1269: 	ext.w		d2
02:0000429C 41F900100020    	  1270: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
02:000042A2 7200            	  1271: 	clr.l		d1
02:000042A4 12302000        	  1272: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
02:000042A8 5202            	  1273: 	addi.b	#1,d2						; increment keyboard head index
02:000042AA 0202001F        	  1274: 	andi.b	#31,d2					; and wrap around at buffer size
02:000042AE 13C200100011    	  1275: 	move.b	d2,_KeybdHead
02:000042B4 533900100013    	  1276: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
02:000042BA C342            	  1277: 	exg			d1,d2						; save scancode value in d2
02:000042BC 4E7A0FE0        	  1278: 	movec		coreno,d0
02:000042C0 4840            	  1279: 	swap		d0
02:000042C2 7201            	  1280: 	moveq		#1,d1
02:000042C4 6100BE62        	  1281: 	bsr			UnlockSemaphore
02:000042C8 C541            	  1282: 	exg			d2,d1						; restore scancode value
02:000042CA 6026            	  1283: 	bra			.0001						; go process scan code
                            	  1284: .0014:
02:000042CC 6100FEEA        	  1285: 	bsr		_KeybdGetStatus		; check keyboard status for key available
02:000042D0 6B1C            	  1286: 	bmi		.0006							; yes, go process
                            	  1287: .0015:
02:000042D2 4E7A0FE0        	  1288: 	movec		coreno,d0
02:000042D6 4840            	  1289: 	swap		d0
02:000042D8 7201            	  1290: 	moveq	#1,d1
02:000042DA 6100BE4C        	  1291: 	bsr		UnlockSemaphore
02:000042DE 4A390004000D    	  1292: 	tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
02:000042E4 6B9E            	  1293: 	bmi		.0003							; yes, branch back
02:000042E6 4CDF010D        	  1294: 	movem.l	(a7)+,d0/d2/d3/a0
02:000042EA 72FF            	  1295: 	moveq	#-1,d1						; flag no char available
02:000042EC 4E75            	  1296: 	rts
                            	  1297: .0006:
02:000042EE 6100FED2        	  1298: 	bsr		_KeybdGetScancode
                            	  1299: .0001:
02:000042F2 33FC0001FD0FFF00	  1300: 	move.w	#1,leds
02:000042FA B23C00F0        	  1301: 	cmp.b	#SC_KEYUP,d1
02:000042FE 670000C0        	  1302: 	beq		.doKeyup
02:00004302 B23C00E0        	  1303: 	cmp.b	#SC_EXTEND,d1
02:00004306 670000C4        	  1304: 	beq		.doExtend
02:0000430A B23C0014        	  1305: 	cmp.b	#SC_CTRL,d1
02:0000430E 670000C8        	  1306: 	beq		.doCtrl
02:00004312 B23C0012        	  1307: 	cmp.b	#SC_LSHIFT,d1
02:00004316 6700012A        	  1308: 	beq		.doShift
02:0000431A B23C0059        	  1309: 	cmp.b	#SC_RSHIFT,d1
02:0000431E 67000122        	  1310: 	beq		.doShift
02:00004322 B23C0077        	  1311: 	cmp.b	#SC_NUMLOCK,d1
02:00004326 67000142        	  1312: 	beq		.doNumLock
02:0000432A B23C0058        	  1313: 	cmp.b	#SC_CAPSLOCK,d1
02:0000432E 67000148        	  1314: 	beq		.doCapsLock
02:00004332 B23C007E        	  1315: 	cmp.b	#SC_SCROLLLOCK,d1
02:00004336 6700014E        	  1316: 	beq		.doScrollLock
02:0000433A B23C0011        	  1317: 	cmp.b   #SC_ALT,d1
02:0000433E 670000C0        	  1318: 	beq     .doAlt
02:00004342 14390010000F    	  1319: 	move.b	_KeyState1,d2			; check key up/down
02:00004348 42390010000F    	  1320: 	move.b	#0,_KeyState1			; clear keyup status
02:0000434E 4A02            	  1321: 	tst.b	d2
02:00004350 6600FF32        	  1322: 	bne	    .0003					; ignore key up
02:00004354 B23C000D        	  1323: 	cmp.b   #SC_TAB,d1
02:00004358 670000CE        	  1324: 	beq     .doTab
                            	  1325: .0013:
02:0000435C 143900100010    	  1326: 	move.b	_KeyState2,d2
02:00004362 6A1A            	  1327: 	bpl		.0010					; is it extended code ?
02:00004364 C43C007F        	  1328: 	and.b	#$7F,d2					; clear extended bit
02:00004368 13C200100010    	  1329: 	move.b	d2,_KeyState2
02:0000436E 42390010000F    	  1330: 	move.b	#0,_KeyState1			; clear keyup
02:00004374 41FA04B0        	  1331: 	lea		_keybdExtendedCodes,a0
02:00004378 12301000        	  1332: 	move.b	(a0,d1.w),d1
02:0000437C 6034            	  1333: 	bra		.0008
                            	  1334: .0010:
02:0000437E 08020002        	  1335: 	btst	#2,d2					; is it CTRL code ?
02:00004382 670E            	  1336: 	beq		.0009
02:00004384 C27C007F        	  1337: 	and.w	#$7F,d1
02:00004388 41FA041C        	  1338: 	lea		_keybdControlCodes,a0
02:0000438C 12301000        	  1339: 	move.b	(a0,d1.w),d1
02:00004390 6020            	  1340: 	bra		.0008
                            	  1341: .0009:
02:00004392 08020000        	  1342: 	btst	#0,d2					; is it shift down ?
02:00004396 670A            	  1343: 	beq  	.0007
02:00004398 41FA030C        	  1344: 	lea		_shiftedScanCodes,a0
02:0000439C 12301000        	  1345: 	move.b	(a0,d1.w),d1
02:000043A0 6010            	  1346: 	bra		.0008
                            	  1347: .0007:
02:000043A2 41FA0202        	  1348: 	lea		_unshiftedScanCodes,a0
02:000043A6 12301000        	  1349: 	move.b	(a0,d1.w),d1
02:000043AA 33FC0202FD0FFF00	  1350: 	move.w	#$0202,leds
                            	  1351: .0008:
02:000043B2 33FC0303FD0FFF00	  1352: 	move.w	#$0303,leds
02:000043BA 4CDF010D        	  1353: 	movem.l	(a7)+,d0/d2/d3/a0
02:000043BE 4E75            	  1354: 	rts
                            	  1355: .doKeyup:
02:000043C0 13FC00FF0010000F	  1356: 	move.b	#-1,_KeyState1
02:000043C8 6000FEBA        	  1357: 	bra		.0003
                            	  1358: .doExtend:
02:000043CC 0039008000100010	  1359: 	or.b	#$80,_KeyState2
02:000043D4 6000FEAE        	  1360: 	bra		.0003
                            	  1361: .doCtrl:
02:000043D8 12390010000F    	  1362: 	move.b	_KeyState1,d1
02:000043DE 42390010000F    	  1363: 	clr.b	_KeyState1
02:000043E4 4A01            	  1364: 	tst.b	d1
02:000043E6 6A0C            	  1365: 	bpl.s	.0004
02:000043E8 08B9000200100010	  1366: 	bclr	#2,_KeyState2
02:000043F0 6000FE92        	  1367: 	bra		.0003
                            	  1368: .0004:
02:000043F4 08F9000200100010	  1369: 	bset	#2,_KeyState2
02:000043FC 6000FE86        	  1370: 	bra		.0003
                            	  1371: .doAlt:
02:00004400 12390010000F    	  1372: 	move.b	_KeyState1,d1
02:00004406 42390010000F    	  1373: 	clr.b	_KeyState1
02:0000440C 4A01            	  1374: 	tst.b	d1
02:0000440E 6A0C            	  1375: 	bpl		.0011
02:00004410 08B9000100100010	  1376: 	bclr	#1,_KeyState2
02:00004418 6000FE6A        	  1377: 	bra		.0003
                            	  1378: .0011:
02:0000441C 08F9000100100010	  1379: 	bset	#1,_KeyState2
02:00004424 6000FE5E        	  1380: 	bra		.0003
                            	  1381: .doTab:
02:00004428 2F01            	  1382: 	move.l	d1,-(a7)
02:0000442A 123900100010    	  1383:   move.b  _KeyState2,d1
02:00004430 08010001        	  1384:   btst	#1,d1                 ; is ALT down ?
02:00004434 6706            	  1385:   beq     .0012
                            	  1386: ;    	inc     _iof_switch
02:00004436 221F            	  1387:   move.l	(a7)+,d1
02:00004438 6000FE4A        	  1388:   bra     .0003
                            	  1389: .0012:
02:0000443C 221F            	  1390:   move.l	(a7)+,d1
02:0000443E 6000FF1C        	  1391:   bra     .0013
                            	  1392: .doShift:
02:00004442 12390010000F    	  1393: 	move.b	_KeyState1,d1
02:00004448 42390010000F    	  1394: 	clr.b	_KeyState1
02:0000444E 4A01            	  1395: 	tst.b	d1
02:00004450 6A0C            	  1396: 	bpl.s	.0005
02:00004452 08B9000000100010	  1397: 	bclr	#0,_KeyState2
02:0000445A 6000FE28        	  1398: 	bra		.0003
                            	  1399: .0005:
02:0000445E 08F9000000100010	  1400: 	bset	#0,_KeyState2
02:00004466 6000FE1C        	  1401: 	bra		.0003
                            	  1402: .doNumLock:
02:0000446A 0879000400100010	  1403: 	bchg	#4,_KeyState2
02:00004472 6120            	  1404: 	bsr		KeybdSetLEDStatus
02:00004474 6000FE0E        	  1405: 	bra		.0003
                            	  1406: .doCapsLock:
02:00004478 0879000500100010	  1407: 	bchg	#5,_KeyState2
02:00004480 6112            	  1408: 	bsr		KeybdSetLEDStatus
02:00004482 6000FE00        	  1409: 	bra		.0003
                            	  1410: .doScrollLock:
02:00004486 0879000600100010	  1411: 	bchg	#6,_KeyState2
02:0000448E 6104            	  1412: 	bsr		KeybdSetLEDStatus
02:00004490 6000FDF2        	  1413: 	bra		.0003
                            	  1414: 
                            	  1415: KeybdSetLEDStatus:
02:00004494 48E73000        	  1416: 	movem.l	d2/d3,-(a7)
02:00004498 42390010000E    	  1417: 	clr.b	KeybdLEDs
02:0000449E 0839000400100010	  1418: 	btst	#4,_KeyState2
02:000044A6 6708            	  1419: 	beq.s	.0002
02:000044A8 13FC00020010000E	  1420: 	move.b	#2,KeybdLEDs
                            	  1421: .0002:
02:000044B0 0839000500100010	  1422: 	btst	#5,_KeyState2
02:000044B8 6708            	  1423: 	beq.s	.0003
02:000044BA 08F900020010000E	  1424: 	bset	#2,KeybdLEDs
                            	  1425: .0003:
02:000044C2 0839000600100010	  1426: 	btst	#6,_KeyState2
02:000044CA 6708            	  1427: 	beq.s	.0004
02:000044CC 08F900000010000E	  1428: 	bset	#0,KeybdLEDs
                            	  1429: .0004:
02:000044D4 123C00ED        	  1430: 	move.b	#$ED,d1
02:000044D8 6126            	  1431: 	bsr		KeybdSendByte
02:000044DA 6100FD16        	  1432: 	bsr		KeybdWaitTx
02:000044DE 6100FCF2        	  1433: 	bsr		KeybdRecvByte
02:000044E2 4A01            	  1434: 	tst.b	d1
02:000044E4 6B14            	  1435: 	bmi		.0001
02:000044E6 B27C00FA        	  1436: 	cmp		#$FA,d1
02:000044EA 12390010000E    	  1437: 	move.b	KeybdLEDs,d1
02:000044F0 610E            	  1438: 	bsr		KeybdSendByte
02:000044F2 6100FCFE        	  1439: 	bsr		KeybdWaitTx
02:000044F6 6100FCDA        	  1440: 	bsr		KeybdRecvByte
                            	  1441: .0001:
02:000044FA 4CDF000C        	  1442: 	movem.l	(a7)+,d2/d3
02:000044FE 4E75            	  1443: 	rts
                            	  1444: 
                            	  1445: KeybdSendByte:
02:00004500 13C1FD0FFE00    	  1446: 	move.b	d1,KEYBD
02:00004506 4E75            	  1447: 	rts
                            	  1448: 	
                            	  1449: Wait10ms:
02:00004508 2F03            	  1450: 	move.l	d3,-(a7)
02:0000450A 263C000003E8    	  1451: 	move.l	#1000,d3
                            	  1452: .0001:
02:00004510 51CBFFFE        	  1453: 	dbra	d3,.0001
02:00004514 261F            	  1454: 	move.l	(a7)+,d3
02:00004516 4E75            	  1455: 	rts
                            	  1456: 
                            	  1457: 
                            	  1458: ;--------------------------------------------------------------------------
                            	  1459: ; Keyboard IRQ routine.
                            	  1460: ;
                            	  1461: ; Returns:
                            	  1462: ; 	d1 = -1 if keyboard routine handled interrupt, otherwise positive.
                            	  1463: ;--------------------------------------------------------------------------
                            	  1464: 
                            	  1465: KeybdIRQ:
02:00004518 46FC2600        	  1466: 	move.w	#$2600,sr					; disable lower interrupts
02:0000451C 48E7C080        	  1467: 	movem.l	d0/d1/a0,-(a7)
02:00004520 6100FC96        	  1468: 	bsr			_KeybdGetStatus		; check if keyboard
02:00004524 4A01            	  1469: 	tst.b		d1
02:00004526 6A78            	  1470: 	bpl			.0001							; branch if not keyboard
02:00004528 4E7A0FE0        	  1471: 	movec		coreno,d0
02:0000452C 4840            	  1472: 	swap		d0
02:0000452E 7201            	  1473: 	moveq		#1,d1
                            	  1474: ;	bsr			LockSemaphore
02:00004530 0839000100100010	  1475: 	btst		#1,_KeyState2			; Is Alt down?
02:00004538 6728            	  1476: 	beq.s		.0003
02:0000453A 1039FD0FFE00    	  1477: 	move.b	KEYBD,d0					; get scan code
02:00004540 0C00000D        	  1478: 	cmpi.b	#SC_TAB,d0				; is Alt-Tab?
02:00004544 661C            	  1479: 	bne.s		.0003
02:00004546 6100FC7A        	  1480: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
02:0000454A 6100FC06        	  1481: 	bsr			rotate_iofocus
02:0000454E 423900100011    	  1482: 	clr.b		_KeybdHead				; clear keyboard buffer
02:00004554 423900100012    	  1483: 	clr.b		_KeybdTail
02:0000455A 423900100013    	  1484: 	clr.b		_KeybdCnt
02:00004560 6032            	  1485: 	bra			.0002							; do not store Alt-Tab
                            	  1486: .0003:
                            	  1487: 	; Insert keyboard scan code into raw keyboard buffer
02:00004562 6100FC5E        	  1488: 	bsr			_KeybdGetScancode	; grab the scan code (clears interrupt)
02:00004566 0C39002000100013	  1489: 	cmpi.b	#32,_KeybdCnt			; see if keyboard buffer full
02:0000456E 6424            	  1490: 	bhs.s		.0002
02:00004570 103900100012    	  1491: 	move.b	_KeybdTail,d0			; keyboard buffer not full, add to tail
02:00004576 4880            	  1492: 	ext.w		d0
02:00004578 41F900100020    	  1493: 	lea			_KeybdBuf,a0			; a0 = pointer to buffer
02:0000457E 11810000        	  1494: 	move.b	d1,(a0,d0.w)			; put scancode in buffer
02:00004582 5200            	  1495: 	addi.b	#1,d0							; increment tail index
02:00004584 0200001F        	  1496: 	andi.b	#31,d0						; wrap at buffer limit
02:00004588 13C000100012    	  1497: 	move.b	d0,_KeybdTail			; update tail index
02:0000458E 523900100013    	  1498: 	addi.b	#1,_KeybdCnt			; increment buffer count
                            	  1499: .0002:
02:00004594 4E7A0FE0        	  1500: 	movec		coreno,d0
02:00004598 4840            	  1501: 	swap		d0
02:0000459A 7201            	  1502: 	moveq		#1,d1
02:0000459C 6100BB8A        	  1503: 	bsr			UnlockSemaphore
                            	  1504: .0001:
02:000045A0 4CDF0103        	  1505: 	movem.l	(a7)+,d0/d1/a0		; return
02:000045A4 4E73            	  1506: 	rte
                            	  1507: 
                            	  1508: ;--------------------------------------------------------------------------
                            	  1509: ; PS2 scan codes to ascii conversion tables.
                            	  1510: ;--------------------------------------------------------------------------
                            	  1511: ;
                            	  1512: _unshiftedScanCodes:
02:000045A6 2E              	  1513: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
02:000045A7 A9
02:000045A8 2E
02:000045A9 A5
02:000045AA A3
02:000045AB A1
02:000045AC A2
02:000045AD AC
02:000045AE 2E              	  1514: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
02:000045AF AA
02:000045B0 A8
02:000045B1 A6
02:000045B2 A4
02:000045B3 09
02:000045B4 60
02:000045B5 2E
02:000045B6 2E              	  1515: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
02:000045B7 2E
02:000045B8 2E
02:000045B9 2E
02:000045BA 2E
02:000045BB 71
02:000045BC 31
02:000045BD 2E
02:000045BE 2E              	  1516: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
02:000045BF 2E
02:000045C0 7A
02:000045C1 73
02:000045C2 61
02:000045C3 77
02:000045C4 32
02:000045C5 2E
02:000045C6 2E              	  1517: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
02:000045C7 63
02:000045C8 78
02:000045C9 64
02:000045CA 65
02:000045CB 34
02:000045CC 33
02:000045CD 2E
02:000045CE 2E              	  1518: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
02:000045CF 20
02:000045D0 76
02:000045D1 66
02:000045D2 74
02:000045D3 72
02:000045D4 35
02:000045D5 2E
02:000045D6 2E              	  1519: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
02:000045D7 6E
02:000045D8 62
02:000045D9 68
02:000045DA 67
02:000045DB 79
02:000045DC 36
02:000045DD 2E
02:000045DE 2E              	  1520: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
02:000045DF 2E
02:000045E0 6D
02:000045E1 6A
02:000045E2 75
02:000045E3 37
02:000045E4 38
02:000045E5 2E
02:000045E6 2E              	  1521: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
02:000045E7 2C
02:000045E8 6B
02:000045E9 69
02:000045EA 6F
02:000045EB 30
02:000045EC 39
02:000045ED 2E
02:000045EE 2E              	  1522: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
02:000045EF 2E
02:000045F0 2F
02:000045F1 6C
02:000045F2 3B
02:000045F3 70
02:000045F4 2D
02:000045F5 2E
02:000045F6 2E              	  1523: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
02:000045F7 2E
02:000045F8 27
02:000045F9 2E
02:000045FA 5B
02:000045FB 3D
02:000045FC 2E
02:000045FD 2E
02:000045FE AD              	  1524: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
02:000045FF 2E
02:00004600 0D
02:00004601 5D
02:00004602 2E
02:00004603 5C
02:00004604 2E
02:00004605 2E
02:00004606 2E              	  1525: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
02:00004607 2E
02:00004608 2E
02:00004609 2E
02:0000460A 2E
02:0000460B 2E
02:0000460C 08
02:0000460D 2E
02:0000460E 2E              	  1526: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
02:0000460F 95
02:00004610 2E
02:00004611 93
02:00004612 94
02:00004613 2E
02:00004614 2E
02:00004615 2E
02:00004616 98              	  1527: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
02:00004617 7F
02:00004618 92
02:00004619 2E
02:0000461A 91
02:0000461B 90
02:0000461C 1B
02:0000461D AF
02:0000461E AB              	  1528: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
02:0000461F 2E
02:00004620 97
02:00004621 2E
02:00004622 2E
02:00004623 96
02:00004624 AE
02:00004625 2E
                            	  1529: 
02:00004626 2E              	  1530: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
02:00004627 2E
02:00004628 2E
02:00004629 A7
02:0000462A 2E
02:0000462B 2E
02:0000462C 2E
02:0000462D 2E
02:0000462E 2E              	  1531: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000462F 2E
02:00004630 2E
02:00004631 2E
02:00004632 2E
02:00004633 2E
02:00004634 2E
02:00004635 2E
02:00004636 2E              	  1532: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004637 2E
02:00004638 2E
02:00004639 2E
02:0000463A 2E
02:0000463B 2E
02:0000463C 2E
02:0000463D 2E
02:0000463E 2E              	  1533: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000463F 2E
02:00004640 2E
02:00004641 2E
02:00004642 2E
02:00004643 2E
02:00004644 2E
02:00004645 2E
02:00004646 2E              	  1534: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004647 2E
02:00004648 2E
02:00004649 2E
02:0000464A 2E
02:0000464B 2E
02:0000464C 2E
02:0000464D 2E
02:0000464E 2E              	  1535: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000464F 2E
02:00004650 2E
02:00004651 2E
02:00004652 2E
02:00004653 2E
02:00004654 2E
02:00004655 2E
02:00004656 2E              	  1536: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004657 2E
02:00004658 2E
02:00004659 2E
02:0000465A 2E
02:0000465B 2E
02:0000465C 2E
02:0000465D 2E
02:0000465E 2E              	  1537: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000465F 2E
02:00004660 2E
02:00004661 2E
02:00004662 2E
02:00004663 2E
02:00004664 2E
02:00004665 2E
02:00004666 2E              	  1538: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004667 2E
02:00004668 2E
02:00004669 2E
02:0000466A 2E
02:0000466B 2E
02:0000466C 2E
02:0000466D 2E
02:0000466E 2E              	  1539: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000466F 2E
02:00004670 2E
02:00004671 2E
02:00004672 2E
02:00004673 2E
02:00004674 2E
02:00004675 2E
02:00004676 2E              	  1540: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004677 2E
02:00004678 2E
02:00004679 2E
02:0000467A 2E
02:0000467B 2E
02:0000467C 2E
02:0000467D 2E
02:0000467E 2E              	  1541: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000467F 2E
02:00004680 2E
02:00004681 2E
02:00004682 2E
02:00004683 2E
02:00004684 2E
02:00004685 2E
02:00004686 2E              	  1542: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004687 2E
02:00004688 2E
02:00004689 2E
02:0000468A 2E
02:0000468B 2E
02:0000468C 2E
02:0000468D 2E
02:0000468E 2E              	  1543: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000468F 2E
02:00004690 2E
02:00004691 2E
02:00004692 2E
02:00004693 2E
02:00004694 2E
02:00004695 2E
02:00004696 2E              	  1544: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004697 2E
02:00004698 2E
02:00004699 2E
02:0000469A 2E
02:0000469B 2E
02:0000469C 2E
02:0000469D 2E
02:0000469E 2E              	  1545: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
02:0000469F 2E
02:000046A0 FA
02:000046A1 2E
02:000046A2 2E
02:000046A3 2E
02:000046A4 2E
02:000046A5 2E
                            	  1546: 
                            	  1547: _shiftedScanCodes:
02:000046A6 2E              	  1548: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000046A7 2E
02:000046A8 2E
02:000046A9 2E
02:000046AA 2E
02:000046AB 2E
02:000046AC 2E
02:000046AD 2E
02:000046AE 2E              	  1549: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
02:000046AF 2E
02:000046B0 2E
02:000046B1 2E
02:000046B2 2E
02:000046B3 09
02:000046B4 7E
02:000046B5 2E
02:000046B6 2E              	  1550: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
02:000046B7 2E
02:000046B8 2E
02:000046B9 2E
02:000046BA 2E
02:000046BB 51
02:000046BC 21
02:000046BD 2E
02:000046BE 2E              	  1551: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
02:000046BF 2E
02:000046C0 5A
02:000046C1 53
02:000046C2 41
02:000046C3 57
02:000046C4 40
02:000046C5 2E
02:000046C6 2E              	  1552: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
02:000046C7 43
02:000046C8 58
02:000046C9 44
02:000046CA 45
02:000046CB 24
02:000046CC 23
02:000046CD 2E
02:000046CE 2E              	  1553: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
02:000046CF 20
02:000046D0 56
02:000046D1 46
02:000046D2 54
02:000046D3 52
02:000046D4 25
02:000046D5 2E
02:000046D6 2E              	  1554: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
02:000046D7 4E
02:000046D8 42
02:000046D9 48
02:000046DA 47
02:000046DB 59
02:000046DC 5E
02:000046DD 2E
02:000046DE 2E              	  1555: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
02:000046DF 2E
02:000046E0 4D
02:000046E1 4A
02:000046E2 55
02:000046E3 26
02:000046E4 2A
02:000046E5 2E
02:000046E6 2E              	  1556: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
02:000046E7 3C
02:000046E8 4B
02:000046E9 49
02:000046EA 4F
02:000046EB 29
02:000046EC 28
02:000046ED 2E
02:000046EE 2E              	  1557: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
02:000046EF 3E
02:000046F0 3F
02:000046F1 4C
02:000046F2 3A
02:000046F3 50
02:000046F4 5F
02:000046F5 2E
02:000046F6 2E              	  1558: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
02:000046F7 2E
02:000046F8 22
02:000046F9 2E
02:000046FA 7B
02:000046FB 2B
02:000046FC 2E
02:000046FD 2E
02:000046FE 2E              	  1559: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
02:000046FF 2E
02:00004700 0D
02:00004701 7D
02:00004702 2E
02:00004703 7C
02:00004704 2E
02:00004705 2E
02:00004706 2E              	  1560: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
02:00004707 2E
02:00004708 2E
02:00004709 2E
02:0000470A 2E
02:0000470B 2E
02:0000470C 08
02:0000470D 2E
02:0000470E 2E              	  1561: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000470F 2E
02:00004710 2E
02:00004711 2E
02:00004712 2E
02:00004713 2E
02:00004714 2E
02:00004715 2E
02:00004716 2E              	  1562: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
02:00004717 7F
02:00004718 2E
02:00004719 2E
02:0000471A 2E
02:0000471B 2E
02:0000471C 1B
02:0000471D 2E
02:0000471E 2E              	  1563: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000471F 2E
02:00004720 2E
02:00004721 2E
02:00004722 2E
02:00004723 2E
02:00004724 2E
02:00004725 2E
                            	  1564: 
02:00004726 2E              	  1565: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004727 2E
02:00004728 2E
02:00004729 2E
02:0000472A 2E
02:0000472B 2E
02:0000472C 2E
02:0000472D 2E
02:0000472E 2E              	  1566: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000472F 2E
02:00004730 2E
02:00004731 2E
02:00004732 2E
02:00004733 2E
02:00004734 2E
02:00004735 2E
02:00004736 2E              	  1567: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004737 2E
02:00004738 2E
02:00004739 2E
02:0000473A 2E
02:0000473B 2E
02:0000473C 2E
02:0000473D 2E
02:0000473E 2E              	  1568: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000473F 2E
02:00004740 2E
02:00004741 2E
02:00004742 2E
02:00004743 2E
02:00004744 2E
02:00004745 2E
02:00004746 2E              	  1569: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004747 2E
02:00004748 2E
02:00004749 2E
02:0000474A 2E
02:0000474B 2E
02:0000474C 2E
02:0000474D 2E
02:0000474E 2E              	  1570: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000474F 2E
02:00004750 2E
02:00004751 2E
02:00004752 2E
02:00004753 2E
02:00004754 2E
02:00004755 2E
02:00004756 2E              	  1571: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004757 2E
02:00004758 2E
02:00004759 2E
02:0000475A 2E
02:0000475B 2E
02:0000475C 2E
02:0000475D 2E
02:0000475E 2E              	  1572: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000475F 2E
02:00004760 2E
02:00004761 2E
02:00004762 2E
02:00004763 2E
02:00004764 2E
02:00004765 2E
02:00004766 2E              	  1573: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004767 2E
02:00004768 2E
02:00004769 2E
02:0000476A 2E
02:0000476B 2E
02:0000476C 2E
02:0000476D 2E
02:0000476E 2E              	  1574: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000476F 2E
02:00004770 2E
02:00004771 2E
02:00004772 2E
02:00004773 2E
02:00004774 2E
02:00004775 2E
02:00004776 2E              	  1575: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004777 2E
02:00004778 2E
02:00004779 2E
02:0000477A 2E
02:0000477B 2E
02:0000477C 2E
02:0000477D 2E
02:0000477E 2E              	  1576: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000477F 2E
02:00004780 2E
02:00004781 2E
02:00004782 2E
02:00004783 2E
02:00004784 2E
02:00004785 2E
02:00004786 2E              	  1577: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004787 2E
02:00004788 2E
02:00004789 2E
02:0000478A 2E
02:0000478B 2E
02:0000478C 2E
02:0000478D 2E
02:0000478E 2E              	  1578: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000478F 2E
02:00004790 2E
02:00004791 2E
02:00004792 2E
02:00004793 2E
02:00004794 2E
02:00004795 2E
02:00004796 2E              	  1579: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004797 2E
02:00004798 2E
02:00004799 2E
02:0000479A 2E
02:0000479B 2E
02:0000479C 2E
02:0000479D 2E
02:0000479E 2E              	  1580: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000479F 2E
02:000047A0 2E
02:000047A1 2E
02:000047A2 2E
02:000047A3 2E
02:000047A4 2E
02:000047A5 2E
                            	  1581: 
                            	  1582: ; control
                            	  1583: _keybdControlCodes:
02:000047A6 2E              	  1584: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:000047A7 2E
02:000047A8 2E
02:000047A9 2E
02:000047AA 2E
02:000047AB 2E
02:000047AC 2E
02:000047AD 2E
02:000047AE 2E              	  1585: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
02:000047AF 2E
02:000047B0 2E
02:000047B1 2E
02:000047B2 2E
02:000047B3 09
02:000047B4 7E
02:000047B5 2E
02:000047B6 2E              	  1586: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
02:000047B7 2E
02:000047B8 2E
02:000047B9 2E
02:000047BA 2E
02:000047BB 11
02:000047BC 21
02:000047BD 2E
02:000047BE 2E              	  1587: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
02:000047BF 2E
02:000047C0 1A
02:000047C1 13
02:000047C2 01
02:000047C3 17
02:000047C4 40
02:000047C5 2E
02:000047C6 2E              	  1588: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
02:000047C7 03
02:000047C8 18
02:000047C9 04
02:000047CA 05
02:000047CB 24
02:000047CC 23
02:000047CD 2E
02:000047CE 2E              	  1589: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
02:000047CF 20
02:000047D0 16
02:000047D1 06
02:000047D2 14
02:000047D3 12
02:000047D4 25
02:000047D5 2E
02:000047D6 2E              	  1590: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
02:000047D7 0E
02:000047D8 02
02:000047D9 08
02:000047DA 07
02:000047DB 19
02:000047DC 5E
02:000047DD 2E
02:000047DE 2E              	  1591: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
02:000047DF 2E
02:000047E0 0D
02:000047E1 0A
02:000047E2 15
02:000047E3 26
02:000047E4 2A
02:000047E5 2E
02:000047E6 2E              	  1592: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
02:000047E7 3C
02:000047E8 0B
02:000047E9 09
02:000047EA 0F
02:000047EB 29
02:000047EC 28
02:000047ED 2E
02:000047EE 2E              	  1593: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
02:000047EF 3E
02:000047F0 3F
02:000047F1 0C
02:000047F2 3A
02:000047F3 10
02:000047F4 5F
02:000047F5 2E
02:000047F6 2E              	  1594: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
02:000047F7 2E
02:000047F8 22
02:000047F9 2E
02:000047FA 7B
02:000047FB 2B
02:000047FC 2E
02:000047FD 2E
02:000047FE 2E              	  1595: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
02:000047FF 2E
02:00004800 0D
02:00004801 7D
02:00004802 2E
02:00004803 7C
02:00004804 2E
02:00004805 2E
02:00004806 2E              	  1596: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
02:00004807 2E
02:00004808 2E
02:00004809 2E
02:0000480A 2E
02:0000480B 2E
02:0000480C 08
02:0000480D 2E
02:0000480E 2E              	  1597: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000480F 2E
02:00004810 2E
02:00004811 2E
02:00004812 2E
02:00004813 2E
02:00004814 2E
02:00004815 2E
02:00004816 2E              	  1598: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
02:00004817 7F
02:00004818 2E
02:00004819 2E
02:0000481A 2E
02:0000481B 2E
02:0000481C 1B
02:0000481D 2E
02:0000481E 2E              	  1599: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000481F 2E
02:00004820 2E
02:00004821 2E
02:00004822 2E
02:00004823 2E
02:00004824 2E
02:00004825 2E
                            	  1600: 
                            	  1601: _keybdExtendedCodes:
02:00004826 2E              	  1602: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
02:00004827 2E
02:00004828 2E
02:00004829 2E
02:0000482A A3
02:0000482B A1
02:0000482C A2
02:0000482D 2E
02:0000482E 2E              	  1603: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000482F 2E
02:00004830 2E
02:00004831 2E
02:00004832 2E
02:00004833 2E
02:00004834 2E
02:00004835 2E
02:00004836 2E              	  1604: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004837 2E
02:00004838 2E
02:00004839 2E
02:0000483A 2E
02:0000483B 2E
02:0000483C 2E
02:0000483D 2E
02:0000483E 2E              	  1605: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000483F 2E
02:00004840 2E
02:00004841 2E
02:00004842 2E
02:00004843 2E
02:00004844 2E
02:00004845 2E
02:00004846 2E              	  1606: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004847 2E
02:00004848 2E
02:00004849 2E
02:0000484A 2E
02:0000484B 2E
02:0000484C 2E
02:0000484D 2E
02:0000484E 2E              	  1607: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000484F 2E
02:00004850 2E
02:00004851 2E
02:00004852 2E
02:00004853 2E
02:00004854 2E
02:00004855 2E
02:00004856 2E              	  1608: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004857 2E
02:00004858 2E
02:00004859 2E
02:0000485A 2E
02:0000485B 2E
02:0000485C 2E
02:0000485D 2E
02:0000485E 2E              	  1609: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000485F 2E
02:00004860 2E
02:00004861 2E
02:00004862 2E
02:00004863 2E
02:00004864 2E
02:00004865 2E
02:00004866 2E              	  1610: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004867 2E
02:00004868 2E
02:00004869 2E
02:0000486A 2E
02:0000486B 2E
02:0000486C 2E
02:0000486D 2E
02:0000486E 2E              	  1611: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000486F 2E
02:00004870 2E
02:00004871 2E
02:00004872 2E
02:00004873 2E
02:00004874 2E
02:00004875 2E
02:00004876 2E              	  1612: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004877 2E
02:00004878 2E
02:00004879 2E
02:0000487A 2E
02:0000487B 2E
02:0000487C 2E
02:0000487D 2E
02:0000487E 2E              	  1613: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:0000487F 2E
02:00004880 2E
02:00004881 2E
02:00004882 2E
02:00004883 2E
02:00004884 2E
02:00004885 2E
02:00004886 2E              	  1614: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
02:00004887 2E
02:00004888 2E
02:00004889 2E
02:0000488A 2E
02:0000488B 2E
02:0000488C 2E
02:0000488D 2E
02:0000488E 2E              	  1615: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
02:0000488F 95
02:00004890 2E
02:00004891 93
02:00004892 94
02:00004893 2E
02:00004894 2E
02:00004895 2E
02:00004896 98              	  1616: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
02:00004897 99
02:00004898 92
02:00004899 2E
02:0000489A 91
02:0000489B 90
02:0000489C 2E
02:0000489D 2E
02:0000489E 2E              	  1617: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
02:0000489F 2E
02:000048A0 97
02:000048A1 2E
02:000048A2 2E
02:000048A3 96
02:000048A4 2E
02:000048A5 2E
                            	  1618: 
                            	  1619: ;==============================================================================
                            	  1620: ;==============================================================================
                            	  1621: ; Monitor
                            	  1622: ;==============================================================================
                            	  1623: ;==============================================================================
                            	  1624: 
                            	  1625: cmdString:
02:000048A6 BF              	  1626: 	dc.b	'?'+$80						; ? display help
02:000048A7 CC              	  1627: 	dc.b	'L'+$80						; L load S19 file
02:000048A8 46              	  1628: 	dc.b	'F','B'+$80				; FB fill with byte
02:000048A9 C2
02:000048AA 46              	  1629: 	dc.b	'F','W'+$80				; FW fill with wyde
02:000048AB D7
02:000048AC 46              	  1630: 	dc.b	'F','L'+$80				; FL fill with long wyde
02:000048AD CC
02:000048AE 42              	  1631: 	dc.b	'B','A'+$80				; BA start Tiny Basic
02:000048AF C1
02:000048B0 42              	  1632: 	dc.b	'B','R'+$80				; BR breakpoint
02:000048B1 D2
02:000048B2 44              	  1633: 	dc.b	'D','R'+$80				; DR dump registers
02:000048B3 D2
02:000048B4 C4              	  1634: 	dc.b	'D'+$80						; D dump memory
02:000048B5 CA              	  1635: 	dc.b	'J'+$80						; J jump to code
02:000048B6 BA              	  1636: 	dc.b	':'+$80						; : edit memory
02:000048B7 434C            	  1637: 	dc.b	"CL",'S'+$80			; CLS clear screen
02:000048B9 D3
02:000048BA 434F52          	  1638: 	dc.b	"COR",'E'+$80			; CORE <n> switch to core
02:000048BD C5
02:000048BE 54              	  1639: 	dc.b	'T','R'+$80				; TR test serial receive
02:000048BF D2
02:000048C0 D4              	  1640: 	dc.b	'T'+$80						; T test CPU
02:000048C1 D3              	  1641: 	dc.b	'S'+$80						; S send serial
02:000048C2 D2              	  1642: 	dc.b	'R'+$80						; R receive serial
                            	  1643: 
                            	  1644: 	align	2
                            	  1645: cmdTable:
02:000048C4 49FC            	  1646: 	dc.w	cmdHelp
02:000048C6 4F2E            	  1647: 	dc.w	cmdLoadS19
02:000048C8 4C44            	  1648: 	dc.w	cmdFillB
02:000048CA 4C68            	  1649: 	dc.w	cmdFillW
02:000048CC 4C8C            	  1650: 	dc.w	cmdFillL
02:000048CE 49B6            	  1651: 	dc.w	cmdTinyBasic
02:000048D0 4992            	  1652: 	dc.w	cmdBreakpoint
02:000048D2 4DBE            	  1653: 	dc.w	cmdDumpRegs
02:000048D4 4D30            	  1654: 	dc.w	cmdDumpMemory
02:000048D6 4D22            	  1655: 	dc.w	cmdJump
02:000048D8 4CC2            	  1656: 	dc.w	cmdEditMemory
02:000048DA 49CC            	  1657: 	dc.w	cmdClearScreen
02:000048DC 49D8            	  1658: 	dc.w	cmdCore
02:000048DE 4E68            	  1659: 	dc.w	cmdTestSerialReceive
02:000048E0 49BC            	  1660: 	dc.w	cmdTestCPU
02:000048E2 4BE0            	  1661: 	dc.w	cmdSendSerial
02:000048E4 4C10            	  1662: 	dc.w	cmdReceiveSerial	
02:000048E6 48FC            	  1663: 	dc.w	cmdMonitor
                            	  1664: 
                            	  1665: ; Get a word from screen memory and swap byte order
                            	  1666: 
                            	  1667: FromScreen:
02:000048E8 2210            	  1668: 	move.l	(a0),d1
02:000048EA 61000834        	  1669: 	bsr			rbo
02:000048EE 5088            	  1670: 	lea			8(a0),a0	; increment screen pointer
02:000048F0 4E75            	  1671: 	rts
                            	  1672: 
                            	  1673: StartMon:
02:000048F2 427900040202    	  1674: 	clr.w		NumSetBreakpoints
02:000048F8 61000B4E        	  1675: 	bsr			ClearBreakpointList
                            	  1676: cmdMonitor:
                            	  1677: Monitor:
                            	  1678: 	; Reset the stack pointer on each entry into the monitor
02:000048FC 2E7C00040FFC    	  1679: 	move.l	#$40FFC,sp	; reset core's stack
02:00004902 46FC2200        	  1680: 	move.w	#$2200,sr		; enable level 2 and higher interrupts
02:00004906 4E7A0FE0        	  1681: 	movec		coreno,d0
02:0000490A 4840            	  1682: 	swap		d0
02:0000490C 7201            	  1683: 	moveq		#1,d1
02:0000490E 6100B818        	  1684: 	bsr			UnlockSemaphore
02:00004912 42390004000C    	  1685: 	clr.b		KeybdEcho		; turn off keyboard echo
                            	  1686: PromptLn:
02:00004918 6100F412        	  1687: 	bsr			CRLF
02:0000491C 123C0024        	  1688: 	move.b	#'$',d1
02:00004920 6100F454        	  1689: 	bsr			DisplayChar
                            	  1690: 
                            	  1691: ; Get characters until a CR is keyed
                            	  1692: ;
                            	  1693: Prompt3:
02:00004924 6100F906        	  1694: 	bsr			GetKey
02:00004928 0C0100FF        	  1695: 	cmpi.b	#-1,d1
02:0000492C 67F6            	  1696: 	beq.s		Prompt3
02:0000492E 0C01000D        	  1697: 	cmpi.b	#CR,d1
02:00004932 6706            	  1698: 	beq.s		Prompt1
02:00004934 6100F440        	  1699: 	bsr			DisplayChar
02:00004938 60EA            	  1700: 	bra.s		Prompt3
                            	  1701: 
                            	  1702: ; Process the screen line that the CR was keyed on
                            	  1703: 
                            	  1704: Prompt1:
02:0000493A 423900040001    	  1705: 	clr.b		CursorCol			; go back to the start of the line
02:00004940 6100F426        	  1706: 	bsr			CalcScreenLoc	; a0 = screen memory location
                            	  1707: .0001:
02:00004944 61A2            	  1708: 	bsr			FromScreen		; grab character off screen
02:00004946 0C010024        	  1709: 	cmpi.b	#'$',d1				; skip over '$' prompt character
02:0000494A 67F8            	  1710: 	beq.s		.0001
                            	  1711: 	
                            	  1712: ; Dispatch based on command string
                            	  1713: 
                            	  1714: cmdDispatch:
02:0000494C 45FAFF58        	  1715: 	lea			cmdString,a2
02:00004950 7800            	  1716: 	clr.l		d4						; command counter
02:00004952 5188            	  1717: 	lea			-8(a0),a0			; backup a character
02:00004954 2648            	  1718: 	move.l	a0,a3					; a3 = start of command on screen
                            	  1719: .checkNextCmd:
02:00004956 6190            	  1720: 	bsr			FromScreen		; d1 = char from input screen
02:00004958 1A1A            	  1721: 	move.b	(a2)+,d5
02:0000495A BB01            	  1722: 	eor.b		d5,d1					; does it match with command string?
02:0000495C 67F8            	  1723: 	beq.s		.checkNextCmd	; If it does, keep matching for longest match
02:0000495E 0C010080        	  1724: 	cmpi.b	#$80,d1				; didn't match, was it the end of the command?
02:00004962 6724            	  1725: 	beq.s		.foundCmd
02:00004964 4A2AFFFF        	  1726: 	tst.b		-1(a2)				; was end of table hit?
02:00004968 6712            	  1727: 	beq.s		.endOfTable
02:0000496A 5444            	  1728: 	addi.w	#2,d4					; increment command counter
02:0000496C 204B            	  1729: 	move.l	a3,a0					; reset input pointer
02:0000496E 4A2AFFFF        	  1730: 	tst.b		-1(a2)				; were we at the end of the command?
02:00004972 6BE2            	  1731: 	bmi.s		.checkNextCmd	; if were at end continue, otherwise scan for enf of cmd
                            	  1732: .scanToEndOfCmd
02:00004974 4A1A            	  1733: 	tst.b		(a2)+					; scan to end of command
02:00004976 6704            	  1734: 	beq.s		.endOfTable
02:00004978 6AFA            	  1735: 	bpl.s		.scanToEndOfCmd
02:0000497A 6BDA            	  1736: 	bmi.s		.checkNextCmd
                            	  1737: .endOfTable
02:0000497C 43FA019C        	  1738: 	lea			msgUnknownCmd,a1
02:00004980 6100F668        	  1739: 	bsr			DisplayStringCRLF
02:00004984 6000FF76        	  1740: 	bra			Monitor
                            	  1741: .foundCmd:
02:00004988 43FAFF3A        	  1742: 	lea			cmdTable,a1		; a1 = pointer to command address table
02:0000498C 32714000        	  1743: 	move.w	(a1,d4.w),a1	; fetch command routine address from table
02:00004990 4ED1            	  1744: 	jmp			(a1)					; go execute command
                            	  1745: 
                            	  1746: cmdBreakpoint:
02:00004992 6100031C        	  1747: 	bsr			ignBlanks
02:00004996 6100FF50        	  1748: 	bsr			FromScreen
02:0000499A 0C01002B        	  1749: 	cmpi.b	#'+',d1
02:0000499E 670009B6        	  1750: 	beq			ArmBreakpoint
02:000049A2 0C01002D        	  1751: 	cmpi.b	#'-',d1
02:000049A6 67000A2C        	  1752: 	beq			DisarmBreakpoint
02:000049AA 0C01004C        	  1753: 	cmpi.b	#'L',d1
02:000049AE 67000A78        	  1754: 	beq			ListBreakpoints
02:000049B2 6000FF48        	  1755: 	bra			Monitor
                            	  1756: 
                            	  1757: cmdTinyBasic:
02:000049B6 4EF900010000    	  1758: 	jmp			$10000
                            	  1759: 
                            	  1760: cmdTestCPU:
02:000049BC 6100B7A8        	  1761: 	bsr			cpu_test
02:000049C0 43FA0BD3        	  1762: 	lea			msg_test_done,a1
02:000049C4 6100F624        	  1763: 	bsr			DisplayStringCRLF
02:000049C8 6000FF32        	  1764: 	bra			Monitor
                            	  1765: 
                            	  1766: cmdClearScreen:
02:000049CC 6100074C        	  1767: 	bsr			ClearScreen
02:000049D0 6100F644        	  1768: 	bsr			HomeCursor
02:000049D4 6000FF26        	  1769: 	bra			Monitor
                            	  1770: 
                            	  1771: cmdCore:
02:000049D8 610002D6        	  1772: 	bsr			ignBlanks
02:000049DC 6100FF0A        	  1773: 	bsr			FromScreen
02:000049E0 0C010032        	  1774: 	cmpi.b	#'2',d1					; check range
02:000049E4 6500FF16        	  1775: 	blo			Monitor
02:000049E8 0C010039        	  1776: 	cmpi.b	#'9',d1
02:000049EC 6200FF0E        	  1777: 	bhi			Monitor
02:000049F0 04010030        	  1778: 	subi.b	#'0',d1					; convert ascii to binary
02:000049F4 6100F74A        	  1779: 	bsr			select_iofocus
02:000049F8 6000FF02        	  1780: 	bra			Monitor
                            	  1781: 
                            	  1782: cmdHelp:
                            	  1783: DisplayHelp:
02:000049FC 43FA000A        	  1784: 	lea			HelpMsg,a1
02:00004A00 6100F5D2        	  1785: 	bsr			DisplayString
02:00004A04 6000FEF6        	  1786: 	bra			Monitor
                            	  1787: 
                            	  1788: HelpMsg:
02:00004A08 3F203D2044697370	  1789: 	dc.b	"? = Display help",CR,LF
02:00004A10 6C61792068656C70
02:00004A18 0D
02:00004A19 0A
02:00004A1A 434F5245203C6E3E	  1790: 	dc.b  "CORE <n> = switch to core n",CR,LF
02:00004A22 203D207377697463
02:00004A2A 6820746F20636F72
02:00004A32 65206E
02:00004A35 0D
02:00004A36 0A
02:00004A37 434C53203D20636C	  1791: 	dc.b	"CLS = clear screen",CR,LF
02:00004A3F 6561722073637265
02:00004A47 656E
02:00004A49 0D
02:00004A4A 0A
02:00004A4B 3A203D2045646974	  1792: 	dc.b	": = Edit memory bytes",CR,LF
02:00004A53 206D656D6F727920
02:00004A5B 6279746573
02:00004A60 0D
02:00004A61 0A
02:00004A62 46203D2046696C6C	  1793: 	dc.b	"F = Fill memory",CR,LF
02:00004A6A 206D656D6F7279
02:00004A71 0D
02:00004A72 0A
02:00004A73 4C203D204C6F6164	  1794: 	dc.b	"L = Load S19 file",CR,LF
02:00004A7B 205331392066696C
02:00004A83 65
02:00004A84 0D
02:00004A85 0A
02:00004A86 44203D2044756D70	  1795: 	dc.b	"D = Dump memory, DR = dump registers",CR,LF
02:00004A8E 206D656D6F72792C
02:00004A96 204452203D206475
02:00004A9E 6D70207265676973
02:00004AA6 74657273
02:00004AAA 0D
02:00004AAB 0A
02:00004AAC 4241203D20737461	  1796: 	dc.b	"BA = start tiny basic",CR,LF
02:00004AB4 72742074696E7920
02:00004ABC 6261736963
02:00004AC1 0D
02:00004AC2 0A
02:00004AC3 4252203D20736574	  1797: 	dc.b  "BR = set breakpoint",CR,LF
02:00004ACB 20627265616B706F
02:00004AD3 696E74
02:00004AD6 0D
02:00004AD7 0A
02:00004AD8 4A203D204A756D70	  1798: 	dc.b	"J = Jump to code",CR,LF
02:00004AE0 20746F20636F6465
02:00004AE8 0D
02:00004AE9 0A
02:00004AEA 53203D2073656E64	  1799: 	dc.b  "S = send to serial port",CR,LF
02:00004AF2 20746F2073657269
02:00004AFA 616C20706F7274
02:00004B01 0D
02:00004B02 0A
02:00004B03 54203D2063707520	  1800: 	dc.b	"T = cpu test program",CR,LF,0
02:00004B0B 746573742070726F
02:00004B13 6772616D
02:00004B17 0D
02:00004B18 0A
02:00004B19 00
                            	  1801: 
                            	  1802: msgUnknownCmd:
02:00004B1A 636F6D6D616E6420	  1803: 	dc.b	"command unknown",0
02:00004B22 756E6B6E6F776E
02:00004B29 00
                            	  1804: 
                            	  1805: msgHello:
02:00004B2A 0A              	  1806: 	dc.b	LF,CR,"Hello World!",LF,CR,0
02:00004B2B 0D
02:00004B2C 48656C6C6F20576F
02:00004B34 726C6421
02:00004B38 0A
02:00004B39 0D
02:00004B3A 00
                            	  1807: 	even
                            	  1808: 
                            	  1809: ;------------------------------------------------------------------------------
                            	  1810: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1811: ; Used to fetch a command line. (Not currently used).
                            	  1812: ;
                            	  1813: ; d0.b	- command prompt
                            	  1814: ;------------------------------------------------------------------------------
                            	  1815: 
                            	  1816: GetCmdLine:
02:00004B3C 6100F238        	  1817: 		bsr		DisplayChar		; display prompt
02:00004B40 103C0020        	  1818: 		move.b	#' ',d0
02:00004B44 6100F230        	  1819: 		bsr		DisplayChar
02:00004B48 41F900040040    	  1820: 		lea		CmdBuf,a0
                            	  1821: .0001:
02:00004B4E 6100F6DC        	  1822: 		bsr		GetKey
02:00004B52 B03C0008        	  1823: 		cmp.b	#CTRLH,d0
02:00004B56 6728            	  1824: 		beq.s	.0003
02:00004B58 B03C0018        	  1825: 		cmp.b	#CTRLX,d0
02:00004B5C 6746            	  1826: 		beq.s	.0004
02:00004B5E B03C000D        	  1827: 		cmp.b	#CR,d0
02:00004B62 6706            	  1828: 		beq.s	.0002
02:00004B64 B03C0020        	  1829: 		cmp.b	#' ',d0
02:00004B68 65E4            	  1830: 		bcs.s	.0001
                            	  1831: .0002:
02:00004B6A 1080            	  1832: 		move.b	d0,(a0)
02:00004B6C 5088            	  1833: 		lea			8(a0),a0
02:00004B6E 6100F206        	  1834: 		bsr		DisplayChar
02:00004B72 B03C000D        	  1835: 		cmp.b	#CR,d0
02:00004B76 675E            	  1836: 		beq		.0007
02:00004B78 B1FC0004007F    	  1837: 		cmp.l	#CmdBufEnd-1,a0
02:00004B7E 65CE            	  1838: 		bcs.s	.0001
                            	  1839: .0003:
02:00004B80 103C0008        	  1840: 		move.b	#CTRLH,d0
02:00004B84 6100F1F0        	  1841: 		bsr		DisplayChar
02:00004B88 103C0020        	  1842: 		move.b	#' ',d0
02:00004B8C 6100F1E8        	  1843: 		bsr		DisplayChar
02:00004B90 B1FC00040040    	  1844: 		cmp.l	#CmdBuf,a0
02:00004B96 63B6            	  1845: 		bls.s	.0001
02:00004B98 103C0008        	  1846: 		move.b	#CTRLH,d0
02:00004B9C 6100F1D8        	  1847: 		bsr		DisplayChar
02:00004BA0 5388            	  1848: 		subq.l	#1,a0
02:00004BA2 60AA            	  1849: 		bra.s	.0001
                            	  1850: .0004:
02:00004BA4 2208            	  1851: 		move.l	a0,d1
02:00004BA6 92BC00040040    	  1852: 		sub.l	#CmdBuf,d1
02:00004BAC 671E            	  1853: 		beq.s	.0006
02:00004BAE 5341            	  1854: 		subq	#1,d1
                            	  1855: .0005:
02:00004BB0 103C0008        	  1856: 		move.b	#CTRLH,d0
02:00004BB4 6100F1C0        	  1857: 		bsr		DisplayChar
02:00004BB8 103C0020        	  1858: 		move.b	#' ',d0
02:00004BBC 6100F1B8        	  1859: 		bsr		DisplayChar
02:00004BC0 103C0008        	  1860: 		move.b	#CTRLH,d0
02:00004BC4 6100F1B0        	  1861: 		bsr		DisplayChar
02:00004BC8 51C9FFE6        	  1862: 		dbra	d1,.0005
                            	  1863: .0006:
02:00004BCC 41F900040040    	  1864: 		lea		CmdBuf,a0
02:00004BD2 6000FF7A        	  1865: 		bra		.0001
                            	  1866: .0007:
02:00004BD6 103C000A        	  1867: 		move.b	#LF,d0
02:00004BDA 6100F19A        	  1868: 		bsr		DisplayChar
02:00004BDE 4E75            	  1869: 		rts
                            	  1870: 
                            	  1871: ;------------------------------------------------------------------------------
                            	  1872: ; S <address> <length>
                            	  1873: ; Send data buffer to serial port
                            	  1874: ; S 40000 40
                            	  1875: ;------------------------------------------------------------------------------
                            	  1876: 
                            	  1877: cmdSendSerial:
02:00004BE0 610000CE        	  1878: 	bsr			ignBlanks
02:00004BE4 6100029C        	  1879: 	bsr			GetHexNumber
02:00004BE8 6700FD12        	  1880: 	beq			Monitor
02:00004BEC 2C01            	  1881: 	move.l	d1,d6					; d6 points to buffer
02:00004BEE 610000C0        	  1882: 	bsr			ignBlanks
02:00004BF2 6100028E        	  1883: 	bsr			GetHexNumber
02:00004BF6 6602            	  1884: 	bne.s		.0003
02:00004BF8 7210            	  1885: 	moveq		#16,d1
                            	  1886: .0003:
02:00004BFA 2246            	  1887: 	move.l	d6,a1					; a1 points to buffer
02:00004BFC 2401            	  1888: 	move.l	d1,d2					; d2 = count of bytes to send
02:00004BFE 6008            	  1889: 	bra.s		.0002					; enter loop at bottom
                            	  1890: .0001:
02:00004C00 1219            	  1891: 	move.b	(a1)+,d1
02:00004C02 303C0022        	  1892: 	move.w	#34,d0				; serial putchar
02:00004C06 4E4F            	  1893: 	trap		#15
                            	  1894: .0002:
02:00004C08 51CAFFF6        	  1895: 	dbra		d2,.0001
02:00004C0C 6000FCEE        	  1896: 	bra			Monitor
                            	  1897: 		
                            	  1898: ;------------------------------------------------------------------------------
                            	  1899: ; R <address> <length>
                            	  1900: ; Send data buffer to serial port
                            	  1901: ; R 10000 40
                            	  1902: ;------------------------------------------------------------------------------
                            	  1903: 
                            	  1904: cmdReceiveSerial:
02:00004C10 6100009E        	  1905: 	bsr			ignBlanks
02:00004C14 6100026C        	  1906: 	bsr			GetHexNumber
02:00004C18 6700FCE2        	  1907: 	beq			Monitor
02:00004C1C 2C01            	  1908: 	move.l	d1,d6					; d6 points to buffer
02:00004C1E 61000090        	  1909: 	bsr			ignBlanks
02:00004C22 6100025E        	  1910: 	bsr			GetHexNumber
02:00004C26 6602            	  1911: 	bne.s		.0003
02:00004C28 7210            	  1912: 	moveq		#16,d1
                            	  1913: .0003:
02:00004C2A 2246            	  1914: 	move.l	d6,a1					; a1 points to buffer
02:00004C2C 2401            	  1915: 	move.l	d1,d2					; d2 = count of bytes to send
02:00004C2E 600C            	  1916: 	bra.s		.0002					; enter loop at bottom
                            	  1917: .0001:
02:00004C30 303C0024        	  1918: 	move.w	#36,d0				; serial peek char
02:00004C34 4E4F            	  1919: 	trap		#15
02:00004C36 4A81            	  1920: 	tst.l		d1
02:00004C38 6BF6            	  1921: 	bmi.s		.0001
02:00004C3A 12C1            	  1922: 	move.b	d1,(a1)+
                            	  1923: .0002:
02:00004C3C 51CAFFF2        	  1924: 	dbra		d2,.0001
02:00004C40 6000FCBA        	  1925: 	bra			Monitor
                            	  1926: 		
                            	  1927: ;------------------------------------------------------------------------------
                            	  1928: ; Fill memory
                            	  1929: ;
                            	  1930: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  1931: ; FW = fill words
                            	  1932: ; FL = fill longs
                            	  1933: ; F = fill bytes
                            	  1934: ;------------------------------------------------------------------------------
                            	  1935: 
                            	  1936: cmdFillB:
02:00004C44 616A            	  1937: 	bsr			ignBlanks
02:00004C46 6100023A        	  1938: 	bsr			GetHexNumber
02:00004C4A 2241            	  1939: 	move.l	d1,a1					; a1 = start
02:00004C4C 6162            	  1940: 	bsr			ignBlanks
02:00004C4E 61000232        	  1941: 	bsr			GetHexNumber
02:00004C52 2601            	  1942: 	move.l	d1,d3					; d3 = count
02:00004C54 6700FCA6        	  1943: 	beq			Monitor
02:00004C58 6156            	  1944: 	bsr			ignBlanks
02:00004C5A 61000226        	  1945: 	bsr			GetHexNumber	; fill value
                            	  1946: .fmem:
02:00004C5E 12C1            	  1947: 	move.b	d1,(a1)+
02:00004C60 5383            	  1948: 	sub.l		#1,d3
02:00004C62 66FA            	  1949: 	bne.s		.fmem
02:00004C64 6000FC96        	  1950: 	bra			Monitor
                            	  1951: 	
                            	  1952: cmdFillW:
02:00004C68 6146            	  1953: 	bsr			ignBlanks
02:00004C6A 61000216        	  1954: 	bsr			GetHexNumber
02:00004C6E 2241            	  1955: 	move.l	d1,a1					; a1 = start
02:00004C70 613E            	  1956: 	bsr			ignBlanks
02:00004C72 6100020E        	  1957: 	bsr			GetHexNumber
02:00004C76 2601            	  1958: 	move.l	d1,d3					; d3 = count
02:00004C78 6700FC82        	  1959: 	beq			Monitor
02:00004C7C 6132            	  1960: 	bsr			ignBlanks
02:00004C7E 61000202        	  1961: 	bsr			GetHexNumber	; fill value
                            	  1962: .fmem:
02:00004C82 32C1            	  1963: 	move.w	d1,(a1)+
02:00004C84 5383            	  1964: 	sub.l		#1,d3
02:00004C86 66FA            	  1965: 	bne.s		.fmem
02:00004C88 6000FC72        	  1966: 	bra			Monitor
                            	  1967: 	
                            	  1968: cmdFillL:
02:00004C8C 6122            	  1969: 	bsr			ignBlanks
02:00004C8E 610001F2        	  1970: 	bsr			GetHexNumber
02:00004C92 2241            	  1971: 	move.l	d1,a1					; a1 = start
02:00004C94 611A            	  1972: 	bsr			ignBlanks
02:00004C96 610001EA        	  1973: 	bsr			GetHexNumber
02:00004C9A 2601            	  1974: 	move.l	d1,d3					; d3 = count
02:00004C9C 6700FC5E        	  1975: 	beq			Monitor
02:00004CA0 610E            	  1976: 	bsr			ignBlanks
02:00004CA2 610001DE        	  1977: 	bsr			GetHexNumber	; fill value
                            	  1978: .fmem:
02:00004CA6 22C1            	  1979: 	move.l	d1,(a1)+
02:00004CA8 5383            	  1980: 	sub.l		#1,d3
02:00004CAA 66FA            	  1981: 	bne.s		.fmem
02:00004CAC 6000FC4E        	  1982: 	bra			Monitor
                            	  1983: 	
                            	  1984: ;------------------------------------------------------------------------------
                            	  1985: ; Modifies:
                            	  1986: ;	a0	- text pointer
                            	  1987: ;------------------------------------------------------------------------------
                            	  1988: 
                            	  1989: ignBlanks:
02:00004CB0 2F01            	  1990: 	move.l	d1,-(a7)
                            	  1991: .0001:
02:00004CB2 6100FC34        	  1992: 	bsr			FromScreen
02:00004CB6 0C010020        	  1993: 	cmpi.b	#' ',d1
02:00004CBA 67F6            	  1994: 	beq.s		.0001
02:00004CBC 5188            	  1995: 	lea			-8(a0),a0
02:00004CBE 221F            	  1996: 	move.l	(a7)+,d1
02:00004CC0 4E75            	  1997: 	rts
                            	  1998: 
                            	  1999: ;------------------------------------------------------------------------------
                            	  2000: ; Edit memory byte.
                            	  2001: ;    Bytes are built into long words in case the memory is only longword
                            	  2002: ; accessible.
                            	  2003: ;------------------------------------------------------------------------------
                            	  2004: 
                            	  2005: cmdEditMemory:
02:00004CC2 61EC            	  2006: 	bsr			ignBlanks
02:00004CC4 610001BC        	  2007: 	bsr			GetHexNumber
02:00004CC8 2241            	  2008: 	move.l	d1,a1
                            	  2009: edtmem1:
02:00004CCA 7400            	  2010: 	clr.l		d2
02:00004CCC 61E2            	  2011: 	bsr			ignBlanks
02:00004CCE 610001B2        	  2012: 	bsr			GetHexNumber
02:00004CD2 1401            	  2013: 	move.b	d1,d2
                            	  2014: ;	move.b	d1,(a1)+
02:00004CD4 61DA            	  2015: 	bsr			ignBlanks
02:00004CD6 610001AA        	  2016: 	bsr			GetHexNumber
02:00004CDA E18A            	  2017: 	lsl.l		#8,d2
02:00004CDC 1401            	  2018: 	move.b	d1,d2
                            	  2019: ;	move.b	d1,(a1)+
02:00004CDE 61D0            	  2020: 	bsr			ignBlanks
02:00004CE0 610001A0        	  2021: 	bsr			GetHexNumber
02:00004CE4 E18A            	  2022: 	lsl.l		#8,d2
02:00004CE6 1401            	  2023: 	move.b	d1,d2
                            	  2024: ;	move.b	d1,(a1)+
02:00004CE8 61C6            	  2025: 	bsr			ignBlanks
02:00004CEA 61000196        	  2026: 	bsr			GetHexNumber
02:00004CEE E18A            	  2027: 	lsl.l		#8,d2
02:00004CF0 1401            	  2028: 	move.b	d1,d2
02:00004CF2 22C2            	  2029: 	move.l	d2,(a1)+
                            	  2030: ;	move.b	d1,(a1)+
02:00004CF4 7400            	  2031: 	clr.l		d2
02:00004CF6 61B8            	  2032: 	bsr			ignBlanks
02:00004CF8 61000188        	  2033: 	bsr			GetHexNumber
02:00004CFC 1401            	  2034: 	move.b	d1,d2
                            	  2035: ;	move.b	d1,(a1)+
02:00004CFE 61B0            	  2036: 	bsr			ignBlanks
02:00004D00 61000180        	  2037: 	bsr			GetHexNumber
02:00004D04 E18A            	  2038: 	lsl.l		#8,d2
02:00004D06 1401            	  2039: 	move.b	d1,d2
                            	  2040: ;	move.b	d1,(a1)+
02:00004D08 61A6            	  2041: 	bsr			ignBlanks
02:00004D0A 61000176        	  2042: 	bsr			GetHexNumber
02:00004D0E E18A            	  2043: 	lsl.l		#8,d2
02:00004D10 1401            	  2044: 	move.b	d1,d2
                            	  2045: ;	move.b	d1,(a1)+
02:00004D12 619C            	  2046: 	bsr			ignBlanks
02:00004D14 6100016C        	  2047: 	bsr			GetHexNumber
02:00004D18 E18A            	  2048: 	lsl.l		#8,d2
02:00004D1A 1401            	  2049: 	move.b	d1,d2
                            	  2050: ;	move.b	d1,(a1)+
02:00004D1C 22C2            	  2051: 	move.l	d2,(a1)+
02:00004D1E 6000FBDC        	  2052: 	bra			Monitor
                            	  2053: 
                            	  2054: ;------------------------------------------------------------------------------
                            	  2055: ; Execute code at the specified address.
                            	  2056: ;------------------------------------------------------------------------------
                            	  2057: 
                            	  2058: cmdJump:
                            	  2059: ExecuteCode:
02:00004D22 618C            	  2060: 	bsr			ignBlanks
02:00004D24 6100015C        	  2061: 	bsr			GetHexNumber
02:00004D28 2041            	  2062: 	move.l	d1,a0
02:00004D2A 4E90            	  2063: 	jsr			(a0)
02:00004D2C 6000FBCE        	  2064: 	bra     Monitor
                            	  2065: 
                            	  2066: ;------------------------------------------------------------------------------
                            	  2067: ; Do a memory dump of the requested location.
                            	  2068: ; D 0800 0850
                            	  2069: ;------------------------------------------------------------------------------
                            	  2070: 
                            	  2071: cmdDumpMemory:
02:00004D30 6100FF7E        	  2072: 	bsr			ignBlanks
02:00004D34 6100014C        	  2073: 	bsr			GetHexNumber
02:00004D38 6700FBC2        	  2074: 	beq			Monitor			; was there a number ? no, other garbage, just ignore
02:00004D3C 2601            	  2075: 	move.l	d1,d3				; save off start of range
02:00004D3E 6100FF70        	  2076: 	bsr			ignBlanks
02:00004D42 6100013E        	  2077: 	bsr			GetHexNumber
02:00004D46 6608            	  2078: 	bne.s		DumpMem1
02:00004D48 2203            	  2079: 	move.l	d3,d1
02:00004D4A 068100000040    	  2080: 	addi.l	#64,d1			; no end specified, just dump 64 bytes
                            	  2081: DumpMem1:
02:00004D50 2043            	  2082: 	move.l	d3,a0
02:00004D52 2241            	  2083: 	move.l	d1,a1
02:00004D54 6100EFD6        	  2084: 	bsr			CRLF
                            	  2085: .0001:
02:00004D58 B3C8            	  2086: 	cmpa.l	a0,a1
02:00004D5A 6300FBA0        	  2087: 	bls			Monitor
02:00004D5E 6102            	  2088: 	bsr			DisplayMem
02:00004D60 60F6            	  2089: 	bra.s		.0001
                            	  2090: 
                            	  2091: ;------------------------------------------------------------------------------
                            	  2092: ; Display memory dump in a format suitable for edit.
                            	  2093: ;
                            	  2094: ;	:12345678 00 11 22 33 44 55 66 77  "........"
                            	  2095: ;
                            	  2096: ; Modifies:
                            	  2097: ;		d1,d2,a0
                            	  2098: ;------------------------------------------------------------------------------
                            	  2099: 
                            	  2100: DisplayMem:
02:00004D62 123C003A        	  2101: 	move.b	#':',d1
02:00004D66 6100F00E        	  2102: 	bsr			DisplayChar
02:00004D6A 2208            	  2103: 	move.l	a0,d1
02:00004D6C 61000194        	  2104: 	bsr			DisplayTetra
02:00004D70 7407            	  2105: 	moveq		#7,d2
                            	  2106: dspmem1:
02:00004D72 123C0020        	  2107: 	move.b	#' ',d1
02:00004D76 6100EFFE        	  2108: 	bsr			DisplayChar
02:00004D7A 1218            	  2109: 	move.b	(a0)+,d1
02:00004D7C 61000190        	  2110: 	bsr			DisplayByte
02:00004D80 51CAFFF0        	  2111: 	dbra		d2,dspmem1
02:00004D84 61000162        	  2112: 	bsr			DisplayTwoSpaces
02:00004D88 123C0022        	  2113: 	move.b	#34,d1
02:00004D8C 6100EFE8        	  2114: 	bsr			DisplayChar
02:00004D90 5188            	  2115: 	lea			-8(a0),a0
02:00004D92 7407            	  2116: 	moveq		#7,d2
                            	  2117: .0002:	
02:00004D94 1218            	  2118: 	move.b	(a0)+,d1
02:00004D96 B23C0020        	  2119: 	cmp.b		#' ',d1
02:00004D9A 6506            	  2120: 	blo.s		.0003
02:00004D9C B23C007F        	  2121: 	cmp.b		#127,d1
02:00004DA0 6304            	  2122: 	bls.s		.0001
                            	  2123: .0003:
02:00004DA2 123C002E        	  2124: 	move.b	#'.',d1
                            	  2125: .0001:
02:00004DA6 6100EFCE        	  2126: 	bsr			DisplayChar
02:00004DAA 51CAFFE8        	  2127: 	dbra		d2,.0002
02:00004DAE 123C0022        	  2128: 	move.b	#34,d1
02:00004DB2 6100EFC2        	  2129: 	bsr			DisplayChar
02:00004DB6 6100F4AC        	  2130: 	bsr			CheckForCtrlC
02:00004DBA 6000EF70        	  2131: 	bra			CRLF
                            	  2132: 
                            	  2133: ;------------------------------------------------------------------------------
                            	  2134: ; Dump Registers
                            	  2135: ;    The dump is in a format that allows the register value to be edited.
                            	  2136: ;
                            	  2137: ; RegD0 12345678
                            	  2138: ; RegD1 77777777
                            	  2139: ;	... etc
                            	  2140: ;------------------------------------------------------------------------------
                            	  2141: 
                            	  2142: cmdDumpRegs:
02:00004DBE 6100EF6C        	  2143: 	bsr			CRLF
02:00004DC2 303C000F        	  2144: 	move.w	#15,d0					; number of registers-1
02:00004DC6 41FA007A        	  2145: 	lea			msg_reglist,a0	;
02:00004DCA 43FA0072        	  2146: 	lea			msg_regs,a1
02:00004DCE 45F900040100    	  2147: 	lea			Regsave,a2			; a2 points to register save area
                            	  2148: .0001:
02:00004DD4 6100F1FE        	  2149: 	bsr			DisplayString
02:00004DD8 1218            	  2150: 	move.b	(a0)+,d1
02:00004DDA 6100EF9A        	  2151: 	bsr			DisplayChar
02:00004DDE 1218            	  2152: 	move.b	(a0)+,d1
02:00004DE0 6100EF94        	  2153: 	bsr			DisplayChar
02:00004DE4 61000114        	  2154: 	bsr			DisplaySpace
02:00004DE8 221A            	  2155: 	move.l	(a2)+,d1
02:00004DEA 61000116        	  2156: 	bsr			DisplayTetra
02:00004DEE 6100EF3C        	  2157: 	bsr			CRLF
02:00004DF2 51C8FFE0        	  2158: 	dbra		d0,.0001
02:00004DF6 6100F1DC        	  2159: 	bsr			DisplayString
02:00004DFA 1218            	  2160: 	move.b	(a0)+,d1
02:00004DFC 6100EF78        	  2161: 	bsr			DisplayChar
02:00004E00 1218            	  2162: 	move.b	(a0)+,d1
02:00004E02 6100EF72        	  2163: 	bsr			DisplayChar
02:00004E06 610000F2        	  2164: 	bsr			DisplaySpace
02:00004E0A 223900040144    	  2165: 	move.l	Regsave+$44,d1
02:00004E10 610000F0        	  2166: 	bsr			DisplayTetra
02:00004E14 6100EF16        	  2167: 	bsr			CRLF
02:00004E18 6100F1BA        	  2168: 	bsr			DisplayString
02:00004E1C 1218            	  2169: 	move.b	(a0)+,d1
02:00004E1E 6100EF56        	  2170: 	bsr			DisplayChar
02:00004E22 1218            	  2171: 	move.b	(a0)+,d1
02:00004E24 6100EF50        	  2172: 	bsr			DisplayChar
02:00004E28 610000D0        	  2173: 	bsr			DisplaySpace
02:00004E2C 323900040140    	  2174: 	move.w	Regsave+$40,d1
02:00004E32 610000D4        	  2175: 	bsr			DisplayWyde
02:00004E36 6100EEF4        	  2176: 	bsr			CRLF
02:00004E3A 6000FAC0        	  2177: 	bra			Monitor
                            	  2178: 
                            	  2179: msg_regs:
02:00004E3E 526567          	  2180: 	dc.b	"Reg",0
02:00004E41 00
                            	  2181: msg_reglist:
02:00004E42 4430443144324433	  2182: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
02:00004E4A 4434443544364437
02:00004E52 4130413141324133
02:00004E5A 4134413541364137
02:00004E62 50435352
02:00004E66 00
                            	  2183: 
                            	  2184: 	align	1
                            	  2185: 
                            	  2186: ;------------------------------------------------------------------------------
                            	  2187: ;------------------------------------------------------------------------------
                            	  2188: 
                            	  2189: cmdTestSerialReceive:
                            	  2190: .0002:
02:00004E68 7024            	  2191: 	moveq		#36,d0				; serial get char from buffer
02:00004E6A 4E4F            	  2192: 	trap		#15
                            	  2193: ;	bsr			SerialPeekCharDirect
02:00004E6C 4A81            	  2194: 	tst.l		d1
02:00004E6E 6B0C            	  2195: 	bmi.s		.0001
02:00004E70 0C01001A        	  2196: 	cmpi.b	#CTRLZ,d1
02:00004E74 6700FA86        	  2197: 	beq			Monitor
02:00004E78 6100EEFC        	  2198: 	bsr			DisplayChar
                            	  2199: .0001:	
02:00004E7C 6100F3E6        	  2200: 	bsr			CheckForCtrlC
02:00004E80 60E6            	  2201: 	bra			.0002
                            	  2202: 	
                            	  2203: ;------------------------------------------------------------------------------
                            	  2204: ; Get a hexidecimal number. Maximum of eight digits.
                            	  2205: ;
                            	  2206: ; Returns:
                            	  2207: ;		d0 = number of digits
                            	  2208: ;		d1 = value of number
                            	  2209: ;		zf = number of digits == 0
                            	  2210: ;------------------------------------------------------------------------------
                            	  2211: 
                            	  2212: GetHexNumber:
02:00004E82 2F02            	  2213: 	move.l	d2,-(a7)
02:00004E84 7400            	  2214: 	clr.l		d2
02:00004E86 7000            	  2215: 	moveq		#0,d0
                            	  2216: .0002:
02:00004E88 6100FA5E        	  2217: 	bsr			FromScreen
02:00004E8C 6120            	  2218: 	bsr			AsciiToHexNybble
02:00004E8E B23C00FF        	  2219: 	cmp.b		#$ff,d1
02:00004E92 6712            	  2220: 	beq.s		.0001
02:00004E94 E98A            	  2221: 	lsl.l		#4,d2
02:00004E96 02810000000F    	  2222: 	andi.l	#$0f,d1
02:00004E9C 8481            	  2223: 	or.l		d1,d2
02:00004E9E 5240            	  2224: 	addq		#1,d0
02:00004EA0 0C000008        	  2225: 	cmpi.b	#8,d0
02:00004EA4 65E2            	  2226: 	blo.s		.0002
                            	  2227: .0001:
02:00004EA6 2202            	  2228: 	move.l	d2,d1
02:00004EA8 241F            	  2229: 	move.l	(a7)+,d2
02:00004EAA 4A00            	  2230: 	tst.b		d0
02:00004EAC 4E75            	  2231: 	rts	
                            	  2232: 
                            	  2233: ;------------------------------------------------------------------------------
                            	  2234: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  2235: ; to a hex nybble.
                            	  2236: ;------------------------------------------------------------------------------
                            	  2237: 
                            	  2238: AsciiToHexNybble:
02:00004EAE 0C010030        	  2239: 	cmpi.b	#'0',d1
02:00004EB2 6530            	  2240: 	blo.s		gthx3
02:00004EB4 0C010039        	  2241: 	cmpi.b	#'9',d1
02:00004EB8 6206            	  2242: 	bhi.s		gthx5
02:00004EBA 04010030        	  2243: 	subi.b	#'0',d1
02:00004EBE 4E75            	  2244: 	rts
                            	  2245: gthx5:
02:00004EC0 0C010041        	  2246: 	cmpi.b	#'A',d1
02:00004EC4 651E            	  2247: 	blo.s		gthx3
02:00004EC6 0C010046        	  2248: 	cmpi.b	#'F',d1
02:00004ECA 6206            	  2249: 	bhi.s		gthx6
02:00004ECC 060100C9        	  2250: 	addi.b	#10-'A',d1
02:00004ED0 4E75            	  2251: 	rts
                            	  2252: gthx6:
02:00004ED2 0C010061        	  2253: 	cmpi.b	#'a',d1
02:00004ED6 650C            	  2254: 	blo.s		gthx3
02:00004ED8 0C010066        	  2255: 	cmpi.b	#'f',d1
02:00004EDC 6206            	  2256: 	bhi.s		gthx3
02:00004EDE 060100A9        	  2257: 	addi.b	#10-'a',d1
02:00004EE2 4E75            	  2258: 	rts
                            	  2259: gthx3:
02:00004EE4 72FF            	  2260: 	moveq	#-1,d1		; not a hex number
02:00004EE6 4E75            	  2261: 	rts
                            	  2262: 
                            	  2263: ;------------------------------------------------------------------------------
                            	  2264: ;------------------------------------------------------------------------------
                            	  2265: 
                            	  2266: DisplayTwoSpaces:
02:00004EE8 2F01            	  2267: 	move.l	d1,-(a7)
02:00004EEA 123C0020        	  2268: 	move.b	#' ',d1
02:00004EEE 6100EE86        	  2269: 	bsr			DisplayChar
                            	  2270: dspspc1:
02:00004EF2 6100EE82        	  2271: 	bsr			DisplayChar
02:00004EF6 221F            	  2272: 	move.l	(a7)+,d1
02:00004EF8 4E75            	  2273: 	rts
                            	  2274: 
                            	  2275: DisplaySpace:
02:00004EFA 2F01            	  2276: 	move.l	d1,-(a7)
02:00004EFC 123C0020        	  2277: 	move.b	#' ',d1
02:00004F00 60F0            	  2278: 	bra			dspspc1
                            	  2279: 
                            	  2280: ;------------------------------------------------------------------------------
                            	  2281: ; Display the 32 bit word in D1.L
                            	  2282: ;------------------------------------------------------------------------------
                            	  2283: 
                            	  2284: DisplayTetra:
02:00004F02 4841            	  2285: 	swap	d1
02:00004F04 6102            	  2286: 	bsr		DisplayWyde
02:00004F06 4841            	  2287: 	swap	d1
                            	  2288: 
                            	  2289: ;------------------------------------------------------------------------------
                            	  2290: ; Display the byte in D1.W
                            	  2291: ;------------------------------------------------------------------------------
                            	  2292: 
                            	  2293: DisplayWyde:
02:00004F08 E059            	  2294: 	ror.w		#8,d1
02:00004F0A 6102            	  2295: 	bsr			DisplayByte
02:00004F0C E159            	  2296: 	rol.w		#8,d1
                            	  2297: 
                            	  2298: ;------------------------------------------------------------------------------
                            	  2299: ; Display the byte in D1.B
                            	  2300: ;------------------------------------------------------------------------------
                            	  2301: 
                            	  2302: DisplayByte:
02:00004F0E E819            	  2303: 	ror.b		#4,d1
02:00004F10 6102            	  2304: 	bsr			DisplayNybble
02:00004F12 E919            	  2305: 	rol.b		#4,d1
                            	  2306: 
                            	  2307: ;------------------------------------------------------------------------------
                            	  2308: ; Display nybble in D1.B
                            	  2309: ;------------------------------------------------------------------------------
                            	  2310: 
                            	  2311: DisplayNybble:
02:00004F14 2F01            	  2312: 	move.l	d1,-(a7)
02:00004F16 0201000F        	  2313: 	andi.b	#$F,d1
02:00004F1A 06010030        	  2314: 	addi.b	#'0',d1
02:00004F1E 0C010039        	  2315: 	cmpi.b	#'9',d1
02:00004F22 6302            	  2316: 	bls.s		.0001
02:00004F24 5E01            	  2317: 	addi.b	#7,d1
                            	  2318: .0001:
02:00004F26 6100EE4E        	  2319: 	bsr			DisplayChar
02:00004F2A 221F            	  2320: 	move.l	(a7)+,d1
02:00004F2C 4E75            	  2321: 	rts
                            	  2322: 
                            	  2323: ;------------------------------------------------------------------------------
                            	  2324: ;------------------------------------------------------------------------------
                            	  2325: ;
                            	  2326: ;DisplayHexNumber:
                            	  2327: ;	move.w	#$A6A6,leds		; diagnostics
                            	  2328: ;	move.l	#VDGREG,a6
                            	  2329: ;	move.w	#7,d2		; number-1 of digits to display
                            	  2330: ;disphnum1:
                            	  2331: ;	move.b	d1,d0		; get digit into d0.b
                            	  2332: ;	andi.w	#$0f,d0
                            	  2333: ;	cmpi.w	#$09,d0
                            	  2334: ;	bls.s	disphnum2
                            	  2335: ;	addi.w	#7,d0
                            	  2336: ;disphnum2:
                            	  2337: ;	addi.w	#$30,d0	; convert to display char
                            	  2338: ;	move.w	d2,d3		; char count into d3
                            	  2339: ;	asl.w	#3,d3		; scale * 8
                            	  2340: ;disphnum3:
                            	  2341: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  2342: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  2343: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  2344: ;	ext.w	d0						; zero out high order bits
                            	  2345: ;	move.w	d0,$420(a6)			; set char code
                            	  2346: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  2347: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  2348: ;	move.w	d3,$426(a6)			; set x pos
                            	  2349: ;	move.w	#8,$428(a6)			; set y pos
                            	  2350: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  2351: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  2352: ;	ror.l	#4,d1					; rot to next digit
                            	  2353: ;	dbeq	d2,disphnum1
                            	  2354: ;	jmp		(a5)
                            	  2355: 
                            	  2356: ;==============================================================================
                            	  2357: ; Load an S19 format file
                            	  2358: ;==============================================================================
                            	  2359: 
                            	  2360: cmdLoadS19:
02:00004F2E 6100EDFC        	  2361: 	bsr			CRLF
02:00004F32 6012            	  2362: 	bra			ProcessRec
                            	  2363: NextRec:
02:00004F34 610001CC        	  2364: 	bsr			sGetChar
02:00004F38 0C01000A        	  2365: 	cmpi.b	#LF,d1
02:00004F3C 66F6            	  2366: 	bne			NextRec
02:00004F3E 123C002E        	  2367: 	move.b	#'.',d1
02:00004F42 6100EE32        	  2368: 	bsr			DisplayChar
                            	  2369: ProcessRec:
02:00004F46 610001BA        	  2370: 	bsr			sGetChar
02:00004F4A 0C01000D        	  2371: 	cmpi.b	#CR,d1
02:00004F4E 67F6            	  2372: 	beq.s		ProcessRec
02:00004F50 423900100050    	  2373: 	clr.b		S19Checksum
02:00004F56 1801            	  2374: 	move.b	d1,d4
02:00004F58 0C04001A        	  2375: 	cmpi.b	#CTRLZ,d4		; CTRL-Z ?
02:00004F5C 6700F99E        	  2376: 	beq			Monitor
02:00004F60 0C040053        	  2377: 	cmpi.b	#'S',d4
02:00004F64 66CE            	  2378: 	bne			NextRec
02:00004F66 6100019A        	  2379: 	bsr			sGetChar
02:00004F6A 1801            	  2380: 	move.b	d1,d4
02:00004F6C 0C040030        	  2381: 	cmpi.b	#'0',d4
02:00004F70 65C2            	  2382: 	blo			NextRec
02:00004F72 0C040039        	  2383: 	cmpi.b	#'9',d4		; d4 = record type
02:00004F76 62BC            	  2384: 	bhi			NextRec
02:00004F78 61000188        	  2385: 	bsr			sGetChar
02:00004F7C 6100FF30        	  2386: 	bsr			AsciiToHexNybble
02:00004F80 1401            	  2387: 	move.b	d1,d2
02:00004F82 6100017E        	  2388: 	bsr			sGetChar
02:00004F86 6100FF26        	  2389: 	bsr			AsciiToHexNybble
02:00004F8A E90A            	  2390: 	lsl.b		#4,d2
02:00004F8C 8202            	  2391: 	or.b		d2,d1		; d1 = byte count
02:00004F8E 1601            	  2392: 	move.b	d1,d3		; d3 = byte count
02:00004F90 D73900100050    	  2393: 	add.b		d3,S19Checksum
02:00004F96 0C040030        	  2394: 	cmpi.b	#'0',d4		; manufacturer ID record, ignore
02:00004F9A 6798            	  2395: 	beq			NextRec
02:00004F9C 0C040031        	  2396: 	cmpi.b	#'1',d4
02:00004FA0 67000094        	  2397: 	beq			ProcessS1
02:00004FA4 0C040032        	  2398: 	cmpi.b	#'2',d4
02:00004FA8 67000090        	  2399: 	beq			ProcessS2
02:00004FAC 0C040033        	  2400: 	cmpi.b	#'3',d4
02:00004FB0 6700008C        	  2401: 	beq			ProcessS3
02:00004FB4 0C040035        	  2402: 	cmpi.b	#'5',d4		; record count record, ignore
02:00004FB8 6700FF7A        	  2403: 	beq			NextRec
02:00004FBC 0C040037        	  2404: 	cmpi.b	#'7',d4
02:00004FC0 6700008E        	  2405: 	beq			ProcessS7
02:00004FC4 0C040038        	  2406: 	cmpi.b	#'8',d4
02:00004FC8 67000092        	  2407: 	beq			ProcessS8
02:00004FCC 0C040039        	  2408: 	cmpi.b	#'9',d4
02:00004FD0 67000096        	  2409: 	beq			ProcessS9
02:00004FD4 6000FF5E        	  2410: 	bra			NextRec
                            	  2411: 
                            	  2412: pcssxa
02:00004FD8 024300FF        	  2413: 	andi.w	#$ff,d3
02:00004FDC 5343            	  2414: 	subi.w	#1,d3			; one less for dbra
                            	  2415: .0001
02:00004FDE 7400            	  2416: 	clr.l		d2
02:00004FE0 61000120        	  2417: 	bsr			sGetChar
02:00004FE4 6100FEC8        	  2418: 	bsr			AsciiToHexNybble
02:00004FE8 E98A            	  2419: 	lsl.l		#4,d2
02:00004FEA 8401            	  2420: 	or.b		d1,d2
02:00004FEC 61000114        	  2421: 	bsr			sGetChar
02:00004FF0 6100FEBC        	  2422: 	bsr			AsciiToHexNybble
02:00004FF4 E98A            	  2423: 	lsl.l		#4,d2
02:00004FF6 8401            	  2424: 	or.b		d1,d2
02:00004FF8 D53900100050    	  2425: 	add.b		d2,S19Checksum
02:00004FFE 12C2            	  2426: 	move.b	d2,(a1)+
02:00005000 51CBFFDC        	  2427: 	dbra		d3,.0001
                            	  2428: ; Get the checksum byte
02:00005004 7400            	  2429: 	clr.l		d2
02:00005006 610000FA        	  2430: 	bsr			sGetChar
02:0000500A 6100FEA2        	  2431: 	bsr			AsciiToHexNybble
02:0000500E E98A            	  2432: 	lsl.l		#4,d2
02:00005010 8401            	  2433: 	or.b		d1,d2
02:00005012 610000EE        	  2434: 	bsr			sGetChar
02:00005016 6100FE96        	  2435: 	bsr			AsciiToHexNybble
02:0000501A E98A            	  2436: 	lsl.l		#4,d2
02:0000501C 8401            	  2437: 	or.b		d1,d2
02:0000501E 4602            	  2438: 	eor.b		#$FF,d2
02:00005020 B43900100050    	  2439: 	cmp.b		S19Checksum,d2
02:00005026 6700FF0C        	  2440: 	beq			NextRec
02:0000502A 123C0045        	  2441: 	move.b	#'E',d1
02:0000502E 6100ED46        	  2442: 	bsr			DisplayChar
02:00005032 6000FF00        	  2443: 	bra			NextRec
                            	  2444: 
                            	  2445: ProcessS1:
02:00005036 613C            	  2446: 	bsr			S19Get16BitAddress
02:00005038 609E            	  2447: 	bra			pcssxa
                            	  2448: ProcessS2:
02:0000503A 6146            	  2449: 	bsr			S19Get24BitAddress
02:0000503C 609A            	  2450: 	bra			pcssxa
                            	  2451: ProcessS3:
02:0000503E 614E            	  2452: 	bsr			S19Get32BitAddress
02:00005040 2209            	  2453: 	move.l	a1,d1
02:00005042 6100FEBE        	  2454: 	bsr			DisplayTetra
02:00005046 123C000D        	  2455: 	move.b	#CR,d1
02:0000504A 6100ED2A        	  2456: 	bsr			DisplayChar
02:0000504E 6088            	  2457: 	bra			pcssxa
                            	  2458: ProcessS7:
02:00005050 613C            	  2459: 	bsr			S19Get32BitAddress
02:00005052 23C900040008    	  2460: 	move.l	a1,S19StartAddress
02:00005058 6000F8A2        	  2461: 	bra			Monitor
                            	  2462: ProcessS8:
02:0000505C 6124            	  2463: 	bsr			S19Get24BitAddress
02:0000505E 23C900040008    	  2464: 	move.l	a1,S19StartAddress
02:00005064 6000F896        	  2465: 	bra			Monitor
                            	  2466: ProcessS9:
02:00005068 610A            	  2467: 	bsr			S19Get16BitAddress
02:0000506A 23C900040008    	  2468: 	move.l	a1,S19StartAddress
02:00005070 6000F88A        	  2469: 	bra			Monitor
                            	  2470: 
                            	  2471: S19Get16BitAddress:
02:00005074 7400            	  2472: 	clr.l		d2
02:00005076 6100008A        	  2473: 	bsr			sGetChar
02:0000507A 6100FE32        	  2474: 	bsr			AsciiToHexNybble
02:0000507E 1401            	  2475: 	move.b	d1,d2
02:00005080 603E            	  2476: 	bra			S1932b
                            	  2477: 
                            	  2478: S19Get24BitAddress:
02:00005082 7400            	  2479: 	clr.l		d2
02:00005084 617C            	  2480: 	bsr			sGetChar
02:00005086 6100FE26        	  2481: 	bsr			AsciiToHexNybble
02:0000508A 1401            	  2482: 	move.b	d1,d2
02:0000508C 601E            	  2483: 	bra			S1932a
                            	  2484: 
                            	  2485: S19Get32BitAddress:
02:0000508E 7400            	  2486: 	clr.l		d2
02:00005090 6170            	  2487: 	bsr			sGetChar
02:00005092 6100FE1A        	  2488: 	bsr			AsciiToHexNybble
02:00005096 1401            	  2489: 	move.b	d1,d2
02:00005098 6168            	  2490: 	bsr			sGetChar
02:0000509A 6100FE12        	  2491: 	bsr			AsciiToHexNybble
02:0000509E E98A            	  2492: 	lsl.l		#4,d2
02:000050A0 8401            	  2493: 	or.b		d1,d2
02:000050A2 615E            	  2494: 	bsr			sGetChar
02:000050A4 6100FE08        	  2495: 	bsr			AsciiToHexNybble
02:000050A8 E98A            	  2496: 	lsl.l		#4,d2
02:000050AA 8401            	  2497: 	or.b		d1,d2
                            	  2498: S1932a:
02:000050AC 6154            	  2499: 	bsr			sGetChar
02:000050AE 6100FDFE        	  2500: 	bsr			AsciiToHexNybble
02:000050B2 E98A            	  2501: 	lsl.l		#4,d2
02:000050B4 8401            	  2502: 	or.b		d1,d2
02:000050B6 614A            	  2503: 	bsr			sGetChar
02:000050B8 6100FDF4        	  2504: 	bsr			AsciiToHexNybble
02:000050BC E98A            	  2505: 	lsl.l		#4,d2
02:000050BE 8401            	  2506: 	or.b		d1,d2
                            	  2507: S1932b:
02:000050C0 6140            	  2508: 	bsr			sGetChar
02:000050C2 6100FDEA        	  2509: 	bsr			AsciiToHexNybble
02:000050C6 E98A            	  2510: 	lsl.l		#4,d2
02:000050C8 8401            	  2511: 	or.b		d1,d2
02:000050CA 6136            	  2512: 	bsr			sGetChar
02:000050CC 6100FDE0        	  2513: 	bsr			AsciiToHexNybble
02:000050D0 E98A            	  2514: 	lsl.l		#4,d2
02:000050D2 8401            	  2515: 	or.b		d1,d2
02:000050D4 612C            	  2516: 	bsr			sGetChar
02:000050D6 6100FDD6        	  2517: 	bsr			AsciiToHexNybble
02:000050DA E98A            	  2518: 	lsl.l		#4,d2
02:000050DC 8401            	  2519: 	or.b		d1,d2
02:000050DE 7800            	  2520: 	clr.l		d4
02:000050E0 2242            	  2521: 	move.l	d2,a1
                            	  2522: 	; Add bytes from address value to checksum
02:000050E2 D53900100050    	  2523: 	add.b		d2,S19Checksum
02:000050E8 E08A            	  2524: 	lsr.l		#8,d2
02:000050EA D53900100050    	  2525: 	add.b		d2,S19Checksum
02:000050F0 E08A            	  2526: 	lsr.l		#8,d2
02:000050F2 D53900100050    	  2527: 	add.b		d2,S19Checksum
02:000050F8 E08A            	  2528: 	lsr.l		#8,d2
02:000050FA D53900100050    	  2529: 	add.b		d2,S19Checksum
02:00005100 4E75            	  2530: 	rts
                            	  2531: 
                            	  2532: ;------------------------------------------------------------------------------
                            	  2533: ; Get a character from auxillary input, checking the keyboard status for a
                            	  2534: ; CTRL-C
                            	  2535: ;------------------------------------------------------------------------------
                            	  2536: 
                            	  2537: AUXIN:
                            	  2538: 
                            	  2539: sGetChar:
                            	  2540: ;	bsr			CheckForCtrlC
02:00005102 7024            	  2541: 	moveq		#36,d0				; serial get char from buffer
02:00005104 4E4F            	  2542: 	trap		#15
02:00005106 4A81            	  2543: 	tst.l		d1						; was there a char available?
02:00005108 6BF8            	  2544: 	bmi.s		sGetChar			; no - try again
02:0000510A 0C01001A        	  2545: 	cmpi.b	#CTRLZ,d1			; receive end of file?
02:0000510E 6700F7EC        	  2546: 	beq			Monitor
02:00005112 4E75            	  2547: 	rts
                            	  2548: 
                            	  2549: AudioInputTest:
02:00005114 4E75            	  2550: 	rts
                            	  2551: BouncingBalls:
02:00005116 4E75            	  2552: 	rts
                            	  2553: GraphicsDemo:
02:00005118 4E75            	  2554: 	rts
                            	  2555: ClearScreen:
02:0000511A 6000EBB8        	  2556: 	bra		clear_screen
02:0000511E 4E75            	  2557: 	rts
                            	  2558: 
                            	  2559: ;------------------------------------------------------------------------------
                            	  2560: ; Reverse the order of bytes in d1.
                            	  2561: ;------------------------------------------------------------------------------
                            	  2562: 
                            	  2563: rbo:
02:00005120 E159            	  2564: 	rol.w		#8,d1
02:00005122 4841            	  2565: 	swap		d1
02:00005124 E159            	  2566: 	rol.w		#8,d1
02:00005126 4E75            	  2567: 	rts
                            	  2568: 
                            	  2569: ;==============================================================================
                            	  2570: ; Serial I/O routines
                            	  2571: ;==============================================================================
                            	  2572: 
                            	  2573: ;------------------------------------------------------------------------------
                            	  2574: ; Initialize the serial port an enhanced 6551 circuit.
                            	  2575: ;
                            	  2576: ; Select internal baud rate clock divider for 9600 baud
                            	  2577: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	  2578: ; Note that the byte order is swapped.
                            	  2579: ;------------------------------------------------------------------------------
                            	  2580: 
                            	  2581: SerialInit:
02:00005128 427900100062    	  2582: 	clr.w		SerHeadRcv					; clear receive buffer indexes
02:0000512E 427900100060    	  2583: 	clr.w		SerTailRcv
02:00005134 423900100064    	  2584: 	clr.b		SerRcvXon						; and Xon,Xoff flags
02:0000513A 423900100065    	  2585: 	clr.b		SerRcvXoff
02:00005140 203C09000000    	  2586: 	move.l	#$09000000,d0				; dtr,rts active, rxint enabled, no parity
02:00005146 23C0FD060008    	  2587: 	move.l	d0,ACIA+ACIA_CMD
                            	  2588: ;	move.l	#$1E00F700,d0				; fifos enabled
02:0000514C 203C1E000000    	  2589: 	move.l	#$1E000000,d0				; fifos disabled
02:00005152 23C0FD06000C    	  2590: 	move.l	d0,ACIA+ACIA_CTRL
02:00005158 4E75            	  2591: 	rts
                            	  2592: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	  2593: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2594: ;	move.l	#300000,d2					; wait 100 ms
                            	  2595: ;	bra			.0001
                            	  2596: ;.0003:
                            	  2597: ;	swap		d2
                            	  2598: ;.0001:
                            	  2599: ;	nop
                            	  2600: ;	dbra		d2,.0001
                            	  2601: ;.0002:
                            	  2602: ;	swap		d2
                            	  2603: ;	dbra		d2,.0003
                            	  2604: ;	move.l	#$07000000,d0				; clear break
                            	  2605: ;	move.l	d0,ACIA+ACIA_CMD
                            	  2606: ;	rts
                            	  2607: 	
                            	  2608: ;------------------------------------------------------------------------------
                            	  2609: ; SerialGetChar
                            	  2610: ;
                            	  2611: ; Check the serial port buffer to see if there's a char available. If there's
                            	  2612: ; a char available then return it. If the buffer is almost empty then send an
                            	  2613: ; XON.
                            	  2614: ;
                            	  2615: ; Stack Space:
                            	  2616: ;		2 words
                            	  2617: ; Parameters:
                            	  2618: ;		none
                            	  2619: ; Modifies:
                            	  2620: ;		d0,a0
                            	  2621: ; Returns:
                            	  2622: ;		d1 = character or -1
                            	  2623: ;------------------------------------------------------------------------------
                            	  2624: 
                            	  2625: SerialGetChar:
02:0000515A 610000BA        	  2626: 	bsr				SerialRcvCount			; check number of chars in receive buffer
02:0000515E 0C400008        	  2627: 	cmpi.w		#8,d0								; less than 8?
02:00005162 621A            	  2628: 	bhi				.sgc2
02:00005164 4A3900100064    	  2629: 	tst.b			SerRcvXon						; skip sending XON if already sent
02:0000516A 6612            	  2630: 	bne	  		.sgc2            		; XON already sent?
02:0000516C 123C0011        	  2631: 	move.b		#XON,d1							; if <8 send an XON
02:00005170 423900100065    	  2632: 	clr.b			SerRcvXoff					; clear XOFF status
02:00005176 13C100100064    	  2633: 	move.b		d1,SerRcvXon				; flag so we don't send it multiple times
02:0000517C 616C            	  2634: 	bsr				SerialPutChar				; send it
                            	  2635: .sgc2:
02:0000517E 323900100062    	  2636: 	move.w		SerHeadRcv,d1				; check if anything is in buffer
02:00005184 B27900100060    	  2637: 	cmp.w			SerTailRcv,d1
02:0000518A 6720            	  2638: 	beq				.NoChars						; no?
02:0000518C 41F900101000    	  2639: 	lea				SerRcvBuf,a0
02:00005192 12301000        	  2640: 	move.b		(a0,d1.w),d1				; get byte from buffer
02:00005196 527900100062    	  2641: 	addi.w		#1,SerHeadRcv
02:0000519C 02790FFF00100062	  2642: 	andi.w		#$FFF,SerHeadRcv		; 4k wrap around
02:000051A4 0281000000FF    	  2643: 	andi.l		#$FF,d1
02:000051AA 6002            	  2644: 	bra				.Xit
                            	  2645: .NoChars:
02:000051AC 72FF            	  2646: 	moveq			#-1,d1
                            	  2647: .Xit:
02:000051AE 4E75            	  2648: 	rts
                            	  2649: 
                            	  2650: ;------------------------------------------------------------------------------
                            	  2651: ; SerialPeekChar
                            	  2652: ;
                            	  2653: ; Check the serial port buffer to see if there's a char available. If there's
                            	  2654: ; a char available then return it. But don't update the buffer indexes. No need
                            	  2655: ; to send an XON here.
                            	  2656: ;
                            	  2657: ; Stack Space:
                            	  2658: ;		0 words
                            	  2659: ; Parameters:
                            	  2660: ;		none
                            	  2661: ; Modifies:
                            	  2662: ;		a0
                            	  2663: ; Returns:
                            	  2664: ;		d1 = character or -1
                            	  2665: ;------------------------------------------------------------------------------
                            	  2666: 
                            	  2667: SerialPeekChar:
02:000051B0 323900100062    	  2668: 	move.w	SerHeadRcv,d1		; check if anything is in buffer
02:000051B6 B27900100060    	  2669: 	cmp.w		SerTailRcv,d1
02:000051BC 670C            	  2670: 	beq			.NoChars				; no?
02:000051BE 41F900101000    	  2671: 	lea			SerRcvBuf,a0
02:000051C4 12301000        	  2672: 	move.b	(a0,d1.w),d1		; get byte from buffer
02:000051C8 6002            	  2673: 	bra			.Xit
                            	  2674: .NoChars:
02:000051CA 72FF            	  2675: 	moveq		#-1,d1
                            	  2676: .Xit:
02:000051CC 4E75            	  2677: 	rts
                            	  2678: 
                            	  2679: ;------------------------------------------------------------------------------
                            	  2680: ; SerialPeekChar
                            	  2681: ;		Get a character directly from the I/O port. This bypasses the input
                            	  2682: ; buffer.
                            	  2683: ;
                            	  2684: ; Stack Space:
                            	  2685: ;		0 words
                            	  2686: ; Parameters:
                            	  2687: ;		none
                            	  2688: ; Modifies:
                            	  2689: ;		d
                            	  2690: ; Returns:
                            	  2691: ;		d1 = character or -1
                            	  2692: ;------------------------------------------------------------------------------
                            	  2693: 
                            	  2694: SerialPeekCharDirect:
02:000051CE 2239FD060004    	  2695: 	move.l	ACIA+ACIA_STAT,d1	; get serial status
02:000051D4 6138            	  2696: 	bsr			SerialRbo
02:000051D6 08010003        	  2697: 	btst		#3,d1							; look for Rx not empty
02:000051DA 670A            	  2698: 	beq.s		.0001
02:000051DC 7200            	  2699: 	moveq.l	#0,d1							; clear upper bits of return value
02:000051DE 1239FD060000    	  2700: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
02:000051E4 4E75            	  2701: 	rts												; return
                            	  2702: .0001:
02:000051E6 72FF            	  2703: 	moveq		#-1,d1
02:000051E8 4E75            	  2704: 	rts
                            	  2705: 
                            	  2706: ;------------------------------------------------------------------------------
                            	  2707: ; SerialPutChar
                            	  2708: ;    Put a character to the serial transmitter. This routine blocks until the
                            	  2709: ; transmitter is empty. 
                            	  2710: ;
                            	  2711: ; Stack Space
                            	  2712: ;		0 words
                            	  2713: ; Parameters:
                            	  2714: ;		d1.b = character to put
                            	  2715: ; Modifies:
                            	  2716: ;		none
                            	  2717: ;------------------------------------------------------------------------------
                            	  2718: 
                            	  2719: SerialPutChar:
02:000051EA 48E7C000        	  2720: 	movem.l	d0/d1,-(a7)				; push d0,d1
                            	  2721: .0001:
02:000051EE 2039FD060004    	  2722: 	move.l	ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
02:000051F4 E158            	  2723: 	rol.w		#8,d0
02:000051F6 4840            	  2724: 	swap		d0
02:000051F8 E158            	  2725: 	rol.w		#8,d0
02:000051FA 08000004        	  2726: 	btst		#4,d0							; bit #4 of the status reg
02:000051FE 67EE            	  2727: 	beq.s		.0001			    		; branch if transmitter is not empty
02:00005200 610C            	  2728: 	bsr			SerialRbo
02:00005202 23C1FD060000    	  2729: 	move.l	d1,ACIA+ACIA_TX		; send the byte
02:00005208 4CDF0003        	  2730: 	movem.l	(a7)+,d0/d1				; pop d0,d1
02:0000520C 4E75            	  2731: 	rts
                            	  2732: 	
                            	  2733: ;------------------------------------------------------------------------------
                            	  2734: ; Reverse the order of bytes in d1.
                            	  2735: ;------------------------------------------------------------------------------
                            	  2736: 
                            	  2737: SerialRbo:
02:0000520E E159            	  2738: 	rol.w		#8,d1
02:00005210 4841            	  2739: 	swap		d1
02:00005212 E159            	  2740: 	rol.w		#8,d1
02:00005214 4E75            	  2741: 	rts
                            	  2742: 
                            	  2743: ;------------------------------------------------------------------------------
                            	  2744: ; Calculate number of character in input buffer
                            	  2745: ;
                            	  2746: ; Returns:
                            	  2747: ;		d0 = number of bytes in buffer.
                            	  2748: ;------------------------------------------------------------------------------
                            	  2749: 
                            	  2750: SerialRcvCount:
02:00005216 303900100060    	  2751: 	move.w	SerTailRcv,d0
02:0000521C 907900100062    	  2752: 	sub.w		SerHeadRcv,d0
02:00005222 6C10            	  2753: 	bge			.0001
02:00005224 303C1000        	  2754: 	move.w	#$1000,d0
02:00005228 907900100062    	  2755: 	sub.w		SerHeadRcv,d0
02:0000522E D07900100060    	  2756: 	add.w		SerTailRcv,d0
                            	  2757: .0001:
02:00005234 4E75            	  2758: 	rts
                            	  2759: 
                            	  2760: ;------------------------------------------------------------------------------
                            	  2761: ; Serial IRQ routine
                            	  2762: ;
                            	  2763: ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                            	  2764: ; Received characters are buffered. If the buffer becomes full, new characters
                            	  2765: ; will be lost.
                            	  2766: ;
                            	  2767: ; Parameters:
                            	  2768: ;		none
                            	  2769: ; Modifies:
                            	  2770: ;		none
                            	  2771: ; Returns:
                            	  2772: ;		d1 = -1 if IRQ handled, otherwise zero
                            	  2773: ;------------------------------------------------------------------------------
                            	  2774: 
                            	  2775: SerialIRQ:
02:00005236 46FC2300        	  2776: 	move.w	#$2300,sr						; disable lower level IRQs
02:0000523A 48E7E080        	  2777: 	movem.l	d0/d1/d2/a0,-(a7)
                            	  2778: sirqNxtByte:
02:0000523E 2239FD060004    	  2779: 	move.l	ACIA+ACIA_STAT,d1		; check the status
02:00005244 61C8            	  2780: 	bsr			SerialRbo
02:00005246 08010003        	  2781: 	btst		#3,d1								; bit 3 = rx full
02:0000524A 6758            	  2782: 	beq			notRxInt
02:0000524C 2239FD060000    	  2783: 	move.l	ACIA+ACIA_RX,d1
02:00005252 61BA            	  2784: 	bsr			SerialRbo
                            	  2785: sirq0001:
02:00005254 303900100060    	  2786: 	move.w	SerTailRcv,d0				; check if recieve buffer full
02:0000525A 5240            	  2787: 	addi.w	#1,d0
02:0000525C 02400FFF        	  2788: 	andi.w	#$FFF,d0
02:00005260 B07900100062    	  2789: 	cmp.w		SerHeadRcv,d0
02:00005266 673C            	  2790: 	beq			sirqRxFull
02:00005268 33C000100060    	  2791: 	move.w	d0,SerTailRcv				; update tail pointer
02:0000526E 5340            	  2792: 	subi.w	#1,d0								; backup
02:00005270 02400FFF        	  2793: 	andi.w	#$FFF,d0
02:00005274 41F900101000    	  2794: 	lea			SerRcvBuf,a0				; a0 = buffer address
02:0000527A 11810000        	  2795: 	move.b	d1,(a0,d0.w)				; store recieved byte in buffer
02:0000527E 4A3900100065    	  2796: 	tst.b		SerRcvXoff					; check if xoff already sent
02:00005284 66B8            	  2797: 	bne			sirqNxtByte
02:00005286 618E            	  2798: 	bsr			SerialRcvCount			; if more than 4080 chars in buffer
02:00005288 0C400FF0        	  2799: 	cmpi.w	#4080,d0
02:0000528C 65B0            	  2800: 	blo			sirqNxtByte
02:0000528E 123C0013        	  2801: 	move.b	#XOFF,d1						; send an XOFF
02:00005292 423900100064    	  2802: 	clr.b		SerRcvXon						; clear XON status
02:00005298 13C100100065    	  2803: 	move.b	d1,SerRcvXoff				; set XOFF status
02:0000529E 6100FF4A        	  2804: 	bsr			SerialPutChar				; send XOFF
02:000052A2 609A            	  2805: 	bra			sirqNxtByte     		; check the status for another byte
                            	  2806: sirqRxFull:
                            	  2807: notRxInt:
02:000052A4 4CDF0107        	  2808: 	movem.l	(a7)+,d0/d1/d2/a0
02:000052A8 4E73            	  2809: 	rte
                            	  2810: 
                            	  2811: nmeSerial:
02:000052AA 53657269616C    	  2812: 	dc.b		"Serial",0
02:000052B0 00
                            	  2813: 
                            	  2814: 
                            	  2815: ;------------------------------------------------------------------------------
                            	  2816: ;------------------------------------------------------------------------------
                            	  2817: 	even
                            	  2818: 
                            	  2819: bus_err:
                            	  2820: .0001:
02:000052B2 4E71            	  2821: 	nop
02:000052B4 60FC            	  2822: 	bra			.0001
                            	  2823: 
                            	  2824: trap3:
                            	  2825: 	; First save all registers
02:000052B6 48F9FFFF00040100	  2826: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
02:000052BE 33DF00040140    	  2827: 	move.w		(a7)+,Regsave+$40
02:000052C4 23DF00040144    	  2828: 	move.l		(a7)+,Regsave+$44
02:000052CA 2E7C00040FFC    	  2829: 	move.l		#$40FFC,a7			; reset stack pointer
02:000052D0 46FC2500        	  2830: 	move.w		#$2500,sr				; enable interrupts
02:000052D4 303900040202    	  2831: 	move.w		NumSetBreakpoints,d0
02:000052DA 5340            	  2832: 	subi.w		#1,d0
02:000052DC 41F900040220    	  2833: 	lea				Breakpoints,a0
02:000052E2 223900040144    	  2834: 	move.l		Regsave+$44,d1
                            	  2835: .0001:
02:000052E8 B298            	  2836: 	cmp.l			(a0)+,d1
02:000052EA 6708            	  2837: 	beq.s			ProcessBreakpoint
02:000052EC 51C8FFFA        	  2838: 	dbra			d0,.0001
02:000052F0 6000F60A        	  2839: 	bra				Monitor					; not a breakpoint
                            	  2840: ProcessBreakpoint:
02:000052F4 6104            	  2841: 	bsr				DisarmAllBreakpoints
02:000052F6 6000FAC6        	  2842: 	bra				cmdDumpRegs
                            	  2843: 
                            	  2844: ;------------------------------------------------------------------------------
                            	  2845: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  2846: ;------------------------------------------------------------------------------
                            	  2847: 
                            	  2848: DisarmAllBreakpoints:
02:000052FA 48E780E0        	  2849: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
02:000052FE 303900040202    	  2850: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
02:00005304 0C400008        	  2851: 	cmpi.w	#numBreakpoints,d0		; check for valid number
02:00005308 641A            	  2852: 	bhs.s		.0001
02:0000530A 45F900040220    	  2853: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
02:00005310 41F900040280    	  2854: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
02:00005316 6004            	  2855: 	bra.s		.0003									; enter loop at bottom
                            	  2856: .0002:
02:00005318 225A            	  2857: 	move.l	(a2)+,a1							; a1 = address of breakpoint
02:0000531A 3298            	  2858: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  2859: .0003:
02:0000531C 51C8FFFA        	  2860: 	dbra		d0,.0002
02:00005320 4CDF0701        	  2861: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  2862: .0001:
02:00005324 4E75            	  2863: 	rts	
                            	  2864: 
                            	  2865: ;------------------------------------------------------------------------------
                            	  2866: ; ArmAllBreakpoints, used when entering the monitor.
                            	  2867: ;------------------------------------------------------------------------------
                            	  2868: 
                            	  2869: ArmAllBreakpoints:
02:00005326 48E780E0        	  2870: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
02:0000532A 303900040202    	  2871: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
02:00005330 0C400008        	  2872: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
02:00005334 641E            	  2873: 	bhs.s			.0001
02:00005336 45F900040220    	  2874: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
02:0000533C 41F900040280    	  2875: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
02:00005342 6008            	  2876: 	bra.s			.0003									; enter loop at bottom
                            	  2877: .0002:
02:00005344 225A            	  2878: 	move.l		(a2)+,a1							; a1 = address of breakpoint
02:00005346 3091            	  2879: 	move.w		(a1),(a0)							; copy instruction word to table
02:00005348 30FC4E43        	  2880: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  2881: .0003:
02:0000534C 51C8FFF6        	  2882: 	dbra			d0,.0002
02:00005350 4CDF0701        	  2883: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  2884: .0001:
02:00005354 4E75            	  2885: 	rts	
                            	  2886: 
                            	  2887: ;------------------------------------------------------------------------------
                            	  2888: ;------------------------------------------------------------------------------
                            	  2889: 
                            	  2890: ArmBreakpoint:
02:00005356 48E7E0E0        	  2891: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
02:0000535A 303900040202    	  2892: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
02:00005360 0C400008        	  2893: 	cmpi.w		#numBreakpoints,d0		; check if too many
02:00005364 645A            	  2894: 	bhs.s			.0001
02:00005366 527900040202    	  2895: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
02:0000536C 2400            	  2896: 	move.l		d0,d2
02:0000536E 6100F940        	  2897: 	bsr				ignBlanks
02:00005372 6100FB0E        	  2898: 	bsr				GetHexNumber
02:00005376 6748            	  2899: 	beq.s			.0001									; was there an address?
02:00005378 08010000        	  2900: 	btst			#0,d1									; address value must be even
02:0000537C 6642            	  2901: 	bne.s			.0001
                            	  2902: 	; See if the breakpoint is in the table already
02:0000537E 43F900040220    	  2903: 	lea				Breakpoints,a1				; a1 points to breakpoint table
02:00005384 343C0007        	  2904: 	move.w		#numBreakpoints-1,d2
                            	  2905: .0002:
02:00005388 B299            	  2906: 	cmp.l			(a1)+,d1
02:0000538A 673A            	  2907: 	beq.s			.0003									; breakpoint is in table already
02:0000538C 51CAFFFA        	  2908: 	dbra			d2,.0002
                            	  2909: 	; Add breakpoint to table
                            	  2910: 	; Search for empty entry
02:00005390 43F900040220    	  2911: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
02:00005396 4242            	  2912: 	clr.w			d2										; d2 = count
                            	  2913: .0006:
02:00005398 4A91            	  2914: 	tst.l			(a1)									; is the entry empty?
02:0000539A 670C            	  2915: 	beq.s			.0005									; branch if found empty entry
02:0000539C 5889            	  2916: 	lea				4(a1),a1							; point to next entry
02:0000539E 5242            	  2917: 	addi.w		#1,d2									; increment count
02:000053A0 0C420008        	  2918: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
02:000053A4 65F2            	  2919: 	blo.s			.0006
02:000053A6 6018            	  2920: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  2921: .0005:
02:000053A8 E542            	  2922: 	asl.w			#2,d2									; d2 = long word index
02:000053AA 23812000        	  2923: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
02:000053AE 2441            	  2924: 	move.l		d1,a2
02:000053B0 E24A            	  2925: 	lsr.w			#1,d2									; d2 = word index
                            	  2926: .0004:
02:000053B2 43F900040280    	  2927: 	lea				BreakpointWords,a1
02:000053B8 33922000        	  2928: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
02:000053BC 34BC4E43        	  2929: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  2930: .0001:
02:000053C0 4CDF0707        	  2931: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
02:000053C4 4E75            	  2932: 	rts
                            	  2933: .0003:
02:000053C6 2469FFFC        	  2934: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
02:000053CA 0C524E43        	  2935: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
02:000053CE 67F0            	  2936: 	beq.s			.0001
02:000053D0 D482            	  2937: 	asl.l			#1,d2									; d2 = word index
02:000053D2 60DE            	  2938: 	bra.s			.0004
                            	  2939: 
                            	  2940: 
                            	  2941: ;------------------------------------------------------------------------------
                            	  2942: ;------------------------------------------------------------------------------
                            	  2943: 
                            	  2944: DisarmBreakpoint:
02:000053D4 48E7E0E0        	  2945: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
02:000053D8 303900040202    	  2946: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
02:000053DE 0C400008        	  2947: 	cmpi.w		#numBreakpoints,d0		; check if too many
02:000053E2 623E            	  2948: 	bhi.s			.0001
02:000053E4 2400            	  2949: 	move.l		d0,d2
02:000053E6 6100F8C8        	  2950: 	bsr				ignBlanks
02:000053EA 6100FA96        	  2951: 	bsr				GetHexNumber
02:000053EE 6732            	  2952: 	beq.s			.0001									; was there an address?
02:000053F0 08010000        	  2953: 	btst			#0,d1									; address value must be even
02:000053F4 662C            	  2954: 	bne.s			.0001
                            	  2955: 	; See if the breakpoint is in the table already
02:000053F6 43F900040220    	  2956: 	lea				Breakpoints,a1				; a1 points to breakpoint table
02:000053FC 5342            	  2957: 	subi.w		#1,d2
                            	  2958: .0002:
02:000053FE B299            	  2959: 	cmp.l			(a1)+,d1
02:00005400 6706            	  2960: 	beq.s			.0003									; breakpoint is in table already
02:00005402 51CAFFFA        	  2961: 	dbra			d2,.0002
02:00005406 601A            	  2962: 	bra				.0001									; breakpoint was not in table
                            	  2963: .0003:
                            	  2964: 	; Remove breakpoint from table
02:00005408 537900040202    	  2965: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
02:0000540E 2469FFFC        	  2966: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
02:00005412 42A9FFFC        	  2967: 	clr.l			-4(a1)								; empty out breakpoint
02:00005416 43F900040280    	  2968: 	lea				BreakpointWords,a1
02:0000541C D482            	  2969: 	asl.l			#1,d2									; d2 = word index
02:0000541E 34B12000        	  2970: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  2971: .0001:
02:00005422 4CDF0707        	  2972: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
02:00005426 4E75            	  2973: 	rts
                            	  2974: 
                            	  2975: ;------------------------------------------------------------------------------
                            	  2976: ;------------------------------------------------------------------------------
                            	  2977: 
                            	  2978: ListBreakpoints:
02:00005428 6100E902        	  2979: 	bsr			CRLF
02:0000542C 343C0008        	  2980: 	move.w	#numBreakpoints,d2
02:00005430 43F900040220    	  2981: 	lea			Breakpoints,a1
                            	  2982: .0001:
02:00005436 2219            	  2983: 	move.l	(a1)+,d1
02:00005438 6100FAC8        	  2984: 	bsr			DisplayTetra
02:0000543C 6100E8EE        	  2985: 	bsr			CRLF
02:00005440 51CAFFF4        	  2986: 	dbra		d2,.0001
02:00005444 6000F4B6        	  2987: 	bra			Monitor
                            	  2988: 
                            	  2989: ;------------------------------------------------------------------------------
                            	  2990: ;------------------------------------------------------------------------------
                            	  2991: 
                            	  2992: ClearBreakpointList:
02:00005448 343C0008        	  2993: 	move.w	#numBreakpoints,d2
02:0000544C 43F900040220    	  2994: 	lea			Breakpoints,a1
                            	  2995: .0001:
02:00005452 4299            	  2996: 	clr.l		(a1)+
02:00005454 51CAFFFC        	  2997: 	dbra		d2,.0001
02:00005458 4E75            	  2998: 	rts
                            	  2999: 
                            	  3000: ;------------------------------------------------------------------------------
                            	  3001: ;------------------------------------------------------------------------------
                            	  3002: 
                            	  3003: InitIRQ:
02:0000545A 7006            	  3004: 	moveq		#6,d0
02:0000545C 41FAF0BA        	  3005: 	lea			KeybdIRQ,a0
02:00005460 610C            	  3006: 	bsr			InstallIRQ
02:00005462 41FA003A        	  3007: 	lea			TickIRQ,a0
02:00005466 6106            	  3008: 	bsr			InstallIRQ
02:00005468 7003            	  3009: 	moveq		#3,d0
02:0000546A 41FAFDCA        	  3010: 	lea			SerialIRQ,a0
                            	  3011: 	; fall through
                            	  3012: 
                            	  3013: ;------------------------------------------------------------------------------
                            	  3014: ; Install an IRQ handler.
                            	  3015: ;
                            	  3016: ; Parameters:
                            	  3017: ;		d0 = IRQ level
                            	  3018: ;		a0 = pointer to IRQ routine
                            	  3019: ; Returns:
                            	  3020: ;		d1 = -1 if successfully added, 0 otherwise
                            	  3021: ;		nf = 1, zf = 0 if successfully added, otherwise nf = 0, zf = 1
                            	  3022: ;------------------------------------------------------------------------------
                            	  3023: 
                            	  3024: InstallIRQ:
02:0000546E 2F00            	  3025: 	move.l	d0,-(a7)					; save working register
02:00005470 43F80400        	  3026: 	lea			InstalledIRQ,a1		; a1 points to installed IRQ list
02:00005474 EB48            	  3027: 	lsl.w		#5,d0							; multiply by 8 long words per IRQ level
                            	  3028: .nextSpot:
02:00005476 B1F10000        	  3029: 	cmpa.l	(a1,d0.w),a0			; Is the IRQ already installed?
02:0000547A 6716            	  3030: 	beq.s		.found
02:0000547C 4AB10000        	  3031: 	tst.l		(a1,d0.w)					; test for an empty spot
02:00005480 670C            	  3032: 	beq.s		.foundSpot
02:00005482 5840            	  3033: 	addi.w	#4,d0							; increment to next slot
02:00005484 3200            	  3034: 	move.w	d0,d1
02:00005486 0241001F        	  3035: 	andi.w	#$1F,d1						; check to see if spots exhausted
02:0000548A 670C            	  3036: 	beq.s		.noEmpties
02:0000548C 60E8            	  3037: 	bra.s		.nextSpot
                            	  3038: .foundSpot:
02:0000548E 23880000        	  3039: 	move.l	a0,(a1,d0.w)			; add IRQ routine to table
                            	  3040: .found:
02:00005492 201F            	  3041: 	move.l	(a7)+,d0
02:00005494 72FF            	  3042: 	moveq		#-1,d1						; return success
02:00005496 4E75            	  3043: 	rts
                            	  3044: .noEmpties:
02:00005498 201F            	  3045: 	move.l	(a7)+,d0
02:0000549A 7200            	  3046: 	moveq		#0,d1							; return failed to add
02:0000549C 4E75            	  3047: 	rts
                            	  3048: 	
                            	  3049: 
                            	  3050: ;------------------------------------------------------------------------------
                            	  3051: ;------------------------------------------------------------------------------
                            	  3052: 
                            	  3053: TickIRQ:
02:0000549E 46FC2600        	  3054: 	move.w	#$2600,sr					; disable lower level IRQs
02:000054A2 48E74080        	  3055: 	movem.l	d1/a0,-(a7)
                            	  3056: 	; ToDo: detect a tick interrupt
                            	  3057: ;	move.l	PLIC+$00,d1
                            	  3058: ;	rol.l		#8,d1
                            	  3059: ;	cmpi.b	#29,d1
                            	  3060: ;	bne.s		.notTick
02:000054A6 23FC1D000000FD09	  3061: 	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
02:000054AE 0014
02:000054B0 207900040004    	  3062: 	move.l	TextScr,a0				; a0 = screen address
02:000054B6 52A80028        	  3063: 	addi.l	#1,40(a0)					; update onscreen IRQ flag
02:000054BA 4CDF0102        	  3064: 	movem.l	(a7)+,d1/a0
02:000054BE 4E73            	  3065: 	rte
                            	  3066: ;.notTick:
                            	  3067: ;	movem.l	(a7)+,d1/a0
                            	  3068: ;	rte
                            	  3069: 
                            	  3070: ;------------------------------------------------------------------------------
                            	  3071: ;------------------------------------------------------------------------------
                            	  3072: 
                            	  3073: irq3_rout:
02:000054C0 48E7C0C0        	  3074: 	movem.l	d0/d1/a0/a1,-(a7)
02:000054C4 41F80460        	  3075: 	lea			InstalledIRQ+8*4*3,a0
02:000054C8 6008            	  3076: 	bra			irq_rout
                            	  3077: 
                            	  3078: irq6_rout:
02:000054CA 48E7C0C0        	  3079: 	movem.l	d0/d1/a0/a1,-(a7)
02:000054CE 41F804C0        	  3080: 	lea			InstalledIRQ+8*4*6,a0
                            	  3081: irq_rout:
02:000054D2 7007            	  3082: 	moveq		#7,d0
                            	  3083: .nextHandler:
02:000054D4 2258            	  3084: 	move.l	(a0)+,a1
02:000054D6 6706            	  3085: 	beq.s		.0003
02:000054D8 4E91            	  3086: 	jsr			(a1)
02:000054DA 4A81            	  3087: 	tst.l		d1								; was IRQ handled?
02:000054DC 6B04            	  3088: 	bmi.s		.0002							; first one to return handled quits loop
                            	  3089: .0003:
02:000054DE 51C8FFF4        	  3090: 	dbra		d0,.nextHandler
                            	  3091: .0002:
02:000054E2 4CDF0303        	  3092: 	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3093: 
                            	  3094: SpuriousIRQ:
02:000054E6 4E73            	  3095: 	rte
                            	  3096: 
                            	  3097: ;	bsr			KeybdIRQ
                            	  3098: ;	tst.l		d1								; handled by KeybdIRQ?
                            	  3099: ;	bmi.s		.0002							; if yes, go return
                            	  3100: ;.0001:
                            	  3101: ;	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
                            	  3102: ;	move.l	TextScr,a0				; a0 = screen address
                            	  3103: ;	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  3104: ;.0002:	
                            	  3105: ;	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3106: ;	rte
                            	  3107: 
                            	  3108: nmi_rout:
02:000054E8 48E7C080        	  3109: 	movem.l	d0/d1/a0,-(a7)
02:000054EC 123C004E        	  3110: 	move.b	#'N',d1
02:000054F0 6100E884        	  3111: 	bsr			DisplayChar
02:000054F4 4CDF0103        	  3112: 	movem.l	(a7)+,d0/d1/a0		; return
02:000054F8 4E73            	  3113: 	rte
                            	  3114: 
                            	  3115: brdisp_trap:
02:000054FA 48F9FFFF00040100	  3116: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
02:00005502 33DF00040140    	  3117: 	move.w	(a7)+,Regsave+$40
02:00005508 23DF00040144    	  3118: 	move.l	(a7)+,Regsave+$44
02:0000550E 2E7C00040FFC    	  3119: 	move.l	#$40FFC,a7			; reset stack pointer
02:00005514 46FC2500        	  3120: 	move.w	#$2500,sr				; enable interrupts
02:00005518 43FA0069        	  3121: 	lea			msg_bad_branch_disp,a1
02:0000551C 6100EAB6        	  3122: 	bsr			DisplayString
02:00005520 6100F9D8        	  3123: 	bsr			DisplaySpace
02:00005524 223900040144    	  3124: 	move.l	Regsave+$44,d1	; exception address
02:0000552A 6100F9D6        	  3125: 	bsr			DisplayTetra		; and display it
                            	  3126: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
02:0000552E 6000F88E        	  3127: 	bra			cmdDumpRegs
                            	  3128: 
                            	  3129: illegal_trap:
02:00005532 544F            	  3130: 	addq		#2,sp						; get rid of sr
02:00005534 221F            	  3131: 	move.l	(sp)+,d1				; pop exception address
02:00005536 6100F9CA        	  3132: 	bsr			DisplayTetra		; and display it
02:0000553A 43FA0035        	  3133: 	lea			msg_illegal,a1	; followed by message
02:0000553E 6100EA94        	  3134: 	bsr			DisplayString
                            	  3135: .0001:
02:00005542 60FE            	  3136: 	bra			.0001
02:00005544 6000F3B6        	  3137: 	bra			Monitor
                            	  3138: 	
                            	  3139: ; -----------------------------------------------------------------------------
                            	  3140: ; -----------------------------------------------------------------------------
                            	  3141: 
                            	  3142: msg_start:
02:00005548 726636386B205379	  3143: 	dc.b	"rf68k System Starting",CR,LF,0
02:00005550 7374656D20537461
02:00005558 7274696E67
02:0000555D 0D
02:0000555E 0A
02:0000555F 00
                            	  3144: msg_core_start:
02:00005560 20636F7265207374	  3145: 	dc.b	" core starting",CR,LF,0
02:00005568 617274696E67
02:0000556E 0D
02:0000556F 0A
02:00005570 00
                            	  3146: msg_illegal:
02:00005571 20696C6C6567616C	  3147: 	dc.b	" illegal opcode",CR,LF,0
02:00005579 206F70636F6465
02:00005580 0D
02:00005581 0A
02:00005582 00
                            	  3148: msg_bad_branch_disp:
02:00005583 206272616E636820	  3149: 	dc.b	" branch selfref: ",0
02:0000558B 73656C667265663A
02:00005593 20
02:00005594 00
                            	  3150: msg_test_done:
02:00005595 2043505520746573	  3151: 	dc.b	" CPU test done.",0
02:0000559D 7420646F6E652E
02:000055A4 00
                            	  3152: 
                            	  3153: 
                            	  3154: 
                            	  3155: 


Symbols by name:
ABCD_INNER1                     02:000024D6
ABCD_INNER2                     02:00002544
ABCD_NO_C1                      02:000024F2
ABCD_NO_C2                      02:000024FA
ABCD_NO_C3                      02:00002560
ABCD_NO_C4                      02:00002568
ABCD_OUTER1                     02:000024D4
ABCD_OUTER2                     02:00002542
ACIA                             E:FD060000
ACIA_CMD                         E:00000008
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     02:0000303C
ADDQ_LOOP1                      02:00002856
ADDQ_LOOP2                      02:00002894
ADDQ_LOOP3                      02:000028CA
ADDX_LOOP3                      02:00003162
ADDX_LOOP4                      02:0000317E
ADDX_LOOP5                      02:0000319A
ADDX_OUTER1                     02:000030CE
ADD_OUTER1                      02:00002E62
ADD_OUTER2                      02:00002ED6
ALL_DONE                        02:00000248
AND_OUTER1                      02:00002B80
AND_OUTER2                      02:00002BF4
AUXIN                           02:00005102
ArmAllBreakpoints               02:00005326
ArmBreakpoint                   02:00005356
AsciiToHexNybble                02:00004EAE
AudioInputTest                  02:00005114
BCC1                            02:0000277C
BCC10                           02:000027CE
BCC11                           02:000027D6
BCC12                           02:000027E0
BCC13                           02:000027E8
BCC14                           02:000027F2
BCC2                            02:00002786
BCC3                            02:0000278E
BCC4                            02:00002798
BCC5                            02:000027A0
BCC6                            02:000027AA
BCC7                            02:000027B2
BCC8                            02:000027BC
BCC9                            02:000027C4
BSR_CLOSE1                      02:0000131C
BSR_CLOSE2                      02:00001352
BSR_FAR1                        02:0000024A
BSR_FAR2                        02:0000276C
BlankLastLine                   02:00003F7E
BouncingBalls                   02:00005116
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
CMPA_OUTER1                     02:00002D56
CMPM_LOOP1                      02:00002DE4
CMPM_LOOP2                      02:00002DFE
CMPM_LOOP3                      02:00002E18
CMP_OUTER1                      02:00002CE0
CR                               E:0000000D
CRLF                            02:00003D2C
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLX                            E:00000018
CTRLZ                            E:0000001A
CalcScreenLoc                   02:00003D68
CheckForCtrlC                   02:00004264
CheckForKey                     02:00004220
ClearBreakpointList             02:00005448
ClearScreen                     02:0000511A
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
Cursor1                         02:00004108
CursorCol                        E:00040001
CursorRow                        E:00040000
DBCC_LOOP1                      02:000027FC
DBCC_LOOP2                      02:0000280A
DIVS_OUTER1                     02:00002A40
DIVU_OUTER1                     02:000029EE
Delay3s                         02:00000142
DisarmAllBreakpoints            02:000052FA
DisarmBreakpoint                02:000053D4
DisplayByte                     02:00004F0E
DisplayChar                     02:00003D76
DisplayHelp                     02:000049FC
DisplayMem                      02:00004D62
DisplayNybble                   02:00004F14
DisplaySpace                    02:00004EFA
DisplayString                   02:00003FD4
DisplayStringCRLF               02:00003FEA
DisplayStringLimited            02:00003FF0
DisplayStringLimitedCRLF        02:00004010
DisplayTetra                    02:00004F02
DisplayTwoSpaces                02:00004EE8
DisplayWyde                     02:00004F08
DumpMem1                        02:00004D50
EOR_OUTER2                      02:00002C6A
EXCEPTION_6                     02:00000252
EXCEPTION_7                     02:0000025A
ExecuteCode                     02:00004D22
ForceUnlockSemaphore            02:0000010E
FromScreen                      02:000048E8
GetCmdLine                      02:00004B3C
GetHexNumber                    02:00004E82
GetKey                          02:0000422C
GraphicsDemo                    02:00005118
HelpMsg                         02:00004A08
HomeCursor                      02:00004016
IOFocus                          E:00100000
IncCursorPos                    02:00003EF0
IncCursorRow                    02:00003F10
InitIRQ                         02:0000545A
InitSemaphores                  02:000000C8
InstallIRQ                      02:0000546E
InstalledIRQ                     A:00000400
KEYBD                            E:FD0FFE00
KeybdEcho                        E:0004000C
KeybdGetChar                    02:00004280
KeybdGetCharNoWait              02:00004270
KeybdGetCharWait                02:00004278
KeybdIRQ                        02:00004518
KeybdLEDs                        E:0010000E
KeybdRecvByte                   02:000041D2
KeybdSendByte                   02:00004500
KeybdSetLEDStatus               02:00004494
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     02:000041F2
LEA1                            02:00001D28
LF                               E:0000000A
ListBreakpoints                 02:00005428
LockSemaphore                   02:000000EE
MOVE1                           02:00001996
MOVE2                           02:0000191A
MOVE3                           02:00001A16
MOVE4                           02:00001B70
MULS_OUTER1                     02:00003336
MULU_OUTER1                     02:000032EA
Monitor                         02:000048FC
NBCD_LOOP                       02:000026BC
NBCD_LOOP1                      02:00002702
NBCD_NO_C                       02:000026C8
NBCD_NO_C1                      02:00002716
NBCD_NO_Z                       02:000026CC
NBCD_NO_Z1                      02:0000271A
NextRec                         02:00004F34
NumSetBreakpoints                E:00040202
OR_OUTER1                       02:00002A96
OR_OUTER2                       02:00002B0A
PLIC                             E:FD090000
ProcessBreakpoint               02:000052F4
ProcessRec                      02:00004F46
ProcessS1                       02:00005036
ProcessS2                       02:0000503A
ProcessS3                       02:0000503E
ProcessS7                       02:00005050
ProcessS8                       02:0000505C
ProcessS9                       02:00005068
Prompt1                         02:0000493A
Prompt3                         02:00004924
PromptLn                        02:00004918
ROXx_FLAGS                      02:000035FE
ROXx_LOOP1                      02:00003614
ROXx_LOOP2                      02:00003634
ROXx_LOOP3                      02:00003654
ROXx_LOOP4                      02:00003674
ROXx_LOOP5                      02:00003694
ROXx_LOOP6                      02:000036B6
ROx_FLAGS                       02:000033C8
ROx_LOOP1                       02:000033DE
ROx_LOOP2                       02:000033FE
ROx_LOOP3                       02:0000341E
ROx_LOOP4                       02:0000343E
ROx_LOOP5                       02:0000345E
ROx_LOOP6                       02:00003480
RTR_DONE                        02:0000275E
Regsave                          E:00040100
S1932a                          02:000050AC
S1932b                          02:000050C0
S19Checksum                      E:00100050
S19Get16BitAddress              02:00005074
S19Get24BitAddress              02:00005082
S19Get32BitAddress              02:0000508E
S19StartAddress                  E:00040008
SBCD_INNER1                     02:000025CE
SBCD_INNER2                     02:0000263C
SBCD_NO_C1                      02:000025EA
SBCD_NO_C2                      02:000025F2
SBCD_NO_C3                      02:00002658
SBCD_NO_C4                      02:00002660
SBCD_OUTER1                     02:000025CC
SBCD_OUTER2                     02:0000263A
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SHIFTS2_FLAGS                   02:00003A76
SHIFTS2_LOOP1                   02:00003A8C
SHIFTS2_LOOP2                   02:00003AA8
SHIFTS2_LOOP3                   02:00003AC4
SHIFTS2_LOOP4                   02:00003AE0
SHIFTS2_LOOP5                   02:00003AFC
SHIFTS2_LOOP6                   02:00003B1A
SHIFTS_FLAGS                    02:00003834
SHIFTS_LOOP1                    02:0000384A
SHIFTS_LOOP2                    02:0000386A
SHIFTS_LOOP3                    02:0000388A
SHIFTS_LOOP4                    02:000038AA
SHIFTS_LOOP5                    02:000038CA
SHIFTS_LOOP6                    02:000038EC
SUBA_OUTER1                     02:00003088
SUBQ_LOOP1                      02:00002914
SUBQ_LOOP2                      02:0000294E
SUBQ_LOOP3                      02:00002984
SUBX_LOOP3                      02:00003272
SUBX_LOOP4                      02:0000328E
SUBX_LOOP5                      02:000032AA
SUBX_OUTER1                     02:000031DE
SUB_OUTER1                      02:00002F4C
SUB_OUTER2                      02:00002FC0
ScrollUp                        02:00003F44
SerHeadRcv                       E:00100062
SerRcvBuf                        E:00101000
SerRcvXoff                       E:00100065
SerRcvXon                        E:00100064
SerTailRcv                       E:00100060
SerialGetChar                   02:0000515A
SerialIRQ                       02:00005236
SerialInit                      02:00005128
SerialPeekChar                  02:000051B0
SerialPeekCharDirect            02:000051CE
SerialPutChar                   02:000051EA
SerialRbo                       02:0000520E
SerialRcvCount                  02:00005216
SetKeyboardEcho                 02:00004218
SpuriousIRQ                     02:000054E6
StartMon                        02:000048F2
StubRout                        02:0000413E
SyncCursor                      02:00004028
T15DispatchTable                02:00004068
TEXTREG                          E:FD03FF00
TRAP15                          02:00004052
TextCols                         E:0004008D
TextCurpos                       E:00040002
TextPos                          E:00040002
TextRows                         E:0004008C
TextScr                          E:00040004
TickIRQ                         02:0000549E
UnlockSemaphore                 02:00000128
UpdateTextPos                   02:00003D3E
Wait10ms                        02:00004508
XOFF                             E:00000013
XON                              E:00000011
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdCnt                        E:00100013
_KeybdGetScancode               02:000041C2
_KeybdGetStatus                 02:000041B8
_KeybdHead                       E:00100011
_KeybdInit                      02:000041AA
_KeybdTail                       E:00100012
_keybdControlCodes              02:000047A6
_keybdExtendedCodes             02:00004826
_shiftedScanCodes               02:000046A6
_unshiftedScanCodes             02:000045A6
bkColor                          E:00040088
brdisp_trap                     02:000054FA
bus_err                         02:000052B2
clear_screen                    02:00003CD4
cmdBreakpoint                   02:00004992
cmdClearScreen                  02:000049CC
cmdCore                         02:000049D8
cmdDispatch                     02:0000494C
cmdDumpMemory                   02:00004D30
cmdDumpRegs                     02:00004DBE
cmdEditMemory                   02:00004CC2
cmdFillB                        02:00004C44
cmdFillL                        02:00004C8C
cmdFillW                        02:00004C68
cmdHelp                         02:000049FC
cmdJump                         02:00004D22
cmdLoadS19                      02:00004F2E
cmdMonitor                      02:000048FC
cmdReceiveSerial                02:00004C10
cmdSendSerial                   02:00004BE0
cmdString                       02:000048A6
cmdTable                        02:000048C4
cmdTestCPU                      02:000049BC
cmdTestSerialReceive            02:00004E68
cmdTinyBasic                    02:000049B6
cpu_test                        02:00000166
dccr                            02:00003DA0
dclf                            02:00003E70
dcx10                           02:00003E08
dcx11                           02:00003E2A
dcx12                           02:00003E20
dcx14                           02:00003D96
dcx16                           02:00003E74
dcx4                            02:00003E78
dcx6                            02:00003DBE
dcx7                            02:00003D9A
dcx8                            02:00003DD4
dcx9                            02:00003DEA
dly3s1                          02:00000152
dly3s2                          02:00000150
doBackspace                     02:00003E82
doCtrlX                         02:00003ECC
doDelete                        02:00003E90
do_nothing                      02:000000C2
dspj1                           02:00003FD8
dspmem1                         02:00004D72
dspspc1                         02:00004EF2
dsret                           02:00003FE4
edtmem1                         02:00004CCA
fgColor                          E:00040084
get_screen_address              02:00003CCC
get_screen_color                02:00003CA0
gthx3                           02:00004EE4
gthx5                           02:00004EC0
gthx6                           02:00004ED2
icc1                            02:00003F42
ignBlanks                       02:00004CB0
illegal_trap                    02:00005532
init_plic                       02:0000417E
irq3_rout                       02:000054C0
irq6_rout                       02:000054CA
irq_rout                        02:000054D2
leds                             E:FD0FFF00
loop1                           02:0000009C
loop2                           02:0000009A
loop3                           02:00003CFE
msgHello                        02:00004B2A
msgUnknownCmd                   02:00004B1A
msg_bad_branch_disp             02:00005583
msg_core_start                  02:00005560
msg_illegal                     02:00005571
msg_reglist                     02:00004E42
msg_regs                        02:00004E3E
msg_start                       02:00005548
msg_test_done                   02:00005595
nmeSerial                       02:000052AA
nmi_rout                        02:000054E8
notRxInt                        02:000052A4
numBreakpoints                   E:00000008
op_ABCD                         02:000024B4
op_ADD                          02:00002E42
op_ADDA                         02:00003016
op_ADDQ                         02:00002842
op_ADDX                         02:000030AE
op_ADD_I                        02:00001542
op_AND                          02:00002B60
op_ANDI_TO_CCR                  02:000002F2
op_ANDI_TO_SR                   02:00000318
op_BCC                          02:00002774
op_BCHG                         02:000006E8
op_BCLR                         02:00000A50
op_BOOL_I                       02:00001172
op_BSET                         02:00000D9E
op_BSR                          02:00001324
op_BTST                         02:0000033E
op_BTST0                        02:000004C8
op_BTST1                        02:000004D4
op_BTST10                       02:0000051C
op_BTST11                       02:00000524
op_BTST12                       02:0000052A
op_BTST2                        02:000004DC
op_BTST20                       02:00000682
op_BTST21                       02:0000068C
op_BTST22                       02:00000692
op_BTST23                       02:00000698
op_BTST24                       02:0000069E
op_BTST25                       02:000006A4
op_BTST26                       02:000006AA
op_BTST27                       02:000006B0
op_BTST28                       02:000006B6
op_BTST29                       02:000006BC
op_BTST3                        02:000004E4
op_BTST30                       02:000006C2
op_BTST31                       02:000006C8
op_BTST32                       02:000006CC
op_BTST4                        02:000004EC
op_BTST5                        02:000004F4
op_BTST6                        02:000004FC
op_BTST7                        02:00000504
op_BTST8                        02:0000050C
op_BTST9                        02:00000514
op_CHK                          02:00001DCE
op_CMP                          02:00002CC0
op_CMPA                         02:00002D36
op_CMPM                         02:00002D9C
op_CMP_I                        02:0000135A
op_DBCC                         02:000027F4
op_DIVS                         02:00002A24
op_DIVU                         02:000029D2
op_EOR                          02:00002C4A
op_EORI_TO_CCR                  02:000002A6
op_EORI_TO_SR                   02:000002CC
op_EXG                          02:00003366
op_EXT                          02:00001C4E
op_LEAPEA                       02:00001C90
op_LINKS                        02:00001DA0
op_MOVE                         02:0000184E
op_MOVEM                        02:00002196
op_MOVEP                        02:000010E6
op_MOVEQ                        02:000029B6
op_MOVE_USP                     02:00001DBE
op_MOVE_xxx_FLAGS               02:00001A5A
op_MULS                         02:0000331A
op_MULU                         02:000032CE
op_NBCD                         02:000026A4
op_NEGS                         02:00001E08
op_OR                           02:00002A76
op_ORI_TO_CCR                   02:00000262
op_ORI_TO_SR                    02:00000284
op_ROXx                         02:0000360A
op_ROx                          02:000033D4
op_RTR                          02:00002752
op_SBCD                         02:000025AC
op_SCC                          02:0000281A
op_SHIFTS                       02:00003840
op_SHIFTS2                      02:00003A82
op_SUB                          02:00002F2C
op_SUBA                         02:00003062
op_SUBQ                         02:000028FC
op_SUBX                         02:000031BE
op_SUB_I                        02:000016C8
op_SWAP                         02:00001C7A
op_TAS                          02:00001D3C
op_TRAPV                        02:00002736
op_TST                          02:00001D62
pcssxa                          02:00004FD8
rbo                             02:00005120
rotate_iofocus                  02:00004152
sGetChar                        02:00005102
select_focus1                   02:00004164
select_iofocus                  02:00004140
semamem                          E:FD050000
sirq0001                        02:00005254
sirqNxtByte                     02:0000523E
sirqRxFull                      02:000052A4
start                           02:00000000
start_other                     02:000000AE
trap3                           02:000052B6

Symbols by value:
FD03FF00 TEXTREG
FD050000 semamem
FD060000 ACIA
FD090000 PLIC
FD0FFE00 KEYBD
FD0FFF00 leds
00000000 ACIA_RX
00000000 ACIA_TX
00000000 start
00000003 CTRLC
00000004 ACIA_STAT
00000008 numBreakpoints
00000008 ACIA_CMD
00000008 CTRLH
0000000A LF
0000000C ACIA_CTRL
0000000D SC_TAB
0000000D CR
00000011 SC_ALT
00000011 XON
00000012 SC_LSHIFT
00000013 XOFF
00000014 SC_CTRL
00000018 CTRLX
0000001A CTRLZ
00000058 SC_CAPSLOCK
00000059 SC_RSHIFT
00000077 SC_NUMLOCK
0000007E SC_SCROLLLOCK
0000009A loop2
0000009C loop1
000000AE start_other
000000C2 do_nothing
000000C8 InitSemaphores
000000E0 SC_EXTEND
000000EE LockSemaphore
000000F0 SC_KEYUP
0000010E ForceUnlockSemaphore
00000128 UnlockSemaphore
00000142 Delay3s
00000150 dly3s2
00000152 dly3s1
00000166 cpu_test
00000248 ALL_DONE
0000024A BSR_FAR1
00000252 EXCEPTION_6
0000025A EXCEPTION_7
00000262 op_ORI_TO_CCR
00000284 op_ORI_TO_SR
000002A6 op_EORI_TO_CCR
000002CC op_EORI_TO_SR
000002F2 op_ANDI_TO_CCR
00000318 op_ANDI_TO_SR
0000033E op_BTST
00000400 InstalledIRQ
000004C8 op_BTST0
000004D4 op_BTST1
000004DC op_BTST2
000004E4 op_BTST3
000004EC op_BTST4
000004F4 op_BTST5
000004FC op_BTST6
00000504 op_BTST7
0000050C op_BTST8
00000514 op_BTST9
0000051C op_BTST10
00000524 op_BTST11
0000052A op_BTST12
00000682 op_BTST20
0000068C op_BTST21
00000692 op_BTST22
00000698 op_BTST23
0000069E op_BTST24
000006A4 op_BTST25
000006AA op_BTST26
000006B0 op_BTST27
000006B6 op_BTST28
000006BC op_BTST29
000006C2 op_BTST30
000006C8 op_BTST31
000006CC op_BTST32
000006E8 op_BCHG
00000A50 op_BCLR
00000D9E op_BSET
000010E6 op_MOVEP
00001172 op_BOOL_I
0000131C BSR_CLOSE1
00001324 op_BSR
00001352 BSR_CLOSE2
0000135A op_CMP_I
00001542 op_ADD_I
000016C8 op_SUB_I
0000184E op_MOVE
0000191A MOVE2
00001996 MOVE1
00001A16 MOVE3
00001A5A op_MOVE_xxx_FLAGS
00001B70 MOVE4
00001C4E op_EXT
00001C7A op_SWAP
00001C90 op_LEAPEA
00001D28 LEA1
00001D3C op_TAS
00001D62 op_TST
00001DA0 op_LINKS
00001DBE op_MOVE_USP
00001DCE op_CHK
00001E08 op_NEGS
00002196 op_MOVEM
000024B4 op_ABCD
000024D4 ABCD_OUTER1
000024D6 ABCD_INNER1
000024F2 ABCD_NO_C1
000024FA ABCD_NO_C2
00002542 ABCD_OUTER2
00002544 ABCD_INNER2
00002560 ABCD_NO_C3
00002568 ABCD_NO_C4
000025AC op_SBCD
000025CC SBCD_OUTER1
000025CE SBCD_INNER1
000025EA SBCD_NO_C1
000025F2 SBCD_NO_C2
0000263A SBCD_OUTER2
0000263C SBCD_INNER2
00002658 SBCD_NO_C3
00002660 SBCD_NO_C4
000026A4 op_NBCD
000026BC NBCD_LOOP
000026C8 NBCD_NO_C
000026CC NBCD_NO_Z
00002702 NBCD_LOOP1
00002716 NBCD_NO_C1
0000271A NBCD_NO_Z1
00002736 op_TRAPV
00002752 op_RTR
0000275E RTR_DONE
0000276C BSR_FAR2
00002774 op_BCC
0000277C BCC1
00002786 BCC2
0000278E BCC3
00002798 BCC4
000027A0 BCC5
000027AA BCC6
000027B2 BCC7
000027BC BCC8
000027C4 BCC9
000027CE BCC10
000027D6 BCC11
000027E0 BCC12
000027E8 BCC13
000027F2 BCC14
000027F4 op_DBCC
000027FC DBCC_LOOP1
0000280A DBCC_LOOP2
0000281A op_SCC
00002842 op_ADDQ
00002856 ADDQ_LOOP1
00002894 ADDQ_LOOP2
000028CA ADDQ_LOOP3
000028FC op_SUBQ
00002914 SUBQ_LOOP1
0000294E SUBQ_LOOP2
00002984 SUBQ_LOOP3
000029B6 op_MOVEQ
000029D2 op_DIVU
000029EE DIVU_OUTER1
00002A24 op_DIVS
00002A40 DIVS_OUTER1
00002A76 op_OR
00002A96 OR_OUTER1
00002B0A OR_OUTER2
00002B60 op_AND
00002B80 AND_OUTER1
00002BF4 AND_OUTER2
00002C4A op_EOR
00002C6A EOR_OUTER2
00002CC0 op_CMP
00002CE0 CMP_OUTER1
00002D36 op_CMPA
00002D56 CMPA_OUTER1
00002D9C op_CMPM
00002DE4 CMPM_LOOP1
00002DFE CMPM_LOOP2
00002E18 CMPM_LOOP3
00002E42 op_ADD
00002E62 ADD_OUTER1
00002ED6 ADD_OUTER2
00002F2C op_SUB
00002F4C SUB_OUTER1
00002FC0 SUB_OUTER2
00003016 op_ADDA
0000303C ADDA_OUTER1
00003062 op_SUBA
00003088 SUBA_OUTER1
000030AE op_ADDX
000030CE ADDX_OUTER1
00003162 ADDX_LOOP3
0000317E ADDX_LOOP4
0000319A ADDX_LOOP5
000031BE op_SUBX
000031DE SUBX_OUTER1
00003272 SUBX_LOOP3
0000328E SUBX_LOOP4
000032AA SUBX_LOOP5
000032CE op_MULU
000032EA MULU_OUTER1
0000331A op_MULS
00003336 MULS_OUTER1
00003366 op_EXG
000033C8 ROx_FLAGS
000033D4 op_ROx
000033DE ROx_LOOP1
000033FE ROx_LOOP2
0000341E ROx_LOOP3
0000343E ROx_LOOP4
0000345E ROx_LOOP5
00003480 ROx_LOOP6
000035FE ROXx_FLAGS
0000360A op_ROXx
00003614 ROXx_LOOP1
00003634 ROXx_LOOP2
00003654 ROXx_LOOP3
00003674 ROXx_LOOP4
00003694 ROXx_LOOP5
000036B6 ROXx_LOOP6
00003834 SHIFTS_FLAGS
00003840 op_SHIFTS
0000384A SHIFTS_LOOP1
0000386A SHIFTS_LOOP2
0000388A SHIFTS_LOOP3
000038AA SHIFTS_LOOP4
000038CA SHIFTS_LOOP5
000038EC SHIFTS_LOOP6
00003A76 SHIFTS2_FLAGS
00003A82 op_SHIFTS2
00003A8C SHIFTS2_LOOP1
00003AA8 SHIFTS2_LOOP2
00003AC4 SHIFTS2_LOOP3
00003AE0 SHIFTS2_LOOP4
00003AFC SHIFTS2_LOOP5
00003B1A SHIFTS2_LOOP6
00003CA0 get_screen_color
00003CCC get_screen_address
00003CD4 clear_screen
00003CFE loop3
00003D2C CRLF
00003D3E UpdateTextPos
00003D68 CalcScreenLoc
00003D76 DisplayChar
00003D96 dcx14
00003D9A dcx7
00003DA0 dccr
00003DBE dcx6
00003DD4 dcx8
00003DEA dcx9
00003E08 dcx10
00003E20 dcx12
00003E2A dcx11
00003E70 dclf
00003E74 dcx16
00003E78 dcx4
00003E82 doBackspace
00003E90 doDelete
00003ECC doCtrlX
00003EF0 IncCursorPos
00003F10 IncCursorRow
00003F42 icc1
00003F44 ScrollUp
00003F7E BlankLastLine
00003FD4 DisplayString
00003FD8 dspj1
00003FE4 dsret
00003FEA DisplayStringCRLF
00003FF0 DisplayStringLimited
00004010 DisplayStringLimitedCRLF
00004016 HomeCursor
00004028 SyncCursor
00004052 TRAP15
00004068 T15DispatchTable
00004108 Cursor1
0000413E StubRout
00004140 select_iofocus
00004152 rotate_iofocus
00004164 select_focus1
0000417E init_plic
000041AA _KeybdInit
000041B8 _KeybdGetStatus
000041C2 _KeybdGetScancode
000041D2 KeybdRecvByte
000041F2 KeybdWaitTx
00004218 SetKeyboardEcho
00004220 CheckForKey
0000422C GetKey
00004264 CheckForCtrlC
00004270 KeybdGetCharNoWait
00004278 KeybdGetCharWait
00004280 KeybdGetChar
00004494 KeybdSetLEDStatus
00004500 KeybdSendByte
00004508 Wait10ms
00004518 KeybdIRQ
000045A6 _unshiftedScanCodes
000046A6 _shiftedScanCodes
000047A6 _keybdControlCodes
00004826 _keybdExtendedCodes
000048A6 cmdString
000048C4 cmdTable
000048E8 FromScreen
000048F2 StartMon
000048FC cmdMonitor
000048FC Monitor
00004918 PromptLn
00004924 Prompt3
0000493A Prompt1
0000494C cmdDispatch
00004992 cmdBreakpoint
000049B6 cmdTinyBasic
000049BC cmdTestCPU
000049CC cmdClearScreen
000049D8 cmdCore
000049FC DisplayHelp
000049FC cmdHelp
00004A08 HelpMsg
00004B1A msgUnknownCmd
00004B2A msgHello
00004B3C GetCmdLine
00004BE0 cmdSendSerial
00004C10 cmdReceiveSerial
00004C44 cmdFillB
00004C68 cmdFillW
00004C8C cmdFillL
00004CB0 ignBlanks
00004CC2 cmdEditMemory
00004CCA edtmem1
00004D22 ExecuteCode
00004D22 cmdJump
00004D30 cmdDumpMemory
00004D50 DumpMem1
00004D62 DisplayMem
00004D72 dspmem1
00004DBE cmdDumpRegs
00004E3E msg_regs
00004E42 msg_reglist
00004E68 cmdTestSerialReceive
00004E82 GetHexNumber
00004EAE AsciiToHexNybble
00004EC0 gthx5
00004ED2 gthx6
00004EE4 gthx3
00004EE8 DisplayTwoSpaces
00004EF2 dspspc1
00004EFA DisplaySpace
00004F02 DisplayTetra
00004F08 DisplayWyde
00004F0E DisplayByte
00004F14 DisplayNybble
00004F2E cmdLoadS19
00004F34 NextRec
00004F46 ProcessRec
00004FD8 pcssxa
00005036 ProcessS1
0000503A ProcessS2
0000503E ProcessS3
00005050 ProcessS7
0000505C ProcessS8
00005068 ProcessS9
00005074 S19Get16BitAddress
00005082 S19Get24BitAddress
0000508E S19Get32BitAddress
000050AC S1932a
000050C0 S1932b
00005102 AUXIN
00005102 sGetChar
00005114 AudioInputTest
00005116 BouncingBalls
00005118 GraphicsDemo
0000511A ClearScreen
00005120 rbo
00005128 SerialInit
0000515A SerialGetChar
000051B0 SerialPeekChar
000051CE SerialPeekCharDirect
000051EA SerialPutChar
0000520E SerialRbo
00005216 SerialRcvCount
00005236 SerialIRQ
0000523E sirqNxtByte
00005254 sirq0001
000052A4 sirqRxFull
000052A4 notRxInt
000052AA nmeSerial
000052B2 bus_err
000052B6 trap3
000052F4 ProcessBreakpoint
000052FA DisarmAllBreakpoints
00005326 ArmAllBreakpoints
00005356 ArmBreakpoint
000053D4 DisarmBreakpoint
00005428 ListBreakpoints
00005448 ClearBreakpointList
0000545A InitIRQ
0000546E InstallIRQ
0000549E TickIRQ
000054C0 irq3_rout
000054CA irq6_rout
000054D2 irq_rout
000054E6 SpuriousIRQ
000054E8 nmi_rout
000054FA brdisp_trap
00005532 illegal_trap
00005548 msg_start
00005560 msg_core_start
00005571 msg_illegal
00005583 msg_bad_branch_disp
00005595 msg_test_done
00040000 CursorRow
00040001 CursorCol
00040002 TextCurpos
00040002 TextPos
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
00100000 IOFocus
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100020 _KeybdBuf
00100050 S19Checksum
00100060 SerTailRcv
00100062 SerHeadRcv
00100064 SerRcvXon
00100065 SerRcvXoff
00101000 SerRcvBuf
